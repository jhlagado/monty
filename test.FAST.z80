.engine mycomputer

.include "constants.asm"
.include "test.fast.mac.asm"

.include "IOSerial.asm"

    jp testsStart

.include "MAIN.asm"

.align $100
testsStart:


    ; call printStr
    ; .cstr "Done!"
    ; HALT

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    test "/f", false
    test "/t", true
    test "1", 1
    test "2", 2
    test "1", 1
    test "0", 0
    test "10", 10
    test "123", 123
    test "-1",-1
    test "''", 0
    test "'a'", $61
    test "'\\''", $27
    test "#10", $10
    test "#FF", $FF
    test "-1 2 +",1
    test "-1 1 +",0
    test "1 2 +", 3
    test "4 1 2 +", 3
    test "123 456 +", 123+456
    test "64 128 +", 64+128
    test "1 2 +", 3
    test "1a= a++ a",2
    test "-1 -1 -",0
    test "5 3 -", 2
    test "2 1 -",1
    test "3a= a-- a",2
    test "3 5 &", 1
    test "3 5 |", 7
    test "3 5 /x", 6
    test "3a= 5 a/x a= a",6
    test "2 3 *", 6
    test "1 2 3 + *", 5
    test "7 3 /", 2
    test "7 3 / _", 1
    test "7 3 /", 2
    test "2 3 ==", FALSE
    test "3 3 ==", TRUE
    test "1 2 <", TRUE
    test "2 1 <", FALSE
    test "2 3 <", TRUE
    test "3 3 <", FALSE
    test "1 2 >", FALSE
    test "2 1 >", TRUE
    test "3 3 >", FALSE
    test "4 3 >", TRUE
    test "2 2 <=", TRUE
    test "2 2 >=", TRUE
    test "3 1 <<", 6
    test "10 1 >>", 5
    test "1 x = x", 1
    test "1{}^", 1
    test "{1}^", 1
    test "{{1}^}^", 1
    test "{{{1}^}^}^", 1
    test "5 /f{10} ?", 5
    test "5 /t{10} ? +", 15
    test "1 /f{10}{20} ?? +", 21
    test "1 /t{10}{20} ?? +", 11
    test ": -2%", $0000
    test ":a -1%", $0001
    test ":a: -1%", $0001
    test ":a:b -1%", $0102
    test "::b -1%", $0101
    test ":{2};^", 2
    test ":a{2};^", 2
    test "5 :a{$a};^", 5
    test "5 :a:b{$a};^", 5
    test ":a{{2}^};^", 2
    test "1 5 :a{{$a}^};^", 5
    test "1 5 :ab{{$a}^};^", 1
    test "1 5 :a{{$a 2 +}^};^", 7
    test "1 5 :ab{{$a $b +}^};^", 6
    test ":a{2}; x= 1 x^", 2
    test ":a{$a}; x= 0 1 x^", 1
    test ":ab{$b}; x= 1 2 x^", 2
    test ":a:b{$a}; x= 1 2 x^", 2
    test ":ab{$b}; x= 1 2 x^", 2
    test ":ab{$b $a}; x= 10 15 x^ -", 5
    test ":a:b{2}; x= 1 x^", 2
    test "::b{100 $b= $b}; x= x^", 100
    test ":a:b{1 $b= $b}; x= 2 x^", 1
    test ":a:b{$a $b= $b}; x= 2 x^", 2
    test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
    test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
    test "[10 20 30] 1%", 20
    test "[10 20 30 40] /s", 4
    test "/c [1 2 3] 1%", 2
    test "/c ['A' 'B' 'C'] 1%", 66
    test "[{10}{20}{30}] 0%^ ", 10
    test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
    test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
    test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
    test "5 [4] :a{$a}; /pa ^", 4
    test "5 [4] :ab{$a $b +}; /pa ^", 9
    test "3i= ( i i-- i/br )^ + +", 6
    test "3i= [ ( i i-- i/br )^ ] 1%", 2
    test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
    test "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^", 6
    test "'A' 1 - /ad", NUL
    test "'Z' 1 + /ad", NUL
    test "'a' 1 - /ad", NUL
    test "'z' 1 + /ad", NUL
    test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
    test "'a' /ad", VARS + ("Z"-"A"+1)*2
    test "'Z' /ad", VARS + ("Z"-"A")*2
    test "'A' /ad", VARS
    test "-1. /c/vB 0%", $2D
    test "`A`.s /c/vB 0%", 65
    test "123. /c/vB 1%", $32
    test "#4321 /h. /c/vB 0%", $23

   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    call printStr
    .cstr "Done!"
    HALT
    
.align 2
; printer:
;     pop hl
;     call prtdec
;     jp (ix)

; executes a null teminated string (null executes exit_)
; the string should be immedaitely following the call
execStr:                       ; create a root stack frame
    pop bc                     ; bc = code*
    dec bc                     ; dec to prepare for next routine
    ld de,0
    push de                    ; push fake IP
    push de                    ; push null arg_list*
    push de                    ; push null first_arg*
    push de                    ; push fake BP
    jp (ix) 


.include "ram.asm"