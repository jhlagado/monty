.engine mycomputer

.include "constants.asm"
.include "test.fast.mac.asm"

.include "IOSerial.asm"

    jp testsStart

.include "MAIN.asm"

FUNC f1, 2, "besIA"                         ; range source                  
db "{"
db      "[%b /t] %I="                       ; init mutable I [index active]                           
db      ":kt{"                            
db          "0%t==/br"                      ; break if type != 0 
db          ":dt{"                          ; return talkback to receive data
db              "%I1#/br"                   ; if not active don't send
db              "%I0# %A="
db              "%s %I0# + %I0#="           ; inc value of I by s
db              "1%t==/br"                  ; break if type != 0
db              "%A %e <"                   ; cond: in range?
db              "{%A 1 %k/rc}"              ; ifte args to send to sink,
db              "{/f %I1#= 0 2 %k/rc} "     ; note: /rc recur
db              "?? "                        
db          "}; 0 %k^"                      ; init sink
db      "};" 
db "}" 
db 0

FUNC f2, 0, "sf"                            ; map                 
db "{"
db      ":kt{"                              ; line 24
db          "0%t==/br"                      ; break if type != 0  
db          ":dt{"                          ; call source with tb
db              "{1%t==/br %d %f^ %t %k/rc}^"      ; todo: add function
db              "{1%t!=/br %d %t %k/rc}^"
db          "}; 0 %s^" 
db      "};" 
db "}" 
db 0

FUNC f3, 1, "spT"                           ; forEach                 
db "{"
db      "[0]%T="
db      ":dt{"                              ; return talkback to receive data
db          "{ 0%t==/br %d %T0#= }^"        ; 0: store talkback
db          "%T0#/br"       
db          "{ 1%t==/br %d %p^ }^"          ; 1: send data to proc
db          "{ 2%t!=/br 0 1 %T0#^ }^"       ; 0 or 1: get next data item
db          "{ 2%t==/br 0 %T0#= }^"       
db      "}; 0 %s^" 
db "}" 
db 0

FUNC f4, 1, "sT"                            ; sink                 
; db "{"
; db      "`f4`.s %s."                                
; db      "[0]%T="
; db      ":dt{"                              ; return talkback to receive data
; ; db          "`f4-a`.s %d."                                
; db          "{ 0%t==/br %d %T0#= }^"        ; 0: store talkback
; db          "{ 1%t==/br %d. }^"          ; 1: send data to proc
; db          "{ 2%t!=/br 0 1 %T0#^ }^"       ; 0 or 1: get next data item
; db      "}; 0 %s^" 
; db "}" 
db 0

.align $100
testsStart:

    ; test "0 10 1 /f1 :a{%a.}; /f2", 0
    test "0 10 1 /f1 :a{1 %a +}; /f2 :a{%a.}; /f3", 0

    call printStr
    .cstr "Done!"
    HALT

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    test "/f", false
    test "/t", true
    test "1", 1
    test "2", 2
    test "1", 1
    test "0", 0
    test "10", 10
    test "123", 123
    test "-1",-1
    test "''", 0
    test "'a'", $61
    test "'\\''", $27
    test "$10", $10
    test "$FF", $FF
    test "-1 2 +",1
    test "-1 1 +",0
    test "1 2 +", 3
    test "4 1 2 +", 3
    test "123 456 +", 123+456
    test "64 128 +", 64+128
    test "1 2 +", 3
    test "1a= a++ a",2
    test "-1 -1 -",0
    test "5 3 -", 2
    test "2 1 -",1
    test "3a= a-- a",2
    test "3 5 &", 1
    test "3 5 |", 7
    test "3 5 /x", 6
    test "3a= 5 a/x a= a",6
    test "2 3 *", 6
    test "1 2 3 + *", 5
    test "7 3 /", 2
    test "100a= 1a+= a", 101
    test "100a= a1-= a", 99
    test "100a= a2*= a", 200
    test "100a= a2/= a", 50
    test "7 3 / /re", 1
    test "7 3 /", 2
    test "2 3 ==", FALSE
    test "3 3 ==", TRUE
    test "1 2 <", TRUE
    test "2 1 <", FALSE
    test "2 3 <", TRUE
    test "3 3 <", FALSE
    test "1 2 >", FALSE
    test "2 1 >", TRUE
    test "3 3 >", FALSE
    test "4 3 >", TRUE
    test "2 2 <=", TRUE
    test "2 2 >=", TRUE
    test "3 1 <<", 6
    test "10 1 >>", 5
    test "1 x = x", 1
    test "1{}^", 1
    test "{1}^", 1
    test "{{1}^}^", 1
    test "{{{1}^}^}^", 1
    test "5 /f{10} ?", 5
    test "5 /t{10} ? +", 15
    test "1 /f{10}{20} ?? +", 21
    test "1 /t{10}{20} ?? +", 11
    test ": 0#", $0000
    test ":a 0#", $0100
    test ":a: 0#", $0100
    test ":a:b 0#", $0201
    test "::b 0#", $0101
    test ":{2};^", 2
    test ":a{2};^", 2
    test "5 :a{%a};^", 5
    test "5 :a:b{%a};^", 5
    test ":a{{2}^};^", 2
    test "1 5 :a{{%a}^};^", 5
    test "1 5 :ab{{%a}^};^", 1
    test "1 5 :a{{%a 2 +}^};^", 7
    test "1 5 :ab{{%a %b +}^};^", 6
    test ":a{2}; x= 1 x^", 2
    test ":a{%a}; x= 0 1 x^", 1
    test ":ab{%b}; x= 1 2 x^", 2
    test ":a:b{%a}; x= 1 2 x^", 2
    test ":ab{%b}; x= 1 2 x^", 2
    test ":ab{%b %a}; x= 10 15 x^ -", 5
    test ":a:b{2}; x= 1 x^", 2
    test "::b{100 %b = %b}; x= x^", 100
    test ":a:b{1 %b = %b}; x= 2 x^", 1
    test ":a:b{%a %b = %b}; x= 2 x^", 2
    test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
    test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
    test "[10 20 30] 1#", 20
    test "[10 20 30 40] /s", 4
    test "/c [1 2 3] 1#", 2
    test "/c ['A' 'B' 'C'] 1#", 66
    test "[{10}{20}{30}] 0#^ ", 10
    test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
    test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
    test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
    test "3i= ( i i-- i/br )^ + +", 6
    test "3i= [ ( i i-- i/br )^ ] 1#", 2
    test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
    test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
    test "/t :f{1 %f/br 2 +};^",3
    test "/f :f{1 %f/br 2 +};^",1
    test "'A' 1 - /ad", NUL
    test "'Z' 1 + /ad", NUL
    test "'a' 1 - /ad", NUL
    test "'z' 1 + /ad", NUL
    test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
    test "'a' /ad", VARS + ("Z"-"A"+1)*2
    test "'Z' /ad", VARS + ("Z"-"A")*2
    test "'A' /ad", VARS
    test "-1. /c/vB 0#", $2D
    test {DQ,"A",DQ,".s /c/vB 0#"}, 65
    test "123. /c/vB 1#", $32
    test ":a{%a}; F=1F^", 1
    test "1 :b{:a{%a};};^F= 3F^",3
    test "1 :b{:a{%a%b-};};^F= 3F^",2
    test "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",1
    test "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",1
    test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",2

   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    call printStr
    .cstr "Done!"
    HALT
    
.include "test.fast.util.asm"
.include "ram.asm"
