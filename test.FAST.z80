.engine mycomputer

.include "constants.asm"
.include "test.fast.mac.asm"

.include "IOSerial.asm"

    ld SP,STACK
    call init
    jp testsStart

.include "monty.asm"

.align $100
testsStart:


    ; call printStr
    ; .cstr "Done!"
    ; HALT

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    test "/F", false
    test "/T", true
    test "1", 1
    test "2", 2
    test "1", 1
    test "0", 0
    test "10", 10
    test "123", 123
    test "-1",-1
    test "''", 0
    test "'a'", $61
    test "'\\''", $27
    test "#10", $10
    test "#FF", $FF
    test "-1 2 +",1
    test "-1 1 +",0
    test "1 2 +", 3
    test "4 1 2 +", 3
    test "123 456 +", 123+456
    test "64 128 +", 64+128
    test "1 2 +", 3
    test "1 a= a++ a",2
    test "1 a= 2 a += a",3
    test "-1 -1 -",0
    test "5 3 -", 2
    test "2 1 -",1
    test "3 a= a-- a",2
    test "4 a= a 2 -= a",2
    test "3 5 &", 1
    test "3 a= 5 a &= a",1
    test "3 5 |", 7
    test "3 a= 5 a |= a",7
    test "3 5 ^", 6
    test "3 a= 5 a ^= a",6
    test "2 3 *", 6
    test "3 x= 2 x *= x",6 
    test "1 2 3 + *", 5
    test "7 3 /", 2
    test "7 x= x 3 /= x", 2
    test "7 3 / _", 1
    test "7 3 /", 2
    test "2 3 ==", FALSE
    test "3 3 ==", TRUE
    test "1 2 <", TRUE
    test "2 1 <", FALSE
    test "2 3 <", TRUE
    test "3 3 <", FALSE
    test "1 2 >", FALSE
    test "2 1 >", TRUE
    test "3 3 >", FALSE
    test "4 3 >", TRUE
    test "2 2 <=", TRUE
    test "2 2 >=", TRUE
    test "3 1 <<", 6
    test "10 1 >>", 5
    test "1 x = x", 1
    test "1{}:", 1
    test "{1}:", 1
    test "{{1}:}:", 1
    test "{{{1}:}:}:", 1
    test "5 /F {10} ?", 5
    test "5 /T {10} ? +", 15
    test "1 /F {10} {20} ?? +", 21
    test "1 /T {10} {20} ?? +", 11
    test "() -2%", $0000
    test "(a) -1%", $0001
    test "(a:) -1%", $0001
    test "(a:b) -1%", $0102
    test "(:b) -1%", $0101
    test "() {2} /f:", 2
    test "(a) {2} /f:", 2
    test "5 (a) {$a} /f:", 5
    test "5 (a:b) {$a} /f:", 5
    test "(a) {{2}:} /f:", 2
    test "1 5 (a) {{$a}:} /f:", 5
    test "1 5 (ab) {{$a}:} /f:", 1
    test "1 5 (a) {{$a 2 +}:} /f:", 7
    test "1 5 (ab) {{$a $b +}:} /f:", 6
    test "(a) {2} /f x= 1 x:", 2
    test "(a) {$a} /f x= 0 1 x:", 1
    test "(ab) {$b} /f x= 1 2 x:", 2
    test "(a:b) {$a} /f x= 1 2 x:", 2
    test "(ab) {$b} /f x= 1 2 x:", 2
    test "(ab) {$b $a} /f x= 10 15 x: -", 5
    test "(a:b) {2} /f x= 1 x:", 2
    test "(:b) {100 $b= $b} /f x= x:", 100
    test "(a:b) {1 $b= $b} /f x= 2 x:", 1
    test "(a:b) {$a $b= $b} /f x= 2 x:", 2
    test "1 10 20 (ab) {/T {$a} {$b} ??} /f: +", 11
    test "1 10 20 (ab) {/F {$a} {$b} ??} /f: +", 21
    test "[10 20 30] 1%", 20
    test "/b [1 2 3] 1%", 2
    test "/b ['A' 'B' 'C'] 1%", 66
    test "0 [{10} {20} {30}] /s", 10
    test "1 10 20 (ab) {0 [{$a} {$b}] /s} /f:", 10
    test "0 10 20 (iab) {$i [{$a} {$b}] /s} /f:", 10
    test "1 10 20 (iab) {$i [{$a} {$b}] /s} /f:", 20
    test "5 [4] (a) {$a} /f /p :", 4
    test "5 [4] (ab) {$a $b +} /f /p :", 9
    test "3i= { i i--  i/x /z} /r + +", 6
    test "0 j= 4 i= { j i+ j= i /x i 1 -= /z} /r j ", 10
    test "3i= [ { i i--  i/x /z} /r ] 1%", 2

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    call printStr
    .cstr "Done!"
    HALT
    
.align 2
printer:
    pop hl
    call prtdec
    jp (ix)

; executes a null teminated string (null executes exit_)
; the string should be immedaitely following the call
execStr:                        ; create a root stack frame
    pop bc                      ; bc = code*
    dec bc                      ; dec to prepare for next routine
    ld de,0
    push de                     ; push fake IP
    push de                     ; push null arg_list*
    push de                     ; push null first_arg*
    push de                     ; push fake BP
    jp (ix) 


.include "ram.asm"
