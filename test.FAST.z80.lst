0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4E               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4E               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4E               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4E               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4E               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4E               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4E               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4E               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4E               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4E               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4E               LD   (RST08),HL   
0094   22 D2 4E               LD   (RST10),HL   
0097   22 D4 4E               LD   (RST18),HL   
009A   22 D6 4E               LD   (RST20),HL   
009D   22 D8 4E               LD   (RST28),HL   
00A0   22 DA 4E               LD   (RST30),HL   
00A3   22 DE 4E               LD   (INTVEC),HL   
00A6   22 E0 4E               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4E               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4E               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0E               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4C                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4D                  DW   BUF   ; vBUFPtr pointer into BUF
0188   BE 0C                  DW   next   ; nNext
018A   1E 4F                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ ` _
0200   7F                     DB   lsb(nop_)   ; SP
0201   36                     DB   lsb(bang_)   ; !
0202   4A                     DB   lsb(dquote_)   ; "
0203   3E                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   81                     DB   lsb(rparen_)   ; )
020A   33                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   47                     DB   lsb(comma_)   ; ,
020D   4D                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7C                     DB   lsb(slash_)   ; /	
0210   3B                     DB   lsb(num_)   ; 0
0211   3B                     DB   lsb(num_)   ; 1
0212   3B                     DB   lsb(num_)   ; 2
0213   3B                     DB   lsb(num_)   ; 3
0214   3B                     DB   lsb(num_)   ; 4
0215   3B                     DB   lsb(num_)   ; 5
0216   3B                     DB   lsb(num_)   ; 6
0217   3B                     DB   lsb(num_)   ; 7
0218   3B                     DB   lsb(num_)   ; 8
0219   3B                     DB   lsb(num_)   ; 9
021A   27                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6A                     DB   lsb(lt_)   ; <
021D   50                     DB   lsb(eq_)   ; =
021E   5F                     DB   lsb(gt_)   ; >
021F   30                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2A                     DB   lsb(upcase_)   ; A
0222   2A                     DB   lsb(upcase_)   ; B
0223   2A                     DB   lsb(upcase_)   ; C
0224   2A                     DB   lsb(upcase_)   ; D
0225   2A                     DB   lsb(upcase_)   ; E
0226   2A                     DB   lsb(upcase_)   ; F
0227   2A                     DB   lsb(upcase_)   ; G
0228   2A                     DB   lsb(upcase_)   ; h
0229   2A                     DB   lsb(upcase_)   ; I
022A   2A                     DB   lsb(upcase_)   ; J
022B   2A                     DB   lsb(upcase_)   ; K
022C   2A                     DB   lsb(upcase_)   ; L
022D   2A                     DB   lsb(upcase_)   ; M
022E   2A                     DB   lsb(upcase_)   ; N
022F   2A                     DB   lsb(upcase_)   ; O
0230   2A                     DB   lsb(upcase_)   ; p
0231   2A                     DB   lsb(upcase_)   ; Q
0232   2A                     DB   lsb(upcase_)   ; R
0233   2A                     DB   lsb(upcase_)   ; S
0234   2A                     DB   lsb(upcase_)   ; T
0235   2A                     DB   lsb(upcase_)   ; U
0236   2A                     DB   lsb(upcase_)   ; V
0237   2A                     DB   lsb(upcase_)   ; W
0238   2A                     DB   lsb(upcase_)   ; X
0239   2A                     DB   lsb(upcase_)   ; Y
023A   2A                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   44                     DB   lsb(caret_)   ; ^
023F   7F                     DB   lsb(nop_)   ; _
0240   4A                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2D                     DB   lsb(lowcase_)   ; a
0242   2D                     DB   lsb(lowcase_)   ; b
0243   2D                     DB   lsb(lowcase_)   ; c
0244   2D                     DB   lsb(lowcase_)   ; d
0245   2D                     DB   lsb(lowcase_)   ; e
0246   2D                     DB   lsb(lowcase_)   ; f
0247   2D                     DB   lsb(lowcase_)   ; g
0248   2D                     DB   lsb(lowcase_)   ; h
0249   2D                     DB   lsb(lowcase_)   ; i
024A   2D                     DB   lsb(lowcase_)   ; j
024B   2D                     DB   lsb(lowcase_)   ; k
024C   2D                     DB   lsb(lowcase_)   ; l
024D   2D                     DB   lsb(lowcase_)   ; m
024E   2D                     DB   lsb(lowcase_)   ; n
024F   2D                     DB   lsb(lowcase_)   ; o
0250   2D                     DB   lsb(lowcase_)   ; p
0251   2D                     DB   lsb(lowcase_)   ; q
0252   2D                     DB   lsb(lowcase_)   ; r
0253   2D                     DB   lsb(lowcase_)   ; s
0254   2D                     DB   lsb(lowcase_)   ; t
0255   2D                     DB   lsb(lowcase_)   ; u
0256   2D                     DB   lsb(lowcase_)   ; v
0257   2D                     DB   lsb(lowcase_)   ; w
0258   2D                     DB   lsb(lowcase_)   ; x
0259   2D                     DB   lsb(lowcase_)   ; y
025A   2D                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   41                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   7F                     DB   lsb(nop_)   ; ~
025F   7F                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 84 03               JP   plus   
0303                AT_:         
0303   C3 96 03               JP   at   
0306                AMPER_:      
0306   C3 A0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 E4 06               JP   dollar   
030C                LBRACK_:      
030C   C3 F9 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 15 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 C4 03               JP   percent   
0315                BACKSLASH_:      
0315   C3 9E 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 C4 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 2D 05               JP   rbrace   
031E                TICK_:       
031E   C3 89 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 85 07               JP   semicolon   
0324                DOT_:        
0324   C3 F9 05               JP   dot   
0327                COLON_:      
0327   C3 8E 04               JP   colon   
032A                UPCASE_:      
032A   C3 01 07               JP   upcase   
032D                LOWCASE_:      
032D   C3 06 07               JP   lowcase   
0330                QUESTION_:      
0330   C3 18 07               JP   question   
0333                STAR_:       
0333   C3 31 07               JP   star   
0336                BANG_:       ; logical invert, any non zero value
0336   21 00 00               LD   hl,0   ; is considered true
0339   18 20                  JR   eq1   
033B                NUM_:        
033B   C3 4D 07               JP   num   
033E                HASH_:       
033E   C3 65 04               JP   hash   
0341                PIPE_:       
0341   C3 AB 03               JP   pipe   
0344                CARET_:      
0344   C3 45 06               JP   caret   
0347                COMMA_:      
0347   C3 A0 05               JP   comma   
034A                DQUOTE_:      
034A   C3 C4 07               JP   dquote   
034D                MINUS_:      
034D   C3 EC 07               JP   minus   
0350                EQ_:         
0350   03                     INC   bc   
0351   0A                     LD   a,(bc)   ; is it == ?
0352   FE 3D                  CP   "="   
0354   28 04                  JR   z,eq0   ; no its equality
0356   0B                     DEC   bc   
0357   C3 7D 04               JP   assign   ; no its assignment
035A                EQ0:         
035A   E1                     POP   hl   
035B                EQ1:         
035B   D1                     POP   de   
035C   C3 24 06               JP   equals   
035F                GT_:         
035F   03                     INC   bc   
0360   0A                     LD   a,(bc)   
0361   FE 3E                  CP   ">"   
0363   CA B1 07               JP   z,shiftRight   
0366   D1                     POP   de   
0367   E1                     POP   hl   
0368   18 09                  JR   lt1   
036A                LT_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   
036C   FE 3C                  CP   "<"   
036E   CA A1 07               JP   z,shiftLeft   
0371   E1                     POP   hl   
0372   D1                     POP   de   
0373                LT1:         
0373   FE 3D                  CP   "="   
0375   CA 2C 06               JP   z,lessthaneq   
0378   0B                     DEC   bc   
0379   C3 31 06               JP   lessthan   
037C                SLASH_:      
037C   C3 AF 05               JP   slash   
037F                NOP_:        
037F   DD E9                  JP   (ix)   
0381                RPAREN_:      
0381   C3 7D 07               JP   rparen   
0384                             ;*******************************************************************
0384                             ; implementations
0384                             ;*******************************************************************
0384                PLUS:        
0384                ADD:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 2B                  CP   "+"   ; ++ increment variable
0388   20 05                  JR   nz,add1   
038A   E1                     POP   hl   
038B   23                     INC   hl   
038C   C3 7F 04               JP   assign0   
038F                ADD1:        
038F   0B                     DEC   bc   
0390   D1                     POP   de   ; second term
0391   E1                     POP   hl   ; first term
0392   19                     ADD   hl,de   
0393                ADD3:        
0393   E5                     PUSH   hl   
0394   DD E9                  JP   (ix)   
0396                             ; @ addr
0396                             ; -- ptr
0396                AT:          
0396                ADDR:        
0396   ED 5B F2 4E            LD   de,(vPointer)   
039A   21 F2 4E               LD   hl,vPointer   
039D   C3 FA 0A               JP   variable   
03A0                AMPER:       
03A0                AND:         
03A0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A1   E1                     POP   hl   
03A2   7B                     LD   a,e   
03A3   A5                     AND   l   
03A4   6F                     LD   l,a   
03A5   7A                     LD   a,d   
03A6   A4                     AND   h   
03A7                AND1:        
03A7   67                     LD   h,a   
03A8   E5                     PUSH   hl   
03A9   DD E9                  JP   (ix)   
03AB                PIPE:        
03AB                OR:          
03AB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AC   E1                     POP   hl   
03AD   7B                     LD   a,e   
03AE   B5                     OR   l   
03AF   6F                     LD   l,a   
03B0   7A                     LD   a,d   
03B1   B4                     OR   h   
03B2   18 F3                  JR   and1   
03B4                XOR:         
03B4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B5                XOR1:        
03B5   E1                     POP   hl   
03B6   7B                     LD   a,e   
03B7   AD                     XOR   l   
03B8   6F                     LD   l,a   
03B9   7A                     LD   a,d   
03BA   AC                     XOR   h   
03BB   67                     LD   h,a   
03BC   E5                     PUSH   hl   
03BD   DD E9                  JP   (ix)   
03BF                INVERT:      ; Bitwise INVert the top member of the stack
03BF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C2   18 F1                  JR   xor1   
03C4                             ; %a .. %z
03C4                             ; -- value
03C4                             ; returns value of arg
03C4                PERCENT:      
03C4                ARG:         
03C4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03C7   FD 56 05               LD   d,(iy+5)   
03CA   EB                     EX   de,hl   
03CB   7D                     LD   a,l   ; arg_list* == null, skip
03CC   B4                     OR   h   
03CD   28 1A                  JR   z,arg0a   
03CF   23                     INC   hl   ; a = num_args, hl = arg_list*
03D0   7E                     LD   a,(hl)   
03D1   23                     INC   hl   
03D2   B7                     OR   a   
03D3   28 14                  JR   z,arg0a   ; num_args == 0, skip
03D5   5F                     LD   e,a   ; e = a = num_args
03D6   03                     INC   bc   ; a = next char = dollar_name
03D7   0A                     LD   a,(bc)   
03D8   C5                     PUSH   bc   ; save IP
03D9   43                     LD   b,e   ; b = e = num_args
03DA   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03DD   FD 56 03               LD   d,(iy+3)   
03E0                ARG0:        
03E0   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E1   1B                     DEC   de   
03E2   BE                     CP   (hl)   
03E3   28 09                  JR   z,arg1   
03E5   23                     INC   hl   ; hl = next arg_list*
03E6   10 F8                  DJNZ   arg0   
03E8   C1                     POP   bc   ; no match, restore IP
03E9                ARG0A:       
03E9   11 00 00               LD   de,0   ; return 0
03EC   18 08                  JR   arg1a   
03EE                ARG1:        
03EE   C1                     POP   bc   ; restore IP
03EF   EB                     EX   de,hl   ; hl = arg*
03F0   22 F2 4E               LD   (vPointer),hl   ; store arg* in setter
03F3   5E                     LD   e,(hl)   
03F4   23                     INC   hl   
03F5   56                     LD   d,(hl)   ; de = arg
03F6                ARG1A:       
03F6   D5                     PUSH   de   ; push arg
03F7   DD E9                  JP   (ix)   
03F9                LBRACK:      
03F9                ARRAYSTART:      
03F9   11 00 00               LD   de,0   ; create stack frame
03FC   D5                     PUSH   de   ; push null for IP
03FD   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0400   FD 56 05               LD   d,(iy+5)   ; 
0403   D5                     PUSH   de   ; 
0404   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0407   FD 56 03               LD   d,(iy+3)   ; 
040A   D5                     PUSH   de   ; 
040B   FD E5                  PUSH   iy   ; push BP
040D   FD 21 00 00            LD   iy,0   ; BP = SP
0411   FD 39                  ADD   iy,sp   
0413   DD E9                  JP   (ix)   
0415                RBRACK:      
0415                ARRAYEND:      
0415   FD 54                  LD   d,iyh   ; de = BP
0417   FD 5D                  LD   e,iyl   
0419   ED 43 00 4F            LD   (vTemp1),bc   ; save IP
041D   62 6B                  LD   hl,de   ; hl = de = BP
041F   B7                     OR   a   
0420   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0422   CB 3C                  SRL   h   ; 
0424   CB 1D                  RR   l   
0426   44 4D                  LD   bc,hl   ; bc = count
0428   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = array[-4]
042B   71                     LD   (hl),c   ; write num items in length word
042C   23                     INC   hl   
042D   70                     LD   (hl),b   
042E   23                     INC   hl   ; hl = array[0], bc = count
042F                             ; de = BP, hl = array[0], bc = count
042F   18 15                  JR   arrayEnd3   
0431                ARRAYEND1:      
0431   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0434   77                     LD   (hl),a   ; write lsb of array item
0435   23                     INC   hl   ; move to msb of array item
0436   3A E6 4E               LD   a,(vDataWidth)   ; vDataWidth=1?
0439   3D                     DEC   a   
043A   28 05                  JR   z,arrayEnd2   
043C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
043F   77                     LD   (hl),a   ; write msb of array item
0440   23                     INC   hl   ; move to next word in array
0441                ARRAYEND2:      
0441   FD 2B                  DEC   iy   ; move to next word on stack
0443   FD 2B                  DEC   iy   
0445   0B                     DEC   bc   ; dec items count
0446                ARRAYEND3:      
0446   79                     LD   a,c   ; if not zero loop
0447   B0                     OR   b   
0448   20 E7                  JR   nz,arrayEnd1   
044A   EB                     EX   de,hl   ; de = end of array, hl = BP
044B   F9                     LD   sp,hl   ; sp = BP
044C   E1                     POP   hl   ; de = end of array, hl = old BP
044D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
044E   FD 62                  LD   iyh,d   
0450   FD 6B                  LD   iyl,e   
0452   D1                     POP   de   ; pop arg_list (discard)
0453   D1                     POP   de   ; pop first_arg* (discard)
0454   D1                     POP   de   ; pop IP (discard)
0455   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = array[-2]
0459   13                     INC   de   
045A   13                     INC   de   
045B   D5                     PUSH   de   ; return array[0]
045C   22 F0 4E               LD   (vHeapPtr),hl   ; move heap* to end of array
045F   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore IP
0463   DD E9                  JP   (ix)   
0465                             ; index of an array, based on vDataWidth
0465                             ; array num -- value    ; also sets vPointer to address
0465                HASH:        
0465                ARRAYINDEX:      
0465   E1                     POP   hl   ; hl = index
0466   D1                     POP   de   ; de = array
0467   3A E6 4E               LD   a,(vDataWidth)   ; a = data width
046A   3D                     DEC   a   
046B   28 01                  JR   z,arrayIndex1   
046D                ARRAYINDEX0:      
046D   29                     ADD   hl,hl   ; if data width = 2 then double
046E                ARRAYINDEX1:      
046E   19                     ADD   hl,de   ; add addr
046F   22 F2 4E               LD   (vPointer),hl   ; store address in setter
0472   16 00                  LD   d,0   
0474   5E                     LD   e,(hl)   
0475   B7                     OR   a   ; check data width again
0476   28 02                  JR   z,arrayIndex2   
0478   23                     INC   hl   
0479   56                     LD   d,(hl)   
047A                ARRAYINDEX2:      
047A   D5                     PUSH   de   
047B   DD E9                  JP   (ix)   
047D                             ; value _oldValue --            ; uses address in vPointer
047D                ASSIGN:      
047D   E1                     POP   hl   ; discard last accessed value
047E   E1                     POP   hl   ; hl = new value
047F                ASSIGN0:      
047F   EB                     EX   de,hl   ; de = new value
0480                ASSIGNX:      
0480   2A F2 4E               LD   hl,(vPointer)   
0483   73                     LD   (hl),e   
0484   3A E6 4E               LD   a,(vDataWidth)   
0487   3D                     DEC   a   ; is it byte?
0488   28 02                  JR   z,assign1   
048A   23                     INC   hl   
048B   72                     LD   (hl),d   
048C                ASSIGN1:      
048C   DD E9                  JP   (ix)   
048E                             ; arg_list - parses input (ab:c)
048E                             ; names after the : represent uninitialised locals
048E                             ; return values are the state of the stack after the block ends
048E                             ; format: numLocals totNumArgs argChars...
048E                COLON:       
048E                ARGLIST:      
048E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0491   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap*
0494   E5                     PUSH   hl   ; save start of arg_list
0495   23                     INC   hl   ; skip length fields to start of string
0496   23                     INC   hl   
0497   03                     INC   bc   ; point to next char
0498                ARGLIST1:      
0498   0A                     LD   a,(bc)   
0499   FE 3A                  CP   ":"   ; ":" switches from args to locals
049B   20 03                  JR   nz,arglist1a   
049D   14                     INC   d   ; non zero value local count acts as flag
049E   18 10                  JR   arglist3   
04A0                ARGLIST1A:      
04A0   FE 61                  CP   "a"   ; < "a" terminates arg_list
04A2   38 0F                  JR   c,arglist4   
04A4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04A6   30 0B                  JR   nc,arglist4   
04A8                ARGLIST2:      
04A8   77                     LD   (hl),a   
04A9   23                     INC   hl   
04AA   1C                     INC   e   ; increase arg count
04AB   AF                     XOR   a   
04AC   B2                     OR   d   
04AD   28 01                  JR   z,arglist3   
04AF   14                     INC   d   ; if d > 0 increase local count
04B0                ARGLIST3:      
04B0   03                     INC   bc   ; point to next char
04B1   18 E5                  JR   arglist1   
04B3                ARGLIST4:      
04B3   0B                     DEC   bc   
04B4   AF                     XOR   a   
04B5   B2                     OR   d   
04B6   28 01                  JR   z,arglist5   
04B8   15                     DEC   d   ; remove initial inc
04B9                ARGLIST5:      
04B9   23                     INC   hl   
04BA   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04BD   E1                     POP   hl   ; hl = start of arg_list
04BE   E5                     PUSH   hl   ; return start of arg_list
04BF   72                     LD   (hl),d   ; write number of locals at start - 1
04C0   23                     INC   hl   
04C1   73                     LD   (hl),e   ; write number of args + locals at start - 2
04C2   DD E9                  JP   (ix)   
04C4                LBRACE:      
04C4                BLOCKSTART:      
04C4   C5                     PUSH   bc   ; return pointer to first { of block
04C5   03                     INC   bc   
04C6   16 01                  LD   d,1   ; nesting: count first parenthesis
04C8                BLOCKSTART1:      ; Skip to end of definition
04C8   0A                     LD   a,(bc)   ; Get the next character
04C9   03                     INC   bc   ; Point to next character
04CA   FE 21                  CP   " " + 1   ; ignore whitespace
04CC   38 FA                  JR   c,blockStart1   
04CE   FE 29                  CP   ")"   
04D0   28 2D                  JR   z,blockStart4   
04D2   FE 7D                  CP   "}"   
04D4   28 29                  JR   z,blockStart4   
04D6   FE 5D                  CP   "]"   
04D8   28 25                  JR   z,blockStart4   
04DA   FE 28                  CP   "("   
04DC   28 16                  JR   z,blockStart2   
04DE   FE 7B                  CP   "{"   
04E0   28 12                  JR   z,blockStart2   
04E2   FE 5B                  CP   "["   
04E4   28 0E                  JR   z,blockStart2   
04E6   FE 27                  CP   "'"   
04E8   28 0D                  JR   z,blockStart3   
04EA   FE 60                  CP   "`"   
04EC   28 09                  JR   z,blockStart3   
04EE   FE 22                  CP   DQ   
04F0   28 05                  JR   z,blockStart3   
04F2   18 D4                  JR   blockStart1   
04F4                BLOCKSTART2:      
04F4   14                     INC   d   
04F5   18 D1                  JR   blockStart1   
04F7                BLOCKSTART3:      
04F7   3E 80                  LD   a,$80   
04F9   AA                     XOR   d   
04FA   57                     LD   d,a   
04FB   20 CB                  JR   nz,blockStart1   
04FD   18 03                  JR   blockStart5   
04FF                BLOCKSTART4:      
04FF   15                     DEC   d   
0500   20 C6                  JR   nz,blockStart1   ; get the next element
0502                BLOCKSTART5:      
0502   60 69                  LD   hl,bc   ; hl = IP
0504   11 1E 4F               LD   de,HEAP   ; is IP pointing to object in heap
0507   B7                     OR   a   ; IP - HEAP
0508   ED 52                  SBC   hl,de   
050A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
050C   28 1C                  JR   z,blockStart6   
050E   60 69                  LD   hl,bc   ; hl = IP
0510   D1                     POP   de   ; de = block*
0511   ED 43 00 4F            LD   (vTemp1),bc   ; save IP
0515   B7                     OR   a   ; bc = size
0516   ED 52                  SBC   hl,de   
0518   44 4D                  LD   bc,hl   
051A   EB                     EX   de,hl   ; hl = block* de = heap*
051B   ED 5B F0 4E            LD   de,(vHeapPtr)   
051F   D5                     PUSH   de   ; return hblock*
0520   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0522   ED 53 F0 4E            LD   (vHeapPtr),de   ; heap* += size
0526   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore IP
052A                BLOCKSTART6:      
052A   0B                     DEC   bc   ; balanced, exit
052B   DD E9                  JP   (ix)   
052D                RBRACE:      
052D                BLOCKEND:      
052D   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0530   FD 56 01               LD   d,(iy+1)   
0533   ED 53 00 4F            LD   (vTemp1),de   
0537   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
053A   FD 56 07               LD   d,(iy+7)   
053D   ED 53 02 4F            LD   (vTemp2),de   
0541   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0544   FD 56 03               LD   d,(iy+3)   
0547   EB                     EX   de,hl   
0548   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054B   FD 56 01               LD   d,(iy+1)   
054E   13                     INC   de   ; for carry flag <=
054F   B7                     OR   a   
0550   ED 52                  SBC   hl,de   
0552   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0554   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0556   FD 5D                  LD   e,iyl   
0558   21 08 00               LD   hl,8   
055B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055D   18 0C                  JR   blockEnd2   
055F                BLOCKEND1:      ; same scope
055F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0562   FD 56 03               LD   d,(iy+3)   
0565   EB                     EX   de,hl   
0566   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0568   FD 5D                  LD   e,iyl   
056A   EB                     EX   de,hl   
056B                BLOCKEND2:      
056B   44 4D                  LD   bc,hl   ; bc = hl = BP
056D   B7                     OR   a   ; hl = BP - SP = count
056E   ED 72                  SBC   hl,sp   
0570   7D                     LD   a,l   
0571   B4                     OR   h   
0572   28 09                  JR   z,blockEnd3   
0574   C5                     PUSH   bc   ; bc = count, hl = BP
0575   44 4D                  LD   bc,hl   
0577   E1                     POP   hl   
0578   2B                     DEC   hl   ; hl = BP-1
0579   1B                     DEC   de   ; de = args*-1
057A   ED B8                  LDDR      
057C   13                     INC   de   
057D                BLOCKEND3:      
057D   EB                     EX   de,hl   ; sp = de = new tos*
057E   F9                     LD   sp,hl   
057F   ED 4B 02 4F            LD   bc,(vTemp2)   
0583   FD 2A 00 4F            LD   iy,(vTemp1)   
0587   DD E9                  JP   (ix)   
0589                TICK:        
0589                CHAR:        
0589   21 00 00               LD   hl,0   ; if "" is empty or null
058C                CHAR1:       
058C   03                     INC   bc   ; point to next char
058D   0A                     LD   a,(bc)   
058E   FE 27                  CP   "'"   ; ' is the terminator
0590   28 09                  JR   z,char3   
0592   FE 5C                  CP   $5c   ; \ is the escape
0594   20 02                  JR   nz,char2   
0596   03                     INC   bc   
0597   0A                     LD   a,(bc)   
0598                CHAR2:       
0598   6F                     LD   l,a   
0599   18 F1                  JR   char1   
059B                CHAR3:       
059B   E5                     PUSH   hl   
059C   DD E9                  JP   (ix)   
059E                BACKSLASH:      
059E   DD E9                  JP   (ix)   
05A0                             ; , discard stack item
05A0                             ; x y -- x
05A0                COMMA:       
05A0                DISCARD:      
05A0   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A2   FD 5D                  LD   e,iyl   
05A4   EB                     EX   de,hl   
05A5   B7                     OR   a   
05A6   ED 72                  SBC   hl,sp   
05A8   CB 7C                  BIT   7,h   
05AA   20 01                  JR   nz,discard1   
05AC   E1                     POP   hl   
05AD                DISCARD1:      
05AD   DD E9                  JP   (ix)   
05AF                SLASH:       
05AF                COMMAND:      
05AF   CD 5A 0B               CALL   jumpTable   
05B2   2F                     DB   "/"   ; // comment
05B3   12 08                  DW   comment   
05B5   61                     DB   "a"   
05B6   1B 08                  DW   command_a   
05B8   62                     DB   "b"   
05B9   55 08                  DW   command_b   
05BB   63                     DB   "c"   ; /c chars
05BC   00 0B                  DW   chars   
05BE   64                     DB   "d"   ; /d decimal
05BF   08 0B                  DW   decimal   
05C1   66                     DB   "f"   ; /f false
05C2   3F 06                  DW   false1   
05C4   68                     DB   "h"   ; /h hexadecimal
05C5   10 0B                  DW   hexadecimal   
05C7   69                     DB   "i"   
05C8   A4 09                  DW   command_i   
05CA   6B                     DB   "k"   ; /k key
05CB   21 0B                  DW   key   
05CD   6E                     DB   "n"   ; /n numbers
05CE   33 0B                  DW   numbers   
05D0   6F                     DB   "o"   ; /o output
05D1   2A 0B                  DW   output   
05D3   70                     DB   "p"   
05D4   B0 09                  DW   command_p   
05D6   72                     DB   "r"   
05D7   A4 0A                  DW   command_r   
05D9   73                     DB   "s"   ; /s size
05DA   B3 0A                  DW   size   
05DC   74                     DB   "t"   ; /t true
05DD   39 06                  DW   true1   
05DF   76                     DB   "v"   
05E0   BB 0A                  DW   command_v   
05E2   78                     DB   "x"   ; /x xor
05E3   B4 03                  DW   xor   
05E5   00                     DB   NUL   
05E6   E8 05                  DW   div   
05E8                DIV:         
05E8   D1                     POP   de   
05E9   E1                     POP   hl   
05EA   C5                     PUSH   bc   ; preserve the IP
05EB   44 4D                  LD   bc,hl   
05ED   CD 0B 06               CALL   divide   
05F0   EB                     EX   de,hl   
05F1   ED 53 F4 4E            LD   (vRemain),de   
05F5   C1                     POP   bc   
05F6   C3 93 03               JP   add3   
05F9                DOT:         
05F9   CD 5A 0B               CALL   jumpTable   
05FC   61                     DB   "a"   ; .a print array
05FD   61 08                  DW   bufferArray   
05FF   63                     DB   "c"   ; .c print char
0600   83 09                  DW   bufferChar   
0602   73                     DB   "s"   ; .s print string
0603   69 09                  DW   bufferString   
0605   78                     DB   "x"   ; .x print x chars
0606   88 09                  DW   bufferXChars   
0608   00                     DB   NUL   ; .  print number
0609   AA 08                  DW   bufferNumber   
060B                             ; division subroutine.
060B                             ; bc: divisor, de: dividend, hl: remainder
060B                DIVIDE:      
060B   21 00 00               LD   hl,0   ; zero the remainder
060E   3E 10                  LD   a,16   ; loop counter
0610                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0610   CB 21                  SLA   c   
0612   CB 10                  RL   b   
0614   ED 6A                  ADC   hl,hl   
0616   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0618   38 03                  JR   c,divide2   
061A   0C                     INC   c   
061B   18 01                  JR   divide3   
061D                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
061D   19                     ADD   hl,de   
061E                DIVIDE3:      
061E   3D                     DEC   a   
061F   20 EF                  JR   nz,divide1   
0621   50 59                  LD   de,bc   ; result from bc to de
0623   C9                     RET      
0624                             ; hl = value1, de = value2
0624                             ; hl = result
0624                EQUALS:      
0624   B7                     OR   a   ; reset the carry flag
0625   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0627   28 10                  JR   z,true1   
0629   C3 3F 06               JP   false1   
062C                             ; hl = value1 de = value2
062C                             ; hl = result
062C                LESSTHANEQ:      
062C   B7                     OR   a   
062D   ED 52                  SBC   hl,de   
062F   18 05                  JR   lessthan1   
0631                             ; hl = value1 de = value2
0631                             ; hl = result
0631                LESSTHAN:      
0631   B7                     OR   a   
0632   ED 52                  SBC   hl,de   
0634   28 09                  JR   z,false1   
0636                LESSTHAN1:      
0636   FA 3F 06               JP   m,false1   
0639                TRUE1:       
0639   21 FF FF               LD   hl,TRUE   
063C   E5                     PUSH   hl   
063D   DD E9                  JP   (ix)   
063F                NULL1:       
063F                FALSE1:      
063F   21 00 00               LD   hl,FALSE   
0642   E5                     PUSH   hl   
0643   DD E9                  JP   (ix)   
0645                             ; execute a block of code which ends with }
0645                             ; creates a root scope if BP == stack
0645                             ; else uses outer scope
0645                CARET:       
0645                GO:          
0645   D1                     POP   de   ; de = block*
0646                GO1:         
0646   7B                     LD   a,e   ; if block* == null, exit
0647   B2                     OR   d   
0648   20 02                  JR   nz,go2   
064A   DD E9                  JP   (ix)   
064C                GO2:         
064C   1A                     LD   a,(de)   
064D   FE 7B                  CP   "{"   
064F   28 06                  JR   z,goBlock1   
0651   FE 28                  CP   "("   
0653   C2 8A 06               JP   nz,goLambda   
0656                             ; inc de                      ; de is the address to jump back to
0656   D5                     PUSH   de   ; push de just before stack frame
0657                GOBLOCK:      
0657                GOBLOCK1:      
0657   ED 53 00 4F            LD   (vTemp1),de   ; save de
065B   21 00 4C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
065E   FD 54                  LD   d,iyh   
0660   FD 5D                  LD   e,iyl   
0662   B7                     OR   a   ; if stack* == BP then this is the root_scope
0663   ED 52                  SBC   hl,de   
0665   ED 5B 00 4F            LD   de,(vTemp1)   ; restore de
0669   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
066A   B4                     OR   h   
066B   3E 00                  LD   a,0   
066D   28 6A                  JR   z,goLambda8   
066F   C5                     PUSH   bc   ; push IP
0670   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0673   FD 46 05               LD   b,(iy+5)   
0676   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0679   FD 66 03               LD   h,(iy+3)   
067C                GOBLOCK2:      
067C   C5                     PUSH   bc   ; arg_list*
067D   E5                     PUSH   hl   ; first_arg*
067E   FD E5                  PUSH   iy   ; push BP
0680   FD 21 00 00            LD   iy,0   ; BP = SP
0684   FD 39                  ADD   iy,sp   
0686   42 4B                  LD   bc,de   ; bc = de = block*-1
0688   DD E9                  JP   (ix)   
068A                GOLAMBDA:      ; execute lambda
068A   EB                     EX   de,hl   ; hl = lambda*
068B   5E                     LD   e,(hl)   ; de = partial_array*
068C   23                     INC   hl   
068D   56                     LD   d,(hl)   
068E   23                     INC   hl   
068F   7B                     LD   a,e   ; if partial_array* == null skip
0690   B2                     OR   d   
0691   28 21                  JR   z,goLambda3   
0693   ED 43 00 4F            LD   (vTemp1),bc   
0697   22 02 4F               LD   (vTemp2),hl   ; save bc,hl
069A   EB                     EX   de,hl   ; hl = partial_array*
069B   2B                     DEC   hl   ; bc = count
069C   46                     LD   b,(hl)   
069D   2B                     DEC   hl   
069E   4E                     LD   c,(hl)   
069F   23                     INC   hl   ; hl = array data*
06A0   23                     INC   hl   
06A1   18 06                  JR   goLambda2   ; push each item on stack
06A3                GOLAMBDA1:      
06A3   5E                     LD   e,(hl)   ; de = partial item
06A4   23                     INC   hl   
06A5   56                     LD   d,(hl)   
06A6   23                     INC   hl   
06A7   D5                     PUSH   de   ; push on stack
06A8   0B                     DEC   bc   
06A9                GOLAMBDA2:      
06A9   79                     LD   a,c   ; if count != 0 then loop
06AA   B0                     OR   b   
06AB   20 F6                  JR   nz,goLambda1   
06AD   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore bc
06B1   2A 02 4F               LD   hl,(vTemp2)   ; restore hl
06B4                GOLAMBDA3:      
06B4   5E                     LD   e,(hl)   ; de = block*
06B5   23                     INC   hl   
06B6   56                     LD   d,(hl)   
06B7   23                     INC   hl   
06B8   ED 53 00 4F            LD   (vTemp1),de   ; save block*
06BC   5E                     LD   e,(hl)   ; de = arg_list*
06BD   23                     INC   hl   
06BE   56                     LD   d,(hl)   
06BF   23                     INC   hl   
06C0   EB                     EX   de,hl   ; hl = arg_list*
06C1   ED 5B 00 4F            LD   de,(vTemp1)   ; restore de = block*
06C5   7D                     LD   a,l   ; if arg_list* == null a = 0
06C6   B4                     OR   h   
06C7   20 03                  JR   nz,goLambda4   
06C9   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06CA   18 0D                  JR   goLambda8   
06CC                GOLAMBDA4:      ; allocate locals
06CC   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
06CD   18 03                  JR   goLambda6   
06CF                GOLAMBDA5:      ; loop
06CF   3B                     DEC   sp   
06D0   3B                     DEC   sp   
06D1   3D                     DEC   a   
06D2                GOLAMBDA6:      
06D2   B7                     OR   a   
06D3   20 FA                  JR   nz,goLambda5   ; end loop
06D5                GOLAMBDA7:      
06D5   23                     INC   hl   ; a = num_args* x 2
06D6   7E                     LD   a,(hl)   
06D7   2B                     DEC   hl   
06D8   87                     ADD   a,a   ; a *= 2
06D9                GOLAMBDA8:      
06D9   C5                     PUSH   bc   ; push IP
06DA   44 4D                  LD   bc,hl   
06DC   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DF   85                     ADD   a,l   
06E0   6F                     LD   l,a   
06E1   39                     ADD   hl,sp   
06E2   18 98                  JR   goBlock2   
06E4                DOLLAR:      
06E4                HEXNUM:      
06E4   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E7                HEXNUM1:      
06E7   03                     INC   bc   
06E8   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E9   CB 77                  BIT   6,a   ; is it uppercase alpha?
06EB   28 02                  JR   z,hexnum2   ; no a decimal
06ED   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EF                HEXNUM2:      
06EF   D6 30                  SUB   $30   ; form decimal digit
06F1   DA 6F 07               JP   c,num2   
06F4   FE 10                  CP   $0F+1   
06F6   D2 6F 07               JP   nc,num2   
06F9   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06FA   29                     ADD   hl,hl   ; 4X
06FB   29                     ADD   hl,hl   ; 8X
06FC   29                     ADD   hl,hl   ; 16X
06FD   85                     ADD   a,l   ; add into bottom of hl
06FE   6F                     LD   l,a   
06FF   18 E6                  JR   hexnum1   
0701                UPCASE:      
0701   0A                     LD   a,(bc)   ; a = identifier char
0702   D6 41                  SUB   "A"   ; "A" = 0
0704   18 05                  JR   ident1   
0706                LOWCASE:      
0706   0A                     LD   a,(bc)   
0707   D6 61                  SUB   "a"   
0709   C6 1A                  ADD   a,26   
070B                IDENT1:      
070B   87                     ADD   a,a   ; l = a * 2
070C   6F                     LD   l,a   
070D   26 4E                  LD   h,msb(vars)   
070F   22 F2 4E               LD   (vPointer),hl   ; store address in setter
0712   5E                     LD   e,(hl)   
0713   23                     INC   hl   
0714   56                     LD   d,(hl)   
0715   D5                     PUSH   de   
0716   DD E9                  JP   (ix)   
0718                             ; if
0718                             ; condition then -- value
0718                QUESTION:      
0718                IF:          
0718   03                     INC   bc   
0719   0A                     LD   a,(bc)   
071A   FE 3F                  CP   "?"   
071C   28 06                  JR   z,ifte   
071E   0B                     DEC   bc   
071F   11 00 00               LD   de,NUL   ; NUL pointer for else
0722   18 01                  JR   ifte1   
0724                             ; ifte
0724                             ; condition then else -- value
0724                IFTE:        
0724   D1                     POP   de   ; de = else
0725                IFTE1:       
0725   E1                     POP   hl   ; hl = then
0726   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0727   7C                     LD   a,h   
0728   B5                     OR   l   
0729   E1                     POP   hl   ; hl = then
072A   CA 46 06               JP   z,go1   ; if z de = else
072D   EB                     EX   de,hl   ; condition = false, de = then
072E   C3 46 06               JP   go1   
0731                STAR:        
0731                MUL:         
0731   D1                     POP   de   ; get first value
0732   E1                     POP   hl   
0733                MUL2:        
0733   C5                     PUSH   bc   ; Preserve the IP
0734   44 4D                  LD   bc,hl   ; bc = 2nd value
0736   21 00 00               LD   hl,0   
0739   3E 10                  LD   a,16   
073B                MUL3:        
073B   29                     ADD   hl,hl   
073C   CB 13                  RL   e   
073E   CB 12                  RL   d   
0740   30 04                  JR   nc,$+6   
0742   09                     ADD   hl,bc   
0743   30 01                  JR   nc,$+3   
0745   13                     INC   de   
0746   3D                     DEC   a   
0747   20 F2                  JR   nz,mul3   
0749   C1                     POP   bc   ; Restore the IP
074A   C3 93 03               JP   add3   
074D                NUM:         
074D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0750   0A                     LD   a,(bc)   ; Get numeral or -
0751   FE 2D                  CP   "-"   
0753   20 01                  JR   nz,num0   
0755   03                     INC   bc   ; move to next char, no flags affected
0756                NUM0:        
0756   08                     EX   af,af'   ; save zero flag = 0 for later
0757                NUM1:        
0757   0A                     LD   a,(bc)   ; read digit
0758   D6 30                  SUB   "0"   ; less than 0?
075A   38 13                  JR   c,num2   ; not a digit, exit loop
075C   FE 0A                  CP   10   ; greater that 9?
075E   30 0F                  JR   nc,num2   ; not a digit, exit loop
0760   03                     INC   bc   ; inc IP
0761   54 5D                  LD   de,hl   ; multiply hl * 10
0763   29                     ADD   hl,hl   
0764   29                     ADD   hl,hl   
0765   19                     ADD   hl,de   
0766   29                     ADD   hl,hl   
0767   85                     ADD   a,l   ; add digit in a to hl
0768   6F                     LD   l,a   
0769   3E 00                  LD   a,0   
076B   8C                     ADC   a,h   
076C   67                     LD   h,a   
076D   18 E8                  JR   num1   
076F                NUM2:        
076F   0B                     DEC   bc   
0770   08                     EX   af,af'   ; restore zero flag
0771   20 07                  JR   nz,num3   
0773   EB                     EX   de,hl   ; negate the value of hl
0774   21 00 00               LD   hl,0   
0777   B7                     OR   a   ; jump to sub2
0778   ED 52                  SBC   hl,de   
077A                NUM3:        
077A   E5                     PUSH   hl   ; Put the number on the stack
077B   DD E9                  JP   (ix)   ; and process the next character
077D                RPAREN:      
077D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0780   FD 46 09               LD   b,(iy+9)   
0783   DD E9                  JP   (ix)   
0785                             ; arg_list* block* -- ptr
0785                SEMICOLON:      
0785   D1                     POP   de   ; de = block* hl = heap*
0786   2A F0 4E               LD   hl,(vHeapPtr)   
0789   AF                     XOR   a   
078A   77                     LD   (hl),a   ; compile null partial_array*
078B   23                     INC   hl   
078C   77                     LD   (hl),a   
078D   23                     INC   hl   
078E   73                     LD   (hl),e   ; compile block*
078F   23                     INC   hl   
0790   72                     LD   (hl),d   
0791   23                     INC   hl   
0792   D1                     POP   de   ; de = block*
0793   73                     LD   (hl),e   ; compile arg_list*
0794   23                     INC   hl   
0795   72                     LD   (hl),d   
0796   23                     INC   hl   
0797   ED 5B F0 4E            LD   de,(vHeapPtr)   ; return lambda*
079B   D5                     PUSH   de   
079C   22 F0 4E               LD   (vHeapPtr),hl   ; heap* += 4
079F   DD E9                  JP   (ix)   
07A1                             ; shiftLeft
07A1                             ; value count -- value2          shift left count places
07A1                SHIFTLEFT:      
07A1   50 59                  LD   de,bc   ; save IP
07A3   C1                     POP   bc   ; bc = count
07A4   41                     LD   b,c   ; b = loop counter
07A5   E1                     POP   hl   
07A6   04                     INC   b   ; test for counter=0 case
07A7   18 01                  JR   shiftLeft2   
07A9                SHIFTLEFT1:      
07A9   29                     ADD   hl,hl   ; left shift hl
07AA                SHIFTLEFT2:      
07AA   10 FD                  DJNZ   shiftLeft1   
07AC   E5                     PUSH   hl   
07AD   42 4B                  LD   bc,de   ; restore IP
07AF   DD E9                  JP   (ix)   
07B1                             ; shiftRight
07B1                             ; value count -- value2          shift left count places
07B1                SHIFTRIGHT:      
07B1   50 59                  LD   de,bc   ; save IP
07B3   C1                     POP   bc   ; bc = count
07B4   41                     LD   b,c   ; b = loop counter
07B5   E1                     POP   hl   
07B6   04                     INC   b   ; test for counter=0 case
07B7   18 04                  JR   shiftRight2   
07B9                SHIFTRIGHT1:      
07B9   CB 3C                  SRL   h   ; right shift hl
07BB   CB 1D                  RR   l   
07BD                SHIFTRIGHT2:      
07BD   10 FA                  DJNZ   shiftRight1   
07BF   E5                     PUSH   hl   
07C0   42 4B                  LD   bc,de   ; restore IP
07C2   DD E9                  JP   (ix)   
07C4                             ; string
07C4                             ; -- ptr                        ; points to start of string chars,
07C4                             ; length is stored at start - 2 bytes
07C4                DQUOTE:      
07C4                STRING:      
07C4   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap*
07C7   23                     INC   hl   ; skip length field to start
07C8   23                     INC   hl   
07C9   E5                     PUSH   hl   ; save start of string
07CA   03                     INC   bc   ; point to next char
07CB   18 03                  JR   string2   
07CD                STRING1:      
07CD   77                     LD   (hl),a   
07CE   23                     INC   hl   ; increase count
07CF   03                     INC   bc   ; point to next char
07D0                STRING2:      
07D0   0A                     LD   a,(bc)   
07D1   FE 22                  CP   DQ   ; " is the string terminator
07D3   28 04                  JR   z,string3   
07D5   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D7   20 F4                  JR   nz,string1   
07D9                STRING3:      
07D9   AF                     XOR   a   ; write NUL to terminate string
07DA   77                     LD   (hl),a   ; hl = end of string
07DB   23                     INC   hl   
07DC   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07DF   2B                     DEC   hl   ; hl = end of string without terminator
07E0   D1                     POP   de   ; de = start of string
07E1   D5                     PUSH   de   ; return start of string
07E2   B7                     OR   a   ; hl = length bytes, de = start of string
07E3   ED 52                  SBC   hl,de   
07E5   EB                     EX   de,hl   
07E6   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E7   72                     LD   (hl),d   
07E8   2B                     DEC   hl   
07E9   73                     LD   (hl),e   
07EA   DD E9                  JP   (ix)   
07EC                MINUS:       ; negative sign or subtract
07EC   03                     INC   bc   ; check if sign of a number
07ED   0A                     LD   a,(bc)   
07EE   0B                     DEC   bc   
07EF   FE 30                  CP   "0"   
07F1   38 05                  JR   c,sub   
07F3   FE 3A                  CP   "9"+1   
07F5   DA 3B 03               JP   c,num_   
07F8                SUB:         ; Subtract the value 2nd on stack from top of stack
07F8   03                     INC   bc   
07F9   FE 2D                  CP   "-"   
07FB   20 05                  JR   nz,sub1   
07FD   E1                     POP   hl   
07FE   2B                     DEC   hl   
07FF   C3 7F 04               JP   assign0   
0802                SUB1:        
0802   0B                     DEC   bc   
0803   D1                     POP   de   
0804   E1                     POP   hl   
0805   B7                     OR   a   
0806   ED 52                  SBC   hl,de   
0808   C3 93 03               JP   add3   
080B                ERROR1:      
080B   21 01 00               LD   hl,1   ; error 1: unknown command
080E   E5                     PUSH   hl   
080F   C3 DE 0C               JP   error   
0812                COMMENT:      
0812   03                     INC   bc   ; point to next char
0813   0A                     LD   a,(bc)   
0814   FE 20                  CP   " "   ; terminate on any char less than SP
0816   30 FA                  JR   nc,comment   
0818   0B                     DEC   bc   
0819   DD E9                  JP   (ix)   
081B                COMMAND_A:      
081B   CD 5A 0B               CALL   jumpTable   
081E   62                     DB   "b"   ; /ab absolute
081F   27 08                  DW   absolute   
0821   64                     DB   "d"   ; /ad address of
0822   34 08                  DW   addrOf   
0824   00                     DB   NUL   
0825   0B 08                  DW   error1   
0827                             ; /ab absolute
0827                             ; num -- num
0827                ABSOLUTE:      
0827   E1                     POP   hl   
0828   CB 7C                  BIT   7,h   
082A   C8                     RET   z   
082B   AF                     XOR   a   
082C   95                     SUB   l   
082D   6F                     LD   l,a   
082E   9F                     SBC   a,a   
082F   94                     SUB   h   
0830   67                     LD   h,a   
0831   E5                     PUSH   hl   
0832   DD E9                  JP   (ix)   
0834                             ; /ad addrOf
0834                             ; char -- addr
0834                ADDROF:      
0834   E1                     POP   hl   ; a = char
0835   7D                     LD   a,l   
0836   FE 7B                  CP   "z"+1   ; if a > z then exit
0838   30 19                  JR   nc,addrOf2   
083A   D6 41                  SUB   "A"   ; a - 65
083C   38 15                  JR   c,addrOf2   ; if < A then exit
083E   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0840   38 06                  JR   c,addrOf1   
0842   D6 06                  SUB   "a"-("Z"+1)   
0844   FE 1A                  CP   "Z"-"A"+1   
0846   38 0B                  JR   c,addrOf2   ; if < a then exit
0848                ADDROF1:      
0848   87                     ADD   a,a   ; double a
0849   21 00 4E               LD   hl,VARS   ; hl = VARS + a
084C   85                     ADD   a,l   
084D   6F                     LD   l,a   
084E   3E 00                  LD   a,0   
0850   8C                     ADC   a,h   
0851   67                     LD   h,a   
0852   E5                     PUSH   hl   
0853                ADDROF2:      
0853   DD E9                  JP   (ix)   
0855                COMMAND_B:      
0855   CD 5A 0B               CALL   jumpTable   
0858   72                     DB   "r"   ; /br break
0859   4F 09                  DW   break   
085B   79                     DB   "y"   ; /by cold boot
085C   21 0C                  DW   coldStart   
085E   00                     DB   NUL   
085F   0B 08                  DW   error1   
0861                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
0861                BUFFERARRAY:      
0861   CD 45 06               CALL   go   
0864   00 00                  DW   NUL   
0866   6F 08                  DW   bufferArrayM_1763S1258   
0868   6A 08                  DW   $+2   
086A   02                     DB   2   
086B   03 61 62 63            .PSTR   "abc"   
086F                BUFFERARRAYM_1763S1258:      
086F   7B 22 5B 20 22 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 22 5D 22 2E 73 7D 00 00 .CSTR   "{",DQ,"[ ",DQ,".s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ",DQ,"]",DQ,".s}",0   
08AA                             ; .cstr "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}" ; block
08AA                             ; /bd buffer decimal
08AA                             ; value --
08AA                BUFFERNUMBER:      
08AA   3A E8 4E               LD   a,(vNumBase)   
08AD   FE 10                  CP   16   
08AF   28 66                  JR   z,bufferHex   ; else falls through
08B1                             ; /bd buffer decimal
08B1                             ; value --
08B1                BUFFERDEC:      
08B1   ED 5B EC 4E            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08B5   D9                     EXX      
08B6   E1                     POP   hl   ; hl = value
08B7   CD CB 08               CALL   bufferDec0   
08BA   D9                     EXX      ; de = buffer*' bc = IP
08BB   3E 20                  LD   a," "   ; append space to buffer
08BD   12                     LD   (de),a   
08BE   1C                     INC   e   ; buffer*++, wraparound
08BF   CC 43 0B               CALL   z,flushBuffer   
08C2   2A EC 4E               LD   hl,(vBufPtr)   ; hl = buffer*
08C5   ED 53 EC 4E            LD   (vBufPtr),de   ; update buffer* with buffer*'
08C9   DD E9                  JP   (ix)   
08CB                             ; hl = value
08CB                             ; de' = buffer*
08CB                             ; a, bc, de, hl destroyed
08CB                BUFFERDEC0:      
08CB   CB 7C                  BIT   7,h   
08CD   28 0C                  JR   z,bufferDec1   
08CF   D9                     EXX      
08D0   3E 2D                  LD   a,"-"   
08D2   12                     LD   (de),a   
08D3   13                     INC   de   
08D4   D9                     EXX      
08D5   AF                     XOR   a   
08D6   95                     SUB   l   
08D7   6F                     LD   l,a   
08D8   9F                     SBC   a,a   
08D9   94                     SUB   h   
08DA   67                     LD   h,a   
08DB                BUFFERDEC1:      
08DB   0E 00                  LD   c,0   ; leading zeros flag = false
08DD   11 F0 D8               LD   de,-10000   
08E0   CD FB 08               CALL   bufferDec2   
08E3   11 18 FC               LD   de,-1000   
08E6   CD FB 08               CALL   bufferDec2   
08E9   11 9C FF               LD   de,-100   
08EC   CD FB 08               CALL   bufferDec2   
08EF   1E F6                  LD   e,-10   
08F1   CD FB 08               CALL   bufferDec2   
08F4   0C                     INC   c   ; flag = true for at least digit
08F5   1E FF                  LD   e,-1   
08F7   CD FB 08               CALL   bufferDec2   
08FA   C9                     RET      
08FB                BUFFERDEC2:      
08FB   06 2F                  LD   b,"0"-1   
08FD                BUFFERDEC3:      
08FD   04                     INC   b   
08FE   19                     ADD   hl,de   
08FF   38 FC                  JR   c,bufferDec3   
0901   ED 52                  SBC   hl,de   
0903   3E 30                  LD   a,"0"   
0905   B8                     CP   b   
0906   20 05                  JR   nz,bufferDec4   
0908   AF                     XOR   a   
0909   B1                     OR   c   
090A   C8                     RET   z   
090B   18 01                  JR   bufferDec5   
090D                BUFFERDEC4:      
090D   0C                     INC   c   
090E                BUFFERDEC5:      
090E   78                     LD   a,b   
090F   D9                     EXX      
0910   12                     LD   (de),a   
0911   1C                     INC   e   
0912   CC 43 0B               CALL   z,flushBuffer   
0915   D9                     EXX      
0916   C9                     RET      
0917                             ; /bh buffer hex
0917                             ; value --
0917                BUFFERHEX:      
0917   E1                     POP   hl   ; hl = value
0918   ED 5B EC 4E            LD   de,(vBufPtr)   
091C   3E 24                  LD   a,"$"   ; # prefix
091E   12                     LD   (de),a   
091F   1C                     INC   e   ; buffer*++, wraparound
0920   CC 43 0B               CALL   z,flushBuffer   
0923   7C                     LD   a,h   
0924   CD 38 09               CALL   bufferHex1   
0927   7D                     LD   a,l   
0928   CD 38 09               CALL   bufferHex1   
092B   3E 20                  LD   a," "   ; append space to buffer
092D   12                     LD   (de),a   
092E   1C                     INC   e   ; buffer*++, wraparound
092F   CC 43 0B               CALL   z,flushBuffer   
0932   ED 53 EC 4E            LD   (vBufPtr),de   
0936   DD E9                  JP   (ix)   
0938                BUFFERHEX1:      
0938   F5                     PUSH   af   
0939   1F                     RRA      
093A   1F                     RRA      
093B   1F                     RRA      
093C   1F                     RRA      
093D   CD 41 09               CALL   bufferHex2   
0940   F1                     POP   af   
0941                BUFFERHEX2:      
0941   E6 0F                  AND   0x0F   
0943   C6 90                  ADD   a,0x90   
0945   27                     DAA      
0946   CE 40                  ADC   a,0x40   
0948   27                     DAA      
0949   12                     LD   (de),a   
094A   1C                     INC   e   ; buffer*++, wraparound
094B   CC 43 0B               CALL   z,flushBuffer   
094E   C9                     RET      
094F                             ; /br break from loop
094F                             ; --
094F                BREAK:       
094F   E1                     POP   hl   
0950   7D                     LD   a,l   
0951   B4                     OR   h   
0952   28 02                  JR   z,break1   
0954   DD E9                  JP   (ix)   
0956                BREAK1:      
0956   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0958   FD 54                  LD   d,iyh   
095A   21 08 00               LD   hl,8   
095D   19                     ADD   hl,de   
095E   23                     INC   hl   
095F   23                     INC   hl   
0960   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0963   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0966   C3 2D 05               JP   blockEnd   
0969                             ; /bs buffered string
0969                             ; string* --
0969                BUFFERSTRING:      
0969   E1                     POP   hl   ; hl = string*
096A   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
096E   18 06                  JR   bufferString1   
0970                BUFFERSTRING0:      
0970   12                     LD   (de),a   ; a -> buffer*
0971   1C                     INC   e   ; buffer*++, wraparound
0972   CC 43 0B               CALL   z,flushBuffer   
0975   23                     INC   hl   
0976                BUFFERSTRING1:      
0976   7E                     LD   a,(hl)   ; a <- string*
0977   B7                     OR   a   ; if NUL exit loop
0978   20 F6                  JR   nz,bufferString0   
097A   2A EC 4E               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
097D   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*' in pointer
0981   DD E9                  JP   (ix)   
0983                             ; /bc buffer char
0983                             ; char --
0983                BUFFERCHAR:      
0983   21 01 00               LD   hl,1   
0986   18 01                  JR   bufferXChars0   
0988                             ; /bx buffered x chars
0988                             ; char length --
0988                BUFFERXCHARS:      
0988   E1                     POP   hl   ; hl = length
0989                BUFFERXCHARS0:      
0989   D1                     POP   de   ; a' = char
098A   7B                     LD   a,e   
098B   08                     EX   af,af'   
098C   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
0990   18 08                  JR   bufferXChars2   
0992                BUFFERXCHARS1:      
0992   08                     EX   af,af'   
0993   12                     LD   (de),a   
0994   08                     EX   af,af'   
0995   1C                     INC   e   ; buffer*++, wraparound
0996   CC 43 0B               CALL   z,flushBuffer   
0999   2B                     DEC   hl   
099A                BUFFERXCHARS2:      
099A   7D                     LD   a,l   
099B   B4                     OR   h   
099C   20 F4                  JR   nz,bufferXChars1   
099E   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*'
09A2   DD E9                  JP   (ix)   
09A4                COMMAND_I:      
09A4   CD 5A 0B               CALL   jumpTable   
09A7   6E                     DB   "n"   ; /in input
09A8   16 0B                  DW   input   
09AA   76                     DB   "v"   ; /iv invert
09AB   BF 03                  DW   invert   
09AD   00                     DB   NUL   
09AE   0B 08                  DW   error1   
09B0                COMMAND_P:      
09B0   CD 5A 0B               CALL   jumpTable   
09B3   61                     DB   "a"   ; /pa partial
09B4   C5 09                  DW   partial   
09B6   62                     DB   "b"   ; /pb print buffer
09B7   6A 0A                  DW   printBuffer   
09B9   63                     DB   "c"   ; /pc print chars
09BA   90 0A                  DW   printChars   
09BC   6B                     DB   "k"   ; /pk print stack
09BD   A2 0A                  DW   printStack   
09BF   78                     DB   "x"   ; /px print xpartial
09C0   E5 09                  DW   xpartial   
09C2   00                     DB   NUL   
09C3   0B 08                  DW   error1   
09C5                             ; /pa partial
09C5                             ; array* lambda* -- lambda1*
09C5                PARTIAL:      
09C5   E1                     POP   hl   ; h1 = lambda*
09C6   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09CA   ED 43 00 4F            LD   (vTemp1),bc   ; save IP
09CE   01 06 00               LD   bc,6   ; bc = count
09D1   ED B0                  LDIR      ; clone lambda
09D3   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore IP
09D7   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09DA   ED 53 F0 4E            LD   (vHeapPtr),de   ; heap* += 6
09DE   D1                     POP   de   ; de = array*
09DF   E5                     PUSH   hl   ; return partial_array*
09E0   73                     LD   (hl),e   ; compile array*
09E1   23                     INC   hl   
09E2   72                     LD   (hl),d   
09E3   DD E9                  JP   (ix)   
09E5                             ; /px xpartial
09E5                             ; arg_list* block* -- lambda*
09E5                XPARTIAL:      
09E5   ED 43 00 4F            LD   (vTemp1),bc   ; save IP
09E9   E1                     POP   hl   ; hl = block*
09EA   22 02 4F               LD   (vTemp2),hl   ; save block*
09ED   FD 5E 04               LD   e,(iy+4)   ; de = outer arg_list
09F0   FD 56 05               LD   d,(iy+5)   
09F3   7B                     LD   a,e   ; if arg_list == null then make a lambda
09F4   B2                     OR   d   
09F5   20 09                  JR   nz,xpartial0   
09F7   21 00 00               LD   hl,0   ; partial_array = null
09FA   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = compile*
09FE   18 4E                  JR   xpartial5   
0A00                XPARTIAL0:      
0A00   E1                     POP   hl   ; hl = inner arg_list*
0A01   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = compile*
0A05   D5                     PUSH   de   ; push new arglist*
0A06   7E                     LD   a,(hl)   ; compile inner num locals
0A07   12                     LD   (de),a   
0A08   23                     INC   hl   
0A09   13                     INC   de   
0A0A   7E                     LD   a,(hl)   ; compile inner length
0A0B   12                     LD   (de),a   
0A0C   23                     INC   hl   
0A0D   13                     INC   de   
0A0E   B7                     OR   a   ; compile args if inner length > 0
0A0F   28 05                  JR   z,xpartial1   
0A11   4F                     LD   c,a   
0A12   06 00                  LD   b,0   
0A14   ED B0                  LDIR      
0A16                XPARTIAL1:      
0A16   EB                     EX   de,hl   ; hl = outer arg_list
0A17   FD 5E 04               LD   e,(iy+4)   
0A1A   FD 56 05               LD   d,(iy+5)   
0A1D   EB                     EX   de,hl   
0A1E   23                     INC   hl   ; a = outer length
0A1F   7E                     LD   a,(hl)   
0A20   23                     INC   hl   
0A21   B7                     OR   a   
0A22   28 05                  JR   z,xpartial2   
0A24   4F                     LD   c,a   
0A25   06 00                  LD   b,0   
0A27   ED B0                  LDIR      ; append outer args
0A29                XPARTIAL2:      ; a = outer length
0A29   47                     LD   b,a   ; b = a = outer length
0A2A   2A F0 4E               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0A2D   86                     ADD   a,(hl)   ; add outer length to new locals
0A2E   77                     LD   (hl),a   
0A2F   23                     INC   hl   
0A30   7E                     LD   a,(hl)   ; add outer length to new length
0A31   80                     ADD   a,b   
0A32   77                     LD   (hl),a   
0A33   78                     LD   a,b   ; de = partial_array[-2]
0A34   12                     LD   (de),a   ; compile partial_array length field
0A35   13                     INC   de   
0A36   AF                     XOR   a   
0A37   12                     LD   (de),a   
0A38   13                     INC   de   
0A39   D5                     PUSH   de   ; push partial_array*
0A3A   EB                     EX   de,hl   ; hl = first_arg
0A3B   FD 5E 02               LD   e,(iy+2)   
0A3E   FD 56 03               LD   d,(iy+3)   
0A41   EB                     EX   de,hl   
0A42                XPARTIAL3:      
0A42   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0A43   4E                     LD   c,(hl)   
0A44   2B                     DEC   hl   
0A45   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0A46   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0A47   13                     INC   de   
0A48   79                     LD   a,c   
0A49   12                     LD   (de),a   
0A4A   13                     INC   de   
0A4B   10 F5                  DJNZ   xpartial3   ; b = outer length
0A4D                XPARTIAL4:      
0A4D   E1                     POP   hl   ; hl = partial_array*
0A4E                XPARTIAL5:      
0A4E   C1                     POP   bc   ; bc = new arg_list*
0A4F   D5                     PUSH   de   ; return new lambda*
0A50   EB                     EX   de,hl   ; hl = new lambda*, de = partial_array*
0A51   73                     LD   (hl),e   ; compile partial_array* to lambda
0A52   23                     INC   hl   
0A53   72                     LD   (hl),d   
0A54   23                     INC   hl   
0A55   ED 5B 02 4F            LD   de,(vTemp2)   ; de = block*
0A59   73                     LD   (hl),e   ; compile block* to lambda
0A5A   23                     INC   hl   
0A5B   72                     LD   (hl),d   
0A5C   23                     INC   hl   
0A5D   71                     LD   (hl),c   ; compile new arg_list* to lambda
0A5E   23                     INC   hl   
0A5F   70                     LD   (hl),b   
0A60   23                     INC   hl   
0A61   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap ptr
0A64   ED 4B 00 4F            LD   bc,(vTemp1)   ; restore IP
0A68   DD E9                  JP   (ix)   
0A6A                             ; ; arg_list* block* -- ptr
0A6A                             ; semicolon:
0A6A                             ;     pop de                      ; de = block* hl = heap*
0A6A                             ;     ld hl,(vHeapPtr)
0A6A                             ;     xor a
0A6A                             ;     ld (hl),a                   ; compile null partial_array*
0A6A                             ;     inc hl
0A6A                             ;     ld (hl),a
0A6A                             ;     inc hl
0A6A                             ;     ld (hl),e                   ; compile block*
0A6A                             ;     inc hl
0A6A                             ;     ld (hl),d
0A6A                             ;     inc hl
0A6A                             ;     pop de                      ; de = block*
0A6A                             ;     ld (hl),e                   ; compile arg_list*
0A6A                             ;     inc hl
0A6A                             ;     ld (hl),d
0A6A                             ;     inc hl
0A6A                             ;     ld de,(vHeapPtr)            ; return lambda*
0A6A                             ;     push de
0A6A                             ;     ld (vHeapPtr),hl            ; heap* += 4
0A6A                             ;     jp (ix)
0A6A                             ; arg:
0A6A                             ;     ld e,(iy+4)                 ; hl = arg_list*
0A6A                             ;     ld d,(iy+5)
0A6A                             ;     ex de,hl
0A6A                             ;     ld a,l                      ; arg_list* == null, skip
0A6A                             ;     or h
0A6A                             ;     jr z,arg0a
0A6A                             ;     inc hl                      ; a = num_args, hl = arg_list*
0A6A                             ;     ld a,(hl)
0A6A                             ;     inc hl
0A6A                             ;     or a
0A6A                             ;     jr z,arg0a                  ; num_args == 0, skip
0A6A                             ;     ld e,a                      ; e = a = num_args
0A6A                             ;     inc bc                      ; a = next char = dollar_name
0A6A                             ;     ld a,(bc)
0A6A                             ;     push bc                     ; save IP
0A6A                             ;     ld b,e                      ; b = e = num_args
0A6A                             ;     ld e,(iy+2)                 ; de = first_arg*, hl = argslist*
0A6A                             ;     ld d,(iy+3)
0A6A                             ; arg0:
0A6A                             ;     dec de                      ; a = dollar_name, de = next arg*
0A6A                             ;     dec de
0A6A                             ;     cp (hl)
0A6A                             ;     jr z,arg1
0A6A                             ;     inc hl                      ; hl = next arg_list*
0A6A                             ;     djnz arg0
0A6A                             ;     pop bc                      ; no match, restore IP
0A6A                             ; arg0a:
0A6A                             ;     ld de,0                     ; return 0
0A6A                             ;     jr arg1a
0A6A                             ; arg1:
0A6A                             ;     pop bc                      ; restore IP
0A6A                             ;     ex de,hl                    ; hl = arg*
0A6A                             ;     ld (vPointer),hl            ; store arg* in setter
0A6A                             ;     ld e,(hl)
0A6A                             ;     inc hl
0A6A                             ;     ld d,(hl)                   ; de = arg
0A6A                             ; arg1a:
0A6A                             ;     push de                     ; push arg
0A6A                             ;     jp (ix)
0A6A                             ; /pb printBuffer
0A6A                             ; --
0A6A                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0A6A                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0A6A                PRINTBUFFER:      
0A6A   CD 45 06               CALL   go   
0A6D   00 00                  DW   NUL   
0A6F   76 0A                  DW   printBufferM_2144S1661   
0A71   73 0A                  DW   $+2   
0A73   00                     DB   0   
0A74   01 61                  .PSTR   "a"   
0A76                PRINTBUFFERM_2144S1661:      
0A76   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A90                             ; printChars
0A90                             ; char* len --
0A90                PRINTCHARS:      
0A90   E1                     POP   hl   ; hl = count
0A91   D1                     POP   de   ; de = char*
0A92   CD 9D 0A               CALL   printChars2   
0A95   DD E9                  JP   (ix)   
0A97                PRINTCHARS1:      
0A97   1A                     LD   a,(de)   ; print char at char*
0A98   CD 85 00               CALL   putchar   
0A9B   13                     INC   de   ; char*++
0A9C   2B                     DEC   hl   ; count--
0A9D                PRINTCHARS2:      
0A9D   7D                     LD   a,l   ; count == 0?
0A9E   B4                     OR   h   
0A9F   C8                     RET   z   
0AA0   18 F5                  JR   printChars1   ; if not loop
0AA2                             ; /pk print stack
0AA2                             ; --
0AA2                PRINTSTACK:      
0AA2                             ;     ld (vTemp1),bc
0AA2                             ;     call printStr
0AA2                             ;     .cstr "=> "
0AA2                             ;     ld hl,STACK
0AA2                             ;     sbc hl,sp
0AA2                             ;     srl h
0AA2                             ;     rr l
0AA2                             ;     ld bc,hl
0AA2                             ;     ld hl,STACK
0AA2                             ;     jr printStack2
0AA2                             ; printStack1:
0AA2                             ;     dec bc
0AA2                             ;     dec hl
0AA2                             ;     ld d,(hl)
0AA2                             ;     dec hl
0AA2                             ;     ld e,(hl)
0AA2                             ;     ex de,hl
0AA2                             ;     call prthex
0AA2                             ;     ex de,hl
0AA2                             ;     ld a," "
0AA2                             ;     call putchar
0AA2                             ; printStack2:
0AA2                             ;     ld a,c
0AA2                             ;     or b
0AA2                             ;     jr nz,printStack1
0AA2                             ;     call prompt
0AA2                             ;     ld bc,(vTemp1)
0AA2   DD E9                  JP   (ix)   
0AA4                COMMAND_R:      
0AA4   CD 5A 0B               CALL   jumpTable   
0AA7   65                     DB   "e"   ; /re remainder
0AA8   AD 0A                  DW   remain   
0AAA   00                     DB   NUL   
0AAB   0B 08                  DW   error1   
0AAD                REMAIN:      
0AAD   2A F4 4E               LD   hl,(vRemain)   
0AB0   E5                     PUSH   hl   
0AB1   DD E9                  JP   (ix)   
0AB3                SIZE:        
0AB3   E1                     POP   hl   
0AB4   2B                     DEC   hl   ; msb size
0AB5   56                     LD   d,(hl)   
0AB6   2B                     DEC   hl   ; lsb size
0AB7   5E                     LD   e,(hl)   
0AB8   D5                     PUSH   de   
0AB9   DD E9                  JP   (ix)   
0ABB                COMMAND_V:      
0ABB   CD 5A 0B               CALL   jumpTable   
0ABE   62                     DB   "b"   
0ABF   DF 0A                  DW   varBufPtr   
0AC1   68                     DB   "h"   
0AC2   E8 0A                  DW   varHeapPtr   
0AC4   74                     DB   "t"   
0AC5   F1 0A                  DW   varTIBPtr   
0AC7   42                     DB   "B"   
0AC8   D0 0A                  DW   constBufStart   
0ACA   54                     DB   "T"   
0ACB   DA 0A                  DW   constTIBStart   
0ACD   00                     DB   NUL   
0ACE   0B 08                  DW   error1   
0AD0                CONSTBUFSTART:      
0AD0   11 00 4D               LD   de,BUF   
0AD3   18 28                  JR   constant   
0AD5                CONSTHEAPSTART:      
0AD5   11 1E 4F               LD   de,HEAP   
0AD8   18 23                  JR   constant   
0ADA                CONSTTIBSTART:      
0ADA   11 00 4C               LD   de,TIB   
0ADD   18 1E                  JR   constant   
0ADF                VARBUFPTR:      
0ADF   ED 5B EC 4E            LD   de,(vBufPtr)   
0AE3   21 EC 4E               LD   hl,vBufPtr   
0AE6   18 12                  JR   variable   
0AE8                VARHEAPPTR:      
0AE8   ED 5B F0 4E            LD   de,(vHeapPtr)   
0AEC   21 F0 4E               LD   hl,vHeapPtr   
0AEF   18 09                  JR   variable   
0AF1                VARTIBPTR:      
0AF1   ED 5B EA 4E            LD   de,(vTIBPtr)   
0AF5   21 EA 4E               LD   hl,vTIBPtr   
0AF8   18 00                  JR   variable   
0AFA                VARIABLE:      
0AFA   22 F2 4E               LD   (vPointer),hl   
0AFD                CONSTANT:      
0AFD   D5                     PUSH   de   
0AFE   DD E9                  JP   (ix)   
0B00                CHARS:       
0B00   21 01 00               LD   hl,1   
0B03                CHARS1:      
0B03   22 E6 4E               LD   (vDataWidth),hl   
0B06   DD E9                  JP   (ix)   
0B08                DECIMAL:      
0B08   21 0A 00               LD   hl,10   
0B0B                DECIMAL1:      
0B0B   22 E8 4E               LD   (vNumBase),hl   
0B0E   DD E9                  JP   (ix)   
0B10                HEXADECIMAL:      
0B10   21 10 00               LD   hl,16   
0B13   C3 0B 0B               JP   decimal1   
0B16                             ; Z80 port input
0B16                             ; port -- value
0B16                INPUT:       
0B16   E1                     POP   hl   
0B17   59                     LD   e,c   ; save IP
0B18   4D                     LD   c,l   
0B19   ED 68                  IN   l,(c)   
0B1B   26 00                  LD   h,0   
0B1D   4B                     LD   c,e   ; restore IP
0B1E   E5                     PUSH   hl   
0B1F   DD E9                  JP   (ix)   
0B21                KEY:         
0B21   CD 81 00               CALL   getchar   
0B24   26 00                  LD   h,0   
0B26   6F                     LD   l,a   
0B27   E5                     PUSH   hl   
0B28   DD E9                  JP   (ix)   
0B2A                             ; Z80 port output
0B2A                             ; value port --
0B2A                OUTPUT:      
0B2A   E1                     POP   hl   
0B2B   59                     LD   e,c   ; save IP
0B2C   4D                     LD   c,l   
0B2D   E1                     POP   hl   
0B2E   ED 69                  OUT   (c),l   
0B30   4B                     LD   c,e   ; restore IP
0B31   DD E9                  JP   (ix)   
0B33                NUMBERS:      
0B33   21 02 00               LD   hl,2   
0B36   C3 03 0B               JP   chars1   
0B39                             ; 
0B39                             ; keyIter:
0B39                             ;     call go
0B39                             ;     .cstr "{/k /t}"             ; block
0B39                             ; fromIter:
0B39                             ;     call go
0B39                             ;     dw NUL                      ; NUL closure
0B39                             ;     dw $+4
0B39                             ;     dw args1A0L
0B39                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0B39                             ; fromIter1:
0B39                             ;     call go
0B39                             ;     dw NUL                      ; NUL closure
0B39                             ;     dw $+4
0B39                             ;     dw args2A0L
0B39                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0B39                FILTER:      
0B39                MAP:         
0B39                SCAN:        
0B39   DD E9                  JP   (ix)   
0B3B                             ;*******************************************************************
0B3B                             ; reusable arglists
0B3B                             ;*******************************************************************
0B3B                ARGS1A0L:      ; one arg zero locals
0B3B   00                     DB   0   
0B3C   01 61                  .PSTR   "a"   
0B3E                ARGS1A2L:      ; one arg two locals
0B3E   02                     DB   2   
0B3F   03 61 62 63            .PSTR   "abc"   
0B43                             ;*******************************************************************
0B43                             ; general routines
0B43                             ;*******************************************************************
0B43                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0B43                FLUSHBUFFER:      
0B43   F5                     PUSH   af   
0B44   D5                     PUSH   de   
0B45   E5                     PUSH   hl   
0B46   2A EC 4E               LD   hl,(vBufPtr)   
0B49   11 00 4D               LD   de,BUF   
0B4C   ED 53 EC 4E            LD   (vBufPtr),de   
0B50   B7                     OR   a   
0B51   ED 52                  SBC   hl,de   
0B53   CD 9D 0A               CALL   printChars2   
0B56   E1                     POP   hl   
0B57   D1                     POP   de   
0B58   F1                     POP   af   
0B59   C9                     RET      
0B5A                             ; followed by a table
0B5A                             ; db char
0B5A                             ; dw addr
0B5A                             ; the final item must have char == NUL
0B5A                JUMPTABLE:      
0B5A   03                     INC   bc   
0B5B   E1                     POP   hl   
0B5C                JUMPTABLE0:      
0B5C   AF                     XOR   a   
0B5D   BE                     CP   (hl)   
0B5E   28 09                  JR   z,jumpTable1   
0B60   0A                     LD   a,(bc)   
0B61   BE                     CP   (hl)   
0B62   28 06                  JR   z,jumpTable2   
0B64   23                     INC   hl   
0B65   23                     INC   hl   
0B66   23                     INC   hl   
0B67   18 F3                  JR   jumpTable0   
0B69                JUMPTABLE1:      
0B69   0B                     DEC   bc   
0B6A                JUMPTABLE2:      
0B6A   23                     INC   hl   
0B6B   5E                     LD   e,(hl)   
0B6C   23                     INC   hl   
0B6D   56                     LD   d,(hl)   
0B6E   EB                     EX   de,hl   
0B6F   E9                     JP   (hl)   
0B70                PRTSTR0:      
0B70   CD 85 00               CALL   putchar   
0B73   23                     INC   hl   
0B74                PRTSTR:      
0B74   7E                     LD   a,(hl)   
0B75   B7                     OR   a   
0B76   20 F8                  JR   nz,prtstr0   
0B78   C9                     RET      
0B79                             ; **************************************************************************
0B79                             ; calculate nesting value
0B79                             ; a is char to be tested,
0B79                             ; e is the nesting value (initially 0)
0B79                             ; e is increased by ( and [
0B79                             ; e is decreased by ) and ]
0B79                             ; e has its bit 7 toggled by `
0B79                             ; limited to 127 levels
0B79                             ; **************************************************************************
0B79                NESTING:      
0B79   FE 22                  CP   DQ   ; quote char
0B7B   28 06                  JR   z,nesting0   
0B7D   FE 60                  CP   "`"   ; quote char
0B7F   28 02                  JR   z,nesting0   
0B81   18 0A                  JR   nesting1   
0B83                NESTING0:      
0B83   CB 7B                  BIT   7,e   
0B85   28 03                  JR   z,nesting1a   
0B87   CB BB                  RES   7,e   
0B89   C9                     RET      
0B8A                NESTING1A:      
0B8A   CB FB                  SET   7,e   
0B8C   C9                     RET      
0B8D                NESTING1:      
0B8D   CB 7B                  BIT   7,e   
0B8F   C0                     RET   nz   
0B90   FE 7B                  CP   "{"   
0B92   28 08                  JR   z,nesting2   
0B94   FE 5B                  CP   "["   
0B96   28 04                  JR   z,nesting2   
0B98   FE 28                  CP   "("   
0B9A   20 02                  JR   nz,nesting3   
0B9C                NESTING2:      
0B9C   1C                     INC   e   
0B9D   C9                     RET      
0B9E                NESTING3:      
0B9E   FE 7D                  CP   "}"   
0BA0   28 07                  JR   z,nesting4   
0BA2   FE 5D                  CP   "]"   
0BA4   28 03                  JR   z,nesting4   
0BA6   FE 29                  CP   ")"   
0BA8   C0                     RET   nz   
0BA9                NESTING4:      
0BA9   1D                     DEC   e   
0BAA   C9                     RET      
0BAB                PROMPT:      
0BAB   CD BB 0B               CALL   printStr   
0BAE   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0BB3   C9                     RET      
0BB4                CRLF:        
0BB4   CD BB 0B               CALL   printStr   
0BB7   0D 0A 00               .CSTR   "\r\n"   
0BBA   C9                     RET      
0BBB                             ; prints a null teminated string
0BBB                             ; the string should be immediately following the call
0BBB                PRINTSTR:      
0BBB   E3                     EX   (sp),hl   ; swap			
0BBC   CD 74 0B               CALL   prtstr   
0BBF   23                     INC   hl   ; inc past NUL
0BC0   E3                     EX   (sp),hl   ; put it back	
0BC1   C9                     RET      
0BC2                TITLESTR:      
0BC2   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0BD6                INIT:        
0BD6   21 C2 0B               LD   hl,titleStr   
0BD9   11 0A 4F               LD   de,titleBuf   
0BDC   06 14                  LD   b,20   
0BDE                INIT1:       
0BDE   1A                     LD   a,(de)   
0BDF   BE                     CP   (hl)   
0BE0   20 17                  JR   nz,coldBoot0   
0BE2   13                     INC   de   
0BE3   23                     INC   hl   
0BE4   10 F8                  DJNZ   init1   
0BE6                WARMINIT:      
0BE6   ED 4B F6 4E            LD   bc,(vSavedIP)   ; restore IP
0BEA   ED 7B F8 4E            LD   sp,(vSavedSP)   ; restore SP
0BEE   DD 2A FA 4E            LD   ix,(vSavedNext)   ; restore Next
0BF2   FD 2A FC 4E            LD   iy,(vSavedBP)   ; restore BP
0BF6   C3 30 0C               JP   start1   
0BF9                COLDBOOT0:      
0BF9   21 C2 0B               LD   hl,titleStr   ; copy titleStr to titleBuf
0BFC   11 0A 4F               LD   de,titleBuf   
0BFF   06 14                  LD   b,20   
0C01   ED B0                  LDIR      
0C03                COLDINIT:      
0C03   21 80 01               LD   hl,isysVars   
0C06   11 E6 4E               LD   de,sysVars   
0C09   01 10 00               LD   bc,8 * 2   
0C0C   ED B0                  LDIR      
0C0E   21 00 4E               LD   hl,vars   ; 52 vars LO HI
0C11   06 34                  LD   b,26*2   
0C13   AF                     XOR   a   
0C14                COLDBOOT1:      
0C14   77                     LD   (hl),a   
0C15   23                     INC   hl   
0C16   10 FC                  DJNZ   coldBoot1   
0C18   DD 2A EE 4E            LD   ix,(vNext)   
0C1C   FD 21 00 4C            LD   iy,STACK   
0C20   C9                     RET      
0C21                COLDSTART:      
0C21   31 00 4C               LD   sp,STACK   
0C24   CD F9 0B               CALL   coldBoot0   
0C27   C3 30 0C               JP   start1   
0C2A                START:       
0C2A   31 00 4C               LD   sp,STACK   ; start Monty
0C2D   CD D6 0B               CALL   init   ; setups
0C30                START1:      
0C30   21 0A 4F               LD   hl,titleBuf   
0C33   CD 74 0B               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0C36                INTERPRET:      
0C36   CD 43 0B               CALL   flushBuffer   
0C39   CD AB 0B               CALL   prompt   
0C3C   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0C3F   21 00 4C               LD   hl,TIB   
0C42   22 EA 4E               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C45                INTERPRET2:      ; calculate nesting
0C45   1E 00                  LD   e,0   ; initilize nesting value
0C47   C5                     PUSH   bc   ; save offset into TIB,
0C48                             ; bc is also the count of chars in TIB
0C48   21 00 4C               LD   hl,TIB   ; hl is start of TIB
0C4B   18 0B                  JR   interpret4   
0C4D                INTERPRET3:      
0C4D   3E 33                  LD   a,"3"   
0C4F   CD 85 00               CALL   putchar   
0C52   7E                     LD   a,(hl)   ; a = char in TIB
0C53   23                     INC   hl   ; inc pointer into TIB
0C54   0B                     DEC   bc   ; dec count of chars in TIB
0C55   CD 79 0B               CALL   nesting   ; update nesting value
0C58                INTERPRET4:      
0C58   79                     LD   a,c   ; is count zero?
0C59   B0                     OR   b   
0C5A   20 F1                  JR   nz,interpret3   ; if not loop
0C5C   C1                     POP   bc   ; restore offset into TIB
0C5D                INTERPRET5:      
0C5D   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C60   FE 20                  CP   $20   ; compare to space
0C62   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C64   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C66                             ; ???? NEEDED?
0C66   28 3B                  JR   z,interpret8   
0C68   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C6A   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C6C   FE 05                  CP   CTRL_E   
0C6E   CA 01 0D               JP   z,edit_   
0C71   FE 08                  CP   CTRL_H   
0C73   CA F1 0C               JP   z,backSpace_   
0C76   FE 0A                  CP   CTRL_J   
0C78   CA 19 0D               JP   z,reEdit_   
0C7B   FE 13                  CP   CTRL_S   
0C7D   CA 1C 0D               JP   z,printStack_   
0C80                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C80                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C80                             ; DB     lsb(list_)       ; FF  ^L 12
0C80                             ; DB     lsb(printStack_) ; DLE ^P 16
0C80                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C80                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C80                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C80                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C80                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C80                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C80                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C80                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C80                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C80                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C80                INTERPRET5A:      
0C80                             ; ld (vTIBPtr),bc
0C80                             ; ld bc,(vTIBPtr)
0C80   18 C3                  JR   interpret2   
0C82                INTERPRET6:      
0C82   21 00 4C               LD   hl,TIB   
0C85   09                     ADD   hl,bc   
0C86   77                     LD   (hl),a   ; store the character in textbuf
0C87   03                     INC   bc   
0C88   CD 85 00               CALL   putchar   ; echo character to screen
0C8B   CD 79 0B               CALL   nesting   
0C8E   18 CD                  JR   interpret5   ; wait for next character
0C90                INTERPRET7:      
0C90   21 00 4C               LD   hl,TIB   
0C93   09                     ADD   hl,bc   
0C94   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C96   23                     INC   hl   
0C97   36 0A                  LD   (hl),"\n"   
0C99   23                     INC   hl   
0C9A   03                     INC   bc   
0C9B   03                     INC   bc   
0C9C   CD B4 0B               CALL   crlf   ; echo character to screen
0C9F   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0CA0   B7                     OR   a   
0CA1   20 BA                  JR   nz,interpret5   
0CA3                INTERPRET8:      
0CA3   21 00 4C               LD   hl,TIB   
0CA6   09                     ADD   hl,bc   
0CA7   22 EA 4E               LD   (vTIBPtr),hl   
0CAA   01 00 4C               LD   bc,TIB   
0CAD   ED 43 F6 4E            LD   (vSavedIP),bc   ; save IP
0CB1   ED 73 F8 4E            LD   (vSavedSP),sp   ; save SP
0CB5   DD 22 FA 4E            LD   (vSavedNext),ix   ; save Next
0CB9   FD 22 FC 4E            LD   (vSavedBP),iy   ; save BP
0CBD   0B                     DEC   bc   
0CBE                NEXT:        
0CBE   03                     INC   bc   ; Increment the IP
0CBF   0A                     LD   a,(bc)   ; Get the next character and dispatch
0CC0   FE 20                  CP   " "   ; whitespace?
0CC2   28 FA                  JR   z,next   ; space? ignore
0CC4   38 09                  JR   c,next1   
0CC6   D6 20                  SUB   " "   
0CC8   6F                     LD   l,a   ; index into table
0CC9   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0CCB   6E                     LD   l,(hl)   ; get low jump address
0CCC   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0CCE   E9                     JP   (hl)   ; Jump to routine
0CCF                NEXT1:       
0CCF   FE 00                  CP   NUL   ; end of input string?
0CD1   28 03                  JR   z,exit   
0CD3   C3 36 0C               JP   interpret   ; no, other whitespace, macros?
0CD6                EXIT:        
0CD6   03                     INC   bc   
0CD7   60 69                  LD   hl,bc   
0CD9   E9                     JP   (hl)   
0CDA                RUN:         
0CDA   C1                     POP   bc   
0CDB   0B                     DEC   bc   
0CDC   DD E9                  JP   (ix)   
0CDE                ERROR:       
0CDE   CD DA 0C               CALL   run   
0CE1   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQ,"Error ",DQ,".s .",0   
0CEE   C3 36 0C               JP   interpret   
0CF1                BACKSPACE_:      
0CF1   79                     LD   a,c   
0CF2   B0                     OR   b   
0CF3   CA 45 0C               JP   z,interpret2   
0CF6   0B                     DEC   bc   
0CF7   CD BB 0B               CALL   printStr   
0CFA   08 20 08 00            .CSTR   "\b \b"   
0CFE   C3 45 0C               JP   interpret2   
0D01                             ; edit
0D01                EDIT_:       
0D01   CD DA 0C               CALL   run   
0D04   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQ,"var?",DQ,".s /k/ad .h",0   
0D16   C3 36 0C               JP   interpret   
0D19                REEDIT_:      
0D19   C3 36 0C               JP   interpret   
0D1C                PRINTSTACK_:      
0D1C   CD DA 0C               CALL   run   
0D1F   2F 70 6B 00            .CSTR   "/pk"   
0D23   C3 36 0C               JP   interpret   
0D26                             ; editDef:
0D26                             ;     pop hl                      ; pop ret address
0D26                             ;     ex (sp),hl                  ; swap with TOS
0D26                             ;     push hl                     ; dup TOS
0D26                             ;     ld a,l                      ; a = ident
0D26                             ;     ld de,TIB                   ; de = start of TIB
0D26                             ;     ld (vTIBPtr),de             ; update TIB*
0D26                             ;     push ix                     ; save NEXT
0D26                             ;     ld ix,editDef0              ; NEXT = editDef0
0D26                             ;     jp lookupRef                ; convert letter into address
0D26                             ; editDef0:
0D26                             ;     ld e,(hl)                   ; de = (hl++)
0D26                             ;     inc hl
0D26                             ;     ld d,(hl)
0D26                             ;     ld a,d                      ; de == 0 ?
0D26                             ;     or e
0D26                             ;     jr z,editDef4
0D26                             ;     ld ix,editDef3              ; NEXT = editDef3
0D26                             ;     ex de,hl
0D26                             ;     ld a,(hl)
0D26                             ;     cp "{"
0D26                             ;     jr nz,editDef1
0D26                             ;     jp editBlock0               ; convert letter into address
0D26                             ; editDef1:
0D26                             ;     cp "("
0D26                             ;     jr nz,editDef2
0D26                             ;     jp editBlock0               ; convert letter into address
0D26                             ; editDef2:
0D26                             ;     jp editLambda
0D26                             ; editDef3:
0D26                             ;     ld a," "                    ; write assign
0D26                             ;     call writeChar
0D26                             ;     pop hl                      ; a = ident
0D26                             ;     ld a,l
0D26                             ;     call writeChar
0D26                             ;     ld a,"="                    ; write assign
0D26                             ;     call writeChar
0D26                             ;     ld ix,editDef4              ; NEXT = editDef4
0D26                             ;     jp printTIB
0D26                             ; editDef4:
0D26                             ;     pop ix                      ; restore NEXT
0D26                             ;     jp (ix)
0D26                             ; writeChar:
0D26                             ;     ld de,(vTIBPtr)             ; de = TIB*
0D26                             ;     ld (de),a                   ; write ident
0D26                             ;     inc de
0D26                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0D26                             ;     ret
0D26                             ; ; printTIB
0D26                             ; printTIB:
0D26                             ;     ld hl,(vTIBPtr)
0D26                             ;     ld de,TIB
0D26                             ;     or a
0D26                             ;     sbc hl,de
0D26                             ;     jp printTIB2
0D26                             ; printTIB1:
0D26                             ;     ld a,(de)
0D26                             ;     call putchar
0D26                             ; printTIB2:
0D26                             ;     ld a,l
0D26                             ;     or h
0D26                             ;     jr nz,printTIB1
0D26                             ;     jp (ix)
0D26                             ; editBlock:
0D26                             ;     pop hl                      ; hl = block*
0D26                             ; editBlock0:
0D26                             ;     push ix                     ; save next
0D26                             ;     push hl                     ; push block*
0D26                             ;     push hl                     ; push block*
0D26                             ;     ld ix,(editBlock2)
0D26                             ;     jp blockLength
0D26                             ; editBlock1:
0D26                             ;     pop hl                      ; bc = length, (sp) = IP
0D26                             ;     pop de                      ; de = block*
0D26                             ;     ld a,l
0D26                             ;     or h
0D26                             ;     jr z,editBlock2
0D26                             ;     push bc
0D26                             ;     ld bc,hl
0D26                             ;     ex de,hl                    ; hl = block*
0D26                             ;     ld de,(vTIBPtr)              ; de = TIB*
0D26                             ;     ldir                        ; copy block to TIB
0D26                             ;     ld (vTIBPtr),de              ; save TIB*
0D26                             ;     pop bc
0D26                             ; editBlock2:
0D26                             ;     pop ix                      ; restore next
0D26                             ;     jp (ix)
0D26                             ; editLambda:
0D26                             ;     jp (ix)
0D26                             ; editArray:
0D26                             ;     jp (ix)
0D26                             ; editArglist:
0D26                             ;     jp (ix)
0D26                             ; ; blockLength
0D26                             ; ; addr1 -- length
0D26                             ; blockLength:
0D26                             ;     pop hl                      ; block*
0D26                             ;     push hl                     ; save block*
0D26                             ;     inc hl                      ; skip first char
0D26                             ;     ld d,1                      ; increase nesting
0D26                             ; blockLength1:                   ; Skip to end of definition
0D26                             ;     ld a,(hl)                   ; Get the next character
0D26                             ;     inc hl                      ; Point to next character
0D26                             ;     cp " " + 1                  ; ignore whitespace
0D26                             ;     jr c,blockLength1
0D26                             ;     cp ")"
0D26                             ;     jr z,blockLength4
0D26                             ;     cp "}"
0D26                             ;     jr z,blockLength4
0D26                             ;     cp "]"
0D26                             ;     jr z,blockLength4
0D26                             ;     cp "("
0D26                             ;     jr z,blockLength2
0D26                             ;     cp "{"
0D26                             ;     jr z,blockLength2
0D26                             ;     cp "["
0D26                             ;     jr z,blockLength2
0D26                             ;     cp "'"
0D26                             ;     jr z,blockLength3
0D26                             ;     cp "`"
0D26                             ;     jr z,blockLength3
0D26                             ;     cp DQ
0D26                             ;     jr z,blockLength3
0D26                             ;     jr blockLength1
0D26                             ; blockLength2:
0D26                             ;     inc d
0D26                             ;     jr blockLength1
0D26                             ; blockLength4:
0D26                             ;     dec d
0D26                             ;     jr nz, blockLength1         ; get the next element
0D26                             ; blockLength3:
0D26                             ;     ld a,$80
0D26                             ;     xor d
0D26                             ;     ld d,a
0D26                             ;     jr nz, blockLength1
0D26                             ;     pop hl                      ; hl = block*
0D26                             ;     or a
0D26                             ;     sbc hl,de
0D26                             ;     push hl
0D26                             ;     jp (ix)
0D26                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0D26                             ; \a start of stack \#3 depth \b base \$ prompt
0D26                             ; DW dStack               ; a vS0 start of datastack			
0D26                             ; DW FALSE                ; b vBase16
0D26                             ; DW 0                    ; c vTIBPtr an offset to the tib
0D26                             ; DW 0                    ; d
0D26                             ; DW 65                   ; e vLastDef "A" last command u defined
0D26                             ; DW 0                    ; f
0D26                             ; DW page6                ; g 256 bytes limits
0D26                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0D26                          ALIGN   $100   
0E00                TESTSSTART:      
0E00                          ;*Macro unroll:  test "1 :b{:a{%a}/px};^F= 3F^",3
0E00   31 00 4C               LD   SP,STACK   
0E03   CD 03 0C               CALL   coldInit   
0E06   CD 46 4A               CALL   execStr   
0E09   31 20 3A 62 7B 3A 61 7B 25 61 7D 2F 70 78 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a}/px};^F= 3F^",0   
0E21   CD 43 0B               CALL   flushBuffer   
0E24   E1                     POP   HL   
0E25   E5                     PUSH   HL   
0E26   11 03 00               LD   DE,3   
0E29   B7                     OR   A   
0E2A   ED 52                  SBC   HL,DE   
0E2C   7D                     LD   A,L   
0E2D   B4                     OR   H   
0E2E   CA A0 0E               JP   Z,expectM_2776S15   
0E31   CD BB 0B               CALL   printStr   
0E34   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 2F 70 78 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a}/px};^F= 3F^"   
0E52   CD BB 0B               CALL   printStr   
0E55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E64   21 03 00               LD   hl,3   
0E67   E5                     PUSH   hl   
0E68   E5                     PUSH   hl   
0E69   CD DA 0C               CALL   run   
0E6C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E74   CD 43 0B               CALL   flushBuffer   
0E77   CD BB 0B               CALL   printStr   
0E7A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E87   E1                     POP   hl   
0E88   E5                     PUSH   hl   
0E89   E5                     PUSH   hl   
0E8A   CD DA 0C               CALL   run   
0E8D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E9C   CD 43 0B               CALL   flushBuffer   
0E9F   76                     HALT      
0EA0                EXPECTM_2776S15:      
0EA0   E1                     POP   HL   
0EA1                             ; test ":ab{%b %a-}/px F= 1 2F^ .", false
0EA1   CD BB 0B               CALL   printStr   
0EA4   44 6F 6E 65 21 00      .CSTR   "Done!"   
0EAA   76                     HALT      
0EAB                             ; 
0EAB                          ;*Macro unroll:  test "/f", false
0EAB   31 00 4C               LD   SP,STACK   
0EAE   CD 03 0C               CALL   coldInit   
0EB1   CD 46 4A               CALL   execStr   
0EB4   2F 66 00               DB   "/f",0   
0EB7   CD 43 0B               CALL   flushBuffer   
0EBA   E1                     POP   HL   
0EBB   E5                     PUSH   HL   
0EBC   11 00 00               LD   DE,false   
0EBF   B7                     OR   A   
0EC0   ED 52                  SBC   HL,DE   
0EC2   7D                     LD   A,L   
0EC3   B4                     OR   H   
0EC4   CA 21 0F               JP   Z,expectM_2782S24   
0EC7   CD BB 0B               CALL   printStr   
0ECA   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0ED3   CD BB 0B               CALL   printStr   
0ED6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EE5   21 00 00               LD   hl,false   
0EE8   E5                     PUSH   hl   
0EE9   E5                     PUSH   hl   
0EEA   CD DA 0C               CALL   run   
0EED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0EF5   CD 43 0B               CALL   flushBuffer   
0EF8   CD BB 0B               CALL   printStr   
0EFB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F08   E1                     POP   hl   
0F09   E5                     PUSH   hl   
0F0A   E5                     PUSH   hl   
0F0B   CD DA 0C               CALL   run   
0F0E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F1D   CD 43 0B               CALL   flushBuffer   
0F20   76                     HALT      
0F21                EXPECTM_2782S24:      
0F21   E1                     POP   HL   
0F22                          ;*Macro unroll:  test "/t", true
0F22   31 00 4C               LD   SP,STACK   
0F25   CD 03 0C               CALL   coldInit   
0F28   CD 46 4A               CALL   execStr   
0F2B   2F 74 00               DB   "/t",0   
0F2E   CD 43 0B               CALL   flushBuffer   
0F31   E1                     POP   HL   
0F32   E5                     PUSH   HL   
0F33   11 FF FF               LD   DE,true   
0F36   B7                     OR   A   
0F37   ED 52                  SBC   HL,DE   
0F39   7D                     LD   A,L   
0F3A   B4                     OR   H   
0F3B   CA 98 0F               JP   Z,expectM_2783S25   
0F3E   CD BB 0B               CALL   printStr   
0F41   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0F4A   CD BB 0B               CALL   printStr   
0F4D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F5C   21 FF FF               LD   hl,true   
0F5F   E5                     PUSH   hl   
0F60   E5                     PUSH   hl   
0F61   CD DA 0C               CALL   run   
0F64   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F6C   CD 43 0B               CALL   flushBuffer   
0F6F   CD BB 0B               CALL   printStr   
0F72   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F7F   E1                     POP   hl   
0F80   E5                     PUSH   hl   
0F81   E5                     PUSH   hl   
0F82   CD DA 0C               CALL   run   
0F85   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F94   CD 43 0B               CALL   flushBuffer   
0F97   76                     HALT      
0F98                EXPECTM_2783S25:      
0F98   E1                     POP   HL   
0F99                          ;*Macro unroll:  test "1", 1
0F99   31 00 4C               LD   SP,STACK   
0F9C   CD 03 0C               CALL   coldInit   
0F9F   CD 46 4A               CALL   execStr   
0FA2   31 00                  DB   "1",0   
0FA4   CD 43 0B               CALL   flushBuffer   
0FA7   E1                     POP   HL   
0FA8   E5                     PUSH   HL   
0FA9   11 01 00               LD   DE,1   
0FAC   B7                     OR   A   
0FAD   ED 52                  SBC   HL,DE   
0FAF   7D                     LD   A,L   
0FB0   B4                     OR   H   
0FB1   CA 0D 10               JP   Z,expectM_2784S26   
0FB4   CD BB 0B               CALL   printStr   
0FB7   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0FBF   CD BB 0B               CALL   printStr   
0FC2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FD1   21 01 00               LD   hl,1   
0FD4   E5                     PUSH   hl   
0FD5   E5                     PUSH   hl   
0FD6   CD DA 0C               CALL   run   
0FD9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FE1   CD 43 0B               CALL   flushBuffer   
0FE4   CD BB 0B               CALL   printStr   
0FE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FF4   E1                     POP   hl   
0FF5   E5                     PUSH   hl   
0FF6   E5                     PUSH   hl   
0FF7   CD DA 0C               CALL   run   
0FFA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1009   CD 43 0B               CALL   flushBuffer   
100C   76                     HALT      
100D                EXPECTM_2784S26:      
100D   E1                     POP   HL   
100E                          ;*Macro unroll:  test "2", 2
100E   31 00 4C               LD   SP,STACK   
1011   CD 03 0C               CALL   coldInit   
1014   CD 46 4A               CALL   execStr   
1017   32 00                  DB   "2",0   
1019   CD 43 0B               CALL   flushBuffer   
101C   E1                     POP   HL   
101D   E5                     PUSH   HL   
101E   11 02 00               LD   DE,2   
1021   B7                     OR   A   
1022   ED 52                  SBC   HL,DE   
1024   7D                     LD   A,L   
1025   B4                     OR   H   
1026   CA 82 10               JP   Z,expectM_2785S27   
1029   CD BB 0B               CALL   printStr   
102C   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1034   CD BB 0B               CALL   printStr   
1037   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1046   21 02 00               LD   hl,2   
1049   E5                     PUSH   hl   
104A   E5                     PUSH   hl   
104B   CD DA 0C               CALL   run   
104E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1056   CD 43 0B               CALL   flushBuffer   
1059   CD BB 0B               CALL   printStr   
105C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1069   E1                     POP   hl   
106A   E5                     PUSH   hl   
106B   E5                     PUSH   hl   
106C   CD DA 0C               CALL   run   
106F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
107E   CD 43 0B               CALL   flushBuffer   
1081   76                     HALT      
1082                EXPECTM_2785S27:      
1082   E1                     POP   HL   
1083                          ;*Macro unroll:  test "1", 1
1083   31 00 4C               LD   SP,STACK   
1086   CD 03 0C               CALL   coldInit   
1089   CD 46 4A               CALL   execStr   
108C   31 00                  DB   "1",0   
108E   CD 43 0B               CALL   flushBuffer   
1091   E1                     POP   HL   
1092   E5                     PUSH   HL   
1093   11 01 00               LD   DE,1   
1096   B7                     OR   A   
1097   ED 52                  SBC   HL,DE   
1099   7D                     LD   A,L   
109A   B4                     OR   H   
109B   CA F7 10               JP   Z,expectM_2786S28   
109E   CD BB 0B               CALL   printStr   
10A1   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
10A9   CD BB 0B               CALL   printStr   
10AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10BB   21 01 00               LD   hl,1   
10BE   E5                     PUSH   hl   
10BF   E5                     PUSH   hl   
10C0   CD DA 0C               CALL   run   
10C3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10CB   CD 43 0B               CALL   flushBuffer   
10CE   CD BB 0B               CALL   printStr   
10D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10DE   E1                     POP   hl   
10DF   E5                     PUSH   hl   
10E0   E5                     PUSH   hl   
10E1   CD DA 0C               CALL   run   
10E4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10F3   CD 43 0B               CALL   flushBuffer   
10F6   76                     HALT      
10F7                EXPECTM_2786S28:      
10F7   E1                     POP   HL   
10F8                          ;*Macro unroll:  test "0", 0
10F8   31 00 4C               LD   SP,STACK   
10FB   CD 03 0C               CALL   coldInit   
10FE   CD 46 4A               CALL   execStr   
1101   30 00                  DB   "0",0   
1103   CD 43 0B               CALL   flushBuffer   
1106   E1                     POP   HL   
1107   E5                     PUSH   HL   
1108   11 00 00               LD   DE,0   
110B   B7                     OR   A   
110C   ED 52                  SBC   HL,DE   
110E   7D                     LD   A,L   
110F   B4                     OR   H   
1110   CA 6C 11               JP   Z,expectM_2787S29   
1113   CD BB 0B               CALL   printStr   
1116   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
111E   CD BB 0B               CALL   printStr   
1121   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1130   21 00 00               LD   hl,0   
1133   E5                     PUSH   hl   
1134   E5                     PUSH   hl   
1135   CD DA 0C               CALL   run   
1138   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1140   CD 43 0B               CALL   flushBuffer   
1143   CD BB 0B               CALL   printStr   
1146   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1153   E1                     POP   hl   
1154   E5                     PUSH   hl   
1155   E5                     PUSH   hl   
1156   CD DA 0C               CALL   run   
1159   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1168   CD 43 0B               CALL   flushBuffer   
116B   76                     HALT      
116C                EXPECTM_2787S29:      
116C   E1                     POP   HL   
116D                          ;*Macro unroll:  test "10", 10
116D   31 00 4C               LD   SP,STACK   
1170   CD 03 0C               CALL   coldInit   
1173   CD 46 4A               CALL   execStr   
1176   31 30 00               DB   "10",0   
1179   CD 43 0B               CALL   flushBuffer   
117C   E1                     POP   HL   
117D   E5                     PUSH   HL   
117E   11 0A 00               LD   DE,10   
1181   B7                     OR   A   
1182   ED 52                  SBC   HL,DE   
1184   7D                     LD   A,L   
1185   B4                     OR   H   
1186   CA E3 11               JP   Z,expectM_2788S30   
1189   CD BB 0B               CALL   printStr   
118C   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1195   CD BB 0B               CALL   printStr   
1198   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11A7   21 0A 00               LD   hl,10   
11AA   E5                     PUSH   hl   
11AB   E5                     PUSH   hl   
11AC   CD DA 0C               CALL   run   
11AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11B7   CD 43 0B               CALL   flushBuffer   
11BA   CD BB 0B               CALL   printStr   
11BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11CA   E1                     POP   hl   
11CB   E5                     PUSH   hl   
11CC   E5                     PUSH   hl   
11CD   CD DA 0C               CALL   run   
11D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11DF   CD 43 0B               CALL   flushBuffer   
11E2   76                     HALT      
11E3                EXPECTM_2788S30:      
11E3   E1                     POP   HL   
11E4                          ;*Macro unroll:  test "123", 123
11E4   31 00 4C               LD   SP,STACK   
11E7   CD 03 0C               CALL   coldInit   
11EA   CD 46 4A               CALL   execStr   
11ED   31 32 33 00            DB   "123",0   
11F1   CD 43 0B               CALL   flushBuffer   
11F4   E1                     POP   HL   
11F5   E5                     PUSH   HL   
11F6   11 7B 00               LD   DE,123   
11F9   B7                     OR   A   
11FA   ED 52                  SBC   HL,DE   
11FC   7D                     LD   A,L   
11FD   B4                     OR   H   
11FE   CA 5C 12               JP   Z,expectM_2789S31   
1201   CD BB 0B               CALL   printStr   
1204   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
120E   CD BB 0B               CALL   printStr   
1211   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1220   21 7B 00               LD   hl,123   
1223   E5                     PUSH   hl   
1224   E5                     PUSH   hl   
1225   CD DA 0C               CALL   run   
1228   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1230   CD 43 0B               CALL   flushBuffer   
1233   CD BB 0B               CALL   printStr   
1236   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1243   E1                     POP   hl   
1244   E5                     PUSH   hl   
1245   E5                     PUSH   hl   
1246   CD DA 0C               CALL   run   
1249   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1258   CD 43 0B               CALL   flushBuffer   
125B   76                     HALT      
125C                EXPECTM_2789S31:      
125C   E1                     POP   HL   
125D                          ;*Macro unroll:  test "-1",-1
125D   31 00 4C               LD   SP,STACK   
1260   CD 03 0C               CALL   coldInit   
1263   CD 46 4A               CALL   execStr   
1266   2D 31 00               DB   "-1",0   
1269   CD 43 0B               CALL   flushBuffer   
126C   E1                     POP   HL   
126D   E5                     PUSH   HL   
126E   11 FF FF               LD   DE,-1   
1271   B7                     OR   A   
1272   ED 52                  SBC   HL,DE   
1274   7D                     LD   A,L   
1275   B4                     OR   H   
1276   CA D3 12               JP   Z,expectM_2790S32   
1279   CD BB 0B               CALL   printStr   
127C   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1285   CD BB 0B               CALL   printStr   
1288   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1297   21 FF FF               LD   hl,-1   
129A   E5                     PUSH   hl   
129B   E5                     PUSH   hl   
129C   CD DA 0C               CALL   run   
129F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12A7   CD 43 0B               CALL   flushBuffer   
12AA   CD BB 0B               CALL   printStr   
12AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12BA   E1                     POP   hl   
12BB   E5                     PUSH   hl   
12BC   E5                     PUSH   hl   
12BD   CD DA 0C               CALL   run   
12C0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12CF   CD 43 0B               CALL   flushBuffer   
12D2   76                     HALT      
12D3                EXPECTM_2790S32:      
12D3   E1                     POP   HL   
12D4                          ;*Macro unroll:  test "''", 0
12D4   31 00 4C               LD   SP,STACK   
12D7   CD 03 0C               CALL   coldInit   
12DA   CD 46 4A               CALL   execStr   
12DD   27 27 00               DB   "''",0   
12E0   CD 43 0B               CALL   flushBuffer   
12E3   E1                     POP   HL   
12E4   E5                     PUSH   HL   
12E5   11 00 00               LD   DE,0   
12E8   B7                     OR   A   
12E9   ED 52                  SBC   HL,DE   
12EB   7D                     LD   A,L   
12EC   B4                     OR   H   
12ED   CA 4A 13               JP   Z,expectM_2791S33   
12F0   CD BB 0B               CALL   printStr   
12F3   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
12FC   CD BB 0B               CALL   printStr   
12FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
130E   21 00 00               LD   hl,0   
1311   E5                     PUSH   hl   
1312   E5                     PUSH   hl   
1313   CD DA 0C               CALL   run   
1316   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
131E   CD 43 0B               CALL   flushBuffer   
1321   CD BB 0B               CALL   printStr   
1324   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1331   E1                     POP   hl   
1332   E5                     PUSH   hl   
1333   E5                     PUSH   hl   
1334   CD DA 0C               CALL   run   
1337   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1346   CD 43 0B               CALL   flushBuffer   
1349   76                     HALT      
134A                EXPECTM_2791S33:      
134A   E1                     POP   HL   
134B                          ;*Macro unroll:  test "'a'", $61
134B   31 00 4C               LD   SP,STACK   
134E   CD 03 0C               CALL   coldInit   
1351   CD 46 4A               CALL   execStr   
1354   27 61 27 00            DB   "'a'",0   
1358   CD 43 0B               CALL   flushBuffer   
135B   E1                     POP   HL   
135C   E5                     PUSH   HL   
135D   11 61 00               LD   DE,$61   
1360   B7                     OR   A   
1361   ED 52                  SBC   HL,DE   
1363   7D                     LD   A,L   
1364   B4                     OR   H   
1365   CA C3 13               JP   Z,expectM_2792S34   
1368   CD BB 0B               CALL   printStr   
136B   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1375   CD BB 0B               CALL   printStr   
1378   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1387   21 61 00               LD   hl,$61   
138A   E5                     PUSH   hl   
138B   E5                     PUSH   hl   
138C   CD DA 0C               CALL   run   
138F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1397   CD 43 0B               CALL   flushBuffer   
139A   CD BB 0B               CALL   printStr   
139D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13AA   E1                     POP   hl   
13AB   E5                     PUSH   hl   
13AC   E5                     PUSH   hl   
13AD   CD DA 0C               CALL   run   
13B0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13BF   CD 43 0B               CALL   flushBuffer   
13C2   76                     HALT      
13C3                EXPECTM_2792S34:      
13C3   E1                     POP   HL   
13C4                          ;*Macro unroll:  test "'\\''", $27
13C4   31 00 4C               LD   SP,STACK   
13C7   CD 03 0C               CALL   coldInit   
13CA   CD 46 4A               CALL   execStr   
13CD   27 5C 27 27 00         DB   "'\\''",0   
13D2   CD 43 0B               CALL   flushBuffer   
13D5   E1                     POP   HL   
13D6   E5                     PUSH   HL   
13D7   11 27 00               LD   DE,$27   
13DA   B7                     OR   A   
13DB   ED 52                  SBC   HL,DE   
13DD   7D                     LD   A,L   
13DE   B4                     OR   H   
13DF   CA 3E 14               JP   Z,expectM_2793S35   
13E2   CD BB 0B               CALL   printStr   
13E5   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
13F0   CD BB 0B               CALL   printStr   
13F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1402   21 27 00               LD   hl,$27   
1405   E5                     PUSH   hl   
1406   E5                     PUSH   hl   
1407   CD DA 0C               CALL   run   
140A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1412   CD 43 0B               CALL   flushBuffer   
1415   CD BB 0B               CALL   printStr   
1418   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1425   E1                     POP   hl   
1426   E5                     PUSH   hl   
1427   E5                     PUSH   hl   
1428   CD DA 0C               CALL   run   
142B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
143A   CD 43 0B               CALL   flushBuffer   
143D   76                     HALT      
143E                EXPECTM_2793S35:      
143E   E1                     POP   HL   
143F                          ;*Macro unroll:  test "$10", $10
143F   31 00 4C               LD   SP,STACK   
1442   CD 03 0C               CALL   coldInit   
1445   CD 46 4A               CALL   execStr   
1448   24 31 30 00            DB   "$10",0   
144C   CD 43 0B               CALL   flushBuffer   
144F   E1                     POP   HL   
1450   E5                     PUSH   HL   
1451   11 10 00               LD   DE,$10   
1454   B7                     OR   A   
1455   ED 52                  SBC   HL,DE   
1457   7D                     LD   A,L   
1458   B4                     OR   H   
1459   CA B7 14               JP   Z,expectM_2794S36   
145C   CD BB 0B               CALL   printStr   
145F   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1469   CD BB 0B               CALL   printStr   
146C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
147B   21 10 00               LD   hl,$10   
147E   E5                     PUSH   hl   
147F   E5                     PUSH   hl   
1480   CD DA 0C               CALL   run   
1483   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
148B   CD 43 0B               CALL   flushBuffer   
148E   CD BB 0B               CALL   printStr   
1491   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
149E   E1                     POP   hl   
149F   E5                     PUSH   hl   
14A0   E5                     PUSH   hl   
14A1   CD DA 0C               CALL   run   
14A4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14B3   CD 43 0B               CALL   flushBuffer   
14B6   76                     HALT      
14B7                EXPECTM_2794S36:      
14B7   E1                     POP   HL   
14B8                          ;*Macro unroll:  test "$FF", $FF
14B8   31 00 4C               LD   SP,STACK   
14BB   CD 03 0C               CALL   coldInit   
14BE   CD 46 4A               CALL   execStr   
14C1   24 46 46 00            DB   "$FF",0   
14C5   CD 43 0B               CALL   flushBuffer   
14C8   E1                     POP   HL   
14C9   E5                     PUSH   HL   
14CA   11 FF 00               LD   DE,$FF   
14CD   B7                     OR   A   
14CE   ED 52                  SBC   HL,DE   
14D0   7D                     LD   A,L   
14D1   B4                     OR   H   
14D2   CA 30 15               JP   Z,expectM_2795S37   
14D5   CD BB 0B               CALL   printStr   
14D8   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
14E2   CD BB 0B               CALL   printStr   
14E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14F4   21 FF 00               LD   hl,$FF   
14F7   E5                     PUSH   hl   
14F8   E5                     PUSH   hl   
14F9   CD DA 0C               CALL   run   
14FC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1504   CD 43 0B               CALL   flushBuffer   
1507   CD BB 0B               CALL   printStr   
150A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1517   E1                     POP   hl   
1518   E5                     PUSH   hl   
1519   E5                     PUSH   hl   
151A   CD DA 0C               CALL   run   
151D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
152C   CD 43 0B               CALL   flushBuffer   
152F   76                     HALT      
1530                EXPECTM_2795S37:      
1530   E1                     POP   HL   
1531                          ;*Macro unroll:  test "-1 2 +",1
1531   31 00 4C               LD   SP,STACK   
1534   CD 03 0C               CALL   coldInit   
1537   CD 46 4A               CALL   execStr   
153A   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1541   CD 43 0B               CALL   flushBuffer   
1544   E1                     POP   HL   
1545   E5                     PUSH   HL   
1546   11 01 00               LD   DE,1   
1549   B7                     OR   A   
154A   ED 52                  SBC   HL,DE   
154C   7D                     LD   A,L   
154D   B4                     OR   H   
154E   CA AF 15               JP   Z,expectM_2796S38   
1551   CD BB 0B               CALL   printStr   
1554   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1561   CD BB 0B               CALL   printStr   
1564   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1573   21 01 00               LD   hl,1   
1576   E5                     PUSH   hl   
1577   E5                     PUSH   hl   
1578   CD DA 0C               CALL   run   
157B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1583   CD 43 0B               CALL   flushBuffer   
1586   CD BB 0B               CALL   printStr   
1589   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1596   E1                     POP   hl   
1597   E5                     PUSH   hl   
1598   E5                     PUSH   hl   
1599   CD DA 0C               CALL   run   
159C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15AB   CD 43 0B               CALL   flushBuffer   
15AE   76                     HALT      
15AF                EXPECTM_2796S38:      
15AF   E1                     POP   HL   
15B0                          ;*Macro unroll:  test "-1 1 +",0
15B0   31 00 4C               LD   SP,STACK   
15B3   CD 03 0C               CALL   coldInit   
15B6   CD 46 4A               CALL   execStr   
15B9   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
15C0   CD 43 0B               CALL   flushBuffer   
15C3   E1                     POP   HL   
15C4   E5                     PUSH   HL   
15C5   11 00 00               LD   DE,0   
15C8   B7                     OR   A   
15C9   ED 52                  SBC   HL,DE   
15CB   7D                     LD   A,L   
15CC   B4                     OR   H   
15CD   CA 2E 16               JP   Z,expectM_2797S39   
15D0   CD BB 0B               CALL   printStr   
15D3   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
15E0   CD BB 0B               CALL   printStr   
15E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15F2   21 00 00               LD   hl,0   
15F5   E5                     PUSH   hl   
15F6   E5                     PUSH   hl   
15F7   CD DA 0C               CALL   run   
15FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1602   CD 43 0B               CALL   flushBuffer   
1605   CD BB 0B               CALL   printStr   
1608   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1615   E1                     POP   hl   
1616   E5                     PUSH   hl   
1617   E5                     PUSH   hl   
1618   CD DA 0C               CALL   run   
161B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
162A   CD 43 0B               CALL   flushBuffer   
162D   76                     HALT      
162E                EXPECTM_2797S39:      
162E   E1                     POP   HL   
162F                          ;*Macro unroll:  test "1 2 +", 3
162F   31 00 4C               LD   SP,STACK   
1632   CD 03 0C               CALL   coldInit   
1635   CD 46 4A               CALL   execStr   
1638   31 20 32 20 2B 00      DB   "1 2 +",0   
163E   CD 43 0B               CALL   flushBuffer   
1641   E1                     POP   HL   
1642   E5                     PUSH   HL   
1643   11 03 00               LD   DE,3   
1646   B7                     OR   A   
1647   ED 52                  SBC   HL,DE   
1649   7D                     LD   A,L   
164A   B4                     OR   H   
164B   CA AB 16               JP   Z,expectM_2798S40   
164E   CD BB 0B               CALL   printStr   
1651   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
165D   CD BB 0B               CALL   printStr   
1660   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
166F   21 03 00               LD   hl,3   
1672   E5                     PUSH   hl   
1673   E5                     PUSH   hl   
1674   CD DA 0C               CALL   run   
1677   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
167F   CD 43 0B               CALL   flushBuffer   
1682   CD BB 0B               CALL   printStr   
1685   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1692   E1                     POP   hl   
1693   E5                     PUSH   hl   
1694   E5                     PUSH   hl   
1695   CD DA 0C               CALL   run   
1698   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16A7   CD 43 0B               CALL   flushBuffer   
16AA   76                     HALT      
16AB                EXPECTM_2798S40:      
16AB   E1                     POP   HL   
16AC                          ;*Macro unroll:  test "4 1 2 +", 3
16AC   31 00 4C               LD   SP,STACK   
16AF   CD 03 0C               CALL   coldInit   
16B2   CD 46 4A               CALL   execStr   
16B5   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
16BD   CD 43 0B               CALL   flushBuffer   
16C0   E1                     POP   HL   
16C1   E5                     PUSH   HL   
16C2   11 03 00               LD   DE,3   
16C5   B7                     OR   A   
16C6   ED 52                  SBC   HL,DE   
16C8   7D                     LD   A,L   
16C9   B4                     OR   H   
16CA   CA 2C 17               JP   Z,expectM_2799S41   
16CD   CD BB 0B               CALL   printStr   
16D0   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
16DE   CD BB 0B               CALL   printStr   
16E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16F0   21 03 00               LD   hl,3   
16F3   E5                     PUSH   hl   
16F4   E5                     PUSH   hl   
16F5   CD DA 0C               CALL   run   
16F8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1700   CD 43 0B               CALL   flushBuffer   
1703   CD BB 0B               CALL   printStr   
1706   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1713   E1                     POP   hl   
1714   E5                     PUSH   hl   
1715   E5                     PUSH   hl   
1716   CD DA 0C               CALL   run   
1719   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1728   CD 43 0B               CALL   flushBuffer   
172B   76                     HALT      
172C                EXPECTM_2799S41:      
172C   E1                     POP   HL   
172D                          ;*Macro unroll:  test "123 456 +", 123+456
172D   31 00 4C               LD   SP,STACK   
1730   CD 03 0C               CALL   coldInit   
1733   CD 46 4A               CALL   execStr   
1736   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1740   CD 43 0B               CALL   flushBuffer   
1743   E1                     POP   HL   
1744   E5                     PUSH   HL   
1745   11 43 02               LD   DE,123+456   
1748   B7                     OR   A   
1749   ED 52                  SBC   HL,DE   
174B   7D                     LD   A,L   
174C   B4                     OR   H   
174D   CA B1 17               JP   Z,expectM_2800S42   
1750   CD BB 0B               CALL   printStr   
1753   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1763   CD BB 0B               CALL   printStr   
1766   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1775   21 43 02               LD   hl,123+456   
1778   E5                     PUSH   hl   
1779   E5                     PUSH   hl   
177A   CD DA 0C               CALL   run   
177D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1785   CD 43 0B               CALL   flushBuffer   
1788   CD BB 0B               CALL   printStr   
178B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1798   E1                     POP   hl   
1799   E5                     PUSH   hl   
179A   E5                     PUSH   hl   
179B   CD DA 0C               CALL   run   
179E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17AD   CD 43 0B               CALL   flushBuffer   
17B0   76                     HALT      
17B1                EXPECTM_2800S42:      
17B1   E1                     POP   HL   
17B2                          ;*Macro unroll:  test "64 128 +", 64+128
17B2   31 00 4C               LD   SP,STACK   
17B5   CD 03 0C               CALL   coldInit   
17B8   CD 46 4A               CALL   execStr   
17BB   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
17C4   CD 43 0B               CALL   flushBuffer   
17C7   E1                     POP   HL   
17C8   E5                     PUSH   HL   
17C9   11 C0 00               LD   DE,64+128   
17CC   B7                     OR   A   
17CD   ED 52                  SBC   HL,DE   
17CF   7D                     LD   A,L   
17D0   B4                     OR   H   
17D1   CA 34 18               JP   Z,expectM_2801S43   
17D4   CD BB 0B               CALL   printStr   
17D7   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
17E6   CD BB 0B               CALL   printStr   
17E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17F8   21 C0 00               LD   hl,64+128   
17FB   E5                     PUSH   hl   
17FC   E5                     PUSH   hl   
17FD   CD DA 0C               CALL   run   
1800   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1808   CD 43 0B               CALL   flushBuffer   
180B   CD BB 0B               CALL   printStr   
180E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
181B   E1                     POP   hl   
181C   E5                     PUSH   hl   
181D   E5                     PUSH   hl   
181E   CD DA 0C               CALL   run   
1821   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1830   CD 43 0B               CALL   flushBuffer   
1833   76                     HALT      
1834                EXPECTM_2801S43:      
1834   E1                     POP   HL   
1835                          ;*Macro unroll:  test "1 2 +", 3
1835   31 00 4C               LD   SP,STACK   
1838   CD 03 0C               CALL   coldInit   
183B   CD 46 4A               CALL   execStr   
183E   31 20 32 20 2B 00      DB   "1 2 +",0   
1844   CD 43 0B               CALL   flushBuffer   
1847   E1                     POP   HL   
1848   E5                     PUSH   HL   
1849   11 03 00               LD   DE,3   
184C   B7                     OR   A   
184D   ED 52                  SBC   HL,DE   
184F   7D                     LD   A,L   
1850   B4                     OR   H   
1851   CA B1 18               JP   Z,expectM_2802S44   
1854   CD BB 0B               CALL   printStr   
1857   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1863   CD BB 0B               CALL   printStr   
1866   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1875   21 03 00               LD   hl,3   
1878   E5                     PUSH   hl   
1879   E5                     PUSH   hl   
187A   CD DA 0C               CALL   run   
187D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1885   CD 43 0B               CALL   flushBuffer   
1888   CD BB 0B               CALL   printStr   
188B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1898   E1                     POP   hl   
1899   E5                     PUSH   hl   
189A   E5                     PUSH   hl   
189B   CD DA 0C               CALL   run   
189E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18AD   CD 43 0B               CALL   flushBuffer   
18B0   76                     HALT      
18B1                EXPECTM_2802S44:      
18B1   E1                     POP   HL   
18B2                          ;*Macro unroll:  test "1a= a++ a",2
18B2   31 00 4C               LD   SP,STACK   
18B5   CD 03 0C               CALL   coldInit   
18B8   CD 46 4A               CALL   execStr   
18BB   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
18C5   CD 43 0B               CALL   flushBuffer   
18C8   E1                     POP   HL   
18C9   E5                     PUSH   HL   
18CA   11 02 00               LD   DE,2   
18CD   B7                     OR   A   
18CE   ED 52                  SBC   HL,DE   
18D0   7D                     LD   A,L   
18D1   B4                     OR   H   
18D2   CA 36 19               JP   Z,expectM_2803S45   
18D5   CD BB 0B               CALL   printStr   
18D8   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
18E8   CD BB 0B               CALL   printStr   
18EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18FA   21 02 00               LD   hl,2   
18FD   E5                     PUSH   hl   
18FE   E5                     PUSH   hl   
18FF   CD DA 0C               CALL   run   
1902   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
190A   CD 43 0B               CALL   flushBuffer   
190D   CD BB 0B               CALL   printStr   
1910   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
191D   E1                     POP   hl   
191E   E5                     PUSH   hl   
191F   E5                     PUSH   hl   
1920   CD DA 0C               CALL   run   
1923   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1932   CD 43 0B               CALL   flushBuffer   
1935   76                     HALT      
1936                EXPECTM_2803S45:      
1936   E1                     POP   HL   
1937                          ;*Macro unroll:  test "-1 -1 -",0
1937   31 00 4C               LD   SP,STACK   
193A   CD 03 0C               CALL   coldInit   
193D   CD 46 4A               CALL   execStr   
1940   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1948   CD 43 0B               CALL   flushBuffer   
194B   E1                     POP   HL   
194C   E5                     PUSH   HL   
194D   11 00 00               LD   DE,0   
1950   B7                     OR   A   
1951   ED 52                  SBC   HL,DE   
1953   7D                     LD   A,L   
1954   B4                     OR   H   
1955   CA B7 19               JP   Z,expectM_2804S46   
1958   CD BB 0B               CALL   printStr   
195B   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1969   CD BB 0B               CALL   printStr   
196C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
197B   21 00 00               LD   hl,0   
197E   E5                     PUSH   hl   
197F   E5                     PUSH   hl   
1980   CD DA 0C               CALL   run   
1983   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
198B   CD 43 0B               CALL   flushBuffer   
198E   CD BB 0B               CALL   printStr   
1991   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
199E   E1                     POP   hl   
199F   E5                     PUSH   hl   
19A0   E5                     PUSH   hl   
19A1   CD DA 0C               CALL   run   
19A4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19B3   CD 43 0B               CALL   flushBuffer   
19B6   76                     HALT      
19B7                EXPECTM_2804S46:      
19B7   E1                     POP   HL   
19B8                          ;*Macro unroll:  test "5 3 -", 2
19B8   31 00 4C               LD   SP,STACK   
19BB   CD 03 0C               CALL   coldInit   
19BE   CD 46 4A               CALL   execStr   
19C1   35 20 33 20 2D 00      DB   "5 3 -",0   
19C7   CD 43 0B               CALL   flushBuffer   
19CA   E1                     POP   HL   
19CB   E5                     PUSH   HL   
19CC   11 02 00               LD   DE,2   
19CF   B7                     OR   A   
19D0   ED 52                  SBC   HL,DE   
19D2   7D                     LD   A,L   
19D3   B4                     OR   H   
19D4   CA 34 1A               JP   Z,expectM_2805S47   
19D7   CD BB 0B               CALL   printStr   
19DA   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
19E6   CD BB 0B               CALL   printStr   
19E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19F8   21 02 00               LD   hl,2   
19FB   E5                     PUSH   hl   
19FC   E5                     PUSH   hl   
19FD   CD DA 0C               CALL   run   
1A00   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A08   CD 43 0B               CALL   flushBuffer   
1A0B   CD BB 0B               CALL   printStr   
1A0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A1B   E1                     POP   hl   
1A1C   E5                     PUSH   hl   
1A1D   E5                     PUSH   hl   
1A1E   CD DA 0C               CALL   run   
1A21   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A30   CD 43 0B               CALL   flushBuffer   
1A33   76                     HALT      
1A34                EXPECTM_2805S47:      
1A34   E1                     POP   HL   
1A35                          ;*Macro unroll:  test "2 1 -",1
1A35   31 00 4C               LD   SP,STACK   
1A38   CD 03 0C               CALL   coldInit   
1A3B   CD 46 4A               CALL   execStr   
1A3E   32 20 31 20 2D 00      DB   "2 1 -",0   
1A44   CD 43 0B               CALL   flushBuffer   
1A47   E1                     POP   HL   
1A48   E5                     PUSH   HL   
1A49   11 01 00               LD   DE,1   
1A4C   B7                     OR   A   
1A4D   ED 52                  SBC   HL,DE   
1A4F   7D                     LD   A,L   
1A50   B4                     OR   H   
1A51   CA B1 1A               JP   Z,expectM_2806S48   
1A54   CD BB 0B               CALL   printStr   
1A57   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1A63   CD BB 0B               CALL   printStr   
1A66   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A75   21 01 00               LD   hl,1   
1A78   E5                     PUSH   hl   
1A79   E5                     PUSH   hl   
1A7A   CD DA 0C               CALL   run   
1A7D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A85   CD 43 0B               CALL   flushBuffer   
1A88   CD BB 0B               CALL   printStr   
1A8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A98   E1                     POP   hl   
1A99   E5                     PUSH   hl   
1A9A   E5                     PUSH   hl   
1A9B   CD DA 0C               CALL   run   
1A9E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1AAD   CD 43 0B               CALL   flushBuffer   
1AB0   76                     HALT      
1AB1                EXPECTM_2806S48:      
1AB1   E1                     POP   HL   
1AB2                          ;*Macro unroll:  test "3a= a-- a",2
1AB2   31 00 4C               LD   SP,STACK   
1AB5   CD 03 0C               CALL   coldInit   
1AB8   CD 46 4A               CALL   execStr   
1ABB   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1AC5   CD 43 0B               CALL   flushBuffer   
1AC8   E1                     POP   HL   
1AC9   E5                     PUSH   HL   
1ACA   11 02 00               LD   DE,2   
1ACD   B7                     OR   A   
1ACE   ED 52                  SBC   HL,DE   
1AD0   7D                     LD   A,L   
1AD1   B4                     OR   H   
1AD2   CA 36 1B               JP   Z,expectM_2807S49   
1AD5   CD BB 0B               CALL   printStr   
1AD8   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1AE8   CD BB 0B               CALL   printStr   
1AEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AFA   21 02 00               LD   hl,2   
1AFD   E5                     PUSH   hl   
1AFE   E5                     PUSH   hl   
1AFF   CD DA 0C               CALL   run   
1B02   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B0A   CD 43 0B               CALL   flushBuffer   
1B0D   CD BB 0B               CALL   printStr   
1B10   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B1D   E1                     POP   hl   
1B1E   E5                     PUSH   hl   
1B1F   E5                     PUSH   hl   
1B20   CD DA 0C               CALL   run   
1B23   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B32   CD 43 0B               CALL   flushBuffer   
1B35   76                     HALT      
1B36                EXPECTM_2807S49:      
1B36   E1                     POP   HL   
1B37                          ;*Macro unroll:  test "3 5 &", 1
1B37   31 00 4C               LD   SP,STACK   
1B3A   CD 03 0C               CALL   coldInit   
1B3D   CD 46 4A               CALL   execStr   
1B40   33 20 35 20 26 00      DB   "3 5 &",0   
1B46   CD 43 0B               CALL   flushBuffer   
1B49   E1                     POP   HL   
1B4A   E5                     PUSH   HL   
1B4B   11 01 00               LD   DE,1   
1B4E   B7                     OR   A   
1B4F   ED 52                  SBC   HL,DE   
1B51   7D                     LD   A,L   
1B52   B4                     OR   H   
1B53   CA B3 1B               JP   Z,expectM_2808S50   
1B56   CD BB 0B               CALL   printStr   
1B59   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1B65   CD BB 0B               CALL   printStr   
1B68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B77   21 01 00               LD   hl,1   
1B7A   E5                     PUSH   hl   
1B7B   E5                     PUSH   hl   
1B7C   CD DA 0C               CALL   run   
1B7F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B87   CD 43 0B               CALL   flushBuffer   
1B8A   CD BB 0B               CALL   printStr   
1B8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B9A   E1                     POP   hl   
1B9B   E5                     PUSH   hl   
1B9C   E5                     PUSH   hl   
1B9D   CD DA 0C               CALL   run   
1BA0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BAF   CD 43 0B               CALL   flushBuffer   
1BB2   76                     HALT      
1BB3                EXPECTM_2808S50:      
1BB3   E1                     POP   HL   
1BB4                          ;*Macro unroll:  test "3 5 |", 7
1BB4   31 00 4C               LD   SP,STACK   
1BB7   CD 03 0C               CALL   coldInit   
1BBA   CD 46 4A               CALL   execStr   
1BBD   33 20 35 20 7C 00      DB   "3 5 |",0   
1BC3   CD 43 0B               CALL   flushBuffer   
1BC6   E1                     POP   HL   
1BC7   E5                     PUSH   HL   
1BC8   11 07 00               LD   DE,7   
1BCB   B7                     OR   A   
1BCC   ED 52                  SBC   HL,DE   
1BCE   7D                     LD   A,L   
1BCF   B4                     OR   H   
1BD0   CA 30 1C               JP   Z,expectM_2809S51   
1BD3   CD BB 0B               CALL   printStr   
1BD6   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1BE2   CD BB 0B               CALL   printStr   
1BE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BF4   21 07 00               LD   hl,7   
1BF7   E5                     PUSH   hl   
1BF8   E5                     PUSH   hl   
1BF9   CD DA 0C               CALL   run   
1BFC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C04   CD 43 0B               CALL   flushBuffer   
1C07   CD BB 0B               CALL   printStr   
1C0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C17   E1                     POP   hl   
1C18   E5                     PUSH   hl   
1C19   E5                     PUSH   hl   
1C1A   CD DA 0C               CALL   run   
1C1D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C2C   CD 43 0B               CALL   flushBuffer   
1C2F   76                     HALT      
1C30                EXPECTM_2809S51:      
1C30   E1                     POP   HL   
1C31                          ;*Macro unroll:  test "3 5 /x", 6
1C31   31 00 4C               LD   SP,STACK   
1C34   CD 03 0C               CALL   coldInit   
1C37   CD 46 4A               CALL   execStr   
1C3A   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1C41   CD 43 0B               CALL   flushBuffer   
1C44   E1                     POP   HL   
1C45   E5                     PUSH   HL   
1C46   11 06 00               LD   DE,6   
1C49   B7                     OR   A   
1C4A   ED 52                  SBC   HL,DE   
1C4C   7D                     LD   A,L   
1C4D   B4                     OR   H   
1C4E   CA AF 1C               JP   Z,expectM_2810S52   
1C51   CD BB 0B               CALL   printStr   
1C54   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1C61   CD BB 0B               CALL   printStr   
1C64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C73   21 06 00               LD   hl,6   
1C76   E5                     PUSH   hl   
1C77   E5                     PUSH   hl   
1C78   CD DA 0C               CALL   run   
1C7B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C83   CD 43 0B               CALL   flushBuffer   
1C86   CD BB 0B               CALL   printStr   
1C89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C96   E1                     POP   hl   
1C97   E5                     PUSH   hl   
1C98   E5                     PUSH   hl   
1C99   CD DA 0C               CALL   run   
1C9C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CAB   CD 43 0B               CALL   flushBuffer   
1CAE   76                     HALT      
1CAF                EXPECTM_2810S52:      
1CAF   E1                     POP   HL   
1CB0                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1CB0   31 00 4C               LD   SP,STACK   
1CB3   CD 03 0C               CALL   coldInit   
1CB6   CD 46 4A               CALL   execStr   
1CB9   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1CC8   CD 43 0B               CALL   flushBuffer   
1CCB   E1                     POP   HL   
1CCC   E5                     PUSH   HL   
1CCD   11 06 00               LD   DE,6   
1CD0   B7                     OR   A   
1CD1   ED 52                  SBC   HL,DE   
1CD3   7D                     LD   A,L   
1CD4   B4                     OR   H   
1CD5   CA 3E 1D               JP   Z,expectM_2811S53   
1CD8   CD BB 0B               CALL   printStr   
1CDB   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1CF0   CD BB 0B               CALL   printStr   
1CF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D02   21 06 00               LD   hl,6   
1D05   E5                     PUSH   hl   
1D06   E5                     PUSH   hl   
1D07   CD DA 0C               CALL   run   
1D0A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D12   CD 43 0B               CALL   flushBuffer   
1D15   CD BB 0B               CALL   printStr   
1D18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D25   E1                     POP   hl   
1D26   E5                     PUSH   hl   
1D27   E5                     PUSH   hl   
1D28   CD DA 0C               CALL   run   
1D2B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D3A   CD 43 0B               CALL   flushBuffer   
1D3D   76                     HALT      
1D3E                EXPECTM_2811S53:      
1D3E   E1                     POP   HL   
1D3F                          ;*Macro unroll:  test "2 3 *", 6
1D3F   31 00 4C               LD   SP,STACK   
1D42   CD 03 0C               CALL   coldInit   
1D45   CD 46 4A               CALL   execStr   
1D48   32 20 33 20 2A 00      DB   "2 3 *",0   
1D4E   CD 43 0B               CALL   flushBuffer   
1D51   E1                     POP   HL   
1D52   E5                     PUSH   HL   
1D53   11 06 00               LD   DE,6   
1D56   B7                     OR   A   
1D57   ED 52                  SBC   HL,DE   
1D59   7D                     LD   A,L   
1D5A   B4                     OR   H   
1D5B   CA BB 1D               JP   Z,expectM_2812S54   
1D5E   CD BB 0B               CALL   printStr   
1D61   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1D6D   CD BB 0B               CALL   printStr   
1D70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D7F   21 06 00               LD   hl,6   
1D82   E5                     PUSH   hl   
1D83   E5                     PUSH   hl   
1D84   CD DA 0C               CALL   run   
1D87   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D8F   CD 43 0B               CALL   flushBuffer   
1D92   CD BB 0B               CALL   printStr   
1D95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DA2   E1                     POP   hl   
1DA3   E5                     PUSH   hl   
1DA4   E5                     PUSH   hl   
1DA5   CD DA 0C               CALL   run   
1DA8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DB7   CD 43 0B               CALL   flushBuffer   
1DBA   76                     HALT      
1DBB                EXPECTM_2812S54:      
1DBB   E1                     POP   HL   
1DBC                          ;*Macro unroll:  test "1 2 3 + *", 5
1DBC   31 00 4C               LD   SP,STACK   
1DBF   CD 03 0C               CALL   coldInit   
1DC2   CD 46 4A               CALL   execStr   
1DC5   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1DCF   CD 43 0B               CALL   flushBuffer   
1DD2   E1                     POP   HL   
1DD3   E5                     PUSH   HL   
1DD4   11 05 00               LD   DE,5   
1DD7   B7                     OR   A   
1DD8   ED 52                  SBC   HL,DE   
1DDA   7D                     LD   A,L   
1DDB   B4                     OR   H   
1DDC   CA 40 1E               JP   Z,expectM_2813S55   
1DDF   CD BB 0B               CALL   printStr   
1DE2   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1DF2   CD BB 0B               CALL   printStr   
1DF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E04   21 05 00               LD   hl,5   
1E07   E5                     PUSH   hl   
1E08   E5                     PUSH   hl   
1E09   CD DA 0C               CALL   run   
1E0C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E14   CD 43 0B               CALL   flushBuffer   
1E17   CD BB 0B               CALL   printStr   
1E1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E27   E1                     POP   hl   
1E28   E5                     PUSH   hl   
1E29   E5                     PUSH   hl   
1E2A   CD DA 0C               CALL   run   
1E2D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E3C   CD 43 0B               CALL   flushBuffer   
1E3F   76                     HALT      
1E40                EXPECTM_2813S55:      
1E40   E1                     POP   HL   
1E41                          ;*Macro unroll:  test "7 3 /", 2
1E41   31 00 4C               LD   SP,STACK   
1E44   CD 03 0C               CALL   coldInit   
1E47   CD 46 4A               CALL   execStr   
1E4A   37 20 33 20 2F 00      DB   "7 3 /",0   
1E50   CD 43 0B               CALL   flushBuffer   
1E53   E1                     POP   HL   
1E54   E5                     PUSH   HL   
1E55   11 02 00               LD   DE,2   
1E58   B7                     OR   A   
1E59   ED 52                  SBC   HL,DE   
1E5B   7D                     LD   A,L   
1E5C   B4                     OR   H   
1E5D   CA BD 1E               JP   Z,expectM_2814S56   
1E60   CD BB 0B               CALL   printStr   
1E63   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1E6F   CD BB 0B               CALL   printStr   
1E72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E81   21 02 00               LD   hl,2   
1E84   E5                     PUSH   hl   
1E85   E5                     PUSH   hl   
1E86   CD DA 0C               CALL   run   
1E89   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E91   CD 43 0B               CALL   flushBuffer   
1E94   CD BB 0B               CALL   printStr   
1E97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EA4   E1                     POP   hl   
1EA5   E5                     PUSH   hl   
1EA6   E5                     PUSH   hl   
1EA7   CD DA 0C               CALL   run   
1EAA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1EB9   CD 43 0B               CALL   flushBuffer   
1EBC   76                     HALT      
1EBD                EXPECTM_2814S56:      
1EBD   E1                     POP   HL   
1EBE                          ;*Macro unroll:  test "7 3 / /re", 1
1EBE   31 00 4C               LD   SP,STACK   
1EC1   CD 03 0C               CALL   coldInit   
1EC4   CD 46 4A               CALL   execStr   
1EC7   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
1ED1   CD 43 0B               CALL   flushBuffer   
1ED4   E1                     POP   HL   
1ED5   E5                     PUSH   HL   
1ED6   11 01 00               LD   DE,1   
1ED9   B7                     OR   A   
1EDA   ED 52                  SBC   HL,DE   
1EDC   7D                     LD   A,L   
1EDD   B4                     OR   H   
1EDE   CA 42 1F               JP   Z,expectM_2815S57   
1EE1   CD BB 0B               CALL   printStr   
1EE4   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
1EF4   CD BB 0B               CALL   printStr   
1EF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F06   21 01 00               LD   hl,1   
1F09   E5                     PUSH   hl   
1F0A   E5                     PUSH   hl   
1F0B   CD DA 0C               CALL   run   
1F0E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F16   CD 43 0B               CALL   flushBuffer   
1F19   CD BB 0B               CALL   printStr   
1F1C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F29   E1                     POP   hl   
1F2A   E5                     PUSH   hl   
1F2B   E5                     PUSH   hl   
1F2C   CD DA 0C               CALL   run   
1F2F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F3E   CD 43 0B               CALL   flushBuffer   
1F41   76                     HALT      
1F42                EXPECTM_2815S57:      
1F42   E1                     POP   HL   
1F43                          ;*Macro unroll:  test "7 3 /", 2
1F43   31 00 4C               LD   SP,STACK   
1F46   CD 03 0C               CALL   coldInit   
1F49   CD 46 4A               CALL   execStr   
1F4C   37 20 33 20 2F 00      DB   "7 3 /",0   
1F52   CD 43 0B               CALL   flushBuffer   
1F55   E1                     POP   HL   
1F56   E5                     PUSH   HL   
1F57   11 02 00               LD   DE,2   
1F5A   B7                     OR   A   
1F5B   ED 52                  SBC   HL,DE   
1F5D   7D                     LD   A,L   
1F5E   B4                     OR   H   
1F5F   CA BF 1F               JP   Z,expectM_2816S58   
1F62   CD BB 0B               CALL   printStr   
1F65   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1F71   CD BB 0B               CALL   printStr   
1F74   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F83   21 02 00               LD   hl,2   
1F86   E5                     PUSH   hl   
1F87   E5                     PUSH   hl   
1F88   CD DA 0C               CALL   run   
1F8B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F93   CD 43 0B               CALL   flushBuffer   
1F96   CD BB 0B               CALL   printStr   
1F99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FA6   E1                     POP   hl   
1FA7   E5                     PUSH   hl   
1FA8   E5                     PUSH   hl   
1FA9   CD DA 0C               CALL   run   
1FAC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FBB   CD 43 0B               CALL   flushBuffer   
1FBE   76                     HALT      
1FBF                EXPECTM_2816S58:      
1FBF   E1                     POP   HL   
1FC0                          ;*Macro unroll:  test "2 3 ==", FALSE
1FC0   31 00 4C               LD   SP,STACK   
1FC3   CD 03 0C               CALL   coldInit   
1FC6   CD 46 4A               CALL   execStr   
1FC9   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
1FD0   CD 43 0B               CALL   flushBuffer   
1FD3   E1                     POP   HL   
1FD4   E5                     PUSH   HL   
1FD5   11 00 00               LD   DE,FALSE   
1FD8   B7                     OR   A   
1FD9   ED 52                  SBC   HL,DE   
1FDB   7D                     LD   A,L   
1FDC   B4                     OR   H   
1FDD   CA 3E 20               JP   Z,expectM_2817S59   
1FE0   CD BB 0B               CALL   printStr   
1FE3   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1FF0   CD BB 0B               CALL   printStr   
1FF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2002   21 00 00               LD   hl,FALSE   
2005   E5                     PUSH   hl   
2006   E5                     PUSH   hl   
2007   CD DA 0C               CALL   run   
200A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2012   CD 43 0B               CALL   flushBuffer   
2015   CD BB 0B               CALL   printStr   
2018   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2025   E1                     POP   hl   
2026   E5                     PUSH   hl   
2027   E5                     PUSH   hl   
2028   CD DA 0C               CALL   run   
202B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
203A   CD 43 0B               CALL   flushBuffer   
203D   76                     HALT      
203E                EXPECTM_2817S59:      
203E   E1                     POP   HL   
203F                          ;*Macro unroll:  test "3 3 ==", TRUE
203F   31 00 4C               LD   SP,STACK   
2042   CD 03 0C               CALL   coldInit   
2045   CD 46 4A               CALL   execStr   
2048   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
204F   CD 43 0B               CALL   flushBuffer   
2052   E1                     POP   HL   
2053   E5                     PUSH   HL   
2054   11 FF FF               LD   DE,TRUE   
2057   B7                     OR   A   
2058   ED 52                  SBC   HL,DE   
205A   7D                     LD   A,L   
205B   B4                     OR   H   
205C   CA BD 20               JP   Z,expectM_2818S60   
205F   CD BB 0B               CALL   printStr   
2062   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
206F   CD BB 0B               CALL   printStr   
2072   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2081   21 FF FF               LD   hl,TRUE   
2084   E5                     PUSH   hl   
2085   E5                     PUSH   hl   
2086   CD DA 0C               CALL   run   
2089   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2091   CD 43 0B               CALL   flushBuffer   
2094   CD BB 0B               CALL   printStr   
2097   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20A4   E1                     POP   hl   
20A5   E5                     PUSH   hl   
20A6   E5                     PUSH   hl   
20A7   CD DA 0C               CALL   run   
20AA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20B9   CD 43 0B               CALL   flushBuffer   
20BC   76                     HALT      
20BD                EXPECTM_2818S60:      
20BD   E1                     POP   HL   
20BE                          ;*Macro unroll:  test "1 2 <", TRUE
20BE   31 00 4C               LD   SP,STACK   
20C1   CD 03 0C               CALL   coldInit   
20C4   CD 46 4A               CALL   execStr   
20C7   31 20 32 20 3C 00      DB   "1 2 <",0   
20CD   CD 43 0B               CALL   flushBuffer   
20D0   E1                     POP   HL   
20D1   E5                     PUSH   HL   
20D2   11 FF FF               LD   DE,TRUE   
20D5   B7                     OR   A   
20D6   ED 52                  SBC   HL,DE   
20D8   7D                     LD   A,L   
20D9   B4                     OR   H   
20DA   CA 3A 21               JP   Z,expectM_2819S61   
20DD   CD BB 0B               CALL   printStr   
20E0   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
20EC   CD BB 0B               CALL   printStr   
20EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20FE   21 FF FF               LD   hl,TRUE   
2101   E5                     PUSH   hl   
2102   E5                     PUSH   hl   
2103   CD DA 0C               CALL   run   
2106   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
210E   CD 43 0B               CALL   flushBuffer   
2111   CD BB 0B               CALL   printStr   
2114   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2121   E1                     POP   hl   
2122   E5                     PUSH   hl   
2123   E5                     PUSH   hl   
2124   CD DA 0C               CALL   run   
2127   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2136   CD 43 0B               CALL   flushBuffer   
2139   76                     HALT      
213A                EXPECTM_2819S61:      
213A   E1                     POP   HL   
213B                          ;*Macro unroll:  test "2 1 <", FALSE
213B   31 00 4C               LD   SP,STACK   
213E   CD 03 0C               CALL   coldInit   
2141   CD 46 4A               CALL   execStr   
2144   32 20 31 20 3C 00      DB   "2 1 <",0   
214A   CD 43 0B               CALL   flushBuffer   
214D   E1                     POP   HL   
214E   E5                     PUSH   HL   
214F   11 00 00               LD   DE,FALSE   
2152   B7                     OR   A   
2153   ED 52                  SBC   HL,DE   
2155   7D                     LD   A,L   
2156   B4                     OR   H   
2157   CA B7 21               JP   Z,expectM_2820S62   
215A   CD BB 0B               CALL   printStr   
215D   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2169   CD BB 0B               CALL   printStr   
216C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
217B   21 00 00               LD   hl,FALSE   
217E   E5                     PUSH   hl   
217F   E5                     PUSH   hl   
2180   CD DA 0C               CALL   run   
2183   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
218B   CD 43 0B               CALL   flushBuffer   
218E   CD BB 0B               CALL   printStr   
2191   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
219E   E1                     POP   hl   
219F   E5                     PUSH   hl   
21A0   E5                     PUSH   hl   
21A1   CD DA 0C               CALL   run   
21A4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21B3   CD 43 0B               CALL   flushBuffer   
21B6   76                     HALT      
21B7                EXPECTM_2820S62:      
21B7   E1                     POP   HL   
21B8                          ;*Macro unroll:  test "2 3 <", TRUE
21B8   31 00 4C               LD   SP,STACK   
21BB   CD 03 0C               CALL   coldInit   
21BE   CD 46 4A               CALL   execStr   
21C1   32 20 33 20 3C 00      DB   "2 3 <",0   
21C7   CD 43 0B               CALL   flushBuffer   
21CA   E1                     POP   HL   
21CB   E5                     PUSH   HL   
21CC   11 FF FF               LD   DE,TRUE   
21CF   B7                     OR   A   
21D0   ED 52                  SBC   HL,DE   
21D2   7D                     LD   A,L   
21D3   B4                     OR   H   
21D4   CA 34 22               JP   Z,expectM_2821S63   
21D7   CD BB 0B               CALL   printStr   
21DA   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
21E6   CD BB 0B               CALL   printStr   
21E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21F8   21 FF FF               LD   hl,TRUE   
21FB   E5                     PUSH   hl   
21FC   E5                     PUSH   hl   
21FD   CD DA 0C               CALL   run   
2200   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2208   CD 43 0B               CALL   flushBuffer   
220B   CD BB 0B               CALL   printStr   
220E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
221B   E1                     POP   hl   
221C   E5                     PUSH   hl   
221D   E5                     PUSH   hl   
221E   CD DA 0C               CALL   run   
2221   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2230   CD 43 0B               CALL   flushBuffer   
2233   76                     HALT      
2234                EXPECTM_2821S63:      
2234   E1                     POP   HL   
2235                          ;*Macro unroll:  test "3 3 <", FALSE
2235   31 00 4C               LD   SP,STACK   
2238   CD 03 0C               CALL   coldInit   
223B   CD 46 4A               CALL   execStr   
223E   33 20 33 20 3C 00      DB   "3 3 <",0   
2244   CD 43 0B               CALL   flushBuffer   
2247   E1                     POP   HL   
2248   E5                     PUSH   HL   
2249   11 00 00               LD   DE,FALSE   
224C   B7                     OR   A   
224D   ED 52                  SBC   HL,DE   
224F   7D                     LD   A,L   
2250   B4                     OR   H   
2251   CA B1 22               JP   Z,expectM_2822S64   
2254   CD BB 0B               CALL   printStr   
2257   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2263   CD BB 0B               CALL   printStr   
2266   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2275   21 00 00               LD   hl,FALSE   
2278   E5                     PUSH   hl   
2279   E5                     PUSH   hl   
227A   CD DA 0C               CALL   run   
227D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2285   CD 43 0B               CALL   flushBuffer   
2288   CD BB 0B               CALL   printStr   
228B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2298   E1                     POP   hl   
2299   E5                     PUSH   hl   
229A   E5                     PUSH   hl   
229B   CD DA 0C               CALL   run   
229E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22AD   CD 43 0B               CALL   flushBuffer   
22B0   76                     HALT      
22B1                EXPECTM_2822S64:      
22B1   E1                     POP   HL   
22B2                          ;*Macro unroll:  test "1 2 >", FALSE
22B2   31 00 4C               LD   SP,STACK   
22B5   CD 03 0C               CALL   coldInit   
22B8   CD 46 4A               CALL   execStr   
22BB   31 20 32 20 3E 00      DB   "1 2 >",0   
22C1   CD 43 0B               CALL   flushBuffer   
22C4   E1                     POP   HL   
22C5   E5                     PUSH   HL   
22C6   11 00 00               LD   DE,FALSE   
22C9   B7                     OR   A   
22CA   ED 52                  SBC   HL,DE   
22CC   7D                     LD   A,L   
22CD   B4                     OR   H   
22CE   CA 2E 23               JP   Z,expectM_2823S65   
22D1   CD BB 0B               CALL   printStr   
22D4   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
22E0   CD BB 0B               CALL   printStr   
22E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22F2   21 00 00               LD   hl,FALSE   
22F5   E5                     PUSH   hl   
22F6   E5                     PUSH   hl   
22F7   CD DA 0C               CALL   run   
22FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2302   CD 43 0B               CALL   flushBuffer   
2305   CD BB 0B               CALL   printStr   
2308   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2315   E1                     POP   hl   
2316   E5                     PUSH   hl   
2317   E5                     PUSH   hl   
2318   CD DA 0C               CALL   run   
231B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
232A   CD 43 0B               CALL   flushBuffer   
232D   76                     HALT      
232E                EXPECTM_2823S65:      
232E   E1                     POP   HL   
232F                          ;*Macro unroll:  test "2 1 >", TRUE
232F   31 00 4C               LD   SP,STACK   
2332   CD 03 0C               CALL   coldInit   
2335   CD 46 4A               CALL   execStr   
2338   32 20 31 20 3E 00      DB   "2 1 >",0   
233E   CD 43 0B               CALL   flushBuffer   
2341   E1                     POP   HL   
2342   E5                     PUSH   HL   
2343   11 FF FF               LD   DE,TRUE   
2346   B7                     OR   A   
2347   ED 52                  SBC   HL,DE   
2349   7D                     LD   A,L   
234A   B4                     OR   H   
234B   CA AB 23               JP   Z,expectM_2824S66   
234E   CD BB 0B               CALL   printStr   
2351   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
235D   CD BB 0B               CALL   printStr   
2360   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
236F   21 FF FF               LD   hl,TRUE   
2372   E5                     PUSH   hl   
2373   E5                     PUSH   hl   
2374   CD DA 0C               CALL   run   
2377   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
237F   CD 43 0B               CALL   flushBuffer   
2382   CD BB 0B               CALL   printStr   
2385   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2392   E1                     POP   hl   
2393   E5                     PUSH   hl   
2394   E5                     PUSH   hl   
2395   CD DA 0C               CALL   run   
2398   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23A7   CD 43 0B               CALL   flushBuffer   
23AA   76                     HALT      
23AB                EXPECTM_2824S66:      
23AB   E1                     POP   HL   
23AC                          ;*Macro unroll:  test "3 3 >", FALSE
23AC   31 00 4C               LD   SP,STACK   
23AF   CD 03 0C               CALL   coldInit   
23B2   CD 46 4A               CALL   execStr   
23B5   33 20 33 20 3E 00      DB   "3 3 >",0   
23BB   CD 43 0B               CALL   flushBuffer   
23BE   E1                     POP   HL   
23BF   E5                     PUSH   HL   
23C0   11 00 00               LD   DE,FALSE   
23C3   B7                     OR   A   
23C4   ED 52                  SBC   HL,DE   
23C6   7D                     LD   A,L   
23C7   B4                     OR   H   
23C8   CA 28 24               JP   Z,expectM_2825S67   
23CB   CD BB 0B               CALL   printStr   
23CE   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
23DA   CD BB 0B               CALL   printStr   
23DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23EC   21 00 00               LD   hl,FALSE   
23EF   E5                     PUSH   hl   
23F0   E5                     PUSH   hl   
23F1   CD DA 0C               CALL   run   
23F4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23FC   CD 43 0B               CALL   flushBuffer   
23FF   CD BB 0B               CALL   printStr   
2402   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
240F   E1                     POP   hl   
2410   E5                     PUSH   hl   
2411   E5                     PUSH   hl   
2412   CD DA 0C               CALL   run   
2415   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2424   CD 43 0B               CALL   flushBuffer   
2427   76                     HALT      
2428                EXPECTM_2825S67:      
2428   E1                     POP   HL   
2429                          ;*Macro unroll:  test "4 3 >", TRUE
2429   31 00 4C               LD   SP,STACK   
242C   CD 03 0C               CALL   coldInit   
242F   CD 46 4A               CALL   execStr   
2432   34 20 33 20 3E 00      DB   "4 3 >",0   
2438   CD 43 0B               CALL   flushBuffer   
243B   E1                     POP   HL   
243C   E5                     PUSH   HL   
243D   11 FF FF               LD   DE,TRUE   
2440   B7                     OR   A   
2441   ED 52                  SBC   HL,DE   
2443   7D                     LD   A,L   
2444   B4                     OR   H   
2445   CA A5 24               JP   Z,expectM_2826S68   
2448   CD BB 0B               CALL   printStr   
244B   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2457   CD BB 0B               CALL   printStr   
245A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2469   21 FF FF               LD   hl,TRUE   
246C   E5                     PUSH   hl   
246D   E5                     PUSH   hl   
246E   CD DA 0C               CALL   run   
2471   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2479   CD 43 0B               CALL   flushBuffer   
247C   CD BB 0B               CALL   printStr   
247F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
248C   E1                     POP   hl   
248D   E5                     PUSH   hl   
248E   E5                     PUSH   hl   
248F   CD DA 0C               CALL   run   
2492   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24A1   CD 43 0B               CALL   flushBuffer   
24A4   76                     HALT      
24A5                EXPECTM_2826S68:      
24A5   E1                     POP   HL   
24A6                          ;*Macro unroll:  test "2 2 <=", TRUE
24A6   31 00 4C               LD   SP,STACK   
24A9   CD 03 0C               CALL   coldInit   
24AC   CD 46 4A               CALL   execStr   
24AF   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
24B6   CD 43 0B               CALL   flushBuffer   
24B9   E1                     POP   HL   
24BA   E5                     PUSH   HL   
24BB   11 FF FF               LD   DE,TRUE   
24BE   B7                     OR   A   
24BF   ED 52                  SBC   HL,DE   
24C1   7D                     LD   A,L   
24C2   B4                     OR   H   
24C3   CA 24 25               JP   Z,expectM_2827S69   
24C6   CD BB 0B               CALL   printStr   
24C9   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
24D6   CD BB 0B               CALL   printStr   
24D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24E8   21 FF FF               LD   hl,TRUE   
24EB   E5                     PUSH   hl   
24EC   E5                     PUSH   hl   
24ED   CD DA 0C               CALL   run   
24F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24F8   CD 43 0B               CALL   flushBuffer   
24FB   CD BB 0B               CALL   printStr   
24FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
250B   E1                     POP   hl   
250C   E5                     PUSH   hl   
250D   E5                     PUSH   hl   
250E   CD DA 0C               CALL   run   
2511   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2520   CD 43 0B               CALL   flushBuffer   
2523   76                     HALT      
2524                EXPECTM_2827S69:      
2524   E1                     POP   HL   
2525                          ;*Macro unroll:  test "2 2 >=", TRUE
2525   31 00 4C               LD   SP,STACK   
2528   CD 03 0C               CALL   coldInit   
252B   CD 46 4A               CALL   execStr   
252E   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2535   CD 43 0B               CALL   flushBuffer   
2538   E1                     POP   HL   
2539   E5                     PUSH   HL   
253A   11 FF FF               LD   DE,TRUE   
253D   B7                     OR   A   
253E   ED 52                  SBC   HL,DE   
2540   7D                     LD   A,L   
2541   B4                     OR   H   
2542   CA A3 25               JP   Z,expectM_2828S70   
2545   CD BB 0B               CALL   printStr   
2548   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2555   CD BB 0B               CALL   printStr   
2558   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2567   21 FF FF               LD   hl,TRUE   
256A   E5                     PUSH   hl   
256B   E5                     PUSH   hl   
256C   CD DA 0C               CALL   run   
256F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2577   CD 43 0B               CALL   flushBuffer   
257A   CD BB 0B               CALL   printStr   
257D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
258A   E1                     POP   hl   
258B   E5                     PUSH   hl   
258C   E5                     PUSH   hl   
258D   CD DA 0C               CALL   run   
2590   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
259F   CD 43 0B               CALL   flushBuffer   
25A2   76                     HALT      
25A3                EXPECTM_2828S70:      
25A3   E1                     POP   HL   
25A4                          ;*Macro unroll:  test "3 1 <<", 6
25A4   31 00 4C               LD   SP,STACK   
25A7   CD 03 0C               CALL   coldInit   
25AA   CD 46 4A               CALL   execStr   
25AD   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
25B4   CD 43 0B               CALL   flushBuffer   
25B7   E1                     POP   HL   
25B8   E5                     PUSH   HL   
25B9   11 06 00               LD   DE,6   
25BC   B7                     OR   A   
25BD   ED 52                  SBC   HL,DE   
25BF   7D                     LD   A,L   
25C0   B4                     OR   H   
25C1   CA 22 26               JP   Z,expectM_2829S71   
25C4   CD BB 0B               CALL   printStr   
25C7   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
25D4   CD BB 0B               CALL   printStr   
25D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25E6   21 06 00               LD   hl,6   
25E9   E5                     PUSH   hl   
25EA   E5                     PUSH   hl   
25EB   CD DA 0C               CALL   run   
25EE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25F6   CD 43 0B               CALL   flushBuffer   
25F9   CD BB 0B               CALL   printStr   
25FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2609   E1                     POP   hl   
260A   E5                     PUSH   hl   
260B   E5                     PUSH   hl   
260C   CD DA 0C               CALL   run   
260F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
261E   CD 43 0B               CALL   flushBuffer   
2621   76                     HALT      
2622                EXPECTM_2829S71:      
2622   E1                     POP   HL   
2623                          ;*Macro unroll:  test "10 1 >>", 5
2623   31 00 4C               LD   SP,STACK   
2626   CD 03 0C               CALL   coldInit   
2629   CD 46 4A               CALL   execStr   
262C   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2634   CD 43 0B               CALL   flushBuffer   
2637   E1                     POP   HL   
2638   E5                     PUSH   HL   
2639   11 05 00               LD   DE,5   
263C   B7                     OR   A   
263D   ED 52                  SBC   HL,DE   
263F   7D                     LD   A,L   
2640   B4                     OR   H   
2641   CA A3 26               JP   Z,expectM_2830S72   
2644   CD BB 0B               CALL   printStr   
2647   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2655   CD BB 0B               CALL   printStr   
2658   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2667   21 05 00               LD   hl,5   
266A   E5                     PUSH   hl   
266B   E5                     PUSH   hl   
266C   CD DA 0C               CALL   run   
266F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2677   CD 43 0B               CALL   flushBuffer   
267A   CD BB 0B               CALL   printStr   
267D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
268A   E1                     POP   hl   
268B   E5                     PUSH   hl   
268C   E5                     PUSH   hl   
268D   CD DA 0C               CALL   run   
2690   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
269F   CD 43 0B               CALL   flushBuffer   
26A2   76                     HALT      
26A3                EXPECTM_2830S72:      
26A3   E1                     POP   HL   
26A4                          ;*Macro unroll:  test "1 x = x", 1
26A4   31 00 4C               LD   SP,STACK   
26A7   CD 03 0C               CALL   coldInit   
26AA   CD 46 4A               CALL   execStr   
26AD   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
26B5   CD 43 0B               CALL   flushBuffer   
26B8   E1                     POP   HL   
26B9   E5                     PUSH   HL   
26BA   11 01 00               LD   DE,1   
26BD   B7                     OR   A   
26BE   ED 52                  SBC   HL,DE   
26C0   7D                     LD   A,L   
26C1   B4                     OR   H   
26C2   CA 24 27               JP   Z,expectM_2831S73   
26C5   CD BB 0B               CALL   printStr   
26C8   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
26D6   CD BB 0B               CALL   printStr   
26D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26E8   21 01 00               LD   hl,1   
26EB   E5                     PUSH   hl   
26EC   E5                     PUSH   hl   
26ED   CD DA 0C               CALL   run   
26F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26F8   CD 43 0B               CALL   flushBuffer   
26FB   CD BB 0B               CALL   printStr   
26FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
270B   E1                     POP   hl   
270C   E5                     PUSH   hl   
270D   E5                     PUSH   hl   
270E   CD DA 0C               CALL   run   
2711   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2720   CD 43 0B               CALL   flushBuffer   
2723   76                     HALT      
2724                EXPECTM_2831S73:      
2724   E1                     POP   HL   
2725                          ;*Macro unroll:  test "1{}^", 1
2725   31 00 4C               LD   SP,STACK   
2728   CD 03 0C               CALL   coldInit   
272B   CD 46 4A               CALL   execStr   
272E   31 7B 7D 5E 00         DB   "1{}^",0   
2733   CD 43 0B               CALL   flushBuffer   
2736   E1                     POP   HL   
2737   E5                     PUSH   HL   
2738   11 01 00               LD   DE,1   
273B   B7                     OR   A   
273C   ED 52                  SBC   HL,DE   
273E   7D                     LD   A,L   
273F   B4                     OR   H   
2740   CA 9F 27               JP   Z,expectM_2832S74   
2743   CD BB 0B               CALL   printStr   
2746   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2751   CD BB 0B               CALL   printStr   
2754   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2763   21 01 00               LD   hl,1   
2766   E5                     PUSH   hl   
2767   E5                     PUSH   hl   
2768   CD DA 0C               CALL   run   
276B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2773   CD 43 0B               CALL   flushBuffer   
2776   CD BB 0B               CALL   printStr   
2779   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2786   E1                     POP   hl   
2787   E5                     PUSH   hl   
2788   E5                     PUSH   hl   
2789   CD DA 0C               CALL   run   
278C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
279B   CD 43 0B               CALL   flushBuffer   
279E   76                     HALT      
279F                EXPECTM_2832S74:      
279F   E1                     POP   HL   
27A0                          ;*Macro unroll:  test "{1}^", 1
27A0   31 00 4C               LD   SP,STACK   
27A3   CD 03 0C               CALL   coldInit   
27A6   CD 46 4A               CALL   execStr   
27A9   7B 31 7D 5E 00         DB   "{1}^",0   
27AE   CD 43 0B               CALL   flushBuffer   
27B1   E1                     POP   HL   
27B2   E5                     PUSH   HL   
27B3   11 01 00               LD   DE,1   
27B6   B7                     OR   A   
27B7   ED 52                  SBC   HL,DE   
27B9   7D                     LD   A,L   
27BA   B4                     OR   H   
27BB   CA 1A 28               JP   Z,expectM_2833S75   
27BE   CD BB 0B               CALL   printStr   
27C1   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
27CC   CD BB 0B               CALL   printStr   
27CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27DE   21 01 00               LD   hl,1   
27E1   E5                     PUSH   hl   
27E2   E5                     PUSH   hl   
27E3   CD DA 0C               CALL   run   
27E6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27EE   CD 43 0B               CALL   flushBuffer   
27F1   CD BB 0B               CALL   printStr   
27F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2801   E1                     POP   hl   
2802   E5                     PUSH   hl   
2803   E5                     PUSH   hl   
2804   CD DA 0C               CALL   run   
2807   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2816   CD 43 0B               CALL   flushBuffer   
2819   76                     HALT      
281A                EXPECTM_2833S75:      
281A   E1                     POP   HL   
281B                          ;*Macro unroll:  test "{{1}^}^", 1
281B   31 00 4C               LD   SP,STACK   
281E   CD 03 0C               CALL   coldInit   
2821   CD 46 4A               CALL   execStr   
2824   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
282C   CD 43 0B               CALL   flushBuffer   
282F   E1                     POP   HL   
2830   E5                     PUSH   HL   
2831   11 01 00               LD   DE,1   
2834   B7                     OR   A   
2835   ED 52                  SBC   HL,DE   
2837   7D                     LD   A,L   
2838   B4                     OR   H   
2839   CA 9B 28               JP   Z,expectM_2834S76   
283C   CD BB 0B               CALL   printStr   
283F   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
284D   CD BB 0B               CALL   printStr   
2850   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
285F   21 01 00               LD   hl,1   
2862   E5                     PUSH   hl   
2863   E5                     PUSH   hl   
2864   CD DA 0C               CALL   run   
2867   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
286F   CD 43 0B               CALL   flushBuffer   
2872   CD BB 0B               CALL   printStr   
2875   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2882   E1                     POP   hl   
2883   E5                     PUSH   hl   
2884   E5                     PUSH   hl   
2885   CD DA 0C               CALL   run   
2888   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2897   CD 43 0B               CALL   flushBuffer   
289A   76                     HALT      
289B                EXPECTM_2834S76:      
289B   E1                     POP   HL   
289C                          ;*Macro unroll:  test "{{{1}^}^}^", 1
289C   31 00 4C               LD   SP,STACK   
289F   CD 03 0C               CALL   coldInit   
28A2   CD 46 4A               CALL   execStr   
28A5   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
28B0   CD 43 0B               CALL   flushBuffer   
28B3   E1                     POP   HL   
28B4   E5                     PUSH   HL   
28B5   11 01 00               LD   DE,1   
28B8   B7                     OR   A   
28B9   ED 52                  SBC   HL,DE   
28BB   7D                     LD   A,L   
28BC   B4                     OR   H   
28BD   CA 22 29               JP   Z,expectM_2835S77   
28C0   CD BB 0B               CALL   printStr   
28C3   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
28D4   CD BB 0B               CALL   printStr   
28D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28E6   21 01 00               LD   hl,1   
28E9   E5                     PUSH   hl   
28EA   E5                     PUSH   hl   
28EB   CD DA 0C               CALL   run   
28EE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28F6   CD 43 0B               CALL   flushBuffer   
28F9   CD BB 0B               CALL   printStr   
28FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2909   E1                     POP   hl   
290A   E5                     PUSH   hl   
290B   E5                     PUSH   hl   
290C   CD DA 0C               CALL   run   
290F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
291E   CD 43 0B               CALL   flushBuffer   
2921   76                     HALT      
2922                EXPECTM_2835S77:      
2922   E1                     POP   HL   
2923                          ;*Macro unroll:  test "5 /f{10} ?", 5
2923   31 00 4C               LD   SP,STACK   
2926   CD 03 0C               CALL   coldInit   
2929   CD 46 4A               CALL   execStr   
292C   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2937   CD 43 0B               CALL   flushBuffer   
293A   E1                     POP   HL   
293B   E5                     PUSH   HL   
293C   11 05 00               LD   DE,5   
293F   B7                     OR   A   
2940   ED 52                  SBC   HL,DE   
2942   7D                     LD   A,L   
2943   B4                     OR   H   
2944   CA A9 29               JP   Z,expectM_2836S78   
2947   CD BB 0B               CALL   printStr   
294A   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
295B   CD BB 0B               CALL   printStr   
295E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
296D   21 05 00               LD   hl,5   
2970   E5                     PUSH   hl   
2971   E5                     PUSH   hl   
2972   CD DA 0C               CALL   run   
2975   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
297D   CD 43 0B               CALL   flushBuffer   
2980   CD BB 0B               CALL   printStr   
2983   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2990   E1                     POP   hl   
2991   E5                     PUSH   hl   
2992   E5                     PUSH   hl   
2993   CD DA 0C               CALL   run   
2996   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29A5   CD 43 0B               CALL   flushBuffer   
29A8   76                     HALT      
29A9                EXPECTM_2836S78:      
29A9   E1                     POP   HL   
29AA                          ;*Macro unroll:  test "5 /t{10} ? +", 15
29AA   31 00 4C               LD   SP,STACK   
29AD   CD 03 0C               CALL   coldInit   
29B0   CD 46 4A               CALL   execStr   
29B3   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
29C0   CD 43 0B               CALL   flushBuffer   
29C3   E1                     POP   HL   
29C4   E5                     PUSH   HL   
29C5   11 0F 00               LD   DE,15   
29C8   B7                     OR   A   
29C9   ED 52                  SBC   HL,DE   
29CB   7D                     LD   A,L   
29CC   B4                     OR   H   
29CD   CA 34 2A               JP   Z,expectM_2837S79   
29D0   CD BB 0B               CALL   printStr   
29D3   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
29E6   CD BB 0B               CALL   printStr   
29E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29F8   21 0F 00               LD   hl,15   
29FB   E5                     PUSH   hl   
29FC   E5                     PUSH   hl   
29FD   CD DA 0C               CALL   run   
2A00   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A08   CD 43 0B               CALL   flushBuffer   
2A0B   CD BB 0B               CALL   printStr   
2A0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A1B   E1                     POP   hl   
2A1C   E5                     PUSH   hl   
2A1D   E5                     PUSH   hl   
2A1E   CD DA 0C               CALL   run   
2A21   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A30   CD 43 0B               CALL   flushBuffer   
2A33   76                     HALT      
2A34                EXPECTM_2837S79:      
2A34   E1                     POP   HL   
2A35                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2A35   31 00 4C               LD   SP,STACK   
2A38   CD 03 0C               CALL   coldInit   
2A3B   CD 46 4A               CALL   execStr   
2A3E   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2A50   CD 43 0B               CALL   flushBuffer   
2A53   E1                     POP   HL   
2A54   E5                     PUSH   HL   
2A55   11 15 00               LD   DE,21   
2A58   B7                     OR   A   
2A59   ED 52                  SBC   HL,DE   
2A5B   7D                     LD   A,L   
2A5C   B4                     OR   H   
2A5D   CA C9 2A               JP   Z,expectM_2838S80   
2A60   CD BB 0B               CALL   printStr   
2A63   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2A7B   CD BB 0B               CALL   printStr   
2A7E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A8D   21 15 00               LD   hl,21   
2A90   E5                     PUSH   hl   
2A91   E5                     PUSH   hl   
2A92   CD DA 0C               CALL   run   
2A95   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A9D   CD 43 0B               CALL   flushBuffer   
2AA0   CD BB 0B               CALL   printStr   
2AA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AB0   E1                     POP   hl   
2AB1   E5                     PUSH   hl   
2AB2   E5                     PUSH   hl   
2AB3   CD DA 0C               CALL   run   
2AB6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AC5   CD 43 0B               CALL   flushBuffer   
2AC8   76                     HALT      
2AC9                EXPECTM_2838S80:      
2AC9   E1                     POP   HL   
2ACA                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2ACA   31 00 4C               LD   SP,STACK   
2ACD   CD 03 0C               CALL   coldInit   
2AD0   CD 46 4A               CALL   execStr   
2AD3   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2AE5   CD 43 0B               CALL   flushBuffer   
2AE8   E1                     POP   HL   
2AE9   E5                     PUSH   HL   
2AEA   11 0B 00               LD   DE,11   
2AED   B7                     OR   A   
2AEE   ED 52                  SBC   HL,DE   
2AF0   7D                     LD   A,L   
2AF1   B4                     OR   H   
2AF2   CA 5E 2B               JP   Z,expectM_2839S81   
2AF5   CD BB 0B               CALL   printStr   
2AF8   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2B10   CD BB 0B               CALL   printStr   
2B13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B22   21 0B 00               LD   hl,11   
2B25   E5                     PUSH   hl   
2B26   E5                     PUSH   hl   
2B27   CD DA 0C               CALL   run   
2B2A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B32   CD 43 0B               CALL   flushBuffer   
2B35   CD BB 0B               CALL   printStr   
2B38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B45   E1                     POP   hl   
2B46   E5                     PUSH   hl   
2B47   E5                     PUSH   hl   
2B48   CD DA 0C               CALL   run   
2B4B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B5A   CD 43 0B               CALL   flushBuffer   
2B5D   76                     HALT      
2B5E                EXPECTM_2839S81:      
2B5E   E1                     POP   HL   
2B5F                          ;*Macro unroll:  test ": 0#", $0000
2B5F   31 00 4C               LD   SP,STACK   
2B62   CD 03 0C               CALL   coldInit   
2B65   CD 46 4A               CALL   execStr   
2B68   3A 20 30 23 00         DB   ": 0#",0   
2B6D   CD 43 0B               CALL   flushBuffer   
2B70   E1                     POP   HL   
2B71   E5                     PUSH   HL   
2B72   11 00 00               LD   DE,$0000   
2B75   B7                     OR   A   
2B76   ED 52                  SBC   HL,DE   
2B78   7D                     LD   A,L   
2B79   B4                     OR   H   
2B7A   CA D9 2B               JP   Z,expectM_2840S82   
2B7D   CD BB 0B               CALL   printStr   
2B80   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
2B8B   CD BB 0B               CALL   printStr   
2B8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B9D   21 00 00               LD   hl,$0000   
2BA0   E5                     PUSH   hl   
2BA1   E5                     PUSH   hl   
2BA2   CD DA 0C               CALL   run   
2BA5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BAD   CD 43 0B               CALL   flushBuffer   
2BB0   CD BB 0B               CALL   printStr   
2BB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BC0   E1                     POP   hl   
2BC1   E5                     PUSH   hl   
2BC2   E5                     PUSH   hl   
2BC3   CD DA 0C               CALL   run   
2BC6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BD5   CD 43 0B               CALL   flushBuffer   
2BD8   76                     HALT      
2BD9                EXPECTM_2840S82:      
2BD9   E1                     POP   HL   
2BDA                          ;*Macro unroll:  test ":a 0#", $0100
2BDA   31 00 4C               LD   SP,STACK   
2BDD   CD 03 0C               CALL   coldInit   
2BE0   CD 46 4A               CALL   execStr   
2BE3   3A 61 20 30 23 00      DB   ":a 0#",0   
2BE9   CD 43 0B               CALL   flushBuffer   
2BEC   E1                     POP   HL   
2BED   E5                     PUSH   HL   
2BEE   11 00 01               LD   DE,$0100   
2BF1   B7                     OR   A   
2BF2   ED 52                  SBC   HL,DE   
2BF4   7D                     LD   A,L   
2BF5   B4                     OR   H   
2BF6   CA 56 2C               JP   Z,expectM_2841S83   
2BF9   CD BB 0B               CALL   printStr   
2BFC   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
2C08   CD BB 0B               CALL   printStr   
2C0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C1A   21 00 01               LD   hl,$0100   
2C1D   E5                     PUSH   hl   
2C1E   E5                     PUSH   hl   
2C1F   CD DA 0C               CALL   run   
2C22   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C2A   CD 43 0B               CALL   flushBuffer   
2C2D   CD BB 0B               CALL   printStr   
2C30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C3D   E1                     POP   hl   
2C3E   E5                     PUSH   hl   
2C3F   E5                     PUSH   hl   
2C40   CD DA 0C               CALL   run   
2C43   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C52   CD 43 0B               CALL   flushBuffer   
2C55   76                     HALT      
2C56                EXPECTM_2841S83:      
2C56   E1                     POP   HL   
2C57                          ;*Macro unroll:  test ":a: 0#", $0100
2C57   31 00 4C               LD   SP,STACK   
2C5A   CD 03 0C               CALL   coldInit   
2C5D   CD 46 4A               CALL   execStr   
2C60   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
2C67   CD 43 0B               CALL   flushBuffer   
2C6A   E1                     POP   HL   
2C6B   E5                     PUSH   HL   
2C6C   11 00 01               LD   DE,$0100   
2C6F   B7                     OR   A   
2C70   ED 52                  SBC   HL,DE   
2C72   7D                     LD   A,L   
2C73   B4                     OR   H   
2C74   CA D5 2C               JP   Z,expectM_2842S84   
2C77   CD BB 0B               CALL   printStr   
2C7A   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
2C87   CD BB 0B               CALL   printStr   
2C8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C99   21 00 01               LD   hl,$0100   
2C9C   E5                     PUSH   hl   
2C9D   E5                     PUSH   hl   
2C9E   CD DA 0C               CALL   run   
2CA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CA9   CD 43 0B               CALL   flushBuffer   
2CAC   CD BB 0B               CALL   printStr   
2CAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CBC   E1                     POP   hl   
2CBD   E5                     PUSH   hl   
2CBE   E5                     PUSH   hl   
2CBF   CD DA 0C               CALL   run   
2CC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CD1   CD 43 0B               CALL   flushBuffer   
2CD4   76                     HALT      
2CD5                EXPECTM_2842S84:      
2CD5   E1                     POP   HL   
2CD6                          ;*Macro unroll:  test ":a:b 0#", $0201
2CD6   31 00 4C               LD   SP,STACK   
2CD9   CD 03 0C               CALL   coldInit   
2CDC   CD 46 4A               CALL   execStr   
2CDF   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
2CE7   CD 43 0B               CALL   flushBuffer   
2CEA   E1                     POP   HL   
2CEB   E5                     PUSH   HL   
2CEC   11 01 02               LD   DE,$0201   
2CEF   B7                     OR   A   
2CF0   ED 52                  SBC   HL,DE   
2CF2   7D                     LD   A,L   
2CF3   B4                     OR   H   
2CF4   CA 56 2D               JP   Z,expectM_2843S85   
2CF7   CD BB 0B               CALL   printStr   
2CFA   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
2D08   CD BB 0B               CALL   printStr   
2D0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D1A   21 01 02               LD   hl,$0201   
2D1D   E5                     PUSH   hl   
2D1E   E5                     PUSH   hl   
2D1F   CD DA 0C               CALL   run   
2D22   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D2A   CD 43 0B               CALL   flushBuffer   
2D2D   CD BB 0B               CALL   printStr   
2D30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D3D   E1                     POP   hl   
2D3E   E5                     PUSH   hl   
2D3F   E5                     PUSH   hl   
2D40   CD DA 0C               CALL   run   
2D43   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D52   CD 43 0B               CALL   flushBuffer   
2D55   76                     HALT      
2D56                EXPECTM_2843S85:      
2D56   E1                     POP   HL   
2D57                          ;*Macro unroll:  test "::b 0#", $0101
2D57   31 00 4C               LD   SP,STACK   
2D5A   CD 03 0C               CALL   coldInit   
2D5D   CD 46 4A               CALL   execStr   
2D60   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
2D67   CD 43 0B               CALL   flushBuffer   
2D6A   E1                     POP   HL   
2D6B   E5                     PUSH   HL   
2D6C   11 01 01               LD   DE,$0101   
2D6F   B7                     OR   A   
2D70   ED 52                  SBC   HL,DE   
2D72   7D                     LD   A,L   
2D73   B4                     OR   H   
2D74   CA D5 2D               JP   Z,expectM_2844S86   
2D77   CD BB 0B               CALL   printStr   
2D7A   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
2D87   CD BB 0B               CALL   printStr   
2D8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D99   21 01 01               LD   hl,$0101   
2D9C   E5                     PUSH   hl   
2D9D   E5                     PUSH   hl   
2D9E   CD DA 0C               CALL   run   
2DA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DA9   CD 43 0B               CALL   flushBuffer   
2DAC   CD BB 0B               CALL   printStr   
2DAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DBC   E1                     POP   hl   
2DBD   E5                     PUSH   hl   
2DBE   E5                     PUSH   hl   
2DBF   CD DA 0C               CALL   run   
2DC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DD1   CD 43 0B               CALL   flushBuffer   
2DD4   76                     HALT      
2DD5                EXPECTM_2844S86:      
2DD5   E1                     POP   HL   
2DD6                          ;*Macro unroll:  test ":{2};^", 2
2DD6   31 00 4C               LD   SP,STACK   
2DD9   CD 03 0C               CALL   coldInit   
2DDC   CD 46 4A               CALL   execStr   
2DDF   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
2DE6   CD 43 0B               CALL   flushBuffer   
2DE9   E1                     POP   HL   
2DEA   E5                     PUSH   HL   
2DEB   11 02 00               LD   DE,2   
2DEE   B7                     OR   A   
2DEF   ED 52                  SBC   HL,DE   
2DF1   7D                     LD   A,L   
2DF2   B4                     OR   H   
2DF3   CA 54 2E               JP   Z,expectM_2845S87   
2DF6   CD BB 0B               CALL   printStr   
2DF9   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2E06   CD BB 0B               CALL   printStr   
2E09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E18   21 02 00               LD   hl,2   
2E1B   E5                     PUSH   hl   
2E1C   E5                     PUSH   hl   
2E1D   CD DA 0C               CALL   run   
2E20   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E28   CD 43 0B               CALL   flushBuffer   
2E2B   CD BB 0B               CALL   printStr   
2E2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E3B   E1                     POP   hl   
2E3C   E5                     PUSH   hl   
2E3D   E5                     PUSH   hl   
2E3E   CD DA 0C               CALL   run   
2E41   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E50   CD 43 0B               CALL   flushBuffer   
2E53   76                     HALT      
2E54                EXPECTM_2845S87:      
2E54   E1                     POP   HL   
2E55                          ;*Macro unroll:  test ":a{2};^", 2
2E55   31 00 4C               LD   SP,STACK   
2E58   CD 03 0C               CALL   coldInit   
2E5B   CD 46 4A               CALL   execStr   
2E5E   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
2E66   CD 43 0B               CALL   flushBuffer   
2E69   E1                     POP   HL   
2E6A   E5                     PUSH   HL   
2E6B   11 02 00               LD   DE,2   
2E6E   B7                     OR   A   
2E6F   ED 52                  SBC   HL,DE   
2E71   7D                     LD   A,L   
2E72   B4                     OR   H   
2E73   CA D5 2E               JP   Z,expectM_2846S88   
2E76   CD BB 0B               CALL   printStr   
2E79   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2E87   CD BB 0B               CALL   printStr   
2E8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E99   21 02 00               LD   hl,2   
2E9C   E5                     PUSH   hl   
2E9D   E5                     PUSH   hl   
2E9E   CD DA 0C               CALL   run   
2EA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EA9   CD 43 0B               CALL   flushBuffer   
2EAC   CD BB 0B               CALL   printStr   
2EAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EBC   E1                     POP   hl   
2EBD   E5                     PUSH   hl   
2EBE   E5                     PUSH   hl   
2EBF   CD DA 0C               CALL   run   
2EC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2ED1   CD 43 0B               CALL   flushBuffer   
2ED4   76                     HALT      
2ED5                EXPECTM_2846S88:      
2ED5   E1                     POP   HL   
2ED6                          ;*Macro unroll:  test "5 :a{%a};^", 5
2ED6   31 00 4C               LD   SP,STACK   
2ED9   CD 03 0C               CALL   coldInit   
2EDC   CD 46 4A               CALL   execStr   
2EDF   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
2EEA   CD 43 0B               CALL   flushBuffer   
2EED   E1                     POP   HL   
2EEE   E5                     PUSH   HL   
2EEF   11 05 00               LD   DE,5   
2EF2   B7                     OR   A   
2EF3   ED 52                  SBC   HL,DE   
2EF5   7D                     LD   A,L   
2EF6   B4                     OR   H   
2EF7   CA 5C 2F               JP   Z,expectM_2847S89   
2EFA   CD BB 0B               CALL   printStr   
2EFD   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
2F0E   CD BB 0B               CALL   printStr   
2F11   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F20   21 05 00               LD   hl,5   
2F23   E5                     PUSH   hl   
2F24   E5                     PUSH   hl   
2F25   CD DA 0C               CALL   run   
2F28   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F30   CD 43 0B               CALL   flushBuffer   
2F33   CD BB 0B               CALL   printStr   
2F36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F43   E1                     POP   hl   
2F44   E5                     PUSH   hl   
2F45   E5                     PUSH   hl   
2F46   CD DA 0C               CALL   run   
2F49   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F58   CD 43 0B               CALL   flushBuffer   
2F5B   76                     HALT      
2F5C                EXPECTM_2847S89:      
2F5C   E1                     POP   HL   
2F5D                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
2F5D   31 00 4C               LD   SP,STACK   
2F60   CD 03 0C               CALL   coldInit   
2F63   CD 46 4A               CALL   execStr   
2F66   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
2F73   CD 43 0B               CALL   flushBuffer   
2F76   E1                     POP   HL   
2F77   E5                     PUSH   HL   
2F78   11 05 00               LD   DE,5   
2F7B   B7                     OR   A   
2F7C   ED 52                  SBC   HL,DE   
2F7E   7D                     LD   A,L   
2F7F   B4                     OR   H   
2F80   CA E7 2F               JP   Z,expectM_2848S90   
2F83   CD BB 0B               CALL   printStr   
2F86   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
2F99   CD BB 0B               CALL   printStr   
2F9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FAB   21 05 00               LD   hl,5   
2FAE   E5                     PUSH   hl   
2FAF   E5                     PUSH   hl   
2FB0   CD DA 0C               CALL   run   
2FB3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FBB   CD 43 0B               CALL   flushBuffer   
2FBE   CD BB 0B               CALL   printStr   
2FC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FCE   E1                     POP   hl   
2FCF   E5                     PUSH   hl   
2FD0   E5                     PUSH   hl   
2FD1   CD DA 0C               CALL   run   
2FD4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FE3   CD 43 0B               CALL   flushBuffer   
2FE6   76                     HALT      
2FE7                EXPECTM_2848S90:      
2FE7   E1                     POP   HL   
2FE8                          ;*Macro unroll:  test ":a{{2}^};^", 2
2FE8   31 00 4C               LD   SP,STACK   
2FEB   CD 03 0C               CALL   coldInit   
2FEE   CD 46 4A               CALL   execStr   
2FF1   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
2FFC   CD 43 0B               CALL   flushBuffer   
2FFF   E1                     POP   HL   
3000   E5                     PUSH   HL   
3001   11 02 00               LD   DE,2   
3004   B7                     OR   A   
3005   ED 52                  SBC   HL,DE   
3007   7D                     LD   A,L   
3008   B4                     OR   H   
3009   CA 6E 30               JP   Z,expectM_2849S91   
300C   CD BB 0B               CALL   printStr   
300F   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
3020   CD BB 0B               CALL   printStr   
3023   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3032   21 02 00               LD   hl,2   
3035   E5                     PUSH   hl   
3036   E5                     PUSH   hl   
3037   CD DA 0C               CALL   run   
303A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3042   CD 43 0B               CALL   flushBuffer   
3045   CD BB 0B               CALL   printStr   
3048   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3055   E1                     POP   hl   
3056   E5                     PUSH   hl   
3057   E5                     PUSH   hl   
3058   CD DA 0C               CALL   run   
305B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
306A   CD 43 0B               CALL   flushBuffer   
306D   76                     HALT      
306E                EXPECTM_2849S91:      
306E   E1                     POP   HL   
306F                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
306F   31 00 4C               LD   SP,STACK   
3072   CD 03 0C               CALL   coldInit   
3075   CD 46 4A               CALL   execStr   
3078   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
3088   CD 43 0B               CALL   flushBuffer   
308B   E1                     POP   HL   
308C   E5                     PUSH   HL   
308D   11 05 00               LD   DE,5   
3090   B7                     OR   A   
3091   ED 52                  SBC   HL,DE   
3093   7D                     LD   A,L   
3094   B4                     OR   H   
3095   CA FF 30               JP   Z,expectM_2850S92   
3098   CD BB 0B               CALL   printStr   
309B   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
30B1   CD BB 0B               CALL   printStr   
30B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30C3   21 05 00               LD   hl,5   
30C6   E5                     PUSH   hl   
30C7   E5                     PUSH   hl   
30C8   CD DA 0C               CALL   run   
30CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30D3   CD 43 0B               CALL   flushBuffer   
30D6   CD BB 0B               CALL   printStr   
30D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30E6   E1                     POP   hl   
30E7   E5                     PUSH   hl   
30E8   E5                     PUSH   hl   
30E9   CD DA 0C               CALL   run   
30EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30FB   CD 43 0B               CALL   flushBuffer   
30FE   76                     HALT      
30FF                EXPECTM_2850S92:      
30FF   E1                     POP   HL   
3100                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
3100   31 00 4C               LD   SP,STACK   
3103   CD 03 0C               CALL   coldInit   
3106   CD 46 4A               CALL   execStr   
3109   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
311A   CD 43 0B               CALL   flushBuffer   
311D   E1                     POP   HL   
311E   E5                     PUSH   HL   
311F   11 01 00               LD   DE,1   
3122   B7                     OR   A   
3123   ED 52                  SBC   HL,DE   
3125   7D                     LD   A,L   
3126   B4                     OR   H   
3127   CA 92 31               JP   Z,expectM_2851S93   
312A   CD BB 0B               CALL   printStr   
312D   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
3144   CD BB 0B               CALL   printStr   
3147   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3156   21 01 00               LD   hl,1   
3159   E5                     PUSH   hl   
315A   E5                     PUSH   hl   
315B   CD DA 0C               CALL   run   
315E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3166   CD 43 0B               CALL   flushBuffer   
3169   CD BB 0B               CALL   printStr   
316C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3179   E1                     POP   hl   
317A   E5                     PUSH   hl   
317B   E5                     PUSH   hl   
317C   CD DA 0C               CALL   run   
317F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
318E   CD 43 0B               CALL   flushBuffer   
3191   76                     HALT      
3192                EXPECTM_2851S93:      
3192   E1                     POP   HL   
3193                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
3193   31 00 4C               LD   SP,STACK   
3196   CD 03 0C               CALL   coldInit   
3199   CD 46 4A               CALL   execStr   
319C   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
31B0   CD 43 0B               CALL   flushBuffer   
31B3   E1                     POP   HL   
31B4   E5                     PUSH   HL   
31B5   11 07 00               LD   DE,7   
31B8   B7                     OR   A   
31B9   ED 52                  SBC   HL,DE   
31BB   7D                     LD   A,L   
31BC   B4                     OR   H   
31BD   CA 2B 32               JP   Z,expectM_2852S94   
31C0   CD BB 0B               CALL   printStr   
31C3   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
31DD   CD BB 0B               CALL   printStr   
31E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31EF   21 07 00               LD   hl,7   
31F2   E5                     PUSH   hl   
31F3   E5                     PUSH   hl   
31F4   CD DA 0C               CALL   run   
31F7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31FF   CD 43 0B               CALL   flushBuffer   
3202   CD BB 0B               CALL   printStr   
3205   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3212   E1                     POP   hl   
3213   E5                     PUSH   hl   
3214   E5                     PUSH   hl   
3215   CD DA 0C               CALL   run   
3218   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3227   CD 43 0B               CALL   flushBuffer   
322A   76                     HALT      
322B                EXPECTM_2852S94:      
322B   E1                     POP   HL   
322C                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
322C   31 00 4C               LD   SP,STACK   
322F   CD 03 0C               CALL   coldInit   
3232   CD 46 4A               CALL   execStr   
3235   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
324B   CD 43 0B               CALL   flushBuffer   
324E   E1                     POP   HL   
324F   E5                     PUSH   HL   
3250   11 06 00               LD   DE,6   
3253   B7                     OR   A   
3254   ED 52                  SBC   HL,DE   
3256   7D                     LD   A,L   
3257   B4                     OR   H   
3258   CA C8 32               JP   Z,expectM_2853S95   
325B   CD BB 0B               CALL   printStr   
325E   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
327A   CD BB 0B               CALL   printStr   
327D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
328C   21 06 00               LD   hl,6   
328F   E5                     PUSH   hl   
3290   E5                     PUSH   hl   
3291   CD DA 0C               CALL   run   
3294   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
329C   CD 43 0B               CALL   flushBuffer   
329F   CD BB 0B               CALL   printStr   
32A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32AF   E1                     POP   hl   
32B0   E5                     PUSH   hl   
32B1   E5                     PUSH   hl   
32B2   CD DA 0C               CALL   run   
32B5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32C4   CD 43 0B               CALL   flushBuffer   
32C7   76                     HALT      
32C8                EXPECTM_2853S95:      
32C8   E1                     POP   HL   
32C9                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
32C9   31 00 4C               LD   SP,STACK   
32CC   CD 03 0C               CALL   coldInit   
32CF   CD 46 4A               CALL   execStr   
32D2   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
32E1   CD 43 0B               CALL   flushBuffer   
32E4   E1                     POP   HL   
32E5   E5                     PUSH   HL   
32E6   11 02 00               LD   DE,2   
32E9   B7                     OR   A   
32EA   ED 52                  SBC   HL,DE   
32EC   7D                     LD   A,L   
32ED   B4                     OR   H   
32EE   CA 57 33               JP   Z,expectM_2854S96   
32F1   CD BB 0B               CALL   printStr   
32F4   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
3309   CD BB 0B               CALL   printStr   
330C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
331B   21 02 00               LD   hl,2   
331E   E5                     PUSH   hl   
331F   E5                     PUSH   hl   
3320   CD DA 0C               CALL   run   
3323   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
332B   CD 43 0B               CALL   flushBuffer   
332E   CD BB 0B               CALL   printStr   
3331   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
333E   E1                     POP   hl   
333F   E5                     PUSH   hl   
3340   E5                     PUSH   hl   
3341   CD DA 0C               CALL   run   
3344   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3353   CD 43 0B               CALL   flushBuffer   
3356   76                     HALT      
3357                EXPECTM_2854S96:      
3357   E1                     POP   HL   
3358                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
3358   31 00 4C               LD   SP,STACK   
335B   CD 03 0C               CALL   coldInit   
335E   CD 46 4A               CALL   execStr   
3361   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
3373   CD 43 0B               CALL   flushBuffer   
3376   E1                     POP   HL   
3377   E5                     PUSH   HL   
3378   11 01 00               LD   DE,1   
337B   B7                     OR   A   
337C   ED 52                  SBC   HL,DE   
337E   7D                     LD   A,L   
337F   B4                     OR   H   
3380   CA EC 33               JP   Z,expectM_2855S97   
3383   CD BB 0B               CALL   printStr   
3386   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
339E   CD BB 0B               CALL   printStr   
33A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33B0   21 01 00               LD   hl,1   
33B3   E5                     PUSH   hl   
33B4   E5                     PUSH   hl   
33B5   CD DA 0C               CALL   run   
33B8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33C0   CD 43 0B               CALL   flushBuffer   
33C3   CD BB 0B               CALL   printStr   
33C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33D3   E1                     POP   hl   
33D4   E5                     PUSH   hl   
33D5   E5                     PUSH   hl   
33D6   CD DA 0C               CALL   run   
33D9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33E8   CD 43 0B               CALL   flushBuffer   
33EB   76                     HALT      
33EC                EXPECTM_2855S97:      
33EC   E1                     POP   HL   
33ED                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
33ED   31 00 4C               LD   SP,STACK   
33F0   CD 03 0C               CALL   coldInit   
33F3   CD 46 4A               CALL   execStr   
33F6   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
3409   CD 43 0B               CALL   flushBuffer   
340C   E1                     POP   HL   
340D   E5                     PUSH   HL   
340E   11 02 00               LD   DE,2   
3411   B7                     OR   A   
3412   ED 52                  SBC   HL,DE   
3414   7D                     LD   A,L   
3415   B4                     OR   H   
3416   CA 83 34               JP   Z,expectM_2856S98   
3419   CD BB 0B               CALL   printStr   
341C   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
3435   CD BB 0B               CALL   printStr   
3438   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3447   21 02 00               LD   hl,2   
344A   E5                     PUSH   hl   
344B   E5                     PUSH   hl   
344C   CD DA 0C               CALL   run   
344F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3457   CD 43 0B               CALL   flushBuffer   
345A   CD BB 0B               CALL   printStr   
345D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
346A   E1                     POP   hl   
346B   E5                     PUSH   hl   
346C   E5                     PUSH   hl   
346D   CD DA 0C               CALL   run   
3470   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
347F   CD 43 0B               CALL   flushBuffer   
3482   76                     HALT      
3483                EXPECTM_2856S98:      
3483   E1                     POP   HL   
3484                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
3484   31 00 4C               LD   SP,STACK   
3487   CD 03 0C               CALL   coldInit   
348A   CD 46 4A               CALL   execStr   
348D   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
34A1   CD 43 0B               CALL   flushBuffer   
34A4   E1                     POP   HL   
34A5   E5                     PUSH   HL   
34A6   11 02 00               LD   DE,2   
34A9   B7                     OR   A   
34AA   ED 52                  SBC   HL,DE   
34AC   7D                     LD   A,L   
34AD   B4                     OR   H   
34AE   CA 1C 35               JP   Z,expectM_2857S99   
34B1   CD BB 0B               CALL   printStr   
34B4   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
34CE   CD BB 0B               CALL   printStr   
34D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34E0   21 02 00               LD   hl,2   
34E3   E5                     PUSH   hl   
34E4   E5                     PUSH   hl   
34E5   CD DA 0C               CALL   run   
34E8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34F0   CD 43 0B               CALL   flushBuffer   
34F3   CD BB 0B               CALL   printStr   
34F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3503   E1                     POP   hl   
3504   E5                     PUSH   hl   
3505   E5                     PUSH   hl   
3506   CD DA 0C               CALL   run   
3509   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3518   CD 43 0B               CALL   flushBuffer   
351B   76                     HALT      
351C                EXPECTM_2857S99:      
351C   E1                     POP   HL   
351D                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
351D   31 00 4C               LD   SP,STACK   
3520   CD 03 0C               CALL   coldInit   
3523   CD 46 4A               CALL   execStr   
3526   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
3539   CD 43 0B               CALL   flushBuffer   
353C   E1                     POP   HL   
353D   E5                     PUSH   HL   
353E   11 02 00               LD   DE,2   
3541   B7                     OR   A   
3542   ED 52                  SBC   HL,DE   
3544   7D                     LD   A,L   
3545   B4                     OR   H   
3546   CA B3 35               JP   Z,expectM_2858S100   
3549   CD BB 0B               CALL   printStr   
354C   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
3565   CD BB 0B               CALL   printStr   
3568   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3577   21 02 00               LD   hl,2   
357A   E5                     PUSH   hl   
357B   E5                     PUSH   hl   
357C   CD DA 0C               CALL   run   
357F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3587   CD 43 0B               CALL   flushBuffer   
358A   CD BB 0B               CALL   printStr   
358D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
359A   E1                     POP   hl   
359B   E5                     PUSH   hl   
359C   E5                     PUSH   hl   
359D   CD DA 0C               CALL   run   
35A0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35AF   CD 43 0B               CALL   flushBuffer   
35B2   76                     HALT      
35B3                EXPECTM_2858S100:      
35B3   E1                     POP   HL   
35B4                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
35B4   31 00 4C               LD   SP,STACK   
35B7   CD 03 0C               CALL   coldInit   
35BA   CD 46 4A               CALL   execStr   
35BD   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
35D7   CD 43 0B               CALL   flushBuffer   
35DA   E1                     POP   HL   
35DB   E5                     PUSH   HL   
35DC   11 05 00               LD   DE,5   
35DF   B7                     OR   A   
35E0   ED 52                  SBC   HL,DE   
35E2   7D                     LD   A,L   
35E3   B4                     OR   H   
35E4   CA 58 36               JP   Z,expectM_2859S101   
35E7   CD BB 0B               CALL   printStr   
35EA   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
360A   CD BB 0B               CALL   printStr   
360D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
361C   21 05 00               LD   hl,5   
361F   E5                     PUSH   hl   
3620   E5                     PUSH   hl   
3621   CD DA 0C               CALL   run   
3624   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
362C   CD 43 0B               CALL   flushBuffer   
362F   CD BB 0B               CALL   printStr   
3632   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
363F   E1                     POP   hl   
3640   E5                     PUSH   hl   
3641   E5                     PUSH   hl   
3642   CD DA 0C               CALL   run   
3645   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3654   CD 43 0B               CALL   flushBuffer   
3657   76                     HALT      
3658                EXPECTM_2859S101:      
3658   E1                     POP   HL   
3659                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3659   31 00 4C               LD   SP,STACK   
365C   CD 03 0C               CALL   coldInit   
365F   CD 46 4A               CALL   execStr   
3662   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
3673   CD 43 0B               CALL   flushBuffer   
3676   E1                     POP   HL   
3677   E5                     PUSH   HL   
3678   11 02 00               LD   DE,2   
367B   B7                     OR   A   
367C   ED 52                  SBC   HL,DE   
367E   7D                     LD   A,L   
367F   B4                     OR   H   
3680   CA EB 36               JP   Z,expectM_2860S102   
3683   CD BB 0B               CALL   printStr   
3686   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
369D   CD BB 0B               CALL   printStr   
36A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36AF   21 02 00               LD   hl,2   
36B2   E5                     PUSH   hl   
36B3   E5                     PUSH   hl   
36B4   CD DA 0C               CALL   run   
36B7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36BF   CD 43 0B               CALL   flushBuffer   
36C2   CD BB 0B               CALL   printStr   
36C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36D2   E1                     POP   hl   
36D3   E5                     PUSH   hl   
36D4   E5                     PUSH   hl   
36D5   CD DA 0C               CALL   run   
36D8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36E7   CD 43 0B               CALL   flushBuffer   
36EA   76                     HALT      
36EB                EXPECTM_2860S102:      
36EB   E1                     POP   HL   
36EC                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
36EC   31 00 4C               LD   SP,STACK   
36EF   CD 03 0C               CALL   coldInit   
36F2   CD 46 4A               CALL   execStr   
36F5   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
370D   CD 43 0B               CALL   flushBuffer   
3710   E1                     POP   HL   
3711   E5                     PUSH   HL   
3712   11 64 00               LD   DE,100   
3715   B7                     OR   A   
3716   ED 52                  SBC   HL,DE   
3718   7D                     LD   A,L   
3719   B4                     OR   H   
371A   CA 8C 37               JP   Z,expectM_2861S103   
371D   CD BB 0B               CALL   printStr   
3720   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
373E   CD BB 0B               CALL   printStr   
3741   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3750   21 64 00               LD   hl,100   
3753   E5                     PUSH   hl   
3754   E5                     PUSH   hl   
3755   CD DA 0C               CALL   run   
3758   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3760   CD 43 0B               CALL   flushBuffer   
3763   CD BB 0B               CALL   printStr   
3766   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3773   E1                     POP   hl   
3774   E5                     PUSH   hl   
3775   E5                     PUSH   hl   
3776   CD DA 0C               CALL   run   
3779   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3788   CD 43 0B               CALL   flushBuffer   
378B   76                     HALT      
378C                EXPECTM_2861S103:      
378C   E1                     POP   HL   
378D                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
378D   31 00 4C               LD   SP,STACK   
3790   CD 03 0C               CALL   coldInit   
3793   CD 46 4A               CALL   execStr   
3796   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
37AF   CD 43 0B               CALL   flushBuffer   
37B2   E1                     POP   HL   
37B3   E5                     PUSH   HL   
37B4   11 01 00               LD   DE,1   
37B7   B7                     OR   A   
37B8   ED 52                  SBC   HL,DE   
37BA   7D                     LD   A,L   
37BB   B4                     OR   H   
37BC   CA 2F 38               JP   Z,expectM_2862S104   
37BF   CD BB 0B               CALL   printStr   
37C2   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
37E1   CD BB 0B               CALL   printStr   
37E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37F3   21 01 00               LD   hl,1   
37F6   E5                     PUSH   hl   
37F7   E5                     PUSH   hl   
37F8   CD DA 0C               CALL   run   
37FB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3803   CD 43 0B               CALL   flushBuffer   
3806   CD BB 0B               CALL   printStr   
3809   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3816   E1                     POP   hl   
3817   E5                     PUSH   hl   
3818   E5                     PUSH   hl   
3819   CD DA 0C               CALL   run   
381C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
382B   CD 43 0B               CALL   flushBuffer   
382E   76                     HALT      
382F                EXPECTM_2862S104:      
382F   E1                     POP   HL   
3830                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
3830   31 00 4C               LD   SP,STACK   
3833   CD 03 0C               CALL   coldInit   
3836   CD 46 4A               CALL   execStr   
3839   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
3853   CD 43 0B               CALL   flushBuffer   
3856   E1                     POP   HL   
3857   E5                     PUSH   HL   
3858   11 02 00               LD   DE,2   
385B   B7                     OR   A   
385C   ED 52                  SBC   HL,DE   
385E   7D                     LD   A,L   
385F   B4                     OR   H   
3860   CA D4 38               JP   Z,expectM_2863S105   
3863   CD BB 0B               CALL   printStr   
3866   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
3886   CD BB 0B               CALL   printStr   
3889   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3898   21 02 00               LD   hl,2   
389B   E5                     PUSH   hl   
389C   E5                     PUSH   hl   
389D   CD DA 0C               CALL   run   
38A0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38A8   CD 43 0B               CALL   flushBuffer   
38AB   CD BB 0B               CALL   printStr   
38AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38BB   E1                     POP   hl   
38BC   E5                     PUSH   hl   
38BD   E5                     PUSH   hl   
38BE   CD DA 0C               CALL   run   
38C1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38D0   CD 43 0B               CALL   flushBuffer   
38D3   76                     HALT      
38D4                EXPECTM_2863S105:      
38D4   E1                     POP   HL   
38D5                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
38D5   31 00 4C               LD   SP,STACK   
38D8   CD 03 0C               CALL   coldInit   
38DB   CD 46 4A               CALL   execStr   
38DE   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
38FD   CD 43 0B               CALL   flushBuffer   
3900   E1                     POP   HL   
3901   E5                     PUSH   HL   
3902   11 0B 00               LD   DE,11   
3905   B7                     OR   A   
3906   ED 52                  SBC   HL,DE   
3908   7D                     LD   A,L   
3909   B4                     OR   H   
390A   CA 83 39               JP   Z,expectM_2864S106   
390D   CD BB 0B               CALL   printStr   
3910   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
3935   CD BB 0B               CALL   printStr   
3938   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3947   21 0B 00               LD   hl,11   
394A   E5                     PUSH   hl   
394B   E5                     PUSH   hl   
394C   CD DA 0C               CALL   run   
394F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3957   CD 43 0B               CALL   flushBuffer   
395A   CD BB 0B               CALL   printStr   
395D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
396A   E1                     POP   hl   
396B   E5                     PUSH   hl   
396C   E5                     PUSH   hl   
396D   CD DA 0C               CALL   run   
3970   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
397F   CD 43 0B               CALL   flushBuffer   
3982   76                     HALT      
3983                EXPECTM_2864S106:      
3983   E1                     POP   HL   
3984                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
3984   31 00 4C               LD   SP,STACK   
3987   CD 03 0C               CALL   coldInit   
398A   CD 46 4A               CALL   execStr   
398D   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
39AC   CD 43 0B               CALL   flushBuffer   
39AF   E1                     POP   HL   
39B0   E5                     PUSH   HL   
39B1   11 15 00               LD   DE,21   
39B4   B7                     OR   A   
39B5   ED 52                  SBC   HL,DE   
39B7   7D                     LD   A,L   
39B8   B4                     OR   H   
39B9   CA 32 3A               JP   Z,expectM_2865S107   
39BC   CD BB 0B               CALL   printStr   
39BF   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
39E4   CD BB 0B               CALL   printStr   
39E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39F6   21 15 00               LD   hl,21   
39F9   E5                     PUSH   hl   
39FA   E5                     PUSH   hl   
39FB   CD DA 0C               CALL   run   
39FE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A06   CD 43 0B               CALL   flushBuffer   
3A09   CD BB 0B               CALL   printStr   
3A0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A19   E1                     POP   hl   
3A1A   E5                     PUSH   hl   
3A1B   E5                     PUSH   hl   
3A1C   CD DA 0C               CALL   run   
3A1F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A2E   CD 43 0B               CALL   flushBuffer   
3A31   76                     HALT      
3A32                EXPECTM_2865S107:      
3A32   E1                     POP   HL   
3A33                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3A33   31 00 4C               LD   SP,STACK   
3A36   CD 03 0C               CALL   coldInit   
3A39   CD 46 4A               CALL   execStr   
3A3C   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3A4A   CD 43 0B               CALL   flushBuffer   
3A4D   E1                     POP   HL   
3A4E   E5                     PUSH   HL   
3A4F   11 14 00               LD   DE,20   
3A52   B7                     OR   A   
3A53   ED 52                  SBC   HL,DE   
3A55   7D                     LD   A,L   
3A56   B4                     OR   H   
3A57   CA BF 3A               JP   Z,expectM_2866S108   
3A5A   CD BB 0B               CALL   printStr   
3A5D   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3A71   CD BB 0B               CALL   printStr   
3A74   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A83   21 14 00               LD   hl,20   
3A86   E5                     PUSH   hl   
3A87   E5                     PUSH   hl   
3A88   CD DA 0C               CALL   run   
3A8B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A93   CD 43 0B               CALL   flushBuffer   
3A96   CD BB 0B               CALL   printStr   
3A99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AA6   E1                     POP   hl   
3AA7   E5                     PUSH   hl   
3AA8   E5                     PUSH   hl   
3AA9   CD DA 0C               CALL   run   
3AAC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3ABB   CD 43 0B               CALL   flushBuffer   
3ABE   76                     HALT      
3ABF                EXPECTM_2866S108:      
3ABF   E1                     POP   HL   
3AC0                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
3AC0   31 00 4C               LD   SP,STACK   
3AC3   CD 03 0C               CALL   coldInit   
3AC6   CD 46 4A               CALL   execStr   
3AC9   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 DB   "[10 20 30 40] /s",0   
3ADA   CD 43 0B               CALL   flushBuffer   
3ADD   E1                     POP   HL   
3ADE   E5                     PUSH   HL   
3ADF   11 04 00               LD   DE,4   
3AE2   B7                     OR   A   
3AE3   ED 52                  SBC   HL,DE   
3AE5   7D                     LD   A,L   
3AE6   B4                     OR   H   
3AE7   CA 52 3B               JP   Z,expectM_2867S109   
3AEA   CD BB 0B               CALL   printStr   
3AED   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3B04   CD BB 0B               CALL   printStr   
3B07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B16   21 04 00               LD   hl,4   
3B19   E5                     PUSH   hl   
3B1A   E5                     PUSH   hl   
3B1B   CD DA 0C               CALL   run   
3B1E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B26   CD 43 0B               CALL   flushBuffer   
3B29   CD BB 0B               CALL   printStr   
3B2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B39   E1                     POP   hl   
3B3A   E5                     PUSH   hl   
3B3B   E5                     PUSH   hl   
3B3C   CD DA 0C               CALL   run   
3B3F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B4E   CD 43 0B               CALL   flushBuffer   
3B51   76                     HALT      
3B52                EXPECTM_2867S109:      
3B52   E1                     POP   HL   
3B53                          ;*Macro unroll:  test "/c [1 2 3] 1#", 2
3B53   31 00 4C               LD   SP,STACK   
3B56   CD 03 0C               CALL   coldInit   
3B59   CD 46 4A               CALL   execStr   
3B5C   2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/c [1 2 3] 1#",0   
3B6A   CD 43 0B               CALL   flushBuffer   
3B6D   E1                     POP   HL   
3B6E   E5                     PUSH   HL   
3B6F   11 02 00               LD   DE,2   
3B72   B7                     OR   A   
3B73   ED 52                  SBC   HL,DE   
3B75   7D                     LD   A,L   
3B76   B4                     OR   H   
3B77   CA DF 3B               JP   Z,expectM_2868S110   
3B7A   CD BB 0B               CALL   printStr   
3B7D   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/c [1 2 3] 1#"   
3B91   CD BB 0B               CALL   printStr   
3B94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BA3   21 02 00               LD   hl,2   
3BA6   E5                     PUSH   hl   
3BA7   E5                     PUSH   hl   
3BA8   CD DA 0C               CALL   run   
3BAB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BB3   CD 43 0B               CALL   flushBuffer   
3BB6   CD BB 0B               CALL   printStr   
3BB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BC6   E1                     POP   hl   
3BC7   E5                     PUSH   hl   
3BC8   E5                     PUSH   hl   
3BC9   CD DA 0C               CALL   run   
3BCC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BDB   CD 43 0B               CALL   flushBuffer   
3BDE   76                     HALT      
3BDF                EXPECTM_2868S110:      
3BDF   E1                     POP   HL   
3BE0                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1#", 66
3BE0   31 00 4C               LD   SP,STACK   
3BE3   CD 03 0C               CALL   coldInit   
3BE6   CD 46 4A               CALL   execStr   
3BE9   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/c ['A' 'B' 'C'] 1#",0   
3BFD   CD 43 0B               CALL   flushBuffer   
3C00   E1                     POP   HL   
3C01   E5                     PUSH   HL   
3C02   11 42 00               LD   DE,66   
3C05   B7                     OR   A   
3C06   ED 52                  SBC   HL,DE   
3C08   7D                     LD   A,L   
3C09   B4                     OR   H   
3C0A   CA 78 3C               JP   Z,expectM_2869S111   
3C0D   CD BB 0B               CALL   printStr   
3C10   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1#"   
3C2A   CD BB 0B               CALL   printStr   
3C2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C3C   21 42 00               LD   hl,66   
3C3F   E5                     PUSH   hl   
3C40   E5                     PUSH   hl   
3C41   CD DA 0C               CALL   run   
3C44   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C4C   CD 43 0B               CALL   flushBuffer   
3C4F   CD BB 0B               CALL   printStr   
3C52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C5F   E1                     POP   hl   
3C60   E5                     PUSH   hl   
3C61   E5                     PUSH   hl   
3C62   CD DA 0C               CALL   run   
3C65   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C74   CD 43 0B               CALL   flushBuffer   
3C77   76                     HALT      
3C78                EXPECTM_2869S111:      
3C78   E1                     POP   HL   
3C79                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3C79   31 00 4C               LD   SP,STACK   
3C7C   CD 03 0C               CALL   coldInit   
3C7F   CD 46 4A               CALL   execStr   
3C82   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3C96   CD 43 0B               CALL   flushBuffer   
3C99   E1                     POP   HL   
3C9A   E5                     PUSH   HL   
3C9B   11 0A 00               LD   DE,10   
3C9E   B7                     OR   A   
3C9F   ED 52                  SBC   HL,DE   
3CA1   7D                     LD   A,L   
3CA2   B4                     OR   H   
3CA3   CA 11 3D               JP   Z,expectM_2870S112   
3CA6   CD BB 0B               CALL   printStr   
3CA9   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3CC3   CD BB 0B               CALL   printStr   
3CC6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CD5   21 0A 00               LD   hl,10   
3CD8   E5                     PUSH   hl   
3CD9   E5                     PUSH   hl   
3CDA   CD DA 0C               CALL   run   
3CDD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CE5   CD 43 0B               CALL   flushBuffer   
3CE8   CD BB 0B               CALL   printStr   
3CEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CF8   E1                     POP   hl   
3CF9   E5                     PUSH   hl   
3CFA   E5                     PUSH   hl   
3CFB   CD DA 0C               CALL   run   
3CFE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D0D   CD 43 0B               CALL   flushBuffer   
3D10   76                     HALT      
3D11                EXPECTM_2870S112:      
3D11   E1                     POP   HL   
3D12                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
3D12   31 00 4C               LD   SP,STACK   
3D15   CD 03 0C               CALL   coldInit   
3D18   CD 46 4A               CALL   execStr   
3D1B   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
3D38   CD 43 0B               CALL   flushBuffer   
3D3B   E1                     POP   HL   
3D3C   E5                     PUSH   HL   
3D3D   11 0A 00               LD   DE,10   
3D40   B7                     OR   A   
3D41   ED 52                  SBC   HL,DE   
3D43   7D                     LD   A,L   
3D44   B4                     OR   H   
3D45   CA BC 3D               JP   Z,expectM_2871S113   
3D48   CD BB 0B               CALL   printStr   
3D4B   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
3D6E   CD BB 0B               CALL   printStr   
3D71   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D80   21 0A 00               LD   hl,10   
3D83   E5                     PUSH   hl   
3D84   E5                     PUSH   hl   
3D85   CD DA 0C               CALL   run   
3D88   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D90   CD 43 0B               CALL   flushBuffer   
3D93   CD BB 0B               CALL   printStr   
3D96   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DA3   E1                     POP   hl   
3DA4   E5                     PUSH   hl   
3DA5   E5                     PUSH   hl   
3DA6   CD DA 0C               CALL   run   
3DA9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DB8   CD 43 0B               CALL   flushBuffer   
3DBB   76                     HALT      
3DBC                EXPECTM_2871S113:      
3DBC   E1                     POP   HL   
3DBD                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
3DBD   31 00 4C               LD   SP,STACK   
3DC0   CD 03 0C               CALL   coldInit   
3DC3   CD 46 4A               CALL   execStr   
3DC6   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3DE7   CD 43 0B               CALL   flushBuffer   
3DEA   E1                     POP   HL   
3DEB   E5                     PUSH   HL   
3DEC   11 0A 00               LD   DE,10   
3DEF   B7                     OR   A   
3DF0   ED 52                  SBC   HL,DE   
3DF2   7D                     LD   A,L   
3DF3   B4                     OR   H   
3DF4   CA 6F 3E               JP   Z,expectM_2872S114   
3DF7   CD BB 0B               CALL   printStr   
3DFA   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
3E21   CD BB 0B               CALL   printStr   
3E24   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E33   21 0A 00               LD   hl,10   
3E36   E5                     PUSH   hl   
3E37   E5                     PUSH   hl   
3E38   CD DA 0C               CALL   run   
3E3B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E43   CD 43 0B               CALL   flushBuffer   
3E46   CD BB 0B               CALL   printStr   
3E49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E56   E1                     POP   hl   
3E57   E5                     PUSH   hl   
3E58   E5                     PUSH   hl   
3E59   CD DA 0C               CALL   run   
3E5C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E6B   CD 43 0B               CALL   flushBuffer   
3E6E   76                     HALT      
3E6F                EXPECTM_2872S114:      
3E6F   E1                     POP   HL   
3E70                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
3E70   31 00 4C               LD   SP,STACK   
3E73   CD 03 0C               CALL   coldInit   
3E76   CD 46 4A               CALL   execStr   
3E79   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3E9A   CD 43 0B               CALL   flushBuffer   
3E9D   E1                     POP   HL   
3E9E   E5                     PUSH   HL   
3E9F   11 14 00               LD   DE,20   
3EA2   B7                     OR   A   
3EA3   ED 52                  SBC   HL,DE   
3EA5   7D                     LD   A,L   
3EA6   B4                     OR   H   
3EA7   CA 22 3F               JP   Z,expectM_2873S115   
3EAA   CD BB 0B               CALL   printStr   
3EAD   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
3ED4   CD BB 0B               CALL   printStr   
3ED7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EE6   21 14 00               LD   hl,20   
3EE9   E5                     PUSH   hl   
3EEA   E5                     PUSH   hl   
3EEB   CD DA 0C               CALL   run   
3EEE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3EF6   CD 43 0B               CALL   flushBuffer   
3EF9   CD BB 0B               CALL   printStr   
3EFC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F09   E1                     POP   hl   
3F0A   E5                     PUSH   hl   
3F0B   E5                     PUSH   hl   
3F0C   CD DA 0C               CALL   run   
3F0F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F1E   CD 43 0B               CALL   flushBuffer   
3F21   76                     HALT      
3F22                EXPECTM_2873S115:      
3F22   E1                     POP   HL   
3F23                          ;*Macro unroll:  test "5 [4] :a {%a}; /pa ^", 4
3F23   31 00 4C               LD   SP,STACK   
3F26   CD 03 0C               CALL   coldInit   
3F29   CD 46 4A               CALL   execStr   
3F2C   35 20 5B 34 5D 20 3A 61 20 7B 25 61 7D 3B 20 2F 70 61 20 5E 00 DB   "5 [4] :a {%a}; /pa ^",0   
3F41   CD 43 0B               CALL   flushBuffer   
3F44   E1                     POP   HL   
3F45   E5                     PUSH   HL   
3F46   11 04 00               LD   DE,4   
3F49   B7                     OR   A   
3F4A   ED 52                  SBC   HL,DE   
3F4C   7D                     LD   A,L   
3F4D   B4                     OR   H   
3F4E   CA BD 3F               JP   Z,expectM_2874S116   
3F51   CD BB 0B               CALL   printStr   
3F54   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 20 7B 25 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a {%a}; /pa ^"   
3F6F   CD BB 0B               CALL   printStr   
3F72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F81   21 04 00               LD   hl,4   
3F84   E5                     PUSH   hl   
3F85   E5                     PUSH   hl   
3F86   CD DA 0C               CALL   run   
3F89   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F91   CD 43 0B               CALL   flushBuffer   
3F94   CD BB 0B               CALL   printStr   
3F97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FA4   E1                     POP   hl   
3FA5   E5                     PUSH   hl   
3FA6   E5                     PUSH   hl   
3FA7   CD DA 0C               CALL   run   
3FAA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FB9   CD 43 0B               CALL   flushBuffer   
3FBC   76                     HALT      
3FBD                EXPECTM_2874S116:      
3FBD   E1                     POP   HL   
3FBE                          ;*Macro unroll:  test "5 [4] :ab {%a %b +}; /pa ^", 9
3FBE   31 00 4C               LD   SP,STACK   
3FC1   CD 03 0C               CALL   coldInit   
3FC4   CD 46 4A               CALL   execStr   
3FC7   35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 DB   "5 [4] :ab {%a %b +}; /pa ^",0   
3FE2   CD 43 0B               CALL   flushBuffer   
3FE5   E1                     POP   HL   
3FE6   E5                     PUSH   HL   
3FE7   11 09 00               LD   DE,9   
3FEA   B7                     OR   A   
3FEB   ED 52                  SBC   HL,DE   
3FED   7D                     LD   A,L   
3FEE   B4                     OR   H   
3FEF   CA 64 40               JP   Z,expectM_2875S117   
3FF2   CD BB 0B               CALL   printStr   
3FF5   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab {%a %b +}; /pa ^"   
4016   CD BB 0B               CALL   printStr   
4019   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4028   21 09 00               LD   hl,9   
402B   E5                     PUSH   hl   
402C   E5                     PUSH   hl   
402D   CD DA 0C               CALL   run   
4030   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4038   CD 43 0B               CALL   flushBuffer   
403B   CD BB 0B               CALL   printStr   
403E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
404B   E1                     POP   hl   
404C   E5                     PUSH   hl   
404D   E5                     PUSH   hl   
404E   CD DA 0C               CALL   run   
4051   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4060   CD 43 0B               CALL   flushBuffer   
4063   76                     HALT      
4064                EXPECTM_2875S117:      
4064   E1                     POP   HL   
4065                          ;*Macro unroll:  test "5 [4] :ab {%a %b -}; /pa ^", 1
4065   31 00 4C               LD   SP,STACK   
4068   CD 03 0C               CALL   coldInit   
406B   CD 46 4A               CALL   execStr   
406E   35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2D 7D 3B 20 2F 70 61 20 5E 00 DB   "5 [4] :ab {%a %b -}; /pa ^",0   
4089   CD 43 0B               CALL   flushBuffer   
408C   E1                     POP   HL   
408D   E5                     PUSH   HL   
408E   11 01 00               LD   DE,1   
4091   B7                     OR   A   
4092   ED 52                  SBC   HL,DE   
4094   7D                     LD   A,L   
4095   B4                     OR   H   
4096   CA 0B 41               JP   Z,expectM_2876S118   
4099   CD BB 0B               CALL   printStr   
409C   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2D 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab {%a %b -}; /pa ^"   
40BD   CD BB 0B               CALL   printStr   
40C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40CF   21 01 00               LD   hl,1   
40D2   E5                     PUSH   hl   
40D3   E5                     PUSH   hl   
40D4   CD DA 0C               CALL   run   
40D7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40DF   CD 43 0B               CALL   flushBuffer   
40E2   CD BB 0B               CALL   printStr   
40E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40F2   E1                     POP   hl   
40F3   E5                     PUSH   hl   
40F4   E5                     PUSH   hl   
40F5   CD DA 0C               CALL   run   
40F8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4107   CD 43 0B               CALL   flushBuffer   
410A   76                     HALT      
410B                EXPECTM_2876S118:      
410B   E1                     POP   HL   
410C                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
410C   31 00 4C               LD   SP,STACK   
410F   CD 03 0C               CALL   coldInit   
4112   CD 46 4A               CALL   execStr   
4115   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
412D   CD 43 0B               CALL   flushBuffer   
4130   E1                     POP   HL   
4131   E5                     PUSH   HL   
4132   11 06 00               LD   DE,6   
4135   B7                     OR   A   
4136   ED 52                  SBC   HL,DE   
4138   7D                     LD   A,L   
4139   B4                     OR   H   
413A   CA AC 41               JP   Z,expectM_2877S119   
413D   CD BB 0B               CALL   printStr   
4140   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
415E   CD BB 0B               CALL   printStr   
4161   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4170   21 06 00               LD   hl,6   
4173   E5                     PUSH   hl   
4174   E5                     PUSH   hl   
4175   CD DA 0C               CALL   run   
4178   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4180   CD 43 0B               CALL   flushBuffer   
4183   CD BB 0B               CALL   printStr   
4186   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4193   E1                     POP   hl   
4194   E5                     PUSH   hl   
4195   E5                     PUSH   hl   
4196   CD DA 0C               CALL   run   
4199   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41A8   CD 43 0B               CALL   flushBuffer   
41AB   76                     HALT      
41AC                EXPECTM_2877S119:      
41AC   E1                     POP   HL   
41AD                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
41AD   31 00 4C               LD   SP,STACK   
41B0   CD 03 0C               CALL   coldInit   
41B3   CD 46 4A               CALL   execStr   
41B6   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
41D1   CD 43 0B               CALL   flushBuffer   
41D4   E1                     POP   HL   
41D5   E5                     PUSH   HL   
41D6   11 02 00               LD   DE,2   
41D9   B7                     OR   A   
41DA   ED 52                  SBC   HL,DE   
41DC   7D                     LD   A,L   
41DD   B4                     OR   H   
41DE   CA 53 42               JP   Z,expectM_2878S120   
41E1   CD BB 0B               CALL   printStr   
41E4   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
4205   CD BB 0B               CALL   printStr   
4208   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4217   21 02 00               LD   hl,2   
421A   E5                     PUSH   hl   
421B   E5                     PUSH   hl   
421C   CD DA 0C               CALL   run   
421F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4227   CD 43 0B               CALL   flushBuffer   
422A   CD BB 0B               CALL   printStr   
422D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
423A   E1                     POP   hl   
423B   E5                     PUSH   hl   
423C   E5                     PUSH   hl   
423D   CD DA 0C               CALL   run   
4240   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
424F   CD 43 0B               CALL   flushBuffer   
4252   76                     HALT      
4253                EXPECTM_2878S120:      
4253   E1                     POP   HL   
4254                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
4254   31 00 4C               LD   SP,STACK   
4257   CD 03 0C               CALL   coldInit   
425A   CD 46 4A               CALL   execStr   
425D   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
4283   CD 43 0B               CALL   flushBuffer   
4286   E1                     POP   HL   
4287   E5                     PUSH   HL   
4288   11 0A 00               LD   DE,10   
428B   B7                     OR   A   
428C   ED 52                  SBC   HL,DE   
428E   7D                     LD   A,L   
428F   B4                     OR   H   
4290   CA 10 43               JP   Z,expectM_2879S121   
4293   CD BB 0B               CALL   printStr   
4296   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
42C2   CD BB 0B               CALL   printStr   
42C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42D4   21 0A 00               LD   hl,10   
42D7   E5                     PUSH   hl   
42D8   E5                     PUSH   hl   
42D9   CD DA 0C               CALL   run   
42DC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42E4   CD 43 0B               CALL   flushBuffer   
42E7   CD BB 0B               CALL   printStr   
42EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42F7   E1                     POP   hl   
42F8   E5                     PUSH   hl   
42F9   E5                     PUSH   hl   
42FA   CD DA 0C               CALL   run   
42FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
430C   CD 43 0B               CALL   flushBuffer   
430F   76                     HALT      
4310                EXPECTM_2879S121:      
4310   E1                     POP   HL   
4311                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
4311   31 00 4C               LD   SP,STACK   
4314   CD 03 0C               CALL   coldInit   
4317   CD 46 4A               CALL   execStr   
431A   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
4347   CD 43 0B               CALL   flushBuffer   
434A   E1                     POP   HL   
434B   E5                     PUSH   HL   
434C   11 06 00               LD   DE,6   
434F   B7                     OR   A   
4350   ED 52                  SBC   HL,DE   
4352   7D                     LD   A,L   
4353   B4                     OR   H   
4354   CA DB 43               JP   Z,expectM_2880S122   
4357   CD BB 0B               CALL   printStr   
435A   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
438D   CD BB 0B               CALL   printStr   
4390   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
439F   21 06 00               LD   hl,6   
43A2   E5                     PUSH   hl   
43A3   E5                     PUSH   hl   
43A4   CD DA 0C               CALL   run   
43A7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43AF   CD 43 0B               CALL   flushBuffer   
43B2   CD BB 0B               CALL   printStr   
43B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43C2   E1                     POP   hl   
43C3   E5                     PUSH   hl   
43C4   E5                     PUSH   hl   
43C5   CD DA 0C               CALL   run   
43C8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43D7   CD 43 0B               CALL   flushBuffer   
43DA   76                     HALT      
43DB                EXPECTM_2880S122:      
43DB   E1                     POP   HL   
43DC                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
43DC   31 00 4C               LD   SP,STACK   
43DF   CD 03 0C               CALL   coldInit   
43E2   CD 46 4A               CALL   execStr   
43E5   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
43F1   CD 43 0B               CALL   flushBuffer   
43F4   E1                     POP   HL   
43F5   E5                     PUSH   HL   
43F6   11 00 00               LD   DE,NUL   
43F9   B7                     OR   A   
43FA   ED 52                  SBC   HL,DE   
43FC   7D                     LD   A,L   
43FD   B4                     OR   H   
43FE   CA 64 44               JP   Z,expectM_2881S123   
4401   CD BB 0B               CALL   printStr   
4404   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
4416   CD BB 0B               CALL   printStr   
4419   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4428   21 00 00               LD   hl,NUL   
442B   E5                     PUSH   hl   
442C   E5                     PUSH   hl   
442D   CD DA 0C               CALL   run   
4430   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4438   CD 43 0B               CALL   flushBuffer   
443B   CD BB 0B               CALL   printStr   
443E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
444B   E1                     POP   hl   
444C   E5                     PUSH   hl   
444D   E5                     PUSH   hl   
444E   CD DA 0C               CALL   run   
4451   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4460   CD 43 0B               CALL   flushBuffer   
4463   76                     HALT      
4464                EXPECTM_2881S123:      
4464   E1                     POP   HL   
4465                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4465   31 00 4C               LD   SP,STACK   
4468   CD 03 0C               CALL   coldInit   
446B   CD 46 4A               CALL   execStr   
446E   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
447A   CD 43 0B               CALL   flushBuffer   
447D   E1                     POP   HL   
447E   E5                     PUSH   HL   
447F   11 00 00               LD   DE,NUL   
4482   B7                     OR   A   
4483   ED 52                  SBC   HL,DE   
4485   7D                     LD   A,L   
4486   B4                     OR   H   
4487   CA ED 44               JP   Z,expectM_2882S124   
448A   CD BB 0B               CALL   printStr   
448D   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
449F   CD BB 0B               CALL   printStr   
44A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44B1   21 00 00               LD   hl,NUL   
44B4   E5                     PUSH   hl   
44B5   E5                     PUSH   hl   
44B6   CD DA 0C               CALL   run   
44B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44C1   CD 43 0B               CALL   flushBuffer   
44C4   CD BB 0B               CALL   printStr   
44C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44D4   E1                     POP   hl   
44D5   E5                     PUSH   hl   
44D6   E5                     PUSH   hl   
44D7   CD DA 0C               CALL   run   
44DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44E9   CD 43 0B               CALL   flushBuffer   
44EC   76                     HALT      
44ED                EXPECTM_2882S124:      
44ED   E1                     POP   HL   
44EE                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
44EE   31 00 4C               LD   SP,STACK   
44F1   CD 03 0C               CALL   coldInit   
44F4   CD 46 4A               CALL   execStr   
44F7   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
4503   CD 43 0B               CALL   flushBuffer   
4506   E1                     POP   HL   
4507   E5                     PUSH   HL   
4508   11 00 00               LD   DE,NUL   
450B   B7                     OR   A   
450C   ED 52                  SBC   HL,DE   
450E   7D                     LD   A,L   
450F   B4                     OR   H   
4510   CA 76 45               JP   Z,expectM_2883S125   
4513   CD BB 0B               CALL   printStr   
4516   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
4528   CD BB 0B               CALL   printStr   
452B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
453A   21 00 00               LD   hl,NUL   
453D   E5                     PUSH   hl   
453E   E5                     PUSH   hl   
453F   CD DA 0C               CALL   run   
4542   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
454A   CD 43 0B               CALL   flushBuffer   
454D   CD BB 0B               CALL   printStr   
4550   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
455D   E1                     POP   hl   
455E   E5                     PUSH   hl   
455F   E5                     PUSH   hl   
4560   CD DA 0C               CALL   run   
4563   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4572   CD 43 0B               CALL   flushBuffer   
4575   76                     HALT      
4576                EXPECTM_2883S125:      
4576   E1                     POP   HL   
4577                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4577   31 00 4C               LD   SP,STACK   
457A   CD 03 0C               CALL   coldInit   
457D   CD 46 4A               CALL   execStr   
4580   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
458C   CD 43 0B               CALL   flushBuffer   
458F   E1                     POP   HL   
4590   E5                     PUSH   HL   
4591   11 00 00               LD   DE,NUL   
4594   B7                     OR   A   
4595   ED 52                  SBC   HL,DE   
4597   7D                     LD   A,L   
4598   B4                     OR   H   
4599   CA FF 45               JP   Z,expectM_2884S126   
459C   CD BB 0B               CALL   printStr   
459F   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
45B1   CD BB 0B               CALL   printStr   
45B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45C3   21 00 00               LD   hl,NUL   
45C6   E5                     PUSH   hl   
45C7   E5                     PUSH   hl   
45C8   CD DA 0C               CALL   run   
45CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45D3   CD 43 0B               CALL   flushBuffer   
45D6   CD BB 0B               CALL   printStr   
45D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45E6   E1                     POP   hl   
45E7   E5                     PUSH   hl   
45E8   E5                     PUSH   hl   
45E9   CD DA 0C               CALL   run   
45EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45FB   CD 43 0B               CALL   flushBuffer   
45FE   76                     HALT      
45FF                EXPECTM_2884S126:      
45FF   E1                     POP   HL   
4600                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4600   31 00 4C               LD   SP,STACK   
4603   CD 03 0C               CALL   coldInit   
4606   CD 46 4A               CALL   execStr   
4609   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
4611   CD 43 0B               CALL   flushBuffer   
4614   E1                     POP   HL   
4615   E5                     PUSH   HL   
4616   11 66 4E               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4619   B7                     OR   A   
461A   ED 52                  SBC   HL,DE   
461C   7D                     LD   A,L   
461D   B4                     OR   H   
461E   CA 80 46               JP   Z,expectM_2885S127   
4621   CD BB 0B               CALL   printStr   
4624   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
4632   CD BB 0B               CALL   printStr   
4635   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4644   21 66 4E               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4647   E5                     PUSH   hl   
4648   E5                     PUSH   hl   
4649   CD DA 0C               CALL   run   
464C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4654   CD 43 0B               CALL   flushBuffer   
4657   CD BB 0B               CALL   printStr   
465A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4667   E1                     POP   hl   
4668   E5                     PUSH   hl   
4669   E5                     PUSH   hl   
466A   CD DA 0C               CALL   run   
466D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
467C   CD 43 0B               CALL   flushBuffer   
467F   76                     HALT      
4680                EXPECTM_2885S127:      
4680   E1                     POP   HL   
4681                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
4681   31 00 4C               LD   SP,STACK   
4684   CD 03 0C               CALL   coldInit   
4687   CD 46 4A               CALL   execStr   
468A   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
4692   CD 43 0B               CALL   flushBuffer   
4695   E1                     POP   HL   
4696   E5                     PUSH   HL   
4697   11 34 4E               LD   DE,VARS + ("Z"-"A"+1)*2   
469A   B7                     OR   A   
469B   ED 52                  SBC   HL,DE   
469D   7D                     LD   A,L   
469E   B4                     OR   H   
469F   CA 01 47               JP   Z,expectM_2886S128   
46A2   CD BB 0B               CALL   printStr   
46A5   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
46B3   CD BB 0B               CALL   printStr   
46B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46C5   21 34 4E               LD   hl,VARS + ("Z"-"A"+1)*2   
46C8   E5                     PUSH   hl   
46C9   E5                     PUSH   hl   
46CA   CD DA 0C               CALL   run   
46CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46D5   CD 43 0B               CALL   flushBuffer   
46D8   CD BB 0B               CALL   printStr   
46DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46E8   E1                     POP   hl   
46E9   E5                     PUSH   hl   
46EA   E5                     PUSH   hl   
46EB   CD DA 0C               CALL   run   
46EE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46FD   CD 43 0B               CALL   flushBuffer   
4700   76                     HALT      
4701                EXPECTM_2886S128:      
4701   E1                     POP   HL   
4702                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4702   31 00 4C               LD   SP,STACK   
4705   CD 03 0C               CALL   coldInit   
4708   CD 46 4A               CALL   execStr   
470B   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
4713   CD 43 0B               CALL   flushBuffer   
4716   E1                     POP   HL   
4717   E5                     PUSH   HL   
4718   11 32 4E               LD   DE,VARS + ("Z"-"A")*2   
471B   B7                     OR   A   
471C   ED 52                  SBC   HL,DE   
471E   7D                     LD   A,L   
471F   B4                     OR   H   
4720   CA 82 47               JP   Z,expectM_2887S129   
4723   CD BB 0B               CALL   printStr   
4726   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4734   CD BB 0B               CALL   printStr   
4737   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4746   21 32 4E               LD   hl,VARS + ("Z"-"A")*2   
4749   E5                     PUSH   hl   
474A   E5                     PUSH   hl   
474B   CD DA 0C               CALL   run   
474E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4756   CD 43 0B               CALL   flushBuffer   
4759   CD BB 0B               CALL   printStr   
475C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4769   E1                     POP   hl   
476A   E5                     PUSH   hl   
476B   E5                     PUSH   hl   
476C   CD DA 0C               CALL   run   
476F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
477E   CD 43 0B               CALL   flushBuffer   
4781   76                     HALT      
4782                EXPECTM_2887S129:      
4782   E1                     POP   HL   
4783                          ;*Macro unroll:  test "'A' /ad", VARS
4783   31 00 4C               LD   SP,STACK   
4786   CD 03 0C               CALL   coldInit   
4789   CD 46 4A               CALL   execStr   
478C   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
4794   CD 43 0B               CALL   flushBuffer   
4797   E1                     POP   HL   
4798   E5                     PUSH   HL   
4799   11 00 4E               LD   DE,VARS   
479C   B7                     OR   A   
479D   ED 52                  SBC   HL,DE   
479F   7D                     LD   A,L   
47A0   B4                     OR   H   
47A1   CA 03 48               JP   Z,expectM_2888S130   
47A4   CD BB 0B               CALL   printStr   
47A7   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
47B5   CD BB 0B               CALL   printStr   
47B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47C7   21 00 4E               LD   hl,VARS   
47CA   E5                     PUSH   hl   
47CB   E5                     PUSH   hl   
47CC   CD DA 0C               CALL   run   
47CF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47D7   CD 43 0B               CALL   flushBuffer   
47DA   CD BB 0B               CALL   printStr   
47DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47EA   E1                     POP   hl   
47EB   E5                     PUSH   hl   
47EC   E5                     PUSH   hl   
47ED   CD DA 0C               CALL   run   
47F0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47FF   CD 43 0B               CALL   flushBuffer   
4802   76                     HALT      
4803                EXPECTM_2888S130:      
4803   E1                     POP   HL   
4804                          ;*Macro unroll:  test "-1. /c/vB 0#", $2D
4804   31 00 4C               LD   SP,STACK   
4807   CD 03 0C               CALL   coldInit   
480A   CD 46 4A               CALL   execStr   
480D   2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 DB   "-1. /c/vB 0#",0   
481A   CD 43 0B               CALL   flushBuffer   
481D   E1                     POP   HL   
481E   E5                     PUSH   HL   
481F   11 2D 00               LD   DE,$2D   
4822   B7                     OR   A   
4823   ED 52                  SBC   HL,DE   
4825   7D                     LD   A,L   
4826   B4                     OR   H   
4827   CA 8E 48               JP   Z,expectM_2889S131   
482A   CD BB 0B               CALL   printStr   
482D   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /c/vB 0#"   
4840   CD BB 0B               CALL   printStr   
4843   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4852   21 2D 00               LD   hl,$2D   
4855   E5                     PUSH   hl   
4856   E5                     PUSH   hl   
4857   CD DA 0C               CALL   run   
485A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4862   CD 43 0B               CALL   flushBuffer   
4865   CD BB 0B               CALL   printStr   
4868   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4875   E1                     POP   hl   
4876   E5                     PUSH   hl   
4877   E5                     PUSH   hl   
4878   CD DA 0C               CALL   run   
487B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
488A   CD 43 0B               CALL   flushBuffer   
488D   76                     HALT      
488E                EXPECTM_2889S131:      
488E   E1                     POP   HL   
488F                          ;*Macro unroll:  test {DQ,"A",DQ,".s /c/vB 0#"}, 65
488F   31 00 4C               LD   SP,STACK   
4892   CD 03 0C               CALL   coldInit   
4895   CD 46 4A               CALL   execStr   
4898   22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /c/vB 0#",0   
48A7   CD 43 0B               CALL   flushBuffer   
48AA   E1                     POP   HL   
48AB   E5                     PUSH   HL   
48AC   11 41 00               LD   DE,65   
48AF   B7                     OR   A   
48B0   ED 52                  SBC   HL,DE   
48B2   7D                     LD   A,L   
48B3   B4                     OR   H   
48B4   CA 1D 49               JP   Z,expectM_2890S132   
48B7   CD BB 0B               CALL   printStr   
48BA   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /c/vB 0#"   
48CF   CD BB 0B               CALL   printStr   
48D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48E1   21 41 00               LD   hl,65   
48E4   E5                     PUSH   hl   
48E5   E5                     PUSH   hl   
48E6   CD DA 0C               CALL   run   
48E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48F1   CD 43 0B               CALL   flushBuffer   
48F4   CD BB 0B               CALL   printStr   
48F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4904   E1                     POP   hl   
4905   E5                     PUSH   hl   
4906   E5                     PUSH   hl   
4907   CD DA 0C               CALL   run   
490A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4919   CD 43 0B               CALL   flushBuffer   
491C   76                     HALT      
491D                EXPECTM_2890S132:      
491D   E1                     POP   HL   
491E                          ;*Macro unroll:  test "123. /c/vB 1#", $32
491E   31 00 4C               LD   SP,STACK   
4921   CD 03 0C               CALL   coldInit   
4924   CD 46 4A               CALL   execStr   
4927   31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 DB   "123. /c/vB 1#",0   
4935   CD 43 0B               CALL   flushBuffer   
4938   E1                     POP   HL   
4939   E5                     PUSH   HL   
493A   11 32 00               LD   DE,$32   
493D   B7                     OR   A   
493E   ED 52                  SBC   HL,DE   
4940   7D                     LD   A,L   
4941   B4                     OR   H   
4942   CA AA 49               JP   Z,expectM_2891S133   
4945   CD BB 0B               CALL   printStr   
4948   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /c/vB 1#"   
495C   CD BB 0B               CALL   printStr   
495F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
496E   21 32 00               LD   hl,$32   
4971   E5                     PUSH   hl   
4972   E5                     PUSH   hl   
4973   CD DA 0C               CALL   run   
4976   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
497E   CD 43 0B               CALL   flushBuffer   
4981   CD BB 0B               CALL   printStr   
4984   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4991   E1                     POP   hl   
4992   E5                     PUSH   hl   
4993   E5                     PUSH   hl   
4994   CD DA 0C               CALL   run   
4997   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49A6   CD 43 0B               CALL   flushBuffer   
49A9   76                     HALT      
49AA                EXPECTM_2891S133:      
49AA   E1                     POP   HL   
49AB                          ;*Macro unroll:  test ":a{%a}/px F=1F^", 1
49AB   31 00 4C               LD   SP,STACK   
49AE   CD 03 0C               CALL   coldInit   
49B1   CD 46 4A               CALL   execStr   
49B4   3A 61 7B 25 61 7D 2F 70 78 20 46 3D 31 46 5E 00 DB   ":a{%a}/px F=1F^",0   
49C4   CD 43 0B               CALL   flushBuffer   
49C7   E1                     POP   HL   
49C8   E5                     PUSH   HL   
49C9   11 01 00               LD   DE,1   
49CC   B7                     OR   A   
49CD   ED 52                  SBC   HL,DE   
49CF   7D                     LD   A,L   
49D0   B4                     OR   H   
49D1   CA 3B 4A               JP   Z,expectM_2892S135   
49D4   CD BB 0B               CALL   printStr   
49D7   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 2F 70 78 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a}/px F=1F^"   
49ED   CD BB 0B               CALL   printStr   
49F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49FF   21 01 00               LD   hl,1   
4A02   E5                     PUSH   hl   
4A03   E5                     PUSH   hl   
4A04   CD DA 0C               CALL   run   
4A07   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A0F   CD 43 0B               CALL   flushBuffer   
4A12   CD BB 0B               CALL   printStr   
4A15   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A22   E1                     POP   hl   
4A23   E5                     PUSH   hl   
4A24   E5                     PUSH   hl   
4A25   CD DA 0C               CALL   run   
4A28   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A37   CD 43 0B               CALL   flushBuffer   
4A3A   76                     HALT      
4A3B                EXPECTM_2892S135:      
4A3B   E1                     POP   HL   
4A3C                             ; 
4A3C   CD BB 0B               CALL   printStr   
4A3F   44 6F 6E 65 21 00      .CSTR   "Done!"   
4A45   76                     HALT      
4A46                             ; executes a null teminated string (null executes exit_)
4A46                             ; the string should be immedaitely following the call
4A46                EXECSTR:      ; create a root stack frame
4A46   C1                     POP   bc   ; bc = code*
4A47   0B                     DEC   bc   ; dec to prepare for next routine
4A48   11 00 00               LD   de,0   
4A4B   D5                     PUSH   de   ; push fake IP
4A4C   D5                     PUSH   de   ; push null arg_list*
4A4D   D5                     PUSH   de   ; push null first_arg*
4A4E   D5                     PUSH   de   ; push fake BP
4A4F   DD E9                  JP   (ix)   
4A51                STKSIZE:   EQU   $100   ; Stack size
4A51                TIBSIZE:   EQU   $100   ; 256 bytes
4A51                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4A51                          ALIGN   $100   
4B00                          DS   STKSIZE   
4C00                STACK:       
4C00                          ALIGN   $100   
4C00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4D00                          ALIGN   $100   
4D00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4E00                          ALIGN   $100   
4E00                VARS:        
4E00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4ED0                RESTARTS:      
4ED0                RST08:    DS   2   
4ED2                RST10:    DS   2   
4ED4                RST18:    DS   2   
4ED6                RST20:    DS   2   
4ED8                RST28:    DS   2   
4EDA                RST30:    DS   2   ; 
4EDC                BAUD:     DS   2   ; 
4EDE                INTVEC:   DS   2   ; 
4EE0                NMIVEC:   DS   2   ; 
4EE2                GETCVEC:   DS   2   ; 
4EE4                PUTCVEC:   DS   2   ; 
4EE6                SYSVARS:      
4EE6                             ; initialised sys variables (preserved)
4EE6                VDATAWIDTH:   DS   2   ; 
4EE8                VNUMBASE:   DS   2   ; 
4EEA                VTIBPTR:   DS   2   ; 
4EEC                VBUFPTR:   DS   2   ; 
4EEE                VNEXT:    DS   2   ; 
4EF0                VHEAPPTR:   DS   2   ; 
4EF2                             ; uninitialised sys variables (preserved)
4EF2                VPOINTER:   DS   2   ; 
4EF4                VREMAIN:   DS   2   ; 
4EF6                VSAVEDIP:   DS   2   ; 
4EF8                VSAVEDSP:   DS   2   ; 
4EFA                VSAVEDNEXT:   DS   2   ; 
4EFC                VSAVEDBP:   DS   2   ; 
4EFE                VCHECKSUM:   DS   2   ; 
4F00                             ; uninitialised sys variables (unpreserved)
4F00                VTEMP1:   DS   2   ; 
4F02                VTEMP2:   DS   2   ; 
4F04                VLASTDEF:   DS   2   ; 
4F06                VHASHSTR:   DS   2   ; 
4F08                TBPTR:    DS   2   ; reserved for tests
4F0A                TITLEBUF:   DS   20   
4F1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0B39 DEFINED AT LINE 1857 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1719 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 68 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 171 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 173 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 175 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 177 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 179 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 181 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 183 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 185 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 187 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 189 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 190 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 192 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 194 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             0327 DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032A DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           032D DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0330 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0333 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0336 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033B DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
HASH_:              033E DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0341 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0344 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             0347 DEFINED AT LINE 221 IN MAIN.asm
DQUOTE_:            034A DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             034D DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0350 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035A DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035B DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                035F DEFINED AT LINE 240 IN MAIN.asm
LT_:                036A DEFINED AT LINE 248 IN MAIN.asm
LT1:                0373 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037C DEFINED AT LINE 260 IN MAIN.asm
NOP_:               037F DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0381 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0384 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADD:                0384 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               038F DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0393 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
AT:                 0396 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
ADDR:               0396 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A0 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
AND:                03A0 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03A7 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AB DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AB DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B4 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
XOR1:               03B5 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03BF DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
PERCENT:            03C4 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
ARG:                03C4 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E0 DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG0A:              03E9 DEFINED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
ARG1:               03EE DEFINED AT LINE 371 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
ARG1A:              03F6 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
LBRACK:             03F9 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYSTART:         03F9 DEFINED AT LINE 383 IN MAIN.asm
RBRACK:             0415 DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRAYEND:           0415 DEFINED AT LINE 398 IN MAIN.asm
ARRAYEND1:          0431 DEFINED AT LINE 415 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
ARRAYEND2:          0441 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
ARRAYEND3:          0446 DEFINED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 414 IN MAIN.asm
HASH:               0465 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
ARRAYINDEX:         0465 DEFINED AT LINE 454 IN MAIN.asm
ARRAYINDEX0:        046D DEFINED AT LINE 460 IN MAIN.asm
ARRAYINDEX1:        046E DEFINED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
ARRAYINDEX2:        047A DEFINED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
ASSIGN:             047D DEFINED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            047F DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
ASSIGNX:            0480 DEFINED AT LINE 481 IN MAIN.asm
ASSIGN1:            048C DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
COLON:              048E DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            048E DEFINED AT LINE 497 IN MAIN.asm
ARGLIST1:           0498 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
ARGLIST1A:          04A0 DEFINED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
ARGLIST2:           04A8 DEFINED AT LINE 515 IN MAIN.asm
ARGLIST3:           04B0 DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ARGLIST4:           04B3 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST5:           04B9 DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
LBRACE:             04C4 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKSTART:         04C4 DEFINED AT LINE 543 IN MAIN.asm
BLOCKSTART1:        04C8 DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
BLOCKSTART2:        04F4 DEFINED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
BLOCKSTART3:        04F7 DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
BLOCKSTART4:        04FF DEFINED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
BLOCKSTART5:        0502 DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKSTART6:        052A DEFINED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
RBRACE:             052D DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
BLOCKEND:           052D DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 1397 IN MAIN.asm
BLOCKEND1:          055F DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
BLOCKEND2:          056B DEFINED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
BLOCKEND3:          057D DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
TICK:               0589 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
CHAR:               0589 DEFINED AT LINE 661 IN MAIN.asm
CHAR1:              058C DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
CHAR2:              0598 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CHAR3:              059B DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
BACKSLASH:          059E DEFINED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
COMMA:              05A0 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05A0 DEFINED AT LINE 685 IN MAIN.asm
DISCARD1:           05AD DEFINED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
SLASH:              05AF DEFINED AT LINE 697 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
COMMAND:            05AF DEFINED AT LINE 698 IN MAIN.asm
DIV:                05E8 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
DOT:                05F9 DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DIVIDE:             060B DEFINED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
DIVIDE1:            0610 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DIVIDE2:            061D DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
DIVIDE3:            061E DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
EQUALS:             0624 DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         062C DEFINED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           0631 DEFINED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0636 DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
TRUE1:              0639 DEFINED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
NULL1:              063F DEFINED AT LINE 812 IN MAIN.asm
FALSE1:             063F DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
CARET:              0645 DEFINED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 0645 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0646 DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
GO2:                064C DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
GOBLOCK:            0657 DEFINED AT LINE 837 IN MAIN.asm
GOBLOCK1:           0657 DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
GOBLOCK2:           067C DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
GOLAMBDA:           068A DEFINED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
GOLAMBDA1:          06A3 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
GOLAMBDA2:          06A9 DEFINED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOLAMBDA3:          06B4 DEFINED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
GOLAMBDA4:          06CC DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
GOLAMBDA5:          06CF DEFINED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
GOLAMBDA6:          06D2 DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
GOLAMBDA7:          06D5 DEFINED AT LINE 923 IN MAIN.asm
GOLAMBDA8:          06D9 DEFINED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
DOLLAR:             06E4 DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
HEXNUM:             06E4 DEFINED AT LINE 938 IN MAIN.asm
HEXNUM1:            06E7 DEFINED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
HEXNUM2:            06EF DEFINED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
UPCASE:             0701 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            0706 DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             070B DEFINED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
QUESTION:           0718 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 0718 DEFINED AT LINE 980 IN MAIN.asm
IFTE:               0724 DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
IFTE1:              0725 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
STAR:               0731 DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                0731 DEFINED AT LINE 1003 IN MAIN.asm
MUL2:               0733 DEFINED AT LINE 1006 IN MAIN.asm
MUL3:               073B DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
NUM:                074D DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               0756 DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
NUM1:               0757 DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
NUM2:               076F DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
NUM3:               077A DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
RPAREN:             077D DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          0785 DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
SHIFTLEFT:          07A1 DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         07A9 DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
SHIFTLEFT2:         07AA DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
SHIFTRIGHT:         07B1 DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        07B9 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
SHIFTRIGHT2:        07BD DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
DQUOTE:             07C4 DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             07C4 DEFINED AT LINE 1129 IN MAIN.asm
STRING1:            07CD DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
STRING2:            07D0 DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
STRING3:            07D9 DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
MINUS:              07EC DEFINED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                07F8 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
SUB1:               0802 DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
ERROR1:             080B DEFINED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
COMMENT:            0812 DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
COMMAND_A:          081B DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
ABSOLUTE:           0827 DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
ADDROF:             0834 DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
ADDROF1:            0848 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
ADDROF2:            0853 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
COMMAND_B:          0855 DEFINED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
BUFFERARRAY:        0861 DEFINED AT LINE 32
                    > USED AT LINE 751 IN MAIN.asm
BUFFERARRAYM_1763S1258: 086F DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       08AA DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
BUFFERDEC:          08B1 DEFINED AT LINE 1271 IN MAIN.asm
BUFFERDEC0:         08CB DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
BUFFERDEC1:         08DB DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
BUFFERDEC2:         08FB DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
BUFFERDEC3:         08FD DEFINED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
BUFFERDEC4:         090D DEFINED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
BUFFERDEC5:         090E DEFINED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
BUFFERHEX:          0917 DEFINED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
BUFFERHEX1:         0938 DEFINED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
BUFFERHEX2:         0941 DEFINED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
BREAK:              094F DEFINED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
BREAK1:             0956 DEFINED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
BUFFERSTRING:       0969 DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
BUFFERSTRING0:      0970 DEFINED AT LINE 1405 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
BUFFERSTRING1:      0976 DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
BUFFERCHAR:         0983 DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
BUFFERXCHARS:       0988 DEFINED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
BUFFERXCHARS0:      0989 DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1422 IN MAIN.asm
BUFFERXCHARS1:      0992 DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
BUFFERXCHARS2:      099A DEFINED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
COMMAND_I:          09A4 DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
COMMAND_P:          09B0 DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
PARTIAL:            09C5 DEFINED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
XPARTIAL:           09E5 DEFINED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
XPARTIAL0:          0A00 DEFINED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
XPARTIAL1:          0A16 DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
XPARTIAL2:          0A29 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
XPARTIAL3:          0A42 DEFINED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
XPARTIAL4:          0A4D DEFINED AT LINE 1567 IN MAIN.asm
XPARTIAL5:          0A4E DEFINED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
PRINTBUFFER:        0A6A DEFINED AT LINE 32
                    > USED AT LINE 1462 IN MAIN.asm
PRINTBUFFERM_2144S1661: 0A76 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0A90 DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
PRINTCHARS1:        0A97 DEFINED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
PRINTCHARS2:        0A9D DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
PRINTSTACK:         0AA2 DEFINED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
COMMAND_R:          0AA4 DEFINED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
REMAIN:             0AAD DEFINED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
SIZE:               0AB3 DEFINED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
COMMAND_V:          0ABB DEFINED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
CONSTBUFSTART:      0AD0 DEFINED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
CONSTHEAPSTART:     0AD5 DEFINED AT LINE 1755 IN MAIN.asm
CONSTTIBSTART:      0ADA DEFINED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
VARBUFPTR:          0ADF DEFINED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
VARHEAPPTR:         0AE8 DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
VARTIBPTR:          0AF1 DEFINED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
VARIABLE:           0AFA DEFINED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
CONSTANT:           0AFD DEFINED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
CHARS:              0B00 DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
CHARS1:             0B03 DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
DECIMAL:            0B08 DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
DECIMAL1:           0B0B DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
HEXADECIMAL:        0B10 DEFINED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
INPUT:              0B16 DEFINED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
KEY:                0B21 DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
OUTPUT:             0B2A DEFINED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
NUMBERS:            0B33 DEFINED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
FILTER:             0B39 DEFINED AT LINE 1855 IN MAIN.asm
MAP:                0B39 DEFINED AT LINE 1856 IN MAIN.asm
ARGS1A0L:           0B3B DEFINED AT LINE 1864 IN MAIN.asm
ARGS1A2L:           0B3E DEFINED AT LINE 1868 IN MAIN.asm
FLUSHBUFFER:        0B43 DEFINED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
JUMPTABLE:          0B5A DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
JUMPTABLE0:         0B5C DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
JUMPTABLE1:         0B69 DEFINED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
JUMPTABLE2:         0B6A DEFINED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
PRTSTR0:            0B70 DEFINED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
PRTSTR:             0B74 DEFINED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
NESTING:            0B79 DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
NESTING0:           0B83 DEFINED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
NESTING1A:          0B8A DEFINED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
NESTING1:           0B8D DEFINED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
NESTING2:           0B9C DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
NESTING3:           0B9E DEFINED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
NESTING4:           0BA9 DEFINED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
PROMPT:             0BAB DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
CRLF:               0BB4 DEFINED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 2147 IN MAIN.asm
PRINTSTR:           0BBB DEFINED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 18
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 139
TITLESTR:           0BC2 DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
INIT:               0BD6 DEFINED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
INIT1:              0BDE DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
WARMINIT:           0BE6 DEFINED AT LINE 2010 IN MAIN.asm
COLDBOOT0:          0BF9 DEFINED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
COLDINIT:           0C03 DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0C14 DEFINED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
COLDSTART:          0C21 DEFINED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
START:              0C2A DEFINED AT LINE 2045 IN MAIN.asm
START1:             0C30 DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
INTERPRET:          0C36 DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
                    > USED AT LINE 2193 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
INTERPRET2:         0C45 DEFINED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
INTERPRET3:         0C4D DEFINED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
INTERPRET4:         0C58 DEFINED AT LINE 2078 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
INTERPRET5:         0C5D DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
INTERPRET5A:        0C80 DEFINED AT LINE 2122 IN MAIN.asm
INTERPRET6:         0C82 DEFINED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
INTERPRET7:         0C90 DEFINED AT LINE 2137 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
INTERPRET8:         0CA3 DEFINED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
NEXT:               0CBE DEFINED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
NEXT1:              0CCF DEFINED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
EXIT:               0CD6 DEFINED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
RUN:                0CDA DEFINED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0CDE DEFINED AT LINE 2190 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
BACKSPACE_:         0CF1 DEFINED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
EDIT_:              0D01 DEFINED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
REEDIT_:            0D19 DEFINED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
PRINTSTACK_:        0D1C DEFINED AT LINE 2213 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
TESTSSTART:         0E00 DEFINED AT LINE 13
                    > USED AT LINE 8
EXPECTM_2776S15:    0EA0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2782S24:    0F21 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2783S25:    0F98 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2784S26:    100D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2785S27:    1082 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2786S28:    10F7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2787S29:    116C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2788S30:    11E3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2789S31:    125C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2790S32:    12D3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2791S33:    134A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2792S34:    13C3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2793S35:    143E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2794S36:    14B7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2795S37:    1530 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2796S38:    15AF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2797S39:    162E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2798S40:    16AB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2799S41:    172C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2800S42:    17B1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2801S43:    1834 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2802S44:    18B1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2803S45:    1936 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2804S46:    19B7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2805S47:    1A34 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2806S48:    1AB1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2807S49:    1B36 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2808S50:    1BB3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2809S51:    1C30 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2810S52:    1CAF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2811S53:    1D3E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2812S54:    1DBB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2813S55:    1E40 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2814S56:    1EBD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2815S57:    1F42 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2816S58:    1FBF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2817S59:    203E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2818S60:    20BD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2819S61:    213A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2820S62:    21B7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2821S63:    2234 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2822S64:    22B1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2823S65:    232E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2824S66:    23AB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2825S67:    2428 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2826S68:    24A5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2827S69:    2524 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2828S70:    25A3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2829S71:    2622 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2830S72:    26A3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2831S73:    2724 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2832S74:    279F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2833S75:    281A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2834S76:    289B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2835S77:    2922 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2836S78:    29A9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2837S79:    2A34 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2838S80:    2AC9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2839S81:    2B5E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2840S82:    2BD9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2841S83:    2C56 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2842S84:    2CD5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2843S85:    2D56 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2844S86:    2DD5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2845S87:    2E54 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2846S88:    2ED5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2847S89:    2F5C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2848S90:    2FE7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2849S91:    306E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2850S92:    30FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2851S93:    3192 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2852S94:    322B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2853S95:    32C8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2854S96:    3357 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2855S97:    33EC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2856S98:    3483 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2857S99:    351C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2858S100:   35B3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2859S101:   3658 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2860S102:   36EB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2861S103:   378C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2862S104:   382F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2863S105:   38D4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2864S106:   3983 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2865S107:   3A32 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2866S108:   3ABF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2867S109:   3B52 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2868S110:   3BDF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2869S111:   3C78 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2870S112:   3D11 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2871S113:   3DBC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2872S114:   3E6F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S115:   3F22 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S116:   3FBD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S117:   4064 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S118:   410B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S119:   41AC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S120:   4253 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S121:   4310 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S122:   43DB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S123:   4464 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S124:   44ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S125:   4576 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S126:   45FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S127:   4680 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S128:   4701 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S129:   4782 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S130:   4803 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S131:   488E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S132:   491D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S133:   49AA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S135:   4A3B DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            4A46 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4C00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4C00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
                    > USED AT LINE 2157 IN MAIN.asm
BUF:                4D00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
VARS:               4E00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           4ED0 DEFINED AT LINE 18 IN ram.asm
RST08:              4ED0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4ED2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4ED4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4ED6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4ED8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4EDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4EDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4EDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4EE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4EE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4EE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4EE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2025 IN MAIN.asm
VDATAWIDTH:         4EE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
VNUMBASE:           4EE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
VTIBPTR:            4EEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
VBUFPTR:            4EEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
VNEXT:              4EEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2037 IN MAIN.asm
VHEAPPTR:           4EF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
VPOINTER:           4EF2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 1779 IN MAIN.asm
VREMAIN:            4EF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 1723 IN MAIN.asm
VSAVEDIP:           4EF6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2159 IN MAIN.asm
VSAVEDSP:           4EF8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2160 IN MAIN.asm
VSAVEDNEXT:         4EFA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 2161 IN MAIN.asm
VSAVEDBP:           4EFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2162 IN MAIN.asm
VCHECKSUM:          4EFE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             4F00 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
VTEMP2:             4F02 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
VLASTDEF:           4F04 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           4F06 DEFINED AT LINE 59 IN ram.asm
TBPTR:              4F08 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           4F0A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2049 IN MAIN.asm
HEAP:               4F1E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
