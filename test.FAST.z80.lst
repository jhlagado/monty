0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 .cstr code1
0000                 call flushBuffer
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4C               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4C               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4C               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4C               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4C               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4C               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4C               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4C               LD   (RST08),HL   
0094   22 D2 4C               LD   (RST10),HL   
0097   22 D4 4C               LD   (RST18),HL   
009A   22 D6 4C               LD   (RST20),HL   
009D   22 D8 4C               LD   (RST28),HL   
00A0   22 DA 4C               LD   (RST30),HL   
00A3   22 DE 4C               LD   (INTVEC),HL   
00A6   22 E0 4C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0D               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQUOTE:   EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4A                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4B                  DW   BUF   ; vBUFPtr pointer into BUF
0188   36 0C                  DW   next   ; nNext
018A   1E 4D                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ ` _
0200   7F                     DB   lsb(nop_)   ; SP
0201   36                     DB   lsb(bang_)   ; !
0202   4A                     DB   lsb(dblquote_)   ; "
0203   3E                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   81                     DB   lsb(rparen_)   ; )
020A   33                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   47                     DB   lsb(comma_)   ; ,
020D   4D                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7C                     DB   lsb(slash_)   ; /	
0210   3B                     DB   lsb(num_)   ; 0
0211   3B                     DB   lsb(num_)   ; 1
0212   3B                     DB   lsb(num_)   ; 2
0213   3B                     DB   lsb(num_)   ; 3
0214   3B                     DB   lsb(num_)   ; 4
0215   3B                     DB   lsb(num_)   ; 5
0216   3B                     DB   lsb(num_)   ; 6
0217   3B                     DB   lsb(num_)   ; 7
0218   3B                     DB   lsb(num_)   ; 8
0219   3B                     DB   lsb(num_)   ; 9
021A   27                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6A                     DB   lsb(lt_)   ; <
021D   50                     DB   lsb(eq_)   ; =
021E   5F                     DB   lsb(gt_)   ; >
021F   30                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2A                     DB   lsb(upcase_)   ; A
0222   2A                     DB   lsb(upcase_)   ; B
0223   2A                     DB   lsb(upcase_)   ; C
0224   2A                     DB   lsb(upcase_)   ; D
0225   2A                     DB   lsb(upcase_)   ; E
0226   2A                     DB   lsb(upcase_)   ; F
0227   2A                     DB   lsb(upcase_)   ; G
0228   2A                     DB   lsb(upcase_)   ; h
0229   2A                     DB   lsb(upcase_)   ; I
022A   2A                     DB   lsb(upcase_)   ; J
022B   2A                     DB   lsb(upcase_)   ; K
022C   2A                     DB   lsb(upcase_)   ; L
022D   2A                     DB   lsb(upcase_)   ; M
022E   2A                     DB   lsb(upcase_)   ; N
022F   2A                     DB   lsb(upcase_)   ; O
0230   2A                     DB   lsb(upcase_)   ; p
0231   2A                     DB   lsb(upcase_)   ; Q
0232   2A                     DB   lsb(upcase_)   ; R
0233   2A                     DB   lsb(upcase_)   ; S
0234   2A                     DB   lsb(upcase_)   ; T
0235   2A                     DB   lsb(upcase_)   ; U
0236   2A                     DB   lsb(upcase_)   ; V
0237   2A                     DB   lsb(upcase_)   ; W
0238   2A                     DB   lsb(upcase_)   ; X
0239   2A                     DB   lsb(upcase_)   ; Y
023A   2A                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   44                     DB   lsb(caret_)   ; ^
023F   7F                     DB   lsb(nop_)   ; _
0240   4A                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   2D                     DB   lsb(lowcase_)   ; a
0242   2D                     DB   lsb(lowcase_)   ; b
0243   2D                     DB   lsb(lowcase_)   ; c
0244   2D                     DB   lsb(lowcase_)   ; d
0245   2D                     DB   lsb(lowcase_)   ; e
0246   2D                     DB   lsb(lowcase_)   ; f
0247   2D                     DB   lsb(lowcase_)   ; g
0248   2D                     DB   lsb(lowcase_)   ; h
0249   2D                     DB   lsb(lowcase_)   ; i
024A   2D                     DB   lsb(lowcase_)   ; j
024B   2D                     DB   lsb(lowcase_)   ; k
024C   2D                     DB   lsb(lowcase_)   ; l
024D   2D                     DB   lsb(lowcase_)   ; m
024E   2D                     DB   lsb(lowcase_)   ; n
024F   2D                     DB   lsb(lowcase_)   ; o
0250   2D                     DB   lsb(lowcase_)   ; p
0251   2D                     DB   lsb(lowcase_)   ; q
0252   2D                     DB   lsb(lowcase_)   ; r
0253   2D                     DB   lsb(lowcase_)   ; s
0254   2D                     DB   lsb(lowcase_)   ; t
0255   2D                     DB   lsb(lowcase_)   ; u
0256   2D                     DB   lsb(lowcase_)   ; v
0257   2D                     DB   lsb(lowcase_)   ; w
0258   2D                     DB   lsb(lowcase_)   ; x
0259   2D                     DB   lsb(lowcase_)   ; y
025A   2D                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   41                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   7F                     DB   lsb(nop_)   ; ~
025F   7F                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 84 03               JP   plus   
0303                AT_:         
0303   C3 96 03               JP   at   
0306                AMPER_:      
0306   C3 A0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 E4 06               JP   dollar   
030C                LBRACK_:      
030C   C3 F9 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 15 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 C4 03               JP   percent   
0315                BACKSLASH_:      
0315   C3 9E 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 C4 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 2D 05               JP   rbrace   
031E                TICK_:       
031E   C3 89 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 85 07               JP   semicolon   
0324                DOT_:        
0324   C3 F9 05               JP   dot   
0327                COLON_:      
0327   C3 8E 04               JP   colon   
032A                UPCASE_:      
032A   C3 01 07               JP   upcase   
032D                LOWCASE_:      
032D   C3 06 07               JP   lowcase   
0330                QUESTION_:      
0330   C3 18 07               JP   question   
0333                STAR_:       
0333   C3 31 07               JP   star   
0336                BANG_:       ; logical invert, any non zero value
0336   21 00 00               LD   hl,0   ; is considered true
0339   18 20                  JR   eq1   
033B                NUM_:        
033B   C3 4D 07               JP   num   
033E                HASH_:       
033E   C3 65 04               JP   hash   
0341                PIPE_:       
0341   C3 AB 03               JP   pipe   
0344                CARET_:      
0344   C3 45 06               JP   caret   
0347                COMMA_:      
0347   C3 A0 05               JP   comma   
034A                DBLQUOTE_:      
034A   C3 C4 07               JP   dblquote   
034D                MINUS_:      
034D   C3 EC 07               JP   minus   
0350                EQ_:         
0350   03                     INC   bc   
0351   0A                     LD   a,(bc)   ; is it == ?
0352   FE 3D                  CP   "="   
0354   28 04                  JR   z,eq0   ; no its equality
0356   0B                     DEC   bc   
0357   C3 7D 04               JP   assign   ; no its assignment
035A                EQ0:         
035A   E1                     POP   hl   
035B                EQ1:         
035B   D1                     POP   de   
035C   C3 24 06               JP   equals   
035F                GT_:         
035F   03                     INC   bc   
0360   0A                     LD   a,(bc)   
0361   FE 3E                  CP   ">"   
0363   CA B1 07               JP   z,shiftRight   
0366   D1                     POP   de   
0367   E1                     POP   hl   
0368   18 09                  JR   lt1   
036A                LT_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   
036C   FE 3C                  CP   "<"   
036E   CA A1 07               JP   z,shiftLeft   
0371   E1                     POP   hl   
0372   D1                     POP   de   
0373                LT1:         
0373   FE 3D                  CP   "="   
0375   CA 2C 06               JP   z,lessthaneq   
0378   0B                     DEC   bc   
0379   C3 31 06               JP   lessthan   
037C                SLASH_:      
037C   C3 AF 05               JP   slash   
037F                NOP_:        
037F   DD E9                  JP   (ix)   
0381                RPAREN_:      
0381   C3 7D 07               JP   rparen   
0384                             ;*******************************************************************
0384                             ; implementations
0384                             ;*******************************************************************
0384                PLUS:        
0384                ADD:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 2B                  CP   "+"   ; ++ increment variable
0388   20 05                  JR   nz,add1   
038A   E1                     POP   hl   
038B   23                     INC   hl   
038C   C3 7F 04               JP   assign0   
038F                ADD1:        
038F   0B                     DEC   bc   
0390   D1                     POP   de   ; second term
0391   E1                     POP   hl   ; first term
0392   19                     ADD   hl,de   
0393                ADD3:        
0393   E5                     PUSH   hl   
0394   DD E9                  JP   (ix)   
0396                             ; @ addr
0396                             ; -- ptr
0396                AT:          
0396                ADDR:        
0396   ED 5B F2 4C            LD   de,(vPointer)   
039A   21 F2 4C               LD   hl,vPointer   
039D   C3 72 0A               JP   variable   
03A0                AMPER:       
03A0                AND:         
03A0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A1   E1                     POP   hl   
03A2   7B                     LD   a,e   
03A3   A5                     AND   l   
03A4   6F                     LD   l,a   
03A5   7A                     LD   a,d   
03A6   A4                     AND   h   
03A7                AND1:        
03A7   67                     LD   h,a   
03A8   E5                     PUSH   hl   
03A9   DD E9                  JP   (ix)   
03AB                PIPE:        
03AB                OR:          
03AB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AC   E1                     POP   hl   
03AD   7B                     LD   a,e   
03AE   B5                     OR   l   
03AF   6F                     LD   l,a   
03B0   7A                     LD   a,d   
03B1   B4                     OR   h   
03B2   18 F3                  JR   and1   
03B4                XOR:         
03B4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B5                XOR1:        
03B5   E1                     POP   hl   
03B6   7B                     LD   a,e   
03B7   AD                     XOR   l   
03B8   6F                     LD   l,a   
03B9   7A                     LD   a,d   
03BA   AC                     XOR   h   
03BB   67                     LD   h,a   
03BC   E5                     PUSH   hl   
03BD   DD E9                  JP   (ix)   
03BF                INVERT:      ; Bitwise INVert the top member of the stack
03BF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C2   18 F1                  JR   xor1   
03C4                             ; %a .. %z
03C4                             ; -- value
03C4                             ; returns value of arg
03C4                PERCENT:      
03C4                ARG:         
03C4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03C7   FD 56 05               LD   d,(iy+5)   
03CA   EB                     EX   de,hl   
03CB   7D                     LD   a,l   ; arg_list* == null, skip
03CC   B4                     OR   h   
03CD   28 1A                  JR   z,arg0a   
03CF   23                     INC   hl   ; a = num_args, hl = arg_list*
03D0   7E                     LD   a,(hl)   
03D1   23                     INC   hl   
03D2   B7                     OR   a   
03D3   28 14                  JR   z,arg0a   ; num_args == 0, skip
03D5   5F                     LD   e,a   ; e = a = num_args
03D6   03                     INC   bc   ; a = next char = dollar_name
03D7   0A                     LD   a,(bc)   
03D8   C5                     PUSH   bc   ; save IP
03D9   43                     LD   b,e   ; b = e = num_args
03DA   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03DD   FD 56 03               LD   d,(iy+3)   
03E0                ARG0:        
03E0   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E1   1B                     DEC   de   
03E2   BE                     CP   (hl)   
03E3   28 09                  JR   z,arg1   
03E5   23                     INC   hl   ; hl = next arg_list*
03E6   10 F8                  DJNZ   arg0   
03E8   C1                     POP   bc   ; no match, restore IP
03E9                ARG0A:       
03E9   11 00 00               LD   de,0   ; return 0
03EC   18 08                  JR   arg1a   
03EE                ARG1:        
03EE   C1                     POP   bc   ; restore IP
03EF   EB                     EX   de,hl   ; hl = arg*
03F0   22 F2 4C               LD   (vPointer),hl   ; store arg* in setter
03F3   5E                     LD   e,(hl)   
03F4   23                     INC   hl   
03F5   56                     LD   d,(hl)   ; de = arg
03F6                ARG1A:       
03F6   D5                     PUSH   de   ; push arg
03F7   DD E9                  JP   (ix)   
03F9                LBRACK:      
03F9                ARRAYSTART:      
03F9   11 00 00               LD   de,0   ; create stack frame
03FC   D5                     PUSH   de   ; push null for IP
03FD   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0400   FD 56 05               LD   d,(iy+5)   ; 
0403   D5                     PUSH   de   ; 
0404   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0407   FD 56 03               LD   d,(iy+3)   ; 
040A   D5                     PUSH   de   ; 
040B   FD E5                  PUSH   iy   ; push BP
040D   FD 21 00 00            LD   iy,0   ; BP = SP
0411   FD 39                  ADD   iy,sp   
0413   DD E9                  JP   (ix)   
0415                RBRACK:      
0415                ARRAYEND:      
0415   FD 54                  LD   d,iyh   ; de = BP
0417   FD 5D                  LD   e,iyl   
0419   ED 43 00 4D            LD   (vTemp1),bc   ; save IP
041D   62 6B                  LD   hl,de   ; hl = de = BP
041F   B7                     OR   a   
0420   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0422   CB 3C                  SRL   h   ; 
0424   CB 1D                  RR   l   
0426   44 4D                  LD   bc,hl   ; bc = count
0428   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = array[-4]
042B   71                     LD   (hl),c   ; write num items in length word
042C   23                     INC   hl   
042D   70                     LD   (hl),b   
042E   23                     INC   hl   ; hl = array[0], bc = count
042F                             ; de = BP, hl = array[0], bc = count
042F   18 15                  JR   arrayEnd3   
0431                ARRAYEND1:      
0431   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0434   77                     LD   (hl),a   ; write lsb of array item
0435   23                     INC   hl   ; move to msb of array item
0436   3A E6 4C               LD   a,(vDataWidth)   ; vDataWidth=1?
0439   3D                     DEC   a   
043A   28 05                  JR   z,arrayEnd2   
043C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
043F   77                     LD   (hl),a   ; write msb of array item
0440   23                     INC   hl   ; move to next word in array
0441                ARRAYEND2:      
0441   FD 2B                  DEC   iy   ; move to next word on stack
0443   FD 2B                  DEC   iy   
0445   0B                     DEC   bc   ; dec items count
0446                ARRAYEND3:      
0446   79                     LD   a,c   ; if not zero loop
0447   B0                     OR   b   
0448   20 E7                  JR   nz,arrayEnd1   
044A   EB                     EX   de,hl   ; de = end of array, hl = BP
044B   F9                     LD   sp,hl   ; sp = BP
044C   E1                     POP   hl   ; de = end of array, hl = old BP
044D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
044E   FD 62                  LD   iyh,d   
0450   FD 6B                  LD   iyl,e   
0452   D1                     POP   de   ; pop arg_list (discard)
0453   D1                     POP   de   ; pop first_arg* (discard)
0454   D1                     POP   de   ; pop IP (discard)
0455   ED 5B F0 4C            LD   de,(vHeapPtr)   ; de = array[-2]
0459   13                     INC   de   
045A   13                     INC   de   
045B   D5                     PUSH   de   ; return array[0]
045C   22 F0 4C               LD   (vHeapPtr),hl   ; move heap* to end of array
045F   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore IP
0463   DD E9                  JP   (ix)   
0465                             ; index of an array, based on vDataWidth
0465                             ; array num -- value    ; also sets vPointer to address
0465                HASH:        
0465                ARRAYINDEX:      
0465   E1                     POP   hl   ; hl = index
0466   D1                     POP   de   ; de = array
0467   3A E6 4C               LD   a,(vDataWidth)   ; a = data width
046A   3D                     DEC   a   
046B   28 01                  JR   z,arrayIndex1   
046D                ARRAYINDEX0:      
046D   29                     ADD   hl,hl   ; if data width = 2 then double
046E                ARRAYINDEX1:      
046E   19                     ADD   hl,de   ; add addr
046F   22 F2 4C               LD   (vPointer),hl   ; store address in setter
0472   16 00                  LD   d,0   
0474   5E                     LD   e,(hl)   
0475   B7                     OR   a   ; check data width again
0476   28 02                  JR   z,arrayIndex2   
0478   23                     INC   hl   
0479   56                     LD   d,(hl)   
047A                ARRAYINDEX2:      
047A   D5                     PUSH   de   
047B   DD E9                  JP   (ix)   
047D                             ; value _oldValue --            ; uses address in vPointer
047D                ASSIGN:      
047D   E1                     POP   hl   ; discard last accessed value
047E   E1                     POP   hl   ; hl = new value
047F                ASSIGN0:      
047F   EB                     EX   de,hl   ; de = new value
0480                ASSIGNX:      
0480   2A F2 4C               LD   hl,(vPointer)   
0483   73                     LD   (hl),e   
0484   3A E6 4C               LD   a,(vDataWidth)   
0487   3D                     DEC   a   ; is it byte?
0488   28 02                  JR   z,assign1   
048A   23                     INC   hl   
048B   72                     LD   (hl),d   
048C                ASSIGN1:      
048C   DD E9                  JP   (ix)   
048E                             ; arg_list - parses input (ab:c)
048E                             ; names after the : represent uninitialised locals
048E                             ; return values are the state of the stack after the block ends
048E                             ; format: numLocals totNumArgs argChars...
048E                COLON:       
048E                ARGLIST:      
048E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0491   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap*
0494   E5                     PUSH   hl   ; save start of arg_list
0495   23                     INC   hl   ; skip length fields to start of string
0496   23                     INC   hl   
0497   03                     INC   bc   ; point to next char
0498                ARGLIST1:      
0498   0A                     LD   a,(bc)   
0499   FE 3A                  CP   ":"   ; ":" switches from args to locals
049B   20 03                  JR   nz,arglist1a   
049D   14                     INC   d   ; non zero value local count acts as flag
049E   18 10                  JR   arglist3   
04A0                ARGLIST1A:      
04A0   FE 61                  CP   "a"   ; < "a" terminates arg_list
04A2   38 0F                  JR   c,arglist4   
04A4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04A6   30 0B                  JR   nc,arglist4   
04A8                ARGLIST2:      
04A8   77                     LD   (hl),a   
04A9   23                     INC   hl   
04AA   1C                     INC   e   ; increase arg count
04AB   AF                     XOR   a   
04AC   B2                     OR   d   
04AD   28 01                  JR   z,arglist3   
04AF   14                     INC   d   ; if d > 0 increase local count
04B0                ARGLIST3:      
04B0   03                     INC   bc   ; point to next char
04B1   18 E5                  JR   arglist1   
04B3                ARGLIST4:      
04B3   0B                     DEC   bc   
04B4   AF                     XOR   a   
04B5   B2                     OR   d   
04B6   28 01                  JR   z,arglist5   
04B8   15                     DEC   d   ; remove initial inc
04B9                ARGLIST5:      
04B9   23                     INC   hl   
04BA   22 F0 4C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04BD   E1                     POP   hl   ; hl = start of arg_list
04BE   E5                     PUSH   hl   ; return start of arg_list
04BF   72                     LD   (hl),d   ; write number of locals at start - 1
04C0   23                     INC   hl   
04C1   73                     LD   (hl),e   ; write number of args + locals at start - 2
04C2   DD E9                  JP   (ix)   
04C4                LBRACE:      
04C4                BLOCKSTART:      
04C4   C5                     PUSH   bc   ; return pointer to first { of block
04C5   03                     INC   bc   
04C6   16 01                  LD   d,1   ; nesting: count first parenthesis
04C8                BLOCKSTART1:      ; Skip to end of definition
04C8   0A                     LD   a,(bc)   ; Get the next character
04C9   03                     INC   bc   ; Point to next character
04CA   FE 21                  CP   " " + 1   ; ignore whitespace
04CC   38 FA                  JR   c,blockStart1   
04CE   FE 29                  CP   ")"   
04D0   28 2D                  JR   z,blockStart4   
04D2   FE 7D                  CP   "}"   
04D4   28 29                  JR   z,blockStart4   
04D6   FE 5D                  CP   "]"   
04D8   28 25                  JR   z,blockStart4   
04DA   FE 28                  CP   "("   
04DC   28 16                  JR   z,blockStart2   
04DE   FE 7B                  CP   "{"   
04E0   28 12                  JR   z,blockStart2   
04E2   FE 5B                  CP   "["   
04E4   28 0E                  JR   z,blockStart2   
04E6   FE 27                  CP   "'"   
04E8   28 0D                  JR   z,blockStart3   
04EA   FE 60                  CP   "`"   
04EC   28 09                  JR   z,blockStart3   
04EE   FE 22                  CP   DQUOTE   
04F0   28 05                  JR   z,blockStart3   
04F2   18 D4                  JR   blockStart1   
04F4                BLOCKSTART2:      
04F4   14                     INC   d   
04F5   18 D1                  JR   blockStart1   
04F7                BLOCKSTART3:      
04F7   3E 80                  LD   a,$80   
04F9   AA                     XOR   d   
04FA   57                     LD   d,a   
04FB   20 CB                  JR   nz,blockStart1   
04FD   18 03                  JR   blockStart5   
04FF                BLOCKSTART4:      
04FF   15                     DEC   d   
0500   20 C6                  JR   nz,blockStart1   ; get the next element
0502                BLOCKSTART5:      
0502   60 69                  LD   hl,bc   ; hl = IP
0504   11 1E 4D               LD   de,HEAP   ; is IP pointing to object in heap
0507   B7                     OR   a   ; IP - HEAP
0508   ED 52                  SBC   hl,de   
050A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
050C   28 1C                  JR   z,blockStart6   
050E   60 69                  LD   hl,bc   ; hl = IP
0510   D1                     POP   de   ; de = block*
0511   ED 43 00 4D            LD   (vTemp1),bc   ; save IP
0515   B7                     OR   a   ; bc = size
0516   ED 52                  SBC   hl,de   
0518   44 4D                  LD   bc,hl   
051A   EB                     EX   de,hl   ; hl = block* de = heap*
051B   ED 5B F0 4C            LD   de,(vHeapPtr)   
051F   D5                     PUSH   de   ; return hblock*
0520   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0522   ED 53 F0 4C            LD   (vHeapPtr),de   ; heap* += size
0526   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore IP
052A                BLOCKSTART6:      
052A   0B                     DEC   bc   ; balanced, exit
052B   DD E9                  JP   (ix)   
052D                RBRACE:      
052D                BLOCKEND:      
052D   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0530   FD 56 01               LD   d,(iy+1)   
0533   ED 53 00 4D            LD   (vTemp1),de   
0537   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
053A   FD 56 07               LD   d,(iy+7)   
053D   ED 53 02 4D            LD   (vTemp2),de   
0541   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0544   FD 56 03               LD   d,(iy+3)   
0547   EB                     EX   de,hl   
0548   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054B   FD 56 01               LD   d,(iy+1)   
054E   13                     INC   de   ; for carry flag <=
054F   B7                     OR   a   
0550   ED 52                  SBC   hl,de   
0552   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0554   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0556   FD 5D                  LD   e,iyl   
0558   21 08 00               LD   hl,8   
055B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055D   18 0C                  JR   blockEnd2   
055F                BLOCKEND1:      ; same scope
055F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0562   FD 56 03               LD   d,(iy+3)   
0565   EB                     EX   de,hl   
0566   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0568   FD 5D                  LD   e,iyl   
056A   EB                     EX   de,hl   
056B                BLOCKEND2:      
056B   44 4D                  LD   bc,hl   ; bc = hl = BP
056D   B7                     OR   a   ; hl = BP - SP = count
056E   ED 72                  SBC   hl,sp   
0570   7D                     LD   a,l   
0571   B4                     OR   h   
0572   28 09                  JR   z,blockEnd3   
0574   C5                     PUSH   bc   ; bc = count, hl = BP
0575   44 4D                  LD   bc,hl   
0577   E1                     POP   hl   
0578   2B                     DEC   hl   ; hl = BP-1
0579   1B                     DEC   de   ; de = args*-1
057A   ED B8                  LDDR      
057C   13                     INC   de   
057D                BLOCKEND3:      
057D   EB                     EX   de,hl   ; sp = de = new tos*
057E   F9                     LD   sp,hl   
057F   ED 4B 02 4D            LD   bc,(vTemp2)   
0583   FD 2A 00 4D            LD   iy,(vTemp1)   
0587   DD E9                  JP   (ix)   
0589                TICK:        
0589                CHAR:        
0589   21 00 00               LD   hl,0   ; if "" is empty or null
058C                CHAR1:       
058C   03                     INC   bc   ; point to next char
058D   0A                     LD   a,(bc)   
058E   FE 27                  CP   "'"   ; ' is the terminator
0590   28 09                  JR   z,char3   
0592   FE 5C                  CP   $5c   ; \ is the escape
0594   20 02                  JR   nz,char2   
0596   03                     INC   bc   
0597   0A                     LD   a,(bc)   
0598                CHAR2:       
0598   6F                     LD   l,a   
0599   18 F1                  JR   char1   
059B                CHAR3:       
059B   E5                     PUSH   hl   
059C   DD E9                  JP   (ix)   
059E                BACKSLASH:      
059E   DD E9                  JP   (ix)   
05A0                             ; , discard stack item
05A0                             ; x y -- x
05A0                COMMA:       
05A0                DISCARD:      
05A0   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A2   FD 5D                  LD   e,iyl   
05A4   EB                     EX   de,hl   
05A5   B7                     OR   a   
05A6   ED 72                  SBC   hl,sp   
05A8   CB 7C                  BIT   7,h   
05AA   20 01                  JR   nz,discard1   
05AC   E1                     POP   hl   
05AD                DISCARD1:      
05AD   DD E9                  JP   (ix)   
05AF                SLASH:       
05AF                COMMAND:      
05AF   CD D2 0A               CALL   jumpTable   
05B2   2F                     DB   "/"   
05B3   12 08                  DW   comment   
05B5   61                     DB   "a"   
05B6   1B 08                  DW   command_a   
05B8   62                     DB   "b"   
05B9   55 08                  DW   command_b   
05BB   63                     DB   "c"   
05BC   78 0A                  DW   chars   
05BE   64                     DB   "d"   
05BF   80 0A                  DW   decimal   
05C1   66                     DB   "f"   
05C2   3F 06                  DW   false1   
05C4   68                     DB   "h"   
05C5   88 0A                  DW   hexadecimal   
05C7   69                     DB   "i"   
05C8   A4 09                  DW   command_i   
05CA   6B                     DB   "k"   
05CB   99 0A                  DW   key   
05CD   6E                     DB   "n"   
05CE   AB 0A                  DW   numbers   
05D0   6F                     DB   "o"   
05D1   A2 0A                  DW   output   
05D3   70                     DB   "p"   
05D4   B0 09                  DW   command_p   
05D6   72                     DB   "r"   
05D7   1C 0A                  DW   command_r   
05D9   73                     DB   "s"   
05DA   2B 0A                  DW   size   
05DC   74                     DB   "t"   
05DD   39 06                  DW   true1   
05DF   76                     DB   "v"   
05E0   33 0A                  DW   command_v   
05E2   78                     DB   "x"   
05E3   B4 03                  DW   xor   
05E5   00                     DB   NUL   
05E6   E8 05                  DW   div   
05E8                DIV:         
05E8   D1                     POP   de   
05E9   E1                     POP   hl   
05EA   C5                     PUSH   bc   ; preserve the IP
05EB   44 4D                  LD   bc,hl   
05ED   CD 0B 06               CALL   divide   
05F0   EB                     EX   de,hl   
05F1   ED 53 F4 4C            LD   (vRemain),de   
05F5   C1                     POP   bc   
05F6   C3 93 03               JP   add3   
05F9                DOT:         
05F9   CD D2 0A               CALL   jumpTable   
05FC   61                     DB   "a"   
05FD   61 08                  DW   bufferArray   
05FF   63                     DB   "c"   
0600   83 09                  DW   bufferChar   
0602   73                     DB   "s"   
0603   69 09                  DW   bufferString   
0605   78                     DB   "x"   
0606   88 09                  DW   bufferXChars   
0608   00                     DB   NUL   
0609   AA 08                  DW   bufferNumber   
060B                             ; division subroutine.
060B                             ; bc: divisor, de: dividend, hl: remainder
060B                DIVIDE:      
060B   21 00 00               LD   hl,0   ; zero the remainder
060E   3E 10                  LD   a,16   ; loop counter
0610                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0610   CB 21                  SLA   c   
0612   CB 10                  RL   b   
0614   ED 6A                  ADC   hl,hl   
0616   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0618   38 03                  JR   c,divide2   
061A   0C                     INC   c   
061B   18 01                  JR   divide3   
061D                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
061D   19                     ADD   hl,de   
061E                DIVIDE3:      
061E   3D                     DEC   a   
061F   20 EF                  JR   nz,divide1   
0621   50 59                  LD   de,bc   ; result from bc to de
0623   C9                     RET      
0624                             ; hl = value1, de = value2
0624                             ; hl = result
0624                EQUALS:      
0624   B7                     OR   a   ; reset the carry flag
0625   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0627   28 10                  JR   z,true1   
0629   C3 3F 06               JP   false1   
062C                             ; hl = value1 de = value2
062C                             ; hl = result
062C                LESSTHANEQ:      
062C   B7                     OR   a   
062D   ED 52                  SBC   hl,de   
062F   18 05                  JR   lessthan1   
0631                             ; hl = value1 de = value2
0631                             ; hl = result
0631                LESSTHAN:      
0631   B7                     OR   a   
0632   ED 52                  SBC   hl,de   
0634   28 09                  JR   z,false1   
0636                LESSTHAN1:      
0636   FA 3F 06               JP   m,false1   
0639                TRUE1:       
0639   21 FF FF               LD   hl,TRUE   
063C   E5                     PUSH   hl   
063D   DD E9                  JP   (ix)   
063F                NULL1:       
063F                FALSE1:      
063F   21 00 00               LD   hl,FALSE   
0642   E5                     PUSH   hl   
0643   DD E9                  JP   (ix)   
0645                             ; execute a block of code which ends with }
0645                             ; creates a root scope if BP == stack
0645                             ; else uses outer scope
0645                CARET:       
0645                GO:          
0645   D1                     POP   de   ; de = block*
0646                GO1:         
0646   7B                     LD   a,e   ; if block* == null, exit
0647   B2                     OR   d   
0648   20 02                  JR   nz,go2   
064A   DD E9                  JP   (ix)   
064C                GO2:         
064C   1A                     LD   a,(de)   
064D   FE 7B                  CP   "{"   
064F   28 06                  JR   z,goBlock1   
0651   FE 28                  CP   "("   
0653   C2 8A 06               JP   nz,goLambda   
0656                             ; inc de                      ; de is the address to jump back to
0656   D5                     PUSH   de   ; push de just before stack frame
0657                GOBLOCK:      
0657                GOBLOCK1:      
0657   ED 53 00 4D            LD   (vTemp1),de   ; save de
065B   21 00 4A               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
065E   FD 54                  LD   d,iyh   
0660   FD 5D                  LD   e,iyl   
0662   B7                     OR   a   ; if stack* == BP then this is the root_scope
0663   ED 52                  SBC   hl,de   
0665   ED 5B 00 4D            LD   de,(vTemp1)   ; restore de
0669   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
066A   B4                     OR   h   
066B   3E 00                  LD   a,0   
066D   28 6A                  JR   z,goLambda8   
066F   C5                     PUSH   bc   ; push IP
0670   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0673   FD 46 05               LD   b,(iy+5)   
0676   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0679   FD 66 03               LD   h,(iy+3)   
067C                GOBLOCK2:      
067C   C5                     PUSH   bc   ; arg_list*
067D   E5                     PUSH   hl   ; first_arg*
067E   FD E5                  PUSH   iy   ; push BP
0680   FD 21 00 00            LD   iy,0   ; BP = SP
0684   FD 39                  ADD   iy,sp   
0686   42 4B                  LD   bc,de   ; bc = de = block*-1
0688   DD E9                  JP   (ix)   
068A                GOLAMBDA:      ; execute lambda
068A   EB                     EX   de,hl   ; hl = lambda*
068B   5E                     LD   e,(hl)   ; de = partial_array*
068C   23                     INC   hl   
068D   56                     LD   d,(hl)   
068E   23                     INC   hl   
068F   7B                     LD   a,e   ; if partial_array* == null skip
0690   B2                     OR   d   
0691   28 21                  JR   z,goLambda3   
0693   ED 43 00 4D            LD   (vTemp1),bc   
0697   22 02 4D               LD   (vTemp2),hl   ; save bc,hl
069A   EB                     EX   de,hl   ; hl = partial_array*
069B   2B                     DEC   hl   ; bc = count
069C   46                     LD   b,(hl)   
069D   2B                     DEC   hl   
069E   4E                     LD   c,(hl)   
069F   23                     INC   hl   ; hl = array data*
06A0   23                     INC   hl   
06A1   18 06                  JR   goLambda2   ; push each item on stack
06A3                GOLAMBDA1:      
06A3   5E                     LD   e,(hl)   ; de = partial item
06A4   23                     INC   hl   
06A5   56                     LD   d,(hl)   
06A6   23                     INC   hl   
06A7   D5                     PUSH   de   ; push on stack
06A8   0B                     DEC   bc   
06A9                GOLAMBDA2:      
06A9   79                     LD   a,c   ; if count != 0 then loop
06AA   B0                     OR   b   
06AB   20 F6                  JR   nz,goLambda1   
06AD   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore bc
06B1   2A 02 4D               LD   hl,(vTemp2)   ; restore hl
06B4                GOLAMBDA3:      
06B4   5E                     LD   e,(hl)   ; de = block*
06B5   23                     INC   hl   
06B6   56                     LD   d,(hl)   
06B7   23                     INC   hl   
06B8   ED 53 00 4D            LD   (vTemp1),de   ; save block*
06BC   5E                     LD   e,(hl)   ; de = arg_list*
06BD   23                     INC   hl   
06BE   56                     LD   d,(hl)   
06BF   23                     INC   hl   
06C0   EB                     EX   de,hl   ; hl = arg_list*
06C1   ED 5B 00 4D            LD   de,(vTemp1)   ; restore de = block*
06C5   7D                     LD   a,l   ; if arg_list* == null a = 0
06C6   B4                     OR   h   
06C7   20 03                  JR   nz,goLambda4   
06C9   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06CA   18 0D                  JR   goLambda8   
06CC                GOLAMBDA4:      ; allocate locals
06CC   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
06CD   18 03                  JR   goLambda6   
06CF                GOLAMBDA5:      ; loop
06CF   3B                     DEC   sp   
06D0   3B                     DEC   sp   
06D1   3D                     DEC   a   
06D2                GOLAMBDA6:      
06D2   B7                     OR   a   
06D3   20 FA                  JR   nz,goLambda5   ; end loop
06D5                GOLAMBDA7:      
06D5   23                     INC   hl   ; a = num_args* x 2
06D6   7E                     LD   a,(hl)   
06D7   2B                     DEC   hl   
06D8   87                     ADD   a,a   ; a *= 2
06D9                GOLAMBDA8:      
06D9   C5                     PUSH   bc   ; push IP
06DA   44 4D                  LD   bc,hl   
06DC   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DF   85                     ADD   a,l   
06E0   6F                     LD   l,a   
06E1   39                     ADD   hl,sp   
06E2   18 98                  JR   goBlock2   
06E4                DOLLAR:      
06E4                HEXNUM:      
06E4   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E7                HEXNUM1:      
06E7   03                     INC   bc   
06E8   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E9   CB 77                  BIT   6,a   ; is it uppercase alpha?
06EB   28 02                  JR   z,hexnum2   ; no a decimal
06ED   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EF                HEXNUM2:      
06EF   D6 30                  SUB   $30   ; form decimal digit
06F1   DA 6F 07               JP   c,num2   
06F4   FE 10                  CP   $0F+1   
06F6   D2 6F 07               JP   nc,num2   
06F9   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06FA   29                     ADD   hl,hl   ; 4X
06FB   29                     ADD   hl,hl   ; 8X
06FC   29                     ADD   hl,hl   ; 16X
06FD   85                     ADD   a,l   ; add into bottom of hl
06FE   6F                     LD   l,a   
06FF   18 E6                  JR   hexnum1   
0701                UPCASE:      
0701   0A                     LD   a,(bc)   ; a = identifier char
0702   D6 41                  SUB   "A"   ; "A" = 0
0704   18 05                  JR   ident1   
0706                LOWCASE:      
0706   0A                     LD   a,(bc)   
0707   D6 61                  SUB   "a"   
0709   C6 1A                  ADD   a,26   
070B                IDENT1:      
070B   87                     ADD   a,a   ; l = a * 2
070C   6F                     LD   l,a   
070D   26 4C                  LD   h,msb(vars)   
070F   22 F2 4C               LD   (vPointer),hl   ; store address in setter
0712   5E                     LD   e,(hl)   
0713   23                     INC   hl   
0714   56                     LD   d,(hl)   
0715   D5                     PUSH   de   
0716   DD E9                  JP   (ix)   
0718                             ; if
0718                             ; condition then -- value
0718                QUESTION:      
0718                IF:          
0718   03                     INC   bc   
0719   0A                     LD   a,(bc)   
071A   FE 3F                  CP   "?"   
071C   28 06                  JR   z,ifte   
071E   0B                     DEC   bc   
071F   11 00 00               LD   de,NUL   ; NUL pointer for else
0722   18 01                  JR   ifte1   
0724                             ; ifte
0724                             ; condition then else -- value
0724                IFTE:        
0724   D1                     POP   de   ; de = else
0725                IFTE1:       
0725   E1                     POP   hl   ; hl = then
0726   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0727   7C                     LD   a,h   
0728   B5                     OR   l   
0729   E1                     POP   hl   ; hl = then
072A   CA 46 06               JP   z,go1   ; if z de = else
072D   EB                     EX   de,hl   ; condition = false, de = then
072E   C3 46 06               JP   go1   
0731                STAR:        
0731                MUL:         
0731   D1                     POP   de   ; get first value
0732   E1                     POP   hl   
0733                MUL2:        
0733   C5                     PUSH   bc   ; Preserve the IP
0734   44 4D                  LD   bc,hl   ; bc = 2nd value
0736   21 00 00               LD   hl,0   
0739   3E 10                  LD   a,16   
073B                MUL3:        
073B   29                     ADD   hl,hl   
073C   CB 13                  RL   e   
073E   CB 12                  RL   d   
0740   30 04                  JR   nc,$+6   
0742   09                     ADD   hl,bc   
0743   30 01                  JR   nc,$+3   
0745   13                     INC   de   
0746   3D                     DEC   a   
0747   20 F2                  JR   nz,mul3   
0749   C1                     POP   bc   ; Restore the IP
074A   C3 93 03               JP   add3   
074D                NUM:         
074D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0750   0A                     LD   a,(bc)   ; Get numeral or -
0751   FE 2D                  CP   "-"   
0753   20 01                  JR   nz,num0   
0755   03                     INC   bc   ; move to next char, no flags affected
0756                NUM0:        
0756   08                     EX   af,af'   ; save zero flag = 0 for later
0757                NUM1:        
0757   0A                     LD   a,(bc)   ; read digit
0758   D6 30                  SUB   "0"   ; less than 0?
075A   38 13                  JR   c,num2   ; not a digit, exit loop
075C   FE 0A                  CP   10   ; greater that 9?
075E   30 0F                  JR   nc,num2   ; not a digit, exit loop
0760   03                     INC   bc   ; inc IP
0761   54 5D                  LD   de,hl   ; multiply hl * 10
0763   29                     ADD   hl,hl   
0764   29                     ADD   hl,hl   
0765   19                     ADD   hl,de   
0766   29                     ADD   hl,hl   
0767   85                     ADD   a,l   ; add digit in a to hl
0768   6F                     LD   l,a   
0769   3E 00                  LD   a,0   
076B   8C                     ADC   a,h   
076C   67                     LD   h,a   
076D   18 E8                  JR   num1   
076F                NUM2:        
076F   0B                     DEC   bc   
0770   08                     EX   af,af'   ; restore zero flag
0771   20 07                  JR   nz,num3   
0773   EB                     EX   de,hl   ; negate the value of hl
0774   21 00 00               LD   hl,0   
0777   B7                     OR   a   ; jump to sub2
0778   ED 52                  SBC   hl,de   
077A                NUM3:        
077A   E5                     PUSH   hl   ; Put the number on the stack
077B   DD E9                  JP   (ix)   ; and process the next character
077D                RPAREN:      
077D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0780   FD 46 09               LD   b,(iy+9)   
0783   DD E9                  JP   (ix)   
0785                             ; arg_list* block* -- ptr
0785                SEMICOLON:      
0785   D1                     POP   de   ; de = block* hl = heap*
0786   2A F0 4C               LD   hl,(vHeapPtr)   
0789   AF                     XOR   a   
078A   77                     LD   (hl),a   ; compile null partial_array*
078B   23                     INC   hl   
078C   77                     LD   (hl),a   
078D   23                     INC   hl   
078E   73                     LD   (hl),e   ; compile block*
078F   23                     INC   hl   
0790   72                     LD   (hl),d   
0791   23                     INC   hl   
0792   D1                     POP   de   ; de = block*
0793   73                     LD   (hl),e   ; compile arg_list*
0794   23                     INC   hl   
0795   72                     LD   (hl),d   
0796   23                     INC   hl   
0797   ED 5B F0 4C            LD   de,(vHeapPtr)   ; return lambda*
079B   D5                     PUSH   de   
079C   22 F0 4C               LD   (vHeapPtr),hl   ; heap* += 4
079F   DD E9                  JP   (ix)   
07A1                             ; shiftLeft
07A1                             ; value count -- value2          shift left count places
07A1                SHIFTLEFT:      
07A1   50 59                  LD   de,bc   ; save IP
07A3   C1                     POP   bc   ; bc = count
07A4   41                     LD   b,c   ; b = loop counter
07A5   E1                     POP   hl   
07A6   04                     INC   b   ; test for counter=0 case
07A7   18 01                  JR   shiftLeft2   
07A9                SHIFTLEFT1:      
07A9   29                     ADD   hl,hl   ; left shift hl
07AA                SHIFTLEFT2:      
07AA   10 FD                  DJNZ   shiftLeft1   
07AC   E5                     PUSH   hl   
07AD   42 4B                  LD   bc,de   ; restore IP
07AF   DD E9                  JP   (ix)   
07B1                             ; shiftRight
07B1                             ; value count -- value2          shift left count places
07B1                SHIFTRIGHT:      
07B1   50 59                  LD   de,bc   ; save IP
07B3   C1                     POP   bc   ; bc = count
07B4   41                     LD   b,c   ; b = loop counter
07B5   E1                     POP   hl   
07B6   04                     INC   b   ; test for counter=0 case
07B7   18 04                  JR   shiftRight2   
07B9                SHIFTRIGHT1:      
07B9   CB 3C                  SRL   h   ; right shift hl
07BB   CB 1D                  RR   l   
07BD                SHIFTRIGHT2:      
07BD   10 FA                  DJNZ   shiftRight1   
07BF   E5                     PUSH   hl   
07C0   42 4B                  LD   bc,de   ; restore IP
07C2   DD E9                  JP   (ix)   
07C4                             ; string
07C4                             ; -- ptr                        ; points to start of string chars,
07C4                             ; length is stored at start - 2 bytes
07C4                DBLQUOTE:      
07C4                STRING:      
07C4   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap*
07C7   23                     INC   hl   ; skip length field to start
07C8   23                     INC   hl   
07C9   E5                     PUSH   hl   ; save start of string
07CA   03                     INC   bc   ; point to next char
07CB   18 03                  JR   string2   
07CD                STRING1:      
07CD   77                     LD   (hl),a   
07CE   23                     INC   hl   ; increase count
07CF   03                     INC   bc   ; point to next char
07D0                STRING2:      
07D0   0A                     LD   a,(bc)   
07D1   FE 22                  CP   DQUOTE   ; " is the string terminator
07D3   28 04                  JR   z,string3   
07D5   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D7   20 F4                  JR   nz,string1   
07D9                STRING3:      
07D9   AF                     XOR   a   ; write NUL to terminate string
07DA   77                     LD   (hl),a   ; hl = end of string
07DB   23                     INC   hl   
07DC   22 F0 4C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07DF   2B                     DEC   hl   ; hl = end of string without terminator
07E0   D1                     POP   de   ; de = start of string
07E1   D5                     PUSH   de   ; return start of string
07E2   B7                     OR   a   ; hl = length bytes, de = start of string
07E3   ED 52                  SBC   hl,de   
07E5   EB                     EX   de,hl   
07E6   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E7   72                     LD   (hl),d   
07E8   2B                     DEC   hl   
07E9   73                     LD   (hl),e   
07EA   DD E9                  JP   (ix)   
07EC                MINUS:       ; negative sign or subtract
07EC   03                     INC   bc   ; check if sign of a number
07ED   0A                     LD   a,(bc)   
07EE   0B                     DEC   bc   
07EF   FE 30                  CP   "0"   
07F1   38 05                  JR   c,sub   
07F3   FE 3A                  CP   "9"+1   
07F5   DA 3B 03               JP   c,num_   
07F8                SUB:         ; Subtract the value 2nd on stack from top of stack
07F8   03                     INC   bc   
07F9   FE 2D                  CP   "-"   
07FB   20 05                  JR   nz,sub1   
07FD   E1                     POP   hl   
07FE   2B                     DEC   hl   
07FF   C3 7F 04               JP   assign0   
0802                SUB1:        
0802   0B                     DEC   bc   
0803   D1                     POP   de   
0804   E1                     POP   hl   
0805   B7                     OR   a   
0806   ED 52                  SBC   hl,de   
0808   C3 93 03               JP   add3   
080B                ERROR1:      
080B   21 01 00               LD   hl,1   ; error 1: unknown command
080E   E5                     PUSH   hl   
080F   C3 56 0C               JP   error   
0812                COMMENT:      
0812   03                     INC   bc   ; point to next char
0813   0A                     LD   a,(bc)   
0814   FE 20                  CP   " "   ; terminate on any char less than SP
0816   30 FA                  JR   nc,comment   
0818   0B                     DEC   bc   
0819   DD E9                  JP   (ix)   
081B                COMMAND_A:      
081B   CD D2 0A               CALL   jumpTable   
081E   62                     DB   "b"   
081F   27 08                  DW   absolute   
0821   64                     DB   "d"   
0822   34 08                  DW   addrOf   
0824   00                     DB   NUL   
0825   0B 08                  DW   error1   
0827                             ; /ab absolute
0827                             ; num -- num
0827                ABSOLUTE:      
0827   E1                     POP   hl   
0828   CB 7C                  BIT   7,h   
082A   C8                     RET   z   
082B   AF                     XOR   a   
082C   95                     SUB   l   
082D   6F                     LD   l,a   
082E   9F                     SBC   a,a   
082F   94                     SUB   h   
0830   67                     LD   h,a   
0831   E5                     PUSH   hl   
0832   DD E9                  JP   (ix)   
0834                             ; /ad addrOf
0834                             ; char -- addr
0834                ADDROF:      
0834   E1                     POP   hl   ; a = char
0835   7D                     LD   a,l   
0836   FE 7B                  CP   "z"+1   ; if a > z then exit
0838   30 19                  JR   nc,addrOf2   
083A   D6 41                  SUB   "A"   ; a - 65
083C   38 15                  JR   c,addrOf2   ; if < A then exit
083E   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0840   38 06                  JR   c,addrOf1   
0842   D6 06                  SUB   "a"-("Z"+1)   
0844   FE 1A                  CP   "Z"-"A"+1   
0846   38 0B                  JR   c,addrOf2   ; if < a then exit
0848                ADDROF1:      
0848   87                     ADD   a,a   ; double a
0849   21 00 4C               LD   hl,VARS   ; hl = VARS + a
084C   85                     ADD   a,l   
084D   6F                     LD   l,a   
084E   3E 00                  LD   a,0   
0850   8C                     ADC   a,h   
0851   67                     LD   h,a   
0852   E5                     PUSH   hl   
0853                ADDROF2:      
0853   DD E9                  JP   (ix)   
0855                COMMAND_B:      
0855   CD D2 0A               CALL   jumpTable   
0858   72                     DB   "r"   
0859   4F 09                  DW   break   
085B   79                     DB   "y"   
085C   99 0B                  DW   coldStart   
085E   00                     DB   NUL   
085F   0B 08                  DW   error1   
0861                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
0861                BUFFERARRAY:      
0861   CD 45 06               CALL   go   
0864   00 00                  DW   NUL   
0866   6F 08                  DW   bufferArrayM_1770S1258   
0868   6A 08                  DW   $+2   
086A   02                     DB   2   
086B   03 61 62 63            .PSTR   "abc"   
086F                BUFFERARRAYM_1770S1258:      
086F   7B 60 5B 20 60 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 7D 00 00 .CSTR   "{`[ `.s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s}",0   
08AA                             ; .cstr "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}" ; block
08AA                             ; /bd buffer decimal
08AA                             ; value --
08AA                BUFFERNUMBER:      
08AA   3A E8 4C               LD   a,(vNumBase)   
08AD   FE 10                  CP   16   
08AF   28 66                  JR   z,bufferHex   ; else falls through
08B1                             ; /bd buffer decimal
08B1                             ; value --
08B1                BUFFERDEC:      
08B1   ED 5B EC 4C            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08B5   D9                     EXX      
08B6   E1                     POP   hl   ; hl = value
08B7   CD CB 08               CALL   bufferDec0   
08BA   D9                     EXX      ; de = buffer*' bc = IP
08BB   3E 20                  LD   a," "   ; append space to buffer
08BD   12                     LD   (de),a   
08BE   1C                     INC   e   ; buffer*++, wraparound
08BF   CC BB 0A               CALL   z,flushBuffer   
08C2   2A EC 4C               LD   hl,(vBufPtr)   ; hl = buffer*
08C5   ED 53 EC 4C            LD   (vBufPtr),de   ; update buffer* with buffer*'
08C9   DD E9                  JP   (ix)   
08CB                             ; hl = value
08CB                             ; de' = buffer*
08CB                             ; a, bc, de, hl destroyed
08CB                BUFFERDEC0:      
08CB   CB 7C                  BIT   7,h   
08CD   28 0C                  JR   z,bufferDec1   
08CF   D9                     EXX      
08D0   3E 2D                  LD   a,"-"   
08D2   12                     LD   (de),a   
08D3   13                     INC   de   
08D4   D9                     EXX      
08D5   AF                     XOR   a   
08D6   95                     SUB   l   
08D7   6F                     LD   l,a   
08D8   9F                     SBC   a,a   
08D9   94                     SUB   h   
08DA   67                     LD   h,a   
08DB                BUFFERDEC1:      
08DB   0E 00                  LD   c,0   ; leading zeros flag = false
08DD   11 F0 D8               LD   de,-10000   
08E0   CD FB 08               CALL   bufferDec2   
08E3   11 18 FC               LD   de,-1000   
08E6   CD FB 08               CALL   bufferDec2   
08E9   11 9C FF               LD   de,-100   
08EC   CD FB 08               CALL   bufferDec2   
08EF   1E F6                  LD   e,-10   
08F1   CD FB 08               CALL   bufferDec2   
08F4   0C                     INC   c   ; flag = true for at least digit
08F5   1E FF                  LD   e,-1   
08F7   CD FB 08               CALL   bufferDec2   
08FA   C9                     RET      
08FB                BUFFERDEC2:      
08FB   06 2F                  LD   b,"0"-1   
08FD                BUFFERDEC3:      
08FD   04                     INC   b   
08FE   19                     ADD   hl,de   
08FF   38 FC                  JR   c,bufferDec3   
0901   ED 52                  SBC   hl,de   
0903   3E 30                  LD   a,"0"   
0905   B8                     CP   b   
0906   20 05                  JR   nz,bufferDec4   
0908   AF                     XOR   a   
0909   B1                     OR   c   
090A   C8                     RET   z   
090B   18 01                  JR   bufferDec5   
090D                BUFFERDEC4:      
090D   0C                     INC   c   
090E                BUFFERDEC5:      
090E   78                     LD   a,b   
090F   D9                     EXX      
0910   12                     LD   (de),a   
0911   1C                     INC   e   
0912   CC BB 0A               CALL   z,flushBuffer   
0915   D9                     EXX      
0916   C9                     RET      
0917                             ; /bh buffer hex
0917                             ; value --
0917                BUFFERHEX:      
0917   E1                     POP   hl   ; hl = value
0918   ED 5B EC 4C            LD   de,(vBufPtr)   
091C   3E 24                  LD   a,"$"   ; # prefix
091E   12                     LD   (de),a   
091F   1C                     INC   e   ; buffer*++, wraparound
0920   CC BB 0A               CALL   z,flushBuffer   
0923   7C                     LD   a,h   
0924   CD 38 09               CALL   bufferHex1   
0927   7D                     LD   a,l   
0928   CD 38 09               CALL   bufferHex1   
092B   3E 20                  LD   a," "   ; append space to buffer
092D   12                     LD   (de),a   
092E   1C                     INC   e   ; buffer*++, wraparound
092F   CC BB 0A               CALL   z,flushBuffer   
0932   ED 53 EC 4C            LD   (vBufPtr),de   
0936   DD E9                  JP   (ix)   
0938                BUFFERHEX1:      
0938   F5                     PUSH   af   
0939   1F                     RRA      
093A   1F                     RRA      
093B   1F                     RRA      
093C   1F                     RRA      
093D   CD 41 09               CALL   bufferHex2   
0940   F1                     POP   af   
0941                BUFFERHEX2:      
0941   E6 0F                  AND   0x0F   
0943   C6 90                  ADD   a,0x90   
0945   27                     DAA      
0946   CE 40                  ADC   a,0x40   
0948   27                     DAA      
0949   12                     LD   (de),a   
094A   1C                     INC   e   ; buffer*++, wraparound
094B   CC BB 0A               CALL   z,flushBuffer   
094E   C9                     RET      
094F                             ; /br break from loop
094F                             ; --
094F                BREAK:       
094F   E1                     POP   hl   
0950   7D                     LD   a,l   
0951   B4                     OR   h   
0952   28 02                  JR   z,break1   
0954   DD E9                  JP   (ix)   
0956                BREAK1:      
0956   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0958   FD 54                  LD   d,iyh   
095A   21 08 00               LD   hl,8   
095D   19                     ADD   hl,de   
095E   23                     INC   hl   
095F   23                     INC   hl   
0960   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0963   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0966   C3 2D 05               JP   blockEnd   
0969                             ; /bs buffered string
0969                             ; string* --
0969                BUFFERSTRING:      
0969   E1                     POP   hl   ; hl = string*
096A   ED 5B EC 4C            LD   de,(vBufPtr)   ; de = buffer*
096E   18 06                  JR   bufferString1   
0970                BUFFERSTRING0:      
0970   12                     LD   (de),a   ; a -> buffer*
0971   1C                     INC   e   ; buffer*++, wraparound
0972   CC BB 0A               CALL   z,flushBuffer   
0975   23                     INC   hl   
0976                BUFFERSTRING1:      
0976   7E                     LD   a,(hl)   ; a <- string*
0977   B7                     OR   a   ; if NUL exit loop
0978   20 F6                  JR   nz,bufferString0   
097A   2A EC 4C               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
097D   ED 53 EC 4C            LD   (vBufPtr),de   ; save buffer*' in pointer
0981   DD E9                  JP   (ix)   
0983                             ; /bc buffer char
0983                             ; char --
0983                BUFFERCHAR:      
0983   21 01 00               LD   hl,1   
0986   18 01                  JR   bufferXChars0   
0988                             ; /bx buffered x chars
0988                             ; char length --
0988                BUFFERXCHARS:      
0988   E1                     POP   hl   ; hl = length
0989                BUFFERXCHARS0:      
0989   D1                     POP   de   ; a' = char
098A   7B                     LD   a,e   
098B   08                     EX   af,af'   
098C   ED 5B EC 4C            LD   de,(vBufPtr)   ; de = buffer*
0990   18 08                  JR   bufferXChars2   
0992                BUFFERXCHARS1:      
0992   08                     EX   af,af'   
0993   12                     LD   (de),a   
0994   08                     EX   af,af'   
0995   1C                     INC   e   ; buffer*++, wraparound
0996   CC BB 0A               CALL   z,flushBuffer   
0999   2B                     DEC   hl   
099A                BUFFERXCHARS2:      
099A   7D                     LD   a,l   
099B   B4                     OR   h   
099C   20 F4                  JR   nz,bufferXChars1   
099E   ED 53 EC 4C            LD   (vBufPtr),de   ; save buffer*'
09A2   DD E9                  JP   (ix)   
09A4                COMMAND_I:      
09A4   CD D2 0A               CALL   jumpTable   
09A7   6E                     DB   "n"   
09A8   8E 0A                  DW   input   
09AA   76                     DB   "v"   
09AB   BF 03                  DW   invert   
09AD   00                     DB   NUL   
09AE   0B 08                  DW   error1   
09B0                COMMAND_P:      
09B0   CD D2 0A               CALL   jumpTable   
09B3   61                     DB   "a"   
09B4   C2 09                  DW   partial   
09B6   62                     DB   "b"   
09B7   E2 09                  DW   printBuffer   
09B9   63                     DB   "c"   
09BA   08 0A                  DW   printChars   
09BC   6B                     DB   "k"   
09BD   1A 0A                  DW   printStack   
09BF   00                     DB   NUL   
09C0   0B 08                  DW   error1   
09C2                             ; partial
09C2                             ; array* lambda* -- lambda1*
09C2                PARTIAL:      
09C2   E1                     POP   hl   ; h1 = lambda*
09C3   ED 5B F0 4C            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09C7   ED 43 00 4D            LD   (vTemp1),bc   ; save IP
09CB   01 06 00               LD   bc,6   ; bc = count
09CE   ED B0                  LDIR      ; clone lambda
09D0   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore IP
09D4   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09D7   ED 53 F0 4C            LD   (vHeapPtr),de   ; heap* += 6
09DB   D1                     POP   de   ; de = array*
09DC   E5                     PUSH   hl   ; return partial_array*
09DD   73                     LD   (hl),e   ; compile array*
09DE   23                     INC   hl   
09DF   72                     LD   (hl),d   
09E0   DD E9                  JP   (ix)   
09E2                             ; /pb printBuffer
09E2                             ; --
09E2                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
09E2                          ;*Macro unroll: FUNC printBuffer, 0, "a"
09E2                PRINTBUFFER:      
09E2   CD 45 06               CALL   go   
09E5   00 00                  DW   NUL   
09E7   EE 09                  DW   printBufferM_1990S1492   
09E9   EB 09                  DW   $+2   
09EB   00                     DB   0   
09EC   01 61                  .PSTR   "a"   
09EE                PRINTBUFFERM_1990S1492:      
09EE   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A08                             ; printChars
0A08                             ; char* len --
0A08                PRINTCHARS:      
0A08   E1                     POP   hl   ; hl = count
0A09   D1                     POP   de   ; de = char*
0A0A   CD 15 0A               CALL   printChars2   
0A0D   DD E9                  JP   (ix)   
0A0F                PRINTCHARS1:      
0A0F   1A                     LD   a,(de)   ; print char at char*
0A10   CD 85 00               CALL   putchar   
0A13   13                     INC   de   ; char*++
0A14   2B                     DEC   hl   ; count--
0A15                PRINTCHARS2:      
0A15   7D                     LD   a,l   ; count == 0?
0A16   B4                     OR   h   
0A17   C8                     RET   z   
0A18   18 F5                  JR   printChars1   ; if not loop
0A1A                             ; /pk print stack
0A1A                             ; --
0A1A                PRINTSTACK:      
0A1A                             ;     ld (vTemp1),bc
0A1A                             ;     call printStr
0A1A                             ;     .cstr "=> "
0A1A                             ;     ld hl,STACK
0A1A                             ;     sbc hl,sp
0A1A                             ;     srl h
0A1A                             ;     rr l
0A1A                             ;     ld bc,hl
0A1A                             ;     ld hl,STACK
0A1A                             ;     jr printStack2
0A1A                             ; printStack1:
0A1A                             ;     dec bc
0A1A                             ;     dec hl
0A1A                             ;     ld d,(hl)
0A1A                             ;     dec hl
0A1A                             ;     ld e,(hl)
0A1A                             ;     ex de,hl
0A1A                             ;     call prthex
0A1A                             ;     ex de,hl
0A1A                             ;     ld a," "
0A1A                             ;     call putchar
0A1A                             ; printStack2:
0A1A                             ;     ld a,c
0A1A                             ;     or b
0A1A                             ;     jr nz,printStack1
0A1A                             ;     call prompt
0A1A                             ;     ld bc,(vTemp1)
0A1A   DD E9                  JP   (ix)   
0A1C                COMMAND_R:      
0A1C   CD D2 0A               CALL   jumpTable   
0A1F   65                     DB   "e"   
0A20   25 0A                  DW   remain   
0A22   00                     DB   NUL   
0A23   0B 08                  DW   error1   
0A25                REMAIN:      
0A25   2A F4 4C               LD   hl,(vRemain)   
0A28   E5                     PUSH   hl   
0A29   DD E9                  JP   (ix)   
0A2B                SIZE:        
0A2B   E1                     POP   hl   
0A2C   2B                     DEC   hl   ; msb size
0A2D   56                     LD   d,(hl)   
0A2E   2B                     DEC   hl   ; lsb size
0A2F   5E                     LD   e,(hl)   
0A30   D5                     PUSH   de   
0A31   DD E9                  JP   (ix)   
0A33                COMMAND_V:      
0A33   CD D2 0A               CALL   jumpTable   
0A36   62                     DB   "b"   
0A37   57 0A                  DW   varBufPtr   
0A39   68                     DB   "h"   
0A3A   60 0A                  DW   varHeapPtr   
0A3C   74                     DB   "t"   
0A3D   69 0A                  DW   varTIBPtr   
0A3F   42                     DB   "B"   
0A40   48 0A                  DW   constBufStart   
0A42   54                     DB   "T"   
0A43   52 0A                  DW   constTIBStart   
0A45   00                     DB   NUL   
0A46   0B 08                  DW   error1   
0A48                CONSTBUFSTART:      
0A48   11 00 4B               LD   de,BUF   
0A4B   18 28                  JR   constant   
0A4D                CONSTHEAPSTART:      
0A4D   11 1E 4D               LD   de,HEAP   
0A50   18 23                  JR   constant   
0A52                CONSTTIBSTART:      
0A52   11 00 4A               LD   de,TIB   
0A55   18 1E                  JR   constant   
0A57                VARBUFPTR:      
0A57   ED 5B EC 4C            LD   de,(vBufPtr)   
0A5B   21 EC 4C               LD   hl,vBufPtr   
0A5E   18 12                  JR   variable   
0A60                VARHEAPPTR:      
0A60   ED 5B F0 4C            LD   de,(vHeapPtr)   
0A64   21 F0 4C               LD   hl,vHeapPtr   
0A67   18 09                  JR   variable   
0A69                VARTIBPTR:      
0A69   ED 5B EA 4C            LD   de,(vTIBPtr)   
0A6D   21 EA 4C               LD   hl,vTIBPtr   
0A70   18 00                  JR   variable   
0A72                VARIABLE:      
0A72   22 F2 4C               LD   (vPointer),hl   
0A75                CONSTANT:      
0A75   D5                     PUSH   de   
0A76   DD E9                  JP   (ix)   
0A78                CHARS:       
0A78   21 01 00               LD   hl,1   
0A7B                CHARS1:      
0A7B   22 E6 4C               LD   (vDataWidth),hl   
0A7E   DD E9                  JP   (ix)   
0A80                DECIMAL:      
0A80   21 0A 00               LD   hl,10   
0A83                DECIMAL1:      
0A83   22 E8 4C               LD   (vNumBase),hl   
0A86   DD E9                  JP   (ix)   
0A88                HEXADECIMAL:      
0A88   21 10 00               LD   hl,16   
0A8B   C3 83 0A               JP   decimal1   
0A8E                             ; Z80 port input
0A8E                             ; port -- value
0A8E                INPUT:       
0A8E   E1                     POP   hl   
0A8F   59                     LD   e,c   ; save IP
0A90   4D                     LD   c,l   
0A91   ED 68                  IN   l,(c)   
0A93   26 00                  LD   h,0   
0A95   4B                     LD   c,e   ; restore IP
0A96   E5                     PUSH   hl   
0A97   DD E9                  JP   (ix)   
0A99                KEY:         
0A99   CD 81 00               CALL   getchar   
0A9C   26 00                  LD   h,0   
0A9E   6F                     LD   l,a   
0A9F   E5                     PUSH   hl   
0AA0   DD E9                  JP   (ix)   
0AA2                             ; Z80 port output
0AA2                             ; value port --
0AA2                OUTPUT:      
0AA2   E1                     POP   hl   
0AA3   59                     LD   e,c   ; save IP
0AA4   4D                     LD   c,l   
0AA5   E1                     POP   hl   
0AA6   ED 69                  OUT   (c),l   
0AA8   4B                     LD   c,e   ; restore IP
0AA9   DD E9                  JP   (ix)   
0AAB                NUMBERS:      
0AAB   21 02 00               LD   hl,2   
0AAE   C3 7B 0A               JP   chars1   
0AB1                             ; 
0AB1                             ; keyIter:
0AB1                             ;     call go
0AB1                             ;     .cstr "{/k /t}"             ; block
0AB1                             ; fromIter:
0AB1                             ;     call go
0AB1                             ;     dw NUL                      ; NUL closure
0AB1                             ;     dw $+4
0AB1                             ;     dw args1A0L
0AB1                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0AB1                             ; fromIter1:
0AB1                             ;     call go
0AB1                             ;     dw NUL                      ; NUL closure
0AB1                             ;     dw $+4
0AB1                             ;     dw args2A0L
0AB1                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0AB1                FILTER:      
0AB1                MAP:         
0AB1                SCAN:        
0AB1   DD E9                  JP   (ix)   
0AB3                             ;*******************************************************************
0AB3                             ; reusable arglists
0AB3                             ;*******************************************************************
0AB3                ARGS1A0L:      ; one arg zero locals
0AB3   00                     DB   0   
0AB4   01 61                  .PSTR   "a"   
0AB6                ARGS1A2L:      ; one arg two locals
0AB6   02                     DB   2   
0AB7   03 61 62 63            .PSTR   "abc"   
0ABB                             ;*******************************************************************
0ABB                             ; general routines
0ABB                             ;*******************************************************************
0ABB                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0ABB                FLUSHBUFFER:      
0ABB   F5                     PUSH   af   
0ABC   D5                     PUSH   de   
0ABD   E5                     PUSH   hl   
0ABE   2A EC 4C               LD   hl,(vBufPtr)   
0AC1   11 00 4B               LD   de,BUF   
0AC4   ED 53 EC 4C            LD   (vBufPtr),de   
0AC8   B7                     OR   a   
0AC9   ED 52                  SBC   hl,de   
0ACB   CD 15 0A               CALL   printChars2   
0ACE   E1                     POP   hl   
0ACF   D1                     POP   de   
0AD0   F1                     POP   af   
0AD1   C9                     RET      
0AD2                             ; followed by a table
0AD2                             ; db char
0AD2                             ; dw addr
0AD2                             ; the final item must have char == NUL
0AD2                JUMPTABLE:      
0AD2   03                     INC   bc   
0AD3   E1                     POP   hl   
0AD4                JUMPTABLE0:      
0AD4   AF                     XOR   a   
0AD5   BE                     CP   (hl)   
0AD6   28 09                  JR   z,jumpTable1   
0AD8   0A                     LD   a,(bc)   
0AD9   BE                     CP   (hl)   
0ADA   28 06                  JR   z,jumpTable2   
0ADC   23                     INC   hl   
0ADD   23                     INC   hl   
0ADE   23                     INC   hl   
0ADF   18 F3                  JR   jumpTable0   
0AE1                JUMPTABLE1:      
0AE1   0B                     DEC   bc   
0AE2                JUMPTABLE2:      
0AE2   23                     INC   hl   
0AE3   5E                     LD   e,(hl)   
0AE4   23                     INC   hl   
0AE5   56                     LD   d,(hl)   
0AE6   EB                     EX   de,hl   
0AE7   E9                     JP   (hl)   
0AE8                PRTSTR0:      
0AE8   CD 85 00               CALL   putchar   
0AEB   23                     INC   hl   
0AEC                PRTSTR:      
0AEC   7E                     LD   a,(hl)   
0AED   B7                     OR   a   
0AEE   20 F8                  JR   nz,prtstr0   
0AF0   C9                     RET      
0AF1                             ; **************************************************************************
0AF1                             ; calculate nesting value
0AF1                             ; a is char to be tested,
0AF1                             ; e is the nesting value (initially 0)
0AF1                             ; e is increased by ( and [
0AF1                             ; e is decreased by ) and ]
0AF1                             ; e has its bit 7 toggled by `
0AF1                             ; limited to 127 levels
0AF1                             ; **************************************************************************
0AF1                NESTING:      
0AF1   FE 22                  CP   DQUOTE   ; quote char
0AF3   28 06                  JR   z,nesting0   
0AF5   FE 60                  CP   "`"   ; quote char
0AF7   28 02                  JR   z,nesting0   
0AF9   18 0A                  JR   nesting1   
0AFB                NESTING0:      
0AFB   CB 7B                  BIT   7,e   
0AFD   28 03                  JR   z,nesting1a   
0AFF   CB BB                  RES   7,e   
0B01   C9                     RET      
0B02                NESTING1A:      
0B02   CB FB                  SET   7,e   
0B04   C9                     RET      
0B05                NESTING1:      
0B05   CB 7B                  BIT   7,e   
0B07   C0                     RET   nz   
0B08   FE 7B                  CP   "{"   
0B0A   28 08                  JR   z,nesting2   
0B0C   FE 5B                  CP   "["   
0B0E   28 04                  JR   z,nesting2   
0B10   FE 28                  CP   "("   
0B12   20 02                  JR   nz,nesting3   
0B14                NESTING2:      
0B14   1C                     INC   e   
0B15   C9                     RET      
0B16                NESTING3:      
0B16   FE 7D                  CP   "}"   
0B18   28 07                  JR   z,nesting4   
0B1A   FE 5D                  CP   "]"   
0B1C   28 03                  JR   z,nesting4   
0B1E   FE 29                  CP   ")"   
0B20   C0                     RET   nz   
0B21                NESTING4:      
0B21   1D                     DEC   e   
0B22   C9                     RET      
0B23                PROMPT:      
0B23   CD 33 0B               CALL   printStr   
0B26   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B2B   C9                     RET      
0B2C                CRLF:        
0B2C   CD 33 0B               CALL   printStr   
0B2F   0D 0A 00               .CSTR   "\r\n"   
0B32   C9                     RET      
0B33                             ; prints a null teminated string
0B33                             ; the string should be immediately following the call
0B33                PRINTSTR:      
0B33   E3                     EX   (sp),hl   ; swap			
0B34   CD EC 0A               CALL   prtstr   
0B37   23                     INC   hl   ; inc past NUL
0B38   E3                     EX   (sp),hl   ; put it back	
0B39   C9                     RET      
0B3A                TITLESTR:      
0B3A   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0B4E                INIT:        
0B4E   21 3A 0B               LD   hl,titleStr   
0B51   11 0A 4D               LD   de,titleBuf   
0B54   06 14                  LD   b,20   
0B56                INIT1:       
0B56   1A                     LD   a,(de)   
0B57   BE                     CP   (hl)   
0B58   20 17                  JR   nz,coldBoot0   
0B5A   13                     INC   de   
0B5B   23                     INC   hl   
0B5C   10 F8                  DJNZ   init1   
0B5E                WARMINIT:      
0B5E   ED 4B F6 4C            LD   bc,(vSavedIP)   ; restore IP
0B62   ED 7B F8 4C            LD   sp,(vSavedSP)   ; restore SP
0B66   DD 2A FA 4C            LD   ix,(vSavedNext)   ; restore Next
0B6A   FD 2A FC 4C            LD   iy,(vSavedBP)   ; restore BP
0B6E   C3 A8 0B               JP   start1   
0B71                COLDBOOT0:      
0B71   21 3A 0B               LD   hl,titleStr   ; copy titleStr to titleBuf
0B74   11 0A 4D               LD   de,titleBuf   
0B77   06 14                  LD   b,20   
0B79   ED B0                  LDIR      
0B7B                COLDINIT:      
0B7B   21 80 01               LD   hl,isysVars   
0B7E   11 E6 4C               LD   de,sysVars   
0B81   01 10 00               LD   bc,8 * 2   
0B84   ED B0                  LDIR      
0B86   21 00 4C               LD   hl,vars   ; 52 vars LO HI
0B89   06 34                  LD   b,26*2   
0B8B   AF                     XOR   a   
0B8C                COLDBOOT1:      
0B8C   77                     LD   (hl),a   
0B8D   23                     INC   hl   
0B8E   10 FC                  DJNZ   coldBoot1   
0B90   DD 2A EE 4C            LD   ix,(vNext)   
0B94   FD 21 00 4A            LD   iy,STACK   
0B98   C9                     RET      
0B99                COLDSTART:      
0B99   31 00 4A               LD   sp,STACK   
0B9C   CD 71 0B               CALL   coldBoot0   
0B9F   C3 A8 0B               JP   start1   
0BA2                START:       
0BA2   31 00 4A               LD   sp,STACK   ; start Monty
0BA5   CD 4E 0B               CALL   init   ; setups
0BA8                START1:      
0BA8   21 0A 4D               LD   hl,titleBuf   
0BAB   CD EC 0A               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0BAE                INTERPRET:      
0BAE   CD BB 0A               CALL   flushBuffer   
0BB1   CD 23 0B               CALL   prompt   
0BB4   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BB7   21 00 4A               LD   hl,TIB   
0BBA   22 EA 4C               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BBD                INTERPRET2:      ; calculate nesting
0BBD   1E 00                  LD   e,0   ; initilize nesting value
0BBF   C5                     PUSH   bc   ; save offset into TIB,
0BC0                             ; bc is also the count of chars in TIB
0BC0   21 00 4A               LD   hl,TIB   ; hl is start of TIB
0BC3   18 0B                  JR   interpret4   
0BC5                INTERPRET3:      
0BC5   3E 33                  LD   a,"3"   
0BC7   CD 85 00               CALL   putchar   
0BCA   7E                     LD   a,(hl)   ; a = char in TIB
0BCB   23                     INC   hl   ; inc pointer into TIB
0BCC   0B                     DEC   bc   ; dec count of chars in TIB
0BCD   CD F1 0A               CALL   nesting   ; update nesting value
0BD0                INTERPRET4:      
0BD0   79                     LD   a,c   ; is count zero?
0BD1   B0                     OR   b   
0BD2   20 F1                  JR   nz,interpret3   ; if not loop
0BD4   C1                     POP   bc   ; restore offset into TIB
0BD5                INTERPRET5:      
0BD5   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BD8   FE 20                  CP   $20   ; compare to space
0BDA   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BDC   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BDE                             ; ???? NEEDED?
0BDE   28 3B                  JR   z,interpret8   
0BE0   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BE2   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BE4   FE 05                  CP   CTRL_E   
0BE6   CA 79 0C               JP   z,edit_   
0BE9   FE 08                  CP   CTRL_H   
0BEB   CA 69 0C               JP   z,backSpace_   
0BEE   FE 0A                  CP   CTRL_J   
0BF0   CA 91 0C               JP   z,reEdit_   
0BF3   FE 13                  CP   CTRL_S   
0BF5   CA 94 0C               JP   z,printStack_   
0BF8                             ; DB     lsb(edit_)       ; ENQ ^E  5
0BF8                             ; DB     lsb(reedit_)     ; LF  ^J 10
0BF8                             ; DB     lsb(list_)       ; FF  ^L 12
0BF8                             ; DB     lsb(printStack_) ; DLE ^P 16
0BF8                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0BF8                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0BF8                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0BF8                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0BF8                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0BF8                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0BF8                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0BF8                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0BF8                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0BF8                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0BF8                INTERPRET5A:      
0BF8                             ; ld (vTIBPtr),bc
0BF8                             ; ld bc,(vTIBPtr)
0BF8   18 C3                  JR   interpret2   
0BFA                INTERPRET6:      
0BFA   21 00 4A               LD   hl,TIB   
0BFD   09                     ADD   hl,bc   
0BFE   77                     LD   (hl),a   ; store the character in textbuf
0BFF   03                     INC   bc   
0C00   CD 85 00               CALL   putchar   ; echo character to screen
0C03   CD F1 0A               CALL   nesting   
0C06   18 CD                  JR   interpret5   ; wait for next character
0C08                INTERPRET7:      
0C08   21 00 4A               LD   hl,TIB   
0C0B   09                     ADD   hl,bc   
0C0C   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C0E   23                     INC   hl   
0C0F   36 0A                  LD   (hl),"\n"   
0C11   23                     INC   hl   
0C12   03                     INC   bc   
0C13   03                     INC   bc   
0C14   CD 2C 0B               CALL   crlf   ; echo character to screen
0C17   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C18   B7                     OR   a   
0C19   20 BA                  JR   nz,interpret5   
0C1B                INTERPRET8:      
0C1B   21 00 4A               LD   hl,TIB   
0C1E   09                     ADD   hl,bc   
0C1F   22 EA 4C               LD   (vTIBPtr),hl   
0C22   01 00 4A               LD   bc,TIB   
0C25   ED 43 F6 4C            LD   (vSavedIP),bc   ; save IP
0C29   ED 73 F8 4C            LD   (vSavedSP),sp   ; save SP
0C2D   DD 22 FA 4C            LD   (vSavedNext),ix   ; save Next
0C31   FD 22 FC 4C            LD   (vSavedBP),iy   ; save BP
0C35   0B                     DEC   bc   
0C36                NEXT:        
0C36   03                     INC   bc   ; Increment the IP
0C37   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C38   FE 20                  CP   " "   ; whitespace?
0C3A   28 FA                  JR   z,next   ; space? ignore
0C3C   38 09                  JR   c,next1   
0C3E   D6 20                  SUB   " "   
0C40   6F                     LD   l,a   ; index into table
0C41   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C43   6E                     LD   l,(hl)   ; get low jump address
0C44   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C46   E9                     JP   (hl)   ; Jump to routine
0C47                NEXT1:       
0C47   FE 00                  CP   NUL   ; end of input string?
0C49   28 03                  JR   z,exit   
0C4B   C3 AE 0B               JP   interpret   ; no, other whitespace, macros?
0C4E                EXIT:        
0C4E   03                     INC   bc   
0C4F   60 69                  LD   hl,bc   
0C51   E9                     JP   (hl)   
0C52                RUN:         
0C52   C1                     POP   bc   
0C53   0B                     DEC   bc   
0C54   DD E9                  JP   (ix)   
0C56                ERROR:       
0C56   CD 52 0C               CALL   run   
0C59   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C66   C3 AE 0B               JP   interpret   
0C69                BACKSPACE_:      
0C69   79                     LD   a,c   
0C6A   B0                     OR   b   
0C6B   CA BD 0B               JP   z,interpret2   
0C6E   0B                     DEC   bc   
0C6F   CD 33 0B               CALL   printStr   
0C72   08 20 08 00            .CSTR   "\b \b"   
0C76   C3 BD 0B               JP   interpret2   
0C79                             ; edit
0C79                EDIT_:       
0C79   CD 52 0C               CALL   run   
0C7C   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C8E   C3 AE 0B               JP   interpret   
0C91                REEDIT_:      
0C91   C3 AE 0B               JP   interpret   
0C94                PRINTSTACK_:      
0C94   CD 52 0C               CALL   run   
0C97   2F 70 6B 00            .CSTR   "/pk"   
0C9B   C3 AE 0B               JP   interpret   
0C9E                             ; editDef:
0C9E                             ;     pop hl                      ; pop ret address
0C9E                             ;     ex (sp),hl                  ; swap with TOS
0C9E                             ;     push hl                     ; dup TOS
0C9E                             ;     ld a,l                      ; a = ident
0C9E                             ;     ld de,TIB                   ; de = start of TIB
0C9E                             ;     ld (vTIBPtr),de             ; update TIB*
0C9E                             ;     push ix                     ; save NEXT
0C9E                             ;     ld ix,editDef0              ; NEXT = editDef0
0C9E                             ;     jp lookupRef                ; convert letter into address
0C9E                             ; editDef0:
0C9E                             ;     ld e,(hl)                   ; de = (hl++)
0C9E                             ;     inc hl
0C9E                             ;     ld d,(hl)
0C9E                             ;     ld a,d                      ; de == 0 ?
0C9E                             ;     or e
0C9E                             ;     jr z,editDef4
0C9E                             ;     ld ix,editDef3              ; NEXT = editDef3
0C9E                             ;     ex de,hl
0C9E                             ;     ld a,(hl)
0C9E                             ;     cp "{"
0C9E                             ;     jr nz,editDef1
0C9E                             ;     jp editBlock0               ; convert letter into address
0C9E                             ; editDef1:
0C9E                             ;     cp "("
0C9E                             ;     jr nz,editDef2
0C9E                             ;     jp editBlock0               ; convert letter into address
0C9E                             ; editDef2:
0C9E                             ;     jp editLambda
0C9E                             ; editDef3:
0C9E                             ;     ld a," "                    ; write assign
0C9E                             ;     call writeChar
0C9E                             ;     pop hl                      ; a = ident
0C9E                             ;     ld a,l
0C9E                             ;     call writeChar
0C9E                             ;     ld a,"="                    ; write assign
0C9E                             ;     call writeChar
0C9E                             ;     ld ix,editDef4              ; NEXT = editDef4
0C9E                             ;     jp printTIB
0C9E                             ; editDef4:
0C9E                             ;     pop ix                      ; restore NEXT
0C9E                             ;     jp (ix)
0C9E                             ; writeChar:
0C9E                             ;     ld de,(vTIBPtr)             ; de = TIB*
0C9E                             ;     ld (de),a                   ; write ident
0C9E                             ;     inc de
0C9E                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0C9E                             ;     ret
0C9E                             ; ; printTIB
0C9E                             ; printTIB:
0C9E                             ;     ld hl,(vTIBPtr)
0C9E                             ;     ld de,TIB
0C9E                             ;     or a
0C9E                             ;     sbc hl,de
0C9E                             ;     jp printTIB2
0C9E                             ; printTIB1:
0C9E                             ;     ld a,(de)
0C9E                             ;     call putchar
0C9E                             ; printTIB2:
0C9E                             ;     ld a,l
0C9E                             ;     or h
0C9E                             ;     jr nz,printTIB1
0C9E                             ;     jp (ix)
0C9E                             ; editBlock:
0C9E                             ;     pop hl                      ; hl = block*
0C9E                             ; editBlock0:
0C9E                             ;     push ix                     ; save next
0C9E                             ;     push hl                     ; push block*
0C9E                             ;     push hl                     ; push block*
0C9E                             ;     ld ix,(editBlock2)
0C9E                             ;     jp blockLength
0C9E                             ; editBlock1:
0C9E                             ;     pop hl                      ; bc = length, (sp) = IP
0C9E                             ;     pop de                      ; de = block*
0C9E                             ;     ld a,l
0C9E                             ;     or h
0C9E                             ;     jr z,editBlock2
0C9E                             ;     push bc
0C9E                             ;     ld bc,hl
0C9E                             ;     ex de,hl                    ; hl = block*
0C9E                             ;     ld de,(vTIBPtr)              ; de = TIB*
0C9E                             ;     ldir                        ; copy block to TIB
0C9E                             ;     ld (vTIBPtr),de              ; save TIB*
0C9E                             ;     pop bc
0C9E                             ; editBlock2:
0C9E                             ;     pop ix                      ; restore next
0C9E                             ;     jp (ix)
0C9E                             ; editLambda:
0C9E                             ;     jp (ix)
0C9E                             ; editArray:
0C9E                             ;     jp (ix)
0C9E                             ; editArglist:
0C9E                             ;     jp (ix)
0C9E                             ; ; blockLength
0C9E                             ; ; addr1 -- length
0C9E                             ; blockLength:
0C9E                             ;     pop hl                      ; block*
0C9E                             ;     push hl                     ; save block*
0C9E                             ;     inc hl                      ; skip first char
0C9E                             ;     ld d,1                      ; increase nesting
0C9E                             ; blockLength1:                   ; Skip to end of definition
0C9E                             ;     ld a,(hl)                   ; Get the next character
0C9E                             ;     inc hl                      ; Point to next character
0C9E                             ;     cp " " + 1                  ; ignore whitespace
0C9E                             ;     jr c,blockLength1
0C9E                             ;     cp ")"
0C9E                             ;     jr z,blockLength4
0C9E                             ;     cp "}"
0C9E                             ;     jr z,blockLength4
0C9E                             ;     cp "]"
0C9E                             ;     jr z,blockLength4
0C9E                             ;     cp "("
0C9E                             ;     jr z,blockLength2
0C9E                             ;     cp "{"
0C9E                             ;     jr z,blockLength2
0C9E                             ;     cp "["
0C9E                             ;     jr z,blockLength2
0C9E                             ;     cp "'"
0C9E                             ;     jr z,blockLength3
0C9E                             ;     cp "`"
0C9E                             ;     jr z,blockLength3
0C9E                             ;     cp DQUOTE
0C9E                             ;     jr z,blockLength3
0C9E                             ;     jr blockLength1
0C9E                             ; blockLength2:
0C9E                             ;     inc d
0C9E                             ;     jr blockLength1
0C9E                             ; blockLength4:
0C9E                             ;     dec d
0C9E                             ;     jr nz, blockLength1         ; get the next element
0C9E                             ; blockLength3:
0C9E                             ;     ld a,$80
0C9E                             ;     xor d
0C9E                             ;     ld d,a
0C9E                             ;     jr nz, blockLength1
0C9E                             ;     pop hl                      ; hl = block*
0C9E                             ;     or a
0C9E                             ;     sbc hl,de
0C9E                             ;     push hl
0C9E                             ;     jp (ix)
0C9E                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0C9E                             ; \a start of stack \#3 depth \b base \$ prompt
0C9E                             ; DW dStack               ; a vS0 start of datastack			
0C9E                             ; DW FALSE                ; b vBase16
0C9E                             ; DW 0                    ; c vTIBPtr an offset to the tib
0C9E                             ; DW 0                    ; d
0C9E                             ; DW 65                   ; e vLastDef "A" last command u defined
0C9E                             ; DW 0                    ; f
0C9E                             ; DW page6                ; g 256 bytes limits
0C9E                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0C9E                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                          ;*Macro unroll:  test "100 :b{%b};^ .", false
0D00   31 00 4A               LD   SP,STACK   
0D03   CD 7B 0B               CALL   coldInit   
0D06   CD A3 48               CALL   execStr   
0D09   31 30 30 20 3A 62 7B 25 62 7D 3B 5E 20 2E 00 .CSTR   "100 :b{%b};^ ."   
0D18   CD BB 0A               CALL   flushBuffer   
0D1B                          ;*Macro unroll:  expect "100 :b{%b};^ .",false
0D1B   E1                     POP   HL   
0D1C   E5                     PUSH   HL   
0D1D   11 00 00               LD   DE,false   
0D20   B7                     OR   A   
0D21   ED 52                  SBC   HL,DE   
0D23   7D                     LD   A,L   
0D24   B4                     OR   H   
0D25   CA 8E 0D               JP   Z,expectM_0_2622S45   
0D28   CD 33 0B               CALL   printStr   
0D2B   43 6F 64 65 3A 20 31 30 30 20 3A 62 7B 25 62 7D 3B 5E 20 2E 00 .CSTR   "Code: ","100 :b{%b};^ ."   
0D40   CD 33 0B               CALL   printStr   
0D43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D52   21 00 00               LD   hl,false   
0D55   E5                     PUSH   hl   
0D56   E5                     PUSH   hl   
0D57   CD 52 0C               CALL   run   
0D5A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0D62   CD BB 0A               CALL   flushBuffer   
0D65   CD 33 0B               CALL   printStr   
0D68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D75   E1                     POP   hl   
0D76   E5                     PUSH   hl   
0D77   E5                     PUSH   hl   
0D78   CD 52 0C               CALL   run   
0D7B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0D8A   CD BB 0A               CALL   flushBuffer   
0D8D   76                     HALT      
0D8E                EXPECTM_0_2622S45:      
0D8E   E1                     POP   HL   
0D8F   CD 33 0B               CALL   printStr   
0D92   44 6F 6E 65 21 00      .CSTR   "Done!"   
0D98   76                     HALT      
0D99                             ; 
0D99                          ;*Macro unroll:  test "/f", false
0D99   31 00 4A               LD   SP,STACK   
0D9C   CD 7B 0B               CALL   coldInit   
0D9F   CD A3 48               CALL   execStr   
0DA2   2F 66 00               .CSTR   "/f"   
0DA5   CD BB 0A               CALL   flushBuffer   
0DA8                          ;*Macro unroll:  expect "/f",false
0DA8   E1                     POP   HL   
0DA9   E5                     PUSH   HL   
0DAA   11 00 00               LD   DE,false   
0DAD   B7                     OR   A   
0DAE   ED 52                  SBC   HL,DE   
0DB0   7D                     LD   A,L   
0DB1   B4                     OR   H   
0DB2   CA 0F 0E               JP   Z,expectM_0_2627S45   
0DB5   CD 33 0B               CALL   printStr   
0DB8   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0DC1   CD 33 0B               CALL   printStr   
0DC4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DD3   21 00 00               LD   hl,false   
0DD6   E5                     PUSH   hl   
0DD7   E5                     PUSH   hl   
0DD8   CD 52 0C               CALL   run   
0DDB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0DE3   CD BB 0A               CALL   flushBuffer   
0DE6   CD 33 0B               CALL   printStr   
0DE9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DF6   E1                     POP   hl   
0DF7   E5                     PUSH   hl   
0DF8   E5                     PUSH   hl   
0DF9   CD 52 0C               CALL   run   
0DFC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E0B   CD BB 0A               CALL   flushBuffer   
0E0E   76                     HALT      
0E0F                EXPECTM_0_2627S45:      
0E0F   E1                     POP   HL   
0E10                          ;*Macro unroll:  test "/t", true
0E10   31 00 4A               LD   SP,STACK   
0E13   CD 7B 0B               CALL   coldInit   
0E16   CD A3 48               CALL   execStr   
0E19   2F 74 00               .CSTR   "/t"   
0E1C   CD BB 0A               CALL   flushBuffer   
0E1F                          ;*Macro unroll:  expect "/t",true
0E1F   E1                     POP   HL   
0E20   E5                     PUSH   HL   
0E21   11 FF FF               LD   DE,true   
0E24   B7                     OR   A   
0E25   ED 52                  SBC   HL,DE   
0E27   7D                     LD   A,L   
0E28   B4                     OR   H   
0E29   CA 86 0E               JP   Z,expectM_0_2628S45   
0E2C   CD 33 0B               CALL   printStr   
0E2F   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0E38   CD 33 0B               CALL   printStr   
0E3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E4A   21 FF FF               LD   hl,true   
0E4D   E5                     PUSH   hl   
0E4E   E5                     PUSH   hl   
0E4F   CD 52 0C               CALL   run   
0E52   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E5A   CD BB 0A               CALL   flushBuffer   
0E5D   CD 33 0B               CALL   printStr   
0E60   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E6D   E1                     POP   hl   
0E6E   E5                     PUSH   hl   
0E6F   E5                     PUSH   hl   
0E70   CD 52 0C               CALL   run   
0E73   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E82   CD BB 0A               CALL   flushBuffer   
0E85   76                     HALT      
0E86                EXPECTM_0_2628S45:      
0E86   E1                     POP   HL   
0E87                          ;*Macro unroll:  test "1", 1
0E87   31 00 4A               LD   SP,STACK   
0E8A   CD 7B 0B               CALL   coldInit   
0E8D   CD A3 48               CALL   execStr   
0E90   31 00                  .CSTR   "1"   
0E92   CD BB 0A               CALL   flushBuffer   
0E95                          ;*Macro unroll:  expect "1",1
0E95   E1                     POP   HL   
0E96   E5                     PUSH   HL   
0E97   11 01 00               LD   DE,1   
0E9A   B7                     OR   A   
0E9B   ED 52                  SBC   HL,DE   
0E9D   7D                     LD   A,L   
0E9E   B4                     OR   H   
0E9F   CA FB 0E               JP   Z,expectM_0_2629S45   
0EA2   CD 33 0B               CALL   printStr   
0EA5   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0EAD   CD 33 0B               CALL   printStr   
0EB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EBF   21 01 00               LD   hl,1   
0EC2   E5                     PUSH   hl   
0EC3   E5                     PUSH   hl   
0EC4   CD 52 0C               CALL   run   
0EC7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0ECF   CD BB 0A               CALL   flushBuffer   
0ED2   CD 33 0B               CALL   printStr   
0ED5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EE2   E1                     POP   hl   
0EE3   E5                     PUSH   hl   
0EE4   E5                     PUSH   hl   
0EE5   CD 52 0C               CALL   run   
0EE8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0EF7   CD BB 0A               CALL   flushBuffer   
0EFA   76                     HALT      
0EFB                EXPECTM_0_2629S45:      
0EFB   E1                     POP   HL   
0EFC                          ;*Macro unroll:  test "2", 2
0EFC   31 00 4A               LD   SP,STACK   
0EFF   CD 7B 0B               CALL   coldInit   
0F02   CD A3 48               CALL   execStr   
0F05   32 00                  .CSTR   "2"   
0F07   CD BB 0A               CALL   flushBuffer   
0F0A                          ;*Macro unroll:  expect "2",2
0F0A   E1                     POP   HL   
0F0B   E5                     PUSH   HL   
0F0C   11 02 00               LD   DE,2   
0F0F   B7                     OR   A   
0F10   ED 52                  SBC   HL,DE   
0F12   7D                     LD   A,L   
0F13   B4                     OR   H   
0F14   CA 70 0F               JP   Z,expectM_0_2630S45   
0F17   CD 33 0B               CALL   printStr   
0F1A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0F22   CD 33 0B               CALL   printStr   
0F25   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F34   21 02 00               LD   hl,2   
0F37   E5                     PUSH   hl   
0F38   E5                     PUSH   hl   
0F39   CD 52 0C               CALL   run   
0F3C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F44   CD BB 0A               CALL   flushBuffer   
0F47   CD 33 0B               CALL   printStr   
0F4A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F57   E1                     POP   hl   
0F58   E5                     PUSH   hl   
0F59   E5                     PUSH   hl   
0F5A   CD 52 0C               CALL   run   
0F5D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F6C   CD BB 0A               CALL   flushBuffer   
0F6F   76                     HALT      
0F70                EXPECTM_0_2630S45:      
0F70   E1                     POP   HL   
0F71                          ;*Macro unroll:  test "1", 1
0F71   31 00 4A               LD   SP,STACK   
0F74   CD 7B 0B               CALL   coldInit   
0F77   CD A3 48               CALL   execStr   
0F7A   31 00                  .CSTR   "1"   
0F7C   CD BB 0A               CALL   flushBuffer   
0F7F                          ;*Macro unroll:  expect "1",1
0F7F   E1                     POP   HL   
0F80   E5                     PUSH   HL   
0F81   11 01 00               LD   DE,1   
0F84   B7                     OR   A   
0F85   ED 52                  SBC   HL,DE   
0F87   7D                     LD   A,L   
0F88   B4                     OR   H   
0F89   CA E5 0F               JP   Z,expectM_0_2631S45   
0F8C   CD 33 0B               CALL   printStr   
0F8F   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0F97   CD 33 0B               CALL   printStr   
0F9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FA9   21 01 00               LD   hl,1   
0FAC   E5                     PUSH   hl   
0FAD   E5                     PUSH   hl   
0FAE   CD 52 0C               CALL   run   
0FB1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FB9   CD BB 0A               CALL   flushBuffer   
0FBC   CD 33 0B               CALL   printStr   
0FBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FCC   E1                     POP   hl   
0FCD   E5                     PUSH   hl   
0FCE   E5                     PUSH   hl   
0FCF   CD 52 0C               CALL   run   
0FD2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FE1   CD BB 0A               CALL   flushBuffer   
0FE4   76                     HALT      
0FE5                EXPECTM_0_2631S45:      
0FE5   E1                     POP   HL   
0FE6                          ;*Macro unroll:  test "0", 0
0FE6   31 00 4A               LD   SP,STACK   
0FE9   CD 7B 0B               CALL   coldInit   
0FEC   CD A3 48               CALL   execStr   
0FEF   30 00                  .CSTR   "0"   
0FF1   CD BB 0A               CALL   flushBuffer   
0FF4                          ;*Macro unroll:  expect "0",0
0FF4   E1                     POP   HL   
0FF5   E5                     PUSH   HL   
0FF6   11 00 00               LD   DE,0   
0FF9   B7                     OR   A   
0FFA   ED 52                  SBC   HL,DE   
0FFC   7D                     LD   A,L   
0FFD   B4                     OR   H   
0FFE   CA 5A 10               JP   Z,expectM_0_2632S45   
1001   CD 33 0B               CALL   printStr   
1004   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
100C   CD 33 0B               CALL   printStr   
100F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
101E   21 00 00               LD   hl,0   
1021   E5                     PUSH   hl   
1022   E5                     PUSH   hl   
1023   CD 52 0C               CALL   run   
1026   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
102E   CD BB 0A               CALL   flushBuffer   
1031   CD 33 0B               CALL   printStr   
1034   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1041   E1                     POP   hl   
1042   E5                     PUSH   hl   
1043   E5                     PUSH   hl   
1044   CD 52 0C               CALL   run   
1047   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1056   CD BB 0A               CALL   flushBuffer   
1059   76                     HALT      
105A                EXPECTM_0_2632S45:      
105A   E1                     POP   HL   
105B                          ;*Macro unroll:  test "10", 10
105B   31 00 4A               LD   SP,STACK   
105E   CD 7B 0B               CALL   coldInit   
1061   CD A3 48               CALL   execStr   
1064   31 30 00               .CSTR   "10"   
1067   CD BB 0A               CALL   flushBuffer   
106A                          ;*Macro unroll:  expect "10",10
106A   E1                     POP   HL   
106B   E5                     PUSH   HL   
106C   11 0A 00               LD   DE,10   
106F   B7                     OR   A   
1070   ED 52                  SBC   HL,DE   
1072   7D                     LD   A,L   
1073   B4                     OR   H   
1074   CA D1 10               JP   Z,expectM_0_2633S45   
1077   CD 33 0B               CALL   printStr   
107A   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1083   CD 33 0B               CALL   printStr   
1086   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1095   21 0A 00               LD   hl,10   
1098   E5                     PUSH   hl   
1099   E5                     PUSH   hl   
109A   CD 52 0C               CALL   run   
109D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10A5   CD BB 0A               CALL   flushBuffer   
10A8   CD 33 0B               CALL   printStr   
10AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10B8   E1                     POP   hl   
10B9   E5                     PUSH   hl   
10BA   E5                     PUSH   hl   
10BB   CD 52 0C               CALL   run   
10BE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10CD   CD BB 0A               CALL   flushBuffer   
10D0   76                     HALT      
10D1                EXPECTM_0_2633S45:      
10D1   E1                     POP   HL   
10D2                          ;*Macro unroll:  test "123", 123
10D2   31 00 4A               LD   SP,STACK   
10D5   CD 7B 0B               CALL   coldInit   
10D8   CD A3 48               CALL   execStr   
10DB   31 32 33 00            .CSTR   "123"   
10DF   CD BB 0A               CALL   flushBuffer   
10E2                          ;*Macro unroll:  expect "123",123
10E2   E1                     POP   HL   
10E3   E5                     PUSH   HL   
10E4   11 7B 00               LD   DE,123   
10E7   B7                     OR   A   
10E8   ED 52                  SBC   HL,DE   
10EA   7D                     LD   A,L   
10EB   B4                     OR   H   
10EC   CA 4A 11               JP   Z,expectM_0_2634S45   
10EF   CD 33 0B               CALL   printStr   
10F2   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
10FC   CD 33 0B               CALL   printStr   
10FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
110E   21 7B 00               LD   hl,123   
1111   E5                     PUSH   hl   
1112   E5                     PUSH   hl   
1113   CD 52 0C               CALL   run   
1116   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
111E   CD BB 0A               CALL   flushBuffer   
1121   CD 33 0B               CALL   printStr   
1124   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1131   E1                     POP   hl   
1132   E5                     PUSH   hl   
1133   E5                     PUSH   hl   
1134   CD 52 0C               CALL   run   
1137   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1146   CD BB 0A               CALL   flushBuffer   
1149   76                     HALT      
114A                EXPECTM_0_2634S45:      
114A   E1                     POP   HL   
114B                          ;*Macro unroll:  test "-1",-1
114B   31 00 4A               LD   SP,STACK   
114E   CD 7B 0B               CALL   coldInit   
1151   CD A3 48               CALL   execStr   
1154   2D 31 00               .CSTR   "-1"   
1157   CD BB 0A               CALL   flushBuffer   
115A                          ;*Macro unroll:  expect "-1",-1
115A   E1                     POP   HL   
115B   E5                     PUSH   HL   
115C   11 FF FF               LD   DE,-1   
115F   B7                     OR   A   
1160   ED 52                  SBC   HL,DE   
1162   7D                     LD   A,L   
1163   B4                     OR   H   
1164   CA C1 11               JP   Z,expectM_0_2635S45   
1167   CD 33 0B               CALL   printStr   
116A   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1173   CD 33 0B               CALL   printStr   
1176   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1185   21 FF FF               LD   hl,-1   
1188   E5                     PUSH   hl   
1189   E5                     PUSH   hl   
118A   CD 52 0C               CALL   run   
118D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1195   CD BB 0A               CALL   flushBuffer   
1198   CD 33 0B               CALL   printStr   
119B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11A8   E1                     POP   hl   
11A9   E5                     PUSH   hl   
11AA   E5                     PUSH   hl   
11AB   CD 52 0C               CALL   run   
11AE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11BD   CD BB 0A               CALL   flushBuffer   
11C0   76                     HALT      
11C1                EXPECTM_0_2635S45:      
11C1   E1                     POP   HL   
11C2                          ;*Macro unroll:  test "''", 0
11C2   31 00 4A               LD   SP,STACK   
11C5   CD 7B 0B               CALL   coldInit   
11C8   CD A3 48               CALL   execStr   
11CB   27 27 00               .CSTR   "''"   
11CE   CD BB 0A               CALL   flushBuffer   
11D1                          ;*Macro unroll:  expect "''",0
11D1   E1                     POP   HL   
11D2   E5                     PUSH   HL   
11D3   11 00 00               LD   DE,0   
11D6   B7                     OR   A   
11D7   ED 52                  SBC   HL,DE   
11D9   7D                     LD   A,L   
11DA   B4                     OR   H   
11DB   CA 38 12               JP   Z,expectM_0_2636S45   
11DE   CD 33 0B               CALL   printStr   
11E1   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
11EA   CD 33 0B               CALL   printStr   
11ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11FC   21 00 00               LD   hl,0   
11FF   E5                     PUSH   hl   
1200   E5                     PUSH   hl   
1201   CD 52 0C               CALL   run   
1204   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
120C   CD BB 0A               CALL   flushBuffer   
120F   CD 33 0B               CALL   printStr   
1212   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
121F   E1                     POP   hl   
1220   E5                     PUSH   hl   
1221   E5                     PUSH   hl   
1222   CD 52 0C               CALL   run   
1225   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1234   CD BB 0A               CALL   flushBuffer   
1237   76                     HALT      
1238                EXPECTM_0_2636S45:      
1238   E1                     POP   HL   
1239                          ;*Macro unroll:  test "'a'", $61
1239   31 00 4A               LD   SP,STACK   
123C   CD 7B 0B               CALL   coldInit   
123F   CD A3 48               CALL   execStr   
1242   27 61 27 00            .CSTR   "'a'"   
1246   CD BB 0A               CALL   flushBuffer   
1249                          ;*Macro unroll:  expect "'a'",$61
1249   E1                     POP   HL   
124A   E5                     PUSH   HL   
124B   11 61 00               LD   DE,$61   
124E   B7                     OR   A   
124F   ED 52                  SBC   HL,DE   
1251   7D                     LD   A,L   
1252   B4                     OR   H   
1253   CA B1 12               JP   Z,expectM_0_2637S45   
1256   CD 33 0B               CALL   printStr   
1259   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1263   CD 33 0B               CALL   printStr   
1266   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1275   21 61 00               LD   hl,$61   
1278   E5                     PUSH   hl   
1279   E5                     PUSH   hl   
127A   CD 52 0C               CALL   run   
127D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1285   CD BB 0A               CALL   flushBuffer   
1288   CD 33 0B               CALL   printStr   
128B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1298   E1                     POP   hl   
1299   E5                     PUSH   hl   
129A   E5                     PUSH   hl   
129B   CD 52 0C               CALL   run   
129E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12AD   CD BB 0A               CALL   flushBuffer   
12B0   76                     HALT      
12B1                EXPECTM_0_2637S45:      
12B1   E1                     POP   HL   
12B2                          ;*Macro unroll:  test "'\\''", $27
12B2   31 00 4A               LD   SP,STACK   
12B5   CD 7B 0B               CALL   coldInit   
12B8   CD A3 48               CALL   execStr   
12BB   27 5C 27 27 00         .CSTR   "'\\''"   
12C0   CD BB 0A               CALL   flushBuffer   
12C3                          ;*Macro unroll:  expect "'\\''",$27
12C3   E1                     POP   HL   
12C4   E5                     PUSH   HL   
12C5   11 27 00               LD   DE,$27   
12C8   B7                     OR   A   
12C9   ED 52                  SBC   HL,DE   
12CB   7D                     LD   A,L   
12CC   B4                     OR   H   
12CD   CA 2C 13               JP   Z,expectM_0_2638S45   
12D0   CD 33 0B               CALL   printStr   
12D3   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
12DE   CD 33 0B               CALL   printStr   
12E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12F0   21 27 00               LD   hl,$27   
12F3   E5                     PUSH   hl   
12F4   E5                     PUSH   hl   
12F5   CD 52 0C               CALL   run   
12F8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1300   CD BB 0A               CALL   flushBuffer   
1303   CD 33 0B               CALL   printStr   
1306   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1313   E1                     POP   hl   
1314   E5                     PUSH   hl   
1315   E5                     PUSH   hl   
1316   CD 52 0C               CALL   run   
1319   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1328   CD BB 0A               CALL   flushBuffer   
132B   76                     HALT      
132C                EXPECTM_0_2638S45:      
132C   E1                     POP   HL   
132D                          ;*Macro unroll:  test "$10", $10
132D   31 00 4A               LD   SP,STACK   
1330   CD 7B 0B               CALL   coldInit   
1333   CD A3 48               CALL   execStr   
1336   24 31 30 00            .CSTR   "$10"   
133A   CD BB 0A               CALL   flushBuffer   
133D                          ;*Macro unroll:  expect "$10",$10
133D   E1                     POP   HL   
133E   E5                     PUSH   HL   
133F   11 10 00               LD   DE,$10   
1342   B7                     OR   A   
1343   ED 52                  SBC   HL,DE   
1345   7D                     LD   A,L   
1346   B4                     OR   H   
1347   CA A5 13               JP   Z,expectM_0_2639S45   
134A   CD 33 0B               CALL   printStr   
134D   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1357   CD 33 0B               CALL   printStr   
135A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1369   21 10 00               LD   hl,$10   
136C   E5                     PUSH   hl   
136D   E5                     PUSH   hl   
136E   CD 52 0C               CALL   run   
1371   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1379   CD BB 0A               CALL   flushBuffer   
137C   CD 33 0B               CALL   printStr   
137F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
138C   E1                     POP   hl   
138D   E5                     PUSH   hl   
138E   E5                     PUSH   hl   
138F   CD 52 0C               CALL   run   
1392   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13A1   CD BB 0A               CALL   flushBuffer   
13A4   76                     HALT      
13A5                EXPECTM_0_2639S45:      
13A5   E1                     POP   HL   
13A6                          ;*Macro unroll:  test "$FF", $FF
13A6   31 00 4A               LD   SP,STACK   
13A9   CD 7B 0B               CALL   coldInit   
13AC   CD A3 48               CALL   execStr   
13AF   24 46 46 00            .CSTR   "$FF"   
13B3   CD BB 0A               CALL   flushBuffer   
13B6                          ;*Macro unroll:  expect "$FF",$FF
13B6   E1                     POP   HL   
13B7   E5                     PUSH   HL   
13B8   11 FF 00               LD   DE,$FF   
13BB   B7                     OR   A   
13BC   ED 52                  SBC   HL,DE   
13BE   7D                     LD   A,L   
13BF   B4                     OR   H   
13C0   CA 1E 14               JP   Z,expectM_0_2640S45   
13C3   CD 33 0B               CALL   printStr   
13C6   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
13D0   CD 33 0B               CALL   printStr   
13D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E2   21 FF 00               LD   hl,$FF   
13E5   E5                     PUSH   hl   
13E6   E5                     PUSH   hl   
13E7   CD 52 0C               CALL   run   
13EA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13F2   CD BB 0A               CALL   flushBuffer   
13F5   CD 33 0B               CALL   printStr   
13F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1405   E1                     POP   hl   
1406   E5                     PUSH   hl   
1407   E5                     PUSH   hl   
1408   CD 52 0C               CALL   run   
140B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
141A   CD BB 0A               CALL   flushBuffer   
141D   76                     HALT      
141E                EXPECTM_0_2640S45:      
141E   E1                     POP   HL   
141F                          ;*Macro unroll:  test "-1 2 +",1
141F   31 00 4A               LD   SP,STACK   
1422   CD 7B 0B               CALL   coldInit   
1425   CD A3 48               CALL   execStr   
1428   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
142F   CD BB 0A               CALL   flushBuffer   
1432                          ;*Macro unroll:  expect "-1 2 +",1
1432   E1                     POP   HL   
1433   E5                     PUSH   HL   
1434   11 01 00               LD   DE,1   
1437   B7                     OR   A   
1438   ED 52                  SBC   HL,DE   
143A   7D                     LD   A,L   
143B   B4                     OR   H   
143C   CA 9D 14               JP   Z,expectM_0_2641S45   
143F   CD 33 0B               CALL   printStr   
1442   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
144F   CD 33 0B               CALL   printStr   
1452   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1461   21 01 00               LD   hl,1   
1464   E5                     PUSH   hl   
1465   E5                     PUSH   hl   
1466   CD 52 0C               CALL   run   
1469   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1471   CD BB 0A               CALL   flushBuffer   
1474   CD 33 0B               CALL   printStr   
1477   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1484   E1                     POP   hl   
1485   E5                     PUSH   hl   
1486   E5                     PUSH   hl   
1487   CD 52 0C               CALL   run   
148A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1499   CD BB 0A               CALL   flushBuffer   
149C   76                     HALT      
149D                EXPECTM_0_2641S45:      
149D   E1                     POP   HL   
149E                          ;*Macro unroll:  test "-1 1 +",0
149E   31 00 4A               LD   SP,STACK   
14A1   CD 7B 0B               CALL   coldInit   
14A4   CD A3 48               CALL   execStr   
14A7   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
14AE   CD BB 0A               CALL   flushBuffer   
14B1                          ;*Macro unroll:  expect "-1 1 +",0
14B1   E1                     POP   HL   
14B2   E5                     PUSH   HL   
14B3   11 00 00               LD   DE,0   
14B6   B7                     OR   A   
14B7   ED 52                  SBC   HL,DE   
14B9   7D                     LD   A,L   
14BA   B4                     OR   H   
14BB   CA 1C 15               JP   Z,expectM_0_2642S45   
14BE   CD 33 0B               CALL   printStr   
14C1   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
14CE   CD 33 0B               CALL   printStr   
14D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14E0   21 00 00               LD   hl,0   
14E3   E5                     PUSH   hl   
14E4   E5                     PUSH   hl   
14E5   CD 52 0C               CALL   run   
14E8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14F0   CD BB 0A               CALL   flushBuffer   
14F3   CD 33 0B               CALL   printStr   
14F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1503   E1                     POP   hl   
1504   E5                     PUSH   hl   
1505   E5                     PUSH   hl   
1506   CD 52 0C               CALL   run   
1509   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1518   CD BB 0A               CALL   flushBuffer   
151B   76                     HALT      
151C                EXPECTM_0_2642S45:      
151C   E1                     POP   HL   
151D                          ;*Macro unroll:  test "1 2 +", 3
151D   31 00 4A               LD   SP,STACK   
1520   CD 7B 0B               CALL   coldInit   
1523   CD A3 48               CALL   execStr   
1526   31 20 32 20 2B 00      .CSTR   "1 2 +"   
152C   CD BB 0A               CALL   flushBuffer   
152F                          ;*Macro unroll:  expect "1 2 +",3
152F   E1                     POP   HL   
1530   E5                     PUSH   HL   
1531   11 03 00               LD   DE,3   
1534   B7                     OR   A   
1535   ED 52                  SBC   HL,DE   
1537   7D                     LD   A,L   
1538   B4                     OR   H   
1539   CA 99 15               JP   Z,expectM_0_2643S45   
153C   CD 33 0B               CALL   printStr   
153F   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
154B   CD 33 0B               CALL   printStr   
154E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
155D   21 03 00               LD   hl,3   
1560   E5                     PUSH   hl   
1561   E5                     PUSH   hl   
1562   CD 52 0C               CALL   run   
1565   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
156D   CD BB 0A               CALL   flushBuffer   
1570   CD 33 0B               CALL   printStr   
1573   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1580   E1                     POP   hl   
1581   E5                     PUSH   hl   
1582   E5                     PUSH   hl   
1583   CD 52 0C               CALL   run   
1586   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1595   CD BB 0A               CALL   flushBuffer   
1598   76                     HALT      
1599                EXPECTM_0_2643S45:      
1599   E1                     POP   HL   
159A                          ;*Macro unroll:  test "4 1 2 +", 3
159A   31 00 4A               LD   SP,STACK   
159D   CD 7B 0B               CALL   coldInit   
15A0   CD A3 48               CALL   execStr   
15A3   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
15AB   CD BB 0A               CALL   flushBuffer   
15AE                          ;*Macro unroll:  expect "4 1 2 +",3
15AE   E1                     POP   HL   
15AF   E5                     PUSH   HL   
15B0   11 03 00               LD   DE,3   
15B3   B7                     OR   A   
15B4   ED 52                  SBC   HL,DE   
15B6   7D                     LD   A,L   
15B7   B4                     OR   H   
15B8   CA 1A 16               JP   Z,expectM_0_2644S45   
15BB   CD 33 0B               CALL   printStr   
15BE   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
15CC   CD 33 0B               CALL   printStr   
15CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15DE   21 03 00               LD   hl,3   
15E1   E5                     PUSH   hl   
15E2   E5                     PUSH   hl   
15E3   CD 52 0C               CALL   run   
15E6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15EE   CD BB 0A               CALL   flushBuffer   
15F1   CD 33 0B               CALL   printStr   
15F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1601   E1                     POP   hl   
1602   E5                     PUSH   hl   
1603   E5                     PUSH   hl   
1604   CD 52 0C               CALL   run   
1607   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1616   CD BB 0A               CALL   flushBuffer   
1619   76                     HALT      
161A                EXPECTM_0_2644S45:      
161A   E1                     POP   HL   
161B                          ;*Macro unroll:  test "123 456 +", 123+456
161B   31 00 4A               LD   SP,STACK   
161E   CD 7B 0B               CALL   coldInit   
1621   CD A3 48               CALL   execStr   
1624   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
162E   CD BB 0A               CALL   flushBuffer   
1631                          ;*Macro unroll:  expect "123 456 +",123+456
1631   E1                     POP   HL   
1632   E5                     PUSH   HL   
1633   11 43 02               LD   DE,123+456   
1636   B7                     OR   A   
1637   ED 52                  SBC   HL,DE   
1639   7D                     LD   A,L   
163A   B4                     OR   H   
163B   CA 9F 16               JP   Z,expectM_0_2645S45   
163E   CD 33 0B               CALL   printStr   
1641   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1651   CD 33 0B               CALL   printStr   
1654   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1663   21 43 02               LD   hl,123+456   
1666   E5                     PUSH   hl   
1667   E5                     PUSH   hl   
1668   CD 52 0C               CALL   run   
166B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1673   CD BB 0A               CALL   flushBuffer   
1676   CD 33 0B               CALL   printStr   
1679   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1686   E1                     POP   hl   
1687   E5                     PUSH   hl   
1688   E5                     PUSH   hl   
1689   CD 52 0C               CALL   run   
168C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
169B   CD BB 0A               CALL   flushBuffer   
169E   76                     HALT      
169F                EXPECTM_0_2645S45:      
169F   E1                     POP   HL   
16A0                          ;*Macro unroll:  test "64 128 +", 64+128
16A0   31 00 4A               LD   SP,STACK   
16A3   CD 7B 0B               CALL   coldInit   
16A6   CD A3 48               CALL   execStr   
16A9   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
16B2   CD BB 0A               CALL   flushBuffer   
16B5                          ;*Macro unroll:  expect "64 128 +",64+128
16B5   E1                     POP   HL   
16B6   E5                     PUSH   HL   
16B7   11 C0 00               LD   DE,64+128   
16BA   B7                     OR   A   
16BB   ED 52                  SBC   HL,DE   
16BD   7D                     LD   A,L   
16BE   B4                     OR   H   
16BF   CA 22 17               JP   Z,expectM_0_2646S45   
16C2   CD 33 0B               CALL   printStr   
16C5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
16D4   CD 33 0B               CALL   printStr   
16D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16E6   21 C0 00               LD   hl,64+128   
16E9   E5                     PUSH   hl   
16EA   E5                     PUSH   hl   
16EB   CD 52 0C               CALL   run   
16EE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16F6   CD BB 0A               CALL   flushBuffer   
16F9   CD 33 0B               CALL   printStr   
16FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1709   E1                     POP   hl   
170A   E5                     PUSH   hl   
170B   E5                     PUSH   hl   
170C   CD 52 0C               CALL   run   
170F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
171E   CD BB 0A               CALL   flushBuffer   
1721   76                     HALT      
1722                EXPECTM_0_2646S45:      
1722   E1                     POP   HL   
1723                          ;*Macro unroll:  test "1 2 +", 3
1723   31 00 4A               LD   SP,STACK   
1726   CD 7B 0B               CALL   coldInit   
1729   CD A3 48               CALL   execStr   
172C   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1732   CD BB 0A               CALL   flushBuffer   
1735                          ;*Macro unroll:  expect "1 2 +",3
1735   E1                     POP   HL   
1736   E5                     PUSH   HL   
1737   11 03 00               LD   DE,3   
173A   B7                     OR   A   
173B   ED 52                  SBC   HL,DE   
173D   7D                     LD   A,L   
173E   B4                     OR   H   
173F   CA 9F 17               JP   Z,expectM_0_2647S45   
1742   CD 33 0B               CALL   printStr   
1745   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1751   CD 33 0B               CALL   printStr   
1754   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1763   21 03 00               LD   hl,3   
1766   E5                     PUSH   hl   
1767   E5                     PUSH   hl   
1768   CD 52 0C               CALL   run   
176B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1773   CD BB 0A               CALL   flushBuffer   
1776   CD 33 0B               CALL   printStr   
1779   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1786   E1                     POP   hl   
1787   E5                     PUSH   hl   
1788   E5                     PUSH   hl   
1789   CD 52 0C               CALL   run   
178C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
179B   CD BB 0A               CALL   flushBuffer   
179E   76                     HALT      
179F                EXPECTM_0_2647S45:      
179F   E1                     POP   HL   
17A0                          ;*Macro unroll:  test "1a= a++ a",2
17A0   31 00 4A               LD   SP,STACK   
17A3   CD 7B 0B               CALL   coldInit   
17A6   CD A3 48               CALL   execStr   
17A9   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
17B3   CD BB 0A               CALL   flushBuffer   
17B6                          ;*Macro unroll:  expect "1a= a++ a",2
17B6   E1                     POP   HL   
17B7   E5                     PUSH   HL   
17B8   11 02 00               LD   DE,2   
17BB   B7                     OR   A   
17BC   ED 52                  SBC   HL,DE   
17BE   7D                     LD   A,L   
17BF   B4                     OR   H   
17C0   CA 24 18               JP   Z,expectM_0_2648S45   
17C3   CD 33 0B               CALL   printStr   
17C6   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
17D6   CD 33 0B               CALL   printStr   
17D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17E8   21 02 00               LD   hl,2   
17EB   E5                     PUSH   hl   
17EC   E5                     PUSH   hl   
17ED   CD 52 0C               CALL   run   
17F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17F8   CD BB 0A               CALL   flushBuffer   
17FB   CD 33 0B               CALL   printStr   
17FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
180B   E1                     POP   hl   
180C   E5                     PUSH   hl   
180D   E5                     PUSH   hl   
180E   CD 52 0C               CALL   run   
1811   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1820   CD BB 0A               CALL   flushBuffer   
1823   76                     HALT      
1824                EXPECTM_0_2648S45:      
1824   E1                     POP   HL   
1825                          ;*Macro unroll:  test "-1 -1 -",0
1825   31 00 4A               LD   SP,STACK   
1828   CD 7B 0B               CALL   coldInit   
182B   CD A3 48               CALL   execStr   
182E   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
1836   CD BB 0A               CALL   flushBuffer   
1839                          ;*Macro unroll:  expect "-1 -1 -",0
1839   E1                     POP   HL   
183A   E5                     PUSH   HL   
183B   11 00 00               LD   DE,0   
183E   B7                     OR   A   
183F   ED 52                  SBC   HL,DE   
1841   7D                     LD   A,L   
1842   B4                     OR   H   
1843   CA A5 18               JP   Z,expectM_0_2649S45   
1846   CD 33 0B               CALL   printStr   
1849   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1857   CD 33 0B               CALL   printStr   
185A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1869   21 00 00               LD   hl,0   
186C   E5                     PUSH   hl   
186D   E5                     PUSH   hl   
186E   CD 52 0C               CALL   run   
1871   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1879   CD BB 0A               CALL   flushBuffer   
187C   CD 33 0B               CALL   printStr   
187F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
188C   E1                     POP   hl   
188D   E5                     PUSH   hl   
188E   E5                     PUSH   hl   
188F   CD 52 0C               CALL   run   
1892   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18A1   CD BB 0A               CALL   flushBuffer   
18A4   76                     HALT      
18A5                EXPECTM_0_2649S45:      
18A5   E1                     POP   HL   
18A6                          ;*Macro unroll:  test "5 3 -", 2
18A6   31 00 4A               LD   SP,STACK   
18A9   CD 7B 0B               CALL   coldInit   
18AC   CD A3 48               CALL   execStr   
18AF   35 20 33 20 2D 00      .CSTR   "5 3 -"   
18B5   CD BB 0A               CALL   flushBuffer   
18B8                          ;*Macro unroll:  expect "5 3 -",2
18B8   E1                     POP   HL   
18B9   E5                     PUSH   HL   
18BA   11 02 00               LD   DE,2   
18BD   B7                     OR   A   
18BE   ED 52                  SBC   HL,DE   
18C0   7D                     LD   A,L   
18C1   B4                     OR   H   
18C2   CA 22 19               JP   Z,expectM_0_2650S45   
18C5   CD 33 0B               CALL   printStr   
18C8   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
18D4   CD 33 0B               CALL   printStr   
18D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18E6   21 02 00               LD   hl,2   
18E9   E5                     PUSH   hl   
18EA   E5                     PUSH   hl   
18EB   CD 52 0C               CALL   run   
18EE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18F6   CD BB 0A               CALL   flushBuffer   
18F9   CD 33 0B               CALL   printStr   
18FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1909   E1                     POP   hl   
190A   E5                     PUSH   hl   
190B   E5                     PUSH   hl   
190C   CD 52 0C               CALL   run   
190F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
191E   CD BB 0A               CALL   flushBuffer   
1921   76                     HALT      
1922                EXPECTM_0_2650S45:      
1922   E1                     POP   HL   
1923                          ;*Macro unroll:  test "2 1 -",1
1923   31 00 4A               LD   SP,STACK   
1926   CD 7B 0B               CALL   coldInit   
1929   CD A3 48               CALL   execStr   
192C   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1932   CD BB 0A               CALL   flushBuffer   
1935                          ;*Macro unroll:  expect "2 1 -",1
1935   E1                     POP   HL   
1936   E5                     PUSH   HL   
1937   11 01 00               LD   DE,1   
193A   B7                     OR   A   
193B   ED 52                  SBC   HL,DE   
193D   7D                     LD   A,L   
193E   B4                     OR   H   
193F   CA 9F 19               JP   Z,expectM_0_2651S45   
1942   CD 33 0B               CALL   printStr   
1945   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1951   CD 33 0B               CALL   printStr   
1954   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1963   21 01 00               LD   hl,1   
1966   E5                     PUSH   hl   
1967   E5                     PUSH   hl   
1968   CD 52 0C               CALL   run   
196B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1973   CD BB 0A               CALL   flushBuffer   
1976   CD 33 0B               CALL   printStr   
1979   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1986   E1                     POP   hl   
1987   E5                     PUSH   hl   
1988   E5                     PUSH   hl   
1989   CD 52 0C               CALL   run   
198C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
199B   CD BB 0A               CALL   flushBuffer   
199E   76                     HALT      
199F                EXPECTM_0_2651S45:      
199F   E1                     POP   HL   
19A0                          ;*Macro unroll:  test "3a= a-- a",2
19A0   31 00 4A               LD   SP,STACK   
19A3   CD 7B 0B               CALL   coldInit   
19A6   CD A3 48               CALL   execStr   
19A9   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
19B3   CD BB 0A               CALL   flushBuffer   
19B6                          ;*Macro unroll:  expect "3a= a-- a",2
19B6   E1                     POP   HL   
19B7   E5                     PUSH   HL   
19B8   11 02 00               LD   DE,2   
19BB   B7                     OR   A   
19BC   ED 52                  SBC   HL,DE   
19BE   7D                     LD   A,L   
19BF   B4                     OR   H   
19C0   CA 24 1A               JP   Z,expectM_0_2652S45   
19C3   CD 33 0B               CALL   printStr   
19C6   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
19D6   CD 33 0B               CALL   printStr   
19D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19E8   21 02 00               LD   hl,2   
19EB   E5                     PUSH   hl   
19EC   E5                     PUSH   hl   
19ED   CD 52 0C               CALL   run   
19F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19F8   CD BB 0A               CALL   flushBuffer   
19FB   CD 33 0B               CALL   printStr   
19FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A0B   E1                     POP   hl   
1A0C   E5                     PUSH   hl   
1A0D   E5                     PUSH   hl   
1A0E   CD 52 0C               CALL   run   
1A11   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A20   CD BB 0A               CALL   flushBuffer   
1A23   76                     HALT      
1A24                EXPECTM_0_2652S45:      
1A24   E1                     POP   HL   
1A25                          ;*Macro unroll:  test "3 5 &", 1
1A25   31 00 4A               LD   SP,STACK   
1A28   CD 7B 0B               CALL   coldInit   
1A2B   CD A3 48               CALL   execStr   
1A2E   33 20 35 20 26 00      .CSTR   "3 5 &"   
1A34   CD BB 0A               CALL   flushBuffer   
1A37                          ;*Macro unroll:  expect "3 5 &",1
1A37   E1                     POP   HL   
1A38   E5                     PUSH   HL   
1A39   11 01 00               LD   DE,1   
1A3C   B7                     OR   A   
1A3D   ED 52                  SBC   HL,DE   
1A3F   7D                     LD   A,L   
1A40   B4                     OR   H   
1A41   CA A1 1A               JP   Z,expectM_0_2653S45   
1A44   CD 33 0B               CALL   printStr   
1A47   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1A53   CD 33 0B               CALL   printStr   
1A56   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A65   21 01 00               LD   hl,1   
1A68   E5                     PUSH   hl   
1A69   E5                     PUSH   hl   
1A6A   CD 52 0C               CALL   run   
1A6D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A75   CD BB 0A               CALL   flushBuffer   
1A78   CD 33 0B               CALL   printStr   
1A7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A88   E1                     POP   hl   
1A89   E5                     PUSH   hl   
1A8A   E5                     PUSH   hl   
1A8B   CD 52 0C               CALL   run   
1A8E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A9D   CD BB 0A               CALL   flushBuffer   
1AA0   76                     HALT      
1AA1                EXPECTM_0_2653S45:      
1AA1   E1                     POP   HL   
1AA2                          ;*Macro unroll:  test "3 5 |", 7
1AA2   31 00 4A               LD   SP,STACK   
1AA5   CD 7B 0B               CALL   coldInit   
1AA8   CD A3 48               CALL   execStr   
1AAB   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1AB1   CD BB 0A               CALL   flushBuffer   
1AB4                          ;*Macro unroll:  expect "3 5 |",7
1AB4   E1                     POP   HL   
1AB5   E5                     PUSH   HL   
1AB6   11 07 00               LD   DE,7   
1AB9   B7                     OR   A   
1ABA   ED 52                  SBC   HL,DE   
1ABC   7D                     LD   A,L   
1ABD   B4                     OR   H   
1ABE   CA 1E 1B               JP   Z,expectM_0_2654S45   
1AC1   CD 33 0B               CALL   printStr   
1AC4   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1AD0   CD 33 0B               CALL   printStr   
1AD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AE2   21 07 00               LD   hl,7   
1AE5   E5                     PUSH   hl   
1AE6   E5                     PUSH   hl   
1AE7   CD 52 0C               CALL   run   
1AEA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AF2   CD BB 0A               CALL   flushBuffer   
1AF5   CD 33 0B               CALL   printStr   
1AF8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B05   E1                     POP   hl   
1B06   E5                     PUSH   hl   
1B07   E5                     PUSH   hl   
1B08   CD 52 0C               CALL   run   
1B0B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B1A   CD BB 0A               CALL   flushBuffer   
1B1D   76                     HALT      
1B1E                EXPECTM_0_2654S45:      
1B1E   E1                     POP   HL   
1B1F                          ;*Macro unroll:  test "3 5 /x", 6
1B1F   31 00 4A               LD   SP,STACK   
1B22   CD 7B 0B               CALL   coldInit   
1B25   CD A3 48               CALL   execStr   
1B28   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
1B2F   CD BB 0A               CALL   flushBuffer   
1B32                          ;*Macro unroll:  expect "3 5 /x",6
1B32   E1                     POP   HL   
1B33   E5                     PUSH   HL   
1B34   11 06 00               LD   DE,6   
1B37   B7                     OR   A   
1B38   ED 52                  SBC   HL,DE   
1B3A   7D                     LD   A,L   
1B3B   B4                     OR   H   
1B3C   CA 9D 1B               JP   Z,expectM_0_2655S45   
1B3F   CD 33 0B               CALL   printStr   
1B42   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1B4F   CD 33 0B               CALL   printStr   
1B52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B61   21 06 00               LD   hl,6   
1B64   E5                     PUSH   hl   
1B65   E5                     PUSH   hl   
1B66   CD 52 0C               CALL   run   
1B69   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B71   CD BB 0A               CALL   flushBuffer   
1B74   CD 33 0B               CALL   printStr   
1B77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B84   E1                     POP   hl   
1B85   E5                     PUSH   hl   
1B86   E5                     PUSH   hl   
1B87   CD 52 0C               CALL   run   
1B8A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B99   CD BB 0A               CALL   flushBuffer   
1B9C   76                     HALT      
1B9D                EXPECTM_0_2655S45:      
1B9D   E1                     POP   HL   
1B9E                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1B9E   31 00 4A               LD   SP,STACK   
1BA1   CD 7B 0B               CALL   coldInit   
1BA4   CD A3 48               CALL   execStr   
1BA7   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1BB6   CD BB 0A               CALL   flushBuffer   
1BB9                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1BB9   E1                     POP   HL   
1BBA   E5                     PUSH   HL   
1BBB   11 06 00               LD   DE,6   
1BBE   B7                     OR   A   
1BBF   ED 52                  SBC   HL,DE   
1BC1   7D                     LD   A,L   
1BC2   B4                     OR   H   
1BC3   CA 2C 1C               JP   Z,expectM_0_2656S45   
1BC6   CD 33 0B               CALL   printStr   
1BC9   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1BDE   CD 33 0B               CALL   printStr   
1BE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BF0   21 06 00               LD   hl,6   
1BF3   E5                     PUSH   hl   
1BF4   E5                     PUSH   hl   
1BF5   CD 52 0C               CALL   run   
1BF8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C00   CD BB 0A               CALL   flushBuffer   
1C03   CD 33 0B               CALL   printStr   
1C06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C13   E1                     POP   hl   
1C14   E5                     PUSH   hl   
1C15   E5                     PUSH   hl   
1C16   CD 52 0C               CALL   run   
1C19   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C28   CD BB 0A               CALL   flushBuffer   
1C2B   76                     HALT      
1C2C                EXPECTM_0_2656S45:      
1C2C   E1                     POP   HL   
1C2D                          ;*Macro unroll:  test "2 3 *", 6
1C2D   31 00 4A               LD   SP,STACK   
1C30   CD 7B 0B               CALL   coldInit   
1C33   CD A3 48               CALL   execStr   
1C36   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1C3C   CD BB 0A               CALL   flushBuffer   
1C3F                          ;*Macro unroll:  expect "2 3 *",6
1C3F   E1                     POP   HL   
1C40   E5                     PUSH   HL   
1C41   11 06 00               LD   DE,6   
1C44   B7                     OR   A   
1C45   ED 52                  SBC   HL,DE   
1C47   7D                     LD   A,L   
1C48   B4                     OR   H   
1C49   CA A9 1C               JP   Z,expectM_0_2657S45   
1C4C   CD 33 0B               CALL   printStr   
1C4F   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1C5B   CD 33 0B               CALL   printStr   
1C5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C6D   21 06 00               LD   hl,6   
1C70   E5                     PUSH   hl   
1C71   E5                     PUSH   hl   
1C72   CD 52 0C               CALL   run   
1C75   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C7D   CD BB 0A               CALL   flushBuffer   
1C80   CD 33 0B               CALL   printStr   
1C83   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C90   E1                     POP   hl   
1C91   E5                     PUSH   hl   
1C92   E5                     PUSH   hl   
1C93   CD 52 0C               CALL   run   
1C96   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CA5   CD BB 0A               CALL   flushBuffer   
1CA8   76                     HALT      
1CA9                EXPECTM_0_2657S45:      
1CA9   E1                     POP   HL   
1CAA                          ;*Macro unroll:  test "1 2 3 + *", 5
1CAA   31 00 4A               LD   SP,STACK   
1CAD   CD 7B 0B               CALL   coldInit   
1CB0   CD A3 48               CALL   execStr   
1CB3   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1CBD   CD BB 0A               CALL   flushBuffer   
1CC0                          ;*Macro unroll:  expect "1 2 3 + *",5
1CC0   E1                     POP   HL   
1CC1   E5                     PUSH   HL   
1CC2   11 05 00               LD   DE,5   
1CC5   B7                     OR   A   
1CC6   ED 52                  SBC   HL,DE   
1CC8   7D                     LD   A,L   
1CC9   B4                     OR   H   
1CCA   CA 2E 1D               JP   Z,expectM_0_2658S45   
1CCD   CD 33 0B               CALL   printStr   
1CD0   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1CE0   CD 33 0B               CALL   printStr   
1CE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CF2   21 05 00               LD   hl,5   
1CF5   E5                     PUSH   hl   
1CF6   E5                     PUSH   hl   
1CF7   CD 52 0C               CALL   run   
1CFA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D02   CD BB 0A               CALL   flushBuffer   
1D05   CD 33 0B               CALL   printStr   
1D08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D15   E1                     POP   hl   
1D16   E5                     PUSH   hl   
1D17   E5                     PUSH   hl   
1D18   CD 52 0C               CALL   run   
1D1B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D2A   CD BB 0A               CALL   flushBuffer   
1D2D   76                     HALT      
1D2E                EXPECTM_0_2658S45:      
1D2E   E1                     POP   HL   
1D2F                          ;*Macro unroll:  test "7 3 /", 2
1D2F   31 00 4A               LD   SP,STACK   
1D32   CD 7B 0B               CALL   coldInit   
1D35   CD A3 48               CALL   execStr   
1D38   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1D3E   CD BB 0A               CALL   flushBuffer   
1D41                          ;*Macro unroll:  expect "7 3 /",2
1D41   E1                     POP   HL   
1D42   E5                     PUSH   HL   
1D43   11 02 00               LD   DE,2   
1D46   B7                     OR   A   
1D47   ED 52                  SBC   HL,DE   
1D49   7D                     LD   A,L   
1D4A   B4                     OR   H   
1D4B   CA AB 1D               JP   Z,expectM_0_2659S45   
1D4E   CD 33 0B               CALL   printStr   
1D51   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1D5D   CD 33 0B               CALL   printStr   
1D60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D6F   21 02 00               LD   hl,2   
1D72   E5                     PUSH   hl   
1D73   E5                     PUSH   hl   
1D74   CD 52 0C               CALL   run   
1D77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D7F   CD BB 0A               CALL   flushBuffer   
1D82   CD 33 0B               CALL   printStr   
1D85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D92   E1                     POP   hl   
1D93   E5                     PUSH   hl   
1D94   E5                     PUSH   hl   
1D95   CD 52 0C               CALL   run   
1D98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DA7   CD BB 0A               CALL   flushBuffer   
1DAA   76                     HALT      
1DAB                EXPECTM_0_2659S45:      
1DAB   E1                     POP   HL   
1DAC                          ;*Macro unroll:  test "7 3 / /re", 1
1DAC   31 00 4A               LD   SP,STACK   
1DAF   CD 7B 0B               CALL   coldInit   
1DB2   CD A3 48               CALL   execStr   
1DB5   37 20 33 20 2F 20 2F 72 65 00 .CSTR   "7 3 / /re"   
1DBF   CD BB 0A               CALL   flushBuffer   
1DC2                          ;*Macro unroll:  expect "7 3 / /re",1
1DC2   E1                     POP   HL   
1DC3   E5                     PUSH   HL   
1DC4   11 01 00               LD   DE,1   
1DC7   B7                     OR   A   
1DC8   ED 52                  SBC   HL,DE   
1DCA   7D                     LD   A,L   
1DCB   B4                     OR   H   
1DCC   CA 30 1E               JP   Z,expectM_0_2660S45   
1DCF   CD 33 0B               CALL   printStr   
1DD2   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
1DE2   CD 33 0B               CALL   printStr   
1DE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DF4   21 01 00               LD   hl,1   
1DF7   E5                     PUSH   hl   
1DF8   E5                     PUSH   hl   
1DF9   CD 52 0C               CALL   run   
1DFC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E04   CD BB 0A               CALL   flushBuffer   
1E07   CD 33 0B               CALL   printStr   
1E0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E17   E1                     POP   hl   
1E18   E5                     PUSH   hl   
1E19   E5                     PUSH   hl   
1E1A   CD 52 0C               CALL   run   
1E1D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E2C   CD BB 0A               CALL   flushBuffer   
1E2F   76                     HALT      
1E30                EXPECTM_0_2660S45:      
1E30   E1                     POP   HL   
1E31                          ;*Macro unroll:  test "7 3 /", 2
1E31   31 00 4A               LD   SP,STACK   
1E34   CD 7B 0B               CALL   coldInit   
1E37   CD A3 48               CALL   execStr   
1E3A   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1E40   CD BB 0A               CALL   flushBuffer   
1E43                          ;*Macro unroll:  expect "7 3 /",2
1E43   E1                     POP   HL   
1E44   E5                     PUSH   HL   
1E45   11 02 00               LD   DE,2   
1E48   B7                     OR   A   
1E49   ED 52                  SBC   HL,DE   
1E4B   7D                     LD   A,L   
1E4C   B4                     OR   H   
1E4D   CA AD 1E               JP   Z,expectM_0_2661S45   
1E50   CD 33 0B               CALL   printStr   
1E53   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1E5F   CD 33 0B               CALL   printStr   
1E62   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E71   21 02 00               LD   hl,2   
1E74   E5                     PUSH   hl   
1E75   E5                     PUSH   hl   
1E76   CD 52 0C               CALL   run   
1E79   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E81   CD BB 0A               CALL   flushBuffer   
1E84   CD 33 0B               CALL   printStr   
1E87   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E94   E1                     POP   hl   
1E95   E5                     PUSH   hl   
1E96   E5                     PUSH   hl   
1E97   CD 52 0C               CALL   run   
1E9A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1EA9   CD BB 0A               CALL   flushBuffer   
1EAC   76                     HALT      
1EAD                EXPECTM_0_2661S45:      
1EAD   E1                     POP   HL   
1EAE                          ;*Macro unroll:  test "2 3 ==", FALSE
1EAE   31 00 4A               LD   SP,STACK   
1EB1   CD 7B 0B               CALL   coldInit   
1EB4   CD A3 48               CALL   execStr   
1EB7   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1EBE   CD BB 0A               CALL   flushBuffer   
1EC1                          ;*Macro unroll:  expect "2 3 ==",FALSE
1EC1   E1                     POP   HL   
1EC2   E5                     PUSH   HL   
1EC3   11 00 00               LD   DE,FALSE   
1EC6   B7                     OR   A   
1EC7   ED 52                  SBC   HL,DE   
1EC9   7D                     LD   A,L   
1ECA   B4                     OR   H   
1ECB   CA 2C 1F               JP   Z,expectM_0_2662S45   
1ECE   CD 33 0B               CALL   printStr   
1ED1   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1EDE   CD 33 0B               CALL   printStr   
1EE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EF0   21 00 00               LD   hl,FALSE   
1EF3   E5                     PUSH   hl   
1EF4   E5                     PUSH   hl   
1EF5   CD 52 0C               CALL   run   
1EF8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F00   CD BB 0A               CALL   flushBuffer   
1F03   CD 33 0B               CALL   printStr   
1F06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F13   E1                     POP   hl   
1F14   E5                     PUSH   hl   
1F15   E5                     PUSH   hl   
1F16   CD 52 0C               CALL   run   
1F19   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F28   CD BB 0A               CALL   flushBuffer   
1F2B   76                     HALT      
1F2C                EXPECTM_0_2662S45:      
1F2C   E1                     POP   HL   
1F2D                          ;*Macro unroll:  test "3 3 ==", TRUE
1F2D   31 00 4A               LD   SP,STACK   
1F30   CD 7B 0B               CALL   coldInit   
1F33   CD A3 48               CALL   execStr   
1F36   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1F3D   CD BB 0A               CALL   flushBuffer   
1F40                          ;*Macro unroll:  expect "3 3 ==",TRUE
1F40   E1                     POP   HL   
1F41   E5                     PUSH   HL   
1F42   11 FF FF               LD   DE,TRUE   
1F45   B7                     OR   A   
1F46   ED 52                  SBC   HL,DE   
1F48   7D                     LD   A,L   
1F49   B4                     OR   H   
1F4A   CA AB 1F               JP   Z,expectM_0_2663S45   
1F4D   CD 33 0B               CALL   printStr   
1F50   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1F5D   CD 33 0B               CALL   printStr   
1F60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F6F   21 FF FF               LD   hl,TRUE   
1F72   E5                     PUSH   hl   
1F73   E5                     PUSH   hl   
1F74   CD 52 0C               CALL   run   
1F77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F7F   CD BB 0A               CALL   flushBuffer   
1F82   CD 33 0B               CALL   printStr   
1F85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F92   E1                     POP   hl   
1F93   E5                     PUSH   hl   
1F94   E5                     PUSH   hl   
1F95   CD 52 0C               CALL   run   
1F98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FA7   CD BB 0A               CALL   flushBuffer   
1FAA   76                     HALT      
1FAB                EXPECTM_0_2663S45:      
1FAB   E1                     POP   HL   
1FAC                          ;*Macro unroll:  test "1 2 <", TRUE
1FAC   31 00 4A               LD   SP,STACK   
1FAF   CD 7B 0B               CALL   coldInit   
1FB2   CD A3 48               CALL   execStr   
1FB5   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1FBB   CD BB 0A               CALL   flushBuffer   
1FBE                          ;*Macro unroll:  expect "1 2 <",TRUE
1FBE   E1                     POP   HL   
1FBF   E5                     PUSH   HL   
1FC0   11 FF FF               LD   DE,TRUE   
1FC3   B7                     OR   A   
1FC4   ED 52                  SBC   HL,DE   
1FC6   7D                     LD   A,L   
1FC7   B4                     OR   H   
1FC8   CA 28 20               JP   Z,expectM_0_2664S45   
1FCB   CD 33 0B               CALL   printStr   
1FCE   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1FDA   CD 33 0B               CALL   printStr   
1FDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FEC   21 FF FF               LD   hl,TRUE   
1FEF   E5                     PUSH   hl   
1FF0   E5                     PUSH   hl   
1FF1   CD 52 0C               CALL   run   
1FF4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FFC   CD BB 0A               CALL   flushBuffer   
1FFF   CD 33 0B               CALL   printStr   
2002   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
200F   E1                     POP   hl   
2010   E5                     PUSH   hl   
2011   E5                     PUSH   hl   
2012   CD 52 0C               CALL   run   
2015   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2024   CD BB 0A               CALL   flushBuffer   
2027   76                     HALT      
2028                EXPECTM_0_2664S45:      
2028   E1                     POP   HL   
2029                          ;*Macro unroll:  test "2 1 <", FALSE
2029   31 00 4A               LD   SP,STACK   
202C   CD 7B 0B               CALL   coldInit   
202F   CD A3 48               CALL   execStr   
2032   32 20 31 20 3C 00      .CSTR   "2 1 <"   
2038   CD BB 0A               CALL   flushBuffer   
203B                          ;*Macro unroll:  expect "2 1 <",FALSE
203B   E1                     POP   HL   
203C   E5                     PUSH   HL   
203D   11 00 00               LD   DE,FALSE   
2040   B7                     OR   A   
2041   ED 52                  SBC   HL,DE   
2043   7D                     LD   A,L   
2044   B4                     OR   H   
2045   CA A5 20               JP   Z,expectM_0_2665S45   
2048   CD 33 0B               CALL   printStr   
204B   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2057   CD 33 0B               CALL   printStr   
205A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2069   21 00 00               LD   hl,FALSE   
206C   E5                     PUSH   hl   
206D   E5                     PUSH   hl   
206E   CD 52 0C               CALL   run   
2071   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2079   CD BB 0A               CALL   flushBuffer   
207C   CD 33 0B               CALL   printStr   
207F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
208C   E1                     POP   hl   
208D   E5                     PUSH   hl   
208E   E5                     PUSH   hl   
208F   CD 52 0C               CALL   run   
2092   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20A1   CD BB 0A               CALL   flushBuffer   
20A4   76                     HALT      
20A5                EXPECTM_0_2665S45:      
20A5   E1                     POP   HL   
20A6                          ;*Macro unroll:  test "2 3 <", TRUE
20A6   31 00 4A               LD   SP,STACK   
20A9   CD 7B 0B               CALL   coldInit   
20AC   CD A3 48               CALL   execStr   
20AF   32 20 33 20 3C 00      .CSTR   "2 3 <"   
20B5   CD BB 0A               CALL   flushBuffer   
20B8                          ;*Macro unroll:  expect "2 3 <",TRUE
20B8   E1                     POP   HL   
20B9   E5                     PUSH   HL   
20BA   11 FF FF               LD   DE,TRUE   
20BD   B7                     OR   A   
20BE   ED 52                  SBC   HL,DE   
20C0   7D                     LD   A,L   
20C1   B4                     OR   H   
20C2   CA 22 21               JP   Z,expectM_0_2666S45   
20C5   CD 33 0B               CALL   printStr   
20C8   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
20D4   CD 33 0B               CALL   printStr   
20D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20E6   21 FF FF               LD   hl,TRUE   
20E9   E5                     PUSH   hl   
20EA   E5                     PUSH   hl   
20EB   CD 52 0C               CALL   run   
20EE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20F6   CD BB 0A               CALL   flushBuffer   
20F9   CD 33 0B               CALL   printStr   
20FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2109   E1                     POP   hl   
210A   E5                     PUSH   hl   
210B   E5                     PUSH   hl   
210C   CD 52 0C               CALL   run   
210F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
211E   CD BB 0A               CALL   flushBuffer   
2121   76                     HALT      
2122                EXPECTM_0_2666S45:      
2122   E1                     POP   HL   
2123                          ;*Macro unroll:  test "3 3 <", FALSE
2123   31 00 4A               LD   SP,STACK   
2126   CD 7B 0B               CALL   coldInit   
2129   CD A3 48               CALL   execStr   
212C   33 20 33 20 3C 00      .CSTR   "3 3 <"   
2132   CD BB 0A               CALL   flushBuffer   
2135                          ;*Macro unroll:  expect "3 3 <",FALSE
2135   E1                     POP   HL   
2136   E5                     PUSH   HL   
2137   11 00 00               LD   DE,FALSE   
213A   B7                     OR   A   
213B   ED 52                  SBC   HL,DE   
213D   7D                     LD   A,L   
213E   B4                     OR   H   
213F   CA 9F 21               JP   Z,expectM_0_2667S45   
2142   CD 33 0B               CALL   printStr   
2145   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2151   CD 33 0B               CALL   printStr   
2154   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2163   21 00 00               LD   hl,FALSE   
2166   E5                     PUSH   hl   
2167   E5                     PUSH   hl   
2168   CD 52 0C               CALL   run   
216B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2173   CD BB 0A               CALL   flushBuffer   
2176   CD 33 0B               CALL   printStr   
2179   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2186   E1                     POP   hl   
2187   E5                     PUSH   hl   
2188   E5                     PUSH   hl   
2189   CD 52 0C               CALL   run   
218C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
219B   CD BB 0A               CALL   flushBuffer   
219E   76                     HALT      
219F                EXPECTM_0_2667S45:      
219F   E1                     POP   HL   
21A0                          ;*Macro unroll:  test "1 2 >", FALSE
21A0   31 00 4A               LD   SP,STACK   
21A3   CD 7B 0B               CALL   coldInit   
21A6   CD A3 48               CALL   execStr   
21A9   31 20 32 20 3E 00      .CSTR   "1 2 >"   
21AF   CD BB 0A               CALL   flushBuffer   
21B2                          ;*Macro unroll:  expect "1 2 >",FALSE
21B2   E1                     POP   HL   
21B3   E5                     PUSH   HL   
21B4   11 00 00               LD   DE,FALSE   
21B7   B7                     OR   A   
21B8   ED 52                  SBC   HL,DE   
21BA   7D                     LD   A,L   
21BB   B4                     OR   H   
21BC   CA 1C 22               JP   Z,expectM_0_2668S45   
21BF   CD 33 0B               CALL   printStr   
21C2   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
21CE   CD 33 0B               CALL   printStr   
21D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21E0   21 00 00               LD   hl,FALSE   
21E3   E5                     PUSH   hl   
21E4   E5                     PUSH   hl   
21E5   CD 52 0C               CALL   run   
21E8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21F0   CD BB 0A               CALL   flushBuffer   
21F3   CD 33 0B               CALL   printStr   
21F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2203   E1                     POP   hl   
2204   E5                     PUSH   hl   
2205   E5                     PUSH   hl   
2206   CD 52 0C               CALL   run   
2209   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2218   CD BB 0A               CALL   flushBuffer   
221B   76                     HALT      
221C                EXPECTM_0_2668S45:      
221C   E1                     POP   HL   
221D                          ;*Macro unroll:  test "2 1 >", TRUE
221D   31 00 4A               LD   SP,STACK   
2220   CD 7B 0B               CALL   coldInit   
2223   CD A3 48               CALL   execStr   
2226   32 20 31 20 3E 00      .CSTR   "2 1 >"   
222C   CD BB 0A               CALL   flushBuffer   
222F                          ;*Macro unroll:  expect "2 1 >",TRUE
222F   E1                     POP   HL   
2230   E5                     PUSH   HL   
2231   11 FF FF               LD   DE,TRUE   
2234   B7                     OR   A   
2235   ED 52                  SBC   HL,DE   
2237   7D                     LD   A,L   
2238   B4                     OR   H   
2239   CA 99 22               JP   Z,expectM_0_2669S45   
223C   CD 33 0B               CALL   printStr   
223F   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
224B   CD 33 0B               CALL   printStr   
224E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
225D   21 FF FF               LD   hl,TRUE   
2260   E5                     PUSH   hl   
2261   E5                     PUSH   hl   
2262   CD 52 0C               CALL   run   
2265   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
226D   CD BB 0A               CALL   flushBuffer   
2270   CD 33 0B               CALL   printStr   
2273   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2280   E1                     POP   hl   
2281   E5                     PUSH   hl   
2282   E5                     PUSH   hl   
2283   CD 52 0C               CALL   run   
2286   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2295   CD BB 0A               CALL   flushBuffer   
2298   76                     HALT      
2299                EXPECTM_0_2669S45:      
2299   E1                     POP   HL   
229A                          ;*Macro unroll:  test "3 3 >", FALSE
229A   31 00 4A               LD   SP,STACK   
229D   CD 7B 0B               CALL   coldInit   
22A0   CD A3 48               CALL   execStr   
22A3   33 20 33 20 3E 00      .CSTR   "3 3 >"   
22A9   CD BB 0A               CALL   flushBuffer   
22AC                          ;*Macro unroll:  expect "3 3 >",FALSE
22AC   E1                     POP   HL   
22AD   E5                     PUSH   HL   
22AE   11 00 00               LD   DE,FALSE   
22B1   B7                     OR   A   
22B2   ED 52                  SBC   HL,DE   
22B4   7D                     LD   A,L   
22B5   B4                     OR   H   
22B6   CA 16 23               JP   Z,expectM_0_2670S45   
22B9   CD 33 0B               CALL   printStr   
22BC   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
22C8   CD 33 0B               CALL   printStr   
22CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22DA   21 00 00               LD   hl,FALSE   
22DD   E5                     PUSH   hl   
22DE   E5                     PUSH   hl   
22DF   CD 52 0C               CALL   run   
22E2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22EA   CD BB 0A               CALL   flushBuffer   
22ED   CD 33 0B               CALL   printStr   
22F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22FD   E1                     POP   hl   
22FE   E5                     PUSH   hl   
22FF   E5                     PUSH   hl   
2300   CD 52 0C               CALL   run   
2303   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2312   CD BB 0A               CALL   flushBuffer   
2315   76                     HALT      
2316                EXPECTM_0_2670S45:      
2316   E1                     POP   HL   
2317                          ;*Macro unroll:  test "4 3 >", TRUE
2317   31 00 4A               LD   SP,STACK   
231A   CD 7B 0B               CALL   coldInit   
231D   CD A3 48               CALL   execStr   
2320   34 20 33 20 3E 00      .CSTR   "4 3 >"   
2326   CD BB 0A               CALL   flushBuffer   
2329                          ;*Macro unroll:  expect "4 3 >",TRUE
2329   E1                     POP   HL   
232A   E5                     PUSH   HL   
232B   11 FF FF               LD   DE,TRUE   
232E   B7                     OR   A   
232F   ED 52                  SBC   HL,DE   
2331   7D                     LD   A,L   
2332   B4                     OR   H   
2333   CA 93 23               JP   Z,expectM_0_2671S45   
2336   CD 33 0B               CALL   printStr   
2339   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2345   CD 33 0B               CALL   printStr   
2348   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2357   21 FF FF               LD   hl,TRUE   
235A   E5                     PUSH   hl   
235B   E5                     PUSH   hl   
235C   CD 52 0C               CALL   run   
235F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2367   CD BB 0A               CALL   flushBuffer   
236A   CD 33 0B               CALL   printStr   
236D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
237A   E1                     POP   hl   
237B   E5                     PUSH   hl   
237C   E5                     PUSH   hl   
237D   CD 52 0C               CALL   run   
2380   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
238F   CD BB 0A               CALL   flushBuffer   
2392   76                     HALT      
2393                EXPECTM_0_2671S45:      
2393   E1                     POP   HL   
2394                          ;*Macro unroll:  test "2 2 <=", TRUE
2394   31 00 4A               LD   SP,STACK   
2397   CD 7B 0B               CALL   coldInit   
239A   CD A3 48               CALL   execStr   
239D   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
23A4   CD BB 0A               CALL   flushBuffer   
23A7                          ;*Macro unroll:  expect "2 2 <=",TRUE
23A7   E1                     POP   HL   
23A8   E5                     PUSH   HL   
23A9   11 FF FF               LD   DE,TRUE   
23AC   B7                     OR   A   
23AD   ED 52                  SBC   HL,DE   
23AF   7D                     LD   A,L   
23B0   B4                     OR   H   
23B1   CA 12 24               JP   Z,expectM_0_2672S45   
23B4   CD 33 0B               CALL   printStr   
23B7   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
23C4   CD 33 0B               CALL   printStr   
23C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D6   21 FF FF               LD   hl,TRUE   
23D9   E5                     PUSH   hl   
23DA   E5                     PUSH   hl   
23DB   CD 52 0C               CALL   run   
23DE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23E6   CD BB 0A               CALL   flushBuffer   
23E9   CD 33 0B               CALL   printStr   
23EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23F9   E1                     POP   hl   
23FA   E5                     PUSH   hl   
23FB   E5                     PUSH   hl   
23FC   CD 52 0C               CALL   run   
23FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
240E   CD BB 0A               CALL   flushBuffer   
2411   76                     HALT      
2412                EXPECTM_0_2672S45:      
2412   E1                     POP   HL   
2413                          ;*Macro unroll:  test "2 2 >=", TRUE
2413   31 00 4A               LD   SP,STACK   
2416   CD 7B 0B               CALL   coldInit   
2419   CD A3 48               CALL   execStr   
241C   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2423   CD BB 0A               CALL   flushBuffer   
2426                          ;*Macro unroll:  expect "2 2 >=",TRUE
2426   E1                     POP   HL   
2427   E5                     PUSH   HL   
2428   11 FF FF               LD   DE,TRUE   
242B   B7                     OR   A   
242C   ED 52                  SBC   HL,DE   
242E   7D                     LD   A,L   
242F   B4                     OR   H   
2430   CA 91 24               JP   Z,expectM_0_2673S45   
2433   CD 33 0B               CALL   printStr   
2436   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2443   CD 33 0B               CALL   printStr   
2446   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2455   21 FF FF               LD   hl,TRUE   
2458   E5                     PUSH   hl   
2459   E5                     PUSH   hl   
245A   CD 52 0C               CALL   run   
245D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2465   CD BB 0A               CALL   flushBuffer   
2468   CD 33 0B               CALL   printStr   
246B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2478   E1                     POP   hl   
2479   E5                     PUSH   hl   
247A   E5                     PUSH   hl   
247B   CD 52 0C               CALL   run   
247E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
248D   CD BB 0A               CALL   flushBuffer   
2490   76                     HALT      
2491                EXPECTM_0_2673S45:      
2491   E1                     POP   HL   
2492                          ;*Macro unroll:  test "3 1 <<", 6
2492   31 00 4A               LD   SP,STACK   
2495   CD 7B 0B               CALL   coldInit   
2498   CD A3 48               CALL   execStr   
249B   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
24A2   CD BB 0A               CALL   flushBuffer   
24A5                          ;*Macro unroll:  expect "3 1 <<",6
24A5   E1                     POP   HL   
24A6   E5                     PUSH   HL   
24A7   11 06 00               LD   DE,6   
24AA   B7                     OR   A   
24AB   ED 52                  SBC   HL,DE   
24AD   7D                     LD   A,L   
24AE   B4                     OR   H   
24AF   CA 10 25               JP   Z,expectM_0_2674S45   
24B2   CD 33 0B               CALL   printStr   
24B5   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
24C2   CD 33 0B               CALL   printStr   
24C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24D4   21 06 00               LD   hl,6   
24D7   E5                     PUSH   hl   
24D8   E5                     PUSH   hl   
24D9   CD 52 0C               CALL   run   
24DC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24E4   CD BB 0A               CALL   flushBuffer   
24E7   CD 33 0B               CALL   printStr   
24EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24F7   E1                     POP   hl   
24F8   E5                     PUSH   hl   
24F9   E5                     PUSH   hl   
24FA   CD 52 0C               CALL   run   
24FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
250C   CD BB 0A               CALL   flushBuffer   
250F   76                     HALT      
2510                EXPECTM_0_2674S45:      
2510   E1                     POP   HL   
2511                          ;*Macro unroll:  test "10 1 >>", 5
2511   31 00 4A               LD   SP,STACK   
2514   CD 7B 0B               CALL   coldInit   
2517   CD A3 48               CALL   execStr   
251A   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2522   CD BB 0A               CALL   flushBuffer   
2525                          ;*Macro unroll:  expect "10 1 >>",5
2525   E1                     POP   HL   
2526   E5                     PUSH   HL   
2527   11 05 00               LD   DE,5   
252A   B7                     OR   A   
252B   ED 52                  SBC   HL,DE   
252D   7D                     LD   A,L   
252E   B4                     OR   H   
252F   CA 91 25               JP   Z,expectM_0_2675S45   
2532   CD 33 0B               CALL   printStr   
2535   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2543   CD 33 0B               CALL   printStr   
2546   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2555   21 05 00               LD   hl,5   
2558   E5                     PUSH   hl   
2559   E5                     PUSH   hl   
255A   CD 52 0C               CALL   run   
255D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2565   CD BB 0A               CALL   flushBuffer   
2568   CD 33 0B               CALL   printStr   
256B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2578   E1                     POP   hl   
2579   E5                     PUSH   hl   
257A   E5                     PUSH   hl   
257B   CD 52 0C               CALL   run   
257E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
258D   CD BB 0A               CALL   flushBuffer   
2590   76                     HALT      
2591                EXPECTM_0_2675S45:      
2591   E1                     POP   HL   
2592                          ;*Macro unroll:  test "1 x = x", 1
2592   31 00 4A               LD   SP,STACK   
2595   CD 7B 0B               CALL   coldInit   
2598   CD A3 48               CALL   execStr   
259B   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
25A3   CD BB 0A               CALL   flushBuffer   
25A6                          ;*Macro unroll:  expect "1 x = x",1
25A6   E1                     POP   HL   
25A7   E5                     PUSH   HL   
25A8   11 01 00               LD   DE,1   
25AB   B7                     OR   A   
25AC   ED 52                  SBC   HL,DE   
25AE   7D                     LD   A,L   
25AF   B4                     OR   H   
25B0   CA 12 26               JP   Z,expectM_0_2676S45   
25B3   CD 33 0B               CALL   printStr   
25B6   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
25C4   CD 33 0B               CALL   printStr   
25C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25D6   21 01 00               LD   hl,1   
25D9   E5                     PUSH   hl   
25DA   E5                     PUSH   hl   
25DB   CD 52 0C               CALL   run   
25DE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25E6   CD BB 0A               CALL   flushBuffer   
25E9   CD 33 0B               CALL   printStr   
25EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25F9   E1                     POP   hl   
25FA   E5                     PUSH   hl   
25FB   E5                     PUSH   hl   
25FC   CD 52 0C               CALL   run   
25FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
260E   CD BB 0A               CALL   flushBuffer   
2611   76                     HALT      
2612                EXPECTM_0_2676S45:      
2612   E1                     POP   HL   
2613                          ;*Macro unroll:  test "1{}^", 1
2613   31 00 4A               LD   SP,STACK   
2616   CD 7B 0B               CALL   coldInit   
2619   CD A3 48               CALL   execStr   
261C   31 7B 7D 5E 00         .CSTR   "1{}^"   
2621   CD BB 0A               CALL   flushBuffer   
2624                          ;*Macro unroll:  expect "1{}^",1
2624   E1                     POP   HL   
2625   E5                     PUSH   HL   
2626   11 01 00               LD   DE,1   
2629   B7                     OR   A   
262A   ED 52                  SBC   HL,DE   
262C   7D                     LD   A,L   
262D   B4                     OR   H   
262E   CA 8D 26               JP   Z,expectM_0_2677S45   
2631   CD 33 0B               CALL   printStr   
2634   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
263F   CD 33 0B               CALL   printStr   
2642   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2651   21 01 00               LD   hl,1   
2654   E5                     PUSH   hl   
2655   E5                     PUSH   hl   
2656   CD 52 0C               CALL   run   
2659   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2661   CD BB 0A               CALL   flushBuffer   
2664   CD 33 0B               CALL   printStr   
2667   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2674   E1                     POP   hl   
2675   E5                     PUSH   hl   
2676   E5                     PUSH   hl   
2677   CD 52 0C               CALL   run   
267A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2689   CD BB 0A               CALL   flushBuffer   
268C   76                     HALT      
268D                EXPECTM_0_2677S45:      
268D   E1                     POP   HL   
268E                          ;*Macro unroll:  test "{1}^", 1
268E   31 00 4A               LD   SP,STACK   
2691   CD 7B 0B               CALL   coldInit   
2694   CD A3 48               CALL   execStr   
2697   7B 31 7D 5E 00         .CSTR   "{1}^"   
269C   CD BB 0A               CALL   flushBuffer   
269F                          ;*Macro unroll:  expect "{1}^",1
269F   E1                     POP   HL   
26A0   E5                     PUSH   HL   
26A1   11 01 00               LD   DE,1   
26A4   B7                     OR   A   
26A5   ED 52                  SBC   HL,DE   
26A7   7D                     LD   A,L   
26A8   B4                     OR   H   
26A9   CA 08 27               JP   Z,expectM_0_2678S45   
26AC   CD 33 0B               CALL   printStr   
26AF   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
26BA   CD 33 0B               CALL   printStr   
26BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26CC   21 01 00               LD   hl,1   
26CF   E5                     PUSH   hl   
26D0   E5                     PUSH   hl   
26D1   CD 52 0C               CALL   run   
26D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26DC   CD BB 0A               CALL   flushBuffer   
26DF   CD 33 0B               CALL   printStr   
26E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26EF   E1                     POP   hl   
26F0   E5                     PUSH   hl   
26F1   E5                     PUSH   hl   
26F2   CD 52 0C               CALL   run   
26F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2704   CD BB 0A               CALL   flushBuffer   
2707   76                     HALT      
2708                EXPECTM_0_2678S45:      
2708   E1                     POP   HL   
2709                          ;*Macro unroll:  test "{{1}^}^", 1
2709   31 00 4A               LD   SP,STACK   
270C   CD 7B 0B               CALL   coldInit   
270F   CD A3 48               CALL   execStr   
2712   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
271A   CD BB 0A               CALL   flushBuffer   
271D                          ;*Macro unroll:  expect "{{1}^}^",1
271D   E1                     POP   HL   
271E   E5                     PUSH   HL   
271F   11 01 00               LD   DE,1   
2722   B7                     OR   A   
2723   ED 52                  SBC   HL,DE   
2725   7D                     LD   A,L   
2726   B4                     OR   H   
2727   CA 89 27               JP   Z,expectM_0_2679S45   
272A   CD 33 0B               CALL   printStr   
272D   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
273B   CD 33 0B               CALL   printStr   
273E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
274D   21 01 00               LD   hl,1   
2750   E5                     PUSH   hl   
2751   E5                     PUSH   hl   
2752   CD 52 0C               CALL   run   
2755   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
275D   CD BB 0A               CALL   flushBuffer   
2760   CD 33 0B               CALL   printStr   
2763   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2770   E1                     POP   hl   
2771   E5                     PUSH   hl   
2772   E5                     PUSH   hl   
2773   CD 52 0C               CALL   run   
2776   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2785   CD BB 0A               CALL   flushBuffer   
2788   76                     HALT      
2789                EXPECTM_0_2679S45:      
2789   E1                     POP   HL   
278A                          ;*Macro unroll:  test "{{{1}^}^}^", 1
278A   31 00 4A               LD   SP,STACK   
278D   CD 7B 0B               CALL   coldInit   
2790   CD A3 48               CALL   execStr   
2793   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
279E   CD BB 0A               CALL   flushBuffer   
27A1                          ;*Macro unroll:  expect "{{{1}^}^}^",1
27A1   E1                     POP   HL   
27A2   E5                     PUSH   HL   
27A3   11 01 00               LD   DE,1   
27A6   B7                     OR   A   
27A7   ED 52                  SBC   HL,DE   
27A9   7D                     LD   A,L   
27AA   B4                     OR   H   
27AB   CA 10 28               JP   Z,expectM_0_2680S45   
27AE   CD 33 0B               CALL   printStr   
27B1   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
27C2   CD 33 0B               CALL   printStr   
27C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27D4   21 01 00               LD   hl,1   
27D7   E5                     PUSH   hl   
27D8   E5                     PUSH   hl   
27D9   CD 52 0C               CALL   run   
27DC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27E4   CD BB 0A               CALL   flushBuffer   
27E7   CD 33 0B               CALL   printStr   
27EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27F7   E1                     POP   hl   
27F8   E5                     PUSH   hl   
27F9   E5                     PUSH   hl   
27FA   CD 52 0C               CALL   run   
27FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
280C   CD BB 0A               CALL   flushBuffer   
280F   76                     HALT      
2810                EXPECTM_0_2680S45:      
2810   E1                     POP   HL   
2811                          ;*Macro unroll:  test "5 /f{10} ?", 5
2811   31 00 4A               LD   SP,STACK   
2814   CD 7B 0B               CALL   coldInit   
2817   CD A3 48               CALL   execStr   
281A   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
2825   CD BB 0A               CALL   flushBuffer   
2828                          ;*Macro unroll:  expect "5 /f{10} ?",5
2828   E1                     POP   HL   
2829   E5                     PUSH   HL   
282A   11 05 00               LD   DE,5   
282D   B7                     OR   A   
282E   ED 52                  SBC   HL,DE   
2830   7D                     LD   A,L   
2831   B4                     OR   H   
2832   CA 97 28               JP   Z,expectM_0_2681S45   
2835   CD 33 0B               CALL   printStr   
2838   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2849   CD 33 0B               CALL   printStr   
284C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
285B   21 05 00               LD   hl,5   
285E   E5                     PUSH   hl   
285F   E5                     PUSH   hl   
2860   CD 52 0C               CALL   run   
2863   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
286B   CD BB 0A               CALL   flushBuffer   
286E   CD 33 0B               CALL   printStr   
2871   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
287E   E1                     POP   hl   
287F   E5                     PUSH   hl   
2880   E5                     PUSH   hl   
2881   CD 52 0C               CALL   run   
2884   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2893   CD BB 0A               CALL   flushBuffer   
2896   76                     HALT      
2897                EXPECTM_0_2681S45:      
2897   E1                     POP   HL   
2898                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2898   31 00 4A               LD   SP,STACK   
289B   CD 7B 0B               CALL   coldInit   
289E   CD A3 48               CALL   execStr   
28A1   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
28AE   CD BB 0A               CALL   flushBuffer   
28B1                          ;*Macro unroll:  expect "5 /t{10} ? +",15
28B1   E1                     POP   HL   
28B2   E5                     PUSH   HL   
28B3   11 0F 00               LD   DE,15   
28B6   B7                     OR   A   
28B7   ED 52                  SBC   HL,DE   
28B9   7D                     LD   A,L   
28BA   B4                     OR   H   
28BB   CA 22 29               JP   Z,expectM_0_2682S45   
28BE   CD 33 0B               CALL   printStr   
28C1   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
28D4   CD 33 0B               CALL   printStr   
28D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28E6   21 0F 00               LD   hl,15   
28E9   E5                     PUSH   hl   
28EA   E5                     PUSH   hl   
28EB   CD 52 0C               CALL   run   
28EE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28F6   CD BB 0A               CALL   flushBuffer   
28F9   CD 33 0B               CALL   printStr   
28FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2909   E1                     POP   hl   
290A   E5                     PUSH   hl   
290B   E5                     PUSH   hl   
290C   CD 52 0C               CALL   run   
290F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
291E   CD BB 0A               CALL   flushBuffer   
2921   76                     HALT      
2922                EXPECTM_0_2682S45:      
2922   E1                     POP   HL   
2923                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2923   31 00 4A               LD   SP,STACK   
2926   CD 7B 0B               CALL   coldInit   
2929   CD A3 48               CALL   execStr   
292C   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
293E   CD BB 0A               CALL   flushBuffer   
2941                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
2941   E1                     POP   HL   
2942   E5                     PUSH   HL   
2943   11 15 00               LD   DE,21   
2946   B7                     OR   A   
2947   ED 52                  SBC   HL,DE   
2949   7D                     LD   A,L   
294A   B4                     OR   H   
294B   CA B7 29               JP   Z,expectM_0_2683S45   
294E   CD 33 0B               CALL   printStr   
2951   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2969   CD 33 0B               CALL   printStr   
296C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
297B   21 15 00               LD   hl,21   
297E   E5                     PUSH   hl   
297F   E5                     PUSH   hl   
2980   CD 52 0C               CALL   run   
2983   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
298B   CD BB 0A               CALL   flushBuffer   
298E   CD 33 0B               CALL   printStr   
2991   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
299E   E1                     POP   hl   
299F   E5                     PUSH   hl   
29A0   E5                     PUSH   hl   
29A1   CD 52 0C               CALL   run   
29A4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29B3   CD BB 0A               CALL   flushBuffer   
29B6   76                     HALT      
29B7                EXPECTM_0_2683S45:      
29B7   E1                     POP   HL   
29B8                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
29B8   31 00 4A               LD   SP,STACK   
29BB   CD 7B 0B               CALL   coldInit   
29BE   CD A3 48               CALL   execStr   
29C1   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
29D3   CD BB 0A               CALL   flushBuffer   
29D6                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
29D6   E1                     POP   HL   
29D7   E5                     PUSH   HL   
29D8   11 0B 00               LD   DE,11   
29DB   B7                     OR   A   
29DC   ED 52                  SBC   HL,DE   
29DE   7D                     LD   A,L   
29DF   B4                     OR   H   
29E0   CA 4C 2A               JP   Z,expectM_0_2684S45   
29E3   CD 33 0B               CALL   printStr   
29E6   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
29FE   CD 33 0B               CALL   printStr   
2A01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A10   21 0B 00               LD   hl,11   
2A13   E5                     PUSH   hl   
2A14   E5                     PUSH   hl   
2A15   CD 52 0C               CALL   run   
2A18   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A20   CD BB 0A               CALL   flushBuffer   
2A23   CD 33 0B               CALL   printStr   
2A26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A33   E1                     POP   hl   
2A34   E5                     PUSH   hl   
2A35   E5                     PUSH   hl   
2A36   CD 52 0C               CALL   run   
2A39   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A48   CD BB 0A               CALL   flushBuffer   
2A4B   76                     HALT      
2A4C                EXPECTM_0_2684S45:      
2A4C   E1                     POP   HL   
2A4D                          ;*Macro unroll:  test ": 0#", $0000
2A4D   31 00 4A               LD   SP,STACK   
2A50   CD 7B 0B               CALL   coldInit   
2A53   CD A3 48               CALL   execStr   
2A56   3A 20 30 23 00         .CSTR   ": 0#"   
2A5B   CD BB 0A               CALL   flushBuffer   
2A5E                          ;*Macro unroll:  expect ": 0#",$0000
2A5E   E1                     POP   HL   
2A5F   E5                     PUSH   HL   
2A60   11 00 00               LD   DE,$0000   
2A63   B7                     OR   A   
2A64   ED 52                  SBC   HL,DE   
2A66   7D                     LD   A,L   
2A67   B4                     OR   H   
2A68   CA C7 2A               JP   Z,expectM_0_2685S45   
2A6B   CD 33 0B               CALL   printStr   
2A6E   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
2A79   CD 33 0B               CALL   printStr   
2A7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A8B   21 00 00               LD   hl,$0000   
2A8E   E5                     PUSH   hl   
2A8F   E5                     PUSH   hl   
2A90   CD 52 0C               CALL   run   
2A93   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A9B   CD BB 0A               CALL   flushBuffer   
2A9E   CD 33 0B               CALL   printStr   
2AA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AAE   E1                     POP   hl   
2AAF   E5                     PUSH   hl   
2AB0   E5                     PUSH   hl   
2AB1   CD 52 0C               CALL   run   
2AB4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AC3   CD BB 0A               CALL   flushBuffer   
2AC6   76                     HALT      
2AC7                EXPECTM_0_2685S45:      
2AC7   E1                     POP   HL   
2AC8                          ;*Macro unroll:  test ":a 0#", $0100
2AC8   31 00 4A               LD   SP,STACK   
2ACB   CD 7B 0B               CALL   coldInit   
2ACE   CD A3 48               CALL   execStr   
2AD1   3A 61 20 30 23 00      .CSTR   ":a 0#"   
2AD7   CD BB 0A               CALL   flushBuffer   
2ADA                          ;*Macro unroll:  expect ":a 0#",$0100
2ADA   E1                     POP   HL   
2ADB   E5                     PUSH   HL   
2ADC   11 00 01               LD   DE,$0100   
2ADF   B7                     OR   A   
2AE0   ED 52                  SBC   HL,DE   
2AE2   7D                     LD   A,L   
2AE3   B4                     OR   H   
2AE4   CA 44 2B               JP   Z,expectM_0_2686S45   
2AE7   CD 33 0B               CALL   printStr   
2AEA   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
2AF6   CD 33 0B               CALL   printStr   
2AF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B08   21 00 01               LD   hl,$0100   
2B0B   E5                     PUSH   hl   
2B0C   E5                     PUSH   hl   
2B0D   CD 52 0C               CALL   run   
2B10   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B18   CD BB 0A               CALL   flushBuffer   
2B1B   CD 33 0B               CALL   printStr   
2B1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B2B   E1                     POP   hl   
2B2C   E5                     PUSH   hl   
2B2D   E5                     PUSH   hl   
2B2E   CD 52 0C               CALL   run   
2B31   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B40   CD BB 0A               CALL   flushBuffer   
2B43   76                     HALT      
2B44                EXPECTM_0_2686S45:      
2B44   E1                     POP   HL   
2B45                          ;*Macro unroll:  test ":a: 0#", $0100
2B45   31 00 4A               LD   SP,STACK   
2B48   CD 7B 0B               CALL   coldInit   
2B4B   CD A3 48               CALL   execStr   
2B4E   3A 61 3A 20 30 23 00   .CSTR   ":a: 0#"   
2B55   CD BB 0A               CALL   flushBuffer   
2B58                          ;*Macro unroll:  expect ":a: 0#",$0100
2B58   E1                     POP   HL   
2B59   E5                     PUSH   HL   
2B5A   11 00 01               LD   DE,$0100   
2B5D   B7                     OR   A   
2B5E   ED 52                  SBC   HL,DE   
2B60   7D                     LD   A,L   
2B61   B4                     OR   H   
2B62   CA C3 2B               JP   Z,expectM_0_2687S45   
2B65   CD 33 0B               CALL   printStr   
2B68   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
2B75   CD 33 0B               CALL   printStr   
2B78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B87   21 00 01               LD   hl,$0100   
2B8A   E5                     PUSH   hl   
2B8B   E5                     PUSH   hl   
2B8C   CD 52 0C               CALL   run   
2B8F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B97   CD BB 0A               CALL   flushBuffer   
2B9A   CD 33 0B               CALL   printStr   
2B9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BAA   E1                     POP   hl   
2BAB   E5                     PUSH   hl   
2BAC   E5                     PUSH   hl   
2BAD   CD 52 0C               CALL   run   
2BB0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BBF   CD BB 0A               CALL   flushBuffer   
2BC2   76                     HALT      
2BC3                EXPECTM_0_2687S45:      
2BC3   E1                     POP   HL   
2BC4                          ;*Macro unroll:  test ":a:b 0#", $0201
2BC4   31 00 4A               LD   SP,STACK   
2BC7   CD 7B 0B               CALL   coldInit   
2BCA   CD A3 48               CALL   execStr   
2BCD   3A 61 3A 62 20 30 23 00 .CSTR   ":a:b 0#"   
2BD5   CD BB 0A               CALL   flushBuffer   
2BD8                          ;*Macro unroll:  expect ":a:b 0#",$0201
2BD8   E1                     POP   HL   
2BD9   E5                     PUSH   HL   
2BDA   11 01 02               LD   DE,$0201   
2BDD   B7                     OR   A   
2BDE   ED 52                  SBC   HL,DE   
2BE0   7D                     LD   A,L   
2BE1   B4                     OR   H   
2BE2   CA 44 2C               JP   Z,expectM_0_2688S45   
2BE5   CD 33 0B               CALL   printStr   
2BE8   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
2BF6   CD 33 0B               CALL   printStr   
2BF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C08   21 01 02               LD   hl,$0201   
2C0B   E5                     PUSH   hl   
2C0C   E5                     PUSH   hl   
2C0D   CD 52 0C               CALL   run   
2C10   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C18   CD BB 0A               CALL   flushBuffer   
2C1B   CD 33 0B               CALL   printStr   
2C1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C2B   E1                     POP   hl   
2C2C   E5                     PUSH   hl   
2C2D   E5                     PUSH   hl   
2C2E   CD 52 0C               CALL   run   
2C31   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C40   CD BB 0A               CALL   flushBuffer   
2C43   76                     HALT      
2C44                EXPECTM_0_2688S45:      
2C44   E1                     POP   HL   
2C45                          ;*Macro unroll:  test "::b 0#", $0101
2C45   31 00 4A               LD   SP,STACK   
2C48   CD 7B 0B               CALL   coldInit   
2C4B   CD A3 48               CALL   execStr   
2C4E   3A 3A 62 20 30 23 00   .CSTR   "::b 0#"   
2C55   CD BB 0A               CALL   flushBuffer   
2C58                          ;*Macro unroll:  expect "::b 0#",$0101
2C58   E1                     POP   HL   
2C59   E5                     PUSH   HL   
2C5A   11 01 01               LD   DE,$0101   
2C5D   B7                     OR   A   
2C5E   ED 52                  SBC   HL,DE   
2C60   7D                     LD   A,L   
2C61   B4                     OR   H   
2C62   CA C3 2C               JP   Z,expectM_0_2689S45   
2C65   CD 33 0B               CALL   printStr   
2C68   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
2C75   CD 33 0B               CALL   printStr   
2C78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C87   21 01 01               LD   hl,$0101   
2C8A   E5                     PUSH   hl   
2C8B   E5                     PUSH   hl   
2C8C   CD 52 0C               CALL   run   
2C8F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C97   CD BB 0A               CALL   flushBuffer   
2C9A   CD 33 0B               CALL   printStr   
2C9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CAA   E1                     POP   hl   
2CAB   E5                     PUSH   hl   
2CAC   E5                     PUSH   hl   
2CAD   CD 52 0C               CALL   run   
2CB0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CBF   CD BB 0A               CALL   flushBuffer   
2CC2   76                     HALT      
2CC3                EXPECTM_0_2689S45:      
2CC3   E1                     POP   HL   
2CC4                          ;*Macro unroll:  test ":{2};^", 2
2CC4   31 00 4A               LD   SP,STACK   
2CC7   CD 7B 0B               CALL   coldInit   
2CCA   CD A3 48               CALL   execStr   
2CCD   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
2CD4   CD BB 0A               CALL   flushBuffer   
2CD7                          ;*Macro unroll:  expect ":{2};^",2
2CD7   E1                     POP   HL   
2CD8   E5                     PUSH   HL   
2CD9   11 02 00               LD   DE,2   
2CDC   B7                     OR   A   
2CDD   ED 52                  SBC   HL,DE   
2CDF   7D                     LD   A,L   
2CE0   B4                     OR   H   
2CE1   CA 42 2D               JP   Z,expectM_0_2690S45   
2CE4   CD 33 0B               CALL   printStr   
2CE7   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2CF4   CD 33 0B               CALL   printStr   
2CF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D06   21 02 00               LD   hl,2   
2D09   E5                     PUSH   hl   
2D0A   E5                     PUSH   hl   
2D0B   CD 52 0C               CALL   run   
2D0E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D16   CD BB 0A               CALL   flushBuffer   
2D19   CD 33 0B               CALL   printStr   
2D1C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D29   E1                     POP   hl   
2D2A   E5                     PUSH   hl   
2D2B   E5                     PUSH   hl   
2D2C   CD 52 0C               CALL   run   
2D2F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D3E   CD BB 0A               CALL   flushBuffer   
2D41   76                     HALT      
2D42                EXPECTM_0_2690S45:      
2D42   E1                     POP   HL   
2D43                          ;*Macro unroll:  test ":a{2};^", 2
2D43   31 00 4A               LD   SP,STACK   
2D46   CD 7B 0B               CALL   coldInit   
2D49   CD A3 48               CALL   execStr   
2D4C   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2D54   CD BB 0A               CALL   flushBuffer   
2D57                          ;*Macro unroll:  expect ":a{2};^",2
2D57   E1                     POP   HL   
2D58   E5                     PUSH   HL   
2D59   11 02 00               LD   DE,2   
2D5C   B7                     OR   A   
2D5D   ED 52                  SBC   HL,DE   
2D5F   7D                     LD   A,L   
2D60   B4                     OR   H   
2D61   CA C3 2D               JP   Z,expectM_0_2691S45   
2D64   CD 33 0B               CALL   printStr   
2D67   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2D75   CD 33 0B               CALL   printStr   
2D78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D87   21 02 00               LD   hl,2   
2D8A   E5                     PUSH   hl   
2D8B   E5                     PUSH   hl   
2D8C   CD 52 0C               CALL   run   
2D8F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D97   CD BB 0A               CALL   flushBuffer   
2D9A   CD 33 0B               CALL   printStr   
2D9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DAA   E1                     POP   hl   
2DAB   E5                     PUSH   hl   
2DAC   E5                     PUSH   hl   
2DAD   CD 52 0C               CALL   run   
2DB0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DBF   CD BB 0A               CALL   flushBuffer   
2DC2   76                     HALT      
2DC3                EXPECTM_0_2691S45:      
2DC3   E1                     POP   HL   
2DC4                          ;*Macro unroll:  test "5 :a{%a};^", 5
2DC4   31 00 4A               LD   SP,STACK   
2DC7   CD 7B 0B               CALL   coldInit   
2DCA   CD A3 48               CALL   execStr   
2DCD   35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "5 :a{%a};^"   
2DD8   CD BB 0A               CALL   flushBuffer   
2DDB                          ;*Macro unroll:  expect "5 :a{%a};^",5
2DDB   E1                     POP   HL   
2DDC   E5                     PUSH   HL   
2DDD   11 05 00               LD   DE,5   
2DE0   B7                     OR   A   
2DE1   ED 52                  SBC   HL,DE   
2DE3   7D                     LD   A,L   
2DE4   B4                     OR   H   
2DE5   CA 4A 2E               JP   Z,expectM_0_2692S45   
2DE8   CD 33 0B               CALL   printStr   
2DEB   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
2DFC   CD 33 0B               CALL   printStr   
2DFF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E0E   21 05 00               LD   hl,5   
2E11   E5                     PUSH   hl   
2E12   E5                     PUSH   hl   
2E13   CD 52 0C               CALL   run   
2E16   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E1E   CD BB 0A               CALL   flushBuffer   
2E21   CD 33 0B               CALL   printStr   
2E24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E31   E1                     POP   hl   
2E32   E5                     PUSH   hl   
2E33   E5                     PUSH   hl   
2E34   CD 52 0C               CALL   run   
2E37   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E46   CD BB 0A               CALL   flushBuffer   
2E49   76                     HALT      
2E4A                EXPECTM_0_2692S45:      
2E4A   E1                     POP   HL   
2E4B                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
2E4B   31 00 4A               LD   SP,STACK   
2E4E   CD 7B 0B               CALL   coldInit   
2E51   CD A3 48               CALL   execStr   
2E54   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "5 :a:b{%a};^"   
2E61   CD BB 0A               CALL   flushBuffer   
2E64                          ;*Macro unroll:  expect "5 :a:b{%a};^",5
2E64   E1                     POP   HL   
2E65   E5                     PUSH   HL   
2E66   11 05 00               LD   DE,5   
2E69   B7                     OR   A   
2E6A   ED 52                  SBC   HL,DE   
2E6C   7D                     LD   A,L   
2E6D   B4                     OR   H   
2E6E   CA D5 2E               JP   Z,expectM_0_2693S45   
2E71   CD 33 0B               CALL   printStr   
2E74   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
2E87   CD 33 0B               CALL   printStr   
2E8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E99   21 05 00               LD   hl,5   
2E9C   E5                     PUSH   hl   
2E9D   E5                     PUSH   hl   
2E9E   CD 52 0C               CALL   run   
2EA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EA9   CD BB 0A               CALL   flushBuffer   
2EAC   CD 33 0B               CALL   printStr   
2EAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EBC   E1                     POP   hl   
2EBD   E5                     PUSH   hl   
2EBE   E5                     PUSH   hl   
2EBF   CD 52 0C               CALL   run   
2EC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2ED1   CD BB 0A               CALL   flushBuffer   
2ED4   76                     HALT      
2ED5                EXPECTM_0_2693S45:      
2ED5   E1                     POP   HL   
2ED6                          ;*Macro unroll:  test ":a{{2}^};^", 2
2ED6   31 00 4A               LD   SP,STACK   
2ED9   CD 7B 0B               CALL   coldInit   
2EDC   CD A3 48               CALL   execStr   
2EDF   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2EEA   CD BB 0A               CALL   flushBuffer   
2EED                          ;*Macro unroll:  expect ":a{{2}^};^",2
2EED   E1                     POP   HL   
2EEE   E5                     PUSH   HL   
2EEF   11 02 00               LD   DE,2   
2EF2   B7                     OR   A   
2EF3   ED 52                  SBC   HL,DE   
2EF5   7D                     LD   A,L   
2EF6   B4                     OR   H   
2EF7   CA 5C 2F               JP   Z,expectM_0_2694S45   
2EFA   CD 33 0B               CALL   printStr   
2EFD   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2F0E   CD 33 0B               CALL   printStr   
2F11   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F20   21 02 00               LD   hl,2   
2F23   E5                     PUSH   hl   
2F24   E5                     PUSH   hl   
2F25   CD 52 0C               CALL   run   
2F28   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F30   CD BB 0A               CALL   flushBuffer   
2F33   CD 33 0B               CALL   printStr   
2F36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F43   E1                     POP   hl   
2F44   E5                     PUSH   hl   
2F45   E5                     PUSH   hl   
2F46   CD 52 0C               CALL   run   
2F49   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F58   CD BB 0A               CALL   flushBuffer   
2F5B   76                     HALT      
2F5C                EXPECTM_0_2694S45:      
2F5C   E1                     POP   HL   
2F5D                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
2F5D   31 00 4A               LD   SP,STACK   
2F60   CD 7B 0B               CALL   coldInit   
2F63   CD A3 48               CALL   execStr   
2F66   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{%a}^};^"   
2F76   CD BB 0A               CALL   flushBuffer   
2F79                          ;*Macro unroll:  expect "1 5 :a{{%a}^};^",5
2F79   E1                     POP   HL   
2F7A   E5                     PUSH   HL   
2F7B   11 05 00               LD   DE,5   
2F7E   B7                     OR   A   
2F7F   ED 52                  SBC   HL,DE   
2F81   7D                     LD   A,L   
2F82   B4                     OR   H   
2F83   CA ED 2F               JP   Z,expectM_0_2695S45   
2F86   CD 33 0B               CALL   printStr   
2F89   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
2F9F   CD 33 0B               CALL   printStr   
2FA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FB1   21 05 00               LD   hl,5   
2FB4   E5                     PUSH   hl   
2FB5   E5                     PUSH   hl   
2FB6   CD 52 0C               CALL   run   
2FB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FC1   CD BB 0A               CALL   flushBuffer   
2FC4   CD 33 0B               CALL   printStr   
2FC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FD4   E1                     POP   hl   
2FD5   E5                     PUSH   hl   
2FD6   E5                     PUSH   hl   
2FD7   CD 52 0C               CALL   run   
2FDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FE9   CD BB 0A               CALL   flushBuffer   
2FEC   76                     HALT      
2FED                EXPECTM_0_2695S45:      
2FED   E1                     POP   HL   
2FEE                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
2FEE   31 00 4A               LD   SP,STACK   
2FF1   CD 7B 0B               CALL   coldInit   
2FF4   CD A3 48               CALL   execStr   
2FF7   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{%a}^};^"   
3008   CD BB 0A               CALL   flushBuffer   
300B                          ;*Macro unroll:  expect "1 5 :ab{{%a}^};^",1
300B   E1                     POP   HL   
300C   E5                     PUSH   HL   
300D   11 01 00               LD   DE,1   
3010   B7                     OR   A   
3011   ED 52                  SBC   HL,DE   
3013   7D                     LD   A,L   
3014   B4                     OR   H   
3015   CA 80 30               JP   Z,expectM_0_2696S45   
3018   CD 33 0B               CALL   printStr   
301B   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
3032   CD 33 0B               CALL   printStr   
3035   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3044   21 01 00               LD   hl,1   
3047   E5                     PUSH   hl   
3048   E5                     PUSH   hl   
3049   CD 52 0C               CALL   run   
304C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3054   CD BB 0A               CALL   flushBuffer   
3057   CD 33 0B               CALL   printStr   
305A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3067   E1                     POP   hl   
3068   E5                     PUSH   hl   
3069   E5                     PUSH   hl   
306A   CD 52 0C               CALL   run   
306D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
307C   CD BB 0A               CALL   flushBuffer   
307F   76                     HALT      
3080                EXPECTM_0_2696S45:      
3080   E1                     POP   HL   
3081                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
3081   31 00 4A               LD   SP,STACK   
3084   CD 7B 0B               CALL   coldInit   
3087   CD A3 48               CALL   execStr   
308A   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{%a 2 +}^};^"   
309E   CD BB 0A               CALL   flushBuffer   
30A1                          ;*Macro unroll:  expect "1 5 :a{{%a 2 +}^};^",7
30A1   E1                     POP   HL   
30A2   E5                     PUSH   HL   
30A3   11 07 00               LD   DE,7   
30A6   B7                     OR   A   
30A7   ED 52                  SBC   HL,DE   
30A9   7D                     LD   A,L   
30AA   B4                     OR   H   
30AB   CA 19 31               JP   Z,expectM_0_2697S45   
30AE   CD 33 0B               CALL   printStr   
30B1   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
30CB   CD 33 0B               CALL   printStr   
30CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30DD   21 07 00               LD   hl,7   
30E0   E5                     PUSH   hl   
30E1   E5                     PUSH   hl   
30E2   CD 52 0C               CALL   run   
30E5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30ED   CD BB 0A               CALL   flushBuffer   
30F0   CD 33 0B               CALL   printStr   
30F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3100   E1                     POP   hl   
3101   E5                     PUSH   hl   
3102   E5                     PUSH   hl   
3103   CD 52 0C               CALL   run   
3106   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3115   CD BB 0A               CALL   flushBuffer   
3118   76                     HALT      
3119                EXPECTM_0_2697S45:      
3119   E1                     POP   HL   
311A                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
311A   31 00 4A               LD   SP,STACK   
311D   CD 7B 0B               CALL   coldInit   
3120   CD A3 48               CALL   execStr   
3123   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{%a %b +}^};^"   
3139   CD BB 0A               CALL   flushBuffer   
313C                          ;*Macro unroll:  expect "1 5 :ab{{%a %b +}^};^",6
313C   E1                     POP   HL   
313D   E5                     PUSH   HL   
313E   11 06 00               LD   DE,6   
3141   B7                     OR   A   
3142   ED 52                  SBC   HL,DE   
3144   7D                     LD   A,L   
3145   B4                     OR   H   
3146   CA B6 31               JP   Z,expectM_0_2698S45   
3149   CD 33 0B               CALL   printStr   
314C   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
3168   CD 33 0B               CALL   printStr   
316B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
317A   21 06 00               LD   hl,6   
317D   E5                     PUSH   hl   
317E   E5                     PUSH   hl   
317F   CD 52 0C               CALL   run   
3182   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
318A   CD BB 0A               CALL   flushBuffer   
318D   CD 33 0B               CALL   printStr   
3190   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
319D   E1                     POP   hl   
319E   E5                     PUSH   hl   
319F   E5                     PUSH   hl   
31A0   CD 52 0C               CALL   run   
31A3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31B2   CD BB 0A               CALL   flushBuffer   
31B5   76                     HALT      
31B6                EXPECTM_0_2698S45:      
31B6   E1                     POP   HL   
31B7                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
31B7   31 00 4A               LD   SP,STACK   
31BA   CD 7B 0B               CALL   coldInit   
31BD   CD A3 48               CALL   execStr   
31C0   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
31CF   CD BB 0A               CALL   flushBuffer   
31D2                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
31D2   E1                     POP   HL   
31D3   E5                     PUSH   HL   
31D4   11 02 00               LD   DE,2   
31D7   B7                     OR   A   
31D8   ED 52                  SBC   HL,DE   
31DA   7D                     LD   A,L   
31DB   B4                     OR   H   
31DC   CA 45 32               JP   Z,expectM_0_2699S45   
31DF   CD 33 0B               CALL   printStr   
31E2   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
31F7   CD 33 0B               CALL   printStr   
31FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3209   21 02 00               LD   hl,2   
320C   E5                     PUSH   hl   
320D   E5                     PUSH   hl   
320E   CD 52 0C               CALL   run   
3211   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3219   CD BB 0A               CALL   flushBuffer   
321C   CD 33 0B               CALL   printStr   
321F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
322C   E1                     POP   hl   
322D   E5                     PUSH   hl   
322E   E5                     PUSH   hl   
322F   CD 52 0C               CALL   run   
3232   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3241   CD BB 0A               CALL   flushBuffer   
3244   76                     HALT      
3245                EXPECTM_0_2699S45:      
3245   E1                     POP   HL   
3246                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
3246   31 00 4A               LD   SP,STACK   
3249   CD 7B 0B               CALL   coldInit   
324C   CD A3 48               CALL   execStr   
324F   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{%a}; x= 0 1 x^"   
3261   CD BB 0A               CALL   flushBuffer   
3264                          ;*Macro unroll:  expect ":a{%a}; x= 0 1 x^",1
3264   E1                     POP   HL   
3265   E5                     PUSH   HL   
3266   11 01 00               LD   DE,1   
3269   B7                     OR   A   
326A   ED 52                  SBC   HL,DE   
326C   7D                     LD   A,L   
326D   B4                     OR   H   
326E   CA DA 32               JP   Z,expectM_0_2700S45   
3271   CD 33 0B               CALL   printStr   
3274   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
328C   CD 33 0B               CALL   printStr   
328F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
329E   21 01 00               LD   hl,1   
32A1   E5                     PUSH   hl   
32A2   E5                     PUSH   hl   
32A3   CD 52 0C               CALL   run   
32A6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32AE   CD BB 0A               CALL   flushBuffer   
32B1   CD 33 0B               CALL   printStr   
32B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32C1   E1                     POP   hl   
32C2   E5                     PUSH   hl   
32C3   E5                     PUSH   hl   
32C4   CD 52 0C               CALL   run   
32C7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32D6   CD BB 0A               CALL   flushBuffer   
32D9   76                     HALT      
32DA                EXPECTM_0_2700S45:      
32DA   E1                     POP   HL   
32DB                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
32DB   31 00 4A               LD   SP,STACK   
32DE   CD 7B 0B               CALL   coldInit   
32E1   CD A3 48               CALL   execStr   
32E4   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{%b}; x= 1 2 x^"   
32F7   CD BB 0A               CALL   flushBuffer   
32FA                          ;*Macro unroll:  expect ":ab{%b}; x= 1 2 x^",2
32FA   E1                     POP   HL   
32FB   E5                     PUSH   HL   
32FC   11 02 00               LD   DE,2   
32FF   B7                     OR   A   
3300   ED 52                  SBC   HL,DE   
3302   7D                     LD   A,L   
3303   B4                     OR   H   
3304   CA 71 33               JP   Z,expectM_0_2701S45   
3307   CD 33 0B               CALL   printStr   
330A   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
3323   CD 33 0B               CALL   printStr   
3326   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3335   21 02 00               LD   hl,2   
3338   E5                     PUSH   hl   
3339   E5                     PUSH   hl   
333A   CD 52 0C               CALL   run   
333D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3345   CD BB 0A               CALL   flushBuffer   
3348   CD 33 0B               CALL   printStr   
334B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3358   E1                     POP   hl   
3359   E5                     PUSH   hl   
335A   E5                     PUSH   hl   
335B   CD 52 0C               CALL   run   
335E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
336D   CD BB 0A               CALL   flushBuffer   
3370   76                     HALT      
3371                EXPECTM_0_2701S45:      
3371   E1                     POP   HL   
3372                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
3372   31 00 4A               LD   SP,STACK   
3375   CD 7B 0B               CALL   coldInit   
3378   CD A3 48               CALL   execStr   
337B   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{%a}; x= 1 2 x^"   
338F   CD BB 0A               CALL   flushBuffer   
3392                          ;*Macro unroll:  expect ":a:b{%a}; x= 1 2 x^",2
3392   E1                     POP   HL   
3393   E5                     PUSH   HL   
3394   11 02 00               LD   DE,2   
3397   B7                     OR   A   
3398   ED 52                  SBC   HL,DE   
339A   7D                     LD   A,L   
339B   B4                     OR   H   
339C   CA 0A 34               JP   Z,expectM_0_2702S45   
339F   CD 33 0B               CALL   printStr   
33A2   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
33BC   CD 33 0B               CALL   printStr   
33BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33CE   21 02 00               LD   hl,2   
33D1   E5                     PUSH   hl   
33D2   E5                     PUSH   hl   
33D3   CD 52 0C               CALL   run   
33D6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33DE   CD BB 0A               CALL   flushBuffer   
33E1   CD 33 0B               CALL   printStr   
33E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33F1   E1                     POP   hl   
33F2   E5                     PUSH   hl   
33F3   E5                     PUSH   hl   
33F4   CD 52 0C               CALL   run   
33F7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3406   CD BB 0A               CALL   flushBuffer   
3409   76                     HALT      
340A                EXPECTM_0_2702S45:      
340A   E1                     POP   HL   
340B                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
340B   31 00 4A               LD   SP,STACK   
340E   CD 7B 0B               CALL   coldInit   
3411   CD A3 48               CALL   execStr   
3414   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{%b}; x= 1 2 x^"   
3427   CD BB 0A               CALL   flushBuffer   
342A                          ;*Macro unroll:  expect ":ab{%b}; x= 1 2 x^",2
342A   E1                     POP   HL   
342B   E5                     PUSH   HL   
342C   11 02 00               LD   DE,2   
342F   B7                     OR   A   
3430   ED 52                  SBC   HL,DE   
3432   7D                     LD   A,L   
3433   B4                     OR   H   
3434   CA A1 34               JP   Z,expectM_0_2703S45   
3437   CD 33 0B               CALL   printStr   
343A   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
3453   CD 33 0B               CALL   printStr   
3456   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3465   21 02 00               LD   hl,2   
3468   E5                     PUSH   hl   
3469   E5                     PUSH   hl   
346A   CD 52 0C               CALL   run   
346D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3475   CD BB 0A               CALL   flushBuffer   
3478   CD 33 0B               CALL   printStr   
347B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3488   E1                     POP   hl   
3489   E5                     PUSH   hl   
348A   E5                     PUSH   hl   
348B   CD 52 0C               CALL   run   
348E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
349D   CD BB 0A               CALL   flushBuffer   
34A0   76                     HALT      
34A1                EXPECTM_0_2703S45:      
34A1   E1                     POP   HL   
34A2                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
34A2   31 00 4A               LD   SP,STACK   
34A5   CD 7B 0B               CALL   coldInit   
34A8   CD A3 48               CALL   execStr   
34AB   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{%b %a}; x= 10 15 x^ -"   
34C5   CD BB 0A               CALL   flushBuffer   
34C8                          ;*Macro unroll:  expect ":ab{%b %a}; x= 10 15 x^ -",5
34C8   E1                     POP   HL   
34C9   E5                     PUSH   HL   
34CA   11 05 00               LD   DE,5   
34CD   B7                     OR   A   
34CE   ED 52                  SBC   HL,DE   
34D0   7D                     LD   A,L   
34D1   B4                     OR   H   
34D2   CA 46 35               JP   Z,expectM_0_2704S45   
34D5   CD 33 0B               CALL   printStr   
34D8   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
34F8   CD 33 0B               CALL   printStr   
34FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
350A   21 05 00               LD   hl,5   
350D   E5                     PUSH   hl   
350E   E5                     PUSH   hl   
350F   CD 52 0C               CALL   run   
3512   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
351A   CD BB 0A               CALL   flushBuffer   
351D   CD 33 0B               CALL   printStr   
3520   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
352D   E1                     POP   hl   
352E   E5                     PUSH   hl   
352F   E5                     PUSH   hl   
3530   CD 52 0C               CALL   run   
3533   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3542   CD BB 0A               CALL   flushBuffer   
3545   76                     HALT      
3546                EXPECTM_0_2704S45:      
3546   E1                     POP   HL   
3547                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3547   31 00 4A               LD   SP,STACK   
354A   CD 7B 0B               CALL   coldInit   
354D   CD A3 48               CALL   execStr   
3550   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
3561   CD BB 0A               CALL   flushBuffer   
3564                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
3564   E1                     POP   HL   
3565   E5                     PUSH   HL   
3566   11 02 00               LD   DE,2   
3569   B7                     OR   A   
356A   ED 52                  SBC   HL,DE   
356C   7D                     LD   A,L   
356D   B4                     OR   H   
356E   CA D9 35               JP   Z,expectM_0_2705S45   
3571   CD 33 0B               CALL   printStr   
3574   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
358B   CD 33 0B               CALL   printStr   
358E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
359D   21 02 00               LD   hl,2   
35A0   E5                     PUSH   hl   
35A1   E5                     PUSH   hl   
35A2   CD 52 0C               CALL   run   
35A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35AD   CD BB 0A               CALL   flushBuffer   
35B0   CD 33 0B               CALL   printStr   
35B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35C0   E1                     POP   hl   
35C1   E5                     PUSH   hl   
35C2   E5                     PUSH   hl   
35C3   CD 52 0C               CALL   run   
35C6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35D5   CD BB 0A               CALL   flushBuffer   
35D8   76                     HALT      
35D9                EXPECTM_0_2705S45:      
35D9   E1                     POP   HL   
35DA                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
35DA   31 00 4A               LD   SP,STACK   
35DD   CD 7B 0B               CALL   coldInit   
35E0   CD A3 48               CALL   execStr   
35E3   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 %b = %b}; x= x^"   
35FB   CD BB 0A               CALL   flushBuffer   
35FE                          ;*Macro unroll:  expect "::b{100 %b = %b}; x= x^",100
35FE   E1                     POP   HL   
35FF   E5                     PUSH   HL   
3600   11 64 00               LD   DE,100   
3603   B7                     OR   A   
3604   ED 52                  SBC   HL,DE   
3606   7D                     LD   A,L   
3607   B4                     OR   H   
3608   CA 7A 36               JP   Z,expectM_0_2706S45   
360B   CD 33 0B               CALL   printStr   
360E   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
362C   CD 33 0B               CALL   printStr   
362F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
363E   21 64 00               LD   hl,100   
3641   E5                     PUSH   hl   
3642   E5                     PUSH   hl   
3643   CD 52 0C               CALL   run   
3646   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
364E   CD BB 0A               CALL   flushBuffer   
3651   CD 33 0B               CALL   printStr   
3654   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3661   E1                     POP   hl   
3662   E5                     PUSH   hl   
3663   E5                     PUSH   hl   
3664   CD 52 0C               CALL   run   
3667   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3676   CD BB 0A               CALL   flushBuffer   
3679   76                     HALT      
367A                EXPECTM_0_2706S45:      
367A   E1                     POP   HL   
367B                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
367B   31 00 4A               LD   SP,STACK   
367E   CD 7B 0B               CALL   coldInit   
3681   CD A3 48               CALL   execStr   
3684   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 %b = %b}; x= 2 x^"   
369D   CD BB 0A               CALL   flushBuffer   
36A0                          ;*Macro unroll:  expect ":a:b{1 %b = %b}; x= 2 x^",1
36A0   E1                     POP   HL   
36A1   E5                     PUSH   HL   
36A2   11 01 00               LD   DE,1   
36A5   B7                     OR   A   
36A6   ED 52                  SBC   HL,DE   
36A8   7D                     LD   A,L   
36A9   B4                     OR   H   
36AA   CA 1D 37               JP   Z,expectM_0_2707S45   
36AD   CD 33 0B               CALL   printStr   
36B0   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
36CF   CD 33 0B               CALL   printStr   
36D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36E1   21 01 00               LD   hl,1   
36E4   E5                     PUSH   hl   
36E5   E5                     PUSH   hl   
36E6   CD 52 0C               CALL   run   
36E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36F1   CD BB 0A               CALL   flushBuffer   
36F4   CD 33 0B               CALL   printStr   
36F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3704   E1                     POP   hl   
3705   E5                     PUSH   hl   
3706   E5                     PUSH   hl   
3707   CD 52 0C               CALL   run   
370A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3719   CD BB 0A               CALL   flushBuffer   
371C   76                     HALT      
371D                EXPECTM_0_2707S45:      
371D   E1                     POP   HL   
371E                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
371E   31 00 4A               LD   SP,STACK   
3721   CD 7B 0B               CALL   coldInit   
3724   CD A3 48               CALL   execStr   
3727   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{%a %b = %b}; x= 2 x^"   
3741   CD BB 0A               CALL   flushBuffer   
3744                          ;*Macro unroll:  expect ":a:b{%a %b = %b}; x= 2 x^",2
3744   E1                     POP   HL   
3745   E5                     PUSH   HL   
3746   11 02 00               LD   DE,2   
3749   B7                     OR   A   
374A   ED 52                  SBC   HL,DE   
374C   7D                     LD   A,L   
374D   B4                     OR   H   
374E   CA C2 37               JP   Z,expectM_0_2708S45   
3751   CD 33 0B               CALL   printStr   
3754   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
3774   CD 33 0B               CALL   printStr   
3777   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3786   21 02 00               LD   hl,2   
3789   E5                     PUSH   hl   
378A   E5                     PUSH   hl   
378B   CD 52 0C               CALL   run   
378E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3796   CD BB 0A               CALL   flushBuffer   
3799   CD 33 0B               CALL   printStr   
379C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37A9   E1                     POP   hl   
37AA   E5                     PUSH   hl   
37AB   E5                     PUSH   hl   
37AC   CD 52 0C               CALL   run   
37AF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37BE   CD BB 0A               CALL   flushBuffer   
37C1   76                     HALT      
37C2                EXPECTM_0_2708S45:      
37C2   E1                     POP   HL   
37C3                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
37C3   31 00 4A               LD   SP,STACK   
37C6   CD 7B 0B               CALL   coldInit   
37C9   CD A3 48               CALL   execStr   
37CC   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{%a}{%b} ??};^ +"   
37EB   CD BB 0A               CALL   flushBuffer   
37EE                          ;*Macro unroll:  expect "1 10 20 :ab{/t{%a}{%b} ??};^ +",11
37EE   E1                     POP   HL   
37EF   E5                     PUSH   HL   
37F0   11 0B 00               LD   DE,11   
37F3   B7                     OR   A   
37F4   ED 52                  SBC   HL,DE   
37F6   7D                     LD   A,L   
37F7   B4                     OR   H   
37F8   CA 71 38               JP   Z,expectM_0_2709S45   
37FB   CD 33 0B               CALL   printStr   
37FE   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
3823   CD 33 0B               CALL   printStr   
3826   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3835   21 0B 00               LD   hl,11   
3838   E5                     PUSH   hl   
3839   E5                     PUSH   hl   
383A   CD 52 0C               CALL   run   
383D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3845   CD BB 0A               CALL   flushBuffer   
3848   CD 33 0B               CALL   printStr   
384B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3858   E1                     POP   hl   
3859   E5                     PUSH   hl   
385A   E5                     PUSH   hl   
385B   CD 52 0C               CALL   run   
385E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
386D   CD BB 0A               CALL   flushBuffer   
3870   76                     HALT      
3871                EXPECTM_0_2709S45:      
3871   E1                     POP   HL   
3872                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
3872   31 00 4A               LD   SP,STACK   
3875   CD 7B 0B               CALL   coldInit   
3878   CD A3 48               CALL   execStr   
387B   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{%a}{%b} ??};^ +"   
389A   CD BB 0A               CALL   flushBuffer   
389D                          ;*Macro unroll:  expect "1 10 20 :ab{/f{%a}{%b} ??};^ +",21
389D   E1                     POP   HL   
389E   E5                     PUSH   HL   
389F   11 15 00               LD   DE,21   
38A2   B7                     OR   A   
38A3   ED 52                  SBC   HL,DE   
38A5   7D                     LD   A,L   
38A6   B4                     OR   H   
38A7   CA 20 39               JP   Z,expectM_0_2710S45   
38AA   CD 33 0B               CALL   printStr   
38AD   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
38D2   CD 33 0B               CALL   printStr   
38D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38E4   21 15 00               LD   hl,21   
38E7   E5                     PUSH   hl   
38E8   E5                     PUSH   hl   
38E9   CD 52 0C               CALL   run   
38EC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38F4   CD BB 0A               CALL   flushBuffer   
38F7   CD 33 0B               CALL   printStr   
38FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3907   E1                     POP   hl   
3908   E5                     PUSH   hl   
3909   E5                     PUSH   hl   
390A   CD 52 0C               CALL   run   
390D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
391C   CD BB 0A               CALL   flushBuffer   
391F   76                     HALT      
3920                EXPECTM_0_2710S45:      
3920   E1                     POP   HL   
3921                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3921   31 00 4A               LD   SP,STACK   
3924   CD 7B 0B               CALL   coldInit   
3927   CD A3 48               CALL   execStr   
392A   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "[10 20 30] 1#"   
3938   CD BB 0A               CALL   flushBuffer   
393B                          ;*Macro unroll:  expect "[10 20 30] 1#",20
393B   E1                     POP   HL   
393C   E5                     PUSH   HL   
393D   11 14 00               LD   DE,20   
3940   B7                     OR   A   
3941   ED 52                  SBC   HL,DE   
3943   7D                     LD   A,L   
3944   B4                     OR   H   
3945   CA AD 39               JP   Z,expectM_0_2711S45   
3948   CD 33 0B               CALL   printStr   
394B   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
395F   CD 33 0B               CALL   printStr   
3962   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3971   21 14 00               LD   hl,20   
3974   E5                     PUSH   hl   
3975   E5                     PUSH   hl   
3976   CD 52 0C               CALL   run   
3979   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3981   CD BB 0A               CALL   flushBuffer   
3984   CD 33 0B               CALL   printStr   
3987   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3994   E1                     POP   hl   
3995   E5                     PUSH   hl   
3996   E5                     PUSH   hl   
3997   CD 52 0C               CALL   run   
399A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39A9   CD BB 0A               CALL   flushBuffer   
39AC   76                     HALT      
39AD                EXPECTM_0_2711S45:      
39AD   E1                     POP   HL   
39AE                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
39AE   31 00 4A               LD   SP,STACK   
39B1   CD 7B 0B               CALL   coldInit   
39B4   CD A3 48               CALL   execStr   
39B7   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "[10 20 30 40] /s"   
39C8   CD BB 0A               CALL   flushBuffer   
39CB                          ;*Macro unroll:  expect "[10 20 30 40] /s",4
39CB   E1                     POP   HL   
39CC   E5                     PUSH   HL   
39CD   11 04 00               LD   DE,4   
39D0   B7                     OR   A   
39D1   ED 52                  SBC   HL,DE   
39D3   7D                     LD   A,L   
39D4   B4                     OR   H   
39D5   CA 40 3A               JP   Z,expectM_0_2712S45   
39D8   CD 33 0B               CALL   printStr   
39DB   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
39F2   CD 33 0B               CALL   printStr   
39F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A04   21 04 00               LD   hl,4   
3A07   E5                     PUSH   hl   
3A08   E5                     PUSH   hl   
3A09   CD 52 0C               CALL   run   
3A0C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A14   CD BB 0A               CALL   flushBuffer   
3A17   CD 33 0B               CALL   printStr   
3A1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A27   E1                     POP   hl   
3A28   E5                     PUSH   hl   
3A29   E5                     PUSH   hl   
3A2A   CD 52 0C               CALL   run   
3A2D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A3C   CD BB 0A               CALL   flushBuffer   
3A3F   76                     HALT      
3A40                EXPECTM_0_2712S45:      
3A40   E1                     POP   HL   
3A41                          ;*Macro unroll:  test "/c [1 2 3] 1#", 2
3A41   31 00 4A               LD   SP,STACK   
3A44   CD 7B 0B               CALL   coldInit   
3A47   CD A3 48               CALL   execStr   
3A4A   2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "/c [1 2 3] 1#"   
3A58   CD BB 0A               CALL   flushBuffer   
3A5B                          ;*Macro unroll:  expect "/c [1 2 3] 1#",2
3A5B   E1                     POP   HL   
3A5C   E5                     PUSH   HL   
3A5D   11 02 00               LD   DE,2   
3A60   B7                     OR   A   
3A61   ED 52                  SBC   HL,DE   
3A63   7D                     LD   A,L   
3A64   B4                     OR   H   
3A65   CA CD 3A               JP   Z,expectM_0_2713S45   
3A68   CD 33 0B               CALL   printStr   
3A6B   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/c [1 2 3] 1#"   
3A7F   CD 33 0B               CALL   printStr   
3A82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A91   21 02 00               LD   hl,2   
3A94   E5                     PUSH   hl   
3A95   E5                     PUSH   hl   
3A96   CD 52 0C               CALL   run   
3A99   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AA1   CD BB 0A               CALL   flushBuffer   
3AA4   CD 33 0B               CALL   printStr   
3AA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AB4   E1                     POP   hl   
3AB5   E5                     PUSH   hl   
3AB6   E5                     PUSH   hl   
3AB7   CD 52 0C               CALL   run   
3ABA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AC9   CD BB 0A               CALL   flushBuffer   
3ACC   76                     HALT      
3ACD                EXPECTM_0_2713S45:      
3ACD   E1                     POP   HL   
3ACE                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1#", 66
3ACE   31 00 4A               LD   SP,STACK   
3AD1   CD 7B 0B               CALL   coldInit   
3AD4   CD A3 48               CALL   execStr   
3AD7   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "/c ['A' 'B' 'C'] 1#"   
3AEB   CD BB 0A               CALL   flushBuffer   
3AEE                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1#",66
3AEE   E1                     POP   HL   
3AEF   E5                     PUSH   HL   
3AF0   11 42 00               LD   DE,66   
3AF3   B7                     OR   A   
3AF4   ED 52                  SBC   HL,DE   
3AF6   7D                     LD   A,L   
3AF7   B4                     OR   H   
3AF8   CA 66 3B               JP   Z,expectM_0_2714S45   
3AFB   CD 33 0B               CALL   printStr   
3AFE   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1#"   
3B18   CD 33 0B               CALL   printStr   
3B1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B2A   21 42 00               LD   hl,66   
3B2D   E5                     PUSH   hl   
3B2E   E5                     PUSH   hl   
3B2F   CD 52 0C               CALL   run   
3B32   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B3A   CD BB 0A               CALL   flushBuffer   
3B3D   CD 33 0B               CALL   printStr   
3B40   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B4D   E1                     POP   hl   
3B4E   E5                     PUSH   hl   
3B4F   E5                     PUSH   hl   
3B50   CD 52 0C               CALL   run   
3B53   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B62   CD BB 0A               CALL   flushBuffer   
3B65   76                     HALT      
3B66                EXPECTM_0_2714S45:      
3B66   E1                     POP   HL   
3B67                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3B67   31 00 4A               LD   SP,STACK   
3B6A   CD 7B 0B               CALL   coldInit   
3B6D   CD A3 48               CALL   execStr   
3B70   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "[{10}{20}{30}] 0#^ "   
3B84   CD BB 0A               CALL   flushBuffer   
3B87                          ;*Macro unroll:  expect "[{10}{20}{30}] 0#^ ",10
3B87   E1                     POP   HL   
3B88   E5                     PUSH   HL   
3B89   11 0A 00               LD   DE,10   
3B8C   B7                     OR   A   
3B8D   ED 52                  SBC   HL,DE   
3B8F   7D                     LD   A,L   
3B90   B4                     OR   H   
3B91   CA FF 3B               JP   Z,expectM_0_2715S45   
3B94   CD 33 0B               CALL   printStr   
3B97   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3BB1   CD 33 0B               CALL   printStr   
3BB4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BC3   21 0A 00               LD   hl,10   
3BC6   E5                     PUSH   hl   
3BC7   E5                     PUSH   hl   
3BC8   CD 52 0C               CALL   run   
3BCB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BD3   CD BB 0A               CALL   flushBuffer   
3BD6   CD 33 0B               CALL   printStr   
3BD9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BE6   E1                     POP   hl   
3BE7   E5                     PUSH   hl   
3BE8   E5                     PUSH   hl   
3BE9   CD 52 0C               CALL   run   
3BEC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BFB   CD BB 0A               CALL   flushBuffer   
3BFE   76                     HALT      
3BFF                EXPECTM_0_2715S45:      
3BFF   E1                     POP   HL   
3C00                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
3C00   31 00 4A               LD   SP,STACK   
3C03   CD 7B 0B               CALL   coldInit   
3C06   CD A3 48               CALL   execStr   
3C09   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "10 20 :ab {[{%a}{%b}] 0#^};^"   
3C26   CD BB 0A               CALL   flushBuffer   
3C29                          ;*Macro unroll:  expect "10 20 :ab {[{%a}{%b}] 0#^};^",10
3C29   E1                     POP   HL   
3C2A   E5                     PUSH   HL   
3C2B   11 0A 00               LD   DE,10   
3C2E   B7                     OR   A   
3C2F   ED 52                  SBC   HL,DE   
3C31   7D                     LD   A,L   
3C32   B4                     OR   H   
3C33   CA AA 3C               JP   Z,expectM_0_2716S45   
3C36   CD 33 0B               CALL   printStr   
3C39   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
3C5C   CD 33 0B               CALL   printStr   
3C5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C6E   21 0A 00               LD   hl,10   
3C71   E5                     PUSH   hl   
3C72   E5                     PUSH   hl   
3C73   CD 52 0C               CALL   run   
3C76   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C7E   CD BB 0A               CALL   flushBuffer   
3C81   CD 33 0B               CALL   printStr   
3C84   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C91   E1                     POP   hl   
3C92   E5                     PUSH   hl   
3C93   E5                     PUSH   hl   
3C94   CD 52 0C               CALL   run   
3C97   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CA6   CD BB 0A               CALL   flushBuffer   
3CA9   76                     HALT      
3CAA                EXPECTM_0_2716S45:      
3CAA   E1                     POP   HL   
3CAB                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
3CAB   31 00 4A               LD   SP,STACK   
3CAE   CD 7B 0B               CALL   coldInit   
3CB1   CD A3 48               CALL   execStr   
3CB4   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab {[{%a}{%b}] %i#^};^"   
3CD5   CD BB 0A               CALL   flushBuffer   
3CD8                          ;*Macro unroll:  expect "0 10 20 :iab {[{%a}{%b}] %i#^};^",10
3CD8   E1                     POP   HL   
3CD9   E5                     PUSH   HL   
3CDA   11 0A 00               LD   DE,10   
3CDD   B7                     OR   A   
3CDE   ED 52                  SBC   HL,DE   
3CE0   7D                     LD   A,L   
3CE1   B4                     OR   H   
3CE2   CA 5D 3D               JP   Z,expectM_0_2717S45   
3CE5   CD 33 0B               CALL   printStr   
3CE8   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
3D0F   CD 33 0B               CALL   printStr   
3D12   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D21   21 0A 00               LD   hl,10   
3D24   E5                     PUSH   hl   
3D25   E5                     PUSH   hl   
3D26   CD 52 0C               CALL   run   
3D29   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D31   CD BB 0A               CALL   flushBuffer   
3D34   CD 33 0B               CALL   printStr   
3D37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D44   E1                     POP   hl   
3D45   E5                     PUSH   hl   
3D46   E5                     PUSH   hl   
3D47   CD 52 0C               CALL   run   
3D4A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D59   CD BB 0A               CALL   flushBuffer   
3D5C   76                     HALT      
3D5D                EXPECTM_0_2717S45:      
3D5D   E1                     POP   HL   
3D5E                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
3D5E   31 00 4A               LD   SP,STACK   
3D61   CD 7B 0B               CALL   coldInit   
3D64   CD A3 48               CALL   execStr   
3D67   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab {[{%a}{%b}] %i#^};^"   
3D88   CD BB 0A               CALL   flushBuffer   
3D8B                          ;*Macro unroll:  expect "1 10 20 :iab {[{%a}{%b}] %i#^};^",20
3D8B   E1                     POP   HL   
3D8C   E5                     PUSH   HL   
3D8D   11 14 00               LD   DE,20   
3D90   B7                     OR   A   
3D91   ED 52                  SBC   HL,DE   
3D93   7D                     LD   A,L   
3D94   B4                     OR   H   
3D95   CA 10 3E               JP   Z,expectM_0_2718S45   
3D98   CD 33 0B               CALL   printStr   
3D9B   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
3DC2   CD 33 0B               CALL   printStr   
3DC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DD4   21 14 00               LD   hl,20   
3DD7   E5                     PUSH   hl   
3DD8   E5                     PUSH   hl   
3DD9   CD 52 0C               CALL   run   
3DDC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DE4   CD BB 0A               CALL   flushBuffer   
3DE7   CD 33 0B               CALL   printStr   
3DEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DF7   E1                     POP   hl   
3DF8   E5                     PUSH   hl   
3DF9   E5                     PUSH   hl   
3DFA   CD 52 0C               CALL   run   
3DFD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E0C   CD BB 0A               CALL   flushBuffer   
3E0F   76                     HALT      
3E10                EXPECTM_0_2718S45:      
3E10   E1                     POP   HL   
3E11                          ;*Macro unroll:  test "5 [4] :a {%a}; /pa ^", 4
3E11   31 00 4A               LD   SP,STACK   
3E14   CD 7B 0B               CALL   coldInit   
3E17   CD A3 48               CALL   execStr   
3E1A   35 20 5B 34 5D 20 3A 61 20 7B 25 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a {%a}; /pa ^"   
3E2F   CD BB 0A               CALL   flushBuffer   
3E32                          ;*Macro unroll:  expect "5 [4] :a {%a}; /pa ^",4
3E32   E1                     POP   HL   
3E33   E5                     PUSH   HL   
3E34   11 04 00               LD   DE,4   
3E37   B7                     OR   A   
3E38   ED 52                  SBC   HL,DE   
3E3A   7D                     LD   A,L   
3E3B   B4                     OR   H   
3E3C   CA AB 3E               JP   Z,expectM_0_2719S45   
3E3F   CD 33 0B               CALL   printStr   
3E42   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 20 7B 25 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a {%a}; /pa ^"   
3E5D   CD 33 0B               CALL   printStr   
3E60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E6F   21 04 00               LD   hl,4   
3E72   E5                     PUSH   hl   
3E73   E5                     PUSH   hl   
3E74   CD 52 0C               CALL   run   
3E77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E7F   CD BB 0A               CALL   flushBuffer   
3E82   CD 33 0B               CALL   printStr   
3E85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E92   E1                     POP   hl   
3E93   E5                     PUSH   hl   
3E94   E5                     PUSH   hl   
3E95   CD 52 0C               CALL   run   
3E98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3EA7   CD BB 0A               CALL   flushBuffer   
3EAA   76                     HALT      
3EAB                EXPECTM_0_2719S45:      
3EAB   E1                     POP   HL   
3EAC                          ;*Macro unroll:  test "5 [4] :ab {%a %b +}; /pa ^", 9
3EAC   31 00 4A               LD   SP,STACK   
3EAF   CD 7B 0B               CALL   coldInit   
3EB2   CD A3 48               CALL   execStr   
3EB5   35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab {%a %b +}; /pa ^"   
3ED0   CD BB 0A               CALL   flushBuffer   
3ED3                          ;*Macro unroll:  expect "5 [4] :ab {%a %b +}; /pa ^",9
3ED3   E1                     POP   HL   
3ED4   E5                     PUSH   HL   
3ED5   11 09 00               LD   DE,9   
3ED8   B7                     OR   A   
3ED9   ED 52                  SBC   HL,DE   
3EDB   7D                     LD   A,L   
3EDC   B4                     OR   H   
3EDD   CA 52 3F               JP   Z,expectM_0_2720S45   
3EE0   CD 33 0B               CALL   printStr   
3EE3   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab {%a %b +}; /pa ^"   
3F04   CD 33 0B               CALL   printStr   
3F07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F16   21 09 00               LD   hl,9   
3F19   E5                     PUSH   hl   
3F1A   E5                     PUSH   hl   
3F1B   CD 52 0C               CALL   run   
3F1E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F26   CD BB 0A               CALL   flushBuffer   
3F29   CD 33 0B               CALL   printStr   
3F2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F39   E1                     POP   hl   
3F3A   E5                     PUSH   hl   
3F3B   E5                     PUSH   hl   
3F3C   CD 52 0C               CALL   run   
3F3F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F4E   CD BB 0A               CALL   flushBuffer   
3F51   76                     HALT      
3F52                EXPECTM_0_2720S45:      
3F52   E1                     POP   HL   
3F53                          ;*Macro unroll:  test "5 [4] :ab {%a %b -}; /pa ^", 1
3F53   31 00 4A               LD   SP,STACK   
3F56   CD 7B 0B               CALL   coldInit   
3F59   CD A3 48               CALL   execStr   
3F5C   35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2D 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab {%a %b -}; /pa ^"   
3F77   CD BB 0A               CALL   flushBuffer   
3F7A                          ;*Macro unroll:  expect "5 [4] :ab {%a %b -}; /pa ^",1
3F7A   E1                     POP   HL   
3F7B   E5                     PUSH   HL   
3F7C   11 01 00               LD   DE,1   
3F7F   B7                     OR   A   
3F80   ED 52                  SBC   HL,DE   
3F82   7D                     LD   A,L   
3F83   B4                     OR   H   
3F84   CA F9 3F               JP   Z,expectM_0_2721S45   
3F87   CD 33 0B               CALL   printStr   
3F8A   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2D 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab {%a %b -}; /pa ^"   
3FAB   CD 33 0B               CALL   printStr   
3FAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FBD   21 01 00               LD   hl,1   
3FC0   E5                     PUSH   hl   
3FC1   E5                     PUSH   hl   
3FC2   CD 52 0C               CALL   run   
3FC5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FCD   CD BB 0A               CALL   flushBuffer   
3FD0   CD 33 0B               CALL   printStr   
3FD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FE0   E1                     POP   hl   
3FE1   E5                     PUSH   hl   
3FE2   E5                     PUSH   hl   
3FE3   CD 52 0C               CALL   run   
3FE6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FF5   CD BB 0A               CALL   flushBuffer   
3FF8   76                     HALT      
3FF9                EXPECTM_0_2721S45:      
3FF9   E1                     POP   HL   
3FFA                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3FFA   31 00 4A               LD   SP,STACK   
3FFD   CD 7B 0B               CALL   coldInit   
4000   CD A3 48               CALL   execStr   
4003   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
401B   CD BB 0A               CALL   flushBuffer   
401E                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
401E   E1                     POP   HL   
401F   E5                     PUSH   HL   
4020   11 06 00               LD   DE,6   
4023   B7                     OR   A   
4024   ED 52                  SBC   HL,DE   
4026   7D                     LD   A,L   
4027   B4                     OR   H   
4028   CA 9A 40               JP   Z,expectM_0_2722S45   
402B   CD 33 0B               CALL   printStr   
402E   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
404C   CD 33 0B               CALL   printStr   
404F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
405E   21 06 00               LD   hl,6   
4061   E5                     PUSH   hl   
4062   E5                     PUSH   hl   
4063   CD 52 0C               CALL   run   
4066   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
406E   CD BB 0A               CALL   flushBuffer   
4071   CD 33 0B               CALL   printStr   
4074   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4081   E1                     POP   hl   
4082   E5                     PUSH   hl   
4083   E5                     PUSH   hl   
4084   CD 52 0C               CALL   run   
4087   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4096   CD BB 0A               CALL   flushBuffer   
4099   76                     HALT      
409A                EXPECTM_0_2722S45:      
409A   E1                     POP   HL   
409B                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
409B   31 00 4A               LD   SP,STACK   
409E   CD 7B 0B               CALL   coldInit   
40A1   CD A3 48               CALL   execStr   
40A4   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1#"   
40BF   CD BB 0A               CALL   flushBuffer   
40C2                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1#",2
40C2   E1                     POP   HL   
40C3   E5                     PUSH   HL   
40C4   11 02 00               LD   DE,2   
40C7   B7                     OR   A   
40C8   ED 52                  SBC   HL,DE   
40CA   7D                     LD   A,L   
40CB   B4                     OR   H   
40CC   CA 41 41               JP   Z,expectM_0_2723S45   
40CF   CD 33 0B               CALL   printStr   
40D2   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
40F3   CD 33 0B               CALL   printStr   
40F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4105   21 02 00               LD   hl,2   
4108   E5                     PUSH   hl   
4109   E5                     PUSH   hl   
410A   CD 52 0C               CALL   run   
410D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4115   CD BB 0A               CALL   flushBuffer   
4118   CD 33 0B               CALL   printStr   
411B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4128   E1                     POP   hl   
4129   E5                     PUSH   hl   
412A   E5                     PUSH   hl   
412B   CD 52 0C               CALL   run   
412E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
413D   CD BB 0A               CALL   flushBuffer   
4140   76                     HALT      
4141                EXPECTM_0_2723S45:      
4141   E1                     POP   HL   
4142                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
4142   31 00 4A               LD   SP,STACK   
4145   CD 7B 0B               CALL   coldInit   
4148   CD A3 48               CALL   execStr   
414B   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4171   CD BB 0A               CALL   flushBuffer   
4174                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
4174   E1                     POP   HL   
4175   E5                     PUSH   HL   
4176   11 0A 00               LD   DE,10   
4179   B7                     OR   A   
417A   ED 52                  SBC   HL,DE   
417C   7D                     LD   A,L   
417D   B4                     OR   H   
417E   CA FE 41               JP   Z,expectM_0_2724S45   
4181   CD 33 0B               CALL   printStr   
4184   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
41B0   CD 33 0B               CALL   printStr   
41B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41C2   21 0A 00               LD   hl,10   
41C5   E5                     PUSH   hl   
41C6   E5                     PUSH   hl   
41C7   CD 52 0C               CALL   run   
41CA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41D2   CD BB 0A               CALL   flushBuffer   
41D5   CD 33 0B               CALL   printStr   
41D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41E5   E1                     POP   hl   
41E6   E5                     PUSH   hl   
41E7   E5                     PUSH   hl   
41E8   CD 52 0C               CALL   run   
41EB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41FA   CD BB 0A               CALL   flushBuffer   
41FD   76                     HALT      
41FE                EXPECTM_0_2724S45:      
41FE   E1                     POP   HL   
41FF                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
41FF   31 00 4A               LD   SP,STACK   
4202   CD 7B 0B               CALL   coldInit   
4205   CD A3 48               CALL   execStr   
4208   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
4235   CD BB 0A               CALL   flushBuffer   
4238                          ;*Macro unroll:  expect "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",6
4238   E1                     POP   HL   
4239   E5                     PUSH   HL   
423A   11 06 00               LD   DE,6   
423D   B7                     OR   A   
423E   ED 52                  SBC   HL,DE   
4240   7D                     LD   A,L   
4241   B4                     OR   H   
4242   CA C9 42               JP   Z,expectM_0_2725S45   
4245   CD 33 0B               CALL   printStr   
4248   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
427B   CD 33 0B               CALL   printStr   
427E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
428D   21 06 00               LD   hl,6   
4290   E5                     PUSH   hl   
4291   E5                     PUSH   hl   
4292   CD 52 0C               CALL   run   
4295   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
429D   CD BB 0A               CALL   flushBuffer   
42A0   CD 33 0B               CALL   printStr   
42A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42B0   E1                     POP   hl   
42B1   E5                     PUSH   hl   
42B2   E5                     PUSH   hl   
42B3   CD 52 0C               CALL   run   
42B6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
42C5   CD BB 0A               CALL   flushBuffer   
42C8   76                     HALT      
42C9                EXPECTM_0_2725S45:      
42C9   E1                     POP   HL   
42CA                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
42CA   31 00 4A               LD   SP,STACK   
42CD   CD 7B 0B               CALL   coldInit   
42D0   CD A3 48               CALL   execStr   
42D3   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
42DF   CD BB 0A               CALL   flushBuffer   
42E2                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
42E2   E1                     POP   HL   
42E3   E5                     PUSH   HL   
42E4   11 00 00               LD   DE,NUL   
42E7   B7                     OR   A   
42E8   ED 52                  SBC   HL,DE   
42EA   7D                     LD   A,L   
42EB   B4                     OR   H   
42EC   CA 52 43               JP   Z,expectM_0_2726S45   
42EF   CD 33 0B               CALL   printStr   
42F2   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
4304   CD 33 0B               CALL   printStr   
4307   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4316   21 00 00               LD   hl,NUL   
4319   E5                     PUSH   hl   
431A   E5                     PUSH   hl   
431B   CD 52 0C               CALL   run   
431E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4326   CD BB 0A               CALL   flushBuffer   
4329   CD 33 0B               CALL   printStr   
432C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4339   E1                     POP   hl   
433A   E5                     PUSH   hl   
433B   E5                     PUSH   hl   
433C   CD 52 0C               CALL   run   
433F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
434E   CD BB 0A               CALL   flushBuffer   
4351   76                     HALT      
4352                EXPECTM_0_2726S45:      
4352   E1                     POP   HL   
4353                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4353   31 00 4A               LD   SP,STACK   
4356   CD 7B 0B               CALL   coldInit   
4359   CD A3 48               CALL   execStr   
435C   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
4368   CD BB 0A               CALL   flushBuffer   
436B                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
436B   E1                     POP   HL   
436C   E5                     PUSH   HL   
436D   11 00 00               LD   DE,NUL   
4370   B7                     OR   A   
4371   ED 52                  SBC   HL,DE   
4373   7D                     LD   A,L   
4374   B4                     OR   H   
4375   CA DB 43               JP   Z,expectM_0_2727S45   
4378   CD 33 0B               CALL   printStr   
437B   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
438D   CD 33 0B               CALL   printStr   
4390   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
439F   21 00 00               LD   hl,NUL   
43A2   E5                     PUSH   hl   
43A3   E5                     PUSH   hl   
43A4   CD 52 0C               CALL   run   
43A7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43AF   CD BB 0A               CALL   flushBuffer   
43B2   CD 33 0B               CALL   printStr   
43B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43C2   E1                     POP   hl   
43C3   E5                     PUSH   hl   
43C4   E5                     PUSH   hl   
43C5   CD 52 0C               CALL   run   
43C8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43D7   CD BB 0A               CALL   flushBuffer   
43DA   76                     HALT      
43DB                EXPECTM_0_2727S45:      
43DB   E1                     POP   HL   
43DC                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
43DC   31 00 4A               LD   SP,STACK   
43DF   CD 7B 0B               CALL   coldInit   
43E2   CD A3 48               CALL   execStr   
43E5   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
43F1   CD BB 0A               CALL   flushBuffer   
43F4                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
43F4   E1                     POP   HL   
43F5   E5                     PUSH   HL   
43F6   11 00 00               LD   DE,NUL   
43F9   B7                     OR   A   
43FA   ED 52                  SBC   HL,DE   
43FC   7D                     LD   A,L   
43FD   B4                     OR   H   
43FE   CA 64 44               JP   Z,expectM_0_2728S45   
4401   CD 33 0B               CALL   printStr   
4404   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
4416   CD 33 0B               CALL   printStr   
4419   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4428   21 00 00               LD   hl,NUL   
442B   E5                     PUSH   hl   
442C   E5                     PUSH   hl   
442D   CD 52 0C               CALL   run   
4430   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4438   CD BB 0A               CALL   flushBuffer   
443B   CD 33 0B               CALL   printStr   
443E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
444B   E1                     POP   hl   
444C   E5                     PUSH   hl   
444D   E5                     PUSH   hl   
444E   CD 52 0C               CALL   run   
4451   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4460   CD BB 0A               CALL   flushBuffer   
4463   76                     HALT      
4464                EXPECTM_0_2728S45:      
4464   E1                     POP   HL   
4465                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4465   31 00 4A               LD   SP,STACK   
4468   CD 7B 0B               CALL   coldInit   
446B   CD A3 48               CALL   execStr   
446E   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
447A   CD BB 0A               CALL   flushBuffer   
447D                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
447D   E1                     POP   HL   
447E   E5                     PUSH   HL   
447F   11 00 00               LD   DE,NUL   
4482   B7                     OR   A   
4483   ED 52                  SBC   HL,DE   
4485   7D                     LD   A,L   
4486   B4                     OR   H   
4487   CA ED 44               JP   Z,expectM_0_2729S45   
448A   CD 33 0B               CALL   printStr   
448D   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
449F   CD 33 0B               CALL   printStr   
44A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44B1   21 00 00               LD   hl,NUL   
44B4   E5                     PUSH   hl   
44B5   E5                     PUSH   hl   
44B6   CD 52 0C               CALL   run   
44B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44C1   CD BB 0A               CALL   flushBuffer   
44C4   CD 33 0B               CALL   printStr   
44C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44D4   E1                     POP   hl   
44D5   E5                     PUSH   hl   
44D6   E5                     PUSH   hl   
44D7   CD 52 0C               CALL   run   
44DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44E9   CD BB 0A               CALL   flushBuffer   
44EC   76                     HALT      
44ED                EXPECTM_0_2729S45:      
44ED   E1                     POP   HL   
44EE                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
44EE   31 00 4A               LD   SP,STACK   
44F1   CD 7B 0B               CALL   coldInit   
44F4   CD A3 48               CALL   execStr   
44F7   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
44FF   CD BB 0A               CALL   flushBuffer   
4502                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
4502   E1                     POP   HL   
4503   E5                     PUSH   HL   
4504   11 66 4C               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4507   B7                     OR   A   
4508   ED 52                  SBC   HL,DE   
450A   7D                     LD   A,L   
450B   B4                     OR   H   
450C   CA 6E 45               JP   Z,expectM_0_2730S45   
450F   CD 33 0B               CALL   printStr   
4512   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
4520   CD 33 0B               CALL   printStr   
4523   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4532   21 66 4C               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4535   E5                     PUSH   hl   
4536   E5                     PUSH   hl   
4537   CD 52 0C               CALL   run   
453A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4542   CD BB 0A               CALL   flushBuffer   
4545   CD 33 0B               CALL   printStr   
4548   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4555   E1                     POP   hl   
4556   E5                     PUSH   hl   
4557   E5                     PUSH   hl   
4558   CD 52 0C               CALL   run   
455B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
456A   CD BB 0A               CALL   flushBuffer   
456D   76                     HALT      
456E                EXPECTM_0_2730S45:      
456E   E1                     POP   HL   
456F                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
456F   31 00 4A               LD   SP,STACK   
4572   CD 7B 0B               CALL   coldInit   
4575   CD A3 48               CALL   execStr   
4578   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
4580   CD BB 0A               CALL   flushBuffer   
4583                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
4583   E1                     POP   HL   
4584   E5                     PUSH   HL   
4585   11 34 4C               LD   DE,VARS + ("Z"-"A"+1)*2   
4588   B7                     OR   A   
4589   ED 52                  SBC   HL,DE   
458B   7D                     LD   A,L   
458C   B4                     OR   H   
458D   CA EF 45               JP   Z,expectM_0_2731S45   
4590   CD 33 0B               CALL   printStr   
4593   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
45A1   CD 33 0B               CALL   printStr   
45A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45B3   21 34 4C               LD   hl,VARS + ("Z"-"A"+1)*2   
45B6   E5                     PUSH   hl   
45B7   E5                     PUSH   hl   
45B8   CD 52 0C               CALL   run   
45BB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45C3   CD BB 0A               CALL   flushBuffer   
45C6   CD 33 0B               CALL   printStr   
45C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45D6   E1                     POP   hl   
45D7   E5                     PUSH   hl   
45D8   E5                     PUSH   hl   
45D9   CD 52 0C               CALL   run   
45DC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45EB   CD BB 0A               CALL   flushBuffer   
45EE   76                     HALT      
45EF                EXPECTM_0_2731S45:      
45EF   E1                     POP   HL   
45F0                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
45F0   31 00 4A               LD   SP,STACK   
45F3   CD 7B 0B               CALL   coldInit   
45F6   CD A3 48               CALL   execStr   
45F9   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
4601   CD BB 0A               CALL   flushBuffer   
4604                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
4604   E1                     POP   HL   
4605   E5                     PUSH   HL   
4606   11 32 4C               LD   DE,VARS + ("Z"-"A")*2   
4609   B7                     OR   A   
460A   ED 52                  SBC   HL,DE   
460C   7D                     LD   A,L   
460D   B4                     OR   H   
460E   CA 70 46               JP   Z,expectM_0_2732S45   
4611   CD 33 0B               CALL   printStr   
4614   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4622   CD 33 0B               CALL   printStr   
4625   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4634   21 32 4C               LD   hl,VARS + ("Z"-"A")*2   
4637   E5                     PUSH   hl   
4638   E5                     PUSH   hl   
4639   CD 52 0C               CALL   run   
463C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4644   CD BB 0A               CALL   flushBuffer   
4647   CD 33 0B               CALL   printStr   
464A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4657   E1                     POP   hl   
4658   E5                     PUSH   hl   
4659   E5                     PUSH   hl   
465A   CD 52 0C               CALL   run   
465D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
466C   CD BB 0A               CALL   flushBuffer   
466F   76                     HALT      
4670                EXPECTM_0_2732S45:      
4670   E1                     POP   HL   
4671                          ;*Macro unroll:  test "'A' /ad", VARS
4671   31 00 4A               LD   SP,STACK   
4674   CD 7B 0B               CALL   coldInit   
4677   CD A3 48               CALL   execStr   
467A   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
4682   CD BB 0A               CALL   flushBuffer   
4685                          ;*Macro unroll:  expect "'A' /ad",VARS
4685   E1                     POP   HL   
4686   E5                     PUSH   HL   
4687   11 00 4C               LD   DE,VARS   
468A   B7                     OR   A   
468B   ED 52                  SBC   HL,DE   
468D   7D                     LD   A,L   
468E   B4                     OR   H   
468F   CA F1 46               JP   Z,expectM_0_2733S45   
4692   CD 33 0B               CALL   printStr   
4695   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
46A3   CD 33 0B               CALL   printStr   
46A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46B5   21 00 4C               LD   hl,VARS   
46B8   E5                     PUSH   hl   
46B9   E5                     PUSH   hl   
46BA   CD 52 0C               CALL   run   
46BD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46C5   CD BB 0A               CALL   flushBuffer   
46C8   CD 33 0B               CALL   printStr   
46CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46D8   E1                     POP   hl   
46D9   E5                     PUSH   hl   
46DA   E5                     PUSH   hl   
46DB   CD 52 0C               CALL   run   
46DE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46ED   CD BB 0A               CALL   flushBuffer   
46F0   76                     HALT      
46F1                EXPECTM_0_2733S45:      
46F1   E1                     POP   HL   
46F2                          ;*Macro unroll:  test "-1. /c/vB 0#", $2D
46F2   31 00 4A               LD   SP,STACK   
46F5   CD 7B 0B               CALL   coldInit   
46F8   CD A3 48               CALL   execStr   
46FB   2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "-1. /c/vB 0#"   
4708   CD BB 0A               CALL   flushBuffer   
470B                          ;*Macro unroll:  expect "-1. /c/vB 0#",$2D
470B   E1                     POP   HL   
470C   E5                     PUSH   HL   
470D   11 2D 00               LD   DE,$2D   
4710   B7                     OR   A   
4711   ED 52                  SBC   HL,DE   
4713   7D                     LD   A,L   
4714   B4                     OR   H   
4715   CA 7C 47               JP   Z,expectM_0_2734S45   
4718   CD 33 0B               CALL   printStr   
471B   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /c/vB 0#"   
472E   CD 33 0B               CALL   printStr   
4731   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4740   21 2D 00               LD   hl,$2D   
4743   E5                     PUSH   hl   
4744   E5                     PUSH   hl   
4745   CD 52 0C               CALL   run   
4748   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4750   CD BB 0A               CALL   flushBuffer   
4753   CD 33 0B               CALL   printStr   
4756   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4763   E1                     POP   hl   
4764   E5                     PUSH   hl   
4765   E5                     PUSH   hl   
4766   CD 52 0C               CALL   run   
4769   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4778   CD BB 0A               CALL   flushBuffer   
477B   76                     HALT      
477C                EXPECTM_0_2734S45:      
477C   E1                     POP   HL   
477D                          ;*Macro unroll:  test "`A`.s /c/vB 0#", 65
477D   31 00 4A               LD   SP,STACK   
4780   CD 7B 0B               CALL   coldInit   
4783   CD A3 48               CALL   execStr   
4786   60 41 60 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "`A`.s /c/vB 0#"   
4795   CD BB 0A               CALL   flushBuffer   
4798                          ;*Macro unroll:  expect "`A`.s /c/vB 0#",65
4798   E1                     POP   HL   
4799   E5                     PUSH   HL   
479A   11 41 00               LD   DE,65   
479D   B7                     OR   A   
479E   ED 52                  SBC   HL,DE   
47A0   7D                     LD   A,L   
47A1   B4                     OR   H   
47A2   CA 0B 48               JP   Z,expectM_0_2735S45   
47A5   CD 33 0B               CALL   printStr   
47A8   43 6F 64 65 3A 20 60 41 60 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","`A`.s /c/vB 0#"   
47BD   CD 33 0B               CALL   printStr   
47C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47CF   21 41 00               LD   hl,65   
47D2   E5                     PUSH   hl   
47D3   E5                     PUSH   hl   
47D4   CD 52 0C               CALL   run   
47D7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47DF   CD BB 0A               CALL   flushBuffer   
47E2   CD 33 0B               CALL   printStr   
47E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47F2   E1                     POP   hl   
47F3   E5                     PUSH   hl   
47F4   E5                     PUSH   hl   
47F5   CD 52 0C               CALL   run   
47F8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4807   CD BB 0A               CALL   flushBuffer   
480A   76                     HALT      
480B                EXPECTM_0_2735S45:      
480B   E1                     POP   HL   
480C                          ;*Macro unroll:  test "123. /c/vB 1#", $32
480C   31 00 4A               LD   SP,STACK   
480F   CD 7B 0B               CALL   coldInit   
4812   CD A3 48               CALL   execStr   
4815   31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "123. /c/vB 1#"   
4823   CD BB 0A               CALL   flushBuffer   
4826                          ;*Macro unroll:  expect "123. /c/vB 1#",$32
4826   E1                     POP   HL   
4827   E5                     PUSH   HL   
4828   11 32 00               LD   DE,$32   
482B   B7                     OR   A   
482C   ED 52                  SBC   HL,DE   
482E   7D                     LD   A,L   
482F   B4                     OR   H   
4830   CA 98 48               JP   Z,expectM_0_2736S45   
4833   CD 33 0B               CALL   printStr   
4836   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /c/vB 1#"   
484A   CD 33 0B               CALL   printStr   
484D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
485C   21 32 00               LD   hl,$32   
485F   E5                     PUSH   hl   
4860   E5                     PUSH   hl   
4861   CD 52 0C               CALL   run   
4864   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
486C   CD BB 0A               CALL   flushBuffer   
486F   CD 33 0B               CALL   printStr   
4872   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
487F   E1                     POP   hl   
4880   E5                     PUSH   hl   
4881   E5                     PUSH   hl   
4882   CD 52 0C               CALL   run   
4885   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4894   CD BB 0A               CALL   flushBuffer   
4897   76                     HALT      
4898                EXPECTM_0_2736S45:      
4898   E1                     POP   HL   
4899                             ; test "$4321 /h. /c/vB 0#", $24
4899                             ; 
4899   CD 33 0B               CALL   printStr   
489C   44 6F 6E 65 21 00      .CSTR   "Done!"   
48A2   76                     HALT      
48A3                             ; executes a null teminated string (null executes exit_)
48A3                             ; the string should be immedaitely following the call
48A3                EXECSTR:      ; create a root stack frame
48A3   C1                     POP   bc   ; bc = code*
48A4   0B                     DEC   bc   ; dec to prepare for next routine
48A5   11 00 00               LD   de,0   
48A8   D5                     PUSH   de   ; push fake IP
48A9   D5                     PUSH   de   ; push null arg_list*
48AA   D5                     PUSH   de   ; push null first_arg*
48AB   D5                     PUSH   de   ; push fake BP
48AC   DD E9                  JP   (ix)   
48AE                STKSIZE:   EQU   $100   ; Stack size
48AE                TIBSIZE:   EQU   $100   ; 256 bytes
48AE                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
48AE                          ALIGN   $100   
4900                          DS   STKSIZE   
4A00                STACK:       
4A00                          ALIGN   $100   
4A00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4B00                          ALIGN   $100   
4B00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4C00                          ALIGN   $100   
4C00                VARS:        
4C00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4CD0                RESTARTS:      
4CD0                RST08:    DS   2   
4CD2                RST10:    DS   2   
4CD4                RST18:    DS   2   
4CD6                RST20:    DS   2   
4CD8                RST28:    DS   2   
4CDA                RST30:    DS   2   ; 
4CDC                BAUD:     DS   2   ; 
4CDE                INTVEC:   DS   2   ; 
4CE0                NMIVEC:   DS   2   ; 
4CE2                GETCVEC:   DS   2   ; 
4CE4                PUTCVEC:   DS   2   ; 
4CE6                SYSVARS:      
4CE6                             ; initialised sys variables (preserved)
4CE6                VDATAWIDTH:   DS   2   ; 
4CE8                VNUMBASE:   DS   2   ; 
4CEA                VTIBPTR:   DS   2   ; 
4CEC                VBUFPTR:   DS   2   ; 
4CEE                VNEXT:    DS   2   ; 
4CF0                VHEAPPTR:   DS   2   ; 
4CF2                             ; uninitialised sys variables (preserved)
4CF2                VPOINTER:   DS   2   ; 
4CF4                VREMAIN:   DS   2   ; 
4CF6                VSAVEDIP:   DS   2   ; 
4CF8                VSAVEDSP:   DS   2   ; 
4CFA                VSAVEDNEXT:   DS   2   ; 
4CFC                VSAVEDBP:   DS   2   ; 
4CFE                VCHECKSUM:   DS   2   ; 
4D00                             ; uninitialised sys variables (unpreserved)
4D00                VTEMP1:   DS   2   ; 
4D02                VTEMP2:   DS   2   ; 
4D04                VLASTDEF:   DS   2   ; 
4D06                VHASHSTR:   DS   2   ; 
4D08                TBPTR:    DS   2   ; reserved for tests
4D0A                TITLEBUF:   DS   20   
4D1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AB1 DEFINED AT LINE 1688 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 68 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 171 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 173 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 175 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 177 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 179 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 181 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 183 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 185 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 187 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 189 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 190 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 192 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 194 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             0327 DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032A DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           032D DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0330 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0333 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0336 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033B DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
HASH_:              033E DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0341 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0344 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             0347 DEFINED AT LINE 221 IN MAIN.asm
DBLQUOTE_:          034A DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             034D DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0350 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035A DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035B DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                035F DEFINED AT LINE 240 IN MAIN.asm
LT_:                036A DEFINED AT LINE 248 IN MAIN.asm
LT1:                0373 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037C DEFINED AT LINE 260 IN MAIN.asm
NOP_:               037F DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0381 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0384 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADD:                0384 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               038F DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0393 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
AT:                 0396 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
ADDR:               0396 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A0 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
AND:                03A0 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03A7 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AB DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AB DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B4 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
XOR1:               03B5 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03BF DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
PERCENT:            03C4 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
ARG:                03C4 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E0 DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG0A:              03E9 DEFINED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
ARG1:               03EE DEFINED AT LINE 371 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
ARG1A:              03F6 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
LBRACK:             03F9 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYSTART:         03F9 DEFINED AT LINE 383 IN MAIN.asm
RBRACK:             0415 DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRAYEND:           0415 DEFINED AT LINE 398 IN MAIN.asm
ARRAYEND1:          0431 DEFINED AT LINE 415 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
ARRAYEND2:          0441 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
ARRAYEND3:          0446 DEFINED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 414 IN MAIN.asm
HASH:               0465 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
ARRAYINDEX:         0465 DEFINED AT LINE 454 IN MAIN.asm
ARRAYINDEX0:        046D DEFINED AT LINE 460 IN MAIN.asm
ARRAYINDEX1:        046E DEFINED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
ARRAYINDEX2:        047A DEFINED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
ASSIGN:             047D DEFINED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            047F DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
ASSIGNX:            0480 DEFINED AT LINE 481 IN MAIN.asm
ASSIGN1:            048C DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
COLON:              048E DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            048E DEFINED AT LINE 497 IN MAIN.asm
ARGLIST1:           0498 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
ARGLIST1A:          04A0 DEFINED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
ARGLIST2:           04A8 DEFINED AT LINE 515 IN MAIN.asm
ARGLIST3:           04B0 DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ARGLIST4:           04B3 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST5:           04B9 DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
LBRACE:             04C4 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKSTART:         04C4 DEFINED AT LINE 543 IN MAIN.asm
BLOCKSTART1:        04C8 DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
BLOCKSTART2:        04F4 DEFINED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
BLOCKSTART3:        04F7 DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
BLOCKSTART4:        04FF DEFINED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
BLOCKSTART5:        0502 DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKSTART6:        052A DEFINED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
RBRACE:             052D DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
BLOCKEND:           052D DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 1397 IN MAIN.asm
BLOCKEND1:          055F DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
BLOCKEND2:          056B DEFINED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
BLOCKEND3:          057D DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
TICK:               0589 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
CHAR:               0589 DEFINED AT LINE 661 IN MAIN.asm
CHAR1:              058C DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
CHAR2:              0598 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CHAR3:              059B DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
BACKSLASH:          059E DEFINED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
COMMA:              05A0 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05A0 DEFINED AT LINE 685 IN MAIN.asm
DISCARD1:           05AD DEFINED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
SLASH:              05AF DEFINED AT LINE 697 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
COMMAND:            05AF DEFINED AT LINE 698 IN MAIN.asm
DIV:                05E8 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
DOT:                05F9 DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DIVIDE:             060B DEFINED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
DIVIDE1:            0610 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DIVIDE2:            061D DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
DIVIDE3:            061E DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
EQUALS:             0624 DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         062C DEFINED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           0631 DEFINED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0636 DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
TRUE1:              0639 DEFINED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
NULL1:              063F DEFINED AT LINE 812 IN MAIN.asm
FALSE1:             063F DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
CARET:              0645 DEFINED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 0645 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0646 DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
GO2:                064C DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
GOBLOCK:            0657 DEFINED AT LINE 837 IN MAIN.asm
GOBLOCK1:           0657 DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
GOBLOCK2:           067C DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
GOLAMBDA:           068A DEFINED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
GOLAMBDA1:          06A3 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
GOLAMBDA2:          06A9 DEFINED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOLAMBDA3:          06B4 DEFINED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
GOLAMBDA4:          06CC DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
GOLAMBDA5:          06CF DEFINED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
GOLAMBDA6:          06D2 DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
GOLAMBDA7:          06D5 DEFINED AT LINE 923 IN MAIN.asm
GOLAMBDA8:          06D9 DEFINED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
DOLLAR:             06E4 DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
HEXNUM:             06E4 DEFINED AT LINE 938 IN MAIN.asm
HEXNUM1:            06E7 DEFINED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
HEXNUM2:            06EF DEFINED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
UPCASE:             0701 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            0706 DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             070B DEFINED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
QUESTION:           0718 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 0718 DEFINED AT LINE 980 IN MAIN.asm
IFTE:               0724 DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
IFTE1:              0725 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
STAR:               0731 DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                0731 DEFINED AT LINE 1003 IN MAIN.asm
MUL2:               0733 DEFINED AT LINE 1006 IN MAIN.asm
MUL3:               073B DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
NUM:                074D DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               0756 DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
NUM1:               0757 DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
NUM2:               076F DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
NUM3:               077A DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
RPAREN:             077D DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          0785 DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
SHIFTLEFT:          07A1 DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         07A9 DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
SHIFTLEFT2:         07AA DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
SHIFTRIGHT:         07B1 DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        07B9 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
SHIFTRIGHT2:        07BD DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
DBLQUOTE:           07C4 DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             07C4 DEFINED AT LINE 1129 IN MAIN.asm
STRING1:            07CD DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
STRING2:            07D0 DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
STRING3:            07D9 DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
MINUS:              07EC DEFINED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                07F8 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
SUB1:               0802 DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
ERROR1:             080B DEFINED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1580 IN MAIN.asm
COMMENT:            0812 DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
COMMAND_A:          081B DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
ABSOLUTE:           0827 DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
ADDROF:             0834 DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
ADDROF1:            0848 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
ADDROF2:            0853 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
COMMAND_B:          0855 DEFINED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
BUFFERARRAY:        0861 DEFINED AT LINE 32
                    > USED AT LINE 751 IN MAIN.asm
BUFFERARRAYM_1770S1258: 086F DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       08AA DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
BUFFERDEC:          08B1 DEFINED AT LINE 1271 IN MAIN.asm
BUFFERDEC0:         08CB DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
BUFFERDEC1:         08DB DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
BUFFERDEC2:         08FB DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
BUFFERDEC3:         08FD DEFINED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
BUFFERDEC4:         090D DEFINED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
BUFFERDEC5:         090E DEFINED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
BUFFERHEX:          0917 DEFINED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
BUFFERHEX1:         0938 DEFINED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
BUFFERHEX2:         0941 DEFINED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
BREAK:              094F DEFINED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
BREAK1:             0956 DEFINED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
BUFFERSTRING:       0969 DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
BUFFERSTRING0:      0970 DEFINED AT LINE 1405 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
BUFFERSTRING1:      0976 DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
BUFFERCHAR:         0983 DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
BUFFERXCHARS:       0988 DEFINED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
BUFFERXCHARS0:      0989 DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1422 IN MAIN.asm
BUFFERXCHARS1:      0992 DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
BUFFERXCHARS2:      099A DEFINED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
COMMAND_I:          09A4 DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
COMMAND_P:          09B0 DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
PARTIAL:            09C2 DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
PRINTBUFFER:        09E2 DEFINED AT LINE 32
                    > USED AT LINE 1462 IN MAIN.asm
PRINTBUFFERM_1990S1492: 09EE DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0A08 DEFINED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
PRINTCHARS1:        0A0F DEFINED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
PRINTCHARS2:        0A15 DEFINED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
PRINTSTACK:         0A1A DEFINED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
COMMAND_R:          0A1C DEFINED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
REMAIN:             0A25 DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
SIZE:               0A2B DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
COMMAND_V:          0A33 DEFINED AT LINE 1567 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
CONSTBUFSTART:      0A48 DEFINED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
CONSTHEAPSTART:     0A4D DEFINED AT LINE 1586 IN MAIN.asm
CONSTTIBSTART:      0A52 DEFINED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
VARBUFPTR:          0A57 DEFINED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
VARHEAPPTR:         0A60 DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1572 IN MAIN.asm
VARTIBPTR:          0A69 DEFINED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
VARIABLE:           0A72 DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
CONSTANT:           0A75 DEFINED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
CHARS:              0A78 DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
CHARS1:             0A7B DEFINED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
DECIMAL:            0A80 DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
DECIMAL1:           0A83 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
HEXADECIMAL:        0A88 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
INPUT:              0A8E DEFINED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
KEY:                0A99 DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
OUTPUT:             0AA2 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
NUMBERS:            0AAB DEFINED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
FILTER:             0AB1 DEFINED AT LINE 1686 IN MAIN.asm
MAP:                0AB1 DEFINED AT LINE 1687 IN MAIN.asm
ARGS1A0L:           0AB3 DEFINED AT LINE 1695 IN MAIN.asm
ARGS1A2L:           0AB6 DEFINED AT LINE 1699 IN MAIN.asm
FLUSHBUFFER:        0ABB DEFINED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
JUMPTABLE:          0AD2 DEFINED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1568 IN MAIN.asm
JUMPTABLE0:         0AD4 DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1740 IN MAIN.asm
JUMPTABLE1:         0AE1 DEFINED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
JUMPTABLE2:         0AE2 DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
PRTSTR0:            0AE8 DEFINED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
PRTSTR:             0AEC DEFINED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
NESTING:            0AF1 DEFINED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
NESTING0:           0AFB DEFINED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
NESTING1A:          0B02 DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1778 IN MAIN.asm
NESTING1:           0B05 DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
NESTING2:           0B14 DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1790 IN MAIN.asm
NESTING3:           0B16 DEFINED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1792 IN MAIN.asm
NESTING4:           0B21 DEFINED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
PROMPT:             0B23 DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
CRLF:               0B2C DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
PRINTSTR:           0B33 DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 17
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 137
TITLESTR:           0B3A DEFINED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
INIT:               0B4E DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
INIT1:              0B56 DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
WARMINIT:           0B5E DEFINED AT LINE 1841 IN MAIN.asm
COLDBOOT0:          0B71 DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
COLDINIT:           0B7B DEFINED AT LINE 1854 IN MAIN.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
COLDBOOT1:          0B8C DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
COLDSTART:          0B99 DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
START:              0BA2 DEFINED AT LINE 1876 IN MAIN.asm
START1:             0BA8 DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
INTERPRET:          0BAE DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
INTERPRET2:         0BBD DEFINED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
INTERPRET3:         0BC5 DEFINED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
INTERPRET4:         0BD0 DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
INTERPRET5:         0BD5 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
INTERPRET5A:        0BF8 DEFINED AT LINE 1953 IN MAIN.asm
INTERPRET6:         0BFA DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
INTERPRET7:         0C08 DEFINED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
INTERPRET8:         0C1B DEFINED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
NEXT:               0C36 DEFINED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
NEXT1:              0C47 DEFINED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2001 IN MAIN.asm
EXIT:               0C4E DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
RUN:                0C52 DEFINED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
ERROR:              0C56 DEFINED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
BACKSPACE_:         0C69 DEFINED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
EDIT_:              0C79 DEFINED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
REEDIT_:            0C91 DEFINED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
PRINTSTACK_:        0C94 DEFINED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 13
                    > USED AT LINE 8
EXPECTM_0_2622S45:  0D8E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2627S45:  0E0F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2628S45:  0E86 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2629S45:  0EFB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2630S45:  0F70 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2631S45:  0FE5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2632S45:  105A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2633S45:  10D1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2634S45:  114A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2635S45:  11C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2636S45:  1238 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2637S45:  12B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2638S45:  132C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2639S45:  13A5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2640S45:  141E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2641S45:  149D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2642S45:  151C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2643S45:  1599 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2644S45:  161A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2645S45:  169F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2646S45:  1722 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2647S45:  179F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2648S45:  1824 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2649S45:  18A5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2650S45:  1922 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2651S45:  199F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2652S45:  1A24 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2653S45:  1AA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2654S45:  1B1E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2655S45:  1B9D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2656S45:  1C2C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2657S45:  1CA9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2658S45:  1D2E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2659S45:  1DAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2660S45:  1E30 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2661S45:  1EAD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2662S45:  1F2C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2663S45:  1FAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2664S45:  2028 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2665S45:  20A5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2666S45:  2122 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2667S45:  219F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2668S45:  221C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2669S45:  2299 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2670S45:  2316 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2671S45:  2393 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2672S45:  2412 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2673S45:  2491 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2674S45:  2510 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2675S45:  2591 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2676S45:  2612 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2677S45:  268D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2678S45:  2708 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2679S45:  2789 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2680S45:  2810 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2681S45:  2897 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2682S45:  2922 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2683S45:  29B7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2684S45:  2A4C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2685S45:  2AC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2686S45:  2B44 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2687S45:  2BC3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2688S45:  2C44 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2689S45:  2CC3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2690S45:  2D42 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2691S45:  2DC3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2692S45:  2E4A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2693S45:  2ED5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2694S45:  2F5C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2695S45:  2FED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2696S45:  3080 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2697S45:  3119 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2698S45:  31B6 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2699S45:  3245 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2700S45:  32DA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2701S45:  3371 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2702S45:  340A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2703S45:  34A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2704S45:  3546 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2705S45:  35D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2706S45:  367A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2707S45:  371D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2708S45:  37C2 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2709S45:  3871 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2710S45:  3920 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2711S45:  39AD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2712S45:  3A40 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2713S45:  3ACD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2714S45:  3B66 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2715S45:  3BFF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2716S45:  3CAA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2717S45:  3D5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2718S45:  3E10 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2719S45:  3EAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2720S45:  3F52 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2721S45:  3FF9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2722S45:  409A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2723S45:  4141 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2724S45:  41FE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2725S45:  42C9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2726S45:  4352 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2727S45:  43DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2728S45:  4464 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2729S45:  44ED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2730S45:  456E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2731S45:  45EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2732S45:  4670 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2733S45:  46F1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2734S45:  477C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2735S45:  480B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2736S45:  4898 DEFINED AT LINE 34
                    > USED AT LINE 10
EXECSTR:            48A3 DEFINED AT LINE 143
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4A00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TIB:                4A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
BUF:                4B00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
VARS:               4C00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           4CD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4CD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4CD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4CD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4CD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4CD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4CDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4CDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4CDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4CE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4CE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4CE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4CE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1856 IN MAIN.asm
VDATAWIDTH:         4CE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
VNUMBASE:           4CE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
VTIBPTR:            4CEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
VBUFPTR:            4CEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
VNEXT:              4CEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1868 IN MAIN.asm
VHEAPPTR:           4CF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1600 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
VPOINTER:           4CF2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
VREMAIN:            4CF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
VSAVEDIP:           4CF6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
VSAVEDSP:           4CF8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
VSAVEDNEXT:         4CFA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
VSAVEDBP:           4CFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
VCHECKSUM:          4CFE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             4D00 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
VTEMP2:             4D02 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
VLASTDEF:           4D04 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           4D06 DEFINED AT LINE 59 IN ram.asm
TBPTR:              4D08 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           4D0A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
HEAP:               4D1E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
