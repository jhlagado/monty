0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 50               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 50               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 50               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 50               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 50               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 50               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 50               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 50               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 50               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 50               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4E               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 50               LD   (RST08),HL   
0094   22 D2 50               LD   (RST10),HL   
0097   22 D4 50               LD   (RST18),HL   
009A   22 D6 50               LD   (RST20),HL   
009D   22 D8 50               LD   (RST28),HL   
00A0   22 DA 50               LD   (RST30),HL   
00A3   22 DE 50               LD   (INTVEC),HL   
00A6   22 E0 50               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 50               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 50               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0E               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   3E                     DB   lsb(bang_)   ; !
0181   F3                     DB   lsb(dquote_)   ; "
0182   EA                     DB   lsb(hash_)   ; #
0183   C0                     DB   lsb(dollar_)   ; $
0184   C9                     DB   lsb(percent_)   ; %
0185   20                     DB   lsb(amper_)   ; &
0186   D2                     DB   lsb(tick_)   ; '
0187   CC                     DB   lsb(lparen_)   ; (
0188   BD                     DB   lsb(rparen_)   ; )
0189   E7                     DB   lsb(star_)   ; *
018A   04                     DB   lsb(plus_)   ; +
018B   F0                     DB   lsb(comma_)   ; ,
018C   4E                     DB   lsb(minus_)   ; -
018D   D8                     DB   lsb(dot_)   ; .
018E   FF                     DB   lsb(slash_)   ; /	
018F   6B                     DB   lsb(num_)   ; 0
0190   6B                     DB   lsb(num_)   ; 1
0191   6B                     DB   lsb(num_)   ; 2
0192   6B                     DB   lsb(num_)   ; 3
0193   6B                     DB   lsb(num_)   ; 4
0194   6B                     DB   lsb(num_)   ; 5
0195   6B                     DB   lsb(num_)   ; 6
0196   6B                     DB   lsb(num_)   ; 7
0197   6B                     DB   lsb(num_)   ; 8
0198   6B                     DB   lsb(num_)   ; 9
0199   DB                     DB   lsb(colon_)   ; :
019A   D5                     DB   lsb(semicolon_)   ; ;
019B   86                     DB   lsb(lt_)   ; <
019C   6E                     DB   lsb(eq_)   ; =
019D   7B                     DB   lsb(gt_)   ; >
019E   E4                     DB   lsb(question_)   ; ?
019F   34                     DB   lsb(at_)   ; @
01A0   DE                     DB   lsb(upcase_)   ; A
01A1   DE                     DB   lsb(upcase_)   ; B
01A2   DE                     DB   lsb(upcase_)   ; C
01A3   DE                     DB   lsb(upcase_)   ; D
01A4   DE                     DB   lsb(upcase_)   ; E
01A5   DE                     DB   lsb(upcase_)   ; F
01A6   DE                     DB   lsb(upcase_)   ; G
01A7   DE                     DB   lsb(upcase_)   ; h
01A8   DE                     DB   lsb(upcase_)   ; I
01A9   DE                     DB   lsb(upcase_)   ; J
01AA   DE                     DB   lsb(upcase_)   ; K
01AB   DE                     DB   lsb(upcase_)   ; L
01AC   DE                     DB   lsb(upcase_)   ; M
01AD   DE                     DB   lsb(upcase_)   ; N
01AE   DE                     DB   lsb(upcase_)   ; O
01AF   DE                     DB   lsb(upcase_)   ; p
01B0   DE                     DB   lsb(upcase_)   ; Q
01B1   DE                     DB   lsb(upcase_)   ; R
01B2   DE                     DB   lsb(upcase_)   ; S
01B3   DE                     DB   lsb(upcase_)   ; T
01B4   DE                     DB   lsb(upcase_)   ; U
01B5   DE                     DB   lsb(upcase_)   ; V
01B6   DE                     DB   lsb(upcase_)   ; W
01B7   DE                     DB   lsb(upcase_)   ; X
01B8   DE                     DB   lsb(upcase_)   ; Y
01B9   DE                     DB   lsb(upcase_)   ; Z
01BA   C3                     DB   lsb(lbrack_)   ; [
01BB   F6                     DB   lsb(backslash_)   ; \
01BC   C6                     DB   lsb(rbrack_)   ; ]
01BD   ED                     DB   lsb(caret_)   ; ^
01BE   F9                     DB   lsb(underscore_)   ; _
01BF   F3                     DB   lsb(dquote_)   ; `     used for testing string   	
01C0   E1                     DB   lsb(lowcase_)   ; a
01C1   E1                     DB   lsb(lowcase_)   ; b
01C2   E1                     DB   lsb(lowcase_)   ; c
01C3   E1                     DB   lsb(lowcase_)   ; d
01C4   E1                     DB   lsb(lowcase_)   ; e
01C5   E1                     DB   lsb(lowcase_)   ; f
01C6   E1                     DB   lsb(lowcase_)   ; g
01C7   E1                     DB   lsb(lowcase_)   ; h
01C8   E1                     DB   lsb(lowcase_)   ; i
01C9   E1                     DB   lsb(lowcase_)   ; j
01CA   E1                     DB   lsb(lowcase_)   ; k
01CB   E1                     DB   lsb(lowcase_)   ; l
01CC   E1                     DB   lsb(lowcase_)   ; m
01CD   E1                     DB   lsb(lowcase_)   ; n
01CE   E1                     DB   lsb(lowcase_)   ; o
01CF   E1                     DB   lsb(lowcase_)   ; p
01D0   E1                     DB   lsb(lowcase_)   ; q
01D1   E1                     DB   lsb(lowcase_)   ; r
01D2   E1                     DB   lsb(lowcase_)   ; s
01D3   E1                     DB   lsb(lowcase_)   ; t
01D4   E1                     DB   lsb(lowcase_)   ; u
01D5   E1                     DB   lsb(lowcase_)   ; v
01D6   E1                     DB   lsb(lowcase_)   ; w
01D7   E1                     DB   lsb(lowcase_)   ; x
01D8   E1                     DB   lsb(lowcase_)   ; y
01D9   E1                     DB   lsb(lowcase_)   ; z
01DA   CC                     DB   lsb(lbrace_)   ; {
01DB   2B                     DB   lsb(pipe_)   ; |
01DC   CF                     DB   lsb(rbrace_)   ; }
01DD   FC                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4E                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 4F                  DW   BUF   ; vBUFPtr pointer into BUF
01E6   3A 0D                  DW   next   ; nNext
01E8   1C 51                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; unused
01EE   00 00                  DW   0   ; unused
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN *********************************************
0204                PLUS_:       ; add the top 2 members of the stack
0204                ADD:         
0204   03                     INC   bc   
0205   0A                     LD   a,(bc)   
0206   FE 2B                  CP   "+"   ; ++ increment variable
0208   20 05                  JR   nz,add1   
020A   E1                     POP   hl   
020B   23                     INC   hl   
020C   C3 97 07               JP   assign0   
020F                ADD1:        
020F   0B                     DEC   bc   
0210   D1                     POP   de   ; second term
0211   E1                     POP   hl   ; first term
0212   19                     ADD   hl,de   
0213                ADD3:        
0213   03                     INC   bc   
0214   0A                     LD   a,(bc)   
0215   FE 3D                  CP   "="   
0217   28 04                  JR   z,add4   
0219   0B                     DEC   bc   
021A   E5                     PUSH   hl   
021B   DD E9                  JP   (ix)   
021D                ADD4:        
021D   C3 97 07               JP   assign0   
0220                AMPER_:      
0220                AND:         
0220   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0221   E1                     POP   hl   
0222   7B                     LD   a,e   
0223   A5                     AND   l   
0224   6F                     LD   l,a   
0225   7A                     LD   a,d   
0226   A4                     AND   h   
0227                AND1:        
0227   67                     LD   h,a   
0228   E5                     PUSH   hl   
0229   DD E9                  JP   (ix)   
022B                PIPE_:       
022B                OR:          
022B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
022C   E1                     POP   hl   
022D   7B                     LD   a,e   
022E   B5                     OR   l   
022F   6F                     LD   l,a   
0230   7A                     LD   a,d   
0231   B4                     OR   h   
0232   18 F3                  JR   and1   
0234                             ; @ addr
0234                             ; -- ptr
0234                AT_:         
0234                ADDR:        
0234   ED 5B F4 50            LD   de,(vPointer)   
0238   21 F4 50               LD   hl,vPointer   
023B   C3 9C 04               JP   variable   
023E                BANG_:       ; logical invert, any non zero value
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3D                  CP   "="   
0242   20 04                  JR   nz,not   
0244   E1                     POP   hl   
0245   D1                     POP   de   
0246   18 55                  JR   notequals   
0248                NOT:         
0248   0B                     DEC   bc   
0249   21 00 00               LD   hl,0   ; is considered true
024C   18 2A                  JR   eq1   
024E                MINUS_:      
024E   03                     INC   bc   ; check if sign of a number
024F   0A                     LD   a,(bc)   
0250   0B                     DEC   bc   
0251   FE 30                  CP   "0"   
0253   38 04                  JR   c,sub   
0255   FE 3A                  CP   "9"+1   
0257   38 12                  JR   c,num_   
0259                SUB:         ; Subtract the value 2nd on stack from top of stack
0259   03                     INC   bc   
025A   FE 2D                  CP   "-"   
025C   20 05                  JR   nz,sub1   
025E   E1                     POP   hl   
025F   2B                     DEC   hl   
0260   C3 97 07               JP   assign0   
0263                SUB1:        
0263   0B                     DEC   bc   
0264   D1                     POP   de   
0265   E1                     POP   hl   
0266   B7                     OR   a   
0267   ED 52                  SBC   hl,de   
0269   18 A8                  JR   add3   
026B                NUM_:        
026B   C3 36 0B               JP   num   
026E                EQ_:         
026E   CD F1 0B               CALL   jumpTable   
0271   3D                     DB   "="   
0272   77                     DB   lsb(eq0_)   
0273   00                     DB   NUL   
0274   C3 95 07               JP   assign   
0277                EQ0_:        
0277   E1                     POP   hl   
0278                EQ1:         
0278   D1                     POP   de   
0279   18 1B                  JR   equals   
027B                GT_:         
027B   03                     INC   bc   
027C   0A                     LD   a,(bc)   
027D   FE 3E                  CP   ">"   
027F   CA 7E 0B               JP   z,shiftRight   
0282   D1                     POP   de   
0283   E1                     POP   hl   
0284   18 09                  JR   lt1   
0286                LT_:         
0286   03                     INC   bc   
0287   0A                     LD   a,(bc)   
0288   FE 3C                  CP   "<"   
028A   CA 6E 0B               JP   z,shiftLeft   
028D   E1                     POP   hl   
028E   D1                     POP   de   
028F                LT1:         
028F   FE 3D                  CP   "="   
0291   28 11                  JR   z,lessthaneq   
0293   0B                     DEC   bc   
0294   18 13                  JR   lessthan   
0296                             ; hl = value1, de = value2
0296                             ; hl = result
0296                EQUALS:      
0296   B7                     OR   a   ; reset the carry flag
0297   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0299   28 16                  JR   z,true1   
029B   18 1A                  JR   false1   
029D                NOTEQUALS:      
029D   B7                     OR   a   ; reset the carry flag
029E   ED 52                  SBC   hl,de   
02A0   20 0F                  JR   nz,true1   
02A2   18 13                  JR   false1   
02A4                             ; hl = value1 de = value2
02A4                             ; hl = result
02A4                LESSTHANEQ:      
02A4   B7                     OR   a   
02A5   ED 52                  SBC   hl,de   
02A7   18 05                  JR   lessthan1   
02A9                             ; hl = value1 de = value2
02A9                             ; hl = result
02A9                LESSTHAN:      
02A9   B7                     OR   a   
02AA   ED 52                  SBC   hl,de   
02AC   28 09                  JR   z,false1   
02AE                LESSTHAN1:      
02AE   FA B7 02               JP   m,false1   
02B1                TRUE1:       
02B1   21 FF FF               LD   hl,TRUE   
02B4   E5                     PUSH   hl   
02B5   DD E9                  JP   (ix)   
02B7                NULL1:       
02B7                FALSE1:      
02B7   21 00 00               LD   hl,FALSE   
02BA   E5                     PUSH   hl   
02BB                NOP_:        
02BB   DD E9                  JP   (ix)   
02BD                RPAREN_:      
02BD   C3 66 0B               JP   rparen   
02C0                DOLLAR_:      
02C0   C3 BB 0A               JP   dollar   
02C3                LBRACK_:      
02C3   C3 DB 06               JP   lbrack   
02C6                RBRACK_:      
02C6   C3 F7 06               JP   rbrack   
02C9                PERCENT_:      
02C9   C3 A6 06               JP   percent   
02CC                LPAREN_:      
02CC                LBRACE_:      
02CC   C3 A6 07               JP   lbrace   
02CF                RBRACE_:      
02CF   C3 0F 08               JP   rbrace   
02D2                TICK_:       
02D2   C3 96 08               JP   tick   
02D5                SEMICOLON_:      
02D5   C3 86 06               JP   semicolon   
02D8                DOT_:        
02D8   C3 A2 04               JP   dot   
02DB                COLON_:      
02DB   C3 88 06               JP   colon   
02DE                UPCASE_:      
02DE   C3 D8 0A               JP   upcase   
02E1                LOWCASE_:      
02E1   C3 DD 0A               JP   lowcase   
02E4                QUESTION_:      
02E4   C3 EF 0A               JP   question   
02E7                STAR_:       
02E7   C3 1A 0B               JP   star   
02EA                HASH_:       
02EA   C3 47 07               JP   hash   
02ED                CARET_:      
02ED   C3 1C 0A               JP   caret   
02F0                COMMA_:      
02F0   C3 86 06               JP   comma   
02F3                DQUOTE_:      
02F3   C3 91 0B               JP   dquote   
02F6                BACKSLASH_:      
02F6   C3 86 06               JP   backslash   
02F9                UNDERSCORE_:      
02F9   C3 86 06               JP   underscore   
02FC                TILDE_:      
02FC   C3 86 06               JP   tilde   
02FF                SLASH_:      
02FF   18 00                  JR   slash   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3 BEGIN *********************************************
0301                SLASH:       
0301                COMMAND:      
0301   03                     INC   bc   
0302   0A                     LD   a,(bc)   
0303   FE 2F                  CP   "/"   ; // comment
0305   CA FA 03               JP   z,comment   
0308   0B                     DEC   bc   
0309   CD DD 0B               CALL   commandTable   
030C   27                     DB   lsb(command_a_)   
030D   34                     DB   lsb(command_b_)   
030E   66                     DB   lsb(command_nop_)   
030F   68                     DB   lsb(decimal_)   
0310   66                     DB   lsb(command_nop_)   
0311   3F                     DB   lsb(command_f_)   
0312   66                     DB   lsb(command_nop_)   
0313   77                     DB   lsb(hexadecimal_)   
0314   42                     DB   lsb(command_i_)   
0315   66                     DB   lsb(command_nop_)   
0316   7D                     DB   lsb(key_)   
0317   66                     DB   lsb(command_nop_)   
0318   4B                     DB   lsb(command_m_)   
0319   66                     DB   lsb(command_nop_)   
031A   80                     DB   lsb(output_)   
031B   4E                     DB   lsb(command_p_)   
031C   57                     DB   lsb(command_q_)   
031D   60                     DB   lsb(command_r_)   
031E   66                     DB   lsb(command_nop_)   
031F   83                     DB   lsb(true_)   
0320   66                     DB   lsb(command_nop_)   
0321   63                     DB   lsb(command_v_)   
0322   86                     DB   lsb(words_)   
0323   89                     DB   lsb(xor_)   
0324   66                     DB   lsb(command_nop_)   
0325   66                     DB   lsb(command_nop_)   
0326   70                     DB   lsb(div_)   
0327                COMMAND_A_:      
0327   CD F1 0B               CALL   jumpTable   
032A   62                     DB   "b"   ; /ab absolute
032B   94                     DB   lsb(absolute_)   
032C   64                     DB   "d"   ; /ad address of
032D   A1                     DB   lsb(addrOf_)   
032E   73                     DB   "s"   ; /as array size
032F   C2                     DB   lsb(arraySize_)   
0330   00                     DB   NUL   
0331   C3 74 03               JP   error1_   
0334                COMMAND_B_:      
0334   CD F1 0B               CALL   jumpTable   
0337   72                     DB   "r"   ; /br break
0338   CA                     DB   lsb(break_)   
0339   79                     DB   "y"   ; /by cold boot
033A   CD                     DB   lsb(coldStart_)   
033B   00                     DB   NUL   
033C   C3 D0 03               JP   bytes_   ; /b bytes
033F                COMMAND_F_:      
033F   C3 03 04               JP   command_f   
0342                COMMAND_I_:      
0342   CD F1 0B               CALL   jumpTable   
0345   6E                     DB   "n"   ; /in input
0346   D8                     DB   lsb(input_)   
0347   00                     DB   NUL   
0348   C3 74 03               JP   error1_   
034B                COMMAND_M_:      
034B   C3 37 04               JP   command_m   
034E                COMMAND_P_:      
034E   CD F1 0B               CALL   jumpTable   
0351   63                     DB   "c"   ; /pc print chars
0352   E3                     DB   lsb(printChars_)   
0353   00                     DB   NUL   
0354   C3 74 03               JP   error1_   
0357                COMMAND_Q_:      
0357   CD F1 0B               CALL   jumpTable   
035A   74                     DB   "t"   ; /qt quit
035B   EA                     DB   lsb(quit_)   
035C   00                     DB   NUL   
035D   C3 74 03               JP   error1_   
0360                COMMAND_R_:      
0360   C3 43 04               JP   command_r   
0363                COMMAND_V_:      
0363   C3 5F 04               JP   command_v   
0366                COMMAND_NOP_:      
0366   DD E9                  JP   (ix)   
0368                DECIMAL_:      
0368   21 0A 00               LD   hl,10   
036B                DECIMAL1:      
036B   22 E8 50               LD   (vNumBase),hl   
036E   DD E9                  JP   (ix)   
0370                DIV_:        
0370   00                     DB   NUL   
0371   C3 47 09               JP   div   
0374                ERROR1_:      
0374   C3 59 0D               JP   error1   
0377                HEXADECIMAL_:      
0377   21 10 00               LD   hl,16   
037A   C3 6B 03               JP   decimal1   
037D                KEY_:        
037D   C3 7D 03               JP   key_   
0380                OUTPUT_:      
0380   C3 11 0B               JP   output   
0383                TRUE_:       
0383   C3 B1 02               JP   true1   
0386                WORDS_:      
0386   C3 F4 03               JP   words   
0389                XOR_:        
0389   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
038A                XOR1:        
038A   E1                     POP   hl   
038B   7B                     LD   a,e   
038C   AD                     XOR   l   
038D   6F                     LD   l,a   
038E   7A                     LD   a,d   
038F   AC                     XOR   h   
0390   67                     LD   h,a   
0391   E5                     PUSH   hl   
0392   DD E9                  JP   (ix)   
0394                             ; /ab absolute
0394                             ; num -- num
0394                ABSOLUTE_:      
0394   E1                     POP   hl   
0395   CB 7C                  BIT   7,h   
0397   C8                     RET   z   
0398   AF                     XOR   a   
0399   95                     SUB   l   
039A   6F                     LD   l,a   
039B   9F                     SBC   a,a   
039C   94                     SUB   h   
039D   67                     LD   h,a   
039E   E5                     PUSH   hl   
039F   DD E9                  JP   (ix)   
03A1                             ; /ad addrOf
03A1                             ; char -- addr
03A1                ADDROF_:      
03A1   E1                     POP   hl   ; a = char
03A2   7D                     LD   a,l   
03A3   FE 7B                  CP   "z"+1   ; if a > z then exit
03A5   30 19                  JR   nc,addrOf2   
03A7   D6 41                  SUB   "A"   ; a - 65
03A9   38 15                  JR   c,addrOf2   ; if < A then exit
03AB   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
03AD   38 06                  JR   c,addrOf1   
03AF   D6 06                  SUB   "a"-("Z"+1)   
03B1   FE 1A                  CP   "Z"-"A"+1   
03B3   38 0B                  JR   c,addrOf2   ; if < a then exit
03B5                ADDROF1:      
03B5   87                     ADD   a,a   ; double a
03B6   21 00 50               LD   hl,VARS   ; hl = VARS + a
03B9   85                     ADD   a,l   
03BA   6F                     LD   l,a   
03BB   3E 00                  LD   a,0   
03BD   8C                     ADC   a,h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0                ADDROF2:      
03C0   DD E9                  JP   (ix)   
03C2                             ; /as size of an array, num elements, ignores vDataWidth :-/
03C2                             ; array* -- num
03C2                ARRAYSIZE_:      
03C2   E1                     POP   hl   
03C3   2B                     DEC   hl   ; msb size
03C4   56                     LD   d,(hl)   
03C5   2B                     DEC   hl   ; lsb size
03C6   5E                     LD   e,(hl)   
03C7   D5                     PUSH   de   
03C8   DD E9                  JP   (ix)   
03CA                             ; /br
03CA                BREAK_:      
03CA   C3 7C 08               JP   break   
03CD                             ; /by
03CD                COLDSTART_:      
03CD   C3 A2 0C               JP   coldStart   
03D0                             ; /b
03D0                BYTES_:      
03D0   21 01 00               LD   hl,1   
03D3                BYTES1:      
03D3   22 E6 50               LD   (vDataWidth),hl   
03D6   DD E9                  JP   (ix)   
03D8                             ; Z80 port input
03D8                             ; port -- value
03D8                INPUT_:      
03D8   E1                     POP   hl   
03D9   59                     LD   e,c   ; save IP
03DA   4D                     LD   c,l   
03DB   ED 68                  IN   l,(c)   
03DD   26 00                  LD   h,0   
03DF   4B                     LD   c,e   ; restore IP
03E0   E5                     PUSH   hl   
03E1   DD E9                  JP   (ix)   
03E3                             ; /pc printChars
03E3                             ; char* len --
03E3                PRINTCHARS_:      
03E3   E1                     POP   hl   ; hl = count
03E4   D1                     POP   de   ; de = char*
03E5   CD BF 0B               CALL   printChars2   
03E8   DD E9                  JP   (ix)   
03EA                             ; /qt
03EA                QUIT_:       
03EA   E1                     POP   hl   ; hl = condition, exit if true
03EB   7D                     LD   a,l   
03EC   B4                     OR   h   
03ED   20 02                  JR   nz,quit1   
03EF   DD E9                  JP   (ix)   
03F1                QUIT1:       
03F1   C3 0F 08               JP   blockEnd   
03F4                             ; /w
03F4                WORDS:       
03F4   21 02 00               LD   hl,2   
03F7   C3 D3 03               JP   bytes1   
03FA                             ; //
03FA                COMMENT:      
03FA   03                     INC   bc   ; point to next char
03FB   0A                     LD   a,(bc)   
03FC   FE 20                  CP   " "   ; terminate on any char less than SP
03FE   30 FA                  JR   nc,comment   
0400   0B                     DEC   bc   
0401   DD E9                  JP   (ix)   
0403                             ;********************** PAGE 3 END *********************************************
0403                             ;********************** PAGE 4 BEGIN *********************************************
0403                COMMAND_F:      
0403   CD F1 0B               CALL   jumpTable   
0406   65                     DB   "e"   ; /fe forEach
0407   1A                     DB   lsb(forEach_)   
0408   6C                     DB   "l"   ; /fl flush output buffer
0409   1D                     DB   lsb(flush_)   
040A   73                     DB   "s"   ; /fs funcSrc
040B   22                     DB   lsb(funcSrc_)   
040C   31                     DB   "1"   
040D   25                     DB   lsb(f1_)   
040E   32                     DB   "2"   
040F   28                     DB   lsb(f2_)   
0410   33                     DB   "3"   
0411   2B                     DB   lsb(f3_)   
0412   34                     DB   "4"   
0413   2E                     DB   lsb(f4_)   
0414   7A                     DB   "z"   
0415   31                     DB   lsb(fz_)   
0416   00                     DB   NUL   
0417   C3 34 04               JP   false_   
041A                FOREACH_:      
041A   C3 F7 04               JP   forEach   
041D                             ; /fl flush
041D                             ; --
041D                FLUSH_:      
041D   CD C6 0B               CALL   flushBuffer   
0420   DD E9                  JP   (ix)   
0422                FUNCSRC_:      
0422   C3 43 05               JP   funcSrc   
0425                F1_:         
0425   C3 A5 0D               JP   f1   
0428                F2_:         
0428   C3 B1 0D               JP   f2   
042B                F3_:         
042B   C3 BD 0D               JP   f3   
042E                F4_:         
042E   C3 C9 0D               JP   f4   
0431                FZ_:         
0431   C3 0F 0A               JP   fz   
0434                FALSE_:      
0434   C3 B7 02               JP   false1   
0437                COMMAND_M:      
0437   CD F1 0B               CALL   jumpTable   
043A   70                     DB   "p"   ; /mp map
043B   40                     DB   lsb(map_)   
043C   00                     DB   NUL   
043D   C3 74 03               JP   error1_   
0440                MAP_:        
0440   C3 C4 05               JP   map   
0443                COMMAND_R:      
0443   CD F1 0B               CALL   jumpTable   
0446   63                     DB   "c"   ; /rc tail call optimisation
0447   50                     DB   lsb(recur_)   
0448   65                     DB   "e"   ; /re remainder
0449   56                     DB   lsb(remain_)   
044A   67                     DB   "g"   ; /rg range src
044B   5C                     DB   lsb(rangeSrc_)   
044C   00                     DB   NUL   
044D   C3 74 03               JP   error1_   
0450                RECUR_:      
0450   E1                     POP   hl   
0451   22 F2 50               LD   (vRecur),hl   
0454   DD E9                  JP   (ix)   
0456                REMAIN_:      
0456   2A F6 50               LD   hl,(vRemain)   
0459   E5                     PUSH   hl   
045A   DD E9                  JP   (ix)   
045C                RANGESRC_:      
045C   C3 06 06               JP   rangeSrc   
045F                COMMAND_V:      
045F   CD F1 0B               CALL   jumpTable   
0462   62                     DB   "b"   
0463   81                     DB   lsb(varBufPtr_)   
0464   68                     DB   "h"   
0465   8A                     DB   lsb(varHeapPtr_)   
0466   74                     DB   "t"   
0467   93                     DB   lsb(varTIBPtr_)   
0468   42                     DB   "B"   
0469   72                     DB   lsb(constBufStart_)   
046A   48                     DB   "H"   
046B   77                     DB   lsb(constHeapStart_)   
046C   54                     DB   "T"   
046D   7C                     DB   lsb(constTIBStart_)   
046E   00                     DB   NUL   
046F   C3 74 03               JP   error1_   
0472                CONSTBUFSTART_:      
0472   11 00 4F               LD   de,BUF   
0475   18 28                  JR   constant   
0477                CONSTHEAPSTART_:      
0477   11 1C 51               LD   de,HEAP   
047A   18 23                  JR   constant   
047C                CONSTTIBSTART_:      
047C   11 00 4E               LD   de,TIB   
047F   18 1E                  JR   constant   
0481                VARBUFPTR_:      
0481   ED 5B EC 50            LD   de,(vBufPtr)   
0485   21 EC 50               LD   hl,vBufPtr   
0488   18 12                  JR   variable   
048A                VARHEAPPTR_:      
048A   ED 5B F0 50            LD   de,(vHeapPtr)   
048E   21 F0 50               LD   hl,vHeapPtr   
0491   18 09                  JR   variable   
0493                VARTIBPTR_:      
0493   ED 5B EA 50            LD   de,(vTIBPtr)   
0497   21 EA 50               LD   hl,vTIBPtr   
049A   18 00                  JR   variable   
049C                VARIABLE:      
049C   22 F4 50               LD   (vPointer),hl   
049F                CONSTANT:      
049F   D5                     PUSH   de   
04A0   DD E9                  JP   (ix)   
04A2                DOT:         
04A2   CD F1 0B               CALL   jumpTable   
04A5   61                     DB   "a"   ; .a print array
04A6   7C                     DB   lsb(dotArray)   
04A7   63                     DB   "c"   ; .c print char
04A8   D6                     DB   lsb(dotChar_)   
04A9   73                     DB   "s"   ; .s print string
04AA   BC                     DB   lsb(dotString_)   
04AB   78                     DB   "x"   ; .x print x chars
04AC   DB                     DB   lsb(dotXChars_)   
04AD   00                     DB   NUL   ; .  print number
04AE   C3 B1 04               JP   dotNumber_   
04B1                             ; /bd buffer decimal
04B1                             ; value --
04B1                DOTNUMBER_:      
04B1   3A E8 50               LD   a,(vNumBase)   
04B4   FE 10                  CP   16   
04B6   CA BE 09               JP   z,bufferHex   ; else falls through
04B9   C3 58 09               JP   bufferDec   
04BC                             ; /bs buffered string
04BC                             ; string* --
04BC                DOTSTRING_:      
04BC   E1                     POP   hl   ; hl = string*
04BD   ED 5B EC 50            LD   de,(vBufPtr)   ; de = buffer*
04C1   18 06                  JR   dotString1   
04C3                DOTSTRING0:      
04C3   12                     LD   (de),a   ; a -> buffer*
04C4   1C                     INC   e   ; buffer*++, wraparound
04C5   CC C6 0B               CALL   z,flushBuffer   
04C8   23                     INC   hl   
04C9                DOTSTRING1:      
04C9   7E                     LD   a,(hl)   ; a <- string*
04CA   B7                     OR   a   ; if NUL exit loop
04CB   20 F6                  JR   nz,dotString0   
04CD   2A EC 50               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
04D0   ED 53 EC 50            LD   (vBufPtr),de   ; save buffer*' in pointer
04D4   DD E9                  JP   (ix)   
04D6                             ; /bc buffer char
04D6                             ; char --
04D6                DOTCHAR_:      
04D6   21 01 00               LD   hl,1   
04D9   18 01                  JR   dotXChars0   
04DB                             ; /bx buffered x chars
04DB                             ; char length --
04DB                DOTXCHARS_:      
04DB   E1                     POP   hl   ; hl = length
04DC                DOTXCHARS0:      
04DC   D1                     POP   de   ; a' = char
04DD   7B                     LD   a,e   
04DE   08                     EX   af,af'   
04DF   ED 5B EC 50            LD   de,(vBufPtr)   ; de = buffer*
04E3   18 08                  JR   dotXChars2   
04E5                DOTXCHARS1:      
04E5   08                     EX   af,af'   
04E6   12                     LD   (de),a   
04E7   08                     EX   af,af'   
04E8   1C                     INC   e   ; buffer*++, wraparound
04E9   CC C6 0B               CALL   z,flushBuffer   
04EC   2B                     DEC   hl   
04ED                DOTXCHARS2:      
04ED   7D                     LD   a,l   
04EE   B4                     OR   h   
04EF   20 F4                  JR   nz,dotXChars1   
04F1   ED 53 EC 50            LD   (vBufPtr),de   ; save buffer*'
04F5   DD E9                  JP   (ix)   
04F7                             ;********************** PAGE 4 END *********************************************
04F7                             ;*******************************************************************
04F7                             ; Monty implementations
04F7                             ;*******************************************************************
04F7                             ; /fe forEach
04F7                             ; src proc --
04F7                          ;*Macro unroll: FUNC forEach, 1, "spT"
04F7                FOREACH:      
04F7   CD 1C 0A               CALL   go   
04FA   00 00                  DW   NUL   
04FC   05 05                  DW   forEachM_1327S858   
04FE   00 05                  DW   $+2   
0500   01                     DB   1   
0501   03 73 70 54            .PSTR   "spT"   
0505                FOREACHM_1327S858:      
0505   7B                     DB   "{"   
0506   5B 30 5D 25 54 3D      DB   "[0]%T="   
050C   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data ; $56AA
0510   32 25 74 21 3D 7B      DB   "2%t!={"   ; if type == 2 skip
0516   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
051B   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
052D   3F 3F                  DB   "??"   ; ifte:
052F   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0538   7D 3F                  DB   "}?"   
053A   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0541   7D                     DB   "}"   
0542   00                     DB   0   
0543                             ; ; /fs funcSrc
0543                             ; ; func -- src
0543                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0543                FUNCSRC:      ; :f func or block
0543   CD 1C 0A               CALL   go   
0546   00 00                  DW   NUL   
0548   4F 05                  DW   funcSrcM_1342S874   
054A   4C 05                  DW   $+2   
054C   00                     DB   0   
054D   01 66                  .PSTR   "f"   
054F                FUNCSRCM_1342S874:      
054F   7B                     DB   "{"   
0550   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0554   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
055C   3A 64 74 7B            DB   ":dt{"   
0560   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0572   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0579   7D                     DB   "}"   
057A   7D                     DB   "}"   
057B   00                     DB   0   
057C                          ;*Macro unroll: FUNC dotArray, 2, "abc"
057C                DOTARRAY:      
057C   CD 1C 0A               CALL   go   
057F   00 00                  DW   NUL   
0581   8A 05                  DW   dotArrayM_1352S885   
0583   85 05                  DW   $+2   
0585   02                     DB   2   
0586   03 61 62 63            .PSTR   "abc"   
058A                DOTARRAYM_1352S885:      
058A   7B                     DB   "{"   
058B   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
05C2   7D                     DB   "}"   
05C3   00                     DB   0   
05C4                             ; /mp map
05C4                             ; src func -- src1
05C4                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map
05C4                MAP:         ; map
05C4   CD 1C 0A               CALL   go   
05C7   00 00                  DW   NUL   
05C9   D1 05                  DW   mapM_1359S893   
05CB   CD 05                  DW   $+2   
05CD   00                     DB   0   
05CE   02 73 66               .PSTR   "sf"   
05D1                MAPM_1359S893:      
05D1   7B                     DB   "{"   
05D2   3A 6B 74 7B            DB   ":kt{"   
05D6   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
05DE   3A 64 74 7B            DB   ":dt{"   ; call source with tb
05E2   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
05E7   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
05F3   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
05FC   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0603   7D                     DB   "}"   
0604   7D                     DB   "}"   
0605   00                     DB   0   
0606                             ; /rg rangeSrc
0606                             ; begin end step -- src
0606                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
0606                RANGESRC:      ; range source (begin end step)
0606   CD 1C 0A               CALL   go   
0609   00 00                  DW   NUL   
060B   15 06                  DW   rangeSrcM_1373S908   
060D   0F 06                  DW   $+2   
060F   01                     DB   1   
0610   04 62 65 73 4C         .PSTR   "besL"   
0615                RANGESRCM_1373S908:      
0615   7B                     DB   "{"   
0616   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0621   3A 6B 74 7B            DB   ":kt{"   
0625   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
062D   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0633   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
063A   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0642   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0651   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
0659   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0660   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0674   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
067C   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0683   7D                     DB   "}"   
0684   7D                     DB   "}"   
0685   00                     DB   0   
0686                             ;*******************************************************************
0686                             ; unused opcodes (reserved)
0686                             ;*******************************************************************
0686                BACKSLASH:      
0686                UNDERSCORE:      
0686                TILDE:       
0686                COMMA:       
0686                SEMICOLON:      
0686   DD E9                  JP   (ix)   
0688                             ;*******************************************************************
0688                             ; implementations
0688                             ;*******************************************************************
0688                             ; _ func
0688                             ; -- func*
0688                COLON:       
0688                LAMBDA:      
0688   DD E5                  PUSH   ix   
068A   DD 21 91 06            LD   ix,lambda1   
068E   C3 5F 07               JP   arglist   
0691                LAMBDA1:      
0691   03                     INC   bc   
0692   DD 21 99 06            LD   ix,lambda2   
0696   C3 A6 07               JP   blockStart   
0699                LAMBDA2:      
0699   DD 21 A0 06            LD   ix,lambda3   
069D   C3 AB 08               JP   createFunc   
06A0                LAMBDA3:      
06A0   E1                     POP   hl   
06A1   DD E1                  POP   ix   
06A3   E5                     PUSH   hl   
06A4   DD E9                  JP   (ix)   
06A6                             ; %a .. %z
06A6                             ; -- value
06A6                             ; returns value of arg
06A6                PERCENT:      
06A6                ARG:         
06A6   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
06A9   FD 56 05               LD   d,(iy+5)   
06AC   EB                     EX   de,hl   
06AD   7D                     LD   a,l   ; arg_list* == null, skip
06AE   B4                     OR   h   
06AF   28 1A                  JR   z,arg0a   
06B1   23                     INC   hl   ; a = num_args, hl = arg_list*
06B2   7E                     LD   a,(hl)   
06B3   23                     INC   hl   
06B4   B7                     OR   a   
06B5   28 14                  JR   z,arg0a   ; num_args == 0, skip
06B7   5F                     LD   e,a   ; e = a = num_args
06B8   03                     INC   bc   ; a = next char = dollar_name
06B9   0A                     LD   a,(bc)   
06BA   C5                     PUSH   bc   ; save IP
06BB   43                     LD   b,e   ; b = e = num_args
06BC   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
06BF   FD 56 03               LD   d,(iy+3)   
06C2                ARG0:        
06C2   1B                     DEC   de   ; a = dollar_name, de = next arg*
06C3   1B                     DEC   de   
06C4   BE                     CP   (hl)   
06C5   28 09                  JR   z,arg1   
06C7   23                     INC   hl   ; hl = next arg_list*
06C8   10 F8                  DJNZ   arg0   
06CA   C1                     POP   bc   ; no match, restore IP
06CB                ARG0A:       
06CB   11 00 00               LD   de,0   ; return 0
06CE   18 08                  JR   arg1a   
06D0                ARG1:        
06D0   C1                     POP   bc   ; restore IP
06D1   EB                     EX   de,hl   ; hl = arg*
06D2   22 F4 50               LD   (vPointer),hl   ; store arg* in setter
06D5   5E                     LD   e,(hl)   
06D6   23                     INC   hl   
06D7   56                     LD   d,(hl)   ; de = arg
06D8                ARG1A:       
06D8   D5                     PUSH   de   ; push arg
06D9   DD E9                  JP   (ix)   
06DB                LBRACK:      
06DB                ARRAYSTART:      
06DB   11 00 00               LD   de,0   ; create stack frame
06DE   D5                     PUSH   de   ; push null for IP
06DF   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
06E2   FD 56 05               LD   d,(iy+5)   ; 
06E5   D5                     PUSH   de   ; 
06E6   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
06E9   FD 56 03               LD   d,(iy+3)   ; 
06EC   D5                     PUSH   de   ; 
06ED   FD E5                  PUSH   iy   ; push BP
06EF   FD 21 00 00            LD   iy,0   ; BP = SP
06F3   FD 39                  ADD   iy,sp   
06F5   DD E9                  JP   (ix)   
06F7                RBRACK:      
06F7                ARRAYEND:      
06F7   FD 54                  LD   d,iyh   ; de = BP
06F9   FD 5D                  LD   e,iyl   
06FB   ED 43 00 51            LD   (vTemp1),bc   ; save IP
06FF   62 6B                  LD   hl,de   ; hl = de = BP
0701   B7                     OR   a   
0702   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0704   CB 3C                  SRL   h   ; 
0706   CB 1D                  RR   l   
0708   44 4D                  LD   bc,hl   ; bc = count
070A   2A F0 50               LD   hl,(vHeapPtr)   ; hl = array[-4]
070D   71                     LD   (hl),c   ; write num items in length word
070E   23                     INC   hl   
070F   70                     LD   (hl),b   
0710   23                     INC   hl   ; hl = array[0], bc = count
0711                             ; de = BP, hl = array[0], bc = count
0711   18 15                  JR   arrayEnd3   
0713                ARRAYEND1:      
0713   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0716   77                     LD   (hl),a   ; write lsb of array item
0717   23                     INC   hl   ; move to msb of array item
0718   3A E6 50               LD   a,(vDataWidth)   ; vDataWidth=1?
071B   3D                     DEC   a   
071C   28 05                  JR   z,arrayEnd2   
071E   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0721   77                     LD   (hl),a   ; write msb of array item
0722   23                     INC   hl   ; move to next word in array
0723                ARRAYEND2:      
0723   FD 2B                  DEC   iy   ; move to next word on stack
0725   FD 2B                  DEC   iy   
0727   0B                     DEC   bc   ; dec items count
0728                ARRAYEND3:      
0728   79                     LD   a,c   ; if not zero loop
0729   B0                     OR   b   
072A   20 E7                  JR   nz,arrayEnd1   
072C   EB                     EX   de,hl   ; de = end of array, hl = BP
072D   F9                     LD   sp,hl   ; sp = BP
072E   E1                     POP   hl   ; de = end of array, hl = old BP
072F   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0730   FD 62                  LD   iyh,d   
0732   FD 6B                  LD   iyl,e   
0734   D1                     POP   de   ; pop arg_list (discard)
0735   D1                     POP   de   ; pop first_arg* (discard)
0736   D1                     POP   de   ; pop IP (discard)
0737   ED 5B F0 50            LD   de,(vHeapPtr)   ; de = array[-2]
073B   13                     INC   de   
073C   13                     INC   de   
073D   D5                     PUSH   de   ; return array[0]
073E   22 F0 50               LD   (vHeapPtr),hl   ; move heap* to end of array
0741   ED 4B 00 51            LD   bc,(vTemp1)   ; restore IP
0745   DD E9                  JP   (ix)   
0747                             ; index of an array, based on vDataWidth
0747                             ; array* num -- value    ; also sets vPointer to address
0747                HASH:        
0747                ARRAYINDEX:      
0747   E1                     POP   hl   ; hl = index
0748   D1                     POP   de   ; de = array
0749   3A E6 50               LD   a,(vDataWidth)   ; a = data width
074C   3D                     DEC   a   
074D   28 01                  JR   z,arrayIndex1   
074F                ARRAYINDEX0:      
074F   29                     ADD   hl,hl   ; if data width = 2 then double
0750                ARRAYINDEX1:      
0750   19                     ADD   hl,de   ; add addr
0751   22 F4 50               LD   (vPointer),hl   ; store address in setter
0754   16 00                  LD   d,0   
0756   5E                     LD   e,(hl)   
0757   B7                     OR   a   ; check data width again
0758   28 02                  JR   z,arrayIndex2   
075A   23                     INC   hl   
075B   56                     LD   d,(hl)   
075C                ARRAYINDEX2:      
075C   D5                     PUSH   de   
075D   DD E9                  JP   (ix)   
075F                             ; arg_list - parses input (ab:c)
075F                             ; names after the : represent uninitialised locals
075F                             ; return values are the state of the stack after the block ends
075F                             ; format: numLocals totNumArgs argChars...
075F                             ; colon:
075F                ARGLIST:      
075F   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0762   2A F0 50               LD   hl,(vHeapPtr)   ; hl = heap*
0765   E5                     PUSH   hl   ; save start of arg_list
0766   23                     INC   hl   ; skip length fields to start of string
0767   23                     INC   hl   
0768   03                     INC   bc   ; point to next char
0769                ARGLIST1:      
0769   0A                     LD   a,(bc)   
076A   FE 3A                  CP   ":"   ; ":" switches from args to locals
076C   20 03                  JR   nz,arglist1a   
076E   14                     INC   d   ; non zero value local count acts as flag
076F   18 10                  JR   arglist3   
0771                ARGLIST1A:      
0771   FE 61                  CP   "a"   ; < "a" terminates arg_list
0773   38 0F                  JR   c,arglist4   
0775   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0777   30 0B                  JR   nc,arglist4   
0779                ARGLIST2:      
0779   77                     LD   (hl),a   
077A   23                     INC   hl   
077B   1C                     INC   e   ; increase arg count
077C   AF                     XOR   a   
077D   B2                     OR   d   
077E   28 01                  JR   z,arglist3   
0780   14                     INC   d   ; if d > 0 increase local count
0781                ARGLIST3:      
0781   03                     INC   bc   ; point to next char
0782   18 E5                  JR   arglist1   
0784                ARGLIST4:      
0784   0B                     DEC   bc   
0785   AF                     XOR   a   
0786   B2                     OR   d   
0787   28 01                  JR   z,arglist5   
0789   15                     DEC   d   ; remove initial inc
078A                ARGLIST5:      
078A   23                     INC   hl   
078B   22 F0 50               LD   (vHeapPtr),hl   ; bump heap* to after end of string
078E   E1                     POP   hl   ; hl = start of arg_list
078F   E5                     PUSH   hl   ; return start of arg_list
0790   72                     LD   (hl),d   ; write number of locals at start - 1
0791   23                     INC   hl   
0792   73                     LD   (hl),e   ; write number of args + locals at start - 2
0793   DD E9                  JP   (ix)   
0795                             ; value _oldValue --            ; uses address in vPointer
0795                ASSIGN:      
0795   E1                     POP   hl   ; discard last accessed value
0796   E1                     POP   hl   ; hl = new value
0797                ASSIGN0:      
0797   EB                     EX   de,hl   ; de = new value
0798                ASSIGNX:      
0798   2A F4 50               LD   hl,(vPointer)   
079B   73                     LD   (hl),e   
079C   3A E6 50               LD   a,(vDataWidth)   
079F   3D                     DEC   a   ; is it byte?
07A0   28 02                  JR   z,assign1   
07A2   23                     INC   hl   
07A3   72                     LD   (hl),d   
07A4                ASSIGN1:      
07A4   DD E9                  JP   (ix)   
07A6                LBRACE:      
07A6                BLOCKSTART:      
07A6   C5                     PUSH   bc   ; return pointer to first { of block
07A7   03                     INC   bc   
07A8   16 01                  LD   d,1   ; nesting: count first parenthesis
07AA                BLOCKSTART1:      ; Skip to end of definition
07AA   0A                     LD   a,(bc)   ; Get the next character
07AB   03                     INC   bc   ; Point to next character
07AC   FE 21                  CP   " " + 1   ; ignore whitespace
07AE   38 FA                  JR   c,blockStart1   
07B0   FE 29                  CP   ")"   
07B2   28 2D                  JR   z,blockStart4   
07B4   FE 7D                  CP   "}"   
07B6   28 29                  JR   z,blockStart4   
07B8   FE 5D                  CP   "]"   
07BA   28 25                  JR   z,blockStart4   
07BC   FE 28                  CP   "("   
07BE   28 16                  JR   z,blockStart2   
07C0   FE 7B                  CP   "{"   
07C2   28 12                  JR   z,blockStart2   
07C4   FE 5B                  CP   "["   
07C6   28 0E                  JR   z,blockStart2   
07C8   FE 27                  CP   "'"   
07CA   28 0D                  JR   z,blockStart3   
07CC   FE 60                  CP   "`"   
07CE   28 09                  JR   z,blockStart3   
07D0   FE 22                  CP   DQ   
07D2   28 05                  JR   z,blockStart3   
07D4   18 D4                  JR   blockStart1   
07D6                BLOCKSTART2:      
07D6   14                     INC   d   
07D7   18 D1                  JR   blockStart1   
07D9                BLOCKSTART3:      
07D9   3E 80                  LD   a,$80   
07DB   AA                     XOR   d   
07DC   57                     LD   d,a   
07DD   20 CB                  JR   nz,blockStart1   
07DF   18 03                  JR   blockStart5   
07E1                BLOCKSTART4:      
07E1   15                     DEC   d   
07E2   20 C6                  JR   nz,blockStart1   ; get the next element
07E4                BLOCKSTART5:      
07E4   60 69                  LD   hl,bc   ; hl = IP
07E6   11 1C 51               LD   de,HEAP   ; is IP pointing to object in heap
07E9   B7                     OR   a   ; IP - HEAP
07EA   ED 52                  SBC   hl,de   
07EC   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
07EE   28 1C                  JR   z,blockStart6   
07F0   60 69                  LD   hl,bc   ; hl = IP
07F2   D1                     POP   de   ; de = block*
07F3   ED 43 00 51            LD   (vTemp1),bc   ; save IP
07F7   B7                     OR   a   ; bc = size
07F8   ED 52                  SBC   hl,de   
07FA   44 4D                  LD   bc,hl   
07FC   EB                     EX   de,hl   ; hl = block* de = heap*
07FD   ED 5B F0 50            LD   de,(vHeapPtr)   
0801   D5                     PUSH   de   ; return hblock*
0802   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0804   ED 53 F0 50            LD   (vHeapPtr),de   ; heap* += size
0808   ED 4B 00 51            LD   bc,(vTemp1)   ; restore IP
080C                BLOCKSTART6:      
080C   0B                     DEC   bc   ; balanced, exit
080D   DD E9                  JP   (ix)   
080F                RBRACE:      
080F                BLOCKEND:      
080F   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0812   FD 56 01               LD   d,(iy+1)   
0815   ED 53 00 51            LD   (vTemp1),de   
0819   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
081C   FD 56 07               LD   d,(iy+7)   
081F   ED 53 02 51            LD   (vTemp2),de   
0823   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0826   FD 56 03               LD   d,(iy+3)   
0829   EB                     EX   de,hl   
082A   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
082D   FD 56 01               LD   d,(iy+1)   
0830   13                     INC   de   ; for carry flag <=
0831   B7                     OR   a   
0832   ED 52                  SBC   hl,de   
0834   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0836   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0838   FD 5D                  LD   e,iyl   
083A   21 08 00               LD   hl,8   
083D   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
083E   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
083F   18 0C                  JR   blockEnd2   
0841                BLOCKEND1:      ; same scope
0841   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0844   FD 56 03               LD   d,(iy+3)   
0847   EB                     EX   de,hl   
0848   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
084A   FD 5D                  LD   e,iyl   
084C   EB                     EX   de,hl   
084D                BLOCKEND2:      
084D   44 4D                  LD   bc,hl   ; bc = hl = BP
084F   B7                     OR   a   ; hl = BP - SP = count
0850   ED 72                  SBC   hl,sp   
0852   7D                     LD   a,l   
0853   B4                     OR   h   
0854   28 09                  JR   z,blockEnd3   
0856   C5                     PUSH   bc   ; bc = count, hl = BP
0857   44 4D                  LD   bc,hl   
0859   E1                     POP   hl   
085A   2B                     DEC   hl   ; hl = BP-1
085B   1B                     DEC   de   ; de = args*-1
085C   ED B8                  LDDR      
085E   13                     INC   de   
085F                BLOCKEND3:      
085F   EB                     EX   de,hl   ; sp = de = new tos*
0860   F9                     LD   sp,hl   
0861   ED 4B 02 51            LD   bc,(vTemp2)   
0865   FD 2A 00 51            LD   iy,(vTemp1)   
0869   ED 5B F2 50            LD   de,(vRecur)   ; de = recur vector
086D   7B                     LD   a,e   ; check for NUL
086E   B2                     OR   d   
086F   20 02                  JR   nz,blockEnd4   
0871   DD E9                  JP   (ix)   
0873                BLOCKEND4:      
0873   21 00 00               LD   hl,0   ; clear recur vector
0876   22 F2 50               LD   (vRecur),hl   
0879   C3 1D 0A               JP   go1   ; execute de
087C                             ; /br break from loop
087C                             ; --
087C                BREAK:       
087C   E1                     POP   hl   ; hl = condition, break if false
087D   7D                     LD   a,l   
087E   B4                     OR   h   
087F   28 02                  JR   z,break1   
0881   DD E9                  JP   (ix)   
0883                BREAK1:      
0883   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0885   FD 54                  LD   d,iyh   
0887   21 08 00               LD   hl,8   
088A   19                     ADD   hl,de   
088B   23                     INC   hl   
088C   23                     INC   hl   
088D   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0890   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0893   C3 0F 08               JP   blockEnd   
0896                TICK:        
0896                CHAR:        
0896   21 00 00               LD   hl,0   ; if "" is empty or null
0899                CHAR1:       
0899   03                     INC   bc   ; point to next char
089A   0A                     LD   a,(bc)   
089B   FE 27                  CP   "'"   ; ' is the terminator
089D   28 09                  JR   z,char3   
089F   FE 5C                  CP   $5c   ; \ is the escape
08A1   20 02                  JR   nz,char2   
08A3   03                     INC   bc   
08A4   0A                     LD   a,(bc)   
08A5                CHAR2:       
08A5   6F                     LD   l,a   
08A6   18 F1                  JR   char1   
08A8                CHAR3:       
08A8   E5                     PUSH   hl   
08A9   DD E9                  JP   (ix)   
08AB                             ; ";" createFunc
08AB                             ; arg_list* block* -- func*
08AB                             ; semicolon:
08AB                CREATEFUNC:      
08AB   ED 43 00 51            LD   (vTemp1),bc   ; save IP
08AF   E1                     POP   hl   ; hl = block*
08B0   22 02 51               LD   (vTemp2),hl   ; save block*
08B3   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
08B6   FD 56 05               LD   d,(iy+5)   
08B9   7B                     LD   a,e   ; if arg_list == null then make a func
08BA   B2                     OR   d   
08BB   20 09                  JR   nz,createFunc0   
08BD   21 00 00               LD   hl,0   ; partial_array = null
08C0   ED 5B F0 50            LD   de,(vHeapPtr)   ; de = compile*
08C4   18 65                  JR   createFunc5   
08C6                CREATEFUNC0:      
08C6   E1                     POP   hl   ; hl = inner_arg_list*
08C7   E5                     PUSH   hl   ; save inner_arg_list
08C8   ED 5B F0 50            LD   de,(vHeapPtr)   ; de = compile*
08CC   7E                     LD   a,(hl)   ; compile inner_num_locals
08CD   4F                     LD   c,a   ; b = inner_num_locals
08CE   12                     LD   (de),a   
08CF   23                     INC   hl   
08D0   13                     INC   de   
08D1   7E                     LD   a,(hl)   ; compile inner_length
08D2   12                     LD   (de),a   
08D3   91                     SUB   c   ; a = inner_num args
08D4   23                     INC   hl   
08D5   13                     INC   de   
08D6   B7                     OR   a   ; compile args if inner_length > 0
08D7   28 05                  JR   z,createFunc1   
08D9   4F                     LD   c,a   ; bc = a
08DA   06 00                  LD   b,0   
08DC   ED B0                  LDIR      
08DE                CREATEFUNC1:      
08DE   EB                     EX   de,hl   ; hl = outer_arg_list
08DF   FD 5E 04               LD   e,(iy+4)   
08E2   FD 56 05               LD   d,(iy+5)   
08E5   EB                     EX   de,hl   
08E6   23                     INC   hl   ; a = outer_length
08E7   7E                     LD   a,(hl)   
08E8   23                     INC   hl   
08E9   B7                     OR   a   
08EA   28 05                  JR   z,createFunc2   
08EC   4F                     LD   c,a   
08ED   06 00                  LD   b,0   
08EF   ED B0                  LDIR      ; append outer_args
08F1                CREATEFUNC2:      ; a = outer_length
08F1   47                     LD   b,a   ; b = a = outer_length
08F2   2A F0 50               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
08F5   23                     INC   hl   
08F6   7E                     LD   a,(hl)   ; add outer_length to new length
08F7   80                     ADD   a,b   
08F8   77                     LD   (hl),a   
08F9   2B                     DEC   hl   
08FA   78                     LD   a,b   ; save outer_length in a'
08FB   08                     EX   af,af'   
08FC   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
08FD   7E                     LD   a,(hl)   ; c = a = inner_num_locals
08FE   B7                     OR   a   
08FF   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0901   4F                     LD   c,a   ; c = inner_num_locals
0902   06 00                  LD   b,0   ; bc = inner_num_locals
0904   23                     INC   hl   ; a = inner_length
0905   7E                     LD   a,(hl)   
0906   91                     SUB   c   ; a = inner_num_args
0907   23                     INC   hl   ; hl = inner_arg_chars
0908   85                     ADD   a,l   ; hl += a
0909   6F                     LD   l,a   
090A   3E 00                  LD   a,0   
090C   84                     ADD   a,h   
090D   67                     LD   h,a   
090E   ED B0                  LDIR      ; append inner_locals
0910                CREATEFUNC2A:      
0910   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0911   12                     LD   (de),a   ; compile partial_array length field
0912   13                     INC   de   
0913   AF                     XOR   a   
0914   12                     LD   (de),a   
0915   13                     INC   de   
0916   D5                     PUSH   de   ; push partial_array*
0917   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0918   FD 5E 02               LD   e,(iy+2)   
091B   FD 56 03               LD   d,(iy+3)   
091E   EB                     EX   de,hl   
091F                CREATEFUNC3:      
091F   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0920   4E                     LD   c,(hl)   
0921   2B                     DEC   hl   
0922   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0923   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0924   13                     INC   de   
0925   79                     LD   a,c   
0926   12                     LD   (de),a   
0927   13                     INC   de   
0928   10 F5                  DJNZ   createFunc3   ; b = outer_length
092A                CREATEFUNC4:      
092A   E1                     POP   hl   ; hl = partial_array*
092B                CREATEFUNC5:      
092B   C1                     POP   bc   ; bc = new_arg_list*
092C   D5                     PUSH   de   ; return new func*
092D   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
092E   73                     LD   (hl),e   ; compile partial_array* to func
092F   23                     INC   hl   
0930   72                     LD   (hl),d   
0931   23                     INC   hl   
0932   ED 5B 02 51            LD   de,(vTemp2)   ; de = block*
0936   73                     LD   (hl),e   ; compile block* to func
0937   23                     INC   hl   
0938   72                     LD   (hl),d   
0939   23                     INC   hl   
093A   71                     LD   (hl),c   ; compile new_arg_list* to func
093B   23                     INC   hl   
093C   70                     LD   (hl),b   
093D   23                     INC   hl   
093E   22 F0 50               LD   (vHeapPtr),hl   ; bump heap ptr
0941   ED 4B 00 51            LD   bc,(vTemp1)   ; restore IP
0945   DD E9                  JP   (ix)   
0947                DIV:         
0947   D1                     POP   de   
0948   E1                     POP   hl   
0949   C5                     PUSH   bc   ; preserve the IP
094A   44 4D                  LD   bc,hl   
094C   CD F6 09               CALL   divide   
094F   EB                     EX   de,hl   
0950   ED 53 F6 50            LD   (vRemain),de   
0954   C1                     POP   bc   
0955   C3 13 02               JP   add3   
0958                             ; /bd buffer decimal
0958                             ; value --
0958                BUFFERDEC:      
0958   ED 5B EC 50            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
095C   D9                     EXX      
095D   E1                     POP   hl   ; hl = value
095E   CD 72 09               CALL   bufferDec0   
0961   D9                     EXX      ; de = buffer*' bc = IP
0962   3E 20                  LD   a," "   ; append space to buffer
0964   12                     LD   (de),a   
0965   1C                     INC   e   ; buffer*++, wraparound
0966   CC C6 0B               CALL   z,flushBuffer   
0969   2A EC 50               LD   hl,(vBufPtr)   ; hl = buffer*
096C   ED 53 EC 50            LD   (vBufPtr),de   ; update buffer* with buffer*'
0970   DD E9                  JP   (ix)   
0972                             ; hl = value
0972                             ; de' = buffer*
0972                             ; a, bc, de, hl destroyed
0972                BUFFERDEC0:      
0972   CB 7C                  BIT   7,h   
0974   28 0C                  JR   z,bufferDec1   
0976   D9                     EXX      
0977   3E 2D                  LD   a,"-"   
0979   12                     LD   (de),a   
097A   13                     INC   de   
097B   D9                     EXX      
097C   AF                     XOR   a   
097D   95                     SUB   l   
097E   6F                     LD   l,a   
097F   9F                     SBC   a,a   
0980   94                     SUB   h   
0981   67                     LD   h,a   
0982                BUFFERDEC1:      
0982   0E 00                  LD   c,0   ; leading zeros flag = false
0984   11 F0 D8               LD   de,-10000   
0987   CD A2 09               CALL   bufferDec2   
098A   11 18 FC               LD   de,-1000   
098D   CD A2 09               CALL   bufferDec2   
0990   11 9C FF               LD   de,-100   
0993   CD A2 09               CALL   bufferDec2   
0996   1E F6                  LD   e,-10   
0998   CD A2 09               CALL   bufferDec2   
099B   0C                     INC   c   ; flag = true for at least digit
099C   1E FF                  LD   e,-1   
099E   CD A2 09               CALL   bufferDec2   
09A1   C9                     RET      
09A2                BUFFERDEC2:      
09A2   06 2F                  LD   b,"0"-1   
09A4                BUFFERDEC3:      
09A4   04                     INC   b   
09A5   19                     ADD   hl,de   
09A6   38 FC                  JR   c,bufferDec3   
09A8   ED 52                  SBC   hl,de   
09AA   3E 30                  LD   a,"0"   
09AC   B8                     CP   b   
09AD   20 05                  JR   nz,bufferDec4   
09AF   AF                     XOR   a   
09B0   B1                     OR   c   
09B1   C8                     RET   z   
09B2   18 01                  JR   bufferDec5   
09B4                BUFFERDEC4:      
09B4   0C                     INC   c   
09B5                BUFFERDEC5:      
09B5   78                     LD   a,b   
09B6   D9                     EXX      
09B7   12                     LD   (de),a   
09B8   1C                     INC   e   
09B9   CC C6 0B               CALL   z,flushBuffer   
09BC   D9                     EXX      
09BD   C9                     RET      
09BE                             ; /bh buffer hex
09BE                             ; value --
09BE                BUFFERHEX:      
09BE   E1                     POP   hl   ; hl = value
09BF   ED 5B EC 50            LD   de,(vBufPtr)   
09C3   3E 24                  LD   a,"$"   ; # prefix
09C5   12                     LD   (de),a   
09C6   1C                     INC   e   ; buffer*++, wraparound
09C7   CC C6 0B               CALL   z,flushBuffer   
09CA   7C                     LD   a,h   
09CB   CD DF 09               CALL   bufferHex1   
09CE   7D                     LD   a,l   
09CF   CD DF 09               CALL   bufferHex1   
09D2   3E 20                  LD   a," "   ; append space to buffer
09D4   12                     LD   (de),a   
09D5   1C                     INC   e   ; buffer*++, wraparound
09D6   CC C6 0B               CALL   z,flushBuffer   
09D9   ED 53 EC 50            LD   (vBufPtr),de   
09DD   DD E9                  JP   (ix)   
09DF                BUFFERHEX1:      
09DF   F5                     PUSH   af   
09E0   1F                     RRA      
09E1   1F                     RRA      
09E2   1F                     RRA      
09E3   1F                     RRA      
09E4   CD E8 09               CALL   bufferHex2   
09E7   F1                     POP   af   
09E8                BUFFERHEX2:      
09E8   E6 0F                  AND   0x0F   
09EA   C6 90                  ADD   a,0x90   
09EC   27                     DAA      
09ED   CE 40                  ADC   a,0x40   
09EF   27                     DAA      
09F0   12                     LD   (de),a   
09F1   1C                     INC   e   ; buffer*++, wraparound
09F2   CC C6 0B               CALL   z,flushBuffer   
09F5   C9                     RET      
09F6                             ; division subroutine.
09F6                             ; bc: divisor, de: dividend, hl: remainder
09F6                DIVIDE:      
09F6   21 00 00               LD   hl,0   ; zero the remainder
09F9   3E 10                  LD   a,16   ; loop counter
09FB                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
09FB   CB 21                  SLA   c   
09FD   CB 10                  RL   b   
09FF   ED 6A                  ADC   hl,hl   
0A01   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0A03   38 03                  JR   c,divide2   
0A05   0C                     INC   c   
0A06   18 01                  JR   divide3   
0A08                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0A08   19                     ADD   hl,de   
0A09                DIVIDE3:      
0A09   3D                     DEC   a   
0A0A   20 EF                  JR   nz,divide1   
0A0C   50 59                  LD   de,bc   ; result from bc to de
0A0E   C9                     RET      
0A0F                FZ:          
0A0F   21 00 4E               LD   hl,STACK   
0A12   ED 72                  SBC   hl,sp   
0A14   CB 3C                  SRL   h   
0A16   CB 1D                  RR   l   
0A18   E5                     PUSH   hl   
0A19   C3 B1 04               JP   dotNumber_   
0A1C                             ; execute a block of code which ends with }
0A1C                             ; creates a root scope if BP == stack
0A1C                             ; else uses outer scope
0A1C                CARET:       
0A1C                GO:          
0A1C   D1                     POP   de   ; de = block*
0A1D                GO1:         
0A1D   7B                     LD   a,e   ; if block* == null, exit
0A1E   B2                     OR   d   
0A1F   20 02                  JR   nz,go2   
0A21   DD E9                  JP   (ix)   
0A23                GO2:         
0A23   1A                     LD   a,(de)   
0A24   FE 7B                  CP   "{"   
0A26   28 06                  JR   z,goBlock   
0A28   FE 28                  CP   "("   
0A2A   C2 61 0A               JP   nz,goFunc   
0A2D   D5                     PUSH   de   ; push de just before stack frame
0A2E                GOBLOCK:      
0A2E   ED 53 00 51            LD   (vTemp1),de   ; save de
0A32   21 00 4E               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0A35   FD 54                  LD   d,iyh   
0A37   FD 5D                  LD   e,iyl   
0A39   B7                     OR   a   ; if stack* == BP then this is the root_scope
0A3A   ED 52                  SBC   hl,de   
0A3C   ED 5B 00 51            LD   de,(vTemp1)   ; restore de
0A40   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0A41   B4                     OR   h   
0A42   3E 00                  LD   a,0   
0A44   28 6A                  JR   z,goFunc8   
0A46   C5                     PUSH   bc   ; push IP
0A47   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A4A   FD 46 05               LD   b,(iy+5)   
0A4D   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A50   FD 66 03               LD   h,(iy+3)   
0A53                GOBLOCK2:      
0A53   C5                     PUSH   bc   ; arg_list*
0A54   E5                     PUSH   hl   ; first_arg*
0A55   FD E5                  PUSH   iy   ; push BP
0A57   FD 21 00 00            LD   iy,0   ; BP = SP
0A5B   FD 39                  ADD   iy,sp   
0A5D                GOBLOCK3:      
0A5D   42 4B                  LD   bc,de   ; bc = de = block*-1
0A5F   DD E9                  JP   (ix)   
0A61                GOFUNC:      ; execute func
0A61   EB                     EX   de,hl   ; hl = func*
0A62   5E                     LD   e,(hl)   ; de = partial_array*
0A63   23                     INC   hl   
0A64   56                     LD   d,(hl)   
0A65   23                     INC   hl   
0A66   7B                     LD   a,e   ; if partial_array* == null skip
0A67   B2                     OR   d   
0A68   28 21                  JR   z,goFunc3   
0A6A   ED 43 00 51            LD   (vTemp1),bc   
0A6E   22 02 51               LD   (vTemp2),hl   ; save bc,hl
0A71   EB                     EX   de,hl   ; hl = partial_array*
0A72   2B                     DEC   hl   ; bc = count
0A73   46                     LD   b,(hl)   
0A74   2B                     DEC   hl   
0A75   4E                     LD   c,(hl)   
0A76   23                     INC   hl   ; hl = array data*
0A77   23                     INC   hl   
0A78   18 06                  JR   goFunc2   ; push each item on stack
0A7A                GOFUNC1:      
0A7A   5E                     LD   e,(hl)   ; de = partial item
0A7B   23                     INC   hl   
0A7C   56                     LD   d,(hl)   
0A7D   23                     INC   hl   
0A7E   D5                     PUSH   de   ; push on stack
0A7F   0B                     DEC   bc   
0A80                GOFUNC2:      
0A80   79                     LD   a,c   ; if count != 0 then loop
0A81   B0                     OR   b   
0A82   20 F6                  JR   nz,goFunc1   
0A84   ED 4B 00 51            LD   bc,(vTemp1)   ; restore bc
0A88   2A 02 51               LD   hl,(vTemp2)   ; restore hl
0A8B                GOFUNC3:      
0A8B   5E                     LD   e,(hl)   ; de = block*
0A8C   23                     INC   hl   
0A8D   56                     LD   d,(hl)   
0A8E   23                     INC   hl   
0A8F   ED 53 00 51            LD   (vTemp1),de   ; save block*
0A93   5E                     LD   e,(hl)   ; de = arg_list*
0A94   23                     INC   hl   
0A95   56                     LD   d,(hl)   
0A96   23                     INC   hl   
0A97   EB                     EX   de,hl   ; hl = arg_list*
0A98   ED 5B 00 51            LD   de,(vTemp1)   ; restore de = block*
0A9C   7D                     LD   a,l   ; if arg_list* == null a = 0
0A9D   B4                     OR   h   
0A9E   20 03                  JR   nz,goFunc4   
0AA0   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0AA1   18 0D                  JR   goFunc8   
0AA3                GOFUNC4:      ; allocate locals
0AA3   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0AA4   18 03                  JR   goFunc6   
0AA6                GOFUNC5:      ; loop
0AA6   3B                     DEC   sp   
0AA7   3B                     DEC   sp   
0AA8   3D                     DEC   a   
0AA9                GOFUNC6:      
0AA9   B7                     OR   a   
0AAA   20 FA                  JR   nz,goFunc5   ; end loop
0AAC                GOFUNC7:      
0AAC   23                     INC   hl   ; a = num_args* x 2
0AAD   7E                     LD   a,(hl)   
0AAE   2B                     DEC   hl   
0AAF   87                     ADD   a,a   ; a *= 2
0AB0                GOFUNC8:      
0AB0   C5                     PUSH   bc   ; push IP
0AB1   44 4D                  LD   bc,hl   
0AB3   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0AB6   85                     ADD   a,l   
0AB7   6F                     LD   l,a   
0AB8   39                     ADD   hl,sp   
0AB9   18 98                  JR   goBlock2   
0ABB                DOLLAR:      
0ABB                HEXNUM:      
0ABB   21 00 00               LD   hl,0   ; Clear hl to accept the number
0ABE                HEXNUM1:      
0ABE   03                     INC   bc   
0ABF   0A                     LD   a,(bc)   ; Get the character which is a numeral
0AC0   CB 77                  BIT   6,a   ; is it uppercase alpha?
0AC2   28 02                  JR   z,hexnum2   ; no a decimal
0AC4   D6 07                  SUB   7   ; sub 7  to make $a - $F
0AC6                HEXNUM2:      
0AC6   D6 30                  SUB   $30   ; form decimal digit
0AC8   DA 58 0B               JP   c,num2   
0ACB   FE 10                  CP   $0F+1   
0ACD   D2 58 0B               JP   nc,num2   
0AD0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AD1   29                     ADD   hl,hl   ; 4X
0AD2   29                     ADD   hl,hl   ; 8X
0AD3   29                     ADD   hl,hl   ; 16X
0AD4   85                     ADD   a,l   ; add into bottom of hl
0AD5   6F                     LD   l,a   
0AD6   18 E6                  JR   hexnum1   
0AD8                UPCASE:      
0AD8   0A                     LD   a,(bc)   ; a = identifier char
0AD9   D6 41                  SUB   "A"   ; "A" = 0
0ADB   18 05                  JR   ident1   
0ADD                LOWCASE:      
0ADD   0A                     LD   a,(bc)   
0ADE   D6 61                  SUB   "a"   
0AE0   C6 1A                  ADD   a,26   
0AE2                IDENT1:      
0AE2   87                     ADD   a,a   ; l = a * 2
0AE3   6F                     LD   l,a   
0AE4   26 50                  LD   h,msb(vars)   
0AE6   22 F4 50               LD   (vPointer),hl   ; store address in setter
0AE9   5E                     LD   e,(hl)   
0AEA   23                     INC   hl   
0AEB   56                     LD   d,(hl)   
0AEC   D5                     PUSH   de   
0AED   DD E9                  JP   (ix)   
0AEF                             ; if
0AEF                             ; condition then -- value
0AEF                QUESTION:      
0AEF                IF:          
0AEF   03                     INC   bc   
0AF0   0A                     LD   a,(bc)   
0AF1   FE 3F                  CP   "?"   
0AF3   28 06                  JR   z,ifte   
0AF5   0B                     DEC   bc   
0AF6   11 00 00               LD   de,NUL   ; NUL pointer for else
0AF9   18 01                  JR   ifte1   
0AFB                             ; ifte
0AFB                             ; condition then else -- value
0AFB                IFTE:        
0AFB   D1                     POP   de   ; de = else
0AFC                IFTE1:       
0AFC   E1                     POP   hl   ; hl = then
0AFD   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AFE   7C                     LD   a,h   
0AFF   B5                     OR   l   
0B00   E1                     POP   hl   ; hl = then
0B01   CA 1D 0A               JP   z,go1   ; if z de = else
0B04   EB                     EX   de,hl   ; condition = false, de = then
0B05   C3 1D 0A               JP   go1   
0B08                KEY:         
0B08   CD 81 00               CALL   getchar   
0B0B   26 00                  LD   h,0   
0B0D   6F                     LD   l,a   
0B0E   E5                     PUSH   hl   
0B0F   DD E9                  JP   (ix)   
0B11                             ; Z80 port output
0B11                             ; value port --
0B11                OUTPUT:      
0B11   E1                     POP   hl   
0B12   59                     LD   e,c   ; save IP
0B13   4D                     LD   c,l   
0B14   E1                     POP   hl   
0B15   ED 69                  OUT   (c),l   
0B17   4B                     LD   c,e   ; restore IP
0B18   DD E9                  JP   (ix)   
0B1A                STAR:        
0B1A                MUL:         
0B1A   D1                     POP   de   ; get first value
0B1B   E1                     POP   hl   
0B1C                MUL2:        
0B1C   C5                     PUSH   bc   ; Preserve the IP
0B1D   44 4D                  LD   bc,hl   ; bc = 2nd value
0B1F   21 00 00               LD   hl,0   
0B22   3E 10                  LD   a,16   
0B24                MUL3:        
0B24   29                     ADD   hl,hl   
0B25   CB 13                  RL   e   
0B27   CB 12                  RL   d   
0B29   30 04                  JR   nc,$+6   
0B2B   09                     ADD   hl,bc   
0B2C   30 01                  JR   nc,$+3   
0B2E   13                     INC   de   
0B2F   3D                     DEC   a   
0B30   20 F2                  JR   nz,mul3   
0B32   C1                     POP   bc   ; Restore the IP
0B33   C3 13 02               JP   add3   
0B36                NUM:         
0B36   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B39   0A                     LD   a,(bc)   ; Get numeral or -
0B3A   FE 2D                  CP   "-"   
0B3C   20 01                  JR   nz,num0   
0B3E   03                     INC   bc   ; move to next char, no flags affected
0B3F                NUM0:        
0B3F   08                     EX   af,af'   ; save zero flag = 0 for later
0B40                NUM1:        
0B40   0A                     LD   a,(bc)   ; read digit
0B41   D6 30                  SUB   "0"   ; less than 0?
0B43   38 13                  JR   c,num2   ; not a digit, exit loop
0B45   FE 0A                  CP   10   ; greater that 9?
0B47   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B49   03                     INC   bc   ; inc IP
0B4A   54 5D                  LD   de,hl   ; multiply hl * 10
0B4C   29                     ADD   hl,hl   
0B4D   29                     ADD   hl,hl   
0B4E   19                     ADD   hl,de   
0B4F   29                     ADD   hl,hl   
0B50   85                     ADD   a,l   ; add digit in a to hl
0B51   6F                     LD   l,a   
0B52   3E 00                  LD   a,0   
0B54   8C                     ADC   a,h   
0B55   67                     LD   h,a   
0B56   18 E8                  JR   num1   
0B58                NUM2:        
0B58   0B                     DEC   bc   
0B59   08                     EX   af,af'   ; restore zero flag
0B5A   20 07                  JR   nz,num3   
0B5C   EB                     EX   de,hl   ; negate the value of hl
0B5D   21 00 00               LD   hl,0   
0B60   B7                     OR   a   ; jump to sub2
0B61   ED 52                  SBC   hl,de   
0B63                NUM3:        
0B63   E5                     PUSH   hl   ; Put the number on the stack
0B64   DD E9                  JP   (ix)   ; and process the next character
0B66                RPAREN:      
0B66   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B69   FD 46 09               LD   b,(iy+9)   
0B6C   DD E9                  JP   (ix)   
0B6E                             ; shiftLeft
0B6E                             ; value count -- value2          shift left count places
0B6E                SHIFTLEFT:      
0B6E   50 59                  LD   de,bc   ; save IP
0B70   C1                     POP   bc   ; bc = count
0B71   41                     LD   b,c   ; b = loop counter
0B72   E1                     POP   hl   
0B73   04                     INC   b   ; test for counter=0 case
0B74   18 01                  JR   shiftLeft2   
0B76                SHIFTLEFT1:      
0B76   29                     ADD   hl,hl   ; left shift hl
0B77                SHIFTLEFT2:      
0B77   10 FD                  DJNZ   shiftLeft1   
0B79   E5                     PUSH   hl   
0B7A   42 4B                  LD   bc,de   ; restore IP
0B7C   DD E9                  JP   (ix)   
0B7E                             ; shiftRight
0B7E                             ; value count -- value2          shift left count places
0B7E                SHIFTRIGHT:      
0B7E   50 59                  LD   de,bc   ; save IP
0B80   C1                     POP   bc   ; bc = count
0B81   41                     LD   b,c   ; b = loop counter
0B82   E1                     POP   hl   
0B83   04                     INC   b   ; test for counter=0 case
0B84   18 04                  JR   shiftRight2   
0B86                SHIFTRIGHT1:      
0B86   CB 3C                  SRL   h   ; right shift hl
0B88   CB 1D                  RR   l   
0B8A                SHIFTRIGHT2:      
0B8A   10 FA                  DJNZ   shiftRight1   
0B8C   E5                     PUSH   hl   
0B8D   42 4B                  LD   bc,de   ; restore IP
0B8F   DD E9                  JP   (ix)   
0B91                             ; string
0B91                             ; -- ptr                        ; points to start of string chars,
0B91                             ; length is stored at start - 2 bytes
0B91                DQUOTE:      
0B91                STRING:      
0B91   2A F0 50               LD   hl,(vHeapPtr)   ; hl = heap*
0B94   23                     INC   hl   ; skip length field to start
0B95   23                     INC   hl   
0B96   E5                     PUSH   hl   ; save start of string
0B97   03                     INC   bc   ; point to next char
0B98   18 03                  JR   string2   
0B9A                STRING1:      
0B9A   77                     LD   (hl),a   
0B9B   23                     INC   hl   ; increase count
0B9C   03                     INC   bc   ; point to next char
0B9D                STRING2:      
0B9D   0A                     LD   a,(bc)   
0B9E   FE 22                  CP   DQ   ; " is the string terminator
0BA0   28 04                  JR   z,string3   
0BA2   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0BA4   20 F4                  JR   nz,string1   
0BA6                STRING3:      
0BA6   AF                     XOR   a   ; write NUL to terminate string
0BA7   77                     LD   (hl),a   ; hl = end of string
0BA8   23                     INC   hl   
0BA9   22 F0 50               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BAC   2B                     DEC   hl   ; hl = end of string without terminator
0BAD   D1                     POP   de   ; de = start of string
0BAE   D5                     PUSH   de   ; return start of string
0BAF   B7                     OR   a   ; hl = length bytes, de = start of string
0BB0   ED 52                  SBC   hl,de   
0BB2   EB                     EX   de,hl   
0BB3   2B                     DEC   hl   ; write length bytes to length field at start - 2
0BB4   72                     LD   (hl),d   
0BB5   2B                     DEC   hl   
0BB6   73                     LD   (hl),e   
0BB7   DD E9                  JP   (ix)   
0BB9                PRINTCHARS1:      
0BB9   1A                     LD   a,(de)   ; print char at char*
0BBA   CD 85 00               CALL   putchar   
0BBD   13                     INC   de   ; char*++
0BBE   2B                     DEC   hl   ; count--
0BBF                PRINTCHARS2:      
0BBF   7D                     LD   a,l   ; count == 0?
0BC0   B4                     OR   h   
0BC1   C8                     RET   z   
0BC2   18 F5                  JR   printChars1   ; if not loop
0BC4                             ; 
0BC4                FILTER:      
0BC4                SCAN:        
0BC4   DD E9                  JP   (ix)   
0BC6                             ;*******************************************************************
0BC6                             ; general routines
0BC6                             ;*******************************************************************
0BC6                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0BC6                FLUSHBUFFER:      
0BC6   F5                     PUSH   af   
0BC7   D5                     PUSH   de   
0BC8   E5                     PUSH   hl   
0BC9   2A EC 50               LD   hl,(vBufPtr)   
0BCC   11 00 4F               LD   de,BUF   
0BCF   ED 53 EC 50            LD   (vBufPtr),de   
0BD3   B7                     OR   a   
0BD4   ED 52                  SBC   hl,de   
0BD6   CD BF 0B               CALL   printChars2   
0BD9   E1                     POP   hl   
0BDA   D1                     POP   de   
0BDB   F1                     POP   af   
0BDC   C9                     RET      
0BDD                COMMANDTABLE:      
0BDD   03                     INC   bc   
0BDE   0A                     LD   a,(bc)   
0BDF   FE 7B                  CP   "z"+1   
0BE1   30 09                  JR   nc,commandTable2   
0BE3   D6 61                  SUB   "a"   
0BE5   38 05                  JR   c,commandTable2   
0BE7                COMMANDTABLE1:      
0BE7   E1                     POP   hl   
0BE8   85                     ADD   a,l   
0BE9   6F                     LD   l,a   
0BEA   6E                     LD   l,(hl)   ; must have the same msb as the table
0BEB   E9                     JP   (hl)   
0BEC                COMMANDTABLE2:      
0BEC   3E 1A                  LD   a,26   
0BEE   0B                     DEC   bc   
0BEF   18 F6                  JR   commandTable1   
0BF1                             ; followed by a table
0BF1                             ; db char
0BF1                             ; db lsb(addr)
0BF1                             ; the final item must have char == NUL
0BF1                JUMPTABLE:      
0BF1   E1                     POP   hl   
0BF2   03                     INC   bc   
0BF3                JUMPTABLE0:      
0BF3   AF                     XOR   a   
0BF4   BE                     CP   (hl)   
0BF5   28 0B                  JR   z,jumpTable2   
0BF7   0A                     LD   a,(bc)   
0BF8   BE                     CP   (hl)   
0BF9   28 04                  JR   z,jumpTable1   
0BFB   23                     INC   hl   
0BFC   23                     INC   hl   
0BFD   18 F4                  JR   jumpTable0   
0BFF                JUMPTABLE1:      
0BFF   23                     INC   hl   
0C00   6E                     LD   l,(hl)   ; must have the same msb as the table
0C01   E9                     JP   (hl)   
0C02                JUMPTABLE2:      
0C02   0B                     DEC   bc   
0C03   23                     INC   hl   
0C04   E9                     JP   (hl)   
0C05                PRTSTR0:      
0C05   CD 85 00               CALL   putchar   
0C08   23                     INC   hl   
0C09                PRTSTR:      
0C09   7E                     LD   a,(hl)   
0C0A   B7                     OR   a   
0C0B   20 F8                  JR   nz,prtstr0   
0C0D   C9                     RET      
0C0E                             ; **************************************************************************
0C0E                             ; calculate nesting value
0C0E                             ; a is char to be tested,
0C0E                             ; e is the nesting value (initially 0)
0C0E                             ; e is increased by ( and [
0C0E                             ; e is decreased by ) and ]
0C0E                             ; e has its bit 7 toggled by `
0C0E                             ; limited to 127 levels
0C0E                             ; **************************************************************************
0C0E                NESTING:      
0C0E   FE 22                  CP   DQ   ; quote char
0C10   28 06                  JR   z,nesting0   
0C12   FE 60                  CP   "`"   ; quote char
0C14   28 02                  JR   z,nesting0   
0C16   18 0A                  JR   nesting1   
0C18                NESTING0:      
0C18   CB 7B                  BIT   7,e   
0C1A   28 03                  JR   z,nesting1a   
0C1C   CB BB                  RES   7,e   
0C1E   C9                     RET      
0C1F                NESTING1A:      
0C1F   CB FB                  SET   7,e   
0C21   C9                     RET      
0C22                NESTING1:      
0C22   CB 7B                  BIT   7,e   
0C24   C0                     RET   nz   
0C25   FE 7B                  CP   "{"   
0C27   28 08                  JR   z,nesting2   
0C29   FE 5B                  CP   "["   
0C2B   28 04                  JR   z,nesting2   
0C2D   FE 28                  CP   "("   
0C2F   20 02                  JR   nz,nesting3   
0C31                NESTING2:      
0C31   1C                     INC   e   
0C32   C9                     RET      
0C33                NESTING3:      
0C33   FE 7D                  CP   "}"   
0C35   28 07                  JR   z,nesting4   
0C37   FE 5D                  CP   "]"   
0C39   28 03                  JR   z,nesting4   
0C3B   FE 29                  CP   ")"   
0C3D   C0                     RET   nz   
0C3E                NESTING4:      
0C3E   1D                     DEC   e   
0C3F   C9                     RET      
0C40                PROMPT:      
0C40   CD 50 0C               CALL   printStr   
0C43   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0C48   C9                     RET      
0C49                CRLF:        
0C49   CD 50 0C               CALL   printStr   
0C4C   0D 0A 00               .CSTR   "\r\n"   
0C4F   C9                     RET      
0C50                             ; prints a null teminated string
0C50                             ; the string should be immediately following the call
0C50                PRINTSTR:      
0C50   E3                     EX   (sp),hl   ; swap			
0C51   CD 09 0C               CALL   prtstr   
0C54   23                     INC   hl   ; inc past NUL
0C55   E3                     EX   (sp),hl   ; put it back	
0C56   C9                     RET      
0C57                INIT:        
0C57   21 F0 01               LD   hl,titleStr   
0C5A   11 08 51               LD   de,titleBuf   
0C5D   06 14                  LD   b,20   
0C5F                INIT1:       
0C5F   1A                     LD   a,(de)   
0C60   BE                     CP   (hl)   
0C61   20 17                  JR   nz,coldBoot0   
0C63   13                     INC   de   
0C64   23                     INC   hl   
0C65   10 F8                  DJNZ   init1   
0C67                WARMINIT:      
0C67   ED 4B F8 50            LD   bc,(vSavedIP)   ; restore IP
0C6B   ED 7B FA 50            LD   sp,(vSavedSP)   ; restore SP
0C6F   DD 2A FC 50            LD   ix,(vSavedNext)   ; restore Next
0C73   FD 2A FE 50            LD   iy,(vSavedBP)   ; restore BP
0C77   C3 B1 0C               JP   start1   
0C7A                COLDBOOT0:      
0C7A   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0C7D   11 08 51               LD   de,titleBuf   
0C80   06 14                  LD   b,20   
0C82   ED B0                  LDIR      
0C84                COLDINIT:      
0C84   21 DE 01               LD   hl,isysVars   
0C87   11 E6 50               LD   de,sysVars   
0C8A   01 10 00               LD   bc,8 * 2   
0C8D   ED B0                  LDIR      
0C8F   21 00 50               LD   hl,vars   ; 52 vars LO HI
0C92   06 34                  LD   b,26*2   
0C94   AF                     XOR   a   
0C95                COLDBOOT1:      
0C95   77                     LD   (hl),a   
0C96   23                     INC   hl   
0C97   10 FC                  DJNZ   coldBoot1   
0C99   DD 2A EE 50            LD   ix,(vNext)   
0C9D   FD 21 00 4E            LD   iy,STACK   
0CA1   C9                     RET      
0CA2                COLDSTART:      
0CA2   31 00 4E               LD   sp,STACK   
0CA5   CD 7A 0C               CALL   coldBoot0   
0CA8   C3 B1 0C               JP   start1   
0CAB                START:       
0CAB   31 00 4E               LD   sp,STACK   ; start Monty
0CAE   CD 57 0C               CALL   init   ; setups
0CB1                START1:      
0CB1   21 08 51               LD   hl,titleBuf   
0CB4   CD 09 0C               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0CB7                INTERPRET:      
0CB7   CD C6 0B               CALL   flushBuffer   
0CBA   CD 40 0C               CALL   prompt   
0CBD   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0CC0   21 00 4E               LD   hl,TIB   
0CC3   22 EA 50               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0CC6                INTERPRET2:      ; calculate nesting
0CC6   1E 00                  LD   e,0   ; initilize nesting value
0CC8   C5                     PUSH   bc   ; save offset into TIB,
0CC9                             ; bc is also the count of chars in TIB
0CC9   21 00 4E               LD   hl,TIB   ; hl is start of TIB
0CCC   18 0B                  JR   interpret4   
0CCE                INTERPRET3:      
0CCE   3E 33                  LD   a,"3"   
0CD0   CD 85 00               CALL   putchar   
0CD3   7E                     LD   a,(hl)   ; a = char in TIB
0CD4   23                     INC   hl   ; inc pointer into TIB
0CD5   0B                     DEC   bc   ; dec count of chars in TIB
0CD6   CD 0E 0C               CALL   nesting   ; update nesting value
0CD9                INTERPRET4:      
0CD9   79                     LD   a,c   ; is count zero?
0CDA   B0                     OR   b   
0CDB   20 F1                  JR   nz,interpret3   ; if not loop
0CDD   C1                     POP   bc   ; restore offset into TIB
0CDE                INTERPRET5:      
0CDE   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0CE1   FE 20                  CP   $20   ; compare to space
0CE3   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0CE5   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0CE7                             ; ???? NEEDED?
0CE7   28 36                  JR   z,interpret8   
0CE9   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0CEB   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0CED   FE 05                  CP   CTRL_E   
0CEF   CA 80 0D               JP   z,edit_   
0CF2   FE 08                  CP   CTRL_H   
0CF4   CA 70 0D               JP   z,backSpace_   
0CF7   FE 0A                  CP   CTRL_J   
0CF9   CA 98 0D               JP   z,reEdit_   
0CFC                             ; cp CTRL_S
0CFC                             ; jp z,printStack_
0CFC                             ; DB     lsb(edit_)       ; ENQ ^E  5
0CFC                             ; DB     lsb(reedit_)     ; LF  ^J 10
0CFC                             ; DB     lsb(list_)       ; FF  ^L 12
0CFC                             ; DB     lsb(printStack_) ; DLE ^P 16
0CFC                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0CFC                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0CFC                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0CFC                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0CFC                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0CFC                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0CFC                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0CFC                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0CFC                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0CFC                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0CFC                INTERPRET5A:      
0CFC                             ; ld (vTIBPtr),bc
0CFC                             ; ld bc,(vTIBPtr)
0CFC   18 C8                  JR   interpret2   
0CFE                INTERPRET6:      
0CFE   21 00 4E               LD   hl,TIB   
0D01   09                     ADD   hl,bc   
0D02   77                     LD   (hl),a   ; store the character in textbuf
0D03   03                     INC   bc   
0D04   CD 85 00               CALL   putchar   ; echo character to screen
0D07   CD 0E 0C               CALL   nesting   
0D0A   18 D2                  JR   interpret5   ; wait for next character
0D0C                INTERPRET7:      
0D0C   21 00 4E               LD   hl,TIB   
0D0F   09                     ADD   hl,bc   
0D10   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0D12   23                     INC   hl   
0D13   36 0A                  LD   (hl),"\n"   
0D15   23                     INC   hl   
0D16   03                     INC   bc   
0D17   03                     INC   bc   
0D18   CD 49 0C               CALL   crlf   ; echo character to screen
0D1B   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0D1C   B7                     OR   a   
0D1D   20 BF                  JR   nz,interpret5   
0D1F                INTERPRET8:      
0D1F   21 00 4E               LD   hl,TIB   
0D22   09                     ADD   hl,bc   
0D23   22 EA 50               LD   (vTIBPtr),hl   
0D26   01 00 4E               LD   bc,TIB   
0D29   ED 43 F8 50            LD   (vSavedIP),bc   ; save IP
0D2D   ED 73 FA 50            LD   (vSavedSP),sp   ; save SP
0D31   DD 22 FC 50            LD   (vSavedNext),ix   ; save Next
0D35   FD 22 FE 50            LD   (vSavedBP),iy   ; save BP
0D39   0B                     DEC   bc   
0D3A                NEXT:        
0D3A   03                     INC   bc   ; Increment the IP
0D3B   0A                     LD   a,(bc)   ; Get the next character and dispatch
0D3C   FE 20                  CP   " "   ; whitespace?
0D3E   28 FA                  JR   z,next   ; space? ignore
0D40   38 08                  JR   c,next1   
0D42   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0D44   6F                     LD   l,a   ; index into table
0D45   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0D47   6E                     LD   l,(hl)   ; get low jump address
0D48   24                     INC   h   ; Load h with page after opcodes
0D49   E9                     JP   (hl)   ; Jump to routine
0D4A                NEXT1:       
0D4A   FE 00                  CP   NUL   ; end of input string?
0D4C   28 03                  JR   z,exit   
0D4E   C3 B7 0C               JP   interpret   ; no, other whitespace, macros?
0D51                EXIT:        
0D51   03                     INC   bc   
0D52   60 69                  LD   hl,bc   
0D54   E9                     JP   (hl)   
0D55                RUN:         
0D55   C1                     POP   bc   
0D56   0B                     DEC   bc   
0D57   DD E9                  JP   (ix)   
0D59                ERROR1:      
0D59   21 01 00               LD   hl,1   ; error 1: unknown command
0D5C   E5                     PUSH   hl   
0D5D                ERROR:       
0D5D   CD 55 0D               CALL   run   
0D60   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0D6D   C3 B7 0C               JP   interpret   
0D70                BACKSPACE_:      
0D70   79                     LD   a,c   
0D71   B0                     OR   b   
0D72   CA C6 0C               JP   z,interpret2   
0D75   0B                     DEC   bc   
0D76   CD 50 0C               CALL   printStr   
0D79   08 20 08 00            .CSTR   "\b \b"   
0D7D   C3 C6 0C               JP   interpret2   
0D80                             ; edit
0D80                EDIT_:       
0D80   CD 55 0D               CALL   run   
0D83   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0D95   C3 B7 0C               JP   interpret   
0D98                REEDIT_:      
0D98   C3 B7 0C               JP   interpret   
0D9B                PRINTSTACK_:      
0D9B   CD 55 0D               CALL   run   
0D9E   2F 70 6B 00            .CSTR   "/pk"   
0DA2   C3 B7 0C               JP   interpret   
0DA5                             ; editDef:
0DA5                             ;     pop hl                      ; pop ret address
0DA5                             ;     ex (sp),hl                  ; swap with TOS
0DA5                             ;     push hl                     ; dup TOS
0DA5                             ;     ld a,l                      ; a = ident
0DA5                             ;     ld de,TIB                   ; de = start of TIB
0DA5                             ;     ld (vTIBPtr),de             ; update TIB*
0DA5                             ;     push ix                     ; save NEXT
0DA5                             ;     ld ix,editDef0              ; NEXT = editDef0
0DA5                             ;     jp lookupRef                ; convert letter into address
0DA5                             ; editDef0:
0DA5                             ;     ld e,(hl)                   ; de = (hl++)
0DA5                             ;     inc hl
0DA5                             ;     ld d,(hl)
0DA5                             ;     ld a,d                      ; de == 0 ?
0DA5                             ;     or e
0DA5                             ;     jr z,editDef4
0DA5                             ;     ld ix,editDef3              ; NEXT = editDef3
0DA5                             ;     ex de,hl
0DA5                             ;     ld a,(hl)
0DA5                             ;     cp "{"
0DA5                             ;     jr nz,editDef1
0DA5                             ;     jp editBlock0               ; convert letter into address
0DA5                             ; editDef1:
0DA5                             ;     cp "("
0DA5                             ;     jr nz,editDef2
0DA5                             ;     jp editBlock0               ; convert letter into address
0DA5                             ; editDef2:
0DA5                             ;     jp editFunc
0DA5                             ; editDef3:
0DA5                             ;     ld a," "                    ; write assign
0DA5                             ;     call writeChar
0DA5                             ;     pop hl                      ; a = ident
0DA5                             ;     ld a,l
0DA5                             ;     call writeChar
0DA5                             ;     ld a,"="                    ; write assign
0DA5                             ;     call writeChar
0DA5                             ;     ld ix,editDef4              ; NEXT = editDef4
0DA5                             ;     jp printTIB
0DA5                             ; editDef4:
0DA5                             ;     pop ix                      ; restore NEXT
0DA5                             ;     jp (ix)
0DA5                             ; writeChar:
0DA5                             ;     ld de,(vTIBPtr)             ; de = TIB*
0DA5                             ;     ld (de),a                   ; write ident
0DA5                             ;     inc de
0DA5                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0DA5                             ;     ret
0DA5                             ; ; printTIB
0DA5                             ; printTIB:
0DA5                             ;     ld hl,(vTIBPtr)
0DA5                             ;     ld de,TIB
0DA5                             ;     or a
0DA5                             ;     sbc hl,de
0DA5                             ;     jp printTIB2
0DA5                             ; printTIB1:
0DA5                             ;     ld a,(de)
0DA5                             ;     call putchar
0DA5                             ; printTIB2:
0DA5                             ;     ld a,l
0DA5                             ;     or h
0DA5                             ;     jr nz,printTIB1
0DA5                             ;     jp (ix)
0DA5                             ; editBlock:
0DA5                             ;     pop hl                      ; hl = block*
0DA5                             ; editBlock0:
0DA5                             ;     push ix                     ; save next
0DA5                             ;     push hl                     ; push block*
0DA5                             ;     push hl                     ; push block*
0DA5                             ;     ld ix,(editBlock2)
0DA5                             ;     jp blockLength
0DA5                             ; editBlock1:
0DA5                             ;     pop hl                      ; bc = length, (sp) = IP
0DA5                             ;     pop de                      ; de = block*
0DA5                             ;     ld a,l
0DA5                             ;     or h
0DA5                             ;     jr z,editBlock2
0DA5                             ;     push bc
0DA5                             ;     ld bc,hl
0DA5                             ;     ex de,hl                    ; hl = block*
0DA5                             ;     ld de,(vTIBPtr)              ; de = TIB*
0DA5                             ;     ldir                        ; copy block to TIB
0DA5                             ;     ld (vTIBPtr),de              ; save TIB*
0DA5                             ;     pop bc
0DA5                             ; editBlock2:
0DA5                             ;     pop ix                      ; restore next
0DA5                             ;     jp (ix)
0DA5                             ; editFunc:
0DA5                             ;     jp (ix)
0DA5                             ; editArray:
0DA5                             ;     jp (ix)
0DA5                             ; editArglist:
0DA5                             ;     jp (ix)
0DA5                             ; ; blockLength
0DA5                             ; ; addr1 -- length
0DA5                             ; blockLength:
0DA5                             ;     pop hl                      ; block*
0DA5                             ;     push hl                     ; save block*
0DA5                             ;     inc hl                      ; skip first char
0DA5                             ;     ld d,1                      ; increase nesting
0DA5                             ; blockLength1:                   ; Skip to end of definition
0DA5                             ;     ld a,(hl)                   ; Get the next character
0DA5                             ;     inc hl                      ; Point to next character
0DA5                             ;     cp " " + 1                  ; ignore whitespace
0DA5                             ;     jr c,blockLength1
0DA5                             ;     cp ")"
0DA5                             ;     jr z,blockLength4
0DA5                             ;     cp "}"
0DA5                             ;     jr z,blockLength4
0DA5                             ;     cp "]"
0DA5                             ;     jr z,blockLength4
0DA5                             ;     cp "("
0DA5                             ;     jr z,blockLength2
0DA5                             ;     cp "{"
0DA5                             ;     jr z,blockLength2
0DA5                             ;     cp "["
0DA5                             ;     jr z,blockLength2
0DA5                             ;     cp "'"
0DA5                             ;     jr z,blockLength3
0DA5                             ;     cp "`"
0DA5                             ;     jr z,blockLength3
0DA5                             ;     cp DQ
0DA5                             ;     jr z,blockLength3
0DA5                             ;     jr blockLength1
0DA5                             ; blockLength2:
0DA5                             ;     inc d
0DA5                             ;     jr blockLength1
0DA5                             ; blockLength4:
0DA5                             ;     dec d
0DA5                             ;     jr nz, blockLength1         ; get the next element
0DA5                             ; blockLength3:
0DA5                             ;     ld a,$80
0DA5                             ;     xor d
0DA5                             ;     ld d,a
0DA5                             ;     jr nz, blockLength1
0DA5                             ;     pop hl                      ; hl = block*
0DA5                             ;     or a
0DA5                             ;     sbc hl,de
0DA5                             ;     push hl
0DA5                             ;     jp (ix)
0DA5                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0DA5                             ; \a start of stack \#3 depth \b base \$ prompt
0DA5                             ; DW dStack               ; a vS0 start of datastack			
0DA5                             ; DW FALSE                ; b vBase16
0DA5                             ; DW 0                    ; c vTIBPtr an offset to the tib
0DA5                             ; DW 0                    ; d
0DA5                             ; DW 65                   ; e vLastDef "A" last command u defined
0DA5                             ; DW 0                    ; f
0DA5                             ; DW page6                ; g 256 bytes limits
0DA5                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0DA5                          ;*Macro unroll: FUNC f1, 1, ""
0DA5                F1:          
0DA5   CD 1C 0A               CALL   go   
0DA8   00 00                  DW   NUL   
0DAA   B0 0D                  DW   f1M_2845S12   
0DAC   AE 0D                  DW   $+2   
0DAE   01                     DB   1   
0DAF   00                     .PSTR   ""   
0DB0                F1M_2845S12:      
0DB0   00                     DB   0   
0DB1                          ;*Macro unroll: FUNC f2, 1, ""
0DB1                F2:          
0DB1   CD 1C 0A               CALL   go   
0DB4   00 00                  DW   NUL   
0DB6   BC 0D                  DW   f2M_2847S15   
0DB8   BA 0D                  DW   $+2   
0DBA   01                     DB   1   
0DBB   00                     .PSTR   ""   
0DBC                F2M_2847S15:      
0DBC   00                     DB   0   
0DBD                          ;*Macro unroll: FUNC f3, 0, ""
0DBD                F3:          
0DBD   CD 1C 0A               CALL   go   
0DC0   00 00                  DW   NUL   
0DC2   C8 0D                  DW   f3M_2849S18   
0DC4   C6 0D                  DW   $+2   
0DC6   00                     DB   0   
0DC7   00                     .PSTR   ""   
0DC8                F3M_2849S18:      
0DC8   00                     DB   0   
0DC9                          ;*Macro unroll: FUNC f4, 1, ""
0DC9                F4:          
0DC9   CD 1C 0A               CALL   go   
0DCC   00 00                  DW   NUL   
0DCE   D4 0D                  DW   f4M_2851S21   
0DD0   D2 0D                  DW   $+2   
0DD2   01                     DB   1   
0DD3   00                     .PSTR   ""   
0DD4                F4M_2851S21:      
0DD4   00                     DB   0   
0DD5                          ALIGN   $100   
0E00                TESTSSTART:      
0E00                             ; ; test "[1 2 5]/as",3
0E00                             ; ; ; ; test "0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe", 0
0E00                          ;*Macro unroll:  test "$1000 0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe", $1000
0E00   31 00 4E               LD   SP,STACK   
0E03   CD 84 0C               CALL   coldInit   
0E06   CD AF 4C               CALL   execStr   
0E09   24 31 30 30 30 20 30 20 31 30 20 31 20 2F 72 67 20 3A 61 7B 25 61 20 31 20 2B 20 31 30 20 2A 7D 20 2F 6D 70 20 3A 61 7B 25 61 2E 7D 20 2F 66 65 00 DB   "$1000 0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe",0   
0E3A   CD C6 0B               CALL   flushBuffer   
0E3D   E1                     POP   HL   
0E3E   E5                     PUSH   HL   
0E3F   11 00 10               LD   DE,$1000   
0E42   B7                     OR   A   
0E43   ED 52                  SBC   HL,DE   
0E45   7D                     LD   A,L   
0E46   B4                     OR   H   
0E47   CA D2 0E               JP   Z,expectM_2857S29   
0E4A   CD 50 0C               CALL   printStr   
0E4D   43 6F 64 65 3A 20 24 31 30 30 30 20 30 20 31 30 20 31 20 2F 72 67 20 3A 61 7B 25 61 20 31 20 2B 20 31 30 20 2A 7D 20 2F 6D 70 20 3A 61 7B 25 61 2E 7D 20 2F 66 65 00 .CSTR   "Code: ","$1000 0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe"   
0E84   CD 50 0C               CALL   printStr   
0E87   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E96   21 00 10               LD   hl,$1000   
0E99   E5                     PUSH   hl   
0E9A   E5                     PUSH   hl   
0E9B   CD 55 0D               CALL   run   
0E9E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0EA6   CD C6 0B               CALL   flushBuffer   
0EA9   CD 50 0C               CALL   printStr   
0EAC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EB9   E1                     POP   hl   
0EBA   E5                     PUSH   hl   
0EBB   E5                     PUSH   hl   
0EBC   CD 55 0D               CALL   run   
0EBF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0ECE   CD C6 0B               CALL   flushBuffer   
0ED1   76                     HALT      
0ED2                EXPECTM_2857S29:      
0ED2   E1                     POP   HL   
0ED3   CD 50 0C               CALL   printStr   
0ED6   44 6F 6E 65 21 00      .CSTR   "Done!"   
0EDC   76                     HALT      
0EDD                             ; 
0EDD                          ;*Macro unroll:  test "/f", false
0EDD   31 00 4E               LD   SP,STACK   
0EE0   CD 84 0C               CALL   coldInit   
0EE3   CD AF 4C               CALL   execStr   
0EE6   2F 66 00               DB   "/f",0   
0EE9   CD C6 0B               CALL   flushBuffer   
0EEC   E1                     POP   HL   
0EED   E5                     PUSH   HL   
0EEE   11 00 00               LD   DE,false   
0EF1   B7                     OR   A   
0EF2   ED 52                  SBC   HL,DE   
0EF4   7D                     LD   A,L   
0EF5   B4                     OR   H   
0EF6   CA 53 0F               JP   Z,expectM_2862S37   
0EF9   CD 50 0C               CALL   printStr   
0EFC   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0F05   CD 50 0C               CALL   printStr   
0F08   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F17   21 00 00               LD   hl,false   
0F1A   E5                     PUSH   hl   
0F1B   E5                     PUSH   hl   
0F1C   CD 55 0D               CALL   run   
0F1F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F27   CD C6 0B               CALL   flushBuffer   
0F2A   CD 50 0C               CALL   printStr   
0F2D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F3A   E1                     POP   hl   
0F3B   E5                     PUSH   hl   
0F3C   E5                     PUSH   hl   
0F3D   CD 55 0D               CALL   run   
0F40   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F4F   CD C6 0B               CALL   flushBuffer   
0F52   76                     HALT      
0F53                EXPECTM_2862S37:      
0F53   E1                     POP   HL   
0F54                          ;*Macro unroll:  test "/t", true
0F54   31 00 4E               LD   SP,STACK   
0F57   CD 84 0C               CALL   coldInit   
0F5A   CD AF 4C               CALL   execStr   
0F5D   2F 74 00               DB   "/t",0   
0F60   CD C6 0B               CALL   flushBuffer   
0F63   E1                     POP   HL   
0F64   E5                     PUSH   HL   
0F65   11 FF FF               LD   DE,true   
0F68   B7                     OR   A   
0F69   ED 52                  SBC   HL,DE   
0F6B   7D                     LD   A,L   
0F6C   B4                     OR   H   
0F6D   CA CA 0F               JP   Z,expectM_2863S38   
0F70   CD 50 0C               CALL   printStr   
0F73   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0F7C   CD 50 0C               CALL   printStr   
0F7F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F8E   21 FF FF               LD   hl,true   
0F91   E5                     PUSH   hl   
0F92   E5                     PUSH   hl   
0F93   CD 55 0D               CALL   run   
0F96   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F9E   CD C6 0B               CALL   flushBuffer   
0FA1   CD 50 0C               CALL   printStr   
0FA4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FB1   E1                     POP   hl   
0FB2   E5                     PUSH   hl   
0FB3   E5                     PUSH   hl   
0FB4   CD 55 0D               CALL   run   
0FB7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FC6   CD C6 0B               CALL   flushBuffer   
0FC9   76                     HALT      
0FCA                EXPECTM_2863S38:      
0FCA   E1                     POP   HL   
0FCB                          ;*Macro unroll:  test "1", 1
0FCB   31 00 4E               LD   SP,STACK   
0FCE   CD 84 0C               CALL   coldInit   
0FD1   CD AF 4C               CALL   execStr   
0FD4   31 00                  DB   "1",0   
0FD6   CD C6 0B               CALL   flushBuffer   
0FD9   E1                     POP   HL   
0FDA   E5                     PUSH   HL   
0FDB   11 01 00               LD   DE,1   
0FDE   B7                     OR   A   
0FDF   ED 52                  SBC   HL,DE   
0FE1   7D                     LD   A,L   
0FE2   B4                     OR   H   
0FE3   CA 3F 10               JP   Z,expectM_2864S39   
0FE6   CD 50 0C               CALL   printStr   
0FE9   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0FF1   CD 50 0C               CALL   printStr   
0FF4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1003   21 01 00               LD   hl,1   
1006   E5                     PUSH   hl   
1007   E5                     PUSH   hl   
1008   CD 55 0D               CALL   run   
100B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1013   CD C6 0B               CALL   flushBuffer   
1016   CD 50 0C               CALL   printStr   
1019   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1026   E1                     POP   hl   
1027   E5                     PUSH   hl   
1028   E5                     PUSH   hl   
1029   CD 55 0D               CALL   run   
102C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
103B   CD C6 0B               CALL   flushBuffer   
103E   76                     HALT      
103F                EXPECTM_2864S39:      
103F   E1                     POP   HL   
1040                          ;*Macro unroll:  test "2", 2
1040   31 00 4E               LD   SP,STACK   
1043   CD 84 0C               CALL   coldInit   
1046   CD AF 4C               CALL   execStr   
1049   32 00                  DB   "2",0   
104B   CD C6 0B               CALL   flushBuffer   
104E   E1                     POP   HL   
104F   E5                     PUSH   HL   
1050   11 02 00               LD   DE,2   
1053   B7                     OR   A   
1054   ED 52                  SBC   HL,DE   
1056   7D                     LD   A,L   
1057   B4                     OR   H   
1058   CA B4 10               JP   Z,expectM_2865S40   
105B   CD 50 0C               CALL   printStr   
105E   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1066   CD 50 0C               CALL   printStr   
1069   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1078   21 02 00               LD   hl,2   
107B   E5                     PUSH   hl   
107C   E5                     PUSH   hl   
107D   CD 55 0D               CALL   run   
1080   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1088   CD C6 0B               CALL   flushBuffer   
108B   CD 50 0C               CALL   printStr   
108E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
109B   E1                     POP   hl   
109C   E5                     PUSH   hl   
109D   E5                     PUSH   hl   
109E   CD 55 0D               CALL   run   
10A1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10B0   CD C6 0B               CALL   flushBuffer   
10B3   76                     HALT      
10B4                EXPECTM_2865S40:      
10B4   E1                     POP   HL   
10B5                          ;*Macro unroll:  test "1", 1
10B5   31 00 4E               LD   SP,STACK   
10B8   CD 84 0C               CALL   coldInit   
10BB   CD AF 4C               CALL   execStr   
10BE   31 00                  DB   "1",0   
10C0   CD C6 0B               CALL   flushBuffer   
10C3   E1                     POP   HL   
10C4   E5                     PUSH   HL   
10C5   11 01 00               LD   DE,1   
10C8   B7                     OR   A   
10C9   ED 52                  SBC   HL,DE   
10CB   7D                     LD   A,L   
10CC   B4                     OR   H   
10CD   CA 29 11               JP   Z,expectM_2866S41   
10D0   CD 50 0C               CALL   printStr   
10D3   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
10DB   CD 50 0C               CALL   printStr   
10DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10ED   21 01 00               LD   hl,1   
10F0   E5                     PUSH   hl   
10F1   E5                     PUSH   hl   
10F2   CD 55 0D               CALL   run   
10F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10FD   CD C6 0B               CALL   flushBuffer   
1100   CD 50 0C               CALL   printStr   
1103   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1110   E1                     POP   hl   
1111   E5                     PUSH   hl   
1112   E5                     PUSH   hl   
1113   CD 55 0D               CALL   run   
1116   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1125   CD C6 0B               CALL   flushBuffer   
1128   76                     HALT      
1129                EXPECTM_2866S41:      
1129   E1                     POP   HL   
112A                          ;*Macro unroll:  test "0", 0
112A   31 00 4E               LD   SP,STACK   
112D   CD 84 0C               CALL   coldInit   
1130   CD AF 4C               CALL   execStr   
1133   30 00                  DB   "0",0   
1135   CD C6 0B               CALL   flushBuffer   
1138   E1                     POP   HL   
1139   E5                     PUSH   HL   
113A   11 00 00               LD   DE,0   
113D   B7                     OR   A   
113E   ED 52                  SBC   HL,DE   
1140   7D                     LD   A,L   
1141   B4                     OR   H   
1142   CA 9E 11               JP   Z,expectM_2867S42   
1145   CD 50 0C               CALL   printStr   
1148   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1150   CD 50 0C               CALL   printStr   
1153   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1162   21 00 00               LD   hl,0   
1165   E5                     PUSH   hl   
1166   E5                     PUSH   hl   
1167   CD 55 0D               CALL   run   
116A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1172   CD C6 0B               CALL   flushBuffer   
1175   CD 50 0C               CALL   printStr   
1178   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1185   E1                     POP   hl   
1186   E5                     PUSH   hl   
1187   E5                     PUSH   hl   
1188   CD 55 0D               CALL   run   
118B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
119A   CD C6 0B               CALL   flushBuffer   
119D   76                     HALT      
119E                EXPECTM_2867S42:      
119E   E1                     POP   HL   
119F                          ;*Macro unroll:  test "10", 10
119F   31 00 4E               LD   SP,STACK   
11A2   CD 84 0C               CALL   coldInit   
11A5   CD AF 4C               CALL   execStr   
11A8   31 30 00               DB   "10",0   
11AB   CD C6 0B               CALL   flushBuffer   
11AE   E1                     POP   HL   
11AF   E5                     PUSH   HL   
11B0   11 0A 00               LD   DE,10   
11B3   B7                     OR   A   
11B4   ED 52                  SBC   HL,DE   
11B6   7D                     LD   A,L   
11B7   B4                     OR   H   
11B8   CA 15 12               JP   Z,expectM_2868S43   
11BB   CD 50 0C               CALL   printStr   
11BE   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
11C7   CD 50 0C               CALL   printStr   
11CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11D9   21 0A 00               LD   hl,10   
11DC   E5                     PUSH   hl   
11DD   E5                     PUSH   hl   
11DE   CD 55 0D               CALL   run   
11E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11E9   CD C6 0B               CALL   flushBuffer   
11EC   CD 50 0C               CALL   printStr   
11EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11FC   E1                     POP   hl   
11FD   E5                     PUSH   hl   
11FE   E5                     PUSH   hl   
11FF   CD 55 0D               CALL   run   
1202   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1211   CD C6 0B               CALL   flushBuffer   
1214   76                     HALT      
1215                EXPECTM_2868S43:      
1215   E1                     POP   HL   
1216                          ;*Macro unroll:  test "123", 123
1216   31 00 4E               LD   SP,STACK   
1219   CD 84 0C               CALL   coldInit   
121C   CD AF 4C               CALL   execStr   
121F   31 32 33 00            DB   "123",0   
1223   CD C6 0B               CALL   flushBuffer   
1226   E1                     POP   HL   
1227   E5                     PUSH   HL   
1228   11 7B 00               LD   DE,123   
122B   B7                     OR   A   
122C   ED 52                  SBC   HL,DE   
122E   7D                     LD   A,L   
122F   B4                     OR   H   
1230   CA 8E 12               JP   Z,expectM_2869S44   
1233   CD 50 0C               CALL   printStr   
1236   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1240   CD 50 0C               CALL   printStr   
1243   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1252   21 7B 00               LD   hl,123   
1255   E5                     PUSH   hl   
1256   E5                     PUSH   hl   
1257   CD 55 0D               CALL   run   
125A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1262   CD C6 0B               CALL   flushBuffer   
1265   CD 50 0C               CALL   printStr   
1268   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1275   E1                     POP   hl   
1276   E5                     PUSH   hl   
1277   E5                     PUSH   hl   
1278   CD 55 0D               CALL   run   
127B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
128A   CD C6 0B               CALL   flushBuffer   
128D   76                     HALT      
128E                EXPECTM_2869S44:      
128E   E1                     POP   HL   
128F                          ;*Macro unroll:  test "-1",-1
128F   31 00 4E               LD   SP,STACK   
1292   CD 84 0C               CALL   coldInit   
1295   CD AF 4C               CALL   execStr   
1298   2D 31 00               DB   "-1",0   
129B   CD C6 0B               CALL   flushBuffer   
129E   E1                     POP   HL   
129F   E5                     PUSH   HL   
12A0   11 FF FF               LD   DE,-1   
12A3   B7                     OR   A   
12A4   ED 52                  SBC   HL,DE   
12A6   7D                     LD   A,L   
12A7   B4                     OR   H   
12A8   CA 05 13               JP   Z,expectM_2870S45   
12AB   CD 50 0C               CALL   printStr   
12AE   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
12B7   CD 50 0C               CALL   printStr   
12BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12C9   21 FF FF               LD   hl,-1   
12CC   E5                     PUSH   hl   
12CD   E5                     PUSH   hl   
12CE   CD 55 0D               CALL   run   
12D1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12D9   CD C6 0B               CALL   flushBuffer   
12DC   CD 50 0C               CALL   printStr   
12DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12EC   E1                     POP   hl   
12ED   E5                     PUSH   hl   
12EE   E5                     PUSH   hl   
12EF   CD 55 0D               CALL   run   
12F2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1301   CD C6 0B               CALL   flushBuffer   
1304   76                     HALT      
1305                EXPECTM_2870S45:      
1305   E1                     POP   HL   
1306                          ;*Macro unroll:  test "''", 0
1306   31 00 4E               LD   SP,STACK   
1309   CD 84 0C               CALL   coldInit   
130C   CD AF 4C               CALL   execStr   
130F   27 27 00               DB   "''",0   
1312   CD C6 0B               CALL   flushBuffer   
1315   E1                     POP   HL   
1316   E5                     PUSH   HL   
1317   11 00 00               LD   DE,0   
131A   B7                     OR   A   
131B   ED 52                  SBC   HL,DE   
131D   7D                     LD   A,L   
131E   B4                     OR   H   
131F   CA 7C 13               JP   Z,expectM_2871S46   
1322   CD 50 0C               CALL   printStr   
1325   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
132E   CD 50 0C               CALL   printStr   
1331   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1340   21 00 00               LD   hl,0   
1343   E5                     PUSH   hl   
1344   E5                     PUSH   hl   
1345   CD 55 0D               CALL   run   
1348   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1350   CD C6 0B               CALL   flushBuffer   
1353   CD 50 0C               CALL   printStr   
1356   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1363   E1                     POP   hl   
1364   E5                     PUSH   hl   
1365   E5                     PUSH   hl   
1366   CD 55 0D               CALL   run   
1369   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1378   CD C6 0B               CALL   flushBuffer   
137B   76                     HALT      
137C                EXPECTM_2871S46:      
137C   E1                     POP   HL   
137D                          ;*Macro unroll:  test "'a'", $61
137D   31 00 4E               LD   SP,STACK   
1380   CD 84 0C               CALL   coldInit   
1383   CD AF 4C               CALL   execStr   
1386   27 61 27 00            DB   "'a'",0   
138A   CD C6 0B               CALL   flushBuffer   
138D   E1                     POP   HL   
138E   E5                     PUSH   HL   
138F   11 61 00               LD   DE,$61   
1392   B7                     OR   A   
1393   ED 52                  SBC   HL,DE   
1395   7D                     LD   A,L   
1396   B4                     OR   H   
1397   CA F5 13               JP   Z,expectM_2872S47   
139A   CD 50 0C               CALL   printStr   
139D   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
13A7   CD 50 0C               CALL   printStr   
13AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13B9   21 61 00               LD   hl,$61   
13BC   E5                     PUSH   hl   
13BD   E5                     PUSH   hl   
13BE   CD 55 0D               CALL   run   
13C1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13C9   CD C6 0B               CALL   flushBuffer   
13CC   CD 50 0C               CALL   printStr   
13CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13DC   E1                     POP   hl   
13DD   E5                     PUSH   hl   
13DE   E5                     PUSH   hl   
13DF   CD 55 0D               CALL   run   
13E2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13F1   CD C6 0B               CALL   flushBuffer   
13F4   76                     HALT      
13F5                EXPECTM_2872S47:      
13F5   E1                     POP   HL   
13F6                          ;*Macro unroll:  test "'\\''", $27
13F6   31 00 4E               LD   SP,STACK   
13F9   CD 84 0C               CALL   coldInit   
13FC   CD AF 4C               CALL   execStr   
13FF   27 5C 27 27 00         DB   "'\\''",0   
1404   CD C6 0B               CALL   flushBuffer   
1407   E1                     POP   HL   
1408   E5                     PUSH   HL   
1409   11 27 00               LD   DE,$27   
140C   B7                     OR   A   
140D   ED 52                  SBC   HL,DE   
140F   7D                     LD   A,L   
1410   B4                     OR   H   
1411   CA 70 14               JP   Z,expectM_2873S48   
1414   CD 50 0C               CALL   printStr   
1417   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1422   CD 50 0C               CALL   printStr   
1425   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1434   21 27 00               LD   hl,$27   
1437   E5                     PUSH   hl   
1438   E5                     PUSH   hl   
1439   CD 55 0D               CALL   run   
143C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1444   CD C6 0B               CALL   flushBuffer   
1447   CD 50 0C               CALL   printStr   
144A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1457   E1                     POP   hl   
1458   E5                     PUSH   hl   
1459   E5                     PUSH   hl   
145A   CD 55 0D               CALL   run   
145D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
146C   CD C6 0B               CALL   flushBuffer   
146F   76                     HALT      
1470                EXPECTM_2873S48:      
1470   E1                     POP   HL   
1471                          ;*Macro unroll:  test "$10", $10
1471   31 00 4E               LD   SP,STACK   
1474   CD 84 0C               CALL   coldInit   
1477   CD AF 4C               CALL   execStr   
147A   24 31 30 00            DB   "$10",0   
147E   CD C6 0B               CALL   flushBuffer   
1481   E1                     POP   HL   
1482   E5                     PUSH   HL   
1483   11 10 00               LD   DE,$10   
1486   B7                     OR   A   
1487   ED 52                  SBC   HL,DE   
1489   7D                     LD   A,L   
148A   B4                     OR   H   
148B   CA E9 14               JP   Z,expectM_2874S49   
148E   CD 50 0C               CALL   printStr   
1491   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
149B   CD 50 0C               CALL   printStr   
149E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14AD   21 10 00               LD   hl,$10   
14B0   E5                     PUSH   hl   
14B1   E5                     PUSH   hl   
14B2   CD 55 0D               CALL   run   
14B5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14BD   CD C6 0B               CALL   flushBuffer   
14C0   CD 50 0C               CALL   printStr   
14C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14D0   E1                     POP   hl   
14D1   E5                     PUSH   hl   
14D2   E5                     PUSH   hl   
14D3   CD 55 0D               CALL   run   
14D6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14E5   CD C6 0B               CALL   flushBuffer   
14E8   76                     HALT      
14E9                EXPECTM_2874S49:      
14E9   E1                     POP   HL   
14EA                          ;*Macro unroll:  test "$FF", $FF
14EA   31 00 4E               LD   SP,STACK   
14ED   CD 84 0C               CALL   coldInit   
14F0   CD AF 4C               CALL   execStr   
14F3   24 46 46 00            DB   "$FF",0   
14F7   CD C6 0B               CALL   flushBuffer   
14FA   E1                     POP   HL   
14FB   E5                     PUSH   HL   
14FC   11 FF 00               LD   DE,$FF   
14FF   B7                     OR   A   
1500   ED 52                  SBC   HL,DE   
1502   7D                     LD   A,L   
1503   B4                     OR   H   
1504   CA 62 15               JP   Z,expectM_2875S50   
1507   CD 50 0C               CALL   printStr   
150A   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1514   CD 50 0C               CALL   printStr   
1517   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1526   21 FF 00               LD   hl,$FF   
1529   E5                     PUSH   hl   
152A   E5                     PUSH   hl   
152B   CD 55 0D               CALL   run   
152E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1536   CD C6 0B               CALL   flushBuffer   
1539   CD 50 0C               CALL   printStr   
153C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1549   E1                     POP   hl   
154A   E5                     PUSH   hl   
154B   E5                     PUSH   hl   
154C   CD 55 0D               CALL   run   
154F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
155E   CD C6 0B               CALL   flushBuffer   
1561   76                     HALT      
1562                EXPECTM_2875S50:      
1562   E1                     POP   HL   
1563                          ;*Macro unroll:  test "-1 2 +",1
1563   31 00 4E               LD   SP,STACK   
1566   CD 84 0C               CALL   coldInit   
1569   CD AF 4C               CALL   execStr   
156C   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1573   CD C6 0B               CALL   flushBuffer   
1576   E1                     POP   HL   
1577   E5                     PUSH   HL   
1578   11 01 00               LD   DE,1   
157B   B7                     OR   A   
157C   ED 52                  SBC   HL,DE   
157E   7D                     LD   A,L   
157F   B4                     OR   H   
1580   CA E1 15               JP   Z,expectM_2876S51   
1583   CD 50 0C               CALL   printStr   
1586   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1593   CD 50 0C               CALL   printStr   
1596   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15A5   21 01 00               LD   hl,1   
15A8   E5                     PUSH   hl   
15A9   E5                     PUSH   hl   
15AA   CD 55 0D               CALL   run   
15AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15B5   CD C6 0B               CALL   flushBuffer   
15B8   CD 50 0C               CALL   printStr   
15BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15C8   E1                     POP   hl   
15C9   E5                     PUSH   hl   
15CA   E5                     PUSH   hl   
15CB   CD 55 0D               CALL   run   
15CE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15DD   CD C6 0B               CALL   flushBuffer   
15E0   76                     HALT      
15E1                EXPECTM_2876S51:      
15E1   E1                     POP   HL   
15E2                          ;*Macro unroll:  test "-1 1 +",0
15E2   31 00 4E               LD   SP,STACK   
15E5   CD 84 0C               CALL   coldInit   
15E8   CD AF 4C               CALL   execStr   
15EB   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
15F2   CD C6 0B               CALL   flushBuffer   
15F5   E1                     POP   HL   
15F6   E5                     PUSH   HL   
15F7   11 00 00               LD   DE,0   
15FA   B7                     OR   A   
15FB   ED 52                  SBC   HL,DE   
15FD   7D                     LD   A,L   
15FE   B4                     OR   H   
15FF   CA 60 16               JP   Z,expectM_2877S52   
1602   CD 50 0C               CALL   printStr   
1605   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1612   CD 50 0C               CALL   printStr   
1615   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1624   21 00 00               LD   hl,0   
1627   E5                     PUSH   hl   
1628   E5                     PUSH   hl   
1629   CD 55 0D               CALL   run   
162C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1634   CD C6 0B               CALL   flushBuffer   
1637   CD 50 0C               CALL   printStr   
163A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1647   E1                     POP   hl   
1648   E5                     PUSH   hl   
1649   E5                     PUSH   hl   
164A   CD 55 0D               CALL   run   
164D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
165C   CD C6 0B               CALL   flushBuffer   
165F   76                     HALT      
1660                EXPECTM_2877S52:      
1660   E1                     POP   HL   
1661                          ;*Macro unroll:  test "1 2 +", 3
1661   31 00 4E               LD   SP,STACK   
1664   CD 84 0C               CALL   coldInit   
1667   CD AF 4C               CALL   execStr   
166A   31 20 32 20 2B 00      DB   "1 2 +",0   
1670   CD C6 0B               CALL   flushBuffer   
1673   E1                     POP   HL   
1674   E5                     PUSH   HL   
1675   11 03 00               LD   DE,3   
1678   B7                     OR   A   
1679   ED 52                  SBC   HL,DE   
167B   7D                     LD   A,L   
167C   B4                     OR   H   
167D   CA DD 16               JP   Z,expectM_2878S53   
1680   CD 50 0C               CALL   printStr   
1683   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
168F   CD 50 0C               CALL   printStr   
1692   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16A1   21 03 00               LD   hl,3   
16A4   E5                     PUSH   hl   
16A5   E5                     PUSH   hl   
16A6   CD 55 0D               CALL   run   
16A9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16B1   CD C6 0B               CALL   flushBuffer   
16B4   CD 50 0C               CALL   printStr   
16B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16C4   E1                     POP   hl   
16C5   E5                     PUSH   hl   
16C6   E5                     PUSH   hl   
16C7   CD 55 0D               CALL   run   
16CA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16D9   CD C6 0B               CALL   flushBuffer   
16DC   76                     HALT      
16DD                EXPECTM_2878S53:      
16DD   E1                     POP   HL   
16DE                          ;*Macro unroll:  test "4 1 2 +", 3
16DE   31 00 4E               LD   SP,STACK   
16E1   CD 84 0C               CALL   coldInit   
16E4   CD AF 4C               CALL   execStr   
16E7   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
16EF   CD C6 0B               CALL   flushBuffer   
16F2   E1                     POP   HL   
16F3   E5                     PUSH   HL   
16F4   11 03 00               LD   DE,3   
16F7   B7                     OR   A   
16F8   ED 52                  SBC   HL,DE   
16FA   7D                     LD   A,L   
16FB   B4                     OR   H   
16FC   CA 5E 17               JP   Z,expectM_2879S54   
16FF   CD 50 0C               CALL   printStr   
1702   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1710   CD 50 0C               CALL   printStr   
1713   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1722   21 03 00               LD   hl,3   
1725   E5                     PUSH   hl   
1726   E5                     PUSH   hl   
1727   CD 55 0D               CALL   run   
172A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1732   CD C6 0B               CALL   flushBuffer   
1735   CD 50 0C               CALL   printStr   
1738   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1745   E1                     POP   hl   
1746   E5                     PUSH   hl   
1747   E5                     PUSH   hl   
1748   CD 55 0D               CALL   run   
174B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
175A   CD C6 0B               CALL   flushBuffer   
175D   76                     HALT      
175E                EXPECTM_2879S54:      
175E   E1                     POP   HL   
175F                          ;*Macro unroll:  test "123 456 +", 123+456
175F   31 00 4E               LD   SP,STACK   
1762   CD 84 0C               CALL   coldInit   
1765   CD AF 4C               CALL   execStr   
1768   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1772   CD C6 0B               CALL   flushBuffer   
1775   E1                     POP   HL   
1776   E5                     PUSH   HL   
1777   11 43 02               LD   DE,123+456   
177A   B7                     OR   A   
177B   ED 52                  SBC   HL,DE   
177D   7D                     LD   A,L   
177E   B4                     OR   H   
177F   CA E3 17               JP   Z,expectM_2880S55   
1782   CD 50 0C               CALL   printStr   
1785   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1795   CD 50 0C               CALL   printStr   
1798   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17A7   21 43 02               LD   hl,123+456   
17AA   E5                     PUSH   hl   
17AB   E5                     PUSH   hl   
17AC   CD 55 0D               CALL   run   
17AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17B7   CD C6 0B               CALL   flushBuffer   
17BA   CD 50 0C               CALL   printStr   
17BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17CA   E1                     POP   hl   
17CB   E5                     PUSH   hl   
17CC   E5                     PUSH   hl   
17CD   CD 55 0D               CALL   run   
17D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17DF   CD C6 0B               CALL   flushBuffer   
17E2   76                     HALT      
17E3                EXPECTM_2880S55:      
17E3   E1                     POP   HL   
17E4                          ;*Macro unroll:  test "64 128 +", 64+128
17E4   31 00 4E               LD   SP,STACK   
17E7   CD 84 0C               CALL   coldInit   
17EA   CD AF 4C               CALL   execStr   
17ED   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
17F6   CD C6 0B               CALL   flushBuffer   
17F9   E1                     POP   HL   
17FA   E5                     PUSH   HL   
17FB   11 C0 00               LD   DE,64+128   
17FE   B7                     OR   A   
17FF   ED 52                  SBC   HL,DE   
1801   7D                     LD   A,L   
1802   B4                     OR   H   
1803   CA 66 18               JP   Z,expectM_2881S56   
1806   CD 50 0C               CALL   printStr   
1809   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1818   CD 50 0C               CALL   printStr   
181B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
182A   21 C0 00               LD   hl,64+128   
182D   E5                     PUSH   hl   
182E   E5                     PUSH   hl   
182F   CD 55 0D               CALL   run   
1832   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
183A   CD C6 0B               CALL   flushBuffer   
183D   CD 50 0C               CALL   printStr   
1840   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
184D   E1                     POP   hl   
184E   E5                     PUSH   hl   
184F   E5                     PUSH   hl   
1850   CD 55 0D               CALL   run   
1853   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1862   CD C6 0B               CALL   flushBuffer   
1865   76                     HALT      
1866                EXPECTM_2881S56:      
1866   E1                     POP   HL   
1867                          ;*Macro unroll:  test "1 2 +", 3
1867   31 00 4E               LD   SP,STACK   
186A   CD 84 0C               CALL   coldInit   
186D   CD AF 4C               CALL   execStr   
1870   31 20 32 20 2B 00      DB   "1 2 +",0   
1876   CD C6 0B               CALL   flushBuffer   
1879   E1                     POP   HL   
187A   E5                     PUSH   HL   
187B   11 03 00               LD   DE,3   
187E   B7                     OR   A   
187F   ED 52                  SBC   HL,DE   
1881   7D                     LD   A,L   
1882   B4                     OR   H   
1883   CA E3 18               JP   Z,expectM_2882S57   
1886   CD 50 0C               CALL   printStr   
1889   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1895   CD 50 0C               CALL   printStr   
1898   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18A7   21 03 00               LD   hl,3   
18AA   E5                     PUSH   hl   
18AB   E5                     PUSH   hl   
18AC   CD 55 0D               CALL   run   
18AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18B7   CD C6 0B               CALL   flushBuffer   
18BA   CD 50 0C               CALL   printStr   
18BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18CA   E1                     POP   hl   
18CB   E5                     PUSH   hl   
18CC   E5                     PUSH   hl   
18CD   CD 55 0D               CALL   run   
18D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18DF   CD C6 0B               CALL   flushBuffer   
18E2   76                     HALT      
18E3                EXPECTM_2882S57:      
18E3   E1                     POP   HL   
18E4                          ;*Macro unroll:  test "1a= a++ a",2
18E4   31 00 4E               LD   SP,STACK   
18E7   CD 84 0C               CALL   coldInit   
18EA   CD AF 4C               CALL   execStr   
18ED   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
18F7   CD C6 0B               CALL   flushBuffer   
18FA   E1                     POP   HL   
18FB   E5                     PUSH   HL   
18FC   11 02 00               LD   DE,2   
18FF   B7                     OR   A   
1900   ED 52                  SBC   HL,DE   
1902   7D                     LD   A,L   
1903   B4                     OR   H   
1904   CA 68 19               JP   Z,expectM_2883S58   
1907   CD 50 0C               CALL   printStr   
190A   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
191A   CD 50 0C               CALL   printStr   
191D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
192C   21 02 00               LD   hl,2   
192F   E5                     PUSH   hl   
1930   E5                     PUSH   hl   
1931   CD 55 0D               CALL   run   
1934   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
193C   CD C6 0B               CALL   flushBuffer   
193F   CD 50 0C               CALL   printStr   
1942   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
194F   E1                     POP   hl   
1950   E5                     PUSH   hl   
1951   E5                     PUSH   hl   
1952   CD 55 0D               CALL   run   
1955   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1964   CD C6 0B               CALL   flushBuffer   
1967   76                     HALT      
1968                EXPECTM_2883S58:      
1968   E1                     POP   HL   
1969                          ;*Macro unroll:  test "-1 -1 -",0
1969   31 00 4E               LD   SP,STACK   
196C   CD 84 0C               CALL   coldInit   
196F   CD AF 4C               CALL   execStr   
1972   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
197A   CD C6 0B               CALL   flushBuffer   
197D   E1                     POP   HL   
197E   E5                     PUSH   HL   
197F   11 00 00               LD   DE,0   
1982   B7                     OR   A   
1983   ED 52                  SBC   HL,DE   
1985   7D                     LD   A,L   
1986   B4                     OR   H   
1987   CA E9 19               JP   Z,expectM_2884S59   
198A   CD 50 0C               CALL   printStr   
198D   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
199B   CD 50 0C               CALL   printStr   
199E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19AD   21 00 00               LD   hl,0   
19B0   E5                     PUSH   hl   
19B1   E5                     PUSH   hl   
19B2   CD 55 0D               CALL   run   
19B5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19BD   CD C6 0B               CALL   flushBuffer   
19C0   CD 50 0C               CALL   printStr   
19C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19D0   E1                     POP   hl   
19D1   E5                     PUSH   hl   
19D2   E5                     PUSH   hl   
19D3   CD 55 0D               CALL   run   
19D6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19E5   CD C6 0B               CALL   flushBuffer   
19E8   76                     HALT      
19E9                EXPECTM_2884S59:      
19E9   E1                     POP   HL   
19EA                          ;*Macro unroll:  test "5 3 -", 2
19EA   31 00 4E               LD   SP,STACK   
19ED   CD 84 0C               CALL   coldInit   
19F0   CD AF 4C               CALL   execStr   
19F3   35 20 33 20 2D 00      DB   "5 3 -",0   
19F9   CD C6 0B               CALL   flushBuffer   
19FC   E1                     POP   HL   
19FD   E5                     PUSH   HL   
19FE   11 02 00               LD   DE,2   
1A01   B7                     OR   A   
1A02   ED 52                  SBC   HL,DE   
1A04   7D                     LD   A,L   
1A05   B4                     OR   H   
1A06   CA 66 1A               JP   Z,expectM_2885S60   
1A09   CD 50 0C               CALL   printStr   
1A0C   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1A18   CD 50 0C               CALL   printStr   
1A1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A2A   21 02 00               LD   hl,2   
1A2D   E5                     PUSH   hl   
1A2E   E5                     PUSH   hl   
1A2F   CD 55 0D               CALL   run   
1A32   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A3A   CD C6 0B               CALL   flushBuffer   
1A3D   CD 50 0C               CALL   printStr   
1A40   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A4D   E1                     POP   hl   
1A4E   E5                     PUSH   hl   
1A4F   E5                     PUSH   hl   
1A50   CD 55 0D               CALL   run   
1A53   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A62   CD C6 0B               CALL   flushBuffer   
1A65   76                     HALT      
1A66                EXPECTM_2885S60:      
1A66   E1                     POP   HL   
1A67                          ;*Macro unroll:  test "2 1 -",1
1A67   31 00 4E               LD   SP,STACK   
1A6A   CD 84 0C               CALL   coldInit   
1A6D   CD AF 4C               CALL   execStr   
1A70   32 20 31 20 2D 00      DB   "2 1 -",0   
1A76   CD C6 0B               CALL   flushBuffer   
1A79   E1                     POP   HL   
1A7A   E5                     PUSH   HL   
1A7B   11 01 00               LD   DE,1   
1A7E   B7                     OR   A   
1A7F   ED 52                  SBC   HL,DE   
1A81   7D                     LD   A,L   
1A82   B4                     OR   H   
1A83   CA E3 1A               JP   Z,expectM_2886S61   
1A86   CD 50 0C               CALL   printStr   
1A89   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1A95   CD 50 0C               CALL   printStr   
1A98   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AA7   21 01 00               LD   hl,1   
1AAA   E5                     PUSH   hl   
1AAB   E5                     PUSH   hl   
1AAC   CD 55 0D               CALL   run   
1AAF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AB7   CD C6 0B               CALL   flushBuffer   
1ABA   CD 50 0C               CALL   printStr   
1ABD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ACA   E1                     POP   hl   
1ACB   E5                     PUSH   hl   
1ACC   E5                     PUSH   hl   
1ACD   CD 55 0D               CALL   run   
1AD0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1ADF   CD C6 0B               CALL   flushBuffer   
1AE2   76                     HALT      
1AE3                EXPECTM_2886S61:      
1AE3   E1                     POP   HL   
1AE4                          ;*Macro unroll:  test "3a= a-- a",2
1AE4   31 00 4E               LD   SP,STACK   
1AE7   CD 84 0C               CALL   coldInit   
1AEA   CD AF 4C               CALL   execStr   
1AED   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1AF7   CD C6 0B               CALL   flushBuffer   
1AFA   E1                     POP   HL   
1AFB   E5                     PUSH   HL   
1AFC   11 02 00               LD   DE,2   
1AFF   B7                     OR   A   
1B00   ED 52                  SBC   HL,DE   
1B02   7D                     LD   A,L   
1B03   B4                     OR   H   
1B04   CA 68 1B               JP   Z,expectM_2887S62   
1B07   CD 50 0C               CALL   printStr   
1B0A   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1B1A   CD 50 0C               CALL   printStr   
1B1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B2C   21 02 00               LD   hl,2   
1B2F   E5                     PUSH   hl   
1B30   E5                     PUSH   hl   
1B31   CD 55 0D               CALL   run   
1B34   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B3C   CD C6 0B               CALL   flushBuffer   
1B3F   CD 50 0C               CALL   printStr   
1B42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B4F   E1                     POP   hl   
1B50   E5                     PUSH   hl   
1B51   E5                     PUSH   hl   
1B52   CD 55 0D               CALL   run   
1B55   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B64   CD C6 0B               CALL   flushBuffer   
1B67   76                     HALT      
1B68                EXPECTM_2887S62:      
1B68   E1                     POP   HL   
1B69                          ;*Macro unroll:  test "3 5 &", 1
1B69   31 00 4E               LD   SP,STACK   
1B6C   CD 84 0C               CALL   coldInit   
1B6F   CD AF 4C               CALL   execStr   
1B72   33 20 35 20 26 00      DB   "3 5 &",0   
1B78   CD C6 0B               CALL   flushBuffer   
1B7B   E1                     POP   HL   
1B7C   E5                     PUSH   HL   
1B7D   11 01 00               LD   DE,1   
1B80   B7                     OR   A   
1B81   ED 52                  SBC   HL,DE   
1B83   7D                     LD   A,L   
1B84   B4                     OR   H   
1B85   CA E5 1B               JP   Z,expectM_2888S63   
1B88   CD 50 0C               CALL   printStr   
1B8B   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1B97   CD 50 0C               CALL   printStr   
1B9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BA9   21 01 00               LD   hl,1   
1BAC   E5                     PUSH   hl   
1BAD   E5                     PUSH   hl   
1BAE   CD 55 0D               CALL   run   
1BB1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BB9   CD C6 0B               CALL   flushBuffer   
1BBC   CD 50 0C               CALL   printStr   
1BBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BCC   E1                     POP   hl   
1BCD   E5                     PUSH   hl   
1BCE   E5                     PUSH   hl   
1BCF   CD 55 0D               CALL   run   
1BD2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BE1   CD C6 0B               CALL   flushBuffer   
1BE4   76                     HALT      
1BE5                EXPECTM_2888S63:      
1BE5   E1                     POP   HL   
1BE6                          ;*Macro unroll:  test "3 5 |", 7
1BE6   31 00 4E               LD   SP,STACK   
1BE9   CD 84 0C               CALL   coldInit   
1BEC   CD AF 4C               CALL   execStr   
1BEF   33 20 35 20 7C 00      DB   "3 5 |",0   
1BF5   CD C6 0B               CALL   flushBuffer   
1BF8   E1                     POP   HL   
1BF9   E5                     PUSH   HL   
1BFA   11 07 00               LD   DE,7   
1BFD   B7                     OR   A   
1BFE   ED 52                  SBC   HL,DE   
1C00   7D                     LD   A,L   
1C01   B4                     OR   H   
1C02   CA 62 1C               JP   Z,expectM_2889S64   
1C05   CD 50 0C               CALL   printStr   
1C08   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1C14   CD 50 0C               CALL   printStr   
1C17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C26   21 07 00               LD   hl,7   
1C29   E5                     PUSH   hl   
1C2A   E5                     PUSH   hl   
1C2B   CD 55 0D               CALL   run   
1C2E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C36   CD C6 0B               CALL   flushBuffer   
1C39   CD 50 0C               CALL   printStr   
1C3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C49   E1                     POP   hl   
1C4A   E5                     PUSH   hl   
1C4B   E5                     PUSH   hl   
1C4C   CD 55 0D               CALL   run   
1C4F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C5E   CD C6 0B               CALL   flushBuffer   
1C61   76                     HALT      
1C62                EXPECTM_2889S64:      
1C62   E1                     POP   HL   
1C63                          ;*Macro unroll:  test "3 5 /x", 6
1C63   31 00 4E               LD   SP,STACK   
1C66   CD 84 0C               CALL   coldInit   
1C69   CD AF 4C               CALL   execStr   
1C6C   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1C73   CD C6 0B               CALL   flushBuffer   
1C76   E1                     POP   HL   
1C77   E5                     PUSH   HL   
1C78   11 06 00               LD   DE,6   
1C7B   B7                     OR   A   
1C7C   ED 52                  SBC   HL,DE   
1C7E   7D                     LD   A,L   
1C7F   B4                     OR   H   
1C80   CA E1 1C               JP   Z,expectM_2890S65   
1C83   CD 50 0C               CALL   printStr   
1C86   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1C93   CD 50 0C               CALL   printStr   
1C96   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CA5   21 06 00               LD   hl,6   
1CA8   E5                     PUSH   hl   
1CA9   E5                     PUSH   hl   
1CAA   CD 55 0D               CALL   run   
1CAD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CB5   CD C6 0B               CALL   flushBuffer   
1CB8   CD 50 0C               CALL   printStr   
1CBB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CC8   E1                     POP   hl   
1CC9   E5                     PUSH   hl   
1CCA   E5                     PUSH   hl   
1CCB   CD 55 0D               CALL   run   
1CCE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CDD   CD C6 0B               CALL   flushBuffer   
1CE0   76                     HALT      
1CE1                EXPECTM_2890S65:      
1CE1   E1                     POP   HL   
1CE2                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1CE2   31 00 4E               LD   SP,STACK   
1CE5   CD 84 0C               CALL   coldInit   
1CE8   CD AF 4C               CALL   execStr   
1CEB   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1CFA   CD C6 0B               CALL   flushBuffer   
1CFD   E1                     POP   HL   
1CFE   E5                     PUSH   HL   
1CFF   11 06 00               LD   DE,6   
1D02   B7                     OR   A   
1D03   ED 52                  SBC   HL,DE   
1D05   7D                     LD   A,L   
1D06   B4                     OR   H   
1D07   CA 70 1D               JP   Z,expectM_2891S66   
1D0A   CD 50 0C               CALL   printStr   
1D0D   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1D22   CD 50 0C               CALL   printStr   
1D25   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D34   21 06 00               LD   hl,6   
1D37   E5                     PUSH   hl   
1D38   E5                     PUSH   hl   
1D39   CD 55 0D               CALL   run   
1D3C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D44   CD C6 0B               CALL   flushBuffer   
1D47   CD 50 0C               CALL   printStr   
1D4A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D57   E1                     POP   hl   
1D58   E5                     PUSH   hl   
1D59   E5                     PUSH   hl   
1D5A   CD 55 0D               CALL   run   
1D5D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D6C   CD C6 0B               CALL   flushBuffer   
1D6F   76                     HALT      
1D70                EXPECTM_2891S66:      
1D70   E1                     POP   HL   
1D71                          ;*Macro unroll:  test "2 3 *", 6
1D71   31 00 4E               LD   SP,STACK   
1D74   CD 84 0C               CALL   coldInit   
1D77   CD AF 4C               CALL   execStr   
1D7A   32 20 33 20 2A 00      DB   "2 3 *",0   
1D80   CD C6 0B               CALL   flushBuffer   
1D83   E1                     POP   HL   
1D84   E5                     PUSH   HL   
1D85   11 06 00               LD   DE,6   
1D88   B7                     OR   A   
1D89   ED 52                  SBC   HL,DE   
1D8B   7D                     LD   A,L   
1D8C   B4                     OR   H   
1D8D   CA ED 1D               JP   Z,expectM_2892S67   
1D90   CD 50 0C               CALL   printStr   
1D93   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1D9F   CD 50 0C               CALL   printStr   
1DA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DB1   21 06 00               LD   hl,6   
1DB4   E5                     PUSH   hl   
1DB5   E5                     PUSH   hl   
1DB6   CD 55 0D               CALL   run   
1DB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DC1   CD C6 0B               CALL   flushBuffer   
1DC4   CD 50 0C               CALL   printStr   
1DC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DD4   E1                     POP   hl   
1DD5   E5                     PUSH   hl   
1DD6   E5                     PUSH   hl   
1DD7   CD 55 0D               CALL   run   
1DDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DE9   CD C6 0B               CALL   flushBuffer   
1DEC   76                     HALT      
1DED                EXPECTM_2892S67:      
1DED   E1                     POP   HL   
1DEE                          ;*Macro unroll:  test "1 2 3 + *", 5
1DEE   31 00 4E               LD   SP,STACK   
1DF1   CD 84 0C               CALL   coldInit   
1DF4   CD AF 4C               CALL   execStr   
1DF7   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1E01   CD C6 0B               CALL   flushBuffer   
1E04   E1                     POP   HL   
1E05   E5                     PUSH   HL   
1E06   11 05 00               LD   DE,5   
1E09   B7                     OR   A   
1E0A   ED 52                  SBC   HL,DE   
1E0C   7D                     LD   A,L   
1E0D   B4                     OR   H   
1E0E   CA 72 1E               JP   Z,expectM_2893S68   
1E11   CD 50 0C               CALL   printStr   
1E14   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1E24   CD 50 0C               CALL   printStr   
1E27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E36   21 05 00               LD   hl,5   
1E39   E5                     PUSH   hl   
1E3A   E5                     PUSH   hl   
1E3B   CD 55 0D               CALL   run   
1E3E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E46   CD C6 0B               CALL   flushBuffer   
1E49   CD 50 0C               CALL   printStr   
1E4C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E59   E1                     POP   hl   
1E5A   E5                     PUSH   hl   
1E5B   E5                     PUSH   hl   
1E5C   CD 55 0D               CALL   run   
1E5F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E6E   CD C6 0B               CALL   flushBuffer   
1E71   76                     HALT      
1E72                EXPECTM_2893S68:      
1E72   E1                     POP   HL   
1E73                          ;*Macro unroll:  test "7 3 /", 2
1E73   31 00 4E               LD   SP,STACK   
1E76   CD 84 0C               CALL   coldInit   
1E79   CD AF 4C               CALL   execStr   
1E7C   37 20 33 20 2F 00      DB   "7 3 /",0   
1E82   CD C6 0B               CALL   flushBuffer   
1E85   E1                     POP   HL   
1E86   E5                     PUSH   HL   
1E87   11 02 00               LD   DE,2   
1E8A   B7                     OR   A   
1E8B   ED 52                  SBC   HL,DE   
1E8D   7D                     LD   A,L   
1E8E   B4                     OR   H   
1E8F   CA EF 1E               JP   Z,expectM_2894S69   
1E92   CD 50 0C               CALL   printStr   
1E95   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1EA1   CD 50 0C               CALL   printStr   
1EA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EB3   21 02 00               LD   hl,2   
1EB6   E5                     PUSH   hl   
1EB7   E5                     PUSH   hl   
1EB8   CD 55 0D               CALL   run   
1EBB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EC3   CD C6 0B               CALL   flushBuffer   
1EC6   CD 50 0C               CALL   printStr   
1EC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ED6   E1                     POP   hl   
1ED7   E5                     PUSH   hl   
1ED8   E5                     PUSH   hl   
1ED9   CD 55 0D               CALL   run   
1EDC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1EEB   CD C6 0B               CALL   flushBuffer   
1EEE   76                     HALT      
1EEF                EXPECTM_2894S69:      
1EEF   E1                     POP   HL   
1EF0                          ;*Macro unroll:  test "100a= 1a+= a", 101
1EF0   31 00 4E               LD   SP,STACK   
1EF3   CD 84 0C               CALL   coldInit   
1EF6   CD AF 4C               CALL   execStr   
1EF9   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
1F06   CD C6 0B               CALL   flushBuffer   
1F09   E1                     POP   HL   
1F0A   E5                     PUSH   HL   
1F0B   11 65 00               LD   DE,101   
1F0E   B7                     OR   A   
1F0F   ED 52                  SBC   HL,DE   
1F11   7D                     LD   A,L   
1F12   B4                     OR   H   
1F13   CA 7A 1F               JP   Z,expectM_2895S70   
1F16   CD 50 0C               CALL   printStr   
1F19   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
1F2C   CD 50 0C               CALL   printStr   
1F2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F3E   21 65 00               LD   hl,101   
1F41   E5                     PUSH   hl   
1F42   E5                     PUSH   hl   
1F43   CD 55 0D               CALL   run   
1F46   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F4E   CD C6 0B               CALL   flushBuffer   
1F51   CD 50 0C               CALL   printStr   
1F54   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F61   E1                     POP   hl   
1F62   E5                     PUSH   hl   
1F63   E5                     PUSH   hl   
1F64   CD 55 0D               CALL   run   
1F67   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F76   CD C6 0B               CALL   flushBuffer   
1F79   76                     HALT      
1F7A                EXPECTM_2895S70:      
1F7A   E1                     POP   HL   
1F7B                          ;*Macro unroll:  test "100a= a1-= a", 99
1F7B   31 00 4E               LD   SP,STACK   
1F7E   CD 84 0C               CALL   coldInit   
1F81   CD AF 4C               CALL   execStr   
1F84   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
1F91   CD C6 0B               CALL   flushBuffer   
1F94   E1                     POP   HL   
1F95   E5                     PUSH   HL   
1F96   11 63 00               LD   DE,99   
1F99   B7                     OR   A   
1F9A   ED 52                  SBC   HL,DE   
1F9C   7D                     LD   A,L   
1F9D   B4                     OR   H   
1F9E   CA 05 20               JP   Z,expectM_2896S71   
1FA1   CD 50 0C               CALL   printStr   
1FA4   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
1FB7   CD 50 0C               CALL   printStr   
1FBA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FC9   21 63 00               LD   hl,99   
1FCC   E5                     PUSH   hl   
1FCD   E5                     PUSH   hl   
1FCE   CD 55 0D               CALL   run   
1FD1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FD9   CD C6 0B               CALL   flushBuffer   
1FDC   CD 50 0C               CALL   printStr   
1FDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FEC   E1                     POP   hl   
1FED   E5                     PUSH   hl   
1FEE   E5                     PUSH   hl   
1FEF   CD 55 0D               CALL   run   
1FF2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2001   CD C6 0B               CALL   flushBuffer   
2004   76                     HALT      
2005                EXPECTM_2896S71:      
2005   E1                     POP   HL   
2006                          ;*Macro unroll:  test "100a= a2*= a", 200
2006   31 00 4E               LD   SP,STACK   
2009   CD 84 0C               CALL   coldInit   
200C   CD AF 4C               CALL   execStr   
200F   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
201C   CD C6 0B               CALL   flushBuffer   
201F   E1                     POP   HL   
2020   E5                     PUSH   HL   
2021   11 C8 00               LD   DE,200   
2024   B7                     OR   A   
2025   ED 52                  SBC   HL,DE   
2027   7D                     LD   A,L   
2028   B4                     OR   H   
2029   CA 90 20               JP   Z,expectM_2897S72   
202C   CD 50 0C               CALL   printStr   
202F   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
2042   CD 50 0C               CALL   printStr   
2045   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2054   21 C8 00               LD   hl,200   
2057   E5                     PUSH   hl   
2058   E5                     PUSH   hl   
2059   CD 55 0D               CALL   run   
205C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2064   CD C6 0B               CALL   flushBuffer   
2067   CD 50 0C               CALL   printStr   
206A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2077   E1                     POP   hl   
2078   E5                     PUSH   hl   
2079   E5                     PUSH   hl   
207A   CD 55 0D               CALL   run   
207D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
208C   CD C6 0B               CALL   flushBuffer   
208F   76                     HALT      
2090                EXPECTM_2897S72:      
2090   E1                     POP   HL   
2091                          ;*Macro unroll:  test "100a= a2/= a", 50
2091   31 00 4E               LD   SP,STACK   
2094   CD 84 0C               CALL   coldInit   
2097   CD AF 4C               CALL   execStr   
209A   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
20A7   CD C6 0B               CALL   flushBuffer   
20AA   E1                     POP   HL   
20AB   E5                     PUSH   HL   
20AC   11 32 00               LD   DE,50   
20AF   B7                     OR   A   
20B0   ED 52                  SBC   HL,DE   
20B2   7D                     LD   A,L   
20B3   B4                     OR   H   
20B4   CA 1B 21               JP   Z,expectM_2898S73   
20B7   CD 50 0C               CALL   printStr   
20BA   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
20CD   CD 50 0C               CALL   printStr   
20D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20DF   21 32 00               LD   hl,50   
20E2   E5                     PUSH   hl   
20E3   E5                     PUSH   hl   
20E4   CD 55 0D               CALL   run   
20E7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20EF   CD C6 0B               CALL   flushBuffer   
20F2   CD 50 0C               CALL   printStr   
20F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2102   E1                     POP   hl   
2103   E5                     PUSH   hl   
2104   E5                     PUSH   hl   
2105   CD 55 0D               CALL   run   
2108   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2117   CD C6 0B               CALL   flushBuffer   
211A   76                     HALT      
211B                EXPECTM_2898S73:      
211B   E1                     POP   HL   
211C                          ;*Macro unroll:  test "7 3 / /re", 1
211C   31 00 4E               LD   SP,STACK   
211F   CD 84 0C               CALL   coldInit   
2122   CD AF 4C               CALL   execStr   
2125   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
212F   CD C6 0B               CALL   flushBuffer   
2132   E1                     POP   HL   
2133   E5                     PUSH   HL   
2134   11 01 00               LD   DE,1   
2137   B7                     OR   A   
2138   ED 52                  SBC   HL,DE   
213A   7D                     LD   A,L   
213B   B4                     OR   H   
213C   CA A0 21               JP   Z,expectM_2899S74   
213F   CD 50 0C               CALL   printStr   
2142   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2152   CD 50 0C               CALL   printStr   
2155   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2164   21 01 00               LD   hl,1   
2167   E5                     PUSH   hl   
2168   E5                     PUSH   hl   
2169   CD 55 0D               CALL   run   
216C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2174   CD C6 0B               CALL   flushBuffer   
2177   CD 50 0C               CALL   printStr   
217A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2187   E1                     POP   hl   
2188   E5                     PUSH   hl   
2189   E5                     PUSH   hl   
218A   CD 55 0D               CALL   run   
218D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
219C   CD C6 0B               CALL   flushBuffer   
219F   76                     HALT      
21A0                EXPECTM_2899S74:      
21A0   E1                     POP   HL   
21A1                          ;*Macro unroll:  test "7 3 /", 2
21A1   31 00 4E               LD   SP,STACK   
21A4   CD 84 0C               CALL   coldInit   
21A7   CD AF 4C               CALL   execStr   
21AA   37 20 33 20 2F 00      DB   "7 3 /",0   
21B0   CD C6 0B               CALL   flushBuffer   
21B3   E1                     POP   HL   
21B4   E5                     PUSH   HL   
21B5   11 02 00               LD   DE,2   
21B8   B7                     OR   A   
21B9   ED 52                  SBC   HL,DE   
21BB   7D                     LD   A,L   
21BC   B4                     OR   H   
21BD   CA 1D 22               JP   Z,expectM_2900S75   
21C0   CD 50 0C               CALL   printStr   
21C3   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
21CF   CD 50 0C               CALL   printStr   
21D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21E1   21 02 00               LD   hl,2   
21E4   E5                     PUSH   hl   
21E5   E5                     PUSH   hl   
21E6   CD 55 0D               CALL   run   
21E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21F1   CD C6 0B               CALL   flushBuffer   
21F4   CD 50 0C               CALL   printStr   
21F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2204   E1                     POP   hl   
2205   E5                     PUSH   hl   
2206   E5                     PUSH   hl   
2207   CD 55 0D               CALL   run   
220A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2219   CD C6 0B               CALL   flushBuffer   
221C   76                     HALT      
221D                EXPECTM_2900S75:      
221D   E1                     POP   HL   
221E                          ;*Macro unroll:  test "2 3 ==", FALSE
221E   31 00 4E               LD   SP,STACK   
2221   CD 84 0C               CALL   coldInit   
2224   CD AF 4C               CALL   execStr   
2227   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
222E   CD C6 0B               CALL   flushBuffer   
2231   E1                     POP   HL   
2232   E5                     PUSH   HL   
2233   11 00 00               LD   DE,FALSE   
2236   B7                     OR   A   
2237   ED 52                  SBC   HL,DE   
2239   7D                     LD   A,L   
223A   B4                     OR   H   
223B   CA 9C 22               JP   Z,expectM_2901S76   
223E   CD 50 0C               CALL   printStr   
2241   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
224E   CD 50 0C               CALL   printStr   
2251   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2260   21 00 00               LD   hl,FALSE   
2263   E5                     PUSH   hl   
2264   E5                     PUSH   hl   
2265   CD 55 0D               CALL   run   
2268   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2270   CD C6 0B               CALL   flushBuffer   
2273   CD 50 0C               CALL   printStr   
2276   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2283   E1                     POP   hl   
2284   E5                     PUSH   hl   
2285   E5                     PUSH   hl   
2286   CD 55 0D               CALL   run   
2289   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2298   CD C6 0B               CALL   flushBuffer   
229B   76                     HALT      
229C                EXPECTM_2901S76:      
229C   E1                     POP   HL   
229D                          ;*Macro unroll:  test "3 3 ==", TRUE
229D   31 00 4E               LD   SP,STACK   
22A0   CD 84 0C               CALL   coldInit   
22A3   CD AF 4C               CALL   execStr   
22A6   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
22AD   CD C6 0B               CALL   flushBuffer   
22B0   E1                     POP   HL   
22B1   E5                     PUSH   HL   
22B2   11 FF FF               LD   DE,TRUE   
22B5   B7                     OR   A   
22B6   ED 52                  SBC   HL,DE   
22B8   7D                     LD   A,L   
22B9   B4                     OR   H   
22BA   CA 1B 23               JP   Z,expectM_2902S77   
22BD   CD 50 0C               CALL   printStr   
22C0   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
22CD   CD 50 0C               CALL   printStr   
22D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22DF   21 FF FF               LD   hl,TRUE   
22E2   E5                     PUSH   hl   
22E3   E5                     PUSH   hl   
22E4   CD 55 0D               CALL   run   
22E7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22EF   CD C6 0B               CALL   flushBuffer   
22F2   CD 50 0C               CALL   printStr   
22F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2302   E1                     POP   hl   
2303   E5                     PUSH   hl   
2304   E5                     PUSH   hl   
2305   CD 55 0D               CALL   run   
2308   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2317   CD C6 0B               CALL   flushBuffer   
231A   76                     HALT      
231B                EXPECTM_2902S77:      
231B   E1                     POP   HL   
231C                          ;*Macro unroll:  test "1 2 <", TRUE
231C   31 00 4E               LD   SP,STACK   
231F   CD 84 0C               CALL   coldInit   
2322   CD AF 4C               CALL   execStr   
2325   31 20 32 20 3C 00      DB   "1 2 <",0   
232B   CD C6 0B               CALL   flushBuffer   
232E   E1                     POP   HL   
232F   E5                     PUSH   HL   
2330   11 FF FF               LD   DE,TRUE   
2333   B7                     OR   A   
2334   ED 52                  SBC   HL,DE   
2336   7D                     LD   A,L   
2337   B4                     OR   H   
2338   CA 98 23               JP   Z,expectM_2903S78   
233B   CD 50 0C               CALL   printStr   
233E   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
234A   CD 50 0C               CALL   printStr   
234D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
235C   21 FF FF               LD   hl,TRUE   
235F   E5                     PUSH   hl   
2360   E5                     PUSH   hl   
2361   CD 55 0D               CALL   run   
2364   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
236C   CD C6 0B               CALL   flushBuffer   
236F   CD 50 0C               CALL   printStr   
2372   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
237F   E1                     POP   hl   
2380   E5                     PUSH   hl   
2381   E5                     PUSH   hl   
2382   CD 55 0D               CALL   run   
2385   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2394   CD C6 0B               CALL   flushBuffer   
2397   76                     HALT      
2398                EXPECTM_2903S78:      
2398   E1                     POP   HL   
2399                          ;*Macro unroll:  test "2 1 <", FALSE
2399   31 00 4E               LD   SP,STACK   
239C   CD 84 0C               CALL   coldInit   
239F   CD AF 4C               CALL   execStr   
23A2   32 20 31 20 3C 00      DB   "2 1 <",0   
23A8   CD C6 0B               CALL   flushBuffer   
23AB   E1                     POP   HL   
23AC   E5                     PUSH   HL   
23AD   11 00 00               LD   DE,FALSE   
23B0   B7                     OR   A   
23B1   ED 52                  SBC   HL,DE   
23B3   7D                     LD   A,L   
23B4   B4                     OR   H   
23B5   CA 15 24               JP   Z,expectM_2904S79   
23B8   CD 50 0C               CALL   printStr   
23BB   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
23C7   CD 50 0C               CALL   printStr   
23CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D9   21 00 00               LD   hl,FALSE   
23DC   E5                     PUSH   hl   
23DD   E5                     PUSH   hl   
23DE   CD 55 0D               CALL   run   
23E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23E9   CD C6 0B               CALL   flushBuffer   
23EC   CD 50 0C               CALL   printStr   
23EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23FC   E1                     POP   hl   
23FD   E5                     PUSH   hl   
23FE   E5                     PUSH   hl   
23FF   CD 55 0D               CALL   run   
2402   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2411   CD C6 0B               CALL   flushBuffer   
2414   76                     HALT      
2415                EXPECTM_2904S79:      
2415   E1                     POP   HL   
2416                          ;*Macro unroll:  test "2 3 <", TRUE
2416   31 00 4E               LD   SP,STACK   
2419   CD 84 0C               CALL   coldInit   
241C   CD AF 4C               CALL   execStr   
241F   32 20 33 20 3C 00      DB   "2 3 <",0   
2425   CD C6 0B               CALL   flushBuffer   
2428   E1                     POP   HL   
2429   E5                     PUSH   HL   
242A   11 FF FF               LD   DE,TRUE   
242D   B7                     OR   A   
242E   ED 52                  SBC   HL,DE   
2430   7D                     LD   A,L   
2431   B4                     OR   H   
2432   CA 92 24               JP   Z,expectM_2905S80   
2435   CD 50 0C               CALL   printStr   
2438   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2444   CD 50 0C               CALL   printStr   
2447   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2456   21 FF FF               LD   hl,TRUE   
2459   E5                     PUSH   hl   
245A   E5                     PUSH   hl   
245B   CD 55 0D               CALL   run   
245E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2466   CD C6 0B               CALL   flushBuffer   
2469   CD 50 0C               CALL   printStr   
246C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2479   E1                     POP   hl   
247A   E5                     PUSH   hl   
247B   E5                     PUSH   hl   
247C   CD 55 0D               CALL   run   
247F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
248E   CD C6 0B               CALL   flushBuffer   
2491   76                     HALT      
2492                EXPECTM_2905S80:      
2492   E1                     POP   HL   
2493                          ;*Macro unroll:  test "3 3 <", FALSE
2493   31 00 4E               LD   SP,STACK   
2496   CD 84 0C               CALL   coldInit   
2499   CD AF 4C               CALL   execStr   
249C   33 20 33 20 3C 00      DB   "3 3 <",0   
24A2   CD C6 0B               CALL   flushBuffer   
24A5   E1                     POP   HL   
24A6   E5                     PUSH   HL   
24A7   11 00 00               LD   DE,FALSE   
24AA   B7                     OR   A   
24AB   ED 52                  SBC   HL,DE   
24AD   7D                     LD   A,L   
24AE   B4                     OR   H   
24AF   CA 0F 25               JP   Z,expectM_2906S81   
24B2   CD 50 0C               CALL   printStr   
24B5   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
24C1   CD 50 0C               CALL   printStr   
24C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24D3   21 00 00               LD   hl,FALSE   
24D6   E5                     PUSH   hl   
24D7   E5                     PUSH   hl   
24D8   CD 55 0D               CALL   run   
24DB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24E3   CD C6 0B               CALL   flushBuffer   
24E6   CD 50 0C               CALL   printStr   
24E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24F6   E1                     POP   hl   
24F7   E5                     PUSH   hl   
24F8   E5                     PUSH   hl   
24F9   CD 55 0D               CALL   run   
24FC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
250B   CD C6 0B               CALL   flushBuffer   
250E   76                     HALT      
250F                EXPECTM_2906S81:      
250F   E1                     POP   HL   
2510                          ;*Macro unroll:  test "1 2 >", FALSE
2510   31 00 4E               LD   SP,STACK   
2513   CD 84 0C               CALL   coldInit   
2516   CD AF 4C               CALL   execStr   
2519   31 20 32 20 3E 00      DB   "1 2 >",0   
251F   CD C6 0B               CALL   flushBuffer   
2522   E1                     POP   HL   
2523   E5                     PUSH   HL   
2524   11 00 00               LD   DE,FALSE   
2527   B7                     OR   A   
2528   ED 52                  SBC   HL,DE   
252A   7D                     LD   A,L   
252B   B4                     OR   H   
252C   CA 8C 25               JP   Z,expectM_2907S82   
252F   CD 50 0C               CALL   printStr   
2532   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
253E   CD 50 0C               CALL   printStr   
2541   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2550   21 00 00               LD   hl,FALSE   
2553   E5                     PUSH   hl   
2554   E5                     PUSH   hl   
2555   CD 55 0D               CALL   run   
2558   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2560   CD C6 0B               CALL   flushBuffer   
2563   CD 50 0C               CALL   printStr   
2566   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2573   E1                     POP   hl   
2574   E5                     PUSH   hl   
2575   E5                     PUSH   hl   
2576   CD 55 0D               CALL   run   
2579   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2588   CD C6 0B               CALL   flushBuffer   
258B   76                     HALT      
258C                EXPECTM_2907S82:      
258C   E1                     POP   HL   
258D                          ;*Macro unroll:  test "2 1 >", TRUE
258D   31 00 4E               LD   SP,STACK   
2590   CD 84 0C               CALL   coldInit   
2593   CD AF 4C               CALL   execStr   
2596   32 20 31 20 3E 00      DB   "2 1 >",0   
259C   CD C6 0B               CALL   flushBuffer   
259F   E1                     POP   HL   
25A0   E5                     PUSH   HL   
25A1   11 FF FF               LD   DE,TRUE   
25A4   B7                     OR   A   
25A5   ED 52                  SBC   HL,DE   
25A7   7D                     LD   A,L   
25A8   B4                     OR   H   
25A9   CA 09 26               JP   Z,expectM_2908S83   
25AC   CD 50 0C               CALL   printStr   
25AF   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
25BB   CD 50 0C               CALL   printStr   
25BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25CD   21 FF FF               LD   hl,TRUE   
25D0   E5                     PUSH   hl   
25D1   E5                     PUSH   hl   
25D2   CD 55 0D               CALL   run   
25D5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25DD   CD C6 0B               CALL   flushBuffer   
25E0   CD 50 0C               CALL   printStr   
25E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25F0   E1                     POP   hl   
25F1   E5                     PUSH   hl   
25F2   E5                     PUSH   hl   
25F3   CD 55 0D               CALL   run   
25F6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2605   CD C6 0B               CALL   flushBuffer   
2608   76                     HALT      
2609                EXPECTM_2908S83:      
2609   E1                     POP   HL   
260A                          ;*Macro unroll:  test "3 3 >", FALSE
260A   31 00 4E               LD   SP,STACK   
260D   CD 84 0C               CALL   coldInit   
2610   CD AF 4C               CALL   execStr   
2613   33 20 33 20 3E 00      DB   "3 3 >",0   
2619   CD C6 0B               CALL   flushBuffer   
261C   E1                     POP   HL   
261D   E5                     PUSH   HL   
261E   11 00 00               LD   DE,FALSE   
2621   B7                     OR   A   
2622   ED 52                  SBC   HL,DE   
2624   7D                     LD   A,L   
2625   B4                     OR   H   
2626   CA 86 26               JP   Z,expectM_2909S84   
2629   CD 50 0C               CALL   printStr   
262C   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2638   CD 50 0C               CALL   printStr   
263B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
264A   21 00 00               LD   hl,FALSE   
264D   E5                     PUSH   hl   
264E   E5                     PUSH   hl   
264F   CD 55 0D               CALL   run   
2652   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
265A   CD C6 0B               CALL   flushBuffer   
265D   CD 50 0C               CALL   printStr   
2660   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
266D   E1                     POP   hl   
266E   E5                     PUSH   hl   
266F   E5                     PUSH   hl   
2670   CD 55 0D               CALL   run   
2673   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2682   CD C6 0B               CALL   flushBuffer   
2685   76                     HALT      
2686                EXPECTM_2909S84:      
2686   E1                     POP   HL   
2687                          ;*Macro unroll:  test "4 3 >", TRUE
2687   31 00 4E               LD   SP,STACK   
268A   CD 84 0C               CALL   coldInit   
268D   CD AF 4C               CALL   execStr   
2690   34 20 33 20 3E 00      DB   "4 3 >",0   
2696   CD C6 0B               CALL   flushBuffer   
2699   E1                     POP   HL   
269A   E5                     PUSH   HL   
269B   11 FF FF               LD   DE,TRUE   
269E   B7                     OR   A   
269F   ED 52                  SBC   HL,DE   
26A1   7D                     LD   A,L   
26A2   B4                     OR   H   
26A3   CA 03 27               JP   Z,expectM_2910S85   
26A6   CD 50 0C               CALL   printStr   
26A9   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
26B5   CD 50 0C               CALL   printStr   
26B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26C7   21 FF FF               LD   hl,TRUE   
26CA   E5                     PUSH   hl   
26CB   E5                     PUSH   hl   
26CC   CD 55 0D               CALL   run   
26CF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26D7   CD C6 0B               CALL   flushBuffer   
26DA   CD 50 0C               CALL   printStr   
26DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26EA   E1                     POP   hl   
26EB   E5                     PUSH   hl   
26EC   E5                     PUSH   hl   
26ED   CD 55 0D               CALL   run   
26F0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26FF   CD C6 0B               CALL   flushBuffer   
2702   76                     HALT      
2703                EXPECTM_2910S85:      
2703   E1                     POP   HL   
2704                          ;*Macro unroll:  test "2 2 <=", TRUE
2704   31 00 4E               LD   SP,STACK   
2707   CD 84 0C               CALL   coldInit   
270A   CD AF 4C               CALL   execStr   
270D   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2714   CD C6 0B               CALL   flushBuffer   
2717   E1                     POP   HL   
2718   E5                     PUSH   HL   
2719   11 FF FF               LD   DE,TRUE   
271C   B7                     OR   A   
271D   ED 52                  SBC   HL,DE   
271F   7D                     LD   A,L   
2720   B4                     OR   H   
2721   CA 82 27               JP   Z,expectM_2911S86   
2724   CD 50 0C               CALL   printStr   
2727   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2734   CD 50 0C               CALL   printStr   
2737   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2746   21 FF FF               LD   hl,TRUE   
2749   E5                     PUSH   hl   
274A   E5                     PUSH   hl   
274B   CD 55 0D               CALL   run   
274E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2756   CD C6 0B               CALL   flushBuffer   
2759   CD 50 0C               CALL   printStr   
275C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2769   E1                     POP   hl   
276A   E5                     PUSH   hl   
276B   E5                     PUSH   hl   
276C   CD 55 0D               CALL   run   
276F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
277E   CD C6 0B               CALL   flushBuffer   
2781   76                     HALT      
2782                EXPECTM_2911S86:      
2782   E1                     POP   HL   
2783                          ;*Macro unroll:  test "2 2 >=", TRUE
2783   31 00 4E               LD   SP,STACK   
2786   CD 84 0C               CALL   coldInit   
2789   CD AF 4C               CALL   execStr   
278C   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2793   CD C6 0B               CALL   flushBuffer   
2796   E1                     POP   HL   
2797   E5                     PUSH   HL   
2798   11 FF FF               LD   DE,TRUE   
279B   B7                     OR   A   
279C   ED 52                  SBC   HL,DE   
279E   7D                     LD   A,L   
279F   B4                     OR   H   
27A0   CA 01 28               JP   Z,expectM_2912S87   
27A3   CD 50 0C               CALL   printStr   
27A6   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
27B3   CD 50 0C               CALL   printStr   
27B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27C5   21 FF FF               LD   hl,TRUE   
27C8   E5                     PUSH   hl   
27C9   E5                     PUSH   hl   
27CA   CD 55 0D               CALL   run   
27CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27D5   CD C6 0B               CALL   flushBuffer   
27D8   CD 50 0C               CALL   printStr   
27DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27E8   E1                     POP   hl   
27E9   E5                     PUSH   hl   
27EA   E5                     PUSH   hl   
27EB   CD 55 0D               CALL   run   
27EE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27FD   CD C6 0B               CALL   flushBuffer   
2800   76                     HALT      
2801                EXPECTM_2912S87:      
2801   E1                     POP   HL   
2802                          ;*Macro unroll:  test "3 1 <<", 6
2802   31 00 4E               LD   SP,STACK   
2805   CD 84 0C               CALL   coldInit   
2808   CD AF 4C               CALL   execStr   
280B   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2812   CD C6 0B               CALL   flushBuffer   
2815   E1                     POP   HL   
2816   E5                     PUSH   HL   
2817   11 06 00               LD   DE,6   
281A   B7                     OR   A   
281B   ED 52                  SBC   HL,DE   
281D   7D                     LD   A,L   
281E   B4                     OR   H   
281F   CA 80 28               JP   Z,expectM_2913S88   
2822   CD 50 0C               CALL   printStr   
2825   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2832   CD 50 0C               CALL   printStr   
2835   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2844   21 06 00               LD   hl,6   
2847   E5                     PUSH   hl   
2848   E5                     PUSH   hl   
2849   CD 55 0D               CALL   run   
284C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2854   CD C6 0B               CALL   flushBuffer   
2857   CD 50 0C               CALL   printStr   
285A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2867   E1                     POP   hl   
2868   E5                     PUSH   hl   
2869   E5                     PUSH   hl   
286A   CD 55 0D               CALL   run   
286D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
287C   CD C6 0B               CALL   flushBuffer   
287F   76                     HALT      
2880                EXPECTM_2913S88:      
2880   E1                     POP   HL   
2881                          ;*Macro unroll:  test "10 1 >>", 5
2881   31 00 4E               LD   SP,STACK   
2884   CD 84 0C               CALL   coldInit   
2887   CD AF 4C               CALL   execStr   
288A   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2892   CD C6 0B               CALL   flushBuffer   
2895   E1                     POP   HL   
2896   E5                     PUSH   HL   
2897   11 05 00               LD   DE,5   
289A   B7                     OR   A   
289B   ED 52                  SBC   HL,DE   
289D   7D                     LD   A,L   
289E   B4                     OR   H   
289F   CA 01 29               JP   Z,expectM_2914S89   
28A2   CD 50 0C               CALL   printStr   
28A5   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
28B3   CD 50 0C               CALL   printStr   
28B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28C5   21 05 00               LD   hl,5   
28C8   E5                     PUSH   hl   
28C9   E5                     PUSH   hl   
28CA   CD 55 0D               CALL   run   
28CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28D5   CD C6 0B               CALL   flushBuffer   
28D8   CD 50 0C               CALL   printStr   
28DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28E8   E1                     POP   hl   
28E9   E5                     PUSH   hl   
28EA   E5                     PUSH   hl   
28EB   CD 55 0D               CALL   run   
28EE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28FD   CD C6 0B               CALL   flushBuffer   
2900   76                     HALT      
2901                EXPECTM_2914S89:      
2901   E1                     POP   HL   
2902                          ;*Macro unroll:  test "1 x = x", 1
2902   31 00 4E               LD   SP,STACK   
2905   CD 84 0C               CALL   coldInit   
2908   CD AF 4C               CALL   execStr   
290B   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2913   CD C6 0B               CALL   flushBuffer   
2916   E1                     POP   HL   
2917   E5                     PUSH   HL   
2918   11 01 00               LD   DE,1   
291B   B7                     OR   A   
291C   ED 52                  SBC   HL,DE   
291E   7D                     LD   A,L   
291F   B4                     OR   H   
2920   CA 82 29               JP   Z,expectM_2915S90   
2923   CD 50 0C               CALL   printStr   
2926   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2934   CD 50 0C               CALL   printStr   
2937   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2946   21 01 00               LD   hl,1   
2949   E5                     PUSH   hl   
294A   E5                     PUSH   hl   
294B   CD 55 0D               CALL   run   
294E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2956   CD C6 0B               CALL   flushBuffer   
2959   CD 50 0C               CALL   printStr   
295C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2969   E1                     POP   hl   
296A   E5                     PUSH   hl   
296B   E5                     PUSH   hl   
296C   CD 55 0D               CALL   run   
296F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
297E   CD C6 0B               CALL   flushBuffer   
2981   76                     HALT      
2982                EXPECTM_2915S90:      
2982   E1                     POP   HL   
2983                          ;*Macro unroll:  test "1{}^", 1
2983   31 00 4E               LD   SP,STACK   
2986   CD 84 0C               CALL   coldInit   
2989   CD AF 4C               CALL   execStr   
298C   31 7B 7D 5E 00         DB   "1{}^",0   
2991   CD C6 0B               CALL   flushBuffer   
2994   E1                     POP   HL   
2995   E5                     PUSH   HL   
2996   11 01 00               LD   DE,1   
2999   B7                     OR   A   
299A   ED 52                  SBC   HL,DE   
299C   7D                     LD   A,L   
299D   B4                     OR   H   
299E   CA FD 29               JP   Z,expectM_2916S91   
29A1   CD 50 0C               CALL   printStr   
29A4   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
29AF   CD 50 0C               CALL   printStr   
29B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29C1   21 01 00               LD   hl,1   
29C4   E5                     PUSH   hl   
29C5   E5                     PUSH   hl   
29C6   CD 55 0D               CALL   run   
29C9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29D1   CD C6 0B               CALL   flushBuffer   
29D4   CD 50 0C               CALL   printStr   
29D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29E4   E1                     POP   hl   
29E5   E5                     PUSH   hl   
29E6   E5                     PUSH   hl   
29E7   CD 55 0D               CALL   run   
29EA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29F9   CD C6 0B               CALL   flushBuffer   
29FC   76                     HALT      
29FD                EXPECTM_2916S91:      
29FD   E1                     POP   HL   
29FE                          ;*Macro unroll:  test "{1}^", 1
29FE   31 00 4E               LD   SP,STACK   
2A01   CD 84 0C               CALL   coldInit   
2A04   CD AF 4C               CALL   execStr   
2A07   7B 31 7D 5E 00         DB   "{1}^",0   
2A0C   CD C6 0B               CALL   flushBuffer   
2A0F   E1                     POP   HL   
2A10   E5                     PUSH   HL   
2A11   11 01 00               LD   DE,1   
2A14   B7                     OR   A   
2A15   ED 52                  SBC   HL,DE   
2A17   7D                     LD   A,L   
2A18   B4                     OR   H   
2A19   CA 78 2A               JP   Z,expectM_2917S92   
2A1C   CD 50 0C               CALL   printStr   
2A1F   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2A2A   CD 50 0C               CALL   printStr   
2A2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A3C   21 01 00               LD   hl,1   
2A3F   E5                     PUSH   hl   
2A40   E5                     PUSH   hl   
2A41   CD 55 0D               CALL   run   
2A44   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A4C   CD C6 0B               CALL   flushBuffer   
2A4F   CD 50 0C               CALL   printStr   
2A52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A5F   E1                     POP   hl   
2A60   E5                     PUSH   hl   
2A61   E5                     PUSH   hl   
2A62   CD 55 0D               CALL   run   
2A65   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A74   CD C6 0B               CALL   flushBuffer   
2A77   76                     HALT      
2A78                EXPECTM_2917S92:      
2A78   E1                     POP   HL   
2A79                          ;*Macro unroll:  test "{{1}^}^", 1
2A79   31 00 4E               LD   SP,STACK   
2A7C   CD 84 0C               CALL   coldInit   
2A7F   CD AF 4C               CALL   execStr   
2A82   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2A8A   CD C6 0B               CALL   flushBuffer   
2A8D   E1                     POP   HL   
2A8E   E5                     PUSH   HL   
2A8F   11 01 00               LD   DE,1   
2A92   B7                     OR   A   
2A93   ED 52                  SBC   HL,DE   
2A95   7D                     LD   A,L   
2A96   B4                     OR   H   
2A97   CA F9 2A               JP   Z,expectM_2918S93   
2A9A   CD 50 0C               CALL   printStr   
2A9D   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2AAB   CD 50 0C               CALL   printStr   
2AAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ABD   21 01 00               LD   hl,1   
2AC0   E5                     PUSH   hl   
2AC1   E5                     PUSH   hl   
2AC2   CD 55 0D               CALL   run   
2AC5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2ACD   CD C6 0B               CALL   flushBuffer   
2AD0   CD 50 0C               CALL   printStr   
2AD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AE0   E1                     POP   hl   
2AE1   E5                     PUSH   hl   
2AE2   E5                     PUSH   hl   
2AE3   CD 55 0D               CALL   run   
2AE6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AF5   CD C6 0B               CALL   flushBuffer   
2AF8   76                     HALT      
2AF9                EXPECTM_2918S93:      
2AF9   E1                     POP   HL   
2AFA                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2AFA   31 00 4E               LD   SP,STACK   
2AFD   CD 84 0C               CALL   coldInit   
2B00   CD AF 4C               CALL   execStr   
2B03   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2B0E   CD C6 0B               CALL   flushBuffer   
2B11   E1                     POP   HL   
2B12   E5                     PUSH   HL   
2B13   11 01 00               LD   DE,1   
2B16   B7                     OR   A   
2B17   ED 52                  SBC   HL,DE   
2B19   7D                     LD   A,L   
2B1A   B4                     OR   H   
2B1B   CA 80 2B               JP   Z,expectM_2919S94   
2B1E   CD 50 0C               CALL   printStr   
2B21   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2B32   CD 50 0C               CALL   printStr   
2B35   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B44   21 01 00               LD   hl,1   
2B47   E5                     PUSH   hl   
2B48   E5                     PUSH   hl   
2B49   CD 55 0D               CALL   run   
2B4C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B54   CD C6 0B               CALL   flushBuffer   
2B57   CD 50 0C               CALL   printStr   
2B5A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B67   E1                     POP   hl   
2B68   E5                     PUSH   hl   
2B69   E5                     PUSH   hl   
2B6A   CD 55 0D               CALL   run   
2B6D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B7C   CD C6 0B               CALL   flushBuffer   
2B7F   76                     HALT      
2B80                EXPECTM_2919S94:      
2B80   E1                     POP   HL   
2B81                          ;*Macro unroll:  test "5 /f{10} ?", 5
2B81   31 00 4E               LD   SP,STACK   
2B84   CD 84 0C               CALL   coldInit   
2B87   CD AF 4C               CALL   execStr   
2B8A   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2B95   CD C6 0B               CALL   flushBuffer   
2B98   E1                     POP   HL   
2B99   E5                     PUSH   HL   
2B9A   11 05 00               LD   DE,5   
2B9D   B7                     OR   A   
2B9E   ED 52                  SBC   HL,DE   
2BA0   7D                     LD   A,L   
2BA1   B4                     OR   H   
2BA2   CA 07 2C               JP   Z,expectM_2920S95   
2BA5   CD 50 0C               CALL   printStr   
2BA8   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2BB9   CD 50 0C               CALL   printStr   
2BBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BCB   21 05 00               LD   hl,5   
2BCE   E5                     PUSH   hl   
2BCF   E5                     PUSH   hl   
2BD0   CD 55 0D               CALL   run   
2BD3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BDB   CD C6 0B               CALL   flushBuffer   
2BDE   CD 50 0C               CALL   printStr   
2BE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BEE   E1                     POP   hl   
2BEF   E5                     PUSH   hl   
2BF0   E5                     PUSH   hl   
2BF1   CD 55 0D               CALL   run   
2BF4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C03   CD C6 0B               CALL   flushBuffer   
2C06   76                     HALT      
2C07                EXPECTM_2920S95:      
2C07   E1                     POP   HL   
2C08                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2C08   31 00 4E               LD   SP,STACK   
2C0B   CD 84 0C               CALL   coldInit   
2C0E   CD AF 4C               CALL   execStr   
2C11   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2C1E   CD C6 0B               CALL   flushBuffer   
2C21   E1                     POP   HL   
2C22   E5                     PUSH   HL   
2C23   11 0F 00               LD   DE,15   
2C26   B7                     OR   A   
2C27   ED 52                  SBC   HL,DE   
2C29   7D                     LD   A,L   
2C2A   B4                     OR   H   
2C2B   CA 92 2C               JP   Z,expectM_2921S96   
2C2E   CD 50 0C               CALL   printStr   
2C31   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2C44   CD 50 0C               CALL   printStr   
2C47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C56   21 0F 00               LD   hl,15   
2C59   E5                     PUSH   hl   
2C5A   E5                     PUSH   hl   
2C5B   CD 55 0D               CALL   run   
2C5E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C66   CD C6 0B               CALL   flushBuffer   
2C69   CD 50 0C               CALL   printStr   
2C6C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C79   E1                     POP   hl   
2C7A   E5                     PUSH   hl   
2C7B   E5                     PUSH   hl   
2C7C   CD 55 0D               CALL   run   
2C7F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C8E   CD C6 0B               CALL   flushBuffer   
2C91   76                     HALT      
2C92                EXPECTM_2921S96:      
2C92   E1                     POP   HL   
2C93                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2C93   31 00 4E               LD   SP,STACK   
2C96   CD 84 0C               CALL   coldInit   
2C99   CD AF 4C               CALL   execStr   
2C9C   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2CAE   CD C6 0B               CALL   flushBuffer   
2CB1   E1                     POP   HL   
2CB2   E5                     PUSH   HL   
2CB3   11 15 00               LD   DE,21   
2CB6   B7                     OR   A   
2CB7   ED 52                  SBC   HL,DE   
2CB9   7D                     LD   A,L   
2CBA   B4                     OR   H   
2CBB   CA 27 2D               JP   Z,expectM_2922S97   
2CBE   CD 50 0C               CALL   printStr   
2CC1   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2CD9   CD 50 0C               CALL   printStr   
2CDC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CEB   21 15 00               LD   hl,21   
2CEE   E5                     PUSH   hl   
2CEF   E5                     PUSH   hl   
2CF0   CD 55 0D               CALL   run   
2CF3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CFB   CD C6 0B               CALL   flushBuffer   
2CFE   CD 50 0C               CALL   printStr   
2D01   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D0E   E1                     POP   hl   
2D0F   E5                     PUSH   hl   
2D10   E5                     PUSH   hl   
2D11   CD 55 0D               CALL   run   
2D14   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D23   CD C6 0B               CALL   flushBuffer   
2D26   76                     HALT      
2D27                EXPECTM_2922S97:      
2D27   E1                     POP   HL   
2D28                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2D28   31 00 4E               LD   SP,STACK   
2D2B   CD 84 0C               CALL   coldInit   
2D2E   CD AF 4C               CALL   execStr   
2D31   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2D43   CD C6 0B               CALL   flushBuffer   
2D46   E1                     POP   HL   
2D47   E5                     PUSH   HL   
2D48   11 0B 00               LD   DE,11   
2D4B   B7                     OR   A   
2D4C   ED 52                  SBC   HL,DE   
2D4E   7D                     LD   A,L   
2D4F   B4                     OR   H   
2D50   CA BC 2D               JP   Z,expectM_2923S98   
2D53   CD 50 0C               CALL   printStr   
2D56   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2D6E   CD 50 0C               CALL   printStr   
2D71   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D80   21 0B 00               LD   hl,11   
2D83   E5                     PUSH   hl   
2D84   E5                     PUSH   hl   
2D85   CD 55 0D               CALL   run   
2D88   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D90   CD C6 0B               CALL   flushBuffer   
2D93   CD 50 0C               CALL   printStr   
2D96   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DA3   E1                     POP   hl   
2DA4   E5                     PUSH   hl   
2DA5   E5                     PUSH   hl   
2DA6   CD 55 0D               CALL   run   
2DA9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DB8   CD C6 0B               CALL   flushBuffer   
2DBB   76                     HALT      
2DBC                EXPECTM_2923S98:      
2DBC   E1                     POP   HL   
2DBD                          ;*Macro unroll:  test ":{2}^", 2
2DBD   31 00 4E               LD   SP,STACK   
2DC0   CD 84 0C               CALL   coldInit   
2DC3   CD AF 4C               CALL   execStr   
2DC6   3A 7B 32 7D 5E 00      DB   ":{2}^",0   
2DCC   CD C6 0B               CALL   flushBuffer   
2DCF   E1                     POP   HL   
2DD0   E5                     PUSH   HL   
2DD1   11 02 00               LD   DE,2   
2DD4   B7                     OR   A   
2DD5   ED 52                  SBC   HL,DE   
2DD7   7D                     LD   A,L   
2DD8   B4                     OR   H   
2DD9   CA 39 2E               JP   Z,expectM_2924S99   
2DDC   CD 50 0C               CALL   printStr   
2DDF   43 6F 64 65 3A 20 3A 7B 32 7D 5E 00 .CSTR   "Code: ",":{2}^"   
2DEB   CD 50 0C               CALL   printStr   
2DEE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DFD   21 02 00               LD   hl,2   
2E00   E5                     PUSH   hl   
2E01   E5                     PUSH   hl   
2E02   CD 55 0D               CALL   run   
2E05   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E0D   CD C6 0B               CALL   flushBuffer   
2E10   CD 50 0C               CALL   printStr   
2E13   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E20   E1                     POP   hl   
2E21   E5                     PUSH   hl   
2E22   E5                     PUSH   hl   
2E23   CD 55 0D               CALL   run   
2E26   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E35   CD C6 0B               CALL   flushBuffer   
2E38   76                     HALT      
2E39                EXPECTM_2924S99:      
2E39   E1                     POP   HL   
2E3A                          ;*Macro unroll:  test ":a{2}^", 2
2E3A   31 00 4E               LD   SP,STACK   
2E3D   CD 84 0C               CALL   coldInit   
2E40   CD AF 4C               CALL   execStr   
2E43   3A 61 7B 32 7D 5E 00   DB   ":a{2}^",0   
2E4A   CD C6 0B               CALL   flushBuffer   
2E4D   E1                     POP   HL   
2E4E   E5                     PUSH   HL   
2E4F   11 02 00               LD   DE,2   
2E52   B7                     OR   A   
2E53   ED 52                  SBC   HL,DE   
2E55   7D                     LD   A,L   
2E56   B4                     OR   H   
2E57   CA B8 2E               JP   Z,expectM_2925S100   
2E5A   CD 50 0C               CALL   printStr   
2E5D   43 6F 64 65 3A 20 3A 61 7B 32 7D 5E 00 .CSTR   "Code: ",":a{2}^"   
2E6A   CD 50 0C               CALL   printStr   
2E6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E7C   21 02 00               LD   hl,2   
2E7F   E5                     PUSH   hl   
2E80   E5                     PUSH   hl   
2E81   CD 55 0D               CALL   run   
2E84   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E8C   CD C6 0B               CALL   flushBuffer   
2E8F   CD 50 0C               CALL   printStr   
2E92   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E9F   E1                     POP   hl   
2EA0   E5                     PUSH   hl   
2EA1   E5                     PUSH   hl   
2EA2   CD 55 0D               CALL   run   
2EA5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EB4   CD C6 0B               CALL   flushBuffer   
2EB7   76                     HALT      
2EB8                EXPECTM_2925S100:      
2EB8   E1                     POP   HL   
2EB9                          ;*Macro unroll:  test "5 :a{%a}^", 5
2EB9   31 00 4E               LD   SP,STACK   
2EBC   CD 84 0C               CALL   coldInit   
2EBF   CD AF 4C               CALL   execStr   
2EC2   35 20 3A 61 7B 25 61 7D 5E 00 DB   "5 :a{%a}^",0   
2ECC   CD C6 0B               CALL   flushBuffer   
2ECF   E1                     POP   HL   
2ED0   E5                     PUSH   HL   
2ED1   11 05 00               LD   DE,5   
2ED4   B7                     OR   A   
2ED5   ED 52                  SBC   HL,DE   
2ED7   7D                     LD   A,L   
2ED8   B4                     OR   H   
2ED9   CA 3D 2F               JP   Z,expectM_2926S101   
2EDC   CD 50 0C               CALL   printStr   
2EDF   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 :a{%a}^"   
2EEF   CD 50 0C               CALL   printStr   
2EF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F01   21 05 00               LD   hl,5   
2F04   E5                     PUSH   hl   
2F05   E5                     PUSH   hl   
2F06   CD 55 0D               CALL   run   
2F09   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F11   CD C6 0B               CALL   flushBuffer   
2F14   CD 50 0C               CALL   printStr   
2F17   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F24   E1                     POP   hl   
2F25   E5                     PUSH   hl   
2F26   E5                     PUSH   hl   
2F27   CD 55 0D               CALL   run   
2F2A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F39   CD C6 0B               CALL   flushBuffer   
2F3C   76                     HALT      
2F3D                EXPECTM_2926S101:      
2F3D   E1                     POP   HL   
2F3E                          ;*Macro unroll:  test "5 :a:b{%a}^", 5
2F3E   31 00 4E               LD   SP,STACK   
2F41   CD 84 0C               CALL   coldInit   
2F44   CD AF 4C               CALL   execStr   
2F47   35 20 3A 61 3A 62 7B 25 61 7D 5E 00 DB   "5 :a:b{%a}^",0   
2F53   CD C6 0B               CALL   flushBuffer   
2F56   E1                     POP   HL   
2F57   E5                     PUSH   HL   
2F58   11 05 00               LD   DE,5   
2F5B   B7                     OR   A   
2F5C   ED 52                  SBC   HL,DE   
2F5E   7D                     LD   A,L   
2F5F   B4                     OR   H   
2F60   CA C6 2F               JP   Z,expectM_2927S102   
2F63   CD 50 0C               CALL   printStr   
2F66   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 :a:b{%a}^"   
2F78   CD 50 0C               CALL   printStr   
2F7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F8A   21 05 00               LD   hl,5   
2F8D   E5                     PUSH   hl   
2F8E   E5                     PUSH   hl   
2F8F   CD 55 0D               CALL   run   
2F92   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F9A   CD C6 0B               CALL   flushBuffer   
2F9D   CD 50 0C               CALL   printStr   
2FA0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FAD   E1                     POP   hl   
2FAE   E5                     PUSH   hl   
2FAF   E5                     PUSH   hl   
2FB0   CD 55 0D               CALL   run   
2FB3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FC2   CD C6 0B               CALL   flushBuffer   
2FC5   76                     HALT      
2FC6                EXPECTM_2927S102:      
2FC6   E1                     POP   HL   
2FC7                          ;*Macro unroll:  test ":a{{2}^}^", 2
2FC7   31 00 4E               LD   SP,STACK   
2FCA   CD 84 0C               CALL   coldInit   
2FCD   CD AF 4C               CALL   execStr   
2FD0   3A 61 7B 7B 32 7D 5E 7D 5E 00 DB   ":a{{2}^}^",0   
2FDA   CD C6 0B               CALL   flushBuffer   
2FDD   E1                     POP   HL   
2FDE   E5                     PUSH   HL   
2FDF   11 02 00               LD   DE,2   
2FE2   B7                     OR   A   
2FE3   ED 52                  SBC   HL,DE   
2FE5   7D                     LD   A,L   
2FE6   B4                     OR   H   
2FE7   CA 4B 30               JP   Z,expectM_2928S103   
2FEA   CD 50 0C               CALL   printStr   
2FED   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ",":a{{2}^}^"   
2FFD   CD 50 0C               CALL   printStr   
3000   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
300F   21 02 00               LD   hl,2   
3012   E5                     PUSH   hl   
3013   E5                     PUSH   hl   
3014   CD 55 0D               CALL   run   
3017   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
301F   CD C6 0B               CALL   flushBuffer   
3022   CD 50 0C               CALL   printStr   
3025   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3032   E1                     POP   hl   
3033   E5                     PUSH   hl   
3034   E5                     PUSH   hl   
3035   CD 55 0D               CALL   run   
3038   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3047   CD C6 0B               CALL   flushBuffer   
304A   76                     HALT      
304B                EXPECTM_2928S103:      
304B   E1                     POP   HL   
304C                          ;*Macro unroll:  test "1 5 :a{{%a}^}^", 5
304C   31 00 4E               LD   SP,STACK   
304F   CD 84 0C               CALL   coldInit   
3052   CD AF 4C               CALL   execStr   
3055   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 :a{{%a}^}^",0   
3064   CD C6 0B               CALL   flushBuffer   
3067   E1                     POP   HL   
3068   E5                     PUSH   HL   
3069   11 05 00               LD   DE,5   
306C   B7                     OR   A   
306D   ED 52                  SBC   HL,DE   
306F   7D                     LD   A,L   
3070   B4                     OR   H   
3071   CA DA 30               JP   Z,expectM_2929S104   
3074   CD 50 0C               CALL   printStr   
3077   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^}^"   
308C   CD 50 0C               CALL   printStr   
308F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
309E   21 05 00               LD   hl,5   
30A1   E5                     PUSH   hl   
30A2   E5                     PUSH   hl   
30A3   CD 55 0D               CALL   run   
30A6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30AE   CD C6 0B               CALL   flushBuffer   
30B1   CD 50 0C               CALL   printStr   
30B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30C1   E1                     POP   hl   
30C2   E5                     PUSH   hl   
30C3   E5                     PUSH   hl   
30C4   CD 55 0D               CALL   run   
30C7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30D6   CD C6 0B               CALL   flushBuffer   
30D9   76                     HALT      
30DA                EXPECTM_2929S104:      
30DA   E1                     POP   HL   
30DB                          ;*Macro unroll:  test "1 5 :ab{{%a}^}^", 1
30DB   31 00 4E               LD   SP,STACK   
30DE   CD 84 0C               CALL   coldInit   
30E1   CD AF 4C               CALL   execStr   
30E4   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 :ab{{%a}^}^",0   
30F4   CD C6 0B               CALL   flushBuffer   
30F7   E1                     POP   HL   
30F8   E5                     PUSH   HL   
30F9   11 01 00               LD   DE,1   
30FC   B7                     OR   A   
30FD   ED 52                  SBC   HL,DE   
30FF   7D                     LD   A,L   
3100   B4                     OR   H   
3101   CA 6B 31               JP   Z,expectM_2930S105   
3104   CD 50 0C               CALL   printStr   
3107   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^}^"   
311D   CD 50 0C               CALL   printStr   
3120   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
312F   21 01 00               LD   hl,1   
3132   E5                     PUSH   hl   
3133   E5                     PUSH   hl   
3134   CD 55 0D               CALL   run   
3137   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
313F   CD C6 0B               CALL   flushBuffer   
3142   CD 50 0C               CALL   printStr   
3145   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3152   E1                     POP   hl   
3153   E5                     PUSH   hl   
3154   E5                     PUSH   hl   
3155   CD 55 0D               CALL   run   
3158   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3167   CD C6 0B               CALL   flushBuffer   
316A   76                     HALT      
316B                EXPECTM_2930S105:      
316B   E1                     POP   HL   
316C                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^}^", 7
316C   31 00 4E               LD   SP,STACK   
316F   CD 84 0C               CALL   coldInit   
3172   CD AF 4C               CALL   execStr   
3175   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 :a{{%a 2 +}^}^",0   
3188   CD C6 0B               CALL   flushBuffer   
318B   E1                     POP   HL   
318C   E5                     PUSH   HL   
318D   11 07 00               LD   DE,7   
3190   B7                     OR   A   
3191   ED 52                  SBC   HL,DE   
3193   7D                     LD   A,L   
3194   B4                     OR   H   
3195   CA 02 32               JP   Z,expectM_2931S106   
3198   CD 50 0C               CALL   printStr   
319B   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^}^"   
31B4   CD 50 0C               CALL   printStr   
31B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31C6   21 07 00               LD   hl,7   
31C9   E5                     PUSH   hl   
31CA   E5                     PUSH   hl   
31CB   CD 55 0D               CALL   run   
31CE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31D6   CD C6 0B               CALL   flushBuffer   
31D9   CD 50 0C               CALL   printStr   
31DC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31E9   E1                     POP   hl   
31EA   E5                     PUSH   hl   
31EB   E5                     PUSH   hl   
31EC   CD 55 0D               CALL   run   
31EF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31FE   CD C6 0B               CALL   flushBuffer   
3201   76                     HALT      
3202                EXPECTM_2931S106:      
3202   E1                     POP   HL   
3203                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^}^", 6
3203   31 00 4E               LD   SP,STACK   
3206   CD 84 0C               CALL   coldInit   
3209   CD AF 4C               CALL   execStr   
320C   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 :ab{{%a %b +}^}^",0   
3221   CD C6 0B               CALL   flushBuffer   
3224   E1                     POP   HL   
3225   E5                     PUSH   HL   
3226   11 06 00               LD   DE,6   
3229   B7                     OR   A   
322A   ED 52                  SBC   HL,DE   
322C   7D                     LD   A,L   
322D   B4                     OR   H   
322E   CA 9D 32               JP   Z,expectM_2932S107   
3231   CD 50 0C               CALL   printStr   
3234   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^}^"   
324F   CD 50 0C               CALL   printStr   
3252   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3261   21 06 00               LD   hl,6   
3264   E5                     PUSH   hl   
3265   E5                     PUSH   hl   
3266   CD 55 0D               CALL   run   
3269   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3271   CD C6 0B               CALL   flushBuffer   
3274   CD 50 0C               CALL   printStr   
3277   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3284   E1                     POP   hl   
3285   E5                     PUSH   hl   
3286   E5                     PUSH   hl   
3287   CD 55 0D               CALL   run   
328A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3299   CD C6 0B               CALL   flushBuffer   
329C   76                     HALT      
329D                EXPECTM_2932S107:      
329D   E1                     POP   HL   
329E                          ;*Macro unroll:  test ":a{2} x= 1 x^", 2
329E   31 00 4E               LD   SP,STACK   
32A1   CD 84 0C               CALL   coldInit   
32A4   CD AF 4C               CALL   execStr   
32A7   3A 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   ":a{2} x= 1 x^",0   
32B5   CD C6 0B               CALL   flushBuffer   
32B8   E1                     POP   HL   
32B9   E5                     PUSH   HL   
32BA   11 02 00               LD   DE,2   
32BD   B7                     OR   A   
32BE   ED 52                  SBC   HL,DE   
32C0   7D                     LD   A,L   
32C1   B4                     OR   H   
32C2   CA 2A 33               JP   Z,expectM_2933S108   
32C5   CD 50 0C               CALL   printStr   
32C8   43 6F 64 65 3A 20 3A 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2} x= 1 x^"   
32DC   CD 50 0C               CALL   printStr   
32DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32EE   21 02 00               LD   hl,2   
32F1   E5                     PUSH   hl   
32F2   E5                     PUSH   hl   
32F3   CD 55 0D               CALL   run   
32F6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32FE   CD C6 0B               CALL   flushBuffer   
3301   CD 50 0C               CALL   printStr   
3304   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3311   E1                     POP   hl   
3312   E5                     PUSH   hl   
3313   E5                     PUSH   hl   
3314   CD 55 0D               CALL   run   
3317   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3326   CD C6 0B               CALL   flushBuffer   
3329   76                     HALT      
332A                EXPECTM_2933S108:      
332A   E1                     POP   HL   
332B                          ;*Macro unroll:  test ":a{%a} x= 0 1 x^", 1
332B   31 00 4E               LD   SP,STACK   
332E   CD 84 0C               CALL   coldInit   
3331   CD AF 4C               CALL   execStr   
3334   3A 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a} x= 0 1 x^",0   
3345   CD C6 0B               CALL   flushBuffer   
3348   E1                     POP   HL   
3349   E5                     PUSH   HL   
334A   11 01 00               LD   DE,1   
334D   B7                     OR   A   
334E   ED 52                  SBC   HL,DE   
3350   7D                     LD   A,L   
3351   B4                     OR   H   
3352   CA BD 33               JP   Z,expectM_2934S109   
3355   CD 50 0C               CALL   printStr   
3358   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a} x= 0 1 x^"   
336F   CD 50 0C               CALL   printStr   
3372   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3381   21 01 00               LD   hl,1   
3384   E5                     PUSH   hl   
3385   E5                     PUSH   hl   
3386   CD 55 0D               CALL   run   
3389   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3391   CD C6 0B               CALL   flushBuffer   
3394   CD 50 0C               CALL   printStr   
3397   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33A4   E1                     POP   hl   
33A5   E5                     PUSH   hl   
33A6   E5                     PUSH   hl   
33A7   CD 55 0D               CALL   run   
33AA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33B9   CD C6 0B               CALL   flushBuffer   
33BC   76                     HALT      
33BD                EXPECTM_2934S109:      
33BD   E1                     POP   HL   
33BE                          ;*Macro unroll:  test ":ab{%b} x= 1 2 x^", 2
33BE   31 00 4E               LD   SP,STACK   
33C1   CD 84 0C               CALL   coldInit   
33C4   CD AF 4C               CALL   execStr   
33C7   3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b} x= 1 2 x^",0   
33D9   CD C6 0B               CALL   flushBuffer   
33DC   E1                     POP   HL   
33DD   E5                     PUSH   HL   
33DE   11 02 00               LD   DE,2   
33E1   B7                     OR   A   
33E2   ED 52                  SBC   HL,DE   
33E4   7D                     LD   A,L   
33E5   B4                     OR   H   
33E6   CA 52 34               JP   Z,expectM_2935S110   
33E9   CD 50 0C               CALL   printStr   
33EC   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b} x= 1 2 x^"   
3404   CD 50 0C               CALL   printStr   
3407   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3416   21 02 00               LD   hl,2   
3419   E5                     PUSH   hl   
341A   E5                     PUSH   hl   
341B   CD 55 0D               CALL   run   
341E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3426   CD C6 0B               CALL   flushBuffer   
3429   CD 50 0C               CALL   printStr   
342C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3439   E1                     POP   hl   
343A   E5                     PUSH   hl   
343B   E5                     PUSH   hl   
343C   CD 55 0D               CALL   run   
343F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
344E   CD C6 0B               CALL   flushBuffer   
3451   76                     HALT      
3452                EXPECTM_2935S110:      
3452   E1                     POP   HL   
3453                          ;*Macro unroll:  test ":a:b{%a} x= 1 2 x^", 2
3453   31 00 4E               LD   SP,STACK   
3456   CD 84 0C               CALL   coldInit   
3459   CD AF 4C               CALL   execStr   
345C   3A 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a} x= 1 2 x^",0   
346F   CD C6 0B               CALL   flushBuffer   
3472   E1                     POP   HL   
3473   E5                     PUSH   HL   
3474   11 02 00               LD   DE,2   
3477   B7                     OR   A   
3478   ED 52                  SBC   HL,DE   
347A   7D                     LD   A,L   
347B   B4                     OR   H   
347C   CA E9 34               JP   Z,expectM_2936S111   
347F   CD 50 0C               CALL   printStr   
3482   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a} x= 1 2 x^"   
349B   CD 50 0C               CALL   printStr   
349E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34AD   21 02 00               LD   hl,2   
34B0   E5                     PUSH   hl   
34B1   E5                     PUSH   hl   
34B2   CD 55 0D               CALL   run   
34B5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34BD   CD C6 0B               CALL   flushBuffer   
34C0   CD 50 0C               CALL   printStr   
34C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34D0   E1                     POP   hl   
34D1   E5                     PUSH   hl   
34D2   E5                     PUSH   hl   
34D3   CD 55 0D               CALL   run   
34D6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34E5   CD C6 0B               CALL   flushBuffer   
34E8   76                     HALT      
34E9                EXPECTM_2936S111:      
34E9   E1                     POP   HL   
34EA                          ;*Macro unroll:  test ":ab{%b} x= 1 2 x^", 2
34EA   31 00 4E               LD   SP,STACK   
34ED   CD 84 0C               CALL   coldInit   
34F0   CD AF 4C               CALL   execStr   
34F3   3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b} x= 1 2 x^",0   
3505   CD C6 0B               CALL   flushBuffer   
3508   E1                     POP   HL   
3509   E5                     PUSH   HL   
350A   11 02 00               LD   DE,2   
350D   B7                     OR   A   
350E   ED 52                  SBC   HL,DE   
3510   7D                     LD   A,L   
3511   B4                     OR   H   
3512   CA 7E 35               JP   Z,expectM_2937S112   
3515   CD 50 0C               CALL   printStr   
3518   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b} x= 1 2 x^"   
3530   CD 50 0C               CALL   printStr   
3533   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3542   21 02 00               LD   hl,2   
3545   E5                     PUSH   hl   
3546   E5                     PUSH   hl   
3547   CD 55 0D               CALL   run   
354A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3552   CD C6 0B               CALL   flushBuffer   
3555   CD 50 0C               CALL   printStr   
3558   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3565   E1                     POP   hl   
3566   E5                     PUSH   hl   
3567   E5                     PUSH   hl   
3568   CD 55 0D               CALL   run   
356B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
357A   CD C6 0B               CALL   flushBuffer   
357D   76                     HALT      
357E                EXPECTM_2937S112:      
357E   E1                     POP   HL   
357F                          ;*Macro unroll:  test ":ab{%b %a} x= 10 15 x^ -", 5
357F   31 00 4E               LD   SP,STACK   
3582   CD 84 0C               CALL   coldInit   
3585   CD AF 4C               CALL   execStr   
3588   3A 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a} x= 10 15 x^ -",0   
35A1   CD C6 0B               CALL   flushBuffer   
35A4   E1                     POP   HL   
35A5   E5                     PUSH   HL   
35A6   11 05 00               LD   DE,5   
35A9   B7                     OR   A   
35AA   ED 52                  SBC   HL,DE   
35AC   7D                     LD   A,L   
35AD   B4                     OR   H   
35AE   CA 21 36               JP   Z,expectM_2938S113   
35B1   CD 50 0C               CALL   printStr   
35B4   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a} x= 10 15 x^ -"   
35D3   CD 50 0C               CALL   printStr   
35D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35E5   21 05 00               LD   hl,5   
35E8   E5                     PUSH   hl   
35E9   E5                     PUSH   hl   
35EA   CD 55 0D               CALL   run   
35ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35F5   CD C6 0B               CALL   flushBuffer   
35F8   CD 50 0C               CALL   printStr   
35FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3608   E1                     POP   hl   
3609   E5                     PUSH   hl   
360A   E5                     PUSH   hl   
360B   CD 55 0D               CALL   run   
360E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
361D   CD C6 0B               CALL   flushBuffer   
3620   76                     HALT      
3621                EXPECTM_2938S113:      
3621   E1                     POP   HL   
3622                          ;*Macro unroll:  test ":a:b{2} x= 1 x^", 2
3622   31 00 4E               LD   SP,STACK   
3625   CD 84 0C               CALL   coldInit   
3628   CD AF 4C               CALL   execStr   
362B   3A 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2} x= 1 x^",0   
363B   CD C6 0B               CALL   flushBuffer   
363E   E1                     POP   HL   
363F   E5                     PUSH   HL   
3640   11 02 00               LD   DE,2   
3643   B7                     OR   A   
3644   ED 52                  SBC   HL,DE   
3646   7D                     LD   A,L   
3647   B4                     OR   H   
3648   CA B2 36               JP   Z,expectM_2939S114   
364B   CD 50 0C               CALL   printStr   
364E   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2} x= 1 x^"   
3664   CD 50 0C               CALL   printStr   
3667   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3676   21 02 00               LD   hl,2   
3679   E5                     PUSH   hl   
367A   E5                     PUSH   hl   
367B   CD 55 0D               CALL   run   
367E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3686   CD C6 0B               CALL   flushBuffer   
3689   CD 50 0C               CALL   printStr   
368C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3699   E1                     POP   hl   
369A   E5                     PUSH   hl   
369B   E5                     PUSH   hl   
369C   CD 55 0D               CALL   run   
369F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36AE   CD C6 0B               CALL   flushBuffer   
36B1   76                     HALT      
36B2                EXPECTM_2939S114:      
36B2   E1                     POP   HL   
36B3                          ;*Macro unroll:  test "::b{100 %b = %b} x= x^", 100
36B3   31 00 4E               LD   SP,STACK   
36B6   CD 84 0C               CALL   coldInit   
36B9   CD AF 4C               CALL   execStr   
36BC   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b} x= x^",0   
36D3   CD C6 0B               CALL   flushBuffer   
36D6   E1                     POP   HL   
36D7   E5                     PUSH   HL   
36D8   11 64 00               LD   DE,100   
36DB   B7                     OR   A   
36DC   ED 52                  SBC   HL,DE   
36DE   7D                     LD   A,L   
36DF   B4                     OR   H   
36E0   CA 51 37               JP   Z,expectM_2940S115   
36E3   CD 50 0C               CALL   printStr   
36E6   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b} x= x^"   
3703   CD 50 0C               CALL   printStr   
3706   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3715   21 64 00               LD   hl,100   
3718   E5                     PUSH   hl   
3719   E5                     PUSH   hl   
371A   CD 55 0D               CALL   run   
371D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3725   CD C6 0B               CALL   flushBuffer   
3728   CD 50 0C               CALL   printStr   
372B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3738   E1                     POP   hl   
3739   E5                     PUSH   hl   
373A   E5                     PUSH   hl   
373B   CD 55 0D               CALL   run   
373E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
374D   CD C6 0B               CALL   flushBuffer   
3750   76                     HALT      
3751                EXPECTM_2940S115:      
3751   E1                     POP   HL   
3752                          ;*Macro unroll:  test ":a:b{1 %b = %b} x= 2 x^", 1
3752   31 00 4E               LD   SP,STACK   
3755   CD 84 0C               CALL   coldInit   
3758   CD AF 4C               CALL   execStr   
375B   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b} x= 2 x^",0   
3773   CD C6 0B               CALL   flushBuffer   
3776   E1                     POP   HL   
3777   E5                     PUSH   HL   
3778   11 01 00               LD   DE,1   
377B   B7                     OR   A   
377C   ED 52                  SBC   HL,DE   
377E   7D                     LD   A,L   
377F   B4                     OR   H   
3780   CA F2 37               JP   Z,expectM_2941S116   
3783   CD 50 0C               CALL   printStr   
3786   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b} x= 2 x^"   
37A4   CD 50 0C               CALL   printStr   
37A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37B6   21 01 00               LD   hl,1   
37B9   E5                     PUSH   hl   
37BA   E5                     PUSH   hl   
37BB   CD 55 0D               CALL   run   
37BE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37C6   CD C6 0B               CALL   flushBuffer   
37C9   CD 50 0C               CALL   printStr   
37CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37D9   E1                     POP   hl   
37DA   E5                     PUSH   hl   
37DB   E5                     PUSH   hl   
37DC   CD 55 0D               CALL   run   
37DF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37EE   CD C6 0B               CALL   flushBuffer   
37F1   76                     HALT      
37F2                EXPECTM_2941S116:      
37F2   E1                     POP   HL   
37F3                          ;*Macro unroll:  test ":a:b{%a %b = %b} x= 2 x^", 2
37F3   31 00 4E               LD   SP,STACK   
37F6   CD 84 0C               CALL   coldInit   
37F9   CD AF 4C               CALL   execStr   
37FC   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b} x= 2 x^",0   
3815   CD C6 0B               CALL   flushBuffer   
3818   E1                     POP   HL   
3819   E5                     PUSH   HL   
381A   11 02 00               LD   DE,2   
381D   B7                     OR   A   
381E   ED 52                  SBC   HL,DE   
3820   7D                     LD   A,L   
3821   B4                     OR   H   
3822   CA 95 38               JP   Z,expectM_2942S117   
3825   CD 50 0C               CALL   printStr   
3828   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b} x= 2 x^"   
3847   CD 50 0C               CALL   printStr   
384A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3859   21 02 00               LD   hl,2   
385C   E5                     PUSH   hl   
385D   E5                     PUSH   hl   
385E   CD 55 0D               CALL   run   
3861   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3869   CD C6 0B               CALL   flushBuffer   
386C   CD 50 0C               CALL   printStr   
386F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
387C   E1                     POP   hl   
387D   E5                     PUSH   hl   
387E   E5                     PUSH   hl   
387F   CD 55 0D               CALL   run   
3882   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3891   CD C6 0B               CALL   flushBuffer   
3894   76                     HALT      
3895                EXPECTM_2942S117:      
3895   E1                     POP   HL   
3896                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??}^ +", 11
3896   31 00 4E               LD   SP,STACK   
3899   CD 84 0C               CALL   coldInit   
389C   CD AF 4C               CALL   execStr   
389F   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??}^ +",0   
38BD   CD C6 0B               CALL   flushBuffer   
38C0   E1                     POP   HL   
38C1   E5                     PUSH   HL   
38C2   11 0B 00               LD   DE,11   
38C5   B7                     OR   A   
38C6   ED 52                  SBC   HL,DE   
38C8   7D                     LD   A,L   
38C9   B4                     OR   H   
38CA   CA 42 39               JP   Z,expectM_2943S118   
38CD   CD 50 0C               CALL   printStr   
38D0   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??}^ +"   
38F4   CD 50 0C               CALL   printStr   
38F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3906   21 0B 00               LD   hl,11   
3909   E5                     PUSH   hl   
390A   E5                     PUSH   hl   
390B   CD 55 0D               CALL   run   
390E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3916   CD C6 0B               CALL   flushBuffer   
3919   CD 50 0C               CALL   printStr   
391C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3929   E1                     POP   hl   
392A   E5                     PUSH   hl   
392B   E5                     PUSH   hl   
392C   CD 55 0D               CALL   run   
392F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
393E   CD C6 0B               CALL   flushBuffer   
3941   76                     HALT      
3942                EXPECTM_2943S118:      
3942   E1                     POP   HL   
3943                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??}^ +", 21
3943   31 00 4E               LD   SP,STACK   
3946   CD 84 0C               CALL   coldInit   
3949   CD AF 4C               CALL   execStr   
394C   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??}^ +",0   
396A   CD C6 0B               CALL   flushBuffer   
396D   E1                     POP   HL   
396E   E5                     PUSH   HL   
396F   11 15 00               LD   DE,21   
3972   B7                     OR   A   
3973   ED 52                  SBC   HL,DE   
3975   7D                     LD   A,L   
3976   B4                     OR   H   
3977   CA EF 39               JP   Z,expectM_2944S119   
397A   CD 50 0C               CALL   printStr   
397D   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??}^ +"   
39A1   CD 50 0C               CALL   printStr   
39A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39B3   21 15 00               LD   hl,21   
39B6   E5                     PUSH   hl   
39B7   E5                     PUSH   hl   
39B8   CD 55 0D               CALL   run   
39BB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
39C3   CD C6 0B               CALL   flushBuffer   
39C6   CD 50 0C               CALL   printStr   
39C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39D6   E1                     POP   hl   
39D7   E5                     PUSH   hl   
39D8   E5                     PUSH   hl   
39D9   CD 55 0D               CALL   run   
39DC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39EB   CD C6 0B               CALL   flushBuffer   
39EE   76                     HALT      
39EF                EXPECTM_2944S119:      
39EF   E1                     POP   HL   
39F0                          ;*Macro unroll:  test "[10 20 30] 1#", 20
39F0   31 00 4E               LD   SP,STACK   
39F3   CD 84 0C               CALL   coldInit   
39F6   CD AF 4C               CALL   execStr   
39F9   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3A07   CD C6 0B               CALL   flushBuffer   
3A0A   E1                     POP   HL   
3A0B   E5                     PUSH   HL   
3A0C   11 14 00               LD   DE,20   
3A0F   B7                     OR   A   
3A10   ED 52                  SBC   HL,DE   
3A12   7D                     LD   A,L   
3A13   B4                     OR   H   
3A14   CA 7C 3A               JP   Z,expectM_2945S120   
3A17   CD 50 0C               CALL   printStr   
3A1A   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3A2E   CD 50 0C               CALL   printStr   
3A31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A40   21 14 00               LD   hl,20   
3A43   E5                     PUSH   hl   
3A44   E5                     PUSH   hl   
3A45   CD 55 0D               CALL   run   
3A48   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A50   CD C6 0B               CALL   flushBuffer   
3A53   CD 50 0C               CALL   printStr   
3A56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A63   E1                     POP   hl   
3A64   E5                     PUSH   hl   
3A65   E5                     PUSH   hl   
3A66   CD 55 0D               CALL   run   
3A69   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A78   CD C6 0B               CALL   flushBuffer   
3A7B   76                     HALT      
3A7C                EXPECTM_2945S120:      
3A7C   E1                     POP   HL   
3A7D                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
3A7D   31 00 4E               LD   SP,STACK   
3A80   CD 84 0C               CALL   coldInit   
3A83   CD AF 4C               CALL   execStr   
3A86   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
3A98   CD C6 0B               CALL   flushBuffer   
3A9B   E1                     POP   HL   
3A9C   E5                     PUSH   HL   
3A9D   11 04 00               LD   DE,4   
3AA0   B7                     OR   A   
3AA1   ED 52                  SBC   HL,DE   
3AA3   7D                     LD   A,L   
3AA4   B4                     OR   H   
3AA5   CA 11 3B               JP   Z,expectM_2946S121   
3AA8   CD 50 0C               CALL   printStr   
3AAB   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
3AC3   CD 50 0C               CALL   printStr   
3AC6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AD5   21 04 00               LD   hl,4   
3AD8   E5                     PUSH   hl   
3AD9   E5                     PUSH   hl   
3ADA   CD 55 0D               CALL   run   
3ADD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AE5   CD C6 0B               CALL   flushBuffer   
3AE8   CD 50 0C               CALL   printStr   
3AEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AF8   E1                     POP   hl   
3AF9   E5                     PUSH   hl   
3AFA   E5                     PUSH   hl   
3AFB   CD 55 0D               CALL   run   
3AFE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B0D   CD C6 0B               CALL   flushBuffer   
3B10   76                     HALT      
3B11                EXPECTM_2946S121:      
3B11   E1                     POP   HL   
3B12                          ;*Macro unroll:  test "/b [1 2 3] 1#", 2
3B12   31 00 4E               LD   SP,STACK   
3B15   CD 84 0C               CALL   coldInit   
3B18   CD AF 4C               CALL   execStr   
3B1B   2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/b [1 2 3] 1#",0   
3B29   CD C6 0B               CALL   flushBuffer   
3B2C   E1                     POP   HL   
3B2D   E5                     PUSH   HL   
3B2E   11 02 00               LD   DE,2   
3B31   B7                     OR   A   
3B32   ED 52                  SBC   HL,DE   
3B34   7D                     LD   A,L   
3B35   B4                     OR   H   
3B36   CA 9E 3B               JP   Z,expectM_2947S122   
3B39   CD 50 0C               CALL   printStr   
3B3C   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/b [1 2 3] 1#"   
3B50   CD 50 0C               CALL   printStr   
3B53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B62   21 02 00               LD   hl,2   
3B65   E5                     PUSH   hl   
3B66   E5                     PUSH   hl   
3B67   CD 55 0D               CALL   run   
3B6A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B72   CD C6 0B               CALL   flushBuffer   
3B75   CD 50 0C               CALL   printStr   
3B78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B85   E1                     POP   hl   
3B86   E5                     PUSH   hl   
3B87   E5                     PUSH   hl   
3B88   CD 55 0D               CALL   run   
3B8B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B9A   CD C6 0B               CALL   flushBuffer   
3B9D   76                     HALT      
3B9E                EXPECTM_2947S122:      
3B9E   E1                     POP   HL   
3B9F                          ;*Macro unroll:  test "/b ['A' 'B' 'C'] 1#", 66
3B9F   31 00 4E               LD   SP,STACK   
3BA2   CD 84 0C               CALL   coldInit   
3BA5   CD AF 4C               CALL   execStr   
3BA8   2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/b ['A' 'B' 'C'] 1#",0   
3BBC   CD C6 0B               CALL   flushBuffer   
3BBF   E1                     POP   HL   
3BC0   E5                     PUSH   HL   
3BC1   11 42 00               LD   DE,66   
3BC4   B7                     OR   A   
3BC5   ED 52                  SBC   HL,DE   
3BC7   7D                     LD   A,L   
3BC8   B4                     OR   H   
3BC9   CA 37 3C               JP   Z,expectM_2948S123   
3BCC   CD 50 0C               CALL   printStr   
3BCF   43 6F 64 65 3A 20 2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/b ['A' 'B' 'C'] 1#"   
3BE9   CD 50 0C               CALL   printStr   
3BEC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BFB   21 42 00               LD   hl,66   
3BFE   E5                     PUSH   hl   
3BFF   E5                     PUSH   hl   
3C00   CD 55 0D               CALL   run   
3C03   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C0B   CD C6 0B               CALL   flushBuffer   
3C0E   CD 50 0C               CALL   printStr   
3C11   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C1E   E1                     POP   hl   
3C1F   E5                     PUSH   hl   
3C20   E5                     PUSH   hl   
3C21   CD 55 0D               CALL   run   
3C24   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C33   CD C6 0B               CALL   flushBuffer   
3C36   76                     HALT      
3C37                EXPECTM_2948S123:      
3C37   E1                     POP   HL   
3C38                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3C38   31 00 4E               LD   SP,STACK   
3C3B   CD 84 0C               CALL   coldInit   
3C3E   CD AF 4C               CALL   execStr   
3C41   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3C55   CD C6 0B               CALL   flushBuffer   
3C58   E1                     POP   HL   
3C59   E5                     PUSH   HL   
3C5A   11 0A 00               LD   DE,10   
3C5D   B7                     OR   A   
3C5E   ED 52                  SBC   HL,DE   
3C60   7D                     LD   A,L   
3C61   B4                     OR   H   
3C62   CA D0 3C               JP   Z,expectM_2949S124   
3C65   CD 50 0C               CALL   printStr   
3C68   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3C82   CD 50 0C               CALL   printStr   
3C85   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C94   21 0A 00               LD   hl,10   
3C97   E5                     PUSH   hl   
3C98   E5                     PUSH   hl   
3C99   CD 55 0D               CALL   run   
3C9C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CA4   CD C6 0B               CALL   flushBuffer   
3CA7   CD 50 0C               CALL   printStr   
3CAA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CB7   E1                     POP   hl   
3CB8   E5                     PUSH   hl   
3CB9   E5                     PUSH   hl   
3CBA   CD 55 0D               CALL   run   
3CBD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CCC   CD C6 0B               CALL   flushBuffer   
3CCF   76                     HALT      
3CD0                EXPECTM_2949S124:      
3CD0   E1                     POP   HL   
3CD1                          ;*Macro unroll:  test "10 20 :ab{[{%a}{%b}] 0#^}^", 10
3CD1   31 00 4E               LD   SP,STACK   
3CD4   CD 84 0C               CALL   coldInit   
3CD7   CD AF 4C               CALL   execStr   
3CDA   31 30 20 32 30 20 3A 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 :ab{[{%a}{%b}] 0#^}^",0   
3CF5   CD C6 0B               CALL   flushBuffer   
3CF8   E1                     POP   HL   
3CF9   E5                     PUSH   HL   
3CFA   11 0A 00               LD   DE,10   
3CFD   B7                     OR   A   
3CFE   ED 52                  SBC   HL,DE   
3D00   7D                     LD   A,L   
3D01   B4                     OR   H   
3D02   CA 77 3D               JP   Z,expectM_2950S125   
3D05   CD 50 0C               CALL   printStr   
3D08   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 :ab{[{%a}{%b}] 0#^}^"   
3D29   CD 50 0C               CALL   printStr   
3D2C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D3B   21 0A 00               LD   hl,10   
3D3E   E5                     PUSH   hl   
3D3F   E5                     PUSH   hl   
3D40   CD 55 0D               CALL   run   
3D43   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D4B   CD C6 0B               CALL   flushBuffer   
3D4E   CD 50 0C               CALL   printStr   
3D51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D5E   E1                     POP   hl   
3D5F   E5                     PUSH   hl   
3D60   E5                     PUSH   hl   
3D61   CD 55 0D               CALL   run   
3D64   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D73   CD C6 0B               CALL   flushBuffer   
3D76   76                     HALT      
3D77                EXPECTM_2950S125:      
3D77   E1                     POP   HL   
3D78                          ;*Macro unroll:  test "0 10 20 :iab{[{%a}{%b}] %i#^}^", 10
3D78   31 00 4E               LD   SP,STACK   
3D7B   CD 84 0C               CALL   coldInit   
3D7E   CD AF 4C               CALL   execStr   
3D81   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 :iab{[{%a}{%b}] %i#^}^",0   
3DA0   CD C6 0B               CALL   flushBuffer   
3DA3   E1                     POP   HL   
3DA4   E5                     PUSH   HL   
3DA5   11 0A 00               LD   DE,10   
3DA8   B7                     OR   A   
3DA9   ED 52                  SBC   HL,DE   
3DAB   7D                     LD   A,L   
3DAC   B4                     OR   H   
3DAD   CA 26 3E               JP   Z,expectM_2951S126   
3DB0   CD 50 0C               CALL   printStr   
3DB3   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{%a}{%b}] %i#^}^"   
3DD8   CD 50 0C               CALL   printStr   
3DDB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DEA   21 0A 00               LD   hl,10   
3DED   E5                     PUSH   hl   
3DEE   E5                     PUSH   hl   
3DEF   CD 55 0D               CALL   run   
3DF2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DFA   CD C6 0B               CALL   flushBuffer   
3DFD   CD 50 0C               CALL   printStr   
3E00   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E0D   E1                     POP   hl   
3E0E   E5                     PUSH   hl   
3E0F   E5                     PUSH   hl   
3E10   CD 55 0D               CALL   run   
3E13   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E22   CD C6 0B               CALL   flushBuffer   
3E25   76                     HALT      
3E26                EXPECTM_2951S126:      
3E26   E1                     POP   HL   
3E27                          ;*Macro unroll:  test "1 10 20 :iab{[{%a}{%b}] %i#^}^", 20
3E27   31 00 4E               LD   SP,STACK   
3E2A   CD 84 0C               CALL   coldInit   
3E2D   CD AF 4C               CALL   execStr   
3E30   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 :iab{[{%a}{%b}] %i#^}^",0   
3E4F   CD C6 0B               CALL   flushBuffer   
3E52   E1                     POP   HL   
3E53   E5                     PUSH   HL   
3E54   11 14 00               LD   DE,20   
3E57   B7                     OR   A   
3E58   ED 52                  SBC   HL,DE   
3E5A   7D                     LD   A,L   
3E5B   B4                     OR   H   
3E5C   CA D5 3E               JP   Z,expectM_2952S127   
3E5F   CD 50 0C               CALL   printStr   
3E62   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{%a}{%b}] %i#^}^"   
3E87   CD 50 0C               CALL   printStr   
3E8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E99   21 14 00               LD   hl,20   
3E9C   E5                     PUSH   hl   
3E9D   E5                     PUSH   hl   
3E9E   CD 55 0D               CALL   run   
3EA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3EA9   CD C6 0B               CALL   flushBuffer   
3EAC   CD 50 0C               CALL   printStr   
3EAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EBC   E1                     POP   hl   
3EBD   E5                     PUSH   hl   
3EBE   E5                     PUSH   hl   
3EBF   CD 55 0D               CALL   run   
3EC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3ED1   CD C6 0B               CALL   flushBuffer   
3ED4   76                     HALT      
3ED5                EXPECTM_2952S127:      
3ED5   E1                     POP   HL   
3ED6                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3ED6   31 00 4E               LD   SP,STACK   
3ED9   CD 84 0C               CALL   coldInit   
3EDC   CD AF 4C               CALL   execStr   
3EDF   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3EF7   CD C6 0B               CALL   flushBuffer   
3EFA   E1                     POP   HL   
3EFB   E5                     PUSH   HL   
3EFC   11 06 00               LD   DE,6   
3EFF   B7                     OR   A   
3F00   ED 52                  SBC   HL,DE   
3F02   7D                     LD   A,L   
3F03   B4                     OR   H   
3F04   CA 76 3F               JP   Z,expectM_2953S128   
3F07   CD 50 0C               CALL   printStr   
3F0A   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3F28   CD 50 0C               CALL   printStr   
3F2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F3A   21 06 00               LD   hl,6   
3F3D   E5                     PUSH   hl   
3F3E   E5                     PUSH   hl   
3F3F   CD 55 0D               CALL   run   
3F42   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F4A   CD C6 0B               CALL   flushBuffer   
3F4D   CD 50 0C               CALL   printStr   
3F50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F5D   E1                     POP   hl   
3F5E   E5                     PUSH   hl   
3F5F   E5                     PUSH   hl   
3F60   CD 55 0D               CALL   run   
3F63   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F72   CD C6 0B               CALL   flushBuffer   
3F75   76                     HALT      
3F76                EXPECTM_2953S128:      
3F76   E1                     POP   HL   
3F77                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3F77   31 00 4E               LD   SP,STACK   
3F7A   CD 84 0C               CALL   coldInit   
3F7D   CD AF 4C               CALL   execStr   
3F80   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
3F9B   CD C6 0B               CALL   flushBuffer   
3F9E   E1                     POP   HL   
3F9F   E5                     PUSH   HL   
3FA0   11 02 00               LD   DE,2   
3FA3   B7                     OR   A   
3FA4   ED 52                  SBC   HL,DE   
3FA6   7D                     LD   A,L   
3FA7   B4                     OR   H   
3FA8   CA 1D 40               JP   Z,expectM_2954S129   
3FAB   CD 50 0C               CALL   printStr   
3FAE   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
3FCF   CD 50 0C               CALL   printStr   
3FD2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FE1   21 02 00               LD   hl,2   
3FE4   E5                     PUSH   hl   
3FE5   E5                     PUSH   hl   
3FE6   CD 55 0D               CALL   run   
3FE9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FF1   CD C6 0B               CALL   flushBuffer   
3FF4   CD 50 0C               CALL   printStr   
3FF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4004   E1                     POP   hl   
4005   E5                     PUSH   hl   
4006   E5                     PUSH   hl   
4007   CD 55 0D               CALL   run   
400A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4019   CD C6 0B               CALL   flushBuffer   
401C   76                     HALT      
401D                EXPECTM_2954S129:      
401D   E1                     POP   HL   
401E                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
401E   31 00 4E               LD   SP,STACK   
4021   CD 84 0C               CALL   coldInit   
4024   CD AF 4C               CALL   execStr   
4027   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
404D   CD C6 0B               CALL   flushBuffer   
4050   E1                     POP   HL   
4051   E5                     PUSH   HL   
4052   11 0A 00               LD   DE,10   
4055   B7                     OR   A   
4056   ED 52                  SBC   HL,DE   
4058   7D                     LD   A,L   
4059   B4                     OR   H   
405A   CA DA 40               JP   Z,expectM_2955S130   
405D   CD 50 0C               CALL   printStr   
4060   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
408C   CD 50 0C               CALL   printStr   
408F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
409E   21 0A 00               LD   hl,10   
40A1   E5                     PUSH   hl   
40A2   E5                     PUSH   hl   
40A3   CD 55 0D               CALL   run   
40A6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40AE   CD C6 0B               CALL   flushBuffer   
40B1   CD 50 0C               CALL   printStr   
40B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40C1   E1                     POP   hl   
40C2   E5                     PUSH   hl   
40C3   E5                     PUSH   hl   
40C4   CD 55 0D               CALL   run   
40C7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40D6   CD C6 0B               CALL   flushBuffer   
40D9   76                     HALT      
40DA                EXPECTM_2955S130:      
40DA   E1                     POP   HL   
40DB                          ;*Macro unroll:  test "3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
40DB   31 00 4E               LD   SP,STACK   
40DE   CD 84 0C               CALL   coldInit   
40E1   CD AF 4C               CALL   execStr   
40E4   33 20 3A 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
410F   CD C6 0B               CALL   flushBuffer   
4112   E1                     POP   HL   
4113   E5                     PUSH   HL   
4114   11 06 00               LD   DE,6   
4117   B7                     OR   A   
4118   ED 52                  SBC   HL,DE   
411A   7D                     LD   A,L   
411B   B4                     OR   H   
411C   CA A1 41               JP   Z,expectM_2956S131   
411F   CD 50 0C               CALL   printStr   
4122   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
4153   CD 50 0C               CALL   printStr   
4156   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4165   21 06 00               LD   hl,6   
4168   E5                     PUSH   hl   
4169   E5                     PUSH   hl   
416A   CD 55 0D               CALL   run   
416D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4175   CD C6 0B               CALL   flushBuffer   
4178   CD 50 0C               CALL   printStr   
417B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4188   E1                     POP   hl   
4189   E5                     PUSH   hl   
418A   E5                     PUSH   hl   
418B   CD 55 0D               CALL   run   
418E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
419D   CD C6 0B               CALL   flushBuffer   
41A0   76                     HALT      
41A1                EXPECTM_2956S131:      
41A1   E1                     POP   HL   
41A2                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +}^",3
41A2   31 00 4E               LD   SP,STACK   
41A5   CD 84 0C               CALL   coldInit   
41A8   CD AF 4C               CALL   execStr   
41AB   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t :f{1 %f/br 2 +}^",0   
41BF   CD C6 0B               CALL   flushBuffer   
41C2   E1                     POP   HL   
41C3   E5                     PUSH   HL   
41C4   11 03 00               LD   DE,3   
41C7   B7                     OR   A   
41C8   ED 52                  SBC   HL,DE   
41CA   7D                     LD   A,L   
41CB   B4                     OR   H   
41CC   CA 3A 42               JP   Z,expectM_2957S132   
41CF   CD 50 0C               CALL   printStr   
41D2   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +}^"   
41EC   CD 50 0C               CALL   printStr   
41EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41FE   21 03 00               LD   hl,3   
4201   E5                     PUSH   hl   
4202   E5                     PUSH   hl   
4203   CD 55 0D               CALL   run   
4206   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
420E   CD C6 0B               CALL   flushBuffer   
4211   CD 50 0C               CALL   printStr   
4214   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4221   E1                     POP   hl   
4222   E5                     PUSH   hl   
4223   E5                     PUSH   hl   
4224   CD 55 0D               CALL   run   
4227   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4236   CD C6 0B               CALL   flushBuffer   
4239   76                     HALT      
423A                EXPECTM_2957S132:      
423A   E1                     POP   HL   
423B                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +}^",1
423B   31 00 4E               LD   SP,STACK   
423E   CD 84 0C               CALL   coldInit   
4241   CD AF 4C               CALL   execStr   
4244   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f :f{1 %f/br 2 +}^",0   
4258   CD C6 0B               CALL   flushBuffer   
425B   E1                     POP   HL   
425C   E5                     PUSH   HL   
425D   11 01 00               LD   DE,1   
4260   B7                     OR   A   
4261   ED 52                  SBC   HL,DE   
4263   7D                     LD   A,L   
4264   B4                     OR   H   
4265   CA D3 42               JP   Z,expectM_2958S133   
4268   CD 50 0C               CALL   printStr   
426B   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +}^"   
4285   CD 50 0C               CALL   printStr   
4288   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4297   21 01 00               LD   hl,1   
429A   E5                     PUSH   hl   
429B   E5                     PUSH   hl   
429C   CD 55 0D               CALL   run   
429F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42A7   CD C6 0B               CALL   flushBuffer   
42AA   CD 50 0C               CALL   printStr   
42AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42BA   E1                     POP   hl   
42BB   E5                     PUSH   hl   
42BC   E5                     PUSH   hl   
42BD   CD 55 0D               CALL   run   
42C0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
42CF   CD C6 0B               CALL   flushBuffer   
42D2   76                     HALT      
42D3                EXPECTM_2958S133:      
42D3   E1                     POP   HL   
42D4                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
42D4   31 00 4E               LD   SP,STACK   
42D7   CD 84 0C               CALL   coldInit   
42DA   CD AF 4C               CALL   execStr   
42DD   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
42E9   CD C6 0B               CALL   flushBuffer   
42EC   E1                     POP   HL   
42ED   E5                     PUSH   HL   
42EE   11 00 00               LD   DE,NUL   
42F1   B7                     OR   A   
42F2   ED 52                  SBC   HL,DE   
42F4   7D                     LD   A,L   
42F5   B4                     OR   H   
42F6   CA 5C 43               JP   Z,expectM_2959S134   
42F9   CD 50 0C               CALL   printStr   
42FC   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
430E   CD 50 0C               CALL   printStr   
4311   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4320   21 00 00               LD   hl,NUL   
4323   E5                     PUSH   hl   
4324   E5                     PUSH   hl   
4325   CD 55 0D               CALL   run   
4328   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4330   CD C6 0B               CALL   flushBuffer   
4333   CD 50 0C               CALL   printStr   
4336   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4343   E1                     POP   hl   
4344   E5                     PUSH   hl   
4345   E5                     PUSH   hl   
4346   CD 55 0D               CALL   run   
4349   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4358   CD C6 0B               CALL   flushBuffer   
435B   76                     HALT      
435C                EXPECTM_2959S134:      
435C   E1                     POP   HL   
435D                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
435D   31 00 4E               LD   SP,STACK   
4360   CD 84 0C               CALL   coldInit   
4363   CD AF 4C               CALL   execStr   
4366   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
4372   CD C6 0B               CALL   flushBuffer   
4375   E1                     POP   HL   
4376   E5                     PUSH   HL   
4377   11 00 00               LD   DE,NUL   
437A   B7                     OR   A   
437B   ED 52                  SBC   HL,DE   
437D   7D                     LD   A,L   
437E   B4                     OR   H   
437F   CA E5 43               JP   Z,expectM_2960S135   
4382   CD 50 0C               CALL   printStr   
4385   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
4397   CD 50 0C               CALL   printStr   
439A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43A9   21 00 00               LD   hl,NUL   
43AC   E5                     PUSH   hl   
43AD   E5                     PUSH   hl   
43AE   CD 55 0D               CALL   run   
43B1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43B9   CD C6 0B               CALL   flushBuffer   
43BC   CD 50 0C               CALL   printStr   
43BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43CC   E1                     POP   hl   
43CD   E5                     PUSH   hl   
43CE   E5                     PUSH   hl   
43CF   CD 55 0D               CALL   run   
43D2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43E1   CD C6 0B               CALL   flushBuffer   
43E4   76                     HALT      
43E5                EXPECTM_2960S135:      
43E5   E1                     POP   HL   
43E6                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
43E6   31 00 4E               LD   SP,STACK   
43E9   CD 84 0C               CALL   coldInit   
43EC   CD AF 4C               CALL   execStr   
43EF   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
43FB   CD C6 0B               CALL   flushBuffer   
43FE   E1                     POP   HL   
43FF   E5                     PUSH   HL   
4400   11 00 00               LD   DE,NUL   
4403   B7                     OR   A   
4404   ED 52                  SBC   HL,DE   
4406   7D                     LD   A,L   
4407   B4                     OR   H   
4408   CA 6E 44               JP   Z,expectM_2961S136   
440B   CD 50 0C               CALL   printStr   
440E   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
4420   CD 50 0C               CALL   printStr   
4423   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4432   21 00 00               LD   hl,NUL   
4435   E5                     PUSH   hl   
4436   E5                     PUSH   hl   
4437   CD 55 0D               CALL   run   
443A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4442   CD C6 0B               CALL   flushBuffer   
4445   CD 50 0C               CALL   printStr   
4448   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4455   E1                     POP   hl   
4456   E5                     PUSH   hl   
4457   E5                     PUSH   hl   
4458   CD 55 0D               CALL   run   
445B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
446A   CD C6 0B               CALL   flushBuffer   
446D   76                     HALT      
446E                EXPECTM_2961S136:      
446E   E1                     POP   HL   
446F                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
446F   31 00 4E               LD   SP,STACK   
4472   CD 84 0C               CALL   coldInit   
4475   CD AF 4C               CALL   execStr   
4478   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
4484   CD C6 0B               CALL   flushBuffer   
4487   E1                     POP   HL   
4488   E5                     PUSH   HL   
4489   11 00 00               LD   DE,NUL   
448C   B7                     OR   A   
448D   ED 52                  SBC   HL,DE   
448F   7D                     LD   A,L   
4490   B4                     OR   H   
4491   CA F7 44               JP   Z,expectM_2962S137   
4494   CD 50 0C               CALL   printStr   
4497   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
44A9   CD 50 0C               CALL   printStr   
44AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44BB   21 00 00               LD   hl,NUL   
44BE   E5                     PUSH   hl   
44BF   E5                     PUSH   hl   
44C0   CD 55 0D               CALL   run   
44C3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44CB   CD C6 0B               CALL   flushBuffer   
44CE   CD 50 0C               CALL   printStr   
44D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44DE   E1                     POP   hl   
44DF   E5                     PUSH   hl   
44E0   E5                     PUSH   hl   
44E1   CD 55 0D               CALL   run   
44E4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44F3   CD C6 0B               CALL   flushBuffer   
44F6   76                     HALT      
44F7                EXPECTM_2962S137:      
44F7   E1                     POP   HL   
44F8                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
44F8   31 00 4E               LD   SP,STACK   
44FB   CD 84 0C               CALL   coldInit   
44FE   CD AF 4C               CALL   execStr   
4501   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
4509   CD C6 0B               CALL   flushBuffer   
450C   E1                     POP   HL   
450D   E5                     PUSH   HL   
450E   11 66 50               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4511   B7                     OR   A   
4512   ED 52                  SBC   HL,DE   
4514   7D                     LD   A,L   
4515   B4                     OR   H   
4516   CA 78 45               JP   Z,expectM_2963S138   
4519   CD 50 0C               CALL   printStr   
451C   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
452A   CD 50 0C               CALL   printStr   
452D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
453C   21 66 50               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
453F   E5                     PUSH   hl   
4540   E5                     PUSH   hl   
4541   CD 55 0D               CALL   run   
4544   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
454C   CD C6 0B               CALL   flushBuffer   
454F   CD 50 0C               CALL   printStr   
4552   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
455F   E1                     POP   hl   
4560   E5                     PUSH   hl   
4561   E5                     PUSH   hl   
4562   CD 55 0D               CALL   run   
4565   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4574   CD C6 0B               CALL   flushBuffer   
4577   76                     HALT      
4578                EXPECTM_2963S138:      
4578   E1                     POP   HL   
4579                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
4579   31 00 4E               LD   SP,STACK   
457C   CD 84 0C               CALL   coldInit   
457F   CD AF 4C               CALL   execStr   
4582   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
458A   CD C6 0B               CALL   flushBuffer   
458D   E1                     POP   HL   
458E   E5                     PUSH   HL   
458F   11 34 50               LD   DE,VARS + ("Z"-"A"+1)*2   
4592   B7                     OR   A   
4593   ED 52                  SBC   HL,DE   
4595   7D                     LD   A,L   
4596   B4                     OR   H   
4597   CA F9 45               JP   Z,expectM_2964S139   
459A   CD 50 0C               CALL   printStr   
459D   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
45AB   CD 50 0C               CALL   printStr   
45AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45BD   21 34 50               LD   hl,VARS + ("Z"-"A"+1)*2   
45C0   E5                     PUSH   hl   
45C1   E5                     PUSH   hl   
45C2   CD 55 0D               CALL   run   
45C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45CD   CD C6 0B               CALL   flushBuffer   
45D0   CD 50 0C               CALL   printStr   
45D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45E0   E1                     POP   hl   
45E1   E5                     PUSH   hl   
45E2   E5                     PUSH   hl   
45E3   CD 55 0D               CALL   run   
45E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45F5   CD C6 0B               CALL   flushBuffer   
45F8   76                     HALT      
45F9                EXPECTM_2964S139:      
45F9   E1                     POP   HL   
45FA                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
45FA   31 00 4E               LD   SP,STACK   
45FD   CD 84 0C               CALL   coldInit   
4600   CD AF 4C               CALL   execStr   
4603   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
460B   CD C6 0B               CALL   flushBuffer   
460E   E1                     POP   HL   
460F   E5                     PUSH   HL   
4610   11 32 50               LD   DE,VARS + ("Z"-"A")*2   
4613   B7                     OR   A   
4614   ED 52                  SBC   HL,DE   
4616   7D                     LD   A,L   
4617   B4                     OR   H   
4618   CA 7A 46               JP   Z,expectM_2965S140   
461B   CD 50 0C               CALL   printStr   
461E   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
462C   CD 50 0C               CALL   printStr   
462F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
463E   21 32 50               LD   hl,VARS + ("Z"-"A")*2   
4641   E5                     PUSH   hl   
4642   E5                     PUSH   hl   
4643   CD 55 0D               CALL   run   
4646   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
464E   CD C6 0B               CALL   flushBuffer   
4651   CD 50 0C               CALL   printStr   
4654   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4661   E1                     POP   hl   
4662   E5                     PUSH   hl   
4663   E5                     PUSH   hl   
4664   CD 55 0D               CALL   run   
4667   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4676   CD C6 0B               CALL   flushBuffer   
4679   76                     HALT      
467A                EXPECTM_2965S140:      
467A   E1                     POP   HL   
467B                          ;*Macro unroll:  test "'A' /ad", VARS
467B   31 00 4E               LD   SP,STACK   
467E   CD 84 0C               CALL   coldInit   
4681   CD AF 4C               CALL   execStr   
4684   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
468C   CD C6 0B               CALL   flushBuffer   
468F   E1                     POP   HL   
4690   E5                     PUSH   HL   
4691   11 00 50               LD   DE,VARS   
4694   B7                     OR   A   
4695   ED 52                  SBC   HL,DE   
4697   7D                     LD   A,L   
4698   B4                     OR   H   
4699   CA FB 46               JP   Z,expectM_2966S141   
469C   CD 50 0C               CALL   printStr   
469F   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
46AD   CD 50 0C               CALL   printStr   
46B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46BF   21 00 50               LD   hl,VARS   
46C2   E5                     PUSH   hl   
46C3   E5                     PUSH   hl   
46C4   CD 55 0D               CALL   run   
46C7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46CF   CD C6 0B               CALL   flushBuffer   
46D2   CD 50 0C               CALL   printStr   
46D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46E2   E1                     POP   hl   
46E3   E5                     PUSH   hl   
46E4   E5                     PUSH   hl   
46E5   CD 55 0D               CALL   run   
46E8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46F7   CD C6 0B               CALL   flushBuffer   
46FA   76                     HALT      
46FB                EXPECTM_2966S141:      
46FB   E1                     POP   HL   
46FC                          ;*Macro unroll:  test "-1. /b/vB 0#", $2D
46FC   31 00 4E               LD   SP,STACK   
46FF   CD 84 0C               CALL   coldInit   
4702   CD AF 4C               CALL   execStr   
4705   2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 DB   "-1. /b/vB 0#",0   
4712   CD C6 0B               CALL   flushBuffer   
4715   E1                     POP   HL   
4716   E5                     PUSH   HL   
4717   11 2D 00               LD   DE,$2D   
471A   B7                     OR   A   
471B   ED 52                  SBC   HL,DE   
471D   7D                     LD   A,L   
471E   B4                     OR   H   
471F   CA 86 47               JP   Z,expectM_2967S142   
4722   CD 50 0C               CALL   printStr   
4725   43 6F 64 65 3A 20 2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /b/vB 0#"   
4738   CD 50 0C               CALL   printStr   
473B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
474A   21 2D 00               LD   hl,$2D   
474D   E5                     PUSH   hl   
474E   E5                     PUSH   hl   
474F   CD 55 0D               CALL   run   
4752   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
475A   CD C6 0B               CALL   flushBuffer   
475D   CD 50 0C               CALL   printStr   
4760   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
476D   E1                     POP   hl   
476E   E5                     PUSH   hl   
476F   E5                     PUSH   hl   
4770   CD 55 0D               CALL   run   
4773   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4782   CD C6 0B               CALL   flushBuffer   
4785   76                     HALT      
4786                EXPECTM_2967S142:      
4786   E1                     POP   HL   
4787                          ;*Macro unroll:  test {DQ,"A",DQ,".s /b/vB 0#"}, 65
4787   31 00 4E               LD   SP,STACK   
478A   CD 84 0C               CALL   coldInit   
478D   CD AF 4C               CALL   execStr   
4790   22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /b/vB 0#",0   
479F   CD C6 0B               CALL   flushBuffer   
47A2   E1                     POP   HL   
47A3   E5                     PUSH   HL   
47A4   11 41 00               LD   DE,65   
47A7   B7                     OR   A   
47A8   ED 52                  SBC   HL,DE   
47AA   7D                     LD   A,L   
47AB   B4                     OR   H   
47AC   CA 15 48               JP   Z,expectM_2968S143   
47AF   CD 50 0C               CALL   printStr   
47B2   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /b/vB 0#"   
47C7   CD 50 0C               CALL   printStr   
47CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47D9   21 41 00               LD   hl,65   
47DC   E5                     PUSH   hl   
47DD   E5                     PUSH   hl   
47DE   CD 55 0D               CALL   run   
47E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47E9   CD C6 0B               CALL   flushBuffer   
47EC   CD 50 0C               CALL   printStr   
47EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47FC   E1                     POP   hl   
47FD   E5                     PUSH   hl   
47FE   E5                     PUSH   hl   
47FF   CD 55 0D               CALL   run   
4802   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4811   CD C6 0B               CALL   flushBuffer   
4814   76                     HALT      
4815                EXPECTM_2968S143:      
4815   E1                     POP   HL   
4816                          ;*Macro unroll:  test "123. /b/vB 1#", $32
4816   31 00 4E               LD   SP,STACK   
4819   CD 84 0C               CALL   coldInit   
481C   CD AF 4C               CALL   execStr   
481F   31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 DB   "123. /b/vB 1#",0   
482D   CD C6 0B               CALL   flushBuffer   
4830   E1                     POP   HL   
4831   E5                     PUSH   HL   
4832   11 32 00               LD   DE,$32   
4835   B7                     OR   A   
4836   ED 52                  SBC   HL,DE   
4838   7D                     LD   A,L   
4839   B4                     OR   H   
483A   CA A2 48               JP   Z,expectM_2969S144   
483D   CD 50 0C               CALL   printStr   
4840   43 6F 64 65 3A 20 31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /b/vB 1#"   
4854   CD 50 0C               CALL   printStr   
4857   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4866   21 32 00               LD   hl,$32   
4869   E5                     PUSH   hl   
486A   E5                     PUSH   hl   
486B   CD 55 0D               CALL   run   
486E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4876   CD C6 0B               CALL   flushBuffer   
4879   CD 50 0C               CALL   printStr   
487C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4889   E1                     POP   hl   
488A   E5                     PUSH   hl   
488B   E5                     PUSH   hl   
488C   CD 55 0D               CALL   run   
488F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
489E   CD C6 0B               CALL   flushBuffer   
48A1   76                     HALT      
48A2                EXPECTM_2969S144:      
48A2   E1                     POP   HL   
48A3                          ;*Macro unroll:  test ":a{%a} F=1F^", 1
48A3   31 00 4E               LD   SP,STACK   
48A6   CD 84 0C               CALL   coldInit   
48A9   CD AF 4C               CALL   execStr   
48AC   3A 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   ":a{%a} F=1F^",0   
48B9   CD C6 0B               CALL   flushBuffer   
48BC   E1                     POP   HL   
48BD   E5                     PUSH   HL   
48BE   11 01 00               LD   DE,1   
48C1   B7                     OR   A   
48C2   ED 52                  SBC   HL,DE   
48C4   7D                     LD   A,L   
48C5   B4                     OR   H   
48C6   CA 2D 49               JP   Z,expectM_2970S145   
48C9   CD 50 0C               CALL   printStr   
48CC   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a} F=1F^"   
48DF   CD 50 0C               CALL   printStr   
48E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48F1   21 01 00               LD   hl,1   
48F4   E5                     PUSH   hl   
48F5   E5                     PUSH   hl   
48F6   CD 55 0D               CALL   run   
48F9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4901   CD C6 0B               CALL   flushBuffer   
4904   CD 50 0C               CALL   printStr   
4907   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4914   E1                     POP   hl   
4915   E5                     PUSH   hl   
4916   E5                     PUSH   hl   
4917   CD 55 0D               CALL   run   
491A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4929   CD C6 0B               CALL   flushBuffer   
492C   76                     HALT      
492D                EXPECTM_2970S145:      
492D   E1                     POP   HL   
492E                          ;*Macro unroll:  test "1 :b{:a{%a}}^F= 3F^",3
492E   31 00 4E               LD   SP,STACK   
4931   CD 84 0C               CALL   coldInit   
4934   CD AF 4C               CALL   execStr   
4937   31 20 3A 62 7B 3A 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a}}^F= 3F^",0   
494B   CD C6 0B               CALL   flushBuffer   
494E   E1                     POP   HL   
494F   E5                     PUSH   HL   
4950   11 03 00               LD   DE,3   
4953   B7                     OR   A   
4954   ED 52                  SBC   HL,DE   
4956   7D                     LD   A,L   
4957   B4                     OR   H   
4958   CA C6 49               JP   Z,expectM_2971S146   
495B   CD 50 0C               CALL   printStr   
495E   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a}}^F= 3F^"   
4978   CD 50 0C               CALL   printStr   
497B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
498A   21 03 00               LD   hl,3   
498D   E5                     PUSH   hl   
498E   E5                     PUSH   hl   
498F   CD 55 0D               CALL   run   
4992   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
499A   CD C6 0B               CALL   flushBuffer   
499D   CD 50 0C               CALL   printStr   
49A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49AD   E1                     POP   hl   
49AE   E5                     PUSH   hl   
49AF   E5                     PUSH   hl   
49B0   CD 55 0D               CALL   run   
49B3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49C2   CD C6 0B               CALL   flushBuffer   
49C5   76                     HALT      
49C6                EXPECTM_2971S146:      
49C6   E1                     POP   HL   
49C7                          ;*Macro unroll:  test "1 :b{:a{%a%b-}}^F= 3F^",2
49C7   31 00 4E               LD   SP,STACK   
49CA   CD 84 0C               CALL   coldInit   
49CD   CD AF 4C               CALL   execStr   
49D0   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-}}^F= 3F^",0   
49E7   CD C6 0B               CALL   flushBuffer   
49EA   E1                     POP   HL   
49EB   E5                     PUSH   HL   
49EC   11 02 00               LD   DE,2   
49EF   B7                     OR   A   
49F0   ED 52                  SBC   HL,DE   
49F2   7D                     LD   A,L   
49F3   B4                     OR   H   
49F4   CA 65 4A               JP   Z,expectM_2972S147   
49F7   CD 50 0C               CALL   printStr   
49FA   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-}}^F= 3F^"   
4A17   CD 50 0C               CALL   printStr   
4A1A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A29   21 02 00               LD   hl,2   
4A2C   E5                     PUSH   hl   
4A2D   E5                     PUSH   hl   
4A2E   CD 55 0D               CALL   run   
4A31   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A39   CD C6 0B               CALL   flushBuffer   
4A3C   CD 50 0C               CALL   printStr   
4A3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A4C   E1                     POP   hl   
4A4D   E5                     PUSH   hl   
4A4E   E5                     PUSH   hl   
4A4F   CD 55 0D               CALL   run   
4A52   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A61   CD C6 0B               CALL   flushBuffer   
4A64   76                     HALT      
4A65                EXPECTM_2972S147:      
4A65   E1                     POP   HL   
4A66                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4A66   31 00 4E               LD   SP,STACK   
4A69   CD 84 0C               CALL   coldInit   
4A6C   CD AF 4C               CALL   execStr   
4A6F   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
4A92   CD C6 0B               CALL   flushBuffer   
4A95   E1                     POP   HL   
4A96   E5                     PUSH   HL   
4A97   11 01 00               LD   DE,1   
4A9A   B7                     OR   A   
4A9B   ED 52                  SBC   HL,DE   
4A9D   7D                     LD   A,L   
4A9E   B4                     OR   H   
4A9F   CA 1C 4B               JP   Z,expectM_2973S148   
4AA2   CD 50 0C               CALL   printStr   
4AA5   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4ACE   CD 50 0C               CALL   printStr   
4AD1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AE0   21 01 00               LD   hl,1   
4AE3   E5                     PUSH   hl   
4AE4   E5                     PUSH   hl   
4AE5   CD 55 0D               CALL   run   
4AE8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4AF0   CD C6 0B               CALL   flushBuffer   
4AF3   CD 50 0C               CALL   printStr   
4AF6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B03   E1                     POP   hl   
4B04   E5                     PUSH   hl   
4B05   E5                     PUSH   hl   
4B06   CD 55 0D               CALL   run   
4B09   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B18   CD C6 0B               CALL   flushBuffer   
4B1B   76                     HALT      
4B1C                EXPECTM_2973S148:      
4B1C   E1                     POP   HL   
4B1D                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c}}^F= 3F^",1
4B1D   31 00 4E               LD   SP,STACK   
4B20   CD 84 0C               CALL   coldInit   
4B23   CD AF 4C               CALL   execStr   
4B26   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c}}^F= 3F^",0   
4B49   CD C6 0B               CALL   flushBuffer   
4B4C   E1                     POP   HL   
4B4D   E5                     PUSH   HL   
4B4E   11 01 00               LD   DE,1   
4B51   B7                     OR   A   
4B52   ED 52                  SBC   HL,DE   
4B54   7D                     LD   A,L   
4B55   B4                     OR   H   
4B56   CA D3 4B               JP   Z,expectM_2974S149   
4B59   CD 50 0C               CALL   printStr   
4B5C   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c}}^F= 3F^"   
4B85   CD 50 0C               CALL   printStr   
4B88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B97   21 01 00               LD   hl,1   
4B9A   E5                     PUSH   hl   
4B9B   E5                     PUSH   hl   
4B9C   CD 55 0D               CALL   run   
4B9F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4BA7   CD C6 0B               CALL   flushBuffer   
4BAA   CD 50 0C               CALL   printStr   
4BAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BBA   E1                     POP   hl   
4BBB   E5                     PUSH   hl   
4BBC   E5                     PUSH   hl   
4BBD   CD 55 0D               CALL   run   
4BC0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4BCF   CD C6 0B               CALL   flushBuffer   
4BD2   76                     HALT      
4BD3                EXPECTM_2974S149:      
4BD3   E1                     POP   HL   
4BD4                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4BD4   31 00 4E               LD   SP,STACK   
4BD7   CD 84 0C               CALL   coldInit   
4BDA   CD AF 4C               CALL   execStr   
4BDD   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4C0D   CD C6 0B               CALL   flushBuffer   
4C10   E1                     POP   HL   
4C11   E5                     PUSH   HL   
4C12   11 02 00               LD   DE,2   
4C15   B7                     OR   A   
4C16   ED 52                  SBC   HL,DE   
4C18   7D                     LD   A,L   
4C19   B4                     OR   H   
4C1A   CA A4 4C               JP   Z,expectM_2975S150   
4C1D   CD 50 0C               CALL   printStr   
4C20   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4C56   CD 50 0C               CALL   printStr   
4C59   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C68   21 02 00               LD   hl,2   
4C6B   E5                     PUSH   hl   
4C6C   E5                     PUSH   hl   
4C6D   CD 55 0D               CALL   run   
4C70   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C78   CD C6 0B               CALL   flushBuffer   
4C7B   CD 50 0C               CALL   printStr   
4C7E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C8B   E1                     POP   hl   
4C8C   E5                     PUSH   hl   
4C8D   E5                     PUSH   hl   
4C8E   CD 55 0D               CALL   run   
4C91   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4CA0   CD C6 0B               CALL   flushBuffer   
4CA3   76                     HALT      
4CA4                EXPECTM_2975S150:      
4CA4   E1                     POP   HL   
4CA5                             ; test "$1000 0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe", $1000
4CA5                             ; 
4CA5   CD 50 0C               CALL   printStr   
4CA8   44 6F 6E 65 21 00      .CSTR   "Done!"   
4CAE   76                     HALT      
4CAF                             ; executes a null teminated string (null executes exit_)
4CAF                             ; the string should be immedaitely following the call
4CAF                EXECSTR:      ; create a root stack frame
4CAF   C1                     POP   bc   ; bc = code*
4CB0   0B                     DEC   bc   ; dec to prepare for next routine
4CB1   11 00 00               LD   de,0   
4CB4   D5                     PUSH   de   ; push fake IP
4CB5   D5                     PUSH   de   ; push null arg_list*
4CB6   D5                     PUSH   de   ; push null first_arg*
4CB7   D5                     PUSH   de   ; push fake BP
4CB8   DD E9                  JP   (ix)   
4CBA                STKSIZE:   EQU   $100   ; Stack size
4CBA                TIBSIZE:   EQU   $100   ; 256 bytes
4CBA                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4CBA                          ALIGN   $100   
4D00                          DS   STKSIZE   
4E00                STACK:       
4E00                          ALIGN   $100   
4E00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4F00                          ALIGN   $100   
4F00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5000                          ALIGN   $100   
5000                VARS:        
5000                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
50D0                RESTARTS:      
50D0                RST08:    DS   2   
50D2                RST10:    DS   2   
50D4                RST18:    DS   2   
50D6                RST20:    DS   2   
50D8                RST28:    DS   2   
50DA                RST30:    DS   2   ; 
50DC                BAUD:     DS   2   ; 
50DE                INTVEC:   DS   2   ; 
50E0                NMIVEC:   DS   2   ; 
50E2                GETCVEC:   DS   2   ; 
50E4                PUTCVEC:   DS   2   ; 
50E6                SYSVARS:      
50E6                             ; initialised sys variables (preserved)
50E6                VDATAWIDTH:   DS   2   ; 
50E8                VNUMBASE:   DS   2   ; 
50EA                VTIBPTR:   DS   2   ; 
50EC                VBUFPTR:   DS   2   ; 
50EE                VNEXT:    DS   2   ; 
50F0                VHEAPPTR:   DS   2   ; 
50F2                VRECUR:   DS   2   ; 
50F4                             ; uninitialised sys variables (preserved)
50F4                VPOINTER:   DS   2   ; 
50F6                VREMAIN:   DS   2   ; 
50F8                VSAVEDIP:   DS   2   ; 
50FA                VSAVEDSP:   DS   2   ; 
50FC                VSAVEDNEXT:   DS   2   ; 
50FE                VSAVEDBP:   DS   2   ; 
5100                             ; uninitialised sys variables (unpreserved)
5100                VTEMP1:   DS   2   ; 
5102                VTEMP2:   DS   2   ; 
5104                VLASTDEF:   DS   2   ; 
5106                TBPTR:    DS   2   ; reserved for tests
5108                TITLEBUF:   DS   20   
511C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 42 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0BC4 DEFINED AT LINE 1960 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 163 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 2191 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
                    > USED AT LINE 2237 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 46 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 147 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
PLUS_:              0204 DEFINED AT LINE 167 IN MAIN.asm
ADD:                0204 DEFINED AT LINE 168 IN MAIN.asm
ADD1:               020F DEFINED AT LINE 176 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD3:               0213 DEFINED AT LINE 181 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
ADD4:               021D DEFINED AT LINE 189 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
AMPER_:             0220 DEFINED AT LINE 192 IN MAIN.asm
AND:                0220 DEFINED AT LINE 193 IN MAIN.asm
AND1:               0227 DEFINED AT LINE 201 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
PIPE_:              022B DEFINED AT LINE 206 IN MAIN.asm
OR:                 022B DEFINED AT LINE 207 IN MAIN.asm
AT_:                0234 DEFINED AT LINE 220 IN MAIN.asm
ADDR:               0234 DEFINED AT LINE 221 IN MAIN.asm
BANG_:              023E DEFINED AT LINE 226 IN MAIN.asm
NOT:                0248 DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
MINUS_:             024E DEFINED AT LINE 239 IN MAIN.asm
SUB:                0259 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SUB1:               0263 DEFINED AT LINE 254 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
NUM_:               026B DEFINED AT LINE 262 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
EQ_:                026E DEFINED AT LINE 265 IN MAIN.asm
EQ0_:               0277 DEFINED AT LINE 272 IN MAIN.asm
EQ1:                0278 DEFINED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 237 IN MAIN.asm
GT_:                027B DEFINED AT LINE 278 IN MAIN.asm
LT_:                0286 DEFINED AT LINE 286 IN MAIN.asm
LT1:                028F DEFINED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 285 IN MAIN.asm
EQUALS:             0296 DEFINED AT LINE 301 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
NOTEQUALS:          029D DEFINED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
LESSTHANEQ:         02A4 DEFINED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 295 IN MAIN.asm
LESSTHAN:           02A9 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
LESSTHAN1:          02AE DEFINED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 318 IN MAIN.asm
TRUE1:              02B1 DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 304 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
NULL1:              02B7 DEFINED AT LINE 334 IN MAIN.asm
FALSE1:             02B7 DEFINED AT LINE 335 IN MAIN.asm
                    > USED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
NOP_:               02BB DEFINED AT LINE 338 IN MAIN.asm
RPAREN_:            02BD DEFINED AT LINE 340 IN MAIN.asm
DOLLAR_:            02C0 DEFINED AT LINE 342 IN MAIN.asm
LBRACK_:            02C3 DEFINED AT LINE 344 IN MAIN.asm
RBRACK_:            02C6 DEFINED AT LINE 346 IN MAIN.asm
PERCENT_:           02C9 DEFINED AT LINE 348 IN MAIN.asm
LPAREN_:            02CC DEFINED AT LINE 350 IN MAIN.asm
LBRACE_:            02CC DEFINED AT LINE 351 IN MAIN.asm
RBRACE_:            02CF DEFINED AT LINE 353 IN MAIN.asm
TICK_:              02D2 DEFINED AT LINE 355 IN MAIN.asm
SEMICOLON_:         02D5 DEFINED AT LINE 357 IN MAIN.asm
DOT_:               02D8 DEFINED AT LINE 359 IN MAIN.asm
COLON_:             02DB DEFINED AT LINE 361 IN MAIN.asm
UPCASE_:            02DE DEFINED AT LINE 363 IN MAIN.asm
LOWCASE_:           02E1 DEFINED AT LINE 365 IN MAIN.asm
QUESTION_:          02E4 DEFINED AT LINE 367 IN MAIN.asm
STAR_:              02E7 DEFINED AT LINE 369 IN MAIN.asm
HASH_:              02EA DEFINED AT LINE 371 IN MAIN.asm
CARET_:             02ED DEFINED AT LINE 373 IN MAIN.asm
COMMA_:             02F0 DEFINED AT LINE 375 IN MAIN.asm
DQUOTE_:            02F3 DEFINED AT LINE 377 IN MAIN.asm
BACKSLASH_:         02F6 DEFINED AT LINE 379 IN MAIN.asm
UNDERSCORE_:        02F9 DEFINED AT LINE 381 IN MAIN.asm
TILDE_:             02FC DEFINED AT LINE 383 IN MAIN.asm
SLASH_:             02FF DEFINED AT LINE 385 IN MAIN.asm
SLASH:              0301 DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
COMMAND:            0301 DEFINED AT LINE 394 IN MAIN.asm
COMMAND_A_:         0327 DEFINED AT LINE 429 IN MAIN.asm
COMMAND_B_:         0334 DEFINED AT LINE 440 IN MAIN.asm
COMMAND_F_:         033F DEFINED AT LINE 449 IN MAIN.asm
COMMAND_I_:         0342 DEFINED AT LINE 452 IN MAIN.asm
COMMAND_M_:         034B DEFINED AT LINE 459 IN MAIN.asm
COMMAND_P_:         034E DEFINED AT LINE 462 IN MAIN.asm
COMMAND_Q_:         0357 DEFINED AT LINE 469 IN MAIN.asm
COMMAND_R_:         0360 DEFINED AT LINE 476 IN MAIN.asm
COMMAND_V_:         0363 DEFINED AT LINE 479 IN MAIN.asm
COMMAND_NOP_:       0366 DEFINED AT LINE 482 IN MAIN.asm
DECIMAL_:           0368 DEFINED AT LINE 485 IN MAIN.asm
DECIMAL1:           036B DEFINED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
DIV_:               0370 DEFINED AT LINE 491 IN MAIN.asm
ERROR1_:            0374 DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 744 IN MAIN.asm
HEXADECIMAL_:       0377 DEFINED AT LINE 498 IN MAIN.asm
KEY_:               037D DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
OUTPUT_:            0380 DEFINED AT LINE 505 IN MAIN.asm
TRUE_:              0383 DEFINED AT LINE 508 IN MAIN.asm
WORDS_:             0386 DEFINED AT LINE 511 IN MAIN.asm
XOR_:               0389 DEFINED AT LINE 514 IN MAIN.asm
XOR1:               038A DEFINED AT LINE 516 IN MAIN.asm
ABSOLUTE_:          0394 DEFINED AT LINE 529 IN MAIN.asm
ADDROF_:            03A1 DEFINED AT LINE 544 IN MAIN.asm
ADDROF1:            03B5 DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 552 IN MAIN.asm
ADDROF2:            03C0 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
ARRAYSIZE_:         03C2 DEFINED AT LINE 570 IN MAIN.asm
BREAK_:             03CA DEFINED AT LINE 580 IN MAIN.asm
COLDSTART_:         03CD DEFINED AT LINE 584 IN MAIN.asm
BYTES_:             03D0 DEFINED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
BYTES1:             03D3 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
INPUT_:             03D8 DEFINED AT LINE 596 IN MAIN.asm
PRINTCHARS_:        03E3 DEFINED AT LINE 609 IN MAIN.asm
QUIT_:              03EA DEFINED AT LINE 616 IN MAIN.asm
QUIT1:              03F1 DEFINED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
WORDS:              03F4 DEFINED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
COMMENT:            03FA DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
COMMAND_F:          0403 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
FOREACH_:           041A DEFINED AT LINE 665 IN MAIN.asm
FLUSH_:             041D DEFINED AT LINE 670 IN MAIN.asm
FUNCSRC_:           0422 DEFINED AT LINE 674 IN MAIN.asm
F1_:                0425 DEFINED AT LINE 677 IN MAIN.asm
F2_:                0428 DEFINED AT LINE 680 IN MAIN.asm
F3_:                042B DEFINED AT LINE 683 IN MAIN.asm
F4_:                042E DEFINED AT LINE 686 IN MAIN.asm
FZ_:                0431 DEFINED AT LINE 689 IN MAIN.asm
FALSE_:             0434 DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
COMMAND_M:          0437 DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
MAP_:               0440 DEFINED AT LINE 702 IN MAIN.asm
COMMAND_R:          0443 DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
RECUR_:             0450 DEFINED AT LINE 716 IN MAIN.asm
REMAIN_:            0456 DEFINED AT LINE 721 IN MAIN.asm
RANGESRC_:          045C DEFINED AT LINE 726 IN MAIN.asm
COMMAND_V:          045F DEFINED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
CONSTBUFSTART_:     0472 DEFINED AT LINE 746 IN MAIN.asm
CONSTHEAPSTART_:    0477 DEFINED AT LINE 750 IN MAIN.asm
CONSTTIBSTART_:     047C DEFINED AT LINE 754 IN MAIN.asm
VARBUFPTR_:         0481 DEFINED AT LINE 758 IN MAIN.asm
VARHEAPPTR_:        048A DEFINED AT LINE 763 IN MAIN.asm
VARTIBPTR_:         0493 DEFINED AT LINE 768 IN MAIN.asm
VARIABLE:           049C DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
CONSTANT:           049F DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
DOT:                04A2 DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
DOTNUMBER_:         04B1 DEFINED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
DOTSTRING_:         04BC DEFINED AT LINE 803 IN MAIN.asm
DOTSTRING0:         04C3 DEFINED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
DOTSTRING1:         04C9 DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
DOTCHAR_:           04D6 DEFINED AT LINE 822 IN MAIN.asm
DOTXCHARS_:         04DB DEFINED AT LINE 828 IN MAIN.asm
DOTXCHARS0:         04DC DEFINED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
DOTXCHARS1:         04E5 DEFINED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
DOTXCHARS2:         04ED DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
FOREACH:            04F7 DEFINED AT LINE 32
                    > USED AT LINE 666 IN MAIN.asm
FOREACHM_1327S858:  0505 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0543 DEFINED AT LINE 32
                    > USED AT LINE 675 IN MAIN.asm
FUNCSRCM_1342S874:  054F DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           057C DEFINED AT LINE 32
DOTARRAYM_1352S885: 058A DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                05C4 DEFINED AT LINE 32
                    > USED AT LINE 703 IN MAIN.asm
MAPM_1359S893:      05D1 DEFINED AT LINE 39
                    > USED AT LINE 35
RANGESRC:           0606 DEFINED AT LINE 32
                    > USED AT LINE 727 IN MAIN.asm
RANGESRCM_1373S908: 0615 DEFINED AT LINE 39
                    > USED AT LINE 35
BACKSLASH:          0686 DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
UNDERSCORE:         0686 DEFINED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
TILDE:              0686 DEFINED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 384 IN MAIN.asm
COMMA:              0686 DEFINED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
SEMICOLON:          0686 DEFINED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
COLON:              0688 DEFINED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
LAMBDA:             0688 DEFINED AT LINE 944 IN MAIN.asm
LAMBDA1:            0691 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
LAMBDA2:            0699 DEFINED AT LINE 952 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
LAMBDA3:            06A0 DEFINED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
PERCENT:            06A6 DEFINED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
ARG:                06A6 DEFINED AT LINE 965 IN MAIN.asm
ARG0:               06C2 DEFINED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
ARG0A:              06CB DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
ARG1:               06D0 DEFINED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
ARG1A:              06D8 DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
LBRACK:             06DB DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
ARRAYSTART:         06DB DEFINED AT LINE 1007 IN MAIN.asm
RBRACK:             06F7 DEFINED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
ARRAYEND:           06F7 DEFINED AT LINE 1022 IN MAIN.asm
ARRAYEND1:          0713 DEFINED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
ARRAYEND2:          0723 DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
ARRAYEND3:          0728 DEFINED AT LINE 1053 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
HASH:               0747 DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
ARRAYINDEX:         0747 DEFINED AT LINE 1077 IN MAIN.asm
ARRAYINDEX0:        074F DEFINED AT LINE 1083 IN MAIN.asm
ARRAYINDEX1:        0750 DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
ARRAYINDEX2:        075C DEFINED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
ARGLIST:            075F DEFINED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
ARGLIST1:           0769 DEFINED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
ARGLIST1A:          0771 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
ARGLIST2:           0779 DEFINED AT LINE 1121 IN MAIN.asm
ARGLIST3:           0781 DEFINED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
ARGLIST4:           0784 DEFINED AT LINE 1132 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
ARGLIST5:           078A DEFINED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
ASSIGN:             0795 DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
ASSIGN0:            0797 DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
ASSIGNX:            0798 DEFINED AT LINE 1154 IN MAIN.asm
ASSIGN1:            07A4 DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
LBRACE:             07A6 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
BLOCKSTART:         07A6 DEFINED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
BLOCKSTART1:        07AA DEFINED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
BLOCKSTART2:        07D6 DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
BLOCKSTART3:        07D9 DEFINED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
BLOCKSTART4:        07E1 DEFINED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
BLOCKSTART5:        07E4 DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
BLOCKSTART6:        080C DEFINED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
RBRACE:             080F DEFINED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
BLOCKEND:           080F DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
BLOCKEND1:          0841 DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
BLOCKEND2:          084D DEFINED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
BLOCKEND3:          085F DEFINED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
BLOCKEND4:          0873 DEFINED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
BREAK:              087C DEFINED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
BREAK1:             0883 DEFINED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
TICK:               0896 DEFINED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 356 IN MAIN.asm
CHAR:               0896 DEFINED AT LINE 1311 IN MAIN.asm
CHAR1:              0899 DEFINED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
CHAR2:              08A5 DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
CHAR3:              08A8 DEFINED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
CREATEFUNC:         08AB DEFINED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
CREATEFUNC0:        08C6 DEFINED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 1340 IN MAIN.asm
CREATEFUNC1:        08DE DEFINED AT LINE 1363 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
CREATEFUNC2:        08F1 DEFINED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1372 IN MAIN.asm
CREATEFUNC2A:       0910 DEFINED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1389 IN MAIN.asm
CREATEFUNC3:        091F DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1424 IN MAIN.asm
CREATEFUNC4:        092A DEFINED AT LINE 1425 IN MAIN.asm
CREATEFUNC5:        092B DEFINED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
DIV:                0947 DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
BUFFERDEC:          0958 DEFINED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
BUFFERDEC0:         0972 DEFINED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
BUFFERDEC1:         0982 DEFINED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
BUFFERDEC2:         09A2 DEFINED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
BUFFERDEC3:         09A4 DEFINED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
BUFFERDEC4:         09B4 DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 1515 IN MAIN.asm
BUFFERDEC5:         09B5 DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1519 IN MAIN.asm
BUFFERHEX:          09BE DEFINED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
BUFFERHEX1:         09DF DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
BUFFERHEX2:         09E8 DEFINED AT LINE 1559 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
DIVIDE:             09F6 DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
DIVIDE1:            09FB DEFINED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1588 IN MAIN.asm
DIVIDE2:            0A08 DEFINED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
DIVIDE3:            0A09 DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
FZ:                 0A0F DEFINED AT LINE 1593 IN MAIN.asm
                    > USED AT LINE 690 IN MAIN.asm
CARET:              0A1C DEFINED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
GO:                 0A1C DEFINED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0A1D DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
GO2:                0A23 DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
GOBLOCK:            0A2E DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
GOBLOCK2:           0A53 DEFINED AT LINE 1637 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
GOBLOCK3:           0A5D DEFINED AT LINE 1643 IN MAIN.asm
GOFUNC:             0A61 DEFINED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
GOFUNC1:            0A7A DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
GOFUNC2:            0A80 DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
GOFUNC3:            0A8B DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
GOFUNC4:            0AA3 DEFINED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
GOFUNC5:            0AA6 DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
GOFUNC6:            0AA9 DEFINED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
GOFUNC7:            0AAC DEFINED AT LINE 1706 IN MAIN.asm
GOFUNC8:            0AB0 DEFINED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
DOLLAR:             0ABB DEFINED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
HEXNUM:             0ABB DEFINED AT LINE 1721 IN MAIN.asm
HEXNUM1:            0ABE DEFINED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 1740 IN MAIN.asm
HEXNUM2:            0AC6 DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1727 IN MAIN.asm
UPCASE:             0AD8 DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
LOWCASE:            0ADD DEFINED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
IDENT1:             0AE2 DEFINED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
QUESTION:           0AEF DEFINED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
IF:                 0AEF DEFINED AT LINE 1764 IN MAIN.asm
IFTE:               0AFB DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
IFTE1:              0AFC DEFINED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
KEY:                0B08 DEFINED AT LINE 1786 IN MAIN.asm
OUTPUT:             0B11 DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
STAR:               0B1A DEFINED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
MUL:                0B1A DEFINED AT LINE 1805 IN MAIN.asm
MUL2:               0B1C DEFINED AT LINE 1808 IN MAIN.asm
MUL3:               0B24 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
NUM:                0B36 DEFINED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
NUM0:               0B3F DEFINED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
NUM1:               0B40 DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
NUM2:               0B58 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
NUM3:               0B63 DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
RPAREN:             0B66 DEFINED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
SHIFTLEFT:          0B6E DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
SHIFTLEFT1:         0B76 DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
SHIFTLEFT2:         0B77 DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
SHIFTRIGHT:         0B7E DEFINED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
SHIFTRIGHT1:        0B86 DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
SHIFTRIGHT2:        0B8A DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
DQUOTE:             0B91 DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
STRING:             0B91 DEFINED AT LINE 1908 IN MAIN.asm
STRING1:            0B9A DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
STRING2:            0B9D DEFINED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
STRING3:            0BA6 DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
PRINTCHARS1:        0BB9 DEFINED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
PRINTCHARS2:        0BBF DEFINED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
FILTER:             0BC4 DEFINED AT LINE 1959 IN MAIN.asm
FLUSHBUFFER:        0BC6 DEFINED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
                    > USED AT LINE 2158 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
COMMANDTABLE:       0BDD DEFINED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
COMMANDTABLE1:      0BE7 DEFINED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
COMMANDTABLE2:      0BEC DEFINED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
JUMPTABLE:          0BF1 DEFINED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
JUMPTABLE0:         0BF3 DEFINED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
JUMPTABLE1:         0BFF DEFINED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
JUMPTABLE2:         0C02 DEFINED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
PRTSTR0:            0C05 DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
PRTSTR:             0C09 DEFINED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
NESTING:            0C0E DEFINED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
NESTING0:           0C18 DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
NESTING1A:          0C1F DEFINED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
NESTING1:           0C22 DEFINED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
NESTING2:           0C31 DEFINED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
NESTING3:           0C33 DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
NESTING4:           0C3E DEFINED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
PROMPT:             0C40 DEFINED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2159 IN MAIN.asm
CRLF:               0C49 DEFINED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
PRINTSTR:           0C50 DEFINED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 155
INIT:               0C57 DEFINED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2151 IN MAIN.asm
INIT1:              0C5F DEFINED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 2112 IN MAIN.asm
WARMINIT:           0C67 DEFINED AT LINE 2114 IN MAIN.asm
COLDBOOT0:          0C7A DEFINED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2147 IN MAIN.asm
COLDINIT:           0C84 DEFINED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0C95 DEFINED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
COLDSTART:          0CA2 DEFINED AT LINE 2145 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
START:              0CAB DEFINED AT LINE 2149 IN MAIN.asm
START1:             0CB1 DEFINED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
INTERPRET:          0CB7 DEFINED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
                    > USED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
INTERPRET2:         0CC6 DEFINED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2229 IN MAIN.asm
                    > USED AT LINE 2306 IN MAIN.asm
                    > USED AT LINE 2310 IN MAIN.asm
INTERPRET3:         0CCE DEFINED AT LINE 2173 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
INTERPRET4:         0CD9 DEFINED AT LINE 2182 IN MAIN.asm
                    > USED AT LINE 2171 IN MAIN.asm
INTERPRET5:         0CDE DEFINED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
INTERPRET5A:        0CFC DEFINED AT LINE 2226 IN MAIN.asm
INTERPRET6:         0CFE DEFINED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 2193 IN MAIN.asm
INTERPRET7:         0D0C DEFINED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
INTERPRET8:         0D1F DEFINED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
NEXT:               0D3A DEFINED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 2273 IN MAIN.asm
NEXT1:              0D4A DEFINED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2274 IN MAIN.asm
EXIT:               0D51 DEFINED AT LINE 2286 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
RUN:                0D55 DEFINED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 2299 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR1:             0D59 DEFINED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
ERROR:              0D5D DEFINED AT LINE 2298 IN MAIN.asm
BACKSPACE_:         0D70 DEFINED AT LINE 2303 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
EDIT_:              0D80 DEFINED AT LINE 2313 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
REEDIT_:            0D98 DEFINED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2205 IN MAIN.asm
PRINTSTACK_:        0D9B DEFINED AT LINE 2321 IN MAIN.asm
F1:                 0DA5 DEFINED AT LINE 32
                    > USED AT LINE 678 IN MAIN.asm
F1M_2845S12:        0DB0 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0DB1 DEFINED AT LINE 32
                    > USED AT LINE 681 IN MAIN.asm
F2M_2847S15:        0DBC DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0DBD DEFINED AT LINE 32
                    > USED AT LINE 684 IN MAIN.asm
F3M_2849S18:        0DC8 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0DC9 DEFINED AT LINE 32
                    > USED AT LINE 687 IN MAIN.asm
F4M_2851S21:        0DD4 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         0E00 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_2857S29:    0ED2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2862S37:    0F53 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2863S38:    0FCA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2864S39:    103F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2865S40:    10B4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2866S41:    1129 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2867S42:    119E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2868S43:    1215 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2869S44:    128E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2870S45:    1305 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2871S46:    137C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2872S47:    13F5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S48:    1470 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S49:    14E9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S50:    1562 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S51:    15E1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S52:    1660 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S53:    16DD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S54:    175E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S55:    17E3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S56:    1866 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S57:    18E3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S58:    1968 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S59:    19E9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S60:    1A66 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S61:    1AE3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S62:    1B68 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S63:    1BE5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S64:    1C62 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S65:    1CE1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S66:    1D70 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S67:    1DED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2893S68:    1E72 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2894S69:    1EEF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2895S70:    1F7A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2896S71:    2005 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2897S72:    2090 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2898S73:    211B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2899S74:    21A0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2900S75:    221D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2901S76:    229C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2902S77:    231B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2903S78:    2398 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2904S79:    2415 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2905S80:    2492 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2906S81:    250F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2907S82:    258C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2908S83:    2609 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2909S84:    2686 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2910S85:    2703 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2911S86:    2782 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2912S87:    2801 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2913S88:    2880 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2914S89:    2901 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2915S90:    2982 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2916S91:    29FD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2917S92:    2A78 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2918S93:    2AF9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2919S94:    2B80 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2920S95:    2C07 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2921S96:    2C92 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2922S97:    2D27 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2923S98:    2DBC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2924S99:    2E39 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2925S100:   2EB8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2926S101:   2F3D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2927S102:   2FC6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2928S103:   304B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2929S104:   30DA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2930S105:   316B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2931S106:   3202 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2932S107:   329D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2933S108:   332A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2934S109:   33BD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2935S110:   3452 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2936S111:   34E9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2937S112:   357E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2938S113:   3621 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2939S114:   36B2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2940S115:   3751 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2941S116:   37F2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2942S117:   3895 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2943S118:   3942 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2944S119:   39EF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2945S120:   3A7C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2946S121:   3B11 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2947S122:   3B9E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2948S123:   3C37 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2949S124:   3CD0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2950S125:   3D77 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2951S126:   3E26 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2952S127:   3ED5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2953S128:   3F76 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2954S129:   401D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2955S130:   40DA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2956S131:   41A1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2957S132:   423A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2958S133:   42D3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2959S134:   435C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2960S135:   43E5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2961S136:   446E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2962S137:   44F7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2963S138:   4578 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2964S139:   45F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2965S140:   467A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2966S141:   46FB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2967S142:   4786 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2968S143:   4815 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2969S144:   48A2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2970S145:   492D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2971S146:   49C6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2972S147:   4A65 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2973S148:   4B1C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2974S149:   4BD3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2975S150:   4CA4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            4CAF DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4E00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2146 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4E00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 150 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
BUF:                4F00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 151 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
VARS:               5000 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           50D0 DEFINED AT LINE 18 IN ram.asm
RST08:              50D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              50D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              50D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              50D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              50D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              50DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               50DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             50DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             50E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            50E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            50E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            50E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2129 IN MAIN.asm
VDATAWIDTH:         50E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 590 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 1157 IN MAIN.asm
VNUMBASE:           50E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
VTIBPTR:            50EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2260 IN MAIN.asm
VBUFPTR:            50EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
VNEXT:              50EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2141 IN MAIN.asm
VHEAPPTR:           50F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1347 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
VRECUR:             50F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
VPOINTER:           50F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1754 IN MAIN.asm
VREMAIN:            50F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
VSAVEDIP:           50F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
VSAVEDSP:           50FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
VSAVEDNEXT:         50FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2117 IN MAIN.asm
                    > USED AT LINE 2265 IN MAIN.asm
VSAVEDBP:           50FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2266 IN MAIN.asm
VTEMP1:             5100 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
VTEMP2:             5102 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
VLASTDEF:           5104 DEFINED AT LINE 58 IN ram.asm
TBPTR:              5106 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           5108 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2104 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
HEAP:               511C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
