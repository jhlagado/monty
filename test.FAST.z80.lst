0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 52               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 52               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 52               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 52               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 52               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 52               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 52               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 52               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 52               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 52               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 50               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 52               LD   (RST08),HL   
0094   22 D2 52               LD   (RST10),HL   
0097   22 D4 52               LD   (RST18),HL   
009A   22 D6 52               LD   (RST20),HL   
009D   22 D8 52               LD   (RST28),HL   
00A0   22 DA 52               LD   (RST30),HL   
00A3   22 DE 52               LD   (INTVEC),HL   
00A6   22 E0 52               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 52               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 52               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0F               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 50                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 51                  DW   BUF   ; vBUFPtr pointer into BUF
0188   B8 0D                  DW   next   ; nNext
018A   1E 53                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ` ~ _ \
0200   88                     DB   lsb(nop_)   ; SP
0201   33                     DB   lsb(bang_)   ; !
0202   53                     DB   lsb(dquote_)   ; "
0203   47                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1B                     DB   lsb(tick_)   ; '
0208   15                     DB   lsb(lparen_)   ; (
0209   8A                     DB   lsb(rparen_)   ; )
020A   30                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   50                     DB   lsb(comma_)   ; ,
020D   56                     DB   lsb(minus_)   ; -
020E   21                     DB   lsb(dot_)   ; .
020F   85                     DB   lsb(slash_)   ; /	
0210   44                     DB   lsb(num_)   ; 0
0211   44                     DB   lsb(num_)   ; 1
0212   44                     DB   lsb(num_)   ; 2
0213   44                     DB   lsb(num_)   ; 3
0214   44                     DB   lsb(num_)   ; 4
0215   44                     DB   lsb(num_)   ; 5
0216   44                     DB   lsb(num_)   ; 6
0217   44                     DB   lsb(num_)   ; 7
0218   44                     DB   lsb(num_)   ; 8
0219   44                     DB   lsb(num_)   ; 9
021A   24                     DB   lsb(colon_)   ; :
021B   1E                     DB   lsb(semicolon_)   ; ;
021C   73                     DB   lsb(lt_)   ; <
021D   59                     DB   lsb(eq_)   ; =
021E   68                     DB   lsb(gt_)   ; >
021F   2D                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   27                     DB   lsb(upcase_)   ; A
0222   27                     DB   lsb(upcase_)   ; B
0223   27                     DB   lsb(upcase_)   ; C
0224   27                     DB   lsb(upcase_)   ; D
0225   27                     DB   lsb(upcase_)   ; E
0226   27                     DB   lsb(upcase_)   ; F
0227   27                     DB   lsb(upcase_)   ; G
0228   27                     DB   lsb(upcase_)   ; h
0229   27                     DB   lsb(upcase_)   ; I
022A   27                     DB   lsb(upcase_)   ; J
022B   27                     DB   lsb(upcase_)   ; K
022C   27                     DB   lsb(upcase_)   ; L
022D   27                     DB   lsb(upcase_)   ; M
022E   27                     DB   lsb(upcase_)   ; N
022F   27                     DB   lsb(upcase_)   ; O
0230   27                     DB   lsb(upcase_)   ; p
0231   27                     DB   lsb(upcase_)   ; Q
0232   27                     DB   lsb(upcase_)   ; R
0233   27                     DB   lsb(upcase_)   ; S
0234   27                     DB   lsb(upcase_)   ; T
0235   27                     DB   lsb(upcase_)   ; U
0236   27                     DB   lsb(upcase_)   ; V
0237   27                     DB   lsb(upcase_)   ; W
0238   27                     DB   lsb(upcase_)   ; X
0239   27                     DB   lsb(upcase_)   ; Y
023A   27                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   88                     DB   lsb(nop_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   4D                     DB   lsb(caret_)   ; ^
023F   88                     DB   lsb(nop_)   ; _
0240   53                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2A                     DB   lsb(lowcase_)   ; a
0242   2A                     DB   lsb(lowcase_)   ; b
0243   2A                     DB   lsb(lowcase_)   ; c
0244   2A                     DB   lsb(lowcase_)   ; d
0245   2A                     DB   lsb(lowcase_)   ; e
0246   2A                     DB   lsb(lowcase_)   ; f
0247   2A                     DB   lsb(lowcase_)   ; g
0248   2A                     DB   lsb(lowcase_)   ; h
0249   2A                     DB   lsb(lowcase_)   ; i
024A   2A                     DB   lsb(lowcase_)   ; j
024B   2A                     DB   lsb(lowcase_)   ; k
024C   2A                     DB   lsb(lowcase_)   ; l
024D   2A                     DB   lsb(lowcase_)   ; m
024E   2A                     DB   lsb(lowcase_)   ; n
024F   2A                     DB   lsb(lowcase_)   ; o
0250   2A                     DB   lsb(lowcase_)   ; p
0251   2A                     DB   lsb(lowcase_)   ; q
0252   2A                     DB   lsb(lowcase_)   ; r
0253   2A                     DB   lsb(lowcase_)   ; s
0254   2A                     DB   lsb(lowcase_)   ; t
0255   2A                     DB   lsb(lowcase_)   ; u
0256   2A                     DB   lsb(lowcase_)   ; v
0257   2A                     DB   lsb(lowcase_)   ; w
0258   2A                     DB   lsb(lowcase_)   ; x
0259   2A                     DB   lsb(lowcase_)   ; y
025A   2A                     DB   lsb(lowcase_)   ; z
025B   15                     DB   lsb(lbrace_)   ; {
025C   4A                     DB   lsb(pipe_)   ; |
025D   18                     DB   lsb(rbrace_)   ; }
025E   88                     DB   lsb(nop_)   ; ~
025F   88                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8D 03               JP   plus   
0303                AT_:         
0303   C3 9F 03               JP   at   
0306                AMPER_:      
0306   C3 A9 03               JP   amper   
0309                DOLLAR_:      
0309   C3 4B 0A               JP   dollar   
030C                LBRACK_:      
030C   C3 02 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 1E 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 CD 03               JP   percent   
0315                LPAREN_:      
0315                LBRACE_:      
0315   C3 FB 04               JP   lbrace   
0318                RBRACE_:      
0318   C3 64 05               JP   rbrace   
031B                TICK_:       
031B   C3 DA 05               JP   tick   
031E                SEMICOLON_:      
031E   C3 B4 06               JP   semicolon   
0321                DOT_:        
0321   C3 7E 07               JP   dot   
0324                COLON_:      
0324   C3 86 04               JP   colon   
0327                UPCASE_:      
0327   C3 68 0A               JP   upcase   
032A                LOWCASE_:      
032A   C3 6D 0A               JP   lowcase   
032D                QUESTION_:      
032D   C3 7F 0A               JP   question   
0330                STAR_:       
0330   C3 05 0B               JP   star   
0333                BANG_:       ; logical invert, any non zero value
0333   03                     INC   bc   
0334   0A                     LD   a,(bc)   
0335   FE 3D                  CP   "="   
0337   20 05                  JR   nz,not   
0339   E1                     POP   hl   
033A   D1                     POP   de   
033B   C3 DA 08               JP   notequals   
033E                NOT:         
033E   0B                     DEC   bc   
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 20                  JR   eq1   
0344                NUM_:        
0344   C3 21 0B               JP   num   
0347                HASH_:       
0347   C3 6E 04               JP   hash   
034A                PIPE_:       
034A   C3 B4 03               JP   pipe   
034D                CARET_:      
034D   C3 AC 09               JP   caret   
0350                COMMA_:      
0350   C3 50 07               JP   comma   
0353                DQUOTE_:      
0353   C3 7C 0B               JP   dquote   
0356                MINUS_:      
0356   C3 A4 0B               JP   minus   
0359                EQ_:         
0359   03                     INC   bc   
035A   0A                     LD   a,(bc)   ; is it == ?
035B   FE 3D                  CP   "="   
035D   28 04                  JR   z,eq0   ; no its equality
035F   0B                     DEC   bc   
0360   C3 BC 04               JP   assign   ; no its assignment
0363                EQ0:         
0363   E1                     POP   hl   
0364                EQ1:         
0364   D1                     POP   de   
0365   C3 D2 08               JP   equals   
0368                GT_:         
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   CA 69 0B               JP   z,shiftRight   
036F   D1                     POP   de   
0370   E1                     POP   hl   
0371   18 09                  JR   lt1   
0373                LT_:         
0373   03                     INC   bc   
0374   0A                     LD   a,(bc)   
0375   FE 3C                  CP   "<"   
0377   CA 59 0B               JP   z,shiftLeft   
037A   E1                     POP   hl   
037B   D1                     POP   de   
037C                LT1:         
037C   FE 3D                  CP   "="   
037E   CA E3 08               JP   z,lessthaneq   
0381   0B                     DEC   bc   
0382   C3 E8 08               JP   lessthan   
0385                SLASH_:      
0385   C3 EF 05               JP   slash   
0388                NOP_:        
0388   DD E9                  JP   (ix)   
038A                RPAREN_:      
038A   C3 51 0B               JP   rparen   
038D                             ;*******************************************************************
038D                             ; implementations
038D                             ;*******************************************************************
038D                PLUS:        
038D                ADD:         
038D   03                     INC   bc   
038E   0A                     LD   a,(bc)   
038F   FE 2B                  CP   "+"   ; ++ increment variable
0391   20 05                  JR   nz,add1   
0393   E1                     POP   hl   
0394   23                     INC   hl   
0395   C3 BE 04               JP   assign0   
0398                ADD1:        
0398   0B                     DEC   bc   
0399   D1                     POP   de   ; second term
039A   E1                     POP   hl   ; first term
039B   19                     ADD   hl,de   
039C                ADD3:        
039C   E5                     PUSH   hl   
039D   DD E9                  JP   (ix)   
039F                             ; @ addr
039F                             ; -- ptr
039F                AT:          
039F                ADDR:        
039F   ED 5B F2 52            LD   de,(vPointer)   
03A3   21 F2 52               LD   hl,vPointer   
03A6   C3 35 0C               JP   variable   
03A9                AMPER:       
03A9                AND:         
03A9   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03AA   E1                     POP   hl   
03AB   7B                     LD   a,e   
03AC   A5                     AND   l   
03AD   6F                     LD   l,a   
03AE   7A                     LD   a,d   
03AF   A4                     AND   h   
03B0                AND1:        
03B0   67                     LD   h,a   
03B1   E5                     PUSH   hl   
03B2   DD E9                  JP   (ix)   
03B4                PIPE:        
03B4                OR:          
03B4   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03B5   E1                     POP   hl   
03B6   7B                     LD   a,e   
03B7   B5                     OR   l   
03B8   6F                     LD   l,a   
03B9   7A                     LD   a,d   
03BA   B4                     OR   h   
03BB   18 F3                  JR   and1   
03BD                XOR:         
03BD   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03BE                XOR1:        
03BE   E1                     POP   hl   
03BF   7B                     LD   a,e   
03C0   AD                     XOR   l   
03C1   6F                     LD   l,a   
03C2   7A                     LD   a,d   
03C3   AC                     XOR   h   
03C4   67                     LD   h,a   
03C5   E5                     PUSH   hl   
03C6   DD E9                  JP   (ix)   
03C8                INVERT:      ; Bitwise INVert the top member of the stack
03C8   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03CB   18 F1                  JR   xor1   
03CD                             ; %a .. %z
03CD                             ; -- value
03CD                             ; returns value of arg
03CD                PERCENT:      
03CD                ARG:         
03CD   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D0   FD 56 05               LD   d,(iy+5)   
03D3   EB                     EX   de,hl   
03D4   7D                     LD   a,l   ; arg_list* == null, skip
03D5   B4                     OR   h   
03D6   28 1A                  JR   z,arg0a   
03D8   23                     INC   hl   ; a = num_args, hl = arg_list*
03D9   7E                     LD   a,(hl)   
03DA   23                     INC   hl   
03DB   B7                     OR   a   
03DC   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DE   5F                     LD   e,a   ; e = a = num_args
03DF   03                     INC   bc   ; a = next char = dollar_name
03E0   0A                     LD   a,(bc)   
03E1   C5                     PUSH   bc   ; save IP
03E2   43                     LD   b,e   ; b = e = num_args
03E3   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E6   FD 56 03               LD   d,(iy+3)   
03E9                ARG0:        
03E9   1B                     DEC   de   ; a = dollar_name, de = next arg*
03EA   1B                     DEC   de   
03EB   BE                     CP   (hl)   
03EC   28 09                  JR   z,arg1   
03EE   23                     INC   hl   ; hl = next arg_list*
03EF   10 F8                  DJNZ   arg0   
03F1   C1                     POP   bc   ; no match, restore IP
03F2                ARG0A:       
03F2   11 00 00               LD   de,0   ; return 0
03F5   18 08                  JR   arg1a   
03F7                ARG1:        
03F7   C1                     POP   bc   ; restore IP
03F8   EB                     EX   de,hl   ; hl = arg*
03F9   22 F2 52               LD   (vPointer),hl   ; store arg* in setter
03FC   5E                     LD   e,(hl)   
03FD   23                     INC   hl   
03FE   56                     LD   d,(hl)   ; de = arg
03FF                ARG1A:       
03FF   D5                     PUSH   de   ; push arg
0400   DD E9                  JP   (ix)   
0402                LBRACK:      
0402                ARRAYSTART:      
0402   11 00 00               LD   de,0   ; create stack frame
0405   D5                     PUSH   de   ; push null for IP
0406   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0409   FD 56 05               LD   d,(iy+5)   ; 
040C   D5                     PUSH   de   ; 
040D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0410   FD 56 03               LD   d,(iy+3)   ; 
0413   D5                     PUSH   de   ; 
0414   FD E5                  PUSH   iy   ; push BP
0416   FD 21 00 00            LD   iy,0   ; BP = SP
041A   FD 39                  ADD   iy,sp   
041C   DD E9                  JP   (ix)   
041E                RBRACK:      
041E                ARRAYEND:      
041E   FD 54                  LD   d,iyh   ; de = BP
0420   FD 5D                  LD   e,iyl   
0422   ED 43 00 53            LD   (vTemp1),bc   ; save IP
0426   62 6B                  LD   hl,de   ; hl = de = BP
0428   B7                     OR   a   
0429   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
042B   CB 3C                  SRL   h   ; 
042D   CB 1D                  RR   l   
042F   44 4D                  LD   bc,hl   ; bc = count
0431   2A F0 52               LD   hl,(vHeapPtr)   ; hl = array[-4]
0434   71                     LD   (hl),c   ; write num items in length word
0435   23                     INC   hl   
0436   70                     LD   (hl),b   
0437   23                     INC   hl   ; hl = array[0], bc = count
0438                             ; de = BP, hl = array[0], bc = count
0438   18 15                  JR   arrayEnd3   
043A                ARRAYEND1:      
043A   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043D   77                     LD   (hl),a   ; write lsb of array item
043E   23                     INC   hl   ; move to msb of array item
043F   3A E6 52               LD   a,(vDataWidth)   ; vDataWidth=1?
0442   3D                     DEC   a   
0443   28 05                  JR   z,arrayEnd2   
0445   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0448   77                     LD   (hl),a   ; write msb of array item
0449   23                     INC   hl   ; move to next word in array
044A                ARRAYEND2:      
044A   FD 2B                  DEC   iy   ; move to next word on stack
044C   FD 2B                  DEC   iy   
044E   0B                     DEC   bc   ; dec items count
044F                ARRAYEND3:      
044F   79                     LD   a,c   ; if not zero loop
0450   B0                     OR   b   
0451   20 E7                  JR   nz,arrayEnd1   
0453   EB                     EX   de,hl   ; de = end of array, hl = BP
0454   F9                     LD   sp,hl   ; sp = BP
0455   E1                     POP   hl   ; de = end of array, hl = old BP
0456   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0457   FD 62                  LD   iyh,d   
0459   FD 6B                  LD   iyl,e   
045B   D1                     POP   de   ; pop arg_list (discard)
045C   D1                     POP   de   ; pop first_arg* (discard)
045D   D1                     POP   de   ; pop IP (discard)
045E   ED 5B F0 52            LD   de,(vHeapPtr)   ; de = array[-2]
0462   13                     INC   de   
0463   13                     INC   de   
0464   D5                     PUSH   de   ; return array[0]
0465   22 F0 52               LD   (vHeapPtr),hl   ; move heap* to end of array
0468   ED 4B 00 53            LD   bc,(vTemp1)   ; restore IP
046C   DD E9                  JP   (ix)   
046E                             ; index of an array, based on vDataWidth
046E                             ; array num -- value    ; also sets vPointer to address
046E                HASH:        
046E                ARRAYINDEX:      
046E   E1                     POP   hl   ; hl = index
046F   D1                     POP   de   ; de = array
0470   3A E6 52               LD   a,(vDataWidth)   ; a = data width
0473   3D                     DEC   a   
0474   28 01                  JR   z,arrayIndex1   
0476                ARRAYINDEX0:      
0476   29                     ADD   hl,hl   ; if data width = 2 then double
0477                ARRAYINDEX1:      
0477   19                     ADD   hl,de   ; add addr
0478   22 F2 52               LD   (vPointer),hl   ; store address in setter
047B   16 00                  LD   d,0   
047D   5E                     LD   e,(hl)   
047E   B7                     OR   a   ; check data width again
047F   28 02                  JR   z,arrayIndex2   
0481   23                     INC   hl   
0482   56                     LD   d,(hl)   
0483                ARRAYINDEX2:      
0483   D5                     PUSH   de   
0484   DD E9                  JP   (ix)   
0486                             ; arg_list - parses input (ab:c)
0486                             ; names after the : represent uninitialised locals
0486                             ; return values are the state of the stack after the block ends
0486                             ; format: numLocals totNumArgs argChars...
0486                COLON:       
0486                ARGLIST:      
0486   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0489   2A F0 52               LD   hl,(vHeapPtr)   ; hl = heap*
048C   E5                     PUSH   hl   ; save start of arg_list
048D   23                     INC   hl   ; skip length fields to start of string
048E   23                     INC   hl   
048F   03                     INC   bc   ; point to next char
0490                ARGLIST1:      
0490   0A                     LD   a,(bc)   
0491   FE 3A                  CP   ":"   ; ":" switches from args to locals
0493   20 03                  JR   nz,arglist1a   
0495   14                     INC   d   ; non zero value local count acts as flag
0496   18 10                  JR   arglist3   
0498                ARGLIST1A:      
0498   FE 61                  CP   "a"   ; < "a" terminates arg_list
049A   38 0F                  JR   c,arglist4   
049C   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
049E   30 0B                  JR   nc,arglist4   
04A0                ARGLIST2:      
04A0   77                     LD   (hl),a   
04A1   23                     INC   hl   
04A2   1C                     INC   e   ; increase arg count
04A3   AF                     XOR   a   
04A4   B2                     OR   d   
04A5   28 01                  JR   z,arglist3   
04A7   14                     INC   d   ; if d > 0 increase local count
04A8                ARGLIST3:      
04A8   03                     INC   bc   ; point to next char
04A9   18 E5                  JR   arglist1   
04AB                ARGLIST4:      
04AB   0B                     DEC   bc   
04AC   AF                     XOR   a   
04AD   B2                     OR   d   
04AE   28 01                  JR   z,arglist5   
04B0   15                     DEC   d   ; remove initial inc
04B1                ARGLIST5:      
04B1   23                     INC   hl   
04B2   22 F0 52               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04B5   E1                     POP   hl   ; hl = start of arg_list
04B6   E5                     PUSH   hl   ; return start of arg_list
04B7   72                     LD   (hl),d   ; write number of locals at start - 1
04B8   23                     INC   hl   
04B9   73                     LD   (hl),e   ; write number of args + locals at start - 2
04BA   DD E9                  JP   (ix)   
04BC                             ; value _oldValue --            ; uses address in vPointer
04BC                ASSIGN:      
04BC   E1                     POP   hl   ; discard last accessed value
04BD   E1                     POP   hl   ; hl = new value
04BE                ASSIGN0:      
04BE   EB                     EX   de,hl   ; de = new value
04BF                ASSIGNX:      
04BF   2A F2 52               LD   hl,(vPointer)   
04C2   73                     LD   (hl),e   
04C3   3A E6 52               LD   a,(vDataWidth)   
04C6   3D                     DEC   a   ; is it byte?
04C7   28 02                  JR   z,assign1   
04C9   23                     INC   hl   
04CA   72                     LD   (hl),d   
04CB                ASSIGN1:      
04CB   DD E9                  JP   (ix)   
04CD                             ; /ab absolute
04CD                             ; num -- num
04CD                ABSOLUTE:      
04CD   E1                     POP   hl   
04CE   CB 7C                  BIT   7,h   
04D0   C8                     RET   z   
04D1   AF                     XOR   a   
04D2   95                     SUB   l   
04D3   6F                     LD   l,a   
04D4   9F                     SBC   a,a   
04D5   94                     SUB   h   
04D6   67                     LD   h,a   
04D7   E5                     PUSH   hl   
04D8   DD E9                  JP   (ix)   
04DA                             ; /ad addrOf
04DA                             ; char -- addr
04DA                ADDROF:      
04DA   E1                     POP   hl   ; a = char
04DB   7D                     LD   a,l   
04DC   FE 7B                  CP   "z"+1   ; if a > z then exit
04DE   30 19                  JR   nc,addrOf2   
04E0   D6 41                  SUB   "A"   ; a - 65
04E2   38 15                  JR   c,addrOf2   ; if < A then exit
04E4   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
04E6   38 06                  JR   c,addrOf1   
04E8   D6 06                  SUB   "a"-("Z"+1)   
04EA   FE 1A                  CP   "Z"-"A"+1   
04EC   38 0B                  JR   c,addrOf2   ; if < a then exit
04EE                ADDROF1:      
04EE   87                     ADD   a,a   ; double a
04EF   21 00 52               LD   hl,VARS   ; hl = VARS + a
04F2   85                     ADD   a,l   
04F3   6F                     LD   l,a   
04F4   3E 00                  LD   a,0   
04F6   8C                     ADC   a,h   
04F7   67                     LD   h,a   
04F8   E5                     PUSH   hl   
04F9                ADDROF2:      
04F9   DD E9                  JP   (ix)   
04FB                LBRACE:      
04FB                BLOCKSTART:      
04FB   C5                     PUSH   bc   ; return pointer to first { of block
04FC   03                     INC   bc   
04FD   16 01                  LD   d,1   ; nesting: count first parenthesis
04FF                BLOCKSTART1:      ; Skip to end of definition
04FF   0A                     LD   a,(bc)   ; Get the next character
0500   03                     INC   bc   ; Point to next character
0501   FE 21                  CP   " " + 1   ; ignore whitespace
0503   38 FA                  JR   c,blockStart1   
0505   FE 29                  CP   ")"   
0507   28 2D                  JR   z,blockStart4   
0509   FE 7D                  CP   "}"   
050B   28 29                  JR   z,blockStart4   
050D   FE 5D                  CP   "]"   
050F   28 25                  JR   z,blockStart4   
0511   FE 28                  CP   "("   
0513   28 16                  JR   z,blockStart2   
0515   FE 7B                  CP   "{"   
0517   28 12                  JR   z,blockStart2   
0519   FE 5B                  CP   "["   
051B   28 0E                  JR   z,blockStart2   
051D   FE 27                  CP   "'"   
051F   28 0D                  JR   z,blockStart3   
0521   FE 60                  CP   "`"   
0523   28 09                  JR   z,blockStart3   
0525   FE 22                  CP   DQ   
0527   28 05                  JR   z,blockStart3   
0529   18 D4                  JR   blockStart1   
052B                BLOCKSTART2:      
052B   14                     INC   d   
052C   18 D1                  JR   blockStart1   
052E                BLOCKSTART3:      
052E   3E 80                  LD   a,$80   
0530   AA                     XOR   d   
0531   57                     LD   d,a   
0532   20 CB                  JR   nz,blockStart1   
0534   18 03                  JR   blockStart5   
0536                BLOCKSTART4:      
0536   15                     DEC   d   
0537   20 C6                  JR   nz,blockStart1   ; get the next element
0539                BLOCKSTART5:      
0539   60 69                  LD   hl,bc   ; hl = IP
053B   11 1E 53               LD   de,HEAP   ; is IP pointing to object in heap
053E   B7                     OR   a   ; IP - HEAP
053F   ED 52                  SBC   hl,de   
0541   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0543   28 1C                  JR   z,blockStart6   
0545   60 69                  LD   hl,bc   ; hl = IP
0547   D1                     POP   de   ; de = block*
0548   ED 43 00 53            LD   (vTemp1),bc   ; save IP
054C   B7                     OR   a   ; bc = size
054D   ED 52                  SBC   hl,de   
054F   44 4D                  LD   bc,hl   
0551   EB                     EX   de,hl   ; hl = block* de = heap*
0552   ED 5B F0 52            LD   de,(vHeapPtr)   
0556   D5                     PUSH   de   ; return hblock*
0557   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0559   ED 53 F0 52            LD   (vHeapPtr),de   ; heap* += size
055D   ED 4B 00 53            LD   bc,(vTemp1)   ; restore IP
0561                BLOCKSTART6:      
0561   0B                     DEC   bc   ; balanced, exit
0562   DD E9                  JP   (ix)   
0564                RBRACE:      
0564                BLOCKEND:      
0564   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0567   FD 56 01               LD   d,(iy+1)   
056A   ED 53 00 53            LD   (vTemp1),de   
056E   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0571   FD 56 07               LD   d,(iy+7)   
0574   ED 53 02 53            LD   (vTemp2),de   
0578   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
057B   FD 56 03               LD   d,(iy+3)   
057E   EB                     EX   de,hl   
057F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0582   FD 56 01               LD   d,(iy+1)   
0585   13                     INC   de   ; for carry flag <=
0586   B7                     OR   a   
0587   ED 52                  SBC   hl,de   
0589   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
058B   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
058D   FD 5D                  LD   e,iyl   
058F   21 08 00               LD   hl,8   
0592   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0593   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0594   18 0C                  JR   blockEnd2   
0596                BLOCKEND1:      ; same scope
0596   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0599   FD 56 03               LD   d,(iy+3)   
059C   EB                     EX   de,hl   
059D   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
059F   FD 5D                  LD   e,iyl   
05A1   EB                     EX   de,hl   
05A2                BLOCKEND2:      
05A2   44 4D                  LD   bc,hl   ; bc = hl = BP
05A4   B7                     OR   a   ; hl = BP - SP = count
05A5   ED 72                  SBC   hl,sp   
05A7   7D                     LD   a,l   
05A8   B4                     OR   h   
05A9   28 09                  JR   z,blockEnd3   
05AB   C5                     PUSH   bc   ; bc = count, hl = BP
05AC   44 4D                  LD   bc,hl   
05AE   E1                     POP   hl   
05AF   2B                     DEC   hl   ; hl = BP-1
05B0   1B                     DEC   de   ; de = args*-1
05B1   ED B8                  LDDR      
05B3   13                     INC   de   
05B4                BLOCKEND3:      
05B4   EB                     EX   de,hl   ; sp = de = new tos*
05B5   F9                     LD   sp,hl   
05B6   ED 4B 02 53            LD   bc,(vTemp2)   
05BA   FD 2A 00 53            LD   iy,(vTemp1)   
05BE   DD E9                  JP   (ix)   
05C0                             ; /br break from loop
05C0                             ; --
05C0                BREAK:       
05C0   E1                     POP   hl   
05C1   7D                     LD   a,l   
05C2   B4                     OR   h   
05C3   28 02                  JR   z,break1   
05C5   DD E9                  JP   (ix)   
05C7                BREAK1:      
05C7   FD 5D                  LD   e,iyl   ; get block* just under stack frame
05C9   FD 54                  LD   d,iyh   
05CB   21 08 00               LD   hl,8   
05CE   19                     ADD   hl,de   
05CF   23                     INC   hl   
05D0   23                     INC   hl   
05D1   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
05D4   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
05D7   C3 64 05               JP   blockEnd   
05DA                TICK:        
05DA                CHAR:        
05DA   21 00 00               LD   hl,0   ; if "" is empty or null
05DD                CHAR1:       
05DD   03                     INC   bc   ; point to next char
05DE   0A                     LD   a,(bc)   
05DF   FE 27                  CP   "'"   ; ' is the terminator
05E1   28 09                  JR   z,char3   
05E3   FE 5C                  CP   $5c   ; \ is the escape
05E5   20 02                  JR   nz,char2   
05E7   03                     INC   bc   
05E8   0A                     LD   a,(bc)   
05E9                CHAR2:       
05E9   6F                     LD   l,a   
05EA   18 F1                  JR   char1   
05EC                CHAR3:       
05EC   E5                     PUSH   hl   
05ED   DD E9                  JP   (ix)   
05EF                SLASH:       
05EF                COMMAND:      
05EF   CD 54 0C               CALL   jumpTable   
05F2   2F                     DB   "/"   ; // comment
05F3   AB 06                  DW   comment   
05F5   61                     DB   "a"   
05F6   2E 06                  DW   command_a   
05F8   62                     DB   "b"   
05F9   3A 06                  DW   command_b   
05FB   63                     DB   "c"   ; /c chars
05FC   9D 06                  DW   chars   
05FE   64                     DB   "d"   ; /d decimal
05FF   70 07                  DW   decimal   
0601   66                     DB   "f"   
0602   46 06                  DW   command_f   
0604   68                     DB   "h"   ; /h hexadecimal
0605   78 07                  DW   hexadecimal   
0607   69                     DB   "i"   
0608   52 06                  DW   command_i   
060A   6B                     DB   "k"   ; /k key
060B   A3 0A                  DW   key   
060D   6C                     DB   "l"   
060E   5E 06                  DW   command_l   
0610   6D                     DB   "m"   
0611   67 06                  DW   command_m   
0613   6E                     DB   "n"   ; /n numbers
0614   A5 06                  DW   numbers   
0616   6F                     DB   "o"   ; /o output
0617   B5 0A                  DW   output   
0619   70                     DB   "p"   
061A   70 06                  DW   command_p   
061C   72                     DB   "r"   
061D   7F 06                  DW   command_r   
061F   73                     DB   "s"   ; /s size
0620   03 0C                  DW   size   
0622   74                     DB   "t"   ; /t true
0623   F0 08                  DW   true1   
0625   76                     DB   "v"   
0626   88 06                  DW   command_v   
0628   78                     DB   "x"   ; /x xor
0629   BD 03                  DW   xor   
062B   00                     DB   NUL   
062C   5F 07                  DW   div   
062E                COMMAND_A:      
062E   CD 54 0C               CALL   jumpTable   
0631   62                     DB   "b"   ; /ab absolute
0632   CD 04                  DW   absolute   
0634   64                     DB   "d"   ; /ad address of
0635   DA 04                  DW   addrOf   
0637   00                     DB   NUL   
0638   FC 08                  DW   error1   
063A                COMMAND_B:      
063A   CD 54 0C               CALL   jumpTable   
063D   72                     DB   "r"   ; /br break
063E   C0 05                  DW   break   
0640   79                     DB   "y"   ; /by cold boot
0641   1B 0D                  DW   coldStart   
0643   00                     DB   NUL   
0644   FC 08                  DW   error1   
0646                COMMAND_F:      
0646   CD 54 0C               CALL   jumpTable   
0649   65                     DB   "e"   ; /fe forEach
064A   03 09                  DW   forEach   
064C   73                     DB   "s"   ; /fs funcSrc
064D   71 09                  DW   funcSrc   
064F   00                     DB   NUL   
0650   F6 08                  DW   false1   
0652                COMMAND_I:      
0652   CD 54 0C               CALL   jumpTable   
0655   6E                     DB   "n"   ; /in input
0656   98 0A                  DW   input   
0658   76                     DB   "v"   ; /iv invert
0659   C8 03                  DW   invert   
065B   00                     DB   NUL   
065C   FC 08                  DW   error1   
065E                COMMAND_L:      
065E   CD 54 0C               CALL   jumpTable   
0661   69                     DB   "i"   ; /li literal
0662   AC 0A                  DW   literal   
0664   00                     DB   NUL   
0665   FC 08                  DW   error1   
0667                COMMAND_M:      
0667   CD 54 0C               CALL   jumpTable   
066A   70                     DB   "p"   ; /mp map
066B   BE 0A                  DW   map   
066D   00                     DB   NUL   
066E   FC 08                  DW   error1   
0670                COMMAND_P:      
0670   CD 54 0C               CALL   jumpTable   
0673   62                     DB   "b"   ; /pb print buffer
0674   C3 0B                  DW   printBuffer   
0676   63                     DB   "c"   ; /pc print chars
0677   E9 0B                  DW   printChars   
0679   6B                     DB   "k"   ; /pk print stack
067A   FB 0B                  DW   printStack   
067C   00                     DB   NUL   
067D   FC 08                  DW   error1   
067F                COMMAND_R:      
067F   CD 54 0C               CALL   jumpTable   
0682   65                     DB   "e"   ; /re remainder
0683   FD 0B                  DW   remain   
0685   00                     DB   NUL   
0686   FC 08                  DW   error1   
0688                COMMAND_V:      
0688   CD 54 0C               CALL   jumpTable   
068B   62                     DB   "b"   
068C   1A 0C                  DW   varBufPtr   
068E   68                     DB   "h"   
068F   23 0C                  DW   varHeapPtr   
0691   74                     DB   "t"   
0692   2C 0C                  DW   varTIBPtr   
0694   42                     DB   "B"   
0695   0B 0C                  DW   constBufStart   
0697   54                     DB   "T"   
0698   15 0C                  DW   constTIBStart   
069A   00                     DB   NUL   
069B   FC 08                  DW   error1   
069D                CHARS:       
069D   21 01 00               LD   hl,1   
06A0                CHARS1:      
06A0   22 E6 52               LD   (vDataWidth),hl   
06A3   DD E9                  JP   (ix)   
06A5                NUMBERS:      
06A5   21 02 00               LD   hl,2   
06A8   C3 A0 06               JP   chars1   
06AB                COMMENT:      
06AB   03                     INC   bc   ; point to next char
06AC   0A                     LD   a,(bc)   
06AD   FE 20                  CP   " "   ; terminate on any char less than SP
06AF   30 FA                  JR   nc,comment   
06B1   0B                     DEC   bc   
06B2   DD E9                  JP   (ix)   
06B4                             ; ";" createFunc
06B4                             ; arg_list* block* -- func*
06B4                SEMICOLON:      
06B4                CREATEFUNC:      
06B4   ED 43 00 53            LD   (vTemp1),bc   ; save IP
06B8   E1                     POP   hl   ; hl = block*
06B9   22 02 53               LD   (vTemp2),hl   ; save block*
06BC   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
06BF   FD 56 05               LD   d,(iy+5)   
06C2   7B                     LD   a,e   ; if arg_list == null then make a func
06C3   B2                     OR   d   
06C4   20 09                  JR   nz,createFunc0   
06C6   21 00 00               LD   hl,0   ; partial_array = null
06C9   ED 5B F0 52            LD   de,(vHeapPtr)   ; de = compile*
06CD   18 65                  JR   createFunc5   
06CF                CREATEFUNC0:      
06CF   E1                     POP   hl   ; hl = inner_arg_list*
06D0   E5                     PUSH   hl   ; save inner_arg_list
06D1   ED 5B F0 52            LD   de,(vHeapPtr)   ; de = compile*
06D5   7E                     LD   a,(hl)   ; compile inner_num_locals
06D6   4F                     LD   c,a   ; b = inner_num_locals
06D7   12                     LD   (de),a   
06D8   23                     INC   hl   
06D9   13                     INC   de   
06DA   7E                     LD   a,(hl)   ; compile inner_length
06DB   12                     LD   (de),a   
06DC   91                     SUB   c   ; a = inner_num args
06DD   23                     INC   hl   
06DE   13                     INC   de   
06DF   B7                     OR   a   ; compile args if inner_length > 0
06E0   28 05                  JR   z,createFunc1   
06E2   4F                     LD   c,a   ; bc = a
06E3   06 00                  LD   b,0   
06E5   ED B0                  LDIR      
06E7                CREATEFUNC1:      
06E7   EB                     EX   de,hl   ; hl = outer_arg_list
06E8   FD 5E 04               LD   e,(iy+4)   
06EB   FD 56 05               LD   d,(iy+5)   
06EE   EB                     EX   de,hl   
06EF   23                     INC   hl   ; a = outer_length
06F0   7E                     LD   a,(hl)   
06F1   23                     INC   hl   
06F2   B7                     OR   a   
06F3   28 05                  JR   z,createFunc2   
06F5   4F                     LD   c,a   
06F6   06 00                  LD   b,0   
06F8   ED B0                  LDIR      ; append outer_args
06FA                CREATEFUNC2:      ; a = outer_length
06FA   47                     LD   b,a   ; b = a = outer_length
06FB   2A F0 52               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
06FE   23                     INC   hl   
06FF   7E                     LD   a,(hl)   ; add outer_length to new length
0700   80                     ADD   a,b   
0701   77                     LD   (hl),a   
0702   2B                     DEC   hl   
0703   78                     LD   a,b   ; save outer_length in a'
0704   08                     EX   af,af'   
0705   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0706   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0707   B7                     OR   a   
0708   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
070A   4F                     LD   c,a   ; c = inner_num_locals
070B   06 00                  LD   b,0   ; bc = inner_num_locals
070D   23                     INC   hl   ; a = inner_length
070E   7E                     LD   a,(hl)   
070F   91                     SUB   c   ; a = inner_num_args
0710   23                     INC   hl   ; hl = inner_arg_chars
0711   85                     ADD   a,l   ; hl += a
0712   6F                     LD   l,a   
0713   3E 00                  LD   a,0   
0715   84                     ADD   a,h   
0716   67                     LD   h,a   
0717   ED B0                  LDIR      ; append inner_locals
0719                CREATEFUNC2A:      
0719   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
071A   12                     LD   (de),a   ; compile partial_array length field
071B   13                     INC   de   
071C   AF                     XOR   a   
071D   12                     LD   (de),a   
071E   13                     INC   de   
071F   D5                     PUSH   de   ; push partial_array*
0720   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0721   FD 5E 02               LD   e,(iy+2)   
0724   FD 56 03               LD   d,(iy+3)   
0727   EB                     EX   de,hl   
0728                CREATEFUNC3:      
0728   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0729   4E                     LD   c,(hl)   
072A   2B                     DEC   hl   
072B   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
072C   12                     LD   (de),a   ; write LSB and MSB to partial_array*
072D   13                     INC   de   
072E   79                     LD   a,c   
072F   12                     LD   (de),a   
0730   13                     INC   de   
0731   10 F5                  DJNZ   createFunc3   ; b = outer_length
0733                CREATEFUNC4:      
0733   E1                     POP   hl   ; hl = partial_array*
0734                CREATEFUNC5:      
0734   C1                     POP   bc   ; bc = new_arg_list*
0735   D5                     PUSH   de   ; return new func*
0736   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0737   73                     LD   (hl),e   ; compile partial_array* to func
0738   23                     INC   hl   
0739   72                     LD   (hl),d   
073A   23                     INC   hl   
073B   ED 5B 02 53            LD   de,(vTemp2)   ; de = block*
073F   73                     LD   (hl),e   ; compile block* to func
0740   23                     INC   hl   
0741   72                     LD   (hl),d   
0742   23                     INC   hl   
0743   71                     LD   (hl),c   ; compile new_arg_list* to func
0744   23                     INC   hl   
0745   70                     LD   (hl),b   
0746   23                     INC   hl   
0747   22 F0 52               LD   (vHeapPtr),hl   ; bump heap ptr
074A   ED 4B 00 53            LD   bc,(vTemp1)   ; restore IP
074E   DD E9                  JP   (ix)   
0750                             ; , discard stack item
0750                             ; x y -- x
0750                COMMA:       
0750                DISCARD:      
0750   FD 54                  LD   d,iyh   ; limit this to SP <= BP
0752   FD 5D                  LD   e,iyl   
0754   EB                     EX   de,hl   
0755   B7                     OR   a   
0756   ED 72                  SBC   hl,sp   
0758   CB 7C                  BIT   7,h   
075A   20 01                  JR   nz,discard1   
075C   E1                     POP   hl   
075D                DISCARD1:      
075D   DD E9                  JP   (ix)   
075F                DIV:         
075F   D1                     POP   de   
0760   E1                     POP   hl   
0761   C5                     PUSH   bc   ; preserve the IP
0762   44 4D                  LD   bc,hl   
0764   CD B9 08               CALL   divide   
0767   EB                     EX   de,hl   
0768   ED 53 F4 52            LD   (vRemain),de   
076C   C1                     POP   bc   
076D   C3 9C 03               JP   add3   
0770                DECIMAL:      
0770   21 0A 00               LD   hl,10   
0773                DECIMAL1:      
0773   22 E8 52               LD   (vNumBase),hl   
0776   DD E9                  JP   (ix)   
0778                HEXADECIMAL:      
0778   21 10 00               LD   hl,16   
077B   C3 73 07               JP   decimal1   
077E                DOT:         
077E   CD 54 0C               CALL   jumpTable   
0781   61                     DB   "a"   ; .a print array
0782   90 07                  DW   bufferArray   
0784   63                     DB   "c"   ; .c print char
0785   98 08                  DW   bufferChar   
0787   73                     DB   "s"   ; .s print string
0788   7E 08                  DW   bufferString   
078A   78                     DB   "x"   ; .x print x chars
078B   9D 08                  DW   bufferXChars   
078D   00                     DB   NUL   ; .  print number
078E   D9 07                  DW   bufferNumber   
0790                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
0790                BUFFERARRAY:      
0790   CD AC 09               CALL   go   
0793   00 00                  DW   NUL   
0795   9E 07                  DW   bufferArrayM_1572S1057   
0797   99 07                  DW   $+2   
0799   02                     DB   2   
079A   03 61 62 63            .PSTR   "abc"   
079E                BUFFERARRAYM_1572S1057:      
079E   7B 22 5B 20 22 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 22 5D 22 2E 73 7D 00 00 .CSTR   "{",DQ,"[ ",DQ,".s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ",DQ,"]",DQ,".s}",0   
07D9                             ; /bd buffer decimal
07D9                             ; value --
07D9                BUFFERNUMBER:      
07D9   3A E8 52               LD   a,(vNumBase)   
07DC   FE 10                  CP   16   
07DE   28 66                  JR   z,bufferHex   ; else falls through
07E0                             ; /bd buffer decimal
07E0                             ; value --
07E0                BUFFERDEC:      
07E0   ED 5B EC 52            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
07E4   D9                     EXX      
07E5   E1                     POP   hl   ; hl = value
07E6   CD FA 07               CALL   bufferDec0   
07E9   D9                     EXX      ; de = buffer*' bc = IP
07EA   3E 20                  LD   a," "   ; append space to buffer
07EC   12                     LD   (de),a   
07ED   1C                     INC   e   ; buffer*++, wraparound
07EE   CC 3D 0C               CALL   z,flushBuffer   
07F1   2A EC 52               LD   hl,(vBufPtr)   ; hl = buffer*
07F4   ED 53 EC 52            LD   (vBufPtr),de   ; update buffer* with buffer*'
07F8   DD E9                  JP   (ix)   
07FA                             ; hl = value
07FA                             ; de' = buffer*
07FA                             ; a, bc, de, hl destroyed
07FA                BUFFERDEC0:      
07FA   CB 7C                  BIT   7,h   
07FC   28 0C                  JR   z,bufferDec1   
07FE   D9                     EXX      
07FF   3E 2D                  LD   a,"-"   
0801   12                     LD   (de),a   
0802   13                     INC   de   
0803   D9                     EXX      
0804   AF                     XOR   a   
0805   95                     SUB   l   
0806   6F                     LD   l,a   
0807   9F                     SBC   a,a   
0808   94                     SUB   h   
0809   67                     LD   h,a   
080A                BUFFERDEC1:      
080A   0E 00                  LD   c,0   ; leading zeros flag = false
080C   11 F0 D8               LD   de,-10000   
080F   CD 2A 08               CALL   bufferDec2   
0812   11 18 FC               LD   de,-1000   
0815   CD 2A 08               CALL   bufferDec2   
0818   11 9C FF               LD   de,-100   
081B   CD 2A 08               CALL   bufferDec2   
081E   1E F6                  LD   e,-10   
0820   CD 2A 08               CALL   bufferDec2   
0823   0C                     INC   c   ; flag = true for at least digit
0824   1E FF                  LD   e,-1   
0826   CD 2A 08               CALL   bufferDec2   
0829   C9                     RET      
082A                BUFFERDEC2:      
082A   06 2F                  LD   b,"0"-1   
082C                BUFFERDEC3:      
082C   04                     INC   b   
082D   19                     ADD   hl,de   
082E   38 FC                  JR   c,bufferDec3   
0830   ED 52                  SBC   hl,de   
0832   3E 30                  LD   a,"0"   
0834   B8                     CP   b   
0835   20 05                  JR   nz,bufferDec4   
0837   AF                     XOR   a   
0838   B1                     OR   c   
0839   C8                     RET   z   
083A   18 01                  JR   bufferDec5   
083C                BUFFERDEC4:      
083C   0C                     INC   c   
083D                BUFFERDEC5:      
083D   78                     LD   a,b   
083E   D9                     EXX      
083F   12                     LD   (de),a   
0840   1C                     INC   e   
0841   CC 3D 0C               CALL   z,flushBuffer   
0844   D9                     EXX      
0845   C9                     RET      
0846                             ; /bh buffer hex
0846                             ; value --
0846                BUFFERHEX:      
0846   E1                     POP   hl   ; hl = value
0847   ED 5B EC 52            LD   de,(vBufPtr)   
084B   3E 24                  LD   a,"$"   ; # prefix
084D   12                     LD   (de),a   
084E   1C                     INC   e   ; buffer*++, wraparound
084F   CC 3D 0C               CALL   z,flushBuffer   
0852   7C                     LD   a,h   
0853   CD 67 08               CALL   bufferHex1   
0856   7D                     LD   a,l   
0857   CD 67 08               CALL   bufferHex1   
085A   3E 20                  LD   a," "   ; append space to buffer
085C   12                     LD   (de),a   
085D   1C                     INC   e   ; buffer*++, wraparound
085E   CC 3D 0C               CALL   z,flushBuffer   
0861   ED 53 EC 52            LD   (vBufPtr),de   
0865   DD E9                  JP   (ix)   
0867                BUFFERHEX1:      
0867   F5                     PUSH   af   
0868   1F                     RRA      
0869   1F                     RRA      
086A   1F                     RRA      
086B   1F                     RRA      
086C   CD 70 08               CALL   bufferHex2   
086F   F1                     POP   af   
0870                BUFFERHEX2:      
0870   E6 0F                  AND   0x0F   
0872   C6 90                  ADD   a,0x90   
0874   27                     DAA      
0875   CE 40                  ADC   a,0x40   
0877   27                     DAA      
0878   12                     LD   (de),a   
0879   1C                     INC   e   ; buffer*++, wraparound
087A   CC 3D 0C               CALL   z,flushBuffer   
087D   C9                     RET      
087E                             ; /bs buffered string
087E                             ; string* --
087E                BUFFERSTRING:      
087E   E1                     POP   hl   ; hl = string*
087F   ED 5B EC 52            LD   de,(vBufPtr)   ; de = buffer*
0883   18 06                  JR   bufferString1   
0885                BUFFERSTRING0:      
0885   12                     LD   (de),a   ; a -> buffer*
0886   1C                     INC   e   ; buffer*++, wraparound
0887   CC 3D 0C               CALL   z,flushBuffer   
088A   23                     INC   hl   
088B                BUFFERSTRING1:      
088B   7E                     LD   a,(hl)   ; a <- string*
088C   B7                     OR   a   ; if NUL exit loop
088D   20 F6                  JR   nz,bufferString0   
088F   2A EC 52               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
0892   ED 53 EC 52            LD   (vBufPtr),de   ; save buffer*' in pointer
0896   DD E9                  JP   (ix)   
0898                             ; /bc buffer char
0898                             ; char --
0898                BUFFERCHAR:      
0898   21 01 00               LD   hl,1   
089B   18 01                  JR   bufferXChars0   
089D                             ; /bx buffered x chars
089D                             ; char length --
089D                BUFFERXCHARS:      
089D   E1                     POP   hl   ; hl = length
089E                BUFFERXCHARS0:      
089E   D1                     POP   de   ; a' = char
089F   7B                     LD   a,e   
08A0   08                     EX   af,af'   
08A1   ED 5B EC 52            LD   de,(vBufPtr)   ; de = buffer*
08A5   18 08                  JR   bufferXChars2   
08A7                BUFFERXCHARS1:      
08A7   08                     EX   af,af'   
08A8   12                     LD   (de),a   
08A9   08                     EX   af,af'   
08AA   1C                     INC   e   ; buffer*++, wraparound
08AB   CC 3D 0C               CALL   z,flushBuffer   
08AE   2B                     DEC   hl   
08AF                BUFFERXCHARS2:      
08AF   7D                     LD   a,l   
08B0   B4                     OR   h   
08B1   20 F4                  JR   nz,bufferXChars1   
08B3   ED 53 EC 52            LD   (vBufPtr),de   ; save buffer*'
08B7   DD E9                  JP   (ix)   
08B9                             ; division subroutine.
08B9                             ; bc: divisor, de: dividend, hl: remainder
08B9                DIVIDE:      
08B9   21 00 00               LD   hl,0   ; zero the remainder
08BC   3E 10                  LD   a,16   ; loop counter
08BE                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
08BE   CB 21                  SLA   c   
08C0   CB 10                  RL   b   
08C2   ED 6A                  ADC   hl,hl   
08C4   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
08C6   38 03                  JR   c,divide2   
08C8   0C                     INC   c   
08C9   18 01                  JR   divide3   
08CB                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
08CB   19                     ADD   hl,de   
08CC                DIVIDE3:      
08CC   3D                     DEC   a   
08CD   20 EF                  JR   nz,divide1   
08CF   50 59                  LD   de,bc   ; result from bc to de
08D1   C9                     RET      
08D2                             ; hl = value1, de = value2
08D2                             ; hl = result
08D2                EQUALS:      
08D2   B7                     OR   a   ; reset the carry flag
08D3   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
08D5   28 19                  JR   z,true1   
08D7   C3 F6 08               JP   false1   
08DA                NOTEQUALS:      
08DA   B7                     OR   a   ; reset the carry flag
08DB   ED 52                  SBC   hl,de   
08DD   C2 F0 08               JP   nz,true1   
08E0   C3 F6 08               JP   false1   
08E3                             ; hl = value1 de = value2
08E3                             ; hl = result
08E3                LESSTHANEQ:      
08E3   B7                     OR   a   
08E4   ED 52                  SBC   hl,de   
08E6   18 05                  JR   lessthan1   
08E8                             ; hl = value1 de = value2
08E8                             ; hl = result
08E8                LESSTHAN:      
08E8   B7                     OR   a   
08E9   ED 52                  SBC   hl,de   
08EB   28 09                  JR   z,false1   
08ED                LESSTHAN1:      
08ED   FA F6 08               JP   m,false1   
08F0                TRUE1:       
08F0   21 FF FF               LD   hl,TRUE   
08F3   E5                     PUSH   hl   
08F4   DD E9                  JP   (ix)   
08F6                NULL1:       
08F6                FALSE1:      
08F6   21 00 00               LD   hl,FALSE   
08F9   E5                     PUSH   hl   
08FA   DD E9                  JP   (ix)   
08FC                ERROR1:      
08FC   21 01 00               LD   hl,1   ; error 1: unknown command
08FF   E5                     PUSH   hl   
0900   C3 D8 0D               JP   error   
0903                             ; /fe forEach
0903                             ; :o -- :s
0903                          ;*Macro unroll: FUNC forEach, 0, "p"                       ; :p proc
0903                FOREACH:      ; :p proc
0903   CD AC 09               CALL   go   
0906   00 00                  DW   NUL   
0908   0F 09                  DW   forEachM_1794S1297   
090A   0C 09                  DW   $+2   
090C   00                     DB   0   
090D   01 70                  .PSTR   "p"   
090F                FOREACHM_1794S1297:      
090F   7B                     DB   "{"   
0910   3A 73 3A 54 7B         DB   ":s:T{"   ; :s source
0915   5B 30 5D 25 54 3D      DB   "[0]%T="   
091B   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0923   3A 64 74 7B            DB   ":dt{"   
0927   7B 20 30 25 74 3D 3D 2F 62 72 20 25 64 20 25 54 30 23 3D 20 7D DB   "{ 0%t==/br %d %T0#= }"   ; 0: store talkback
093C   7B 20 31 25 74 3D 3D 2F 62 72 20 25 64 20 25 70 5E 20 7D DB   "{ 1%t==/br %d %p^ }"   ; 1: send data to proc
094F   7B 20 32 25 74 21 3D 2F 62 72 20 30 20 31 20 25 54 30 23 5E 20 7D DB   "{ 2%t!=/br 0 1 %T0#^ }"   ; 0 or 1: get next data item
0965   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   ; init source
096D   7D 3B                  DB   "};"   
096F   7D                     DB   "}"   
0970   00                     DB   0   
0971                             ; ; /fs funcSrc
0971                             ; ; func -- src
0971                             ; FUNC funcSrc, 1, "f"                      ; :f func or block
0971                             ; db "{"
0971                             ; db    ":kt{"                              ; :kt sink, type
0971                             ; db         "0%t==/br"                     ; break if t != 0
0971                             ; db         ":dt{"
0971                             ; db             "1%t==/br %f^ 1 %k^"       ; if t == 1 send data to sink
0971                             ; db         "}; 0 %k^"                      ; init sink
0971                             ; db     "};"
0971                             ; db "}"
0971                             ; db 0
0971                             ; ; /fs funcSrc
0971                             ; ; func -- src
0971                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0971                FUNCSRC:      ; :f func or block
0971   CD AC 09               CALL   go   
0974   00 00                  DW   NUL   
0976   7D 09                  DW   funcSrcM_1821S1326   
0978   7A 09                  DW   $+2   
097A   00                     DB   0   
097B   01 66                  .PSTR   "f"   
097D                FUNCSRCM_1821S1326:      
097D   7B                     DB   "{"   
097E   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0982   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
098A   3A 64 74 7B            DB   ":dt{"   
098E   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
09A0   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
09A8   7D 3B                  DB   "};"   
09AA   7D                     DB   "}"   
09AB   00                     DB   0   
09AC                             ; execute a block of code which ends with }
09AC                             ; creates a root scope if BP == stack
09AC                             ; else uses outer scope
09AC                CARET:       
09AC                GO:          
09AC   D1                     POP   de   ; de = block*
09AD                GO1:         
09AD   7B                     LD   a,e   ; if block* == null, exit
09AE   B2                     OR   d   
09AF   20 02                  JR   nz,go2   
09B1   DD E9                  JP   (ix)   
09B3                GO2:         
09B3   1A                     LD   a,(de)   
09B4   FE 7B                  CP   "{"   
09B6   28 06                  JR   z,goBlock   
09B8   FE 28                  CP   "("   
09BA   C2 F1 09               JP   nz,goFunc   
09BD                             ; inc de                      ; de is the address to jump back to
09BD   D5                     PUSH   de   ; push de just before stack frame
09BE                GOBLOCK:      
09BE   ED 53 00 53            LD   (vTemp1),de   ; save de
09C2   21 00 50               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
09C5   FD 54                  LD   d,iyh   
09C7   FD 5D                  LD   e,iyl   
09C9   B7                     OR   a   ; if stack* == BP then this is the root_scope
09CA   ED 52                  SBC   hl,de   
09CC   ED 5B 00 53            LD   de,(vTemp1)   ; restore de
09D0   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
09D1   B4                     OR   h   
09D2   3E 00                  LD   a,0   
09D4   28 6A                  JR   z,goFunc8   
09D6   C5                     PUSH   bc   ; push IP
09D7   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
09DA   FD 46 05               LD   b,(iy+5)   
09DD   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
09E0   FD 66 03               LD   h,(iy+3)   
09E3                GOBLOCK2:      
09E3   C5                     PUSH   bc   ; arg_list*
09E4   E5                     PUSH   hl   ; first_arg*
09E5   FD E5                  PUSH   iy   ; push BP
09E7   FD 21 00 00            LD   iy,0   ; BP = SP
09EB   FD 39                  ADD   iy,sp   
09ED   42 4B                  LD   bc,de   ; bc = de = block*-1
09EF   DD E9                  JP   (ix)   
09F1                GOFUNC:      ; execute func
09F1   EB                     EX   de,hl   ; hl = func*
09F2   5E                     LD   e,(hl)   ; de = partial_array*
09F3   23                     INC   hl   
09F4   56                     LD   d,(hl)   
09F5   23                     INC   hl   
09F6   7B                     LD   a,e   ; if partial_array* == null skip
09F7   B2                     OR   d   
09F8   28 21                  JR   z,goFunc3   
09FA   ED 43 00 53            LD   (vTemp1),bc   
09FE   22 02 53               LD   (vTemp2),hl   ; save bc,hl
0A01   EB                     EX   de,hl   ; hl = partial_array*
0A02   2B                     DEC   hl   ; bc = count
0A03   46                     LD   b,(hl)   
0A04   2B                     DEC   hl   
0A05   4E                     LD   c,(hl)   
0A06   23                     INC   hl   ; hl = array data*
0A07   23                     INC   hl   
0A08   18 06                  JR   goFunc2   ; push each item on stack
0A0A                GOFUNC1:      
0A0A   5E                     LD   e,(hl)   ; de = partial item
0A0B   23                     INC   hl   
0A0C   56                     LD   d,(hl)   
0A0D   23                     INC   hl   
0A0E   D5                     PUSH   de   ; push on stack
0A0F   0B                     DEC   bc   
0A10                GOFUNC2:      
0A10   79                     LD   a,c   ; if count != 0 then loop
0A11   B0                     OR   b   
0A12   20 F6                  JR   nz,goFunc1   
0A14   ED 4B 00 53            LD   bc,(vTemp1)   ; restore bc
0A18   2A 02 53               LD   hl,(vTemp2)   ; restore hl
0A1B                GOFUNC3:      
0A1B   5E                     LD   e,(hl)   ; de = block*
0A1C   23                     INC   hl   
0A1D   56                     LD   d,(hl)   
0A1E   23                     INC   hl   
0A1F   ED 53 00 53            LD   (vTemp1),de   ; save block*
0A23   5E                     LD   e,(hl)   ; de = arg_list*
0A24   23                     INC   hl   
0A25   56                     LD   d,(hl)   
0A26   23                     INC   hl   
0A27   EB                     EX   de,hl   ; hl = arg_list*
0A28   ED 5B 00 53            LD   de,(vTemp1)   ; restore de = block*
0A2C   7D                     LD   a,l   ; if arg_list* == null a = 0
0A2D   B4                     OR   h   
0A2E   20 03                  JR   nz,goFunc4   
0A30   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A31   18 0D                  JR   goFunc8   
0A33                GOFUNC4:      ; allocate locals
0A33   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A34   18 03                  JR   goFunc6   
0A36                GOFUNC5:      ; loop
0A36   3B                     DEC   sp   
0A37   3B                     DEC   sp   
0A38   3D                     DEC   a   
0A39                GOFUNC6:      
0A39   B7                     OR   a   
0A3A   20 FA                  JR   nz,goFunc5   ; end loop
0A3C                GOFUNC7:      
0A3C   23                     INC   hl   ; a = num_args* x 2
0A3D   7E                     LD   a,(hl)   
0A3E   2B                     DEC   hl   
0A3F   87                     ADD   a,a   ; a *= 2
0A40                GOFUNC8:      
0A40   C5                     PUSH   bc   ; push IP
0A41   44 4D                  LD   bc,hl   
0A43   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A46   85                     ADD   a,l   
0A47   6F                     LD   l,a   
0A48   39                     ADD   hl,sp   
0A49   18 98                  JR   goBlock2   
0A4B                DOLLAR:      
0A4B                HEXNUM:      
0A4B   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A4E                HEXNUM1:      
0A4E   03                     INC   bc   
0A4F   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A50   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A52   28 02                  JR   z,hexnum2   ; no a decimal
0A54   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A56                HEXNUM2:      
0A56   D6 30                  SUB   $30   ; form decimal digit
0A58   DA 43 0B               JP   c,num2   
0A5B   FE 10                  CP   $0F+1   
0A5D   D2 43 0B               JP   nc,num2   
0A60   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A61   29                     ADD   hl,hl   ; 4X
0A62   29                     ADD   hl,hl   ; 8X
0A63   29                     ADD   hl,hl   ; 16X
0A64   85                     ADD   a,l   ; add into bottom of hl
0A65   6F                     LD   l,a   
0A66   18 E6                  JR   hexnum1   
0A68                UPCASE:      
0A68   0A                     LD   a,(bc)   ; a = identifier char
0A69   D6 41                  SUB   "A"   ; "A" = 0
0A6B   18 05                  JR   ident1   
0A6D                LOWCASE:      
0A6D   0A                     LD   a,(bc)   
0A6E   D6 61                  SUB   "a"   
0A70   C6 1A                  ADD   a,26   
0A72                IDENT1:      
0A72   87                     ADD   a,a   ; l = a * 2
0A73   6F                     LD   l,a   
0A74   26 52                  LD   h,msb(vars)   
0A76   22 F2 52               LD   (vPointer),hl   ; store address in setter
0A79   5E                     LD   e,(hl)   
0A7A   23                     INC   hl   
0A7B   56                     LD   d,(hl)   
0A7C   D5                     PUSH   de   
0A7D   DD E9                  JP   (ix)   
0A7F                             ; if
0A7F                             ; condition then -- value
0A7F                QUESTION:      
0A7F                IF:          
0A7F   03                     INC   bc   
0A80   0A                     LD   a,(bc)   
0A81   FE 3F                  CP   "?"   
0A83   28 06                  JR   z,ifte   
0A85   0B                     DEC   bc   
0A86   11 00 00               LD   de,NUL   ; NUL pointer for else
0A89   18 01                  JR   ifte1   
0A8B                             ; ifte
0A8B                             ; condition then else -- value
0A8B                IFTE:        
0A8B   D1                     POP   de   ; de = else
0A8C                IFTE1:       
0A8C   E1                     POP   hl   ; hl = then
0A8D   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0A8E   7C                     LD   a,h   
0A8F   B5                     OR   l   
0A90   E1                     POP   hl   ; hl = then
0A91   CA AD 09               JP   z,go1   ; if z de = else
0A94   EB                     EX   de,hl   ; condition = false, de = then
0A95   C3 AD 09               JP   go1   
0A98                             ; Z80 port input
0A98                             ; port -- value
0A98                INPUT:       
0A98   E1                     POP   hl   
0A99   59                     LD   e,c   ; save IP
0A9A   4D                     LD   c,l   
0A9B   ED 68                  IN   l,(c)   
0A9D   26 00                  LD   h,0   
0A9F   4B                     LD   c,e   ; restore IP
0AA0   E5                     PUSH   hl   
0AA1   DD E9                  JP   (ix)   
0AA3                KEY:         
0AA3   CD 81 00               CALL   getchar   
0AA6   26 00                  LD   h,0   
0AA8   6F                     LD   l,a   
0AA9   E5                     PUSH   hl   
0AAA   DD E9                  JP   (ix)   
0AAC                             ; /li literal
0AAC                             ; low level operation
0AAC                             ; reads the next two bytes and
0AAC                             ; pushes a word on the stack
0AAC                             ; -- value
0AAC                LITERAL:      
0AAC   03                     INC   bc   
0AAD   0A                     LD   a,(bc)   
0AAE   6F                     LD   l,a   
0AAF   03                     INC   bc   
0AB0   0A                     LD   a,(bc)   
0AB1   67                     LD   h,a   
0AB2   E5                     PUSH   hl   
0AB3   DD E9                  JP   (ix)   
0AB5                             ; Z80 port output
0AB5                             ; value port --
0AB5                OUTPUT:      
0AB5   E1                     POP   hl   
0AB6   59                     LD   e,c   ; save IP
0AB7   4D                     LD   c,l   
0AB8   E1                     POP   hl   
0AB9   ED 69                  OUT   (c),l   
0ABB   4B                     LD   c,e   ; restore IP
0ABC   DD E9                  JP   (ix)   
0ABE                             ; /mp map
0ABE                             ; func -- :s00bbOm1r
0ABE                          ;*Macro unroll: FUNC map, 0, "f"                            ; :f func
0ABE                MAP:         ; :f func
0ABE   CD AC 09               CALL   go   
0AC1   00 00                  DW   NUL   
0AC3   CA 0A                  DW   mapM_2053S1569   
0AC5   C7 0A                  DW   $+2   
0AC7   00                     DB   0   
0AC8   01 66                  .PSTR   "f"   
0ACA                MAPM_2053S1569:      
0ACA   7B                     DB   "{"   
0ACB   3A 73 7B               DB   ":s{"   ; :s source
0ACE   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0AD2   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0ADA   3A 64 74 7B            DB   ":dt{"   
0ADE   31 25 74 3D 3D 7B 25 64 20 25 66 5E 7D 7B 25 64 7D 3F 3F DB   "1%t=={%d %f^}{%d}??"   ; if t == 1 pass data through func else raw
0AF1   25 74 20 25 6B 5E      DB   "%t %k^"   ; send data to sink
0AF7   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   ; init source
0AFF   7D 3B                  DB   "};"   
0B01   7D 3B                  DB   "};"   
0B03   7D                     DB   "}"   
0B04   00                     DB   0   
0B05                STAR:        
0B05                MUL:         
0B05   D1                     POP   de   ; get first value
0B06   E1                     POP   hl   
0B07                MUL2:        
0B07   C5                     PUSH   bc   ; Preserve the IP
0B08   44 4D                  LD   bc,hl   ; bc = 2nd value
0B0A   21 00 00               LD   hl,0   
0B0D   3E 10                  LD   a,16   
0B0F                MUL3:        
0B0F   29                     ADD   hl,hl   
0B10   CB 13                  RL   e   
0B12   CB 12                  RL   d   
0B14   30 04                  JR   nc,$+6   
0B16   09                     ADD   hl,bc   
0B17   30 01                  JR   nc,$+3   
0B19   13                     INC   de   
0B1A   3D                     DEC   a   
0B1B   20 F2                  JR   nz,mul3   
0B1D   C1                     POP   bc   ; Restore the IP
0B1E   C3 9C 03               JP   add3   
0B21                NUM:         
0B21   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B24   0A                     LD   a,(bc)   ; Get numeral or -
0B25   FE 2D                  CP   "-"   
0B27   20 01                  JR   nz,num0   
0B29   03                     INC   bc   ; move to next char, no flags affected
0B2A                NUM0:        
0B2A   08                     EX   af,af'   ; save zero flag = 0 for later
0B2B                NUM1:        
0B2B   0A                     LD   a,(bc)   ; read digit
0B2C   D6 30                  SUB   "0"   ; less than 0?
0B2E   38 13                  JR   c,num2   ; not a digit, exit loop
0B30   FE 0A                  CP   10   ; greater that 9?
0B32   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B34   03                     INC   bc   ; inc IP
0B35   54 5D                  LD   de,hl   ; multiply hl * 10
0B37   29                     ADD   hl,hl   
0B38   29                     ADD   hl,hl   
0B39   19                     ADD   hl,de   
0B3A   29                     ADD   hl,hl   
0B3B   85                     ADD   a,l   ; add digit in a to hl
0B3C   6F                     LD   l,a   
0B3D   3E 00                  LD   a,0   
0B3F   8C                     ADC   a,h   
0B40   67                     LD   h,a   
0B41   18 E8                  JR   num1   
0B43                NUM2:        
0B43   0B                     DEC   bc   
0B44   08                     EX   af,af'   ; restore zero flag
0B45   20 07                  JR   nz,num3   
0B47   EB                     EX   de,hl   ; negate the value of hl
0B48   21 00 00               LD   hl,0   
0B4B   B7                     OR   a   ; jump to sub2
0B4C   ED 52                  SBC   hl,de   
0B4E                NUM3:        
0B4E   E5                     PUSH   hl   ; Put the number on the stack
0B4F   DD E9                  JP   (ix)   ; and process the next character
0B51                RPAREN:      
0B51   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B54   FD 46 09               LD   b,(iy+9)   
0B57   DD E9                  JP   (ix)   
0B59                             ; shiftLeft
0B59                             ; value count -- value2          shift left count places
0B59                SHIFTLEFT:      
0B59   50 59                  LD   de,bc   ; save IP
0B5B   C1                     POP   bc   ; bc = count
0B5C   41                     LD   b,c   ; b = loop counter
0B5D   E1                     POP   hl   
0B5E   04                     INC   b   ; test for counter=0 case
0B5F   18 01                  JR   shiftLeft2   
0B61                SHIFTLEFT1:      
0B61   29                     ADD   hl,hl   ; left shift hl
0B62                SHIFTLEFT2:      
0B62   10 FD                  DJNZ   shiftLeft1   
0B64   E5                     PUSH   hl   
0B65   42 4B                  LD   bc,de   ; restore IP
0B67   DD E9                  JP   (ix)   
0B69                             ; shiftRight
0B69                             ; value count -- value2          shift left count places
0B69                SHIFTRIGHT:      
0B69   50 59                  LD   de,bc   ; save IP
0B6B   C1                     POP   bc   ; bc = count
0B6C   41                     LD   b,c   ; b = loop counter
0B6D   E1                     POP   hl   
0B6E   04                     INC   b   ; test for counter=0 case
0B6F   18 04                  JR   shiftRight2   
0B71                SHIFTRIGHT1:      
0B71   CB 3C                  SRL   h   ; right shift hl
0B73   CB 1D                  RR   l   
0B75                SHIFTRIGHT2:      
0B75   10 FA                  DJNZ   shiftRight1   
0B77   E5                     PUSH   hl   
0B78   42 4B                  LD   bc,de   ; restore IP
0B7A   DD E9                  JP   (ix)   
0B7C                             ; string
0B7C                             ; -- ptr                        ; points to start of string chars,
0B7C                             ; length is stored at start - 2 bytes
0B7C                DQUOTE:      
0B7C                STRING:      
0B7C   2A F0 52               LD   hl,(vHeapPtr)   ; hl = heap*
0B7F   23                     INC   hl   ; skip length field to start
0B80   23                     INC   hl   
0B81   E5                     PUSH   hl   ; save start of string
0B82   03                     INC   bc   ; point to next char
0B83   18 03                  JR   string2   
0B85                STRING1:      
0B85   77                     LD   (hl),a   
0B86   23                     INC   hl   ; increase count
0B87   03                     INC   bc   ; point to next char
0B88                STRING2:      
0B88   0A                     LD   a,(bc)   
0B89   FE 22                  CP   DQ   ; " is the string terminator
0B8B   28 04                  JR   z,string3   
0B8D   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0B8F   20 F4                  JR   nz,string1   
0B91                STRING3:      
0B91   AF                     XOR   a   ; write NUL to terminate string
0B92   77                     LD   (hl),a   ; hl = end of string
0B93   23                     INC   hl   
0B94   22 F0 52               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B97   2B                     DEC   hl   ; hl = end of string without terminator
0B98   D1                     POP   de   ; de = start of string
0B99   D5                     PUSH   de   ; return start of string
0B9A   B7                     OR   a   ; hl = length bytes, de = start of string
0B9B   ED 52                  SBC   hl,de   
0B9D   EB                     EX   de,hl   
0B9E   2B                     DEC   hl   ; write length bytes to length field at start - 2
0B9F   72                     LD   (hl),d   
0BA0   2B                     DEC   hl   
0BA1   73                     LD   (hl),e   
0BA2   DD E9                  JP   (ix)   
0BA4                MINUS:       ; negative sign or subtract
0BA4   03                     INC   bc   ; check if sign of a number
0BA5   0A                     LD   a,(bc)   
0BA6   0B                     DEC   bc   
0BA7   FE 30                  CP   "0"   
0BA9   38 05                  JR   c,sub   
0BAB   FE 3A                  CP   "9"+1   
0BAD   DA 44 03               JP   c,num_   
0BB0                SUB:         ; Subtract the value 2nd on stack from top of stack
0BB0   03                     INC   bc   
0BB1   FE 2D                  CP   "-"   
0BB3   20 05                  JR   nz,sub1   
0BB5   E1                     POP   hl   
0BB6   2B                     DEC   hl   
0BB7   C3 BE 04               JP   assign0   
0BBA                SUB1:        
0BBA   0B                     DEC   bc   
0BBB   D1                     POP   de   
0BBC   E1                     POP   hl   
0BBD   B7                     OR   a   
0BBE   ED 52                  SBC   hl,de   
0BC0   C3 9C 03               JP   add3   
0BC3                             ; /pb printBuffer
0BC3                             ; --
0BC3                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0BC3                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0BC3                PRINTBUFFER:      
0BC3   CD AC 09               CALL   go   
0BC6   00 00                  DW   NUL   
0BC8   CF 0B                  DW   printBufferM_2223S1748   
0BCA   CC 0B                  DW   $+2   
0BCC   00                     DB   0   
0BCD   01 61                  .PSTR   "a"   
0BCF                PRINTBUFFERM_2223S1748:      
0BCF   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0BE9                             ; printChars
0BE9                             ; char* len --
0BE9                PRINTCHARS:      
0BE9   E1                     POP   hl   ; hl = count
0BEA   D1                     POP   de   ; de = char*
0BEB   CD F6 0B               CALL   printChars2   
0BEE   DD E9                  JP   (ix)   
0BF0                PRINTCHARS1:      
0BF0   1A                     LD   a,(de)   ; print char at char*
0BF1   CD 85 00               CALL   putchar   
0BF4   13                     INC   de   ; char*++
0BF5   2B                     DEC   hl   ; count--
0BF6                PRINTCHARS2:      
0BF6   7D                     LD   a,l   ; count == 0?
0BF7   B4                     OR   h   
0BF8   C8                     RET   z   
0BF9   18 F5                  JR   printChars1   ; if not loop
0BFB                             ; /pk print stack
0BFB                             ; --
0BFB                PRINTSTACK:      
0BFB                             ;     ld (vTemp1),bc
0BFB                             ;     call printStr
0BFB                             ;     .cstr "=> "
0BFB                             ;     ld hl,STACK
0BFB                             ;     sbc hl,sp
0BFB                             ;     srl h
0BFB                             ;     rr l
0BFB                             ;     ld bc,hl
0BFB                             ;     ld hl,STACK
0BFB                             ;     jr printStack2
0BFB                             ; printStack1:
0BFB                             ;     dec bc
0BFB                             ;     dec hl
0BFB                             ;     ld d,(hl)
0BFB                             ;     dec hl
0BFB                             ;     ld e,(hl)
0BFB                             ;     ex de,hl
0BFB                             ;     call prthex
0BFB                             ;     ex de,hl
0BFB                             ;     ld a," "
0BFB                             ;     call putchar
0BFB                             ; printStack2:
0BFB                             ;     ld a,c
0BFB                             ;     or b
0BFB                             ;     jr nz,printStack1
0BFB                             ;     call prompt
0BFB                             ;     ld bc,(vTemp1)
0BFB   DD E9                  JP   (ix)   
0BFD                REMAIN:      
0BFD   2A F4 52               LD   hl,(vRemain)   
0C00   E5                     PUSH   hl   
0C01   DD E9                  JP   (ix)   
0C03                SIZE:        
0C03   E1                     POP   hl   
0C04   2B                     DEC   hl   ; msb size
0C05   56                     LD   d,(hl)   
0C06   2B                     DEC   hl   ; lsb size
0C07   5E                     LD   e,(hl)   
0C08   D5                     PUSH   de   
0C09   DD E9                  JP   (ix)   
0C0B                CONSTBUFSTART:      
0C0B   11 00 51               LD   de,BUF   
0C0E   18 28                  JR   constant   
0C10                CONSTHEAPSTART:      
0C10   11 1E 53               LD   de,HEAP   
0C13   18 23                  JR   constant   
0C15                CONSTTIBSTART:      
0C15   11 00 50               LD   de,TIB   
0C18   18 1E                  JR   constant   
0C1A                VARBUFPTR:      
0C1A   ED 5B EC 52            LD   de,(vBufPtr)   
0C1E   21 EC 52               LD   hl,vBufPtr   
0C21   18 12                  JR   variable   
0C23                VARHEAPPTR:      
0C23   ED 5B F0 52            LD   de,(vHeapPtr)   
0C27   21 F0 52               LD   hl,vHeapPtr   
0C2A   18 09                  JR   variable   
0C2C                VARTIBPTR:      
0C2C   ED 5B EA 52            LD   de,(vTIBPtr)   
0C30   21 EA 52               LD   hl,vTIBPtr   
0C33   18 00                  JR   variable   
0C35                VARIABLE:      
0C35   22 F2 52               LD   (vPointer),hl   
0C38                CONSTANT:      
0C38   D5                     PUSH   de   
0C39   DD E9                  JP   (ix)   
0C3B                             ; 
0C3B                FILTER:      
0C3B                SCAN:        
0C3B   DD E9                  JP   (ix)   
0C3D                             ;*******************************************************************
0C3D                             ; general routines
0C3D                             ;*******************************************************************
0C3D                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0C3D                FLUSHBUFFER:      
0C3D   F5                     PUSH   af   
0C3E   D5                     PUSH   de   
0C3F   E5                     PUSH   hl   
0C40   2A EC 52               LD   hl,(vBufPtr)   
0C43   11 00 51               LD   de,BUF   
0C46   ED 53 EC 52            LD   (vBufPtr),de   
0C4A   B7                     OR   a   
0C4B   ED 52                  SBC   hl,de   
0C4D   CD F6 0B               CALL   printChars2   
0C50   E1                     POP   hl   
0C51   D1                     POP   de   
0C52   F1                     POP   af   
0C53   C9                     RET      
0C54                             ; followed by a table
0C54                             ; db char
0C54                             ; dw addr
0C54                             ; the final item must have char == NUL
0C54                JUMPTABLE:      
0C54   03                     INC   bc   
0C55   E1                     POP   hl   
0C56                JUMPTABLE0:      
0C56   AF                     XOR   a   
0C57   BE                     CP   (hl)   
0C58   28 09                  JR   z,jumpTable1   
0C5A   0A                     LD   a,(bc)   
0C5B   BE                     CP   (hl)   
0C5C   28 06                  JR   z,jumpTable2   
0C5E   23                     INC   hl   
0C5F   23                     INC   hl   
0C60   23                     INC   hl   
0C61   18 F3                  JR   jumpTable0   
0C63                JUMPTABLE1:      
0C63   0B                     DEC   bc   
0C64                JUMPTABLE2:      
0C64   23                     INC   hl   
0C65   5E                     LD   e,(hl)   
0C66   23                     INC   hl   
0C67   56                     LD   d,(hl)   
0C68   EB                     EX   de,hl   
0C69   E9                     JP   (hl)   
0C6A                PRTSTR0:      
0C6A   CD 85 00               CALL   putchar   
0C6D   23                     INC   hl   
0C6E                PRTSTR:      
0C6E   7E                     LD   a,(hl)   
0C6F   B7                     OR   a   
0C70   20 F8                  JR   nz,prtstr0   
0C72   C9                     RET      
0C73                             ; **************************************************************************
0C73                             ; calculate nesting value
0C73                             ; a is char to be tested,
0C73                             ; e is the nesting value (initially 0)
0C73                             ; e is increased by ( and [
0C73                             ; e is decreased by ) and ]
0C73                             ; e has its bit 7 toggled by `
0C73                             ; limited to 127 levels
0C73                             ; **************************************************************************
0C73                NESTING:      
0C73   FE 22                  CP   DQ   ; quote char
0C75   28 06                  JR   z,nesting0   
0C77   FE 60                  CP   "`"   ; quote char
0C79   28 02                  JR   z,nesting0   
0C7B   18 0A                  JR   nesting1   
0C7D                NESTING0:      
0C7D   CB 7B                  BIT   7,e   
0C7F   28 03                  JR   z,nesting1a   
0C81   CB BB                  RES   7,e   
0C83   C9                     RET      
0C84                NESTING1A:      
0C84   CB FB                  SET   7,e   
0C86   C9                     RET      
0C87                NESTING1:      
0C87   CB 7B                  BIT   7,e   
0C89   C0                     RET   nz   
0C8A   FE 7B                  CP   "{"   
0C8C   28 08                  JR   z,nesting2   
0C8E   FE 5B                  CP   "["   
0C90   28 04                  JR   z,nesting2   
0C92   FE 28                  CP   "("   
0C94   20 02                  JR   nz,nesting3   
0C96                NESTING2:      
0C96   1C                     INC   e   
0C97   C9                     RET      
0C98                NESTING3:      
0C98   FE 7D                  CP   "}"   
0C9A   28 07                  JR   z,nesting4   
0C9C   FE 5D                  CP   "]"   
0C9E   28 03                  JR   z,nesting4   
0CA0   FE 29                  CP   ")"   
0CA2   C0                     RET   nz   
0CA3                NESTING4:      
0CA3   1D                     DEC   e   
0CA4   C9                     RET      
0CA5                PROMPT:      
0CA5   CD B5 0C               CALL   printStr   
0CA8   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0CAD   C9                     RET      
0CAE                CRLF:        
0CAE   CD B5 0C               CALL   printStr   
0CB1   0D 0A 00               .CSTR   "\r\n"   
0CB4   C9                     RET      
0CB5                             ; prints a null teminated string
0CB5                             ; the string should be immediately following the call
0CB5                PRINTSTR:      
0CB5   E3                     EX   (sp),hl   ; swap			
0CB6   CD 6E 0C               CALL   prtstr   
0CB9   23                     INC   hl   ; inc past NUL
0CBA   E3                     EX   (sp),hl   ; put it back	
0CBB   C9                     RET      
0CBC                TITLESTR:      
0CBC   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0CD0                INIT:        
0CD0   21 BC 0C               LD   hl,titleStr   
0CD3   11 0A 53               LD   de,titleBuf   
0CD6   06 14                  LD   b,20   
0CD8                INIT1:       
0CD8   1A                     LD   a,(de)   
0CD9   BE                     CP   (hl)   
0CDA   20 17                  JR   nz,coldBoot0   
0CDC   13                     INC   de   
0CDD   23                     INC   hl   
0CDE   10 F8                  DJNZ   init1   
0CE0                WARMINIT:      
0CE0   ED 4B F6 52            LD   bc,(vSavedIP)   ; restore IP
0CE4   ED 7B F8 52            LD   sp,(vSavedSP)   ; restore SP
0CE8   DD 2A FA 52            LD   ix,(vSavedNext)   ; restore Next
0CEC   FD 2A FC 52            LD   iy,(vSavedBP)   ; restore BP
0CF0   C3 2A 0D               JP   start1   
0CF3                COLDBOOT0:      
0CF3   21 BC 0C               LD   hl,titleStr   ; copy titleStr to titleBuf
0CF6   11 0A 53               LD   de,titleBuf   
0CF9   06 14                  LD   b,20   
0CFB   ED B0                  LDIR      
0CFD                COLDINIT:      
0CFD   21 80 01               LD   hl,isysVars   
0D00   11 E6 52               LD   de,sysVars   
0D03   01 10 00               LD   bc,8 * 2   
0D06   ED B0                  LDIR      
0D08   21 00 52               LD   hl,vars   ; 52 vars LO HI
0D0B   06 34                  LD   b,26*2   
0D0D   AF                     XOR   a   
0D0E                COLDBOOT1:      
0D0E   77                     LD   (hl),a   
0D0F   23                     INC   hl   
0D10   10 FC                  DJNZ   coldBoot1   
0D12   DD 2A EE 52            LD   ix,(vNext)   
0D16   FD 21 00 50            LD   iy,STACK   
0D1A   C9                     RET      
0D1B                COLDSTART:      
0D1B   31 00 50               LD   sp,STACK   
0D1E   CD F3 0C               CALL   coldBoot0   
0D21   C3 2A 0D               JP   start1   
0D24                START:       
0D24   31 00 50               LD   sp,STACK   ; start Monty
0D27   CD D0 0C               CALL   init   ; setups
0D2A                START1:      
0D2A   21 0A 53               LD   hl,titleBuf   
0D2D   CD 6E 0C               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0D30                INTERPRET:      
0D30   CD 3D 0C               CALL   flushBuffer   
0D33   CD A5 0C               CALL   prompt   
0D36   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0D39   21 00 50               LD   hl,TIB   
0D3C   22 EA 52               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0D3F                INTERPRET2:      ; calculate nesting
0D3F   1E 00                  LD   e,0   ; initilize nesting value
0D41   C5                     PUSH   bc   ; save offset into TIB,
0D42                             ; bc is also the count of chars in TIB
0D42   21 00 50               LD   hl,TIB   ; hl is start of TIB
0D45   18 0B                  JR   interpret4   
0D47                INTERPRET3:      
0D47   3E 33                  LD   a,"3"   
0D49   CD 85 00               CALL   putchar   
0D4C   7E                     LD   a,(hl)   ; a = char in TIB
0D4D   23                     INC   hl   ; inc pointer into TIB
0D4E   0B                     DEC   bc   ; dec count of chars in TIB
0D4F   CD 73 0C               CALL   nesting   ; update nesting value
0D52                INTERPRET4:      
0D52   79                     LD   a,c   ; is count zero?
0D53   B0                     OR   b   
0D54   20 F1                  JR   nz,interpret3   ; if not loop
0D56   C1                     POP   bc   ; restore offset into TIB
0D57                INTERPRET5:      
0D57   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0D5A   FE 20                  CP   $20   ; compare to space
0D5C   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0D5E   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0D60                             ; ???? NEEDED?
0D60   28 3B                  JR   z,interpret8   
0D62   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0D64   28 24                  JR   z,interpret7   ; if anything else its macro/control
0D66   FE 05                  CP   CTRL_E   
0D68   CA FB 0D               JP   z,edit_   
0D6B   FE 08                  CP   CTRL_H   
0D6D   CA EB 0D               JP   z,backSpace_   
0D70   FE 0A                  CP   CTRL_J   
0D72   CA 13 0E               JP   z,reEdit_   
0D75   FE 13                  CP   CTRL_S   
0D77   CA 16 0E               JP   z,printStack_   
0D7A                             ; DB     lsb(edit_)       ; ENQ ^E  5
0D7A                             ; DB     lsb(reedit_)     ; LF  ^J 10
0D7A                             ; DB     lsb(list_)       ; FF  ^L 12
0D7A                             ; DB     lsb(printStack_) ; DLE ^P 16
0D7A                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0D7A                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0D7A                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0D7A                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0D7A                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0D7A                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0D7A                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0D7A                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0D7A                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0D7A                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0D7A                INTERPRET5A:      
0D7A                             ; ld (vTIBPtr),bc
0D7A                             ; ld bc,(vTIBPtr)
0D7A   18 C3                  JR   interpret2   
0D7C                INTERPRET6:      
0D7C   21 00 50               LD   hl,TIB   
0D7F   09                     ADD   hl,bc   
0D80   77                     LD   (hl),a   ; store the character in textbuf
0D81   03                     INC   bc   
0D82   CD 85 00               CALL   putchar   ; echo character to screen
0D85   CD 73 0C               CALL   nesting   
0D88   18 CD                  JR   interpret5   ; wait for next character
0D8A                INTERPRET7:      
0D8A   21 00 50               LD   hl,TIB   
0D8D   09                     ADD   hl,bc   
0D8E   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0D90   23                     INC   hl   
0D91   36 0A                  LD   (hl),"\n"   
0D93   23                     INC   hl   
0D94   03                     INC   bc   
0D95   03                     INC   bc   
0D96   CD AE 0C               CALL   crlf   ; echo character to screen
0D99   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0D9A   B7                     OR   a   
0D9B   20 BA                  JR   nz,interpret5   
0D9D                INTERPRET8:      
0D9D   21 00 50               LD   hl,TIB   
0DA0   09                     ADD   hl,bc   
0DA1   22 EA 52               LD   (vTIBPtr),hl   
0DA4   01 00 50               LD   bc,TIB   
0DA7   ED 43 F6 52            LD   (vSavedIP),bc   ; save IP
0DAB   ED 73 F8 52            LD   (vSavedSP),sp   ; save SP
0DAF   DD 22 FA 52            LD   (vSavedNext),ix   ; save Next
0DB3   FD 22 FC 52            LD   (vSavedBP),iy   ; save BP
0DB7   0B                     DEC   bc   
0DB8                NEXT:        
0DB8   03                     INC   bc   ; Increment the IP
0DB9   0A                     LD   a,(bc)   ; Get the next character and dispatch
0DBA   FE 20                  CP   " "   ; whitespace?
0DBC   28 FA                  JR   z,next   ; space? ignore
0DBE   38 09                  JR   c,next1   
0DC0   D6 20                  SUB   " "   
0DC2   6F                     LD   l,a   ; index into table
0DC3   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0DC5   6E                     LD   l,(hl)   ; get low jump address
0DC6   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0DC8   E9                     JP   (hl)   ; Jump to routine
0DC9                NEXT1:       
0DC9   FE 00                  CP   NUL   ; end of input string?
0DCB   28 03                  JR   z,exit   
0DCD   C3 30 0D               JP   interpret   ; no, other whitespace, macros?
0DD0                EXIT:        
0DD0   03                     INC   bc   
0DD1   60 69                  LD   hl,bc   
0DD3   E9                     JP   (hl)   
0DD4                RUN:         
0DD4   C1                     POP   bc   
0DD5   0B                     DEC   bc   
0DD6   DD E9                  JP   (ix)   
0DD8                ERROR:       
0DD8   CD D4 0D               CALL   run   
0DDB   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQ,"Error ",DQ,".s .",0   
0DE8   C3 30 0D               JP   interpret   
0DEB                BACKSPACE_:      
0DEB   79                     LD   a,c   
0DEC   B0                     OR   b   
0DED   CA 3F 0D               JP   z,interpret2   
0DF0   0B                     DEC   bc   
0DF1   CD B5 0C               CALL   printStr   
0DF4   08 20 08 00            .CSTR   "\b \b"   
0DF8   C3 3F 0D               JP   interpret2   
0DFB                             ; edit
0DFB                EDIT_:       
0DFB   CD D4 0D               CALL   run   
0DFE   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQ,"var?",DQ,".s /k/ad .h",0   
0E10   C3 30 0D               JP   interpret   
0E13                REEDIT_:      
0E13   C3 30 0D               JP   interpret   
0E16                PRINTSTACK_:      
0E16   CD D4 0D               CALL   run   
0E19   2F 70 6B 00            .CSTR   "/pk"   
0E1D   C3 30 0D               JP   interpret   
0E20                             ; editDef:
0E20                             ;     pop hl                      ; pop ret address
0E20                             ;     ex (sp),hl                  ; swap with TOS
0E20                             ;     push hl                     ; dup TOS
0E20                             ;     ld a,l                      ; a = ident
0E20                             ;     ld de,TIB                   ; de = start of TIB
0E20                             ;     ld (vTIBPtr),de             ; update TIB*
0E20                             ;     push ix                     ; save NEXT
0E20                             ;     ld ix,editDef0              ; NEXT = editDef0
0E20                             ;     jp lookupRef                ; convert letter into address
0E20                             ; editDef0:
0E20                             ;     ld e,(hl)                   ; de = (hl++)
0E20                             ;     inc hl
0E20                             ;     ld d,(hl)
0E20                             ;     ld a,d                      ; de == 0 ?
0E20                             ;     or e
0E20                             ;     jr z,editDef4
0E20                             ;     ld ix,editDef3              ; NEXT = editDef3
0E20                             ;     ex de,hl
0E20                             ;     ld a,(hl)
0E20                             ;     cp "{"
0E20                             ;     jr nz,editDef1
0E20                             ;     jp editBlock0               ; convert letter into address
0E20                             ; editDef1:
0E20                             ;     cp "("
0E20                             ;     jr nz,editDef2
0E20                             ;     jp editBlock0               ; convert letter into address
0E20                             ; editDef2:
0E20                             ;     jp editFunc
0E20                             ; editDef3:
0E20                             ;     ld a," "                    ; write assign
0E20                             ;     call writeChar
0E20                             ;     pop hl                      ; a = ident
0E20                             ;     ld a,l
0E20                             ;     call writeChar
0E20                             ;     ld a,"="                    ; write assign
0E20                             ;     call writeChar
0E20                             ;     ld ix,editDef4              ; NEXT = editDef4
0E20                             ;     jp printTIB
0E20                             ; editDef4:
0E20                             ;     pop ix                      ; restore NEXT
0E20                             ;     jp (ix)
0E20                             ; writeChar:
0E20                             ;     ld de,(vTIBPtr)             ; de = TIB*
0E20                             ;     ld (de),a                   ; write ident
0E20                             ;     inc de
0E20                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0E20                             ;     ret
0E20                             ; ; printTIB
0E20                             ; printTIB:
0E20                             ;     ld hl,(vTIBPtr)
0E20                             ;     ld de,TIB
0E20                             ;     or a
0E20                             ;     sbc hl,de
0E20                             ;     jp printTIB2
0E20                             ; printTIB1:
0E20                             ;     ld a,(de)
0E20                             ;     call putchar
0E20                             ; printTIB2:
0E20                             ;     ld a,l
0E20                             ;     or h
0E20                             ;     jr nz,printTIB1
0E20                             ;     jp (ix)
0E20                             ; editBlock:
0E20                             ;     pop hl                      ; hl = block*
0E20                             ; editBlock0:
0E20                             ;     push ix                     ; save next
0E20                             ;     push hl                     ; push block*
0E20                             ;     push hl                     ; push block*
0E20                             ;     ld ix,(editBlock2)
0E20                             ;     jp blockLength
0E20                             ; editBlock1:
0E20                             ;     pop hl                      ; bc = length, (sp) = IP
0E20                             ;     pop de                      ; de = block*
0E20                             ;     ld a,l
0E20                             ;     or h
0E20                             ;     jr z,editBlock2
0E20                             ;     push bc
0E20                             ;     ld bc,hl
0E20                             ;     ex de,hl                    ; hl = block*
0E20                             ;     ld de,(vTIBPtr)              ; de = TIB*
0E20                             ;     ldir                        ; copy block to TIB
0E20                             ;     ld (vTIBPtr),de              ; save TIB*
0E20                             ;     pop bc
0E20                             ; editBlock2:
0E20                             ;     pop ix                      ; restore next
0E20                             ;     jp (ix)
0E20                             ; editFunc:
0E20                             ;     jp (ix)
0E20                             ; editArray:
0E20                             ;     jp (ix)
0E20                             ; editArglist:
0E20                             ;     jp (ix)
0E20                             ; ; blockLength
0E20                             ; ; addr1 -- length
0E20                             ; blockLength:
0E20                             ;     pop hl                      ; block*
0E20                             ;     push hl                     ; save block*
0E20                             ;     inc hl                      ; skip first char
0E20                             ;     ld d,1                      ; increase nesting
0E20                             ; blockLength1:                   ; Skip to end of definition
0E20                             ;     ld a,(hl)                   ; Get the next character
0E20                             ;     inc hl                      ; Point to next character
0E20                             ;     cp " " + 1                  ; ignore whitespace
0E20                             ;     jr c,blockLength1
0E20                             ;     cp ")"
0E20                             ;     jr z,blockLength4
0E20                             ;     cp "}"
0E20                             ;     jr z,blockLength4
0E20                             ;     cp "]"
0E20                             ;     jr z,blockLength4
0E20                             ;     cp "("
0E20                             ;     jr z,blockLength2
0E20                             ;     cp "{"
0E20                             ;     jr z,blockLength2
0E20                             ;     cp "["
0E20                             ;     jr z,blockLength2
0E20                             ;     cp "'"
0E20                             ;     jr z,blockLength3
0E20                             ;     cp "`"
0E20                             ;     jr z,blockLength3
0E20                             ;     cp DQ
0E20                             ;     jr z,blockLength3
0E20                             ;     jr blockLength1
0E20                             ; blockLength2:
0E20                             ;     inc d
0E20                             ;     jr blockLength1
0E20                             ; blockLength4:
0E20                             ;     dec d
0E20                             ;     jr nz, blockLength1         ; get the next element
0E20                             ; blockLength3:
0E20                             ;     ld a,$80
0E20                             ;     xor d
0E20                             ;     ld d,a
0E20                             ;     jr nz, blockLength1
0E20                             ;     pop hl                      ; hl = block*
0E20                             ;     or a
0E20                             ;     sbc hl,de
0E20                             ;     push hl
0E20                             ;     jp (ix)
0E20                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0E20                             ; \a start of stack \#3 depth \b base \$ prompt
0E20                             ; DW dStack               ; a vS0 start of datastack			
0E20                             ; DW FALSE                ; b vBase16
0E20                             ; DW 0                    ; c vTIBPtr an offset to the tib
0E20                             ; DW 0                    ; d
0E20                             ; DW 65                   ; e vLastDef "A" last command u defined
0E20                             ; DW 0                    ; f
0E20                             ; DW page6                ; g 256 bytes limits
0E20                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0E20                          ;*Macro unroll: FUNC f1, 0, "f"                             ; :f func or block
0E20                F1:          ; :f func or block
0E20   CD AC 09               CALL   go   
0E23   00 00                  DW   NUL   
0E25   2C 0E                  DW   f1M_2765S12   
0E27   29 0E                  DW   $+2   
0E29   00                     DB   0   
0E2A   01 66                  .PSTR   "f"   
0E2C                F1M_2765S12:      
0E2C   7B                     DB   "{"   
0E2D   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0E31   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0E39   3A 64 74 7B            DB   ":dt{"   
0E3D   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; if t == 1
0E45   25 66 5E 20 31 20 25 6B 5E DB   "%f^ 1 %k^"   ; if t == 1 send data to sink
0E4E   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0E56   7D 3B                  DB   "};"   
0E58   7D                     DB   "}"   
0E59   00                     DB   0   
0E5A                          ;*Macro unroll: FUNC f2, 1, "dtT"                           ; sink
0E5A                F2:          ; sink
0E5A   CD AC 09               CALL   go   
0E5D   00 00                  DW   NUL   
0E5F   68 0E                  DW   f2M_2776S24   
0E61   63 0E                  DW   $+2   
0E63   01                     DB   1   
0E64   03 64 74 54            .PSTR   "dtT"   
0E68                F2M_2776S24:      
0E68   7B                     DB   "{"   
0E69   32 25 74 21 3D 2F 62 72 DB   "2%t!=/br"   ; break if t == 2
0E71   7B 30 25 74 3D 3D 2F 62 72 20 60 78 60 2E 73 20 25 74 2E 20 30 20 31 20 25 64 5E 7D 5E DB   "{0%t==/br `x`.s %t. 0 1 %d^}^"   ; greet with talkback,
0E8E                             ; and use talkback to get data
0E8E   7B 31 25 74 3D 3D 2F 62 72 20 60 79 60 2E 73 20 25 74 2E 20 25 64 2E 7D 5E DB   "{1%t==/br `y`.s %t. %d.}^"   ; receive data
0EA7   7D                     DB   "}"   
0EA8   00                     DB   0   
0EA9                          ALIGN   $100   
0F00                TESTSSTART:      
0F00                             ; test 00bbMDBzc0lpOXNhU0k9ISxsc2IoZjIrMyksbXNiKGYyKSwwMHNzSWlBd0lIczFNREI5SUM5c2FTST0hLGxzYihmMSszKSxtc2IoZjEpLDAwc3NJbDVlSWc9PSE=, 0
0F00                          ;*Macro unroll:  test {"/li",lsb(f2+3),msb(f2)," 0 {500} /fs^"}, 0
0F00   31 00 50               LD   SP,STACK   
0F03   CD FD 0C               CALL   coldInit   
0F06   CD 10 4E               CALL   execStr   
0F09   2F 6C 69 5D 0E 20 30 20 7B 35 30 30 7D 20 2F 66 73 5E 00 DB   "/li",lsb(f2+3),msb(f2)," 0 {500} /fs^",0   
0F1C   CD 3D 0C               CALL   flushBuffer   
0F1F   E1                     POP   HL   
0F20   E5                     PUSH   HL   
0F21   11 00 00               LD   DE,0   
0F24   B7                     OR   A   
0F25   ED 52                  SBC   HL,DE   
0F27   7D                     LD   A,L   
0F28   B4                     OR   H   
0F29   CA 96 0F               JP   Z,expectM_2787S37   
0F2C   CD B5 0C               CALL   printStr   
0F2F   43 6F 64 65 3A 20 2F 6C 69 5D 0E 20 30 20 7B 35 30 30 7D 20 2F 66 73 5E 00 .CSTR   "Code: ","/li",lsb(f2+3),msb(f2)," 0 {500} /fs^"   
0F48   CD B5 0C               CALL   printStr   
0F4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F5A   21 00 00               LD   hl,0   
0F5D   E5                     PUSH   hl   
0F5E   E5                     PUSH   hl   
0F5F   CD D4 0D               CALL   run   
0F62   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F6A   CD 3D 0C               CALL   flushBuffer   
0F6D   CD B5 0C               CALL   printStr   
0F70   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F7D   E1                     POP   hl   
0F7E   E5                     PUSH   hl   
0F7F   E5                     PUSH   hl   
0F80   CD D4 0D               CALL   run   
0F83   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F92   CD 3D 0C               CALL   flushBuffer   
0F95   76                     HALT      
0F96                EXPECTM_2787S37:      
0F96   E1                     POP   HL   
0F97   CD B5 0C               CALL   printStr   
0F9A   44 6F 6E 65 21 00      .CSTR   "Done!"   
0FA0   76                     HALT      
0FA1                             ; 
0FA1                          ;*Macro unroll:  test "/f", false
0FA1   31 00 50               LD   SP,STACK   
0FA4   CD FD 0C               CALL   coldInit   
0FA7   CD 10 4E               CALL   execStr   
0FAA   2F 66 00               DB   "/f",0   
0FAD   CD 3D 0C               CALL   flushBuffer   
0FB0   E1                     POP   HL   
0FB1   E5                     PUSH   HL   
0FB2   11 00 00               LD   DE,false   
0FB5   B7                     OR   A   
0FB6   ED 52                  SBC   HL,DE   
0FB8   7D                     LD   A,L   
0FB9   B4                     OR   H   
0FBA   CA 17 10               JP   Z,expectM_2792S45   
0FBD   CD B5 0C               CALL   printStr   
0FC0   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0FC9   CD B5 0C               CALL   printStr   
0FCC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FDB   21 00 00               LD   hl,false   
0FDE   E5                     PUSH   hl   
0FDF   E5                     PUSH   hl   
0FE0   CD D4 0D               CALL   run   
0FE3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FEB   CD 3D 0C               CALL   flushBuffer   
0FEE   CD B5 0C               CALL   printStr   
0FF1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FFE   E1                     POP   hl   
0FFF   E5                     PUSH   hl   
1000   E5                     PUSH   hl   
1001   CD D4 0D               CALL   run   
1004   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1013   CD 3D 0C               CALL   flushBuffer   
1016   76                     HALT      
1017                EXPECTM_2792S45:      
1017   E1                     POP   HL   
1018                          ;*Macro unroll:  test "/t", true
1018   31 00 50               LD   SP,STACK   
101B   CD FD 0C               CALL   coldInit   
101E   CD 10 4E               CALL   execStr   
1021   2F 74 00               DB   "/t",0   
1024   CD 3D 0C               CALL   flushBuffer   
1027   E1                     POP   HL   
1028   E5                     PUSH   HL   
1029   11 FF FF               LD   DE,true   
102C   B7                     OR   A   
102D   ED 52                  SBC   HL,DE   
102F   7D                     LD   A,L   
1030   B4                     OR   H   
1031   CA 8E 10               JP   Z,expectM_2793S46   
1034   CD B5 0C               CALL   printStr   
1037   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1040   CD B5 0C               CALL   printStr   
1043   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1052   21 FF FF               LD   hl,true   
1055   E5                     PUSH   hl   
1056   E5                     PUSH   hl   
1057   CD D4 0D               CALL   run   
105A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1062   CD 3D 0C               CALL   flushBuffer   
1065   CD B5 0C               CALL   printStr   
1068   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1075   E1                     POP   hl   
1076   E5                     PUSH   hl   
1077   E5                     PUSH   hl   
1078   CD D4 0D               CALL   run   
107B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
108A   CD 3D 0C               CALL   flushBuffer   
108D   76                     HALT      
108E                EXPECTM_2793S46:      
108E   E1                     POP   HL   
108F                          ;*Macro unroll:  test "1", 1
108F   31 00 50               LD   SP,STACK   
1092   CD FD 0C               CALL   coldInit   
1095   CD 10 4E               CALL   execStr   
1098   31 00                  DB   "1",0   
109A   CD 3D 0C               CALL   flushBuffer   
109D   E1                     POP   HL   
109E   E5                     PUSH   HL   
109F   11 01 00               LD   DE,1   
10A2   B7                     OR   A   
10A3   ED 52                  SBC   HL,DE   
10A5   7D                     LD   A,L   
10A6   B4                     OR   H   
10A7   CA 03 11               JP   Z,expectM_2794S47   
10AA   CD B5 0C               CALL   printStr   
10AD   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
10B5   CD B5 0C               CALL   printStr   
10B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10C7   21 01 00               LD   hl,1   
10CA   E5                     PUSH   hl   
10CB   E5                     PUSH   hl   
10CC   CD D4 0D               CALL   run   
10CF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10D7   CD 3D 0C               CALL   flushBuffer   
10DA   CD B5 0C               CALL   printStr   
10DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10EA   E1                     POP   hl   
10EB   E5                     PUSH   hl   
10EC   E5                     PUSH   hl   
10ED   CD D4 0D               CALL   run   
10F0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10FF   CD 3D 0C               CALL   flushBuffer   
1102   76                     HALT      
1103                EXPECTM_2794S47:      
1103   E1                     POP   HL   
1104                          ;*Macro unroll:  test "2", 2
1104   31 00 50               LD   SP,STACK   
1107   CD FD 0C               CALL   coldInit   
110A   CD 10 4E               CALL   execStr   
110D   32 00                  DB   "2",0   
110F   CD 3D 0C               CALL   flushBuffer   
1112   E1                     POP   HL   
1113   E5                     PUSH   HL   
1114   11 02 00               LD   DE,2   
1117   B7                     OR   A   
1118   ED 52                  SBC   HL,DE   
111A   7D                     LD   A,L   
111B   B4                     OR   H   
111C   CA 78 11               JP   Z,expectM_2795S48   
111F   CD B5 0C               CALL   printStr   
1122   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
112A   CD B5 0C               CALL   printStr   
112D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
113C   21 02 00               LD   hl,2   
113F   E5                     PUSH   hl   
1140   E5                     PUSH   hl   
1141   CD D4 0D               CALL   run   
1144   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
114C   CD 3D 0C               CALL   flushBuffer   
114F   CD B5 0C               CALL   printStr   
1152   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
115F   E1                     POP   hl   
1160   E5                     PUSH   hl   
1161   E5                     PUSH   hl   
1162   CD D4 0D               CALL   run   
1165   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1174   CD 3D 0C               CALL   flushBuffer   
1177   76                     HALT      
1178                EXPECTM_2795S48:      
1178   E1                     POP   HL   
1179                          ;*Macro unroll:  test "1", 1
1179   31 00 50               LD   SP,STACK   
117C   CD FD 0C               CALL   coldInit   
117F   CD 10 4E               CALL   execStr   
1182   31 00                  DB   "1",0   
1184   CD 3D 0C               CALL   flushBuffer   
1187   E1                     POP   HL   
1188   E5                     PUSH   HL   
1189   11 01 00               LD   DE,1   
118C   B7                     OR   A   
118D   ED 52                  SBC   HL,DE   
118F   7D                     LD   A,L   
1190   B4                     OR   H   
1191   CA ED 11               JP   Z,expectM_2796S49   
1194   CD B5 0C               CALL   printStr   
1197   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
119F   CD B5 0C               CALL   printStr   
11A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11B1   21 01 00               LD   hl,1   
11B4   E5                     PUSH   hl   
11B5   E5                     PUSH   hl   
11B6   CD D4 0D               CALL   run   
11B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11C1   CD 3D 0C               CALL   flushBuffer   
11C4   CD B5 0C               CALL   printStr   
11C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11D4   E1                     POP   hl   
11D5   E5                     PUSH   hl   
11D6   E5                     PUSH   hl   
11D7   CD D4 0D               CALL   run   
11DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11E9   CD 3D 0C               CALL   flushBuffer   
11EC   76                     HALT      
11ED                EXPECTM_2796S49:      
11ED   E1                     POP   HL   
11EE                          ;*Macro unroll:  test "0", 0
11EE   31 00 50               LD   SP,STACK   
11F1   CD FD 0C               CALL   coldInit   
11F4   CD 10 4E               CALL   execStr   
11F7   30 00                  DB   "0",0   
11F9   CD 3D 0C               CALL   flushBuffer   
11FC   E1                     POP   HL   
11FD   E5                     PUSH   HL   
11FE   11 00 00               LD   DE,0   
1201   B7                     OR   A   
1202   ED 52                  SBC   HL,DE   
1204   7D                     LD   A,L   
1205   B4                     OR   H   
1206   CA 62 12               JP   Z,expectM_2797S50   
1209   CD B5 0C               CALL   printStr   
120C   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1214   CD B5 0C               CALL   printStr   
1217   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1226   21 00 00               LD   hl,0   
1229   E5                     PUSH   hl   
122A   E5                     PUSH   hl   
122B   CD D4 0D               CALL   run   
122E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1236   CD 3D 0C               CALL   flushBuffer   
1239   CD B5 0C               CALL   printStr   
123C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1249   E1                     POP   hl   
124A   E5                     PUSH   hl   
124B   E5                     PUSH   hl   
124C   CD D4 0D               CALL   run   
124F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
125E   CD 3D 0C               CALL   flushBuffer   
1261   76                     HALT      
1262                EXPECTM_2797S50:      
1262   E1                     POP   HL   
1263                          ;*Macro unroll:  test "10", 10
1263   31 00 50               LD   SP,STACK   
1266   CD FD 0C               CALL   coldInit   
1269   CD 10 4E               CALL   execStr   
126C   31 30 00               DB   "10",0   
126F   CD 3D 0C               CALL   flushBuffer   
1272   E1                     POP   HL   
1273   E5                     PUSH   HL   
1274   11 0A 00               LD   DE,10   
1277   B7                     OR   A   
1278   ED 52                  SBC   HL,DE   
127A   7D                     LD   A,L   
127B   B4                     OR   H   
127C   CA D9 12               JP   Z,expectM_2798S51   
127F   CD B5 0C               CALL   printStr   
1282   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
128B   CD B5 0C               CALL   printStr   
128E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
129D   21 0A 00               LD   hl,10   
12A0   E5                     PUSH   hl   
12A1   E5                     PUSH   hl   
12A2   CD D4 0D               CALL   run   
12A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12AD   CD 3D 0C               CALL   flushBuffer   
12B0   CD B5 0C               CALL   printStr   
12B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12C0   E1                     POP   hl   
12C1   E5                     PUSH   hl   
12C2   E5                     PUSH   hl   
12C3   CD D4 0D               CALL   run   
12C6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12D5   CD 3D 0C               CALL   flushBuffer   
12D8   76                     HALT      
12D9                EXPECTM_2798S51:      
12D9   E1                     POP   HL   
12DA                          ;*Macro unroll:  test "123", 123
12DA   31 00 50               LD   SP,STACK   
12DD   CD FD 0C               CALL   coldInit   
12E0   CD 10 4E               CALL   execStr   
12E3   31 32 33 00            DB   "123",0   
12E7   CD 3D 0C               CALL   flushBuffer   
12EA   E1                     POP   HL   
12EB   E5                     PUSH   HL   
12EC   11 7B 00               LD   DE,123   
12EF   B7                     OR   A   
12F0   ED 52                  SBC   HL,DE   
12F2   7D                     LD   A,L   
12F3   B4                     OR   H   
12F4   CA 52 13               JP   Z,expectM_2799S52   
12F7   CD B5 0C               CALL   printStr   
12FA   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1304   CD B5 0C               CALL   printStr   
1307   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1316   21 7B 00               LD   hl,123   
1319   E5                     PUSH   hl   
131A   E5                     PUSH   hl   
131B   CD D4 0D               CALL   run   
131E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1326   CD 3D 0C               CALL   flushBuffer   
1329   CD B5 0C               CALL   printStr   
132C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1339   E1                     POP   hl   
133A   E5                     PUSH   hl   
133B   E5                     PUSH   hl   
133C   CD D4 0D               CALL   run   
133F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
134E   CD 3D 0C               CALL   flushBuffer   
1351   76                     HALT      
1352                EXPECTM_2799S52:      
1352   E1                     POP   HL   
1353                          ;*Macro unroll:  test "-1",-1
1353   31 00 50               LD   SP,STACK   
1356   CD FD 0C               CALL   coldInit   
1359   CD 10 4E               CALL   execStr   
135C   2D 31 00               DB   "-1",0   
135F   CD 3D 0C               CALL   flushBuffer   
1362   E1                     POP   HL   
1363   E5                     PUSH   HL   
1364   11 FF FF               LD   DE,-1   
1367   B7                     OR   A   
1368   ED 52                  SBC   HL,DE   
136A   7D                     LD   A,L   
136B   B4                     OR   H   
136C   CA C9 13               JP   Z,expectM_2800S53   
136F   CD B5 0C               CALL   printStr   
1372   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
137B   CD B5 0C               CALL   printStr   
137E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
138D   21 FF FF               LD   hl,-1   
1390   E5                     PUSH   hl   
1391   E5                     PUSH   hl   
1392   CD D4 0D               CALL   run   
1395   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
139D   CD 3D 0C               CALL   flushBuffer   
13A0   CD B5 0C               CALL   printStr   
13A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13B0   E1                     POP   hl   
13B1   E5                     PUSH   hl   
13B2   E5                     PUSH   hl   
13B3   CD D4 0D               CALL   run   
13B6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13C5   CD 3D 0C               CALL   flushBuffer   
13C8   76                     HALT      
13C9                EXPECTM_2800S53:      
13C9   E1                     POP   HL   
13CA                          ;*Macro unroll:  test "''", 0
13CA   31 00 50               LD   SP,STACK   
13CD   CD FD 0C               CALL   coldInit   
13D0   CD 10 4E               CALL   execStr   
13D3   27 27 00               DB   "''",0   
13D6   CD 3D 0C               CALL   flushBuffer   
13D9   E1                     POP   HL   
13DA   E5                     PUSH   HL   
13DB   11 00 00               LD   DE,0   
13DE   B7                     OR   A   
13DF   ED 52                  SBC   HL,DE   
13E1   7D                     LD   A,L   
13E2   B4                     OR   H   
13E3   CA 40 14               JP   Z,expectM_2801S54   
13E6   CD B5 0C               CALL   printStr   
13E9   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
13F2   CD B5 0C               CALL   printStr   
13F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1404   21 00 00               LD   hl,0   
1407   E5                     PUSH   hl   
1408   E5                     PUSH   hl   
1409   CD D4 0D               CALL   run   
140C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1414   CD 3D 0C               CALL   flushBuffer   
1417   CD B5 0C               CALL   printStr   
141A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1427   E1                     POP   hl   
1428   E5                     PUSH   hl   
1429   E5                     PUSH   hl   
142A   CD D4 0D               CALL   run   
142D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
143C   CD 3D 0C               CALL   flushBuffer   
143F   76                     HALT      
1440                EXPECTM_2801S54:      
1440   E1                     POP   HL   
1441                          ;*Macro unroll:  test "'a'", $61
1441   31 00 50               LD   SP,STACK   
1444   CD FD 0C               CALL   coldInit   
1447   CD 10 4E               CALL   execStr   
144A   27 61 27 00            DB   "'a'",0   
144E   CD 3D 0C               CALL   flushBuffer   
1451   E1                     POP   HL   
1452   E5                     PUSH   HL   
1453   11 61 00               LD   DE,$61   
1456   B7                     OR   A   
1457   ED 52                  SBC   HL,DE   
1459   7D                     LD   A,L   
145A   B4                     OR   H   
145B   CA B9 14               JP   Z,expectM_2802S55   
145E   CD B5 0C               CALL   printStr   
1461   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
146B   CD B5 0C               CALL   printStr   
146E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
147D   21 61 00               LD   hl,$61   
1480   E5                     PUSH   hl   
1481   E5                     PUSH   hl   
1482   CD D4 0D               CALL   run   
1485   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
148D   CD 3D 0C               CALL   flushBuffer   
1490   CD B5 0C               CALL   printStr   
1493   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14A0   E1                     POP   hl   
14A1   E5                     PUSH   hl   
14A2   E5                     PUSH   hl   
14A3   CD D4 0D               CALL   run   
14A6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14B5   CD 3D 0C               CALL   flushBuffer   
14B8   76                     HALT      
14B9                EXPECTM_2802S55:      
14B9   E1                     POP   HL   
14BA                          ;*Macro unroll:  test "'\\''", $27
14BA   31 00 50               LD   SP,STACK   
14BD   CD FD 0C               CALL   coldInit   
14C0   CD 10 4E               CALL   execStr   
14C3   27 5C 27 27 00         DB   "'\\''",0   
14C8   CD 3D 0C               CALL   flushBuffer   
14CB   E1                     POP   HL   
14CC   E5                     PUSH   HL   
14CD   11 27 00               LD   DE,$27   
14D0   B7                     OR   A   
14D1   ED 52                  SBC   HL,DE   
14D3   7D                     LD   A,L   
14D4   B4                     OR   H   
14D5   CA 34 15               JP   Z,expectM_2803S56   
14D8   CD B5 0C               CALL   printStr   
14DB   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
14E6   CD B5 0C               CALL   printStr   
14E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14F8   21 27 00               LD   hl,$27   
14FB   E5                     PUSH   hl   
14FC   E5                     PUSH   hl   
14FD   CD D4 0D               CALL   run   
1500   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1508   CD 3D 0C               CALL   flushBuffer   
150B   CD B5 0C               CALL   printStr   
150E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
151B   E1                     POP   hl   
151C   E5                     PUSH   hl   
151D   E5                     PUSH   hl   
151E   CD D4 0D               CALL   run   
1521   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1530   CD 3D 0C               CALL   flushBuffer   
1533   76                     HALT      
1534                EXPECTM_2803S56:      
1534   E1                     POP   HL   
1535                          ;*Macro unroll:  test "$10", $10
1535   31 00 50               LD   SP,STACK   
1538   CD FD 0C               CALL   coldInit   
153B   CD 10 4E               CALL   execStr   
153E   24 31 30 00            DB   "$10",0   
1542   CD 3D 0C               CALL   flushBuffer   
1545   E1                     POP   HL   
1546   E5                     PUSH   HL   
1547   11 10 00               LD   DE,$10   
154A   B7                     OR   A   
154B   ED 52                  SBC   HL,DE   
154D   7D                     LD   A,L   
154E   B4                     OR   H   
154F   CA AD 15               JP   Z,expectM_2804S57   
1552   CD B5 0C               CALL   printStr   
1555   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
155F   CD B5 0C               CALL   printStr   
1562   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1571   21 10 00               LD   hl,$10   
1574   E5                     PUSH   hl   
1575   E5                     PUSH   hl   
1576   CD D4 0D               CALL   run   
1579   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1581   CD 3D 0C               CALL   flushBuffer   
1584   CD B5 0C               CALL   printStr   
1587   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1594   E1                     POP   hl   
1595   E5                     PUSH   hl   
1596   E5                     PUSH   hl   
1597   CD D4 0D               CALL   run   
159A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15A9   CD 3D 0C               CALL   flushBuffer   
15AC   76                     HALT      
15AD                EXPECTM_2804S57:      
15AD   E1                     POP   HL   
15AE                          ;*Macro unroll:  test "$FF", $FF
15AE   31 00 50               LD   SP,STACK   
15B1   CD FD 0C               CALL   coldInit   
15B4   CD 10 4E               CALL   execStr   
15B7   24 46 46 00            DB   "$FF",0   
15BB   CD 3D 0C               CALL   flushBuffer   
15BE   E1                     POP   HL   
15BF   E5                     PUSH   HL   
15C0   11 FF 00               LD   DE,$FF   
15C3   B7                     OR   A   
15C4   ED 52                  SBC   HL,DE   
15C6   7D                     LD   A,L   
15C7   B4                     OR   H   
15C8   CA 26 16               JP   Z,expectM_2805S58   
15CB   CD B5 0C               CALL   printStr   
15CE   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
15D8   CD B5 0C               CALL   printStr   
15DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15EA   21 FF 00               LD   hl,$FF   
15ED   E5                     PUSH   hl   
15EE   E5                     PUSH   hl   
15EF   CD D4 0D               CALL   run   
15F2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15FA   CD 3D 0C               CALL   flushBuffer   
15FD   CD B5 0C               CALL   printStr   
1600   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
160D   E1                     POP   hl   
160E   E5                     PUSH   hl   
160F   E5                     PUSH   hl   
1610   CD D4 0D               CALL   run   
1613   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1622   CD 3D 0C               CALL   flushBuffer   
1625   76                     HALT      
1626                EXPECTM_2805S58:      
1626   E1                     POP   HL   
1627                          ;*Macro unroll:  test "-1 2 +",1
1627   31 00 50               LD   SP,STACK   
162A   CD FD 0C               CALL   coldInit   
162D   CD 10 4E               CALL   execStr   
1630   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1637   CD 3D 0C               CALL   flushBuffer   
163A   E1                     POP   HL   
163B   E5                     PUSH   HL   
163C   11 01 00               LD   DE,1   
163F   B7                     OR   A   
1640   ED 52                  SBC   HL,DE   
1642   7D                     LD   A,L   
1643   B4                     OR   H   
1644   CA A5 16               JP   Z,expectM_2806S59   
1647   CD B5 0C               CALL   printStr   
164A   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1657   CD B5 0C               CALL   printStr   
165A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1669   21 01 00               LD   hl,1   
166C   E5                     PUSH   hl   
166D   E5                     PUSH   hl   
166E   CD D4 0D               CALL   run   
1671   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1679   CD 3D 0C               CALL   flushBuffer   
167C   CD B5 0C               CALL   printStr   
167F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
168C   E1                     POP   hl   
168D   E5                     PUSH   hl   
168E   E5                     PUSH   hl   
168F   CD D4 0D               CALL   run   
1692   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16A1   CD 3D 0C               CALL   flushBuffer   
16A4   76                     HALT      
16A5                EXPECTM_2806S59:      
16A5   E1                     POP   HL   
16A6                          ;*Macro unroll:  test "-1 1 +",0
16A6   31 00 50               LD   SP,STACK   
16A9   CD FD 0C               CALL   coldInit   
16AC   CD 10 4E               CALL   execStr   
16AF   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
16B6   CD 3D 0C               CALL   flushBuffer   
16B9   E1                     POP   HL   
16BA   E5                     PUSH   HL   
16BB   11 00 00               LD   DE,0   
16BE   B7                     OR   A   
16BF   ED 52                  SBC   HL,DE   
16C1   7D                     LD   A,L   
16C2   B4                     OR   H   
16C3   CA 24 17               JP   Z,expectM_2807S60   
16C6   CD B5 0C               CALL   printStr   
16C9   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
16D6   CD B5 0C               CALL   printStr   
16D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16E8   21 00 00               LD   hl,0   
16EB   E5                     PUSH   hl   
16EC   E5                     PUSH   hl   
16ED   CD D4 0D               CALL   run   
16F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16F8   CD 3D 0C               CALL   flushBuffer   
16FB   CD B5 0C               CALL   printStr   
16FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
170B   E1                     POP   hl   
170C   E5                     PUSH   hl   
170D   E5                     PUSH   hl   
170E   CD D4 0D               CALL   run   
1711   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1720   CD 3D 0C               CALL   flushBuffer   
1723   76                     HALT      
1724                EXPECTM_2807S60:      
1724   E1                     POP   HL   
1725                          ;*Macro unroll:  test "1 2 +", 3
1725   31 00 50               LD   SP,STACK   
1728   CD FD 0C               CALL   coldInit   
172B   CD 10 4E               CALL   execStr   
172E   31 20 32 20 2B 00      DB   "1 2 +",0   
1734   CD 3D 0C               CALL   flushBuffer   
1737   E1                     POP   HL   
1738   E5                     PUSH   HL   
1739   11 03 00               LD   DE,3   
173C   B7                     OR   A   
173D   ED 52                  SBC   HL,DE   
173F   7D                     LD   A,L   
1740   B4                     OR   H   
1741   CA A1 17               JP   Z,expectM_2808S61   
1744   CD B5 0C               CALL   printStr   
1747   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1753   CD B5 0C               CALL   printStr   
1756   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1765   21 03 00               LD   hl,3   
1768   E5                     PUSH   hl   
1769   E5                     PUSH   hl   
176A   CD D4 0D               CALL   run   
176D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1775   CD 3D 0C               CALL   flushBuffer   
1778   CD B5 0C               CALL   printStr   
177B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1788   E1                     POP   hl   
1789   E5                     PUSH   hl   
178A   E5                     PUSH   hl   
178B   CD D4 0D               CALL   run   
178E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
179D   CD 3D 0C               CALL   flushBuffer   
17A0   76                     HALT      
17A1                EXPECTM_2808S61:      
17A1   E1                     POP   HL   
17A2                          ;*Macro unroll:  test "4 1 2 +", 3
17A2   31 00 50               LD   SP,STACK   
17A5   CD FD 0C               CALL   coldInit   
17A8   CD 10 4E               CALL   execStr   
17AB   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
17B3   CD 3D 0C               CALL   flushBuffer   
17B6   E1                     POP   HL   
17B7   E5                     PUSH   HL   
17B8   11 03 00               LD   DE,3   
17BB   B7                     OR   A   
17BC   ED 52                  SBC   HL,DE   
17BE   7D                     LD   A,L   
17BF   B4                     OR   H   
17C0   CA 22 18               JP   Z,expectM_2809S62   
17C3   CD B5 0C               CALL   printStr   
17C6   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
17D4   CD B5 0C               CALL   printStr   
17D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17E6   21 03 00               LD   hl,3   
17E9   E5                     PUSH   hl   
17EA   E5                     PUSH   hl   
17EB   CD D4 0D               CALL   run   
17EE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17F6   CD 3D 0C               CALL   flushBuffer   
17F9   CD B5 0C               CALL   printStr   
17FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1809   E1                     POP   hl   
180A   E5                     PUSH   hl   
180B   E5                     PUSH   hl   
180C   CD D4 0D               CALL   run   
180F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
181E   CD 3D 0C               CALL   flushBuffer   
1821   76                     HALT      
1822                EXPECTM_2809S62:      
1822   E1                     POP   HL   
1823                          ;*Macro unroll:  test "123 456 +", 123+456
1823   31 00 50               LD   SP,STACK   
1826   CD FD 0C               CALL   coldInit   
1829   CD 10 4E               CALL   execStr   
182C   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1836   CD 3D 0C               CALL   flushBuffer   
1839   E1                     POP   HL   
183A   E5                     PUSH   HL   
183B   11 43 02               LD   DE,123+456   
183E   B7                     OR   A   
183F   ED 52                  SBC   HL,DE   
1841   7D                     LD   A,L   
1842   B4                     OR   H   
1843   CA A7 18               JP   Z,expectM_2810S63   
1846   CD B5 0C               CALL   printStr   
1849   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1859   CD B5 0C               CALL   printStr   
185C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
186B   21 43 02               LD   hl,123+456   
186E   E5                     PUSH   hl   
186F   E5                     PUSH   hl   
1870   CD D4 0D               CALL   run   
1873   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
187B   CD 3D 0C               CALL   flushBuffer   
187E   CD B5 0C               CALL   printStr   
1881   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
188E   E1                     POP   hl   
188F   E5                     PUSH   hl   
1890   E5                     PUSH   hl   
1891   CD D4 0D               CALL   run   
1894   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18A3   CD 3D 0C               CALL   flushBuffer   
18A6   76                     HALT      
18A7                EXPECTM_2810S63:      
18A7   E1                     POP   HL   
18A8                          ;*Macro unroll:  test "64 128 +", 64+128
18A8   31 00 50               LD   SP,STACK   
18AB   CD FD 0C               CALL   coldInit   
18AE   CD 10 4E               CALL   execStr   
18B1   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
18BA   CD 3D 0C               CALL   flushBuffer   
18BD   E1                     POP   HL   
18BE   E5                     PUSH   HL   
18BF   11 C0 00               LD   DE,64+128   
18C2   B7                     OR   A   
18C3   ED 52                  SBC   HL,DE   
18C5   7D                     LD   A,L   
18C6   B4                     OR   H   
18C7   CA 2A 19               JP   Z,expectM_2811S64   
18CA   CD B5 0C               CALL   printStr   
18CD   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
18DC   CD B5 0C               CALL   printStr   
18DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18EE   21 C0 00               LD   hl,64+128   
18F1   E5                     PUSH   hl   
18F2   E5                     PUSH   hl   
18F3   CD D4 0D               CALL   run   
18F6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18FE   CD 3D 0C               CALL   flushBuffer   
1901   CD B5 0C               CALL   printStr   
1904   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1911   E1                     POP   hl   
1912   E5                     PUSH   hl   
1913   E5                     PUSH   hl   
1914   CD D4 0D               CALL   run   
1917   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1926   CD 3D 0C               CALL   flushBuffer   
1929   76                     HALT      
192A                EXPECTM_2811S64:      
192A   E1                     POP   HL   
192B                          ;*Macro unroll:  test "1 2 +", 3
192B   31 00 50               LD   SP,STACK   
192E   CD FD 0C               CALL   coldInit   
1931   CD 10 4E               CALL   execStr   
1934   31 20 32 20 2B 00      DB   "1 2 +",0   
193A   CD 3D 0C               CALL   flushBuffer   
193D   E1                     POP   HL   
193E   E5                     PUSH   HL   
193F   11 03 00               LD   DE,3   
1942   B7                     OR   A   
1943   ED 52                  SBC   HL,DE   
1945   7D                     LD   A,L   
1946   B4                     OR   H   
1947   CA A7 19               JP   Z,expectM_2812S65   
194A   CD B5 0C               CALL   printStr   
194D   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1959   CD B5 0C               CALL   printStr   
195C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
196B   21 03 00               LD   hl,3   
196E   E5                     PUSH   hl   
196F   E5                     PUSH   hl   
1970   CD D4 0D               CALL   run   
1973   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
197B   CD 3D 0C               CALL   flushBuffer   
197E   CD B5 0C               CALL   printStr   
1981   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
198E   E1                     POP   hl   
198F   E5                     PUSH   hl   
1990   E5                     PUSH   hl   
1991   CD D4 0D               CALL   run   
1994   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19A3   CD 3D 0C               CALL   flushBuffer   
19A6   76                     HALT      
19A7                EXPECTM_2812S65:      
19A7   E1                     POP   HL   
19A8                          ;*Macro unroll:  test "1a= a++ a",2
19A8   31 00 50               LD   SP,STACK   
19AB   CD FD 0C               CALL   coldInit   
19AE   CD 10 4E               CALL   execStr   
19B1   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
19BB   CD 3D 0C               CALL   flushBuffer   
19BE   E1                     POP   HL   
19BF   E5                     PUSH   HL   
19C0   11 02 00               LD   DE,2   
19C3   B7                     OR   A   
19C4   ED 52                  SBC   HL,DE   
19C6   7D                     LD   A,L   
19C7   B4                     OR   H   
19C8   CA 2C 1A               JP   Z,expectM_2813S66   
19CB   CD B5 0C               CALL   printStr   
19CE   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
19DE   CD B5 0C               CALL   printStr   
19E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19F0   21 02 00               LD   hl,2   
19F3   E5                     PUSH   hl   
19F4   E5                     PUSH   hl   
19F5   CD D4 0D               CALL   run   
19F8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A00   CD 3D 0C               CALL   flushBuffer   
1A03   CD B5 0C               CALL   printStr   
1A06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A13   E1                     POP   hl   
1A14   E5                     PUSH   hl   
1A15   E5                     PUSH   hl   
1A16   CD D4 0D               CALL   run   
1A19   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A28   CD 3D 0C               CALL   flushBuffer   
1A2B   76                     HALT      
1A2C                EXPECTM_2813S66:      
1A2C   E1                     POP   HL   
1A2D                          ;*Macro unroll:  test "-1 -1 -",0
1A2D   31 00 50               LD   SP,STACK   
1A30   CD FD 0C               CALL   coldInit   
1A33   CD 10 4E               CALL   execStr   
1A36   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1A3E   CD 3D 0C               CALL   flushBuffer   
1A41   E1                     POP   HL   
1A42   E5                     PUSH   HL   
1A43   11 00 00               LD   DE,0   
1A46   B7                     OR   A   
1A47   ED 52                  SBC   HL,DE   
1A49   7D                     LD   A,L   
1A4A   B4                     OR   H   
1A4B   CA AD 1A               JP   Z,expectM_2814S67   
1A4E   CD B5 0C               CALL   printStr   
1A51   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1A5F   CD B5 0C               CALL   printStr   
1A62   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A71   21 00 00               LD   hl,0   
1A74   E5                     PUSH   hl   
1A75   E5                     PUSH   hl   
1A76   CD D4 0D               CALL   run   
1A79   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A81   CD 3D 0C               CALL   flushBuffer   
1A84   CD B5 0C               CALL   printStr   
1A87   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A94   E1                     POP   hl   
1A95   E5                     PUSH   hl   
1A96   E5                     PUSH   hl   
1A97   CD D4 0D               CALL   run   
1A9A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1AA9   CD 3D 0C               CALL   flushBuffer   
1AAC   76                     HALT      
1AAD                EXPECTM_2814S67:      
1AAD   E1                     POP   HL   
1AAE                          ;*Macro unroll:  test "5 3 -", 2
1AAE   31 00 50               LD   SP,STACK   
1AB1   CD FD 0C               CALL   coldInit   
1AB4   CD 10 4E               CALL   execStr   
1AB7   35 20 33 20 2D 00      DB   "5 3 -",0   
1ABD   CD 3D 0C               CALL   flushBuffer   
1AC0   E1                     POP   HL   
1AC1   E5                     PUSH   HL   
1AC2   11 02 00               LD   DE,2   
1AC5   B7                     OR   A   
1AC6   ED 52                  SBC   HL,DE   
1AC8   7D                     LD   A,L   
1AC9   B4                     OR   H   
1ACA   CA 2A 1B               JP   Z,expectM_2815S68   
1ACD   CD B5 0C               CALL   printStr   
1AD0   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1ADC   CD B5 0C               CALL   printStr   
1ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AEE   21 02 00               LD   hl,2   
1AF1   E5                     PUSH   hl   
1AF2   E5                     PUSH   hl   
1AF3   CD D4 0D               CALL   run   
1AF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AFE   CD 3D 0C               CALL   flushBuffer   
1B01   CD B5 0C               CALL   printStr   
1B04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B11   E1                     POP   hl   
1B12   E5                     PUSH   hl   
1B13   E5                     PUSH   hl   
1B14   CD D4 0D               CALL   run   
1B17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B26   CD 3D 0C               CALL   flushBuffer   
1B29   76                     HALT      
1B2A                EXPECTM_2815S68:      
1B2A   E1                     POP   HL   
1B2B                          ;*Macro unroll:  test "2 1 -",1
1B2B   31 00 50               LD   SP,STACK   
1B2E   CD FD 0C               CALL   coldInit   
1B31   CD 10 4E               CALL   execStr   
1B34   32 20 31 20 2D 00      DB   "2 1 -",0   
1B3A   CD 3D 0C               CALL   flushBuffer   
1B3D   E1                     POP   HL   
1B3E   E5                     PUSH   HL   
1B3F   11 01 00               LD   DE,1   
1B42   B7                     OR   A   
1B43   ED 52                  SBC   HL,DE   
1B45   7D                     LD   A,L   
1B46   B4                     OR   H   
1B47   CA A7 1B               JP   Z,expectM_2816S69   
1B4A   CD B5 0C               CALL   printStr   
1B4D   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1B59   CD B5 0C               CALL   printStr   
1B5C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B6B   21 01 00               LD   hl,1   
1B6E   E5                     PUSH   hl   
1B6F   E5                     PUSH   hl   
1B70   CD D4 0D               CALL   run   
1B73   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B7B   CD 3D 0C               CALL   flushBuffer   
1B7E   CD B5 0C               CALL   printStr   
1B81   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B8E   E1                     POP   hl   
1B8F   E5                     PUSH   hl   
1B90   E5                     PUSH   hl   
1B91   CD D4 0D               CALL   run   
1B94   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BA3   CD 3D 0C               CALL   flushBuffer   
1BA6   76                     HALT      
1BA7                EXPECTM_2816S69:      
1BA7   E1                     POP   HL   
1BA8                          ;*Macro unroll:  test "3a= a-- a",2
1BA8   31 00 50               LD   SP,STACK   
1BAB   CD FD 0C               CALL   coldInit   
1BAE   CD 10 4E               CALL   execStr   
1BB1   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1BBB   CD 3D 0C               CALL   flushBuffer   
1BBE   E1                     POP   HL   
1BBF   E5                     PUSH   HL   
1BC0   11 02 00               LD   DE,2   
1BC3   B7                     OR   A   
1BC4   ED 52                  SBC   HL,DE   
1BC6   7D                     LD   A,L   
1BC7   B4                     OR   H   
1BC8   CA 2C 1C               JP   Z,expectM_2817S70   
1BCB   CD B5 0C               CALL   printStr   
1BCE   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1BDE   CD B5 0C               CALL   printStr   
1BE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BF0   21 02 00               LD   hl,2   
1BF3   E5                     PUSH   hl   
1BF4   E5                     PUSH   hl   
1BF5   CD D4 0D               CALL   run   
1BF8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C00   CD 3D 0C               CALL   flushBuffer   
1C03   CD B5 0C               CALL   printStr   
1C06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C13   E1                     POP   hl   
1C14   E5                     PUSH   hl   
1C15   E5                     PUSH   hl   
1C16   CD D4 0D               CALL   run   
1C19   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C28   CD 3D 0C               CALL   flushBuffer   
1C2B   76                     HALT      
1C2C                EXPECTM_2817S70:      
1C2C   E1                     POP   HL   
1C2D                          ;*Macro unroll:  test "3 5 &", 1
1C2D   31 00 50               LD   SP,STACK   
1C30   CD FD 0C               CALL   coldInit   
1C33   CD 10 4E               CALL   execStr   
1C36   33 20 35 20 26 00      DB   "3 5 &",0   
1C3C   CD 3D 0C               CALL   flushBuffer   
1C3F   E1                     POP   HL   
1C40   E5                     PUSH   HL   
1C41   11 01 00               LD   DE,1   
1C44   B7                     OR   A   
1C45   ED 52                  SBC   HL,DE   
1C47   7D                     LD   A,L   
1C48   B4                     OR   H   
1C49   CA A9 1C               JP   Z,expectM_2818S71   
1C4C   CD B5 0C               CALL   printStr   
1C4F   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1C5B   CD B5 0C               CALL   printStr   
1C5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C6D   21 01 00               LD   hl,1   
1C70   E5                     PUSH   hl   
1C71   E5                     PUSH   hl   
1C72   CD D4 0D               CALL   run   
1C75   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C7D   CD 3D 0C               CALL   flushBuffer   
1C80   CD B5 0C               CALL   printStr   
1C83   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C90   E1                     POP   hl   
1C91   E5                     PUSH   hl   
1C92   E5                     PUSH   hl   
1C93   CD D4 0D               CALL   run   
1C96   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CA5   CD 3D 0C               CALL   flushBuffer   
1CA8   76                     HALT      
1CA9                EXPECTM_2818S71:      
1CA9   E1                     POP   HL   
1CAA                          ;*Macro unroll:  test "3 5 |", 7
1CAA   31 00 50               LD   SP,STACK   
1CAD   CD FD 0C               CALL   coldInit   
1CB0   CD 10 4E               CALL   execStr   
1CB3   33 20 35 20 7C 00      DB   "3 5 |",0   
1CB9   CD 3D 0C               CALL   flushBuffer   
1CBC   E1                     POP   HL   
1CBD   E5                     PUSH   HL   
1CBE   11 07 00               LD   DE,7   
1CC1   B7                     OR   A   
1CC2   ED 52                  SBC   HL,DE   
1CC4   7D                     LD   A,L   
1CC5   B4                     OR   H   
1CC6   CA 26 1D               JP   Z,expectM_2819S72   
1CC9   CD B5 0C               CALL   printStr   
1CCC   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1CD8   CD B5 0C               CALL   printStr   
1CDB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CEA   21 07 00               LD   hl,7   
1CED   E5                     PUSH   hl   
1CEE   E5                     PUSH   hl   
1CEF   CD D4 0D               CALL   run   
1CF2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CFA   CD 3D 0C               CALL   flushBuffer   
1CFD   CD B5 0C               CALL   printStr   
1D00   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D0D   E1                     POP   hl   
1D0E   E5                     PUSH   hl   
1D0F   E5                     PUSH   hl   
1D10   CD D4 0D               CALL   run   
1D13   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D22   CD 3D 0C               CALL   flushBuffer   
1D25   76                     HALT      
1D26                EXPECTM_2819S72:      
1D26   E1                     POP   HL   
1D27                          ;*Macro unroll:  test "3 5 /x", 6
1D27   31 00 50               LD   SP,STACK   
1D2A   CD FD 0C               CALL   coldInit   
1D2D   CD 10 4E               CALL   execStr   
1D30   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1D37   CD 3D 0C               CALL   flushBuffer   
1D3A   E1                     POP   HL   
1D3B   E5                     PUSH   HL   
1D3C   11 06 00               LD   DE,6   
1D3F   B7                     OR   A   
1D40   ED 52                  SBC   HL,DE   
1D42   7D                     LD   A,L   
1D43   B4                     OR   H   
1D44   CA A5 1D               JP   Z,expectM_2820S73   
1D47   CD B5 0C               CALL   printStr   
1D4A   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1D57   CD B5 0C               CALL   printStr   
1D5A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D69   21 06 00               LD   hl,6   
1D6C   E5                     PUSH   hl   
1D6D   E5                     PUSH   hl   
1D6E   CD D4 0D               CALL   run   
1D71   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D79   CD 3D 0C               CALL   flushBuffer   
1D7C   CD B5 0C               CALL   printStr   
1D7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D8C   E1                     POP   hl   
1D8D   E5                     PUSH   hl   
1D8E   E5                     PUSH   hl   
1D8F   CD D4 0D               CALL   run   
1D92   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DA1   CD 3D 0C               CALL   flushBuffer   
1DA4   76                     HALT      
1DA5                EXPECTM_2820S73:      
1DA5   E1                     POP   HL   
1DA6                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1DA6   31 00 50               LD   SP,STACK   
1DA9   CD FD 0C               CALL   coldInit   
1DAC   CD 10 4E               CALL   execStr   
1DAF   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1DBE   CD 3D 0C               CALL   flushBuffer   
1DC1   E1                     POP   HL   
1DC2   E5                     PUSH   HL   
1DC3   11 06 00               LD   DE,6   
1DC6   B7                     OR   A   
1DC7   ED 52                  SBC   HL,DE   
1DC9   7D                     LD   A,L   
1DCA   B4                     OR   H   
1DCB   CA 34 1E               JP   Z,expectM_2821S74   
1DCE   CD B5 0C               CALL   printStr   
1DD1   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1DE6   CD B5 0C               CALL   printStr   
1DE9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DF8   21 06 00               LD   hl,6   
1DFB   E5                     PUSH   hl   
1DFC   E5                     PUSH   hl   
1DFD   CD D4 0D               CALL   run   
1E00   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E08   CD 3D 0C               CALL   flushBuffer   
1E0B   CD B5 0C               CALL   printStr   
1E0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E1B   E1                     POP   hl   
1E1C   E5                     PUSH   hl   
1E1D   E5                     PUSH   hl   
1E1E   CD D4 0D               CALL   run   
1E21   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E30   CD 3D 0C               CALL   flushBuffer   
1E33   76                     HALT      
1E34                EXPECTM_2821S74:      
1E34   E1                     POP   HL   
1E35                          ;*Macro unroll:  test "2 3 *", 6
1E35   31 00 50               LD   SP,STACK   
1E38   CD FD 0C               CALL   coldInit   
1E3B   CD 10 4E               CALL   execStr   
1E3E   32 20 33 20 2A 00      DB   "2 3 *",0   
1E44   CD 3D 0C               CALL   flushBuffer   
1E47   E1                     POP   HL   
1E48   E5                     PUSH   HL   
1E49   11 06 00               LD   DE,6   
1E4C   B7                     OR   A   
1E4D   ED 52                  SBC   HL,DE   
1E4F   7D                     LD   A,L   
1E50   B4                     OR   H   
1E51   CA B1 1E               JP   Z,expectM_2822S75   
1E54   CD B5 0C               CALL   printStr   
1E57   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1E63   CD B5 0C               CALL   printStr   
1E66   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E75   21 06 00               LD   hl,6   
1E78   E5                     PUSH   hl   
1E79   E5                     PUSH   hl   
1E7A   CD D4 0D               CALL   run   
1E7D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E85   CD 3D 0C               CALL   flushBuffer   
1E88   CD B5 0C               CALL   printStr   
1E8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E98   E1                     POP   hl   
1E99   E5                     PUSH   hl   
1E9A   E5                     PUSH   hl   
1E9B   CD D4 0D               CALL   run   
1E9E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1EAD   CD 3D 0C               CALL   flushBuffer   
1EB0   76                     HALT      
1EB1                EXPECTM_2822S75:      
1EB1   E1                     POP   HL   
1EB2                          ;*Macro unroll:  test "1 2 3 + *", 5
1EB2   31 00 50               LD   SP,STACK   
1EB5   CD FD 0C               CALL   coldInit   
1EB8   CD 10 4E               CALL   execStr   
1EBB   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1EC5   CD 3D 0C               CALL   flushBuffer   
1EC8   E1                     POP   HL   
1EC9   E5                     PUSH   HL   
1ECA   11 05 00               LD   DE,5   
1ECD   B7                     OR   A   
1ECE   ED 52                  SBC   HL,DE   
1ED0   7D                     LD   A,L   
1ED1   B4                     OR   H   
1ED2   CA 36 1F               JP   Z,expectM_2823S76   
1ED5   CD B5 0C               CALL   printStr   
1ED8   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1EE8   CD B5 0C               CALL   printStr   
1EEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EFA   21 05 00               LD   hl,5   
1EFD   E5                     PUSH   hl   
1EFE   E5                     PUSH   hl   
1EFF   CD D4 0D               CALL   run   
1F02   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F0A   CD 3D 0C               CALL   flushBuffer   
1F0D   CD B5 0C               CALL   printStr   
1F10   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F1D   E1                     POP   hl   
1F1E   E5                     PUSH   hl   
1F1F   E5                     PUSH   hl   
1F20   CD D4 0D               CALL   run   
1F23   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F32   CD 3D 0C               CALL   flushBuffer   
1F35   76                     HALT      
1F36                EXPECTM_2823S76:      
1F36   E1                     POP   HL   
1F37                          ;*Macro unroll:  test "7 3 /", 2
1F37   31 00 50               LD   SP,STACK   
1F3A   CD FD 0C               CALL   coldInit   
1F3D   CD 10 4E               CALL   execStr   
1F40   37 20 33 20 2F 00      DB   "7 3 /",0   
1F46   CD 3D 0C               CALL   flushBuffer   
1F49   E1                     POP   HL   
1F4A   E5                     PUSH   HL   
1F4B   11 02 00               LD   DE,2   
1F4E   B7                     OR   A   
1F4F   ED 52                  SBC   HL,DE   
1F51   7D                     LD   A,L   
1F52   B4                     OR   H   
1F53   CA B3 1F               JP   Z,expectM_2824S77   
1F56   CD B5 0C               CALL   printStr   
1F59   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1F65   CD B5 0C               CALL   printStr   
1F68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F77   21 02 00               LD   hl,2   
1F7A   E5                     PUSH   hl   
1F7B   E5                     PUSH   hl   
1F7C   CD D4 0D               CALL   run   
1F7F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F87   CD 3D 0C               CALL   flushBuffer   
1F8A   CD B5 0C               CALL   printStr   
1F8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F9A   E1                     POP   hl   
1F9B   E5                     PUSH   hl   
1F9C   E5                     PUSH   hl   
1F9D   CD D4 0D               CALL   run   
1FA0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FAF   CD 3D 0C               CALL   flushBuffer   
1FB2   76                     HALT      
1FB3                EXPECTM_2824S77:      
1FB3   E1                     POP   HL   
1FB4                          ;*Macro unroll:  test "7 3 / /re", 1
1FB4   31 00 50               LD   SP,STACK   
1FB7   CD FD 0C               CALL   coldInit   
1FBA   CD 10 4E               CALL   execStr   
1FBD   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
1FC7   CD 3D 0C               CALL   flushBuffer   
1FCA   E1                     POP   HL   
1FCB   E5                     PUSH   HL   
1FCC   11 01 00               LD   DE,1   
1FCF   B7                     OR   A   
1FD0   ED 52                  SBC   HL,DE   
1FD2   7D                     LD   A,L   
1FD3   B4                     OR   H   
1FD4   CA 38 20               JP   Z,expectM_2825S78   
1FD7   CD B5 0C               CALL   printStr   
1FDA   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
1FEA   CD B5 0C               CALL   printStr   
1FED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FFC   21 01 00               LD   hl,1   
1FFF   E5                     PUSH   hl   
2000   E5                     PUSH   hl   
2001   CD D4 0D               CALL   run   
2004   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
200C   CD 3D 0C               CALL   flushBuffer   
200F   CD B5 0C               CALL   printStr   
2012   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
201F   E1                     POP   hl   
2020   E5                     PUSH   hl   
2021   E5                     PUSH   hl   
2022   CD D4 0D               CALL   run   
2025   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2034   CD 3D 0C               CALL   flushBuffer   
2037   76                     HALT      
2038                EXPECTM_2825S78:      
2038   E1                     POP   HL   
2039                          ;*Macro unroll:  test "7 3 /", 2
2039   31 00 50               LD   SP,STACK   
203C   CD FD 0C               CALL   coldInit   
203F   CD 10 4E               CALL   execStr   
2042   37 20 33 20 2F 00      DB   "7 3 /",0   
2048   CD 3D 0C               CALL   flushBuffer   
204B   E1                     POP   HL   
204C   E5                     PUSH   HL   
204D   11 02 00               LD   DE,2   
2050   B7                     OR   A   
2051   ED 52                  SBC   HL,DE   
2053   7D                     LD   A,L   
2054   B4                     OR   H   
2055   CA B5 20               JP   Z,expectM_2826S79   
2058   CD B5 0C               CALL   printStr   
205B   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2067   CD B5 0C               CALL   printStr   
206A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2079   21 02 00               LD   hl,2   
207C   E5                     PUSH   hl   
207D   E5                     PUSH   hl   
207E   CD D4 0D               CALL   run   
2081   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2089   CD 3D 0C               CALL   flushBuffer   
208C   CD B5 0C               CALL   printStr   
208F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
209C   E1                     POP   hl   
209D   E5                     PUSH   hl   
209E   E5                     PUSH   hl   
209F   CD D4 0D               CALL   run   
20A2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20B1   CD 3D 0C               CALL   flushBuffer   
20B4   76                     HALT      
20B5                EXPECTM_2826S79:      
20B5   E1                     POP   HL   
20B6                          ;*Macro unroll:  test "2 3 ==", FALSE
20B6   31 00 50               LD   SP,STACK   
20B9   CD FD 0C               CALL   coldInit   
20BC   CD 10 4E               CALL   execStr   
20BF   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
20C6   CD 3D 0C               CALL   flushBuffer   
20C9   E1                     POP   HL   
20CA   E5                     PUSH   HL   
20CB   11 00 00               LD   DE,FALSE   
20CE   B7                     OR   A   
20CF   ED 52                  SBC   HL,DE   
20D1   7D                     LD   A,L   
20D2   B4                     OR   H   
20D3   CA 34 21               JP   Z,expectM_2827S80   
20D6   CD B5 0C               CALL   printStr   
20D9   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
20E6   CD B5 0C               CALL   printStr   
20E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20F8   21 00 00               LD   hl,FALSE   
20FB   E5                     PUSH   hl   
20FC   E5                     PUSH   hl   
20FD   CD D4 0D               CALL   run   
2100   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2108   CD 3D 0C               CALL   flushBuffer   
210B   CD B5 0C               CALL   printStr   
210E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
211B   E1                     POP   hl   
211C   E5                     PUSH   hl   
211D   E5                     PUSH   hl   
211E   CD D4 0D               CALL   run   
2121   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2130   CD 3D 0C               CALL   flushBuffer   
2133   76                     HALT      
2134                EXPECTM_2827S80:      
2134   E1                     POP   HL   
2135                          ;*Macro unroll:  test "3 3 ==", TRUE
2135   31 00 50               LD   SP,STACK   
2138   CD FD 0C               CALL   coldInit   
213B   CD 10 4E               CALL   execStr   
213E   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2145   CD 3D 0C               CALL   flushBuffer   
2148   E1                     POP   HL   
2149   E5                     PUSH   HL   
214A   11 FF FF               LD   DE,TRUE   
214D   B7                     OR   A   
214E   ED 52                  SBC   HL,DE   
2150   7D                     LD   A,L   
2151   B4                     OR   H   
2152   CA B3 21               JP   Z,expectM_2828S81   
2155   CD B5 0C               CALL   printStr   
2158   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2165   CD B5 0C               CALL   printStr   
2168   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2177   21 FF FF               LD   hl,TRUE   
217A   E5                     PUSH   hl   
217B   E5                     PUSH   hl   
217C   CD D4 0D               CALL   run   
217F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2187   CD 3D 0C               CALL   flushBuffer   
218A   CD B5 0C               CALL   printStr   
218D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
219A   E1                     POP   hl   
219B   E5                     PUSH   hl   
219C   E5                     PUSH   hl   
219D   CD D4 0D               CALL   run   
21A0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21AF   CD 3D 0C               CALL   flushBuffer   
21B2   76                     HALT      
21B3                EXPECTM_2828S81:      
21B3   E1                     POP   HL   
21B4                          ;*Macro unroll:  test "1 2 <", TRUE
21B4   31 00 50               LD   SP,STACK   
21B7   CD FD 0C               CALL   coldInit   
21BA   CD 10 4E               CALL   execStr   
21BD   31 20 32 20 3C 00      DB   "1 2 <",0   
21C3   CD 3D 0C               CALL   flushBuffer   
21C6   E1                     POP   HL   
21C7   E5                     PUSH   HL   
21C8   11 FF FF               LD   DE,TRUE   
21CB   B7                     OR   A   
21CC   ED 52                  SBC   HL,DE   
21CE   7D                     LD   A,L   
21CF   B4                     OR   H   
21D0   CA 30 22               JP   Z,expectM_2829S82   
21D3   CD B5 0C               CALL   printStr   
21D6   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
21E2   CD B5 0C               CALL   printStr   
21E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21F4   21 FF FF               LD   hl,TRUE   
21F7   E5                     PUSH   hl   
21F8   E5                     PUSH   hl   
21F9   CD D4 0D               CALL   run   
21FC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2204   CD 3D 0C               CALL   flushBuffer   
2207   CD B5 0C               CALL   printStr   
220A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2217   E1                     POP   hl   
2218   E5                     PUSH   hl   
2219   E5                     PUSH   hl   
221A   CD D4 0D               CALL   run   
221D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
222C   CD 3D 0C               CALL   flushBuffer   
222F   76                     HALT      
2230                EXPECTM_2829S82:      
2230   E1                     POP   HL   
2231                          ;*Macro unroll:  test "2 1 <", FALSE
2231   31 00 50               LD   SP,STACK   
2234   CD FD 0C               CALL   coldInit   
2237   CD 10 4E               CALL   execStr   
223A   32 20 31 20 3C 00      DB   "2 1 <",0   
2240   CD 3D 0C               CALL   flushBuffer   
2243   E1                     POP   HL   
2244   E5                     PUSH   HL   
2245   11 00 00               LD   DE,FALSE   
2248   B7                     OR   A   
2249   ED 52                  SBC   HL,DE   
224B   7D                     LD   A,L   
224C   B4                     OR   H   
224D   CA AD 22               JP   Z,expectM_2830S83   
2250   CD B5 0C               CALL   printStr   
2253   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
225F   CD B5 0C               CALL   printStr   
2262   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2271   21 00 00               LD   hl,FALSE   
2274   E5                     PUSH   hl   
2275   E5                     PUSH   hl   
2276   CD D4 0D               CALL   run   
2279   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2281   CD 3D 0C               CALL   flushBuffer   
2284   CD B5 0C               CALL   printStr   
2287   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2294   E1                     POP   hl   
2295   E5                     PUSH   hl   
2296   E5                     PUSH   hl   
2297   CD D4 0D               CALL   run   
229A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22A9   CD 3D 0C               CALL   flushBuffer   
22AC   76                     HALT      
22AD                EXPECTM_2830S83:      
22AD   E1                     POP   HL   
22AE                          ;*Macro unroll:  test "2 3 <", TRUE
22AE   31 00 50               LD   SP,STACK   
22B1   CD FD 0C               CALL   coldInit   
22B4   CD 10 4E               CALL   execStr   
22B7   32 20 33 20 3C 00      DB   "2 3 <",0   
22BD   CD 3D 0C               CALL   flushBuffer   
22C0   E1                     POP   HL   
22C1   E5                     PUSH   HL   
22C2   11 FF FF               LD   DE,TRUE   
22C5   B7                     OR   A   
22C6   ED 52                  SBC   HL,DE   
22C8   7D                     LD   A,L   
22C9   B4                     OR   H   
22CA   CA 2A 23               JP   Z,expectM_2831S84   
22CD   CD B5 0C               CALL   printStr   
22D0   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
22DC   CD B5 0C               CALL   printStr   
22DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22EE   21 FF FF               LD   hl,TRUE   
22F1   E5                     PUSH   hl   
22F2   E5                     PUSH   hl   
22F3   CD D4 0D               CALL   run   
22F6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22FE   CD 3D 0C               CALL   flushBuffer   
2301   CD B5 0C               CALL   printStr   
2304   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2311   E1                     POP   hl   
2312   E5                     PUSH   hl   
2313   E5                     PUSH   hl   
2314   CD D4 0D               CALL   run   
2317   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2326   CD 3D 0C               CALL   flushBuffer   
2329   76                     HALT      
232A                EXPECTM_2831S84:      
232A   E1                     POP   HL   
232B                          ;*Macro unroll:  test "3 3 <", FALSE
232B   31 00 50               LD   SP,STACK   
232E   CD FD 0C               CALL   coldInit   
2331   CD 10 4E               CALL   execStr   
2334   33 20 33 20 3C 00      DB   "3 3 <",0   
233A   CD 3D 0C               CALL   flushBuffer   
233D   E1                     POP   HL   
233E   E5                     PUSH   HL   
233F   11 00 00               LD   DE,FALSE   
2342   B7                     OR   A   
2343   ED 52                  SBC   HL,DE   
2345   7D                     LD   A,L   
2346   B4                     OR   H   
2347   CA A7 23               JP   Z,expectM_2832S85   
234A   CD B5 0C               CALL   printStr   
234D   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2359   CD B5 0C               CALL   printStr   
235C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
236B   21 00 00               LD   hl,FALSE   
236E   E5                     PUSH   hl   
236F   E5                     PUSH   hl   
2370   CD D4 0D               CALL   run   
2373   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
237B   CD 3D 0C               CALL   flushBuffer   
237E   CD B5 0C               CALL   printStr   
2381   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
238E   E1                     POP   hl   
238F   E5                     PUSH   hl   
2390   E5                     PUSH   hl   
2391   CD D4 0D               CALL   run   
2394   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23A3   CD 3D 0C               CALL   flushBuffer   
23A6   76                     HALT      
23A7                EXPECTM_2832S85:      
23A7   E1                     POP   HL   
23A8                          ;*Macro unroll:  test "1 2 >", FALSE
23A8   31 00 50               LD   SP,STACK   
23AB   CD FD 0C               CALL   coldInit   
23AE   CD 10 4E               CALL   execStr   
23B1   31 20 32 20 3E 00      DB   "1 2 >",0   
23B7   CD 3D 0C               CALL   flushBuffer   
23BA   E1                     POP   HL   
23BB   E5                     PUSH   HL   
23BC   11 00 00               LD   DE,FALSE   
23BF   B7                     OR   A   
23C0   ED 52                  SBC   HL,DE   
23C2   7D                     LD   A,L   
23C3   B4                     OR   H   
23C4   CA 24 24               JP   Z,expectM_2833S86   
23C7   CD B5 0C               CALL   printStr   
23CA   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
23D6   CD B5 0C               CALL   printStr   
23D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23E8   21 00 00               LD   hl,FALSE   
23EB   E5                     PUSH   hl   
23EC   E5                     PUSH   hl   
23ED   CD D4 0D               CALL   run   
23F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23F8   CD 3D 0C               CALL   flushBuffer   
23FB   CD B5 0C               CALL   printStr   
23FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
240B   E1                     POP   hl   
240C   E5                     PUSH   hl   
240D   E5                     PUSH   hl   
240E   CD D4 0D               CALL   run   
2411   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2420   CD 3D 0C               CALL   flushBuffer   
2423   76                     HALT      
2424                EXPECTM_2833S86:      
2424   E1                     POP   HL   
2425                          ;*Macro unroll:  test "2 1 >", TRUE
2425   31 00 50               LD   SP,STACK   
2428   CD FD 0C               CALL   coldInit   
242B   CD 10 4E               CALL   execStr   
242E   32 20 31 20 3E 00      DB   "2 1 >",0   
2434   CD 3D 0C               CALL   flushBuffer   
2437   E1                     POP   HL   
2438   E5                     PUSH   HL   
2439   11 FF FF               LD   DE,TRUE   
243C   B7                     OR   A   
243D   ED 52                  SBC   HL,DE   
243F   7D                     LD   A,L   
2440   B4                     OR   H   
2441   CA A1 24               JP   Z,expectM_2834S87   
2444   CD B5 0C               CALL   printStr   
2447   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2453   CD B5 0C               CALL   printStr   
2456   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2465   21 FF FF               LD   hl,TRUE   
2468   E5                     PUSH   hl   
2469   E5                     PUSH   hl   
246A   CD D4 0D               CALL   run   
246D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2475   CD 3D 0C               CALL   flushBuffer   
2478   CD B5 0C               CALL   printStr   
247B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2488   E1                     POP   hl   
2489   E5                     PUSH   hl   
248A   E5                     PUSH   hl   
248B   CD D4 0D               CALL   run   
248E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
249D   CD 3D 0C               CALL   flushBuffer   
24A0   76                     HALT      
24A1                EXPECTM_2834S87:      
24A1   E1                     POP   HL   
24A2                          ;*Macro unroll:  test "3 3 >", FALSE
24A2   31 00 50               LD   SP,STACK   
24A5   CD FD 0C               CALL   coldInit   
24A8   CD 10 4E               CALL   execStr   
24AB   33 20 33 20 3E 00      DB   "3 3 >",0   
24B1   CD 3D 0C               CALL   flushBuffer   
24B4   E1                     POP   HL   
24B5   E5                     PUSH   HL   
24B6   11 00 00               LD   DE,FALSE   
24B9   B7                     OR   A   
24BA   ED 52                  SBC   HL,DE   
24BC   7D                     LD   A,L   
24BD   B4                     OR   H   
24BE   CA 1E 25               JP   Z,expectM_2835S88   
24C1   CD B5 0C               CALL   printStr   
24C4   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
24D0   CD B5 0C               CALL   printStr   
24D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24E2   21 00 00               LD   hl,FALSE   
24E5   E5                     PUSH   hl   
24E6   E5                     PUSH   hl   
24E7   CD D4 0D               CALL   run   
24EA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24F2   CD 3D 0C               CALL   flushBuffer   
24F5   CD B5 0C               CALL   printStr   
24F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2505   E1                     POP   hl   
2506   E5                     PUSH   hl   
2507   E5                     PUSH   hl   
2508   CD D4 0D               CALL   run   
250B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
251A   CD 3D 0C               CALL   flushBuffer   
251D   76                     HALT      
251E                EXPECTM_2835S88:      
251E   E1                     POP   HL   
251F                          ;*Macro unroll:  test "4 3 >", TRUE
251F   31 00 50               LD   SP,STACK   
2522   CD FD 0C               CALL   coldInit   
2525   CD 10 4E               CALL   execStr   
2528   34 20 33 20 3E 00      DB   "4 3 >",0   
252E   CD 3D 0C               CALL   flushBuffer   
2531   E1                     POP   HL   
2532   E5                     PUSH   HL   
2533   11 FF FF               LD   DE,TRUE   
2536   B7                     OR   A   
2537   ED 52                  SBC   HL,DE   
2539   7D                     LD   A,L   
253A   B4                     OR   H   
253B   CA 9B 25               JP   Z,expectM_2836S89   
253E   CD B5 0C               CALL   printStr   
2541   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
254D   CD B5 0C               CALL   printStr   
2550   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
255F   21 FF FF               LD   hl,TRUE   
2562   E5                     PUSH   hl   
2563   E5                     PUSH   hl   
2564   CD D4 0D               CALL   run   
2567   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
256F   CD 3D 0C               CALL   flushBuffer   
2572   CD B5 0C               CALL   printStr   
2575   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2582   E1                     POP   hl   
2583   E5                     PUSH   hl   
2584   E5                     PUSH   hl   
2585   CD D4 0D               CALL   run   
2588   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2597   CD 3D 0C               CALL   flushBuffer   
259A   76                     HALT      
259B                EXPECTM_2836S89:      
259B   E1                     POP   HL   
259C                          ;*Macro unroll:  test "2 2 <=", TRUE
259C   31 00 50               LD   SP,STACK   
259F   CD FD 0C               CALL   coldInit   
25A2   CD 10 4E               CALL   execStr   
25A5   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
25AC   CD 3D 0C               CALL   flushBuffer   
25AF   E1                     POP   HL   
25B0   E5                     PUSH   HL   
25B1   11 FF FF               LD   DE,TRUE   
25B4   B7                     OR   A   
25B5   ED 52                  SBC   HL,DE   
25B7   7D                     LD   A,L   
25B8   B4                     OR   H   
25B9   CA 1A 26               JP   Z,expectM_2837S90   
25BC   CD B5 0C               CALL   printStr   
25BF   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
25CC   CD B5 0C               CALL   printStr   
25CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25DE   21 FF FF               LD   hl,TRUE   
25E1   E5                     PUSH   hl   
25E2   E5                     PUSH   hl   
25E3   CD D4 0D               CALL   run   
25E6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25EE   CD 3D 0C               CALL   flushBuffer   
25F1   CD B5 0C               CALL   printStr   
25F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2601   E1                     POP   hl   
2602   E5                     PUSH   hl   
2603   E5                     PUSH   hl   
2604   CD D4 0D               CALL   run   
2607   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2616   CD 3D 0C               CALL   flushBuffer   
2619   76                     HALT      
261A                EXPECTM_2837S90:      
261A   E1                     POP   HL   
261B                          ;*Macro unroll:  test "2 2 >=", TRUE
261B   31 00 50               LD   SP,STACK   
261E   CD FD 0C               CALL   coldInit   
2621   CD 10 4E               CALL   execStr   
2624   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
262B   CD 3D 0C               CALL   flushBuffer   
262E   E1                     POP   HL   
262F   E5                     PUSH   HL   
2630   11 FF FF               LD   DE,TRUE   
2633   B7                     OR   A   
2634   ED 52                  SBC   HL,DE   
2636   7D                     LD   A,L   
2637   B4                     OR   H   
2638   CA 99 26               JP   Z,expectM_2838S91   
263B   CD B5 0C               CALL   printStr   
263E   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
264B   CD B5 0C               CALL   printStr   
264E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
265D   21 FF FF               LD   hl,TRUE   
2660   E5                     PUSH   hl   
2661   E5                     PUSH   hl   
2662   CD D4 0D               CALL   run   
2665   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
266D   CD 3D 0C               CALL   flushBuffer   
2670   CD B5 0C               CALL   printStr   
2673   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2680   E1                     POP   hl   
2681   E5                     PUSH   hl   
2682   E5                     PUSH   hl   
2683   CD D4 0D               CALL   run   
2686   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2695   CD 3D 0C               CALL   flushBuffer   
2698   76                     HALT      
2699                EXPECTM_2838S91:      
2699   E1                     POP   HL   
269A                          ;*Macro unroll:  test "3 1 <<", 6
269A   31 00 50               LD   SP,STACK   
269D   CD FD 0C               CALL   coldInit   
26A0   CD 10 4E               CALL   execStr   
26A3   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
26AA   CD 3D 0C               CALL   flushBuffer   
26AD   E1                     POP   HL   
26AE   E5                     PUSH   HL   
26AF   11 06 00               LD   DE,6   
26B2   B7                     OR   A   
26B3   ED 52                  SBC   HL,DE   
26B5   7D                     LD   A,L   
26B6   B4                     OR   H   
26B7   CA 18 27               JP   Z,expectM_2839S92   
26BA   CD B5 0C               CALL   printStr   
26BD   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
26CA   CD B5 0C               CALL   printStr   
26CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26DC   21 06 00               LD   hl,6   
26DF   E5                     PUSH   hl   
26E0   E5                     PUSH   hl   
26E1   CD D4 0D               CALL   run   
26E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26EC   CD 3D 0C               CALL   flushBuffer   
26EF   CD B5 0C               CALL   printStr   
26F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26FF   E1                     POP   hl   
2700   E5                     PUSH   hl   
2701   E5                     PUSH   hl   
2702   CD D4 0D               CALL   run   
2705   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2714   CD 3D 0C               CALL   flushBuffer   
2717   76                     HALT      
2718                EXPECTM_2839S92:      
2718   E1                     POP   HL   
2719                          ;*Macro unroll:  test "10 1 >>", 5
2719   31 00 50               LD   SP,STACK   
271C   CD FD 0C               CALL   coldInit   
271F   CD 10 4E               CALL   execStr   
2722   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
272A   CD 3D 0C               CALL   flushBuffer   
272D   E1                     POP   HL   
272E   E5                     PUSH   HL   
272F   11 05 00               LD   DE,5   
2732   B7                     OR   A   
2733   ED 52                  SBC   HL,DE   
2735   7D                     LD   A,L   
2736   B4                     OR   H   
2737   CA 99 27               JP   Z,expectM_2840S93   
273A   CD B5 0C               CALL   printStr   
273D   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
274B   CD B5 0C               CALL   printStr   
274E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
275D   21 05 00               LD   hl,5   
2760   E5                     PUSH   hl   
2761   E5                     PUSH   hl   
2762   CD D4 0D               CALL   run   
2765   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
276D   CD 3D 0C               CALL   flushBuffer   
2770   CD B5 0C               CALL   printStr   
2773   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2780   E1                     POP   hl   
2781   E5                     PUSH   hl   
2782   E5                     PUSH   hl   
2783   CD D4 0D               CALL   run   
2786   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2795   CD 3D 0C               CALL   flushBuffer   
2798   76                     HALT      
2799                EXPECTM_2840S93:      
2799   E1                     POP   HL   
279A                          ;*Macro unroll:  test "1 x = x", 1
279A   31 00 50               LD   SP,STACK   
279D   CD FD 0C               CALL   coldInit   
27A0   CD 10 4E               CALL   execStr   
27A3   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
27AB   CD 3D 0C               CALL   flushBuffer   
27AE   E1                     POP   HL   
27AF   E5                     PUSH   HL   
27B0   11 01 00               LD   DE,1   
27B3   B7                     OR   A   
27B4   ED 52                  SBC   HL,DE   
27B6   7D                     LD   A,L   
27B7   B4                     OR   H   
27B8   CA 1A 28               JP   Z,expectM_2841S94   
27BB   CD B5 0C               CALL   printStr   
27BE   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
27CC   CD B5 0C               CALL   printStr   
27CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27DE   21 01 00               LD   hl,1   
27E1   E5                     PUSH   hl   
27E2   E5                     PUSH   hl   
27E3   CD D4 0D               CALL   run   
27E6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27EE   CD 3D 0C               CALL   flushBuffer   
27F1   CD B5 0C               CALL   printStr   
27F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2801   E1                     POP   hl   
2802   E5                     PUSH   hl   
2803   E5                     PUSH   hl   
2804   CD D4 0D               CALL   run   
2807   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2816   CD 3D 0C               CALL   flushBuffer   
2819   76                     HALT      
281A                EXPECTM_2841S94:      
281A   E1                     POP   HL   
281B                          ;*Macro unroll:  test "1{}^", 1
281B   31 00 50               LD   SP,STACK   
281E   CD FD 0C               CALL   coldInit   
2821   CD 10 4E               CALL   execStr   
2824   31 7B 7D 5E 00         DB   "1{}^",0   
2829   CD 3D 0C               CALL   flushBuffer   
282C   E1                     POP   HL   
282D   E5                     PUSH   HL   
282E   11 01 00               LD   DE,1   
2831   B7                     OR   A   
2832   ED 52                  SBC   HL,DE   
2834   7D                     LD   A,L   
2835   B4                     OR   H   
2836   CA 95 28               JP   Z,expectM_2842S95   
2839   CD B5 0C               CALL   printStr   
283C   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2847   CD B5 0C               CALL   printStr   
284A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2859   21 01 00               LD   hl,1   
285C   E5                     PUSH   hl   
285D   E5                     PUSH   hl   
285E   CD D4 0D               CALL   run   
2861   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2869   CD 3D 0C               CALL   flushBuffer   
286C   CD B5 0C               CALL   printStr   
286F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
287C   E1                     POP   hl   
287D   E5                     PUSH   hl   
287E   E5                     PUSH   hl   
287F   CD D4 0D               CALL   run   
2882   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2891   CD 3D 0C               CALL   flushBuffer   
2894   76                     HALT      
2895                EXPECTM_2842S95:      
2895   E1                     POP   HL   
2896                          ;*Macro unroll:  test "{1}^", 1
2896   31 00 50               LD   SP,STACK   
2899   CD FD 0C               CALL   coldInit   
289C   CD 10 4E               CALL   execStr   
289F   7B 31 7D 5E 00         DB   "{1}^",0   
28A4   CD 3D 0C               CALL   flushBuffer   
28A7   E1                     POP   HL   
28A8   E5                     PUSH   HL   
28A9   11 01 00               LD   DE,1   
28AC   B7                     OR   A   
28AD   ED 52                  SBC   HL,DE   
28AF   7D                     LD   A,L   
28B0   B4                     OR   H   
28B1   CA 10 29               JP   Z,expectM_2843S96   
28B4   CD B5 0C               CALL   printStr   
28B7   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
28C2   CD B5 0C               CALL   printStr   
28C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28D4   21 01 00               LD   hl,1   
28D7   E5                     PUSH   hl   
28D8   E5                     PUSH   hl   
28D9   CD D4 0D               CALL   run   
28DC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28E4   CD 3D 0C               CALL   flushBuffer   
28E7   CD B5 0C               CALL   printStr   
28EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28F7   E1                     POP   hl   
28F8   E5                     PUSH   hl   
28F9   E5                     PUSH   hl   
28FA   CD D4 0D               CALL   run   
28FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
290C   CD 3D 0C               CALL   flushBuffer   
290F   76                     HALT      
2910                EXPECTM_2843S96:      
2910   E1                     POP   HL   
2911                          ;*Macro unroll:  test "{{1}^}^", 1
2911   31 00 50               LD   SP,STACK   
2914   CD FD 0C               CALL   coldInit   
2917   CD 10 4E               CALL   execStr   
291A   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2922   CD 3D 0C               CALL   flushBuffer   
2925   E1                     POP   HL   
2926   E5                     PUSH   HL   
2927   11 01 00               LD   DE,1   
292A   B7                     OR   A   
292B   ED 52                  SBC   HL,DE   
292D   7D                     LD   A,L   
292E   B4                     OR   H   
292F   CA 91 29               JP   Z,expectM_2844S97   
2932   CD B5 0C               CALL   printStr   
2935   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2943   CD B5 0C               CALL   printStr   
2946   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2955   21 01 00               LD   hl,1   
2958   E5                     PUSH   hl   
2959   E5                     PUSH   hl   
295A   CD D4 0D               CALL   run   
295D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2965   CD 3D 0C               CALL   flushBuffer   
2968   CD B5 0C               CALL   printStr   
296B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2978   E1                     POP   hl   
2979   E5                     PUSH   hl   
297A   E5                     PUSH   hl   
297B   CD D4 0D               CALL   run   
297E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
298D   CD 3D 0C               CALL   flushBuffer   
2990   76                     HALT      
2991                EXPECTM_2844S97:      
2991   E1                     POP   HL   
2992                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2992   31 00 50               LD   SP,STACK   
2995   CD FD 0C               CALL   coldInit   
2998   CD 10 4E               CALL   execStr   
299B   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
29A6   CD 3D 0C               CALL   flushBuffer   
29A9   E1                     POP   HL   
29AA   E5                     PUSH   HL   
29AB   11 01 00               LD   DE,1   
29AE   B7                     OR   A   
29AF   ED 52                  SBC   HL,DE   
29B1   7D                     LD   A,L   
29B2   B4                     OR   H   
29B3   CA 18 2A               JP   Z,expectM_2845S98   
29B6   CD B5 0C               CALL   printStr   
29B9   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
29CA   CD B5 0C               CALL   printStr   
29CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29DC   21 01 00               LD   hl,1   
29DF   E5                     PUSH   hl   
29E0   E5                     PUSH   hl   
29E1   CD D4 0D               CALL   run   
29E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29EC   CD 3D 0C               CALL   flushBuffer   
29EF   CD B5 0C               CALL   printStr   
29F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29FF   E1                     POP   hl   
2A00   E5                     PUSH   hl   
2A01   E5                     PUSH   hl   
2A02   CD D4 0D               CALL   run   
2A05   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A14   CD 3D 0C               CALL   flushBuffer   
2A17   76                     HALT      
2A18                EXPECTM_2845S98:      
2A18   E1                     POP   HL   
2A19                          ;*Macro unroll:  test "5 /f{10} ?", 5
2A19   31 00 50               LD   SP,STACK   
2A1C   CD FD 0C               CALL   coldInit   
2A1F   CD 10 4E               CALL   execStr   
2A22   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2A2D   CD 3D 0C               CALL   flushBuffer   
2A30   E1                     POP   HL   
2A31   E5                     PUSH   HL   
2A32   11 05 00               LD   DE,5   
2A35   B7                     OR   A   
2A36   ED 52                  SBC   HL,DE   
2A38   7D                     LD   A,L   
2A39   B4                     OR   H   
2A3A   CA 9F 2A               JP   Z,expectM_2846S99   
2A3D   CD B5 0C               CALL   printStr   
2A40   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2A51   CD B5 0C               CALL   printStr   
2A54   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A63   21 05 00               LD   hl,5   
2A66   E5                     PUSH   hl   
2A67   E5                     PUSH   hl   
2A68   CD D4 0D               CALL   run   
2A6B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A73   CD 3D 0C               CALL   flushBuffer   
2A76   CD B5 0C               CALL   printStr   
2A79   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A86   E1                     POP   hl   
2A87   E5                     PUSH   hl   
2A88   E5                     PUSH   hl   
2A89   CD D4 0D               CALL   run   
2A8C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A9B   CD 3D 0C               CALL   flushBuffer   
2A9E   76                     HALT      
2A9F                EXPECTM_2846S99:      
2A9F   E1                     POP   HL   
2AA0                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2AA0   31 00 50               LD   SP,STACK   
2AA3   CD FD 0C               CALL   coldInit   
2AA6   CD 10 4E               CALL   execStr   
2AA9   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2AB6   CD 3D 0C               CALL   flushBuffer   
2AB9   E1                     POP   HL   
2ABA   E5                     PUSH   HL   
2ABB   11 0F 00               LD   DE,15   
2ABE   B7                     OR   A   
2ABF   ED 52                  SBC   HL,DE   
2AC1   7D                     LD   A,L   
2AC2   B4                     OR   H   
2AC3   CA 2A 2B               JP   Z,expectM_2847S100   
2AC6   CD B5 0C               CALL   printStr   
2AC9   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2ADC   CD B5 0C               CALL   printStr   
2ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEE   21 0F 00               LD   hl,15   
2AF1   E5                     PUSH   hl   
2AF2   E5                     PUSH   hl   
2AF3   CD D4 0D               CALL   run   
2AF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AFE   CD 3D 0C               CALL   flushBuffer   
2B01   CD B5 0C               CALL   printStr   
2B04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B11   E1                     POP   hl   
2B12   E5                     PUSH   hl   
2B13   E5                     PUSH   hl   
2B14   CD D4 0D               CALL   run   
2B17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B26   CD 3D 0C               CALL   flushBuffer   
2B29   76                     HALT      
2B2A                EXPECTM_2847S100:      
2B2A   E1                     POP   HL   
2B2B                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2B2B   31 00 50               LD   SP,STACK   
2B2E   CD FD 0C               CALL   coldInit   
2B31   CD 10 4E               CALL   execStr   
2B34   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2B46   CD 3D 0C               CALL   flushBuffer   
2B49   E1                     POP   HL   
2B4A   E5                     PUSH   HL   
2B4B   11 15 00               LD   DE,21   
2B4E   B7                     OR   A   
2B4F   ED 52                  SBC   HL,DE   
2B51   7D                     LD   A,L   
2B52   B4                     OR   H   
2B53   CA BF 2B               JP   Z,expectM_2848S101   
2B56   CD B5 0C               CALL   printStr   
2B59   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2B71   CD B5 0C               CALL   printStr   
2B74   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B83   21 15 00               LD   hl,21   
2B86   E5                     PUSH   hl   
2B87   E5                     PUSH   hl   
2B88   CD D4 0D               CALL   run   
2B8B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B93   CD 3D 0C               CALL   flushBuffer   
2B96   CD B5 0C               CALL   printStr   
2B99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BA6   E1                     POP   hl   
2BA7   E5                     PUSH   hl   
2BA8   E5                     PUSH   hl   
2BA9   CD D4 0D               CALL   run   
2BAC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BBB   CD 3D 0C               CALL   flushBuffer   
2BBE   76                     HALT      
2BBF                EXPECTM_2848S101:      
2BBF   E1                     POP   HL   
2BC0                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2BC0   31 00 50               LD   SP,STACK   
2BC3   CD FD 0C               CALL   coldInit   
2BC6   CD 10 4E               CALL   execStr   
2BC9   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2BDB   CD 3D 0C               CALL   flushBuffer   
2BDE   E1                     POP   HL   
2BDF   E5                     PUSH   HL   
2BE0   11 0B 00               LD   DE,11   
2BE3   B7                     OR   A   
2BE4   ED 52                  SBC   HL,DE   
2BE6   7D                     LD   A,L   
2BE7   B4                     OR   H   
2BE8   CA 54 2C               JP   Z,expectM_2849S102   
2BEB   CD B5 0C               CALL   printStr   
2BEE   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2C06   CD B5 0C               CALL   printStr   
2C09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C18   21 0B 00               LD   hl,11   
2C1B   E5                     PUSH   hl   
2C1C   E5                     PUSH   hl   
2C1D   CD D4 0D               CALL   run   
2C20   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C28   CD 3D 0C               CALL   flushBuffer   
2C2B   CD B5 0C               CALL   printStr   
2C2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C3B   E1                     POP   hl   
2C3C   E5                     PUSH   hl   
2C3D   E5                     PUSH   hl   
2C3E   CD D4 0D               CALL   run   
2C41   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C50   CD 3D 0C               CALL   flushBuffer   
2C53   76                     HALT      
2C54                EXPECTM_2849S102:      
2C54   E1                     POP   HL   
2C55                          ;*Macro unroll:  test ": 0#", $0000
2C55   31 00 50               LD   SP,STACK   
2C58   CD FD 0C               CALL   coldInit   
2C5B   CD 10 4E               CALL   execStr   
2C5E   3A 20 30 23 00         DB   ": 0#",0   
2C63   CD 3D 0C               CALL   flushBuffer   
2C66   E1                     POP   HL   
2C67   E5                     PUSH   HL   
2C68   11 00 00               LD   DE,$0000   
2C6B   B7                     OR   A   
2C6C   ED 52                  SBC   HL,DE   
2C6E   7D                     LD   A,L   
2C6F   B4                     OR   H   
2C70   CA CF 2C               JP   Z,expectM_2850S103   
2C73   CD B5 0C               CALL   printStr   
2C76   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
2C81   CD B5 0C               CALL   printStr   
2C84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C93   21 00 00               LD   hl,$0000   
2C96   E5                     PUSH   hl   
2C97   E5                     PUSH   hl   
2C98   CD D4 0D               CALL   run   
2C9B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CA3   CD 3D 0C               CALL   flushBuffer   
2CA6   CD B5 0C               CALL   printStr   
2CA9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CB6   E1                     POP   hl   
2CB7   E5                     PUSH   hl   
2CB8   E5                     PUSH   hl   
2CB9   CD D4 0D               CALL   run   
2CBC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CCB   CD 3D 0C               CALL   flushBuffer   
2CCE   76                     HALT      
2CCF                EXPECTM_2850S103:      
2CCF   E1                     POP   HL   
2CD0                          ;*Macro unroll:  test ":a 0#", $0100
2CD0   31 00 50               LD   SP,STACK   
2CD3   CD FD 0C               CALL   coldInit   
2CD6   CD 10 4E               CALL   execStr   
2CD9   3A 61 20 30 23 00      DB   ":a 0#",0   
2CDF   CD 3D 0C               CALL   flushBuffer   
2CE2   E1                     POP   HL   
2CE3   E5                     PUSH   HL   
2CE4   11 00 01               LD   DE,$0100   
2CE7   B7                     OR   A   
2CE8   ED 52                  SBC   HL,DE   
2CEA   7D                     LD   A,L   
2CEB   B4                     OR   H   
2CEC   CA 4C 2D               JP   Z,expectM_2851S104   
2CEF   CD B5 0C               CALL   printStr   
2CF2   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
2CFE   CD B5 0C               CALL   printStr   
2D01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D10   21 00 01               LD   hl,$0100   
2D13   E5                     PUSH   hl   
2D14   E5                     PUSH   hl   
2D15   CD D4 0D               CALL   run   
2D18   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D20   CD 3D 0C               CALL   flushBuffer   
2D23   CD B5 0C               CALL   printStr   
2D26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D33   E1                     POP   hl   
2D34   E5                     PUSH   hl   
2D35   E5                     PUSH   hl   
2D36   CD D4 0D               CALL   run   
2D39   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D48   CD 3D 0C               CALL   flushBuffer   
2D4B   76                     HALT      
2D4C                EXPECTM_2851S104:      
2D4C   E1                     POP   HL   
2D4D                          ;*Macro unroll:  test ":a: 0#", $0100
2D4D   31 00 50               LD   SP,STACK   
2D50   CD FD 0C               CALL   coldInit   
2D53   CD 10 4E               CALL   execStr   
2D56   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
2D5D   CD 3D 0C               CALL   flushBuffer   
2D60   E1                     POP   HL   
2D61   E5                     PUSH   HL   
2D62   11 00 01               LD   DE,$0100   
2D65   B7                     OR   A   
2D66   ED 52                  SBC   HL,DE   
2D68   7D                     LD   A,L   
2D69   B4                     OR   H   
2D6A   CA CB 2D               JP   Z,expectM_2852S105   
2D6D   CD B5 0C               CALL   printStr   
2D70   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
2D7D   CD B5 0C               CALL   printStr   
2D80   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D8F   21 00 01               LD   hl,$0100   
2D92   E5                     PUSH   hl   
2D93   E5                     PUSH   hl   
2D94   CD D4 0D               CALL   run   
2D97   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D9F   CD 3D 0C               CALL   flushBuffer   
2DA2   CD B5 0C               CALL   printStr   
2DA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DB2   E1                     POP   hl   
2DB3   E5                     PUSH   hl   
2DB4   E5                     PUSH   hl   
2DB5   CD D4 0D               CALL   run   
2DB8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DC7   CD 3D 0C               CALL   flushBuffer   
2DCA   76                     HALT      
2DCB                EXPECTM_2852S105:      
2DCB   E1                     POP   HL   
2DCC                          ;*Macro unroll:  test ":a:b 0#", $0201
2DCC   31 00 50               LD   SP,STACK   
2DCF   CD FD 0C               CALL   coldInit   
2DD2   CD 10 4E               CALL   execStr   
2DD5   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
2DDD   CD 3D 0C               CALL   flushBuffer   
2DE0   E1                     POP   HL   
2DE1   E5                     PUSH   HL   
2DE2   11 01 02               LD   DE,$0201   
2DE5   B7                     OR   A   
2DE6   ED 52                  SBC   HL,DE   
2DE8   7D                     LD   A,L   
2DE9   B4                     OR   H   
2DEA   CA 4C 2E               JP   Z,expectM_2853S106   
2DED   CD B5 0C               CALL   printStr   
2DF0   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
2DFE   CD B5 0C               CALL   printStr   
2E01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E10   21 01 02               LD   hl,$0201   
2E13   E5                     PUSH   hl   
2E14   E5                     PUSH   hl   
2E15   CD D4 0D               CALL   run   
2E18   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E20   CD 3D 0C               CALL   flushBuffer   
2E23   CD B5 0C               CALL   printStr   
2E26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E33   E1                     POP   hl   
2E34   E5                     PUSH   hl   
2E35   E5                     PUSH   hl   
2E36   CD D4 0D               CALL   run   
2E39   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E48   CD 3D 0C               CALL   flushBuffer   
2E4B   76                     HALT      
2E4C                EXPECTM_2853S106:      
2E4C   E1                     POP   HL   
2E4D                          ;*Macro unroll:  test "::b 0#", $0101
2E4D   31 00 50               LD   SP,STACK   
2E50   CD FD 0C               CALL   coldInit   
2E53   CD 10 4E               CALL   execStr   
2E56   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
2E5D   CD 3D 0C               CALL   flushBuffer   
2E60   E1                     POP   HL   
2E61   E5                     PUSH   HL   
2E62   11 01 01               LD   DE,$0101   
2E65   B7                     OR   A   
2E66   ED 52                  SBC   HL,DE   
2E68   7D                     LD   A,L   
2E69   B4                     OR   H   
2E6A   CA CB 2E               JP   Z,expectM_2854S107   
2E6D   CD B5 0C               CALL   printStr   
2E70   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
2E7D   CD B5 0C               CALL   printStr   
2E80   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E8F   21 01 01               LD   hl,$0101   
2E92   E5                     PUSH   hl   
2E93   E5                     PUSH   hl   
2E94   CD D4 0D               CALL   run   
2E97   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E9F   CD 3D 0C               CALL   flushBuffer   
2EA2   CD B5 0C               CALL   printStr   
2EA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EB2   E1                     POP   hl   
2EB3   E5                     PUSH   hl   
2EB4   E5                     PUSH   hl   
2EB5   CD D4 0D               CALL   run   
2EB8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EC7   CD 3D 0C               CALL   flushBuffer   
2ECA   76                     HALT      
2ECB                EXPECTM_2854S107:      
2ECB   E1                     POP   HL   
2ECC                          ;*Macro unroll:  test ":{2};^", 2
2ECC   31 00 50               LD   SP,STACK   
2ECF   CD FD 0C               CALL   coldInit   
2ED2   CD 10 4E               CALL   execStr   
2ED5   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
2EDC   CD 3D 0C               CALL   flushBuffer   
2EDF   E1                     POP   HL   
2EE0   E5                     PUSH   HL   
2EE1   11 02 00               LD   DE,2   
2EE4   B7                     OR   A   
2EE5   ED 52                  SBC   HL,DE   
2EE7   7D                     LD   A,L   
2EE8   B4                     OR   H   
2EE9   CA 4A 2F               JP   Z,expectM_2855S108   
2EEC   CD B5 0C               CALL   printStr   
2EEF   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2EFC   CD B5 0C               CALL   printStr   
2EFF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F0E   21 02 00               LD   hl,2   
2F11   E5                     PUSH   hl   
2F12   E5                     PUSH   hl   
2F13   CD D4 0D               CALL   run   
2F16   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F1E   CD 3D 0C               CALL   flushBuffer   
2F21   CD B5 0C               CALL   printStr   
2F24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F31   E1                     POP   hl   
2F32   E5                     PUSH   hl   
2F33   E5                     PUSH   hl   
2F34   CD D4 0D               CALL   run   
2F37   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F46   CD 3D 0C               CALL   flushBuffer   
2F49   76                     HALT      
2F4A                EXPECTM_2855S108:      
2F4A   E1                     POP   HL   
2F4B                          ;*Macro unroll:  test ":a{2};^", 2
2F4B   31 00 50               LD   SP,STACK   
2F4E   CD FD 0C               CALL   coldInit   
2F51   CD 10 4E               CALL   execStr   
2F54   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
2F5C   CD 3D 0C               CALL   flushBuffer   
2F5F   E1                     POP   HL   
2F60   E5                     PUSH   HL   
2F61   11 02 00               LD   DE,2   
2F64   B7                     OR   A   
2F65   ED 52                  SBC   HL,DE   
2F67   7D                     LD   A,L   
2F68   B4                     OR   H   
2F69   CA CB 2F               JP   Z,expectM_2856S109   
2F6C   CD B5 0C               CALL   printStr   
2F6F   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2F7D   CD B5 0C               CALL   printStr   
2F80   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F8F   21 02 00               LD   hl,2   
2F92   E5                     PUSH   hl   
2F93   E5                     PUSH   hl   
2F94   CD D4 0D               CALL   run   
2F97   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F9F   CD 3D 0C               CALL   flushBuffer   
2FA2   CD B5 0C               CALL   printStr   
2FA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FB2   E1                     POP   hl   
2FB3   E5                     PUSH   hl   
2FB4   E5                     PUSH   hl   
2FB5   CD D4 0D               CALL   run   
2FB8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FC7   CD 3D 0C               CALL   flushBuffer   
2FCA   76                     HALT      
2FCB                EXPECTM_2856S109:      
2FCB   E1                     POP   HL   
2FCC                          ;*Macro unroll:  test "5 :a{%a};^", 5
2FCC   31 00 50               LD   SP,STACK   
2FCF   CD FD 0C               CALL   coldInit   
2FD2   CD 10 4E               CALL   execStr   
2FD5   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
2FE0   CD 3D 0C               CALL   flushBuffer   
2FE3   E1                     POP   HL   
2FE4   E5                     PUSH   HL   
2FE5   11 05 00               LD   DE,5   
2FE8   B7                     OR   A   
2FE9   ED 52                  SBC   HL,DE   
2FEB   7D                     LD   A,L   
2FEC   B4                     OR   H   
2FED   CA 52 30               JP   Z,expectM_2857S110   
2FF0   CD B5 0C               CALL   printStr   
2FF3   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
3004   CD B5 0C               CALL   printStr   
3007   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3016   21 05 00               LD   hl,5   
3019   E5                     PUSH   hl   
301A   E5                     PUSH   hl   
301B   CD D4 0D               CALL   run   
301E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3026   CD 3D 0C               CALL   flushBuffer   
3029   CD B5 0C               CALL   printStr   
302C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3039   E1                     POP   hl   
303A   E5                     PUSH   hl   
303B   E5                     PUSH   hl   
303C   CD D4 0D               CALL   run   
303F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
304E   CD 3D 0C               CALL   flushBuffer   
3051   76                     HALT      
3052                EXPECTM_2857S110:      
3052   E1                     POP   HL   
3053                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
3053   31 00 50               LD   SP,STACK   
3056   CD FD 0C               CALL   coldInit   
3059   CD 10 4E               CALL   execStr   
305C   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
3069   CD 3D 0C               CALL   flushBuffer   
306C   E1                     POP   HL   
306D   E5                     PUSH   HL   
306E   11 05 00               LD   DE,5   
3071   B7                     OR   A   
3072   ED 52                  SBC   HL,DE   
3074   7D                     LD   A,L   
3075   B4                     OR   H   
3076   CA DD 30               JP   Z,expectM_2858S111   
3079   CD B5 0C               CALL   printStr   
307C   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
308F   CD B5 0C               CALL   printStr   
3092   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30A1   21 05 00               LD   hl,5   
30A4   E5                     PUSH   hl   
30A5   E5                     PUSH   hl   
30A6   CD D4 0D               CALL   run   
30A9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30B1   CD 3D 0C               CALL   flushBuffer   
30B4   CD B5 0C               CALL   printStr   
30B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30C4   E1                     POP   hl   
30C5   E5                     PUSH   hl   
30C6   E5                     PUSH   hl   
30C7   CD D4 0D               CALL   run   
30CA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30D9   CD 3D 0C               CALL   flushBuffer   
30DC   76                     HALT      
30DD                EXPECTM_2858S111:      
30DD   E1                     POP   HL   
30DE                          ;*Macro unroll:  test ":a{{2}^};^", 2
30DE   31 00 50               LD   SP,STACK   
30E1   CD FD 0C               CALL   coldInit   
30E4   CD 10 4E               CALL   execStr   
30E7   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
30F2   CD 3D 0C               CALL   flushBuffer   
30F5   E1                     POP   HL   
30F6   E5                     PUSH   HL   
30F7   11 02 00               LD   DE,2   
30FA   B7                     OR   A   
30FB   ED 52                  SBC   HL,DE   
30FD   7D                     LD   A,L   
30FE   B4                     OR   H   
30FF   CA 64 31               JP   Z,expectM_2859S112   
3102   CD B5 0C               CALL   printStr   
3105   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
3116   CD B5 0C               CALL   printStr   
3119   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3128   21 02 00               LD   hl,2   
312B   E5                     PUSH   hl   
312C   E5                     PUSH   hl   
312D   CD D4 0D               CALL   run   
3130   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3138   CD 3D 0C               CALL   flushBuffer   
313B   CD B5 0C               CALL   printStr   
313E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
314B   E1                     POP   hl   
314C   E5                     PUSH   hl   
314D   E5                     PUSH   hl   
314E   CD D4 0D               CALL   run   
3151   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3160   CD 3D 0C               CALL   flushBuffer   
3163   76                     HALT      
3164                EXPECTM_2859S112:      
3164   E1                     POP   HL   
3165                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
3165   31 00 50               LD   SP,STACK   
3168   CD FD 0C               CALL   coldInit   
316B   CD 10 4E               CALL   execStr   
316E   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
317E   CD 3D 0C               CALL   flushBuffer   
3181   E1                     POP   HL   
3182   E5                     PUSH   HL   
3183   11 05 00               LD   DE,5   
3186   B7                     OR   A   
3187   ED 52                  SBC   HL,DE   
3189   7D                     LD   A,L   
318A   B4                     OR   H   
318B   CA F5 31               JP   Z,expectM_2860S113   
318E   CD B5 0C               CALL   printStr   
3191   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
31A7   CD B5 0C               CALL   printStr   
31AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31B9   21 05 00               LD   hl,5   
31BC   E5                     PUSH   hl   
31BD   E5                     PUSH   hl   
31BE   CD D4 0D               CALL   run   
31C1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31C9   CD 3D 0C               CALL   flushBuffer   
31CC   CD B5 0C               CALL   printStr   
31CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31DC   E1                     POP   hl   
31DD   E5                     PUSH   hl   
31DE   E5                     PUSH   hl   
31DF   CD D4 0D               CALL   run   
31E2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31F1   CD 3D 0C               CALL   flushBuffer   
31F4   76                     HALT      
31F5                EXPECTM_2860S113:      
31F5   E1                     POP   HL   
31F6                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
31F6   31 00 50               LD   SP,STACK   
31F9   CD FD 0C               CALL   coldInit   
31FC   CD 10 4E               CALL   execStr   
31FF   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
3210   CD 3D 0C               CALL   flushBuffer   
3213   E1                     POP   HL   
3214   E5                     PUSH   HL   
3215   11 01 00               LD   DE,1   
3218   B7                     OR   A   
3219   ED 52                  SBC   HL,DE   
321B   7D                     LD   A,L   
321C   B4                     OR   H   
321D   CA 88 32               JP   Z,expectM_2861S114   
3220   CD B5 0C               CALL   printStr   
3223   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
323A   CD B5 0C               CALL   printStr   
323D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
324C   21 01 00               LD   hl,1   
324F   E5                     PUSH   hl   
3250   E5                     PUSH   hl   
3251   CD D4 0D               CALL   run   
3254   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
325C   CD 3D 0C               CALL   flushBuffer   
325F   CD B5 0C               CALL   printStr   
3262   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
326F   E1                     POP   hl   
3270   E5                     PUSH   hl   
3271   E5                     PUSH   hl   
3272   CD D4 0D               CALL   run   
3275   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3284   CD 3D 0C               CALL   flushBuffer   
3287   76                     HALT      
3288                EXPECTM_2861S114:      
3288   E1                     POP   HL   
3289                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
3289   31 00 50               LD   SP,STACK   
328C   CD FD 0C               CALL   coldInit   
328F   CD 10 4E               CALL   execStr   
3292   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
32A6   CD 3D 0C               CALL   flushBuffer   
32A9   E1                     POP   HL   
32AA   E5                     PUSH   HL   
32AB   11 07 00               LD   DE,7   
32AE   B7                     OR   A   
32AF   ED 52                  SBC   HL,DE   
32B1   7D                     LD   A,L   
32B2   B4                     OR   H   
32B3   CA 21 33               JP   Z,expectM_2862S115   
32B6   CD B5 0C               CALL   printStr   
32B9   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
32D3   CD B5 0C               CALL   printStr   
32D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32E5   21 07 00               LD   hl,7   
32E8   E5                     PUSH   hl   
32E9   E5                     PUSH   hl   
32EA   CD D4 0D               CALL   run   
32ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32F5   CD 3D 0C               CALL   flushBuffer   
32F8   CD B5 0C               CALL   printStr   
32FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3308   E1                     POP   hl   
3309   E5                     PUSH   hl   
330A   E5                     PUSH   hl   
330B   CD D4 0D               CALL   run   
330E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
331D   CD 3D 0C               CALL   flushBuffer   
3320   76                     HALT      
3321                EXPECTM_2862S115:      
3321   E1                     POP   HL   
3322                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
3322   31 00 50               LD   SP,STACK   
3325   CD FD 0C               CALL   coldInit   
3328   CD 10 4E               CALL   execStr   
332B   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
3341   CD 3D 0C               CALL   flushBuffer   
3344   E1                     POP   HL   
3345   E5                     PUSH   HL   
3346   11 06 00               LD   DE,6   
3349   B7                     OR   A   
334A   ED 52                  SBC   HL,DE   
334C   7D                     LD   A,L   
334D   B4                     OR   H   
334E   CA BE 33               JP   Z,expectM_2863S116   
3351   CD B5 0C               CALL   printStr   
3354   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
3370   CD B5 0C               CALL   printStr   
3373   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3382   21 06 00               LD   hl,6   
3385   E5                     PUSH   hl   
3386   E5                     PUSH   hl   
3387   CD D4 0D               CALL   run   
338A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3392   CD 3D 0C               CALL   flushBuffer   
3395   CD B5 0C               CALL   printStr   
3398   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33A5   E1                     POP   hl   
33A6   E5                     PUSH   hl   
33A7   E5                     PUSH   hl   
33A8   CD D4 0D               CALL   run   
33AB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33BA   CD 3D 0C               CALL   flushBuffer   
33BD   76                     HALT      
33BE                EXPECTM_2863S116:      
33BE   E1                     POP   HL   
33BF                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
33BF   31 00 50               LD   SP,STACK   
33C2   CD FD 0C               CALL   coldInit   
33C5   CD 10 4E               CALL   execStr   
33C8   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
33D7   CD 3D 0C               CALL   flushBuffer   
33DA   E1                     POP   HL   
33DB   E5                     PUSH   HL   
33DC   11 02 00               LD   DE,2   
33DF   B7                     OR   A   
33E0   ED 52                  SBC   HL,DE   
33E2   7D                     LD   A,L   
33E3   B4                     OR   H   
33E4   CA 4D 34               JP   Z,expectM_2864S117   
33E7   CD B5 0C               CALL   printStr   
33EA   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
33FF   CD B5 0C               CALL   printStr   
3402   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3411   21 02 00               LD   hl,2   
3414   E5                     PUSH   hl   
3415   E5                     PUSH   hl   
3416   CD D4 0D               CALL   run   
3419   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3421   CD 3D 0C               CALL   flushBuffer   
3424   CD B5 0C               CALL   printStr   
3427   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3434   E1                     POP   hl   
3435   E5                     PUSH   hl   
3436   E5                     PUSH   hl   
3437   CD D4 0D               CALL   run   
343A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3449   CD 3D 0C               CALL   flushBuffer   
344C   76                     HALT      
344D                EXPECTM_2864S117:      
344D   E1                     POP   HL   
344E                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
344E   31 00 50               LD   SP,STACK   
3451   CD FD 0C               CALL   coldInit   
3454   CD 10 4E               CALL   execStr   
3457   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
3469   CD 3D 0C               CALL   flushBuffer   
346C   E1                     POP   HL   
346D   E5                     PUSH   HL   
346E   11 01 00               LD   DE,1   
3471   B7                     OR   A   
3472   ED 52                  SBC   HL,DE   
3474   7D                     LD   A,L   
3475   B4                     OR   H   
3476   CA E2 34               JP   Z,expectM_2865S118   
3479   CD B5 0C               CALL   printStr   
347C   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
3494   CD B5 0C               CALL   printStr   
3497   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34A6   21 01 00               LD   hl,1   
34A9   E5                     PUSH   hl   
34AA   E5                     PUSH   hl   
34AB   CD D4 0D               CALL   run   
34AE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34B6   CD 3D 0C               CALL   flushBuffer   
34B9   CD B5 0C               CALL   printStr   
34BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34C9   E1                     POP   hl   
34CA   E5                     PUSH   hl   
34CB   E5                     PUSH   hl   
34CC   CD D4 0D               CALL   run   
34CF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34DE   CD 3D 0C               CALL   flushBuffer   
34E1   76                     HALT      
34E2                EXPECTM_2865S118:      
34E2   E1                     POP   HL   
34E3                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
34E3   31 00 50               LD   SP,STACK   
34E6   CD FD 0C               CALL   coldInit   
34E9   CD 10 4E               CALL   execStr   
34EC   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
34FF   CD 3D 0C               CALL   flushBuffer   
3502   E1                     POP   HL   
3503   E5                     PUSH   HL   
3504   11 02 00               LD   DE,2   
3507   B7                     OR   A   
3508   ED 52                  SBC   HL,DE   
350A   7D                     LD   A,L   
350B   B4                     OR   H   
350C   CA 79 35               JP   Z,expectM_2866S119   
350F   CD B5 0C               CALL   printStr   
3512   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
352B   CD B5 0C               CALL   printStr   
352E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
353D   21 02 00               LD   hl,2   
3540   E5                     PUSH   hl   
3541   E5                     PUSH   hl   
3542   CD D4 0D               CALL   run   
3545   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
354D   CD 3D 0C               CALL   flushBuffer   
3550   CD B5 0C               CALL   printStr   
3553   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3560   E1                     POP   hl   
3561   E5                     PUSH   hl   
3562   E5                     PUSH   hl   
3563   CD D4 0D               CALL   run   
3566   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3575   CD 3D 0C               CALL   flushBuffer   
3578   76                     HALT      
3579                EXPECTM_2866S119:      
3579   E1                     POP   HL   
357A                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
357A   31 00 50               LD   SP,STACK   
357D   CD FD 0C               CALL   coldInit   
3580   CD 10 4E               CALL   execStr   
3583   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
3597   CD 3D 0C               CALL   flushBuffer   
359A   E1                     POP   HL   
359B   E5                     PUSH   HL   
359C   11 02 00               LD   DE,2   
359F   B7                     OR   A   
35A0   ED 52                  SBC   HL,DE   
35A2   7D                     LD   A,L   
35A3   B4                     OR   H   
35A4   CA 12 36               JP   Z,expectM_2867S120   
35A7   CD B5 0C               CALL   printStr   
35AA   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
35C4   CD B5 0C               CALL   printStr   
35C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35D6   21 02 00               LD   hl,2   
35D9   E5                     PUSH   hl   
35DA   E5                     PUSH   hl   
35DB   CD D4 0D               CALL   run   
35DE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35E6   CD 3D 0C               CALL   flushBuffer   
35E9   CD B5 0C               CALL   printStr   
35EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35F9   E1                     POP   hl   
35FA   E5                     PUSH   hl   
35FB   E5                     PUSH   hl   
35FC   CD D4 0D               CALL   run   
35FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
360E   CD 3D 0C               CALL   flushBuffer   
3611   76                     HALT      
3612                EXPECTM_2867S120:      
3612   E1                     POP   HL   
3613                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3613   31 00 50               LD   SP,STACK   
3616   CD FD 0C               CALL   coldInit   
3619   CD 10 4E               CALL   execStr   
361C   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
362F   CD 3D 0C               CALL   flushBuffer   
3632   E1                     POP   HL   
3633   E5                     PUSH   HL   
3634   11 02 00               LD   DE,2   
3637   B7                     OR   A   
3638   ED 52                  SBC   HL,DE   
363A   7D                     LD   A,L   
363B   B4                     OR   H   
363C   CA A9 36               JP   Z,expectM_2868S121   
363F   CD B5 0C               CALL   printStr   
3642   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
365B   CD B5 0C               CALL   printStr   
365E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
366D   21 02 00               LD   hl,2   
3670   E5                     PUSH   hl   
3671   E5                     PUSH   hl   
3672   CD D4 0D               CALL   run   
3675   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
367D   CD 3D 0C               CALL   flushBuffer   
3680   CD B5 0C               CALL   printStr   
3683   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3690   E1                     POP   hl   
3691   E5                     PUSH   hl   
3692   E5                     PUSH   hl   
3693   CD D4 0D               CALL   run   
3696   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36A5   CD 3D 0C               CALL   flushBuffer   
36A8   76                     HALT      
36A9                EXPECTM_2868S121:      
36A9   E1                     POP   HL   
36AA                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
36AA   31 00 50               LD   SP,STACK   
36AD   CD FD 0C               CALL   coldInit   
36B0   CD 10 4E               CALL   execStr   
36B3   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
36CD   CD 3D 0C               CALL   flushBuffer   
36D0   E1                     POP   HL   
36D1   E5                     PUSH   HL   
36D2   11 05 00               LD   DE,5   
36D5   B7                     OR   A   
36D6   ED 52                  SBC   HL,DE   
36D8   7D                     LD   A,L   
36D9   B4                     OR   H   
36DA   CA 4E 37               JP   Z,expectM_2869S122   
36DD   CD B5 0C               CALL   printStr   
36E0   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
3700   CD B5 0C               CALL   printStr   
3703   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3712   21 05 00               LD   hl,5   
3715   E5                     PUSH   hl   
3716   E5                     PUSH   hl   
3717   CD D4 0D               CALL   run   
371A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3722   CD 3D 0C               CALL   flushBuffer   
3725   CD B5 0C               CALL   printStr   
3728   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3735   E1                     POP   hl   
3736   E5                     PUSH   hl   
3737   E5                     PUSH   hl   
3738   CD D4 0D               CALL   run   
373B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
374A   CD 3D 0C               CALL   flushBuffer   
374D   76                     HALT      
374E                EXPECTM_2869S122:      
374E   E1                     POP   HL   
374F                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
374F   31 00 50               LD   SP,STACK   
3752   CD FD 0C               CALL   coldInit   
3755   CD 10 4E               CALL   execStr   
3758   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
3769   CD 3D 0C               CALL   flushBuffer   
376C   E1                     POP   HL   
376D   E5                     PUSH   HL   
376E   11 02 00               LD   DE,2   
3771   B7                     OR   A   
3772   ED 52                  SBC   HL,DE   
3774   7D                     LD   A,L   
3775   B4                     OR   H   
3776   CA E1 37               JP   Z,expectM_2870S123   
3779   CD B5 0C               CALL   printStr   
377C   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
3793   CD B5 0C               CALL   printStr   
3796   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37A5   21 02 00               LD   hl,2   
37A8   E5                     PUSH   hl   
37A9   E5                     PUSH   hl   
37AA   CD D4 0D               CALL   run   
37AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37B5   CD 3D 0C               CALL   flushBuffer   
37B8   CD B5 0C               CALL   printStr   
37BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37C8   E1                     POP   hl   
37C9   E5                     PUSH   hl   
37CA   E5                     PUSH   hl   
37CB   CD D4 0D               CALL   run   
37CE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37DD   CD 3D 0C               CALL   flushBuffer   
37E0   76                     HALT      
37E1                EXPECTM_2870S123:      
37E1   E1                     POP   HL   
37E2                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
37E2   31 00 50               LD   SP,STACK   
37E5   CD FD 0C               CALL   coldInit   
37E8   CD 10 4E               CALL   execStr   
37EB   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
3803   CD 3D 0C               CALL   flushBuffer   
3806   E1                     POP   HL   
3807   E5                     PUSH   HL   
3808   11 64 00               LD   DE,100   
380B   B7                     OR   A   
380C   ED 52                  SBC   HL,DE   
380E   7D                     LD   A,L   
380F   B4                     OR   H   
3810   CA 82 38               JP   Z,expectM_2871S124   
3813   CD B5 0C               CALL   printStr   
3816   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
3834   CD B5 0C               CALL   printStr   
3837   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3846   21 64 00               LD   hl,100   
3849   E5                     PUSH   hl   
384A   E5                     PUSH   hl   
384B   CD D4 0D               CALL   run   
384E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3856   CD 3D 0C               CALL   flushBuffer   
3859   CD B5 0C               CALL   printStr   
385C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3869   E1                     POP   hl   
386A   E5                     PUSH   hl   
386B   E5                     PUSH   hl   
386C   CD D4 0D               CALL   run   
386F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
387E   CD 3D 0C               CALL   flushBuffer   
3881   76                     HALT      
3882                EXPECTM_2871S124:      
3882   E1                     POP   HL   
3883                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
3883   31 00 50               LD   SP,STACK   
3886   CD FD 0C               CALL   coldInit   
3889   CD 10 4E               CALL   execStr   
388C   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
38A5   CD 3D 0C               CALL   flushBuffer   
38A8   E1                     POP   HL   
38A9   E5                     PUSH   HL   
38AA   11 01 00               LD   DE,1   
38AD   B7                     OR   A   
38AE   ED 52                  SBC   HL,DE   
38B0   7D                     LD   A,L   
38B1   B4                     OR   H   
38B2   CA 25 39               JP   Z,expectM_2872S125   
38B5   CD B5 0C               CALL   printStr   
38B8   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
38D7   CD B5 0C               CALL   printStr   
38DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38E9   21 01 00               LD   hl,1   
38EC   E5                     PUSH   hl   
38ED   E5                     PUSH   hl   
38EE   CD D4 0D               CALL   run   
38F1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38F9   CD 3D 0C               CALL   flushBuffer   
38FC   CD B5 0C               CALL   printStr   
38FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
390C   E1                     POP   hl   
390D   E5                     PUSH   hl   
390E   E5                     PUSH   hl   
390F   CD D4 0D               CALL   run   
3912   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3921   CD 3D 0C               CALL   flushBuffer   
3924   76                     HALT      
3925                EXPECTM_2872S125:      
3925   E1                     POP   HL   
3926                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
3926   31 00 50               LD   SP,STACK   
3929   CD FD 0C               CALL   coldInit   
392C   CD 10 4E               CALL   execStr   
392F   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
3949   CD 3D 0C               CALL   flushBuffer   
394C   E1                     POP   HL   
394D   E5                     PUSH   HL   
394E   11 02 00               LD   DE,2   
3951   B7                     OR   A   
3952   ED 52                  SBC   HL,DE   
3954   7D                     LD   A,L   
3955   B4                     OR   H   
3956   CA CA 39               JP   Z,expectM_2873S126   
3959   CD B5 0C               CALL   printStr   
395C   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
397C   CD B5 0C               CALL   printStr   
397F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
398E   21 02 00               LD   hl,2   
3991   E5                     PUSH   hl   
3992   E5                     PUSH   hl   
3993   CD D4 0D               CALL   run   
3996   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
399E   CD 3D 0C               CALL   flushBuffer   
39A1   CD B5 0C               CALL   printStr   
39A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39B1   E1                     POP   hl   
39B2   E5                     PUSH   hl   
39B3   E5                     PUSH   hl   
39B4   CD D4 0D               CALL   run   
39B7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39C6   CD 3D 0C               CALL   flushBuffer   
39C9   76                     HALT      
39CA                EXPECTM_2873S126:      
39CA   E1                     POP   HL   
39CB                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
39CB   31 00 50               LD   SP,STACK   
39CE   CD FD 0C               CALL   coldInit   
39D1   CD 10 4E               CALL   execStr   
39D4   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
39F3   CD 3D 0C               CALL   flushBuffer   
39F6   E1                     POP   HL   
39F7   E5                     PUSH   HL   
39F8   11 0B 00               LD   DE,11   
39FB   B7                     OR   A   
39FC   ED 52                  SBC   HL,DE   
39FE   7D                     LD   A,L   
39FF   B4                     OR   H   
3A00   CA 79 3A               JP   Z,expectM_2874S127   
3A03   CD B5 0C               CALL   printStr   
3A06   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
3A2B   CD B5 0C               CALL   printStr   
3A2E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A3D   21 0B 00               LD   hl,11   
3A40   E5                     PUSH   hl   
3A41   E5                     PUSH   hl   
3A42   CD D4 0D               CALL   run   
3A45   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A4D   CD 3D 0C               CALL   flushBuffer   
3A50   CD B5 0C               CALL   printStr   
3A53   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A60   E1                     POP   hl   
3A61   E5                     PUSH   hl   
3A62   E5                     PUSH   hl   
3A63   CD D4 0D               CALL   run   
3A66   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A75   CD 3D 0C               CALL   flushBuffer   
3A78   76                     HALT      
3A79                EXPECTM_2874S127:      
3A79   E1                     POP   HL   
3A7A                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
3A7A   31 00 50               LD   SP,STACK   
3A7D   CD FD 0C               CALL   coldInit   
3A80   CD 10 4E               CALL   execStr   
3A83   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
3AA2   CD 3D 0C               CALL   flushBuffer   
3AA5   E1                     POP   HL   
3AA6   E5                     PUSH   HL   
3AA7   11 15 00               LD   DE,21   
3AAA   B7                     OR   A   
3AAB   ED 52                  SBC   HL,DE   
3AAD   7D                     LD   A,L   
3AAE   B4                     OR   H   
3AAF   CA 28 3B               JP   Z,expectM_2875S128   
3AB2   CD B5 0C               CALL   printStr   
3AB5   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3ADA   CD B5 0C               CALL   printStr   
3ADD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AEC   21 15 00               LD   hl,21   
3AEF   E5                     PUSH   hl   
3AF0   E5                     PUSH   hl   
3AF1   CD D4 0D               CALL   run   
3AF4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AFC   CD 3D 0C               CALL   flushBuffer   
3AFF   CD B5 0C               CALL   printStr   
3B02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B0F   E1                     POP   hl   
3B10   E5                     PUSH   hl   
3B11   E5                     PUSH   hl   
3B12   CD D4 0D               CALL   run   
3B15   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B24   CD 3D 0C               CALL   flushBuffer   
3B27   76                     HALT      
3B28                EXPECTM_2875S128:      
3B28   E1                     POP   HL   
3B29                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3B29   31 00 50               LD   SP,STACK   
3B2C   CD FD 0C               CALL   coldInit   
3B2F   CD 10 4E               CALL   execStr   
3B32   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3B40   CD 3D 0C               CALL   flushBuffer   
3B43   E1                     POP   HL   
3B44   E5                     PUSH   HL   
3B45   11 14 00               LD   DE,20   
3B48   B7                     OR   A   
3B49   ED 52                  SBC   HL,DE   
3B4B   7D                     LD   A,L   
3B4C   B4                     OR   H   
3B4D   CA B5 3B               JP   Z,expectM_2876S129   
3B50   CD B5 0C               CALL   printStr   
3B53   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3B67   CD B5 0C               CALL   printStr   
3B6A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B79   21 14 00               LD   hl,20   
3B7C   E5                     PUSH   hl   
3B7D   E5                     PUSH   hl   
3B7E   CD D4 0D               CALL   run   
3B81   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B89   CD 3D 0C               CALL   flushBuffer   
3B8C   CD B5 0C               CALL   printStr   
3B8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B9C   E1                     POP   hl   
3B9D   E5                     PUSH   hl   
3B9E   E5                     PUSH   hl   
3B9F   CD D4 0D               CALL   run   
3BA2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BB1   CD 3D 0C               CALL   flushBuffer   
3BB4   76                     HALT      
3BB5                EXPECTM_2876S129:      
3BB5   E1                     POP   HL   
3BB6                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
3BB6   31 00 50               LD   SP,STACK   
3BB9   CD FD 0C               CALL   coldInit   
3BBC   CD 10 4E               CALL   execStr   
3BBF   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 DB   "[10 20 30 40] /s",0   
3BD0   CD 3D 0C               CALL   flushBuffer   
3BD3   E1                     POP   HL   
3BD4   E5                     PUSH   HL   
3BD5   11 04 00               LD   DE,4   
3BD8   B7                     OR   A   
3BD9   ED 52                  SBC   HL,DE   
3BDB   7D                     LD   A,L   
3BDC   B4                     OR   H   
3BDD   CA 48 3C               JP   Z,expectM_2877S130   
3BE0   CD B5 0C               CALL   printStr   
3BE3   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3BFA   CD B5 0C               CALL   printStr   
3BFD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C0C   21 04 00               LD   hl,4   
3C0F   E5                     PUSH   hl   
3C10   E5                     PUSH   hl   
3C11   CD D4 0D               CALL   run   
3C14   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C1C   CD 3D 0C               CALL   flushBuffer   
3C1F   CD B5 0C               CALL   printStr   
3C22   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C2F   E1                     POP   hl   
3C30   E5                     PUSH   hl   
3C31   E5                     PUSH   hl   
3C32   CD D4 0D               CALL   run   
3C35   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C44   CD 3D 0C               CALL   flushBuffer   
3C47   76                     HALT      
3C48                EXPECTM_2877S130:      
3C48   E1                     POP   HL   
3C49                          ;*Macro unroll:  test "/c [1 2 3] 1#", 2
3C49   31 00 50               LD   SP,STACK   
3C4C   CD FD 0C               CALL   coldInit   
3C4F   CD 10 4E               CALL   execStr   
3C52   2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/c [1 2 3] 1#",0   
3C60   CD 3D 0C               CALL   flushBuffer   
3C63   E1                     POP   HL   
3C64   E5                     PUSH   HL   
3C65   11 02 00               LD   DE,2   
3C68   B7                     OR   A   
3C69   ED 52                  SBC   HL,DE   
3C6B   7D                     LD   A,L   
3C6C   B4                     OR   H   
3C6D   CA D5 3C               JP   Z,expectM_2878S131   
3C70   CD B5 0C               CALL   printStr   
3C73   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/c [1 2 3] 1#"   
3C87   CD B5 0C               CALL   printStr   
3C8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C99   21 02 00               LD   hl,2   
3C9C   E5                     PUSH   hl   
3C9D   E5                     PUSH   hl   
3C9E   CD D4 0D               CALL   run   
3CA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CA9   CD 3D 0C               CALL   flushBuffer   
3CAC   CD B5 0C               CALL   printStr   
3CAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CBC   E1                     POP   hl   
3CBD   E5                     PUSH   hl   
3CBE   E5                     PUSH   hl   
3CBF   CD D4 0D               CALL   run   
3CC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CD1   CD 3D 0C               CALL   flushBuffer   
3CD4   76                     HALT      
3CD5                EXPECTM_2878S131:      
3CD5   E1                     POP   HL   
3CD6                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1#", 66
3CD6   31 00 50               LD   SP,STACK   
3CD9   CD FD 0C               CALL   coldInit   
3CDC   CD 10 4E               CALL   execStr   
3CDF   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/c ['A' 'B' 'C'] 1#",0   
3CF3   CD 3D 0C               CALL   flushBuffer   
3CF6   E1                     POP   HL   
3CF7   E5                     PUSH   HL   
3CF8   11 42 00               LD   DE,66   
3CFB   B7                     OR   A   
3CFC   ED 52                  SBC   HL,DE   
3CFE   7D                     LD   A,L   
3CFF   B4                     OR   H   
3D00   CA 6E 3D               JP   Z,expectM_2879S132   
3D03   CD B5 0C               CALL   printStr   
3D06   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1#"   
3D20   CD B5 0C               CALL   printStr   
3D23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D32   21 42 00               LD   hl,66   
3D35   E5                     PUSH   hl   
3D36   E5                     PUSH   hl   
3D37   CD D4 0D               CALL   run   
3D3A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D42   CD 3D 0C               CALL   flushBuffer   
3D45   CD B5 0C               CALL   printStr   
3D48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D55   E1                     POP   hl   
3D56   E5                     PUSH   hl   
3D57   E5                     PUSH   hl   
3D58   CD D4 0D               CALL   run   
3D5B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D6A   CD 3D 0C               CALL   flushBuffer   
3D6D   76                     HALT      
3D6E                EXPECTM_2879S132:      
3D6E   E1                     POP   HL   
3D6F                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3D6F   31 00 50               LD   SP,STACK   
3D72   CD FD 0C               CALL   coldInit   
3D75   CD 10 4E               CALL   execStr   
3D78   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3D8C   CD 3D 0C               CALL   flushBuffer   
3D8F   E1                     POP   HL   
3D90   E5                     PUSH   HL   
3D91   11 0A 00               LD   DE,10   
3D94   B7                     OR   A   
3D95   ED 52                  SBC   HL,DE   
3D97   7D                     LD   A,L   
3D98   B4                     OR   H   
3D99   CA 07 3E               JP   Z,expectM_2880S133   
3D9C   CD B5 0C               CALL   printStr   
3D9F   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3DB9   CD B5 0C               CALL   printStr   
3DBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DCB   21 0A 00               LD   hl,10   
3DCE   E5                     PUSH   hl   
3DCF   E5                     PUSH   hl   
3DD0   CD D4 0D               CALL   run   
3DD3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DDB   CD 3D 0C               CALL   flushBuffer   
3DDE   CD B5 0C               CALL   printStr   
3DE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DEE   E1                     POP   hl   
3DEF   E5                     PUSH   hl   
3DF0   E5                     PUSH   hl   
3DF1   CD D4 0D               CALL   run   
3DF4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E03   CD 3D 0C               CALL   flushBuffer   
3E06   76                     HALT      
3E07                EXPECTM_2880S133:      
3E07   E1                     POP   HL   
3E08                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
3E08   31 00 50               LD   SP,STACK   
3E0B   CD FD 0C               CALL   coldInit   
3E0E   CD 10 4E               CALL   execStr   
3E11   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
3E2E   CD 3D 0C               CALL   flushBuffer   
3E31   E1                     POP   HL   
3E32   E5                     PUSH   HL   
3E33   11 0A 00               LD   DE,10   
3E36   B7                     OR   A   
3E37   ED 52                  SBC   HL,DE   
3E39   7D                     LD   A,L   
3E3A   B4                     OR   H   
3E3B   CA B2 3E               JP   Z,expectM_2881S134   
3E3E   CD B5 0C               CALL   printStr   
3E41   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
3E64   CD B5 0C               CALL   printStr   
3E67   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E76   21 0A 00               LD   hl,10   
3E79   E5                     PUSH   hl   
3E7A   E5                     PUSH   hl   
3E7B   CD D4 0D               CALL   run   
3E7E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E86   CD 3D 0C               CALL   flushBuffer   
3E89   CD B5 0C               CALL   printStr   
3E8C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E99   E1                     POP   hl   
3E9A   E5                     PUSH   hl   
3E9B   E5                     PUSH   hl   
3E9C   CD D4 0D               CALL   run   
3E9F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3EAE   CD 3D 0C               CALL   flushBuffer   
3EB1   76                     HALT      
3EB2                EXPECTM_2881S134:      
3EB2   E1                     POP   HL   
3EB3                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
3EB3   31 00 50               LD   SP,STACK   
3EB6   CD FD 0C               CALL   coldInit   
3EB9   CD 10 4E               CALL   execStr   
3EBC   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3EDD   CD 3D 0C               CALL   flushBuffer   
3EE0   E1                     POP   HL   
3EE1   E5                     PUSH   HL   
3EE2   11 0A 00               LD   DE,10   
3EE5   B7                     OR   A   
3EE6   ED 52                  SBC   HL,DE   
3EE8   7D                     LD   A,L   
3EE9   B4                     OR   H   
3EEA   CA 65 3F               JP   Z,expectM_2882S135   
3EED   CD B5 0C               CALL   printStr   
3EF0   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
3F17   CD B5 0C               CALL   printStr   
3F1A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F29   21 0A 00               LD   hl,10   
3F2C   E5                     PUSH   hl   
3F2D   E5                     PUSH   hl   
3F2E   CD D4 0D               CALL   run   
3F31   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F39   CD 3D 0C               CALL   flushBuffer   
3F3C   CD B5 0C               CALL   printStr   
3F3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F4C   E1                     POP   hl   
3F4D   E5                     PUSH   hl   
3F4E   E5                     PUSH   hl   
3F4F   CD D4 0D               CALL   run   
3F52   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F61   CD 3D 0C               CALL   flushBuffer   
3F64   76                     HALT      
3F65                EXPECTM_2882S135:      
3F65   E1                     POP   HL   
3F66                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
3F66   31 00 50               LD   SP,STACK   
3F69   CD FD 0C               CALL   coldInit   
3F6C   CD 10 4E               CALL   execStr   
3F6F   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3F90   CD 3D 0C               CALL   flushBuffer   
3F93   E1                     POP   HL   
3F94   E5                     PUSH   HL   
3F95   11 14 00               LD   DE,20   
3F98   B7                     OR   A   
3F99   ED 52                  SBC   HL,DE   
3F9B   7D                     LD   A,L   
3F9C   B4                     OR   H   
3F9D   CA 18 40               JP   Z,expectM_2883S136   
3FA0   CD B5 0C               CALL   printStr   
3FA3   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
3FCA   CD B5 0C               CALL   printStr   
3FCD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FDC   21 14 00               LD   hl,20   
3FDF   E5                     PUSH   hl   
3FE0   E5                     PUSH   hl   
3FE1   CD D4 0D               CALL   run   
3FE4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FEC   CD 3D 0C               CALL   flushBuffer   
3FEF   CD B5 0C               CALL   printStr   
3FF2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FFF   E1                     POP   hl   
4000   E5                     PUSH   hl   
4001   E5                     PUSH   hl   
4002   CD D4 0D               CALL   run   
4005   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4014   CD 3D 0C               CALL   flushBuffer   
4017   76                     HALT      
4018                EXPECTM_2883S136:      
4018   E1                     POP   HL   
4019                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
4019   31 00 50               LD   SP,STACK   
401C   CD FD 0C               CALL   coldInit   
401F   CD 10 4E               CALL   execStr   
4022   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
403A   CD 3D 0C               CALL   flushBuffer   
403D   E1                     POP   HL   
403E   E5                     PUSH   HL   
403F   11 06 00               LD   DE,6   
4042   B7                     OR   A   
4043   ED 52                  SBC   HL,DE   
4045   7D                     LD   A,L   
4046   B4                     OR   H   
4047   CA B9 40               JP   Z,expectM_2884S137   
404A   CD B5 0C               CALL   printStr   
404D   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
406B   CD B5 0C               CALL   printStr   
406E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
407D   21 06 00               LD   hl,6   
4080   E5                     PUSH   hl   
4081   E5                     PUSH   hl   
4082   CD D4 0D               CALL   run   
4085   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
408D   CD 3D 0C               CALL   flushBuffer   
4090   CD B5 0C               CALL   printStr   
4093   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40A0   E1                     POP   hl   
40A1   E5                     PUSH   hl   
40A2   E5                     PUSH   hl   
40A3   CD D4 0D               CALL   run   
40A6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40B5   CD 3D 0C               CALL   flushBuffer   
40B8   76                     HALT      
40B9                EXPECTM_2884S137:      
40B9   E1                     POP   HL   
40BA                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
40BA   31 00 50               LD   SP,STACK   
40BD   CD FD 0C               CALL   coldInit   
40C0   CD 10 4E               CALL   execStr   
40C3   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
40DE   CD 3D 0C               CALL   flushBuffer   
40E1   E1                     POP   HL   
40E2   E5                     PUSH   HL   
40E3   11 02 00               LD   DE,2   
40E6   B7                     OR   A   
40E7   ED 52                  SBC   HL,DE   
40E9   7D                     LD   A,L   
40EA   B4                     OR   H   
40EB   CA 60 41               JP   Z,expectM_2885S138   
40EE   CD B5 0C               CALL   printStr   
40F1   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
4112   CD B5 0C               CALL   printStr   
4115   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4124   21 02 00               LD   hl,2   
4127   E5                     PUSH   hl   
4128   E5                     PUSH   hl   
4129   CD D4 0D               CALL   run   
412C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4134   CD 3D 0C               CALL   flushBuffer   
4137   CD B5 0C               CALL   printStr   
413A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4147   E1                     POP   hl   
4148   E5                     PUSH   hl   
4149   E5                     PUSH   hl   
414A   CD D4 0D               CALL   run   
414D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
415C   CD 3D 0C               CALL   flushBuffer   
415F   76                     HALT      
4160                EXPECTM_2885S138:      
4160   E1                     POP   HL   
4161                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
4161   31 00 50               LD   SP,STACK   
4164   CD FD 0C               CALL   coldInit   
4167   CD 10 4E               CALL   execStr   
416A   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
4190   CD 3D 0C               CALL   flushBuffer   
4193   E1                     POP   HL   
4194   E5                     PUSH   HL   
4195   11 0A 00               LD   DE,10   
4198   B7                     OR   A   
4199   ED 52                  SBC   HL,DE   
419B   7D                     LD   A,L   
419C   B4                     OR   H   
419D   CA 1D 42               JP   Z,expectM_2886S139   
41A0   CD B5 0C               CALL   printStr   
41A3   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
41CF   CD B5 0C               CALL   printStr   
41D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41E1   21 0A 00               LD   hl,10   
41E4   E5                     PUSH   hl   
41E5   E5                     PUSH   hl   
41E6   CD D4 0D               CALL   run   
41E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41F1   CD 3D 0C               CALL   flushBuffer   
41F4   CD B5 0C               CALL   printStr   
41F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4204   E1                     POP   hl   
4205   E5                     PUSH   hl   
4206   E5                     PUSH   hl   
4207   CD D4 0D               CALL   run   
420A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4219   CD 3D 0C               CALL   flushBuffer   
421C   76                     HALT      
421D                EXPECTM_2886S139:      
421D   E1                     POP   HL   
421E                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
421E   31 00 50               LD   SP,STACK   
4221   CD FD 0C               CALL   coldInit   
4224   CD 10 4E               CALL   execStr   
4227   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
4254   CD 3D 0C               CALL   flushBuffer   
4257   E1                     POP   HL   
4258   E5                     PUSH   HL   
4259   11 06 00               LD   DE,6   
425C   B7                     OR   A   
425D   ED 52                  SBC   HL,DE   
425F   7D                     LD   A,L   
4260   B4                     OR   H   
4261   CA E8 42               JP   Z,expectM_2887S140   
4264   CD B5 0C               CALL   printStr   
4267   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
429A   CD B5 0C               CALL   printStr   
429D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42AC   21 06 00               LD   hl,6   
42AF   E5                     PUSH   hl   
42B0   E5                     PUSH   hl   
42B1   CD D4 0D               CALL   run   
42B4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42BC   CD 3D 0C               CALL   flushBuffer   
42BF   CD B5 0C               CALL   printStr   
42C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42CF   E1                     POP   hl   
42D0   E5                     PUSH   hl   
42D1   E5                     PUSH   hl   
42D2   CD D4 0D               CALL   run   
42D5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
42E4   CD 3D 0C               CALL   flushBuffer   
42E7   76                     HALT      
42E8                EXPECTM_2887S140:      
42E8   E1                     POP   HL   
42E9                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +};^",3
42E9   31 00 50               LD   SP,STACK   
42EC   CD FD 0C               CALL   coldInit   
42EF   CD 10 4E               CALL   execStr   
42F2   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/t :f{1 %f/br 2 +};^",0   
4307   CD 3D 0C               CALL   flushBuffer   
430A   E1                     POP   HL   
430B   E5                     PUSH   HL   
430C   11 03 00               LD   DE,3   
430F   B7                     OR   A   
4310   ED 52                  SBC   HL,DE   
4312   7D                     LD   A,L   
4313   B4                     OR   H   
4314   CA 83 43               JP   Z,expectM_2888S141   
4317   CD B5 0C               CALL   printStr   
431A   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +};^"   
4335   CD B5 0C               CALL   printStr   
4338   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4347   21 03 00               LD   hl,3   
434A   E5                     PUSH   hl   
434B   E5                     PUSH   hl   
434C   CD D4 0D               CALL   run   
434F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4357   CD 3D 0C               CALL   flushBuffer   
435A   CD B5 0C               CALL   printStr   
435D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
436A   E1                     POP   hl   
436B   E5                     PUSH   hl   
436C   E5                     PUSH   hl   
436D   CD D4 0D               CALL   run   
4370   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
437F   CD 3D 0C               CALL   flushBuffer   
4382   76                     HALT      
4383                EXPECTM_2888S141:      
4383   E1                     POP   HL   
4384                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +};^",1
4384   31 00 50               LD   SP,STACK   
4387   CD FD 0C               CALL   coldInit   
438A   CD 10 4E               CALL   execStr   
438D   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/f :f{1 %f/br 2 +};^",0   
43A2   CD 3D 0C               CALL   flushBuffer   
43A5   E1                     POP   HL   
43A6   E5                     PUSH   HL   
43A7   11 01 00               LD   DE,1   
43AA   B7                     OR   A   
43AB   ED 52                  SBC   HL,DE   
43AD   7D                     LD   A,L   
43AE   B4                     OR   H   
43AF   CA 1E 44               JP   Z,expectM_2889S142   
43B2   CD B5 0C               CALL   printStr   
43B5   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +};^"   
43D0   CD B5 0C               CALL   printStr   
43D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43E2   21 01 00               LD   hl,1   
43E5   E5                     PUSH   hl   
43E6   E5                     PUSH   hl   
43E7   CD D4 0D               CALL   run   
43EA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43F2   CD 3D 0C               CALL   flushBuffer   
43F5   CD B5 0C               CALL   printStr   
43F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4405   E1                     POP   hl   
4406   E5                     PUSH   hl   
4407   E5                     PUSH   hl   
4408   CD D4 0D               CALL   run   
440B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
441A   CD 3D 0C               CALL   flushBuffer   
441D   76                     HALT      
441E                EXPECTM_2889S142:      
441E   E1                     POP   HL   
441F                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
441F   31 00 50               LD   SP,STACK   
4422   CD FD 0C               CALL   coldInit   
4425   CD 10 4E               CALL   execStr   
4428   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
4434   CD 3D 0C               CALL   flushBuffer   
4437   E1                     POP   HL   
4438   E5                     PUSH   HL   
4439   11 00 00               LD   DE,NUL   
443C   B7                     OR   A   
443D   ED 52                  SBC   HL,DE   
443F   7D                     LD   A,L   
4440   B4                     OR   H   
4441   CA A7 44               JP   Z,expectM_2890S143   
4444   CD B5 0C               CALL   printStr   
4447   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
4459   CD B5 0C               CALL   printStr   
445C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
446B   21 00 00               LD   hl,NUL   
446E   E5                     PUSH   hl   
446F   E5                     PUSH   hl   
4470   CD D4 0D               CALL   run   
4473   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
447B   CD 3D 0C               CALL   flushBuffer   
447E   CD B5 0C               CALL   printStr   
4481   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
448E   E1                     POP   hl   
448F   E5                     PUSH   hl   
4490   E5                     PUSH   hl   
4491   CD D4 0D               CALL   run   
4494   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44A3   CD 3D 0C               CALL   flushBuffer   
44A6   76                     HALT      
44A7                EXPECTM_2890S143:      
44A7   E1                     POP   HL   
44A8                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
44A8   31 00 50               LD   SP,STACK   
44AB   CD FD 0C               CALL   coldInit   
44AE   CD 10 4E               CALL   execStr   
44B1   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
44BD   CD 3D 0C               CALL   flushBuffer   
44C0   E1                     POP   HL   
44C1   E5                     PUSH   HL   
44C2   11 00 00               LD   DE,NUL   
44C5   B7                     OR   A   
44C6   ED 52                  SBC   HL,DE   
44C8   7D                     LD   A,L   
44C9   B4                     OR   H   
44CA   CA 30 45               JP   Z,expectM_2891S144   
44CD   CD B5 0C               CALL   printStr   
44D0   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
44E2   CD B5 0C               CALL   printStr   
44E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44F4   21 00 00               LD   hl,NUL   
44F7   E5                     PUSH   hl   
44F8   E5                     PUSH   hl   
44F9   CD D4 0D               CALL   run   
44FC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4504   CD 3D 0C               CALL   flushBuffer   
4507   CD B5 0C               CALL   printStr   
450A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4517   E1                     POP   hl   
4518   E5                     PUSH   hl   
4519   E5                     PUSH   hl   
451A   CD D4 0D               CALL   run   
451D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
452C   CD 3D 0C               CALL   flushBuffer   
452F   76                     HALT      
4530                EXPECTM_2891S144:      
4530   E1                     POP   HL   
4531                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
4531   31 00 50               LD   SP,STACK   
4534   CD FD 0C               CALL   coldInit   
4537   CD 10 4E               CALL   execStr   
453A   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
4546   CD 3D 0C               CALL   flushBuffer   
4549   E1                     POP   HL   
454A   E5                     PUSH   HL   
454B   11 00 00               LD   DE,NUL   
454E   B7                     OR   A   
454F   ED 52                  SBC   HL,DE   
4551   7D                     LD   A,L   
4552   B4                     OR   H   
4553   CA B9 45               JP   Z,expectM_2892S145   
4556   CD B5 0C               CALL   printStr   
4559   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
456B   CD B5 0C               CALL   printStr   
456E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
457D   21 00 00               LD   hl,NUL   
4580   E5                     PUSH   hl   
4581   E5                     PUSH   hl   
4582   CD D4 0D               CALL   run   
4585   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
458D   CD 3D 0C               CALL   flushBuffer   
4590   CD B5 0C               CALL   printStr   
4593   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45A0   E1                     POP   hl   
45A1   E5                     PUSH   hl   
45A2   E5                     PUSH   hl   
45A3   CD D4 0D               CALL   run   
45A6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45B5   CD 3D 0C               CALL   flushBuffer   
45B8   76                     HALT      
45B9                EXPECTM_2892S145:      
45B9   E1                     POP   HL   
45BA                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
45BA   31 00 50               LD   SP,STACK   
45BD   CD FD 0C               CALL   coldInit   
45C0   CD 10 4E               CALL   execStr   
45C3   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
45CF   CD 3D 0C               CALL   flushBuffer   
45D2   E1                     POP   HL   
45D3   E5                     PUSH   HL   
45D4   11 00 00               LD   DE,NUL   
45D7   B7                     OR   A   
45D8   ED 52                  SBC   HL,DE   
45DA   7D                     LD   A,L   
45DB   B4                     OR   H   
45DC   CA 42 46               JP   Z,expectM_2893S146   
45DF   CD B5 0C               CALL   printStr   
45E2   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
45F4   CD B5 0C               CALL   printStr   
45F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4606   21 00 00               LD   hl,NUL   
4609   E5                     PUSH   hl   
460A   E5                     PUSH   hl   
460B   CD D4 0D               CALL   run   
460E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4616   CD 3D 0C               CALL   flushBuffer   
4619   CD B5 0C               CALL   printStr   
461C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4629   E1                     POP   hl   
462A   E5                     PUSH   hl   
462B   E5                     PUSH   hl   
462C   CD D4 0D               CALL   run   
462F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
463E   CD 3D 0C               CALL   flushBuffer   
4641   76                     HALT      
4642                EXPECTM_2893S146:      
4642   E1                     POP   HL   
4643                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4643   31 00 50               LD   SP,STACK   
4646   CD FD 0C               CALL   coldInit   
4649   CD 10 4E               CALL   execStr   
464C   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
4654   CD 3D 0C               CALL   flushBuffer   
4657   E1                     POP   HL   
4658   E5                     PUSH   HL   
4659   11 66 52               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
465C   B7                     OR   A   
465D   ED 52                  SBC   HL,DE   
465F   7D                     LD   A,L   
4660   B4                     OR   H   
4661   CA C3 46               JP   Z,expectM_2894S147   
4664   CD B5 0C               CALL   printStr   
4667   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
4675   CD B5 0C               CALL   printStr   
4678   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4687   21 66 52               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
468A   E5                     PUSH   hl   
468B   E5                     PUSH   hl   
468C   CD D4 0D               CALL   run   
468F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4697   CD 3D 0C               CALL   flushBuffer   
469A   CD B5 0C               CALL   printStr   
469D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46AA   E1                     POP   hl   
46AB   E5                     PUSH   hl   
46AC   E5                     PUSH   hl   
46AD   CD D4 0D               CALL   run   
46B0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46BF   CD 3D 0C               CALL   flushBuffer   
46C2   76                     HALT      
46C3                EXPECTM_2894S147:      
46C3   E1                     POP   HL   
46C4                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
46C4   31 00 50               LD   SP,STACK   
46C7   CD FD 0C               CALL   coldInit   
46CA   CD 10 4E               CALL   execStr   
46CD   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
46D5   CD 3D 0C               CALL   flushBuffer   
46D8   E1                     POP   HL   
46D9   E5                     PUSH   HL   
46DA   11 34 52               LD   DE,VARS + ("Z"-"A"+1)*2   
46DD   B7                     OR   A   
46DE   ED 52                  SBC   HL,DE   
46E0   7D                     LD   A,L   
46E1   B4                     OR   H   
46E2   CA 44 47               JP   Z,expectM_2895S148   
46E5   CD B5 0C               CALL   printStr   
46E8   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
46F6   CD B5 0C               CALL   printStr   
46F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4708   21 34 52               LD   hl,VARS + ("Z"-"A"+1)*2   
470B   E5                     PUSH   hl   
470C   E5                     PUSH   hl   
470D   CD D4 0D               CALL   run   
4710   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4718   CD 3D 0C               CALL   flushBuffer   
471B   CD B5 0C               CALL   printStr   
471E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
472B   E1                     POP   hl   
472C   E5                     PUSH   hl   
472D   E5                     PUSH   hl   
472E   CD D4 0D               CALL   run   
4731   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4740   CD 3D 0C               CALL   flushBuffer   
4743   76                     HALT      
4744                EXPECTM_2895S148:      
4744   E1                     POP   HL   
4745                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4745   31 00 50               LD   SP,STACK   
4748   CD FD 0C               CALL   coldInit   
474B   CD 10 4E               CALL   execStr   
474E   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
4756   CD 3D 0C               CALL   flushBuffer   
4759   E1                     POP   HL   
475A   E5                     PUSH   HL   
475B   11 32 52               LD   DE,VARS + ("Z"-"A")*2   
475E   B7                     OR   A   
475F   ED 52                  SBC   HL,DE   
4761   7D                     LD   A,L   
4762   B4                     OR   H   
4763   CA C5 47               JP   Z,expectM_2896S149   
4766   CD B5 0C               CALL   printStr   
4769   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4777   CD B5 0C               CALL   printStr   
477A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4789   21 32 52               LD   hl,VARS + ("Z"-"A")*2   
478C   E5                     PUSH   hl   
478D   E5                     PUSH   hl   
478E   CD D4 0D               CALL   run   
4791   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4799   CD 3D 0C               CALL   flushBuffer   
479C   CD B5 0C               CALL   printStr   
479F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47AC   E1                     POP   hl   
47AD   E5                     PUSH   hl   
47AE   E5                     PUSH   hl   
47AF   CD D4 0D               CALL   run   
47B2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47C1   CD 3D 0C               CALL   flushBuffer   
47C4   76                     HALT      
47C5                EXPECTM_2896S149:      
47C5   E1                     POP   HL   
47C6                          ;*Macro unroll:  test "'A' /ad", VARS
47C6   31 00 50               LD   SP,STACK   
47C9   CD FD 0C               CALL   coldInit   
47CC   CD 10 4E               CALL   execStr   
47CF   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
47D7   CD 3D 0C               CALL   flushBuffer   
47DA   E1                     POP   HL   
47DB   E5                     PUSH   HL   
47DC   11 00 52               LD   DE,VARS   
47DF   B7                     OR   A   
47E0   ED 52                  SBC   HL,DE   
47E2   7D                     LD   A,L   
47E3   B4                     OR   H   
47E4   CA 46 48               JP   Z,expectM_2897S150   
47E7   CD B5 0C               CALL   printStr   
47EA   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
47F8   CD B5 0C               CALL   printStr   
47FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
480A   21 00 52               LD   hl,VARS   
480D   E5                     PUSH   hl   
480E   E5                     PUSH   hl   
480F   CD D4 0D               CALL   run   
4812   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
481A   CD 3D 0C               CALL   flushBuffer   
481D   CD B5 0C               CALL   printStr   
4820   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
482D   E1                     POP   hl   
482E   E5                     PUSH   hl   
482F   E5                     PUSH   hl   
4830   CD D4 0D               CALL   run   
4833   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4842   CD 3D 0C               CALL   flushBuffer   
4845   76                     HALT      
4846                EXPECTM_2897S150:      
4846   E1                     POP   HL   
4847                          ;*Macro unroll:  test "-1. /c/vB 0#", $2D
4847   31 00 50               LD   SP,STACK   
484A   CD FD 0C               CALL   coldInit   
484D   CD 10 4E               CALL   execStr   
4850   2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 DB   "-1. /c/vB 0#",0   
485D   CD 3D 0C               CALL   flushBuffer   
4860   E1                     POP   HL   
4861   E5                     PUSH   HL   
4862   11 2D 00               LD   DE,$2D   
4865   B7                     OR   A   
4866   ED 52                  SBC   HL,DE   
4868   7D                     LD   A,L   
4869   B4                     OR   H   
486A   CA D1 48               JP   Z,expectM_2898S151   
486D   CD B5 0C               CALL   printStr   
4870   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /c/vB 0#"   
4883   CD B5 0C               CALL   printStr   
4886   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4895   21 2D 00               LD   hl,$2D   
4898   E5                     PUSH   hl   
4899   E5                     PUSH   hl   
489A   CD D4 0D               CALL   run   
489D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48A5   CD 3D 0C               CALL   flushBuffer   
48A8   CD B5 0C               CALL   printStr   
48AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48B8   E1                     POP   hl   
48B9   E5                     PUSH   hl   
48BA   E5                     PUSH   hl   
48BB   CD D4 0D               CALL   run   
48BE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48CD   CD 3D 0C               CALL   flushBuffer   
48D0   76                     HALT      
48D1                EXPECTM_2898S151:      
48D1   E1                     POP   HL   
48D2                          ;*Macro unroll:  test {DQ,"A",DQ,".s /c/vB 0#"}, 65
48D2   31 00 50               LD   SP,STACK   
48D5   CD FD 0C               CALL   coldInit   
48D8   CD 10 4E               CALL   execStr   
48DB   22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /c/vB 0#",0   
48EA   CD 3D 0C               CALL   flushBuffer   
48ED   E1                     POP   HL   
48EE   E5                     PUSH   HL   
48EF   11 41 00               LD   DE,65   
48F2   B7                     OR   A   
48F3   ED 52                  SBC   HL,DE   
48F5   7D                     LD   A,L   
48F6   B4                     OR   H   
48F7   CA 60 49               JP   Z,expectM_2899S152   
48FA   CD B5 0C               CALL   printStr   
48FD   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /c/vB 0#"   
4912   CD B5 0C               CALL   printStr   
4915   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4924   21 41 00               LD   hl,65   
4927   E5                     PUSH   hl   
4928   E5                     PUSH   hl   
4929   CD D4 0D               CALL   run   
492C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4934   CD 3D 0C               CALL   flushBuffer   
4937   CD B5 0C               CALL   printStr   
493A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4947   E1                     POP   hl   
4948   E5                     PUSH   hl   
4949   E5                     PUSH   hl   
494A   CD D4 0D               CALL   run   
494D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
495C   CD 3D 0C               CALL   flushBuffer   
495F   76                     HALT      
4960                EXPECTM_2899S152:      
4960   E1                     POP   HL   
4961                          ;*Macro unroll:  test "123. /c/vB 1#", $32
4961   31 00 50               LD   SP,STACK   
4964   CD FD 0C               CALL   coldInit   
4967   CD 10 4E               CALL   execStr   
496A   31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 DB   "123. /c/vB 1#",0   
4978   CD 3D 0C               CALL   flushBuffer   
497B   E1                     POP   HL   
497C   E5                     PUSH   HL   
497D   11 32 00               LD   DE,$32   
4980   B7                     OR   A   
4981   ED 52                  SBC   HL,DE   
4983   7D                     LD   A,L   
4984   B4                     OR   H   
4985   CA ED 49               JP   Z,expectM_2900S153   
4988   CD B5 0C               CALL   printStr   
498B   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /c/vB 1#"   
499F   CD B5 0C               CALL   printStr   
49A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49B1   21 32 00               LD   hl,$32   
49B4   E5                     PUSH   hl   
49B5   E5                     PUSH   hl   
49B6   CD D4 0D               CALL   run   
49B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49C1   CD 3D 0C               CALL   flushBuffer   
49C4   CD B5 0C               CALL   printStr   
49C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49D4   E1                     POP   hl   
49D5   E5                     PUSH   hl   
49D6   E5                     PUSH   hl   
49D7   CD D4 0D               CALL   run   
49DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49E9   CD 3D 0C               CALL   flushBuffer   
49EC   76                     HALT      
49ED                EXPECTM_2900S153:      
49ED   E1                     POP   HL   
49EE                          ;*Macro unroll:  test ":a{%a}; F=1F^", 1
49EE   31 00 50               LD   SP,STACK   
49F1   CD FD 0C               CALL   coldInit   
49F4   CD 10 4E               CALL   execStr   
49F7   3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 DB   ":a{%a}; F=1F^",0   
4A05   CD 3D 0C               CALL   flushBuffer   
4A08   E1                     POP   HL   
4A09   E5                     PUSH   HL   
4A0A   11 01 00               LD   DE,1   
4A0D   B7                     OR   A   
4A0E   ED 52                  SBC   HL,DE   
4A10   7D                     LD   A,L   
4A11   B4                     OR   H   
4A12   CA 7A 4A               JP   Z,expectM_2901S154   
4A15   CD B5 0C               CALL   printStr   
4A18   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a}; F=1F^"   
4A2C   CD B5 0C               CALL   printStr   
4A2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A3E   21 01 00               LD   hl,1   
4A41   E5                     PUSH   hl   
4A42   E5                     PUSH   hl   
4A43   CD D4 0D               CALL   run   
4A46   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A4E   CD 3D 0C               CALL   flushBuffer   
4A51   CD B5 0C               CALL   printStr   
4A54   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A61   E1                     POP   hl   
4A62   E5                     PUSH   hl   
4A63   E5                     PUSH   hl   
4A64   CD D4 0D               CALL   run   
4A67   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A76   CD 3D 0C               CALL   flushBuffer   
4A79   76                     HALT      
4A7A                EXPECTM_2901S154:      
4A7A   E1                     POP   HL   
4A7B                          ;*Macro unroll:  test "1 :b{:a{%a};};^F= 3F^",3
4A7B   31 00 50               LD   SP,STACK   
4A7E   CD FD 0C               CALL   coldInit   
4A81   CD 10 4E               CALL   execStr   
4A84   31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a};};^F= 3F^",0   
4A9A   CD 3D 0C               CALL   flushBuffer   
4A9D   E1                     POP   HL   
4A9E   E5                     PUSH   HL   
4A9F   11 03 00               LD   DE,3   
4AA2   B7                     OR   A   
4AA3   ED 52                  SBC   HL,DE   
4AA5   7D                     LD   A,L   
4AA6   B4                     OR   H   
4AA7   CA 17 4B               JP   Z,expectM_2902S155   
4AAA   CD B5 0C               CALL   printStr   
4AAD   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a};};^F= 3F^"   
4AC9   CD B5 0C               CALL   printStr   
4ACC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4ADB   21 03 00               LD   hl,3   
4ADE   E5                     PUSH   hl   
4ADF   E5                     PUSH   hl   
4AE0   CD D4 0D               CALL   run   
4AE3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4AEB   CD 3D 0C               CALL   flushBuffer   
4AEE   CD B5 0C               CALL   printStr   
4AF1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AFE   E1                     POP   hl   
4AFF   E5                     PUSH   hl   
4B00   E5                     PUSH   hl   
4B01   CD D4 0D               CALL   run   
4B04   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B13   CD 3D 0C               CALL   flushBuffer   
4B16   76                     HALT      
4B17                EXPECTM_2902S155:      
4B17   E1                     POP   HL   
4B18                          ;*Macro unroll:  test "1 :b{:a{%a%b-};};^F= 3F^",2
4B18   31 00 50               LD   SP,STACK   
4B1B   CD FD 0C               CALL   coldInit   
4B1E   CD 10 4E               CALL   execStr   
4B21   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-};};^F= 3F^",0   
4B3A   CD 3D 0C               CALL   flushBuffer   
4B3D   E1                     POP   HL   
4B3E   E5                     PUSH   HL   
4B3F   11 02 00               LD   DE,2   
4B42   B7                     OR   A   
4B43   ED 52                  SBC   HL,DE   
4B45   7D                     LD   A,L   
4B46   B4                     OR   H   
4B47   CA BA 4B               JP   Z,expectM_2903S156   
4B4A   CD B5 0C               CALL   printStr   
4B4D   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-};};^F= 3F^"   
4B6C   CD B5 0C               CALL   printStr   
4B6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B7E   21 02 00               LD   hl,2   
4B81   E5                     PUSH   hl   
4B82   E5                     PUSH   hl   
4B83   CD D4 0D               CALL   run   
4B86   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B8E   CD 3D 0C               CALL   flushBuffer   
4B91   CD B5 0C               CALL   printStr   
4B94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BA1   E1                     POP   hl   
4BA2   E5                     PUSH   hl   
4BA3   E5                     PUSH   hl   
4BA4   CD D4 0D               CALL   run   
4BA7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4BB6   CD 3D 0C               CALL   flushBuffer   
4BB9   76                     HALT      
4BBA                EXPECTM_2903S156:      
4BBA   E1                     POP   HL   
4BBB                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",1
4BBB   31 00 50               LD   SP,STACK   
4BBE   CD FD 0C               CALL   coldInit   
4BC1   CD 10 4E               CALL   execStr   
4BC4   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",0   
4BE9   CD 3D 0C               CALL   flushBuffer   
4BEC   E1                     POP   HL   
4BED   E5                     PUSH   HL   
4BEE   11 01 00               LD   DE,1   
4BF1   B7                     OR   A   
4BF2   ED 52                  SBC   HL,DE   
4BF4   7D                     LD   A,L   
4BF5   B4                     OR   H   
4BF6   CA 75 4C               JP   Z,expectM_2904S157   
4BF9   CD B5 0C               CALL   printStr   
4BFC   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^"   
4C27   CD B5 0C               CALL   printStr   
4C2A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C39   21 01 00               LD   hl,1   
4C3C   E5                     PUSH   hl   
4C3D   E5                     PUSH   hl   
4C3E   CD D4 0D               CALL   run   
4C41   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C49   CD 3D 0C               CALL   flushBuffer   
4C4C   CD B5 0C               CALL   printStr   
4C4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C5C   E1                     POP   hl   
4C5D   E5                     PUSH   hl   
4C5E   E5                     PUSH   hl   
4C5F   CD D4 0D               CALL   run   
4C62   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C71   CD 3D 0C               CALL   flushBuffer   
4C74   76                     HALT      
4C75                EXPECTM_2904S157:      
4C75   E1                     POP   HL   
4C76                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",1
4C76   31 00 50               LD   SP,STACK   
4C79   CD FD 0C               CALL   coldInit   
4C7C   CD 10 4E               CALL   execStr   
4C7F   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",0   
4CA4   CD 3D 0C               CALL   flushBuffer   
4CA7   E1                     POP   HL   
4CA8   E5                     PUSH   HL   
4CA9   11 01 00               LD   DE,1   
4CAC   B7                     OR   A   
4CAD   ED 52                  SBC   HL,DE   
4CAF   7D                     LD   A,L   
4CB0   B4                     OR   H   
4CB1   CA 30 4D               JP   Z,expectM_2905S158   
4CB4   CD B5 0C               CALL   printStr   
4CB7   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^"   
4CE2   CD B5 0C               CALL   printStr   
4CE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CF4   21 01 00               LD   hl,1   
4CF7   E5                     PUSH   hl   
4CF8   E5                     PUSH   hl   
4CF9   CD D4 0D               CALL   run   
4CFC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4D04   CD 3D 0C               CALL   flushBuffer   
4D07   CD B5 0C               CALL   printStr   
4D0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D17   E1                     POP   hl   
4D18   E5                     PUSH   hl   
4D19   E5                     PUSH   hl   
4D1A   CD D4 0D               CALL   run   
4D1D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4D2C   CD 3D 0C               CALL   flushBuffer   
4D2F   76                     HALT      
4D30                EXPECTM_2905S158:      
4D30   E1                     POP   HL   
4D31                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",2
4D31   31 00 50               LD   SP,STACK   
4D34   CD FD 0C               CALL   coldInit   
4D37   CD 10 4E               CALL   execStr   
4D3A   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",0   
4D6C   CD 3D 0C               CALL   flushBuffer   
4D6F   E1                     POP   HL   
4D70   E5                     PUSH   HL   
4D71   11 02 00               LD   DE,2   
4D74   B7                     OR   A   
4D75   ED 52                  SBC   HL,DE   
4D77   7D                     LD   A,L   
4D78   B4                     OR   H   
4D79   CA 05 4E               JP   Z,expectM_2906S159   
4D7C   CD B5 0C               CALL   printStr   
4D7F   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^"   
4DB7   CD B5 0C               CALL   printStr   
4DBA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DC9   21 02 00               LD   hl,2   
4DCC   E5                     PUSH   hl   
4DCD   E5                     PUSH   hl   
4DCE   CD D4 0D               CALL   run   
4DD1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4DD9   CD 3D 0C               CALL   flushBuffer   
4DDC   CD B5 0C               CALL   printStr   
4DDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DEC   E1                     POP   hl   
4DED   E5                     PUSH   hl   
4DEE   E5                     PUSH   hl   
4DEF   CD D4 0D               CALL   run   
4DF2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4E01   CD 3D 0C               CALL   flushBuffer   
4E04   76                     HALT      
4E05                EXPECTM_2906S159:      
4E05   E1                     POP   HL   
4E06                             ; 
4E06   CD B5 0C               CALL   printStr   
4E09   44 6F 6E 65 21 00      .CSTR   "Done!"   
4E0F   76                     HALT      
4E10                             ; executes a null teminated string (null executes exit_)
4E10                             ; the string should be immedaitely following the call
4E10                EXECSTR:      ; create a root stack frame
4E10   C1                     POP   bc   ; bc = code*
4E11   0B                     DEC   bc   ; dec to prepare for next routine
4E12   11 00 00               LD   de,0   
4E15   D5                     PUSH   de   ; push fake IP
4E16   D5                     PUSH   de   ; push null arg_list*
4E17   D5                     PUSH   de   ; push null first_arg*
4E18   D5                     PUSH   de   ; push fake BP
4E19   DD E9                  JP   (ix)   
4E1B                STKSIZE:   EQU   $100   ; Stack size
4E1B                TIBSIZE:   EQU   $100   ; 256 bytes
4E1B                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4E1B                          ALIGN   $100   
4F00                          DS   STKSIZE   
5000                STACK:       
5000                          ALIGN   $100   
5000                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5100                          ALIGN   $100   
5100                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5200                          ALIGN   $100   
5200                VARS:        
5200                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
52D0                RESTARTS:      
52D0                RST08:    DS   2   
52D2                RST10:    DS   2   
52D4                RST18:    DS   2   
52D6                RST20:    DS   2   
52D8                RST28:    DS   2   
52DA                RST30:    DS   2   ; 
52DC                BAUD:     DS   2   ; 
52DE                INTVEC:   DS   2   ; 
52E0                NMIVEC:   DS   2   ; 
52E2                GETCVEC:   DS   2   ; 
52E4                PUTCVEC:   DS   2   ; 
52E6                SYSVARS:      
52E6                             ; initialised sys variables (preserved)
52E6                VDATAWIDTH:   DS   2   ; 
52E8                VNUMBASE:   DS   2   ; 
52EA                VTIBPTR:   DS   2   ; 
52EC                VBUFPTR:   DS   2   ; 
52EE                VNEXT:    DS   2   ; 
52F0                VHEAPPTR:   DS   2   ; 
52F2                             ; uninitialised sys variables (preserved)
52F2                VPOINTER:   DS   2   ; 
52F4                VREMAIN:   DS   2   ; 
52F6                VSAVEDIP:   DS   2   ; 
52F8                VSAVEDSP:   DS   2   ; 
52FA                VSAVEDNEXT:   DS   2   ; 
52FC                VSAVEDBP:   DS   2   ; 
52FE                VCHECKSUM:   DS   2   ; 
5300                             ; uninitialised sys variables (unpreserved)
5300                VTEMP1:   DS   2   ; 
5302                VTEMP2:   DS   2   ; 
5304                VLASTDEF:   DS   2   ; 
5306                VHASHSTR:   DS   2   ; 
5308                TBPTR:    DS   2   ; reserved for tests
530A                TITLEBUF:   DS   20   
531E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0C3B DEFINED AT LINE 1855 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 2193 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 68 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 171 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 173 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 175 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 177 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 179 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 181 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 183 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 185 IN MAIN.asm
LPAREN_:            0315 DEFINED AT LINE 187 IN MAIN.asm
LBRACE_:            0315 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            0318 DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031B DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         031E DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0321 DEFINED AT LINE 196 IN MAIN.asm
COLON_:             0324 DEFINED AT LINE 198 IN MAIN.asm
UPCASE_:            0327 DEFINED AT LINE 200 IN MAIN.asm
LOWCASE_:           032A DEFINED AT LINE 202 IN MAIN.asm
QUESTION_:          032D DEFINED AT LINE 204 IN MAIN.asm
STAR_:              0330 DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0333 DEFINED AT LINE 208 IN MAIN.asm
NOT:                033E DEFINED AT LINE 216 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
NUM_:               0344 DEFINED AT LINE 220 IN MAIN.asm
                    > USED AT LINE 1728 IN MAIN.asm
HASH_:              0347 DEFINED AT LINE 222 IN MAIN.asm
PIPE_:              034A DEFINED AT LINE 224 IN MAIN.asm
CARET_:             034D DEFINED AT LINE 226 IN MAIN.asm
COMMA_:             0350 DEFINED AT LINE 228 IN MAIN.asm
DQUOTE_:            0353 DEFINED AT LINE 230 IN MAIN.asm
MINUS_:             0356 DEFINED AT LINE 232 IN MAIN.asm
EQ_:                0359 DEFINED AT LINE 234 IN MAIN.asm
EQ0:                0363 DEFINED AT LINE 241 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
EQ1:                0364 DEFINED AT LINE 243 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
GT_:                0368 DEFINED AT LINE 247 IN MAIN.asm
LT_:                0373 DEFINED AT LINE 255 IN MAIN.asm
LT1:                037C DEFINED AT LINE 262 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
SLASH_:             0385 DEFINED AT LINE 267 IN MAIN.asm
NOP_:               0388 DEFINED AT LINE 269 IN MAIN.asm
RPAREN_:            038A DEFINED AT LINE 271 IN MAIN.asm
PLUS:               038D DEFINED AT LINE 277 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADD:                038D DEFINED AT LINE 278 IN MAIN.asm
ADD1:               0398 DEFINED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
ADD3:               039C DEFINED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
AT:                 039F DEFINED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
ADDR:               039F DEFINED AT LINE 298 IN MAIN.asm
AMPER:              03A9 DEFINED AT LINE 303 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
AND:                03A9 DEFINED AT LINE 304 IN MAIN.asm
AND1:               03B0 DEFINED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
PIPE:               03B4 DEFINED AT LINE 317 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
OR:                 03B4 DEFINED AT LINE 318 IN MAIN.asm
XOR:                03BD DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
XOR1:               03BE DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
INVERT:             03C8 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
PERCENT:            03CD DEFINED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
ARG:                03CD DEFINED AT LINE 348 IN MAIN.asm
ARG0:               03E9 DEFINED AT LINE 367 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
ARG0A:              03F2 DEFINED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
                    > USED AT LINE 359 IN MAIN.asm
ARG1:               03F7 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
ARG1A:              03FF DEFINED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
LBRACK:             0402 DEFINED AT LINE 389 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYSTART:         0402 DEFINED AT LINE 390 IN MAIN.asm
RBRACK:             041E DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRAYEND:           041E DEFINED AT LINE 405 IN MAIN.asm
ARRAYEND1:          043A DEFINED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
ARRAYEND2:          044A DEFINED AT LINE 432 IN MAIN.asm
                    > USED AT LINE 428 IN MAIN.asm
ARRAYEND3:          044F DEFINED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
HASH:               046E DEFINED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
ARRAYINDEX:         046E DEFINED AT LINE 460 IN MAIN.asm
ARRAYINDEX0:        0476 DEFINED AT LINE 466 IN MAIN.asm
ARRAYINDEX1:        0477 DEFINED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
ARRAYINDEX2:        0483 DEFINED AT LINE 477 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
COLON:              0486 DEFINED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
ARGLIST:            0486 DEFINED AT LINE 486 IN MAIN.asm
ARGLIST1:           0490 DEFINED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST1A:          0498 DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
ARGLIST2:           04A0 DEFINED AT LINE 504 IN MAIN.asm
ARGLIST3:           04A8 DEFINED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
ARGLIST4:           04AB DEFINED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
ARGLIST5:           04B1 DEFINED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
ASSIGN:             04BC DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
ASSIGN0:            04BE DEFINED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 285 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
ASSIGNX:            04BF DEFINED AT LINE 537 IN MAIN.asm
ASSIGN1:            04CB DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 542 IN MAIN.asm
ABSOLUTE:           04CD DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
ADDROF:             04DA DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
ADDROF1:            04EE DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
ADDROF2:            04F9 DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
LBRACE:             04FB DEFINED AT LINE 590 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCKSTART:         04FB DEFINED AT LINE 591 IN MAIN.asm
BLOCKSTART1:        04FF DEFINED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
BLOCKSTART2:        052B DEFINED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
BLOCKSTART3:        052E DEFINED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
BLOCKSTART4:        0536 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
BLOCKSTART5:        0539 DEFINED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
BLOCKSTART6:        0561 DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
RBRACE:             0564 DEFINED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           0564 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
BLOCKEND1:          0596 DEFINED AT LINE 680 IN MAIN.asm
                    > USED AT LINE 673 IN MAIN.asm
BLOCKEND2:          05A2 DEFINED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
BLOCKEND3:          05B4 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
BREAK:              05C0 DEFINED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
BREAK1:             05C7 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
TICK:               05DA DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               05DA DEFINED AT LINE 728 IN MAIN.asm
CHAR1:              05DD DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
CHAR2:              05E9 DEFINED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
CHAR3:              05EC DEFINED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
SLASH:              05EF DEFINED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
COMMAND:            05EF DEFINED AT LINE 747 IN MAIN.asm
COMMAND_A:          062E DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
COMMAND_B:          063A DEFINED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
COMMAND_F:          0646 DEFINED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
COMMAND_I:          0652 DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
COMMAND_L:          065E DEFINED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
COMMAND_M:          0667 DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
COMMAND_P:          0670 DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
COMMAND_R:          067F DEFINED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
COMMAND_V:          0688 DEFINED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
CHARS:              069D DEFINED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
CHARS1:             06A0 DEFINED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
NUMBERS:            06A5 DEFINED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
COMMENT:            06AB DEFINED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
SEMICOLON:          06B4 DEFINED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
CREATEFUNC:         06B4 DEFINED AT LINE 893 IN MAIN.asm
CREATEFUNC0:        06CF DEFINED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
CREATEFUNC1:        06E7 DEFINED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
CREATEFUNC2:        06FA DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
CREATEFUNC2A:       0719 DEFINED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
CREATEFUNC3:        0728 DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
CREATEFUNC4:        0733 DEFINED AT LINE 986 IN MAIN.asm
CREATEFUNC5:        0734 DEFINED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
COMMA:              0750 DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
DISCARD:            0750 DEFINED AT LINE 1012 IN MAIN.asm
DISCARD1:           075D DEFINED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 1019 IN MAIN.asm
DIV:                075F DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
DECIMAL:            0770 DEFINED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
DECIMAL1:           0773 DEFINED AT LINE 1037 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
HEXADECIMAL:        0778 DEFINED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
DOT:                077E DEFINED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
BUFFERARRAY:        0790 DEFINED AT LINE 32
                    > USED AT LINE 1047 IN MAIN.asm
BUFFERARRAYM_1572S1057: 079E DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       07D9 DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
BUFFERDEC:          07E0 DEFINED AT LINE 1069 IN MAIN.asm
BUFFERDEC0:         07FA DEFINED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
BUFFERDEC1:         080A DEFINED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
BUFFERDEC2:         082A DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
BUFFERDEC3:         082C DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
BUFFERDEC4:         083C DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
BUFFERDEC5:         083D DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
BUFFERHEX:          0846 DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
BUFFERHEX1:         0867 DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1151 IN MAIN.asm
BUFFERHEX2:         0870 DEFINED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
BUFFERSTRING:       087E DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1051 IN MAIN.asm
BUFFERSTRING0:      0885 DEFINED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
BUFFERSTRING1:      088B DEFINED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
BUFFERCHAR:         0898 DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
BUFFERXCHARS:       089D DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
BUFFERXCHARS0:      089E DEFINED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 1201 IN MAIN.asm
BUFFERXCHARS1:      08A7 DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
BUFFERXCHARS2:      08AF DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
DIVIDE:             08B9 DEFINED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1029 IN MAIN.asm
DIVIDE1:            08BE DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
DIVIDE2:            08CB DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
DIVIDE3:            08CC DEFINED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
EQUALS:             08D2 DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
NOTEQUALS:          08DA DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
LESSTHANEQ:         08E3 DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 264 IN MAIN.asm
LESSTHAN:           08E8 DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
LESSTHAN1:          08ED DEFINED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
TRUE1:              08F0 DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
NULL1:              08F6 DEFINED AT LINE 1284 IN MAIN.asm
FALSE1:             08F6 DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
ERROR1:             08FC DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
FOREACH:            0903 DEFINED AT LINE 32
                    > USED AT LINE 811 IN MAIN.asm
FOREACHM_1794S1297: 090F DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0971 DEFINED AT LINE 32
                    > USED AT LINE 813 IN MAIN.asm
FUNCSRCM_1821S1326: 097D DEFINED AT LINE 39
                    > USED AT LINE 35
CARET:              09AC DEFINED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
GO:                 09AC DEFINED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                09AD DEFINED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1520 IN MAIN.asm
GO2:                09B3 DEFINED AT LINE 1348 IN MAIN.asm
                    > USED AT LINE 1346 IN MAIN.asm
GOBLOCK:            09BE DEFINED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
GOBLOCK2:           09E3 DEFINED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 1454 IN MAIN.asm
GOFUNC:             09F1 DEFINED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
GOFUNC1:            0A0A DEFINED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1412 IN MAIN.asm
GOFUNC2:            0A10 DEFINED AT LINE 1409 IN MAIN.asm
                    > USED AT LINE 1401 IN MAIN.asm
GOFUNC3:            0A1B DEFINED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 1391 IN MAIN.asm
GOFUNC4:            0A33 DEFINED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
GOFUNC5:            0A36 DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
GOFUNC6:            0A39 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
GOFUNC7:            0A3C DEFINED AT LINE 1442 IN MAIN.asm
GOFUNC8:            0A40 DEFINED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1431 IN MAIN.asm
DOLLAR:             0A4B DEFINED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
HEXNUM:             0A4B DEFINED AT LINE 1457 IN MAIN.asm
HEXNUM1:            0A4E DEFINED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
HEXNUM2:            0A56 DEFINED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
UPCASE:             0A68 DEFINED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
LOWCASE:            0A6D DEFINED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
IDENT1:             0A72 DEFINED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
QUESTION:           0A7F DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IF:                 0A7F DEFINED AT LINE 1500 IN MAIN.asm
IFTE:               0A8B DEFINED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
IFTE1:              0A8C DEFINED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
INPUT:              0A98 DEFINED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
KEY:                0AA3 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
LITERAL:            0AAC DEFINED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
OUTPUT:             0AB5 DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
MAP:                0ABE DEFINED AT LINE 32
                    > USED AT LINE 836 IN MAIN.asm
MAPM_2053S1569:     0ACA DEFINED AT LINE 39
                    > USED AT LINE 35
STAR:               0B05 DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
MUL:                0B05 DEFINED AT LINE 1584 IN MAIN.asm
MUL2:               0B07 DEFINED AT LINE 1587 IN MAIN.asm
MUL3:               0B0F DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
NUM:                0B21 DEFINED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
NUM0:               0B2A DEFINED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
NUM1:               0B2B DEFINED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
NUM2:               0B43 DEFINED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
NUM3:               0B4E DEFINED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
RPAREN:             0B51 DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
SHIFTLEFT:          0B59 DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
SHIFTLEFT1:         0B61 DEFINED AT LINE 1657 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
SHIFTLEFT2:         0B62 DEFINED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
SHIFTRIGHT:         0B69 DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
SHIFTRIGHT1:        0B71 DEFINED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
SHIFTRIGHT2:        0B75 DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 1673 IN MAIN.asm
DQUOTE:             0B7C DEFINED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
STRING:             0B7C DEFINED AT LINE 1687 IN MAIN.asm
STRING1:            0B85 DEFINED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
STRING2:            0B88 DEFINED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
STRING3:            0B91 DEFINED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
MINUS:              0BA4 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
SUB:                0BB0 DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
SUB1:               0BBA DEFINED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
PRINTBUFFER:        0BC3 DEFINED AT LINE 32
                    > USED AT LINE 843 IN MAIN.asm
PRINTBUFFERM_2223S1748: 0BCF DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0BE9 DEFINED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
PRINTCHARS1:        0BF0 DEFINED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
PRINTCHARS2:        0BF6 DEFINED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1872 IN MAIN.asm
PRINTSTACK:         0BFB DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
REMAIN:             0BFD DEFINED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
SIZE:               0C03 DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
CONSTBUFSTART:      0C0B DEFINED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
CONSTHEAPSTART:     0C10 DEFINED AT LINE 1820 IN MAIN.asm
CONSTTIBSTART:      0C15 DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
VARBUFPTR:          0C1A DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
VARHEAPPTR:         0C23 DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
VARTIBPTR:          0C2C DEFINED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
VARIABLE:           0C35 DEFINED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
CONSTANT:           0C38 DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
FILTER:             0C3B DEFINED AT LINE 1854 IN MAIN.asm
FLUSHBUFFER:        0C3D DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
JUMPTABLE:          0C54 DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
JUMPTABLE0:         0C56 DEFINED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
JUMPTABLE1:         0C63 DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
JUMPTABLE2:         0C64 DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
PRTSTR0:            0C6A DEFINED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
PRTSTR:             0C6E DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
NESTING:            0C73 DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
NESTING0:           0C7D DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
NESTING1A:          0C84 DEFINED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
NESTING1:           0C87 DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
NESTING2:           0C96 DEFINED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
NESTING3:           0C98 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
NESTING4:           0CA3 DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
PROMPT:             0CA5 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
CRLF:               0CAE DEFINED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
PRINTSTR:           0CB5 DEFINED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 39
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 163
TITLESTR:           0CBC DEFINED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
INIT:               0CD0 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
INIT1:              0CD8 DEFINED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
WARMINIT:           0CE0 DEFINED AT LINE 1996 IN MAIN.asm
COLDBOOT0:          0CF3 DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
COLDINIT:           0CFD DEFINED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0D0E DEFINED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
COLDSTART:          0D1B DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
START:              0D24 DEFINED AT LINE 2031 IN MAIN.asm
START1:             0D2A DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
INTERPRET:          0D30 DEFINED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2197 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
INTERPRET2:         0D3F DEFINED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2184 IN MAIN.asm
                    > USED AT LINE 2188 IN MAIN.asm
INTERPRET3:         0D47 DEFINED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
INTERPRET4:         0D52 DEFINED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
INTERPRET5:         0D57 DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
INTERPRET5A:        0D7A DEFINED AT LINE 2108 IN MAIN.asm
INTERPRET6:         0D7C DEFINED AT LINE 2113 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
INTERPRET7:         0D8A DEFINED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
INTERPRET8:         0D9D DEFINED AT LINE 2138 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
NEXT:               0DB8 DEFINED AT LINE 2151 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
NEXT1:              0DC9 DEFINED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
EXIT:               0DD0 DEFINED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
RUN:                0DD4 DEFINED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0DD8 DEFINED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
BACKSPACE_:         0DEB DEFINED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
EDIT_:              0DFB DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
REEDIT_:            0E13 DEFINED AT LINE 2196 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
PRINTSTACK_:        0E16 DEFINED AT LINE 2199 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
F1:                 0E20 DEFINED AT LINE 32
F1M_2765S12:        0E2C DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0E5A DEFINED AT LINE 32
F2M_2776S24:        0E68 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         0F00 DEFINED AT LINE 34
                    > USED AT LINE 8
EXPECTM_2787S37:    0F96 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2792S45:    1017 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2793S46:    108E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2794S47:    1103 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2795S48:    1178 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2796S49:    11ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2797S50:    1262 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2798S51:    12D9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2799S52:    1352 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2800S53:    13C9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2801S54:    1440 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2802S55:    14B9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2803S56:    1534 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2804S57:    15AD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2805S58:    1626 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2806S59:    16A5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2807S60:    1724 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2808S61:    17A1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2809S62:    1822 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2810S63:    18A7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2811S64:    192A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2812S65:    19A7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2813S66:    1A2C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2814S67:    1AAD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2815S68:    1B2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2816S69:    1BA7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2817S70:    1C2C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2818S71:    1CA9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2819S72:    1D26 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2820S73:    1DA5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2821S74:    1E34 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2822S75:    1EB1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2823S76:    1F36 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2824S77:    1FB3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2825S78:    2038 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2826S79:    20B5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2827S80:    2134 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2828S81:    21B3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2829S82:    2230 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2830S83:    22AD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2831S84:    232A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2832S85:    23A7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2833S86:    2424 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2834S87:    24A1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2835S88:    251E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2836S89:    259B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2837S90:    261A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2838S91:    2699 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2839S92:    2718 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2840S93:    2799 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2841S94:    281A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2842S95:    2895 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2843S96:    2910 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2844S97:    2991 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2845S98:    2A18 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2846S99:    2A9F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2847S100:   2B2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2848S101:   2BBF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2849S102:   2C54 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2850S103:   2CCF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2851S104:   2D4C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2852S105:   2DCB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2853S106:   2E4C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2854S107:   2ECB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2855S108:   2F4A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2856S109:   2FCB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2857S110:   3052 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2858S111:   30DD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2859S112:   3164 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2860S113:   31F5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2861S114:   3288 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2862S115:   3321 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2863S116:   33BE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2864S117:   344D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2865S118:   34E2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2866S119:   3579 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2867S120:   3612 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2868S121:   36A9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2869S122:   374E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2870S123:   37E1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2871S124:   3882 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2872S125:   3925 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S126:   39CA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S127:   3A79 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S128:   3B28 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S129:   3BB5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S130:   3C48 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S131:   3CD5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S132:   3D6E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S133:   3E07 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S134:   3EB2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S135:   3F65 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S136:   4018 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S137:   40B9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S138:   4160 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S139:   421D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S140:   42E8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S141:   4383 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S142:   441E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S143:   44A7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S144:   4530 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S145:   45B9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2893S146:   4642 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2894S147:   46C3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2895S148:   4744 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2896S149:   47C5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2897S150:   4846 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2898S151:   48D1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2899S152:   4960 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2900S153:   49ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2901S154:   4A7A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2902S155:   4B17 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2903S156:   4BBA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2904S157:   4C75 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2905S158:   4D30 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2906S159:   4E05 DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            4E10 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5000 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1359 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5000 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2143 IN MAIN.asm
BUF:                5100 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
VARS:               5200 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           52D0 DEFINED AT LINE 18 IN ram.asm
RST08:              52D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              52D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              52D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              52D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              52D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              52DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               52DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             52DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             52E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            52E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            52E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            52E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2011 IN MAIN.asm
VDATAWIDTH:         52E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
VNUMBASE:           52E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
VTIBPTR:            52EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
VBUFPTR:            52EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
VNEXT:              52EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2023 IN MAIN.asm
VHEAPPTR:           52F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 415 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
VPOINTER:           52F2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 381 IN MAIN.asm
                    > USED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
VREMAIN:            52F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
VSAVEDIP:           52F6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
VSAVEDSP:           52F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 2146 IN MAIN.asm
VSAVEDNEXT:         52FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2147 IN MAIN.asm
VSAVEDBP:           52FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
VCHECKSUM:          52FE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             5300 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1392 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
VTEMP2:             5302 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 704 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 1393 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
VLASTDEF:           5304 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           5306 DEFINED AT LINE 59 IN ram.asm
TBPTR:              5308 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           530A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
HEAP:               531E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
