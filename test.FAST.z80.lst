0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h`\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4E               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4E               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4E               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4E               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4E               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4E               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4E               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4E               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4E               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4E               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4E               LD   (RST08),HL   
0094   22 D2 4E               LD   (RST10),HL   
0097   22 D4 4E               LD   (RST18),HL   
009A   22 D6 4E               LD   (RST20),HL   
009D   22 D8 4E               LD   (RST28),HL   
00A0   22 DA 4E               LD   (RST30),HL   
00A3   22 DE 4E               LD   (INTVEC),HL   
00A6   22 E0 4E               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4E               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4E               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 10               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   04                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   06                     DB   lsb(dollar_)   ; $     1
0184   09                     DB   lsb(percent_)   ; %     1
0185   7E                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   0F                     DB   lsb(lparen_)   ; (     1
0188   76                     DB   lsb(rparen_)   ; )     1
0189   A6                     DB   lsb(star_)   ; *     1
018A   C2                     DB   lsb(plus_)   ; +     1
018B   04                     DB   lsb(comma_)   ; ,     2
018C   88                     DB   lsb(minus_)   ; -     1
018D   12                     DB   lsb(dot_)   ; .     2
018E   15                     DB   lsb(slash_)   ; /	    1
018F   18                     DB   lsb(num_)   ; 0     1
0190   18                     DB   lsb(num_)   ; 1
0191   18                     DB   lsb(num_)   ; 2
0192   18                     DB   lsb(num_)   ; 3
0193   18                     DB   lsb(num_)   ; 4
0194   18                     DB   lsb(num_)   ; 5
0195   18                     DB   lsb(num_)   ; 6
0196   18                     DB   lsb(num_)   ; 7
0197   18                     DB   lsb(num_)   ; 8
0198   18                     DB   lsb(num_)   ; 9
0199   DE                     DB   lsb(colon_)   ; :     2
019A   1B                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   1E                     DB   lsb(question_)   ; ?     1
019F   F5                     DB   lsb(at_)   ; @     2
01A0   F4                     DB   lsb(upcase_)   ; A     1
01A1   F4                     DB   lsb(upcase_)   ; B
01A2   F4                     DB   lsb(upcase_)   ; C
01A3   F4                     DB   lsb(upcase_)   ; D
01A4   F4                     DB   lsb(upcase_)   ; E
01A5   F4                     DB   lsb(upcase_)   ; F
01A6   F4                     DB   lsb(upcase_)   ; G
01A7   F4                     DB   lsb(upcase_)   ; h
01A8   F4                     DB   lsb(upcase_)   ; I
01A9   F4                     DB   lsb(upcase_)   ; J
01AA   F4                     DB   lsb(upcase_)   ; K
01AB   F4                     DB   lsb(upcase_)   ; L
01AC   F4                     DB   lsb(upcase_)   ; M
01AD   F4                     DB   lsb(upcase_)   ; N
01AE   F4                     DB   lsb(upcase_)   ; O
01AF   F4                     DB   lsb(upcase_)   ; p
01B0   F4                     DB   lsb(upcase_)   ; Q
01B1   F4                     DB   lsb(upcase_)   ; R
01B2   F4                     DB   lsb(upcase_)   ; S
01B3   F4                     DB   lsb(upcase_)   ; T
01B4   F4                     DB   lsb(upcase_)   ; U
01B5   F4                     DB   lsb(upcase_)   ; V
01B6   F4                     DB   lsb(upcase_)   ; W
01B7   F4                     DB   lsb(upcase_)   ; X
01B8   F4                     DB   lsb(upcase_)   ; Y
01B9   F4                     DB   lsb(upcase_)   ; Z
01BA   21                     DB   lsb(lbrack_)   ; [     2
01BB   3D                     DB   lsb(backslash_)   ; \     2
01BC   5E                     DB   lsb(rbrack_)   ; ]     2
01BD   AE                     DB   lsb(caret_)   ; ^     1
01BE   0D                     DB   lsb(underscore_)   ; _     2
01BF   C4                     DB   lsb(grave_)   ; `     2   	
01C0   0F                     DB   lsb(lowcase_)   ; a     1
01C1   0F                     DB   lsb(lowcase_)   ; b
01C2   0F                     DB   lsb(lowcase_)   ; c
01C3   0F                     DB   lsb(lowcase_)   ; d
01C4   0F                     DB   lsb(lowcase_)   ; e
01C5   0F                     DB   lsb(lowcase_)   ; f
01C6   0F                     DB   lsb(lowcase_)   ; g
01C7   0F                     DB   lsb(lowcase_)   ; h
01C8   0F                     DB   lsb(lowcase_)   ; i
01C9   0F                     DB   lsb(lowcase_)   ; j
01CA   0F                     DB   lsb(lowcase_)   ; k
01CB   0F                     DB   lsb(lowcase_)   ; l
01CC   0F                     DB   lsb(lowcase_)   ; m
01CD   0F                     DB   lsb(lowcase_)   ; n
01CE   0F                     DB   lsb(lowcase_)   ; o
01CF   0F                     DB   lsb(lowcase_)   ; p
01D0   0F                     DB   lsb(lowcase_)   ; q
01D1   0F                     DB   lsb(lowcase_)   ; r
01D2   0F                     DB   lsb(lowcase_)   ; s
01D3   0F                     DB   lsb(lowcase_)   ; t
01D4   0F                     DB   lsb(lowcase_)   ; u
01D5   0F                     DB   lsb(lowcase_)   ; v
01D6   0F                     DB   lsb(lowcase_)   ; w
01D7   0F                     DB   lsb(lowcase_)   ; x
01D8   0F                     DB   lsb(lowcase_)   ; y
01D9   0F                     DB   lsb(lowcase_)   ; z
01DA   DA                     DB   lsb(lbrace_)   ; {     1
01DB   DF                     DB   lsb(pipe_)   ; |     1
01DC   EA                     DB   lsb(rbrace_)   ; }     1
01DD   ED                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4C                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 4D                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   79 0F                  DW   next   ; nNext
01E8   22 4F                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                DQUOTE_:      
0204                COMMA_:      
0204   DD E9                  JP   (ix)   
0206                DOLLAR_:      
0206   C3 8E 0A               JP   dollar   
0209                PERCENT_:      
0209   C3 DE 0A               JP   percent   
020C                QUOTE_:      
020C   C3 C4 0A               JP   quote   
020F                LPAREN_:      
020F   C3 DA 03               JP   lbrace   
0212                DOT_:        
0212   C3 00 04               JP   dot   
0215                SLASH_:      
0215   C3 00 05               JP   slash   
0218                NUM_:        
0218   C3 13 0B               JP   num   
021B                SEMICOLON_:      
021B   C3 F9 02               JP   semicolon   
021E                QUESTION_:      
021E   C3 AB 0A               JP   question   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 55 0C               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 3D 0C               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 4E 0C               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA 85 0C               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA 75 0C               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA 5C 0C               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 61 0C               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                HASH:        
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A E6 4E               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   22 F8 4E               LD   (vPointer),hl   ; store address in setter
026B   16 00                  LD   d,0   
026D   5E                     LD   e,(hl)   
026E   B7                     OR   a   ; check data width again
026F   28 02                  JR   z,arrayIndex2   
0271   23                     INC   hl   
0272   56                     LD   d,(hl)   
0273                ARRAYINDEX2:      
0273   D5                     PUSH   de   
0274   DD E9                  JP   (ix)   
0276                             ;                               4
0276                RPAREN_:      
0276                RPAREN:      
0276   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0279   FD 46 09               LD   b,(iy+9)   
027C   DD E9                  JP   (ix)   
027E                             ; & and                          14
027E                             ; a b -- c
027E                AMPER_:      
027E                AMPER:       
027E                AND:         
027E   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
027F   E1                     POP   hl   
0280   7B                     LD   a,e   
0281   A5                     AND   l   
0282   6F                     LD   l,a   
0283   7A                     LD   a,d   
0284   A4                     AND   h   
0285   67                     LD   h,a   
0286   18 49                  JR   add3   
0288                             ; - sub                          23
0288                             ; a b -- c
0288                MINUS_:      
0288                MINUS:       
0288   03                     INC   bc   ; check if sign of a number
0289   0A                     LD   a,(bc)   
028A   0B                     DEC   bc   
028B   FE 30                  CP   "0"   
028D   38 05                  JR   c,sub   
028F   FE 3A                  CP   "9"+1   
0291   DA 13 0B               JP   c,num   
0294                SUB:         ; Subtract the value 2nd on stack from top of stack
0294   03                     INC   bc   
0295   FE 2D                  CP   "-"   
0297   20 05                  JR   nz,sub1   
0299   E1                     POP   hl   
029A   2B                     DEC   hl   
029B   C3 3F 0C               JP   assign0   
029E                SUB1:        
029E   0B                     DEC   bc   
029F   D1                     POP   de   
02A0   E1                     POP   hl   
02A1   B7                     OR   a   
02A2   ED 52                  SBC   hl,de   
02A4   18 2B                  JR   add3   
02A6                STAR_:       ; 21
02A6                STAR:        
02A6                MUL:         
02A6   D1                     POP   de   ; get first value
02A7   E1                     POP   hl   
02A8                MUL2:        
02A8   C5                     PUSH   bc   ; Preserve the IP
02A9   44 4D                  LD   bc,hl   ; bc = 2nd value
02AB   21 00 00               LD   hl,0   
02AE   3E 10                  LD   a,16   
02B0                MUL3:        
02B0   29                     ADD   hl,hl   
02B1   CB 13                  RL   e   
02B3   CB 12                  RL   d   
02B5   30 04                  JR   nc,$+6   
02B7   09                     ADD   hl,bc   
02B8   30 01                  JR   nc,$+3   
02BA   13                     INC   de   
02BB   3D                     DEC   a   
02BC   20 F2                  JR   nz,mul3   
02BE   C1                     POP   bc   ; Restore the IP
02BF   C3 D1 02               JP   add3   
02C2                             ; + add                         25
02C2                             ; a b -- c
02C2                PLUS_:       
02C2                PLUS:        
02C2                ADD:         
02C2   03                     INC   bc   
02C3   0A                     LD   a,(bc)   
02C4   FE 2B                  CP   "+"   ; ++ increment variable
02C6   20 05                  JR   nz,add1   
02C8   E1                     POP   hl   
02C9   23                     INC   hl   
02CA   C3 3F 0C               JP   assign0   
02CD                ADD1:        
02CD   0B                     DEC   bc   
02CE   D1                     POP   de   ; second term
02CF   E1                     POP   hl   ; first term
02D0   19                     ADD   hl,de   
02D1                ADD3:        
02D1   03                     INC   bc   
02D2   0A                     LD   a,(bc)   
02D3   FE 3D                  CP   "="   
02D5   28 04                  JR   z,add4   
02D7   0B                     DEC   bc   
02D8   E5                     PUSH   hl   
02D9   DD E9                  JP   (ix)   
02DB                ADD4:        
02DB   C3 3F 0C               JP   assign0   
02DE                COLON_:      
02DE                COLON:       
02DE   03                     INC   bc   ; arg_list must ve immediately followed by {
02DF   0A                     LD   a,(bc)   
02E0   FE 3D                  CP   "="   ; := definition
02E2   28 07                  JR   z,defineStart   
02E4   0B                     DEC   bc   
02E5   21 01 00               LD   hl,1   
02E8   C3 9D 0F               JP   error   
02EB                DEFINESTART:      
02EB   E1                     POP   hl   ; discard variable value
02EC   2A F8 4E               LD   hl,(vPointer)   ; vDefine = vPointer
02EF   22 F4 4E               LD   (vDefine),hl   
02F2   DD E9                  JP   (ix)   
02F4                             ;                               18
02F4                UPCASE_:      
02F4                UPCASE:      
02F4   0A                     LD   a,(bc)   ; a = identifier char
02F5   D6 41                  SUB   "A"   ; "A" = 0
02F7   18 1B                  JR   ident1   
02F9                             ; ;
02F9                SEMICOLON:      
02F9                DEFINEEND:      
02F9   2A F4 4E               LD   hl,(vDefine)   ; hl = define*
02FC   7D                     LD   a,l   
02FD   B4                     OR   h   
02FE   28 0B                  JR   z,defineEnd1   
0300   11 00 00               LD   de,NUL   ; set vDefine=NUL
0303   ED 53 F4 4E            LD   (vDefine),de   
0307   D1                     POP   de   ; de = value
0308   C3 43 0C               JP   assign1   
030B                DEFINEEND1:      
030B   DD E9                  JP   (ix)   
030D                             ;********************** PAGE 2 END *********************************************
030D                             ; .align $100
030D                             ;********************** PAGE 3 BEGIN *********************************************
030D                UNDERSCORE_:      
030D   DD E9                  JP   (ix)   
030F                LOWCASE_:      
030F                LOWCASE:      
030F   0A                     LD   a,(bc)   
0310   D6 61                  SUB   "a"   
0312   C6 1A                  ADD   a,26   
0314                IDENT1:      
0314   87                     ADD   a,a   ; l = a * 2
0315   6F                     LD   l,a   
0316   26 4E                  LD   h,msb(vars)   
0318   22 F8 4E               LD   (vPointer),hl   ; store address in setter
031B   5E                     LD   e,(hl)   
031C   23                     INC   hl   
031D   56                     LD   d,(hl)   
031E   D5                     PUSH   de   
031F   DD E9                  JP   (ix)   
0321                             ; [                             14
0321                LBRACK_:      
0321                LBRACK:      
0321                ARRAYSTART:      
0321   11 00 00               LD   de,0   ; create stack frame
0324   D5                     PUSH   de   ; push null for IP
0325   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0328   FD 56 05               LD   d,(iy+5)   ; 
032B   D5                     PUSH   de   ; 
032C   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
032F   FD 56 03               LD   d,(iy+3)   ; 
0332   D5                     PUSH   de   ; 
0333   FD E5                  PUSH   iy   ; push BP
0335   FD 21 00 00            LD   iy,0   ; BP = SP
0339   FD 39                  ADD   iy,sp   
033B   DD E9                  JP   (ix)   
033D                             ; \                             19
033D                BACKSLASH_:      
033D                BACKSLASH:      
033D                LAMBDA:      
033D   DD E5                  PUSH   ix   
033F   CD D7 0C               CALL   parseArgs   
0342                LAMBDA1:      
0342   03                     INC   bc   ; arg_list must ve immediately followed by {
0343   0A                     LD   a,(bc)   
0344   FE 21                  CP   " "+1   ; skip white space
0346   38 FA                  JR   c,lambda1   
0348   FE 7B                  CP   "{"   
034A   28 06                  JR   z,lambda2   
034C   21 02 00               LD   hl,2   ; error 2: parse error
034F   C3 9D 0F               JP   error   
0352                LAMBDA2:      
0352   CD 0D 0D               CALL   parseBlock   
0355   CD 77 0D               CALL   createFunc   
0358   E1                     POP   hl   
0359   DD E1                  POP   ix   
035B   E5                     PUSH   hl   
035C   DD E9                  JP   (ix)   
035E                RBRACK_:      
035E                RBRACK:      
035E                ARRAYEND:      ; 53
035E   FD 54                  LD   d,iyh   ; de = BP
0360   FD 5D                  LD   e,iyl   
0362   ED 43 04 4F            LD   (vTemp1),bc   ; save IP
0366   62 6B                  LD   hl,de   ; hl = de = BP
0368   B7                     OR   a   
0369   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
036B   CB 3C                  SRL   h   ; 
036D   CB 1D                  RR   l   
036F   44 4D                  LD   bc,hl   ; bc = count
0371   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = array[-4]
0374   71                     LD   (hl),c   ; write num items in length word
0375   23                     INC   hl   
0376   70                     LD   (hl),b   
0377   23                     INC   hl   ; hl = array[0], bc = count
0378                             ; de = BP, hl = array[0], bc = count
0378   18 15                  JR   arrayEnd3   
037A                ARRAYEND1:      
037A   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
037D   77                     LD   (hl),a   ; write lsb of array item
037E   23                     INC   hl   ; move to msb of array item
037F   3A E6 4E               LD   a,(vDataWidth)   ; vDataWidth=1?
0382   3D                     DEC   a   
0383   28 05                  JR   z,arrayEnd2   
0385   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0388   77                     LD   (hl),a   ; write msb of array item
0389   23                     INC   hl   ; move to next word in array
038A                ARRAYEND2:      
038A   FD 2B                  DEC   iy   ; move to next word on stack
038C   FD 2B                  DEC   iy   
038E   0B                     DEC   bc   ; dec items count
038F                ARRAYEND3:      
038F   79                     LD   a,c   ; if not zero loop
0390   B0                     OR   b   
0391   20 E7                  JR   nz,arrayEnd1   
0393   EB                     EX   de,hl   ; de = end of array, hl = BP
0394   F9                     LD   sp,hl   ; sp = BP
0395   E1                     POP   hl   ; de = end of array, hl = old BP
0396   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0397   FD 62                  LD   iyh,d   
0399   FD 6B                  LD   iyl,e   
039B   D1                     POP   de   ; pop arg_list (discard)
039C   D1                     POP   de   ; pop first_arg* (discard)
039D   D1                     POP   de   ; pop IP (discard)
039E   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = array[-2]
03A2   13                     INC   de   
03A3   13                     INC   de   
03A4   D5                     PUSH   de   ; return array[0]
03A5   22 F0 4E               LD   (vHeapPtr),hl   ; move heap* to end of array
03A8   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore IP
03AC   DD E9                  JP   (ix)   
03AE                CARET_:      
03AE                             ; execute a block of code which ends with } 116
03AE                             ; creates a root scope if BP == stack
03AE                             ; else uses outer scope
03AE                CARET:       
03AE                GO:          
03AE   D1                     POP   de   ; de = block*
03AF                GO1:         
03AF   7B                     LD   a,e   ; if block* == null, exit
03B0   B2                     OR   d   
03B1   20 02                  JR   nz,go2   
03B3   DD E9                  JP   (ix)   
03B5                GO2:         
03B5   1A                     LD   a,(de)   
03B6   FE 7B                  CP   "{"   
03B8   CA B0 0B               JP   z,goBlock   
03BB   FE 28                  CP   "("   
03BD   C2 E3 0B               JP   nz,goFunc   
03C0   D5                     PUSH   de   ; push de just before stack frame
03C1   CA B0 0B               JP   z,goBlock   
03C4                GRAVE_:      
03C4                GRAVE:       
03C4                PRINTLITERAL:      
03C4   03                     INC   bc   ; move to first char
03C5   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
03C9   18 03                  JR   printLiteral1   
03CB                PRINTLITERAL0:      
03CB   12                     LD   (de),a   ; a -> buffer*
03CC   13                     INC   de   ; string*++,
03CD   03                     INC   bc   
03CE                PRINTLITERAL1:      
03CE   0A                     LD   a,(bc)   ; a <- string*
03CF   FE 60                  CP   "`"   ; if ` exit loop
03D1   20 F8                  JR   nz,printLiteral0   
03D3   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*' in pointer
03D7   C3 B1 0C               JP   dotNext   
03DA                LBRACE_:      
03DA                LBRACE:      
03DA   CD 0D 0D               CALL   parseBlock   
03DD   DD E9                  JP   (ix)   
03DF                             ; | or                          11
03DF                             ; a b -- c
03DF                PIPE_:       
03DF                PIPE:        
03DF                OR:          
03DF   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03E0   E1                     POP   hl   
03E1   7B                     LD   a,e   
03E2   B5                     OR   l   
03E3   6F                     LD   l,a   
03E4   7A                     LD   a,d   
03E5   B4                     OR   h   
03E6   67                     LD   h,a   
03E7   C3 D1 02               JP   add3   
03EA                RBRACE_:      
03EA   C3 43 0B               JP   rbrace   
03ED                             ; ~ char                        8
03ED                TILDE_:      
03ED                TILDE:       
03ED                CHAR:        
03ED   03                     INC   bc   ; point to next char
03EE   0A                     LD   a,(bc)   
03EF   6F                     LD   l,a   
03F0   26 00                  LD   h,0   
03F2   E5                     PUSH   hl   
03F3   DD E9                  JP   (ix)   
03F5                AT_:         
03F5                AT:          
03F5                ADDR:        
03F5   ED 5B F8 4E            LD   de,(vPointer)   
03F9   21 F8 4E               LD   hl,vPointer   
03FC   C3 1B 07               JP   variable   
03FF                             ;********************** PAGE 3 END *********************************************
03FF                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 2F 0E               CALL   jumpTable   
0403   61                     DB   "a"   ; .a print array
0404   46 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   12 04                  DW   printChar   
0409   68                     DB   "h"   ; .h print hex without $ prefix
040A   A7 04                  DW   printHex0   
040C   73                     DB   "s"   ; .s print string
040D   21 04                  DW   printString   
040F   00                     DB   NUL   ; .  print number, fall through
0410   36 04                  DW   printNumber   
0412                             ; .c print char
0412                             ; char --
0412                PRINTCHAR:      
0412   E1                     POP   hl   ; a = char
0413   7D                     LD   a,l   
0414   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
0418   12                     LD   (de),a   
0419   13                     INC   de   
041A   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*'
041E   C3 B1 0C               JP   dotNext   
0421                             ; .s print string
0421                             ; string* --
0421                PRINTSTRING:      
0421   E1                     POP   hl   ; hl = string*
0422   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
0426   18 03                  JR   printString1   
0428                PRINTSTRING0:      
0428   12                     LD   (de),a   ; a -> buffer*
0429   13                     INC   de   ; string*++,
042A   23                     INC   hl   
042B                PRINTSTRING1:      
042B   7E                     LD   a,(hl)   ; a <- string*
042C   B7                     OR   a   ; if NUL exit loop
042D   20 F9                  JR   nz,printString0   
042F   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*' in pointer
0433   C3 B1 0C               JP   dotNext   
0436                             ; . print decimal
0436                             ; value --
0436                PRINTNUMBER:      
0436   3A E8 4E               LD   a,(vNumBase)   
0439   FE 10                  CP   16   
043B   CA AD 04               JP   z,printHex   ; else falls through
043E   C3 41 04               JP   printDec   
0441                             ; print decimal                 ; 70
0441                             ; value --
0441                PRINTDEC:      
0441   ED 5B EC 4E            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0445   D9                     EXX      
0446   E1                     POP   hl   ; hl = value
0447   3A E6 4E               LD   a,(vDataWidth)   
044A   3D                     DEC   a   
044B   20 02                  JR   nz,printDec1   
044D   26 00                  LD   h,0   
044F                PRINTDEC1:      
044F   CD 5E 04               CALL   printDec2   
0452   D9                     EXX      ; de = buffer*' bc = IP
0453   3E 20                  LD   a," "   ; append space to buffer
0455   12                     LD   (de),a   
0456   13                     INC   de   ; string*++,
0457   ED 53 EC 4E            LD   (vBufPtr),de   ; update buffer* with buffer*'
045B   C3 B1 0C               JP   dotNext   
045E                             ; hl = value
045E                             ; de' = buffer*
045E                             ; a, bc, de, hl destroyed
045E                PRINTDEC2:      
045E   CB 7C                  BIT   7,h   
0460   28 0C                  JR   z,printDec3   
0462   D9                     EXX      
0463   3E 2D                  LD   a,"-"   
0465   12                     LD   (de),a   
0466   13                     INC   de   
0467   D9                     EXX      
0468   AF                     XOR   a   
0469   95                     SUB   l   
046A   6F                     LD   l,a   
046B   9F                     SBC   a,a   
046C   94                     SUB   h   
046D   67                     LD   h,a   
046E                PRINTDEC3:      
046E   0E 00                  LD   c,0   ; leading zeros flag = false
0470   11 F0 D8               LD   de,-10000   
0473   CD 8E 04               CALL   printDec4   
0476   11 18 FC               LD   de,-1000   
0479   CD 8E 04               CALL   printDec4   
047C   11 9C FF               LD   de,-100   
047F   CD 8E 04               CALL   printDec4   
0482   1E F6                  LD   e,-10   
0484   CD 8E 04               CALL   printDec4   
0487   0C                     INC   c   ; flag = true for at least digit
0488   1E FF                  LD   e,-1   
048A   CD 8E 04               CALL   printDec4   
048D   C9                     RET      
048E                PRINTDEC4:      
048E   06 2F                  LD   b,"0"-1   
0490                PRINTDEC5:      
0490   04                     INC   b   
0491   19                     ADD   hl,de   
0492   38 FC                  JR   c,printDec5   
0494   ED 52                  SBC   hl,de   
0496   3E 30                  LD   a,"0"   
0498   B8                     CP   b   
0499   20 05                  JR   nz,printDec6   
049B   AF                     XOR   a   
049C   B1                     OR   c   
049D   C8                     RET   z   
049E   18 01                  JR   printDec7   
04A0                PRINTDEC6:      
04A0   0C                     INC   c   
04A1                PRINTDEC7:      
04A1   78                     LD   a,b   
04A2   D9                     EXX      
04A3   12                     LD   (de),a   
04A4   13                     INC   de   
04A5   D9                     EXX      
04A6   C9                     RET      
04A7                             ; buffer hex                    37
04A7                             ; value --
04A7                PRINTHEX0:      
04A7   ED 5B EC 4E            LD   de,(vBufPtr)   
04AB   18 08                  JR   printHex1   
04AD                PRINTHEX:      
04AD   ED 5B EC 4E            LD   de,(vBufPtr)   
04B1   3E 24                  LD   a,"$"   ; # prefix
04B3   12                     LD   (de),a   
04B4   13                     INC   de   ; string*++,
04B5                PRINTHEX1:      
04B5   E1                     POP   hl   ; hl = value
04B6   3A E6 4E               LD   a,(vDataWidth)   
04B9   3D                     DEC   a   
04BA   28 04                  JR   z,printHex2   
04BC   7C                     LD   a,h   
04BD   CD CF 04               CALL   printHex3   
04C0                PRINTHEX2:      
04C0   7D                     LD   a,l   
04C1   CD CF 04               CALL   printHex3   
04C4   3E 20                  LD   a," "   ; append space to buffer
04C6   12                     LD   (de),a   
04C7   13                     INC   de   ; string*++,
04C8   ED 53 EC 4E            LD   (vBufPtr),de   
04CC   C3 B1 0C               JP   dotNext   
04CF                PRINTHEX3:      
04CF   F5                     PUSH   af   
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   1F                     RRA      
04D4   CD D8 04               CALL   printHex4   
04D7   F1                     POP   af   
04D8                PRINTHEX4:      
04D8   E6 0F                  AND   0x0F   
04DA   C6 90                  ADD   a,0x90   
04DC   27                     DAA      
04DD   CE 40                  ADC   a,0x40   
04DF   27                     DAA      
04E0   12                     LD   (de),a   
04E1   13                     INC   de   ; string*++,
04E2   C9                     RET      
04E3                             ; unused
04E3                DQUOTE:      
04E3                UNDERSCORE:      
04E3                COMMA:       
04E3   DD E9                  JP   (ix)   
04E5                             ;********************** PAGE 4 END *********************************************
04E5                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 4C 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 19 0E               CALL   commandTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C5                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C5                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C5                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   C5                     DB   lsb(command_nop_)   
0515   71                     DB   lsb(key_)   
0516   C5                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C5                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A4                     DB   lsb(true_)   
051F   C5                     DB   lsb(command_nop_)   
0520   A7                     DB   lsb(command_v_)   
0521   BC                     DB   lsb(command_w_)   
0522   C2                     DB   lsb(xor_)   
0523   C5                     DB   lsb(command_nop_)   
0524   C5                     DB   lsb(command_nop_)   
0525   C8                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   DE 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   EC 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   C6 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   0D 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   16 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   6F 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   E4 0E                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   44 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   2A 06                  DW   break   
0541   00                     DB   NUL   
0542   6F 06                  DW   error1   
0544                COMMAND_D_:      
0544   62                     DB   "b"   ; /db decimal base
0545   67 06                  DW   decBase   
0547   00                     DB   NUL   
0548   67 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   6F 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   C1 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   0D 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   11 09                  DW   filter   
0556   31                     DB   "1"   
0557   C5 0F                  DW   f1   
0559   32                     DB   "2"   
055A   D1 0F                  DW   f2   
055C   33                     DB   "3"   
055D   DD 0F                  DW   f3   
055F   34                     DB   "4"   
0560   E9 0F                  DW   f4   
0562   00                     DB   NUL   
0563   6F 0C                  DW   false1   
0565                COMMAND_H_:      
0565   62                     DB   "b"   ; /hb hex base
0566   75 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   6F 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   7B 06                  DW   input   
056E   00                     DB   NUL   
056F   6F 06                  DW   error1   
0571                KEY_:        
0571   00                     DB   NUL   
0572   86 06                  DW   key   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   CF 08                  DW   map   
0577   00                     DB   NUL   
0578   6F 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   8F 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   6F 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   98 06                  DW   quit   
0583   00                     DB   NUL   
0584   6F 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   A2 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   A8 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   32 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   6F 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   AE 06                  DW   stringBegin   
0595   65                     DB   "e"   
0596   B6 06                  DW   stringEnd   
0598   69                     DB   "i"   
0599   47 08                  DW   stringIter   
059B   6C                     DB   "l"   
059C   E5 06                  DW   stringLength   
059E   73                     DB   "s"   
059F   F4 06                  DW   stringSize   
05A1   00                     DB   NUL   
05A2   6F 06                  DW   error1   
05A4                TRUE_:       
05A4   00                     DB   NUL   
05A5   69 0C                  DW   true1   
05A7                COMMAND_V_:      
05A7   62                     DB   "b"   
05A8   00 07                  DW   varBufPtr   
05AA   68                     DB   "h"   
05AB   09 07                  DW   varHeapPtr   
05AD   74                     DB   "t"   
05AE   12 07                  DW   varTIBPtr   
05B0   42                     DB   "B"   
05B1   61 06                  DW   constBufStart   
05B3   48                     DB   "H"   
05B4   55 06                  DW   constHeapStart   
05B6   54                     DB   "T"   
05B7   5B 06                  DW   constTIBStart   
05B9   00                     DB   NUL   
05BA   6F 06                  DW   error1   
05BC                COMMAND_W_:      
05BC   6D                     DB   "m"   ; /wm word mode
05BD   21 07                  DW   wordMode   
05BF   00                     DB   NUL   
05C0   6F 06                  DW   error1   
05C2                XOR_:        
05C2   00                     DB   NUL   
05C3   27 07                  DW   xor   
05C5                             ; 2
05C5                COMMAND_NOP_:      
05C5   00                     DB   NUL   
05C6   CB 05                  DW   nop   
05C8                             ; 3
05C8                COMMAND_DEFAULT_:      
05C8   00                     DB   NUL   
05C9   CD 05                  DW   div   
05CB                             ;********************** PAGE 5 END *********************************************
05CB                NOP:         
05CB   DD E9                  JP   (ix)   
05CD                             ;                               32
05CD                DIV:         
05CD   D1                     POP   de   
05CE   E1                     POP   hl   
05CF   C5                     PUSH   bc   ; preserve the IP
05D0   44 4D                  LD   bc,hl   
05D2   CD 98 0C               CALL   divide   
05D5   EB                     EX   de,hl   
05D6   ED 53 FA 4E            LD   (vRemain),de   
05DA   C1                     POP   bc   
05DB   C3 D1 02               JP   add3   
05DE                             ; /ab absolute
05DE                             ; num -- num
05DE                ABSOLUTE:      
05DE   E1                     POP   hl   
05DF   CB 7C                  BIT   7,h   
05E1   28 06                  JR   z,absolute1   
05E3   AF                     XOR   a   
05E4   95                     SUB   l   
05E5   6F                     LD   l,a   
05E6   9F                     SBC   a,a   
05E7   94                     SUB   h   
05E8   67                     LD   h,a   
05E9                ABSOLUTE1:      
05E9   E5                     PUSH   hl   
05EA   DD E9                  JP   (ix)   
05EC                             ; /ad addrOf                    24
05EC                             ; char -- addr
05EC                ADDROF:      
05EC   E1                     POP   hl   ; a = char
05ED   7D                     LD   a,l   
05EE   FE 7B                  CP   "z"+1   ; if a > z then exit
05F0   30 19                  JR   nc,addrOf2   
05F2   D6 41                  SUB   "A"   ; a - 65
05F4   38 15                  JR   c,addrOf2   ; if < A then exit
05F6   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
05F8   38 06                  JR   c,addrOf1   
05FA   D6 06                  SUB   "a"-("Z"+1)   
05FC   FE 1A                  CP   "Z"-"A"+1   
05FE   38 0B                  JR   c,addrOf2   ; if < a then exit
0600                ADDROF1:      
0600   87                     ADD   a,a   ; double a
0601   21 00 4E               LD   hl,VARS   ; hl = VARS + a
0604   85                     ADD   a,l   
0605   6F                     LD   l,a   
0606   3E 00                  LD   a,0   
0608   8C                     ADC   a,h   
0609   67                     LD   h,a   
060A   E5                     PUSH   hl   
060B                ADDROF2:      
060B   DD E9                  JP   (ix)   
060D                             ; /al length of an array, num elements
060D                             ; array* -- num
060D                ARRAYLENGTH:      
060D   E1                     POP   hl   
060E   2B                     DEC   hl   ; msb size
060F   56                     LD   d,(hl)   
0610   2B                     DEC   hl   ; lsb size
0611   5E                     LD   e,(hl)   
0612   EB                     EX   de,hl   
0613                ARRAYLENGTH1:      
0613   E5                     PUSH   hl   
0614   DD E9                  JP   (ix)   
0616                             ; /as size in bytes of an array, based on current data width
0616                             ; array* -- num
0616                ARRAYSIZE:      
0616                          ;*Macro unroll:  PERFORM arrayLength
0616   DD 21 1D 06            LD   ix,performM_1541S1062   
061A   C3 0D 06               JP   arrayLength   
061D                PERFORMM_1541S1062:      
061D   E1                     POP   hl   
061E   3A E6 4E               LD   a,(vDataWidth)   
0621   3D                     DEC   a   
0622   28 EF                  JR   z,arrayLength1   
0624   CB 3C                  SRL   h   
0626   CB 1D                  RR   l   
0628   18 E9                  JR   arrayLength1   
062A                             ; 13
062A                             ; /br break from loop
062A                             ; --
062A                BREAK:       
062A   E1                     POP   hl   ; hl = condition, break if false
062B   7D                     LD   a,l   
062C   B4                     OR   h   
062D   28 02                  JR   z,break1   
062F   DD E9                  JP   (ix)   
0631                BREAK1:      
0631   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0633   FD 54                  LD   d,iyh   
0635   21 08 00               LD   hl,8   
0638   19                     ADD   hl,de   
0639   23                     INC   hl   
063A   23                     INC   hl   
063B   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
063E   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0641   C3 43 0B               JP   blockEnd   
0644                             ; /b
0644                BYTEMODE:      
0644   21 01 00               LD   hl,1   
0647                BYTEMODE1:      
0647   22 E6 4E               LD   (vDataWidth),hl   
064A   DD E9                  JP   (ix)   
064C                             ; //
064C                COMMENT:      
064C   03                     INC   bc   ; point to next char
064D   0A                     LD   a,(bc)   
064E   FE 20                  CP   " "   ; terminate on any char less than SP
0650   30 FA                  JR   nc,comment   
0652   0B                     DEC   bc   
0653   DD E9                  JP   (ix)   
0655                CONSTHEAPSTART:      
0655   11 22 4F               LD   de,HEAP   
0658   C3 1E 07               JP   constant   
065B                CONSTTIBSTART:      
065B   11 00 4C               LD   de,TIB   
065E   C3 1E 07               JP   constant   
0661                CONSTBUFSTART:      
0661   11 00 4D               LD   de,BUFFER   
0664   C3 1E 07               JP   constant   
0667                DECBASE:      
0667   21 0A 00               LD   hl,10   
066A                DECBASE1:      
066A   22 E8 4E               LD   (vNumBase),hl   
066D   DD E9                  JP   (ix)   
066F                ERROR1:      
066F   21 01 00               LD   hl,1   ; error 1: unknown command
0672   C3 9D 0F               JP   error   
0675                HEXBASE:      
0675   21 10 00               LD   hl,16   
0678   C3 6A 06               JP   decBase1   
067B                             ; Z80 port input
067B                             ; port -- value
067B                INPUT:       
067B   E1                     POP   hl   
067C   59                     LD   e,c   ; save IP
067D   4D                     LD   c,l   
067E   ED 68                  IN   l,(c)   
0680   26 00                  LD   h,0   
0682   4B                     LD   c,e   ; restore IP
0683   E5                     PUSH   hl   
0684   DD E9                  JP   (ix)   
0686                             ; /k                              6
0686                KEY:         
0686   CD 81 00               CALL   getchar   
0689   26 00                  LD   h,0   
068B   6F                     LD   l,a   
068C   E5                     PUSH   hl   
068D   DD E9                  JP   (ix)   
068F                             ; /o Z80 port output
068F                             ; value port --
068F                OUTPUT:      
068F   E1                     POP   hl   
0690   59                     LD   e,c   ; save IP
0691   4D                     LD   c,l   
0692   E1                     POP   hl   
0693   ED 69                  OUT   (c),l   
0695   4B                     LD   c,e   ; restore IP
0696   DD E9                  JP   (ix)   
0698                             ; /qt
0698                             ; bool --
0698                QUIT:        
0698   E1                     POP   hl   ; hl = condition, exit if true
0699   7D                     LD   a,l   
069A   B4                     OR   h   
069B   20 02                  JR   nz,quit1   
069D   DD E9                  JP   (ix)   
069F                QUIT1:       
069F   C3 43 0B               JP   blockEnd   
06A2                RECUR:       
06A2   E1                     POP   hl   
06A3   22 F2 4E               LD   (vRecur),hl   
06A6   DD E9                  JP   (ix)   
06A8                REMAIN:      
06A8   2A FA 4E               LD   hl,(vRemain)   
06AB   E5                     PUSH   hl   
06AC   DD E9                  JP   (ix)   
06AE                STRINGBEGIN:      
06AE   21 FF FF               LD   hl,TRUE   ; string mode = true
06B1   22 F6 4E               LD   (vStrMode),hl   
06B4   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06B6                STRINGEND:      
06B6   21 00 00               LD   hl,FALSE   ; string mode = false
06B9   22 F6 4E               LD   (vStrMode),hl   
06BC   2A EC 4E               LD   hl,(vBufPtr)   ; append NUL to string
06BF   AF                     XOR   a   
06C0   77                     LD   (hl),a   
06C1   23                     INC   hl   ; hl = string_end*
06C2   ED 43 04 4F            LD   (vTemp1),bc   ; save IP
06C6   11 00 4D               LD   de,BUFFER   ; de = string*
06C9   B7                     OR   a   ; bc = size
06CA   ED 52                  SBC   hl,de   
06CC   44 4D                  LD   bc,hl   
06CE   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = hstring*
06D1   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06D2   D5                     PUSH   de   ; return hstring*
06D3   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06D5   ED 53 F0 4E            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06D9   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore IP
06DD                STRINGEND1:      
06DD   21 00 4D               LD   hl,BUFFER   ; reset vBufPtr
06E0   22 EC 4E               LD   (vBufPtr),hl   
06E3   DD E9                  JP   (ix)   
06E5                STRINGLENGTH:      
06E5   D1                     POP   de   
06E6   21 00 00               LD   hl,0   
06E9   18 02                  JR   stringLength2   
06EB                STRINGLENGTH1:      
06EB   13                     INC   de   
06EC   23                     INC   hl   
06ED                STRINGLENGTH2:      
06ED   1A                     LD   a,(de)   
06EE   B7                     OR   a   
06EF   20 FA                  JR   nz,stringLength1   
06F1                STRINGLENGTH3:      
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                STRINGSIZE:      
06F4                          ;*Macro unroll:  PERFORM stringLength
06F4   DD 21 FB 06            LD   ix,performM_1689S1236   
06F8   C3 E5 06               JP   stringLength   
06FB                PERFORMM_1689S1236:      
06FB   E1                     POP   hl   
06FC   23                     INC   hl   
06FD   C3 F1 06               JP   stringLength3   
0700                VARBUFPTR:      
0700   ED 5B EC 4E            LD   de,(vBufPtr)   
0704   21 EC 4E               LD   hl,vBufPtr   
0707   18 12                  JR   variable   
0709                VARHEAPPTR:      
0709   ED 5B F0 4E            LD   de,(vHeapPtr)   
070D   21 F0 4E               LD   hl,vHeapPtr   
0710   18 09                  JR   variable   
0712                VARTIBPTR:      
0712   ED 5B EA 4E            LD   de,(vTIBPtr)   
0716   21 EA 4E               LD   hl,vTIBPtr   
0719   18 00                  JR   variable   
071B                VARIABLE:      
071B   22 F8 4E               LD   (vPointer),hl   
071E                CONSTANT:      
071E   D5                     PUSH   de   
071F   DD E9                  JP   (ix)   
0721                             ; /wm
0721                WORDMODE:      
0721   21 02 00               LD   hl,2   
0724   C3 47 06               JP   byteMode1   
0727                             ; /x
0727                XOR:         
0727   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0728                XOR1:        
0728   E1                     POP   hl   
0729   7B                     LD   a,e   
072A   AD                     XOR   l   
072B   6F                     LD   l,a   
072C   7A                     LD   a,d   
072D   AC                     XOR   h   
072E   67                     LD   h,a   
072F   C3 D1 02               JP   add3   
0732                             ;*******************************************************************
0732                             ; Monty implementations
0732                             ;*******************************************************************
0732                             ; /rg rangeSrc
0732                             ; begin end step -- src
0732                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0732                RANGESRC:      ; range source: begin, end, step, local: L
0732   CD AE 03               CALL   go   
0735   00 00                  DW   NUL   
0737   41 07                  DW   rangeSrcM_1731S1286   
0739   3B 07                  DW   $+2   
073B   01                     DB   1   
073C   04 62 65 73 4C         .PSTR   "besL"   
0741                RANGESRCM_1731S1286:      
0741   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0742   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}??] %L= "   
0767   5C 6B 74 7B            DB   "\\kt{"   
076B   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0773   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0779   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0781   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0789   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0793   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
079B   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07A0   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07B4   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
07BC   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07C3   7D                     DB   "}"   
07C4   7D                     DB   "}"   
07C5   00                     DB   0   
07C6                             ; /ai arrayIter
07C6                             ; array* -- src
07C6                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07C6                ARRAYITER:      
07C6   CD AE 03               CALL   go   
07C9   00 00                  DW   NUL   
07CB   D3 07                  DW   arrayIterM_1750S1306   
07CD   CF 07                  DW   $+2   
07CF   01                     DB   1   
07D0   02 61 4C               .PSTR   "aL"   
07D3                ARRAYITERM_1750S1306:      
07D3   7B                     DB   "{"   
07D4   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
07E4   5C 6B 74 7B            DB   "\\kt{"   
07E8   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07F0   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
07F6   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07FE   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
0806   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
080D   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0815   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
081E   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
0835   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
083D   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0844   7D                     DB   "}"   
0845   7D                     DB   "}"   
0846   00                     DB   0   
0847                             ; /si stringIter
0847                             ; string* -- src
0847                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0847                STRINGITER:      
0847   CD AE 03               CALL   go   
084A   00 00                  DW   NUL   
084C   54 08                  DW   stringIterM_1769S1326   
084E   50 08                  DW   $+2   
0850   01                     DB   1   
0851   02 73 4C               .PSTR   "sL"   
0854                STRINGITERM_1769S1326:      
0854   7B                     DB   "{"   
0855   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
085F   5C 6B 74 7B            DB   "\\kt{"   
0863   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
086B   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0872   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
087A   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
0882   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
0889   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
089A   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08A2   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08A9   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08BD   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
08C5   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08CC   7D                     DB   "}"   
08CD   7D                     DB   "}"   
08CE   00                     DB   0   
08CF                             ; /mp map
08CF                             ; src func -- src1
08CF                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08CF                MAP:         ; map: source, function
08CF   CD AE 03               CALL   go   
08D2   00 00                  DW   NUL   
08D4   DC 08                  DW   mapM_1789S1348   
08D6   D8 08                  DW   $+2   
08D8   00                     DB   0   
08D9   02 73 66               .PSTR   "sf"   
08DC                MAPM_1789S1348:      
08DC   7B                     DB   "{"   
08DD   5C 6B 74 7B            DB   "\\kt{"   
08E1   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08E9   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
08ED   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
08F2   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
08FE   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0907   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
090E   7D                     DB   "}"   
090F   7D                     DB   "}"   
0910   00                     DB   0   
0911                             ; /ft filter
0911                             ; src pred -- src1
0911                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0911                FILTER:      ; filter: source, predicate, local: T
0911   CD AE 03               CALL   go   
0914   00 00                  DW   NUL   
0916   1F 09                  DW   filterM_1803S1363   
0918   1A 09                  DW   $+2   
091A   01                     DB   1   
091B   03 73 70 54            .PSTR   "spT"   
091F                FILTERM_1803S1363:      
091F   7B                     DB   "{"   
0920   5B 30 5D 25 54 3D      DB   "[0]%T="   
0926   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
092A   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
092E   5B                     DB   "["   
092F   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
093C   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0944   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0948   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
094D   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0963   3F 3F                  DB   "??"   
0965   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
096C   7D                     DB   "}"   
096D   7D                     DB   "}"   
096E   00                     DB   0   
096F                             ; /fd fold
096F                             ; reducer is a function like: \\da00bbLi4u
096F                             ; src init reducer -- src1
096F                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
096F                FOLD:        ; src, init, reducer
096F   CD AE 03               CALL   go   
0972   00 00                  DW   NUL   
0974   7E 09                  DW   foldM_1822S1383   
0976   78 09                  DW   $+2   
0978   01                     DB   1   
0979   04 73 69 72 41         .PSTR   "sirA"   
097E                FOLDM_1822S1383:      
097E   7B                     DB   "{"   ; reducer: \\da00bbLi4u
097F   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0986   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
098A   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
098E   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0993   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09AE   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
09B7   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09BE   7D                     DB   "}"   
09BF   7D                     DB   "}"   
09C0   00                     DB   0   
09C1                             ; /fe forEach
09C1                             ; src proc --
09C1                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09C1                FOREACH:      ; forEach: source, procedure, local: T
09C1   CD AE 03               CALL   go   
09C4   00 00                  DW   NUL   
09C6   CF 09                  DW   forEachM_1836S1398   
09C8   CA 09                  DW   $+2   
09CA   01                     DB   1   
09CB   03 73 70 54            .PSTR   "spT"   
09CF                FOREACHM_1836S1398:      
09CF   7B                     DB   "{"   
09D0   5B 30 5D 25 54 3D      DB   "[0]%T="   
09D6   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09DA   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09E2   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
09E7   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
09F9   3F 3F                  DB   "??"   ; ifte:
09FB   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A04   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A0B   7D                     DB   "}"   
0A0C   00                     DB   0   
0A0D                             ; ; /fs funcSrc
0A0D                             ; ; func -- src
0A0D                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A0D                FUNCSRC:      ; :f func or block
0A0D   CD AE 03               CALL   go   
0A10   00 00                  DW   NUL   
0A12   19 0A                  DW   funcSrcM_1850S1413   
0A14   16 0A                  DW   $+2   
0A16   00                     DB   0   
0A17   01 66                  .PSTR   "f"   
0A19                FUNCSRCM_1850S1413:      
0A19   7B                     DB   "{"   
0A1A   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A1E   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A26   5C 64 74 7B            DB   "\\dt{"   
0A2A   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A3C   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A43   7D                     DB   "}"   
0A44   7D                     DB   "}"   
0A45   00                     DB   0   
0A46                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A46                PRINTARRAY:      
0A46   CD AE 03               CALL   go   
0A49   00 00                  DW   NUL   
0A4B   54 0A                  DW   printArrayM_1860S1424   
0A4D   4F 0A                  DW   $+2   
0A4F   02                     DB   2   
0A50   03 61 62 63            .PSTR   "abc"   
0A54                PRINTARRAYM_1860S1424:      
0A54   7B                     DB   "{"   
0A55   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0A8C   7D                     DB   "}"   
0A8D   00                     DB   0   
0A8E                             ;*******************************************************************
0A8E                             ; implementations continued
0A8E                             ;*******************************************************************
0A8E                             ; $ hex                         ; 22
0A8E                DOLLAR:      
0A8E                HEXNUM:      
0A8E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A91                HEXNUM1:      
0A91   03                     INC   bc   
0A92   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A93   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A95   28 02                  JR   z,hexnum2   ; no a decimal
0A97   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A99                HEXNUM2:      
0A99   D6 30                  SUB   $30   ; form decimal digit
0A9B   DA 35 0B               JP   c,num2   
0A9E   FE 10                  CP   $0F+1   
0AA0   D2 35 0B               JP   nc,num2   
0AA3   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AA4   29                     ADD   hl,hl   ; 4X
0AA5   29                     ADD   hl,hl   ; 8X
0AA6   29                     ADD   hl,hl   ; 16X
0AA7   85                     ADD   a,l   ; add into bottom of hl
0AA8   6F                     LD   l,a   
0AA9   18 E6                  JR   hexnum1   
0AAB                             ; ? if                            23
0AAB                             ; condition then -- value
0AAB                QUESTION:      
0AAB                IF:          
0AAB   03                     INC   bc   
0AAC   0A                     LD   a,(bc)   
0AAD   FE 3F                  CP   "?"   
0AAF   28 06                  JR   z,ifte   
0AB1   0B                     DEC   bc   
0AB2   11 00 00               LD   de,NUL   ; NUL pointer for else
0AB5   18 01                  JR   ifte1   
0AB7                             ; ?? ifte
0AB7                             ; condition then else -- value
0AB7                IFTE:        
0AB7   D1                     POP   de   ; de = else
0AB8                IFTE1:       
0AB8   E1                     POP   hl   ; hl = then
0AB9   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0ABA   7C                     LD   a,h   
0ABB   B5                     OR   l   
0ABC   E1                     POP   hl   ; hl = then
0ABD   CA AF 03               JP   z,go1   ; if z de = else
0AC0   EB                     EX   de,hl   ; condition = false, de = then
0AC1   C3 AF 03               JP   go1   
0AC4                             ; string                        ;38
0AC4                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0AC4                QUOTE:       
0AC4                STRING:      
0AC4   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap*
0AC7   E5                     PUSH   hl   ; save start of string
0AC8   0A                     LD   a,(bc)   
0AC9   5F                     LD   e,a   ; e = matching terminator
0ACA   03                     INC   bc   ; point to next char
0ACB   18 03                  JR   string2   
0ACD                STRING1:      
0ACD   77                     LD   (hl),a   
0ACE   23                     INC   hl   ; increase count
0ACF   03                     INC   bc   ; point to next char
0AD0                STRING2:      
0AD0   0A                     LD   a,(bc)   
0AD1   BB                     CP   e   ; is it the string terminator
0AD2   28 02                  JR   z,string3   
0AD4   18 F7                  JR   string1   
0AD6                STRING3:      
0AD6   AF                     XOR   a   ; write NUL to terminate string
0AD7   77                     LD   (hl),a   ; hl = end of string
0AD8   23                     INC   hl   
0AD9   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0ADC   DD E9                  JP   (ix)   
0ADE                             ; %a .. %z                      43
0ADE                             ; -- value
0ADE                             ; returns value of arg
0ADE                PERCENT:      
0ADE                ARG:         
0ADE   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0AE1   FD 56 05               LD   d,(iy+5)   
0AE4   EB                     EX   de,hl   
0AE5   7D                     LD   a,l   ; arg_list* == null, skip
0AE6   B4                     OR   h   
0AE7   28 1A                  JR   z,arg0a   
0AE9   23                     INC   hl   ; a = num_args, hl = arg_list*
0AEA   7E                     LD   a,(hl)   
0AEB   23                     INC   hl   
0AEC   B7                     OR   a   
0AED   28 14                  JR   z,arg0a   ; num_args == 0, skip
0AEF   5F                     LD   e,a   ; e = a = num_args
0AF0   03                     INC   bc   ; a = next char = dollar_name
0AF1   0A                     LD   a,(bc)   
0AF2   C5                     PUSH   bc   ; save IP
0AF3   43                     LD   b,e   ; b = e = num_args
0AF4   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0AF7   FD 56 03               LD   d,(iy+3)   
0AFA                ARG0:        
0AFA   1B                     DEC   de   ; a = dollar_name, de = next arg*
0AFB   1B                     DEC   de   
0AFC   BE                     CP   (hl)   
0AFD   28 09                  JR   z,arg1   
0AFF   23                     INC   hl   ; hl = next arg_list*
0B00   10 F8                  DJNZ   arg0   
0B02   C1                     POP   bc   ; no match, restore IP
0B03                ARG0A:       
0B03   11 00 00               LD   de,0   ; return 0
0B06   18 08                  JR   arg1a   
0B08                ARG1:        
0B08   C1                     POP   bc   ; restore IP
0B09   EB                     EX   de,hl   ; hl = arg*
0B0A   22 F8 4E               LD   (vPointer),hl   ; store arg* in setter
0B0D   5E                     LD   e,(hl)   
0B0E   23                     INC   hl   
0B0F   56                     LD   d,(hl)   ; de = arg
0B10                ARG1A:       
0B10   D5                     PUSH   de   ; push arg
0B11   DD E9                  JP   (ix)   
0B13                             ; 0..9 number                   37
0B13                NUM:         
0B13   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B16   0A                     LD   a,(bc)   ; Get numeral or -
0B17   FE 2D                  CP   "-"   
0B19   20 01                  JR   nz,num0   
0B1B   03                     INC   bc   ; move to next char, no flags affected
0B1C                NUM0:        
0B1C   08                     EX   af,af'   ; save zero flag = 0 for later
0B1D                NUM1:        
0B1D   0A                     LD   a,(bc)   ; read digit
0B1E   D6 30                  SUB   "0"   ; less than 0?
0B20   38 13                  JR   c,num2   ; not a digit, exit loop
0B22   FE 0A                  CP   10   ; greater that 9?
0B24   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B26   03                     INC   bc   ; inc IP
0B27   54 5D                  LD   de,hl   ; multiply hl * 10
0B29   29                     ADD   hl,hl   
0B2A   29                     ADD   hl,hl   
0B2B   19                     ADD   hl,de   
0B2C   29                     ADD   hl,hl   
0B2D   85                     ADD   a,l   ; add digit in a to hl
0B2E   6F                     LD   l,a   
0B2F   3E 00                  LD   a,0   
0B31   8C                     ADC   a,h   
0B32   67                     LD   h,a   
0B33   18 E8                  JR   num1   
0B35                NUM2:        
0B35   0B                     DEC   bc   
0B36   08                     EX   af,af'   ; restore zero flag
0B37   20 07                  JR   nz,num3   
0B39   EB                     EX   de,hl   ; negate the value of hl
0B3A   21 00 00               LD   hl,0   
0B3D   B7                     OR   a   ; jump to sub2
0B3E   ED 52                  SBC   hl,de   
0B40                NUM3:        
0B40   E5                     PUSH   hl   ; Put the number on the stack
0B41   DD E9                  JP   (ix)   ; and process the next character
0B43                             ; }                               58
0B43                RBRACE:      
0B43                BLOCKEND:      
0B43   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B46   FD 56 01               LD   d,(iy+1)   
0B49   ED 53 04 4F            LD   (vTemp1),de   
0B4D   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0B50   FD 56 07               LD   d,(iy+7)   
0B53   ED 53 06 4F            LD   (vTemp2),de   
0B57   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0B5A   FD 56 03               LD   d,(iy+3)   
0B5D   EB                     EX   de,hl   
0B5E   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0B61   FD 56 01               LD   d,(iy+1)   
0B64   13                     INC   de   ; for carry flag <=
0B65   B7                     OR   a   
0B66   ED 52                  SBC   hl,de   
0B68   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0B6A   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0B6C   FD 5D                  LD   e,iyl   
0B6E   21 08 00               LD   hl,8   
0B71   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0B72   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0B73   18 0C                  JR   blockEnd2   
0B75                BLOCKEND1:      ; same scope
0B75   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0B78   FD 56 03               LD   d,(iy+3)   
0B7B   EB                     EX   de,hl   
0B7C   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0B7E   FD 5D                  LD   e,iyl   
0B80   EB                     EX   de,hl   
0B81                BLOCKEND2:      
0B81   44 4D                  LD   bc,hl   ; bc = hl = BP
0B83   B7                     OR   a   ; hl = BP - SP = count
0B84   ED 72                  SBC   hl,sp   
0B86   7D                     LD   a,l   
0B87   B4                     OR   h   
0B88   28 09                  JR   z,blockEnd3   
0B8A   C5                     PUSH   bc   ; bc = count, hl = BP
0B8B   44 4D                  LD   bc,hl   
0B8D   E1                     POP   hl   
0B8E   2B                     DEC   hl   ; hl = BP-1
0B8F   1B                     DEC   de   ; de = args*-1
0B90   ED B8                  LDDR      
0B92   13                     INC   de   
0B93                BLOCKEND3:      
0B93   EB                     EX   de,hl   ; sp = de = new tos*
0B94   F9                     LD   sp,hl   
0B95   ED 4B 06 4F            LD   bc,(vTemp2)   
0B99   FD 2A 04 4F            LD   iy,(vTemp1)   
0B9D   ED 5B F2 4E            LD   de,(vRecur)   ; de = recur vector
0BA1   7B                     LD   a,e   ; check for NUL
0BA2   B2                     OR   d   
0BA3   20 02                  JR   nz,blockEnd4   
0BA5   DD E9                  JP   (ix)   
0BA7                BLOCKEND4:      
0BA7   21 00 00               LD   hl,0   ; clear recur vector
0BAA   22 F2 4E               LD   (vRecur),hl   
0BAD   C3 AF 03               JP   go1   ; execute de
0BB0                GOBLOCK:      
0BB0   ED 53 04 4F            LD   (vTemp1),de   ; save de
0BB4   21 00 4C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0BB7   FD 54                  LD   d,iyh   
0BB9   FD 5D                  LD   e,iyl   
0BBB   B7                     OR   a   ; if stack* == BP then this is the root_scope
0BBC   ED 52                  SBC   hl,de   
0BBE   ED 5B 04 4F            LD   de,(vTemp1)   ; restore de
0BC2   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0BC3   B4                     OR   h   
0BC4   3E 00                  LD   a,0   
0BC6   28 6A                  JR   z,goFunc8   
0BC8   C5                     PUSH   bc   ; push IP
0BC9   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0BCC   FD 46 05               LD   b,(iy+5)   
0BCF   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0BD2   FD 66 03               LD   h,(iy+3)   
0BD5                GOBLOCK2:      
0BD5   C5                     PUSH   bc   ; arg_list*
0BD6   E5                     PUSH   hl   ; first_arg*
0BD7   FD E5                  PUSH   iy   ; push BP
0BD9   FD 21 00 00            LD   iy,0   ; BP = SP
0BDD   FD 39                  ADD   iy,sp   
0BDF                GOBLOCK3:      
0BDF   42 4B                  LD   bc,de   ; bc = de = block*-1
0BE1   DD E9                  JP   (ix)   
0BE3                GOFUNC:      ; execute func
0BE3   EB                     EX   de,hl   ; hl = func*
0BE4   5E                     LD   e,(hl)   ; de = partial_array*
0BE5   23                     INC   hl   
0BE6   56                     LD   d,(hl)   
0BE7   23                     INC   hl   
0BE8   7B                     LD   a,e   ; if partial_array* == null skip
0BE9   B2                     OR   d   
0BEA   28 21                  JR   z,goFunc3   
0BEC   ED 43 04 4F            LD   (vTemp1),bc   
0BF0   22 06 4F               LD   (vTemp2),hl   ; save bc,hl
0BF3   EB                     EX   de,hl   ; hl = partial_array*
0BF4   2B                     DEC   hl   ; bc = count
0BF5   46                     LD   b,(hl)   
0BF6   2B                     DEC   hl   
0BF7   4E                     LD   c,(hl)   
0BF8   23                     INC   hl   ; hl = array data*
0BF9   23                     INC   hl   
0BFA   18 06                  JR   goFunc2   ; push each item on stack
0BFC                GOFUNC1:      
0BFC   5E                     LD   e,(hl)   ; de = partial item
0BFD   23                     INC   hl   
0BFE   56                     LD   d,(hl)   
0BFF   23                     INC   hl   
0C00   D5                     PUSH   de   ; push on stack
0C01   0B                     DEC   bc   
0C02                GOFUNC2:      
0C02   79                     LD   a,c   ; if count != 0 then loop
0C03   B0                     OR   b   
0C04   20 F6                  JR   nz,goFunc1   
0C06   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore bc
0C0A   2A 06 4F               LD   hl,(vTemp2)   ; restore hl
0C0D                GOFUNC3:      
0C0D   5E                     LD   e,(hl)   ; de = block*
0C0E   23                     INC   hl   
0C0F   56                     LD   d,(hl)   
0C10   23                     INC   hl   
0C11   ED 53 04 4F            LD   (vTemp1),de   ; save block*
0C15   5E                     LD   e,(hl)   ; de = arg_list*
0C16   23                     INC   hl   
0C17   56                     LD   d,(hl)   
0C18   23                     INC   hl   
0C19   EB                     EX   de,hl   ; hl = arg_list*
0C1A   ED 5B 04 4F            LD   de,(vTemp1)   ; restore de = block*
0C1E   7D                     LD   a,l   ; if arg_list* == null a = 0
0C1F   B4                     OR   h   
0C20   20 03                  JR   nz,goFunc4   
0C22   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C23   18 0D                  JR   goFunc8   
0C25                GOFUNC4:      ; allocate locals
0C25   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0C26   18 03                  JR   goFunc6   
0C28                GOFUNC5:      ; loop
0C28   3B                     DEC   sp   
0C29   3B                     DEC   sp   
0C2A   3D                     DEC   a   
0C2B                GOFUNC6:      
0C2B   B7                     OR   a   
0C2C   20 FA                  JR   nz,goFunc5   ; end loop
0C2E                GOFUNC7:      
0C2E   23                     INC   hl   ; a = num_args* x 2
0C2F   7E                     LD   a,(hl)   
0C30   2B                     DEC   hl   
0C31   87                     ADD   a,a   ; a *= 2
0C32                GOFUNC8:      
0C32   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0C33   44 4D                  LD   bc,hl   
0C35   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C38   85                     ADD   a,l   
0C39   6F                     LD   l,a   
0C3A   39                     ADD   hl,sp   
0C3B   18 98                  JR   goBlock2   
0C3D                             ; =                              21
0C3D                             ; value _oldValue --            ; uses address in vPointer 15
0C3D                ASSIGN:      
0C3D   E1                     POP   hl   ; discard last accessed value
0C3E   E1                     POP   hl   ; hl = new value
0C3F                ASSIGN0:      
0C3F   EB                     EX   de,hl   ; de = new value
0C40   2A F8 4E               LD   hl,(vPointer)   
0C43                ASSIGN1:      ; entry point from defineEnd
0C43   73                     LD   (hl),e   
0C44   3A E6 4E               LD   a,(vDataWidth)   
0C47   3D                     DEC   a   ; is it byte?
0C48   28 02                  JR   z,assign2   
0C4A   23                     INC   hl   
0C4B   72                     LD   (hl),d   
0C4C                ASSIGN2:      
0C4C   DD E9                  JP   (ix)   
0C4E                             ; hl = value1, de = value2
0C4E                             ; hl = result
0C4E                EQUALS:      
0C4E   B7                     OR   a   ; reset the carry flag
0C4F   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0C51   28 16                  JR   z,true1   
0C53   18 1A                  JR   false1   
0C55                NOTEQUALS:      
0C55   B7                     OR   a   ; reset the carry flag
0C56   ED 52                  SBC   hl,de   
0C58   20 0F                  JR   nz,true1   
0C5A   18 13                  JR   false1   
0C5C                             ; hl = value1 de = value2
0C5C                             ; hl = result
0C5C                LESSTHANEQ:      
0C5C   B7                     OR   a   
0C5D   ED 52                  SBC   hl,de   
0C5F   18 05                  JR   lessthan1   
0C61                             ; hl = value1 de = value2
0C61                             ; hl = result
0C61                LESSTHAN:      
0C61   B7                     OR   a   
0C62   ED 52                  SBC   hl,de   
0C64   28 09                  JR   z,false1   
0C66                LESSTHAN1:      
0C66   FA 6F 0C               JP   m,false1   
0C69                TRUE1:       
0C69   21 FF FF               LD   hl,TRUE   
0C6C   E5                     PUSH   hl   
0C6D   DD E9                  JP   (ix)   
0C6F                NULL1:       
0C6F                FALSE1:      
0C6F   21 00 00               LD   hl,FALSE   
0C72   E5                     PUSH   hl   
0C73   DD E9                  JP   (ix)   
0C75                             ; shiftLeft                     15
0C75                             ; value count -- value2          shift left count places
0C75                SHIFTLEFT:      
0C75   50 59                  LD   de,bc   ; save IP
0C77   C1                     POP   bc   ; bc = count
0C78   41                     LD   b,c   ; b = loop counter
0C79   E1                     POP   hl   
0C7A   04                     INC   b   ; test for counter=0 case
0C7B   18 01                  JR   shiftLeft2   
0C7D                SHIFTLEFT1:      
0C7D   29                     ADD   hl,hl   ; left shift hl
0C7E                SHIFTLEFT2:      
0C7E   10 FD                  DJNZ   shiftLeft1   
0C80   E5                     PUSH   hl   
0C81   42 4B                  LD   bc,de   ; restore IP
0C83   DD E9                  JP   (ix)   
0C85                             ; shiftRight                    16
0C85                             ; value count -- value2          shift left count places
0C85                SHIFTRIGHT:      
0C85   50 59                  LD   de,bc   ; save IP
0C87   C1                     POP   bc   ; bc = count
0C88   41                     LD   b,c   ; b = loop counter
0C89   E1                     POP   hl   
0C8A   04                     INC   b   ; test for counter=0 case
0C8B   18 04                  JR   shiftRight2   
0C8D                SHIFTRIGHT1:      
0C8D   CB 3C                  SRL   h   ; right shift hl
0C8F   CB 1D                  RR   l   
0C91                SHIFTRIGHT2:      
0C91   10 FA                  DJNZ   shiftRight1   
0C93   E5                     PUSH   hl   
0C94   42 4B                  LD   bc,de   ; restore IP
0C96   DD E9                  JP   (ix)   
0C98                             ; division subroutine.
0C98                             ; bc: divisor, de: dividend, hl: remainder
0C98                DIVIDE:      
0C98   21 00 00               LD   hl,0   ; zero the remainder
0C9B   3E 10                  LD   a,16   ; loop counter
0C9D                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0C9D   CB 21                  SLA   c   
0C9F   CB 10                  RL   b   
0CA1   ED 6A                  ADC   hl,hl   
0CA3   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0CA5   38 03                  JR   c,divide2   
0CA7   0C                     INC   c   
0CA8   18 01                  JR   divide3   
0CAA                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0CAA   19                     ADD   hl,de   
0CAB                DIVIDE3:      
0CAB   3D                     DEC   a   
0CAC   20 EF                  JR   nz,divide1   
0CAE   50 59                  LD   de,bc   ; result from bc to de
0CB0   C9                     RET      
0CB1                DOTNEXT:      
0CB1   3A F6 4E               LD   a,(vStrMode)   ; if string mode then exit
0CB4   3C                     INC   a   
0CB5   20 02                  JR   nz,dotNext1   
0CB7   DD E9                  JP   (ix)   
0CB9                DOTNEXT1:      
0CB9   11 00 4D               LD   de,BUFFER   
0CBC   2A EC 4E               LD   hl,(vBufPtr)   
0CBF   B7                     OR   a   ; hl = count, de = vHeapPtr
0CC0   ED 52                  SBC   hl,de   
0CC2   C3 CB 0C               JP   dotNext3   
0CC5                DOTNEXT2:      
0CC5   1A                     LD   a,(de)   ; print char at char*
0CC6   CD 85 00               CALL   putchar   
0CC9   13                     INC   de   ; char*++
0CCA   2B                     DEC   hl   ; count--
0CCB                DOTNEXT3:      
0CCB   7D                     LD   a,l   ; count == 0?
0CCC   B4                     OR   h   
0CCD   20 F6                  JR   nz,dotNext2   ; if not loop
0CCF   21 00 4D               LD   hl,BUFFER   ; reset vBufPtr to vHeapPtr
0CD2   22 EC 4E               LD   (vBufPtr),hl   
0CD5   DD E9                  JP   (ix)   
0CD7                             ; arg_list - parses arg_list e.g. ab:c
0CD7                             ; -- arg_list*
0CD7                PARSEARGS:      
0CD7   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CDA   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap*
0CDD   E5                     PUSH   hl   ; save start of arg_list
0CDE   23                     INC   hl   ; skip length fields to start of string
0CDF   23                     INC   hl   
0CE0   03                     INC   bc   ; point to next char
0CE1                PARSEARGS1:      
0CE1   0A                     LD   a,(bc)   
0CE2   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CE4   20 03                  JR   nz,parseArgs1a   
0CE6   14                     INC   d   ; non zero value local count acts as flag
0CE7   18 10                  JR   parseArgs3   
0CE9                PARSEARGS1A:      
0CE9   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CEB   38 0F                  JR   c,parseArgs4   
0CED   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CEF   30 0B                  JR   nc,parseArgs4   
0CF1                PARSEARGS2:      
0CF1   77                     LD   (hl),a   
0CF2   23                     INC   hl   
0CF3   1C                     INC   e   ; increase arg count
0CF4   AF                     XOR   a   
0CF5   B2                     OR   d   
0CF6   28 01                  JR   z,parseArgs3   
0CF8   14                     INC   d   ; if d > 0 increase local count
0CF9                PARSEARGS3:      
0CF9   03                     INC   bc   ; point to next char
0CFA   18 E5                  JR   parseArgs1   
0CFC                PARSEARGS4:      
0CFC   0B                     DEC   bc   
0CFD   AF                     XOR   a   
0CFE   B2                     OR   d   
0CFF   28 01                  JR   z,parseArgs5   
0D01   15                     DEC   d   ; remove initial inc
0D02                PARSEARGS5:      
0D02   23                     INC   hl   
0D03   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D06   E1                     POP   hl   ; hl = start of arg_list
0D07   72                     LD   (hl),d   ; write number of locals at start - 1
0D08   23                     INC   hl   
0D09   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D0A   2B                     DEC   hl   
0D0B   E3                     EX   (sp),hl   
0D0C   E9                     JP   (hl)   
0D0D                             ; create block: parses block e.g. 00bbIC4uLi4g
0D0D                             ; -- block*
0D0D                PARSEBLOCK:      
0D0D   C5                     PUSH   bc   ; return pointer to first { of block
0D0E   03                     INC   bc   
0D0F   16 01                  LD   d,1   ; nesting: count first parenthesis
0D11                PARSEBLOCK1:      ; Skip to end of definition
0D11   0A                     LD   a,(bc)   ; Get the next character
0D12   03                     INC   bc   ; Point to next character
0D13   FE 21                  CP   " " + 1   ; ignore whitespace
0D15   38 FA                  JR   c,parseBlock1   
0D17   FE 29                  CP   ")"   
0D19   28 2D                  JR   z,parseBlock4   
0D1B   FE 7D                  CP   "}"   
0D1D   28 29                  JR   z,parseBlock4   
0D1F   FE 5D                  CP   "]"   
0D21   28 25                  JR   z,parseBlock4   
0D23   FE 28                  CP   "("   
0D25   28 16                  JR   z,parseBlock2   
0D27   FE 7B                  CP   "{"   
0D29   28 12                  JR   z,parseBlock2   
0D2B   FE 5B                  CP   "["   
0D2D   28 0E                  JR   z,parseBlock2   
0D2F   FE 27                  CP   "'"   
0D31   28 0D                  JR   z,parseBlock3   
0D33   FE 60                  CP   "`"   
0D35   28 09                  JR   z,parseBlock3   
0D37   FE 22                  CP   DQ   
0D39   28 05                  JR   z,parseBlock3   
0D3B   18 D4                  JR   parseBlock1   
0D3D                PARSEBLOCK2:      
0D3D   14                     INC   d   
0D3E   18 D1                  JR   parseBlock1   
0D40                PARSEBLOCK3:      
0D40   3E 80                  LD   a,$80   
0D42   AA                     XOR   d   
0D43   57                     LD   d,a   
0D44   20 CB                  JR   nz,parseBlock1   
0D46   18 03                  JR   parseBlock5   
0D48                PARSEBLOCK4:      
0D48   15                     DEC   d   
0D49   20 C6                  JR   nz,parseBlock1   ; get the next element
0D4B                PARSEBLOCK5:      
0D4B   60 69                  LD   hl,bc   ; hl = IP
0D4D   11 22 4F               LD   de,HEAP   ; is IP pointing to object in heap
0D50   B7                     OR   a   ; IP - HEAP
0D51   ED 52                  SBC   hl,de   
0D53   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D55   28 1C                  JR   z,parseBlock6   
0D57   60 69                  LD   hl,bc   ; hl = IP
0D59   D1                     POP   de   ; de = block*
0D5A   ED 43 04 4F            LD   (vTemp1),bc   ; save IP
0D5E   B7                     OR   a   ; bc = size
0D5F   ED 52                  SBC   hl,de   
0D61   44 4D                  LD   bc,hl   
0D63   EB                     EX   de,hl   ; hl = block* de = heap*
0D64   ED 5B F0 4E            LD   de,(vHeapPtr)   
0D68   D5                     PUSH   de   ; return hblock*
0D69   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D6B   ED 53 F0 4E            LD   (vHeapPtr),de   ; heap* += size
0D6F   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore IP
0D73                PARSEBLOCK6:      
0D73   0B                     DEC   bc   ; balanced, exit
0D74   E1                     POP   hl   ; hl = block*
0D75   E3                     EX   (sp),hl   ; return to caller
0D76   E9                     JP   (hl)   
0D77                             ; create function
0D77                             ; arg_list* block* -- func*
0D77                CREATEFUNC:      
0D77   E1                     POP   hl   ; save retrn address
0D78   22 08 4F               LD   (vTemp3),hl   
0D7B   ED 43 04 4F            LD   (vTemp1),bc   ; save IP
0D7F   E1                     POP   hl   ; hl = block*
0D80   22 06 4F               LD   (vTemp2),hl   ; save block*
0D83   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D86   FD 56 05               LD   d,(iy+5)   
0D89   7B                     LD   a,e   ; if arg_list == null then make a func
0D8A   B2                     OR   d   
0D8B   20 09                  JR   nz,createFunc0   
0D8D   21 00 00               LD   hl,0   ; partial_array = null
0D90   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = compile*
0D94   18 65                  JR   createFunc5   
0D96                CREATEFUNC0:      
0D96   E1                     POP   hl   ; hl = inner_arg_list*
0D97   E5                     PUSH   hl   ; save inner_arg_list
0D98   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = compile*
0D9C   7E                     LD   a,(hl)   ; compile inner_num_locals
0D9D   4F                     LD   c,a   ; b = inner_num_locals
0D9E   12                     LD   (de),a   
0D9F   23                     INC   hl   
0DA0   13                     INC   de   
0DA1   7E                     LD   a,(hl)   ; compile inner_length
0DA2   12                     LD   (de),a   
0DA3   91                     SUB   c   ; a = inner_num args
0DA4   23                     INC   hl   
0DA5   13                     INC   de   
0DA6   B7                     OR   a   ; compile args if inner_length > 0
0DA7   28 05                  JR   z,createFunc1   
0DA9   4F                     LD   c,a   ; bc = a
0DAA   06 00                  LD   b,0   
0DAC   ED B0                  LDIR      
0DAE                CREATEFUNC1:      
0DAE   EB                     EX   de,hl   ; hl = outer_arg_list
0DAF   FD 5E 04               LD   e,(iy+4)   
0DB2   FD 56 05               LD   d,(iy+5)   
0DB5   EB                     EX   de,hl   
0DB6   23                     INC   hl   ; a = outer_length
0DB7   7E                     LD   a,(hl)   
0DB8   23                     INC   hl   
0DB9   B7                     OR   a   
0DBA   28 05                  JR   z,createFunc2   
0DBC   4F                     LD   c,a   
0DBD   06 00                  LD   b,0   
0DBF   ED B0                  LDIR      ; append outer_args
0DC1                CREATEFUNC2:      ; a = outer_length
0DC1   47                     LD   b,a   ; b = a = outer_length
0DC2   2A F0 4E               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DC5   23                     INC   hl   
0DC6   7E                     LD   a,(hl)   ; add outer_length to new length
0DC7   80                     ADD   a,b   
0DC8   77                     LD   (hl),a   
0DC9   2B                     DEC   hl   
0DCA   78                     LD   a,b   ; save outer_length in a'
0DCB   08                     EX   af,af'   
0DCC   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DCD   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DCE   B7                     OR   a   
0DCF   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DD1   4F                     LD   c,a   ; c = inner_num_locals
0DD2   06 00                  LD   b,0   ; bc = inner_num_locals
0DD4   23                     INC   hl   ; a = inner_length
0DD5   7E                     LD   a,(hl)   
0DD6   91                     SUB   c   ; a = inner_num_args
0DD7   23                     INC   hl   ; hl = inner_arg_chars
0DD8   85                     ADD   a,l   ; hl += a
0DD9   6F                     LD   l,a   
0DDA   3E 00                  LD   a,0   
0DDC   84                     ADD   a,h   
0DDD   67                     LD   h,a   
0DDE   ED B0                  LDIR      ; append inner_locals
0DE0                CREATEFUNC2A:      
0DE0   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DE1   12                     LD   (de),a   ; compile partial_array length field
0DE2   13                     INC   de   
0DE3   AF                     XOR   a   
0DE4   12                     LD   (de),a   
0DE5   13                     INC   de   
0DE6   D5                     PUSH   de   ; push partial_array*
0DE7   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DE8   FD 5E 02               LD   e,(iy+2)   
0DEB   FD 56 03               LD   d,(iy+3)   
0DEE   EB                     EX   de,hl   
0DEF                CREATEFUNC3:      
0DEF   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DF0   4E                     LD   c,(hl)   
0DF1   2B                     DEC   hl   
0DF2   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DF3   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DF4   13                     INC   de   
0DF5   79                     LD   a,c   
0DF6   12                     LD   (de),a   
0DF7   13                     INC   de   
0DF8   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DFA                CREATEFUNC4:      
0DFA   E1                     POP   hl   ; hl = partial_array*
0DFB                CREATEFUNC5:      
0DFB   C1                     POP   bc   ; bc = new_arg_list*
0DFC   D5                     PUSH   de   ; return new func*
0DFD   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DFE   73                     LD   (hl),e   ; compile partial_array* to func
0DFF   23                     INC   hl   
0E00   72                     LD   (hl),d   
0E01   23                     INC   hl   
0E02   ED 5B 06 4F            LD   de,(vTemp2)   ; de = block*
0E06   73                     LD   (hl),e   ; compile block* to func
0E07   23                     INC   hl   
0E08   72                     LD   (hl),d   
0E09   23                     INC   hl   
0E0A   71                     LD   (hl),c   ; compile new_arg_list* to func
0E0B   23                     INC   hl   
0E0C   70                     LD   (hl),b   
0E0D   23                     INC   hl   
0E0E   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap ptr
0E11   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore IP
0E15   2A 08 4F               LD   hl,(vTemp3)   ; jump to return address
0E18   E9                     JP   (hl)   
0E19                             ;*******************************************************************
0E19                             ; general routines
0E19                             ;*******************************************************************
0E19                             ; followed by a table
0E19                             ; indexed on the 0-25 lowercase letter
0E19                             ; db lsb(addr)
0E19                             ; the final item index 26 matches any other char
0E19                COMMANDTABLE:      
0E19   03                     INC   bc   
0E1A   0A                     LD   a,(bc)   
0E1B   FE 7B                  CP   "z"+1   
0E1D   30 0B                  JR   nc,commandTable2   
0E1F   D6 61                  SUB   "a"   
0E21   38 07                  JR   c,commandTable2   
0E23                COMMANDTABLE1:      
0E23   E1                     POP   hl   
0E24   85                     ADD   a,l   
0E25   6F                     LD   l,a   
0E26   6E                     LD   l,(hl)   ; must have the same msb as the table
0E27   C3 30 0E               JP   jumpTable1   
0E2A                COMMANDTABLE2:      
0E2A   3E 1A                  LD   a,26   
0E2C   0B                     DEC   bc   
0E2D   18 F4                  JR   commandTable1   
0E2F                             ; followed by a table
0E2F                             ; db char
0E2F                             ; dw addr
0E2F                             ; the final item must have char == NUL
0E2F                JUMPTABLE:      
0E2F   E1                     POP   hl   
0E30                JUMPTABLE1:      
0E30   03                     INC   bc   
0E31                JUMPTABLE2:      
0E31   AF                     XOR   a   
0E32   BE                     CP   (hl)   
0E33   20 03                  JR   nz,jumpTable3   
0E35   0B                     DEC   bc   
0E36   18 09                  JR   jumpTable4   
0E38                JUMPTABLE3:      
0E38   0A                     LD   a,(bc)   
0E39   BE                     CP   (hl)   
0E3A   28 05                  JR   z,jumpTable4   
0E3C   23                     INC   hl   
0E3D   23                     INC   hl   
0E3E   23                     INC   hl   
0E3F   18 F0                  JR   jumpTable2   
0E41                JUMPTABLE4:      
0E41   23                     INC   hl   
0E42   5E                     LD   e,(hl)   
0E43   23                     INC   hl   
0E44   56                     LD   d,(hl)   
0E45   EB                     EX   de,hl   
0E46   E9                     JP   (hl)   
0E47                PRTSTR0:      
0E47   CD 85 00               CALL   putchar   
0E4A   23                     INC   hl   
0E4B                PRTSTR:      
0E4B   7E                     LD   a,(hl)   
0E4C   B7                     OR   a   
0E4D   20 F8                  JR   nz,prtstr0   
0E4F   C9                     RET      
0E50                             ; **************************************************************************
0E50                             ; calculate nesting value
0E50                             ; a is char to be tested,
0E50                             ; e is the nesting value (initially 0)
0E50                             ; e is increased by ( and [
0E50                             ; e is decreased by ) and ]
0E50                             ; e has its bit 7 toggled by `
0E50                             ; limited to 127 levels
0E50                             ; **************************************************************************
0E50                NESTING:      
0E50   FE 22                  CP   DQ   ; quote char
0E52   28 06                  JR   z,nesting0   
0E54   FE 60                  CP   "`"   ; quote char
0E56   28 02                  JR   z,nesting0   
0E58   18 0A                  JR   nesting1   
0E5A                NESTING0:      
0E5A   CB 7B                  BIT   7,e   
0E5C   28 03                  JR   z,nesting1a   
0E5E   CB BB                  RES   7,e   
0E60   C9                     RET      
0E61                NESTING1A:      
0E61   CB FB                  SET   7,e   
0E63   C9                     RET      
0E64                NESTING1:      
0E64   CB 7B                  BIT   7,e   
0E66   C0                     RET   nz   
0E67   FE 7B                  CP   "{"   
0E69   28 08                  JR   z,nesting2   
0E6B   FE 5B                  CP   "["   
0E6D   28 04                  JR   z,nesting2   
0E6F   FE 28                  CP   "("   
0E71   20 02                  JR   nz,nesting3   
0E73                NESTING2:      
0E73   1C                     INC   e   
0E74   C9                     RET      
0E75                NESTING3:      
0E75   FE 7D                  CP   "}"   
0E77   28 07                  JR   z,nesting4   
0E79   FE 5D                  CP   "]"   
0E7B   28 03                  JR   z,nesting4   
0E7D   FE 29                  CP   ")"   
0E7F   C0                     RET   nz   
0E80                NESTING4:      
0E80   1D                     DEC   e   
0E81   C9                     RET      
0E82                PROMPT:      
0E82   CD 92 0E               CALL   printStr   
0E85   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E8A   C9                     RET      
0E8B                CRLF:        
0E8B   CD 92 0E               CALL   printStr   
0E8E   0D 0A 00               .CSTR   "\r\n"   
0E91   C9                     RET      
0E92                             ; prints a null teminated string
0E92                             ; the string should be immediately following the call
0E92                PRINTSTR:      
0E92   E3                     EX   (sp),hl   ; swap			
0E93   CD 4B 0E               CALL   prtstr   
0E96   23                     INC   hl   ; inc past NUL
0E97   E3                     EX   (sp),hl   ; put it back	
0E98   C9                     RET      
0E99                INIT:        
0E99   21 F0 01               LD   hl,titleStr   
0E9C   11 0E 4F               LD   de,titleBuf   
0E9F   06 14                  LD   b,20   
0EA1                INIT1:       
0EA1   1A                     LD   a,(de)   
0EA2   BE                     CP   (hl)   
0EA3   20 17                  JR   nz,coldBoot0   
0EA5   13                     INC   de   
0EA6   23                     INC   hl   
0EA7   10 F8                  DJNZ   init1   
0EA9                WARMINIT:      
0EA9   ED 4B FC 4E            LD   bc,(vSavedIP)   ; restore IP
0EAD   ED 7B FE 4E            LD   sp,(vSavedSP)   ; restore SP
0EB1   DD 2A 00 4F            LD   ix,(vSavedNext)   ; restore Next
0EB5   FD 2A 02 4F            LD   iy,(vSavedBP)   ; restore BP
0EB9   C3 F3 0E               JP   start1   
0EBC                COLDBOOT0:      
0EBC   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0EBF   11 0E 4F               LD   de,titleBuf   
0EC2   06 14                  LD   b,20   
0EC4   ED B0                  LDIR      
0EC6                COLDINIT:      
0EC6   21 DE 01               LD   hl,isysVars   
0EC9   11 E6 4E               LD   de,sysVars   
0ECC   01 12 00               LD   bc,9 * 2   
0ECF   ED B0                  LDIR      
0ED1   21 00 4E               LD   hl,vars   ; 52 vars LO HI
0ED4   06 34                  LD   b,26*2   
0ED6   AF                     XOR   a   
0ED7                COLDBOOT1:      
0ED7   77                     LD   (hl),a   
0ED8   23                     INC   hl   
0ED9   10 FC                  DJNZ   coldBoot1   
0EDB   DD 2A EE 4E            LD   ix,(vNext)   
0EDF   FD 21 00 4C            LD   iy,STACK   
0EE3   C9                     RET      
0EE4                COLDSTART:      
0EE4   31 00 4C               LD   sp,STACK   
0EE7   CD BC 0E               CALL   coldBoot0   
0EEA   C3 F3 0E               JP   start1   
0EED                START:       
0EED   31 00 4C               LD   sp,STACK   ; start Monty
0EF0   CD 99 0E               CALL   init   ; setups
0EF3                START1:      
0EF3   21 0E 4F               LD   hl,titleBuf   
0EF6   CD 4B 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0EF9                INTERPRET:      
0EF9   CD 82 0E               CALL   prompt   
0EFC   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0EFF   21 00 4C               LD   hl,TIB   
0F02   22 EA 4E               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F05                INTERPRET2:      ; calculate nesting
0F05   1E 00                  LD   e,0   ; initilize nesting value
0F07   C5                     PUSH   bc   ; save offset into TIB,
0F08                             ; bc is also the count of chars in TIB
0F08   21 00 4C               LD   hl,TIB   ; hl is start of TIB
0F0B   18 0B                  JR   interpret4   
0F0D                INTERPRET3:      
0F0D   3E 33                  LD   a,"3"   
0F0F   CD 85 00               CALL   putchar   
0F12   7E                     LD   a,(hl)   ; a = char in TIB
0F13   23                     INC   hl   ; inc pointer into TIB
0F14   0B                     DEC   bc   ; dec count of chars in TIB
0F15   CD 50 0E               CALL   nesting   ; update nesting value
0F18                INTERPRET4:      
0F18   79                     LD   a,c   ; is count zero?
0F19   B0                     OR   b   
0F1A   20 F1                  JR   nz,interpret3   ; if not loop
0F1C   C1                     POP   bc   ; restore offset into TIB
0F1D                INTERPRET5:      
0F1D   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F20   FE 20                  CP   $20   ; compare to space
0F22   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F24   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F26                             ; ???? NEEDED?
0F26   28 36                  JR   z,interpret8   
0F28   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F2A   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F2C   FE 05                  CP   CTRL_E   
0F2E   CA BF 0F               JP   z,edit_   
0F31   FE 08                  CP   CTRL_H   
0F33   CA AF 0F               JP   z,backSpace_   
0F36   FE 0A                  CP   CTRL_J   
0F38   CA C2 0F               JP   z,reEdit_   
0F3B                             ; cp CTRL_S
0F3B                             ; jp z,printStack_
0F3B                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F3B                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F3B                             ; DB     lsb(list_)       ; FF  ^L 12
0F3B                             ; DB     lsb(printStack_) ; DLE ^P 16
0F3B                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F3B                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F3B                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F3B                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F3B                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F3B                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F3B                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F3B                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F3B                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F3B                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F3B                INTERPRET5A:      
0F3B                             ; ld (vTIBPtr),bc
0F3B                             ; ld bc,(vTIBPtr)
0F3B   18 C8                  JR   interpret2   
0F3D                INTERPRET6:      
0F3D   21 00 4C               LD   hl,TIB   
0F40   09                     ADD   hl,bc   
0F41   77                     LD   (hl),a   ; store the character in textbuf
0F42   03                     INC   bc   
0F43   CD 85 00               CALL   putchar   ; echo character to screen
0F46   CD 50 0E               CALL   nesting   
0F49   18 D2                  JR   interpret5   ; wait for next character
0F4B                INTERPRET7:      
0F4B   21 00 4C               LD   hl,TIB   
0F4E   09                     ADD   hl,bc   
0F4F   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F51   23                     INC   hl   
0F52   36 0A                  LD   (hl),"\n"   
0F54   23                     INC   hl   
0F55   03                     INC   bc   
0F56   03                     INC   bc   
0F57   CD 8B 0E               CALL   crlf   ; echo character to screen
0F5A   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F5B   B7                     OR   a   
0F5C   20 BF                  JR   nz,interpret5   
0F5E                INTERPRET8:      
0F5E   21 00 4C               LD   hl,TIB   
0F61   09                     ADD   hl,bc   
0F62   22 EA 4E               LD   (vTIBPtr),hl   
0F65   01 00 4C               LD   bc,TIB   
0F68   ED 43 FC 4E            LD   (vSavedIP),bc   ; save IP
0F6C   ED 73 FE 4E            LD   (vSavedSP),sp   ; save SP
0F70   DD 22 00 4F            LD   (vSavedNext),ix   ; save Next
0F74   FD 22 02 4F            LD   (vSavedBP),iy   ; save BP
0F78   0B                     DEC   bc   
0F79                NEXT:        
0F79   03                     INC   bc   ; Increment the IP
0F7A   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F7B   FE 20                  CP   " "   ; whitespace?
0F7D   28 FA                  JR   z,next   ; space? ignore
0F7F   38 0D                  JR   c,next1   
0F81   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F83   6F                     LD   l,a   ; index into table
0F84   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F86   6E                     LD   l,(hl)   ; get low jump address
0F87   24                     INC   h   ; page 2
0F88   FE BA                  CP   "Z" - "!" + 1 + $80   
0F8A   38 01                  JR   c,next0   
0F8C   24                     INC   h   ; page 3
0F8D                NEXT0:       
0F8D   E9                     JP   (hl)   ; Jump to routine
0F8E                NEXT1:       
0F8E   FE 00                  CP   NUL   ; end of input string?
0F90   28 03                  JR   z,exit   
0F92   C3 F9 0E               JP   interpret   ; no, other whitespace, macros?
0F95                EXIT:        
0F95   03                     INC   bc   
0F96   60 69                  LD   hl,bc   
0F98   E9                     JP   (hl)   
0F99                RUN:         
0F99   C1                     POP   bc   
0F9A   0B                     DEC   bc   
0F9B   DD E9                  JP   (ix)   
0F9D                ERROR:       
0F9D   E5                     PUSH   hl   
0F9E   CD 99 0F               CALL   run   
0FA1   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0FAC   C3 F9 0E               JP   interpret   
0FAF                BACKSPACE_:      
0FAF   79                     LD   a,c   
0FB0   B0                     OR   b   
0FB1   CA 05 0F               JP   z,interpret2   
0FB4   0B                     DEC   bc   
0FB5   CD 92 0E               CALL   printStr   
0FB8   08 20 08 00            .CSTR   "\b \b"   
0FBC   C3 05 0F               JP   interpret2   
0FBF                             ; edit
0FBF                EDIT_:       
0FBF   C3 F9 0E               JP   interpret   
0FC2                REEDIT_:      
0FC2   C3 F9 0E               JP   interpret   
0FC5                             ; editDef:
0FC5                             ;     pop hl                      ; pop ret address
0FC5                             ;     ex (sp),hl                  ; swap with TOS
0FC5                             ;     push hl                     ; dup TOS
0FC5                             ;     ld a,l                      ; a = ident
0FC5                             ;     ld de,TIB                   ; de = start of TIB
0FC5                             ;     ld (vTIBPtr),de             ; update TIB*
0FC5                             ;     push ix                     ; save NEXT
0FC5                             ;     ld ix,editDef0              ; NEXT = editDef0
0FC5                             ;     jp lookupRef                ; convert letter into address
0FC5                             ; editDef0:
0FC5                             ;     ld e,(hl)                   ; de = (hl++)
0FC5                             ;     inc hl
0FC5                             ;     ld d,(hl)
0FC5                             ;     ld a,d                      ; de == 0 ?
0FC5                             ;     or e
0FC5                             ;     jr z,editDef4
0FC5                             ;     ld ix,editDef3              ; NEXT = editDef3
0FC5                             ;     ex de,hl
0FC5                             ;     ld a,(hl)
0FC5                             ;     cp "{"
0FC5                             ;     jr nz,editDef1
0FC5                             ;     jp editBlock0               ; convert letter into address
0FC5                             ; editDef1:
0FC5                             ;     cp "("
0FC5                             ;     jr nz,editDef2
0FC5                             ;     jp editBlock0               ; convert letter into address
0FC5                             ; editDef2:
0FC5                             ;     jp editFunc
0FC5                             ; editDef3:
0FC5                             ;     ld a," "                    ; write assign
0FC5                             ;     call writeChar
0FC5                             ;     pop hl                      ; a = ident
0FC5                             ;     ld a,l
0FC5                             ;     call writeChar
0FC5                             ;     ld a,"="                    ; write assign
0FC5                             ;     call writeChar
0FC5                             ;     ld ix,editDef4              ; NEXT = editDef4
0FC5                             ;     jp printTIB
0FC5                             ; editDef4:
0FC5                             ;     pop ix                      ; restore NEXT
0FC5                             ;     jp (ix)
0FC5                             ; writeChar:
0FC5                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FC5                             ;     ld (de),a                   ; write ident
0FC5                             ;     inc de
0FC5                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FC5                             ;     ret
0FC5                             ; ; printTIB
0FC5                             ; printTIB:
0FC5                             ;     ld hl,(vTIBPtr)
0FC5                             ;     ld de,TIB
0FC5                             ;     or a
0FC5                             ;     sbc hl,de
0FC5                             ;     jp printTIB2
0FC5                             ; printTIB1:
0FC5                             ;     ld a,(de)
0FC5                             ;     call putchar
0FC5                             ; printTIB2:
0FC5                             ;     ld a,l
0FC5                             ;     or h
0FC5                             ;     jr nz,printTIB1
0FC5                             ;     jp (ix)
0FC5                             ; editBlock:
0FC5                             ;     pop hl                      ; hl = block*
0FC5                             ; editBlock0:
0FC5                             ;     push ix                     ; save next
0FC5                             ;     push hl                     ; push block*
0FC5                             ;     push hl                     ; push block*
0FC5                             ;     ld ix,(editBlock2)
0FC5                             ;     jp blockLength
0FC5                             ; editBlock1:
0FC5                             ;     pop hl                      ; bc = length, (sp) = IP
0FC5                             ;     pop de                      ; de = block*
0FC5                             ;     ld a,l
0FC5                             ;     or h
0FC5                             ;     jr z,editBlock2
0FC5                             ;     push bc
0FC5                             ;     ld bc,hl
0FC5                             ;     ex de,hl                    ; hl = block*
0FC5                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FC5                             ;     ldir                        ; copy block to TIB
0FC5                             ;     ld (vTIBPtr),de              ; save TIB*
0FC5                             ;     pop bc
0FC5                             ; editBlock2:
0FC5                             ;     pop ix                      ; restore next
0FC5                             ;     jp (ix)
0FC5                             ; editFunc:
0FC5                             ;     jp (ix)
0FC5                             ; editArray:
0FC5                             ;     jp (ix)
0FC5                             ; editparseArgs:
0FC5                             ;     jp (ix)
0FC5                             ; ; blockLength
0FC5                             ; ; addr1 -- length
0FC5                             ; blockLength:
0FC5                             ;     pop hl                      ; block*
0FC5                             ;     push hl                     ; save block*
0FC5                             ;     inc hl                      ; skip first char
0FC5                             ;     ld d,1                      ; increase nesting
0FC5                             ; blockLength1:                   ; Skip to end of definition
0FC5                             ;     ld a,(hl)                   ; Get the next character
0FC5                             ;     inc hl                      ; Point to next character
0FC5                             ;     cp " " + 1                  ; ignore whitespace
0FC5                             ;     jr c,blockLength1
0FC5                             ;     cp ")"
0FC5                             ;     jr z,blockLength4
0FC5                             ;     cp "}"
0FC5                             ;     jr z,blockLength4
0FC5                             ;     cp "]"
0FC5                             ;     jr z,blockLength4
0FC5                             ;     cp "("
0FC5                             ;     jr z,blockLength2
0FC5                             ;     cp "{"
0FC5                             ;     jr z,blockLength2
0FC5                             ;     cp "["
0FC5                             ;     jr z,blockLength2
0FC5                             ;     cp "'"
0FC5                             ;     jr z,blockLength3
0FC5                             ;     cp "`"
0FC5                             ;     jr z,blockLength3
0FC5                             ;     cp DQ
0FC5                             ;     jr z,blockLength3
0FC5                             ;     jr blockLength1
0FC5                             ; blockLength2:
0FC5                             ;     inc d
0FC5                             ;     jr blockLength1
0FC5                             ; blockLength4:
0FC5                             ;     dec d
0FC5                             ;     jr nz, blockLength1         ; get the next element
0FC5                             ; blockLength3:
0FC5                             ;     ld a,$80
0FC5                             ;     xor d
0FC5                             ;     ld d,a
0FC5                             ;     jr nz, blockLength1
0FC5                             ;     pop hl                      ; hl = block*
0FC5                             ;     or a
0FC5                             ;     sbc hl,de
0FC5                             ;     push hl
0FC5                             ;     jp (ix)
0FC5                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FC5                             ; \a start of stack \#3 depth \b base \$ prompt
0FC5                             ; DW dStack               ; a vS0 start of datastack			
0FC5                             ; DW FALSE                ; b vBase16
0FC5                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FC5                             ; DW 0                    ; d
0FC5                             ; DW 65                   ; e vLastDef "A" last command u defined
0FC5                             ; DW 0                    ; f
0FC5                             ; DW page6                ; g 256 bytes limits
0FC5                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FC5                          ;*Macro unroll: FUNC f1, 0, ""
0FC5                F1:          
0FC5   CD AE 03               CALL   go   
0FC8   00 00                  DW   NUL   
0FCA   D0 0F                  DW   f1M_2993S12   
0FCC   CE 0F                  DW   $+2   
0FCE   00                     DB   0   
0FCF   00                     .PSTR   ""   
0FD0                F1M_2993S12:      
0FD0   00                     DB   0   
0FD1                          ;*Macro unroll: FUNC f2, 0, ""
0FD1                F2:          
0FD1   CD AE 03               CALL   go   
0FD4   00 00                  DW   NUL   
0FD6   DC 0F                  DW   f2M_2995S15   
0FD8   DA 0F                  DW   $+2   
0FDA   00                     DB   0   
0FDB   00                     .PSTR   ""   
0FDC                F2M_2995S15:      
0FDC   00                     DB   0   
0FDD                          ;*Macro unroll: FUNC f3, 0, ""
0FDD                F3:          
0FDD   CD AE 03               CALL   go   
0FE0   00 00                  DW   NUL   
0FE2   E8 0F                  DW   f3M_2997S18   
0FE4   E6 0F                  DW   $+2   
0FE6   00                     DB   0   
0FE7   00                     .PSTR   ""   
0FE8                F3M_2997S18:      
0FE8   00                     DB   0   
0FE9                          ;*Macro unroll: FUNC f4, 0, ""
0FE9                F4:          
0FE9   CD AE 03               CALL   go   
0FEC   00 00                  DW   NUL   
0FEE   F4 0F                  DW   f4M_2999S21   
0FF0   F2 0F                  DW   $+2   
0FF2   00                     DB   0   
0FF3   00                     .PSTR   ""   
0FF4                F4M_2999S21:      
0FF4   00                     DB   0   
0FF5                          ALIGN   $100   
1000                TESTSSTART:      
1000                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1000                             ; test "0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", 0
1000                             ; test "0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", 0
1000                             ; test "0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", 0
1000                             ; test "[10 20 30] /ai \\a{%a.} /fe", 0
1000                             ; test "[1 2 3].a", 0
1000                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
1000                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1000                             ; test "/hb/bm$1234.",0
1000                             ; test "/bm257.",0
1000                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1000                             ; test "10 0 -1 /rg \\a{%a.} /fe", 0
1000                             ; test "0 10 1 /f1 \\a{%a.} /fe", 0
1000                             ; test "[1 2 3 /ab].a",0
1000                             ; call printStr
1000                             ; .cstr "Done!"
1000                             ; HALT
1000                          ;*Macro unroll:  test "/f", false
1000   31 00 4C               LD   SP,STACK   
1003   CD C6 0E               CALL   coldInit   
1006   CD 78 4A               CALL   execStr   
1009   2F 66 00               DB   "/f",0   
100C   E1                     POP   HL   
100D   E5                     PUSH   HL   
100E   11 00 00               LD   DE,false   
1011   B7                     OR   A   
1012   ED 52                  SBC   HL,DE   
1014   7D                     LD   A,L   
1015   B4                     OR   H   
1016   CA 68 10               JP   Z,expectM_3020S48   
1019   CD 92 0E               CALL   printStr   
101C   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
1025   CD 92 0E               CALL   printStr   
1028   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1037   21 00 00               LD   hl,false   
103A   E5                     PUSH   hl   
103B   E5                     PUSH   hl   
103C   CD 99 0F               CALL   run   
103F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1046   CD 92 0E               CALL   printStr   
1049   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1056   E1                     POP   hl   
1057   E5                     PUSH   hl   
1058   E5                     PUSH   hl   
1059   CD 99 0F               CALL   run   
105C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1067   76                     HALT      
1068                EXPECTM_3020S48:      
1068   E1                     POP   HL   
1069                          ;*Macro unroll:  test "/t", true
1069   31 00 4C               LD   SP,STACK   
106C   CD C6 0E               CALL   coldInit   
106F   CD 78 4A               CALL   execStr   
1072   2F 74 00               DB   "/t",0   
1075   E1                     POP   HL   
1076   E5                     PUSH   HL   
1077   11 FF FF               LD   DE,true   
107A   B7                     OR   A   
107B   ED 52                  SBC   HL,DE   
107D   7D                     LD   A,L   
107E   B4                     OR   H   
107F   CA D1 10               JP   Z,expectM_3021S49   
1082   CD 92 0E               CALL   printStr   
1085   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
108E   CD 92 0E               CALL   printStr   
1091   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10A0   21 FF FF               LD   hl,true   
10A3   E5                     PUSH   hl   
10A4   E5                     PUSH   hl   
10A5   CD 99 0F               CALL   run   
10A8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
10AF   CD 92 0E               CALL   printStr   
10B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10BF   E1                     POP   hl   
10C0   E5                     PUSH   hl   
10C1   E5                     PUSH   hl   
10C2   CD 99 0F               CALL   run   
10C5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
10D0   76                     HALT      
10D1                EXPECTM_3021S49:      
10D1   E1                     POP   HL   
10D2                          ;*Macro unroll:  test "1", 1
10D2   31 00 4C               LD   SP,STACK   
10D5   CD C6 0E               CALL   coldInit   
10D8   CD 78 4A               CALL   execStr   
10DB   31 00                  DB   "1",0   
10DD   E1                     POP   HL   
10DE   E5                     PUSH   HL   
10DF   11 01 00               LD   DE,1   
10E2   B7                     OR   A   
10E3   ED 52                  SBC   HL,DE   
10E5   7D                     LD   A,L   
10E6   B4                     OR   H   
10E7   CA 38 11               JP   Z,expectM_3022S50   
10EA   CD 92 0E               CALL   printStr   
10ED   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
10F5   CD 92 0E               CALL   printStr   
10F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1107   21 01 00               LD   hl,1   
110A   E5                     PUSH   hl   
110B   E5                     PUSH   hl   
110C   CD 99 0F               CALL   run   
110F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1116   CD 92 0E               CALL   printStr   
1119   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1126   E1                     POP   hl   
1127   E5                     PUSH   hl   
1128   E5                     PUSH   hl   
1129   CD 99 0F               CALL   run   
112C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1137   76                     HALT      
1138                EXPECTM_3022S50:      
1138   E1                     POP   HL   
1139                          ;*Macro unroll:  test "2", 2
1139   31 00 4C               LD   SP,STACK   
113C   CD C6 0E               CALL   coldInit   
113F   CD 78 4A               CALL   execStr   
1142   32 00                  DB   "2",0   
1144   E1                     POP   HL   
1145   E5                     PUSH   HL   
1146   11 02 00               LD   DE,2   
1149   B7                     OR   A   
114A   ED 52                  SBC   HL,DE   
114C   7D                     LD   A,L   
114D   B4                     OR   H   
114E   CA 9F 11               JP   Z,expectM_3023S51   
1151   CD 92 0E               CALL   printStr   
1154   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
115C   CD 92 0E               CALL   printStr   
115F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
116E   21 02 00               LD   hl,2   
1171   E5                     PUSH   hl   
1172   E5                     PUSH   hl   
1173   CD 99 0F               CALL   run   
1176   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
117D   CD 92 0E               CALL   printStr   
1180   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
118D   E1                     POP   hl   
118E   E5                     PUSH   hl   
118F   E5                     PUSH   hl   
1190   CD 99 0F               CALL   run   
1193   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
119E   76                     HALT      
119F                EXPECTM_3023S51:      
119F   E1                     POP   HL   
11A0                          ;*Macro unroll:  test "1", 1
11A0   31 00 4C               LD   SP,STACK   
11A3   CD C6 0E               CALL   coldInit   
11A6   CD 78 4A               CALL   execStr   
11A9   31 00                  DB   "1",0   
11AB   E1                     POP   HL   
11AC   E5                     PUSH   HL   
11AD   11 01 00               LD   DE,1   
11B0   B7                     OR   A   
11B1   ED 52                  SBC   HL,DE   
11B3   7D                     LD   A,L   
11B4   B4                     OR   H   
11B5   CA 06 12               JP   Z,expectM_3024S52   
11B8   CD 92 0E               CALL   printStr   
11BB   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
11C3   CD 92 0E               CALL   printStr   
11C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11D5   21 01 00               LD   hl,1   
11D8   E5                     PUSH   hl   
11D9   E5                     PUSH   hl   
11DA   CD 99 0F               CALL   run   
11DD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
11E4   CD 92 0E               CALL   printStr   
11E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11F4   E1                     POP   hl   
11F5   E5                     PUSH   hl   
11F6   E5                     PUSH   hl   
11F7   CD 99 0F               CALL   run   
11FA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1205   76                     HALT      
1206                EXPECTM_3024S52:      
1206   E1                     POP   HL   
1207                          ;*Macro unroll:  test "0", 0
1207   31 00 4C               LD   SP,STACK   
120A   CD C6 0E               CALL   coldInit   
120D   CD 78 4A               CALL   execStr   
1210   30 00                  DB   "0",0   
1212   E1                     POP   HL   
1213   E5                     PUSH   HL   
1214   11 00 00               LD   DE,0   
1217   B7                     OR   A   
1218   ED 52                  SBC   HL,DE   
121A   7D                     LD   A,L   
121B   B4                     OR   H   
121C   CA 6D 12               JP   Z,expectM_3025S53   
121F   CD 92 0E               CALL   printStr   
1222   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
122A   CD 92 0E               CALL   printStr   
122D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
123C   21 00 00               LD   hl,0   
123F   E5                     PUSH   hl   
1240   E5                     PUSH   hl   
1241   CD 99 0F               CALL   run   
1244   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
124B   CD 92 0E               CALL   printStr   
124E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
125B   E1                     POP   hl   
125C   E5                     PUSH   hl   
125D   E5                     PUSH   hl   
125E   CD 99 0F               CALL   run   
1261   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
126C   76                     HALT      
126D                EXPECTM_3025S53:      
126D   E1                     POP   HL   
126E                          ;*Macro unroll:  test "10", 10
126E   31 00 4C               LD   SP,STACK   
1271   CD C6 0E               CALL   coldInit   
1274   CD 78 4A               CALL   execStr   
1277   31 30 00               DB   "10",0   
127A   E1                     POP   HL   
127B   E5                     PUSH   HL   
127C   11 0A 00               LD   DE,10   
127F   B7                     OR   A   
1280   ED 52                  SBC   HL,DE   
1282   7D                     LD   A,L   
1283   B4                     OR   H   
1284   CA D6 12               JP   Z,expectM_3026S54   
1287   CD 92 0E               CALL   printStr   
128A   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1293   CD 92 0E               CALL   printStr   
1296   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12A5   21 0A 00               LD   hl,10   
12A8   E5                     PUSH   hl   
12A9   E5                     PUSH   hl   
12AA   CD 99 0F               CALL   run   
12AD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
12B4   CD 92 0E               CALL   printStr   
12B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12C4   E1                     POP   hl   
12C5   E5                     PUSH   hl   
12C6   E5                     PUSH   hl   
12C7   CD 99 0F               CALL   run   
12CA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
12D5   76                     HALT      
12D6                EXPECTM_3026S54:      
12D6   E1                     POP   HL   
12D7                          ;*Macro unroll:  test "123", 123
12D7   31 00 4C               LD   SP,STACK   
12DA   CD C6 0E               CALL   coldInit   
12DD   CD 78 4A               CALL   execStr   
12E0   31 32 33 00            DB   "123",0   
12E4   E1                     POP   HL   
12E5   E5                     PUSH   HL   
12E6   11 7B 00               LD   DE,123   
12E9   B7                     OR   A   
12EA   ED 52                  SBC   HL,DE   
12EC   7D                     LD   A,L   
12ED   B4                     OR   H   
12EE   CA 41 13               JP   Z,expectM_3027S55   
12F1   CD 92 0E               CALL   printStr   
12F4   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
12FE   CD 92 0E               CALL   printStr   
1301   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1310   21 7B 00               LD   hl,123   
1313   E5                     PUSH   hl   
1314   E5                     PUSH   hl   
1315   CD 99 0F               CALL   run   
1318   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
131F   CD 92 0E               CALL   printStr   
1322   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
132F   E1                     POP   hl   
1330   E5                     PUSH   hl   
1331   E5                     PUSH   hl   
1332   CD 99 0F               CALL   run   
1335   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1340   76                     HALT      
1341                EXPECTM_3027S55:      
1341   E1                     POP   HL   
1342                          ;*Macro unroll:  test "-1",-1
1342   31 00 4C               LD   SP,STACK   
1345   CD C6 0E               CALL   coldInit   
1348   CD 78 4A               CALL   execStr   
134B   2D 31 00               DB   "-1",0   
134E   E1                     POP   HL   
134F   E5                     PUSH   HL   
1350   11 FF FF               LD   DE,-1   
1353   B7                     OR   A   
1354   ED 52                  SBC   HL,DE   
1356   7D                     LD   A,L   
1357   B4                     OR   H   
1358   CA AA 13               JP   Z,expectM_3028S56   
135B   CD 92 0E               CALL   printStr   
135E   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1367   CD 92 0E               CALL   printStr   
136A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1379   21 FF FF               LD   hl,-1   
137C   E5                     PUSH   hl   
137D   E5                     PUSH   hl   
137E   CD 99 0F               CALL   run   
1381   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1388   CD 92 0E               CALL   printStr   
138B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1398   E1                     POP   hl   
1399   E5                     PUSH   hl   
139A   E5                     PUSH   hl   
139B   CD 99 0F               CALL   run   
139E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
13A9   76                     HALT      
13AA                EXPECTM_3028S56:      
13AA   E1                     POP   HL   
13AB                          ;*Macro unroll:  test "~a", $61
13AB   31 00 4C               LD   SP,STACK   
13AE   CD C6 0E               CALL   coldInit   
13B1   CD 78 4A               CALL   execStr   
13B4   7E 61 00               DB   "~a",0   
13B7   E1                     POP   HL   
13B8   E5                     PUSH   HL   
13B9   11 61 00               LD   DE,$61   
13BC   B7                     OR   A   
13BD   ED 52                  SBC   HL,DE   
13BF   7D                     LD   A,L   
13C0   B4                     OR   H   
13C1   CA 13 14               JP   Z,expectM_3029S57   
13C4   CD 92 0E               CALL   printStr   
13C7   43 6F 64 65 3A 20 7E 61 00 .CSTR   "Code: ","~a"   
13D0   CD 92 0E               CALL   printStr   
13D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E2   21 61 00               LD   hl,$61   
13E5   E5                     PUSH   hl   
13E6   E5                     PUSH   hl   
13E7   CD 99 0F               CALL   run   
13EA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
13F1   CD 92 0E               CALL   printStr   
13F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1401   E1                     POP   hl   
1402   E5                     PUSH   hl   
1403   E5                     PUSH   hl   
1404   CD 99 0F               CALL   run   
1407   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1412   76                     HALT      
1413                EXPECTM_3029S57:      
1413   E1                     POP   HL   
1414                          ;*Macro unroll:  test "~~", $7e
1414   31 00 4C               LD   SP,STACK   
1417   CD C6 0E               CALL   coldInit   
141A   CD 78 4A               CALL   execStr   
141D   7E 7E 00               DB   "~~",0   
1420   E1                     POP   HL   
1421   E5                     PUSH   HL   
1422   11 7E 00               LD   DE,$7e   
1425   B7                     OR   A   
1426   ED 52                  SBC   HL,DE   
1428   7D                     LD   A,L   
1429   B4                     OR   H   
142A   CA 7C 14               JP   Z,expectM_3030S58   
142D   CD 92 0E               CALL   printStr   
1430   43 6F 64 65 3A 20 7E 7E 00 .CSTR   "Code: ","~~"   
1439   CD 92 0E               CALL   printStr   
143C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
144B   21 7E 00               LD   hl,$7e   
144E   E5                     PUSH   hl   
144F   E5                     PUSH   hl   
1450   CD 99 0F               CALL   run   
1453   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
145A   CD 92 0E               CALL   printStr   
145D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146A   E1                     POP   hl   
146B   E5                     PUSH   hl   
146C   E5                     PUSH   hl   
146D   CD 99 0F               CALL   run   
1470   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
147B   76                     HALT      
147C                EXPECTM_3030S58:      
147C   E1                     POP   HL   
147D                          ;*Macro unroll:  test "$10", $10
147D   31 00 4C               LD   SP,STACK   
1480   CD C6 0E               CALL   coldInit   
1483   CD 78 4A               CALL   execStr   
1486   24 31 30 00            DB   "$10",0   
148A   E1                     POP   HL   
148B   E5                     PUSH   HL   
148C   11 10 00               LD   DE,$10   
148F   B7                     OR   A   
1490   ED 52                  SBC   HL,DE   
1492   7D                     LD   A,L   
1493   B4                     OR   H   
1494   CA E7 14               JP   Z,expectM_3031S59   
1497   CD 92 0E               CALL   printStr   
149A   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
14A4   CD 92 0E               CALL   printStr   
14A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14B6   21 10 00               LD   hl,$10   
14B9   E5                     PUSH   hl   
14BA   E5                     PUSH   hl   
14BB   CD 99 0F               CALL   run   
14BE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
14C5   CD 92 0E               CALL   printStr   
14C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14D5   E1                     POP   hl   
14D6   E5                     PUSH   hl   
14D7   E5                     PUSH   hl   
14D8   CD 99 0F               CALL   run   
14DB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
14E6   76                     HALT      
14E7                EXPECTM_3031S59:      
14E7   E1                     POP   HL   
14E8                          ;*Macro unroll:  test "$FF", $FF
14E8   31 00 4C               LD   SP,STACK   
14EB   CD C6 0E               CALL   coldInit   
14EE   CD 78 4A               CALL   execStr   
14F1   24 46 46 00            DB   "$FF",0   
14F5   E1                     POP   HL   
14F6   E5                     PUSH   HL   
14F7   11 FF 00               LD   DE,$FF   
14FA   B7                     OR   A   
14FB   ED 52                  SBC   HL,DE   
14FD   7D                     LD   A,L   
14FE   B4                     OR   H   
14FF   CA 52 15               JP   Z,expectM_3032S60   
1502   CD 92 0E               CALL   printStr   
1505   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
150F   CD 92 0E               CALL   printStr   
1512   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1521   21 FF 00               LD   hl,$FF   
1524   E5                     PUSH   hl   
1525   E5                     PUSH   hl   
1526   CD 99 0F               CALL   run   
1529   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1530   CD 92 0E               CALL   printStr   
1533   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1540   E1                     POP   hl   
1541   E5                     PUSH   hl   
1542   E5                     PUSH   hl   
1543   CD 99 0F               CALL   run   
1546   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1551   76                     HALT      
1552                EXPECTM_3032S60:      
1552   E1                     POP   HL   
1553                          ;*Macro unroll:  test "-1 2 +",1
1553   31 00 4C               LD   SP,STACK   
1556   CD C6 0E               CALL   coldInit   
1559   CD 78 4A               CALL   execStr   
155C   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1563   E1                     POP   HL   
1564   E5                     PUSH   HL   
1565   11 01 00               LD   DE,1   
1568   B7                     OR   A   
1569   ED 52                  SBC   HL,DE   
156B   7D                     LD   A,L   
156C   B4                     OR   H   
156D   CA C3 15               JP   Z,expectM_3033S61   
1570   CD 92 0E               CALL   printStr   
1573   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1580   CD 92 0E               CALL   printStr   
1583   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1592   21 01 00               LD   hl,1   
1595   E5                     PUSH   hl   
1596   E5                     PUSH   hl   
1597   CD 99 0F               CALL   run   
159A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
15A1   CD 92 0E               CALL   printStr   
15A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15B1   E1                     POP   hl   
15B2   E5                     PUSH   hl   
15B3   E5                     PUSH   hl   
15B4   CD 99 0F               CALL   run   
15B7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
15C2   76                     HALT      
15C3                EXPECTM_3033S61:      
15C3   E1                     POP   HL   
15C4                          ;*Macro unroll:  test "-1 1 +",0
15C4   31 00 4C               LD   SP,STACK   
15C7   CD C6 0E               CALL   coldInit   
15CA   CD 78 4A               CALL   execStr   
15CD   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
15D4   E1                     POP   HL   
15D5   E5                     PUSH   HL   
15D6   11 00 00               LD   DE,0   
15D9   B7                     OR   A   
15DA   ED 52                  SBC   HL,DE   
15DC   7D                     LD   A,L   
15DD   B4                     OR   H   
15DE   CA 34 16               JP   Z,expectM_3034S62   
15E1   CD 92 0E               CALL   printStr   
15E4   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
15F1   CD 92 0E               CALL   printStr   
15F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1603   21 00 00               LD   hl,0   
1606   E5                     PUSH   hl   
1607   E5                     PUSH   hl   
1608   CD 99 0F               CALL   run   
160B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1612   CD 92 0E               CALL   printStr   
1615   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1622   E1                     POP   hl   
1623   E5                     PUSH   hl   
1624   E5                     PUSH   hl   
1625   CD 99 0F               CALL   run   
1628   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1633   76                     HALT      
1634                EXPECTM_3034S62:      
1634   E1                     POP   HL   
1635                          ;*Macro unroll:  test "1 2 +", 3
1635   31 00 4C               LD   SP,STACK   
1638   CD C6 0E               CALL   coldInit   
163B   CD 78 4A               CALL   execStr   
163E   31 20 32 20 2B 00      DB   "1 2 +",0   
1644   E1                     POP   HL   
1645   E5                     PUSH   HL   
1646   11 03 00               LD   DE,3   
1649   B7                     OR   A   
164A   ED 52                  SBC   HL,DE   
164C   7D                     LD   A,L   
164D   B4                     OR   H   
164E   CA A3 16               JP   Z,expectM_3035S63   
1651   CD 92 0E               CALL   printStr   
1654   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1660   CD 92 0E               CALL   printStr   
1663   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1672   21 03 00               LD   hl,3   
1675   E5                     PUSH   hl   
1676   E5                     PUSH   hl   
1677   CD 99 0F               CALL   run   
167A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1681   CD 92 0E               CALL   printStr   
1684   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1691   E1                     POP   hl   
1692   E5                     PUSH   hl   
1693   E5                     PUSH   hl   
1694   CD 99 0F               CALL   run   
1697   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
16A2   76                     HALT      
16A3                EXPECTM_3035S63:      
16A3   E1                     POP   HL   
16A4                          ;*Macro unroll:  test "4 1 2 +", 3
16A4   31 00 4C               LD   SP,STACK   
16A7   CD C6 0E               CALL   coldInit   
16AA   CD 78 4A               CALL   execStr   
16AD   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
16B5   E1                     POP   HL   
16B6   E5                     PUSH   HL   
16B7   11 03 00               LD   DE,3   
16BA   B7                     OR   A   
16BB   ED 52                  SBC   HL,DE   
16BD   7D                     LD   A,L   
16BE   B4                     OR   H   
16BF   CA 16 17               JP   Z,expectM_3036S64   
16C2   CD 92 0E               CALL   printStr   
16C5   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
16D3   CD 92 0E               CALL   printStr   
16D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16E5   21 03 00               LD   hl,3   
16E8   E5                     PUSH   hl   
16E9   E5                     PUSH   hl   
16EA   CD 99 0F               CALL   run   
16ED   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
16F4   CD 92 0E               CALL   printStr   
16F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1704   E1                     POP   hl   
1705   E5                     PUSH   hl   
1706   E5                     PUSH   hl   
1707   CD 99 0F               CALL   run   
170A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1715   76                     HALT      
1716                EXPECTM_3036S64:      
1716   E1                     POP   HL   
1717                          ;*Macro unroll:  test "123 456 +", 123+456
1717   31 00 4C               LD   SP,STACK   
171A   CD C6 0E               CALL   coldInit   
171D   CD 78 4A               CALL   execStr   
1720   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
172A   E1                     POP   HL   
172B   E5                     PUSH   HL   
172C   11 43 02               LD   DE,123+456   
172F   B7                     OR   A   
1730   ED 52                  SBC   HL,DE   
1732   7D                     LD   A,L   
1733   B4                     OR   H   
1734   CA 8D 17               JP   Z,expectM_3037S65   
1737   CD 92 0E               CALL   printStr   
173A   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
174A   CD 92 0E               CALL   printStr   
174D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
175C   21 43 02               LD   hl,123+456   
175F   E5                     PUSH   hl   
1760   E5                     PUSH   hl   
1761   CD 99 0F               CALL   run   
1764   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
176B   CD 92 0E               CALL   printStr   
176E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
177B   E1                     POP   hl   
177C   E5                     PUSH   hl   
177D   E5                     PUSH   hl   
177E   CD 99 0F               CALL   run   
1781   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
178C   76                     HALT      
178D                EXPECTM_3037S65:      
178D   E1                     POP   HL   
178E                          ;*Macro unroll:  test "64 128 +", 64+128
178E   31 00 4C               LD   SP,STACK   
1791   CD C6 0E               CALL   coldInit   
1794   CD 78 4A               CALL   execStr   
1797   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
17A0   E1                     POP   HL   
17A1   E5                     PUSH   HL   
17A2   11 C0 00               LD   DE,64+128   
17A5   B7                     OR   A   
17A6   ED 52                  SBC   HL,DE   
17A8   7D                     LD   A,L   
17A9   B4                     OR   H   
17AA   CA 02 18               JP   Z,expectM_3038S66   
17AD   CD 92 0E               CALL   printStr   
17B0   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
17BF   CD 92 0E               CALL   printStr   
17C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D1   21 C0 00               LD   hl,64+128   
17D4   E5                     PUSH   hl   
17D5   E5                     PUSH   hl   
17D6   CD 99 0F               CALL   run   
17D9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
17E0   CD 92 0E               CALL   printStr   
17E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F0   E1                     POP   hl   
17F1   E5                     PUSH   hl   
17F2   E5                     PUSH   hl   
17F3   CD 99 0F               CALL   run   
17F6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1801   76                     HALT      
1802                EXPECTM_3038S66:      
1802   E1                     POP   HL   
1803                          ;*Macro unroll:  test "1 2 +", 3
1803   31 00 4C               LD   SP,STACK   
1806   CD C6 0E               CALL   coldInit   
1809   CD 78 4A               CALL   execStr   
180C   31 20 32 20 2B 00      DB   "1 2 +",0   
1812   E1                     POP   HL   
1813   E5                     PUSH   HL   
1814   11 03 00               LD   DE,3   
1817   B7                     OR   A   
1818   ED 52                  SBC   HL,DE   
181A   7D                     LD   A,L   
181B   B4                     OR   H   
181C   CA 71 18               JP   Z,expectM_3039S67   
181F   CD 92 0E               CALL   printStr   
1822   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
182E   CD 92 0E               CALL   printStr   
1831   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1840   21 03 00               LD   hl,3   
1843   E5                     PUSH   hl   
1844   E5                     PUSH   hl   
1845   CD 99 0F               CALL   run   
1848   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
184F   CD 92 0E               CALL   printStr   
1852   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
185F   E1                     POP   hl   
1860   E5                     PUSH   hl   
1861   E5                     PUSH   hl   
1862   CD 99 0F               CALL   run   
1865   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1870   76                     HALT      
1871                EXPECTM_3039S67:      
1871   E1                     POP   HL   
1872                          ;*Macro unroll:  test "1a= a++ a",2
1872   31 00 4C               LD   SP,STACK   
1875   CD C6 0E               CALL   coldInit   
1878   CD 78 4A               CALL   execStr   
187B   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1885   E1                     POP   HL   
1886   E5                     PUSH   HL   
1887   11 02 00               LD   DE,2   
188A   B7                     OR   A   
188B   ED 52                  SBC   HL,DE   
188D   7D                     LD   A,L   
188E   B4                     OR   H   
188F   CA E8 18               JP   Z,expectM_3040S68   
1892   CD 92 0E               CALL   printStr   
1895   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
18A5   CD 92 0E               CALL   printStr   
18A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18B7   21 02 00               LD   hl,2   
18BA   E5                     PUSH   hl   
18BB   E5                     PUSH   hl   
18BC   CD 99 0F               CALL   run   
18BF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
18C6   CD 92 0E               CALL   printStr   
18C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18D6   E1                     POP   hl   
18D7   E5                     PUSH   hl   
18D8   E5                     PUSH   hl   
18D9   CD 99 0F               CALL   run   
18DC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
18E7   76                     HALT      
18E8                EXPECTM_3040S68:      
18E8   E1                     POP   HL   
18E9                          ;*Macro unroll:  test "-1 -1 -",0
18E9   31 00 4C               LD   SP,STACK   
18EC   CD C6 0E               CALL   coldInit   
18EF   CD 78 4A               CALL   execStr   
18F2   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
18FA   E1                     POP   HL   
18FB   E5                     PUSH   HL   
18FC   11 00 00               LD   DE,0   
18FF   B7                     OR   A   
1900   ED 52                  SBC   HL,DE   
1902   7D                     LD   A,L   
1903   B4                     OR   H   
1904   CA 5B 19               JP   Z,expectM_3041S69   
1907   CD 92 0E               CALL   printStr   
190A   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1918   CD 92 0E               CALL   printStr   
191B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
192A   21 00 00               LD   hl,0   
192D   E5                     PUSH   hl   
192E   E5                     PUSH   hl   
192F   CD 99 0F               CALL   run   
1932   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1939   CD 92 0E               CALL   printStr   
193C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1949   E1                     POP   hl   
194A   E5                     PUSH   hl   
194B   E5                     PUSH   hl   
194C   CD 99 0F               CALL   run   
194F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
195A   76                     HALT      
195B                EXPECTM_3041S69:      
195B   E1                     POP   HL   
195C                          ;*Macro unroll:  test "5 3 -", 2
195C   31 00 4C               LD   SP,STACK   
195F   CD C6 0E               CALL   coldInit   
1962   CD 78 4A               CALL   execStr   
1965   35 20 33 20 2D 00      DB   "5 3 -",0   
196B   E1                     POP   HL   
196C   E5                     PUSH   HL   
196D   11 02 00               LD   DE,2   
1970   B7                     OR   A   
1971   ED 52                  SBC   HL,DE   
1973   7D                     LD   A,L   
1974   B4                     OR   H   
1975   CA CA 19               JP   Z,expectM_3042S70   
1978   CD 92 0E               CALL   printStr   
197B   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1987   CD 92 0E               CALL   printStr   
198A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1999   21 02 00               LD   hl,2   
199C   E5                     PUSH   hl   
199D   E5                     PUSH   hl   
199E   CD 99 0F               CALL   run   
19A1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
19A8   CD 92 0E               CALL   printStr   
19AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19B8   E1                     POP   hl   
19B9   E5                     PUSH   hl   
19BA   E5                     PUSH   hl   
19BB   CD 99 0F               CALL   run   
19BE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
19C9   76                     HALT      
19CA                EXPECTM_3042S70:      
19CA   E1                     POP   HL   
19CB                          ;*Macro unroll:  test "2 1 -",1
19CB   31 00 4C               LD   SP,STACK   
19CE   CD C6 0E               CALL   coldInit   
19D1   CD 78 4A               CALL   execStr   
19D4   32 20 31 20 2D 00      DB   "2 1 -",0   
19DA   E1                     POP   HL   
19DB   E5                     PUSH   HL   
19DC   11 01 00               LD   DE,1   
19DF   B7                     OR   A   
19E0   ED 52                  SBC   HL,DE   
19E2   7D                     LD   A,L   
19E3   B4                     OR   H   
19E4   CA 39 1A               JP   Z,expectM_3043S71   
19E7   CD 92 0E               CALL   printStr   
19EA   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
19F6   CD 92 0E               CALL   printStr   
19F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A08   21 01 00               LD   hl,1   
1A0B   E5                     PUSH   hl   
1A0C   E5                     PUSH   hl   
1A0D   CD 99 0F               CALL   run   
1A10   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1A17   CD 92 0E               CALL   printStr   
1A1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A27   E1                     POP   hl   
1A28   E5                     PUSH   hl   
1A29   E5                     PUSH   hl   
1A2A   CD 99 0F               CALL   run   
1A2D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A38   76                     HALT      
1A39                EXPECTM_3043S71:      
1A39   E1                     POP   HL   
1A3A                          ;*Macro unroll:  test "3a= a-- a",2
1A3A   31 00 4C               LD   SP,STACK   
1A3D   CD C6 0E               CALL   coldInit   
1A40   CD 78 4A               CALL   execStr   
1A43   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1A4D   E1                     POP   HL   
1A4E   E5                     PUSH   HL   
1A4F   11 02 00               LD   DE,2   
1A52   B7                     OR   A   
1A53   ED 52                  SBC   HL,DE   
1A55   7D                     LD   A,L   
1A56   B4                     OR   H   
1A57   CA B0 1A               JP   Z,expectM_3044S72   
1A5A   CD 92 0E               CALL   printStr   
1A5D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1A6D   CD 92 0E               CALL   printStr   
1A70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A7F   21 02 00               LD   hl,2   
1A82   E5                     PUSH   hl   
1A83   E5                     PUSH   hl   
1A84   CD 99 0F               CALL   run   
1A87   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1A8E   CD 92 0E               CALL   printStr   
1A91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A9E   E1                     POP   hl   
1A9F   E5                     PUSH   hl   
1AA0   E5                     PUSH   hl   
1AA1   CD 99 0F               CALL   run   
1AA4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1AAF   76                     HALT      
1AB0                EXPECTM_3044S72:      
1AB0   E1                     POP   HL   
1AB1                          ;*Macro unroll:  test "3 5 &", 1
1AB1   31 00 4C               LD   SP,STACK   
1AB4   CD C6 0E               CALL   coldInit   
1AB7   CD 78 4A               CALL   execStr   
1ABA   33 20 35 20 26 00      DB   "3 5 &",0   
1AC0   E1                     POP   HL   
1AC1   E5                     PUSH   HL   
1AC2   11 01 00               LD   DE,1   
1AC5   B7                     OR   A   
1AC6   ED 52                  SBC   HL,DE   
1AC8   7D                     LD   A,L   
1AC9   B4                     OR   H   
1ACA   CA 1F 1B               JP   Z,expectM_3045S73   
1ACD   CD 92 0E               CALL   printStr   
1AD0   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1ADC   CD 92 0E               CALL   printStr   
1ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AEE   21 01 00               LD   hl,1   
1AF1   E5                     PUSH   hl   
1AF2   E5                     PUSH   hl   
1AF3   CD 99 0F               CALL   run   
1AF6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1AFD   CD 92 0E               CALL   printStr   
1B00   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B0D   E1                     POP   hl   
1B0E   E5                     PUSH   hl   
1B0F   E5                     PUSH   hl   
1B10   CD 99 0F               CALL   run   
1B13   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1B1E   76                     HALT      
1B1F                EXPECTM_3045S73:      
1B1F   E1                     POP   HL   
1B20                          ;*Macro unroll:  test "3 5 |", 7
1B20   31 00 4C               LD   SP,STACK   
1B23   CD C6 0E               CALL   coldInit   
1B26   CD 78 4A               CALL   execStr   
1B29   33 20 35 20 7C 00      DB   "3 5 |",0   
1B2F   E1                     POP   HL   
1B30   E5                     PUSH   HL   
1B31   11 07 00               LD   DE,7   
1B34   B7                     OR   A   
1B35   ED 52                  SBC   HL,DE   
1B37   7D                     LD   A,L   
1B38   B4                     OR   H   
1B39   CA 8E 1B               JP   Z,expectM_3046S74   
1B3C   CD 92 0E               CALL   printStr   
1B3F   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1B4B   CD 92 0E               CALL   printStr   
1B4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B5D   21 07 00               LD   hl,7   
1B60   E5                     PUSH   hl   
1B61   E5                     PUSH   hl   
1B62   CD 99 0F               CALL   run   
1B65   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1B6C   CD 92 0E               CALL   printStr   
1B6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B7C   E1                     POP   hl   
1B7D   E5                     PUSH   hl   
1B7E   E5                     PUSH   hl   
1B7F   CD 99 0F               CALL   run   
1B82   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1B8D   76                     HALT      
1B8E                EXPECTM_3046S74:      
1B8E   E1                     POP   HL   
1B8F                          ;*Macro unroll:  test "3 5 /x", 6
1B8F   31 00 4C               LD   SP,STACK   
1B92   CD C6 0E               CALL   coldInit   
1B95   CD 78 4A               CALL   execStr   
1B98   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1B9F   E1                     POP   HL   
1BA0   E5                     PUSH   HL   
1BA1   11 06 00               LD   DE,6   
1BA4   B7                     OR   A   
1BA5   ED 52                  SBC   HL,DE   
1BA7   7D                     LD   A,L   
1BA8   B4                     OR   H   
1BA9   CA FF 1B               JP   Z,expectM_3047S75   
1BAC   CD 92 0E               CALL   printStr   
1BAF   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1BBC   CD 92 0E               CALL   printStr   
1BBF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BCE   21 06 00               LD   hl,6   
1BD1   E5                     PUSH   hl   
1BD2   E5                     PUSH   hl   
1BD3   CD 99 0F               CALL   run   
1BD6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1BDD   CD 92 0E               CALL   printStr   
1BE0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BED   E1                     POP   hl   
1BEE   E5                     PUSH   hl   
1BEF   E5                     PUSH   hl   
1BF0   CD 99 0F               CALL   run   
1BF3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1BFE   76                     HALT      
1BFF                EXPECTM_3047S75:      
1BFF   E1                     POP   HL   
1C00                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1C00   31 00 4C               LD   SP,STACK   
1C03   CD C6 0E               CALL   coldInit   
1C06   CD 78 4A               CALL   execStr   
1C09   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1C18   E1                     POP   HL   
1C19   E5                     PUSH   HL   
1C1A   11 06 00               LD   DE,6   
1C1D   B7                     OR   A   
1C1E   ED 52                  SBC   HL,DE   
1C20   7D                     LD   A,L   
1C21   B4                     OR   H   
1C22   CA 80 1C               JP   Z,expectM_3048S76   
1C25   CD 92 0E               CALL   printStr   
1C28   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1C3D   CD 92 0E               CALL   printStr   
1C40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C4F   21 06 00               LD   hl,6   
1C52   E5                     PUSH   hl   
1C53   E5                     PUSH   hl   
1C54   CD 99 0F               CALL   run   
1C57   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1C5E   CD 92 0E               CALL   printStr   
1C61   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C6E   E1                     POP   hl   
1C6F   E5                     PUSH   hl   
1C70   E5                     PUSH   hl   
1C71   CD 99 0F               CALL   run   
1C74   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1C7F   76                     HALT      
1C80                EXPECTM_3048S76:      
1C80   E1                     POP   HL   
1C81                          ;*Macro unroll:  test "2 3 *", 6
1C81   31 00 4C               LD   SP,STACK   
1C84   CD C6 0E               CALL   coldInit   
1C87   CD 78 4A               CALL   execStr   
1C8A   32 20 33 20 2A 00      DB   "2 3 *",0   
1C90   E1                     POP   HL   
1C91   E5                     PUSH   HL   
1C92   11 06 00               LD   DE,6   
1C95   B7                     OR   A   
1C96   ED 52                  SBC   HL,DE   
1C98   7D                     LD   A,L   
1C99   B4                     OR   H   
1C9A   CA EF 1C               JP   Z,expectM_3049S77   
1C9D   CD 92 0E               CALL   printStr   
1CA0   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1CAC   CD 92 0E               CALL   printStr   
1CAF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CBE   21 06 00               LD   hl,6   
1CC1   E5                     PUSH   hl   
1CC2   E5                     PUSH   hl   
1CC3   CD 99 0F               CALL   run   
1CC6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1CCD   CD 92 0E               CALL   printStr   
1CD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CDD   E1                     POP   hl   
1CDE   E5                     PUSH   hl   
1CDF   E5                     PUSH   hl   
1CE0   CD 99 0F               CALL   run   
1CE3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1CEE   76                     HALT      
1CEF                EXPECTM_3049S77:      
1CEF   E1                     POP   HL   
1CF0                          ;*Macro unroll:  test "1 2 3 + *", 5
1CF0   31 00 4C               LD   SP,STACK   
1CF3   CD C6 0E               CALL   coldInit   
1CF6   CD 78 4A               CALL   execStr   
1CF9   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1D03   E1                     POP   HL   
1D04   E5                     PUSH   HL   
1D05   11 05 00               LD   DE,5   
1D08   B7                     OR   A   
1D09   ED 52                  SBC   HL,DE   
1D0B   7D                     LD   A,L   
1D0C   B4                     OR   H   
1D0D   CA 66 1D               JP   Z,expectM_3050S78   
1D10   CD 92 0E               CALL   printStr   
1D13   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1D23   CD 92 0E               CALL   printStr   
1D26   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D35   21 05 00               LD   hl,5   
1D38   E5                     PUSH   hl   
1D39   E5                     PUSH   hl   
1D3A   CD 99 0F               CALL   run   
1D3D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1D44   CD 92 0E               CALL   printStr   
1D47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D54   E1                     POP   hl   
1D55   E5                     PUSH   hl   
1D56   E5                     PUSH   hl   
1D57   CD 99 0F               CALL   run   
1D5A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1D65   76                     HALT      
1D66                EXPECTM_3050S78:      
1D66   E1                     POP   HL   
1D67                          ;*Macro unroll:  test "7 3 /", 2
1D67   31 00 4C               LD   SP,STACK   
1D6A   CD C6 0E               CALL   coldInit   
1D6D   CD 78 4A               CALL   execStr   
1D70   37 20 33 20 2F 00      DB   "7 3 /",0   
1D76   E1                     POP   HL   
1D77   E5                     PUSH   HL   
1D78   11 02 00               LD   DE,2   
1D7B   B7                     OR   A   
1D7C   ED 52                  SBC   HL,DE   
1D7E   7D                     LD   A,L   
1D7F   B4                     OR   H   
1D80   CA D5 1D               JP   Z,expectM_3051S79   
1D83   CD 92 0E               CALL   printStr   
1D86   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1D92   CD 92 0E               CALL   printStr   
1D95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DA4   21 02 00               LD   hl,2   
1DA7   E5                     PUSH   hl   
1DA8   E5                     PUSH   hl   
1DA9   CD 99 0F               CALL   run   
1DAC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1DB3   CD 92 0E               CALL   printStr   
1DB6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DC3   E1                     POP   hl   
1DC4   E5                     PUSH   hl   
1DC5   E5                     PUSH   hl   
1DC6   CD 99 0F               CALL   run   
1DC9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1DD4   76                     HALT      
1DD5                EXPECTM_3051S79:      
1DD5   E1                     POP   HL   
1DD6                          ;*Macro unroll:  test "3a= 2a+= a",5
1DD6   31 00 4C               LD   SP,STACK   
1DD9   CD C6 0E               CALL   coldInit   
1DDC   CD 78 4A               CALL   execStr   
1DDF   33 61 3D 20 32 61 2B 3D 20 61 00 DB   "3a= 2a+= a",0   
1DEA   E1                     POP   HL   
1DEB   E5                     PUSH   HL   
1DEC   11 05 00               LD   DE,5   
1DEF   B7                     OR   A   
1DF0   ED 52                  SBC   HL,DE   
1DF2   7D                     LD   A,L   
1DF3   B4                     OR   H   
1DF4   CA 4E 1E               JP   Z,expectM_3052S80   
1DF7   CD 92 0E               CALL   printStr   
1DFA   43 6F 64 65 3A 20 33 61 3D 20 32 61 2B 3D 20 61 00 .CSTR   "Code: ","3a= 2a+= a"   
1E0B   CD 92 0E               CALL   printStr   
1E0E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E1D   21 05 00               LD   hl,5   
1E20   E5                     PUSH   hl   
1E21   E5                     PUSH   hl   
1E22   CD 99 0F               CALL   run   
1E25   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1E2C   CD 92 0E               CALL   printStr   
1E2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E3C   E1                     POP   hl   
1E3D   E5                     PUSH   hl   
1E3E   E5                     PUSH   hl   
1E3F   CD 99 0F               CALL   run   
1E42   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1E4D   76                     HALT      
1E4E                EXPECTM_3052S80:      
1E4E   E1                     POP   HL   
1E4F                          ;*Macro unroll:  test "3a= a2-= a",1
1E4F   31 00 4C               LD   SP,STACK   
1E52   CD C6 0E               CALL   coldInit   
1E55   CD 78 4A               CALL   execStr   
1E58   33 61 3D 20 61 32 2D 3D 20 61 00 DB   "3a= a2-= a",0   
1E63   E1                     POP   HL   
1E64   E5                     PUSH   HL   
1E65   11 01 00               LD   DE,1   
1E68   B7                     OR   A   
1E69   ED 52                  SBC   HL,DE   
1E6B   7D                     LD   A,L   
1E6C   B4                     OR   H   
1E6D   CA C7 1E               JP   Z,expectM_3053S81   
1E70   CD 92 0E               CALL   printStr   
1E73   43 6F 64 65 3A 20 33 61 3D 20 61 32 2D 3D 20 61 00 .CSTR   "Code: ","3a= a2-= a"   
1E84   CD 92 0E               CALL   printStr   
1E87   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E96   21 01 00               LD   hl,1   
1E99   E5                     PUSH   hl   
1E9A   E5                     PUSH   hl   
1E9B   CD 99 0F               CALL   run   
1E9E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1EA5   CD 92 0E               CALL   printStr   
1EA8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EB5   E1                     POP   hl   
1EB6   E5                     PUSH   hl   
1EB7   E5                     PUSH   hl   
1EB8   CD 99 0F               CALL   run   
1EBB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1EC6   76                     HALT      
1EC7                EXPECTM_3053S81:      
1EC7   E1                     POP   HL   
1EC8                          ;*Macro unroll:  test "3a= a2*= a",6
1EC8   31 00 4C               LD   SP,STACK   
1ECB   CD C6 0E               CALL   coldInit   
1ECE   CD 78 4A               CALL   execStr   
1ED1   33 61 3D 20 61 32 2A 3D 20 61 00 DB   "3a= a2*= a",0   
1EDC   E1                     POP   HL   
1EDD   E5                     PUSH   HL   
1EDE   11 06 00               LD   DE,6   
1EE1   B7                     OR   A   
1EE2   ED 52                  SBC   HL,DE   
1EE4   7D                     LD   A,L   
1EE5   B4                     OR   H   
1EE6   CA 40 1F               JP   Z,expectM_3054S82   
1EE9   CD 92 0E               CALL   printStr   
1EEC   43 6F 64 65 3A 20 33 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","3a= a2*= a"   
1EFD   CD 92 0E               CALL   printStr   
1F00   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F0F   21 06 00               LD   hl,6   
1F12   E5                     PUSH   hl   
1F13   E5                     PUSH   hl   
1F14   CD 99 0F               CALL   run   
1F17   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1F1E   CD 92 0E               CALL   printStr   
1F21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F2E   E1                     POP   hl   
1F2F   E5                     PUSH   hl   
1F30   E5                     PUSH   hl   
1F31   CD 99 0F               CALL   run   
1F34   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1F3F   76                     HALT      
1F40                EXPECTM_3054S82:      
1F40   E1                     POP   HL   
1F41                          ;*Macro unroll:  test "4a= a2/= a",2
1F41   31 00 4C               LD   SP,STACK   
1F44   CD C6 0E               CALL   coldInit   
1F47   CD 78 4A               CALL   execStr   
1F4A   34 61 3D 20 61 32 2F 3D 20 61 00 DB   "4a= a2/= a",0   
1F55   E1                     POP   HL   
1F56   E5                     PUSH   HL   
1F57   11 02 00               LD   DE,2   
1F5A   B7                     OR   A   
1F5B   ED 52                  SBC   HL,DE   
1F5D   7D                     LD   A,L   
1F5E   B4                     OR   H   
1F5F   CA B9 1F               JP   Z,expectM_3055S83   
1F62   CD 92 0E               CALL   printStr   
1F65   43 6F 64 65 3A 20 34 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","4a= a2/= a"   
1F76   CD 92 0E               CALL   printStr   
1F79   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F88   21 02 00               LD   hl,2   
1F8B   E5                     PUSH   hl   
1F8C   E5                     PUSH   hl   
1F8D   CD 99 0F               CALL   run   
1F90   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1F97   CD 92 0E               CALL   printStr   
1F9A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FA7   E1                     POP   hl   
1FA8   E5                     PUSH   hl   
1FA9   E5                     PUSH   hl   
1FAA   CD 99 0F               CALL   run   
1FAD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1FB8   76                     HALT      
1FB9                EXPECTM_3055S83:      
1FB9   E1                     POP   HL   
1FBA                          ;*Macro unroll:  test "$55a= $AAa&= a",0
1FBA   31 00 4C               LD   SP,STACK   
1FBD   CD C6 0E               CALL   coldInit   
1FC0   CD 78 4A               CALL   execStr   
1FC3   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
1FD2   E1                     POP   HL   
1FD3   E5                     PUSH   HL   
1FD4   11 00 00               LD   DE,0   
1FD7   B7                     OR   A   
1FD8   ED 52                  SBC   HL,DE   
1FDA   7D                     LD   A,L   
1FDB   B4                     OR   H   
1FDC   CA 3A 20               JP   Z,expectM_3056S84   
1FDF   CD 92 0E               CALL   printStr   
1FE2   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
1FF7   CD 92 0E               CALL   printStr   
1FFA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2009   21 00 00               LD   hl,0   
200C   E5                     PUSH   hl   
200D   E5                     PUSH   hl   
200E   CD 99 0F               CALL   run   
2011   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2018   CD 92 0E               CALL   printStr   
201B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2028   E1                     POP   hl   
2029   E5                     PUSH   hl   
202A   E5                     PUSH   hl   
202B   CD 99 0F               CALL   run   
202E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2039   76                     HALT      
203A                EXPECTM_3056S84:      
203A   E1                     POP   HL   
203B                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
203B   31 00 4C               LD   SP,STACK   
203E   CD C6 0E               CALL   coldInit   
2041   CD 78 4A               CALL   execStr   
2044   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
2053   E1                     POP   HL   
2054   E5                     PUSH   HL   
2055   11 FF 00               LD   DE,$FF   
2058   B7                     OR   A   
2059   ED 52                  SBC   HL,DE   
205B   7D                     LD   A,L   
205C   B4                     OR   H   
205D   CA BB 20               JP   Z,expectM_3057S85   
2060   CD 92 0E               CALL   printStr   
2063   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
2078   CD 92 0E               CALL   printStr   
207B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
208A   21 FF 00               LD   hl,$FF   
208D   E5                     PUSH   hl   
208E   E5                     PUSH   hl   
208F   CD 99 0F               CALL   run   
2092   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2099   CD 92 0E               CALL   printStr   
209C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20A9   E1                     POP   hl   
20AA   E5                     PUSH   hl   
20AB   E5                     PUSH   hl   
20AC   CD 99 0F               CALL   run   
20AF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
20BA   76                     HALT      
20BB                EXPECTM_3057S85:      
20BB   E1                     POP   HL   
20BC                          ;*Macro unroll:  test "$A5a= $AAa /x= a",$0F
20BC   31 00 4C               LD   SP,STACK   
20BF   CD C6 0E               CALL   coldInit   
20C2   CD 78 4A               CALL   execStr   
20C5   24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 DB   "$A5a= $AAa /x= a",0   
20D6   E1                     POP   HL   
20D7   E5                     PUSH   HL   
20D8   11 0F 00               LD   DE,$0F   
20DB   B7                     OR   A   
20DC   ED 52                  SBC   HL,DE   
20DE   7D                     LD   A,L   
20DF   B4                     OR   H   
20E0   CA 40 21               JP   Z,expectM_3058S86   
20E3   CD 92 0E               CALL   printStr   
20E6   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /x= a"   
20FD   CD 92 0E               CALL   printStr   
2100   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
210F   21 0F 00               LD   hl,$0F   
2112   E5                     PUSH   hl   
2113   E5                     PUSH   hl   
2114   CD 99 0F               CALL   run   
2117   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
211E   CD 92 0E               CALL   printStr   
2121   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
212E   E1                     POP   hl   
212F   E5                     PUSH   hl   
2130   E5                     PUSH   hl   
2131   CD 99 0F               CALL   run   
2134   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
213F   76                     HALT      
2140                EXPECTM_3058S86:      
2140   E1                     POP   HL   
2141                          ;*Macro unroll:  test "100a= 1a+= a", 101
2141   31 00 4C               LD   SP,STACK   
2144   CD C6 0E               CALL   coldInit   
2147   CD 78 4A               CALL   execStr   
214A   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2157   E1                     POP   HL   
2158   E5                     PUSH   HL   
2159   11 65 00               LD   DE,101   
215C   B7                     OR   A   
215D   ED 52                  SBC   HL,DE   
215F   7D                     LD   A,L   
2160   B4                     OR   H   
2161   CA BD 21               JP   Z,expectM_3059S87   
2164   CD 92 0E               CALL   printStr   
2167   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
217A   CD 92 0E               CALL   printStr   
217D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
218C   21 65 00               LD   hl,101   
218F   E5                     PUSH   hl   
2190   E5                     PUSH   hl   
2191   CD 99 0F               CALL   run   
2194   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
219B   CD 92 0E               CALL   printStr   
219E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21AB   E1                     POP   hl   
21AC   E5                     PUSH   hl   
21AD   E5                     PUSH   hl   
21AE   CD 99 0F               CALL   run   
21B1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
21BC   76                     HALT      
21BD                EXPECTM_3059S87:      
21BD   E1                     POP   HL   
21BE                          ;*Macro unroll:  test "100a= a1-= a", 99
21BE   31 00 4C               LD   SP,STACK   
21C1   CD C6 0E               CALL   coldInit   
21C4   CD 78 4A               CALL   execStr   
21C7   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
21D4   E1                     POP   HL   
21D5   E5                     PUSH   HL   
21D6   11 63 00               LD   DE,99   
21D9   B7                     OR   A   
21DA   ED 52                  SBC   HL,DE   
21DC   7D                     LD   A,L   
21DD   B4                     OR   H   
21DE   CA 3A 22               JP   Z,expectM_3060S88   
21E1   CD 92 0E               CALL   printStr   
21E4   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
21F7   CD 92 0E               CALL   printStr   
21FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2209   21 63 00               LD   hl,99   
220C   E5                     PUSH   hl   
220D   E5                     PUSH   hl   
220E   CD 99 0F               CALL   run   
2211   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2218   CD 92 0E               CALL   printStr   
221B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2228   E1                     POP   hl   
2229   E5                     PUSH   hl   
222A   E5                     PUSH   hl   
222B   CD 99 0F               CALL   run   
222E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2239   76                     HALT      
223A                EXPECTM_3060S88:      
223A   E1                     POP   HL   
223B                          ;*Macro unroll:  test "100a= a2*= a", 200
223B   31 00 4C               LD   SP,STACK   
223E   CD C6 0E               CALL   coldInit   
2241   CD 78 4A               CALL   execStr   
2244   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2251   E1                     POP   HL   
2252   E5                     PUSH   HL   
2253   11 C8 00               LD   DE,200   
2256   B7                     OR   A   
2257   ED 52                  SBC   HL,DE   
2259   7D                     LD   A,L   
225A   B4                     OR   H   
225B   CA B7 22               JP   Z,expectM_3061S89   
225E   CD 92 0E               CALL   printStr   
2261   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
2274   CD 92 0E               CALL   printStr   
2277   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2286   21 C8 00               LD   hl,200   
2289   E5                     PUSH   hl   
228A   E5                     PUSH   hl   
228B   CD 99 0F               CALL   run   
228E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2295   CD 92 0E               CALL   printStr   
2298   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22A5   E1                     POP   hl   
22A6   E5                     PUSH   hl   
22A7   E5                     PUSH   hl   
22A8   CD 99 0F               CALL   run   
22AB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
22B6   76                     HALT      
22B7                EXPECTM_3061S89:      
22B7   E1                     POP   HL   
22B8                          ;*Macro unroll:  test "100a= a2/= a", 50
22B8   31 00 4C               LD   SP,STACK   
22BB   CD C6 0E               CALL   coldInit   
22BE   CD 78 4A               CALL   execStr   
22C1   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
22CE   E1                     POP   HL   
22CF   E5                     PUSH   HL   
22D0   11 32 00               LD   DE,50   
22D3   B7                     OR   A   
22D4   ED 52                  SBC   HL,DE   
22D6   7D                     LD   A,L   
22D7   B4                     OR   H   
22D8   CA 34 23               JP   Z,expectM_3062S90   
22DB   CD 92 0E               CALL   printStr   
22DE   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
22F1   CD 92 0E               CALL   printStr   
22F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2303   21 32 00               LD   hl,50   
2306   E5                     PUSH   hl   
2307   E5                     PUSH   hl   
2308   CD 99 0F               CALL   run   
230B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2312   CD 92 0E               CALL   printStr   
2315   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2322   E1                     POP   hl   
2323   E5                     PUSH   hl   
2324   E5                     PUSH   hl   
2325   CD 99 0F               CALL   run   
2328   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2333   76                     HALT      
2334                EXPECTM_3062S90:      
2334   E1                     POP   HL   
2335                          ;*Macro unroll:  test "7 3 / /re", 1
2335   31 00 4C               LD   SP,STACK   
2338   CD C6 0E               CALL   coldInit   
233B   CD 78 4A               CALL   execStr   
233E   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2348   E1                     POP   HL   
2349   E5                     PUSH   HL   
234A   11 01 00               LD   DE,1   
234D   B7                     OR   A   
234E   ED 52                  SBC   HL,DE   
2350   7D                     LD   A,L   
2351   B4                     OR   H   
2352   CA AB 23               JP   Z,expectM_3063S91   
2355   CD 92 0E               CALL   printStr   
2358   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2368   CD 92 0E               CALL   printStr   
236B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
237A   21 01 00               LD   hl,1   
237D   E5                     PUSH   hl   
237E   E5                     PUSH   hl   
237F   CD 99 0F               CALL   run   
2382   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2389   CD 92 0E               CALL   printStr   
238C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2399   E1                     POP   hl   
239A   E5                     PUSH   hl   
239B   E5                     PUSH   hl   
239C   CD 99 0F               CALL   run   
239F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
23AA   76                     HALT      
23AB                EXPECTM_3063S91:      
23AB   E1                     POP   HL   
23AC                          ;*Macro unroll:  test "7 3 /", 2
23AC   31 00 4C               LD   SP,STACK   
23AF   CD C6 0E               CALL   coldInit   
23B2   CD 78 4A               CALL   execStr   
23B5   37 20 33 20 2F 00      DB   "7 3 /",0   
23BB   E1                     POP   HL   
23BC   E5                     PUSH   HL   
23BD   11 02 00               LD   DE,2   
23C0   B7                     OR   A   
23C1   ED 52                  SBC   HL,DE   
23C3   7D                     LD   A,L   
23C4   B4                     OR   H   
23C5   CA 1A 24               JP   Z,expectM_3064S92   
23C8   CD 92 0E               CALL   printStr   
23CB   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
23D7   CD 92 0E               CALL   printStr   
23DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23E9   21 02 00               LD   hl,2   
23EC   E5                     PUSH   hl   
23ED   E5                     PUSH   hl   
23EE   CD 99 0F               CALL   run   
23F1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
23F8   CD 92 0E               CALL   printStr   
23FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2408   E1                     POP   hl   
2409   E5                     PUSH   hl   
240A   E5                     PUSH   hl   
240B   CD 99 0F               CALL   run   
240E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2419   76                     HALT      
241A                EXPECTM_3064S92:      
241A   E1                     POP   HL   
241B                          ;*Macro unroll:  test "2 3 ==", FALSE
241B   31 00 4C               LD   SP,STACK   
241E   CD C6 0E               CALL   coldInit   
2421   CD 78 4A               CALL   execStr   
2424   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
242B   E1                     POP   HL   
242C   E5                     PUSH   HL   
242D   11 00 00               LD   DE,FALSE   
2430   B7                     OR   A   
2431   ED 52                  SBC   HL,DE   
2433   7D                     LD   A,L   
2434   B4                     OR   H   
2435   CA 8B 24               JP   Z,expectM_3065S93   
2438   CD 92 0E               CALL   printStr   
243B   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2448   CD 92 0E               CALL   printStr   
244B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
245A   21 00 00               LD   hl,FALSE   
245D   E5                     PUSH   hl   
245E   E5                     PUSH   hl   
245F   CD 99 0F               CALL   run   
2462   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2469   CD 92 0E               CALL   printStr   
246C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2479   E1                     POP   hl   
247A   E5                     PUSH   hl   
247B   E5                     PUSH   hl   
247C   CD 99 0F               CALL   run   
247F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
248A   76                     HALT      
248B                EXPECTM_3065S93:      
248B   E1                     POP   HL   
248C                          ;*Macro unroll:  test "3 3 ==", TRUE
248C   31 00 4C               LD   SP,STACK   
248F   CD C6 0E               CALL   coldInit   
2492   CD 78 4A               CALL   execStr   
2495   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
249C   E1                     POP   HL   
249D   E5                     PUSH   HL   
249E   11 FF FF               LD   DE,TRUE   
24A1   B7                     OR   A   
24A2   ED 52                  SBC   HL,DE   
24A4   7D                     LD   A,L   
24A5   B4                     OR   H   
24A6   CA FC 24               JP   Z,expectM_3066S94   
24A9   CD 92 0E               CALL   printStr   
24AC   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
24B9   CD 92 0E               CALL   printStr   
24BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24CB   21 FF FF               LD   hl,TRUE   
24CE   E5                     PUSH   hl   
24CF   E5                     PUSH   hl   
24D0   CD 99 0F               CALL   run   
24D3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
24DA   CD 92 0E               CALL   printStr   
24DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24EA   E1                     POP   hl   
24EB   E5                     PUSH   hl   
24EC   E5                     PUSH   hl   
24ED   CD 99 0F               CALL   run   
24F0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
24FB   76                     HALT      
24FC                EXPECTM_3066S94:      
24FC   E1                     POP   HL   
24FD                          ;*Macro unroll:  test "1 2 <", TRUE
24FD   31 00 4C               LD   SP,STACK   
2500   CD C6 0E               CALL   coldInit   
2503   CD 78 4A               CALL   execStr   
2506   31 20 32 20 3C 00      DB   "1 2 <",0   
250C   E1                     POP   HL   
250D   E5                     PUSH   HL   
250E   11 FF FF               LD   DE,TRUE   
2511   B7                     OR   A   
2512   ED 52                  SBC   HL,DE   
2514   7D                     LD   A,L   
2515   B4                     OR   H   
2516   CA 6B 25               JP   Z,expectM_3067S95   
2519   CD 92 0E               CALL   printStr   
251C   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2528   CD 92 0E               CALL   printStr   
252B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
253A   21 FF FF               LD   hl,TRUE   
253D   E5                     PUSH   hl   
253E   E5                     PUSH   hl   
253F   CD 99 0F               CALL   run   
2542   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2549   CD 92 0E               CALL   printStr   
254C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2559   E1                     POP   hl   
255A   E5                     PUSH   hl   
255B   E5                     PUSH   hl   
255C   CD 99 0F               CALL   run   
255F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
256A   76                     HALT      
256B                EXPECTM_3067S95:      
256B   E1                     POP   HL   
256C                          ;*Macro unroll:  test "2 1 <", FALSE
256C   31 00 4C               LD   SP,STACK   
256F   CD C6 0E               CALL   coldInit   
2572   CD 78 4A               CALL   execStr   
2575   32 20 31 20 3C 00      DB   "2 1 <",0   
257B   E1                     POP   HL   
257C   E5                     PUSH   HL   
257D   11 00 00               LD   DE,FALSE   
2580   B7                     OR   A   
2581   ED 52                  SBC   HL,DE   
2583   7D                     LD   A,L   
2584   B4                     OR   H   
2585   CA DA 25               JP   Z,expectM_3068S96   
2588   CD 92 0E               CALL   printStr   
258B   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2597   CD 92 0E               CALL   printStr   
259A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25A9   21 00 00               LD   hl,FALSE   
25AC   E5                     PUSH   hl   
25AD   E5                     PUSH   hl   
25AE   CD 99 0F               CALL   run   
25B1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
25B8   CD 92 0E               CALL   printStr   
25BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25C8   E1                     POP   hl   
25C9   E5                     PUSH   hl   
25CA   E5                     PUSH   hl   
25CB   CD 99 0F               CALL   run   
25CE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
25D9   76                     HALT      
25DA                EXPECTM_3068S96:      
25DA   E1                     POP   HL   
25DB                          ;*Macro unroll:  test "2 3 <", TRUE
25DB   31 00 4C               LD   SP,STACK   
25DE   CD C6 0E               CALL   coldInit   
25E1   CD 78 4A               CALL   execStr   
25E4   32 20 33 20 3C 00      DB   "2 3 <",0   
25EA   E1                     POP   HL   
25EB   E5                     PUSH   HL   
25EC   11 FF FF               LD   DE,TRUE   
25EF   B7                     OR   A   
25F0   ED 52                  SBC   HL,DE   
25F2   7D                     LD   A,L   
25F3   B4                     OR   H   
25F4   CA 49 26               JP   Z,expectM_3069S97   
25F7   CD 92 0E               CALL   printStr   
25FA   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2606   CD 92 0E               CALL   printStr   
2609   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2618   21 FF FF               LD   hl,TRUE   
261B   E5                     PUSH   hl   
261C   E5                     PUSH   hl   
261D   CD 99 0F               CALL   run   
2620   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2627   CD 92 0E               CALL   printStr   
262A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2637   E1                     POP   hl   
2638   E5                     PUSH   hl   
2639   E5                     PUSH   hl   
263A   CD 99 0F               CALL   run   
263D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2648   76                     HALT      
2649                EXPECTM_3069S97:      
2649   E1                     POP   HL   
264A                          ;*Macro unroll:  test "3 3 <", FALSE
264A   31 00 4C               LD   SP,STACK   
264D   CD C6 0E               CALL   coldInit   
2650   CD 78 4A               CALL   execStr   
2653   33 20 33 20 3C 00      DB   "3 3 <",0   
2659   E1                     POP   HL   
265A   E5                     PUSH   HL   
265B   11 00 00               LD   DE,FALSE   
265E   B7                     OR   A   
265F   ED 52                  SBC   HL,DE   
2661   7D                     LD   A,L   
2662   B4                     OR   H   
2663   CA B8 26               JP   Z,expectM_3070S98   
2666   CD 92 0E               CALL   printStr   
2669   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2675   CD 92 0E               CALL   printStr   
2678   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2687   21 00 00               LD   hl,FALSE   
268A   E5                     PUSH   hl   
268B   E5                     PUSH   hl   
268C   CD 99 0F               CALL   run   
268F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2696   CD 92 0E               CALL   printStr   
2699   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26A6   E1                     POP   hl   
26A7   E5                     PUSH   hl   
26A8   E5                     PUSH   hl   
26A9   CD 99 0F               CALL   run   
26AC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
26B7   76                     HALT      
26B8                EXPECTM_3070S98:      
26B8   E1                     POP   HL   
26B9                          ;*Macro unroll:  test "1 2 >", FALSE
26B9   31 00 4C               LD   SP,STACK   
26BC   CD C6 0E               CALL   coldInit   
26BF   CD 78 4A               CALL   execStr   
26C2   31 20 32 20 3E 00      DB   "1 2 >",0   
26C8   E1                     POP   HL   
26C9   E5                     PUSH   HL   
26CA   11 00 00               LD   DE,FALSE   
26CD   B7                     OR   A   
26CE   ED 52                  SBC   HL,DE   
26D0   7D                     LD   A,L   
26D1   B4                     OR   H   
26D2   CA 27 27               JP   Z,expectM_3071S99   
26D5   CD 92 0E               CALL   printStr   
26D8   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
26E4   CD 92 0E               CALL   printStr   
26E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26F6   21 00 00               LD   hl,FALSE   
26F9   E5                     PUSH   hl   
26FA   E5                     PUSH   hl   
26FB   CD 99 0F               CALL   run   
26FE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2705   CD 92 0E               CALL   printStr   
2708   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2715   E1                     POP   hl   
2716   E5                     PUSH   hl   
2717   E5                     PUSH   hl   
2718   CD 99 0F               CALL   run   
271B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2726   76                     HALT      
2727                EXPECTM_3071S99:      
2727   E1                     POP   HL   
2728                          ;*Macro unroll:  test "2 1 >", TRUE
2728   31 00 4C               LD   SP,STACK   
272B   CD C6 0E               CALL   coldInit   
272E   CD 78 4A               CALL   execStr   
2731   32 20 31 20 3E 00      DB   "2 1 >",0   
2737   E1                     POP   HL   
2738   E5                     PUSH   HL   
2739   11 FF FF               LD   DE,TRUE   
273C   B7                     OR   A   
273D   ED 52                  SBC   HL,DE   
273F   7D                     LD   A,L   
2740   B4                     OR   H   
2741   CA 96 27               JP   Z,expectM_3072S100   
2744   CD 92 0E               CALL   printStr   
2747   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2753   CD 92 0E               CALL   printStr   
2756   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2765   21 FF FF               LD   hl,TRUE   
2768   E5                     PUSH   hl   
2769   E5                     PUSH   hl   
276A   CD 99 0F               CALL   run   
276D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2774   CD 92 0E               CALL   printStr   
2777   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2784   E1                     POP   hl   
2785   E5                     PUSH   hl   
2786   E5                     PUSH   hl   
2787   CD 99 0F               CALL   run   
278A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2795   76                     HALT      
2796                EXPECTM_3072S100:      
2796   E1                     POP   HL   
2797                          ;*Macro unroll:  test "3 3 >", FALSE
2797   31 00 4C               LD   SP,STACK   
279A   CD C6 0E               CALL   coldInit   
279D   CD 78 4A               CALL   execStr   
27A0   33 20 33 20 3E 00      DB   "3 3 >",0   
27A6   E1                     POP   HL   
27A7   E5                     PUSH   HL   
27A8   11 00 00               LD   DE,FALSE   
27AB   B7                     OR   A   
27AC   ED 52                  SBC   HL,DE   
27AE   7D                     LD   A,L   
27AF   B4                     OR   H   
27B0   CA 05 28               JP   Z,expectM_3073S101   
27B3   CD 92 0E               CALL   printStr   
27B6   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
27C2   CD 92 0E               CALL   printStr   
27C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27D4   21 00 00               LD   hl,FALSE   
27D7   E5                     PUSH   hl   
27D8   E5                     PUSH   hl   
27D9   CD 99 0F               CALL   run   
27DC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
27E3   CD 92 0E               CALL   printStr   
27E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27F3   E1                     POP   hl   
27F4   E5                     PUSH   hl   
27F5   E5                     PUSH   hl   
27F6   CD 99 0F               CALL   run   
27F9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2804   76                     HALT      
2805                EXPECTM_3073S101:      
2805   E1                     POP   HL   
2806                          ;*Macro unroll:  test "4 3 >", TRUE
2806   31 00 4C               LD   SP,STACK   
2809   CD C6 0E               CALL   coldInit   
280C   CD 78 4A               CALL   execStr   
280F   34 20 33 20 3E 00      DB   "4 3 >",0   
2815   E1                     POP   HL   
2816   E5                     PUSH   HL   
2817   11 FF FF               LD   DE,TRUE   
281A   B7                     OR   A   
281B   ED 52                  SBC   HL,DE   
281D   7D                     LD   A,L   
281E   B4                     OR   H   
281F   CA 74 28               JP   Z,expectM_3074S102   
2822   CD 92 0E               CALL   printStr   
2825   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2831   CD 92 0E               CALL   printStr   
2834   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2843   21 FF FF               LD   hl,TRUE   
2846   E5                     PUSH   hl   
2847   E5                     PUSH   hl   
2848   CD 99 0F               CALL   run   
284B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2852   CD 92 0E               CALL   printStr   
2855   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2862   E1                     POP   hl   
2863   E5                     PUSH   hl   
2864   E5                     PUSH   hl   
2865   CD 99 0F               CALL   run   
2868   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2873   76                     HALT      
2874                EXPECTM_3074S102:      
2874   E1                     POP   HL   
2875                          ;*Macro unroll:  test "2 2 <=", TRUE
2875   31 00 4C               LD   SP,STACK   
2878   CD C6 0E               CALL   coldInit   
287B   CD 78 4A               CALL   execStr   
287E   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2885   E1                     POP   HL   
2886   E5                     PUSH   HL   
2887   11 FF FF               LD   DE,TRUE   
288A   B7                     OR   A   
288B   ED 52                  SBC   HL,DE   
288D   7D                     LD   A,L   
288E   B4                     OR   H   
288F   CA E5 28               JP   Z,expectM_3075S103   
2892   CD 92 0E               CALL   printStr   
2895   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
28A2   CD 92 0E               CALL   printStr   
28A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28B4   21 FF FF               LD   hl,TRUE   
28B7   E5                     PUSH   hl   
28B8   E5                     PUSH   hl   
28B9   CD 99 0F               CALL   run   
28BC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
28C3   CD 92 0E               CALL   printStr   
28C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28D3   E1                     POP   hl   
28D4   E5                     PUSH   hl   
28D5   E5                     PUSH   hl   
28D6   CD 99 0F               CALL   run   
28D9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
28E4   76                     HALT      
28E5                EXPECTM_3075S103:      
28E5   E1                     POP   HL   
28E6                          ;*Macro unroll:  test "2 2 >=", TRUE
28E6   31 00 4C               LD   SP,STACK   
28E9   CD C6 0E               CALL   coldInit   
28EC   CD 78 4A               CALL   execStr   
28EF   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
28F6   E1                     POP   HL   
28F7   E5                     PUSH   HL   
28F8   11 FF FF               LD   DE,TRUE   
28FB   B7                     OR   A   
28FC   ED 52                  SBC   HL,DE   
28FE   7D                     LD   A,L   
28FF   B4                     OR   H   
2900   CA 56 29               JP   Z,expectM_3076S104   
2903   CD 92 0E               CALL   printStr   
2906   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2913   CD 92 0E               CALL   printStr   
2916   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2925   21 FF FF               LD   hl,TRUE   
2928   E5                     PUSH   hl   
2929   E5                     PUSH   hl   
292A   CD 99 0F               CALL   run   
292D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2934   CD 92 0E               CALL   printStr   
2937   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2944   E1                     POP   hl   
2945   E5                     PUSH   hl   
2946   E5                     PUSH   hl   
2947   CD 99 0F               CALL   run   
294A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2955   76                     HALT      
2956                EXPECTM_3076S104:      
2956   E1                     POP   HL   
2957                          ;*Macro unroll:  test "3 1 <<", 6
2957   31 00 4C               LD   SP,STACK   
295A   CD C6 0E               CALL   coldInit   
295D   CD 78 4A               CALL   execStr   
2960   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2967   E1                     POP   HL   
2968   E5                     PUSH   HL   
2969   11 06 00               LD   DE,6   
296C   B7                     OR   A   
296D   ED 52                  SBC   HL,DE   
296F   7D                     LD   A,L   
2970   B4                     OR   H   
2971   CA C7 29               JP   Z,expectM_3077S105   
2974   CD 92 0E               CALL   printStr   
2977   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2984   CD 92 0E               CALL   printStr   
2987   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2996   21 06 00               LD   hl,6   
2999   E5                     PUSH   hl   
299A   E5                     PUSH   hl   
299B   CD 99 0F               CALL   run   
299E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
29A5   CD 92 0E               CALL   printStr   
29A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29B5   E1                     POP   hl   
29B6   E5                     PUSH   hl   
29B7   E5                     PUSH   hl   
29B8   CD 99 0F               CALL   run   
29BB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
29C6   76                     HALT      
29C7                EXPECTM_3077S105:      
29C7   E1                     POP   HL   
29C8                          ;*Macro unroll:  test "10 1 >>", 5
29C8   31 00 4C               LD   SP,STACK   
29CB   CD C6 0E               CALL   coldInit   
29CE   CD 78 4A               CALL   execStr   
29D1   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
29D9   E1                     POP   HL   
29DA   E5                     PUSH   HL   
29DB   11 05 00               LD   DE,5   
29DE   B7                     OR   A   
29DF   ED 52                  SBC   HL,DE   
29E1   7D                     LD   A,L   
29E2   B4                     OR   H   
29E3   CA 3A 2A               JP   Z,expectM_3078S106   
29E6   CD 92 0E               CALL   printStr   
29E9   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
29F7   CD 92 0E               CALL   printStr   
29FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A09   21 05 00               LD   hl,5   
2A0C   E5                     PUSH   hl   
2A0D   E5                     PUSH   hl   
2A0E   CD 99 0F               CALL   run   
2A11   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2A18   CD 92 0E               CALL   printStr   
2A1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A28   E1                     POP   hl   
2A29   E5                     PUSH   hl   
2A2A   E5                     PUSH   hl   
2A2B   CD 99 0F               CALL   run   
2A2E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2A39   76                     HALT      
2A3A                EXPECTM_3078S106:      
2A3A   E1                     POP   HL   
2A3B                          ;*Macro unroll:  test "1 x = x", 1
2A3B   31 00 4C               LD   SP,STACK   
2A3E   CD C6 0E               CALL   coldInit   
2A41   CD 78 4A               CALL   execStr   
2A44   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2A4C   E1                     POP   HL   
2A4D   E5                     PUSH   HL   
2A4E   11 01 00               LD   DE,1   
2A51   B7                     OR   A   
2A52   ED 52                  SBC   HL,DE   
2A54   7D                     LD   A,L   
2A55   B4                     OR   H   
2A56   CA AD 2A               JP   Z,expectM_3079S107   
2A59   CD 92 0E               CALL   printStr   
2A5C   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2A6A   CD 92 0E               CALL   printStr   
2A6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A7C   21 01 00               LD   hl,1   
2A7F   E5                     PUSH   hl   
2A80   E5                     PUSH   hl   
2A81   CD 99 0F               CALL   run   
2A84   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2A8B   CD 92 0E               CALL   printStr   
2A8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A9B   E1                     POP   hl   
2A9C   E5                     PUSH   hl   
2A9D   E5                     PUSH   hl   
2A9E   CD 99 0F               CALL   run   
2AA1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2AAC   76                     HALT      
2AAD                EXPECTM_3079S107:      
2AAD   E1                     POP   HL   
2AAE                          ;*Macro unroll:  test "1{}^", 1
2AAE   31 00 4C               LD   SP,STACK   
2AB1   CD C6 0E               CALL   coldInit   
2AB4   CD 78 4A               CALL   execStr   
2AB7   31 7B 7D 5E 00         DB   "1{}^",0   
2ABC   E1                     POP   HL   
2ABD   E5                     PUSH   HL   
2ABE   11 01 00               LD   DE,1   
2AC1   B7                     OR   A   
2AC2   ED 52                  SBC   HL,DE   
2AC4   7D                     LD   A,L   
2AC5   B4                     OR   H   
2AC6   CA 1A 2B               JP   Z,expectM_3080S108   
2AC9   CD 92 0E               CALL   printStr   
2ACC   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2AD7   CD 92 0E               CALL   printStr   
2ADA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AE9   21 01 00               LD   hl,1   
2AEC   E5                     PUSH   hl   
2AED   E5                     PUSH   hl   
2AEE   CD 99 0F               CALL   run   
2AF1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2AF8   CD 92 0E               CALL   printStr   
2AFB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B08   E1                     POP   hl   
2B09   E5                     PUSH   hl   
2B0A   E5                     PUSH   hl   
2B0B   CD 99 0F               CALL   run   
2B0E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2B19   76                     HALT      
2B1A                EXPECTM_3080S108:      
2B1A   E1                     POP   HL   
2B1B                          ;*Macro unroll:  test "{1}^", 1
2B1B   31 00 4C               LD   SP,STACK   
2B1E   CD C6 0E               CALL   coldInit   
2B21   CD 78 4A               CALL   execStr   
2B24   7B 31 7D 5E 00         DB   "{1}^",0   
2B29   E1                     POP   HL   
2B2A   E5                     PUSH   HL   
2B2B   11 01 00               LD   DE,1   
2B2E   B7                     OR   A   
2B2F   ED 52                  SBC   HL,DE   
2B31   7D                     LD   A,L   
2B32   B4                     OR   H   
2B33   CA 87 2B               JP   Z,expectM_3081S109   
2B36   CD 92 0E               CALL   printStr   
2B39   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2B44   CD 92 0E               CALL   printStr   
2B47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B56   21 01 00               LD   hl,1   
2B59   E5                     PUSH   hl   
2B5A   E5                     PUSH   hl   
2B5B   CD 99 0F               CALL   run   
2B5E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2B65   CD 92 0E               CALL   printStr   
2B68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B75   E1                     POP   hl   
2B76   E5                     PUSH   hl   
2B77   E5                     PUSH   hl   
2B78   CD 99 0F               CALL   run   
2B7B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2B86   76                     HALT      
2B87                EXPECTM_3081S109:      
2B87   E1                     POP   HL   
2B88                          ;*Macro unroll:  test "{{1}^}^", 1
2B88   31 00 4C               LD   SP,STACK   
2B8B   CD C6 0E               CALL   coldInit   
2B8E   CD 78 4A               CALL   execStr   
2B91   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2B99   E1                     POP   HL   
2B9A   E5                     PUSH   HL   
2B9B   11 01 00               LD   DE,1   
2B9E   B7                     OR   A   
2B9F   ED 52                  SBC   HL,DE   
2BA1   7D                     LD   A,L   
2BA2   B4                     OR   H   
2BA3   CA FA 2B               JP   Z,expectM_3082S110   
2BA6   CD 92 0E               CALL   printStr   
2BA9   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2BB7   CD 92 0E               CALL   printStr   
2BBA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BC9   21 01 00               LD   hl,1   
2BCC   E5                     PUSH   hl   
2BCD   E5                     PUSH   hl   
2BCE   CD 99 0F               CALL   run   
2BD1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2BD8   CD 92 0E               CALL   printStr   
2BDB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BE8   E1                     POP   hl   
2BE9   E5                     PUSH   hl   
2BEA   E5                     PUSH   hl   
2BEB   CD 99 0F               CALL   run   
2BEE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2BF9   76                     HALT      
2BFA                EXPECTM_3082S110:      
2BFA   E1                     POP   HL   
2BFB                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2BFB   31 00 4C               LD   SP,STACK   
2BFE   CD C6 0E               CALL   coldInit   
2C01   CD 78 4A               CALL   execStr   
2C04   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2C0F   E1                     POP   HL   
2C10   E5                     PUSH   HL   
2C11   11 01 00               LD   DE,1   
2C14   B7                     OR   A   
2C15   ED 52                  SBC   HL,DE   
2C17   7D                     LD   A,L   
2C18   B4                     OR   H   
2C19   CA 73 2C               JP   Z,expectM_3083S111   
2C1C   CD 92 0E               CALL   printStr   
2C1F   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2C30   CD 92 0E               CALL   printStr   
2C33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C42   21 01 00               LD   hl,1   
2C45   E5                     PUSH   hl   
2C46   E5                     PUSH   hl   
2C47   CD 99 0F               CALL   run   
2C4A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2C51   CD 92 0E               CALL   printStr   
2C54   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C61   E1                     POP   hl   
2C62   E5                     PUSH   hl   
2C63   E5                     PUSH   hl   
2C64   CD 99 0F               CALL   run   
2C67   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2C72   76                     HALT      
2C73                EXPECTM_3083S111:      
2C73   E1                     POP   HL   
2C74                          ;*Macro unroll:  test "5 /f{10} ?", 5
2C74   31 00 4C               LD   SP,STACK   
2C77   CD C6 0E               CALL   coldInit   
2C7A   CD 78 4A               CALL   execStr   
2C7D   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2C88   E1                     POP   HL   
2C89   E5                     PUSH   HL   
2C8A   11 05 00               LD   DE,5   
2C8D   B7                     OR   A   
2C8E   ED 52                  SBC   HL,DE   
2C90   7D                     LD   A,L   
2C91   B4                     OR   H   
2C92   CA EC 2C               JP   Z,expectM_3084S112   
2C95   CD 92 0E               CALL   printStr   
2C98   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2CA9   CD 92 0E               CALL   printStr   
2CAC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CBB   21 05 00               LD   hl,5   
2CBE   E5                     PUSH   hl   
2CBF   E5                     PUSH   hl   
2CC0   CD 99 0F               CALL   run   
2CC3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2CCA   CD 92 0E               CALL   printStr   
2CCD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CDA   E1                     POP   hl   
2CDB   E5                     PUSH   hl   
2CDC   E5                     PUSH   hl   
2CDD   CD 99 0F               CALL   run   
2CE0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2CEB   76                     HALT      
2CEC                EXPECTM_3084S112:      
2CEC   E1                     POP   HL   
2CED                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2CED   31 00 4C               LD   SP,STACK   
2CF0   CD C6 0E               CALL   coldInit   
2CF3   CD 78 4A               CALL   execStr   
2CF6   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2D03   E1                     POP   HL   
2D04   E5                     PUSH   HL   
2D05   11 0F 00               LD   DE,15   
2D08   B7                     OR   A   
2D09   ED 52                  SBC   HL,DE   
2D0B   7D                     LD   A,L   
2D0C   B4                     OR   H   
2D0D   CA 69 2D               JP   Z,expectM_3085S113   
2D10   CD 92 0E               CALL   printStr   
2D13   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2D26   CD 92 0E               CALL   printStr   
2D29   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D38   21 0F 00               LD   hl,15   
2D3B   E5                     PUSH   hl   
2D3C   E5                     PUSH   hl   
2D3D   CD 99 0F               CALL   run   
2D40   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2D47   CD 92 0E               CALL   printStr   
2D4A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D57   E1                     POP   hl   
2D58   E5                     PUSH   hl   
2D59   E5                     PUSH   hl   
2D5A   CD 99 0F               CALL   run   
2D5D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2D68   76                     HALT      
2D69                EXPECTM_3085S113:      
2D69   E1                     POP   HL   
2D6A                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2D6A   31 00 4C               LD   SP,STACK   
2D6D   CD C6 0E               CALL   coldInit   
2D70   CD 78 4A               CALL   execStr   
2D73   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2D85   E1                     POP   HL   
2D86   E5                     PUSH   HL   
2D87   11 15 00               LD   DE,21   
2D8A   B7                     OR   A   
2D8B   ED 52                  SBC   HL,DE   
2D8D   7D                     LD   A,L   
2D8E   B4                     OR   H   
2D8F   CA F0 2D               JP   Z,expectM_3086S114   
2D92   CD 92 0E               CALL   printStr   
2D95   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2DAD   CD 92 0E               CALL   printStr   
2DB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DBF   21 15 00               LD   hl,21   
2DC2   E5                     PUSH   hl   
2DC3   E5                     PUSH   hl   
2DC4   CD 99 0F               CALL   run   
2DC7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2DCE   CD 92 0E               CALL   printStr   
2DD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DDE   E1                     POP   hl   
2DDF   E5                     PUSH   hl   
2DE0   E5                     PUSH   hl   
2DE1   CD 99 0F               CALL   run   
2DE4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2DEF   76                     HALT      
2DF0                EXPECTM_3086S114:      
2DF0   E1                     POP   HL   
2DF1                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2DF1   31 00 4C               LD   SP,STACK   
2DF4   CD C6 0E               CALL   coldInit   
2DF7   CD 78 4A               CALL   execStr   
2DFA   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2E0C   E1                     POP   HL   
2E0D   E5                     PUSH   HL   
2E0E   11 0B 00               LD   DE,11   
2E11   B7                     OR   A   
2E12   ED 52                  SBC   HL,DE   
2E14   7D                     LD   A,L   
2E15   B4                     OR   H   
2E16   CA 77 2E               JP   Z,expectM_3087S115   
2E19   CD 92 0E               CALL   printStr   
2E1C   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2E34   CD 92 0E               CALL   printStr   
2E37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E46   21 0B 00               LD   hl,11   
2E49   E5                     PUSH   hl   
2E4A   E5                     PUSH   hl   
2E4B   CD 99 0F               CALL   run   
2E4E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2E55   CD 92 0E               CALL   printStr   
2E58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E65   E1                     POP   hl   
2E66   E5                     PUSH   hl   
2E67   E5                     PUSH   hl   
2E68   CD 99 0F               CALL   run   
2E6B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2E76   76                     HALT      
2E77                EXPECTM_3087S115:      
2E77   E1                     POP   HL   
2E78                          ;*Macro unroll:  test "\\{2}^", 2
2E78   31 00 4C               LD   SP,STACK   
2E7B   CD C6 0E               CALL   coldInit   
2E7E   CD 78 4A               CALL   execStr   
2E81   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
2E87   E1                     POP   HL   
2E88   E5                     PUSH   HL   
2E89   11 02 00               LD   DE,2   
2E8C   B7                     OR   A   
2E8D   ED 52                  SBC   HL,DE   
2E8F   7D                     LD   A,L   
2E90   B4                     OR   H   
2E91   CA E6 2E               JP   Z,expectM_3088S116   
2E94   CD 92 0E               CALL   printStr   
2E97   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
2EA3   CD 92 0E               CALL   printStr   
2EA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EB5   21 02 00               LD   hl,2   
2EB8   E5                     PUSH   hl   
2EB9   E5                     PUSH   hl   
2EBA   CD 99 0F               CALL   run   
2EBD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2EC4   CD 92 0E               CALL   printStr   
2EC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ED4   E1                     POP   hl   
2ED5   E5                     PUSH   hl   
2ED6   E5                     PUSH   hl   
2ED7   CD 99 0F               CALL   run   
2EDA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2EE5   76                     HALT      
2EE6                EXPECTM_3088S116:      
2EE6   E1                     POP   HL   
2EE7                          ;*Macro unroll:  test "\\a{2}^", 2
2EE7   31 00 4C               LD   SP,STACK   
2EEA   CD C6 0E               CALL   coldInit   
2EED   CD 78 4A               CALL   execStr   
2EF0   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
2EF7   E1                     POP   HL   
2EF8   E5                     PUSH   HL   
2EF9   11 02 00               LD   DE,2   
2EFC   B7                     OR   A   
2EFD   ED 52                  SBC   HL,DE   
2EFF   7D                     LD   A,L   
2F00   B4                     OR   H   
2F01   CA 57 2F               JP   Z,expectM_3089S117   
2F04   CD 92 0E               CALL   printStr   
2F07   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
2F14   CD 92 0E               CALL   printStr   
2F17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F26   21 02 00               LD   hl,2   
2F29   E5                     PUSH   hl   
2F2A   E5                     PUSH   hl   
2F2B   CD 99 0F               CALL   run   
2F2E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2F35   CD 92 0E               CALL   printStr   
2F38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F45   E1                     POP   hl   
2F46   E5                     PUSH   hl   
2F47   E5                     PUSH   hl   
2F48   CD 99 0F               CALL   run   
2F4B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F56   76                     HALT      
2F57                EXPECTM_3089S117:      
2F57   E1                     POP   HL   
2F58                          ;*Macro unroll:  test "5 \\a{%a}^", 5
2F58   31 00 4C               LD   SP,STACK   
2F5B   CD C6 0E               CALL   coldInit   
2F5E   CD 78 4A               CALL   execStr   
2F61   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
2F6B   E1                     POP   HL   
2F6C   E5                     PUSH   HL   
2F6D   11 05 00               LD   DE,5   
2F70   B7                     OR   A   
2F71   ED 52                  SBC   HL,DE   
2F73   7D                     LD   A,L   
2F74   B4                     OR   H   
2F75   CA CE 2F               JP   Z,expectM_3090S118   
2F78   CD 92 0E               CALL   printStr   
2F7B   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
2F8B   CD 92 0E               CALL   printStr   
2F8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F9D   21 05 00               LD   hl,5   
2FA0   E5                     PUSH   hl   
2FA1   E5                     PUSH   hl   
2FA2   CD 99 0F               CALL   run   
2FA5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2FAC   CD 92 0E               CALL   printStr   
2FAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FBC   E1                     POP   hl   
2FBD   E5                     PUSH   hl   
2FBE   E5                     PUSH   hl   
2FBF   CD 99 0F               CALL   run   
2FC2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2FCD   76                     HALT      
2FCE                EXPECTM_3090S118:      
2FCE   E1                     POP   HL   
2FCF                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
2FCF   31 00 4C               LD   SP,STACK   
2FD2   CD C6 0E               CALL   coldInit   
2FD5   CD 78 4A               CALL   execStr   
2FD8   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
2FE4   E1                     POP   HL   
2FE5   E5                     PUSH   HL   
2FE6   11 05 00               LD   DE,5   
2FE9   B7                     OR   A   
2FEA   ED 52                  SBC   HL,DE   
2FEC   7D                     LD   A,L   
2FED   B4                     OR   H   
2FEE   CA 49 30               JP   Z,expectM_3091S119   
2FF1   CD 92 0E               CALL   printStr   
2FF4   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
3006   CD 92 0E               CALL   printStr   
3009   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3018   21 05 00               LD   hl,5   
301B   E5                     PUSH   hl   
301C   E5                     PUSH   hl   
301D   CD 99 0F               CALL   run   
3020   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3027   CD 92 0E               CALL   printStr   
302A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3037   E1                     POP   hl   
3038   E5                     PUSH   hl   
3039   E5                     PUSH   hl   
303A   CD 99 0F               CALL   run   
303D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3048   76                     HALT      
3049                EXPECTM_3091S119:      
3049   E1                     POP   HL   
304A                          ;*Macro unroll:  test "\\a{{2}^}^", 2
304A   31 00 4C               LD   SP,STACK   
304D   CD C6 0E               CALL   coldInit   
3050   CD 78 4A               CALL   execStr   
3053   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
305D   E1                     POP   HL   
305E   E5                     PUSH   HL   
305F   11 02 00               LD   DE,2   
3062   B7                     OR   A   
3063   ED 52                  SBC   HL,DE   
3065   7D                     LD   A,L   
3066   B4                     OR   H   
3067   CA C0 30               JP   Z,expectM_3092S120   
306A   CD 92 0E               CALL   printStr   
306D   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
307D   CD 92 0E               CALL   printStr   
3080   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
308F   21 02 00               LD   hl,2   
3092   E5                     PUSH   hl   
3093   E5                     PUSH   hl   
3094   CD 99 0F               CALL   run   
3097   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
309E   CD 92 0E               CALL   printStr   
30A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30AE   E1                     POP   hl   
30AF   E5                     PUSH   hl   
30B0   E5                     PUSH   hl   
30B1   CD 99 0F               CALL   run   
30B4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
30BF   76                     HALT      
30C0                EXPECTM_3092S120:      
30C0   E1                     POP   HL   
30C1                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
30C1   31 00 4C               LD   SP,STACK   
30C4   CD C6 0E               CALL   coldInit   
30C7   CD 78 4A               CALL   execStr   
30CA   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
30D9   E1                     POP   HL   
30DA   E5                     PUSH   HL   
30DB   11 05 00               LD   DE,5   
30DE   B7                     OR   A   
30DF   ED 52                  SBC   HL,DE   
30E1   7D                     LD   A,L   
30E2   B4                     OR   H   
30E3   CA 41 31               JP   Z,expectM_3093S121   
30E6   CD 92 0E               CALL   printStr   
30E9   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
30FE   CD 92 0E               CALL   printStr   
3101   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3110   21 05 00               LD   hl,5   
3113   E5                     PUSH   hl   
3114   E5                     PUSH   hl   
3115   CD 99 0F               CALL   run   
3118   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
311F   CD 92 0E               CALL   printStr   
3122   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
312F   E1                     POP   hl   
3130   E5                     PUSH   hl   
3131   E5                     PUSH   hl   
3132   CD 99 0F               CALL   run   
3135   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3140   76                     HALT      
3141                EXPECTM_3093S121:      
3141   E1                     POP   HL   
3142                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
3142   31 00 4C               LD   SP,STACK   
3145   CD C6 0E               CALL   coldInit   
3148   CD 78 4A               CALL   execStr   
314B   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
315B   E1                     POP   HL   
315C   E5                     PUSH   HL   
315D   11 01 00               LD   DE,1   
3160   B7                     OR   A   
3161   ED 52                  SBC   HL,DE   
3163   7D                     LD   A,L   
3164   B4                     OR   H   
3165   CA C4 31               JP   Z,expectM_3094S122   
3168   CD 92 0E               CALL   printStr   
316B   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3181   CD 92 0E               CALL   printStr   
3184   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3193   21 01 00               LD   hl,1   
3196   E5                     PUSH   hl   
3197   E5                     PUSH   hl   
3198   CD 99 0F               CALL   run   
319B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
31A2   CD 92 0E               CALL   printStr   
31A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31B2   E1                     POP   hl   
31B3   E5                     PUSH   hl   
31B4   E5                     PUSH   hl   
31B5   CD 99 0F               CALL   run   
31B8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
31C3   76                     HALT      
31C4                EXPECTM_3094S122:      
31C4   E1                     POP   HL   
31C5                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
31C5   31 00 4C               LD   SP,STACK   
31C8   CD C6 0E               CALL   coldInit   
31CB   CD 78 4A               CALL   execStr   
31CE   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
31E1   E1                     POP   HL   
31E2   E5                     PUSH   HL   
31E3   11 07 00               LD   DE,7   
31E6   B7                     OR   A   
31E7   ED 52                  SBC   HL,DE   
31E9   7D                     LD   A,L   
31EA   B4                     OR   H   
31EB   CA 4D 32               JP   Z,expectM_3095S123   
31EE   CD 92 0E               CALL   printStr   
31F1   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
320A   CD 92 0E               CALL   printStr   
320D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
321C   21 07 00               LD   hl,7   
321F   E5                     PUSH   hl   
3220   E5                     PUSH   hl   
3221   CD 99 0F               CALL   run   
3224   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
322B   CD 92 0E               CALL   printStr   
322E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
323B   E1                     POP   hl   
323C   E5                     PUSH   hl   
323D   E5                     PUSH   hl   
323E   CD 99 0F               CALL   run   
3241   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
324C   76                     HALT      
324D                EXPECTM_3095S123:      
324D   E1                     POP   HL   
324E                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
324E   31 00 4C               LD   SP,STACK   
3251   CD C6 0E               CALL   coldInit   
3254   CD 78 4A               CALL   execStr   
3257   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
326C   E1                     POP   HL   
326D   E5                     PUSH   HL   
326E   11 06 00               LD   DE,6   
3271   B7                     OR   A   
3272   ED 52                  SBC   HL,DE   
3274   7D                     LD   A,L   
3275   B4                     OR   H   
3276   CA DA 32               JP   Z,expectM_3096S124   
3279   CD 92 0E               CALL   printStr   
327C   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3297   CD 92 0E               CALL   printStr   
329A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32A9   21 06 00               LD   hl,6   
32AC   E5                     PUSH   hl   
32AD   E5                     PUSH   hl   
32AE   CD 99 0F               CALL   run   
32B1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
32B8   CD 92 0E               CALL   printStr   
32BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32C8   E1                     POP   hl   
32C9   E5                     PUSH   hl   
32CA   E5                     PUSH   hl   
32CB   CD 99 0F               CALL   run   
32CE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
32D9   76                     HALT      
32DA                EXPECTM_3096S124:      
32DA   E1                     POP   HL   
32DB                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
32DB   31 00 4C               LD   SP,STACK   
32DE   CD C6 0E               CALL   coldInit   
32E1   CD 78 4A               CALL   execStr   
32E4   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
32F2   E1                     POP   HL   
32F3   E5                     PUSH   HL   
32F4   11 02 00               LD   DE,2   
32F7   B7                     OR   A   
32F8   ED 52                  SBC   HL,DE   
32FA   7D                     LD   A,L   
32FB   B4                     OR   H   
32FC   CA 59 33               JP   Z,expectM_3097S125   
32FF   CD 92 0E               CALL   printStr   
3302   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
3316   CD 92 0E               CALL   printStr   
3319   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3328   21 02 00               LD   hl,2   
332B   E5                     PUSH   hl   
332C   E5                     PUSH   hl   
332D   CD 99 0F               CALL   run   
3330   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3337   CD 92 0E               CALL   printStr   
333A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3347   E1                     POP   hl   
3348   E5                     PUSH   hl   
3349   E5                     PUSH   hl   
334A   CD 99 0F               CALL   run   
334D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3358   76                     HALT      
3359                EXPECTM_3097S125:      
3359   E1                     POP   HL   
335A                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
335A   31 00 4C               LD   SP,STACK   
335D   CD C6 0E               CALL   coldInit   
3360   CD 78 4A               CALL   execStr   
3363   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
3374   E1                     POP   HL   
3375   E5                     PUSH   HL   
3376   11 01 00               LD   DE,1   
3379   B7                     OR   A   
337A   ED 52                  SBC   HL,DE   
337C   7D                     LD   A,L   
337D   B4                     OR   H   
337E   CA DE 33               JP   Z,expectM_3098S126   
3381   CD 92 0E               CALL   printStr   
3384   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
339B   CD 92 0E               CALL   printStr   
339E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33AD   21 01 00               LD   hl,1   
33B0   E5                     PUSH   hl   
33B1   E5                     PUSH   hl   
33B2   CD 99 0F               CALL   run   
33B5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
33BC   CD 92 0E               CALL   printStr   
33BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33CC   E1                     POP   hl   
33CD   E5                     PUSH   hl   
33CE   E5                     PUSH   hl   
33CF   CD 99 0F               CALL   run   
33D2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
33DD   76                     HALT      
33DE                EXPECTM_3098S126:      
33DE   E1                     POP   HL   
33DF                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
33DF   31 00 4C               LD   SP,STACK   
33E2   CD C6 0E               CALL   coldInit   
33E5   CD 78 4A               CALL   execStr   
33E8   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
33FA   E1                     POP   HL   
33FB   E5                     PUSH   HL   
33FC   11 02 00               LD   DE,2   
33FF   B7                     OR   A   
3400   ED 52                  SBC   HL,DE   
3402   7D                     LD   A,L   
3403   B4                     OR   H   
3404   CA 65 34               JP   Z,expectM_3099S127   
3407   CD 92 0E               CALL   printStr   
340A   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3422   CD 92 0E               CALL   printStr   
3425   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3434   21 02 00               LD   hl,2   
3437   E5                     PUSH   hl   
3438   E5                     PUSH   hl   
3439   CD 99 0F               CALL   run   
343C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3443   CD 92 0E               CALL   printStr   
3446   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3453   E1                     POP   hl   
3454   E5                     PUSH   hl   
3455   E5                     PUSH   hl   
3456   CD 99 0F               CALL   run   
3459   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3464   76                     HALT      
3465                EXPECTM_3099S127:      
3465   E1                     POP   HL   
3466                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3466   31 00 4C               LD   SP,STACK   
3469   CD C6 0E               CALL   coldInit   
346C   CD 78 4A               CALL   execStr   
346F   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3482   E1                     POP   HL   
3483   E5                     PUSH   HL   
3484   11 02 00               LD   DE,2   
3487   B7                     OR   A   
3488   ED 52                  SBC   HL,DE   
348A   7D                     LD   A,L   
348B   B4                     OR   H   
348C   CA EE 34               JP   Z,expectM_3100S128   
348F   CD 92 0E               CALL   printStr   
3492   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
34AB   CD 92 0E               CALL   printStr   
34AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34BD   21 02 00               LD   hl,2   
34C0   E5                     PUSH   hl   
34C1   E5                     PUSH   hl   
34C2   CD 99 0F               CALL   run   
34C5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
34CC   CD 92 0E               CALL   printStr   
34CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34DC   E1                     POP   hl   
34DD   E5                     PUSH   hl   
34DE   E5                     PUSH   hl   
34DF   CD 99 0F               CALL   run   
34E2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
34ED   76                     HALT      
34EE                EXPECTM_3100S128:      
34EE   E1                     POP   HL   
34EF                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
34EF   31 00 4C               LD   SP,STACK   
34F2   CD C6 0E               CALL   coldInit   
34F5   CD 78 4A               CALL   execStr   
34F8   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
350A   E1                     POP   HL   
350B   E5                     PUSH   HL   
350C   11 02 00               LD   DE,2   
350F   B7                     OR   A   
3510   ED 52                  SBC   HL,DE   
3512   7D                     LD   A,L   
3513   B4                     OR   H   
3514   CA 75 35               JP   Z,expectM_3101S129   
3517   CD 92 0E               CALL   printStr   
351A   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3532   CD 92 0E               CALL   printStr   
3535   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3544   21 02 00               LD   hl,2   
3547   E5                     PUSH   hl   
3548   E5                     PUSH   hl   
3549   CD 99 0F               CALL   run   
354C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3553   CD 92 0E               CALL   printStr   
3556   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3563   E1                     POP   hl   
3564   E5                     PUSH   hl   
3565   E5                     PUSH   hl   
3566   CD 99 0F               CALL   run   
3569   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3574   76                     HALT      
3575                EXPECTM_3101S129:      
3575   E1                     POP   HL   
3576                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3576   31 00 4C               LD   SP,STACK   
3579   CD C6 0E               CALL   coldInit   
357C   CD 78 4A               CALL   execStr   
357F   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3598   E1                     POP   HL   
3599   E5                     PUSH   HL   
359A   11 05 00               LD   DE,5   
359D   B7                     OR   A   
359E   ED 52                  SBC   HL,DE   
35A0   7D                     LD   A,L   
35A1   B4                     OR   H   
35A2   CA 0A 36               JP   Z,expectM_3102S130   
35A5   CD 92 0E               CALL   printStr   
35A8   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
35C7   CD 92 0E               CALL   printStr   
35CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35D9   21 05 00               LD   hl,5   
35DC   E5                     PUSH   hl   
35DD   E5                     PUSH   hl   
35DE   CD 99 0F               CALL   run   
35E1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
35E8   CD 92 0E               CALL   printStr   
35EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35F8   E1                     POP   hl   
35F9   E5                     PUSH   hl   
35FA   E5                     PUSH   hl   
35FB   CD 99 0F               CALL   run   
35FE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3609   76                     HALT      
360A                EXPECTM_3102S130:      
360A   E1                     POP   HL   
360B                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
360B   31 00 4C               LD   SP,STACK   
360E   CD C6 0E               CALL   coldInit   
3611   CD 78 4A               CALL   execStr   
3614   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3624   E1                     POP   HL   
3625   E5                     PUSH   HL   
3626   11 02 00               LD   DE,2   
3629   B7                     OR   A   
362A   ED 52                  SBC   HL,DE   
362C   7D                     LD   A,L   
362D   B4                     OR   H   
362E   CA 8D 36               JP   Z,expectM_3103S131   
3631   CD 92 0E               CALL   printStr   
3634   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
364A   CD 92 0E               CALL   printStr   
364D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
365C   21 02 00               LD   hl,2   
365F   E5                     PUSH   hl   
3660   E5                     PUSH   hl   
3661   CD 99 0F               CALL   run   
3664   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
366B   CD 92 0E               CALL   printStr   
366E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
367B   E1                     POP   hl   
367C   E5                     PUSH   hl   
367D   E5                     PUSH   hl   
367E   CD 99 0F               CALL   run   
3681   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
368C   76                     HALT      
368D                EXPECTM_3103S131:      
368D   E1                     POP   HL   
368E                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
368E   31 00 4C               LD   SP,STACK   
3691   CD C6 0E               CALL   coldInit   
3694   CD 78 4A               CALL   execStr   
3697   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
36AE   E1                     POP   HL   
36AF   E5                     PUSH   HL   
36B0   11 64 00               LD   DE,100   
36B3   B7                     OR   A   
36B4   ED 52                  SBC   HL,DE   
36B6   7D                     LD   A,L   
36B7   B4                     OR   H   
36B8   CA 1E 37               JP   Z,expectM_3104S132   
36BB   CD 92 0E               CALL   printStr   
36BE   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
36DB   CD 92 0E               CALL   printStr   
36DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36ED   21 64 00               LD   hl,100   
36F0   E5                     PUSH   hl   
36F1   E5                     PUSH   hl   
36F2   CD 99 0F               CALL   run   
36F5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
36FC   CD 92 0E               CALL   printStr   
36FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
370C   E1                     POP   hl   
370D   E5                     PUSH   hl   
370E   E5                     PUSH   hl   
370F   CD 99 0F               CALL   run   
3712   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
371D   76                     HALT      
371E                EXPECTM_3104S132:      
371E   E1                     POP   HL   
371F                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
371F   31 00 4C               LD   SP,STACK   
3722   CD C6 0E               CALL   coldInit   
3725   CD 78 4A               CALL   execStr   
3728   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3740   E1                     POP   HL   
3741   E5                     PUSH   HL   
3742   11 01 00               LD   DE,1   
3745   B7                     OR   A   
3746   ED 52                  SBC   HL,DE   
3748   7D                     LD   A,L   
3749   B4                     OR   H   
374A   CA B1 37               JP   Z,expectM_3105S133   
374D   CD 92 0E               CALL   printStr   
3750   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
376E   CD 92 0E               CALL   printStr   
3771   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3780   21 01 00               LD   hl,1   
3783   E5                     PUSH   hl   
3784   E5                     PUSH   hl   
3785   CD 99 0F               CALL   run   
3788   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
378F   CD 92 0E               CALL   printStr   
3792   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
379F   E1                     POP   hl   
37A0   E5                     PUSH   hl   
37A1   E5                     PUSH   hl   
37A2   CD 99 0F               CALL   run   
37A5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
37B0   76                     HALT      
37B1                EXPECTM_3105S133:      
37B1   E1                     POP   HL   
37B2                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
37B2   31 00 4C               LD   SP,STACK   
37B5   CD C6 0E               CALL   coldInit   
37B8   CD 78 4A               CALL   execStr   
37BB   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
37D4   E1                     POP   HL   
37D5   E5                     PUSH   HL   
37D6   11 02 00               LD   DE,2   
37D9   B7                     OR   A   
37DA   ED 52                  SBC   HL,DE   
37DC   7D                     LD   A,L   
37DD   B4                     OR   H   
37DE   CA 46 38               JP   Z,expectM_3106S134   
37E1   CD 92 0E               CALL   printStr   
37E4   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3803   CD 92 0E               CALL   printStr   
3806   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3815   21 02 00               LD   hl,2   
3818   E5                     PUSH   hl   
3819   E5                     PUSH   hl   
381A   CD 99 0F               CALL   run   
381D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3824   CD 92 0E               CALL   printStr   
3827   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3834   E1                     POP   hl   
3835   E5                     PUSH   hl   
3836   E5                     PUSH   hl   
3837   CD 99 0F               CALL   run   
383A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3845   76                     HALT      
3846                EXPECTM_3106S134:      
3846   E1                     POP   HL   
3847                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
3847   31 00 4C               LD   SP,STACK   
384A   CD C6 0E               CALL   coldInit   
384D   CD 78 4A               CALL   execStr   
3850   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
386E   E1                     POP   HL   
386F   E5                     PUSH   HL   
3870   11 0B 00               LD   DE,11   
3873   B7                     OR   A   
3874   ED 52                  SBC   HL,DE   
3876   7D                     LD   A,L   
3877   B4                     OR   H   
3878   CA E5 38               JP   Z,expectM_3107S135   
387B   CD 92 0E               CALL   printStr   
387E   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
38A2   CD 92 0E               CALL   printStr   
38A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38B4   21 0B 00               LD   hl,11   
38B7   E5                     PUSH   hl   
38B8   E5                     PUSH   hl   
38B9   CD 99 0F               CALL   run   
38BC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
38C3   CD 92 0E               CALL   printStr   
38C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38D3   E1                     POP   hl   
38D4   E5                     PUSH   hl   
38D5   E5                     PUSH   hl   
38D6   CD 99 0F               CALL   run   
38D9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
38E4   76                     HALT      
38E5                EXPECTM_3107S135:      
38E5   E1                     POP   HL   
38E6                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
38E6   31 00 4C               LD   SP,STACK   
38E9   CD C6 0E               CALL   coldInit   
38EC   CD 78 4A               CALL   execStr   
38EF   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
390D   E1                     POP   HL   
390E   E5                     PUSH   HL   
390F   11 15 00               LD   DE,21   
3912   B7                     OR   A   
3913   ED 52                  SBC   HL,DE   
3915   7D                     LD   A,L   
3916   B4                     OR   H   
3917   CA 84 39               JP   Z,expectM_3108S136   
391A   CD 92 0E               CALL   printStr   
391D   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
3941   CD 92 0E               CALL   printStr   
3944   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3953   21 15 00               LD   hl,21   
3956   E5                     PUSH   hl   
3957   E5                     PUSH   hl   
3958   CD 99 0F               CALL   run   
395B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3962   CD 92 0E               CALL   printStr   
3965   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3972   E1                     POP   hl   
3973   E5                     PUSH   hl   
3974   E5                     PUSH   hl   
3975   CD 99 0F               CALL   run   
3978   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3983   76                     HALT      
3984                EXPECTM_3108S136:      
3984   E1                     POP   HL   
3985                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3985   31 00 4C               LD   SP,STACK   
3988   CD C6 0E               CALL   coldInit   
398B   CD 78 4A               CALL   execStr   
398E   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
399C   E1                     POP   HL   
399D   E5                     PUSH   HL   
399E   11 14 00               LD   DE,20   
39A1   B7                     OR   A   
39A2   ED 52                  SBC   HL,DE   
39A4   7D                     LD   A,L   
39A5   B4                     OR   H   
39A6   CA 03 3A               JP   Z,expectM_3109S137   
39A9   CD 92 0E               CALL   printStr   
39AC   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
39C0   CD 92 0E               CALL   printStr   
39C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39D2   21 14 00               LD   hl,20   
39D5   E5                     PUSH   hl   
39D6   E5                     PUSH   hl   
39D7   CD 99 0F               CALL   run   
39DA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
39E1   CD 92 0E               CALL   printStr   
39E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39F1   E1                     POP   hl   
39F2   E5                     PUSH   hl   
39F3   E5                     PUSH   hl   
39F4   CD 99 0F               CALL   run   
39F7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3A02   76                     HALT      
3A03                EXPECTM_3109S137:      
3A03   E1                     POP   HL   
3A04                          ;*Macro unroll:  test "[10 20 30 40] /al", 4
3A04   31 00 4C               LD   SP,STACK   
3A07   CD C6 0E               CALL   coldInit   
3A0A   CD 78 4A               CALL   execStr   
3A0D   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 DB   "[10 20 30 40] /al",0   
3A1F   E1                     POP   HL   
3A20   E5                     PUSH   HL   
3A21   11 04 00               LD   DE,4   
3A24   B7                     OR   A   
3A25   ED 52                  SBC   HL,DE   
3A27   7D                     LD   A,L   
3A28   B4                     OR   H   
3A29   CA 8A 3A               JP   Z,expectM_3110S138   
3A2C   CD 92 0E               CALL   printStr   
3A2F   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 .CSTR   "Code: ","[10 20 30 40] /al"   
3A47   CD 92 0E               CALL   printStr   
3A4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A59   21 04 00               LD   hl,4   
3A5C   E5                     PUSH   hl   
3A5D   E5                     PUSH   hl   
3A5E   CD 99 0F               CALL   run   
3A61   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3A68   CD 92 0E               CALL   printStr   
3A6B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A78   E1                     POP   hl   
3A79   E5                     PUSH   hl   
3A7A   E5                     PUSH   hl   
3A7B   CD 99 0F               CALL   run   
3A7E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3A89   76                     HALT      
3A8A                EXPECTM_3110S138:      
3A8A   E1                     POP   HL   
3A8B                          ;*Macro unroll:  test "/bm [1 2 3] 1#", 2
3A8B   31 00 4C               LD   SP,STACK   
3A8E   CD C6 0E               CALL   coldInit   
3A91   CD 78 4A               CALL   execStr   
3A94   2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/bm [1 2 3] 1#",0   
3AA3   E1                     POP   HL   
3AA4   E5                     PUSH   HL   
3AA5   11 02 00               LD   DE,2   
3AA8   B7                     OR   A   
3AA9   ED 52                  SBC   HL,DE   
3AAB   7D                     LD   A,L   
3AAC   B4                     OR   H   
3AAD   CA 0B 3B               JP   Z,expectM_3111S139   
3AB0   CD 92 0E               CALL   printStr   
3AB3   43 6F 64 65 3A 20 2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/bm [1 2 3] 1#"   
3AC8   CD 92 0E               CALL   printStr   
3ACB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3ADA   21 02 00               LD   hl,2   
3ADD   E5                     PUSH   hl   
3ADE   E5                     PUSH   hl   
3ADF   CD 99 0F               CALL   run   
3AE2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3AE9   CD 92 0E               CALL   printStr   
3AEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AF9   E1                     POP   hl   
3AFA   E5                     PUSH   hl   
3AFB   E5                     PUSH   hl   
3AFC   CD 99 0F               CALL   run   
3AFF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3B0A   76                     HALT      
3B0B                EXPECTM_3111S139:      
3B0B   E1                     POP   HL   
3B0C                          ;*Macro unroll:  test "/bm [~A ~B ~C] 1#", 66
3B0C   31 00 4C               LD   SP,STACK   
3B0F   CD C6 0E               CALL   coldInit   
3B12   CD 78 4A               CALL   execStr   
3B15   2F 62 6D 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 DB   "/bm [~A ~B ~C] 1#",0   
3B27   E1                     POP   HL   
3B28   E5                     PUSH   HL   
3B29   11 42 00               LD   DE,66   
3B2C   B7                     OR   A   
3B2D   ED 52                  SBC   HL,DE   
3B2F   7D                     LD   A,L   
3B30   B4                     OR   H   
3B31   CA 92 3B               JP   Z,expectM_3112S140   
3B34   CD 92 0E               CALL   printStr   
3B37   43 6F 64 65 3A 20 2F 62 6D 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 .CSTR   "Code: ","/bm [~A ~B ~C] 1#"   
3B4F   CD 92 0E               CALL   printStr   
3B52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B61   21 42 00               LD   hl,66   
3B64   E5                     PUSH   hl   
3B65   E5                     PUSH   hl   
3B66   CD 99 0F               CALL   run   
3B69   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3B70   CD 92 0E               CALL   printStr   
3B73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B80   E1                     POP   hl   
3B81   E5                     PUSH   hl   
3B82   E5                     PUSH   hl   
3B83   CD 99 0F               CALL   run   
3B86   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3B91   76                     HALT      
3B92                EXPECTM_3112S140:      
3B92   E1                     POP   HL   
3B93                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3B93   31 00 4C               LD   SP,STACK   
3B96   CD C6 0E               CALL   coldInit   
3B99   CD 78 4A               CALL   execStr   
3B9C   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3BB0   E1                     POP   HL   
3BB1   E5                     PUSH   HL   
3BB2   11 0A 00               LD   DE,10   
3BB5   B7                     OR   A   
3BB6   ED 52                  SBC   HL,DE   
3BB8   7D                     LD   A,L   
3BB9   B4                     OR   H   
3BBA   CA 1D 3C               JP   Z,expectM_3113S141   
3BBD   CD 92 0E               CALL   printStr   
3BC0   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3BDA   CD 92 0E               CALL   printStr   
3BDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BEC   21 0A 00               LD   hl,10   
3BEF   E5                     PUSH   hl   
3BF0   E5                     PUSH   hl   
3BF1   CD 99 0F               CALL   run   
3BF4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3BFB   CD 92 0E               CALL   printStr   
3BFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C0B   E1                     POP   hl   
3C0C   E5                     PUSH   hl   
3C0D   E5                     PUSH   hl   
3C0E   CD 99 0F               CALL   run   
3C11   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3C1C   76                     HALT      
3C1D                EXPECTM_3113S141:      
3C1D   E1                     POP   HL   
3C1E                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
3C1E   31 00 4C               LD   SP,STACK   
3C21   CD C6 0E               CALL   coldInit   
3C24   CD 78 4A               CALL   execStr   
3C27   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
3C42   E1                     POP   HL   
3C43   E5                     PUSH   HL   
3C44   11 0A 00               LD   DE,10   
3C47   B7                     OR   A   
3C48   ED 52                  SBC   HL,DE   
3C4A   7D                     LD   A,L   
3C4B   B4                     OR   H   
3C4C   CA B6 3C               JP   Z,expectM_3114S142   
3C4F   CD 92 0E               CALL   printStr   
3C52   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
3C73   CD 92 0E               CALL   printStr   
3C76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C85   21 0A 00               LD   hl,10   
3C88   E5                     PUSH   hl   
3C89   E5                     PUSH   hl   
3C8A   CD 99 0F               CALL   run   
3C8D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3C94   CD 92 0E               CALL   printStr   
3C97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CA4   E1                     POP   hl   
3CA5   E5                     PUSH   hl   
3CA6   E5                     PUSH   hl   
3CA7   CD 99 0F               CALL   run   
3CAA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3CB5   76                     HALT      
3CB6                EXPECTM_3114S142:      
3CB6   E1                     POP   HL   
3CB7                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
3CB7   31 00 4C               LD   SP,STACK   
3CBA   CD C6 0E               CALL   coldInit   
3CBD   CD 78 4A               CALL   execStr   
3CC0   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3CDF   E1                     POP   HL   
3CE0   E5                     PUSH   HL   
3CE1   11 0A 00               LD   DE,10   
3CE4   B7                     OR   A   
3CE5   ED 52                  SBC   HL,DE   
3CE7   7D                     LD   A,L   
3CE8   B4                     OR   H   
3CE9   CA 57 3D               JP   Z,expectM_3115S143   
3CEC   CD 92 0E               CALL   printStr   
3CEF   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3D14   CD 92 0E               CALL   printStr   
3D17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D26   21 0A 00               LD   hl,10   
3D29   E5                     PUSH   hl   
3D2A   E5                     PUSH   hl   
3D2B   CD 99 0F               CALL   run   
3D2E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3D35   CD 92 0E               CALL   printStr   
3D38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D45   E1                     POP   hl   
3D46   E5                     PUSH   hl   
3D47   E5                     PUSH   hl   
3D48   CD 99 0F               CALL   run   
3D4B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3D56   76                     HALT      
3D57                EXPECTM_3115S143:      
3D57   E1                     POP   HL   
3D58                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
3D58   31 00 4C               LD   SP,STACK   
3D5B   CD C6 0E               CALL   coldInit   
3D5E   CD 78 4A               CALL   execStr   
3D61   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3D80   E1                     POP   HL   
3D81   E5                     PUSH   HL   
3D82   11 14 00               LD   DE,20   
3D85   B7                     OR   A   
3D86   ED 52                  SBC   HL,DE   
3D88   7D                     LD   A,L   
3D89   B4                     OR   H   
3D8A   CA F8 3D               JP   Z,expectM_3116S144   
3D8D   CD 92 0E               CALL   printStr   
3D90   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3DB5   CD 92 0E               CALL   printStr   
3DB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DC7   21 14 00               LD   hl,20   
3DCA   E5                     PUSH   hl   
3DCB   E5                     PUSH   hl   
3DCC   CD 99 0F               CALL   run   
3DCF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3DD6   CD 92 0E               CALL   printStr   
3DD9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DE6   E1                     POP   hl   
3DE7   E5                     PUSH   hl   
3DE8   E5                     PUSH   hl   
3DE9   CD 99 0F               CALL   run   
3DEC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3DF7   76                     HALT      
3DF8                EXPECTM_3116S144:      
3DF8   E1                     POP   HL   
3DF9                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3DF9   31 00 4C               LD   SP,STACK   
3DFC   CD C6 0E               CALL   coldInit   
3DFF   CD 78 4A               CALL   execStr   
3E02   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3E1A   E1                     POP   HL   
3E1B   E5                     PUSH   HL   
3E1C   11 06 00               LD   DE,6   
3E1F   B7                     OR   A   
3E20   ED 52                  SBC   HL,DE   
3E22   7D                     LD   A,L   
3E23   B4                     OR   H   
3E24   CA 8B 3E               JP   Z,expectM_3117S145   
3E27   CD 92 0E               CALL   printStr   
3E2A   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3E48   CD 92 0E               CALL   printStr   
3E4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E5A   21 06 00               LD   hl,6   
3E5D   E5                     PUSH   hl   
3E5E   E5                     PUSH   hl   
3E5F   CD 99 0F               CALL   run   
3E62   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3E69   CD 92 0E               CALL   printStr   
3E6C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E79   E1                     POP   hl   
3E7A   E5                     PUSH   hl   
3E7B   E5                     PUSH   hl   
3E7C   CD 99 0F               CALL   run   
3E7F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3E8A   76                     HALT      
3E8B                EXPECTM_3117S145:      
3E8B   E1                     POP   HL   
3E8C                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3E8C   31 00 4C               LD   SP,STACK   
3E8F   CD C6 0E               CALL   coldInit   
3E92   CD 78 4A               CALL   execStr   
3E95   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
3EB0   E1                     POP   HL   
3EB1   E5                     PUSH   HL   
3EB2   11 02 00               LD   DE,2   
3EB5   B7                     OR   A   
3EB6   ED 52                  SBC   HL,DE   
3EB8   7D                     LD   A,L   
3EB9   B4                     OR   H   
3EBA   CA 24 3F               JP   Z,expectM_3118S146   
3EBD   CD 92 0E               CALL   printStr   
3EC0   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
3EE1   CD 92 0E               CALL   printStr   
3EE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EF3   21 02 00               LD   hl,2   
3EF6   E5                     PUSH   hl   
3EF7   E5                     PUSH   hl   
3EF8   CD 99 0F               CALL   run   
3EFB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3F02   CD 92 0E               CALL   printStr   
3F05   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F12   E1                     POP   hl   
3F13   E5                     PUSH   hl   
3F14   E5                     PUSH   hl   
3F15   CD 99 0F               CALL   run   
3F18   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3F23   76                     HALT      
3F24                EXPECTM_3118S146:      
3F24   E1                     POP   HL   
3F25                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3F25   31 00 4C               LD   SP,STACK   
3F28   CD C6 0E               CALL   coldInit   
3F2B   CD 78 4A               CALL   execStr   
3F2E   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
3F54   E1                     POP   HL   
3F55   E5                     PUSH   HL   
3F56   11 0A 00               LD   DE,10   
3F59   B7                     OR   A   
3F5A   ED 52                  SBC   HL,DE   
3F5C   7D                     LD   A,L   
3F5D   B4                     OR   H   
3F5E   CA D3 3F               JP   Z,expectM_3119S147   
3F61   CD 92 0E               CALL   printStr   
3F64   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3F90   CD 92 0E               CALL   printStr   
3F93   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FA2   21 0A 00               LD   hl,10   
3FA5   E5                     PUSH   hl   
3FA6   E5                     PUSH   hl   
3FA7   CD 99 0F               CALL   run   
3FAA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3FB1   CD 92 0E               CALL   printStr   
3FB4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FC1   E1                     POP   hl   
3FC2   E5                     PUSH   hl   
3FC3   E5                     PUSH   hl   
3FC4   CD 99 0F               CALL   run   
3FC7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3FD2   76                     HALT      
3FD3                EXPECTM_3119S147:      
3FD3   E1                     POP   HL   
3FD4                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
3FD4   31 00 4C               LD   SP,STACK   
3FD7   CD C6 0E               CALL   coldInit   
3FDA   CD 78 4A               CALL   execStr   
3FDD   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
4008   E1                     POP   HL   
4009   E5                     PUSH   HL   
400A   11 06 00               LD   DE,6   
400D   B7                     OR   A   
400E   ED 52                  SBC   HL,DE   
4010   7D                     LD   A,L   
4011   B4                     OR   H   
4012   CA 8C 40               JP   Z,expectM_3120S148   
4015   CD 92 0E               CALL   printStr   
4018   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
4049   CD 92 0E               CALL   printStr   
404C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
405B   21 06 00               LD   hl,6   
405E   E5                     PUSH   hl   
405F   E5                     PUSH   hl   
4060   CD 99 0F               CALL   run   
4063   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
406A   CD 92 0E               CALL   printStr   
406D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
407A   E1                     POP   hl   
407B   E5                     PUSH   hl   
407C   E5                     PUSH   hl   
407D   CD 99 0F               CALL   run   
4080   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
408B   76                     HALT      
408C                EXPECTM_3120S148:      
408C   E1                     POP   HL   
408D                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
408D   31 00 4C               LD   SP,STACK   
4090   CD C6 0E               CALL   coldInit   
4093   CD 78 4A               CALL   execStr   
4096   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
40AA   E1                     POP   HL   
40AB   E5                     PUSH   HL   
40AC   11 03 00               LD   DE,3   
40AF   B7                     OR   A   
40B0   ED 52                  SBC   HL,DE   
40B2   7D                     LD   A,L   
40B3   B4                     OR   H   
40B4   CA 17 41               JP   Z,expectM_3121S149   
40B7   CD 92 0E               CALL   printStr   
40BA   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
40D4   CD 92 0E               CALL   printStr   
40D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40E6   21 03 00               LD   hl,3   
40E9   E5                     PUSH   hl   
40EA   E5                     PUSH   hl   
40EB   CD 99 0F               CALL   run   
40EE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
40F5   CD 92 0E               CALL   printStr   
40F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4105   E1                     POP   hl   
4106   E5                     PUSH   hl   
4107   E5                     PUSH   hl   
4108   CD 99 0F               CALL   run   
410B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4116   76                     HALT      
4117                EXPECTM_3121S149:      
4117   E1                     POP   HL   
4118                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
4118   31 00 4C               LD   SP,STACK   
411B   CD C6 0E               CALL   coldInit   
411E   CD 78 4A               CALL   execStr   
4121   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
4135   E1                     POP   HL   
4136   E5                     PUSH   HL   
4137   11 01 00               LD   DE,1   
413A   B7                     OR   A   
413B   ED 52                  SBC   HL,DE   
413D   7D                     LD   A,L   
413E   B4                     OR   H   
413F   CA A2 41               JP   Z,expectM_3122S150   
4142   CD 92 0E               CALL   printStr   
4145   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
415F   CD 92 0E               CALL   printStr   
4162   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4171   21 01 00               LD   hl,1   
4174   E5                     PUSH   hl   
4175   E5                     PUSH   hl   
4176   CD 99 0F               CALL   run   
4179   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4180   CD 92 0E               CALL   printStr   
4183   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4190   E1                     POP   hl   
4191   E5                     PUSH   hl   
4192   E5                     PUSH   hl   
4193   CD 99 0F               CALL   run   
4196   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
41A1   76                     HALT      
41A2                EXPECTM_3122S150:      
41A2   E1                     POP   HL   
41A3                          ;*Macro unroll:  test "~A 1 - /ad", NUL
41A3   31 00 4C               LD   SP,STACK   
41A6   CD C6 0E               CALL   coldInit   
41A9   CD 78 4A               CALL   execStr   
41AC   7E 41 20 31 20 2D 20 2F 61 64 00 DB   "~A 1 - /ad",0   
41B7   E1                     POP   HL   
41B8   E5                     PUSH   HL   
41B9   11 00 00               LD   DE,NUL   
41BC   B7                     OR   A   
41BD   ED 52                  SBC   HL,DE   
41BF   7D                     LD   A,L   
41C0   B4                     OR   H   
41C1   CA 1B 42               JP   Z,expectM_3123S151   
41C4   CD 92 0E               CALL   printStr   
41C7   43 6F 64 65 3A 20 7E 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~A 1 - /ad"   
41D8   CD 92 0E               CALL   printStr   
41DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41EA   21 00 00               LD   hl,NUL   
41ED   E5                     PUSH   hl   
41EE   E5                     PUSH   hl   
41EF   CD 99 0F               CALL   run   
41F2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
41F9   CD 92 0E               CALL   printStr   
41FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4209   E1                     POP   hl   
420A   E5                     PUSH   hl   
420B   E5                     PUSH   hl   
420C   CD 99 0F               CALL   run   
420F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
421A   76                     HALT      
421B                EXPECTM_3123S151:      
421B   E1                     POP   HL   
421C                          ;*Macro unroll:  test "~Z 1 + /ad", NUL
421C   31 00 4C               LD   SP,STACK   
421F   CD C6 0E               CALL   coldInit   
4222   CD 78 4A               CALL   execStr   
4225   7E 5A 20 31 20 2B 20 2F 61 64 00 DB   "~Z 1 + /ad",0   
4230   E1                     POP   HL   
4231   E5                     PUSH   HL   
4232   11 00 00               LD   DE,NUL   
4235   B7                     OR   A   
4236   ED 52                  SBC   HL,DE   
4238   7D                     LD   A,L   
4239   B4                     OR   H   
423A   CA 94 42               JP   Z,expectM_3124S152   
423D   CD 92 0E               CALL   printStr   
4240   43 6F 64 65 3A 20 7E 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~Z 1 + /ad"   
4251   CD 92 0E               CALL   printStr   
4254   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4263   21 00 00               LD   hl,NUL   
4266   E5                     PUSH   hl   
4267   E5                     PUSH   hl   
4268   CD 99 0F               CALL   run   
426B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4272   CD 92 0E               CALL   printStr   
4275   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4282   E1                     POP   hl   
4283   E5                     PUSH   hl   
4284   E5                     PUSH   hl   
4285   CD 99 0F               CALL   run   
4288   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4293   76                     HALT      
4294                EXPECTM_3124S152:      
4294   E1                     POP   HL   
4295                          ;*Macro unroll:  test "~a 1 - /ad", NUL
4295   31 00 4C               LD   SP,STACK   
4298   CD C6 0E               CALL   coldInit   
429B   CD 78 4A               CALL   execStr   
429E   7E 61 20 31 20 2D 20 2F 61 64 00 DB   "~a 1 - /ad",0   
42A9   E1                     POP   HL   
42AA   E5                     PUSH   HL   
42AB   11 00 00               LD   DE,NUL   
42AE   B7                     OR   A   
42AF   ED 52                  SBC   HL,DE   
42B1   7D                     LD   A,L   
42B2   B4                     OR   H   
42B3   CA 0D 43               JP   Z,expectM_3125S153   
42B6   CD 92 0E               CALL   printStr   
42B9   43 6F 64 65 3A 20 7E 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~a 1 - /ad"   
42CA   CD 92 0E               CALL   printStr   
42CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42DC   21 00 00               LD   hl,NUL   
42DF   E5                     PUSH   hl   
42E0   E5                     PUSH   hl   
42E1   CD 99 0F               CALL   run   
42E4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
42EB   CD 92 0E               CALL   printStr   
42EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42FB   E1                     POP   hl   
42FC   E5                     PUSH   hl   
42FD   E5                     PUSH   hl   
42FE   CD 99 0F               CALL   run   
4301   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
430C   76                     HALT      
430D                EXPECTM_3125S153:      
430D   E1                     POP   HL   
430E                          ;*Macro unroll:  test "~z 1 + /ad", NUL
430E   31 00 4C               LD   SP,STACK   
4311   CD C6 0E               CALL   coldInit   
4314   CD 78 4A               CALL   execStr   
4317   7E 7A 20 31 20 2B 20 2F 61 64 00 DB   "~z 1 + /ad",0   
4322   E1                     POP   HL   
4323   E5                     PUSH   HL   
4324   11 00 00               LD   DE,NUL   
4327   B7                     OR   A   
4328   ED 52                  SBC   HL,DE   
432A   7D                     LD   A,L   
432B   B4                     OR   H   
432C   CA 86 43               JP   Z,expectM_3126S154   
432F   CD 92 0E               CALL   printStr   
4332   43 6F 64 65 3A 20 7E 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~z 1 + /ad"   
4343   CD 92 0E               CALL   printStr   
4346   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4355   21 00 00               LD   hl,NUL   
4358   E5                     PUSH   hl   
4359   E5                     PUSH   hl   
435A   CD 99 0F               CALL   run   
435D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4364   CD 92 0E               CALL   printStr   
4367   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4374   E1                     POP   hl   
4375   E5                     PUSH   hl   
4376   E5                     PUSH   hl   
4377   CD 99 0F               CALL   run   
437A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4385   76                     HALT      
4386                EXPECTM_3126S154:      
4386   E1                     POP   HL   
4387                          ;*Macro unroll:  test "~z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4387   31 00 4C               LD   SP,STACK   
438A   CD C6 0E               CALL   coldInit   
438D   CD 78 4A               CALL   execStr   
4390   7E 7A 20 2F 61 64 00   DB   "~z /ad",0   
4397   E1                     POP   HL   
4398   E5                     PUSH   HL   
4399   11 66 4E               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
439C   B7                     OR   A   
439D   ED 52                  SBC   HL,DE   
439F   7D                     LD   A,L   
43A0   B4                     OR   H   
43A1   CA F7 43               JP   Z,expectM_3127S155   
43A4   CD 92 0E               CALL   printStr   
43A7   43 6F 64 65 3A 20 7E 7A 20 2F 61 64 00 .CSTR   "Code: ","~z /ad"   
43B4   CD 92 0E               CALL   printStr   
43B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43C6   21 66 4E               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
43C9   E5                     PUSH   hl   
43CA   E5                     PUSH   hl   
43CB   CD 99 0F               CALL   run   
43CE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
43D5   CD 92 0E               CALL   printStr   
43D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43E5   E1                     POP   hl   
43E6   E5                     PUSH   hl   
43E7   E5                     PUSH   hl   
43E8   CD 99 0F               CALL   run   
43EB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
43F6   76                     HALT      
43F7                EXPECTM_3127S155:      
43F7   E1                     POP   HL   
43F8                          ;*Macro unroll:  test "~a /ad", VARS + ("Z"-"A"+1)*2
43F8   31 00 4C               LD   SP,STACK   
43FB   CD C6 0E               CALL   coldInit   
43FE   CD 78 4A               CALL   execStr   
4401   7E 61 20 2F 61 64 00   DB   "~a /ad",0   
4408   E1                     POP   HL   
4409   E5                     PUSH   HL   
440A   11 34 4E               LD   DE,VARS + ("Z"-"A"+1)*2   
440D   B7                     OR   A   
440E   ED 52                  SBC   HL,DE   
4410   7D                     LD   A,L   
4411   B4                     OR   H   
4412   CA 68 44               JP   Z,expectM_3128S156   
4415   CD 92 0E               CALL   printStr   
4418   43 6F 64 65 3A 20 7E 61 20 2F 61 64 00 .CSTR   "Code: ","~a /ad"   
4425   CD 92 0E               CALL   printStr   
4428   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4437   21 34 4E               LD   hl,VARS + ("Z"-"A"+1)*2   
443A   E5                     PUSH   hl   
443B   E5                     PUSH   hl   
443C   CD 99 0F               CALL   run   
443F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4446   CD 92 0E               CALL   printStr   
4449   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4456   E1                     POP   hl   
4457   E5                     PUSH   hl   
4458   E5                     PUSH   hl   
4459   CD 99 0F               CALL   run   
445C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4467   76                     HALT      
4468                EXPECTM_3128S156:      
4468   E1                     POP   HL   
4469                          ;*Macro unroll:  test "~Z /ad", VARS + ("Z"-"A")*2
4469   31 00 4C               LD   SP,STACK   
446C   CD C6 0E               CALL   coldInit   
446F   CD 78 4A               CALL   execStr   
4472   7E 5A 20 2F 61 64 00   DB   "~Z /ad",0   
4479   E1                     POP   HL   
447A   E5                     PUSH   HL   
447B   11 32 4E               LD   DE,VARS + ("Z"-"A")*2   
447E   B7                     OR   A   
447F   ED 52                  SBC   HL,DE   
4481   7D                     LD   A,L   
4482   B4                     OR   H   
4483   CA D9 44               JP   Z,expectM_3129S157   
4486   CD 92 0E               CALL   printStr   
4489   43 6F 64 65 3A 20 7E 5A 20 2F 61 64 00 .CSTR   "Code: ","~Z /ad"   
4496   CD 92 0E               CALL   printStr   
4499   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44A8   21 32 4E               LD   hl,VARS + ("Z"-"A")*2   
44AB   E5                     PUSH   hl   
44AC   E5                     PUSH   hl   
44AD   CD 99 0F               CALL   run   
44B0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
44B7   CD 92 0E               CALL   printStr   
44BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44C7   E1                     POP   hl   
44C8   E5                     PUSH   hl   
44C9   E5                     PUSH   hl   
44CA   CD 99 0F               CALL   run   
44CD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
44D8   76                     HALT      
44D9                EXPECTM_3129S157:      
44D9   E1                     POP   HL   
44DA                          ;*Macro unroll:  test "~A /ad", VARS
44DA   31 00 4C               LD   SP,STACK   
44DD   CD C6 0E               CALL   coldInit   
44E0   CD 78 4A               CALL   execStr   
44E3   7E 41 20 2F 61 64 00   DB   "~A /ad",0   
44EA   E1                     POP   HL   
44EB   E5                     PUSH   HL   
44EC   11 00 4E               LD   DE,VARS   
44EF   B7                     OR   A   
44F0   ED 52                  SBC   HL,DE   
44F2   7D                     LD   A,L   
44F3   B4                     OR   H   
44F4   CA 4A 45               JP   Z,expectM_3130S158   
44F7   CD 92 0E               CALL   printStr   
44FA   43 6F 64 65 3A 20 7E 41 20 2F 61 64 00 .CSTR   "Code: ","~A /ad"   
4507   CD 92 0E               CALL   printStr   
450A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4519   21 00 4E               LD   hl,VARS   
451C   E5                     PUSH   hl   
451D   E5                     PUSH   hl   
451E   CD 99 0F               CALL   run   
4521   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4528   CD 92 0E               CALL   printStr   
452B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4538   E1                     POP   hl   
4539   E5                     PUSH   hl   
453A   E5                     PUSH   hl   
453B   CD 99 0F               CALL   run   
453E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4549   76                     HALT      
454A                EXPECTM_3130S158:      
454A   E1                     POP   HL   
454B                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
454B   31 00 4C               LD   SP,STACK   
454E   CD C6 0E               CALL   coldInit   
4551   CD 78 4A               CALL   execStr   
4554   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
4561   E1                     POP   HL   
4562   E5                     PUSH   HL   
4563   11 01 00               LD   DE,1   
4566   B7                     OR   A   
4567   ED 52                  SBC   HL,DE   
4569   7D                     LD   A,L   
456A   B4                     OR   H   
456B   CA C7 45               JP   Z,expectM_3131S159   
456E   CD 92 0E               CALL   printStr   
4571   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4584   CD 92 0E               CALL   printStr   
4587   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4596   21 01 00               LD   hl,1   
4599   E5                     PUSH   hl   
459A   E5                     PUSH   hl   
459B   CD 99 0F               CALL   run   
459E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
45A5   CD 92 0E               CALL   printStr   
45A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45B5   E1                     POP   hl   
45B6   E5                     PUSH   hl   
45B7   E5                     PUSH   hl   
45B8   CD 99 0F               CALL   run   
45BB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
45C6   76                     HALT      
45C7                EXPECTM_3131S159:      
45C7   E1                     POP   HL   
45C8                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
45C8   31 00 4C               LD   SP,STACK   
45CB   CD C6 0E               CALL   coldInit   
45CE   CD 78 4A               CALL   execStr   
45D1   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
45E5   E1                     POP   HL   
45E6   E5                     PUSH   HL   
45E7   11 03 00               LD   DE,3   
45EA   B7                     OR   A   
45EB   ED 52                  SBC   HL,DE   
45ED   7D                     LD   A,L   
45EE   B4                     OR   H   
45EF   CA 52 46               JP   Z,expectM_3132S160   
45F2   CD 92 0E               CALL   printStr   
45F5   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
460F   CD 92 0E               CALL   printStr   
4612   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4621   21 03 00               LD   hl,3   
4624   E5                     PUSH   hl   
4625   E5                     PUSH   hl   
4626   CD 99 0F               CALL   run   
4629   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4630   CD 92 0E               CALL   printStr   
4633   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4640   E1                     POP   hl   
4641   E5                     PUSH   hl   
4642   E5                     PUSH   hl   
4643   CD 99 0F               CALL   run   
4646   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4651   76                     HALT      
4652                EXPECTM_3132S160:      
4652   E1                     POP   HL   
4653                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
4653   31 00 4C               LD   SP,STACK   
4656   CD C6 0E               CALL   coldInit   
4659   CD 78 4A               CALL   execStr   
465C   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
4673   E1                     POP   HL   
4674   E5                     PUSH   HL   
4675   11 02 00               LD   DE,2   
4678   B7                     OR   A   
4679   ED 52                  SBC   HL,DE   
467B   7D                     LD   A,L   
467C   B4                     OR   H   
467D   CA E3 46               JP   Z,expectM_3133S161   
4680   CD 92 0E               CALL   printStr   
4683   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
46A0   CD 92 0E               CALL   printStr   
46A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46B2   21 02 00               LD   hl,2   
46B5   E5                     PUSH   hl   
46B6   E5                     PUSH   hl   
46B7   CD 99 0F               CALL   run   
46BA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
46C1   CD 92 0E               CALL   printStr   
46C4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46D1   E1                     POP   hl   
46D2   E5                     PUSH   hl   
46D3   E5                     PUSH   hl   
46D4   CD 99 0F               CALL   run   
46D7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
46E2   76                     HALT      
46E3                EXPECTM_3133S161:      
46E3   E1                     POP   HL   
46E4                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
46E4   31 00 4C               LD   SP,STACK   
46E7   CD C6 0E               CALL   coldInit   
46EA   CD 78 4A               CALL   execStr   
46ED   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
4710   E1                     POP   HL   
4711   E5                     PUSH   HL   
4712   11 01 00               LD   DE,1   
4715   B7                     OR   A   
4716   ED 52                  SBC   HL,DE   
4718   7D                     LD   A,L   
4719   B4                     OR   H   
471A   CA 8C 47               JP   Z,expectM_3134S162   
471D   CD 92 0E               CALL   printStr   
4720   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4749   CD 92 0E               CALL   printStr   
474C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
475B   21 01 00               LD   hl,1   
475E   E5                     PUSH   hl   
475F   E5                     PUSH   hl   
4760   CD 99 0F               CALL   run   
4763   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
476A   CD 92 0E               CALL   printStr   
476D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
477A   E1                     POP   hl   
477B   E5                     PUSH   hl   
477C   E5                     PUSH   hl   
477D   CD 99 0F               CALL   run   
4780   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
478B   76                     HALT      
478C                EXPECTM_3134S162:      
478C   E1                     POP   HL   
478D                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
478D   31 00 4C               LD   SP,STACK   
4790   CD C6 0E               CALL   coldInit   
4793   CD 78 4A               CALL   execStr   
4796   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
47B9   E1                     POP   HL   
47BA   E5                     PUSH   HL   
47BB   11 01 00               LD   DE,1   
47BE   B7                     OR   A   
47BF   ED 52                  SBC   HL,DE   
47C1   7D                     LD   A,L   
47C2   B4                     OR   H   
47C3   CA 35 48               JP   Z,expectM_3135S163   
47C6   CD 92 0E               CALL   printStr   
47C9   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
47F2   CD 92 0E               CALL   printStr   
47F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4804   21 01 00               LD   hl,1   
4807   E5                     PUSH   hl   
4808   E5                     PUSH   hl   
4809   CD 99 0F               CALL   run   
480C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4813   CD 92 0E               CALL   printStr   
4816   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4823   E1                     POP   hl   
4824   E5                     PUSH   hl   
4825   E5                     PUSH   hl   
4826   CD 99 0F               CALL   run   
4829   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4834   76                     HALT      
4835                EXPECTM_3135S163:      
4835   E1                     POP   HL   
4836                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4836   31 00 4C               LD   SP,STACK   
4839   CD C6 0E               CALL   coldInit   
483C   CD 78 4A               CALL   execStr   
483F   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
486F   E1                     POP   HL   
4870   E5                     PUSH   HL   
4871   11 02 00               LD   DE,2   
4874   B7                     OR   A   
4875   ED 52                  SBC   HL,DE   
4877   7D                     LD   A,L   
4878   B4                     OR   H   
4879   CA F8 48               JP   Z,expectM_3136S164   
487C   CD 92 0E               CALL   printStr   
487F   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
48B5   CD 92 0E               CALL   printStr   
48B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48C7   21 02 00               LD   hl,2   
48CA   E5                     PUSH   hl   
48CB   E5                     PUSH   hl   
48CC   CD 99 0F               CALL   run   
48CF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
48D6   CD 92 0E               CALL   printStr   
48D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48E6   E1                     POP   hl   
48E7   E5                     PUSH   hl   
48E8   E5                     PUSH   hl   
48E9   CD 99 0F               CALL   run   
48EC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
48F7   76                     HALT      
48F8                EXPECTM_3136S164:      
48F8   E1                     POP   HL   
48F9                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
48F9   31 00 4C               LD   SP,STACK   
48FC   CD C6 0E               CALL   coldInit   
48FF   CD 78 4A               CALL   execStr   
4902   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4917   E1                     POP   HL   
4918   E5                     PUSH   HL   
4919   11 02 00               LD   DE,2   
491C   B7                     OR   A   
491D   ED 52                  SBC   HL,DE   
491F   7D                     LD   A,L   
4920   B4                     OR   H   
4921   CA 85 49               JP   Z,expectM_3137S165   
4924   CD 92 0E               CALL   printStr   
4927   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
4942   CD 92 0E               CALL   printStr   
4945   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4954   21 02 00               LD   hl,2   
4957   E5                     PUSH   hl   
4958   E5                     PUSH   hl   
4959   CD 99 0F               CALL   run   
495C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4963   CD 92 0E               CALL   printStr   
4966   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4973   E1                     POP   hl   
4974   E5                     PUSH   hl   
4975   E5                     PUSH   hl   
4976   CD 99 0F               CALL   run   
4979   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4984   76                     HALT      
4985                EXPECTM_3137S165:      
4985   E1                     POP   HL   
4986                          ;*Macro unroll:  test "'hello'/sl",5
4986   31 00 4C               LD   SP,STACK   
4989   CD C6 0E               CALL   coldInit   
498C   CD 78 4A               CALL   execStr   
498F   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
499A   E1                     POP   HL   
499B   E5                     PUSH   HL   
499C   11 05 00               LD   DE,5   
499F   B7                     OR   A   
49A0   ED 52                  SBC   HL,DE   
49A2   7D                     LD   A,L   
49A3   B4                     OR   H   
49A4   CA FE 49               JP   Z,expectM_3138S166   
49A7   CD 92 0E               CALL   printStr   
49AA   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
49BB   CD 92 0E               CALL   printStr   
49BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49CD   21 05 00               LD   hl,5   
49D0   E5                     PUSH   hl   
49D1   E5                     PUSH   hl   
49D2   CD 99 0F               CALL   run   
49D5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
49DC   CD 92 0E               CALL   printStr   
49DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49EC   E1                     POP   hl   
49ED   E5                     PUSH   hl   
49EE   E5                     PUSH   hl   
49EF   CD 99 0F               CALL   run   
49F2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
49FD   76                     HALT      
49FE                EXPECTM_3138S166:      
49FE   E1                     POP   HL   
49FF                          ;*Macro unroll:  test "-1/ab", 1
49FF   31 00 4C               LD   SP,STACK   
4A02   CD C6 0E               CALL   coldInit   
4A05   CD 78 4A               CALL   execStr   
4A08   2D 31 2F 61 62 00      DB   "-1/ab",0   
4A0E   E1                     POP   HL   
4A0F   E5                     PUSH   HL   
4A10   11 01 00               LD   DE,1   
4A13   B7                     OR   A   
4A14   ED 52                  SBC   HL,DE   
4A16   7D                     LD   A,L   
4A17   B4                     OR   H   
4A18   CA 6D 4A               JP   Z,expectM_3139S167   
4A1B   CD 92 0E               CALL   printStr   
4A1E   43 6F 64 65 3A 20 2D 31 2F 61 62 00 .CSTR   "Code: ","-1/ab"   
4A2A   CD 92 0E               CALL   printStr   
4A2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A3C   21 01 00               LD   hl,1   
4A3F   E5                     PUSH   hl   
4A40   E5                     PUSH   hl   
4A41   CD 99 0F               CALL   run   
4A44   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4A4B   CD 92 0E               CALL   printStr   
4A4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A5B   E1                     POP   hl   
4A5C   E5                     PUSH   hl   
4A5D   E5                     PUSH   hl   
4A5E   CD 99 0F               CALL   run   
4A61   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4A6C   76                     HALT      
4A6D                EXPECTM_3139S167:      
4A6D   E1                     POP   HL   
4A6E                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
4A6E                             ; 
4A6E   CD 92 0E               CALL   printStr   
4A71   44 6F 6E 65 21 00      .CSTR   "Done!"   
4A77   76                     HALT      
4A78                             ; executes a null teminated string (null executes exit_)
4A78                             ; the string should be immedaitely following the call
4A78                EXECSTR:      ; create a root stack frame
4A78   C1                     POP   bc   ; bc = code*
4A79   0B                     DEC   bc   ; dec to prepare for next routine
4A7A   11 00 00               LD   de,0   
4A7D   D5                     PUSH   de   ; push fake IP
4A7E   D5                     PUSH   de   ; push null arg_list*
4A7F   D5                     PUSH   de   ; push null first_arg*
4A80   D5                     PUSH   de   ; push fake BP
4A81   DD E9                  JP   (ix)   
4A83                STKSIZE:   EQU   $100   ; Stack size
4A83                TIBSIZE:   EQU   $100   ; 256 bytes
4A83                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4A83                          ALIGN   $100   
4B00                          DS   STKSIZE   
4C00                STACK:       
4C00                          ALIGN   $100   
4C00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4D00                          ALIGN   $100   
4D00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4E00                          ALIGN   $100   
4E00                VARS:        
4E00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4ED0                RESTARTS:      
4ED0                RST08:    DS   2   
4ED2                RST10:    DS   2   
4ED4                RST18:    DS   2   
4ED6                RST20:    DS   2   
4ED8                RST28:    DS   2   
4EDA                RST30:    DS   2   ; 
4EDC                BAUD:     DS   2   ; 
4EDE                INTVEC:   DS   2   ; 
4EE0                NMIVEC:   DS   2   ; 
4EE2                GETCVEC:   DS   2   ; 
4EE4                PUTCVEC:   DS   2   ; 
4EE6                SYSVARS:      
4EE6                             ; initialised sys variables (preserved)
4EE6                VDATAWIDTH:   DS   2   ; 
4EE8                VNUMBASE:   DS   2   ; 
4EEA                VTIBPTR:   DS   2   ; 
4EEC                VBUFPTR:   DS   2   ; 
4EEE                VNEXT:    DS   2   ; 
4EF0                VHEAPPTR:   DS   2   ; 
4EF2                VRECUR:   DS   2   ; 
4EF4                VDEFINE:   DS   2   ; 
4EF6                VSTRMODE:   DS   2   ; 
4EF8                             ; uninitialised sys variables (preserved)
4EF8                VPOINTER:   DS   2   ; 
4EFA                VREMAIN:   DS   2   ; 
4EFC                VSAVEDIP:   DS   2   ; 
4EFE                VSAVEDSP:   DS   2   ; 
4F00                VSAVEDNEXT:   DS   2   ; 
4F02                VSAVEDBP:   DS   2   ; 
4F04                             ; uninitialised sys variables (unpreserved)
4F04                VTEMP1:   DS   2   ; 
4F06                VTEMP2:   DS   2   ; 
4F08                VTEMP3:   DS   2   ; 
4F0A                VLASTDEF:   DS   2   ; 
4F0C                TBPTR:    DS   2   ; reserved for tests
4F0E                TITLEBUF:   DS   20   
4F22                HEAP:        
4F22                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
4F22                             ; db "{"
4F22                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
4F22                             ; db    "\\kt{"
4F22                             ; db      "0%t!=/qt"                  ; break if type != 0
4F22                             ; db      "\\dt:a{"                   ; return talkback to receive data
4F22                             ; db        "%L1#!/qt"                ; if not active don't send
4F22                             ; db        "%L0# %a="                ; store current index in A
4F22                             ; db        "%s %L0# +="              ; inc value of index by step
4F22                             ; db        "1%t!=/qt"                ; break if type != 0
4F22                             ; db        "%a %e <"                 ; ifte: in range?
4F22                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: /t index, /f active = false, quit
4F22                             ; db          "?? %k/rc"              ; ifte: send to sink note: /rc recur
4F22                             ; db      "} 0 %k^"                   ; init sink
4F22                             ; db    "}"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; FUNC map, 0, "sf"                   ; map
4F22                             ; db "{"
4F22                             ; db    "\\kt{"
4F22                             ; db      "0%t!=/qt"                  ; break if type != 0
4F22                             ; db      "\\dt{"                     ; call source with tb
4F22                             ; db        "1%t=="                   ; ifte: type == 1 ?
4F22                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
4F22                             ; db        "?? %t %k^"               ; ifte: send to sink
4F22                             ; db      "} 0 %s^"
4F22                             ; db    "}"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; ; /ft filter
4F22                             ; ; src pred -- src1
4F22                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
4F22                             ; db "{"
4F22                             ; db    "[0]%T="
4F22                             ; db    "\\kt{"                       ; return talkback to receive data
4F22                             ; db      "\\dt{"                     ; call source with tb
4F22                             ; db        "["
4F22                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
4F22                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
4F22                             ; db          "{/t}"                  ; case 2: return true
4F22                             ; db        "]%t#^"                   ; select on %t
4F22                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
4F22                             ; db        "??"
4F22                             ; db      "} 0 %s^"
4F22                             ; db    "}"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; FUNC forEach, 1, "spT"
4F22                             ; db "{"
4F22                             ; db    "[0]%T="
4F22                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
4F22                             ; db      "2%t==/qt"                    ; if type == 2 skip
4F22                             ; db      "0%t=="                   ; ifte: type = 0 ?
4F22                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
4F22                             ; db      "??"                      ; ifte:
4F22                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
4F22                             ; db    "} 0 %s^"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
4F22                             ; db "{"                                  ; reducer: \\da00bbLi4u
4F22                             ; db    "[%i]%A="
4F22                             ; db    "\\kt{"                         ; return talkback to receive data
4F22                             ; db      "\\dt{"                         ; call source with tb
4F22                             ; db        "1%t=="                       ; ifte: type == 1 ?
4F22                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
4F22                             ; db        "?? %t %k^"                    ; ifte: send to sink
4F22                             ; db      "} 0 %s^"
4F22                             ; db    "}"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 2351 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
                    > USED AT LINE 2446 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2360 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2289 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
DQUOTE_:            0204 DEFINED AT LINE 173 IN MAIN.asm
COMMA_:             0204 DEFINED AT LINE 174 IN MAIN.asm
DOLLAR_:            0206 DEFINED AT LINE 177 IN MAIN.asm
PERCENT_:           0209 DEFINED AT LINE 180 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 183 IN MAIN.asm
LPAREN_:            020F DEFINED AT LINE 186 IN MAIN.asm
DOT_:               0212 DEFINED AT LINE 189 IN MAIN.asm
SLASH_:             0215 DEFINED AT LINE 192 IN MAIN.asm
NUM_:               0218 DEFINED AT LINE 195 IN MAIN.asm
SEMICOLON_:         021B DEFINED AT LINE 198 IN MAIN.asm
QUESTION_:          021E DEFINED AT LINE 201 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 204 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 205 IN MAIN.asm
NOT:                022C DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 217 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 218 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 227 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 231 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 232 IN MAIN.asm
LT_:                024C DEFINED AT LINE 240 IN MAIN.asm
LT:                 024C DEFINED AT LINE 241 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 248 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 256 IN MAIN.asm
HASH:               025E DEFINED AT LINE 257 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 258 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
ARRAYINDEX2:        0273 DEFINED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
RPAREN_:            0276 DEFINED AT LINE 280 IN MAIN.asm
RPAREN:             0276 DEFINED AT LINE 281 IN MAIN.asm
AMPER_:             027E DEFINED AT LINE 288 IN MAIN.asm
AMPER:              027E DEFINED AT LINE 289 IN MAIN.asm
AND:                027E DEFINED AT LINE 290 IN MAIN.asm
MINUS_:             0288 DEFINED AT LINE 303 IN MAIN.asm
MINUS:              0288 DEFINED AT LINE 304 IN MAIN.asm
SUB:                0294 DEFINED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
SUB1:               029E DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
STAR_:              02A6 DEFINED AT LINE 327 IN MAIN.asm
STAR:               02A6 DEFINED AT LINE 328 IN MAIN.asm
MUL:                02A6 DEFINED AT LINE 329 IN MAIN.asm
MUL2:               02A8 DEFINED AT LINE 332 IN MAIN.asm
MUL3:               02B0 DEFINED AT LINE 337 IN MAIN.asm
                    > USED AT LINE 346 IN MAIN.asm
PLUS_:              02C2 DEFINED AT LINE 352 IN MAIN.asm
PLUS:               02C2 DEFINED AT LINE 353 IN MAIN.asm
ADD:                02C2 DEFINED AT LINE 354 IN MAIN.asm
ADD1:               02CD DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ADD3:               02D1 DEFINED AT LINE 367 IN MAIN.asm
                    > USED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
ADD4:               02DB DEFINED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
COLON_:             02DE DEFINED AT LINE 378 IN MAIN.asm
COLON:              02DE DEFINED AT LINE 379 IN MAIN.asm
DEFINESTART:        02EB DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 383 IN MAIN.asm
UPCASE_:            02F4 DEFINED AT LINE 394 IN MAIN.asm
UPCASE:             02F4 DEFINED AT LINE 395 IN MAIN.asm
SEMICOLON:          02F9 DEFINED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DEFINEEND:          02F9 DEFINED AT LINE 402 IN MAIN.asm
DEFINEEND1:         030B DEFINED AT LINE 411 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
UNDERSCORE_:        030D DEFINED AT LINE 419 IN MAIN.asm
LOWCASE_:           030F DEFINED AT LINE 422 IN MAIN.asm
LOWCASE:            030F DEFINED AT LINE 423 IN MAIN.asm
IDENT1:             0314 DEFINED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
LBRACK_:            0321 DEFINED AT LINE 439 IN MAIN.asm
LBRACK:             0321 DEFINED AT LINE 440 IN MAIN.asm
ARRAYSTART:         0321 DEFINED AT LINE 441 IN MAIN.asm
BACKSLASH_:         033D DEFINED AT LINE 456 IN MAIN.asm
BACKSLASH:          033D DEFINED AT LINE 457 IN MAIN.asm
LAMBDA:             033D DEFINED AT LINE 458 IN MAIN.asm
LAMBDA1:            0342 DEFINED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
LAMBDA2:            0352 DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
RBRACK_:            035E DEFINED AT LINE 478 IN MAIN.asm
RBRACK:             035E DEFINED AT LINE 479 IN MAIN.asm
ARRAYEND:           035E DEFINED AT LINE 480 IN MAIN.asm
ARRAYEND1:          037A DEFINED AT LINE 497 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARRAYEND2:          038A DEFINED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
ARRAYEND3:          038F DEFINED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
CARET_:             03AE DEFINED AT LINE 532 IN MAIN.asm
CARET:              03AE DEFINED AT LINE 536 IN MAIN.asm
GO:                 03AE DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03AF DEFINED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
GO2:                03B5 DEFINED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 542 IN MAIN.asm
GRAVE_:             03C4 DEFINED AT LINE 553 IN MAIN.asm
GRAVE:              03C4 DEFINED AT LINE 554 IN MAIN.asm
PRINTLITERAL:       03C4 DEFINED AT LINE 555 IN MAIN.asm
PRINTLITERAL0:      03CB DEFINED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
PRINTLITERAL1:      03CE DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
LBRACE_:            03DA DEFINED AT LINE 570 IN MAIN.asm
LBRACE:             03DA DEFINED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
PIPE_:              03DF DEFINED AT LINE 577 IN MAIN.asm
PIPE:               03DF DEFINED AT LINE 578 IN MAIN.asm
OR:                 03DF DEFINED AT LINE 579 IN MAIN.asm
RBRACE_:            03EA DEFINED AT LINE 590 IN MAIN.asm
TILDE_:             03ED DEFINED AT LINE 594 IN MAIN.asm
TILDE:              03ED DEFINED AT LINE 595 IN MAIN.asm
CHAR:               03ED DEFINED AT LINE 596 IN MAIN.asm
AT_:                03F5 DEFINED AT LINE 604 IN MAIN.asm
AT:                 03F5 DEFINED AT LINE 605 IN MAIN.asm
ADDR:               03F5 DEFINED AT LINE 606 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 618 IN MAIN.asm
PRINTCHAR:          0412 DEFINED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
PRINTSTRING:        0421 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
PRINTSTRING0:       0428 DEFINED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
PRINTSTRING1:       042B DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTNUMBER:        0436 DEFINED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
PRINTDEC:           0441 DEFINED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
PRINTDEC1:          044F DEFINED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
PRINTDEC2:          045E DEFINED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
PRINTDEC3:          046E DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
PRINTDEC4:          048E DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
PRINTDEC5:          0490 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
PRINTDEC6:          04A0 DEFINED AT LINE 731 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
PRINTDEC7:          04A1 DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
PRINTHEX0:          04A7 DEFINED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
PRINTHEX:           04AD DEFINED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
PRINTHEX1:          04B5 DEFINED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
PRINTHEX2:          04C0 DEFINED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
PRINTHEX3:          04CF DEFINED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
PRINTHEX4:          04D8 DEFINED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
DQUOTE:             04E3 DEFINED AT LINE 788 IN MAIN.asm
UNDERSCORE:         04E3 DEFINED AT LINE 789 IN MAIN.asm
COMMA:              04E3 DEFINED AT LINE 790 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 799 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 835 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 849 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 859 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 865 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 885 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 892 IN MAIN.asm
KEY_:               0571 DEFINED AT LINE 898 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 902 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 908 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 912 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 917 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 923 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 933 IN MAIN.asm
TRUE_:              05A4 DEFINED AT LINE 947 IN MAIN.asm
COMMAND_V_:         05A7 DEFINED AT LINE 951 IN MAIN.asm
COMMAND_W_:         05BC DEFINED AT LINE 967 IN MAIN.asm
XOR_:               05C2 DEFINED AT LINE 973 IN MAIN.asm
COMMAND_NOP_:       05C5 DEFINED AT LINE 978 IN MAIN.asm
COMMAND_DEFAULT_:   05C8 DEFINED AT LINE 983 IN MAIN.asm
NOP:                05CB DEFINED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
DIV:                05CD DEFINED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
ABSOLUTE:           05DE DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
ABSOLUTE1:          05E9 DEFINED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 1009 IN MAIN.asm
ADDROF:             05EC DEFINED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
ADDROF1:            0600 DEFINED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
ADDROF2:            060B DEFINED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
ARRAYLENGTH:        060D DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0613 DEFINED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1069 IN MAIN.asm
ARRAYSIZE:          0616 DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
PERFORMM_1541S1062: 061D DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              062A DEFINED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
BREAK1:             0631 DEFINED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 1078 IN MAIN.asm
BYTEMODE:           0644 DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
BYTEMODE1:          0647 DEFINED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
COMMENT:            064C DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
CONSTHEAPSTART:     0655 DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
CONSTTIBSTART:      065B DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
CONSTBUFSTART:      0661 DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
DECBASE:            0667 DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
DECBASE1:           066A DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
ERROR1:             066F DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
HEXBASE:            0675 DEFINED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
INPUT:              067B DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
KEY:                0686 DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
OUTPUT:             068F DEFINED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
QUIT:               0698 DEFINED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
QUIT1:              069F DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
RECUR:              06A2 DEFINED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
REMAIN:             06A8 DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
STRINGBEGIN:        06AE DEFINED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
STRINGEND:          06B6 DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
STRINGEND1:         06DD DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
STRINGLENGTH:       06E5 DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06EB DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
STRINGLENGTH2:      06ED DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
STRINGLENGTH3:      06F1 DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
STRINGSIZE:         06F4 DEFINED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
PERFORMM_1689S1236: 06FB DEFINED AT LINE 45
                    > USED AT LINE 43
VARBUFPTR:          0700 DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
VARHEAPPTR:         0709 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
VARTIBPTR:          0712 DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
VARIABLE:           071B DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
CONSTANT:           071E DEFINED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
WORDMODE:           0721 DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
XOR:                0727 DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
XOR1:               0728 DEFINED AT LINE 1270 IN MAIN.asm
RANGESRC:           0732 DEFINED AT LINE 32
                    > USED AT LINE 929 IN MAIN.asm
RANGESRCM_1731S1286: 0741 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07C6 DEFINED AT LINE 32
                    > USED AT LINE 841 IN MAIN.asm
ARRAYITERM_1750S1306: 07D3 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0847 DEFINED AT LINE 32
                    > USED AT LINE 939 IN MAIN.asm
STRINGITERM_1769S1326: 0854 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08CF DEFINED AT LINE 32
                    > USED AT LINE 904 IN MAIN.asm
MAPM_1789S1348:     08DC DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0911 DEFINED AT LINE 32
                    > USED AT LINE 873 IN MAIN.asm
FILTERM_1803S1363:  091F DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               096F DEFINED AT LINE 32
                    > USED AT LINE 867 IN MAIN.asm
FOLDM_1822S1383:    097E DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09C1 DEFINED AT LINE 32
                    > USED AT LINE 869 IN MAIN.asm
FOREACHM_1836S1398: 09CF DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A0D DEFINED AT LINE 32
                    > USED AT LINE 871 IN MAIN.asm
FUNCSRCM_1850S1413: 0A19 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A46 DEFINED AT LINE 32
                    > USED AT LINE 621 IN MAIN.asm
PRINTARRAYM_1860S1424: 0A54 DEFINED AT LINE 39
                    > USED AT LINE 35
DOLLAR:             0A8E DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
HEXNUM:             0A8E DEFINED AT LINE 1436 IN MAIN.asm
HEXNUM1:            0A91 DEFINED AT LINE 1438 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
HEXNUM2:            0A99 DEFINED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1442 IN MAIN.asm
QUESTION:           0AAB DEFINED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
IF:                 0AAB DEFINED AT LINE 1460 IN MAIN.asm
IFTE:               0AB7 DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
IFTE1:              0AB8 DEFINED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
QUOTE:              0AC4 DEFINED AT LINE 1485 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
STRING:             0AC4 DEFINED AT LINE 1486 IN MAIN.asm
STRING1:            0ACD DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
STRING2:            0AD0 DEFINED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
STRING3:            0AD6 DEFINED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
PERCENT:            0ADE DEFINED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                0ADE DEFINED AT LINE 1513 IN MAIN.asm
ARG0:               0AFA DEFINED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
ARG0A:              0B03 DEFINED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
ARG1:               0B08 DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
ARG1A:              0B10 DEFINED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1542 IN MAIN.asm
NUM:                0B13 DEFINED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
NUM0:               0B1C DEFINED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1559 IN MAIN.asm
NUM1:               0B1D DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 1580 IN MAIN.asm
NUM2:               0B35 DEFINED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1568 IN MAIN.asm
NUM3:               0B40 DEFINED AT LINE 1589 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
RBRACE:             0B43 DEFINED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
BLOCKEND:           0B43 DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
BLOCKEND1:          0B75 DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
BLOCKEND2:          0B81 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
BLOCKEND3:          0B93 DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
BLOCKEND4:          0BA7 DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
GOBLOCK:            0BB0 DEFINED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
GOBLOCK2:           0BD5 DEFINED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
GOBLOCK3:           0BDF DEFINED AT LINE 1676 IN MAIN.asm
GOFUNC:             0BE3 DEFINED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
GOFUNC1:            0BFC DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
GOFUNC2:            0C02 DEFINED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
GOFUNC3:            0C0D DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
GOFUNC4:            0C25 DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
GOFUNC5:            0C28 DEFINED AT LINE 1732 IN MAIN.asm
                    > USED AT LINE 1738 IN MAIN.asm
GOFUNC6:            0C2B DEFINED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
GOFUNC7:            0C2E DEFINED AT LINE 1739 IN MAIN.asm
GOFUNC8:            0C32 DEFINED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 1728 IN MAIN.asm
ASSIGN:             0C3D DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ASSIGN0:            0C3F DEFINED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 318 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
ASSIGN1:            0C43 DEFINED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 410 IN MAIN.asm
ASSIGN2:            0C4C DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
EQUALS:             0C4E DEFINED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
NOTEQUALS:          0C55 DEFINED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
LESSTHANEQ:         0C5C DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
LESSTHAN:           0C61 DEFINED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
LESSTHAN1:          0C66 DEFINED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 1790 IN MAIN.asm
TRUE1:              0C69 DEFINED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
NULL1:              0C6F DEFINED AT LINE 1806 IN MAIN.asm
FALSE1:             0C6F DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
SHIFTLEFT:          0C75 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
SHIFTLEFT1:         0C7D DEFINED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
SHIFTLEFT2:         0C7E DEFINED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
SHIFTRIGHT:         0C85 DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
SHIFTRIGHT1:        0C8D DEFINED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
SHIFTRIGHT2:        0C91 DEFINED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
DIVIDE:             0C98 DEFINED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
DIVIDE1:            0C9D DEFINED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
DIVIDE2:            0CAA DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
DIVIDE3:            0CAB DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
DOTNEXT:            0CB1 DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
DOTNEXT1:           0CB9 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1872 IN MAIN.asm
DOTNEXT2:           0CC5 DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
DOTNEXT3:           0CCB DEFINED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
PARSEARGS:          0CD7 DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
PARSEARGS1:         0CE1 DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
PARSEARGS1A:        0CE9 DEFINED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
PARSEARGS2:         0CF1 DEFINED AT LINE 1913 IN MAIN.asm
PARSEARGS3:         0CF9 DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
PARSEARGS4:         0CFC DEFINED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
PARSEARGS5:         0D02 DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
PARSEBLOCK:         0D0D DEFINED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
PARSEBLOCK1:        0D11 DEFINED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
PARSEBLOCK2:        0D3D DEFINED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
PARSEBLOCK3:        0D40 DEFINED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
PARSEBLOCK4:        0D48 DEFINED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
PARSEBLOCK5:        0D4B DEFINED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
PARSEBLOCK6:        0D73 DEFINED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
CREATEFUNC:         0D77 DEFINED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
CREATEFUNC0:        0D96 DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
CREATEFUNC1:        0DAE DEFINED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
CREATEFUNC2:        0DC1 DEFINED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
CREATEFUNC2A:       0DE0 DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
CREATEFUNC3:        0DEF DEFINED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
CREATEFUNC4:        0DFA DEFINED AT LINE 2108 IN MAIN.asm
CREATEFUNC5:        0DFB DEFINED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
COMMANDTABLE:       0E19 DEFINED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
COMMANDTABLE1:      0E23 DEFINED AT LINE 2147 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
COMMANDTABLE2:      0E2A DEFINED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2144 IN MAIN.asm
                    > USED AT LINE 2146 IN MAIN.asm
JUMPTABLE:          0E2F DEFINED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
JUMPTABLE1:         0E30 DEFINED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
JUMPTABLE2:         0E31 DEFINED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
JUMPTABLE3:         0E38 DEFINED AT LINE 2172 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
JUMPTABLE4:         0E41 DEFINED AT LINE 2180 IN MAIN.asm
                    > USED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
PRTSTR0:            0E47 DEFINED AT LINE 2188 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
PRTSTR:             0E4B DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 2315 IN MAIN.asm
NESTING:            0E50 DEFINED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2340 IN MAIN.asm
                    > USED AT LINE 2398 IN MAIN.asm
NESTING0:           0E5A DEFINED AT LINE 2213 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
NESTING1A:          0E61 DEFINED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 2215 IN MAIN.asm
NESTING1:           0E64 DEFINED AT LINE 2221 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
NESTING2:           0E73 DEFINED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 2225 IN MAIN.asm
                    > USED AT LINE 2227 IN MAIN.asm
NESTING3:           0E75 DEFINED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2229 IN MAIN.asm
NESTING4:           0E80 DEFINED AT LINE 2240 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2237 IN MAIN.asm
PROMPT:             0E82 DEFINED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2319 IN MAIN.asm
CRLF:               0E8B DEFINED AT LINE 2249 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
PRINTSTR:           0E92 DEFINED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 173
INIT:               0E99 DEFINED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
INIT1:              0EA1 DEFINED AT LINE 2267 IN MAIN.asm
                    > USED AT LINE 2273 IN MAIN.asm
WARMINIT:           0EA9 DEFINED AT LINE 2275 IN MAIN.asm
COLDBOOT0:          0EBC DEFINED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 2270 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
COLDINIT:           0EC6 DEFINED AT LINE 2288 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0ED7 DEFINED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
COLDSTART:          0EE4 DEFINED AT LINE 2306 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
START:              0EED DEFINED AT LINE 2310 IN MAIN.asm
START1:             0EF3 DEFINED AT LINE 2313 IN MAIN.asm
                    > USED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
INTERPRET:          0EF9 DEFINED AT LINE 2317 IN MAIN.asm
                    > USED AT LINE 2448 IN MAIN.asm
                    > USED AT LINE 2464 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
INTERPRET2:         0F05 DEFINED AT LINE 2325 IN MAIN.asm
                    > USED AT LINE 2389 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
INTERPRET3:         0F0D DEFINED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
INTERPRET4:         0F18 DEFINED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 2331 IN MAIN.asm
INTERPRET5:         0F1D DEFINED AT LINE 2349 IN MAIN.asm
                    > USED AT LINE 2399 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
INTERPRET5A:        0F3B DEFINED AT LINE 2386 IN MAIN.asm
INTERPRET6:         0F3D DEFINED AT LINE 2391 IN MAIN.asm
                    > USED AT LINE 2353 IN MAIN.asm
INTERPRET7:         0F4B DEFINED AT LINE 2401 IN MAIN.asm
                    > USED AT LINE 2358 IN MAIN.asm
INTERPRET8:         0F5E DEFINED AT LINE 2416 IN MAIN.asm
                    > USED AT LINE 2356 IN MAIN.asm
NEXT:               0F79 DEFINED AT LINE 2429 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2433 IN MAIN.asm
NEXT0:              0F8D DEFINED AT LINE 2443 IN MAIN.asm
                    > USED AT LINE 2441 IN MAIN.asm
NEXT1:              0F8E DEFINED AT LINE 2445 IN MAIN.asm
                    > USED AT LINE 2434 IN MAIN.asm
EXIT:               0F95 DEFINED AT LINE 2450 IN MAIN.asm
                    > USED AT LINE 2447 IN MAIN.asm
RUN:                0F99 DEFINED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 2462 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0F9D DEFINED AT LINE 2460 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
BACKSPACE_:         0FAF DEFINED AT LINE 2466 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
EDIT_:              0FBF DEFINED AT LINE 2476 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
REEDIT_:            0FC2 DEFINED AT LINE 2479 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
F1:                 0FC5 DEFINED AT LINE 32
                    > USED AT LINE 875 IN MAIN.asm
F1M_2993S12:        0FD0 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0FD1 DEFINED AT LINE 32
                    > USED AT LINE 877 IN MAIN.asm
F2M_2995S15:        0FDC DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0FDD DEFINED AT LINE 32
                    > USED AT LINE 879 IN MAIN.asm
F3M_2997S18:        0FE8 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0FE9 DEFINED AT LINE 32
                    > USED AT LINE 881 IN MAIN.asm
F4M_2999S21:        0FF4 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1000 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3020S48:    1068 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3021S49:    10D1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3022S50:    1138 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3023S51:    119F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3024S52:    1206 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3025S53:    126D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3026S54:    12D6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3027S55:    1341 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3028S56:    13AA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3029S57:    1413 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3030S58:    147C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3031S59:    14E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3032S60:    1552 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3033S61:    15C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3034S62:    1634 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3035S63:    16A3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3036S64:    1716 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3037S65:    178D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3038S66:    1802 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3039S67:    1871 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3040S68:    18E8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3041S69:    195B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3042S70:    19CA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3043S71:    1A39 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3044S72:    1AB0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3045S73:    1B1F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3046S74:    1B8E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3047S75:    1BFF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3048S76:    1C80 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3049S77:    1CEF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3050S78:    1D66 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3051S79:    1DD5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3052S80:    1E4E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3053S81:    1EC7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3054S82:    1F40 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3055S83:    1FB9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3056S84:    203A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3057S85:    20BB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3058S86:    2140 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3059S87:    21BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3060S88:    223A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3061S89:    22B7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3062S90:    2334 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3063S91:    23AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3064S92:    241A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3065S93:    248B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3066S94:    24FC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3067S95:    256B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S96:    25DA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S97:    2649 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S98:    26B8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S99:    2727 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S100:   2796 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S101:   2805 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S102:   2874 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S103:   28E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S104:   2956 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S105:   29C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3078S106:   2A3A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S107:   2AAD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S108:   2B1A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3081S109:   2B87 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3082S110:   2BFA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3083S111:   2C73 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3084S112:   2CEC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3085S113:   2D69 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3086S114:   2DF0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S115:   2E77 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S116:   2EE6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S117:   2F57 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S118:   2FCE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S119:   3049 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S120:   30C0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3093S121:   3141 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3094S122:   31C4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3095S123:   324D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3096S124:   32DA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3097S125:   3359 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S126:   33DE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S127:   3465 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S128:   34EE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S129:   3575 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S130:   360A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S131:   368D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S132:   371E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S133:   37B1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S134:   3846 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S135:   38E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S136:   3984 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S137:   3A03 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S138:   3A8A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S139:   3B0B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S140:   3B92 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S141:   3C1D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S142:   3CB6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S143:   3D57 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S144:   3DF8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S145:   3E8B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S146:   3F24 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S147:   3FD3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S148:   408C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S149:   4117 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S150:   41A2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S151:   421B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S152:   4294 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S153:   430D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S154:   4386 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S155:   43F7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S156:   4468 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S157:   44D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S158:   454A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S159:   45C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S160:   4652 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S161:   46E3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S162:   478C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S163:   4835 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S164:   48F8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S165:   4985 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S166:   49FE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S167:   4A6D DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            4A78 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4C00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 2303 IN MAIN.asm
                    > USED AT LINE 2307 IN MAIN.asm
                    > USED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4C00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2330 IN MAIN.asm
                    > USED AT LINE 2393 IN MAIN.asm
                    > USED AT LINE 2403 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
BUFFER:             4D00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
VARS:               4E00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 2294 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           4ED0 DEFINED AT LINE 18 IN ram.asm
RST08:              4ED0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4ED2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4ED4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4ED6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4ED8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4EDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4EDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4EDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4EE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4EE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4EE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4EE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2290 IN MAIN.asm
VDATAWIDTH:         4EE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 261 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
VNUMBASE:           4EE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
VTIBPTR:            4EEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
                    > USED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
VBUFPTR:            4EEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
VNEXT:              4EEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2302 IN MAIN.asm
VHEAPPTR:           4EF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 528 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
VRECUR:             4EF2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1650 IN MAIN.asm
VDEFINE:            4EF4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
VSTRMODE:           4EF6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
VPOINTER:           4EF8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 389 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
                    > USED AT LINE 607 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
VREMAIN:            4EFA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
VSAVEDIP:           4EFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2276 IN MAIN.asm
                    > USED AT LINE 2423 IN MAIN.asm
VSAVEDSP:           4EFE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2424 IN MAIN.asm
VSAVEDNEXT:         4F00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 2425 IN MAIN.asm
VSAVEDBP:           4F02 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2279 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
VTEMP1:             4F04 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
VTEMP2:             4F06 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
VTEMP3:             4F08 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
VLASTDEF:           4F0A DEFINED AT LINE 61 IN ram.asm
TBPTR:              4F0C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           4F0E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
HEAP:               4F22 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
