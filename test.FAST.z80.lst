0000                             ; .engine mycomputer
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 .cstr code1
0000                 call flushBuffer
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4C               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4C               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4C               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4C               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4C               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4C               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4C               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4C               LD   (RST08),HL   
0094   22 D2 4C               LD   (RST10),HL   
0097   22 D4 4C               LD   (RST18),HL   
009A   22 D6 4C               LD   (RST20),HL   
009D   22 D8 4C               LD   (RST28),HL   
00A0   22 DA 4C               LD   (RST30),HL   
00A3   22 DE 4C               LD   (INTVEC),HL   
00A6   22 E0 4C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0D               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQUOTE:   EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                TMAGIC:   EQU   $AA   ; magic number
00C6                TRESERV:   EQU   $A0   ; reserved
00C6                TNUMBER:   EQU   $A1   ; number
00C6                TSTRING:   EQU   $A2   ; string
00C6                TPOINTER:   EQU   $A3   ; pointer
00C6                TARRAY:   EQU   $A4   ; array
00C6                TBLOCK:   EQU   $A5   ; block
00C6                TLAMBDA:   EQU   $A6   ; lambda
00C6                TARGLST:   EQU   $A7   ; arglist
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4A                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4B                  DW   BUF   ; vBUFPtr pointer into BUF
0188   45 0C                  DW   next   ; nNext
018A   1E 4D                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   82                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   84                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7F                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6D                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   82                     DB   lsb(nop_)   ; ~
025F   82                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                AT_:         
0303   C3 99 03               JP   at   
0306                AMPER_:      
0306   C3 A3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C7 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FE 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 1A 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 74 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AE 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 D4 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3D 05               JP   rbrace   
031E                TICK_:       
031E   C3 99 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 9F 07               JP   semicolon   
0324                DOT_:        
0324   C3 06 06               JP   dot   
0327                UNDERSCORE_:      
0327   C3 91 07               JP   underscore   
032A                COLON_:      
032A   C3 9D 04               JP   colon   
032D                UPCASE_:      
032D   C3 15 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 1A 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 2C 07               JP   question   
0336                STAR_:       
0336   C3 45 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 61 07               JP   num   
0341                HASH_:       
0341   C3 F8 06               JP   hash   
0344                PIPE_:       
0344   C3 AE 03               JP   pipe   
0347                CARET_:      
0347   C3 52 06               JP   caret   
034A                COMMA_:      
034A   C3 B0 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 DE 07               JP   dblquote   
0350                MINUS_:      
0350   C3 06 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8C 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 31 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA CB 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 09                  JR   lt1   
036D                LT_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   
036F   FE 3C                  CP   "<"   
0371   CA BB 07               JP   z,shiftLeft   
0374   E1                     POP   hl   
0375   D1                     POP   de   
0376                LT1:         
0376   FE 3D                  CP   "="   
0378   CA 39 06               JP   z,lessthaneq   
037B   0B                     DEC   bc   
037C   C3 3E 06               JP   lessthan   
037F                SLASH_:      
037F   C3 BF 05               JP   slash   
0382                NOP_:        
0382   DD E9                  JP   (ix)   
0384                RPAREN_:      
0384   C3 97 07               JP   rparen   
0387                             ;*******************************************************************
0387                             ; implementations
0387                             ;*******************************************************************
0387                PLUS:        
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 05                  JR   nz,add1   
038D   E1                     POP   hl   
038E   23                     INC   hl   
038F   C3 8E 04               JP   assign0   
0392                ADD1:        
0392   0B                     DEC   bc   
0393   D1                     POP   de   ; second term
0394   E1                     POP   hl   ; first term
0395   19                     ADD   hl,de   
0396                ADD3:        
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; @ addr
0399                             ; -- ptr
0399                AT:          
0399                ADDR:        
0399   ED 5B F2 4C            LD   de,(vPointer)   
039D   21 F2 4C               LD   hl,vPointer   
03A0   C3 76 0A               JP   variable   
03A3                AMPER:       
03A3                AND:         
03A3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A4   E1                     POP   hl   
03A5   7B                     LD   a,e   
03A6   A5                     AND   l   
03A7   6F                     LD   l,a   
03A8   7A                     LD   a,d   
03A9   A4                     AND   h   
03AA                AND1:        
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                PIPE:        
03AE                OR:          
03AE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   B5                     OR   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   B4                     OR   h   
03B5   18 F3                  JR   and1   
03B7                XOR:         
03B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B8                XOR1:        
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   AD                     XOR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   AC                     XOR   h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0   DD E9                  JP   (ix)   
03C2                INVERT:      ; Bitwise INVert the top member of the stack
03C2   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C5   18 F1                  JR   xor1   
03C7                             ; $a .. $z
03C7                             ; -- value
03C7                             ; returns value of arg
03C7                DOLLAR:      
03C7                ARG:         
03C7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CA   FD 56 05               LD   d,(iy+5)   
03CD   EB                     EX   de,hl   
03CE   7D                     LD   a,l   ; arg_list* == null, skip
03CF   B4                     OR   h   
03D0   28 1C                  JR   z,arg0a   
03D2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D3   2B                     DEC   hl   
03D4   7E                     LD   a,(hl)   
03D5   23                     INC   hl   
03D6   23                     INC   hl   
03D7   B7                     OR   a   
03D8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DA   5F                     LD   e,a   ; e = a = num_args
03DB   03                     INC   bc   ; a = next char = dollar_name
03DC   0A                     LD   a,(bc)   
03DD   C5                     PUSH   bc   ; save IP
03DE   43                     LD   b,e   ; b = e = num_args
03DF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E2   FD 56 03               LD   d,(iy+3)   
03E5                ARG0:        
03E5   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E6   1B                     DEC   de   
03E7   BE                     CP   (hl)   
03E8   28 09                  JR   z,arg1   
03EA   23                     INC   hl   ; hl = next arg_list*
03EB   10 F8                  DJNZ   arg0   
03ED   C1                     POP   bc   ; no match, restore IP
03EE                ARG0A:       
03EE   11 00 00               LD   de,0   ; return 0
03F1   18 08                  JR   arg1a   
03F3                ARG1:        
03F3   C1                     POP   bc   ; restore IP
03F4   EB                     EX   de,hl   ; hl = arg*
03F5   22 F2 4C               LD   (vPointer),hl   ; store arg* in setter
03F8   5E                     LD   e,(hl)   
03F9   23                     INC   hl   
03FA   56                     LD   d,(hl)   ; de = arg
03FB                ARG1A:       
03FB   D5                     PUSH   de   ; push arg
03FC   DD E9                  JP   (ix)   
03FE                LBRACK:      
03FE                ARRAYSTART:      
03FE   11 00 00               LD   de,0   ; create stack frame
0401   D5                     PUSH   de   ; push null for IP
0402   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0405   FD 56 05               LD   d,(iy+5)   ; 
0408   D5                     PUSH   de   ; 
0409   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040C   FD 56 03               LD   d,(iy+3)   ; 
040F   D5                     PUSH   de   ; 
0410   FD E5                  PUSH   iy   ; push BP
0412   FD 21 00 00            LD   iy,0   ; BP = SP
0416   FD 39                  ADD   iy,sp   
0418   DD E9                  JP   (ix)   
041A                RBRACK:      
041A                ARRAYEND:      
041A   FD 54                  LD   d,iyh   ; de = BP
041C   FD 5D                  LD   e,iyl   
041E   ED 43 00 4D            LD   (vTemp1),bc   ; save IP
0422   62 6B                  LD   hl,de   ; hl = de = BP
0424   B7                     OR   a   
0425   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0427   CB 3C                  SRL   h   ; 
0429   CB 1D                  RR   l   
042B   44 4D                  LD   bc,hl   ; bc = count
042D   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = array[-4]
0430   71                     LD   (hl),c   ; write num items in length word
0431   23                     INC   hl   
0432   70                     LD   (hl),b   
0433   23                     INC   hl   ; hl = array[0], bc = count
0434                             ; de = BP, hl = array[0], bc = count
0434   3E A4                  LD   a,TARRAY   ; write type tag
0436   77                     LD   (hl),a   
0437   23                     INC   hl   
0438   3E AA                  LD   a,TMAGIC   ; write magic byte
043A   77                     LD   (hl),a   
043B   23                     INC   hl   
043C   18 15                  JR   arrayEnd3   
043E                ARRAYEND1:      
043E   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0441   77                     LD   (hl),a   ; write lsb of array item
0442   23                     INC   hl   ; move to msb of array item
0443   3A E6 4C               LD   a,(vDataWidth)   ; vDataWidth=1?
0446   3D                     DEC   a   
0447   28 05                  JR   z,arrayEnd2   
0449   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044C   77                     LD   (hl),a   ; write msb of array item
044D   23                     INC   hl   ; move to next word in array
044E                ARRAYEND2:      
044E   FD 2B                  DEC   iy   ; move to next word on stack
0450   FD 2B                  DEC   iy   
0452   0B                     DEC   bc   ; dec items count
0453                ARRAYEND3:      
0453   79                     LD   a,c   ; if not zero loop
0454   B0                     OR   b   
0455   20 E7                  JR   nz,arrayEnd1   
0457   EB                     EX   de,hl   ; de = end of array, hl = BP
0458   F9                     LD   sp,hl   ; sp = BP
0459   E1                     POP   hl   ; de = end of array, hl = old BP
045A   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
045B   FD 62                  LD   iyh,d   
045D   FD 6B                  LD   iyl,e   
045F   D1                     POP   de   ; pop arg_list (discard)
0460   D1                     POP   de   ; pop first_arg* (discard)
0461   D1                     POP   de   ; pop IP (discard)
0462   ED 5B F0 4C            LD   de,(vHeapPtr)   ; de = array[-4]
0466   13                     INC   de   ; de = array[0]
0467   13                     INC   de   
0468   13                     INC   de   
0469   13                     INC   de   
046A   D5                     PUSH   de   ; return array[0]
046B   22 F0 4C               LD   (vHeapPtr),hl   ; move heap* to end of array
046E   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore IP
0472   DD E9                  JP   (ix)   
0474                             ; index of an array, based on vDataWidth
0474                             ; array num -- value    ; also sets vPointer to address
0474                ARRINDEX:      
0474   E1                     POP   hl   ; hl = index
0475   D1                     POP   de   ; de = array
0476   3A E6 4C               LD   a,(vDataWidth)   ; a = data width
0479   3D                     DEC   a   
047A   28 01                  JR   z,arrIndex1   
047C                ARRINDEX0:      
047C   29                     ADD   hl,hl   ; if data width = 2 then double
047D                ARRINDEX1:      
047D   19                     ADD   hl,de   ; add addr
047E   22 F2 4C               LD   (vPointer),hl   ; store address in setter
0481   16 00                  LD   d,0   
0483   5E                     LD   e,(hl)   
0484   B7                     OR   a   ; check data width again
0485   28 02                  JR   z,arrIndex2   
0487   23                     INC   hl   
0488   56                     LD   d,(hl)   
0489                ARRINDEX2:      
0489   D5                     PUSH   de   
048A   DD E9                  JP   (ix)   
048C                             ; value _oldValue --            ; uses address in vPointer
048C                ASSIGN:      
048C   E1                     POP   hl   ; discard last accessed value
048D   E1                     POP   hl   ; hl = new value
048E                ASSIGN0:      
048E   EB                     EX   de,hl   ; de = new value
048F                ASSIGNX:      
048F   2A F2 4C               LD   hl,(vPointer)   
0492   73                     LD   (hl),e   
0493   3A E6 4C               LD   a,(vDataWidth)   
0496   3D                     DEC   a   ; is it byte?
0497   28 02                  JR   z,assign1   
0499   23                     INC   hl   
049A   72                     LD   (hl),d   
049B                ASSIGN1:      
049B   DD E9                  JP   (ix)   
049D                             ; arg_list - parses input (ab:c)
049D                             ; names after the : represent uninitialised locals
049D                             ; return values are the state of the stack after the block ends
049D                COLON:       
049D                ARGLIST:      
049D   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04A0   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap*
04A3   23                     INC   hl   ; skip length field to start
04A4   23                     INC   hl   
04A5   E5                     PUSH   hl   ; save start of arg_list
04A6   03                     INC   bc   ; point to next char
04A7                ARGLIST1:      
04A7   0A                     LD   a,(bc)   
04A8   FE 3A                  CP   ":"   ; ":" switches from args to locals
04AA   20 03                  JR   nz,arglist1a   
04AC   14                     INC   d   ; non zero value local count acts as flag
04AD   18 10                  JR   arglist3   
04AF                ARGLIST1A:      
04AF   FE 41                  CP   "A"   ; < "A" terminates arg_list
04B1   38 0F                  JR   c,arglist4   
04B3   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B5   30 0B                  JR   nc,arglist4   
04B7                ARGLIST2:      
04B7   77                     LD   (hl),a   
04B8   23                     INC   hl   
04B9   1C                     INC   e   ; increase arg count
04BA   AF                     XOR   a   
04BB   B2                     OR   d   
04BC   28 01                  JR   z,arglist3   
04BE   14                     INC   d   ; if d > 0 increase local count
04BF                ARGLIST3:      
04BF   03                     INC   bc   ; point to next char
04C0   18 E5                  JR   arglist1   
04C2                ARGLIST4:      
04C2   0B                     DEC   bc   
04C3   AF                     XOR   a   
04C4   B2                     OR   d   
04C5   28 01                  JR   z,arglist5   
04C7   15                     DEC   d   ; remove initial inc
04C8                ARGLIST5:      
04C8   23                     INC   hl   
04C9   22 F0 4C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CC   E1                     POP   hl   ; hl = start of arg_list
04CD   E5                     PUSH   hl   ; return start of arg_list
04CE   2B                     DEC   hl   ; write number of locals at start - 1
04CF   72                     LD   (hl),d   
04D0   2B                     DEC   hl   ; write number of args + locals at start - 2
04D1   73                     LD   (hl),e   
04D2   DD E9                  JP   (ix)   
04D4                LBRACE:      
04D4                BLOCKSTART:      
04D4   C5                     PUSH   bc   ; return pointer to first { of block
04D5   03                     INC   bc   
04D6   16 01                  LD   d,1   ; nesting: count first parenthesis
04D8                BLOCKSTART1:      ; Skip to end of definition
04D8   0A                     LD   a,(bc)   ; Get the next character
04D9   03                     INC   bc   ; Point to next character
04DA   FE 21                  CP   " " + 1   ; ignore whitespace
04DC   38 FA                  JR   c,blockStart1   
04DE   FE 29                  CP   ")"   
04E0   28 2D                  JR   z,blockStart4   
04E2   FE 7D                  CP   "}"   
04E4   28 29                  JR   z,blockStart4   
04E6   FE 5D                  CP   "]"   
04E8   28 25                  JR   z,blockStart4   
04EA   FE 28                  CP   "("   
04EC   28 16                  JR   z,blockStart2   
04EE   FE 7B                  CP   "{"   
04F0   28 12                  JR   z,blockStart2   
04F2   FE 5B                  CP   "["   
04F4   28 0E                  JR   z,blockStart2   
04F6   FE 27                  CP   "'"   
04F8   28 0D                  JR   z,blockStart3   
04FA   FE 60                  CP   "`"   
04FC   28 09                  JR   z,blockStart3   
04FE   FE 22                  CP   DQUOTE   
0500   28 05                  JR   z,blockStart3   
0502   18 D4                  JR   blockStart1   
0504                BLOCKSTART2:      
0504   14                     INC   d   
0505   18 D1                  JR   blockStart1   
0507                BLOCKSTART3:      
0507   3E 80                  LD   a,$80   
0509   AA                     XOR   d   
050A   57                     LD   d,a   
050B   20 CB                  JR   nz,blockStart1   
050D   18 03                  JR   blockStart5   
050F                BLOCKSTART4:      
050F   15                     DEC   d   
0510   20 C6                  JR   nz,blockStart1   ; get the next element
0512                BLOCKSTART5:      
0512   60 69                  LD   hl,bc   ; hl = IP
0514   11 1E 4D               LD   de,HEAP   ; is IP pointing to object in heap
0517   B7                     OR   a   ; IP - HEAP
0518   ED 52                  SBC   hl,de   
051A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051C   28 1C                  JR   z,blockStart6   
051E   60 69                  LD   hl,bc   ; hl = IP
0520   D1                     POP   de   ; de = block*
0521   ED 43 00 4D            LD   (vTemp1),bc   ; save IP
0525   B7                     OR   a   ; bc = size
0526   ED 52                  SBC   hl,de   
0528   44 4D                  LD   bc,hl   
052A   EB                     EX   de,hl   ; hl = block* de = heap*
052B   ED 5B F0 4C            LD   de,(vHeapPtr)   
052F   D5                     PUSH   de   ; return hblock*
0530   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0532   ED 53 F0 4C            LD   (vHeapPtr),de   ; heap* += size
0536   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore IP
053A                BLOCKSTART6:      
053A   0B                     DEC   bc   ; balanced, exit
053B   DD E9                  JP   (ix)   
053D                RBRACE:      
053D                BLOCKEND:      
053D   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0540   FD 56 01               LD   d,(iy+1)   
0543   ED 53 00 4D            LD   (vTemp1),de   
0547   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
054A   FD 56 07               LD   d,(iy+7)   
054D   ED 53 02 4D            LD   (vTemp2),de   
0551   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0554   FD 56 03               LD   d,(iy+3)   
0557   EB                     EX   de,hl   
0558   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
055B   FD 56 01               LD   d,(iy+1)   
055E   13                     INC   de   ; for carry flag <=
055F   B7                     OR   a   
0560   ED 52                  SBC   hl,de   
0562   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0564   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0566   FD 5D                  LD   e,iyl   
0568   21 08 00               LD   hl,8   
056B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056D   18 0C                  JR   blockEnd2   
056F                BLOCKEND1:      ; same scope
056F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0572   FD 56 03               LD   d,(iy+3)   
0575   EB                     EX   de,hl   
0576   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0578   FD 5D                  LD   e,iyl   
057A   EB                     EX   de,hl   
057B                BLOCKEND2:      
057B   44 4D                  LD   bc,hl   ; bc = hl = BP
057D   B7                     OR   a   ; hl = BP - SP = count
057E   ED 72                  SBC   hl,sp   
0580   7D                     LD   a,l   
0581   B4                     OR   h   
0582   28 09                  JR   z,blockEnd3   
0584   C5                     PUSH   bc   ; bc = count, hl = BP
0585   44 4D                  LD   bc,hl   
0587   E1                     POP   hl   
0588   2B                     DEC   hl   ; hl = BP-1
0589   1B                     DEC   de   ; de = args*-1
058A   ED B8                  LDDR      
058C   13                     INC   de   
058D                BLOCKEND3:      
058D   EB                     EX   de,hl   ; sp = de = new tos*
058E   F9                     LD   sp,hl   
058F   ED 4B 02 4D            LD   bc,(vTemp2)   
0593   FD 2A 00 4D            LD   iy,(vTemp1)   
0597   DD E9                  JP   (ix)   
0599                TICK:        
0599                CHAR:        
0599   21 00 00               LD   hl,0   ; if "" is empty or null
059C                CHAR1:       
059C   03                     INC   bc   ; point to next char
059D   0A                     LD   a,(bc)   
059E   FE 27                  CP   "'"   ; ' is the terminator
05A0   28 09                  JR   z,char3   
05A2   FE 5C                  CP   $5c   ; \ is the escape
05A4   20 02                  JR   nz,char2   
05A6   03                     INC   bc   
05A7   0A                     LD   a,(bc)   
05A8                CHAR2:       
05A8   6F                     LD   l,a   
05A9   18 F1                  JR   char1   
05AB                CHAR3:       
05AB   E5                     PUSH   hl   
05AC   DD E9                  JP   (ix)   
05AE                BACKSLASH:      
05AE   DD E9                  JP   (ix)   
05B0                             ; , discard stack item
05B0                             ; x y -- x
05B0                COMMA:       
05B0                DISCARD:      
05B0   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05B2   FD 5D                  LD   e,iyl   
05B4   EB                     EX   de,hl   
05B5   B7                     OR   a   
05B6   ED 72                  SBC   hl,sp   
05B8   CB 7C                  BIT   7,h   
05BA   20 01                  JR   nz,discard1   
05BC   E1                     POP   hl   
05BD                DISCARD1:      
05BD   DD E9                  JP   (ix)   
05BF                SLASH:       
05BF   CD E1 0A               CALL   jumpTable   
05C2   2F                     DB   "/"   
05C3   2C 08                  DW   comment   
05C5   61                     DB   "a"   
05C6   35 08                  DW   command_a   
05C8   62                     DB   "b"   
05C9   6F 08                  DW   command_b   
05CB   63                     DB   "c"   
05CC   7C 0A                  DW   chars   
05CE   64                     DB   "d"   
05CF   84 0A                  DW   decimal   
05D1   66                     DB   "f"   
05D2   4C 06                  DW   false1   
05D4   68                     DB   "h"   
05D5   8C 0A                  DW   hexadecimal   
05D7   69                     DB   "i"   
05D8   B8 09                  DW   command_i   
05DA   6B                     DB   "k"   
05DB   9D 0A                  DW   key   
05DD   6E                     DB   "n"   
05DE   AF 0A                  DW   numbers   
05E0   6F                     DB   "o"   
05E1   A6 0A                  DW   output   
05E3   70                     DB   "p"   
05E4   C4 09                  DW   command_p   
05E6   73                     DB   "s"   
05E7   2D 0A                  DW   size   
05E9   74                     DB   "t"   
05EA   46 06                  DW   true1   
05EC   76                     DB   "v"   
05ED   37 0A                  DW   command_v   
05EF   78                     DB   "x"   
05F0   B7 03                  DW   xor   
05F2   00                     DB   NUL   
05F3   F5 05                  DW   div   
05F5                DIV:         
05F5   D1                     POP   de   
05F6   E1                     POP   hl   
05F7   C5                     PUSH   bc   ; preserve the IP
05F8   44 4D                  LD   bc,hl   
05FA   CD 18 06               CALL   divide   
05FD   EB                     EX   de,hl   
05FE   ED 53 F4 4C            LD   (vRemain),de   
0602   C1                     POP   bc   
0603   C3 96 03               JP   add3   
0606                DOT:         
0606   CD E1 0A               CALL   jumpTable   
0609   61                     DB   "a"   
060A   8A 08                  DW   bufferArray   
060C   63                     DB   "c"   
060D   97 09                  DW   bufferChar   
060F   73                     DB   "s"   
0610   7D 09                  DW   bufferString   
0612   78                     DB   "x"   
0613   9C 09                  DW   bufferXChars   
0615   00                     DB   NUL   
0616   BE 08                  DW   bufferNumber   
0618                             ; division subroutine.
0618                             ; bc: divisor, de: dividend, hl: remainder
0618                DIVIDE:      
0618   21 00 00               LD   hl,0   ; zero the remainder
061B   3E 10                  LD   a,16   ; loop counter
061D                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
061D   CB 21                  SLA   c   
061F   CB 10                  RL   b   
0621   ED 6A                  ADC   hl,hl   
0623   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0625   38 03                  JR   c,divide2   
0627   0C                     INC   c   
0628   18 01                  JR   divide3   
062A                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
062A   19                     ADD   hl,de   
062B                DIVIDE3:      
062B   3D                     DEC   a   
062C   20 EF                  JR   nz,divide1   
062E   50 59                  LD   de,bc   ; result from bc to de
0630   C9                     RET      
0631                             ; hl = value1, de = value2
0631                             ; hl = result
0631                EQUALS:      
0631   B7                     OR   a   ; reset the carry flag
0632   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0634   28 10                  JR   z,true1   
0636   C3 4C 06               JP   false1   
0639                             ; hl = value1 de = value2
0639                             ; hl = result
0639                LESSTHANEQ:      
0639   B7                     OR   a   
063A   ED 52                  SBC   hl,de   
063C   18 05                  JR   lessthan1   
063E                             ; hl = value1 de = value2
063E                             ; hl = result
063E                LESSTHAN:      
063E   B7                     OR   a   
063F   ED 52                  SBC   hl,de   
0641   28 09                  JR   z,false1   
0643                LESSTHAN1:      
0643   FA 4C 06               JP   m,false1   
0646                TRUE1:       
0646   21 FF FF               LD   hl,TRUE   
0649   E5                     PUSH   hl   
064A   DD E9                  JP   (ix)   
064C                NULL1:       
064C                FALSE1:      
064C   21 00 00               LD   hl,FALSE   
064F   E5                     PUSH   hl   
0650   DD E9                  JP   (ix)   
0652                             ; execute a block of code which ends with }
0652                             ; creates a root scope if BP == stack
0652                             ; else uses outer scope
0652                CARET:       
0652                GO:          
0652   D1                     POP   de   ; de = block*
0653                GO1:         
0653   7B                     LD   a,e   ; if block* == null, exit
0654   B2                     OR   d   
0655   20 02                  JR   nz,go2   
0657   DD E9                  JP   (ix)   
0659                GO2:         
0659   1A                     LD   a,(de)   
065A   FE 7B                  CP   "{"   
065C   28 07                  JR   z,goBlock1   
065E   FE 28                  CP   "("   
0660   C2 98 06               JP   nz,goLambda   
0663   13                     INC   de   ; de is the address to jump back to
0664   D5                     PUSH   de   ; push de just before stack frame
0665                GOBLOCK:      
0665                GOBLOCK1:      
0665   ED 53 00 4D            LD   (vTemp1),de   ; save de
0669   21 00 4A               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
066C   FD 54                  LD   d,iyh   
066E   FD 5D                  LD   e,iyl   
0670   B7                     OR   a   ; if stack* == BP then this is the root_scope
0671   ED 52                  SBC   hl,de   
0673   ED 5B 00 4D            LD   de,(vTemp1)   ; restore de
0677   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0678   B4                     OR   h   
0679   3E 00                  LD   a,0   
067B   28 70                  JR   z,goLambda8   
067D   C5                     PUSH   bc   ; push IP
067E   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0681   FD 46 05               LD   b,(iy+5)   
0684   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0687   FD 66 03               LD   h,(iy+3)   
068A                GOBLOCK2:      
068A   C5                     PUSH   bc   ; arg_list*
068B   E5                     PUSH   hl   ; first_arg*
068C   FD E5                  PUSH   iy   ; push BP
068E   FD 21 00 00            LD   iy,0   ; BP = SP
0692   FD 39                  ADD   iy,sp   
0694   42 4B                  LD   bc,de   ; bc = de = block*-1
0696   DD E9                  JP   (ix)   
0698                GOLAMBDA:      ; execute lambda
0698   EB                     EX   de,hl   ; hl = lambda*
0699   5E                     LD   e,(hl)   ; de = partial_array*
069A   23                     INC   hl   
069B   56                     LD   d,(hl)   
069C   23                     INC   hl   
069D   7B                     LD   a,e   ; if partial_array* == null skip
069E   B2                     OR   d   
069F   28 25                  JR   z,goLambda3   
06A1   ED 43 00 4D            LD   (vTemp1),bc   
06A5   22 02 4D               LD   (vTemp2),hl   ; save bc,hl
06A8   EB                     EX   de,hl   ; hl = partial_array*
06A9   2B                     DEC   hl   ; skip type byte
06AA   2B                     DEC   hl   ; skip magic byte
06AB   2B                     DEC   hl   ; bc = count
06AC   46                     LD   b,(hl)   
06AD   2B                     DEC   hl   
06AE   4E                     LD   c,(hl)   
06AF   23                     INC   hl   ; hl = array data*
06B0   23                     INC   hl   
06B1   23                     INC   hl   
06B2   23                     INC   hl   
06B3   18 06                  JR   goLambda2   ; push each item on stack
06B5                GOLAMBDA1:      
06B5   5E                     LD   e,(hl)   ; de = partial item
06B6   23                     INC   hl   
06B7   56                     LD   d,(hl)   
06B8   23                     INC   hl   
06B9   D5                     PUSH   de   ; push on stack
06BA   0B                     DEC   bc   
06BB                GOLAMBDA2:      
06BB   79                     LD   a,c   ; if count != 0 then loop
06BC   B0                     OR   b   
06BD   20 F6                  JR   nz,goLambda1   
06BF   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore bc
06C3   2A 02 4D               LD   hl,(vTemp2)   ; restore hl
06C6                GOLAMBDA3:      
06C6   5E                     LD   e,(hl)   ; de = block*
06C7   23                     INC   hl   
06C8   56                     LD   d,(hl)   
06C9   23                     INC   hl   
06CA   ED 53 00 4D            LD   (vTemp1),de   ; save block*
06CE   5E                     LD   e,(hl)   ; de = arg_list*
06CF   23                     INC   hl   
06D0   56                     LD   d,(hl)   
06D1   23                     INC   hl   
06D2   EB                     EX   de,hl   ; hl = arg_list*
06D3   ED 5B 00 4D            LD   de,(vTemp1)   ; restore de = block*
06D7   7D                     LD   a,l   ; if arg_list* == null a = 0
06D8   B4                     OR   h   
06D9   20 03                  JR   nz,goLambda4   
06DB   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06DC   18 0F                  JR   goLambda8   
06DE                GOLAMBDA4:      ; allocate locals
06DE   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06DF   7E                     LD   a,(hl)   
06E0   18 03                  JR   goLambda6   
06E2                GOLAMBDA5:      ; loop
06E2   3B                     DEC   sp   
06E3   3B                     DEC   sp   
06E4   3D                     DEC   a   
06E5                GOLAMBDA6:      
06E5   B7                     OR   a   
06E6   20 FA                  JR   nz,goLambda5   ; end loop
06E8                GOLAMBDA7:      
06E8   2B                     DEC   hl   ; a = num_args* x 2
06E9   7E                     LD   a,(hl)   
06EA   23                     INC   hl   
06EB   23                     INC   hl   
06EC   87                     ADD   a,a   ; a *= 2
06ED                GOLAMBDA8:      
06ED   C5                     PUSH   bc   ; push IP
06EE   44 4D                  LD   bc,hl   
06F0   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06F3   85                     ADD   a,l   
06F4   6F                     LD   l,a   
06F5   39                     ADD   hl,sp   
06F6   18 92                  JR   goBlock2   
06F8                HASH:        
06F8                HEXNUM:      
06F8   21 00 00               LD   hl,0   ; Clear hl to accept the number
06FB                HEXNUM1:      
06FB   03                     INC   bc   
06FC   0A                     LD   a,(bc)   ; Get the character which is a numeral
06FD   CB 77                  BIT   6,a   ; is it uppercase alpha?
06FF   28 02                  JR   z,hexnum2   ; no a decimal
0701   D6 07                  SUB   7   ; sub 7  to make $a - $F
0703                HEXNUM2:      
0703   D6 30                  SUB   $30   ; form decimal digit
0705   DA 83 07               JP   c,num2   
0708   FE 10                  CP   $0F+1   
070A   D2 83 07               JP   nc,num2   
070D   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
070E   29                     ADD   hl,hl   ; 4X
070F   29                     ADD   hl,hl   ; 8X
0710   29                     ADD   hl,hl   ; 16X
0711   85                     ADD   a,l   ; add into bottom of hl
0712   6F                     LD   l,a   
0713   18 E6                  JR   hexnum1   
0715                UPCASE:      
0715   0A                     LD   a,(bc)   ; a = identifier char
0716   D6 41                  SUB   "A"   ; "A" = 0
0718   18 05                  JR   ident1   
071A                LOWCASE:      
071A   0A                     LD   a,(bc)   
071B   D6 61                  SUB   "a"   
071D   C6 1A                  ADD   a,26   
071F                IDENT1:      
071F   87                     ADD   a,a   ; l = a * 2
0720   6F                     LD   l,a   
0721   26 4C                  LD   h,msb(vars)   
0723   22 F2 4C               LD   (vPointer),hl   ; store address in setter
0726   5E                     LD   e,(hl)   
0727   23                     INC   hl   
0728   56                     LD   d,(hl)   
0729   D5                     PUSH   de   
072A   DD E9                  JP   (ix)   
072C                             ; if
072C                             ; condition then -- value
072C                QUESTION:      
072C                IF:          
072C   03                     INC   bc   
072D   0A                     LD   a,(bc)   
072E   FE 3F                  CP   "?"   
0730   28 06                  JR   z,ifte   
0732   0B                     DEC   bc   
0733   11 00 00               LD   de,NUL   ; NUL pointer for else
0736   18 01                  JR   ifte1   
0738                             ; ifte
0738                             ; condition then else -- value
0738                IFTE:        
0738   D1                     POP   de   ; de = else
0739                IFTE1:       
0739   E1                     POP   hl   ; hl = then
073A   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
073B   7C                     LD   a,h   
073C   B5                     OR   l   
073D   E1                     POP   hl   ; hl = then
073E   CA 53 06               JP   z,go1   ; if z de = else
0741   EB                     EX   de,hl   ; condition = false, de = then
0742   C3 53 06               JP   go1   
0745                STAR:        
0745                MUL:         
0745   D1                     POP   de   ; get first value
0746   E1                     POP   hl   
0747                MUL2:        
0747   C5                     PUSH   bc   ; Preserve the IP
0748   44 4D                  LD   bc,hl   ; bc = 2nd value
074A   21 00 00               LD   hl,0   
074D   3E 10                  LD   a,16   
074F                MUL3:        
074F   29                     ADD   hl,hl   
0750   CB 13                  RL   e   
0752   CB 12                  RL   d   
0754   30 04                  JR   nc,$+6   
0756   09                     ADD   hl,bc   
0757   30 01                  JR   nc,$+3   
0759   13                     INC   de   
075A   3D                     DEC   a   
075B   20 F2                  JR   nz,mul3   
075D   C1                     POP   bc   ; Restore the IP
075E   C3 96 03               JP   add3   
0761                NUM:         
0761   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0764   0A                     LD   a,(bc)   ; Get numeral or -
0765   FE 2D                  CP   "-"   
0767   20 01                  JR   nz,num0   
0769   03                     INC   bc   ; move to next char, no flags affected
076A                NUM0:        
076A   08                     EX   af,af'   ; save zero flag = 0 for later
076B                NUM1:        
076B   0A                     LD   a,(bc)   ; read digit
076C   D6 30                  SUB   "0"   ; less than 0?
076E   38 13                  JR   c,num2   ; not a digit, exit loop
0770   FE 0A                  CP   10   ; greater that 9?
0772   30 0F                  JR   nc,num2   ; not a digit, exit loop
0774   03                     INC   bc   ; inc IP
0775   54 5D                  LD   de,hl   ; multiply hl * 10
0777   29                     ADD   hl,hl   
0778   29                     ADD   hl,hl   
0779   19                     ADD   hl,de   
077A   29                     ADD   hl,hl   
077B   85                     ADD   a,l   ; add digit in a to hl
077C   6F                     LD   l,a   
077D   3E 00                  LD   a,0   
077F   8C                     ADC   a,h   
0780   67                     LD   h,a   
0781   18 E8                  JR   num1   
0783                NUM2:        
0783   0B                     DEC   bc   
0784   08                     EX   af,af'   ; restore zero flag
0785   20 07                  JR   nz,num3   
0787   EB                     EX   de,hl   ; negate the value of hl
0788   21 00 00               LD   hl,0   
078B   B7                     OR   a   ; jump to sub2
078C   ED 52                  SBC   hl,de   
078E                NUM3:        
078E   E5                     PUSH   hl   ; Put the number on the stack
078F   DD E9                  JP   (ix)   ; and process the next character
0791                UNDERSCORE:      
0791                REMAIN:      
0791   2A F4 4C               LD   hl,(vRemain)   
0794   E5                     PUSH   hl   
0795   DD E9                  JP   (ix)   
0797                RPAREN:      
0797   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
079A   FD 46 09               LD   b,(iy+9)   
079D   DD E9                  JP   (ix)   
079F                             ; arg_list* block* -- ptr
079F                SEMICOLON:      
079F   D1                     POP   de   ; de = block* hl = heap*
07A0   2A F0 4C               LD   hl,(vHeapPtr)   
07A3   AF                     XOR   a   
07A4   77                     LD   (hl),a   ; compile null partial_array*
07A5   23                     INC   hl   
07A6   77                     LD   (hl),a   
07A7   23                     INC   hl   
07A8   73                     LD   (hl),e   ; compile block*
07A9   23                     INC   hl   
07AA   72                     LD   (hl),d   
07AB   23                     INC   hl   
07AC   D1                     POP   de   ; de = block*
07AD   73                     LD   (hl),e   ; compile arg_list*
07AE   23                     INC   hl   
07AF   72                     LD   (hl),d   
07B0   23                     INC   hl   
07B1   ED 5B F0 4C            LD   de,(vHeapPtr)   ; return lambda*
07B5   D5                     PUSH   de   
07B6   22 F0 4C               LD   (vHeapPtr),hl   ; heap* += 4
07B9   DD E9                  JP   (ix)   
07BB                             ; shiftLeft
07BB                             ; value count -- value2          shift left count places
07BB                SHIFTLEFT:      
07BB   50 59                  LD   de,bc   ; save IP
07BD   C1                     POP   bc   ; bc = count
07BE   41                     LD   b,c   ; b = loop counter
07BF   E1                     POP   hl   
07C0   04                     INC   b   ; test for counter=0 case
07C1   18 01                  JR   shiftLeft2   
07C3                SHIFTLEFT1:      
07C3   29                     ADD   hl,hl   ; left shift hl
07C4                SHIFTLEFT2:      
07C4   10 FD                  DJNZ   shiftLeft1   
07C6   E5                     PUSH   hl   
07C7   42 4B                  LD   bc,de   ; restore IP
07C9   DD E9                  JP   (ix)   
07CB                             ; shiftRight
07CB                             ; value count -- value2          shift left count places
07CB                SHIFTRIGHT:      
07CB   50 59                  LD   de,bc   ; save IP
07CD   C1                     POP   bc   ; bc = count
07CE   41                     LD   b,c   ; b = loop counter
07CF   E1                     POP   hl   
07D0   04                     INC   b   ; test for counter=0 case
07D1   18 04                  JR   shiftRight2   
07D3                SHIFTRIGHT1:      
07D3   CB 3C                  SRL   h   ; right shift hl
07D5   CB 1D                  RR   l   
07D7                SHIFTRIGHT2:      
07D7   10 FA                  DJNZ   shiftRight1   
07D9   E5                     PUSH   hl   
07DA   42 4B                  LD   bc,de   ; restore IP
07DC   DD E9                  JP   (ix)   
07DE                             ; string
07DE                             ; -- ptr                        ; points to start of string chars,
07DE                             ; length is stored at start - 2 bytes
07DE                DBLQUOTE:      
07DE                STRING:      
07DE   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap*
07E1   23                     INC   hl   ; skip length field to start
07E2   23                     INC   hl   
07E3   E5                     PUSH   hl   ; save start of string
07E4   03                     INC   bc   ; point to next char
07E5   18 03                  JR   string2   
07E7                STRING1:      
07E7   77                     LD   (hl),a   
07E8   23                     INC   hl   ; increase count
07E9   03                     INC   bc   ; point to next char
07EA                STRING2:      
07EA   0A                     LD   a,(bc)   
07EB   FE 22                  CP   DQUOTE   ; " is the string terminator
07ED   28 04                  JR   z,string3   
07EF   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07F1   20 F4                  JR   nz,string1   
07F3                STRING3:      
07F3   AF                     XOR   a   ; write NUL to terminate string
07F4   77                     LD   (hl),a   ; hl = end of string
07F5   23                     INC   hl   
07F6   22 F0 4C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07F9   2B                     DEC   hl   ; hl = end of string without terminator
07FA   D1                     POP   de   ; de = start of string
07FB   D5                     PUSH   de   ; return start of string
07FC   B7                     OR   a   ; hl = length bytes, de = start of string
07FD   ED 52                  SBC   hl,de   
07FF   EB                     EX   de,hl   
0800   2B                     DEC   hl   ; write length bytes to length field at start - 2
0801   72                     LD   (hl),d   
0802   2B                     DEC   hl   
0803   73                     LD   (hl),e   
0804   DD E9                  JP   (ix)   
0806                MINUS:       ; negative sign or subtract
0806   03                     INC   bc   ; check if sign of a number
0807   0A                     LD   a,(bc)   
0808   0B                     DEC   bc   
0809   FE 30                  CP   "0"   
080B   38 05                  JR   c,sub   
080D   FE 3A                  CP   "9"+1   
080F   DA 3E 03               JP   c,num_   
0812                SUB:         ; Subtract the value 2nd on stack from top of stack
0812   03                     INC   bc   
0813   FE 2D                  CP   "-"   
0815   20 05                  JR   nz,sub1   
0817   E1                     POP   hl   
0818   2B                     DEC   hl   
0819   C3 8E 04               JP   assign0   
081C                SUB1:        
081C   0B                     DEC   bc   
081D   D1                     POP   de   
081E   E1                     POP   hl   
081F   B7                     OR   a   
0820   ED 52                  SBC   hl,de   
0822   C3 96 03               JP   add3   
0825                ERROR1:      
0825   21 01 00               LD   hl,1   ; error 1: unknown command
0828   E5                     PUSH   hl   
0829   C3 65 0C               JP   error   
082C                COMMENT:      
082C   03                     INC   bc   ; point to next char
082D   0A                     LD   a,(bc)   
082E   FE 20                  CP   " "   ; terminate on any char less than SP
0830   30 FA                  JR   nc,comment   
0832   0B                     DEC   bc   
0833   DD E9                  JP   (ix)   
0835                COMMAND_A:      
0835   CD E1 0A               CALL   jumpTable   
0838   62                     DB   "b"   
0839   41 08                  DW   absolute   
083B   64                     DB   "d"   
083C   4E 08                  DW   addrOf   
083E   00                     DB   NUL   
083F   25 08                  DW   error1   
0841                             ; /ab absolute
0841                             ; num -- num
0841                ABSOLUTE:      
0841   E1                     POP   hl   
0842   CB 7C                  BIT   7,h   
0844   C8                     RET   z   
0845   AF                     XOR   a   
0846   95                     SUB   l   
0847   6F                     LD   l,a   
0848   9F                     SBC   a,a   
0849   94                     SUB   h   
084A   67                     LD   h,a   
084B   E5                     PUSH   hl   
084C   DD E9                  JP   (ix)   
084E                             ; /ad addrOf
084E                             ; char -- addr
084E                ADDROF:      
084E   E1                     POP   hl   ; a = char
084F   7D                     LD   a,l   
0850   FE 7B                  CP   "z"+1   ; if a > z then exit
0852   30 19                  JR   nc,addrOf2   
0854   D6 41                  SUB   "A"   ; a - 65
0856   38 15                  JR   c,addrOf2   ; if < A then exit
0858   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
085A   38 06                  JR   c,addrOf1   
085C   D6 06                  SUB   "a"-("Z"+1)   
085E   FE 1A                  CP   "Z"-"A"+1   
0860   38 0B                  JR   c,addrOf2   ; if < a then exit
0862                ADDROF1:      
0862   87                     ADD   a,a   ; double a
0863   21 00 4C               LD   hl,VARS   ; hl = VARS + a
0866   85                     ADD   a,l   
0867   6F                     LD   l,a   
0868   3E 00                  LD   a,0   
086A   8C                     ADC   a,h   
086B   67                     LD   h,a   
086C   E5                     PUSH   hl   
086D                ADDROF2:      
086D   DD E9                  JP   (ix)   
086F                COMMAND_B:      
086F   CD E1 0A               CALL   jumpTable   
0872   61                     DB   "a"   
0873   8A 08                  DW   bufferArray   
0875   63                     DB   "c"   
0876   97 09                  DW   bufferChar   
0878   6E                     DB   "n"   
0879   BE 08                  DW   bufferNumber   
087B   72                     DB   "r"   
087C   63 09                  DW   break   
087E   73                     DB   "s"   
087F   7D 09                  DW   bufferString   
0881   78                     DB   "x"   
0882   9C 09                  DW   bufferXChars   
0884   79                     DB   "y"   
0885   A8 0B                  DW   coldStart   
0887   00                     DB   NUL   
0888   25 08                  DW   error1   
088A                             ; /ba buffer array
088A                             ; array* --
088A                BUFFERARRAY:      
088A   CD 52 06               CALL   go   
088D   00 00                  DW   NUL   ; NUL closure
088F   93 08                  DW   $+4   
0891   C7 0A                  DW   args1A2L   
0893   7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2F 62 64 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 00 .CSTR   "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}"   ; block
08BE                             ; /bd buffer decimal
08BE                             ; value --
08BE                BUFFERNUMBER:      
08BE   3A E8 4C               LD   a,(vNumBase)   
08C1   FE 10                  CP   16   
08C3   28 66                  JR   z,bufferHex   ; else falls through
08C5                             ; /bd buffer decimal
08C5                             ; value --
08C5                BUFFERDEC:      
08C5   ED 5B EC 4C            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08C9   D9                     EXX      
08CA   E1                     POP   hl   ; hl = value
08CB   CD DF 08               CALL   bufferDec0   
08CE   D9                     EXX      ; de = buffer*' bc = IP
08CF   3E 20                  LD   a," "   ; append space to buffer
08D1   12                     LD   (de),a   
08D2   1C                     INC   e   ; buffer*++, wraparound
08D3   CC CA 0A               CALL   z,flushBuffer   
08D6   2A EC 4C               LD   hl,(vBufPtr)   ; hl = buffer*
08D9   ED 53 EC 4C            LD   (vBufPtr),de   ; update buffer* with buffer*'
08DD   DD E9                  JP   (ix)   
08DF                             ; hl = value
08DF                             ; de' = buffer*
08DF                             ; a, bc, de, hl destroyed
08DF                BUFFERDEC0:      
08DF   CB 7C                  BIT   7,h   
08E1   28 0C                  JR   z,bufferDec1   
08E3   D9                     EXX      
08E4   3E 2D                  LD   a,"-"   
08E6   12                     LD   (de),a   
08E7   13                     INC   de   
08E8   D9                     EXX      
08E9   AF                     XOR   a   
08EA   95                     SUB   l   
08EB   6F                     LD   l,a   
08EC   9F                     SBC   a,a   
08ED   94                     SUB   h   
08EE   67                     LD   h,a   
08EF                BUFFERDEC1:      
08EF   0E 00                  LD   c,0   ; leading zeros flag = false
08F1   11 F0 D8               LD   de,-10000   
08F4   CD 0F 09               CALL   bufferDec2   
08F7   11 18 FC               LD   de,-1000   
08FA   CD 0F 09               CALL   bufferDec2   
08FD   11 9C FF               LD   de,-100   
0900   CD 0F 09               CALL   bufferDec2   
0903   1E F6                  LD   e,-10   
0905   CD 0F 09               CALL   bufferDec2   
0908   0C                     INC   c   ; flag = true for at least digit
0909   1E FF                  LD   e,-1   
090B   CD 0F 09               CALL   bufferDec2   
090E   C9                     RET      
090F                BUFFERDEC2:      
090F   06 2F                  LD   b,"0"-1   
0911                BUFFERDEC3:      
0911   04                     INC   b   
0912   19                     ADD   hl,de   
0913   38 FC                  JR   c,bufferDec3   
0915   ED 52                  SBC   hl,de   
0917   3E 30                  LD   a,"0"   
0919   B8                     CP   b   
091A   20 05                  JR   nz,bufferDec4   
091C   AF                     XOR   a   
091D   B1                     OR   c   
091E   C8                     RET   z   
091F   18 01                  JR   bufferDec5   
0921                BUFFERDEC4:      
0921   0C                     INC   c   
0922                BUFFERDEC5:      
0922   78                     LD   a,b   
0923   D9                     EXX      
0924   12                     LD   (de),a   
0925   1C                     INC   e   
0926   CC CA 0A               CALL   z,flushBuffer   
0929   D9                     EXX      
092A   C9                     RET      
092B                             ; /bh buffer hex
092B                             ; value --
092B                BUFFERHEX:      
092B   E1                     POP   hl   ; hl = value
092C   ED 5B EC 4C            LD   de,(vBufPtr)   
0930   3E 23                  LD   a,"#"   ; # prefix
0932   12                     LD   (de),a   
0933   1C                     INC   e   ; buffer*++, wraparound
0934   CC CA 0A               CALL   z,flushBuffer   
0937   7C                     LD   a,h   
0938   CD 4C 09               CALL   bufferHex1   
093B   7D                     LD   a,l   
093C   CD 4C 09               CALL   bufferHex1   
093F   3E 20                  LD   a," "   ; append space to buffer
0941   12                     LD   (de),a   
0942   1C                     INC   e   ; buffer*++, wraparound
0943   CC CA 0A               CALL   z,flushBuffer   
0946   ED 53 EC 4C            LD   (vBufPtr),de   
094A   DD E9                  JP   (ix)   
094C                BUFFERHEX1:      
094C   F5                     PUSH   af   
094D   1F                     RRA      
094E   1F                     RRA      
094F   1F                     RRA      
0950   1F                     RRA      
0951   CD 55 09               CALL   bufferHex2   
0954   F1                     POP   af   
0955                BUFFERHEX2:      
0955   E6 0F                  AND   0x0F   
0957   C6 90                  ADD   a,0x90   
0959   27                     DAA      
095A   CE 40                  ADC   a,0x40   
095C   27                     DAA      
095D   12                     LD   (de),a   
095E   1C                     INC   e   ; buffer*++, wraparound
095F   CC CA 0A               CALL   z,flushBuffer   
0962   C9                     RET      
0963                             ; /br break from loop
0963                             ; --
0963                BREAK:       
0963   E1                     POP   hl   
0964   7D                     LD   a,l   
0965   B4                     OR   h   
0966   28 02                  JR   z,break1   
0968   DD E9                  JP   (ix)   
096A                BREAK1:      
096A   FD 5D                  LD   e,iyl   ; get block* just under stack frame
096C   FD 54                  LD   d,iyh   
096E   21 08 00               LD   hl,8   
0971   19                     ADD   hl,de   
0972   23                     INC   hl   
0973   23                     INC   hl   
0974   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0977   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
097A   C3 3D 05               JP   blockEnd   
097D                             ; /bs buffered string
097D                             ; string* --
097D                BUFFERSTRING:      
097D   E1                     POP   hl   ; hl = string*
097E   ED 5B EC 4C            LD   de,(vBufPtr)   ; de = buffer*
0982   18 06                  JR   bufferString1   
0984                BUFFERSTRING0:      
0984   12                     LD   (de),a   ; a -> buffer*
0985   1C                     INC   e   ; buffer*++, wraparound
0986   CC CA 0A               CALL   z,flushBuffer   
0989   23                     INC   hl   
098A                BUFFERSTRING1:      
098A   7E                     LD   a,(hl)   ; a <- string*
098B   B7                     OR   a   ; if NUL exit loop
098C   20 F6                  JR   nz,bufferString0   
098E   2A EC 4C               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
0991   ED 53 EC 4C            LD   (vBufPtr),de   ; save buffer*' in pointer
0995   DD E9                  JP   (ix)   
0997                             ; /bc buffer char
0997                             ; char --
0997                BUFFERCHAR:      
0997   21 01 00               LD   hl,1   
099A   18 01                  JR   bufferXChars0   
099C                             ; /bx buffered x chars
099C                             ; char length --
099C                BUFFERXCHARS:      
099C   E1                     POP   hl   ; hl = length
099D                BUFFERXCHARS0:      
099D   D1                     POP   de   ; a' = char
099E   7B                     LD   a,e   
099F   08                     EX   af,af'   
09A0   ED 5B EC 4C            LD   de,(vBufPtr)   ; de = buffer*
09A4   18 08                  JR   bufferXChars2   
09A6                BUFFERXCHARS1:      
09A6   08                     EX   af,af'   
09A7   12                     LD   (de),a   
09A8   08                     EX   af,af'   
09A9   1C                     INC   e   ; buffer*++, wraparound
09AA   CC CA 0A               CALL   z,flushBuffer   
09AD   2B                     DEC   hl   
09AE                BUFFERXCHARS2:      
09AE   7D                     LD   a,l   
09AF   B4                     OR   h   
09B0   20 F4                  JR   nz,bufferXChars1   
09B2   ED 53 EC 4C            LD   (vBufPtr),de   ; save buffer*'
09B6   DD E9                  JP   (ix)   
09B8                COMMAND_I:      
09B8   CD E1 0A               CALL   jumpTable   
09BB   6E                     DB   "n"   
09BC   92 0A                  DW   input   
09BE   76                     DB   "v"   
09BF   C2 03                  DW   invert   
09C1   00                     DB   NUL   
09C2   25 08                  DW   error1   
09C4                COMMAND_P:      
09C4   CD E1 0A               CALL   jumpTable   
09C7   61                     DB   "a"   
09C8   D6 09                  DW   partial   
09CA   62                     DB   "b"   
09CB   F6 09                  DW   printBuffer   
09CD   63                     DB   "c"   
09CE   19 0A                  DW   printChars   
09D0   6B                     DB   "k"   
09D1   2B 0A                  DW   printStack   
09D3   00                     DB   NUL   
09D4   25 08                  DW   error1   
09D6                             ; partial
09D6                             ; array* lambda* -- lambda1*
09D6                PARTIAL:      
09D6   E1                     POP   hl   ; h1 = lambda*
09D7   ED 5B F0 4C            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09DB   ED 43 00 4D            LD   (vTemp1),bc   ; save IP
09DF   01 06 00               LD   bc,6   ; bc = count
09E2   ED B0                  LDIR      ; clone lambda
09E4   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore IP
09E8   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09EB   ED 53 F0 4C            LD   (vHeapPtr),de   ; heap* += 6
09EF   D1                     POP   de   ; de = array*
09F0   E5                     PUSH   hl   ; return partial_array*
09F1   73                     LD   (hl),e   ; compile array*
09F2   23                     INC   hl   
09F3   72                     LD   (hl),d   
09F4   DD E9                  JP   (ix)   
09F6                             ; /pb printBuffer
09F6                             ; --
09F6                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
09F6                PRINTBUFFER:      
09F6   CD 52 06               CALL   go   
09F9   00 00                  DW   NUL   ; NUL closure
09FB   FF 09                  DW   $+4   
09FD   BC 0A                  DW   args1A0L   
09FF   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A19                             ; printChars
0A19                             ; char* len --
0A19                PRINTCHARS:      
0A19   E1                     POP   hl   ; hl = count
0A1A   D1                     POP   de   ; de = char*
0A1B   CD 26 0A               CALL   printChars2   
0A1E   DD E9                  JP   (ix)   
0A20                PRINTCHARS1:      
0A20   1A                     LD   a,(de)   ; print char at char*
0A21   CD 85 00               CALL   putchar   
0A24   13                     INC   de   ; char*++
0A25   2B                     DEC   hl   ; count--
0A26                PRINTCHARS2:      
0A26   7D                     LD   a,l   ; count == 0?
0A27   B4                     OR   h   
0A28   C8                     RET   z   
0A29   18 F5                  JR   printChars1   ; if not loop
0A2B                             ; /pk print stack
0A2B                             ; --
0A2B                PRINTSTACK:      
0A2B                             ;     ld (vTemp1),bc
0A2B                             ;     call printStr
0A2B                             ;     .cstr "=> "
0A2B                             ;     ld hl,STACK
0A2B                             ;     sbc hl,sp
0A2B                             ;     srl h
0A2B                             ;     rr l
0A2B                             ;     ld bc,hl
0A2B                             ;     ld hl,STACK
0A2B                             ;     jr printStack2
0A2B                             ; printStack1:
0A2B                             ;     dec bc
0A2B                             ;     dec hl
0A2B                             ;     ld d,(hl)
0A2B                             ;     dec hl
0A2B                             ;     ld e,(hl)
0A2B                             ;     ex de,hl
0A2B                             ;     call prthex
0A2B                             ;     ex de,hl
0A2B                             ;     ld a," "
0A2B                             ;     call putchar
0A2B                             ; printStack2:
0A2B                             ;     ld a,c
0A2B                             ;     or b
0A2B                             ;     jr nz,printStack1
0A2B                             ;     call prompt
0A2B                             ;     ld bc,(vTemp1)
0A2B   DD E9                  JP   (ix)   
0A2D                SIZE:        
0A2D   E1                     POP   hl   
0A2E   2B                     DEC   hl   ; skip magic byte
0A2F   2B                     DEC   hl   ; skip type tag
0A30   2B                     DEC   hl   ; msb size
0A31   56                     LD   d,(hl)   
0A32   2B                     DEC   hl   ; lsb size
0A33   5E                     LD   e,(hl)   
0A34   D5                     PUSH   de   
0A35   DD E9                  JP   (ix)   
0A37                COMMAND_V:      
0A37   CD E1 0A               CALL   jumpTable   
0A3A   62                     DB   "b"   
0A3B   5B 0A                  DW   varBufPtr   
0A3D   68                     DB   "h"   
0A3E   64 0A                  DW   varHeapPtr   
0A40   74                     DB   "t"   
0A41   6D 0A                  DW   varTIBPtr   
0A43   42                     DB   "B"   
0A44   4C 0A                  DW   constBufStart   
0A46   54                     DB   "T"   
0A47   56 0A                  DW   constTIBStart   
0A49   00                     DB   NUL   
0A4A   25 08                  DW   error1   
0A4C                CONSTBUFSTART:      
0A4C   11 00 4B               LD   de,BUF   
0A4F   18 28                  JR   constant   
0A51                CONSTHEAPSTART:      
0A51   11 1E 4D               LD   de,HEAP   
0A54   18 23                  JR   constant   
0A56                CONSTTIBSTART:      
0A56   11 00 4A               LD   de,TIB   
0A59   18 1E                  JR   constant   
0A5B                VARBUFPTR:      
0A5B   ED 5B EC 4C            LD   de,(vBufPtr)   
0A5F   21 EC 4C               LD   hl,vBufPtr   
0A62   18 12                  JR   variable   
0A64                VARHEAPPTR:      
0A64   ED 5B F0 4C            LD   de,(vHeapPtr)   
0A68   21 F0 4C               LD   hl,vHeapPtr   
0A6B   18 09                  JR   variable   
0A6D                VARTIBPTR:      
0A6D   ED 5B EA 4C            LD   de,(vTIBPtr)   
0A71   21 EA 4C               LD   hl,vTIBPtr   
0A74   18 00                  JR   variable   
0A76                VARIABLE:      
0A76   22 F2 4C               LD   (vPointer),hl   
0A79                CONSTANT:      
0A79   D5                     PUSH   de   
0A7A   DD E9                  JP   (ix)   
0A7C                CHARS:       
0A7C   21 01 00               LD   hl,1   
0A7F                CHARS1:      
0A7F   22 E6 4C               LD   (vDataWidth),hl   
0A82   DD E9                  JP   (ix)   
0A84                DECIMAL:      
0A84   21 0A 00               LD   hl,10   
0A87                DECIMAL1:      
0A87   22 E8 4C               LD   (vNumBase),hl   
0A8A   DD E9                  JP   (ix)   
0A8C                HEXADECIMAL:      
0A8C   21 10 00               LD   hl,16   
0A8F   C3 87 0A               JP   decimal1   
0A92                             ; Z80 port input
0A92                             ; port -- value
0A92                INPUT:       
0A92   E1                     POP   hl   
0A93   59                     LD   e,c   ; save IP
0A94   4D                     LD   c,l   
0A95   ED 68                  IN   l,(c)   
0A97   26 00                  LD   h,0   
0A99   4B                     LD   c,e   ; restore IP
0A9A   E5                     PUSH   hl   
0A9B   DD E9                  JP   (ix)   
0A9D                KEY:         
0A9D   CD 81 00               CALL   getchar   
0AA0   26 00                  LD   h,0   
0AA2   6F                     LD   l,a   
0AA3   E5                     PUSH   hl   
0AA4   DD E9                  JP   (ix)   
0AA6                             ; Z80 port output
0AA6                             ; value port --
0AA6                OUTPUT:      
0AA6   E1                     POP   hl   
0AA7   59                     LD   e,c   ; save IP
0AA8   4D                     LD   c,l   
0AA9   E1                     POP   hl   
0AAA   ED 69                  OUT   (c),l   
0AAC   4B                     LD   c,e   ; restore IP
0AAD   DD E9                  JP   (ix)   
0AAF                NUMBERS:      
0AAF   21 02 00               LD   hl,2   
0AB2   C3 7F 0A               JP   chars1   
0AB5                             ; 
0AB5                             ; 
0AB5                             ; 
0AB5                             ; 
0AB5                FILTER:      
0AB5                MAP:         
0AB5                SCAN:        
0AB5   DD E9                  JP   (ix)   
0AB7                             ;*******************************************************************
0AB7                             ; reusable arglists
0AB7                             ;*******************************************************************
0AB7                ARGS0A1L_:      ; zero args one local
0AB7   01                     DB   1   ; num args + locals
0AB8   01                     DB   1   ; num locals
0AB9                ARGS0A1L:      
0AB9   61                     DB   "a"   
0ABA                ARGS1A0L_:      ; one arg zero locals
0ABA   01                     DB   1   ; num args + locals
0ABB   00                     DB   0   ; num locals
0ABC                ARGS1A0L:      
0ABC   61                     DB   "a"   
0ABD                ARGS1A1L_:      ; one arg one local
0ABD   02                     DB   2   ; num args + locals
0ABE   01                     DB   1   ; num locals
0ABF                ARGS1A1L:      
0ABF   61 62                  DB   "ab"   
0AC1                ARGS2A0L_:      ; two args zero locals
0AC1   02                     DB   2   ; num args + locals
0AC2   00                     DB   0   ; num locals
0AC3                ARGS2A0L:      
0AC3   61 62                  DB   "ab"   
0AC5                ARGS1A2L_:      ; one arg two locals
0AC5   03                     DB   3   ; num args + locals
0AC6   02                     DB   2   ; num locals
0AC7                ARGS1A2L:      
0AC7   61 62 63               DB   "abc"   
0ACA                             ;*******************************************************************
0ACA                             ; general routines
0ACA                             ;*******************************************************************
0ACA                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0ACA                FLUSHBUFFER:      
0ACA   F5                     PUSH   af   
0ACB   D5                     PUSH   de   
0ACC   E5                     PUSH   hl   
0ACD   2A EC 4C               LD   hl,(vBufPtr)   
0AD0   11 00 4B               LD   de,BUF   
0AD3   ED 53 EC 4C            LD   (vBufPtr),de   
0AD7   B7                     OR   a   
0AD8   ED 52                  SBC   hl,de   
0ADA   CD 26 0A               CALL   printChars2   
0ADD   E1                     POP   hl   
0ADE   D1                     POP   de   
0ADF   F1                     POP   af   
0AE0   C9                     RET      
0AE1                             ; followed by a table
0AE1                             ; db char
0AE1                             ; dw addr
0AE1                             ; the final item must have char == NUL
0AE1                JUMPTABLE:      
0AE1   03                     INC   bc   
0AE2   E1                     POP   hl   
0AE3                JUMPTABLE0:      
0AE3   AF                     XOR   a   
0AE4   BE                     CP   (hl)   
0AE5   28 09                  JR   z,jumpTable1   
0AE7   0A                     LD   a,(bc)   
0AE8   BE                     CP   (hl)   
0AE9   28 06                  JR   z,jumpTable2   
0AEB   23                     INC   hl   
0AEC   23                     INC   hl   
0AED   23                     INC   hl   
0AEE   18 F3                  JR   jumpTable0   
0AF0                JUMPTABLE1:      
0AF0   0B                     DEC   bc   
0AF1                JUMPTABLE2:      
0AF1   23                     INC   hl   
0AF2   5E                     LD   e,(hl)   
0AF3   23                     INC   hl   
0AF4   56                     LD   d,(hl)   
0AF5   EB                     EX   de,hl   
0AF6   E9                     JP   (hl)   
0AF7                PRTSTR0:      
0AF7   CD 85 00               CALL   putchar   
0AFA   23                     INC   hl   
0AFB                PRTSTR:      
0AFB   7E                     LD   a,(hl)   
0AFC   B7                     OR   a   
0AFD   20 F8                  JR   nz,prtstr0   
0AFF   C9                     RET      
0B00                             ; **************************************************************************
0B00                             ; calculate nesting value
0B00                             ; a is char to be tested,
0B00                             ; e is the nesting value (initially 0)
0B00                             ; e is increased by ( and [
0B00                             ; e is decreased by ) and ]
0B00                             ; e has its bit 7 toggled by `
0B00                             ; limited to 127 levels
0B00                             ; **************************************************************************
0B00                NESTING:      
0B00   FE 22                  CP   DQUOTE   ; quote char
0B02   28 06                  JR   z,nesting0   
0B04   FE 60                  CP   "`"   ; quote char
0B06   28 02                  JR   z,nesting0   
0B08   18 0A                  JR   nesting1   
0B0A                NESTING0:      
0B0A   CB 7B                  BIT   7,e   
0B0C   28 03                  JR   z,nesting1a   
0B0E   CB BB                  RES   7,e   
0B10   C9                     RET      
0B11                NESTING1A:      
0B11   CB FB                  SET   7,e   
0B13   C9                     RET      
0B14                NESTING1:      
0B14   CB 7B                  BIT   7,e   
0B16   C0                     RET   nz   
0B17   FE 7B                  CP   "{"   
0B19   28 08                  JR   z,nesting2   
0B1B   FE 5B                  CP   "["   
0B1D   28 04                  JR   z,nesting2   
0B1F   FE 28                  CP   "("   
0B21   20 02                  JR   nz,nesting3   
0B23                NESTING2:      
0B23   1C                     INC   e   
0B24   C9                     RET      
0B25                NESTING3:      
0B25   FE 7D                  CP   "}"   
0B27   28 07                  JR   z,nesting4   
0B29   FE 5D                  CP   "]"   
0B2B   28 03                  JR   z,nesting4   
0B2D   FE 29                  CP   ")"   
0B2F   C0                     RET   nz   
0B30                NESTING4:      
0B30   1D                     DEC   e   
0B31   C9                     RET      
0B32                PROMPT:      
0B32   CD 42 0B               CALL   printStr   
0B35   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B3A   C9                     RET      
0B3B                CRLF:        
0B3B   CD 42 0B               CALL   printStr   
0B3E   0D 0A 00               .CSTR   "\r\n"   
0B41   C9                     RET      
0B42                             ; prints a null teminated string
0B42                             ; the string should be immediately following the call
0B42                PRINTSTR:      
0B42   E3                     EX   (sp),hl   ; swap			
0B43   CD FB 0A               CALL   prtstr   
0B46   23                     INC   hl   ; inc past NUL
0B47   E3                     EX   (sp),hl   ; put it back	
0B48   C9                     RET      
0B49                TITLESTR:      
0B49   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.0\r\n",0,0,0   
0B5D                INIT:        
0B5D   21 49 0B               LD   hl,titleStr   
0B60   11 0A 4D               LD   de,warmBuf   
0B63   06 14                  LD   b,20   
0B65                INIT1:       
0B65   1A                     LD   a,(de)   
0B66   BE                     CP   (hl)   
0B67   20 17                  JR   nz,coldBoot0   
0B69   13                     INC   de   
0B6A   23                     INC   hl   
0B6B   10 F8                  DJNZ   init1   
0B6D                WARMINIT:      
0B6D   ED 4B F6 4C            LD   bc,(vSavedIP)   ; restore IP
0B71   ED 7B F8 4C            LD   sp,(vSavedSP)   ; restore SP
0B75   DD 2A FA 4C            LD   ix,(vSavedNext)   ; restore Next
0B79   FD 2A FC 4C            LD   iy,(vSavedBP)   ; restore BP
0B7D   C3 B7 0B               JP   start1   
0B80                COLDBOOT0:      
0B80   21 49 0B               LD   hl,titleStr   ; copy titleStr to warmBuf
0B83   11 0A 4D               LD   de,warmBuf   
0B86   06 14                  LD   b,20   
0B88   ED B0                  LDIR      
0B8A                COLDINIT:      
0B8A   21 80 01               LD   hl,isysVars   
0B8D   11 E6 4C               LD   de,sysVars   
0B90   01 10 00               LD   bc,8 * 2   
0B93   ED B0                  LDIR      
0B95   21 00 4C               LD   hl,vars   ; 52 vars LO HI
0B98   06 34                  LD   b,26*2   
0B9A   AF                     XOR   a   
0B9B                COLDBOOT1:      
0B9B   77                     LD   (hl),a   
0B9C   23                     INC   hl   
0B9D   10 FC                  DJNZ   coldBoot1   
0B9F   DD 2A EE 4C            LD   ix,(vNext)   
0BA3   FD 21 00 4A            LD   iy,STACK   
0BA7   C9                     RET      
0BA8                COLDSTART:      
0BA8   31 00 4A               LD   sp,STACK   
0BAB   CD 80 0B               CALL   coldBoot0   
0BAE   C3 B7 0B               JP   start1   
0BB1                START:       
0BB1   31 00 4A               LD   sp,STACK   ; start Monty
0BB4   CD 5D 0B               CALL   init   ; setups
0BB7                START1:      
0BB7   21 0A 4D               LD   hl,warmBuf   
0BBA   CD FB 0A               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0BBD                INTERPRET:      
0BBD   CD CA 0A               CALL   flushBuffer   
0BC0   CD 32 0B               CALL   prompt   
0BC3   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BC6   21 00 4A               LD   hl,TIB   
0BC9   22 EA 4C               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BCC                INTERPRET2:      ; calculate nesting
0BCC   1E 00                  LD   e,0   ; initilize nesting value
0BCE   C5                     PUSH   bc   ; save offset into TIB,
0BCF                             ; bc is also the count of chars in TIB
0BCF   21 00 4A               LD   hl,TIB   ; hl is start of TIB
0BD2   18 0B                  JR   interpret4   
0BD4                INTERPRET3:      
0BD4   3E 33                  LD   a,"3"   
0BD6   CD 85 00               CALL   putchar   
0BD9   7E                     LD   a,(hl)   ; a = char in TIB
0BDA   23                     INC   hl   ; inc pointer into TIB
0BDB   0B                     DEC   bc   ; dec count of chars in TIB
0BDC   CD 00 0B               CALL   nesting   ; update nesting value
0BDF                INTERPRET4:      
0BDF   79                     LD   a,c   ; is count zero?
0BE0   B0                     OR   b   
0BE1   20 F1                  JR   nz,interpret3   ; if not loop
0BE3   C1                     POP   bc   ; restore offset into TIB
0BE4                INTERPRET5:      
0BE4   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BE7   FE 20                  CP   $20   ; compare to space
0BE9   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BEB   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BED                             ; ???? NEEDED?
0BED   28 3B                  JR   z,interpret8   
0BEF   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BF1   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BF3   FE 05                  CP   CTRL_E   
0BF5   CA 88 0C               JP   z,edit_   
0BF8   FE 08                  CP   CTRL_H   
0BFA   CA 78 0C               JP   z,backSpace_   
0BFD   FE 0A                  CP   CTRL_J   
0BFF   CA A0 0C               JP   z,reEdit_   
0C02   FE 13                  CP   CTRL_S   
0C04   CA A3 0C               JP   z,printStack_   
0C07                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C07                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C07                             ; DB     lsb(list_)       ; FF  ^L 12
0C07                             ; DB     lsb(printStack_) ; DLE ^P 16
0C07                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C07                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C07                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C07                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C07                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C07                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C07                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C07                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C07                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C07                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C07                INTERPRET5A:      
0C07                             ; ld (vTIBPtr),bc
0C07                             ; ld bc,(vTIBPtr)
0C07   18 C3                  JR   interpret2   
0C09                INTERPRET6:      
0C09   21 00 4A               LD   hl,TIB   
0C0C   09                     ADD   hl,bc   
0C0D   77                     LD   (hl),a   ; store the character in textbuf
0C0E   03                     INC   bc   
0C0F   CD 85 00               CALL   putchar   ; echo character to screen
0C12   CD 00 0B               CALL   nesting   
0C15   18 CD                  JR   interpret5   ; wait for next character
0C17                INTERPRET7:      
0C17   21 00 4A               LD   hl,TIB   
0C1A   09                     ADD   hl,bc   
0C1B   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C1D   23                     INC   hl   
0C1E   36 0A                  LD   (hl),"\n"   
0C20   23                     INC   hl   
0C21   03                     INC   bc   
0C22   03                     INC   bc   
0C23   CD 3B 0B               CALL   crlf   ; echo character to screen
0C26   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C27   B7                     OR   a   
0C28   20 BA                  JR   nz,interpret5   
0C2A                INTERPRET8:      
0C2A   21 00 4A               LD   hl,TIB   
0C2D   09                     ADD   hl,bc   
0C2E   22 EA 4C               LD   (vTIBPtr),hl   
0C31   01 00 4A               LD   bc,TIB   
0C34   ED 43 F6 4C            LD   (vSavedIP),bc   ; save IP
0C38   ED 73 F8 4C            LD   (vSavedSP),sp   ; save SP
0C3C   DD 22 FA 4C            LD   (vSavedNext),ix   ; save Next
0C40   FD 22 FC 4C            LD   (vSavedBP),iy   ; save BP
0C44   0B                     DEC   bc   
0C45                NEXT:        
0C45   03                     INC   bc   ; Increment the IP
0C46   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C47   FE 20                  CP   " "   ; whitespace?
0C49   28 FA                  JR   z,next   ; space? ignore
0C4B   38 09                  JR   c,next1   
0C4D   D6 20                  SUB   " "   
0C4F   6F                     LD   l,a   ; index into table
0C50   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C52   6E                     LD   l,(hl)   ; get low jump address
0C53   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C55   E9                     JP   (hl)   ; Jump to routine
0C56                NEXT1:       
0C56   FE 00                  CP   NUL   ; end of input string?
0C58   28 03                  JR   z,exit   
0C5A   C3 BD 0B               JP   interpret   ; no, other whitespace, macros?
0C5D                EXIT:        
0C5D   03                     INC   bc   
0C5E   60 69                  LD   hl,bc   
0C60   E9                     JP   (hl)   
0C61                RUN:         
0C61   C1                     POP   bc   
0C62   0B                     DEC   bc   
0C63   DD E9                  JP   (ix)   
0C65                ERROR:       
0C65   CD 61 0C               CALL   run   
0C68   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C75   C3 BD 0B               JP   interpret   
0C78                BACKSPACE_:      
0C78   79                     LD   a,c   
0C79   B0                     OR   b   
0C7A   CA CC 0B               JP   z,interpret2   
0C7D   0B                     DEC   bc   
0C7E   CD 42 0B               CALL   printStr   
0C81   08 20 08 00            .CSTR   "\b \b"   
0C85   C3 CC 0B               JP   interpret2   
0C88                             ; edit
0C88                EDIT_:       
0C88   CD 61 0C               CALL   run   
0C8B   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C9D   C3 BD 0B               JP   interpret   
0CA0                REEDIT_:      
0CA0   C3 BD 0B               JP   interpret   
0CA3                PRINTSTACK_:      
0CA3   CD 61 0C               CALL   run   
0CA6   2F 70 6B 00            .CSTR   "/pk"   
0CAA   C3 BD 0B               JP   interpret   
0CAD                             ; editDef:
0CAD                             ;     pop hl                      ; pop ret address
0CAD                             ;     ex (sp),hl                  ; swap with TOS
0CAD                             ;     push hl                     ; dup TOS
0CAD                             ;     ld a,l                      ; a = ident
0CAD                             ;     ld de,TIB                   ; de = start of TIB
0CAD                             ;     ld (vTIBPtr),de             ; update TIB*
0CAD                             ;     push ix                     ; save NEXT
0CAD                             ;     ld ix,editDef0              ; NEXT = editDef0
0CAD                             ;     jp lookupRef                ; convert letter into address
0CAD                             ; editDef0:
0CAD                             ;     ld e,(hl)                   ; de = (hl++)
0CAD                             ;     inc hl
0CAD                             ;     ld d,(hl)
0CAD                             ;     ld a,d                      ; de == 0 ?
0CAD                             ;     or e
0CAD                             ;     jr z,editDef4
0CAD                             ;     ld ix,editDef3              ; NEXT = editDef3
0CAD                             ;     ex de,hl
0CAD                             ;     ld a,(hl)
0CAD                             ;     cp "{"
0CAD                             ;     jr nz,editDef1
0CAD                             ;     jp editBlock0               ; convert letter into address
0CAD                             ; editDef1:
0CAD                             ;     cp "("
0CAD                             ;     jr nz,editDef2
0CAD                             ;     jp editBlock0               ; convert letter into address
0CAD                             ; editDef2:
0CAD                             ;     jp editLambda
0CAD                             ; editDef3:
0CAD                             ;     ld a," "                    ; write assign
0CAD                             ;     call writeChar
0CAD                             ;     pop hl                      ; a = ident
0CAD                             ;     ld a,l
0CAD                             ;     call writeChar
0CAD                             ;     ld a,"="                    ; write assign
0CAD                             ;     call writeChar
0CAD                             ;     ld ix,editDef4              ; NEXT = editDef4
0CAD                             ;     jp printTIB
0CAD                             ; editDef4:
0CAD                             ;     pop ix                      ; restore NEXT
0CAD                             ;     jp (ix)
0CAD                             ; writeChar:
0CAD                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CAD                             ;     ld (de),a                   ; write ident
0CAD                             ;     inc de
0CAD                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CAD                             ;     ret
0CAD                             ; ; printTIB
0CAD                             ; printTIB:
0CAD                             ;     ld hl,(vTIBPtr)
0CAD                             ;     ld de,TIB
0CAD                             ;     or a
0CAD                             ;     sbc hl,de
0CAD                             ;     jp printTIB2
0CAD                             ; printTIB1:
0CAD                             ;     ld a,(de)
0CAD                             ;     call putchar
0CAD                             ; printTIB2:
0CAD                             ;     ld a,l
0CAD                             ;     or h
0CAD                             ;     jr nz,printTIB1
0CAD                             ;     jp (ix)
0CAD                             ; editBlock:
0CAD                             ;     pop hl                      ; hl = block*
0CAD                             ; editBlock0:
0CAD                             ;     push ix                     ; save next
0CAD                             ;     push hl                     ; push block*
0CAD                             ;     push hl                     ; push block*
0CAD                             ;     ld ix,(editBlock2)
0CAD                             ;     jp blockLength
0CAD                             ; editBlock1:
0CAD                             ;     pop hl                      ; bc = length, (sp) = IP
0CAD                             ;     pop de                      ; de = block*
0CAD                             ;     ld a,l
0CAD                             ;     or h
0CAD                             ;     jr z,editBlock2
0CAD                             ;     push bc
0CAD                             ;     ld bc,hl
0CAD                             ;     ex de,hl                    ; hl = block*
0CAD                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CAD                             ;     ldir                        ; copy block to TIB
0CAD                             ;     ld (vTIBPtr),de              ; save TIB*
0CAD                             ;     pop bc
0CAD                             ; editBlock2:
0CAD                             ;     pop ix                      ; restore next
0CAD                             ;     jp (ix)
0CAD                             ; editLambda:
0CAD                             ;     jp (ix)
0CAD                             ; editArray:
0CAD                             ;     jp (ix)
0CAD                             ; editArglist:
0CAD                             ;     jp (ix)
0CAD                             ; ; blockLength
0CAD                             ; ; addr1 -- length
0CAD                             ; blockLength:
0CAD                             ;     pop hl                      ; block*
0CAD                             ;     push hl                     ; save block*
0CAD                             ;     inc hl                      ; skip first char
0CAD                             ;     ld d,1                      ; increase nesting
0CAD                             ; blockLength1:                   ; Skip to end of definition
0CAD                             ;     ld a,(hl)                   ; Get the next character
0CAD                             ;     inc hl                      ; Point to next character
0CAD                             ;     cp " " + 1                  ; ignore whitespace
0CAD                             ;     jr c,blockLength1
0CAD                             ;     cp ")"
0CAD                             ;     jr z,blockLength4
0CAD                             ;     cp "}"
0CAD                             ;     jr z,blockLength4
0CAD                             ;     cp "]"
0CAD                             ;     jr z,blockLength4
0CAD                             ;     cp "("
0CAD                             ;     jr z,blockLength2
0CAD                             ;     cp "{"
0CAD                             ;     jr z,blockLength2
0CAD                             ;     cp "["
0CAD                             ;     jr z,blockLength2
0CAD                             ;     cp "'"
0CAD                             ;     jr z,blockLength3
0CAD                             ;     cp "`"
0CAD                             ;     jr z,blockLength3
0CAD                             ;     cp DQUOTE
0CAD                             ;     jr z,blockLength3
0CAD                             ;     jr blockLength1
0CAD                             ; blockLength2:
0CAD                             ;     inc d
0CAD                             ;     jr blockLength1
0CAD                             ; blockLength4:
0CAD                             ;     dec d
0CAD                             ;     jr nz, blockLength1         ; get the next element
0CAD                             ; blockLength3:
0CAD                             ;     ld a,$80
0CAD                             ;     xor d
0CAD                             ;     ld d,a
0CAD                             ;     jr nz, blockLength1
0CAD                             ;     pop hl                      ; hl = block*
0CAD                             ;     or a
0CAD                             ;     sbc hl,de
0CAD                             ;     push hl
0CAD                             ;     jp (ix)
0CAD                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CAD                             ; \a start of stack \#3 depth \b base \$ prompt
0CAD                             ; DW dStack               ; a vS0 start of datastack			
0CAD                             ; DW FALSE                ; b vBase16
0CAD                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CAD                             ; DW 0                    ; d
0CAD                             ; DW 65                   ; e vLastDef "A" last command u defined
0CAD                             ; DW 0                    ; f
0CAD                             ; DW page6                ; g 256 bytes limits
0CAD                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CAD                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                          ;*Macro unroll:  test "()^", 0
0D00   31 00 4A               LD   SP,STACK   
0D03   CD 8A 0B               CALL   coldInit   
0D06   CD 69 48               CALL   execStr   
0D09   28 29 5E 00            .CSTR   "()^"   
0D0D   CD CA 0A               CALL   flushBuffer   
0D10                          ;*Macro unroll:  expect "()^",0
0D10   E1                     POP   HL   
0D11   E5                     PUSH   HL   
0D12   11 00 00               LD   DE,0   
0D15   B7                     OR   A   
0D16   ED 52                  SBC   HL,DE   
0D18   7D                     LD   A,L   
0D19   B4                     OR   H   
0D1A   CA 78 0D               JP   Z,expectM_0_2654S45   
0D1D   CD 42 0B               CALL   printStr   
0D20   43 6F 64 65 3A 20 28 29 5E 00 .CSTR   "Code: ","()^"   
0D2A   CD 42 0B               CALL   printStr   
0D2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D3C   21 00 00               LD   hl,0   
0D3F   E5                     PUSH   hl   
0D40   E5                     PUSH   hl   
0D41   CD 61 0C               CALL   run   
0D44   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0D4C   CD CA 0A               CALL   flushBuffer   
0D4F   CD 42 0B               CALL   printStr   
0D52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D5F   E1                     POP   hl   
0D60   E5                     PUSH   hl   
0D61   E5                     PUSH   hl   
0D62   CD 61 0C               CALL   run   
0D65   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0D74   CD CA 0A               CALL   flushBuffer   
0D77   76                     HALT      
0D78                EXPECTM_0_2654S45:      
0D78   E1                     POP   HL   
0D79   CD 42 0B               CALL   printStr   
0D7C   44 6F 6E 65 21 00      .CSTR   "Done!"   
0D82   76                     HALT      
0D83                             ; 
0D83                          ;*Macro unroll:  test "/f", false
0D83   31 00 4A               LD   SP,STACK   
0D86   CD 8A 0B               CALL   coldInit   
0D89   CD 69 48               CALL   execStr   
0D8C   2F 66 00               .CSTR   "/f"   
0D8F   CD CA 0A               CALL   flushBuffer   
0D92                          ;*Macro unroll:  expect "/f",false
0D92   E1                     POP   HL   
0D93   E5                     PUSH   HL   
0D94   11 00 00               LD   DE,false   
0D97   B7                     OR   A   
0D98   ED 52                  SBC   HL,DE   
0D9A   7D                     LD   A,L   
0D9B   B4                     OR   H   
0D9C   CA F9 0D               JP   Z,expectM_0_2659S45   
0D9F   CD 42 0B               CALL   printStr   
0DA2   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0DAB   CD 42 0B               CALL   printStr   
0DAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DBD   21 00 00               LD   hl,false   
0DC0   E5                     PUSH   hl   
0DC1   E5                     PUSH   hl   
0DC2   CD 61 0C               CALL   run   
0DC5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0DCD   CD CA 0A               CALL   flushBuffer   
0DD0   CD 42 0B               CALL   printStr   
0DD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DE0   E1                     POP   hl   
0DE1   E5                     PUSH   hl   
0DE2   E5                     PUSH   hl   
0DE3   CD 61 0C               CALL   run   
0DE6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0DF5   CD CA 0A               CALL   flushBuffer   
0DF8   76                     HALT      
0DF9                EXPECTM_0_2659S45:      
0DF9   E1                     POP   HL   
0DFA                          ;*Macro unroll:  test "/t", true
0DFA   31 00 4A               LD   SP,STACK   
0DFD   CD 8A 0B               CALL   coldInit   
0E00   CD 69 48               CALL   execStr   
0E03   2F 74 00               .CSTR   "/t"   
0E06   CD CA 0A               CALL   flushBuffer   
0E09                          ;*Macro unroll:  expect "/t",true
0E09   E1                     POP   HL   
0E0A   E5                     PUSH   HL   
0E0B   11 FF FF               LD   DE,true   
0E0E   B7                     OR   A   
0E0F   ED 52                  SBC   HL,DE   
0E11   7D                     LD   A,L   
0E12   B4                     OR   H   
0E13   CA 70 0E               JP   Z,expectM_0_2660S45   
0E16   CD 42 0B               CALL   printStr   
0E19   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0E22   CD 42 0B               CALL   printStr   
0E25   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E34   21 FF FF               LD   hl,true   
0E37   E5                     PUSH   hl   
0E38   E5                     PUSH   hl   
0E39   CD 61 0C               CALL   run   
0E3C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E44   CD CA 0A               CALL   flushBuffer   
0E47   CD 42 0B               CALL   printStr   
0E4A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E57   E1                     POP   hl   
0E58   E5                     PUSH   hl   
0E59   E5                     PUSH   hl   
0E5A   CD 61 0C               CALL   run   
0E5D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E6C   CD CA 0A               CALL   flushBuffer   
0E6F   76                     HALT      
0E70                EXPECTM_0_2660S45:      
0E70   E1                     POP   HL   
0E71                          ;*Macro unroll:  test "1", 1
0E71   31 00 4A               LD   SP,STACK   
0E74   CD 8A 0B               CALL   coldInit   
0E77   CD 69 48               CALL   execStr   
0E7A   31 00                  .CSTR   "1"   
0E7C   CD CA 0A               CALL   flushBuffer   
0E7F                          ;*Macro unroll:  expect "1",1
0E7F   E1                     POP   HL   
0E80   E5                     PUSH   HL   
0E81   11 01 00               LD   DE,1   
0E84   B7                     OR   A   
0E85   ED 52                  SBC   HL,DE   
0E87   7D                     LD   A,L   
0E88   B4                     OR   H   
0E89   CA E5 0E               JP   Z,expectM_0_2661S45   
0E8C   CD 42 0B               CALL   printStr   
0E8F   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0E97   CD 42 0B               CALL   printStr   
0E9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EA9   21 01 00               LD   hl,1   
0EAC   E5                     PUSH   hl   
0EAD   E5                     PUSH   hl   
0EAE   CD 61 0C               CALL   run   
0EB1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0EB9   CD CA 0A               CALL   flushBuffer   
0EBC   CD 42 0B               CALL   printStr   
0EBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0ECC   E1                     POP   hl   
0ECD   E5                     PUSH   hl   
0ECE   E5                     PUSH   hl   
0ECF   CD 61 0C               CALL   run   
0ED2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0EE1   CD CA 0A               CALL   flushBuffer   
0EE4   76                     HALT      
0EE5                EXPECTM_0_2661S45:      
0EE5   E1                     POP   HL   
0EE6                          ;*Macro unroll:  test "2", 2
0EE6   31 00 4A               LD   SP,STACK   
0EE9   CD 8A 0B               CALL   coldInit   
0EEC   CD 69 48               CALL   execStr   
0EEF   32 00                  .CSTR   "2"   
0EF1   CD CA 0A               CALL   flushBuffer   
0EF4                          ;*Macro unroll:  expect "2",2
0EF4   E1                     POP   HL   
0EF5   E5                     PUSH   HL   
0EF6   11 02 00               LD   DE,2   
0EF9   B7                     OR   A   
0EFA   ED 52                  SBC   HL,DE   
0EFC   7D                     LD   A,L   
0EFD   B4                     OR   H   
0EFE   CA 5A 0F               JP   Z,expectM_0_2662S45   
0F01   CD 42 0B               CALL   printStr   
0F04   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0F0C   CD 42 0B               CALL   printStr   
0F0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F1E   21 02 00               LD   hl,2   
0F21   E5                     PUSH   hl   
0F22   E5                     PUSH   hl   
0F23   CD 61 0C               CALL   run   
0F26   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F2E   CD CA 0A               CALL   flushBuffer   
0F31   CD 42 0B               CALL   printStr   
0F34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F41   E1                     POP   hl   
0F42   E5                     PUSH   hl   
0F43   E5                     PUSH   hl   
0F44   CD 61 0C               CALL   run   
0F47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F56   CD CA 0A               CALL   flushBuffer   
0F59   76                     HALT      
0F5A                EXPECTM_0_2662S45:      
0F5A   E1                     POP   HL   
0F5B                          ;*Macro unroll:  test "1", 1
0F5B   31 00 4A               LD   SP,STACK   
0F5E   CD 8A 0B               CALL   coldInit   
0F61   CD 69 48               CALL   execStr   
0F64   31 00                  .CSTR   "1"   
0F66   CD CA 0A               CALL   flushBuffer   
0F69                          ;*Macro unroll:  expect "1",1
0F69   E1                     POP   HL   
0F6A   E5                     PUSH   HL   
0F6B   11 01 00               LD   DE,1   
0F6E   B7                     OR   A   
0F6F   ED 52                  SBC   HL,DE   
0F71   7D                     LD   A,L   
0F72   B4                     OR   H   
0F73   CA CF 0F               JP   Z,expectM_0_2663S45   
0F76   CD 42 0B               CALL   printStr   
0F79   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0F81   CD 42 0B               CALL   printStr   
0F84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F93   21 01 00               LD   hl,1   
0F96   E5                     PUSH   hl   
0F97   E5                     PUSH   hl   
0F98   CD 61 0C               CALL   run   
0F9B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FA3   CD CA 0A               CALL   flushBuffer   
0FA6   CD 42 0B               CALL   printStr   
0FA9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FB6   E1                     POP   hl   
0FB7   E5                     PUSH   hl   
0FB8   E5                     PUSH   hl   
0FB9   CD 61 0C               CALL   run   
0FBC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FCB   CD CA 0A               CALL   flushBuffer   
0FCE   76                     HALT      
0FCF                EXPECTM_0_2663S45:      
0FCF   E1                     POP   HL   
0FD0                          ;*Macro unroll:  test "0", 0
0FD0   31 00 4A               LD   SP,STACK   
0FD3   CD 8A 0B               CALL   coldInit   
0FD6   CD 69 48               CALL   execStr   
0FD9   30 00                  .CSTR   "0"   
0FDB   CD CA 0A               CALL   flushBuffer   
0FDE                          ;*Macro unroll:  expect "0",0
0FDE   E1                     POP   HL   
0FDF   E5                     PUSH   HL   
0FE0   11 00 00               LD   DE,0   
0FE3   B7                     OR   A   
0FE4   ED 52                  SBC   HL,DE   
0FE6   7D                     LD   A,L   
0FE7   B4                     OR   H   
0FE8   CA 44 10               JP   Z,expectM_0_2664S45   
0FEB   CD 42 0B               CALL   printStr   
0FEE   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0FF6   CD 42 0B               CALL   printStr   
0FF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1008   21 00 00               LD   hl,0   
100B   E5                     PUSH   hl   
100C   E5                     PUSH   hl   
100D   CD 61 0C               CALL   run   
1010   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1018   CD CA 0A               CALL   flushBuffer   
101B   CD 42 0B               CALL   printStr   
101E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
102B   E1                     POP   hl   
102C   E5                     PUSH   hl   
102D   E5                     PUSH   hl   
102E   CD 61 0C               CALL   run   
1031   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1040   CD CA 0A               CALL   flushBuffer   
1043   76                     HALT      
1044                EXPECTM_0_2664S45:      
1044   E1                     POP   HL   
1045                          ;*Macro unroll:  test "10", 10
1045   31 00 4A               LD   SP,STACK   
1048   CD 8A 0B               CALL   coldInit   
104B   CD 69 48               CALL   execStr   
104E   31 30 00               .CSTR   "10"   
1051   CD CA 0A               CALL   flushBuffer   
1054                          ;*Macro unroll:  expect "10",10
1054   E1                     POP   HL   
1055   E5                     PUSH   HL   
1056   11 0A 00               LD   DE,10   
1059   B7                     OR   A   
105A   ED 52                  SBC   HL,DE   
105C   7D                     LD   A,L   
105D   B4                     OR   H   
105E   CA BB 10               JP   Z,expectM_0_2665S45   
1061   CD 42 0B               CALL   printStr   
1064   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
106D   CD 42 0B               CALL   printStr   
1070   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
107F   21 0A 00               LD   hl,10   
1082   E5                     PUSH   hl   
1083   E5                     PUSH   hl   
1084   CD 61 0C               CALL   run   
1087   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
108F   CD CA 0A               CALL   flushBuffer   
1092   CD 42 0B               CALL   printStr   
1095   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10A2   E1                     POP   hl   
10A3   E5                     PUSH   hl   
10A4   E5                     PUSH   hl   
10A5   CD 61 0C               CALL   run   
10A8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10B7   CD CA 0A               CALL   flushBuffer   
10BA   76                     HALT      
10BB                EXPECTM_0_2665S45:      
10BB   E1                     POP   HL   
10BC                          ;*Macro unroll:  test "123", 123
10BC   31 00 4A               LD   SP,STACK   
10BF   CD 8A 0B               CALL   coldInit   
10C2   CD 69 48               CALL   execStr   
10C5   31 32 33 00            .CSTR   "123"   
10C9   CD CA 0A               CALL   flushBuffer   
10CC                          ;*Macro unroll:  expect "123",123
10CC   E1                     POP   HL   
10CD   E5                     PUSH   HL   
10CE   11 7B 00               LD   DE,123   
10D1   B7                     OR   A   
10D2   ED 52                  SBC   HL,DE   
10D4   7D                     LD   A,L   
10D5   B4                     OR   H   
10D6   CA 34 11               JP   Z,expectM_0_2666S45   
10D9   CD 42 0B               CALL   printStr   
10DC   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
10E6   CD 42 0B               CALL   printStr   
10E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10F8   21 7B 00               LD   hl,123   
10FB   E5                     PUSH   hl   
10FC   E5                     PUSH   hl   
10FD   CD 61 0C               CALL   run   
1100   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1108   CD CA 0A               CALL   flushBuffer   
110B   CD 42 0B               CALL   printStr   
110E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
111B   E1                     POP   hl   
111C   E5                     PUSH   hl   
111D   E5                     PUSH   hl   
111E   CD 61 0C               CALL   run   
1121   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1130   CD CA 0A               CALL   flushBuffer   
1133   76                     HALT      
1134                EXPECTM_0_2666S45:      
1134   E1                     POP   HL   
1135                          ;*Macro unroll:  test "-1",-1
1135   31 00 4A               LD   SP,STACK   
1138   CD 8A 0B               CALL   coldInit   
113B   CD 69 48               CALL   execStr   
113E   2D 31 00               .CSTR   "-1"   
1141   CD CA 0A               CALL   flushBuffer   
1144                          ;*Macro unroll:  expect "-1",-1
1144   E1                     POP   HL   
1145   E5                     PUSH   HL   
1146   11 FF FF               LD   DE,-1   
1149   B7                     OR   A   
114A   ED 52                  SBC   HL,DE   
114C   7D                     LD   A,L   
114D   B4                     OR   H   
114E   CA AB 11               JP   Z,expectM_0_2667S45   
1151   CD 42 0B               CALL   printStr   
1154   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
115D   CD 42 0B               CALL   printStr   
1160   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
116F   21 FF FF               LD   hl,-1   
1172   E5                     PUSH   hl   
1173   E5                     PUSH   hl   
1174   CD 61 0C               CALL   run   
1177   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
117F   CD CA 0A               CALL   flushBuffer   
1182   CD 42 0B               CALL   printStr   
1185   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1192   E1                     POP   hl   
1193   E5                     PUSH   hl   
1194   E5                     PUSH   hl   
1195   CD 61 0C               CALL   run   
1198   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11A7   CD CA 0A               CALL   flushBuffer   
11AA   76                     HALT      
11AB                EXPECTM_0_2667S45:      
11AB   E1                     POP   HL   
11AC                          ;*Macro unroll:  test "''", 0
11AC   31 00 4A               LD   SP,STACK   
11AF   CD 8A 0B               CALL   coldInit   
11B2   CD 69 48               CALL   execStr   
11B5   27 27 00               .CSTR   "''"   
11B8   CD CA 0A               CALL   flushBuffer   
11BB                          ;*Macro unroll:  expect "''",0
11BB   E1                     POP   HL   
11BC   E5                     PUSH   HL   
11BD   11 00 00               LD   DE,0   
11C0   B7                     OR   A   
11C1   ED 52                  SBC   HL,DE   
11C3   7D                     LD   A,L   
11C4   B4                     OR   H   
11C5   CA 22 12               JP   Z,expectM_0_2668S45   
11C8   CD 42 0B               CALL   printStr   
11CB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
11D4   CD 42 0B               CALL   printStr   
11D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11E6   21 00 00               LD   hl,0   
11E9   E5                     PUSH   hl   
11EA   E5                     PUSH   hl   
11EB   CD 61 0C               CALL   run   
11EE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11F6   CD CA 0A               CALL   flushBuffer   
11F9   CD 42 0B               CALL   printStr   
11FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1209   E1                     POP   hl   
120A   E5                     PUSH   hl   
120B   E5                     PUSH   hl   
120C   CD 61 0C               CALL   run   
120F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
121E   CD CA 0A               CALL   flushBuffer   
1221   76                     HALT      
1222                EXPECTM_0_2668S45:      
1222   E1                     POP   HL   
1223                          ;*Macro unroll:  test "'a'", $61
1223   31 00 4A               LD   SP,STACK   
1226   CD 8A 0B               CALL   coldInit   
1229   CD 69 48               CALL   execStr   
122C   27 61 27 00            .CSTR   "'a'"   
1230   CD CA 0A               CALL   flushBuffer   
1233                          ;*Macro unroll:  expect "'a'",$61
1233   E1                     POP   HL   
1234   E5                     PUSH   HL   
1235   11 61 00               LD   DE,$61   
1238   B7                     OR   A   
1239   ED 52                  SBC   HL,DE   
123B   7D                     LD   A,L   
123C   B4                     OR   H   
123D   CA 9B 12               JP   Z,expectM_0_2669S45   
1240   CD 42 0B               CALL   printStr   
1243   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
124D   CD 42 0B               CALL   printStr   
1250   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
125F   21 61 00               LD   hl,$61   
1262   E5                     PUSH   hl   
1263   E5                     PUSH   hl   
1264   CD 61 0C               CALL   run   
1267   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
126F   CD CA 0A               CALL   flushBuffer   
1272   CD 42 0B               CALL   printStr   
1275   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1282   E1                     POP   hl   
1283   E5                     PUSH   hl   
1284   E5                     PUSH   hl   
1285   CD 61 0C               CALL   run   
1288   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1297   CD CA 0A               CALL   flushBuffer   
129A   76                     HALT      
129B                EXPECTM_0_2669S45:      
129B   E1                     POP   HL   
129C                          ;*Macro unroll:  test "'\\''", $27
129C   31 00 4A               LD   SP,STACK   
129F   CD 8A 0B               CALL   coldInit   
12A2   CD 69 48               CALL   execStr   
12A5   27 5C 27 27 00         .CSTR   "'\\''"   
12AA   CD CA 0A               CALL   flushBuffer   
12AD                          ;*Macro unroll:  expect "'\\''",$27
12AD   E1                     POP   HL   
12AE   E5                     PUSH   HL   
12AF   11 27 00               LD   DE,$27   
12B2   B7                     OR   A   
12B3   ED 52                  SBC   HL,DE   
12B5   7D                     LD   A,L   
12B6   B4                     OR   H   
12B7   CA 16 13               JP   Z,expectM_0_2670S45   
12BA   CD 42 0B               CALL   printStr   
12BD   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
12C8   CD 42 0B               CALL   printStr   
12CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12DA   21 27 00               LD   hl,$27   
12DD   E5                     PUSH   hl   
12DE   E5                     PUSH   hl   
12DF   CD 61 0C               CALL   run   
12E2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12EA   CD CA 0A               CALL   flushBuffer   
12ED   CD 42 0B               CALL   printStr   
12F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12FD   E1                     POP   hl   
12FE   E5                     PUSH   hl   
12FF   E5                     PUSH   hl   
1300   CD 61 0C               CALL   run   
1303   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1312   CD CA 0A               CALL   flushBuffer   
1315   76                     HALT      
1316                EXPECTM_0_2670S45:      
1316   E1                     POP   HL   
1317                          ;*Macro unroll:  test "#10", $10
1317   31 00 4A               LD   SP,STACK   
131A   CD 8A 0B               CALL   coldInit   
131D   CD 69 48               CALL   execStr   
1320   23 31 30 00            .CSTR   "#10"   
1324   CD CA 0A               CALL   flushBuffer   
1327                          ;*Macro unroll:  expect "#10",$10
1327   E1                     POP   HL   
1328   E5                     PUSH   HL   
1329   11 10 00               LD   DE,$10   
132C   B7                     OR   A   
132D   ED 52                  SBC   HL,DE   
132F   7D                     LD   A,L   
1330   B4                     OR   H   
1331   CA 8F 13               JP   Z,expectM_0_2671S45   
1334   CD 42 0B               CALL   printStr   
1337   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
1341   CD 42 0B               CALL   printStr   
1344   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1353   21 10 00               LD   hl,$10   
1356   E5                     PUSH   hl   
1357   E5                     PUSH   hl   
1358   CD 61 0C               CALL   run   
135B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1363   CD CA 0A               CALL   flushBuffer   
1366   CD 42 0B               CALL   printStr   
1369   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1376   E1                     POP   hl   
1377   E5                     PUSH   hl   
1378   E5                     PUSH   hl   
1379   CD 61 0C               CALL   run   
137C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
138B   CD CA 0A               CALL   flushBuffer   
138E   76                     HALT      
138F                EXPECTM_0_2671S45:      
138F   E1                     POP   HL   
1390                          ;*Macro unroll:  test "#FF", $FF
1390   31 00 4A               LD   SP,STACK   
1393   CD 8A 0B               CALL   coldInit   
1396   CD 69 48               CALL   execStr   
1399   23 46 46 00            .CSTR   "#FF"   
139D   CD CA 0A               CALL   flushBuffer   
13A0                          ;*Macro unroll:  expect "#FF",$FF
13A0   E1                     POP   HL   
13A1   E5                     PUSH   HL   
13A2   11 FF 00               LD   DE,$FF   
13A5   B7                     OR   A   
13A6   ED 52                  SBC   HL,DE   
13A8   7D                     LD   A,L   
13A9   B4                     OR   H   
13AA   CA 08 14               JP   Z,expectM_0_2672S45   
13AD   CD 42 0B               CALL   printStr   
13B0   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
13BA   CD 42 0B               CALL   printStr   
13BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13CC   21 FF 00               LD   hl,$FF   
13CF   E5                     PUSH   hl   
13D0   E5                     PUSH   hl   
13D1   CD 61 0C               CALL   run   
13D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13DC   CD CA 0A               CALL   flushBuffer   
13DF   CD 42 0B               CALL   printStr   
13E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13EF   E1                     POP   hl   
13F0   E5                     PUSH   hl   
13F1   E5                     PUSH   hl   
13F2   CD 61 0C               CALL   run   
13F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1404   CD CA 0A               CALL   flushBuffer   
1407   76                     HALT      
1408                EXPECTM_0_2672S45:      
1408   E1                     POP   HL   
1409                          ;*Macro unroll:  test "-1 2 +",1
1409   31 00 4A               LD   SP,STACK   
140C   CD 8A 0B               CALL   coldInit   
140F   CD 69 48               CALL   execStr   
1412   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
1419   CD CA 0A               CALL   flushBuffer   
141C                          ;*Macro unroll:  expect "-1 2 +",1
141C   E1                     POP   HL   
141D   E5                     PUSH   HL   
141E   11 01 00               LD   DE,1   
1421   B7                     OR   A   
1422   ED 52                  SBC   HL,DE   
1424   7D                     LD   A,L   
1425   B4                     OR   H   
1426   CA 87 14               JP   Z,expectM_0_2673S45   
1429   CD 42 0B               CALL   printStr   
142C   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1439   CD 42 0B               CALL   printStr   
143C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
144B   21 01 00               LD   hl,1   
144E   E5                     PUSH   hl   
144F   E5                     PUSH   hl   
1450   CD 61 0C               CALL   run   
1453   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
145B   CD CA 0A               CALL   flushBuffer   
145E   CD 42 0B               CALL   printStr   
1461   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146E   E1                     POP   hl   
146F   E5                     PUSH   hl   
1470   E5                     PUSH   hl   
1471   CD 61 0C               CALL   run   
1474   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1483   CD CA 0A               CALL   flushBuffer   
1486   76                     HALT      
1487                EXPECTM_0_2673S45:      
1487   E1                     POP   HL   
1488                          ;*Macro unroll:  test "-1 1 +",0
1488   31 00 4A               LD   SP,STACK   
148B   CD 8A 0B               CALL   coldInit   
148E   CD 69 48               CALL   execStr   
1491   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1498   CD CA 0A               CALL   flushBuffer   
149B                          ;*Macro unroll:  expect "-1 1 +",0
149B   E1                     POP   HL   
149C   E5                     PUSH   HL   
149D   11 00 00               LD   DE,0   
14A0   B7                     OR   A   
14A1   ED 52                  SBC   HL,DE   
14A3   7D                     LD   A,L   
14A4   B4                     OR   H   
14A5   CA 06 15               JP   Z,expectM_0_2674S45   
14A8   CD 42 0B               CALL   printStr   
14AB   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
14B8   CD 42 0B               CALL   printStr   
14BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14CA   21 00 00               LD   hl,0   
14CD   E5                     PUSH   hl   
14CE   E5                     PUSH   hl   
14CF   CD 61 0C               CALL   run   
14D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14DA   CD CA 0A               CALL   flushBuffer   
14DD   CD 42 0B               CALL   printStr   
14E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14ED   E1                     POP   hl   
14EE   E5                     PUSH   hl   
14EF   E5                     PUSH   hl   
14F0   CD 61 0C               CALL   run   
14F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1502   CD CA 0A               CALL   flushBuffer   
1505   76                     HALT      
1506                EXPECTM_0_2674S45:      
1506   E1                     POP   HL   
1507                          ;*Macro unroll:  test "1 2 +", 3
1507   31 00 4A               LD   SP,STACK   
150A   CD 8A 0B               CALL   coldInit   
150D   CD 69 48               CALL   execStr   
1510   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1516   CD CA 0A               CALL   flushBuffer   
1519                          ;*Macro unroll:  expect "1 2 +",3
1519   E1                     POP   HL   
151A   E5                     PUSH   HL   
151B   11 03 00               LD   DE,3   
151E   B7                     OR   A   
151F   ED 52                  SBC   HL,DE   
1521   7D                     LD   A,L   
1522   B4                     OR   H   
1523   CA 83 15               JP   Z,expectM_0_2675S45   
1526   CD 42 0B               CALL   printStr   
1529   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1535   CD 42 0B               CALL   printStr   
1538   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1547   21 03 00               LD   hl,3   
154A   E5                     PUSH   hl   
154B   E5                     PUSH   hl   
154C   CD 61 0C               CALL   run   
154F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1557   CD CA 0A               CALL   flushBuffer   
155A   CD 42 0B               CALL   printStr   
155D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
156A   E1                     POP   hl   
156B   E5                     PUSH   hl   
156C   E5                     PUSH   hl   
156D   CD 61 0C               CALL   run   
1570   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
157F   CD CA 0A               CALL   flushBuffer   
1582   76                     HALT      
1583                EXPECTM_0_2675S45:      
1583   E1                     POP   HL   
1584                          ;*Macro unroll:  test "4 1 2 +", 3
1584   31 00 4A               LD   SP,STACK   
1587   CD 8A 0B               CALL   coldInit   
158A   CD 69 48               CALL   execStr   
158D   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1595   CD CA 0A               CALL   flushBuffer   
1598                          ;*Macro unroll:  expect "4 1 2 +",3
1598   E1                     POP   HL   
1599   E5                     PUSH   HL   
159A   11 03 00               LD   DE,3   
159D   B7                     OR   A   
159E   ED 52                  SBC   HL,DE   
15A0   7D                     LD   A,L   
15A1   B4                     OR   H   
15A2   CA 04 16               JP   Z,expectM_0_2676S45   
15A5   CD 42 0B               CALL   printStr   
15A8   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
15B6   CD 42 0B               CALL   printStr   
15B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15C8   21 03 00               LD   hl,3   
15CB   E5                     PUSH   hl   
15CC   E5                     PUSH   hl   
15CD   CD 61 0C               CALL   run   
15D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15D8   CD CA 0A               CALL   flushBuffer   
15DB   CD 42 0B               CALL   printStr   
15DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15EB   E1                     POP   hl   
15EC   E5                     PUSH   hl   
15ED   E5                     PUSH   hl   
15EE   CD 61 0C               CALL   run   
15F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1600   CD CA 0A               CALL   flushBuffer   
1603   76                     HALT      
1604                EXPECTM_0_2676S45:      
1604   E1                     POP   HL   
1605                          ;*Macro unroll:  test "123 456 +", 123+456
1605   31 00 4A               LD   SP,STACK   
1608   CD 8A 0B               CALL   coldInit   
160B   CD 69 48               CALL   execStr   
160E   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1618   CD CA 0A               CALL   flushBuffer   
161B                          ;*Macro unroll:  expect "123 456 +",123+456
161B   E1                     POP   HL   
161C   E5                     PUSH   HL   
161D   11 43 02               LD   DE,123+456   
1620   B7                     OR   A   
1621   ED 52                  SBC   HL,DE   
1623   7D                     LD   A,L   
1624   B4                     OR   H   
1625   CA 89 16               JP   Z,expectM_0_2677S45   
1628   CD 42 0B               CALL   printStr   
162B   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
163B   CD 42 0B               CALL   printStr   
163E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
164D   21 43 02               LD   hl,123+456   
1650   E5                     PUSH   hl   
1651   E5                     PUSH   hl   
1652   CD 61 0C               CALL   run   
1655   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
165D   CD CA 0A               CALL   flushBuffer   
1660   CD 42 0B               CALL   printStr   
1663   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1670   E1                     POP   hl   
1671   E5                     PUSH   hl   
1672   E5                     PUSH   hl   
1673   CD 61 0C               CALL   run   
1676   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1685   CD CA 0A               CALL   flushBuffer   
1688   76                     HALT      
1689                EXPECTM_0_2677S45:      
1689   E1                     POP   HL   
168A                          ;*Macro unroll:  test "64 128 +", 64+128
168A   31 00 4A               LD   SP,STACK   
168D   CD 8A 0B               CALL   coldInit   
1690   CD 69 48               CALL   execStr   
1693   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
169C   CD CA 0A               CALL   flushBuffer   
169F                          ;*Macro unroll:  expect "64 128 +",64+128
169F   E1                     POP   HL   
16A0   E5                     PUSH   HL   
16A1   11 C0 00               LD   DE,64+128   
16A4   B7                     OR   A   
16A5   ED 52                  SBC   HL,DE   
16A7   7D                     LD   A,L   
16A8   B4                     OR   H   
16A9   CA 0C 17               JP   Z,expectM_0_2678S45   
16AC   CD 42 0B               CALL   printStr   
16AF   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
16BE   CD 42 0B               CALL   printStr   
16C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16D0   21 C0 00               LD   hl,64+128   
16D3   E5                     PUSH   hl   
16D4   E5                     PUSH   hl   
16D5   CD 61 0C               CALL   run   
16D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16E0   CD CA 0A               CALL   flushBuffer   
16E3   CD 42 0B               CALL   printStr   
16E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16F3   E1                     POP   hl   
16F4   E5                     PUSH   hl   
16F5   E5                     PUSH   hl   
16F6   CD 61 0C               CALL   run   
16F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1708   CD CA 0A               CALL   flushBuffer   
170B   76                     HALT      
170C                EXPECTM_0_2678S45:      
170C   E1                     POP   HL   
170D                          ;*Macro unroll:  test "1 2 +", 3
170D   31 00 4A               LD   SP,STACK   
1710   CD 8A 0B               CALL   coldInit   
1713   CD 69 48               CALL   execStr   
1716   31 20 32 20 2B 00      .CSTR   "1 2 +"   
171C   CD CA 0A               CALL   flushBuffer   
171F                          ;*Macro unroll:  expect "1 2 +",3
171F   E1                     POP   HL   
1720   E5                     PUSH   HL   
1721   11 03 00               LD   DE,3   
1724   B7                     OR   A   
1725   ED 52                  SBC   HL,DE   
1727   7D                     LD   A,L   
1728   B4                     OR   H   
1729   CA 89 17               JP   Z,expectM_0_2679S45   
172C   CD 42 0B               CALL   printStr   
172F   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
173B   CD 42 0B               CALL   printStr   
173E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
174D   21 03 00               LD   hl,3   
1750   E5                     PUSH   hl   
1751   E5                     PUSH   hl   
1752   CD 61 0C               CALL   run   
1755   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
175D   CD CA 0A               CALL   flushBuffer   
1760   CD 42 0B               CALL   printStr   
1763   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1770   E1                     POP   hl   
1771   E5                     PUSH   hl   
1772   E5                     PUSH   hl   
1773   CD 61 0C               CALL   run   
1776   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1785   CD CA 0A               CALL   flushBuffer   
1788   76                     HALT      
1789                EXPECTM_0_2679S45:      
1789   E1                     POP   HL   
178A                          ;*Macro unroll:  test "1a= a++ a",2
178A   31 00 4A               LD   SP,STACK   
178D   CD 8A 0B               CALL   coldInit   
1790   CD 69 48               CALL   execStr   
1793   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
179D   CD CA 0A               CALL   flushBuffer   
17A0                          ;*Macro unroll:  expect "1a= a++ a",2
17A0   E1                     POP   HL   
17A1   E5                     PUSH   HL   
17A2   11 02 00               LD   DE,2   
17A5   B7                     OR   A   
17A6   ED 52                  SBC   HL,DE   
17A8   7D                     LD   A,L   
17A9   B4                     OR   H   
17AA   CA 0E 18               JP   Z,expectM_0_2680S45   
17AD   CD 42 0B               CALL   printStr   
17B0   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
17C0   CD 42 0B               CALL   printStr   
17C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D2   21 02 00               LD   hl,2   
17D5   E5                     PUSH   hl   
17D6   E5                     PUSH   hl   
17D7   CD 61 0C               CALL   run   
17DA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17E2   CD CA 0A               CALL   flushBuffer   
17E5   CD 42 0B               CALL   printStr   
17E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F5   E1                     POP   hl   
17F6   E5                     PUSH   hl   
17F7   E5                     PUSH   hl   
17F8   CD 61 0C               CALL   run   
17FB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
180A   CD CA 0A               CALL   flushBuffer   
180D   76                     HALT      
180E                EXPECTM_0_2680S45:      
180E   E1                     POP   HL   
180F                          ;*Macro unroll:  test "-1 -1 -",0
180F   31 00 4A               LD   SP,STACK   
1812   CD 8A 0B               CALL   coldInit   
1815   CD 69 48               CALL   execStr   
1818   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
1820   CD CA 0A               CALL   flushBuffer   
1823                          ;*Macro unroll:  expect "-1 -1 -",0
1823   E1                     POP   HL   
1824   E5                     PUSH   HL   
1825   11 00 00               LD   DE,0   
1828   B7                     OR   A   
1829   ED 52                  SBC   HL,DE   
182B   7D                     LD   A,L   
182C   B4                     OR   H   
182D   CA 8F 18               JP   Z,expectM_0_2681S45   
1830   CD 42 0B               CALL   printStr   
1833   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1841   CD 42 0B               CALL   printStr   
1844   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1853   21 00 00               LD   hl,0   
1856   E5                     PUSH   hl   
1857   E5                     PUSH   hl   
1858   CD 61 0C               CALL   run   
185B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1863   CD CA 0A               CALL   flushBuffer   
1866   CD 42 0B               CALL   printStr   
1869   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1876   E1                     POP   hl   
1877   E5                     PUSH   hl   
1878   E5                     PUSH   hl   
1879   CD 61 0C               CALL   run   
187C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
188B   CD CA 0A               CALL   flushBuffer   
188E   76                     HALT      
188F                EXPECTM_0_2681S45:      
188F   E1                     POP   HL   
1890                          ;*Macro unroll:  test "5 3 -", 2
1890   31 00 4A               LD   SP,STACK   
1893   CD 8A 0B               CALL   coldInit   
1896   CD 69 48               CALL   execStr   
1899   35 20 33 20 2D 00      .CSTR   "5 3 -"   
189F   CD CA 0A               CALL   flushBuffer   
18A2                          ;*Macro unroll:  expect "5 3 -",2
18A2   E1                     POP   HL   
18A3   E5                     PUSH   HL   
18A4   11 02 00               LD   DE,2   
18A7   B7                     OR   A   
18A8   ED 52                  SBC   HL,DE   
18AA   7D                     LD   A,L   
18AB   B4                     OR   H   
18AC   CA 0C 19               JP   Z,expectM_0_2682S45   
18AF   CD 42 0B               CALL   printStr   
18B2   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
18BE   CD 42 0B               CALL   printStr   
18C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18D0   21 02 00               LD   hl,2   
18D3   E5                     PUSH   hl   
18D4   E5                     PUSH   hl   
18D5   CD 61 0C               CALL   run   
18D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18E0   CD CA 0A               CALL   flushBuffer   
18E3   CD 42 0B               CALL   printStr   
18E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18F3   E1                     POP   hl   
18F4   E5                     PUSH   hl   
18F5   E5                     PUSH   hl   
18F6   CD 61 0C               CALL   run   
18F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1908   CD CA 0A               CALL   flushBuffer   
190B   76                     HALT      
190C                EXPECTM_0_2682S45:      
190C   E1                     POP   HL   
190D                          ;*Macro unroll:  test "2 1 -",1
190D   31 00 4A               LD   SP,STACK   
1910   CD 8A 0B               CALL   coldInit   
1913   CD 69 48               CALL   execStr   
1916   32 20 31 20 2D 00      .CSTR   "2 1 -"   
191C   CD CA 0A               CALL   flushBuffer   
191F                          ;*Macro unroll:  expect "2 1 -",1
191F   E1                     POP   HL   
1920   E5                     PUSH   HL   
1921   11 01 00               LD   DE,1   
1924   B7                     OR   A   
1925   ED 52                  SBC   HL,DE   
1927   7D                     LD   A,L   
1928   B4                     OR   H   
1929   CA 89 19               JP   Z,expectM_0_2683S45   
192C   CD 42 0B               CALL   printStr   
192F   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
193B   CD 42 0B               CALL   printStr   
193E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
194D   21 01 00               LD   hl,1   
1950   E5                     PUSH   hl   
1951   E5                     PUSH   hl   
1952   CD 61 0C               CALL   run   
1955   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
195D   CD CA 0A               CALL   flushBuffer   
1960   CD 42 0B               CALL   printStr   
1963   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1970   E1                     POP   hl   
1971   E5                     PUSH   hl   
1972   E5                     PUSH   hl   
1973   CD 61 0C               CALL   run   
1976   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1985   CD CA 0A               CALL   flushBuffer   
1988   76                     HALT      
1989                EXPECTM_0_2683S45:      
1989   E1                     POP   HL   
198A                          ;*Macro unroll:  test "3a= a-- a",2
198A   31 00 4A               LD   SP,STACK   
198D   CD 8A 0B               CALL   coldInit   
1990   CD 69 48               CALL   execStr   
1993   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
199D   CD CA 0A               CALL   flushBuffer   
19A0                          ;*Macro unroll:  expect "3a= a-- a",2
19A0   E1                     POP   HL   
19A1   E5                     PUSH   HL   
19A2   11 02 00               LD   DE,2   
19A5   B7                     OR   A   
19A6   ED 52                  SBC   HL,DE   
19A8   7D                     LD   A,L   
19A9   B4                     OR   H   
19AA   CA 0E 1A               JP   Z,expectM_0_2684S45   
19AD   CD 42 0B               CALL   printStr   
19B0   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
19C0   CD 42 0B               CALL   printStr   
19C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19D2   21 02 00               LD   hl,2   
19D5   E5                     PUSH   hl   
19D6   E5                     PUSH   hl   
19D7   CD 61 0C               CALL   run   
19DA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19E2   CD CA 0A               CALL   flushBuffer   
19E5   CD 42 0B               CALL   printStr   
19E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19F5   E1                     POP   hl   
19F6   E5                     PUSH   hl   
19F7   E5                     PUSH   hl   
19F8   CD 61 0C               CALL   run   
19FB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A0A   CD CA 0A               CALL   flushBuffer   
1A0D   76                     HALT      
1A0E                EXPECTM_0_2684S45:      
1A0E   E1                     POP   HL   
1A0F                          ;*Macro unroll:  test "3 5 &", 1
1A0F   31 00 4A               LD   SP,STACK   
1A12   CD 8A 0B               CALL   coldInit   
1A15   CD 69 48               CALL   execStr   
1A18   33 20 35 20 26 00      .CSTR   "3 5 &"   
1A1E   CD CA 0A               CALL   flushBuffer   
1A21                          ;*Macro unroll:  expect "3 5 &",1
1A21   E1                     POP   HL   
1A22   E5                     PUSH   HL   
1A23   11 01 00               LD   DE,1   
1A26   B7                     OR   A   
1A27   ED 52                  SBC   HL,DE   
1A29   7D                     LD   A,L   
1A2A   B4                     OR   H   
1A2B   CA 8B 1A               JP   Z,expectM_0_2685S45   
1A2E   CD 42 0B               CALL   printStr   
1A31   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1A3D   CD 42 0B               CALL   printStr   
1A40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A4F   21 01 00               LD   hl,1   
1A52   E5                     PUSH   hl   
1A53   E5                     PUSH   hl   
1A54   CD 61 0C               CALL   run   
1A57   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A5F   CD CA 0A               CALL   flushBuffer   
1A62   CD 42 0B               CALL   printStr   
1A65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A72   E1                     POP   hl   
1A73   E5                     PUSH   hl   
1A74   E5                     PUSH   hl   
1A75   CD 61 0C               CALL   run   
1A78   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A87   CD CA 0A               CALL   flushBuffer   
1A8A   76                     HALT      
1A8B                EXPECTM_0_2685S45:      
1A8B   E1                     POP   HL   
1A8C                          ;*Macro unroll:  test "3 5 |", 7
1A8C   31 00 4A               LD   SP,STACK   
1A8F   CD 8A 0B               CALL   coldInit   
1A92   CD 69 48               CALL   execStr   
1A95   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1A9B   CD CA 0A               CALL   flushBuffer   
1A9E                          ;*Macro unroll:  expect "3 5 |",7
1A9E   E1                     POP   HL   
1A9F   E5                     PUSH   HL   
1AA0   11 07 00               LD   DE,7   
1AA3   B7                     OR   A   
1AA4   ED 52                  SBC   HL,DE   
1AA6   7D                     LD   A,L   
1AA7   B4                     OR   H   
1AA8   CA 08 1B               JP   Z,expectM_0_2686S45   
1AAB   CD 42 0B               CALL   printStr   
1AAE   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1ABA   CD 42 0B               CALL   printStr   
1ABD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ACC   21 07 00               LD   hl,7   
1ACF   E5                     PUSH   hl   
1AD0   E5                     PUSH   hl   
1AD1   CD 61 0C               CALL   run   
1AD4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1ADC   CD CA 0A               CALL   flushBuffer   
1ADF   CD 42 0B               CALL   printStr   
1AE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AEF   E1                     POP   hl   
1AF0   E5                     PUSH   hl   
1AF1   E5                     PUSH   hl   
1AF2   CD 61 0C               CALL   run   
1AF5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B04   CD CA 0A               CALL   flushBuffer   
1B07   76                     HALT      
1B08                EXPECTM_0_2686S45:      
1B08   E1                     POP   HL   
1B09                          ;*Macro unroll:  test "3 5 /x", 6
1B09   31 00 4A               LD   SP,STACK   
1B0C   CD 8A 0B               CALL   coldInit   
1B0F   CD 69 48               CALL   execStr   
1B12   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
1B19   CD CA 0A               CALL   flushBuffer   
1B1C                          ;*Macro unroll:  expect "3 5 /x",6
1B1C   E1                     POP   HL   
1B1D   E5                     PUSH   HL   
1B1E   11 06 00               LD   DE,6   
1B21   B7                     OR   A   
1B22   ED 52                  SBC   HL,DE   
1B24   7D                     LD   A,L   
1B25   B4                     OR   H   
1B26   CA 87 1B               JP   Z,expectM_0_2687S45   
1B29   CD 42 0B               CALL   printStr   
1B2C   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1B39   CD 42 0B               CALL   printStr   
1B3C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B4B   21 06 00               LD   hl,6   
1B4E   E5                     PUSH   hl   
1B4F   E5                     PUSH   hl   
1B50   CD 61 0C               CALL   run   
1B53   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B5B   CD CA 0A               CALL   flushBuffer   
1B5E   CD 42 0B               CALL   printStr   
1B61   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B6E   E1                     POP   hl   
1B6F   E5                     PUSH   hl   
1B70   E5                     PUSH   hl   
1B71   CD 61 0C               CALL   run   
1B74   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B83   CD CA 0A               CALL   flushBuffer   
1B86   76                     HALT      
1B87                EXPECTM_0_2687S45:      
1B87   E1                     POP   HL   
1B88                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1B88   31 00 4A               LD   SP,STACK   
1B8B   CD 8A 0B               CALL   coldInit   
1B8E   CD 69 48               CALL   execStr   
1B91   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1BA0   CD CA 0A               CALL   flushBuffer   
1BA3                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1BA3   E1                     POP   HL   
1BA4   E5                     PUSH   HL   
1BA5   11 06 00               LD   DE,6   
1BA8   B7                     OR   A   
1BA9   ED 52                  SBC   HL,DE   
1BAB   7D                     LD   A,L   
1BAC   B4                     OR   H   
1BAD   CA 16 1C               JP   Z,expectM_0_2688S45   
1BB0   CD 42 0B               CALL   printStr   
1BB3   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1BC8   CD 42 0B               CALL   printStr   
1BCB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BDA   21 06 00               LD   hl,6   
1BDD   E5                     PUSH   hl   
1BDE   E5                     PUSH   hl   
1BDF   CD 61 0C               CALL   run   
1BE2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BEA   CD CA 0A               CALL   flushBuffer   
1BED   CD 42 0B               CALL   printStr   
1BF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BFD   E1                     POP   hl   
1BFE   E5                     PUSH   hl   
1BFF   E5                     PUSH   hl   
1C00   CD 61 0C               CALL   run   
1C03   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C12   CD CA 0A               CALL   flushBuffer   
1C15   76                     HALT      
1C16                EXPECTM_0_2688S45:      
1C16   E1                     POP   HL   
1C17                          ;*Macro unroll:  test "2 3 *", 6
1C17   31 00 4A               LD   SP,STACK   
1C1A   CD 8A 0B               CALL   coldInit   
1C1D   CD 69 48               CALL   execStr   
1C20   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1C26   CD CA 0A               CALL   flushBuffer   
1C29                          ;*Macro unroll:  expect "2 3 *",6
1C29   E1                     POP   HL   
1C2A   E5                     PUSH   HL   
1C2B   11 06 00               LD   DE,6   
1C2E   B7                     OR   A   
1C2F   ED 52                  SBC   HL,DE   
1C31   7D                     LD   A,L   
1C32   B4                     OR   H   
1C33   CA 93 1C               JP   Z,expectM_0_2689S45   
1C36   CD 42 0B               CALL   printStr   
1C39   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1C45   CD 42 0B               CALL   printStr   
1C48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C57   21 06 00               LD   hl,6   
1C5A   E5                     PUSH   hl   
1C5B   E5                     PUSH   hl   
1C5C   CD 61 0C               CALL   run   
1C5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C67   CD CA 0A               CALL   flushBuffer   
1C6A   CD 42 0B               CALL   printStr   
1C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7A   E1                     POP   hl   
1C7B   E5                     PUSH   hl   
1C7C   E5                     PUSH   hl   
1C7D   CD 61 0C               CALL   run   
1C80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C8F   CD CA 0A               CALL   flushBuffer   
1C92   76                     HALT      
1C93                EXPECTM_0_2689S45:      
1C93   E1                     POP   HL   
1C94                          ;*Macro unroll:  test "1 2 3 + *", 5
1C94   31 00 4A               LD   SP,STACK   
1C97   CD 8A 0B               CALL   coldInit   
1C9A   CD 69 48               CALL   execStr   
1C9D   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1CA7   CD CA 0A               CALL   flushBuffer   
1CAA                          ;*Macro unroll:  expect "1 2 3 + *",5
1CAA   E1                     POP   HL   
1CAB   E5                     PUSH   HL   
1CAC   11 05 00               LD   DE,5   
1CAF   B7                     OR   A   
1CB0   ED 52                  SBC   HL,DE   
1CB2   7D                     LD   A,L   
1CB3   B4                     OR   H   
1CB4   CA 18 1D               JP   Z,expectM_0_2690S45   
1CB7   CD 42 0B               CALL   printStr   
1CBA   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1CCA   CD 42 0B               CALL   printStr   
1CCD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CDC   21 05 00               LD   hl,5   
1CDF   E5                     PUSH   hl   
1CE0   E5                     PUSH   hl   
1CE1   CD 61 0C               CALL   run   
1CE4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CEC   CD CA 0A               CALL   flushBuffer   
1CEF   CD 42 0B               CALL   printStr   
1CF2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CFF   E1                     POP   hl   
1D00   E5                     PUSH   hl   
1D01   E5                     PUSH   hl   
1D02   CD 61 0C               CALL   run   
1D05   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D14   CD CA 0A               CALL   flushBuffer   
1D17   76                     HALT      
1D18                EXPECTM_0_2690S45:      
1D18   E1                     POP   HL   
1D19                          ;*Macro unroll:  test "7 3 /", 2
1D19   31 00 4A               LD   SP,STACK   
1D1C   CD 8A 0B               CALL   coldInit   
1D1F   CD 69 48               CALL   execStr   
1D22   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1D28   CD CA 0A               CALL   flushBuffer   
1D2B                          ;*Macro unroll:  expect "7 3 /",2
1D2B   E1                     POP   HL   
1D2C   E5                     PUSH   HL   
1D2D   11 02 00               LD   DE,2   
1D30   B7                     OR   A   
1D31   ED 52                  SBC   HL,DE   
1D33   7D                     LD   A,L   
1D34   B4                     OR   H   
1D35   CA 95 1D               JP   Z,expectM_0_2691S45   
1D38   CD 42 0B               CALL   printStr   
1D3B   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1D47   CD 42 0B               CALL   printStr   
1D4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D59   21 02 00               LD   hl,2   
1D5C   E5                     PUSH   hl   
1D5D   E5                     PUSH   hl   
1D5E   CD 61 0C               CALL   run   
1D61   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D69   CD CA 0A               CALL   flushBuffer   
1D6C   CD 42 0B               CALL   printStr   
1D6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7C   E1                     POP   hl   
1D7D   E5                     PUSH   hl   
1D7E   E5                     PUSH   hl   
1D7F   CD 61 0C               CALL   run   
1D82   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D91   CD CA 0A               CALL   flushBuffer   
1D94   76                     HALT      
1D95                EXPECTM_0_2691S45:      
1D95   E1                     POP   HL   
1D96                          ;*Macro unroll:  test "7 3 / _", 1
1D96   31 00 4A               LD   SP,STACK   
1D99   CD 8A 0B               CALL   coldInit   
1D9C   CD 69 48               CALL   execStr   
1D9F   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1DA7   CD CA 0A               CALL   flushBuffer   
1DAA                          ;*Macro unroll:  expect "7 3 / _",1
1DAA   E1                     POP   HL   
1DAB   E5                     PUSH   HL   
1DAC   11 01 00               LD   DE,1   
1DAF   B7                     OR   A   
1DB0   ED 52                  SBC   HL,DE   
1DB2   7D                     LD   A,L   
1DB3   B4                     OR   H   
1DB4   CA 16 1E               JP   Z,expectM_0_2692S45   
1DB7   CD 42 0B               CALL   printStr   
1DBA   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1DC8   CD 42 0B               CALL   printStr   
1DCB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DDA   21 01 00               LD   hl,1   
1DDD   E5                     PUSH   hl   
1DDE   E5                     PUSH   hl   
1DDF   CD 61 0C               CALL   run   
1DE2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DEA   CD CA 0A               CALL   flushBuffer   
1DED   CD 42 0B               CALL   printStr   
1DF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DFD   E1                     POP   hl   
1DFE   E5                     PUSH   hl   
1DFF   E5                     PUSH   hl   
1E00   CD 61 0C               CALL   run   
1E03   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E12   CD CA 0A               CALL   flushBuffer   
1E15   76                     HALT      
1E16                EXPECTM_0_2692S45:      
1E16   E1                     POP   HL   
1E17                          ;*Macro unroll:  test "7 3 /", 2
1E17   31 00 4A               LD   SP,STACK   
1E1A   CD 8A 0B               CALL   coldInit   
1E1D   CD 69 48               CALL   execStr   
1E20   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1E26   CD CA 0A               CALL   flushBuffer   
1E29                          ;*Macro unroll:  expect "7 3 /",2
1E29   E1                     POP   HL   
1E2A   E5                     PUSH   HL   
1E2B   11 02 00               LD   DE,2   
1E2E   B7                     OR   A   
1E2F   ED 52                  SBC   HL,DE   
1E31   7D                     LD   A,L   
1E32   B4                     OR   H   
1E33   CA 93 1E               JP   Z,expectM_0_2693S45   
1E36   CD 42 0B               CALL   printStr   
1E39   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1E45   CD 42 0B               CALL   printStr   
1E48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E57   21 02 00               LD   hl,2   
1E5A   E5                     PUSH   hl   
1E5B   E5                     PUSH   hl   
1E5C   CD 61 0C               CALL   run   
1E5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E67   CD CA 0A               CALL   flushBuffer   
1E6A   CD 42 0B               CALL   printStr   
1E6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E7A   E1                     POP   hl   
1E7B   E5                     PUSH   hl   
1E7C   E5                     PUSH   hl   
1E7D   CD 61 0C               CALL   run   
1E80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E8F   CD CA 0A               CALL   flushBuffer   
1E92   76                     HALT      
1E93                EXPECTM_0_2693S45:      
1E93   E1                     POP   HL   
1E94                          ;*Macro unroll:  test "2 3 ==", FALSE
1E94   31 00 4A               LD   SP,STACK   
1E97   CD 8A 0B               CALL   coldInit   
1E9A   CD 69 48               CALL   execStr   
1E9D   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1EA4   CD CA 0A               CALL   flushBuffer   
1EA7                          ;*Macro unroll:  expect "2 3 ==",FALSE
1EA7   E1                     POP   HL   
1EA8   E5                     PUSH   HL   
1EA9   11 00 00               LD   DE,FALSE   
1EAC   B7                     OR   A   
1EAD   ED 52                  SBC   HL,DE   
1EAF   7D                     LD   A,L   
1EB0   B4                     OR   H   
1EB1   CA 12 1F               JP   Z,expectM_0_2694S45   
1EB4   CD 42 0B               CALL   printStr   
1EB7   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1EC4   CD 42 0B               CALL   printStr   
1EC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ED6   21 00 00               LD   hl,FALSE   
1ED9   E5                     PUSH   hl   
1EDA   E5                     PUSH   hl   
1EDB   CD 61 0C               CALL   run   
1EDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EE6   CD CA 0A               CALL   flushBuffer   
1EE9   CD 42 0B               CALL   printStr   
1EEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EF9   E1                     POP   hl   
1EFA   E5                     PUSH   hl   
1EFB   E5                     PUSH   hl   
1EFC   CD 61 0C               CALL   run   
1EFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F0E   CD CA 0A               CALL   flushBuffer   
1F11   76                     HALT      
1F12                EXPECTM_0_2694S45:      
1F12   E1                     POP   HL   
1F13                          ;*Macro unroll:  test "3 3 ==", TRUE
1F13   31 00 4A               LD   SP,STACK   
1F16   CD 8A 0B               CALL   coldInit   
1F19   CD 69 48               CALL   execStr   
1F1C   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1F23   CD CA 0A               CALL   flushBuffer   
1F26                          ;*Macro unroll:  expect "3 3 ==",TRUE
1F26   E1                     POP   HL   
1F27   E5                     PUSH   HL   
1F28   11 FF FF               LD   DE,TRUE   
1F2B   B7                     OR   A   
1F2C   ED 52                  SBC   HL,DE   
1F2E   7D                     LD   A,L   
1F2F   B4                     OR   H   
1F30   CA 91 1F               JP   Z,expectM_0_2695S45   
1F33   CD 42 0B               CALL   printStr   
1F36   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1F43   CD 42 0B               CALL   printStr   
1F46   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F55   21 FF FF               LD   hl,TRUE   
1F58   E5                     PUSH   hl   
1F59   E5                     PUSH   hl   
1F5A   CD 61 0C               CALL   run   
1F5D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F65   CD CA 0A               CALL   flushBuffer   
1F68   CD 42 0B               CALL   printStr   
1F6B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F78   E1                     POP   hl   
1F79   E5                     PUSH   hl   
1F7A   E5                     PUSH   hl   
1F7B   CD 61 0C               CALL   run   
1F7E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F8D   CD CA 0A               CALL   flushBuffer   
1F90   76                     HALT      
1F91                EXPECTM_0_2695S45:      
1F91   E1                     POP   HL   
1F92                          ;*Macro unroll:  test "1 2 <", TRUE
1F92   31 00 4A               LD   SP,STACK   
1F95   CD 8A 0B               CALL   coldInit   
1F98   CD 69 48               CALL   execStr   
1F9B   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1FA1   CD CA 0A               CALL   flushBuffer   
1FA4                          ;*Macro unroll:  expect "1 2 <",TRUE
1FA4   E1                     POP   HL   
1FA5   E5                     PUSH   HL   
1FA6   11 FF FF               LD   DE,TRUE   
1FA9   B7                     OR   A   
1FAA   ED 52                  SBC   HL,DE   
1FAC   7D                     LD   A,L   
1FAD   B4                     OR   H   
1FAE   CA 0E 20               JP   Z,expectM_0_2696S45   
1FB1   CD 42 0B               CALL   printStr   
1FB4   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1FC0   CD 42 0B               CALL   printStr   
1FC3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FD2   21 FF FF               LD   hl,TRUE   
1FD5   E5                     PUSH   hl   
1FD6   E5                     PUSH   hl   
1FD7   CD 61 0C               CALL   run   
1FDA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FE2   CD CA 0A               CALL   flushBuffer   
1FE5   CD 42 0B               CALL   printStr   
1FE8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FF5   E1                     POP   hl   
1FF6   E5                     PUSH   hl   
1FF7   E5                     PUSH   hl   
1FF8   CD 61 0C               CALL   run   
1FFB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
200A   CD CA 0A               CALL   flushBuffer   
200D   76                     HALT      
200E                EXPECTM_0_2696S45:      
200E   E1                     POP   HL   
200F                          ;*Macro unroll:  test "2 1 <", FALSE
200F   31 00 4A               LD   SP,STACK   
2012   CD 8A 0B               CALL   coldInit   
2015   CD 69 48               CALL   execStr   
2018   32 20 31 20 3C 00      .CSTR   "2 1 <"   
201E   CD CA 0A               CALL   flushBuffer   
2021                          ;*Macro unroll:  expect "2 1 <",FALSE
2021   E1                     POP   HL   
2022   E5                     PUSH   HL   
2023   11 00 00               LD   DE,FALSE   
2026   B7                     OR   A   
2027   ED 52                  SBC   HL,DE   
2029   7D                     LD   A,L   
202A   B4                     OR   H   
202B   CA 8B 20               JP   Z,expectM_0_2697S45   
202E   CD 42 0B               CALL   printStr   
2031   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
203D   CD 42 0B               CALL   printStr   
2040   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
204F   21 00 00               LD   hl,FALSE   
2052   E5                     PUSH   hl   
2053   E5                     PUSH   hl   
2054   CD 61 0C               CALL   run   
2057   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
205F   CD CA 0A               CALL   flushBuffer   
2062   CD 42 0B               CALL   printStr   
2065   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2072   E1                     POP   hl   
2073   E5                     PUSH   hl   
2074   E5                     PUSH   hl   
2075   CD 61 0C               CALL   run   
2078   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2087   CD CA 0A               CALL   flushBuffer   
208A   76                     HALT      
208B                EXPECTM_0_2697S45:      
208B   E1                     POP   HL   
208C                          ;*Macro unroll:  test "2 3 <", TRUE
208C   31 00 4A               LD   SP,STACK   
208F   CD 8A 0B               CALL   coldInit   
2092   CD 69 48               CALL   execStr   
2095   32 20 33 20 3C 00      .CSTR   "2 3 <"   
209B   CD CA 0A               CALL   flushBuffer   
209E                          ;*Macro unroll:  expect "2 3 <",TRUE
209E   E1                     POP   HL   
209F   E5                     PUSH   HL   
20A0   11 FF FF               LD   DE,TRUE   
20A3   B7                     OR   A   
20A4   ED 52                  SBC   HL,DE   
20A6   7D                     LD   A,L   
20A7   B4                     OR   H   
20A8   CA 08 21               JP   Z,expectM_0_2698S45   
20AB   CD 42 0B               CALL   printStr   
20AE   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
20BA   CD 42 0B               CALL   printStr   
20BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20CC   21 FF FF               LD   hl,TRUE   
20CF   E5                     PUSH   hl   
20D0   E5                     PUSH   hl   
20D1   CD 61 0C               CALL   run   
20D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20DC   CD CA 0A               CALL   flushBuffer   
20DF   CD 42 0B               CALL   printStr   
20E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20EF   E1                     POP   hl   
20F0   E5                     PUSH   hl   
20F1   E5                     PUSH   hl   
20F2   CD 61 0C               CALL   run   
20F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2104   CD CA 0A               CALL   flushBuffer   
2107   76                     HALT      
2108                EXPECTM_0_2698S45:      
2108   E1                     POP   HL   
2109                          ;*Macro unroll:  test "3 3 <", FALSE
2109   31 00 4A               LD   SP,STACK   
210C   CD 8A 0B               CALL   coldInit   
210F   CD 69 48               CALL   execStr   
2112   33 20 33 20 3C 00      .CSTR   "3 3 <"   
2118   CD CA 0A               CALL   flushBuffer   
211B                          ;*Macro unroll:  expect "3 3 <",FALSE
211B   E1                     POP   HL   
211C   E5                     PUSH   HL   
211D   11 00 00               LD   DE,FALSE   
2120   B7                     OR   A   
2121   ED 52                  SBC   HL,DE   
2123   7D                     LD   A,L   
2124   B4                     OR   H   
2125   CA 85 21               JP   Z,expectM_0_2699S45   
2128   CD 42 0B               CALL   printStr   
212B   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2137   CD 42 0B               CALL   printStr   
213A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2149   21 00 00               LD   hl,FALSE   
214C   E5                     PUSH   hl   
214D   E5                     PUSH   hl   
214E   CD 61 0C               CALL   run   
2151   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2159   CD CA 0A               CALL   flushBuffer   
215C   CD 42 0B               CALL   printStr   
215F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
216C   E1                     POP   hl   
216D   E5                     PUSH   hl   
216E   E5                     PUSH   hl   
216F   CD 61 0C               CALL   run   
2172   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2181   CD CA 0A               CALL   flushBuffer   
2184   76                     HALT      
2185                EXPECTM_0_2699S45:      
2185   E1                     POP   HL   
2186                          ;*Macro unroll:  test "1 2 >", FALSE
2186   31 00 4A               LD   SP,STACK   
2189   CD 8A 0B               CALL   coldInit   
218C   CD 69 48               CALL   execStr   
218F   31 20 32 20 3E 00      .CSTR   "1 2 >"   
2195   CD CA 0A               CALL   flushBuffer   
2198                          ;*Macro unroll:  expect "1 2 >",FALSE
2198   E1                     POP   HL   
2199   E5                     PUSH   HL   
219A   11 00 00               LD   DE,FALSE   
219D   B7                     OR   A   
219E   ED 52                  SBC   HL,DE   
21A0   7D                     LD   A,L   
21A1   B4                     OR   H   
21A2   CA 02 22               JP   Z,expectM_0_2700S45   
21A5   CD 42 0B               CALL   printStr   
21A8   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
21B4   CD 42 0B               CALL   printStr   
21B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21C6   21 00 00               LD   hl,FALSE   
21C9   E5                     PUSH   hl   
21CA   E5                     PUSH   hl   
21CB   CD 61 0C               CALL   run   
21CE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21D6   CD CA 0A               CALL   flushBuffer   
21D9   CD 42 0B               CALL   printStr   
21DC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21E9   E1                     POP   hl   
21EA   E5                     PUSH   hl   
21EB   E5                     PUSH   hl   
21EC   CD 61 0C               CALL   run   
21EF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21FE   CD CA 0A               CALL   flushBuffer   
2201   76                     HALT      
2202                EXPECTM_0_2700S45:      
2202   E1                     POP   HL   
2203                          ;*Macro unroll:  test "2 1 >", TRUE
2203   31 00 4A               LD   SP,STACK   
2206   CD 8A 0B               CALL   coldInit   
2209   CD 69 48               CALL   execStr   
220C   32 20 31 20 3E 00      .CSTR   "2 1 >"   
2212   CD CA 0A               CALL   flushBuffer   
2215                          ;*Macro unroll:  expect "2 1 >",TRUE
2215   E1                     POP   HL   
2216   E5                     PUSH   HL   
2217   11 FF FF               LD   DE,TRUE   
221A   B7                     OR   A   
221B   ED 52                  SBC   HL,DE   
221D   7D                     LD   A,L   
221E   B4                     OR   H   
221F   CA 7F 22               JP   Z,expectM_0_2701S45   
2222   CD 42 0B               CALL   printStr   
2225   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2231   CD 42 0B               CALL   printStr   
2234   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2243   21 FF FF               LD   hl,TRUE   
2246   E5                     PUSH   hl   
2247   E5                     PUSH   hl   
2248   CD 61 0C               CALL   run   
224B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2253   CD CA 0A               CALL   flushBuffer   
2256   CD 42 0B               CALL   printStr   
2259   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2266   E1                     POP   hl   
2267   E5                     PUSH   hl   
2268   E5                     PUSH   hl   
2269   CD 61 0C               CALL   run   
226C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
227B   CD CA 0A               CALL   flushBuffer   
227E   76                     HALT      
227F                EXPECTM_0_2701S45:      
227F   E1                     POP   HL   
2280                          ;*Macro unroll:  test "3 3 >", FALSE
2280   31 00 4A               LD   SP,STACK   
2283   CD 8A 0B               CALL   coldInit   
2286   CD 69 48               CALL   execStr   
2289   33 20 33 20 3E 00      .CSTR   "3 3 >"   
228F   CD CA 0A               CALL   flushBuffer   
2292                          ;*Macro unroll:  expect "3 3 >",FALSE
2292   E1                     POP   HL   
2293   E5                     PUSH   HL   
2294   11 00 00               LD   DE,FALSE   
2297   B7                     OR   A   
2298   ED 52                  SBC   HL,DE   
229A   7D                     LD   A,L   
229B   B4                     OR   H   
229C   CA FC 22               JP   Z,expectM_0_2702S45   
229F   CD 42 0B               CALL   printStr   
22A2   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
22AE   CD 42 0B               CALL   printStr   
22B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22C0   21 00 00               LD   hl,FALSE   
22C3   E5                     PUSH   hl   
22C4   E5                     PUSH   hl   
22C5   CD 61 0C               CALL   run   
22C8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22D0   CD CA 0A               CALL   flushBuffer   
22D3   CD 42 0B               CALL   printStr   
22D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22E3   E1                     POP   hl   
22E4   E5                     PUSH   hl   
22E5   E5                     PUSH   hl   
22E6   CD 61 0C               CALL   run   
22E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22F8   CD CA 0A               CALL   flushBuffer   
22FB   76                     HALT      
22FC                EXPECTM_0_2702S45:      
22FC   E1                     POP   HL   
22FD                          ;*Macro unroll:  test "4 3 >", TRUE
22FD   31 00 4A               LD   SP,STACK   
2300   CD 8A 0B               CALL   coldInit   
2303   CD 69 48               CALL   execStr   
2306   34 20 33 20 3E 00      .CSTR   "4 3 >"   
230C   CD CA 0A               CALL   flushBuffer   
230F                          ;*Macro unroll:  expect "4 3 >",TRUE
230F   E1                     POP   HL   
2310   E5                     PUSH   HL   
2311   11 FF FF               LD   DE,TRUE   
2314   B7                     OR   A   
2315   ED 52                  SBC   HL,DE   
2317   7D                     LD   A,L   
2318   B4                     OR   H   
2319   CA 79 23               JP   Z,expectM_0_2703S45   
231C   CD 42 0B               CALL   printStr   
231F   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
232B   CD 42 0B               CALL   printStr   
232E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
233D   21 FF FF               LD   hl,TRUE   
2340   E5                     PUSH   hl   
2341   E5                     PUSH   hl   
2342   CD 61 0C               CALL   run   
2345   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
234D   CD CA 0A               CALL   flushBuffer   
2350   CD 42 0B               CALL   printStr   
2353   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2360   E1                     POP   hl   
2361   E5                     PUSH   hl   
2362   E5                     PUSH   hl   
2363   CD 61 0C               CALL   run   
2366   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2375   CD CA 0A               CALL   flushBuffer   
2378   76                     HALT      
2379                EXPECTM_0_2703S45:      
2379   E1                     POP   HL   
237A                          ;*Macro unroll:  test "2 2 <=", TRUE
237A   31 00 4A               LD   SP,STACK   
237D   CD 8A 0B               CALL   coldInit   
2380   CD 69 48               CALL   execStr   
2383   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
238A   CD CA 0A               CALL   flushBuffer   
238D                          ;*Macro unroll:  expect "2 2 <=",TRUE
238D   E1                     POP   HL   
238E   E5                     PUSH   HL   
238F   11 FF FF               LD   DE,TRUE   
2392   B7                     OR   A   
2393   ED 52                  SBC   HL,DE   
2395   7D                     LD   A,L   
2396   B4                     OR   H   
2397   CA F8 23               JP   Z,expectM_0_2704S45   
239A   CD 42 0B               CALL   printStr   
239D   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
23AA   CD 42 0B               CALL   printStr   
23AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23BC   21 FF FF               LD   hl,TRUE   
23BF   E5                     PUSH   hl   
23C0   E5                     PUSH   hl   
23C1   CD 61 0C               CALL   run   
23C4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23CC   CD CA 0A               CALL   flushBuffer   
23CF   CD 42 0B               CALL   printStr   
23D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23DF   E1                     POP   hl   
23E0   E5                     PUSH   hl   
23E1   E5                     PUSH   hl   
23E2   CD 61 0C               CALL   run   
23E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23F4   CD CA 0A               CALL   flushBuffer   
23F7   76                     HALT      
23F8                EXPECTM_0_2704S45:      
23F8   E1                     POP   HL   
23F9                          ;*Macro unroll:  test "2 2 >=", TRUE
23F9   31 00 4A               LD   SP,STACK   
23FC   CD 8A 0B               CALL   coldInit   
23FF   CD 69 48               CALL   execStr   
2402   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2409   CD CA 0A               CALL   flushBuffer   
240C                          ;*Macro unroll:  expect "2 2 >=",TRUE
240C   E1                     POP   HL   
240D   E5                     PUSH   HL   
240E   11 FF FF               LD   DE,TRUE   
2411   B7                     OR   A   
2412   ED 52                  SBC   HL,DE   
2414   7D                     LD   A,L   
2415   B4                     OR   H   
2416   CA 77 24               JP   Z,expectM_0_2705S45   
2419   CD 42 0B               CALL   printStr   
241C   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2429   CD 42 0B               CALL   printStr   
242C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
243B   21 FF FF               LD   hl,TRUE   
243E   E5                     PUSH   hl   
243F   E5                     PUSH   hl   
2440   CD 61 0C               CALL   run   
2443   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
244B   CD CA 0A               CALL   flushBuffer   
244E   CD 42 0B               CALL   printStr   
2451   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
245E   E1                     POP   hl   
245F   E5                     PUSH   hl   
2460   E5                     PUSH   hl   
2461   CD 61 0C               CALL   run   
2464   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2473   CD CA 0A               CALL   flushBuffer   
2476   76                     HALT      
2477                EXPECTM_0_2705S45:      
2477   E1                     POP   HL   
2478                          ;*Macro unroll:  test "3 1 <<", 6
2478   31 00 4A               LD   SP,STACK   
247B   CD 8A 0B               CALL   coldInit   
247E   CD 69 48               CALL   execStr   
2481   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
2488   CD CA 0A               CALL   flushBuffer   
248B                          ;*Macro unroll:  expect "3 1 <<",6
248B   E1                     POP   HL   
248C   E5                     PUSH   HL   
248D   11 06 00               LD   DE,6   
2490   B7                     OR   A   
2491   ED 52                  SBC   HL,DE   
2493   7D                     LD   A,L   
2494   B4                     OR   H   
2495   CA F6 24               JP   Z,expectM_0_2706S45   
2498   CD 42 0B               CALL   printStr   
249B   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
24A8   CD 42 0B               CALL   printStr   
24AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24BA   21 06 00               LD   hl,6   
24BD   E5                     PUSH   hl   
24BE   E5                     PUSH   hl   
24BF   CD 61 0C               CALL   run   
24C2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24CA   CD CA 0A               CALL   flushBuffer   
24CD   CD 42 0B               CALL   printStr   
24D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24DD   E1                     POP   hl   
24DE   E5                     PUSH   hl   
24DF   E5                     PUSH   hl   
24E0   CD 61 0C               CALL   run   
24E3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24F2   CD CA 0A               CALL   flushBuffer   
24F5   76                     HALT      
24F6                EXPECTM_0_2706S45:      
24F6   E1                     POP   HL   
24F7                          ;*Macro unroll:  test "10 1 >>", 5
24F7   31 00 4A               LD   SP,STACK   
24FA   CD 8A 0B               CALL   coldInit   
24FD   CD 69 48               CALL   execStr   
2500   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2508   CD CA 0A               CALL   flushBuffer   
250B                          ;*Macro unroll:  expect "10 1 >>",5
250B   E1                     POP   HL   
250C   E5                     PUSH   HL   
250D   11 05 00               LD   DE,5   
2510   B7                     OR   A   
2511   ED 52                  SBC   HL,DE   
2513   7D                     LD   A,L   
2514   B4                     OR   H   
2515   CA 77 25               JP   Z,expectM_0_2707S45   
2518   CD 42 0B               CALL   printStr   
251B   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2529   CD 42 0B               CALL   printStr   
252C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
253B   21 05 00               LD   hl,5   
253E   E5                     PUSH   hl   
253F   E5                     PUSH   hl   
2540   CD 61 0C               CALL   run   
2543   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
254B   CD CA 0A               CALL   flushBuffer   
254E   CD 42 0B               CALL   printStr   
2551   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
255E   E1                     POP   hl   
255F   E5                     PUSH   hl   
2560   E5                     PUSH   hl   
2561   CD 61 0C               CALL   run   
2564   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2573   CD CA 0A               CALL   flushBuffer   
2576   76                     HALT      
2577                EXPECTM_0_2707S45:      
2577   E1                     POP   HL   
2578                          ;*Macro unroll:  test "1 x = x", 1
2578   31 00 4A               LD   SP,STACK   
257B   CD 8A 0B               CALL   coldInit   
257E   CD 69 48               CALL   execStr   
2581   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
2589   CD CA 0A               CALL   flushBuffer   
258C                          ;*Macro unroll:  expect "1 x = x",1
258C   E1                     POP   HL   
258D   E5                     PUSH   HL   
258E   11 01 00               LD   DE,1   
2591   B7                     OR   A   
2592   ED 52                  SBC   HL,DE   
2594   7D                     LD   A,L   
2595   B4                     OR   H   
2596   CA F8 25               JP   Z,expectM_0_2708S45   
2599   CD 42 0B               CALL   printStr   
259C   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
25AA   CD 42 0B               CALL   printStr   
25AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25BC   21 01 00               LD   hl,1   
25BF   E5                     PUSH   hl   
25C0   E5                     PUSH   hl   
25C1   CD 61 0C               CALL   run   
25C4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25CC   CD CA 0A               CALL   flushBuffer   
25CF   CD 42 0B               CALL   printStr   
25D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25DF   E1                     POP   hl   
25E0   E5                     PUSH   hl   
25E1   E5                     PUSH   hl   
25E2   CD 61 0C               CALL   run   
25E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25F4   CD CA 0A               CALL   flushBuffer   
25F7   76                     HALT      
25F8                EXPECTM_0_2708S45:      
25F8   E1                     POP   HL   
25F9                          ;*Macro unroll:  test "1{}^", 1
25F9   31 00 4A               LD   SP,STACK   
25FC   CD 8A 0B               CALL   coldInit   
25FF   CD 69 48               CALL   execStr   
2602   31 7B 7D 5E 00         .CSTR   "1{}^"   
2607   CD CA 0A               CALL   flushBuffer   
260A                          ;*Macro unroll:  expect "1{}^",1
260A   E1                     POP   HL   
260B   E5                     PUSH   HL   
260C   11 01 00               LD   DE,1   
260F   B7                     OR   A   
2610   ED 52                  SBC   HL,DE   
2612   7D                     LD   A,L   
2613   B4                     OR   H   
2614   CA 73 26               JP   Z,expectM_0_2709S45   
2617   CD 42 0B               CALL   printStr   
261A   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2625   CD 42 0B               CALL   printStr   
2628   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2637   21 01 00               LD   hl,1   
263A   E5                     PUSH   hl   
263B   E5                     PUSH   hl   
263C   CD 61 0C               CALL   run   
263F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2647   CD CA 0A               CALL   flushBuffer   
264A   CD 42 0B               CALL   printStr   
264D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
265A   E1                     POP   hl   
265B   E5                     PUSH   hl   
265C   E5                     PUSH   hl   
265D   CD 61 0C               CALL   run   
2660   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
266F   CD CA 0A               CALL   flushBuffer   
2672   76                     HALT      
2673                EXPECTM_0_2709S45:      
2673   E1                     POP   HL   
2674                          ;*Macro unroll:  test "{1}^", 1
2674   31 00 4A               LD   SP,STACK   
2677   CD 8A 0B               CALL   coldInit   
267A   CD 69 48               CALL   execStr   
267D   7B 31 7D 5E 00         .CSTR   "{1}^"   
2682   CD CA 0A               CALL   flushBuffer   
2685                          ;*Macro unroll:  expect "{1}^",1
2685   E1                     POP   HL   
2686   E5                     PUSH   HL   
2687   11 01 00               LD   DE,1   
268A   B7                     OR   A   
268B   ED 52                  SBC   HL,DE   
268D   7D                     LD   A,L   
268E   B4                     OR   H   
268F   CA EE 26               JP   Z,expectM_0_2710S45   
2692   CD 42 0B               CALL   printStr   
2695   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
26A0   CD 42 0B               CALL   printStr   
26A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26B2   21 01 00               LD   hl,1   
26B5   E5                     PUSH   hl   
26B6   E5                     PUSH   hl   
26B7   CD 61 0C               CALL   run   
26BA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26C2   CD CA 0A               CALL   flushBuffer   
26C5   CD 42 0B               CALL   printStr   
26C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26D5   E1                     POP   hl   
26D6   E5                     PUSH   hl   
26D7   E5                     PUSH   hl   
26D8   CD 61 0C               CALL   run   
26DB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26EA   CD CA 0A               CALL   flushBuffer   
26ED   76                     HALT      
26EE                EXPECTM_0_2710S45:      
26EE   E1                     POP   HL   
26EF                          ;*Macro unroll:  test "{{1}^}^", 1
26EF   31 00 4A               LD   SP,STACK   
26F2   CD 8A 0B               CALL   coldInit   
26F5   CD 69 48               CALL   execStr   
26F8   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
2700   CD CA 0A               CALL   flushBuffer   
2703                          ;*Macro unroll:  expect "{{1}^}^",1
2703   E1                     POP   HL   
2704   E5                     PUSH   HL   
2705   11 01 00               LD   DE,1   
2708   B7                     OR   A   
2709   ED 52                  SBC   HL,DE   
270B   7D                     LD   A,L   
270C   B4                     OR   H   
270D   CA 6F 27               JP   Z,expectM_0_2711S45   
2710   CD 42 0B               CALL   printStr   
2713   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2721   CD 42 0B               CALL   printStr   
2724   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2733   21 01 00               LD   hl,1   
2736   E5                     PUSH   hl   
2737   E5                     PUSH   hl   
2738   CD 61 0C               CALL   run   
273B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2743   CD CA 0A               CALL   flushBuffer   
2746   CD 42 0B               CALL   printStr   
2749   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2756   E1                     POP   hl   
2757   E5                     PUSH   hl   
2758   E5                     PUSH   hl   
2759   CD 61 0C               CALL   run   
275C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
276B   CD CA 0A               CALL   flushBuffer   
276E   76                     HALT      
276F                EXPECTM_0_2711S45:      
276F   E1                     POP   HL   
2770                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2770   31 00 4A               LD   SP,STACK   
2773   CD 8A 0B               CALL   coldInit   
2776   CD 69 48               CALL   execStr   
2779   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
2784   CD CA 0A               CALL   flushBuffer   
2787                          ;*Macro unroll:  expect "{{{1}^}^}^",1
2787   E1                     POP   HL   
2788   E5                     PUSH   HL   
2789   11 01 00               LD   DE,1   
278C   B7                     OR   A   
278D   ED 52                  SBC   HL,DE   
278F   7D                     LD   A,L   
2790   B4                     OR   H   
2791   CA F6 27               JP   Z,expectM_0_2712S45   
2794   CD 42 0B               CALL   printStr   
2797   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
27A8   CD 42 0B               CALL   printStr   
27AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27BA   21 01 00               LD   hl,1   
27BD   E5                     PUSH   hl   
27BE   E5                     PUSH   hl   
27BF   CD 61 0C               CALL   run   
27C2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27CA   CD CA 0A               CALL   flushBuffer   
27CD   CD 42 0B               CALL   printStr   
27D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27DD   E1                     POP   hl   
27DE   E5                     PUSH   hl   
27DF   E5                     PUSH   hl   
27E0   CD 61 0C               CALL   run   
27E3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27F2   CD CA 0A               CALL   flushBuffer   
27F5   76                     HALT      
27F6                EXPECTM_0_2712S45:      
27F6   E1                     POP   HL   
27F7                          ;*Macro unroll:  test "5 /f{10} ?", 5
27F7   31 00 4A               LD   SP,STACK   
27FA   CD 8A 0B               CALL   coldInit   
27FD   CD 69 48               CALL   execStr   
2800   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
280B   CD CA 0A               CALL   flushBuffer   
280E                          ;*Macro unroll:  expect "5 /f{10} ?",5
280E   E1                     POP   HL   
280F   E5                     PUSH   HL   
2810   11 05 00               LD   DE,5   
2813   B7                     OR   A   
2814   ED 52                  SBC   HL,DE   
2816   7D                     LD   A,L   
2817   B4                     OR   H   
2818   CA 7D 28               JP   Z,expectM_0_2713S45   
281B   CD 42 0B               CALL   printStr   
281E   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
282F   CD 42 0B               CALL   printStr   
2832   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2841   21 05 00               LD   hl,5   
2844   E5                     PUSH   hl   
2845   E5                     PUSH   hl   
2846   CD 61 0C               CALL   run   
2849   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2851   CD CA 0A               CALL   flushBuffer   
2854   CD 42 0B               CALL   printStr   
2857   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2864   E1                     POP   hl   
2865   E5                     PUSH   hl   
2866   E5                     PUSH   hl   
2867   CD 61 0C               CALL   run   
286A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2879   CD CA 0A               CALL   flushBuffer   
287C   76                     HALT      
287D                EXPECTM_0_2713S45:      
287D   E1                     POP   HL   
287E                          ;*Macro unroll:  test "5 /t{10} ? +", 15
287E   31 00 4A               LD   SP,STACK   
2881   CD 8A 0B               CALL   coldInit   
2884   CD 69 48               CALL   execStr   
2887   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
2894   CD CA 0A               CALL   flushBuffer   
2897                          ;*Macro unroll:  expect "5 /t{10} ? +",15
2897   E1                     POP   HL   
2898   E5                     PUSH   HL   
2899   11 0F 00               LD   DE,15   
289C   B7                     OR   A   
289D   ED 52                  SBC   HL,DE   
289F   7D                     LD   A,L   
28A0   B4                     OR   H   
28A1   CA 08 29               JP   Z,expectM_0_2714S45   
28A4   CD 42 0B               CALL   printStr   
28A7   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
28BA   CD 42 0B               CALL   printStr   
28BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28CC   21 0F 00               LD   hl,15   
28CF   E5                     PUSH   hl   
28D0   E5                     PUSH   hl   
28D1   CD 61 0C               CALL   run   
28D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28DC   CD CA 0A               CALL   flushBuffer   
28DF   CD 42 0B               CALL   printStr   
28E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28EF   E1                     POP   hl   
28F0   E5                     PUSH   hl   
28F1   E5                     PUSH   hl   
28F2   CD 61 0C               CALL   run   
28F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2904   CD CA 0A               CALL   flushBuffer   
2907   76                     HALT      
2908                EXPECTM_0_2714S45:      
2908   E1                     POP   HL   
2909                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2909   31 00 4A               LD   SP,STACK   
290C   CD 8A 0B               CALL   coldInit   
290F   CD 69 48               CALL   execStr   
2912   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
2924   CD CA 0A               CALL   flushBuffer   
2927                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
2927   E1                     POP   HL   
2928   E5                     PUSH   HL   
2929   11 15 00               LD   DE,21   
292C   B7                     OR   A   
292D   ED 52                  SBC   HL,DE   
292F   7D                     LD   A,L   
2930   B4                     OR   H   
2931   CA 9D 29               JP   Z,expectM_0_2715S45   
2934   CD 42 0B               CALL   printStr   
2937   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
294F   CD 42 0B               CALL   printStr   
2952   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2961   21 15 00               LD   hl,21   
2964   E5                     PUSH   hl   
2965   E5                     PUSH   hl   
2966   CD 61 0C               CALL   run   
2969   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2971   CD CA 0A               CALL   flushBuffer   
2974   CD 42 0B               CALL   printStr   
2977   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2984   E1                     POP   hl   
2985   E5                     PUSH   hl   
2986   E5                     PUSH   hl   
2987   CD 61 0C               CALL   run   
298A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2999   CD CA 0A               CALL   flushBuffer   
299C   76                     HALT      
299D                EXPECTM_0_2715S45:      
299D   E1                     POP   HL   
299E                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
299E   31 00 4A               LD   SP,STACK   
29A1   CD 8A 0B               CALL   coldInit   
29A4   CD 69 48               CALL   execStr   
29A7   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
29B9   CD CA 0A               CALL   flushBuffer   
29BC                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
29BC   E1                     POP   HL   
29BD   E5                     PUSH   HL   
29BE   11 0B 00               LD   DE,11   
29C1   B7                     OR   A   
29C2   ED 52                  SBC   HL,DE   
29C4   7D                     LD   A,L   
29C5   B4                     OR   H   
29C6   CA 32 2A               JP   Z,expectM_0_2716S45   
29C9   CD 42 0B               CALL   printStr   
29CC   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
29E4   CD 42 0B               CALL   printStr   
29E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29F6   21 0B 00               LD   hl,11   
29F9   E5                     PUSH   hl   
29FA   E5                     PUSH   hl   
29FB   CD 61 0C               CALL   run   
29FE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A06   CD CA 0A               CALL   flushBuffer   
2A09   CD 42 0B               CALL   printStr   
2A0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A19   E1                     POP   hl   
2A1A   E5                     PUSH   hl   
2A1B   E5                     PUSH   hl   
2A1C   CD 61 0C               CALL   run   
2A1F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A2E   CD CA 0A               CALL   flushBuffer   
2A31   76                     HALT      
2A32                EXPECTM_0_2716S45:      
2A32   E1                     POP   HL   
2A33                          ;*Macro unroll:  test ": -2%", $0000
2A33   31 00 4A               LD   SP,STACK   
2A36   CD 8A 0B               CALL   coldInit   
2A39   CD 69 48               CALL   execStr   
2A3C   3A 20 2D 32 25 00      .CSTR   ": -2%"   
2A42   CD CA 0A               CALL   flushBuffer   
2A45                          ;*Macro unroll:  expect ": -2%",$0000
2A45   E1                     POP   HL   
2A46   E5                     PUSH   HL   
2A47   11 00 00               LD   DE,$0000   
2A4A   B7                     OR   A   
2A4B   ED 52                  SBC   HL,DE   
2A4D   7D                     LD   A,L   
2A4E   B4                     OR   H   
2A4F   CA AF 2A               JP   Z,expectM_0_2717S45   
2A52   CD 42 0B               CALL   printStr   
2A55   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
2A61   CD 42 0B               CALL   printStr   
2A64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A73   21 00 00               LD   hl,$0000   
2A76   E5                     PUSH   hl   
2A77   E5                     PUSH   hl   
2A78   CD 61 0C               CALL   run   
2A7B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A83   CD CA 0A               CALL   flushBuffer   
2A86   CD 42 0B               CALL   printStr   
2A89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A96   E1                     POP   hl   
2A97   E5                     PUSH   hl   
2A98   E5                     PUSH   hl   
2A99   CD 61 0C               CALL   run   
2A9C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AAB   CD CA 0A               CALL   flushBuffer   
2AAE   76                     HALT      
2AAF                EXPECTM_0_2717S45:      
2AAF   E1                     POP   HL   
2AB0                          ;*Macro unroll:  test ":a -1%", $0001
2AB0   31 00 4A               LD   SP,STACK   
2AB3   CD 8A 0B               CALL   coldInit   
2AB6   CD 69 48               CALL   execStr   
2AB9   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
2AC0   CD CA 0A               CALL   flushBuffer   
2AC3                          ;*Macro unroll:  expect ":a -1%",$0001
2AC3   E1                     POP   HL   
2AC4   E5                     PUSH   HL   
2AC5   11 01 00               LD   DE,$0001   
2AC8   B7                     OR   A   
2AC9   ED 52                  SBC   HL,DE   
2ACB   7D                     LD   A,L   
2ACC   B4                     OR   H   
2ACD   CA 2E 2B               JP   Z,expectM_0_2718S45   
2AD0   CD 42 0B               CALL   printStr   
2AD3   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
2AE0   CD 42 0B               CALL   printStr   
2AE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AF2   21 01 00               LD   hl,$0001   
2AF5   E5                     PUSH   hl   
2AF6   E5                     PUSH   hl   
2AF7   CD 61 0C               CALL   run   
2AFA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B02   CD CA 0A               CALL   flushBuffer   
2B05   CD 42 0B               CALL   printStr   
2B08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B15   E1                     POP   hl   
2B16   E5                     PUSH   hl   
2B17   E5                     PUSH   hl   
2B18   CD 61 0C               CALL   run   
2B1B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B2A   CD CA 0A               CALL   flushBuffer   
2B2D   76                     HALT      
2B2E                EXPECTM_0_2718S45:      
2B2E   E1                     POP   HL   
2B2F                          ;*Macro unroll:  test ":a: -1%", $0001
2B2F   31 00 4A               LD   SP,STACK   
2B32   CD 8A 0B               CALL   coldInit   
2B35   CD 69 48               CALL   execStr   
2B38   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
2B40   CD CA 0A               CALL   flushBuffer   
2B43                          ;*Macro unroll:  expect ":a: -1%",$0001
2B43   E1                     POP   HL   
2B44   E5                     PUSH   HL   
2B45   11 01 00               LD   DE,$0001   
2B48   B7                     OR   A   
2B49   ED 52                  SBC   HL,DE   
2B4B   7D                     LD   A,L   
2B4C   B4                     OR   H   
2B4D   CA AF 2B               JP   Z,expectM_0_2719S45   
2B50   CD 42 0B               CALL   printStr   
2B53   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
2B61   CD 42 0B               CALL   printStr   
2B64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B73   21 01 00               LD   hl,$0001   
2B76   E5                     PUSH   hl   
2B77   E5                     PUSH   hl   
2B78   CD 61 0C               CALL   run   
2B7B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B83   CD CA 0A               CALL   flushBuffer   
2B86   CD 42 0B               CALL   printStr   
2B89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B96   E1                     POP   hl   
2B97   E5                     PUSH   hl   
2B98   E5                     PUSH   hl   
2B99   CD 61 0C               CALL   run   
2B9C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BAB   CD CA 0A               CALL   flushBuffer   
2BAE   76                     HALT      
2BAF                EXPECTM_0_2719S45:      
2BAF   E1                     POP   HL   
2BB0                          ;*Macro unroll:  test ":a:b -1%", $0102
2BB0   31 00 4A               LD   SP,STACK   
2BB3   CD 8A 0B               CALL   coldInit   
2BB6   CD 69 48               CALL   execStr   
2BB9   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
2BC2   CD CA 0A               CALL   flushBuffer   
2BC5                          ;*Macro unroll:  expect ":a:b -1%",$0102
2BC5   E1                     POP   HL   
2BC6   E5                     PUSH   HL   
2BC7   11 02 01               LD   DE,$0102   
2BCA   B7                     OR   A   
2BCB   ED 52                  SBC   HL,DE   
2BCD   7D                     LD   A,L   
2BCE   B4                     OR   H   
2BCF   CA 32 2C               JP   Z,expectM_0_2720S45   
2BD2   CD 42 0B               CALL   printStr   
2BD5   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
2BE4   CD 42 0B               CALL   printStr   
2BE7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BF6   21 02 01               LD   hl,$0102   
2BF9   E5                     PUSH   hl   
2BFA   E5                     PUSH   hl   
2BFB   CD 61 0C               CALL   run   
2BFE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C06   CD CA 0A               CALL   flushBuffer   
2C09   CD 42 0B               CALL   printStr   
2C0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C19   E1                     POP   hl   
2C1A   E5                     PUSH   hl   
2C1B   E5                     PUSH   hl   
2C1C   CD 61 0C               CALL   run   
2C1F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C2E   CD CA 0A               CALL   flushBuffer   
2C31   76                     HALT      
2C32                EXPECTM_0_2720S45:      
2C32   E1                     POP   HL   
2C33                          ;*Macro unroll:  test "::b -1%", $0101
2C33   31 00 4A               LD   SP,STACK   
2C36   CD 8A 0B               CALL   coldInit   
2C39   CD 69 48               CALL   execStr   
2C3C   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
2C44   CD CA 0A               CALL   flushBuffer   
2C47                          ;*Macro unroll:  expect "::b -1%",$0101
2C47   E1                     POP   HL   
2C48   E5                     PUSH   HL   
2C49   11 01 01               LD   DE,$0101   
2C4C   B7                     OR   A   
2C4D   ED 52                  SBC   HL,DE   
2C4F   7D                     LD   A,L   
2C50   B4                     OR   H   
2C51   CA B3 2C               JP   Z,expectM_0_2721S45   
2C54   CD 42 0B               CALL   printStr   
2C57   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
2C65   CD 42 0B               CALL   printStr   
2C68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C77   21 01 01               LD   hl,$0101   
2C7A   E5                     PUSH   hl   
2C7B   E5                     PUSH   hl   
2C7C   CD 61 0C               CALL   run   
2C7F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C87   CD CA 0A               CALL   flushBuffer   
2C8A   CD 42 0B               CALL   printStr   
2C8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C9A   E1                     POP   hl   
2C9B   E5                     PUSH   hl   
2C9C   E5                     PUSH   hl   
2C9D   CD 61 0C               CALL   run   
2CA0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CAF   CD CA 0A               CALL   flushBuffer   
2CB2   76                     HALT      
2CB3                EXPECTM_0_2721S45:      
2CB3   E1                     POP   HL   
2CB4                          ;*Macro unroll:  test ":{2};^", 2
2CB4   31 00 4A               LD   SP,STACK   
2CB7   CD 8A 0B               CALL   coldInit   
2CBA   CD 69 48               CALL   execStr   
2CBD   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
2CC4   CD CA 0A               CALL   flushBuffer   
2CC7                          ;*Macro unroll:  expect ":{2};^",2
2CC7   E1                     POP   HL   
2CC8   E5                     PUSH   HL   
2CC9   11 02 00               LD   DE,2   
2CCC   B7                     OR   A   
2CCD   ED 52                  SBC   HL,DE   
2CCF   7D                     LD   A,L   
2CD0   B4                     OR   H   
2CD1   CA 32 2D               JP   Z,expectM_0_2722S45   
2CD4   CD 42 0B               CALL   printStr   
2CD7   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2CE4   CD 42 0B               CALL   printStr   
2CE7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CF6   21 02 00               LD   hl,2   
2CF9   E5                     PUSH   hl   
2CFA   E5                     PUSH   hl   
2CFB   CD 61 0C               CALL   run   
2CFE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D06   CD CA 0A               CALL   flushBuffer   
2D09   CD 42 0B               CALL   printStr   
2D0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D19   E1                     POP   hl   
2D1A   E5                     PUSH   hl   
2D1B   E5                     PUSH   hl   
2D1C   CD 61 0C               CALL   run   
2D1F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D2E   CD CA 0A               CALL   flushBuffer   
2D31   76                     HALT      
2D32                EXPECTM_0_2722S45:      
2D32   E1                     POP   HL   
2D33                          ;*Macro unroll:  test ":a{2};^", 2
2D33   31 00 4A               LD   SP,STACK   
2D36   CD 8A 0B               CALL   coldInit   
2D39   CD 69 48               CALL   execStr   
2D3C   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2D44   CD CA 0A               CALL   flushBuffer   
2D47                          ;*Macro unroll:  expect ":a{2};^",2
2D47   E1                     POP   HL   
2D48   E5                     PUSH   HL   
2D49   11 02 00               LD   DE,2   
2D4C   B7                     OR   A   
2D4D   ED 52                  SBC   HL,DE   
2D4F   7D                     LD   A,L   
2D50   B4                     OR   H   
2D51   CA B3 2D               JP   Z,expectM_0_2723S45   
2D54   CD 42 0B               CALL   printStr   
2D57   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2D65   CD 42 0B               CALL   printStr   
2D68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D77   21 02 00               LD   hl,2   
2D7A   E5                     PUSH   hl   
2D7B   E5                     PUSH   hl   
2D7C   CD 61 0C               CALL   run   
2D7F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D87   CD CA 0A               CALL   flushBuffer   
2D8A   CD 42 0B               CALL   printStr   
2D8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D9A   E1                     POP   hl   
2D9B   E5                     PUSH   hl   
2D9C   E5                     PUSH   hl   
2D9D   CD 61 0C               CALL   run   
2DA0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DAF   CD CA 0A               CALL   flushBuffer   
2DB2   76                     HALT      
2DB3                EXPECTM_0_2723S45:      
2DB3   E1                     POP   HL   
2DB4                          ;*Macro unroll:  test "5 :a{$a};^", 5
2DB4   31 00 4A               LD   SP,STACK   
2DB7   CD 8A 0B               CALL   coldInit   
2DBA   CD 69 48               CALL   execStr   
2DBD   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
2DC8   CD CA 0A               CALL   flushBuffer   
2DCB                          ;*Macro unroll:  expect "5 :a{$a};^",5
2DCB   E1                     POP   HL   
2DCC   E5                     PUSH   HL   
2DCD   11 05 00               LD   DE,5   
2DD0   B7                     OR   A   
2DD1   ED 52                  SBC   HL,DE   
2DD3   7D                     LD   A,L   
2DD4   B4                     OR   H   
2DD5   CA 3A 2E               JP   Z,expectM_0_2724S45   
2DD8   CD 42 0B               CALL   printStr   
2DDB   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2DEC   CD 42 0B               CALL   printStr   
2DEF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DFE   21 05 00               LD   hl,5   
2E01   E5                     PUSH   hl   
2E02   E5                     PUSH   hl   
2E03   CD 61 0C               CALL   run   
2E06   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E0E   CD CA 0A               CALL   flushBuffer   
2E11   CD 42 0B               CALL   printStr   
2E14   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E21   E1                     POP   hl   
2E22   E5                     PUSH   hl   
2E23   E5                     PUSH   hl   
2E24   CD 61 0C               CALL   run   
2E27   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E36   CD CA 0A               CALL   flushBuffer   
2E39   76                     HALT      
2E3A                EXPECTM_0_2724S45:      
2E3A   E1                     POP   HL   
2E3B                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2E3B   31 00 4A               LD   SP,STACK   
2E3E   CD 8A 0B               CALL   coldInit   
2E41   CD 69 48               CALL   execStr   
2E44   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2E51   CD CA 0A               CALL   flushBuffer   
2E54                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2E54   E1                     POP   HL   
2E55   E5                     PUSH   HL   
2E56   11 05 00               LD   DE,5   
2E59   B7                     OR   A   
2E5A   ED 52                  SBC   HL,DE   
2E5C   7D                     LD   A,L   
2E5D   B4                     OR   H   
2E5E   CA C5 2E               JP   Z,expectM_0_2725S45   
2E61   CD 42 0B               CALL   printStr   
2E64   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2E77   CD 42 0B               CALL   printStr   
2E7A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E89   21 05 00               LD   hl,5   
2E8C   E5                     PUSH   hl   
2E8D   E5                     PUSH   hl   
2E8E   CD 61 0C               CALL   run   
2E91   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E99   CD CA 0A               CALL   flushBuffer   
2E9C   CD 42 0B               CALL   printStr   
2E9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EAC   E1                     POP   hl   
2EAD   E5                     PUSH   hl   
2EAE   E5                     PUSH   hl   
2EAF   CD 61 0C               CALL   run   
2EB2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EC1   CD CA 0A               CALL   flushBuffer   
2EC4   76                     HALT      
2EC5                EXPECTM_0_2725S45:      
2EC5   E1                     POP   HL   
2EC6                          ;*Macro unroll:  test ":a{{2}^};^", 2
2EC6   31 00 4A               LD   SP,STACK   
2EC9   CD 8A 0B               CALL   coldInit   
2ECC   CD 69 48               CALL   execStr   
2ECF   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2EDA   CD CA 0A               CALL   flushBuffer   
2EDD                          ;*Macro unroll:  expect ":a{{2}^};^",2
2EDD   E1                     POP   HL   
2EDE   E5                     PUSH   HL   
2EDF   11 02 00               LD   DE,2   
2EE2   B7                     OR   A   
2EE3   ED 52                  SBC   HL,DE   
2EE5   7D                     LD   A,L   
2EE6   B4                     OR   H   
2EE7   CA 4C 2F               JP   Z,expectM_0_2726S45   
2EEA   CD 42 0B               CALL   printStr   
2EED   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2EFE   CD 42 0B               CALL   printStr   
2F01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F10   21 02 00               LD   hl,2   
2F13   E5                     PUSH   hl   
2F14   E5                     PUSH   hl   
2F15   CD 61 0C               CALL   run   
2F18   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F20   CD CA 0A               CALL   flushBuffer   
2F23   CD 42 0B               CALL   printStr   
2F26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F33   E1                     POP   hl   
2F34   E5                     PUSH   hl   
2F35   E5                     PUSH   hl   
2F36   CD 61 0C               CALL   run   
2F39   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F48   CD CA 0A               CALL   flushBuffer   
2F4B   76                     HALT      
2F4C                EXPECTM_0_2726S45:      
2F4C   E1                     POP   HL   
2F4D                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2F4D   31 00 4A               LD   SP,STACK   
2F50   CD 8A 0B               CALL   coldInit   
2F53   CD 69 48               CALL   execStr   
2F56   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2F66   CD CA 0A               CALL   flushBuffer   
2F69                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2F69   E1                     POP   HL   
2F6A   E5                     PUSH   HL   
2F6B   11 05 00               LD   DE,5   
2F6E   B7                     OR   A   
2F6F   ED 52                  SBC   HL,DE   
2F71   7D                     LD   A,L   
2F72   B4                     OR   H   
2F73   CA DD 2F               JP   Z,expectM_0_2727S45   
2F76   CD 42 0B               CALL   printStr   
2F79   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2F8F   CD 42 0B               CALL   printStr   
2F92   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FA1   21 05 00               LD   hl,5   
2FA4   E5                     PUSH   hl   
2FA5   E5                     PUSH   hl   
2FA6   CD 61 0C               CALL   run   
2FA9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FB1   CD CA 0A               CALL   flushBuffer   
2FB4   CD 42 0B               CALL   printStr   
2FB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FC4   E1                     POP   hl   
2FC5   E5                     PUSH   hl   
2FC6   E5                     PUSH   hl   
2FC7   CD 61 0C               CALL   run   
2FCA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FD9   CD CA 0A               CALL   flushBuffer   
2FDC   76                     HALT      
2FDD                EXPECTM_0_2727S45:      
2FDD   E1                     POP   HL   
2FDE                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2FDE   31 00 4A               LD   SP,STACK   
2FE1   CD 8A 0B               CALL   coldInit   
2FE4   CD 69 48               CALL   execStr   
2FE7   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2FF8   CD CA 0A               CALL   flushBuffer   
2FFB                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2FFB   E1                     POP   HL   
2FFC   E5                     PUSH   HL   
2FFD   11 01 00               LD   DE,1   
3000   B7                     OR   A   
3001   ED 52                  SBC   HL,DE   
3003   7D                     LD   A,L   
3004   B4                     OR   H   
3005   CA 70 30               JP   Z,expectM_0_2728S45   
3008   CD 42 0B               CALL   printStr   
300B   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
3022   CD 42 0B               CALL   printStr   
3025   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3034   21 01 00               LD   hl,1   
3037   E5                     PUSH   hl   
3038   E5                     PUSH   hl   
3039   CD 61 0C               CALL   run   
303C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3044   CD CA 0A               CALL   flushBuffer   
3047   CD 42 0B               CALL   printStr   
304A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3057   E1                     POP   hl   
3058   E5                     PUSH   hl   
3059   E5                     PUSH   hl   
305A   CD 61 0C               CALL   run   
305D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
306C   CD CA 0A               CALL   flushBuffer   
306F   76                     HALT      
3070                EXPECTM_0_2728S45:      
3070   E1                     POP   HL   
3071                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
3071   31 00 4A               LD   SP,STACK   
3074   CD 8A 0B               CALL   coldInit   
3077   CD 69 48               CALL   execStr   
307A   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
308E   CD CA 0A               CALL   flushBuffer   
3091                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
3091   E1                     POP   HL   
3092   E5                     PUSH   HL   
3093   11 07 00               LD   DE,7   
3096   B7                     OR   A   
3097   ED 52                  SBC   HL,DE   
3099   7D                     LD   A,L   
309A   B4                     OR   H   
309B   CA 09 31               JP   Z,expectM_0_2729S45   
309E   CD 42 0B               CALL   printStr   
30A1   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
30BB   CD 42 0B               CALL   printStr   
30BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30CD   21 07 00               LD   hl,7   
30D0   E5                     PUSH   hl   
30D1   E5                     PUSH   hl   
30D2   CD 61 0C               CALL   run   
30D5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30DD   CD CA 0A               CALL   flushBuffer   
30E0   CD 42 0B               CALL   printStr   
30E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30F0   E1                     POP   hl   
30F1   E5                     PUSH   hl   
30F2   E5                     PUSH   hl   
30F3   CD 61 0C               CALL   run   
30F6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3105   CD CA 0A               CALL   flushBuffer   
3108   76                     HALT      
3109                EXPECTM_0_2729S45:      
3109   E1                     POP   HL   
310A                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
310A   31 00 4A               LD   SP,STACK   
310D   CD 8A 0B               CALL   coldInit   
3110   CD 69 48               CALL   execStr   
3113   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
3129   CD CA 0A               CALL   flushBuffer   
312C                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
312C   E1                     POP   HL   
312D   E5                     PUSH   HL   
312E   11 06 00               LD   DE,6   
3131   B7                     OR   A   
3132   ED 52                  SBC   HL,DE   
3134   7D                     LD   A,L   
3135   B4                     OR   H   
3136   CA A6 31               JP   Z,expectM_0_2730S45   
3139   CD 42 0B               CALL   printStr   
313C   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
3158   CD 42 0B               CALL   printStr   
315B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
316A   21 06 00               LD   hl,6   
316D   E5                     PUSH   hl   
316E   E5                     PUSH   hl   
316F   CD 61 0C               CALL   run   
3172   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
317A   CD CA 0A               CALL   flushBuffer   
317D   CD 42 0B               CALL   printStr   
3180   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
318D   E1                     POP   hl   
318E   E5                     PUSH   hl   
318F   E5                     PUSH   hl   
3190   CD 61 0C               CALL   run   
3193   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31A2   CD CA 0A               CALL   flushBuffer   
31A5   76                     HALT      
31A6                EXPECTM_0_2730S45:      
31A6   E1                     POP   HL   
31A7                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
31A7   31 00 4A               LD   SP,STACK   
31AA   CD 8A 0B               CALL   coldInit   
31AD   CD 69 48               CALL   execStr   
31B0   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
31BF   CD CA 0A               CALL   flushBuffer   
31C2                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
31C2   E1                     POP   HL   
31C3   E5                     PUSH   HL   
31C4   11 02 00               LD   DE,2   
31C7   B7                     OR   A   
31C8   ED 52                  SBC   HL,DE   
31CA   7D                     LD   A,L   
31CB   B4                     OR   H   
31CC   CA 35 32               JP   Z,expectM_0_2731S45   
31CF   CD 42 0B               CALL   printStr   
31D2   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
31E7   CD 42 0B               CALL   printStr   
31EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31F9   21 02 00               LD   hl,2   
31FC   E5                     PUSH   hl   
31FD   E5                     PUSH   hl   
31FE   CD 61 0C               CALL   run   
3201   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3209   CD CA 0A               CALL   flushBuffer   
320C   CD 42 0B               CALL   printStr   
320F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
321C   E1                     POP   hl   
321D   E5                     PUSH   hl   
321E   E5                     PUSH   hl   
321F   CD 61 0C               CALL   run   
3222   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3231   CD CA 0A               CALL   flushBuffer   
3234   76                     HALT      
3235                EXPECTM_0_2731S45:      
3235   E1                     POP   HL   
3236                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
3236   31 00 4A               LD   SP,STACK   
3239   CD 8A 0B               CALL   coldInit   
323C   CD 69 48               CALL   execStr   
323F   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
3251   CD CA 0A               CALL   flushBuffer   
3254                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
3254   E1                     POP   HL   
3255   E5                     PUSH   HL   
3256   11 01 00               LD   DE,1   
3259   B7                     OR   A   
325A   ED 52                  SBC   HL,DE   
325C   7D                     LD   A,L   
325D   B4                     OR   H   
325E   CA CA 32               JP   Z,expectM_0_2732S45   
3261   CD 42 0B               CALL   printStr   
3264   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
327C   CD 42 0B               CALL   printStr   
327F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
328E   21 01 00               LD   hl,1   
3291   E5                     PUSH   hl   
3292   E5                     PUSH   hl   
3293   CD 61 0C               CALL   run   
3296   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
329E   CD CA 0A               CALL   flushBuffer   
32A1   CD 42 0B               CALL   printStr   
32A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32B1   E1                     POP   hl   
32B2   E5                     PUSH   hl   
32B3   E5                     PUSH   hl   
32B4   CD 61 0C               CALL   run   
32B7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32C6   CD CA 0A               CALL   flushBuffer   
32C9   76                     HALT      
32CA                EXPECTM_0_2732S45:      
32CA   E1                     POP   HL   
32CB                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
32CB   31 00 4A               LD   SP,STACK   
32CE   CD 8A 0B               CALL   coldInit   
32D1   CD 69 48               CALL   execStr   
32D4   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
32E7   CD CA 0A               CALL   flushBuffer   
32EA                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
32EA   E1                     POP   HL   
32EB   E5                     PUSH   HL   
32EC   11 02 00               LD   DE,2   
32EF   B7                     OR   A   
32F0   ED 52                  SBC   HL,DE   
32F2   7D                     LD   A,L   
32F3   B4                     OR   H   
32F4   CA 61 33               JP   Z,expectM_0_2733S45   
32F7   CD 42 0B               CALL   printStr   
32FA   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
3313   CD 42 0B               CALL   printStr   
3316   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3325   21 02 00               LD   hl,2   
3328   E5                     PUSH   hl   
3329   E5                     PUSH   hl   
332A   CD 61 0C               CALL   run   
332D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3335   CD CA 0A               CALL   flushBuffer   
3338   CD 42 0B               CALL   printStr   
333B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3348   E1                     POP   hl   
3349   E5                     PUSH   hl   
334A   E5                     PUSH   hl   
334B   CD 61 0C               CALL   run   
334E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
335D   CD CA 0A               CALL   flushBuffer   
3360   76                     HALT      
3361                EXPECTM_0_2733S45:      
3361   E1                     POP   HL   
3362                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
3362   31 00 4A               LD   SP,STACK   
3365   CD 8A 0B               CALL   coldInit   
3368   CD 69 48               CALL   execStr   
336B   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
337F   CD CA 0A               CALL   flushBuffer   
3382                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
3382   E1                     POP   HL   
3383   E5                     PUSH   HL   
3384   11 02 00               LD   DE,2   
3387   B7                     OR   A   
3388   ED 52                  SBC   HL,DE   
338A   7D                     LD   A,L   
338B   B4                     OR   H   
338C   CA FA 33               JP   Z,expectM_0_2734S45   
338F   CD 42 0B               CALL   printStr   
3392   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
33AC   CD 42 0B               CALL   printStr   
33AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33BE   21 02 00               LD   hl,2   
33C1   E5                     PUSH   hl   
33C2   E5                     PUSH   hl   
33C3   CD 61 0C               CALL   run   
33C6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33CE   CD CA 0A               CALL   flushBuffer   
33D1   CD 42 0B               CALL   printStr   
33D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33E1   E1                     POP   hl   
33E2   E5                     PUSH   hl   
33E3   E5                     PUSH   hl   
33E4   CD 61 0C               CALL   run   
33E7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33F6   CD CA 0A               CALL   flushBuffer   
33F9   76                     HALT      
33FA                EXPECTM_0_2734S45:      
33FA   E1                     POP   HL   
33FB                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
33FB   31 00 4A               LD   SP,STACK   
33FE   CD 8A 0B               CALL   coldInit   
3401   CD 69 48               CALL   execStr   
3404   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
3417   CD CA 0A               CALL   flushBuffer   
341A                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
341A   E1                     POP   HL   
341B   E5                     PUSH   HL   
341C   11 02 00               LD   DE,2   
341F   B7                     OR   A   
3420   ED 52                  SBC   HL,DE   
3422   7D                     LD   A,L   
3423   B4                     OR   H   
3424   CA 91 34               JP   Z,expectM_0_2735S45   
3427   CD 42 0B               CALL   printStr   
342A   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
3443   CD 42 0B               CALL   printStr   
3446   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3455   21 02 00               LD   hl,2   
3458   E5                     PUSH   hl   
3459   E5                     PUSH   hl   
345A   CD 61 0C               CALL   run   
345D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3465   CD CA 0A               CALL   flushBuffer   
3468   CD 42 0B               CALL   printStr   
346B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3478   E1                     POP   hl   
3479   E5                     PUSH   hl   
347A   E5                     PUSH   hl   
347B   CD 61 0C               CALL   run   
347E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
348D   CD CA 0A               CALL   flushBuffer   
3490   76                     HALT      
3491                EXPECTM_0_2735S45:      
3491   E1                     POP   HL   
3492                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
3492   31 00 4A               LD   SP,STACK   
3495   CD 8A 0B               CALL   coldInit   
3498   CD 69 48               CALL   execStr   
349B   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
34B5   CD CA 0A               CALL   flushBuffer   
34B8                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
34B8   E1                     POP   HL   
34B9   E5                     PUSH   HL   
34BA   11 05 00               LD   DE,5   
34BD   B7                     OR   A   
34BE   ED 52                  SBC   HL,DE   
34C0   7D                     LD   A,L   
34C1   B4                     OR   H   
34C2   CA 36 35               JP   Z,expectM_0_2736S45   
34C5   CD 42 0B               CALL   printStr   
34C8   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
34E8   CD 42 0B               CALL   printStr   
34EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34FA   21 05 00               LD   hl,5   
34FD   E5                     PUSH   hl   
34FE   E5                     PUSH   hl   
34FF   CD 61 0C               CALL   run   
3502   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
350A   CD CA 0A               CALL   flushBuffer   
350D   CD 42 0B               CALL   printStr   
3510   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
351D   E1                     POP   hl   
351E   E5                     PUSH   hl   
351F   E5                     PUSH   hl   
3520   CD 61 0C               CALL   run   
3523   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3532   CD CA 0A               CALL   flushBuffer   
3535   76                     HALT      
3536                EXPECTM_0_2736S45:      
3536   E1                     POP   HL   
3537                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3537   31 00 4A               LD   SP,STACK   
353A   CD 8A 0B               CALL   coldInit   
353D   CD 69 48               CALL   execStr   
3540   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
3551   CD CA 0A               CALL   flushBuffer   
3554                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
3554   E1                     POP   HL   
3555   E5                     PUSH   HL   
3556   11 02 00               LD   DE,2   
3559   B7                     OR   A   
355A   ED 52                  SBC   HL,DE   
355C   7D                     LD   A,L   
355D   B4                     OR   H   
355E   CA C9 35               JP   Z,expectM_0_2737S45   
3561   CD 42 0B               CALL   printStr   
3564   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
357B   CD 42 0B               CALL   printStr   
357E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
358D   21 02 00               LD   hl,2   
3590   E5                     PUSH   hl   
3591   E5                     PUSH   hl   
3592   CD 61 0C               CALL   run   
3595   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
359D   CD CA 0A               CALL   flushBuffer   
35A0   CD 42 0B               CALL   printStr   
35A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35B0   E1                     POP   hl   
35B1   E5                     PUSH   hl   
35B2   E5                     PUSH   hl   
35B3   CD 61 0C               CALL   run   
35B6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35C5   CD CA 0A               CALL   flushBuffer   
35C8   76                     HALT      
35C9                EXPECTM_0_2737S45:      
35C9   E1                     POP   HL   
35CA                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
35CA   31 00 4A               LD   SP,STACK   
35CD   CD 8A 0B               CALL   coldInit   
35D0   CD 69 48               CALL   execStr   
35D3   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
35EA   CD CA 0A               CALL   flushBuffer   
35ED                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
35ED   E1                     POP   HL   
35EE   E5                     PUSH   HL   
35EF   11 64 00               LD   DE,100   
35F2   B7                     OR   A   
35F3   ED 52                  SBC   HL,DE   
35F5   7D                     LD   A,L   
35F6   B4                     OR   H   
35F7   CA 68 36               JP   Z,expectM_0_2738S45   
35FA   CD 42 0B               CALL   printStr   
35FD   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
361A   CD 42 0B               CALL   printStr   
361D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
362C   21 64 00               LD   hl,100   
362F   E5                     PUSH   hl   
3630   E5                     PUSH   hl   
3631   CD 61 0C               CALL   run   
3634   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
363C   CD CA 0A               CALL   flushBuffer   
363F   CD 42 0B               CALL   printStr   
3642   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
364F   E1                     POP   hl   
3650   E5                     PUSH   hl   
3651   E5                     PUSH   hl   
3652   CD 61 0C               CALL   run   
3655   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3664   CD CA 0A               CALL   flushBuffer   
3667   76                     HALT      
3668                EXPECTM_0_2738S45:      
3668   E1                     POP   HL   
3669                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
3669   31 00 4A               LD   SP,STACK   
366C   CD 8A 0B               CALL   coldInit   
366F   CD 69 48               CALL   execStr   
3672   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
368A   CD CA 0A               CALL   flushBuffer   
368D                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
368D   E1                     POP   HL   
368E   E5                     PUSH   HL   
368F   11 01 00               LD   DE,1   
3692   B7                     OR   A   
3693   ED 52                  SBC   HL,DE   
3695   7D                     LD   A,L   
3696   B4                     OR   H   
3697   CA 09 37               JP   Z,expectM_0_2739S45   
369A   CD 42 0B               CALL   printStr   
369D   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
36BB   CD 42 0B               CALL   printStr   
36BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36CD   21 01 00               LD   hl,1   
36D0   E5                     PUSH   hl   
36D1   E5                     PUSH   hl   
36D2   CD 61 0C               CALL   run   
36D5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36DD   CD CA 0A               CALL   flushBuffer   
36E0   CD 42 0B               CALL   printStr   
36E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36F0   E1                     POP   hl   
36F1   E5                     PUSH   hl   
36F2   E5                     PUSH   hl   
36F3   CD 61 0C               CALL   run   
36F6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3705   CD CA 0A               CALL   flushBuffer   
3708   76                     HALT      
3709                EXPECTM_0_2739S45:      
3709   E1                     POP   HL   
370A                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
370A   31 00 4A               LD   SP,STACK   
370D   CD 8A 0B               CALL   coldInit   
3710   CD 69 48               CALL   execStr   
3713   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
372C   CD CA 0A               CALL   flushBuffer   
372F                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
372F   E1                     POP   HL   
3730   E5                     PUSH   HL   
3731   11 02 00               LD   DE,2   
3734   B7                     OR   A   
3735   ED 52                  SBC   HL,DE   
3737   7D                     LD   A,L   
3738   B4                     OR   H   
3739   CA AC 37               JP   Z,expectM_0_2740S45   
373C   CD 42 0B               CALL   printStr   
373F   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
375E   CD 42 0B               CALL   printStr   
3761   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3770   21 02 00               LD   hl,2   
3773   E5                     PUSH   hl   
3774   E5                     PUSH   hl   
3775   CD 61 0C               CALL   run   
3778   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3780   CD CA 0A               CALL   flushBuffer   
3783   CD 42 0B               CALL   printStr   
3786   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3793   E1                     POP   hl   
3794   E5                     PUSH   hl   
3795   E5                     PUSH   hl   
3796   CD 61 0C               CALL   run   
3799   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37A8   CD CA 0A               CALL   flushBuffer   
37AB   76                     HALT      
37AC                EXPECTM_0_2740S45:      
37AC   E1                     POP   HL   
37AD                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
37AD   31 00 4A               LD   SP,STACK   
37B0   CD 8A 0B               CALL   coldInit   
37B3   CD 69 48               CALL   execStr   
37B6   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
37D5   CD CA 0A               CALL   flushBuffer   
37D8                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
37D8   E1                     POP   HL   
37D9   E5                     PUSH   HL   
37DA   11 0B 00               LD   DE,11   
37DD   B7                     OR   A   
37DE   ED 52                  SBC   HL,DE   
37E0   7D                     LD   A,L   
37E1   B4                     OR   H   
37E2   CA 5B 38               JP   Z,expectM_0_2741S45   
37E5   CD 42 0B               CALL   printStr   
37E8   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
380D   CD 42 0B               CALL   printStr   
3810   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
381F   21 0B 00               LD   hl,11   
3822   E5                     PUSH   hl   
3823   E5                     PUSH   hl   
3824   CD 61 0C               CALL   run   
3827   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
382F   CD CA 0A               CALL   flushBuffer   
3832   CD 42 0B               CALL   printStr   
3835   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3842   E1                     POP   hl   
3843   E5                     PUSH   hl   
3844   E5                     PUSH   hl   
3845   CD 61 0C               CALL   run   
3848   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3857   CD CA 0A               CALL   flushBuffer   
385A   76                     HALT      
385B                EXPECTM_0_2741S45:      
385B   E1                     POP   HL   
385C                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
385C   31 00 4A               LD   SP,STACK   
385F   CD 8A 0B               CALL   coldInit   
3862   CD 69 48               CALL   execStr   
3865   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
3884   CD CA 0A               CALL   flushBuffer   
3887                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
3887   E1                     POP   HL   
3888   E5                     PUSH   HL   
3889   11 15 00               LD   DE,21   
388C   B7                     OR   A   
388D   ED 52                  SBC   HL,DE   
388F   7D                     LD   A,L   
3890   B4                     OR   H   
3891   CA 0A 39               JP   Z,expectM_0_2742S45   
3894   CD 42 0B               CALL   printStr   
3897   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
38BC   CD 42 0B               CALL   printStr   
38BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38CE   21 15 00               LD   hl,21   
38D1   E5                     PUSH   hl   
38D2   E5                     PUSH   hl   
38D3   CD 61 0C               CALL   run   
38D6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38DE   CD CA 0A               CALL   flushBuffer   
38E1   CD 42 0B               CALL   printStr   
38E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38F1   E1                     POP   hl   
38F2   E5                     PUSH   hl   
38F3   E5                     PUSH   hl   
38F4   CD 61 0C               CALL   run   
38F7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3906   CD CA 0A               CALL   flushBuffer   
3909   76                     HALT      
390A                EXPECTM_0_2742S45:      
390A   E1                     POP   HL   
390B                          ;*Macro unroll:  test "[10 20 30] 1%", 20
390B   31 00 4A               LD   SP,STACK   
390E   CD 8A 0B               CALL   coldInit   
3911   CD 69 48               CALL   execStr   
3914   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3922   CD CA 0A               CALL   flushBuffer   
3925                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3925   E1                     POP   HL   
3926   E5                     PUSH   HL   
3927   11 14 00               LD   DE,20   
392A   B7                     OR   A   
392B   ED 52                  SBC   HL,DE   
392D   7D                     LD   A,L   
392E   B4                     OR   H   
392F   CA 97 39               JP   Z,expectM_0_2743S45   
3932   CD 42 0B               CALL   printStr   
3935   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
3949   CD 42 0B               CALL   printStr   
394C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
395B   21 14 00               LD   hl,20   
395E   E5                     PUSH   hl   
395F   E5                     PUSH   hl   
3960   CD 61 0C               CALL   run   
3963   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
396B   CD CA 0A               CALL   flushBuffer   
396E   CD 42 0B               CALL   printStr   
3971   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
397E   E1                     POP   hl   
397F   E5                     PUSH   hl   
3980   E5                     PUSH   hl   
3981   CD 61 0C               CALL   run   
3984   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3993   CD CA 0A               CALL   flushBuffer   
3996   76                     HALT      
3997                EXPECTM_0_2743S45:      
3997   E1                     POP   HL   
3998                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
3998   31 00 4A               LD   SP,STACK   
399B   CD 8A 0B               CALL   coldInit   
399E   CD 69 48               CALL   execStr   
39A1   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "[10 20 30 40] /s"   
39B2   CD CA 0A               CALL   flushBuffer   
39B5                          ;*Macro unroll:  expect "[10 20 30 40] /s",4
39B5   E1                     POP   HL   
39B6   E5                     PUSH   HL   
39B7   11 04 00               LD   DE,4   
39BA   B7                     OR   A   
39BB   ED 52                  SBC   HL,DE   
39BD   7D                     LD   A,L   
39BE   B4                     OR   H   
39BF   CA 2A 3A               JP   Z,expectM_0_2744S45   
39C2   CD 42 0B               CALL   printStr   
39C5   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
39DC   CD 42 0B               CALL   printStr   
39DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39EE   21 04 00               LD   hl,4   
39F1   E5                     PUSH   hl   
39F2   E5                     PUSH   hl   
39F3   CD 61 0C               CALL   run   
39F6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
39FE   CD CA 0A               CALL   flushBuffer   
3A01   CD 42 0B               CALL   printStr   
3A04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A11   E1                     POP   hl   
3A12   E5                     PUSH   hl   
3A13   E5                     PUSH   hl   
3A14   CD 61 0C               CALL   run   
3A17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A26   CD CA 0A               CALL   flushBuffer   
3A29   76                     HALT      
3A2A                EXPECTM_0_2744S45:      
3A2A   E1                     POP   HL   
3A2B                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
3A2B   31 00 4A               LD   SP,STACK   
3A2E   CD 8A 0B               CALL   coldInit   
3A31   CD 69 48               CALL   execStr   
3A34   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
3A42   CD CA 0A               CALL   flushBuffer   
3A45                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
3A45   E1                     POP   HL   
3A46   E5                     PUSH   HL   
3A47   11 02 00               LD   DE,2   
3A4A   B7                     OR   A   
3A4B   ED 52                  SBC   HL,DE   
3A4D   7D                     LD   A,L   
3A4E   B4                     OR   H   
3A4F   CA B7 3A               JP   Z,expectM_0_2745S45   
3A52   CD 42 0B               CALL   printStr   
3A55   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3A69   CD 42 0B               CALL   printStr   
3A6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A7B   21 02 00               LD   hl,2   
3A7E   E5                     PUSH   hl   
3A7F   E5                     PUSH   hl   
3A80   CD 61 0C               CALL   run   
3A83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A8B   CD CA 0A               CALL   flushBuffer   
3A8E   CD 42 0B               CALL   printStr   
3A91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A9E   E1                     POP   hl   
3A9F   E5                     PUSH   hl   
3AA0   E5                     PUSH   hl   
3AA1   CD 61 0C               CALL   run   
3AA4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AB3   CD CA 0A               CALL   flushBuffer   
3AB6   76                     HALT      
3AB7                EXPECTM_0_2745S45:      
3AB7   E1                     POP   HL   
3AB8                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
3AB8   31 00 4A               LD   SP,STACK   
3ABB   CD 8A 0B               CALL   coldInit   
3ABE   CD 69 48               CALL   execStr   
3AC1   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
3AD5   CD CA 0A               CALL   flushBuffer   
3AD8                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
3AD8   E1                     POP   HL   
3AD9   E5                     PUSH   HL   
3ADA   11 42 00               LD   DE,66   
3ADD   B7                     OR   A   
3ADE   ED 52                  SBC   HL,DE   
3AE0   7D                     LD   A,L   
3AE1   B4                     OR   H   
3AE2   CA 50 3B               JP   Z,expectM_0_2746S45   
3AE5   CD 42 0B               CALL   printStr   
3AE8   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
3B02   CD 42 0B               CALL   printStr   
3B05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B14   21 42 00               LD   hl,66   
3B17   E5                     PUSH   hl   
3B18   E5                     PUSH   hl   
3B19   CD 61 0C               CALL   run   
3B1C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B24   CD CA 0A               CALL   flushBuffer   
3B27   CD 42 0B               CALL   printStr   
3B2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B37   E1                     POP   hl   
3B38   E5                     PUSH   hl   
3B39   E5                     PUSH   hl   
3B3A   CD 61 0C               CALL   run   
3B3D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B4C   CD CA 0A               CALL   flushBuffer   
3B4F   76                     HALT      
3B50                EXPECTM_0_2746S45:      
3B50   E1                     POP   HL   
3B51                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
3B51   31 00 4A               LD   SP,STACK   
3B54   CD 8A 0B               CALL   coldInit   
3B57   CD 69 48               CALL   execStr   
3B5A   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
3B6E   CD CA 0A               CALL   flushBuffer   
3B71                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
3B71   E1                     POP   HL   
3B72   E5                     PUSH   HL   
3B73   11 0A 00               LD   DE,10   
3B76   B7                     OR   A   
3B77   ED 52                  SBC   HL,DE   
3B79   7D                     LD   A,L   
3B7A   B4                     OR   H   
3B7B   CA E9 3B               JP   Z,expectM_0_2747S45   
3B7E   CD 42 0B               CALL   printStr   
3B81   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
3B9B   CD 42 0B               CALL   printStr   
3B9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BAD   21 0A 00               LD   hl,10   
3BB0   E5                     PUSH   hl   
3BB1   E5                     PUSH   hl   
3BB2   CD 61 0C               CALL   run   
3BB5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BBD   CD CA 0A               CALL   flushBuffer   
3BC0   CD 42 0B               CALL   printStr   
3BC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BD0   E1                     POP   hl   
3BD1   E5                     PUSH   hl   
3BD2   E5                     PUSH   hl   
3BD3   CD 61 0C               CALL   run   
3BD6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BE5   CD CA 0A               CALL   flushBuffer   
3BE8   76                     HALT      
3BE9                EXPECTM_0_2747S45:      
3BE9   E1                     POP   HL   
3BEA                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
3BEA   31 00 4A               LD   SP,STACK   
3BED   CD 8A 0B               CALL   coldInit   
3BF0   CD 69 48               CALL   execStr   
3BF3   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
3C0F   CD CA 0A               CALL   flushBuffer   
3C12                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
3C12   E1                     POP   HL   
3C13   E5                     PUSH   HL   
3C14   11 0A 00               LD   DE,10   
3C17   B7                     OR   A   
3C18   ED 52                  SBC   HL,DE   
3C1A   7D                     LD   A,L   
3C1B   B4                     OR   H   
3C1C   CA 92 3C               JP   Z,expectM_0_2748S45   
3C1F   CD 42 0B               CALL   printStr   
3C22   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
3C44   CD 42 0B               CALL   printStr   
3C47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C56   21 0A 00               LD   hl,10   
3C59   E5                     PUSH   hl   
3C5A   E5                     PUSH   hl   
3C5B   CD 61 0C               CALL   run   
3C5E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C66   CD CA 0A               CALL   flushBuffer   
3C69   CD 42 0B               CALL   printStr   
3C6C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C79   E1                     POP   hl   
3C7A   E5                     PUSH   hl   
3C7B   E5                     PUSH   hl   
3C7C   CD 61 0C               CALL   run   
3C7F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C8E   CD CA 0A               CALL   flushBuffer   
3C91   76                     HALT      
3C92                EXPECTM_0_2748S45:      
3C92   E1                     POP   HL   
3C93                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
3C93   31 00 4A               LD   SP,STACK   
3C96   CD 8A 0B               CALL   coldInit   
3C99   CD 69 48               CALL   execStr   
3C9C   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3CBC   CD CA 0A               CALL   flushBuffer   
3CBF                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
3CBF   E1                     POP   HL   
3CC0   E5                     PUSH   HL   
3CC1   11 0A 00               LD   DE,10   
3CC4   B7                     OR   A   
3CC5   ED 52                  SBC   HL,DE   
3CC7   7D                     LD   A,L   
3CC8   B4                     OR   H   
3CC9   CA 43 3D               JP   Z,expectM_0_2749S45   
3CCC   CD 42 0B               CALL   printStr   
3CCF   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3CF5   CD 42 0B               CALL   printStr   
3CF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D07   21 0A 00               LD   hl,10   
3D0A   E5                     PUSH   hl   
3D0B   E5                     PUSH   hl   
3D0C   CD 61 0C               CALL   run   
3D0F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D17   CD CA 0A               CALL   flushBuffer   
3D1A   CD 42 0B               CALL   printStr   
3D1D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D2A   E1                     POP   hl   
3D2B   E5                     PUSH   hl   
3D2C   E5                     PUSH   hl   
3D2D   CD 61 0C               CALL   run   
3D30   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D3F   CD CA 0A               CALL   flushBuffer   
3D42   76                     HALT      
3D43                EXPECTM_0_2749S45:      
3D43   E1                     POP   HL   
3D44                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
3D44   31 00 4A               LD   SP,STACK   
3D47   CD 8A 0B               CALL   coldInit   
3D4A   CD 69 48               CALL   execStr   
3D4D   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3D6D   CD CA 0A               CALL   flushBuffer   
3D70                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
3D70   E1                     POP   HL   
3D71   E5                     PUSH   HL   
3D72   11 14 00               LD   DE,20   
3D75   B7                     OR   A   
3D76   ED 52                  SBC   HL,DE   
3D78   7D                     LD   A,L   
3D79   B4                     OR   H   
3D7A   CA F4 3D               JP   Z,expectM_0_2750S45   
3D7D   CD 42 0B               CALL   printStr   
3D80   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3DA6   CD 42 0B               CALL   printStr   
3DA9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DB8   21 14 00               LD   hl,20   
3DBB   E5                     PUSH   hl   
3DBC   E5                     PUSH   hl   
3DBD   CD 61 0C               CALL   run   
3DC0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DC8   CD CA 0A               CALL   flushBuffer   
3DCB   CD 42 0B               CALL   printStr   
3DCE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DDB   E1                     POP   hl   
3DDC   E5                     PUSH   hl   
3DDD   E5                     PUSH   hl   
3DDE   CD 61 0C               CALL   run   
3DE1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DF0   CD CA 0A               CALL   flushBuffer   
3DF3   76                     HALT      
3DF4                EXPECTM_0_2750S45:      
3DF4   E1                     POP   HL   
3DF5                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
3DF5   31 00 4A               LD   SP,STACK   
3DF8   CD 8A 0B               CALL   coldInit   
3DFB   CD 69 48               CALL   execStr   
3DFE   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
3E12   CD CA 0A               CALL   flushBuffer   
3E15                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
3E15   E1                     POP   HL   
3E16   E5                     PUSH   HL   
3E17   11 04 00               LD   DE,4   
3E1A   B7                     OR   A   
3E1B   ED 52                  SBC   HL,DE   
3E1D   7D                     LD   A,L   
3E1E   B4                     OR   H   
3E1F   CA 8D 3E               JP   Z,expectM_0_2751S45   
3E22   CD 42 0B               CALL   printStr   
3E25   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
3E3F   CD 42 0B               CALL   printStr   
3E42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E51   21 04 00               LD   hl,4   
3E54   E5                     PUSH   hl   
3E55   E5                     PUSH   hl   
3E56   CD 61 0C               CALL   run   
3E59   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E61   CD CA 0A               CALL   flushBuffer   
3E64   CD 42 0B               CALL   printStr   
3E67   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E74   E1                     POP   hl   
3E75   E5                     PUSH   hl   
3E76   E5                     PUSH   hl   
3E77   CD 61 0C               CALL   run   
3E7A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E89   CD CA 0A               CALL   flushBuffer   
3E8C   76                     HALT      
3E8D                EXPECTM_0_2751S45:      
3E8D   E1                     POP   HL   
3E8E                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
3E8E   31 00 4A               LD   SP,STACK   
3E91   CD 8A 0B               CALL   coldInit   
3E94   CD 69 48               CALL   execStr   
3E97   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
3EB1   CD CA 0A               CALL   flushBuffer   
3EB4                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
3EB4   E1                     POP   HL   
3EB5   E5                     PUSH   HL   
3EB6   11 09 00               LD   DE,9   
3EB9   B7                     OR   A   
3EBA   ED 52                  SBC   HL,DE   
3EBC   7D                     LD   A,L   
3EBD   B4                     OR   H   
3EBE   CA 32 3F               JP   Z,expectM_0_2752S45   
3EC1   CD 42 0B               CALL   printStr   
3EC4   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
3EE4   CD 42 0B               CALL   printStr   
3EE7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EF6   21 09 00               LD   hl,9   
3EF9   E5                     PUSH   hl   
3EFA   E5                     PUSH   hl   
3EFB   CD 61 0C               CALL   run   
3EFE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F06   CD CA 0A               CALL   flushBuffer   
3F09   CD 42 0B               CALL   printStr   
3F0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F19   E1                     POP   hl   
3F1A   E5                     PUSH   hl   
3F1B   E5                     PUSH   hl   
3F1C   CD 61 0C               CALL   run   
3F1F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F2E   CD CA 0A               CALL   flushBuffer   
3F31   76                     HALT      
3F32                EXPECTM_0_2752S45:      
3F32   E1                     POP   HL   
3F33                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3F33   31 00 4A               LD   SP,STACK   
3F36   CD 8A 0B               CALL   coldInit   
3F39   CD 69 48               CALL   execStr   
3F3C   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3F54   CD CA 0A               CALL   flushBuffer   
3F57                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3F57   E1                     POP   HL   
3F58   E5                     PUSH   HL   
3F59   11 06 00               LD   DE,6   
3F5C   B7                     OR   A   
3F5D   ED 52                  SBC   HL,DE   
3F5F   7D                     LD   A,L   
3F60   B4                     OR   H   
3F61   CA D3 3F               JP   Z,expectM_0_2753S45   
3F64   CD 42 0B               CALL   printStr   
3F67   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3F85   CD 42 0B               CALL   printStr   
3F88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F97   21 06 00               LD   hl,6   
3F9A   E5                     PUSH   hl   
3F9B   E5                     PUSH   hl   
3F9C   CD 61 0C               CALL   run   
3F9F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FA7   CD CA 0A               CALL   flushBuffer   
3FAA   CD 42 0B               CALL   printStr   
3FAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FBA   E1                     POP   hl   
3FBB   E5                     PUSH   hl   
3FBC   E5                     PUSH   hl   
3FBD   CD 61 0C               CALL   run   
3FC0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FCF   CD CA 0A               CALL   flushBuffer   
3FD2   76                     HALT      
3FD3                EXPECTM_0_2753S45:      
3FD3   E1                     POP   HL   
3FD4                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
3FD4   31 00 4A               LD   SP,STACK   
3FD7   CD 8A 0B               CALL   coldInit   
3FDA   CD 69 48               CALL   execStr   
3FDD   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
3FF8   CD CA 0A               CALL   flushBuffer   
3FFB                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
3FFB   E1                     POP   HL   
3FFC   E5                     PUSH   HL   
3FFD   11 02 00               LD   DE,2   
4000   B7                     OR   A   
4001   ED 52                  SBC   HL,DE   
4003   7D                     LD   A,L   
4004   B4                     OR   H   
4005   CA 7A 40               JP   Z,expectM_0_2754S45   
4008   CD 42 0B               CALL   printStr   
400B   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
402C   CD 42 0B               CALL   printStr   
402F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
403E   21 02 00               LD   hl,2   
4041   E5                     PUSH   hl   
4042   E5                     PUSH   hl   
4043   CD 61 0C               CALL   run   
4046   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
404E   CD CA 0A               CALL   flushBuffer   
4051   CD 42 0B               CALL   printStr   
4054   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4061   E1                     POP   hl   
4062   E5                     PUSH   hl   
4063   E5                     PUSH   hl   
4064   CD 61 0C               CALL   run   
4067   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4076   CD CA 0A               CALL   flushBuffer   
4079   76                     HALT      
407A                EXPECTM_0_2754S45:      
407A   E1                     POP   HL   
407B                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
407B   31 00 4A               LD   SP,STACK   
407E   CD 8A 0B               CALL   coldInit   
4081   CD 69 48               CALL   execStr   
4084   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
40AA   CD CA 0A               CALL   flushBuffer   
40AD                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
40AD   E1                     POP   HL   
40AE   E5                     PUSH   HL   
40AF   11 0A 00               LD   DE,10   
40B2   B7                     OR   A   
40B3   ED 52                  SBC   HL,DE   
40B5   7D                     LD   A,L   
40B6   B4                     OR   H   
40B7   CA 37 41               JP   Z,expectM_0_2755S45   
40BA   CD 42 0B               CALL   printStr   
40BD   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
40E9   CD 42 0B               CALL   printStr   
40EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40FB   21 0A 00               LD   hl,10   
40FE   E5                     PUSH   hl   
40FF   E5                     PUSH   hl   
4100   CD 61 0C               CALL   run   
4103   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
410B   CD CA 0A               CALL   flushBuffer   
410E   CD 42 0B               CALL   printStr   
4111   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
411E   E1                     POP   hl   
411F   E5                     PUSH   hl   
4120   E5                     PUSH   hl   
4121   CD 61 0C               CALL   run   
4124   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4133   CD CA 0A               CALL   flushBuffer   
4136   76                     HALT      
4137                EXPECTM_0_2755S45:      
4137   E1                     POP   HL   
4138                          ;*Macro unroll:  test "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^", 6
4138   31 00 4A               LD   SP,STACK   
413B   CD 8A 0B               CALL   coldInit   
413E   CD 69 48               CALL   execStr   
4141   33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
4169   CD CA 0A               CALL   flushBuffer   
416C                          ;*Macro unroll:  expect "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^",6
416C   E1                     POP   HL   
416D   E5                     PUSH   HL   
416E   11 06 00               LD   DE,6   
4171   B7                     OR   A   
4172   ED 52                  SBC   HL,DE   
4174   7D                     LD   A,L   
4175   B4                     OR   H   
4176   CA F8 41               JP   Z,expectM_0_2756S45   
4179   CD 42 0B               CALL   printStr   
417C   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
41AA   CD 42 0B               CALL   printStr   
41AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41BC   21 06 00               LD   hl,6   
41BF   E5                     PUSH   hl   
41C0   E5                     PUSH   hl   
41C1   CD 61 0C               CALL   run   
41C4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41CC   CD CA 0A               CALL   flushBuffer   
41CF   CD 42 0B               CALL   printStr   
41D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41DF   E1                     POP   hl   
41E0   E5                     PUSH   hl   
41E1   E5                     PUSH   hl   
41E2   CD 61 0C               CALL   run   
41E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41F4   CD CA 0A               CALL   flushBuffer   
41F7   76                     HALT      
41F8                EXPECTM_0_2756S45:      
41F8   E1                     POP   HL   
41F9                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
41F9   31 00 4A               LD   SP,STACK   
41FC   CD 8A 0B               CALL   coldInit   
41FF   CD 69 48               CALL   execStr   
4202   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
420E   CD CA 0A               CALL   flushBuffer   
4211                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
4211   E1                     POP   HL   
4212   E5                     PUSH   HL   
4213   11 00 00               LD   DE,NUL   
4216   B7                     OR   A   
4217   ED 52                  SBC   HL,DE   
4219   7D                     LD   A,L   
421A   B4                     OR   H   
421B   CA 81 42               JP   Z,expectM_0_2757S45   
421E   CD 42 0B               CALL   printStr   
4221   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
4233   CD 42 0B               CALL   printStr   
4236   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4245   21 00 00               LD   hl,NUL   
4248   E5                     PUSH   hl   
4249   E5                     PUSH   hl   
424A   CD 61 0C               CALL   run   
424D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4255   CD CA 0A               CALL   flushBuffer   
4258   CD 42 0B               CALL   printStr   
425B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4268   E1                     POP   hl   
4269   E5                     PUSH   hl   
426A   E5                     PUSH   hl   
426B   CD 61 0C               CALL   run   
426E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
427D   CD CA 0A               CALL   flushBuffer   
4280   76                     HALT      
4281                EXPECTM_0_2757S45:      
4281   E1                     POP   HL   
4282                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4282   31 00 4A               LD   SP,STACK   
4285   CD 8A 0B               CALL   coldInit   
4288   CD 69 48               CALL   execStr   
428B   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
4297   CD CA 0A               CALL   flushBuffer   
429A                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
429A   E1                     POP   HL   
429B   E5                     PUSH   HL   
429C   11 00 00               LD   DE,NUL   
429F   B7                     OR   A   
42A0   ED 52                  SBC   HL,DE   
42A2   7D                     LD   A,L   
42A3   B4                     OR   H   
42A4   CA 0A 43               JP   Z,expectM_0_2758S45   
42A7   CD 42 0B               CALL   printStr   
42AA   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
42BC   CD 42 0B               CALL   printStr   
42BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42CE   21 00 00               LD   hl,NUL   
42D1   E5                     PUSH   hl   
42D2   E5                     PUSH   hl   
42D3   CD 61 0C               CALL   run   
42D6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42DE   CD CA 0A               CALL   flushBuffer   
42E1   CD 42 0B               CALL   printStr   
42E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42F1   E1                     POP   hl   
42F2   E5                     PUSH   hl   
42F3   E5                     PUSH   hl   
42F4   CD 61 0C               CALL   run   
42F7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4306   CD CA 0A               CALL   flushBuffer   
4309   76                     HALT      
430A                EXPECTM_0_2758S45:      
430A   E1                     POP   HL   
430B                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
430B   31 00 4A               LD   SP,STACK   
430E   CD 8A 0B               CALL   coldInit   
4311   CD 69 48               CALL   execStr   
4314   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
4320   CD CA 0A               CALL   flushBuffer   
4323                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
4323   E1                     POP   HL   
4324   E5                     PUSH   HL   
4325   11 00 00               LD   DE,NUL   
4328   B7                     OR   A   
4329   ED 52                  SBC   HL,DE   
432B   7D                     LD   A,L   
432C   B4                     OR   H   
432D   CA 93 43               JP   Z,expectM_0_2759S45   
4330   CD 42 0B               CALL   printStr   
4333   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
4345   CD 42 0B               CALL   printStr   
4348   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4357   21 00 00               LD   hl,NUL   
435A   E5                     PUSH   hl   
435B   E5                     PUSH   hl   
435C   CD 61 0C               CALL   run   
435F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4367   CD CA 0A               CALL   flushBuffer   
436A   CD 42 0B               CALL   printStr   
436D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
437A   E1                     POP   hl   
437B   E5                     PUSH   hl   
437C   E5                     PUSH   hl   
437D   CD 61 0C               CALL   run   
4380   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
438F   CD CA 0A               CALL   flushBuffer   
4392   76                     HALT      
4393                EXPECTM_0_2759S45:      
4393   E1                     POP   HL   
4394                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4394   31 00 4A               LD   SP,STACK   
4397   CD 8A 0B               CALL   coldInit   
439A   CD 69 48               CALL   execStr   
439D   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
43A9   CD CA 0A               CALL   flushBuffer   
43AC                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
43AC   E1                     POP   HL   
43AD   E5                     PUSH   HL   
43AE   11 00 00               LD   DE,NUL   
43B1   B7                     OR   A   
43B2   ED 52                  SBC   HL,DE   
43B4   7D                     LD   A,L   
43B5   B4                     OR   H   
43B6   CA 1C 44               JP   Z,expectM_0_2760S45   
43B9   CD 42 0B               CALL   printStr   
43BC   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
43CE   CD 42 0B               CALL   printStr   
43D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43E0   21 00 00               LD   hl,NUL   
43E3   E5                     PUSH   hl   
43E4   E5                     PUSH   hl   
43E5   CD 61 0C               CALL   run   
43E8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43F0   CD CA 0A               CALL   flushBuffer   
43F3   CD 42 0B               CALL   printStr   
43F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4403   E1                     POP   hl   
4404   E5                     PUSH   hl   
4405   E5                     PUSH   hl   
4406   CD 61 0C               CALL   run   
4409   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4418   CD CA 0A               CALL   flushBuffer   
441B   76                     HALT      
441C                EXPECTM_0_2760S45:      
441C   E1                     POP   HL   
441D                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
441D   31 00 4A               LD   SP,STACK   
4420   CD 8A 0B               CALL   coldInit   
4423   CD 69 48               CALL   execStr   
4426   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
442E   CD CA 0A               CALL   flushBuffer   
4431                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
4431   E1                     POP   HL   
4432   E5                     PUSH   HL   
4433   11 66 4C               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4436   B7                     OR   A   
4437   ED 52                  SBC   HL,DE   
4439   7D                     LD   A,L   
443A   B4                     OR   H   
443B   CA 9D 44               JP   Z,expectM_0_2761S45   
443E   CD 42 0B               CALL   printStr   
4441   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
444F   CD 42 0B               CALL   printStr   
4452   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4461   21 66 4C               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4464   E5                     PUSH   hl   
4465   E5                     PUSH   hl   
4466   CD 61 0C               CALL   run   
4469   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4471   CD CA 0A               CALL   flushBuffer   
4474   CD 42 0B               CALL   printStr   
4477   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4484   E1                     POP   hl   
4485   E5                     PUSH   hl   
4486   E5                     PUSH   hl   
4487   CD 61 0C               CALL   run   
448A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4499   CD CA 0A               CALL   flushBuffer   
449C   76                     HALT      
449D                EXPECTM_0_2761S45:      
449D   E1                     POP   HL   
449E                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
449E   31 00 4A               LD   SP,STACK   
44A1   CD 8A 0B               CALL   coldInit   
44A4   CD 69 48               CALL   execStr   
44A7   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
44AF   CD CA 0A               CALL   flushBuffer   
44B2                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
44B2   E1                     POP   HL   
44B3   E5                     PUSH   HL   
44B4   11 34 4C               LD   DE,VARS + ("Z"-"A"+1)*2   
44B7   B7                     OR   A   
44B8   ED 52                  SBC   HL,DE   
44BA   7D                     LD   A,L   
44BB   B4                     OR   H   
44BC   CA 1E 45               JP   Z,expectM_0_2762S45   
44BF   CD 42 0B               CALL   printStr   
44C2   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
44D0   CD 42 0B               CALL   printStr   
44D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44E2   21 34 4C               LD   hl,VARS + ("Z"-"A"+1)*2   
44E5   E5                     PUSH   hl   
44E6   E5                     PUSH   hl   
44E7   CD 61 0C               CALL   run   
44EA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44F2   CD CA 0A               CALL   flushBuffer   
44F5   CD 42 0B               CALL   printStr   
44F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4505   E1                     POP   hl   
4506   E5                     PUSH   hl   
4507   E5                     PUSH   hl   
4508   CD 61 0C               CALL   run   
450B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
451A   CD CA 0A               CALL   flushBuffer   
451D   76                     HALT      
451E                EXPECTM_0_2762S45:      
451E   E1                     POP   HL   
451F                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
451F   31 00 4A               LD   SP,STACK   
4522   CD 8A 0B               CALL   coldInit   
4525   CD 69 48               CALL   execStr   
4528   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
4530   CD CA 0A               CALL   flushBuffer   
4533                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
4533   E1                     POP   HL   
4534   E5                     PUSH   HL   
4535   11 32 4C               LD   DE,VARS + ("Z"-"A")*2   
4538   B7                     OR   A   
4539   ED 52                  SBC   HL,DE   
453B   7D                     LD   A,L   
453C   B4                     OR   H   
453D   CA 9F 45               JP   Z,expectM_0_2763S45   
4540   CD 42 0B               CALL   printStr   
4543   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4551   CD 42 0B               CALL   printStr   
4554   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4563   21 32 4C               LD   hl,VARS + ("Z"-"A")*2   
4566   E5                     PUSH   hl   
4567   E5                     PUSH   hl   
4568   CD 61 0C               CALL   run   
456B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4573   CD CA 0A               CALL   flushBuffer   
4576   CD 42 0B               CALL   printStr   
4579   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4586   E1                     POP   hl   
4587   E5                     PUSH   hl   
4588   E5                     PUSH   hl   
4589   CD 61 0C               CALL   run   
458C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
459B   CD CA 0A               CALL   flushBuffer   
459E   76                     HALT      
459F                EXPECTM_0_2763S45:      
459F   E1                     POP   HL   
45A0                          ;*Macro unroll:  test "'A' /ad", VARS
45A0   31 00 4A               LD   SP,STACK   
45A3   CD 8A 0B               CALL   coldInit   
45A6   CD 69 48               CALL   execStr   
45A9   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
45B1   CD CA 0A               CALL   flushBuffer   
45B4                          ;*Macro unroll:  expect "'A' /ad",VARS
45B4   E1                     POP   HL   
45B5   E5                     PUSH   HL   
45B6   11 00 4C               LD   DE,VARS   
45B9   B7                     OR   A   
45BA   ED 52                  SBC   HL,DE   
45BC   7D                     LD   A,L   
45BD   B4                     OR   H   
45BE   CA 20 46               JP   Z,expectM_0_2764S45   
45C1   CD 42 0B               CALL   printStr   
45C4   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
45D2   CD 42 0B               CALL   printStr   
45D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45E4   21 00 4C               LD   hl,VARS   
45E7   E5                     PUSH   hl   
45E8   E5                     PUSH   hl   
45E9   CD 61 0C               CALL   run   
45EC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45F4   CD CA 0A               CALL   flushBuffer   
45F7   CD 42 0B               CALL   printStr   
45FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4607   E1                     POP   hl   
4608   E5                     PUSH   hl   
4609   E5                     PUSH   hl   
460A   CD 61 0C               CALL   run   
460D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
461C   CD CA 0A               CALL   flushBuffer   
461F   76                     HALT      
4620                EXPECTM_0_2764S45:      
4620   E1                     POP   HL   
4621                          ;*Macro unroll:  test "-1. /c/vB 0%", $2D
4621   31 00 4A               LD   SP,STACK   
4624   CD 8A 0B               CALL   coldInit   
4627   CD 69 48               CALL   execStr   
462A   2D 31 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "-1. /c/vB 0%"   
4637   CD CA 0A               CALL   flushBuffer   
463A                          ;*Macro unroll:  expect "-1. /c/vB 0%",$2D
463A   E1                     POP   HL   
463B   E5                     PUSH   HL   
463C   11 2D 00               LD   DE,$2D   
463F   B7                     OR   A   
4640   ED 52                  SBC   HL,DE   
4642   7D                     LD   A,L   
4643   B4                     OR   H   
4644   CA AB 46               JP   Z,expectM_0_2765S45   
4647   CD 42 0B               CALL   printStr   
464A   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "Code: ","-1. /c/vB 0%"   
465D   CD 42 0B               CALL   printStr   
4660   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
466F   21 2D 00               LD   hl,$2D   
4672   E5                     PUSH   hl   
4673   E5                     PUSH   hl   
4674   CD 61 0C               CALL   run   
4677   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
467F   CD CA 0A               CALL   flushBuffer   
4682   CD 42 0B               CALL   printStr   
4685   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4692   E1                     POP   hl   
4693   E5                     PUSH   hl   
4694   E5                     PUSH   hl   
4695   CD 61 0C               CALL   run   
4698   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46A7   CD CA 0A               CALL   flushBuffer   
46AA   76                     HALT      
46AB                EXPECTM_0_2765S45:      
46AB   E1                     POP   HL   
46AC                          ;*Macro unroll:  test "`A`.s /c/vB 0%", 65
46AC   31 00 4A               LD   SP,STACK   
46AF   CD 8A 0B               CALL   coldInit   
46B2   CD 69 48               CALL   execStr   
46B5   60 41 60 2E 73 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "`A`.s /c/vB 0%"   
46C4   CD CA 0A               CALL   flushBuffer   
46C7                          ;*Macro unroll:  expect "`A`.s /c/vB 0%",65
46C7   E1                     POP   HL   
46C8   E5                     PUSH   HL   
46C9   11 41 00               LD   DE,65   
46CC   B7                     OR   A   
46CD   ED 52                  SBC   HL,DE   
46CF   7D                     LD   A,L   
46D0   B4                     OR   H   
46D1   CA 3A 47               JP   Z,expectM_0_2766S45   
46D4   CD 42 0B               CALL   printStr   
46D7   43 6F 64 65 3A 20 60 41 60 2E 73 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "Code: ","`A`.s /c/vB 0%"   
46EC   CD 42 0B               CALL   printStr   
46EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46FE   21 41 00               LD   hl,65   
4701   E5                     PUSH   hl   
4702   E5                     PUSH   hl   
4703   CD 61 0C               CALL   run   
4706   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
470E   CD CA 0A               CALL   flushBuffer   
4711   CD 42 0B               CALL   printStr   
4714   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4721   E1                     POP   hl   
4722   E5                     PUSH   hl   
4723   E5                     PUSH   hl   
4724   CD 61 0C               CALL   run   
4727   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4736   CD CA 0A               CALL   flushBuffer   
4739   76                     HALT      
473A                EXPECTM_0_2766S45:      
473A   E1                     POP   HL   
473B                          ;*Macro unroll:  test "123. /c/vB 1%", $32
473B   31 00 4A               LD   SP,STACK   
473E   CD 8A 0B               CALL   coldInit   
4741   CD 69 48               CALL   execStr   
4744   31 32 33 2E 20 2F 63 2F 76 42 20 31 25 00 .CSTR   "123. /c/vB 1%"   
4752   CD CA 0A               CALL   flushBuffer   
4755                          ;*Macro unroll:  expect "123. /c/vB 1%",$32
4755   E1                     POP   HL   
4756   E5                     PUSH   HL   
4757   11 32 00               LD   DE,$32   
475A   B7                     OR   A   
475B   ED 52                  SBC   HL,DE   
475D   7D                     LD   A,L   
475E   B4                     OR   H   
475F   CA C7 47               JP   Z,expectM_0_2767S45   
4762   CD 42 0B               CALL   printStr   
4765   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 25 00 .CSTR   "Code: ","123. /c/vB 1%"   
4779   CD 42 0B               CALL   printStr   
477C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
478B   21 32 00               LD   hl,$32   
478E   E5                     PUSH   hl   
478F   E5                     PUSH   hl   
4790   CD 61 0C               CALL   run   
4793   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
479B   CD CA 0A               CALL   flushBuffer   
479E   CD 42 0B               CALL   printStr   
47A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47AE   E1                     POP   hl   
47AF   E5                     PUSH   hl   
47B0   E5                     PUSH   hl   
47B1   CD 61 0C               CALL   run   
47B4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47C3   CD CA 0A               CALL   flushBuffer   
47C6   76                     HALT      
47C7                EXPECTM_0_2767S45:      
47C7   E1                     POP   HL   
47C8                          ;*Macro unroll:  test "#4321 /h. /c/vB 0%", $23
47C8   31 00 4A               LD   SP,STACK   
47CB   CD 8A 0B               CALL   coldInit   
47CE   CD 69 48               CALL   execStr   
47D1   23 34 33 32 31 20 2F 68 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "#4321 /h. /c/vB 0%"   
47E4   CD CA 0A               CALL   flushBuffer   
47E7                          ;*Macro unroll:  expect "#4321 /h. /c/vB 0%",$23
47E7   E1                     POP   HL   
47E8   E5                     PUSH   HL   
47E9   11 23 00               LD   DE,$23   
47EC   B7                     OR   A   
47ED   ED 52                  SBC   HL,DE   
47EF   7D                     LD   A,L   
47F0   B4                     OR   H   
47F1   CA 5E 48               JP   Z,expectM_0_2768S45   
47F4   CD 42 0B               CALL   printStr   
47F7   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 68 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "Code: ","#4321 /h. /c/vB 0%"   
4810   CD 42 0B               CALL   printStr   
4813   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4822   21 23 00               LD   hl,$23   
4825   E5                     PUSH   hl   
4826   E5                     PUSH   hl   
4827   CD 61 0C               CALL   run   
482A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4832   CD CA 0A               CALL   flushBuffer   
4835   CD 42 0B               CALL   printStr   
4838   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4845   E1                     POP   hl   
4846   E5                     PUSH   hl   
4847   E5                     PUSH   hl   
4848   CD 61 0C               CALL   run   
484B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
485A   CD CA 0A               CALL   flushBuffer   
485D   76                     HALT      
485E                EXPECTM_0_2768S45:      
485E   E1                     POP   HL   
485F                             ; 
485F   CD 42 0B               CALL   printStr   
4862   44 6F 6E 65 21 00      .CSTR   "Done!"   
4868   76                     HALT      
4869                             ; executes a null teminated string (null executes exit_)
4869                             ; the string should be immedaitely following the call
4869                EXECSTR:      ; create a root stack frame
4869   C1                     POP   bc   ; bc = code*
486A   0B                     DEC   bc   ; dec to prepare for next routine
486B   11 00 00               LD   de,0   
486E   D5                     PUSH   de   ; push fake IP
486F   D5                     PUSH   de   ; push null arg_list*
4870   D5                     PUSH   de   ; push null first_arg*
4871   D5                     PUSH   de   ; push fake BP
4872   DD E9                  JP   (ix)   
4874                STKSIZE:   EQU   $100   ; Stack size
4874                TIBSIZE:   EQU   $100   ; 256 bytes
4874                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4874                          ALIGN   $100   
4900                          DS   STKSIZE   
4A00                STACK:       
4A00                          ALIGN   $100   
4A00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4B00                          ALIGN   $100   
4B00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4C00                          ALIGN   $100   
4C00                VARS:        
4C00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4CD0                RESTARTS:      
4CD0                RST08:    DS   2   
4CD2                RST10:    DS   2   
4CD4                RST18:    DS   2   
4CD6                RST20:    DS   2   
4CD8                RST28:    DS   2   
4CDA                RST30:    DS   2   ; 
4CDC                BAUD:     DS   2   ; 
4CDE                INTVEC:   DS   2   ; 
4CE0                NMIVEC:   DS   2   ; 
4CE2                GETCVEC:   DS   2   ; 
4CE4                PUTCVEC:   DS   2   ; 
4CE6                SYSVARS:      
4CE6                             ; initialised sys variables (preserved)
4CE6                VDATAWIDTH:   DS   2   ; 
4CE8                VNUMBASE:   DS   2   ; 
4CEA                VTIBPTR:   DS   2   ; 
4CEC                VBUFPTR:   DS   2   ; 
4CEE                VNEXT:    DS   2   ; 
4CF0                VHEAPPTR:   DS   2   ; 
4CF2                             ; uninitialised sys variables (preserved)
4CF2                VPOINTER:   DS   2   ; 
4CF4                VREMAIN:   DS   2   ; 
4CF6                VSAVEDIP:   DS   2   ; 
4CF8                VSAVEDSP:   DS   2   ; 
4CFA                VSAVEDNEXT:   DS   2   ; 
4CFC                VSAVEDBP:   DS   2   ; 
4CFE                VCHECKSUM:   DS   2   ; 
4D00                             ; uninitialised sys variables (unpreserved)
4D00                VTEMP1:   DS   2   ; 
4D02                VTEMP2:   DS   2   ; 
4D04                VLASTDEF:   DS   2   ; 
4D06                VHASHSTR:   DS   2   ; 
4D08                TBPTR:    DS   2   ; reserved for tests
4D0A                WARMBUF:   DS   20   
4D1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 46 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AB5 DEFINED AT LINE 1699 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1859 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2070 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 30 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 31 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 32 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 33 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 34 IN MAIN.asm
                    > USED AT LINE 416 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 35 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 36 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 37 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 51 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 56 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 66 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 169 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 171 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 173 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 175 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 177 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 179 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 181 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 183 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 185 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 187 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 196 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 221 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 240 IN MAIN.asm
LT_:                036D DEFINED AT LINE 248 IN MAIN.asm
LT1:                0376 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037F DEFINED AT LINE 260 IN MAIN.asm
NOP_:               0382 DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0384 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0387 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD:                0387 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               0392 DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0396 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
AT:                 0399 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADDR:               0399 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A3 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
AND:                03A3 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03AA DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AE DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AE DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B7 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
XOR1:               03B8 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03C2 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
DOLLAR:             03C7 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ARG:                03C7 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E5 DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
ARG0A:              03EE DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
ARG1:               03F3 DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG1A:              03FB DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
LBRACK:             03FE DEFINED AT LINE 384 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
ARRAYSTART:         03FE DEFINED AT LINE 385 IN MAIN.asm
RBRACK:             041A DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYEND:           041A DEFINED AT LINE 400 IN MAIN.asm
ARRAYEND1:          043E DEFINED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 440 IN MAIN.asm
ARRAYEND2:          044E DEFINED AT LINE 433 IN MAIN.asm
                    > USED AT LINE 429 IN MAIN.asm
ARRAYEND3:          0453 DEFINED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
ARRINDEX:           0474 DEFINED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRINDEX0:          047C DEFINED AT LINE 469 IN MAIN.asm
ARRINDEX1:          047D DEFINED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
ARRINDEX2:          0489 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
ASSIGN:             048C DEFINED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            048E DEFINED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
ASSIGNX:            048F DEFINED AT LINE 490 IN MAIN.asm
ASSIGN1:            049B DEFINED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 495 IN MAIN.asm
COLON:              049D DEFINED AT LINE 505 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            049D DEFINED AT LINE 506 IN MAIN.asm
ARGLIST1:           04A7 DEFINED AT LINE 513 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
ARGLIST1A:          04AF DEFINED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
ARGLIST2:           04B7 DEFINED AT LINE 524 IN MAIN.asm
ARGLIST3:           04BF DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
ARGLIST4:           04C2 DEFINED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 523 IN MAIN.asm
ARGLIST5:           04C8 DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
LBRACE:             04D4 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCKSTART:         04D4 DEFINED AT LINE 553 IN MAIN.asm
BLOCKSTART1:        04D8 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
BLOCKSTART2:        0504 DEFINED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
                    > USED AT LINE 575 IN MAIN.asm
BLOCKSTART3:        0507 DEFINED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
                    > USED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKSTART4:        050F DEFINED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
BLOCKSTART5:        0512 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
BLOCKSTART6:        053A DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
RBRACE:             053D DEFINED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           053D DEFINED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 1431 IN MAIN.asm
BLOCKEND1:          056F DEFINED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
BLOCKEND2:          057B DEFINED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
BLOCKEND3:          058D DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
TICK:               0599 DEFINED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               0599 DEFINED AT LINE 671 IN MAIN.asm
CHAR1:              059C DEFINED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
CHAR2:              05A8 DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
CHAR3:              05AB DEFINED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
BACKSLASH:          05AE DEFINED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
COMMA:              05B0 DEFINED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05B0 DEFINED AT LINE 695 IN MAIN.asm
DISCARD1:           05BD DEFINED AT LINE 704 IN MAIN.asm
                    > USED AT LINE 702 IN MAIN.asm
SLASH:              05BF DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
DIV:                05F5 DEFINED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
DOT:                0606 DEFINED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DIVIDE:             0618 DEFINED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
DIVIDE1:            061D DEFINED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
DIVIDE2:            062A DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DIVIDE3:            062B DEFINED AT LINE 784 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
EQUALS:             0631 DEFINED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         0639 DEFINED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           063E DEFINED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0643 DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
TRUE1:              0646 DEFINED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
NULL1:              064C DEFINED AT LINE 819 IN MAIN.asm
FALSE1:             064C DEFINED AT LINE 820 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
CARET:              0652 DEFINED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 0652 DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
GO1:                0653 DEFINED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
GO2:                0659 DEFINED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
GOBLOCK:            0665 DEFINED AT LINE 844 IN MAIN.asm
GOBLOCK1:           0665 DEFINED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
GOBLOCK2:           068A DEFINED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
GOLAMBDA:           0698 DEFINED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
GOLAMBDA1:          06B5 DEFINED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
GOLAMBDA2:          06BB DEFINED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
GOLAMBDA3:          06C6 DEFINED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
GOLAMBDA4:          06DE DEFINED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
GOLAMBDA5:          06E2 DEFINED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
GOLAMBDA6:          06E5 DEFINED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
GOLAMBDA7:          06E8 DEFINED AT LINE 935 IN MAIN.asm
GOLAMBDA8:          06ED DEFINED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
HASH:               06F8 DEFINED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             06F8 DEFINED AT LINE 951 IN MAIN.asm
HEXNUM1:            06FB DEFINED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
HEXNUM2:            0703 DEFINED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
UPCASE:             0715 DEFINED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            071A DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             071F DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
QUESTION:           072C DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 072C DEFINED AT LINE 993 IN MAIN.asm
IFTE:               0738 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
IFTE1:              0739 DEFINED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
STAR:               0745 DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                0745 DEFINED AT LINE 1016 IN MAIN.asm
MUL2:               0747 DEFINED AT LINE 1019 IN MAIN.asm
MUL3:               074F DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
NUM:                0761 DEFINED AT LINE 1037 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               076A DEFINED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
NUM1:               076B DEFINED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
NUM2:               0783 DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 1050 IN MAIN.asm
NUM3:               078E DEFINED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
UNDERSCORE:         0791 DEFINED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
REMAIN:             0791 DEFINED AT LINE 1076 IN MAIN.asm
RPAREN:             0797 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          079F DEFINED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
SHIFTLEFT:          07BB DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         07C3 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
SHIFTLEFT2:         07C4 DEFINED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
SHIFTRIGHT:         07CB DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        07D3 DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
SHIFTRIGHT2:        07D7 DEFINED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
DBLQUOTE:           07DE DEFINED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             07DE DEFINED AT LINE 1148 IN MAIN.asm
STRING1:            07E7 DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
STRING2:            07EA DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
STRING3:            07F3 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
MINUS:              0806 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                0812 DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
SUB1:               081C DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
ERROR1:             0825 DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
COMMENT:            082C DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
COMMAND_A:          0835 DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
ABSOLUTE:           0841 DEFINED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
ADDROF:             084E DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
ADDROF1:            0862 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
ADDROF2:            086D DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
COMMAND_B:          086F DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
BUFFERARRAY:        088A DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
BUFFERNUMBER:       08BE DEFINED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
BUFFERDEC:          08C5 DEFINED AT LINE 1305 IN MAIN.asm
BUFFERDEC0:         08DF DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
BUFFERDEC1:         08EF DEFINED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
BUFFERDEC2:         090F DEFINED AT LINE 1350 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1348 IN MAIN.asm
BUFFERDEC3:         0911 DEFINED AT LINE 1352 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
BUFFERDEC4:         0921 DEFINED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
BUFFERDEC5:         0922 DEFINED AT LINE 1366 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
BUFFERHEX:          092B DEFINED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1301 IN MAIN.asm
BUFFERHEX1:         094C DEFINED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
BUFFERHEX2:         0955 DEFINED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1401 IN MAIN.asm
BREAK:              0963 DEFINED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
BREAK1:             096A DEFINED AT LINE 1422 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
BUFFERSTRING:       097D DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
BUFFERSTRING0:      0984 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
BUFFERSTRING1:      098A DEFINED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
BUFFERCHAR:         0997 DEFINED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
BUFFERXCHARS:       099C DEFINED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
BUFFERXCHARS0:      099D DEFINED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1456 IN MAIN.asm
BUFFERXCHARS1:      09A6 DEFINED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
BUFFERXCHARS2:      09AE DEFINED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
COMMAND_I:          09B8 DEFINED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
COMMAND_P:          09C4 DEFINED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
PARTIAL:            09D6 DEFINED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
PRINTBUFFER:        09F6 DEFINED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
PRINTCHARS:         0A19 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
PRINTCHARS1:        0A20 DEFINED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
PRINTCHARS2:        0A26 DEFINED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
PRINTSTACK:         0A2B DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
SIZE:               0A2D DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
COMMAND_V:          0A37 DEFINED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
CONSTBUFSTART:      0A4C DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
CONSTHEAPSTART:     0A51 DEFINED AT LINE 1613 IN MAIN.asm
CONSTTIBSTART:      0A56 DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
VARBUFPTR:          0A5B DEFINED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
VARHEAPPTR:         0A64 DEFINED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
VARTIBPTR:          0A6D DEFINED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
VARIABLE:           0A76 DEFINED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
CONSTANT:           0A79 DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
CHARS:              0A7C DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
CHARS1:             0A7F DEFINED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
DECIMAL:            0A84 DEFINED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
DECIMAL1:           0A87 DEFINED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
HEXADECIMAL:        0A8C DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
INPUT:              0A92 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
KEY:                0A9D DEFINED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
OUTPUT:             0AA6 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
NUMBERS:            0AAF DEFINED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
FILTER:             0AB5 DEFINED AT LINE 1697 IN MAIN.asm
MAP:                0AB5 DEFINED AT LINE 1698 IN MAIN.asm
ARGS0A1L_:          0AB7 DEFINED AT LINE 1705 IN MAIN.asm
ARGS0A1L:           0AB9 DEFINED AT LINE 1708 IN MAIN.asm
ARGS1A0L_:          0ABA DEFINED AT LINE 1711 IN MAIN.asm
ARGS1A0L:           0ABC DEFINED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
ARGS1A1L_:          0ABD DEFINED AT LINE 1717 IN MAIN.asm
ARGS1A1L:           0ABF DEFINED AT LINE 1720 IN MAIN.asm
ARGS2A0L_:          0AC1 DEFINED AT LINE 1723 IN MAIN.asm
ARGS2A0L:           0AC3 DEFINED AT LINE 1726 IN MAIN.asm
ARGS1A2L_:          0AC5 DEFINED AT LINE 1729 IN MAIN.asm
ARGS1A2L:           0AC7 DEFINED AT LINE 1732 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
FLUSHBUFFER:        0ACA DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1411 IN MAIN.asm
                    > USED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
JUMPTABLE:          0AE1 DEFINED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
JUMPTABLE0:         0AE3 DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
JUMPTABLE1:         0AF0 DEFINED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
JUMPTABLE2:         0AF1 DEFINED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
PRTSTR0:            0AF7 DEFINED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
PRTSTR:             0AFB DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
NESTING:            0B00 DEFINED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
NESTING0:           0B0A DEFINED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1806 IN MAIN.asm
NESTING1A:          0B11 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
NESTING1:           0B14 DEFINED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
NESTING2:           0B23 DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
NESTING3:           0B25 DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
NESTING4:           0B30 DEFINED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
PROMPT:             0B32 DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
CRLF:               0B3B DEFINED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
PRINTSTR:           0B42 DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 16
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 135
TITLESTR:           0B49 DEFINED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
INIT:               0B5D DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
INIT1:              0B65 DEFINED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
WARMINIT:           0B6D DEFINED AT LINE 1873 IN MAIN.asm
COLDBOOT0:          0B80 DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
COLDINIT:           0B8A DEFINED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
COLDBOOT1:          0B9B DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
COLDSTART:          0BA8 DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
START:              0BB1 DEFINED AT LINE 1908 IN MAIN.asm
START1:             0BB7 DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
INTERPRET:          0BBD DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
INTERPRET2:         0BCC DEFINED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
INTERPRET3:         0BD4 DEFINED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
INTERPRET4:         0BDF DEFINED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
INTERPRET5:         0BE4 DEFINED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
INTERPRET5A:        0C07 DEFINED AT LINE 1985 IN MAIN.asm
INTERPRET6:         0C09 DEFINED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
INTERPRET7:         0C17 DEFINED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
INTERPRET8:         0C2A DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
NEXT:               0C45 DEFINED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
NEXT1:              0C56 DEFINED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
EXIT:               0C5D DEFINED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
RUN:                0C61 DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
ERROR:              0C65 DEFINED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
BACKSPACE_:         0C78 DEFINED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
EDIT_:              0C88 DEFINED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
REEDIT_:            0CA0 DEFINED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
PRINTSTACK_:        0CA3 DEFINED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 13
                    > USED AT LINE 8
EXPECTM_0_2654S45:  0D78 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2659S45:  0DF9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2660S45:  0E70 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2661S45:  0EE5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2662S45:  0F5A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2663S45:  0FCF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2664S45:  1044 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2665S45:  10BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2666S45:  1134 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2667S45:  11AB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2668S45:  1222 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2669S45:  129B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2670S45:  1316 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2671S45:  138F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2672S45:  1408 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2673S45:  1487 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2674S45:  1506 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2675S45:  1583 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2676S45:  1604 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2677S45:  1689 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2678S45:  170C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2679S45:  1789 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2680S45:  180E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2681S45:  188F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2682S45:  190C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2683S45:  1989 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2684S45:  1A0E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2685S45:  1A8B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2686S45:  1B08 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2687S45:  1B87 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2688S45:  1C16 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2689S45:  1C93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2690S45:  1D18 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2691S45:  1D95 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2692S45:  1E16 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2693S45:  1E93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2694S45:  1F12 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2695S45:  1F91 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2696S45:  200E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2697S45:  208B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2698S45:  2108 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2699S45:  2185 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2700S45:  2202 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2701S45:  227F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2702S45:  22FC DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2703S45:  2379 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2704S45:  23F8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2705S45:  2477 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2706S45:  24F6 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2707S45:  2577 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2708S45:  25F8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2709S45:  2673 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2710S45:  26EE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2711S45:  276F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2712S45:  27F6 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2713S45:  287D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2714S45:  2908 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2715S45:  299D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2716S45:  2A32 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2717S45:  2AAF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2718S45:  2B2E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2719S45:  2BAF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2720S45:  2C32 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2721S45:  2CB3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2722S45:  2D32 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2723S45:  2DB3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2724S45:  2E3A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2725S45:  2EC5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2726S45:  2F4C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2727S45:  2FDD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2728S45:  3070 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2729S45:  3109 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2730S45:  31A6 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2731S45:  3235 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2732S45:  32CA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2733S45:  3361 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2734S45:  33FA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2735S45:  3491 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2736S45:  3536 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2737S45:  35C9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2738S45:  3668 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2739S45:  3709 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2740S45:  37AC DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2741S45:  385B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2742S45:  390A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2743S45:  3997 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2744S45:  3A2A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2745S45:  3AB7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2746S45:  3B50 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2747S45:  3BE9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2748S45:  3C92 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2749S45:  3D43 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2750S45:  3DF4 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2751S45:  3E8D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2752S45:  3F32 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2753S45:  3FD3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2754S45:  407A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2755S45:  4137 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2756S45:  41F8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2757S45:  4281 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2758S45:  430A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2759S45:  4393 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2760S45:  441C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2761S45:  449D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2762S45:  451E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2763S45:  459F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2764S45:  4620 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2765S45:  46AB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2766S45:  473A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2767S45:  47C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2768S45:  485E DEFINED AT LINE 34
                    > USED AT LINE 10
EXECSTR:            4869 DEFINED AT LINE 141
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4A00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TIB:                4A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
BUF:                4B00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
VARS:               4C00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           4CD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4CD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4CD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4CD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4CD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4CD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4CDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4CDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4CDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4CE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4CE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4CE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4CE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1888 IN MAIN.asm
VDATAWIDTH:         4CE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
VNUMBASE:           4CE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
VTIBPTR:            4CEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
VBUFPTR:            4CEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
                    > USED AT LINE 1392 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
VNEXT:              4CEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1900 IN MAIN.asm
VHEAPPTR:           4CF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 543 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
VPOINTER:           4CF2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 1637 IN MAIN.asm
VREMAIN:            4CF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
VSAVEDIP:           4CF6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
VSAVEDSP:           4CF8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
VSAVEDNEXT:         4CFA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
VSAVEDBP:           4CFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
VCHECKSUM:          4CFE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             4D00 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
VTEMP2:             4D02 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
VLASTDEF:           4D04 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           4D06 DEFINED AT LINE 59 IN ram.asm
TBPTR:              4D08 DEFINED AT LINE 60 IN ram.asm
WARMBUF:            4D0A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
HEAP:               4D1E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 598 IN MAIN.asm
                    > USED AT LINE 1614 IN MAIN.asm
