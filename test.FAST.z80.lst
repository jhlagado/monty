0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 42               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 42               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 42               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 42               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 42               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 42               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 42               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 42               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 42               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 42               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 41               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 42               LD   (RST08),HL   
0094   22 D2 42               LD   (RST10),HL   
0097   22 D4 42               LD   (RST18),HL   
009A   22 D6 42               LD   (RST20),HL   
009D   22 D8 42               LD   (RST28),HL   
00A0   22 DA 42               LD   (RST30),HL   
00A3   22 DE 42               LD   (INTVEC),HL   
00A6   22 E0 42               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 42               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 42               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 41               LD   SP,STACK   
00C6   CD 0F 0B               CALL   init   
00C9   C3 00 0D               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   00 44                  DW   TIB   ; vTIBPtr an offset to the tib
0184   B3 0B                  DW   next   ; nNext
0186   00 46                  DW   HEAP   ; vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   0   ; ^@  0 NUL
0201   00                     DB   0   ; ^A  1 SOH
0202   00                     DB   0   ; ^B  2 STX
0203   00                     DB   0   ; ^C  3 ETX
0204   00                     DB   0   ; ^D  4 EOT
0205   00                     DB   0   ; ^E  5 ENQ
0206   00                     DB   0   ; ^F  6 ACK
0207   00                     DB   0   ; ^G  7 BEL
0208   00                     DB   0   ; ^H  8 BS
0209   00                     DB   0   ; ^I  9 TAB
020A   00                     DB   0   ; ^J 10 LF
020B   00                     DB   0   ; ^K 11 VT
020C   00                     DB   0   ; ^L 12 FF
020D   00                     DB   0   ; ^M 13 CR
020E   00                     DB   0   ; ^N 14 SO
020F   00                     DB   0   ; ^O 15 SI
0210   00                     DB   0   ; ^P 16 DLE
0211   00                     DB   0   ; ^Q 17 DC1
0212   00                     DB   0   ; ^R 18 DC2
0213   00                     DB   0   ; ^S 19 DC3
0214   00                     DB   0   ; ^T 20 DC4
0215   00                     DB   0   ; ^U 21 NAK
0216   00                     DB   0   ; ^V 22 SYN
0217   00                     DB   0   ; ^W 23 ETB
0218   00                     DB   0   ; ^X 24 CAN
0219   00                     DB   0   ; ^Y 25 EM
021A   00                     DB   0   ; ^Z 26 SUB
021B   00                     DB   0   ; ^[ 27 ESC
021C   00                     DB   0   ; ^\ 28 FS
021D   00                     DB   0   ; ^] 29 GS
021E   00                     DB   0   ; ^^ 30 RS
021F   00                     DB   0   ; ^_ 31 US
0220                OPCODES:      ; still available ~ `
0220   85                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(bang_)   ; !
0222   4D                     DB   lsb(dblquote_)   ; "
0223   41                     DB   lsb(hash_)   ; #
0224   09                     DB   lsb(dollar_)   ; $
0225   12                     DB   lsb(percent_)   ; %
0226   06                     DB   lsb(amper_)   ; &
0227   1E                     DB   lsb(tick_)   ; '
0228   6D                     DB   lsb(lparen_)   ; (
0229   87                     DB   lsb(rparen_)   ; )
022A   36                     DB   lsb(star_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4A                     DB   lsb(comma_)   ; ,
022D   50                     DB   lsb(minus_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(slash_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(colon_)   ; :
023B   21                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   53                     DB   lsb(eq_)   ; =
023E   62                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(question_)   ; ?
0240   03                     DB   lsb(at_)   ; @
0241   2D                     DB   lsb(upcase_)   ; A
0242   2D                     DB   lsb(upcase_)   ; B
0243   2D                     DB   lsb(upcase_)   ; C
0244   2D                     DB   lsb(upcase_)   ; D
0245   2D                     DB   lsb(upcase_)   ; E
0246   2D                     DB   lsb(upcase_)   ; F
0247   2D                     DB   lsb(upcase_)   ; G
0248   2D                     DB   lsb(upcase_)   ; h
0249   2D                     DB   lsb(upcase_)   ; I
024A   2D                     DB   lsb(upcase_)   ; J
024B   2D                     DB   lsb(upcase_)   ; K
024C   2D                     DB   lsb(upcase_)   ; L
024D   2D                     DB   lsb(upcase_)   ; M
024E   2D                     DB   lsb(upcase_)   ; N
024F   2D                     DB   lsb(upcase_)   ; O
0250   2D                     DB   lsb(upcase_)   ; p
0251   2D                     DB   lsb(upcase_)   ; Q
0252   2D                     DB   lsb(upcase_)   ; R
0253   2D                     DB   lsb(upcase_)   ; S
0254   2D                     DB   lsb(upcase_)   ; T
0255   2D                     DB   lsb(upcase_)   ; U
0256   2D                     DB   lsb(upcase_)   ; V
0257   2D                     DB   lsb(upcase_)   ; W
0258   2D                     DB   lsb(upcase_)   ; X
0259   2D                     DB   lsb(upcase_)   ; Y
025A   2D                     DB   lsb(upcase_)   ; Z
025B   0C                     DB   lsb(lbrack_)   ; [
025C   15                     DB   lsb(backslash_)   ; \
025D   0F                     DB   lsb(rbrack_)   ; ]
025E   47                     DB   lsb(caret_)   ; ^
025F   27                     DB   lsb(underscore_)   ; _
0260   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0261   30                     DB   lsb(lowcase_)   ; a
0262   30                     DB   lsb(lowcase_)   ; b
0263   30                     DB   lsb(lowcase_)   ; c
0264   30                     DB   lsb(lowcase_)   ; d
0265   30                     DB   lsb(lowcase_)   ; e
0266   30                     DB   lsb(lowcase_)   ; f
0267   30                     DB   lsb(lowcase_)   ; g
0268   30                     DB   lsb(lowcase_)   ; h
0269   30                     DB   lsb(lowcase_)   ; i
026A   30                     DB   lsb(lowcase_)   ; j
026B   30                     DB   lsb(lowcase_)   ; k
026C   30                     DB   lsb(lowcase_)   ; l
026D   30                     DB   lsb(lowcase_)   ; m
026E   30                     DB   lsb(lowcase_)   ; n
026F   30                     DB   lsb(lowcase_)   ; o
0270   30                     DB   lsb(lowcase_)   ; p
0271   30                     DB   lsb(lowcase_)   ; q
0272   30                     DB   lsb(lowcase_)   ; r
0273   30                     DB   lsb(lowcase_)   ; s
0274   30                     DB   lsb(lowcase_)   ; t
0275   30                     DB   lsb(lowcase_)   ; u
0276   30                     DB   lsb(lowcase_)   ; v
0277   30                     DB   lsb(lowcase_)   ; w
0278   30                     DB   lsb(lowcase_)   ; x
0279   30                     DB   lsb(lowcase_)   ; y
027A   30                     DB   lsb(lowcase_)   ; z
027B   18                     DB   lsb(lbrace_)   ; {
027C   44                     DB   lsb(pipe_)   ; |
027D   1B                     DB   lsb(rbrace_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 9C 03               JP   at   
0306                AMPER_:      
0306   C3 A6 03               JP   amper   
0309                DOLLAR_:      
0309   C3 CA 03               JP   dollar   
030C                LBRACK_:      
030C   C3 01 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 1D 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 6B 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 A5 05               JP   backslash   
0318                LBRACE_:      
0318   C3 CB 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 34 05               JP   rbrace   
031E                TICK_:       
031E   C3 90 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 84 07               JP   semicolon   
0324                DOT_:        
0324   C3 D4 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 76 07               JP   underscore   
032A                COLON_:      
032A   C3 94 04               JP   colon   
032D                UPCASE_:      
032D   C3 FA 06               JP   upcase   
0330                LOWCASE_:      
0330   C3 FF 06               JP   lowcase   
0333                QUESTION_:      
0333   C3 11 07               JP   question   
0336                STAR_:       
0336   C3 2A 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 46 07               JP   num   
0341                HASH_:       
0341   C3 DD 06               JP   hash   
0344                PIPE_:       
0344   C3 B1 03               JP   pipe   
0347                CARET_:      
0347   C3 3B 06               JP   caret   
034A                COMMA_:      
034A   C3 A7 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 C3 07               JP   dblquote   
0350                MINUS_:      
0350   C3 EB 07               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 83 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 17 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA B0 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 38 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA A0 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 1F 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 24 06               JP   lessthan   
0382                SLASH_:      
0382   C3 B6 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 7C 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 85 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399                             ; inc bc
0399                             ; ld a,(bc)
0399                             ; cp "="                      ; += add to variable
0399                             ; jp z,assign0
0399   E5                     PUSH   hl   
039A                             ; dec bc
039A   DD E9                  JP   (ix)   
039C                             ; @ addr
039C                             ; -- ptr
039C                AT:          
039C                ADDR:        
039C   ED 5B EE 42            LD   de,(vPointer)   
03A0   21 EE 42               LD   hl,vPointer   
03A3   C3 09 0A               JP   variable   
03A6                AMPER:       
03A6                AND:         
03A6   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A7   E1                     POP   hl   
03A8   7B                     LD   a,e   
03A9   A5                     AND   l   
03AA   6F                     LD   l,a   
03AB   7A                     LD   a,d   
03AC   A4                     AND   h   
03AD                AND1:        
03AD   67                     LD   h,a   
03AE   E5                     PUSH   hl   
03AF   DD E9                  JP   (ix)   
03B1                PIPE:        
03B1                OR:          
03B1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03B2   E1                     POP   hl   
03B3   7B                     LD   a,e   
03B4   B5                     OR   l   
03B5   6F                     LD   l,a   
03B6   7A                     LD   a,d   
03B7   B4                     OR   h   
03B8   18 F3                  JR   and1   
03BA                XOR:         
03BA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03BB                XOR1:        
03BB   E1                     POP   hl   
03BC   7B                     LD   a,e   
03BD   AD                     XOR   l   
03BE   6F                     LD   l,a   
03BF   7A                     LD   a,d   
03C0   AC                     XOR   h   
03C1   67                     LD   h,a   
03C2   E5                     PUSH   hl   
03C3   DD E9                  JP   (ix)   
03C5                INVERT:      ; Bitwise INVert the top member of the stack
03C5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C8   18 F1                  JR   xor1   
03CA                             ; $a .. $z
03CA                             ; -- value
03CA                             ; returns value of arg
03CA                DOLLAR:      
03CA                ARG:         
03CA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CD   FD 56 05               LD   d,(iy+5)   
03D0   EB                     EX   de,hl   
03D1   7D                     LD   a,l   ; arg_list* == null, skip
03D2   B4                     OR   h   
03D3   28 1C                  JR   z,arg0a   
03D5   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D6   2B                     DEC   hl   
03D7   7E                     LD   a,(hl)   
03D8   23                     INC   hl   
03D9   23                     INC   hl   
03DA   B7                     OR   a   
03DB   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DD   5F                     LD   e,a   ; e = a = num_args
03DE   03                     INC   bc   ; a = next char = dollar_name
03DF   0A                     LD   a,(bc)   
03E0   C5                     PUSH   bc   ; save IP
03E1   43                     LD   b,e   ; b = e = num_args
03E2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E5   FD 56 03               LD   d,(iy+3)   
03E8                ARG0:        
03E8   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E9   1B                     DEC   de   
03EA   BE                     CP   (hl)   
03EB   28 09                  JR   z,arg1   
03ED   23                     INC   hl   ; hl = next arg_list*
03EE   10 F8                  DJNZ   arg0   
03F0   C1                     POP   bc   ; no match, restore IP
03F1                ARG0A:       
03F1   11 00 00               LD   de,0   ; return 0
03F4   18 08                  JR   arg1a   
03F6                ARG1:        
03F6   C1                     POP   bc   ; restore IP
03F7   EB                     EX   de,hl   ; hl = arg*
03F8   22 EE 42               LD   (vPointer),hl   ; store arg* in setter
03FB   5E                     LD   e,(hl)   
03FC   23                     INC   hl   
03FD   56                     LD   d,(hl)   ; de = arg
03FE                ARG1A:       
03FE   D5                     PUSH   de   ; push arg
03FF   DD E9                  JP   (ix)   
0401                LBRACK:      
0401                ARRBEGIN:      
0401   11 00 00               LD   de,0   ; create stack frame
0404   D5                     PUSH   de   ; push null for IP
0405   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0408   FD 56 05               LD   d,(iy+5)   ; 
040B   D5                     PUSH   de   ; 
040C   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040F   FD 56 03               LD   d,(iy+3)   ; 
0412   D5                     PUSH   de   ; 
0413   FD E5                  PUSH   iy   ; push BP
0415   FD 21 00 00            LD   iy,0   ; BP = SP
0419   FD 39                  ADD   iy,sp   
041B   DD E9                  JP   (ix)   
041D                RBRACK:      
041D                ARREND:      
041D   FD 54                  LD   d,iyh   ; de = BP
041F   FD 5D                  LD   e,iyl   
0421   ED 43 FA 42            LD   (vTemp1),bc   ; save IP
0425   62 6B                  LD   hl,de   ; hl = de = BP
0427   B7                     OR   a   
0428   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
042A   CB 3C                  SRL   h   ; 
042C   CB 1D                  RR   l   
042E   44 4D                  LD   bc,hl   ; bc = count
0430   2A EC 42               LD   hl,(vHeapPtr)   ; hl = array[-2]
0433   71                     LD   (hl),c   ; write num items in length word
0434   23                     INC   hl   
0435   70                     LD   (hl),b   
0436   23                     INC   hl   ; hl = array[0], bc = count
0437                             ; de = BP, hl = array[0], bc = count
0437                ARREND1:      
0437   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043A   77                     LD   (hl),a   ; write lsb of array item
043B   23                     INC   hl   ; move to msb of array item
043C   3A E6 42               LD   a,(vDataWidth)   ; vDataWidth=1?
043F   3D                     DEC   a   
0440   28 05                  JR   z,arrEnd2   
0442   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0445   77                     LD   (hl),a   ; write msb of array item
0446   23                     INC   hl   ; move to next word in array
0447                ARREND2:      
0447   FD 2B                  DEC   iy   ; move to next word on stack
0449   FD 2B                  DEC   iy   
044B   0B                     DEC   bc   ; dec items count
044C   79                     LD   a,c   ; if not zero loop
044D   B0                     OR   b   
044E   20 E7                  JR   nz,arrEnd1   
0450   EB                     EX   de,hl   ; de = end of array, hl = BP
0451   F9                     LD   sp,hl   ; sp = BP
0452   E1                     POP   hl   ; de = end of array, hl = old BP
0453   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0454   FD 62                  LD   iyh,d   
0456   FD 6B                  LD   iyl,e   
0458   D1                     POP   de   ; pop arg_list (discard)
0459   D1                     POP   de   ; pop first_arg* (discard)
045A   D1                     POP   de   ; pop IP (discard)
045B   ED 5B EC 42            LD   de,(vHeapPtr)   ; de = array[-2]
045F   22 EC 42               LD   (vHeapPtr),hl   ; move heap* to end of array
0462   ED 4B FA 42            LD   bc,(vTemp1)   ; restore IP
0466   13                     INC   de   ; de = array[0]
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   DD E9                  JP   (ix)   
046B                             ; index of an array, based on vDataWidth
046B                             ; array num -- value    ; also sets vPointer to address
046B                ARRINDEX:      
046B   E1                     POP   hl   ; hl = index
046C   D1                     POP   de   ; de = array
046D   3A E6 42               LD   a,(vDataWidth)   ; a = data width
0470   3D                     DEC   a   
0471   28 01                  JR   z,arrIndex1   
0473                ARRINDEX0:      
0473   29                     ADD   hl,hl   ; if data width = 2 then double
0474                ARRINDEX1:      
0474   19                     ADD   hl,de   ; add addr
0475   22 EE 42               LD   (vPointer),hl   ; store address in setter
0478   16 00                  LD   d,0   
047A   5E                     LD   e,(hl)   
047B   B7                     OR   a   ; check data width again
047C   28 02                  JR   z,arrIndex2   
047E   23                     INC   hl   
047F   56                     LD   d,(hl)   
0480                ARRINDEX2:      
0480   D5                     PUSH   de   
0481   DD E9                  JP   (ix)   
0483                             ; value _oldValue --            ; uses address in vPointer
0483                ASSIGN:      
0483   E1                     POP   hl   ; discard last accessed value
0484   E1                     POP   hl   ; hl = new value
0485                ASSIGN0:      
0485   EB                     EX   de,hl   ; de = new value
0486                ASSIGNX:      
0486   2A EE 42               LD   hl,(vPointer)   
0489   73                     LD   (hl),e   
048A   3A E6 42               LD   a,(vDataWidth)   
048D   3D                     DEC   a   ; is it byte?
048E   28 02                  JR   z,assign1   
0490   23                     INC   hl   
0491   72                     LD   (hl),d   
0492                ASSIGN1:      
0492   DD E9                  JP   (ix)   
0494                             ; arg_list - parses input (ab:c)
0494                             ; names after the : represent uninitialised locals
0494                             ; return values are the state of the stack after the block ends
0494                COLON:       
0494                ARGLIST:      
0494   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0497   2A EC 42               LD   hl,(vHeapPtr)   ; hl = heap*
049A   23                     INC   hl   ; skip length field to start
049B   23                     INC   hl   
049C   E5                     PUSH   hl   ; save start of arg_list
049D   03                     INC   bc   ; point to next char
049E                ARGLIST1:      
049E   0A                     LD   a,(bc)   
049F   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A1   20 03                  JR   nz,arglist1a   
04A3   14                     INC   d   ; non zero value local count acts as flag
04A4   18 10                  JR   arglist3   
04A6                ARGLIST1A:      
04A6   FE 41                  CP   "A"   ; < "A" terminates arg_list
04A8   38 0F                  JR   c,arglist4   
04AA   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04AC   30 0B                  JR   nc,arglist4   
04AE                ARGLIST2:      
04AE   77                     LD   (hl),a   
04AF   23                     INC   hl   
04B0   1C                     INC   e   ; increase arg count
04B1   AF                     XOR   a   
04B2   B2                     OR   d   
04B3   28 01                  JR   z,arglist3   
04B5   14                     INC   d   ; if d > 0 increase local count
04B6                ARGLIST3:      
04B6   03                     INC   bc   ; point to next char
04B7   18 E5                  JR   arglist1   
04B9                ARGLIST4:      
04B9   0B                     DEC   bc   
04BA   AF                     XOR   a   
04BB   B2                     OR   d   
04BC   28 01                  JR   z,arglist5   
04BE   15                     DEC   d   ; remove initial inc
04BF                ARGLIST5:      
04BF   23                     INC   hl   
04C0   22 EC 42               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C3   E1                     POP   hl   ; hl = start of arg_list
04C4   E5                     PUSH   hl   ; return start of arg_list
04C5   2B                     DEC   hl   ; write number of locals at start - 1
04C6   72                     LD   (hl),d   
04C7   2B                     DEC   hl   ; write number of args + locals at start - 2
04C8   73                     LD   (hl),e   
04C9   DD E9                  JP   (ix)   
04CB                LBRACE:      
04CB                BLOCK:       
04CB   C5                     PUSH   bc   ; return pointer to first { of block
04CC   03                     INC   bc   
04CD   16 01                  LD   d,1   ; nesting: count first parenthesis
04CF                BLOCK1:      ; Skip to end of definition
04CF   0A                     LD   a,(bc)   ; Get the next character
04D0   03                     INC   bc   ; Point to next character
04D1   FE 21                  CP   " " + 1   ; ignore whitespace
04D3   38 FA                  JR   c,block1   
04D5   FE 29                  CP   ")"   
04D7   28 2D                  JR   z,block4   
04D9   FE 7D                  CP   "}"   
04DB   28 29                  JR   z,block4   
04DD   FE 5D                  CP   "]"   
04DF   28 25                  JR   z,block4   
04E1   FE 28                  CP   "("   
04E3   28 16                  JR   z,block2   
04E5   FE 7B                  CP   "{"   
04E7   28 12                  JR   z,block2   
04E9   FE 5B                  CP   "["   
04EB   28 0E                  JR   z,block2   
04ED   FE 27                  CP   "'"   
04EF   28 0D                  JR   z,block3   
04F1   FE 60                  CP   "`"   
04F3   28 09                  JR   z,block3   
04F5   FE 22                  CP   DQUOTE   
04F7   28 05                  JR   z,block3   
04F9   18 D4                  JR   block1   
04FB                BLOCK2:      
04FB   14                     INC   d   
04FC   18 D1                  JR   block1   
04FE                BLOCK3:      
04FE   3E 80                  LD   a,$80   
0500   AA                     XOR   d   
0501   47                     LD   b,a   
0502   20 CB                  JR   nz,block1   
0504   18 03                  JR   block5   
0506                BLOCK4:      
0506   15                     DEC   d   
0507   20 C6                  JR   nz,block1   ; get the next element
0509                BLOCK5:      
0509   60 69                  LD   hl,bc   ; hl = IP
050B   11 00 46               LD   de,HEAP   ; is IP pointing to object in heap
050E   B7                     OR   a   ; IP - HEAP
050F   ED 52                  SBC   hl,de   
0511   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0513   28 1C                  JR   z,block6   
0515   60 69                  LD   hl,bc   ; hl = IP
0517   D1                     POP   de   ; de = block*
0518   ED 43 FA 42            LD   (vTemp1),bc   ; save IP
051C   B7                     OR   a   ; bc = size
051D   ED 52                  SBC   hl,de   
051F   44 4D                  LD   bc,hl   
0521   EB                     EX   de,hl   ; hl = block* de = heap*
0522   ED 5B EC 42            LD   de,(vHeapPtr)   
0526   D5                     PUSH   de   ; return hblock*
0527   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0529   ED 53 EC 42            LD   (vHeapPtr),de   ; heap* += size
052D   ED 4B FA 42            LD   bc,(vTemp1)   ; restore IP
0531                BLOCK6:      
0531   0B                     DEC   bc   ; balanced, exit
0532   DD E9                  JP   (ix)   
0534                RBRACE:      
0534                BLOCKEND:      
0534   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0537   FD 56 01               LD   d,(iy+1)   
053A   ED 53 FA 42            LD   (vTemp1),de   
053E   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0541   FD 56 07               LD   d,(iy+7)   
0544   ED 53 FC 42            LD   (vTemp2),de   
0548   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054B   FD 56 03               LD   d,(iy+3)   
054E   EB                     EX   de,hl   
054F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0552   FD 56 01               LD   d,(iy+1)   
0555   13                     INC   de   ; for carry flag <=
0556   B7                     OR   a   
0557   ED 52                  SBC   hl,de   
0559   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055B   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
055D   FD 5D                  LD   e,iyl   
055F   21 08 00               LD   hl,8   
0562   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0563   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0564   18 0C                  JR   blockEnd2   
0566                BLOCKEND1:      ; same scope
0566   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0569   FD 56 03               LD   d,(iy+3)   
056C   EB                     EX   de,hl   
056D   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
056F   FD 5D                  LD   e,iyl   
0571   EB                     EX   de,hl   
0572                BLOCKEND2:      
0572   44 4D                  LD   bc,hl   ; bc = hl = BP
0574   B7                     OR   a   ; hl = BP - SP = count
0575   ED 72                  SBC   hl,sp   
0577   7D                     LD   a,l   
0578   B4                     OR   h   
0579   28 09                  JR   z,blockEnd3   
057B   C5                     PUSH   bc   ; bc = count, hl = BP
057C   44 4D                  LD   bc,hl   
057E   E1                     POP   hl   
057F   2B                     DEC   hl   ; hl = BP-1
0580   1B                     DEC   de   ; de = args*-1
0581   ED B8                  LDDR      
0583   13                     INC   de   
0584                BLOCKEND3:      
0584   EB                     EX   de,hl   ; sp = de = new tos*
0585   F9                     LD   sp,hl   
0586   ED 4B FC 42            LD   bc,(vTemp2)   
058A   FD 2A FA 42            LD   iy,(vTemp1)   
058E   DD E9                  JP   (ix)   
0590                TICK:        
0590                CHAR:        
0590   21 00 00               LD   hl,0   ; if "" is empty or null
0593                CHAR1:       
0593   03                     INC   bc   ; point to next char
0594   0A                     LD   a,(bc)   
0595   FE 27                  CP   "'"   ; ' is the terminator
0597   28 09                  JR   z,char3   
0599   FE 5C                  CP   $5c   ; \ is the escape
059B   20 02                  JR   nz,char2   
059D   03                     INC   bc   
059E   0A                     LD   a,(bc)   
059F                CHAR2:       
059F   6F                     LD   l,a   
05A0   18 F1                  JR   char1   
05A2                CHAR3:       
05A2   E5                     PUSH   hl   
05A3   DD E9                  JP   (ix)   
05A5                BACKSLASH:      
05A5   DD E9                  JP   (ix)   
05A7                             ; , discard stack item
05A7                             ; x y -- x
05A7                COMMA:       
05A7                DISCARD:      
05A7   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A9   FD 5D                  LD   e,iyl   
05AB   EB                     EX   de,hl   
05AC   B7                     OR   a   
05AD   ED 72                  SBC   hl,sp   
05AF   CB 7C                  BIT   7,h   
05B1   20 01                  JR   nz,discard1   
05B3   E1                     POP   hl   
05B4                DISCARD1:      
05B4   DD E9                  JP   (ix)   
05B6                SLASH:       
05B6   03                     INC   bc   
05B7   0A                     LD   a,(bc)   
05B8   FE 5C                  CP   $5C   
05BA   CA AF 08               JP   z,comment   
05BD   FE 41                  CP   "A"   
05BF   D2 0A 08               JP   nc,command   
05C2   0B                     DEC   bc   
05C3   D1                     POP   de   
05C4   E1                     POP   hl   
05C5   C5                     PUSH   bc   ; preserve the IP
05C6   44 4D                  LD   bc,hl   
05C8   CD FE 05               CALL   divide   
05CB   EB                     EX   de,hl   
05CC   ED 53 F0 42            LD   (vRemain),de   
05D0   C1                     POP   bc   
05D1   C3 99 03               JP   add3   
05D4                DOT:         
05D4   03                     INC   bc   
05D5   0A                     LD   a,(bc)   
05D6   E1                     POP   hl   
05D7   FE 68                  CP   "h"   
05D9   20 05                  JR   nz,dot1   
05DB   CD 9E 0A               CALL   prthex   
05DE   18 17                  JR   dot4   
05E0                DOT1:        
05E0   FE 73                  CP   "s"   
05E2   20 05                  JR   nz,dot2   
05E4   CD C1 0A               CALL   prtstr   
05E7   18 0E                  JR   dot4   
05E9                DOT2:        
05E9   FE 63                  CP   "c"   
05EB   20 06                  JR   nz,dot3   
05ED   7D                     LD   a,l   
05EE   CD 85 00               CALL   putchar   
05F1   18 04                  JR   dot4   
05F3                DOT3:        
05F3   0B                     DEC   bc   
05F4   CD 56 0A               CALL   prtdec   
05F7                DOT4:        
05F7   3E 20                  LD   a," "   
05F9   CD 85 00               CALL   putchar   
05FC   DD E9                  JP   (ix)   
05FE                             ; division subroutine.
05FE                             ; bc: divisor, de: dividend, hl: remainder
05FE                DIVIDE:      
05FE   21 00 00               LD   hl,0   ; zero the remainder
0601   3E 10                  LD   a,16   ; loop counter
0603                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0603   CB 21                  SLA   c   
0605   CB 10                  RL   b   
0607   ED 6A                  ADC   hl,hl   
0609   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
060B   38 03                  JR   c,divide2   
060D   0C                     INC   c   
060E   18 01                  JR   divide3   
0610                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0610   19                     ADD   hl,de   
0611                DIVIDE3:      
0611   3D                     DEC   a   
0612   20 EF                  JR   nz,divide1   
0614   50 59                  LD   de,bc   ; result from bc to de
0616   C9                     RET      
0617                             ; hl = value1, de = value2
0617                             ; hl = result
0617                EQUALS:      
0617   B7                     OR   a   ; reset the carry flag
0618   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
061A   28 10                  JR   z,true1   
061C   C3 32 06               JP   false1   
061F                             ; hl = value1 de = value2
061F                             ; hl = result
061F                LESSTHANEQ:      
061F   B7                     OR   a   
0620   ED 52                  SBC   hl,de   
0622   18 05                  JR   lessthan1   
0624                             ; hl = value1 de = value2
0624                             ; hl = result
0624                LESSTHAN:      
0624   B7                     OR   a   
0625   ED 52                  SBC   hl,de   
0627   28 09                  JR   z,false1   
0629                LESSTHAN1:      
0629   FA 32 06               JP   m,false1   
062C                TRUE1:       
062C   21 FF FF               LD   hl,TRUE   
062F   E5                     PUSH   hl   
0630   DD E9                  JP   (ix)   
0632                NULL1:       
0632                FALSE1:      
0632   21 00 00               LD   hl,FALSE   
0635   E5                     PUSH   hl   
0636   DD E9                  JP   (ix)   
0638                LPAREN:      
0638   C3 CB 04               JP   block   
063B                             ; execute a block of code which ends with }
063B                             ; creates a root scope if BP == stack
063B                             ; else uses outer scope
063B                CARET:       
063B                GO:          
063B   D1                     POP   de   ; de = block*
063C                GO1:         
063C   7B                     LD   a,e   ; if block* == null, exit
063D   B2                     OR   d   
063E   20 02                  JR   nz,go2   
0640   DD E9                  JP   (ix)   
0642                GO2:         
0642   1A                     LD   a,(de)   
0643   FE 7B                  CP   "{"   
0645   28 07                  JR   z,goBlock1   
0647   FE 28                  CP   "("   
0649   C2 81 06               JP   nz,goFunc   
064C   13                     INC   de   ; de is the address to jump back to
064D   D5                     PUSH   de   ; push de just before stack frame
064E                GOBLOCK:      
064E                GOBLOCK1:      
064E   ED 53 FA 42            LD   (vTemp1),de   ; save de
0652   21 80 41               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0655   FD 54                  LD   d,iyh   
0657   FD 5D                  LD   e,iyl   
0659   B7                     OR   a   ; if stack* == BP then this is the root_scope
065A   ED 52                  SBC   hl,de   
065C   ED 5B FA 42            LD   de,(vTemp1)   ; restore de
0660   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0661   B4                     OR   h   
0662   3E 00                  LD   a,0   
0664   28 6C                  JR   z,goFunc8   
0666   C5                     PUSH   bc   ; push IP
0667   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
066A   FD 46 05               LD   b,(iy+5)   
066D   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0670   FD 66 03               LD   h,(iy+3)   
0673                GOBLOCK2:      
0673   C5                     PUSH   bc   ; arg_list*
0674   E5                     PUSH   hl   ; first_arg*
0675   FD E5                  PUSH   iy   ; push BP
0677   FD 21 00 00            LD   iy,0   ; BP = SP
067B   FD 39                  ADD   iy,sp   
067D   42 4B                  LD   bc,de   ; bc = de = block*-1
067F   DD E9                  JP   (ix)   
0681                GOFUNC:      ; execute function
0681   EB                     EX   de,hl   ; hl = func*
0682   5E                     LD   e,(hl)   ; de = partial_array*
0683   23                     INC   hl   
0684   56                     LD   d,(hl)   
0685   23                     INC   hl   
0686   7B                     LD   a,e   ; if partial_array* == null skip
0687   B2                     OR   d   
0688   28 21                  JR   z,goFunc3   
068A   ED 43 FA 42            LD   (vTemp1),bc   
068E   22 FC 42               LD   (vTemp2),hl   ; save bc,hl
0691   EB                     EX   de,hl   ; hl = partial_array*
0692   2B                     DEC   hl   ; bc = count
0693   46                     LD   b,(hl)   
0694   2B                     DEC   hl   
0695   4E                     LD   c,(hl)   
0696   23                     INC   hl   ; push each item on stack
0697   23                     INC   hl   
0698   18 06                  JR   goFunc2   
069A                GOFUNC1:      
069A   5E                     LD   e,(hl)   ; de = partial item
069B   23                     INC   hl   
069C   56                     LD   d,(hl)   
069D   23                     INC   hl   
069E   D5                     PUSH   de   ; push on stack
069F   0B                     DEC   bc   
06A0                GOFUNC2:      
06A0   79                     LD   a,c   ; if count != 0 then loop
06A1   B0                     OR   b   
06A2   20 F6                  JR   nz,goFunc1   
06A4   ED 4B FA 42            LD   bc,(vTemp1)   ; restore bc
06A8   2A FC 42               LD   hl,(vTemp2)   ; restore hl
06AB                GOFUNC3:      
06AB   5E                     LD   e,(hl)   ; de = block*
06AC   23                     INC   hl   
06AD   56                     LD   d,(hl)   
06AE   23                     INC   hl   
06AF   ED 53 FA 42            LD   (vTemp1),de   ; save block*
06B3   5E                     LD   e,(hl)   ; de = arg_list*
06B4   23                     INC   hl   
06B5   56                     LD   d,(hl)   
06B6   23                     INC   hl   
06B7   EB                     EX   de,hl   ; hl = arg_list*
06B8   ED 5B FA 42            LD   de,(vTemp1)   ; restore de = block*
06BC   7D                     LD   a,l   ; if arg_list* == null a = 0
06BD   B4                     OR   h   
06BE   20 03                  JR   nz,goFunc4   
06C0   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06C1   18 0F                  JR   goFunc8   
06C3                GOFUNC4:      ; allocate locals
06C3   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06C4   7E                     LD   a,(hl)   
06C5   18 03                  JR   goFunc6   
06C7                GOFUNC5:      ; loop
06C7   3B                     DEC   sp   
06C8   3B                     DEC   sp   
06C9   3D                     DEC   a   
06CA                GOFUNC6:      
06CA   B7                     OR   a   
06CB   20 FA                  JR   nz,goFunc5   ; end loop
06CD                GOFUNC7:      
06CD   2B                     DEC   hl   ; a = num_args* x 2
06CE   7E                     LD   a,(hl)   
06CF   23                     INC   hl   
06D0   23                     INC   hl   
06D1   87                     ADD   a,a   ; a *= 2
06D2                GOFUNC8:      
06D2   C5                     PUSH   bc   ; push IP
06D3   44 4D                  LD   bc,hl   
06D5   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06D8   85                     ADD   a,l   
06D9   6F                     LD   l,a   
06DA   39                     ADD   hl,sp   
06DB   18 96                  JR   goBlock2   
06DD                HASH:        
06DD                HEXNUM:      
06DD   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E0                HEXNUM1:      
06E0   03                     INC   bc   
06E1   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E2   CB 77                  BIT   6,a   ; is it uppercase alpha?
06E4   28 02                  JR   z,hexnum2   ; no a decimal
06E6   D6 07                  SUB   7   ; sub 7  to make $a - $F
06E8                HEXNUM2:      
06E8   D6 30                  SUB   $30   ; form decimal digit
06EA   DA 68 07               JP   c,num2   
06ED   FE 10                  CP   $0F+1   
06EF   D2 68 07               JP   nc,num2   
06F2   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06F3   29                     ADD   hl,hl   ; 4X
06F4   29                     ADD   hl,hl   ; 8X
06F5   29                     ADD   hl,hl   ; 16X
06F6   85                     ADD   a,l   ; add into bottom of hl
06F7   6F                     LD   l,a   
06F8   18 E6                  JR   hexnum1   
06FA                UPCASE:      
06FA   0A                     LD   a,(bc)   ; a = identifier char
06FB   D6 41                  SUB   "A"   ; "A" = 0
06FD   18 05                  JR   ident1   
06FF                LOWCASE:      
06FF   0A                     LD   a,(bc)   
0700   D6 61                  SUB   "a"   
0702   C6 1A                  ADD   a,26   
0704                IDENT1:      
0704   87                     ADD   a,a   ; l = a * 2
0705   6F                     LD   l,a   
0706   26 42                  LD   h,msb(vars)   
0708   22 EE 42               LD   (vPointer),hl   ; store address in setter
070B   5E                     LD   e,(hl)   
070C   23                     INC   hl   
070D   56                     LD   d,(hl)   
070E   D5                     PUSH   de   
070F   DD E9                  JP   (ix)   
0711                             ; if
0711                             ; condition then -- value
0711                QUESTION:      
0711                IF:          
0711   03                     INC   bc   
0712   0A                     LD   a,(bc)   
0713   FE 3F                  CP   "?"   
0715   28 06                  JR   z,ifte   
0717   0B                     DEC   bc   
0718   11 00 00               LD   de,NUL   ; NUL pointer for else
071B   18 01                  JR   ifte1   
071D                             ; ifte
071D                             ; condition then else -- value
071D                IFTE:        
071D   D1                     POP   de   ; de = else
071E                IFTE1:       
071E   E1                     POP   hl   ; hl = then
071F   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0720   7C                     LD   a,h   
0721   B5                     OR   l   
0722   E1                     POP   hl   ; hl = then
0723   CA 3C 06               JP   z,go1   ; if z de = else
0726   EB                     EX   de,hl   ; condition = false, de = then
0727   C3 3C 06               JP   go1   
072A                STAR:        
072A                MUL:         
072A   D1                     POP   de   ; get first value
072B   E1                     POP   hl   
072C                MUL2:        
072C   C5                     PUSH   bc   ; Preserve the IP
072D   44 4D                  LD   bc,hl   ; bc = 2nd value
072F   21 00 00               LD   hl,0   
0732   3E 10                  LD   a,16   
0734                MUL3:        
0734   29                     ADD   hl,hl   
0735   CB 13                  RL   e   
0737   CB 12                  RL   d   
0739   30 04                  JR   nc,$+6   
073B   09                     ADD   hl,bc   
073C   30 01                  JR   nc,$+3   
073E   13                     INC   de   
073F   3D                     DEC   a   
0740   20 F2                  JR   nz,mul3   
0742   C1                     POP   bc   ; Restore the IP
0743   C3 99 03               JP   add3   
0746                NUM:         
0746   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0749   0A                     LD   a,(bc)   ; Get numeral or -
074A   FE 2D                  CP   "-"   
074C   20 01                  JR   nz,num0   
074E   03                     INC   bc   ; move to next char, no flags affected
074F                NUM0:        
074F   08                     EX   af,af'   ; save zero flag = 0 for later
0750                NUM1:        
0750   0A                     LD   a,(bc)   ; read digit
0751   D6 30                  SUB   "0"   ; less than 0?
0753   38 13                  JR   c,num2   ; not a digit, exit loop
0755   FE 0A                  CP   10   ; greater that 9?
0757   30 0F                  JR   nc,num2   ; not a digit, exit loop
0759   03                     INC   bc   ; inc IP
075A   54 5D                  LD   de,hl   ; multiply hl * 10
075C   29                     ADD   hl,hl   
075D   29                     ADD   hl,hl   
075E   19                     ADD   hl,de   
075F   29                     ADD   hl,hl   
0760   85                     ADD   a,l   ; add digit in a to hl
0761   6F                     LD   l,a   
0762   3E 00                  LD   a,0   
0764   8C                     ADC   a,h   
0765   67                     LD   h,a   
0766   18 E8                  JR   num1   
0768                NUM2:        
0768   0B                     DEC   bc   
0769   08                     EX   af,af'   ; restore zero flag
076A   20 07                  JR   nz,num3   
076C   EB                     EX   de,hl   ; negate the value of hl
076D   21 00 00               LD   hl,0   
0770   B7                     OR   a   ; jump to sub2
0771   ED 52                  SBC   hl,de   
0773                NUM3:        
0773   E5                     PUSH   hl   ; Put the number on the stack
0774   DD E9                  JP   (ix)   ; and process the next character
0776                UNDERSCORE:      
0776                REMAIN:      
0776   2A F0 42               LD   hl,(vRemain)   
0779   E5                     PUSH   hl   
077A   DD E9                  JP   (ix)   
077C                RPAREN:      
077C   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
077F   FD 46 09               LD   b,(iy+9)   
0782   DD E9                  JP   (ix)   
0784                             ; arg_list* block* -- ptr
0784                SEMICOLON:      
0784   D1                     POP   de   ; de = block* hl = heap*
0785   2A EC 42               LD   hl,(vHeapPtr)   
0788   AF                     XOR   a   
0789   77                     LD   (hl),a   ; compile null partial_array*
078A   23                     INC   hl   
078B   77                     LD   (hl),a   
078C   23                     INC   hl   
078D   73                     LD   (hl),e   ; compile block*
078E   23                     INC   hl   
078F   72                     LD   (hl),d   
0790   23                     INC   hl   
0791   D1                     POP   de   ; de = block*
0792   73                     LD   (hl),e   ; compile arg_list*
0793   23                     INC   hl   
0794   72                     LD   (hl),d   
0795   23                     INC   hl   
0796   ED 5B EC 42            LD   de,(vHeapPtr)   ; return func*
079A   D5                     PUSH   de   
079B   22 EC 42               LD   (vHeapPtr),hl   ; heap* += 4
079E   DD E9                  JP   (ix)   
07A0                             ; shiftLeft
07A0                             ; value count -- value2          shift left count places
07A0                SHIFTLEFT:      
07A0   50 59                  LD   de,bc   ; save IP
07A2   C1                     POP   bc   ; bc = count
07A3   41                     LD   b,c   ; b = loop counter
07A4   E1                     POP   hl   
07A5   04                     INC   b   ; test for counter=0 case
07A6   18 01                  JR   shiftLeft2   
07A8                SHIFTLEFT1:      
07A8   29                     ADD   hl,hl   ; left shift hl
07A9                SHIFTLEFT2:      
07A9   10 FD                  DJNZ   shiftLeft1   
07AB   E5                     PUSH   hl   
07AC   42 4B                  LD   bc,de   ; restore IP
07AE   DD E9                  JP   (ix)   
07B0                             ; shiftRight
07B0                             ; value count -- value2          shift left count places
07B0                SHIFTRIGHT:      
07B0   50 59                  LD   de,bc   ; save IP
07B2   C1                     POP   bc   ; bc = count
07B3   41                     LD   b,c   ; b = loop counter
07B4   E1                     POP   hl   
07B5   04                     INC   b   ; test for counter=0 case
07B6   18 04                  JR   shiftRight2   
07B8                SHIFTRIGHT1:      
07B8   CB 3C                  SRL   h   ; right shift hl
07BA   CB 1D                  RR   l   
07BC                SHIFTRIGHT2:      
07BC   10 FA                  DJNZ   shiftRight1   
07BE   E5                     PUSH   hl   
07BF   42 4B                  LD   bc,de   ; restore IP
07C1   DD E9                  JP   (ix)   
07C3                             ; string
07C3                             ; -- ptr                        ; points to start of string chars,
07C3                             ; length is stored at start - 2 bytes
07C3                DBLQUOTE:      
07C3                STRING:      
07C3   2A EC 42               LD   hl,(vHeapPtr)   ; hl = heap*
07C6   23                     INC   hl   ; skip length field to start
07C7   23                     INC   hl   
07C8   E5                     PUSH   hl   ; save start of string
07C9   03                     INC   bc   ; point to next char
07CA   18 03                  JR   string2   
07CC                STRING1:      
07CC   77                     LD   (hl),a   
07CD   23                     INC   hl   ; increase count
07CE   03                     INC   bc   ; point to next char
07CF                STRING2:      
07CF   0A                     LD   a,(bc)   
07D0   FE 22                  CP   DQUOTE   ; " is the string terminator
07D2   28 04                  JR   z,string3   
07D4   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D6   20 F4                  JR   nz,string1   
07D8                STRING3:      
07D8   AF                     XOR   a   ; write NUL to terminate string
07D9   77                     LD   (hl),a   ; hl = end of string
07DA   23                     INC   hl   
07DB   22 EC 42               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07DE   2B                     DEC   hl   ; hl = end of string without terminator
07DF   D1                     POP   de   ; de = start of string
07E0   D5                     PUSH   de   ; return start of string
07E1   B7                     OR   a   ; hl = length bytes, de = start of string
07E2   ED 52                  SBC   hl,de   
07E4   EB                     EX   de,hl   
07E5   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E6   72                     LD   (hl),d   
07E7   2B                     DEC   hl   
07E8   73                     LD   (hl),e   
07E9   DD E9                  JP   (ix)   
07EB                MINUS:       ; negative sign or subtract
07EB   03                     INC   bc   ; check if sign of a number
07EC   0A                     LD   a,(bc)   
07ED   0B                     DEC   bc   
07EE   FE 30                  CP   "0"   
07F0   38 05                  JR   c,sub   
07F2   FE 3A                  CP   "9"+1   
07F4   DA 3E 03               JP   c,num_   
07F7                SUB:         ; Subtract the value 2nd on stack from top of stack
07F7   03                     INC   bc   
07F8   FE 2D                  CP   "-"   
07FA   20 05                  JR   nz,sub1   
07FC   E1                     POP   hl   
07FD   2B                     DEC   hl   
07FE   C3 85 04               JP   assign0   
0801                SUB1:        
0801   0B                     DEC   bc   
0802   D1                     POP   de   
0803   E1                     POP   hl   
0804   B7                     OR   a   
0805   ED 52                  SBC   hl,de   
0807   C3 99 03               JP   add3   
080A                             ;*******************************************************************
080A                             ; commands
080A                             ; a contains command letter
080A                             ; bc points to command letter
080A                             ;*******************************************************************
080A                COMMAND:      
080A   FE 2F                  CP   "/"   ; // comment
080C   CA AF 08               JP   z,comment   
080F   FE 61                  CP   "a"   ; /ab absolute /ad address of
0811   28 42                  JR   z,command_a   
0813   FE 62                  CP   "b"   ; /ba buf array /bb buf block
0815                             ; /bd buf decimal /bp buf params
0815                             ; /bs buf string /br break
0815   CA 63 08               JP   z,command_b   
0818   FE 63                  CP   "c"   ; /c chars
081A   CA E5 09               JP   z,chars   
081D   FE 66                  CP   "f"   ; /f false
081F   CA 32 06               JP   z,false1   
0822   FE 69                  CP   "i"   ; /in input iv invert
0824   CA 76 08               JP   z,command_i   
0827   FE 6B                  CP   "k"   ; /k key
0829   CA 1A 0A               JP   z,key   
082C   FE 6E                  CP   "n"   ; /n numbers
082E   CA 2C 0A               JP   z,numbers   
0831   FE 6F                  CP   "o"   ; /o output
0833   CA 23 0A               JP   z,output   
0836   FE 70                  CP   "p"   ; /pa partial /pc print chars /pk print stack
0838   CA 84 08               JP   z,command_p   
083B   FE 74                  CP   "t"   ; /t true
083D   CA 2C 06               JP   z,true1   
0840   FE 76                  CP   "v"   ; /vH heap start vT TIB start /vh heapPtr /vt TIBPtr
0842   CA 97 08               JP   z,command_v   
0845   FE 78                  CP   "x"   ; /x xor
0847   CA BA 03               JP   z,xor   
084A   FE 7A                  CP   "z"   ; /z
084C   CA 34 0A               JP   z,zprt   
084F                ERROR1:      
084F   21 01 00               LD   hl,1   ; error 1: unknown command
0852   C3 D1 0B               JP   error   
0855                COMMAND_A:      
0855   03                     INC   bc   
0856   0A                     LD   a,(bc)   
0857   FE 62                  CP   "b"   
0859   CA B8 08               JP   z,absolute   
085C   FE 64                  CP   "d"   
085E   CA C5 08               JP   z,addrOf   
0861   18 EC                  JR   error1   
0863                COMMAND_B:      
0863   03                     INC   bc   
0864   0A                     LD   a,(bc)   
0865   FE 64                  CP   "d"   ; /bd buffer decimal
0867   CA 02 09               JP   z,bufferDec   
086A   FE 72                  CP   "r"   ; /br break
086C   CA 63 09               JP   z,break   
086F   FE 73                  CP   "s"   ; /bs buffer string
0871   CA E6 08               JP   z,bufferString   
0874   18 D9                  JR   error1   
0876                COMMAND_I:      
0876   03                     INC   bc   
0877   0A                     LD   a,(bc)   
0878   FE 6E                  CP   "n"   ; /in input
087A   CA 0F 0A               JP   z,input   
087D   FE 76                  CP   "v"   ; /iv invert
087F   CA C5 03               JP   z,invert   
0882   18 CB                  JR   error1   
0884                COMMAND_P:      
0884   03                     INC   bc   
0885   0A                     LD   a,(bc)   
0886   FE 61                  CP   "a"   
0888   CA 7D 09               JP   z,partial   
088B   FE 63                  CP   "c"   
088D   CA 9D 09               JP   z,printChars   
0890   FE 6B                  CP   "k"   
0892   CA AE 09               JP   z,printStack   
0895   18 B8                  JR   error1   
0897                COMMAND_V:      
0897   03                     INC   bc   
0898   0A                     LD   a,(bc)   
0899   FE 68                  CP   "h"   
089B   CA F7 09               JP   z,varHeapPtr   
089E   FE 74                  CP   "t"   
08A0   CA 00 0A               JP   z,varTIBPtr   
08A3   FE 48                  CP   "H"   
08A5   CA ED 09               JP   z,constHeapStart   
08A8   FE 54                  CP   "T"   
08AA   CA F2 09               JP   z,constTIBStart   
08AD   18 A0                  JR   error1   
08AF                COMMENT:      
08AF   03                     INC   bc   ; point to next char
08B0   0A                     LD   a,(bc)   
08B1   FE 20                  CP   " "   ; terminate on any char less than SP
08B3   30 FA                  JR   nc,comment   
08B5   0B                     DEC   bc   
08B6   DD E9                  JP   (ix)   
08B8                             ; /ab absolute
08B8                             ; num -- num
08B8                ABSOLUTE:      
08B8   E1                     POP   hl   
08B9   CB 7C                  BIT   7,h   
08BB   C8                     RET   z   
08BC   AF                     XOR   a   
08BD   95                     SUB   l   
08BE   6F                     LD   l,a   
08BF   9F                     SBC   a,a   
08C0   94                     SUB   h   
08C1   67                     LD   h,a   
08C2   E5                     PUSH   hl   
08C3   DD E9                  JP   (ix)   
08C5                             ; /ad addrOf
08C5                             ; char -- addr
08C5                ADDROF:      
08C5   E1                     POP   hl   ; a = char
08C6   7D                     LD   a,l   
08C7   FE 7B                  CP   "z"+1   ; if a > z then exit
08C9   30 19                  JR   nc,addrOf2   
08CB   D6 41                  SUB   "A"   ; a - 65
08CD   38 15                  JR   c,addrOf2   ; if < A then exit
08CF   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08D1   38 06                  JR   c,addrOf1   
08D3   D6 06                  SUB   "a"-("Z"+1)   
08D5   FE 1A                  CP   "Z"-"A"+1   
08D7   38 0B                  JR   c,addrOf2   ; if < a then exit
08D9                ADDROF1:      
08D9   87                     ADD   a,a   ; double a
08DA   21 00 42               LD   hl,VARS   ; hl = VARS + a
08DD   85                     ADD   a,l   
08DE   6F                     LD   l,a   
08DF   3E 00                  LD   a,0   
08E1   8C                     ADC   a,h   
08E2   67                     LD   h,a   
08E3   E5                     PUSH   hl   
08E4                ADDROF2:      
08E4   DD E9                  JP   (ix)   
08E6                             ; /bs buffered string
08E6                             ; string* -- length
08E6                BUFFERSTRING:      
08E6   E1                     POP   hl   ; hl = string*
08E7   ED 5B E8 42            LD   de,(vTIBPtr)   ; de = buffer*
08EB   18 03                  JR   bufferString1   
08ED                BUFFERSTRING0:      
08ED   12                     LD   (de),a   ; a -> buffer*
08EE   13                     INC   de   ; string*++ buffer++
08EF   23                     INC   hl   
08F0                BUFFERSTRING1:      
08F0   7E                     LD   a,(hl)   ; a <- string*
08F1   B7                     OR   a   ; if NUL exit loop
08F2   20 F9                  JR   nz,bufferString0   
08F4   2A E8 42               LD   hl,(vTIBPtr)   ; de = buffer*' hl = buffer*
08F7   ED 53 E8 42            LD   (vTIBPtr),de   ; save buffer*' in pointer
08FB   EB                     EX   de,hl   ; hl = length
08FC   B7                     OR   a   
08FD   ED 52                  SBC   hl,de   
08FF   E5                     PUSH   hl   ; return length
0900   DD E9                  JP   (ix)   
0902                             ; /bd buffer decimal
0902                             ; value -- length               ; length can be used to rewind buffer*
0902                BUFFERDEC:      
0902   ED 5B E8 42            LD   de,(vTIBPtr)   ; de"= buffer* bc" = IP
0906   D9                     EXX      
0907   E1                     POP   hl   ; hl = value
0908   CD 1A 09               CALL   bufferDec0   
090B   D9                     EXX      ; de = buffer*' bc = IP
090C   2A E8 42               LD   hl,(vTIBPtr)   ; hl = buffer*
090F   ED 53 E8 42            LD   (vTIBPtr),de   ; update buffer* with buffer*'
0913   EB                     EX   de,hl   ; hl = length
0914   B7                     OR   a   
0915   ED 52                  SBC   hl,de   
0917   E5                     PUSH   hl   ; return length
0918   DD E9                  JP   (ix)   
091A                             ; hl = value
091A                             ; de' = buffer*
091A                             ; a, bc, de, hl destroyed
091A                BUFFERDEC0:      
091A   CB 7C                  BIT   7,h   
091C   28 0C                  JR   z,bufferDec1   
091E   D9                     EXX      
091F   3E 2D                  LD   a,"-"   
0921   12                     LD   (de),a   
0922   13                     INC   de   
0923   D9                     EXX      
0924   AF                     XOR   a   
0925   95                     SUB   l   
0926   6F                     LD   l,a   
0927   9F                     SBC   a,a   
0928   94                     SUB   h   
0929   67                     LD   h,a   
092A                BUFFERDEC1:      
092A   0E 00                  LD   c,0   ; leading zeros flag = false
092C   11 F0 D8               LD   de,-10000   
092F   CD 4A 09               CALL   bufferDec2   
0932   11 18 FC               LD   de,-1000   
0935   CD 4A 09               CALL   bufferDec2   
0938   11 9C FF               LD   de,-100   
093B   CD 4A 09               CALL   bufferDec2   
093E   1E F6                  LD   e,-10   
0940   CD 4A 09               CALL   bufferDec2   
0943   0C                     INC   c   ; flag = true for at least digit
0944   1E FF                  LD   e,-1   
0946   CD 4A 09               CALL   bufferDec2   
0949   C9                     RET      
094A                BUFFERDEC2:      
094A   06 2F                  LD   b,"0"-1   
094C                BUFFERDEC3:      
094C   04                     INC   b   
094D   19                     ADD   hl,de   
094E   38 FC                  JR   c,bufferDec3   
0950   ED 52                  SBC   hl,de   
0952   3E 30                  LD   a,"0"   
0954   B8                     CP   b   
0955   20 05                  JR   nz,bufferDec4   
0957   AF                     XOR   a   
0958   B1                     OR   c   
0959   C8                     RET   z   
095A   18 01                  JR   bufferDec5   
095C                BUFFERDEC4:      
095C   0C                     INC   c   
095D                BUFFERDEC5:      
095D   78                     LD   a,b   
095E   D9                     EXX      
095F   12                     LD   (de),a   
0960   13                     INC   de   
0961   D9                     EXX      
0962   C9                     RET      
0963                BREAK:       
0963   E1                     POP   hl   
0964   7D                     LD   a,l   
0965   B4                     OR   h   
0966   28 02                  JR   z,break1   
0968   DD E9                  JP   (ix)   
096A                BREAK1:      
096A   FD 5D                  LD   e,iyl   ; get block* just under stack frame
096C   FD 54                  LD   d,iyh   
096E   21 08 00               LD   hl,8   
0971   19                     ADD   hl,de   
0972   23                     INC   hl   
0973   23                     INC   hl   
0974   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0977   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
097A   C3 34 05               JP   blockEnd   
097D                             ; partial
097D                             ; array* func* -- func1*
097D                PARTIAL:      
097D   E1                     POP   hl   ; h1 = func*
097E   ED 5B EC 42            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0982   ED 43 FA 42            LD   (vTemp1),bc   ; save IP
0986   01 06 00               LD   bc,6   ; bc = count
0989   ED B0                  LDIR      ; clone func
098B   ED 4B FA 42            LD   bc,(vTemp1)   ; restore IP
098F   2A EC 42               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0992   ED 53 EC 42            LD   (vHeapPtr),de   ; heap* += 6
0996   D1                     POP   de   ; de = array*
0997   E5                     PUSH   hl   ; return partial_array*
0998   73                     LD   (hl),e   ; compile array*
0999   23                     INC   hl   
099A   72                     LD   (hl),d   
099B   DD E9                  JP   (ix)   
099D                             ; printChars
099D                             ; char* len --
099D                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
099D                PRINTCHARS:      
099D   E1                     POP   hl   
099E   D1                     POP   de   
099F   C3 A4 09               JP   printChars2   
09A2                PRINTCHARS1:      
09A2   13                     INC   de   
09A3   2B                     DEC   hl   
09A4                PRINTCHARS2:      
09A4   1A                     LD   a,(de)   
09A5   CD 85 00               CALL   putchar   
09A8   7D                     LD   a,l   
09A9   B4                     OR   h   
09AA   20 F6                  JR   nz,printChars1   
09AC   DD E9                  JP   (ix)   
09AE                             ; /pk print stack
09AE                             ; --
09AE                PRINTSTACK:      
09AE   ED 43 FA 42            LD   (vTemp1),bc   
09B2   CD 08 0B               CALL   printStr   
09B5   3D 3E 20 00            .CSTR   "=> "   
09B9   21 80 41               LD   hl,STACK   
09BC   ED 72                  SBC   hl,sp   
09BE   CB 3C                  SRL   h   
09C0   CB 1D                  RR   l   
09C2   44 4D                  LD   bc,hl   
09C4   21 80 41               LD   hl,STACK   
09C7   18 0F                  JR   printStack2   
09C9                PRINTSTACK1:      
09C9   0B                     DEC   bc   
09CA   2B                     DEC   hl   
09CB   56                     LD   d,(hl)   
09CC   2B                     DEC   hl   
09CD   5E                     LD   e,(hl)   
09CE   EB                     EX   de,hl   
09CF   CD 9E 0A               CALL   prthex   
09D2   EB                     EX   de,hl   
09D3   3E 20                  LD   a," "   
09D5   CD 85 00               CALL   putchar   
09D8                PRINTSTACK2:      
09D8   79                     LD   a,c   
09D9   B0                     OR   b   
09DA   20 ED                  JR   nz,printStack1   
09DC   CD F8 0A               CALL   prompt   
09DF   ED 4B FA 42            LD   bc,(vTemp1)   
09E3   DD E9                  JP   (ix)   
09E5                CHARS:       
09E5   21 01 00               LD   hl,1   
09E8                CHARS1:      
09E8   22 E6 42               LD   (vDataWidth),hl   
09EB   DD E9                  JP   (ix)   
09ED                CONSTHEAPSTART:      
09ED   11 00 46               LD   de,HEAP   
09F0   18 1A                  JR   constant   
09F2                CONSTTIBSTART:      
09F2   11 00 44               LD   de,TIB   
09F5   18 15                  JR   constant   
09F7                VARHEAPPTR:      
09F7   ED 5B EC 42            LD   de,(vHeapPtr)   
09FB   21 EC 42               LD   hl,vHeapPtr   
09FE   18 09                  JR   variable   
0A00                VARTIBPTR:      
0A00   ED 5B E8 42            LD   de,(vTIBPtr)   
0A04   21 E8 42               LD   hl,vTIBPtr   
0A07   18 00                  JR   variable   
0A09                VARIABLE:      
0A09   22 EE 42               LD   (vPointer),hl   
0A0C                CONSTANT:      
0A0C   D5                     PUSH   de   
0A0D   DD E9                  JP   (ix)   
0A0F                             ; Z80 port input
0A0F                             ; port -- value
0A0F                INPUT:       
0A0F   E1                     POP   hl   
0A10   59                     LD   e,c   ; save IP
0A11   4D                     LD   c,l   
0A12   ED 68                  IN   l,(c)   
0A14   26 00                  LD   h,0   
0A16   4B                     LD   c,e   ; restore IP
0A17   E5                     PUSH   hl   
0A18   DD E9                  JP   (ix)   
0A1A                KEY:         
0A1A   CD 81 00               CALL   getchar   
0A1D   26 00                  LD   h,0   
0A1F   6F                     LD   l,a   
0A20   E5                     PUSH   hl   
0A21   DD E9                  JP   (ix)   
0A23                             ; Z80 port output
0A23                             ; value port --
0A23                OUTPUT:      
0A23   E1                     POP   hl   
0A24   59                     LD   e,c   ; save IP
0A25   4D                     LD   c,l   
0A26   E1                     POP   hl   
0A27   ED 69                  OUT   (c),l   
0A29   4B                     LD   c,e   ; restore IP
0A2A   DD E9                  JP   (ix)   
0A2C                NUMBERS:      
0A2C   21 02 00               LD   hl,2   
0A2F   C3 E8 09               JP   chars1   
0A32                             ; 
0A32                             ; 
0A32                             ; 
0A32                             ; 
0A32                FILTER:      
0A32                MAP:         
0A32                SCAN:        
0A32   DD E9                  JP   (ix)   
0A34                ZPRT:        
0A34   CD 3B 06               CALL   go   
0A37   00 00                  DW   NUL   ; closure
0A39   41 0A                  DW   zprt_block   
0A3B   3F 0A                  DW   zprt_args   
0A3D   02                     DB   2   ; num args + locals
0A3E   00                     DB   0   ; num locals
0A3F                ZPRT_ARGS:      
0A3F   61 62                  DB   "ab"   
0A41                ZPRT_BLOCK:      
0A41   7B 60 73 75 6D 3A 60 2E 73 20 24 61 20 24 62 20 2B 20 2E 7D 00 .CSTR   "{`sum:`.s $a $b + .}"   ; block
0A56                             ; print decimal
0A56                             ; hl = value
0A56                PRTDEC:      
0A56   CB 7C                  BIT   7,h   
0A58   28 0B                  JR   z,prtdec0   
0A5A   3E 2D                  LD   a,"-"   
0A5C   CD 85 00               CALL   putchar   
0A5F   AF                     XOR   a   
0A60   95                     SUB   l   
0A61   6F                     LD   l,a   
0A62   9F                     SBC   a,a   
0A63   94                     SUB   h   
0A64   67                     LD   h,a   
0A65                PRTDEC0:      
0A65   C5                     PUSH   bc   
0A66   0E 00                  LD   c,0   ; leading zeros flag = false
0A68   11 F0 D8               LD   de,-10000   
0A6B   CD 87 0A               CALL   prtdec1   
0A6E   11 18 FC               LD   de,-1000   
0A71   CD 87 0A               CALL   prtdec1   
0A74   11 9C FF               LD   de,-100   
0A77   CD 87 0A               CALL   prtdec1   
0A7A   1E F6                  LD   e,-10   
0A7C   CD 87 0A               CALL   prtdec1   
0A7F   0C                     INC   c   ; flag = true for at least digit
0A80   1E FF                  LD   e,-1   
0A82   CD 87 0A               CALL   prtdec1   
0A85   C1                     POP   bc   
0A86   C9                     RET      
0A87                PRTDEC1:      
0A87   06 2F                  LD   b,"0"-1   
0A89                PRTDEC2:      
0A89   04                     INC   b   
0A8A   19                     ADD   hl,de   
0A8B   38 FC                  JR   c,prtdec2   
0A8D   ED 52                  SBC   hl,de   
0A8F   3E 30                  LD   a,"0"   
0A91   B8                     CP   b   
0A92   20 05                  JR   nz,prtdec3   
0A94   AF                     XOR   a   
0A95   B1                     OR   c   
0A96   C8                     RET   z   
0A97   18 01                  JR   prtdec4   
0A99                PRTDEC3:      
0A99   0C                     INC   c   
0A9A                PRTDEC4:      
0A9A   78                     LD   a,b   
0A9B   C3 85 00               JP   putchar   
0A9E                PRTHEX:      ; display hl as a 16-bit number in hex.
0A9E   C5                     PUSH   bc   ; preserve the IP
0A9F   7C                     LD   a,h   
0AA0   CD A9 0A               CALL   prthex2   
0AA3   7D                     LD   a,l   
0AA4   CD A9 0A               CALL   prthex2   
0AA7   C1                     POP   bc   
0AA8   C9                     RET      
0AA9                PRTHEX2:      
0AA9   4F                     LD   c,a   
0AAA   1F                     RRA      
0AAB   1F                     RRA      
0AAC   1F                     RRA      
0AAD   1F                     RRA      
0AAE   CD B2 0A               CALL   prthex3   
0AB1   79                     LD   a,c   
0AB2                PRTHEX3:      
0AB2   E6 0F                  AND   0x0F   
0AB4   C6 90                  ADD   a,0x90   
0AB6   27                     DAA      
0AB7   CE 40                  ADC   a,0x40   
0AB9   27                     DAA      
0ABA   C3 85 00               JP   putchar   
0ABD                PRTSTR0:      
0ABD   CD 85 00               CALL   putchar   
0AC0   23                     INC   hl   
0AC1                PRTSTR:      
0AC1   7E                     LD   a,(hl)   
0AC2   B7                     OR   a   
0AC3   20 F8                  JR   nz,prtstr0   
0AC5   C9                     RET      
0AC6                             ; **************************************************************************
0AC6                             ; calculate nesting value
0AC6                             ; a is char to be tested,
0AC6                             ; e is the nesting value (initially 0)
0AC6                             ; e is increased by ( and [
0AC6                             ; e is decreased by ) and ]
0AC6                             ; e has its bit 7 toggled by `
0AC6                             ; limited to 127 levels
0AC6                             ; **************************************************************************
0AC6                NESTING:      
0AC6   FE 22                  CP   DQUOTE   ; quote char
0AC8   28 06                  JR   z,nesting0   
0ACA   FE 60                  CP   "`"   ; quote char
0ACC   28 02                  JR   z,nesting0   
0ACE   18 0A                  JR   nesting1   
0AD0                NESTING0:      
0AD0   CB 7B                  BIT   7,e   
0AD2   28 03                  JR   z,nesting1a   
0AD4   CB BB                  RES   7,e   
0AD6   C9                     RET      
0AD7                NESTING1A:      
0AD7   CB FB                  SET   7,e   
0AD9   C9                     RET      
0ADA                NESTING1:      
0ADA   CB 7B                  BIT   7,e   
0ADC   C0                     RET   nz   
0ADD   FE 7B                  CP   "{"   
0ADF   28 08                  JR   z,nesting2   
0AE1   FE 5B                  CP   "["   
0AE3   28 04                  JR   z,nesting2   
0AE5   FE 28                  CP   "("   
0AE7   20 02                  JR   nz,nesting3   
0AE9                NESTING2:      
0AE9   1C                     INC   e   
0AEA   C9                     RET      
0AEB                NESTING3:      
0AEB   FE 7D                  CP   "}"   
0AED   28 07                  JR   z,nesting4   
0AEF   FE 5D                  CP   "]"   
0AF1   28 03                  JR   z,nesting4   
0AF3   FE 29                  CP   ")"   
0AF5   C0                     RET   nz   
0AF6                NESTING4:      
0AF6   1D                     DEC   e   
0AF7   C9                     RET      
0AF8                PROMPT:      
0AF8   CD 08 0B               CALL   printStr   
0AFB   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B00   C9                     RET      
0B01                CRLF:        
0B01   CD 08 0B               CALL   printStr   
0B04   0D 0A 00               .CSTR   "\r\n"   
0B07   C9                     RET      
0B08                             ; prints a null teminated string
0B08                             ; the string should be immedaitely following the call
0B08                PRINTSTR:      
0B08   E3                     EX   (sp),hl   ; swap			
0B09   CD C1 0A               CALL   prtstr   
0B0C   23                     INC   hl   ; inc past NUL
0B0D   E3                     EX   (sp),hl   ; put it back	
0B0E   C9                     RET      
0B0F                INIT:        
0B0F   DD 2A EA 42            LD   ix,(vNext)   
0B13   FD 21 80 41            LD   iy,STACK   
0B17   21 80 01               LD   hl,isysVars   
0B1A   11 E6 42               LD   de,sysVars   
0B1D   01 10 00               LD   bc,8 * 2   
0B20   ED B0                  LDIR      
0B22   21 00 42               LD   hl,vars   ; 52 vars LO HI
0B25   06 34                  LD   b,26*2   
0B27   AF                     XOR   a   
0B28                INIT0:       
0B28   77                     LD   (hl),a   
0B29   23                     INC   hl   
0B2A   10 FC                  DJNZ   init0   
0B2C   C9                     RET      
0B2D                START:       
0B2D   31 80 41               LD   sp,STACK   ; start of monty
0B30   CD 0F 0B               CALL   init   ; setups
0B33   CD 08 0B               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0B36   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0B43                INTERPRET:      
0B43   CD F8 0A               CALL   prompt   
0B46   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0B49   21 00 44               LD   hl,TIB   
0B4C   22 E8 42               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0B4F                INTERPRET2:      ; calculate nesting
0B4F   1E 00                  LD   e,0   ; initilize nesting value
0B51   C5                     PUSH   bc   ; save offset into TIB,
0B52                             ; bc is also the count of chars in TIB
0B52   21 00 44               LD   hl,TIB   ; hl is start of TIB
0B55   18 06                  JR   interpret4   
0B57                INTERPRET3:      
0B57   7E                     LD   a,(hl)   ; a = char in TIB
0B58   23                     INC   hl   ; inc pointer into TIB
0B59   0B                     DEC   bc   ; dec count of chars in TIB
0B5A   CD C6 0A               CALL   nesting   ; update nesting value
0B5D                INTERPRET4:      
0B5D   79                     LD   a,c   ; is count zero?
0B5E   B0                     OR   b   
0B5F   20 F6                  JR   nz,interpret3   ; if not loop
0B61   C1                     POP   bc   ; restore offset into TIB
0B62                INTERPRET5:      
0B62   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0B65   FE 20                  CP   $20   ; compare to space
0B67   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0B69   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0B6B                             ; ???? NEEDED?
0B6B   28 3B                  JR   z,interpret8   
0B6D   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0B6F   28 24                  JR   z,interpret7   ; if anything else its macro/control
0B71   FE 05                  CP   CTRL_E   
0B73   CA F1 0B               JP   z,edit_   
0B76   FE 08                  CP   CTRL_H   
0B78   CA E1 0B               JP   z,backSpace_   
0B7B   FE 0A                  CP   CTRL_J   
0B7D   CA 09 0C               JP   z,reEdit_   
0B80   FE 13                  CP   CTRL_S   
0B82   CA 0C 0C               JP   z,printStack_   
0B85                             ; DB     lsb(edit_)       ; ENQ ^E  5
0B85                             ; DB     lsb(reedit_)     ; LF  ^J 10
0B85                             ; DB     lsb(list_)       ; FF  ^L 12
0B85                             ; DB     lsb(printStack_) ; DLE ^P 16
0B85                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0B85                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0B85                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0B85                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0B85                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0B85                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0B85                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0B85                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0B85                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0B85                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0B85                INTERPRET5A:      
0B85                             ; ld (vTIBPtr),bc
0B85                             ; ld bc,(vTIBPtr)
0B85   18 C8                  JR   interpret2   
0B87                INTERPRET6:      
0B87   21 00 44               LD   hl,TIB   
0B8A   09                     ADD   hl,bc   
0B8B   77                     LD   (hl),a   ; store the character in textbuf
0B8C   03                     INC   bc   
0B8D   CD 85 00               CALL   putchar   ; echo character to screen
0B90   CD C6 0A               CALL   nesting   
0B93   18 CD                  JR   interpret5   ; wait for next character
0B95                INTERPRET7:      
0B95   21 00 44               LD   hl,TIB   
0B98   09                     ADD   hl,bc   
0B99   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0B9B   23                     INC   hl   
0B9C   36 0A                  LD   (hl),"\n"   
0B9E   23                     INC   hl   
0B9F   03                     INC   bc   
0BA0   03                     INC   bc   
0BA1   CD 01 0B               CALL   crlf   ; echo character to screen
0BA4   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0BA5   B7                     OR   a   
0BA6   20 BA                  JR   nz,interpret5   
0BA8                INTERPRET8:      
0BA8   21 00 44               LD   hl,TIB   
0BAB   09                     ADD   hl,bc   
0BAC   22 E8 42               LD   (vTIBPtr),hl   
0BAF   01 00 44               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0BB2                             ; we pressed enter
0BB2   0B                     DEC   bc   
0BB3                NEXT:        
0BB3   03                     INC   bc   ; Increment the IP
0BB4   0A                     LD   a,(bc)   ; Get the next character and dispatch
0BB5   FE 20                  CP   " "   ; whitespace?
0BB7   28 FA                  JR   z,next   ; space? ignore
0BB9   38 07                  JR   c,next1   
0BBB   6F                     LD   l,a   ; index into table
0BBC   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0BBE   6E                     LD   l,(hl)   ; get low jump address
0BBF   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0BC1   E9                     JP   (hl)   ; Jump to routine
0BC2                NEXT1:       
0BC2   FE 00                  CP   NUL   ; end of input string?
0BC4   28 03                  JR   z,exit   
0BC6   C3 43 0B               JP   interpret   ; no, other whitespace, macros?
0BC9                EXIT:        
0BC9   03                     INC   bc   
0BCA   60 69                  LD   hl,bc   
0BCC   E9                     JP   (hl)   
0BCD                RUN:         
0BCD   C1                     POP   bc   
0BCE   0B                     DEC   bc   
0BCF   DD E9                  JP   (ix)   
0BD1                ERROR:       
0BD1   CD 08 0B               CALL   printStr   
0BD4   45 72 72 6F 72 20 00   .CSTR   "Error "   
0BDB   CD 56 0A               CALL   prtdec   
0BDE   C3 43 0B               JP   interpret   
0BE1                BACKSPACE_:      
0BE1   79                     LD   a,c   
0BE2   B0                     OR   b   
0BE3   CA 4F 0B               JP   z,interpret2   
0BE6   0B                     DEC   bc   
0BE7   CD 08 0B               CALL   printStr   
0BEA   08 20 08 00            .CSTR   "\b \b"   
0BEE   C3 4F 0B               JP   interpret2   
0BF1                             ; edit
0BF1                EDIT_:       
0BF1   CD CD 0B               CALL   run   
0BF4   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C06   C3 43 0B               JP   interpret   
0C09                REEDIT_:      
0C09   C3 43 0B               JP   interpret   
0C0C                PRINTSTACK_:      
0C0C   CD CD 0B               CALL   run   
0C0F   2F 70 6B 00            .CSTR   "/pk"   
0C13   C3 43 0B               JP   interpret   
0C16                             ; editDef:
0C16                             ;     pop hl                      ; pop ret address
0C16                             ;     ex (sp),hl                  ; swap with TOS
0C16                             ;     push hl                     ; dup TOS
0C16                             ;     ld a,l                      ; a = ident
0C16                             ;     ld de,TIB                   ; de = start of TIB
0C16                             ;     ld (vTIBPtr),de             ; update TIB*
0C16                             ;     push ix                     ; save NEXT
0C16                             ;     ld ix,editDef0              ; NEXT = editDef0
0C16                             ;     jp lookupRef                ; convert letter into address
0C16                             ; editDef0:
0C16                             ;     ld e,(hl)                   ; de = (hl++)
0C16                             ;     inc hl
0C16                             ;     ld d,(hl)
0C16                             ;     ld a,d                      ; de == 0 ?
0C16                             ;     or e
0C16                             ;     jr z,editDef4
0C16                             ;     ld ix,editDef3              ; NEXT = editDef3
0C16                             ;     ex de,hl
0C16                             ;     ld a,(hl)
0C16                             ;     cp "{"
0C16                             ;     jr nz,editDef1
0C16                             ;     jp editBlock0               ; convert letter into address
0C16                             ; editDef1:
0C16                             ;     cp "("
0C16                             ;     jr nz,editDef2
0C16                             ;     jp editBlock0               ; convert letter into address
0C16                             ; editDef2:
0C16                             ;     jp editFunc
0C16                             ; editDef3:
0C16                             ;     ld a," "                    ; write assign
0C16                             ;     call writeChar
0C16                             ;     pop hl                      ; a = ident
0C16                             ;     ld a,l
0C16                             ;     call writeChar
0C16                             ;     ld a,"="                    ; write assign
0C16                             ;     call writeChar
0C16                             ;     ld ix,editDef4              ; NEXT = editDef4
0C16                             ;     jp printTIB
0C16                             ; editDef4:
0C16                             ;     pop ix                      ; restore NEXT
0C16                             ;     jp (ix)
0C16                             ; writeChar:
0C16                             ;     ld de,(vTIBPtr)             ; de = TIB*
0C16                             ;     ld (de),a                   ; write ident
0C16                             ;     inc de
0C16                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0C16                             ;     ret
0C16                             ; ; printTIB
0C16                             ; printTIB:
0C16                             ;     ld hl,(vTIBPtr)
0C16                             ;     ld de,TIB
0C16                             ;     or a
0C16                             ;     sbc hl,de
0C16                             ;     jp printTIB2
0C16                             ; printTIB1:
0C16                             ;     ld a,(de)
0C16                             ;     call putchar
0C16                             ; printTIB2:
0C16                             ;     ld a,l
0C16                             ;     or h
0C16                             ;     jr nz,printTIB1
0C16                             ;     jp (ix)
0C16                             ; editBlock:
0C16                             ;     pop hl                      ; hl = block*
0C16                             ; editBlock0:
0C16                             ;     push ix                     ; save next
0C16                             ;     push hl                     ; push block*
0C16                             ;     push hl                     ; push block*
0C16                             ;     ld ix,(editBlock2)
0C16                             ;     jp blockLength
0C16                             ; editBlock1:
0C16                             ;     pop hl                      ; bc = length, (sp) = IP
0C16                             ;     pop de                      ; de = block*
0C16                             ;     ld a,l
0C16                             ;     or h
0C16                             ;     jr z,editBlock2
0C16                             ;     push bc
0C16                             ;     ld bc,hl
0C16                             ;     ex de,hl                    ; hl = block*
0C16                             ;     ld de,(vTIBPtr)              ; de = TIB*
0C16                             ;     ldir                        ; copy block to TIB
0C16                             ;     ld (vTIBPtr),de              ; save TIB*
0C16                             ;     pop bc
0C16                             ; editBlock2:
0C16                             ;     pop ix                      ; restore next
0C16                             ;     jp (ix)
0C16                             ; editFunc:
0C16                             ;     jp (ix)
0C16                             ; editArray:
0C16                             ;     jp (ix)
0C16                             ; editArglist:
0C16                             ;     jp (ix)
0C16                             ; ; blockLength
0C16                             ; ; addr1 -- length
0C16                             ; blockLength:
0C16                             ;     pop hl                      ; block*
0C16                             ;     push hl                     ; save block*
0C16                             ;     inc hl                      ; skip first char
0C16                             ;     ld d,1                      ; increase nesting
0C16                             ; blockLength1:                   ; Skip to end of definition
0C16                             ;     ld a,(hl)                   ; Get the next character
0C16                             ;     inc hl                      ; Point to next character
0C16                             ;     cp " " + 1                  ; ignore whitespace
0C16                             ;     jr c,blockLength1
0C16                             ;     cp ")"
0C16                             ;     jr z,blockLength4
0C16                             ;     cp "}"
0C16                             ;     jr z,blockLength4
0C16                             ;     cp "]"
0C16                             ;     jr z,blockLength4
0C16                             ;     cp "("
0C16                             ;     jr z,blockLength2
0C16                             ;     cp "{"
0C16                             ;     jr z,blockLength2
0C16                             ;     cp "["
0C16                             ;     jr z,blockLength2
0C16                             ;     cp "'"
0C16                             ;     jr z,blockLength3
0C16                             ;     cp "`"
0C16                             ;     jr z,blockLength3
0C16                             ;     cp DQUOTE
0C16                             ;     jr z,blockLength3
0C16                             ;     jr blockLength1
0C16                             ; blockLength2:
0C16                             ;     inc d
0C16                             ;     jr blockLength1
0C16                             ; blockLength4:
0C16                             ;     dec d
0C16                             ;     jr nz, blockLength1         ; get the next element
0C16                             ; blockLength3:
0C16                             ;     ld a,$80
0C16                             ;     xor d
0C16                             ;     ld d,a
0C16                             ;     jr nz, blockLength1
0C16                             ;     pop hl                      ; hl = block*
0C16                             ;     or a
0C16                             ;     sbc hl,de
0C16                             ;     push hl
0C16                             ;     jp (ix)
0C16                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0C16                             ; \a start of stack \#3 depth \b base \$ prompt
0C16                             ; DW dStack               ; a vS0 start of datastack			
0C16                             ; DW FALSE                ; b vBase16
0C16                             ; DW 0                    ; c vTIBPtr an offset to the tib
0C16                             ; DW 0                    ; d
0C16                             ; DW 65                   ; e vLastDef "A" last command u defined
0C16                             ; DW 0                    ; f
0C16                             ; DW page6                ; g 256 bytes limits
0C16                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0C16                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                             ; test "/vt.h 100/bd s= /vt s - /vt= /vt.h", 0
0D00                             ; ; test "100/bd s= s /vt -= /vt s /pc", 0
0D00                             ; ; test "100 200 /z", false
0D00                             ; call printStr
0D00                             ; .cstr "Done!"
0D00                             ; HALT
0D00                             ; 
0D00                          ;*Macro unroll:  test "/f", false
0D00   31 80 41               LD   SP,STACK   
0D03   CD 0F 0B               CALL   init   
0D06   CD F8 3F               CALL   execStr   
0D09   2F 66 00               .CSTR   "/f"   
0D0C                          ;*Macro unroll:  expect "/f",false
0D0C   E1                     POP   HL   
0D0D   E5                     PUSH   HL   
0D0E   11 00 00               LD   DE,false   
0D11   B7                     OR   A   
0D12   ED 52                  SBC   HL,DE   
0D14   7D                     LD   A,L   
0D15   B4                     OR   H   
0D16   28 4D                  JR   Z,expectM_0_2571S43   
0D18   CD 08 0B               CALL   printStr   
0D1B   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0D24   CD 08 0B               CALL   printStr   
0D27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D36   21 00 00               LD   HL,false   
0D39   CD 56 0A               CALL   prtdec   
0D3C   CD 08 0B               CALL   printStr   
0D3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D4C   E1                     POP   hl   
0D4D   E5                     PUSH   hl   
0D4E   CD 56 0A               CALL   prtdec   
0D51   E1                     POP   hl   
0D52   CD 08 0B               CALL   printStr   
0D55   20 28 23 00            .CSTR   " (#"   
0D59   CD 9E 0A               CALL   prthex   
0D5C   CD 08 0B               CALL   printStr   
0D5F   29 0D 0A 00            .CSTR   ")\r\n"   
0D63   76                     HALT      
0D64   00                     .CSTR      
0D65                EXPECTM_0_2571S43:      
0D65   E1                     POP   HL   
0D66                          ;*Macro unroll:  test "/t", true
0D66   31 80 41               LD   SP,STACK   
0D69   CD 0F 0B               CALL   init   
0D6C   CD F8 3F               CALL   execStr   
0D6F   2F 74 00               .CSTR   "/t"   
0D72                          ;*Macro unroll:  expect "/t",true
0D72   E1                     POP   HL   
0D73   E5                     PUSH   HL   
0D74   11 FF FF               LD   DE,true   
0D77   B7                     OR   A   
0D78   ED 52                  SBC   HL,DE   
0D7A   7D                     LD   A,L   
0D7B   B4                     OR   H   
0D7C   28 4D                  JR   Z,expectM_0_2572S43   
0D7E   CD 08 0B               CALL   printStr   
0D81   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0D8A   CD 08 0B               CALL   printStr   
0D8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D9C   21 FF FF               LD   HL,true   
0D9F   CD 56 0A               CALL   prtdec   
0DA2   CD 08 0B               CALL   printStr   
0DA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DB2   E1                     POP   hl   
0DB3   E5                     PUSH   hl   
0DB4   CD 56 0A               CALL   prtdec   
0DB7   E1                     POP   hl   
0DB8   CD 08 0B               CALL   printStr   
0DBB   20 28 23 00            .CSTR   " (#"   
0DBF   CD 9E 0A               CALL   prthex   
0DC2   CD 08 0B               CALL   printStr   
0DC5   29 0D 0A 00            .CSTR   ")\r\n"   
0DC9   76                     HALT      
0DCA   00                     .CSTR      
0DCB                EXPECTM_0_2572S43:      
0DCB   E1                     POP   HL   
0DCC                          ;*Macro unroll:  test "1", 1
0DCC   31 80 41               LD   SP,STACK   
0DCF   CD 0F 0B               CALL   init   
0DD2   CD F8 3F               CALL   execStr   
0DD5   31 00                  .CSTR   "1"   
0DD7                          ;*Macro unroll:  expect "1",1
0DD7   E1                     POP   HL   
0DD8   E5                     PUSH   HL   
0DD9   11 01 00               LD   DE,1   
0DDC   B7                     OR   A   
0DDD   ED 52                  SBC   HL,DE   
0DDF   7D                     LD   A,L   
0DE0   B4                     OR   H   
0DE1   28 4C                  JR   Z,expectM_0_2573S43   
0DE3   CD 08 0B               CALL   printStr   
0DE6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0DEE   CD 08 0B               CALL   printStr   
0DF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E00   21 01 00               LD   HL,1   
0E03   CD 56 0A               CALL   prtdec   
0E06   CD 08 0B               CALL   printStr   
0E09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E16   E1                     POP   hl   
0E17   E5                     PUSH   hl   
0E18   CD 56 0A               CALL   prtdec   
0E1B   E1                     POP   hl   
0E1C   CD 08 0B               CALL   printStr   
0E1F   20 28 23 00            .CSTR   " (#"   
0E23   CD 9E 0A               CALL   prthex   
0E26   CD 08 0B               CALL   printStr   
0E29   29 0D 0A 00            .CSTR   ")\r\n"   
0E2D   76                     HALT      
0E2E   00                     .CSTR      
0E2F                EXPECTM_0_2573S43:      
0E2F   E1                     POP   HL   
0E30                          ;*Macro unroll:  test "2", 2
0E30   31 80 41               LD   SP,STACK   
0E33   CD 0F 0B               CALL   init   
0E36   CD F8 3F               CALL   execStr   
0E39   32 00                  .CSTR   "2"   
0E3B                          ;*Macro unroll:  expect "2",2
0E3B   E1                     POP   HL   
0E3C   E5                     PUSH   HL   
0E3D   11 02 00               LD   DE,2   
0E40   B7                     OR   A   
0E41   ED 52                  SBC   HL,DE   
0E43   7D                     LD   A,L   
0E44   B4                     OR   H   
0E45   28 4C                  JR   Z,expectM_0_2574S43   
0E47   CD 08 0B               CALL   printStr   
0E4A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0E52   CD 08 0B               CALL   printStr   
0E55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E64   21 02 00               LD   HL,2   
0E67   CD 56 0A               CALL   prtdec   
0E6A   CD 08 0B               CALL   printStr   
0E6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E7A   E1                     POP   hl   
0E7B   E5                     PUSH   hl   
0E7C   CD 56 0A               CALL   prtdec   
0E7F   E1                     POP   hl   
0E80   CD 08 0B               CALL   printStr   
0E83   20 28 23 00            .CSTR   " (#"   
0E87   CD 9E 0A               CALL   prthex   
0E8A   CD 08 0B               CALL   printStr   
0E8D   29 0D 0A 00            .CSTR   ")\r\n"   
0E91   76                     HALT      
0E92   00                     .CSTR      
0E93                EXPECTM_0_2574S43:      
0E93   E1                     POP   HL   
0E94                          ;*Macro unroll:  test "1", 1
0E94   31 80 41               LD   SP,STACK   
0E97   CD 0F 0B               CALL   init   
0E9A   CD F8 3F               CALL   execStr   
0E9D   31 00                  .CSTR   "1"   
0E9F                          ;*Macro unroll:  expect "1",1
0E9F   E1                     POP   HL   
0EA0   E5                     PUSH   HL   
0EA1   11 01 00               LD   DE,1   
0EA4   B7                     OR   A   
0EA5   ED 52                  SBC   HL,DE   
0EA7   7D                     LD   A,L   
0EA8   B4                     OR   H   
0EA9   28 4C                  JR   Z,expectM_0_2575S43   
0EAB   CD 08 0B               CALL   printStr   
0EAE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0EB6   CD 08 0B               CALL   printStr   
0EB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EC8   21 01 00               LD   HL,1   
0ECB   CD 56 0A               CALL   prtdec   
0ECE   CD 08 0B               CALL   printStr   
0ED1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EDE   E1                     POP   hl   
0EDF   E5                     PUSH   hl   
0EE0   CD 56 0A               CALL   prtdec   
0EE3   E1                     POP   hl   
0EE4   CD 08 0B               CALL   printStr   
0EE7   20 28 23 00            .CSTR   " (#"   
0EEB   CD 9E 0A               CALL   prthex   
0EEE   CD 08 0B               CALL   printStr   
0EF1   29 0D 0A 00            .CSTR   ")\r\n"   
0EF5   76                     HALT      
0EF6   00                     .CSTR      
0EF7                EXPECTM_0_2575S43:      
0EF7   E1                     POP   HL   
0EF8                          ;*Macro unroll:  test "0", 0
0EF8   31 80 41               LD   SP,STACK   
0EFB   CD 0F 0B               CALL   init   
0EFE   CD F8 3F               CALL   execStr   
0F01   30 00                  .CSTR   "0"   
0F03                          ;*Macro unroll:  expect "0",0
0F03   E1                     POP   HL   
0F04   E5                     PUSH   HL   
0F05   11 00 00               LD   DE,0   
0F08   B7                     OR   A   
0F09   ED 52                  SBC   HL,DE   
0F0B   7D                     LD   A,L   
0F0C   B4                     OR   H   
0F0D   28 4C                  JR   Z,expectM_0_2576S43   
0F0F   CD 08 0B               CALL   printStr   
0F12   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0F1A   CD 08 0B               CALL   printStr   
0F1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F2C   21 00 00               LD   HL,0   
0F2F   CD 56 0A               CALL   prtdec   
0F32   CD 08 0B               CALL   printStr   
0F35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F42   E1                     POP   hl   
0F43   E5                     PUSH   hl   
0F44   CD 56 0A               CALL   prtdec   
0F47   E1                     POP   hl   
0F48   CD 08 0B               CALL   printStr   
0F4B   20 28 23 00            .CSTR   " (#"   
0F4F   CD 9E 0A               CALL   prthex   
0F52   CD 08 0B               CALL   printStr   
0F55   29 0D 0A 00            .CSTR   ")\r\n"   
0F59   76                     HALT      
0F5A   00                     .CSTR      
0F5B                EXPECTM_0_2576S43:      
0F5B   E1                     POP   HL   
0F5C                          ;*Macro unroll:  test "10", 10
0F5C   31 80 41               LD   SP,STACK   
0F5F   CD 0F 0B               CALL   init   
0F62   CD F8 3F               CALL   execStr   
0F65   31 30 00               .CSTR   "10"   
0F68                          ;*Macro unroll:  expect "10",10
0F68   E1                     POP   HL   
0F69   E5                     PUSH   HL   
0F6A   11 0A 00               LD   DE,10   
0F6D   B7                     OR   A   
0F6E   ED 52                  SBC   HL,DE   
0F70   7D                     LD   A,L   
0F71   B4                     OR   H   
0F72   28 4D                  JR   Z,expectM_0_2577S43   
0F74   CD 08 0B               CALL   printStr   
0F77   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0F80   CD 08 0B               CALL   printStr   
0F83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F92   21 0A 00               LD   HL,10   
0F95   CD 56 0A               CALL   prtdec   
0F98   CD 08 0B               CALL   printStr   
0F9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FA8   E1                     POP   hl   
0FA9   E5                     PUSH   hl   
0FAA   CD 56 0A               CALL   prtdec   
0FAD   E1                     POP   hl   
0FAE   CD 08 0B               CALL   printStr   
0FB1   20 28 23 00            .CSTR   " (#"   
0FB5   CD 9E 0A               CALL   prthex   
0FB8   CD 08 0B               CALL   printStr   
0FBB   29 0D 0A 00            .CSTR   ")\r\n"   
0FBF   76                     HALT      
0FC0   00                     .CSTR      
0FC1                EXPECTM_0_2577S43:      
0FC1   E1                     POP   HL   
0FC2                          ;*Macro unroll:  test "123", 123
0FC2   31 80 41               LD   SP,STACK   
0FC5   CD 0F 0B               CALL   init   
0FC8   CD F8 3F               CALL   execStr   
0FCB   31 32 33 00            .CSTR   "123"   
0FCF                          ;*Macro unroll:  expect "123",123
0FCF   E1                     POP   HL   
0FD0   E5                     PUSH   HL   
0FD1   11 7B 00               LD   DE,123   
0FD4   B7                     OR   A   
0FD5   ED 52                  SBC   HL,DE   
0FD7   7D                     LD   A,L   
0FD8   B4                     OR   H   
0FD9   28 4E                  JR   Z,expectM_0_2578S43   
0FDB   CD 08 0B               CALL   printStr   
0FDE   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0FE8   CD 08 0B               CALL   printStr   
0FEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FFA   21 7B 00               LD   HL,123   
0FFD   CD 56 0A               CALL   prtdec   
1000   CD 08 0B               CALL   printStr   
1003   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1010   E1                     POP   hl   
1011   E5                     PUSH   hl   
1012   CD 56 0A               CALL   prtdec   
1015   E1                     POP   hl   
1016   CD 08 0B               CALL   printStr   
1019   20 28 23 00            .CSTR   " (#"   
101D   CD 9E 0A               CALL   prthex   
1020   CD 08 0B               CALL   printStr   
1023   29 0D 0A 00            .CSTR   ")\r\n"   
1027   76                     HALT      
1028   00                     .CSTR      
1029                EXPECTM_0_2578S43:      
1029   E1                     POP   HL   
102A                          ;*Macro unroll:  test "-1",-1
102A   31 80 41               LD   SP,STACK   
102D   CD 0F 0B               CALL   init   
1030   CD F8 3F               CALL   execStr   
1033   2D 31 00               .CSTR   "-1"   
1036                          ;*Macro unroll:  expect "-1",-1
1036   E1                     POP   HL   
1037   E5                     PUSH   HL   
1038   11 FF FF               LD   DE,-1   
103B   B7                     OR   A   
103C   ED 52                  SBC   HL,DE   
103E   7D                     LD   A,L   
103F   B4                     OR   H   
1040   28 4D                  JR   Z,expectM_0_2579S43   
1042   CD 08 0B               CALL   printStr   
1045   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
104E   CD 08 0B               CALL   printStr   
1051   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1060   21 FF FF               LD   HL,-1   
1063   CD 56 0A               CALL   prtdec   
1066   CD 08 0B               CALL   printStr   
1069   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1076   E1                     POP   hl   
1077   E5                     PUSH   hl   
1078   CD 56 0A               CALL   prtdec   
107B   E1                     POP   hl   
107C   CD 08 0B               CALL   printStr   
107F   20 28 23 00            .CSTR   " (#"   
1083   CD 9E 0A               CALL   prthex   
1086   CD 08 0B               CALL   printStr   
1089   29 0D 0A 00            .CSTR   ")\r\n"   
108D   76                     HALT      
108E   00                     .CSTR      
108F                EXPECTM_0_2579S43:      
108F   E1                     POP   HL   
1090                          ;*Macro unroll:  test "''", 0
1090   31 80 41               LD   SP,STACK   
1093   CD 0F 0B               CALL   init   
1096   CD F8 3F               CALL   execStr   
1099   27 27 00               .CSTR   "''"   
109C                          ;*Macro unroll:  expect "''",0
109C   E1                     POP   HL   
109D   E5                     PUSH   HL   
109E   11 00 00               LD   DE,0   
10A1   B7                     OR   A   
10A2   ED 52                  SBC   HL,DE   
10A4   7D                     LD   A,L   
10A5   B4                     OR   H   
10A6   28 4D                  JR   Z,expectM_0_2580S43   
10A8   CD 08 0B               CALL   printStr   
10AB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
10B4   CD 08 0B               CALL   printStr   
10B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10C6   21 00 00               LD   HL,0   
10C9   CD 56 0A               CALL   prtdec   
10CC   CD 08 0B               CALL   printStr   
10CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10DC   E1                     POP   hl   
10DD   E5                     PUSH   hl   
10DE   CD 56 0A               CALL   prtdec   
10E1   E1                     POP   hl   
10E2   CD 08 0B               CALL   printStr   
10E5   20 28 23 00            .CSTR   " (#"   
10E9   CD 9E 0A               CALL   prthex   
10EC   CD 08 0B               CALL   printStr   
10EF   29 0D 0A 00            .CSTR   ")\r\n"   
10F3   76                     HALT      
10F4   00                     .CSTR      
10F5                EXPECTM_0_2580S43:      
10F5   E1                     POP   HL   
10F6                          ;*Macro unroll:  test "'a'", $61
10F6   31 80 41               LD   SP,STACK   
10F9   CD 0F 0B               CALL   init   
10FC   CD F8 3F               CALL   execStr   
10FF   27 61 27 00            .CSTR   "'a'"   
1103                          ;*Macro unroll:  expect "'a'",$61
1103   E1                     POP   HL   
1104   E5                     PUSH   HL   
1105   11 61 00               LD   DE,$61   
1108   B7                     OR   A   
1109   ED 52                  SBC   HL,DE   
110B   7D                     LD   A,L   
110C   B4                     OR   H   
110D   28 4E                  JR   Z,expectM_0_2581S43   
110F   CD 08 0B               CALL   printStr   
1112   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
111C   CD 08 0B               CALL   printStr   
111F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
112E   21 61 00               LD   HL,$61   
1131   CD 56 0A               CALL   prtdec   
1134   CD 08 0B               CALL   printStr   
1137   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1144   E1                     POP   hl   
1145   E5                     PUSH   hl   
1146   CD 56 0A               CALL   prtdec   
1149   E1                     POP   hl   
114A   CD 08 0B               CALL   printStr   
114D   20 28 23 00            .CSTR   " (#"   
1151   CD 9E 0A               CALL   prthex   
1154   CD 08 0B               CALL   printStr   
1157   29 0D 0A 00            .CSTR   ")\r\n"   
115B   76                     HALT      
115C   00                     .CSTR      
115D                EXPECTM_0_2581S43:      
115D   E1                     POP   HL   
115E                          ;*Macro unroll:  test "'\\''", $27
115E   31 80 41               LD   SP,STACK   
1161   CD 0F 0B               CALL   init   
1164   CD F8 3F               CALL   execStr   
1167   27 5C 27 27 00         .CSTR   "'\\''"   
116C                          ;*Macro unroll:  expect "'\\''",$27
116C   E1                     POP   HL   
116D   E5                     PUSH   HL   
116E   11 27 00               LD   DE,$27   
1171   B7                     OR   A   
1172   ED 52                  SBC   HL,DE   
1174   7D                     LD   A,L   
1175   B4                     OR   H   
1176   28 4F                  JR   Z,expectM_0_2582S43   
1178   CD 08 0B               CALL   printStr   
117B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1186   CD 08 0B               CALL   printStr   
1189   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1198   21 27 00               LD   HL,$27   
119B   CD 56 0A               CALL   prtdec   
119E   CD 08 0B               CALL   printStr   
11A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11AE   E1                     POP   hl   
11AF   E5                     PUSH   hl   
11B0   CD 56 0A               CALL   prtdec   
11B3   E1                     POP   hl   
11B4   CD 08 0B               CALL   printStr   
11B7   20 28 23 00            .CSTR   " (#"   
11BB   CD 9E 0A               CALL   prthex   
11BE   CD 08 0B               CALL   printStr   
11C1   29 0D 0A 00            .CSTR   ")\r\n"   
11C5   76                     HALT      
11C6   00                     .CSTR      
11C7                EXPECTM_0_2582S43:      
11C7   E1                     POP   HL   
11C8                          ;*Macro unroll:  test "#10", $10
11C8   31 80 41               LD   SP,STACK   
11CB   CD 0F 0B               CALL   init   
11CE   CD F8 3F               CALL   execStr   
11D1   23 31 30 00            .CSTR   "#10"   
11D5                          ;*Macro unroll:  expect "#10",$10
11D5   E1                     POP   HL   
11D6   E5                     PUSH   HL   
11D7   11 10 00               LD   DE,$10   
11DA   B7                     OR   A   
11DB   ED 52                  SBC   HL,DE   
11DD   7D                     LD   A,L   
11DE   B4                     OR   H   
11DF   28 4E                  JR   Z,expectM_0_2583S43   
11E1   CD 08 0B               CALL   printStr   
11E4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
11EE   CD 08 0B               CALL   printStr   
11F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1200   21 10 00               LD   HL,$10   
1203   CD 56 0A               CALL   prtdec   
1206   CD 08 0B               CALL   printStr   
1209   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1216   E1                     POP   hl   
1217   E5                     PUSH   hl   
1218   CD 56 0A               CALL   prtdec   
121B   E1                     POP   hl   
121C   CD 08 0B               CALL   printStr   
121F   20 28 23 00            .CSTR   " (#"   
1223   CD 9E 0A               CALL   prthex   
1226   CD 08 0B               CALL   printStr   
1229   29 0D 0A 00            .CSTR   ")\r\n"   
122D   76                     HALT      
122E   00                     .CSTR      
122F                EXPECTM_0_2583S43:      
122F   E1                     POP   HL   
1230                          ;*Macro unroll:  test "#FF", $FF
1230   31 80 41               LD   SP,STACK   
1233   CD 0F 0B               CALL   init   
1236   CD F8 3F               CALL   execStr   
1239   23 46 46 00            .CSTR   "#FF"   
123D                          ;*Macro unroll:  expect "#FF",$FF
123D   E1                     POP   HL   
123E   E5                     PUSH   HL   
123F   11 FF 00               LD   DE,$FF   
1242   B7                     OR   A   
1243   ED 52                  SBC   HL,DE   
1245   7D                     LD   A,L   
1246   B4                     OR   H   
1247   28 4E                  JR   Z,expectM_0_2584S43   
1249   CD 08 0B               CALL   printStr   
124C   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
1256   CD 08 0B               CALL   printStr   
1259   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1268   21 FF 00               LD   HL,$FF   
126B   CD 56 0A               CALL   prtdec   
126E   CD 08 0B               CALL   printStr   
1271   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
127E   E1                     POP   hl   
127F   E5                     PUSH   hl   
1280   CD 56 0A               CALL   prtdec   
1283   E1                     POP   hl   
1284   CD 08 0B               CALL   printStr   
1287   20 28 23 00            .CSTR   " (#"   
128B   CD 9E 0A               CALL   prthex   
128E   CD 08 0B               CALL   printStr   
1291   29 0D 0A 00            .CSTR   ")\r\n"   
1295   76                     HALT      
1296   00                     .CSTR      
1297                EXPECTM_0_2584S43:      
1297   E1                     POP   HL   
1298                          ;*Macro unroll:  test "-1 2 +",1
1298   31 80 41               LD   SP,STACK   
129B   CD 0F 0B               CALL   init   
129E   CD F8 3F               CALL   execStr   
12A1   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
12A8                          ;*Macro unroll:  expect "-1 2 +",1
12A8   E1                     POP   HL   
12A9   E5                     PUSH   HL   
12AA   11 01 00               LD   DE,1   
12AD   B7                     OR   A   
12AE   ED 52                  SBC   HL,DE   
12B0   7D                     LD   A,L   
12B1   B4                     OR   H   
12B2   28 51                  JR   Z,expectM_0_2585S43   
12B4   CD 08 0B               CALL   printStr   
12B7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
12C4   CD 08 0B               CALL   printStr   
12C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12D6   21 01 00               LD   HL,1   
12D9   CD 56 0A               CALL   prtdec   
12DC   CD 08 0B               CALL   printStr   
12DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12EC   E1                     POP   hl   
12ED   E5                     PUSH   hl   
12EE   CD 56 0A               CALL   prtdec   
12F1   E1                     POP   hl   
12F2   CD 08 0B               CALL   printStr   
12F5   20 28 23 00            .CSTR   " (#"   
12F9   CD 9E 0A               CALL   prthex   
12FC   CD 08 0B               CALL   printStr   
12FF   29 0D 0A 00            .CSTR   ")\r\n"   
1303   76                     HALT      
1304   00                     .CSTR      
1305                EXPECTM_0_2585S43:      
1305   E1                     POP   HL   
1306                          ;*Macro unroll:  test "-1 1 +",0
1306   31 80 41               LD   SP,STACK   
1309   CD 0F 0B               CALL   init   
130C   CD F8 3F               CALL   execStr   
130F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1316                          ;*Macro unroll:  expect "-1 1 +",0
1316   E1                     POP   HL   
1317   E5                     PUSH   HL   
1318   11 00 00               LD   DE,0   
131B   B7                     OR   A   
131C   ED 52                  SBC   HL,DE   
131E   7D                     LD   A,L   
131F   B4                     OR   H   
1320   28 51                  JR   Z,expectM_0_2586S43   
1322   CD 08 0B               CALL   printStr   
1325   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1332   CD 08 0B               CALL   printStr   
1335   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1344   21 00 00               LD   HL,0   
1347   CD 56 0A               CALL   prtdec   
134A   CD 08 0B               CALL   printStr   
134D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
135A   E1                     POP   hl   
135B   E5                     PUSH   hl   
135C   CD 56 0A               CALL   prtdec   
135F   E1                     POP   hl   
1360   CD 08 0B               CALL   printStr   
1363   20 28 23 00            .CSTR   " (#"   
1367   CD 9E 0A               CALL   prthex   
136A   CD 08 0B               CALL   printStr   
136D   29 0D 0A 00            .CSTR   ")\r\n"   
1371   76                     HALT      
1372   00                     .CSTR      
1373                EXPECTM_0_2586S43:      
1373   E1                     POP   HL   
1374                          ;*Macro unroll:  test "1 2 +", 3
1374   31 80 41               LD   SP,STACK   
1377   CD 0F 0B               CALL   init   
137A   CD F8 3F               CALL   execStr   
137D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1383                          ;*Macro unroll:  expect "1 2 +",3
1383   E1                     POP   HL   
1384   E5                     PUSH   HL   
1385   11 03 00               LD   DE,3   
1388   B7                     OR   A   
1389   ED 52                  SBC   HL,DE   
138B   7D                     LD   A,L   
138C   B4                     OR   H   
138D   28 50                  JR   Z,expectM_0_2587S43   
138F   CD 08 0B               CALL   printStr   
1392   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
139E   CD 08 0B               CALL   printStr   
13A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13B0   21 03 00               LD   HL,3   
13B3   CD 56 0A               CALL   prtdec   
13B6   CD 08 0B               CALL   printStr   
13B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13C6   E1                     POP   hl   
13C7   E5                     PUSH   hl   
13C8   CD 56 0A               CALL   prtdec   
13CB   E1                     POP   hl   
13CC   CD 08 0B               CALL   printStr   
13CF   20 28 23 00            .CSTR   " (#"   
13D3   CD 9E 0A               CALL   prthex   
13D6   CD 08 0B               CALL   printStr   
13D9   29 0D 0A 00            .CSTR   ")\r\n"   
13DD   76                     HALT      
13DE   00                     .CSTR      
13DF                EXPECTM_0_2587S43:      
13DF   E1                     POP   HL   
13E0                          ;*Macro unroll:  test "4 1 2 +", 3
13E0   31 80 41               LD   SP,STACK   
13E3   CD 0F 0B               CALL   init   
13E6   CD F8 3F               CALL   execStr   
13E9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
13F1                          ;*Macro unroll:  expect "4 1 2 +",3
13F1   E1                     POP   HL   
13F2   E5                     PUSH   HL   
13F3   11 03 00               LD   DE,3   
13F6   B7                     OR   A   
13F7   ED 52                  SBC   HL,DE   
13F9   7D                     LD   A,L   
13FA   B4                     OR   H   
13FB   28 52                  JR   Z,expectM_0_2588S43   
13FD   CD 08 0B               CALL   printStr   
1400   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
140E   CD 08 0B               CALL   printStr   
1411   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1420   21 03 00               LD   HL,3   
1423   CD 56 0A               CALL   prtdec   
1426   CD 08 0B               CALL   printStr   
1429   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1436   E1                     POP   hl   
1437   E5                     PUSH   hl   
1438   CD 56 0A               CALL   prtdec   
143B   E1                     POP   hl   
143C   CD 08 0B               CALL   printStr   
143F   20 28 23 00            .CSTR   " (#"   
1443   CD 9E 0A               CALL   prthex   
1446   CD 08 0B               CALL   printStr   
1449   29 0D 0A 00            .CSTR   ")\r\n"   
144D   76                     HALT      
144E   00                     .CSTR      
144F                EXPECTM_0_2588S43:      
144F   E1                     POP   HL   
1450                          ;*Macro unroll:  test "123 456 +", 123+456
1450   31 80 41               LD   SP,STACK   
1453   CD 0F 0B               CALL   init   
1456   CD F8 3F               CALL   execStr   
1459   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1463                          ;*Macro unroll:  expect "123 456 +",123+456
1463   E1                     POP   HL   
1464   E5                     PUSH   HL   
1465   11 43 02               LD   DE,123+456   
1468   B7                     OR   A   
1469   ED 52                  SBC   HL,DE   
146B   7D                     LD   A,L   
146C   B4                     OR   H   
146D   28 54                  JR   Z,expectM_0_2589S43   
146F   CD 08 0B               CALL   printStr   
1472   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1482   CD 08 0B               CALL   printStr   
1485   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1494   21 43 02               LD   HL,123+456   
1497   CD 56 0A               CALL   prtdec   
149A   CD 08 0B               CALL   printStr   
149D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14AA   E1                     POP   hl   
14AB   E5                     PUSH   hl   
14AC   CD 56 0A               CALL   prtdec   
14AF   E1                     POP   hl   
14B0   CD 08 0B               CALL   printStr   
14B3   20 28 23 00            .CSTR   " (#"   
14B7   CD 9E 0A               CALL   prthex   
14BA   CD 08 0B               CALL   printStr   
14BD   29 0D 0A 00            .CSTR   ")\r\n"   
14C1   76                     HALT      
14C2   00                     .CSTR      
14C3                EXPECTM_0_2589S43:      
14C3   E1                     POP   HL   
14C4                          ;*Macro unroll:  test "64 128 +", 64+128
14C4   31 80 41               LD   SP,STACK   
14C7   CD 0F 0B               CALL   init   
14CA   CD F8 3F               CALL   execStr   
14CD   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
14D6                          ;*Macro unroll:  expect "64 128 +",64+128
14D6   E1                     POP   HL   
14D7   E5                     PUSH   HL   
14D8   11 C0 00               LD   DE,64+128   
14DB   B7                     OR   A   
14DC   ED 52                  SBC   HL,DE   
14DE   7D                     LD   A,L   
14DF   B4                     OR   H   
14E0   28 53                  JR   Z,expectM_0_2590S43   
14E2   CD 08 0B               CALL   printStr   
14E5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
14F4   CD 08 0B               CALL   printStr   
14F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1506   21 C0 00               LD   HL,64+128   
1509   CD 56 0A               CALL   prtdec   
150C   CD 08 0B               CALL   printStr   
150F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
151C   E1                     POP   hl   
151D   E5                     PUSH   hl   
151E   CD 56 0A               CALL   prtdec   
1521   E1                     POP   hl   
1522   CD 08 0B               CALL   printStr   
1525   20 28 23 00            .CSTR   " (#"   
1529   CD 9E 0A               CALL   prthex   
152C   CD 08 0B               CALL   printStr   
152F   29 0D 0A 00            .CSTR   ")\r\n"   
1533   76                     HALT      
1534   00                     .CSTR      
1535                EXPECTM_0_2590S43:      
1535   E1                     POP   HL   
1536                          ;*Macro unroll:  test "1 2 +", 3
1536   31 80 41               LD   SP,STACK   
1539   CD 0F 0B               CALL   init   
153C   CD F8 3F               CALL   execStr   
153F   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1545                          ;*Macro unroll:  expect "1 2 +",3
1545   E1                     POP   HL   
1546   E5                     PUSH   HL   
1547   11 03 00               LD   DE,3   
154A   B7                     OR   A   
154B   ED 52                  SBC   HL,DE   
154D   7D                     LD   A,L   
154E   B4                     OR   H   
154F   28 50                  JR   Z,expectM_0_2591S43   
1551   CD 08 0B               CALL   printStr   
1554   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1560   CD 08 0B               CALL   printStr   
1563   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1572   21 03 00               LD   HL,3   
1575   CD 56 0A               CALL   prtdec   
1578   CD 08 0B               CALL   printStr   
157B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1588   E1                     POP   hl   
1589   E5                     PUSH   hl   
158A   CD 56 0A               CALL   prtdec   
158D   E1                     POP   hl   
158E   CD 08 0B               CALL   printStr   
1591   20 28 23 00            .CSTR   " (#"   
1595   CD 9E 0A               CALL   prthex   
1598   CD 08 0B               CALL   printStr   
159B   29 0D 0A 00            .CSTR   ")\r\n"   
159F   76                     HALT      
15A0   00                     .CSTR      
15A1                EXPECTM_0_2591S43:      
15A1   E1                     POP   HL   
15A2                          ;*Macro unroll:  test "1a= a++ a",2
15A2   31 80 41               LD   SP,STACK   
15A5   CD 0F 0B               CALL   init   
15A8   CD F8 3F               CALL   execStr   
15AB   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
15B5                          ;*Macro unroll:  expect "1a= a++ a",2
15B5   E1                     POP   HL   
15B6   E5                     PUSH   HL   
15B7   11 02 00               LD   DE,2   
15BA   B7                     OR   A   
15BB   ED 52                  SBC   HL,DE   
15BD   7D                     LD   A,L   
15BE   B4                     OR   H   
15BF   28 54                  JR   Z,expectM_0_2592S43   
15C1   CD 08 0B               CALL   printStr   
15C4   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
15D4   CD 08 0B               CALL   printStr   
15D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15E6   21 02 00               LD   HL,2   
15E9   CD 56 0A               CALL   prtdec   
15EC   CD 08 0B               CALL   printStr   
15EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15FC   E1                     POP   hl   
15FD   E5                     PUSH   hl   
15FE   CD 56 0A               CALL   prtdec   
1601   E1                     POP   hl   
1602   CD 08 0B               CALL   printStr   
1605   20 28 23 00            .CSTR   " (#"   
1609   CD 9E 0A               CALL   prthex   
160C   CD 08 0B               CALL   printStr   
160F   29 0D 0A 00            .CSTR   ")\r\n"   
1613   76                     HALT      
1614   00                     .CSTR      
1615                EXPECTM_0_2592S43:      
1615   E1                     POP   HL   
1616                          ;*Macro unroll:  test "-1 -1 -",0
1616   31 80 41               LD   SP,STACK   
1619   CD 0F 0B               CALL   init   
161C   CD F8 3F               CALL   execStr   
161F   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
1627                          ;*Macro unroll:  expect "-1 -1 -",0
1627   E1                     POP   HL   
1628   E5                     PUSH   HL   
1629   11 00 00               LD   DE,0   
162C   B7                     OR   A   
162D   ED 52                  SBC   HL,DE   
162F   7D                     LD   A,L   
1630   B4                     OR   H   
1631   28 52                  JR   Z,expectM_0_2593S43   
1633   CD 08 0B               CALL   printStr   
1636   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1644   CD 08 0B               CALL   printStr   
1647   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1656   21 00 00               LD   HL,0   
1659   CD 56 0A               CALL   prtdec   
165C   CD 08 0B               CALL   printStr   
165F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
166C   E1                     POP   hl   
166D   E5                     PUSH   hl   
166E   CD 56 0A               CALL   prtdec   
1671   E1                     POP   hl   
1672   CD 08 0B               CALL   printStr   
1675   20 28 23 00            .CSTR   " (#"   
1679   CD 9E 0A               CALL   prthex   
167C   CD 08 0B               CALL   printStr   
167F   29 0D 0A 00            .CSTR   ")\r\n"   
1683   76                     HALT      
1684   00                     .CSTR      
1685                EXPECTM_0_2593S43:      
1685   E1                     POP   HL   
1686                          ;*Macro unroll:  test "5 3 -", 2
1686   31 80 41               LD   SP,STACK   
1689   CD 0F 0B               CALL   init   
168C   CD F8 3F               CALL   execStr   
168F   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1695                          ;*Macro unroll:  expect "5 3 -",2
1695   E1                     POP   HL   
1696   E5                     PUSH   HL   
1697   11 02 00               LD   DE,2   
169A   B7                     OR   A   
169B   ED 52                  SBC   HL,DE   
169D   7D                     LD   A,L   
169E   B4                     OR   H   
169F   28 50                  JR   Z,expectM_0_2594S43   
16A1   CD 08 0B               CALL   printStr   
16A4   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
16B0   CD 08 0B               CALL   printStr   
16B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16C2   21 02 00               LD   HL,2   
16C5   CD 56 0A               CALL   prtdec   
16C8   CD 08 0B               CALL   printStr   
16CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16D8   E1                     POP   hl   
16D9   E5                     PUSH   hl   
16DA   CD 56 0A               CALL   prtdec   
16DD   E1                     POP   hl   
16DE   CD 08 0B               CALL   printStr   
16E1   20 28 23 00            .CSTR   " (#"   
16E5   CD 9E 0A               CALL   prthex   
16E8   CD 08 0B               CALL   printStr   
16EB   29 0D 0A 00            .CSTR   ")\r\n"   
16EF   76                     HALT      
16F0   00                     .CSTR      
16F1                EXPECTM_0_2594S43:      
16F1   E1                     POP   HL   
16F2                          ;*Macro unroll:  test "2 1 -",1
16F2   31 80 41               LD   SP,STACK   
16F5   CD 0F 0B               CALL   init   
16F8   CD F8 3F               CALL   execStr   
16FB   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1701                          ;*Macro unroll:  expect "2 1 -",1
1701   E1                     POP   HL   
1702   E5                     PUSH   HL   
1703   11 01 00               LD   DE,1   
1706   B7                     OR   A   
1707   ED 52                  SBC   HL,DE   
1709   7D                     LD   A,L   
170A   B4                     OR   H   
170B   28 50                  JR   Z,expectM_0_2595S43   
170D   CD 08 0B               CALL   printStr   
1710   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
171C   CD 08 0B               CALL   printStr   
171F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
172E   21 01 00               LD   HL,1   
1731   CD 56 0A               CALL   prtdec   
1734   CD 08 0B               CALL   printStr   
1737   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1744   E1                     POP   hl   
1745   E5                     PUSH   hl   
1746   CD 56 0A               CALL   prtdec   
1749   E1                     POP   hl   
174A   CD 08 0B               CALL   printStr   
174D   20 28 23 00            .CSTR   " (#"   
1751   CD 9E 0A               CALL   prthex   
1754   CD 08 0B               CALL   printStr   
1757   29 0D 0A 00            .CSTR   ")\r\n"   
175B   76                     HALT      
175C   00                     .CSTR      
175D                EXPECTM_0_2595S43:      
175D   E1                     POP   HL   
175E                          ;*Macro unroll:  test "3a= a-- a",2
175E   31 80 41               LD   SP,STACK   
1761   CD 0F 0B               CALL   init   
1764   CD F8 3F               CALL   execStr   
1767   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
1771                          ;*Macro unroll:  expect "3a= a-- a",2
1771   E1                     POP   HL   
1772   E5                     PUSH   HL   
1773   11 02 00               LD   DE,2   
1776   B7                     OR   A   
1777   ED 52                  SBC   HL,DE   
1779   7D                     LD   A,L   
177A   B4                     OR   H   
177B   28 54                  JR   Z,expectM_0_2596S43   
177D   CD 08 0B               CALL   printStr   
1780   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1790   CD 08 0B               CALL   printStr   
1793   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17A2   21 02 00               LD   HL,2   
17A5   CD 56 0A               CALL   prtdec   
17A8   CD 08 0B               CALL   printStr   
17AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17B8   E1                     POP   hl   
17B9   E5                     PUSH   hl   
17BA   CD 56 0A               CALL   prtdec   
17BD   E1                     POP   hl   
17BE   CD 08 0B               CALL   printStr   
17C1   20 28 23 00            .CSTR   " (#"   
17C5   CD 9E 0A               CALL   prthex   
17C8   CD 08 0B               CALL   printStr   
17CB   29 0D 0A 00            .CSTR   ")\r\n"   
17CF   76                     HALT      
17D0   00                     .CSTR      
17D1                EXPECTM_0_2596S43:      
17D1   E1                     POP   HL   
17D2                          ;*Macro unroll:  test "3 5 &", 1
17D2   31 80 41               LD   SP,STACK   
17D5   CD 0F 0B               CALL   init   
17D8   CD F8 3F               CALL   execStr   
17DB   33 20 35 20 26 00      .CSTR   "3 5 &"   
17E1                          ;*Macro unroll:  expect "3 5 &",1
17E1   E1                     POP   HL   
17E2   E5                     PUSH   HL   
17E3   11 01 00               LD   DE,1   
17E6   B7                     OR   A   
17E7   ED 52                  SBC   HL,DE   
17E9   7D                     LD   A,L   
17EA   B4                     OR   H   
17EB   28 50                  JR   Z,expectM_0_2597S43   
17ED   CD 08 0B               CALL   printStr   
17F0   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
17FC   CD 08 0B               CALL   printStr   
17FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
180E   21 01 00               LD   HL,1   
1811   CD 56 0A               CALL   prtdec   
1814   CD 08 0B               CALL   printStr   
1817   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1824   E1                     POP   hl   
1825   E5                     PUSH   hl   
1826   CD 56 0A               CALL   prtdec   
1829   E1                     POP   hl   
182A   CD 08 0B               CALL   printStr   
182D   20 28 23 00            .CSTR   " (#"   
1831   CD 9E 0A               CALL   prthex   
1834   CD 08 0B               CALL   printStr   
1837   29 0D 0A 00            .CSTR   ")\r\n"   
183B   76                     HALT      
183C   00                     .CSTR      
183D                EXPECTM_0_2597S43:      
183D   E1                     POP   HL   
183E                          ;*Macro unroll:  test "3 5 |", 7
183E   31 80 41               LD   SP,STACK   
1841   CD 0F 0B               CALL   init   
1844   CD F8 3F               CALL   execStr   
1847   33 20 35 20 7C 00      .CSTR   "3 5 |"   
184D                          ;*Macro unroll:  expect "3 5 |",7
184D   E1                     POP   HL   
184E   E5                     PUSH   HL   
184F   11 07 00               LD   DE,7   
1852   B7                     OR   A   
1853   ED 52                  SBC   HL,DE   
1855   7D                     LD   A,L   
1856   B4                     OR   H   
1857   28 50                  JR   Z,expectM_0_2598S43   
1859   CD 08 0B               CALL   printStr   
185C   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1868   CD 08 0B               CALL   printStr   
186B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
187A   21 07 00               LD   HL,7   
187D   CD 56 0A               CALL   prtdec   
1880   CD 08 0B               CALL   printStr   
1883   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1890   E1                     POP   hl   
1891   E5                     PUSH   hl   
1892   CD 56 0A               CALL   prtdec   
1895   E1                     POP   hl   
1896   CD 08 0B               CALL   printStr   
1899   20 28 23 00            .CSTR   " (#"   
189D   CD 9E 0A               CALL   prthex   
18A0   CD 08 0B               CALL   printStr   
18A3   29 0D 0A 00            .CSTR   ")\r\n"   
18A7   76                     HALT      
18A8   00                     .CSTR      
18A9                EXPECTM_0_2598S43:      
18A9   E1                     POP   HL   
18AA                          ;*Macro unroll:  test "3 5 /x", 6
18AA   31 80 41               LD   SP,STACK   
18AD   CD 0F 0B               CALL   init   
18B0   CD F8 3F               CALL   execStr   
18B3   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
18BA                          ;*Macro unroll:  expect "3 5 /x",6
18BA   E1                     POP   HL   
18BB   E5                     PUSH   HL   
18BC   11 06 00               LD   DE,6   
18BF   B7                     OR   A   
18C0   ED 52                  SBC   HL,DE   
18C2   7D                     LD   A,L   
18C3   B4                     OR   H   
18C4   28 51                  JR   Z,expectM_0_2599S43   
18C6   CD 08 0B               CALL   printStr   
18C9   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
18D6   CD 08 0B               CALL   printStr   
18D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18E8   21 06 00               LD   HL,6   
18EB   CD 56 0A               CALL   prtdec   
18EE   CD 08 0B               CALL   printStr   
18F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18FE   E1                     POP   hl   
18FF   E5                     PUSH   hl   
1900   CD 56 0A               CALL   prtdec   
1903   E1                     POP   hl   
1904   CD 08 0B               CALL   printStr   
1907   20 28 23 00            .CSTR   " (#"   
190B   CD 9E 0A               CALL   prthex   
190E   CD 08 0B               CALL   printStr   
1911   29 0D 0A 00            .CSTR   ")\r\n"   
1915   76                     HALT      
1916   00                     .CSTR      
1917                EXPECTM_0_2599S43:      
1917   E1                     POP   HL   
1918                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1918   31 80 41               LD   SP,STACK   
191B   CD 0F 0B               CALL   init   
191E   CD F8 3F               CALL   execStr   
1921   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1930                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1930   E1                     POP   HL   
1931   E5                     PUSH   HL   
1932   11 06 00               LD   DE,6   
1935   B7                     OR   A   
1936   ED 52                  SBC   HL,DE   
1938   7D                     LD   A,L   
1939   B4                     OR   H   
193A   28 59                  JR   Z,expectM_0_2600S43   
193C   CD 08 0B               CALL   printStr   
193F   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1954   CD 08 0B               CALL   printStr   
1957   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1966   21 06 00               LD   HL,6   
1969   CD 56 0A               CALL   prtdec   
196C   CD 08 0B               CALL   printStr   
196F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
197C   E1                     POP   hl   
197D   E5                     PUSH   hl   
197E   CD 56 0A               CALL   prtdec   
1981   E1                     POP   hl   
1982   CD 08 0B               CALL   printStr   
1985   20 28 23 00            .CSTR   " (#"   
1989   CD 9E 0A               CALL   prthex   
198C   CD 08 0B               CALL   printStr   
198F   29 0D 0A 00            .CSTR   ")\r\n"   
1993   76                     HALT      
1994   00                     .CSTR      
1995                EXPECTM_0_2600S43:      
1995   E1                     POP   HL   
1996                          ;*Macro unroll:  test "2 3 *", 6
1996   31 80 41               LD   SP,STACK   
1999   CD 0F 0B               CALL   init   
199C   CD F8 3F               CALL   execStr   
199F   32 20 33 20 2A 00      .CSTR   "2 3 *"   
19A5                          ;*Macro unroll:  expect "2 3 *",6
19A5   E1                     POP   HL   
19A6   E5                     PUSH   HL   
19A7   11 06 00               LD   DE,6   
19AA   B7                     OR   A   
19AB   ED 52                  SBC   HL,DE   
19AD   7D                     LD   A,L   
19AE   B4                     OR   H   
19AF   28 50                  JR   Z,expectM_0_2601S43   
19B1   CD 08 0B               CALL   printStr   
19B4   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
19C0   CD 08 0B               CALL   printStr   
19C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19D2   21 06 00               LD   HL,6   
19D5   CD 56 0A               CALL   prtdec   
19D8   CD 08 0B               CALL   printStr   
19DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19E8   E1                     POP   hl   
19E9   E5                     PUSH   hl   
19EA   CD 56 0A               CALL   prtdec   
19ED   E1                     POP   hl   
19EE   CD 08 0B               CALL   printStr   
19F1   20 28 23 00            .CSTR   " (#"   
19F5   CD 9E 0A               CALL   prthex   
19F8   CD 08 0B               CALL   printStr   
19FB   29 0D 0A 00            .CSTR   ")\r\n"   
19FF   76                     HALT      
1A00   00                     .CSTR      
1A01                EXPECTM_0_2601S43:      
1A01   E1                     POP   HL   
1A02                          ;*Macro unroll:  test "1 2 3 + *", 5
1A02   31 80 41               LD   SP,STACK   
1A05   CD 0F 0B               CALL   init   
1A08   CD F8 3F               CALL   execStr   
1A0B   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1A15                          ;*Macro unroll:  expect "1 2 3 + *",5
1A15   E1                     POP   HL   
1A16   E5                     PUSH   HL   
1A17   11 05 00               LD   DE,5   
1A1A   B7                     OR   A   
1A1B   ED 52                  SBC   HL,DE   
1A1D   7D                     LD   A,L   
1A1E   B4                     OR   H   
1A1F   28 54                  JR   Z,expectM_0_2602S43   
1A21   CD 08 0B               CALL   printStr   
1A24   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1A34   CD 08 0B               CALL   printStr   
1A37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A46   21 05 00               LD   HL,5   
1A49   CD 56 0A               CALL   prtdec   
1A4C   CD 08 0B               CALL   printStr   
1A4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A5C   E1                     POP   hl   
1A5D   E5                     PUSH   hl   
1A5E   CD 56 0A               CALL   prtdec   
1A61   E1                     POP   hl   
1A62   CD 08 0B               CALL   printStr   
1A65   20 28 23 00            .CSTR   " (#"   
1A69   CD 9E 0A               CALL   prthex   
1A6C   CD 08 0B               CALL   printStr   
1A6F   29 0D 0A 00            .CSTR   ")\r\n"   
1A73   76                     HALT      
1A74   00                     .CSTR      
1A75                EXPECTM_0_2602S43:      
1A75   E1                     POP   HL   
1A76                          ;*Macro unroll:  test "7 3 /", 2
1A76   31 80 41               LD   SP,STACK   
1A79   CD 0F 0B               CALL   init   
1A7C   CD F8 3F               CALL   execStr   
1A7F   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1A85                          ;*Macro unroll:  expect "7 3 /",2
1A85   E1                     POP   HL   
1A86   E5                     PUSH   HL   
1A87   11 02 00               LD   DE,2   
1A8A   B7                     OR   A   
1A8B   ED 52                  SBC   HL,DE   
1A8D   7D                     LD   A,L   
1A8E   B4                     OR   H   
1A8F   28 50                  JR   Z,expectM_0_2603S43   
1A91   CD 08 0B               CALL   printStr   
1A94   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1AA0   CD 08 0B               CALL   printStr   
1AA3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AB2   21 02 00               LD   HL,2   
1AB5   CD 56 0A               CALL   prtdec   
1AB8   CD 08 0B               CALL   printStr   
1ABB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AC8   E1                     POP   hl   
1AC9   E5                     PUSH   hl   
1ACA   CD 56 0A               CALL   prtdec   
1ACD   E1                     POP   hl   
1ACE   CD 08 0B               CALL   printStr   
1AD1   20 28 23 00            .CSTR   " (#"   
1AD5   CD 9E 0A               CALL   prthex   
1AD8   CD 08 0B               CALL   printStr   
1ADB   29 0D 0A 00            .CSTR   ")\r\n"   
1ADF   76                     HALT      
1AE0   00                     .CSTR      
1AE1                EXPECTM_0_2603S43:      
1AE1   E1                     POP   HL   
1AE2                          ;*Macro unroll:  test "7 3 / _", 1
1AE2   31 80 41               LD   SP,STACK   
1AE5   CD 0F 0B               CALL   init   
1AE8   CD F8 3F               CALL   execStr   
1AEB   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1AF3                          ;*Macro unroll:  expect "7 3 / _",1
1AF3   E1                     POP   HL   
1AF4   E5                     PUSH   HL   
1AF5   11 01 00               LD   DE,1   
1AF8   B7                     OR   A   
1AF9   ED 52                  SBC   HL,DE   
1AFB   7D                     LD   A,L   
1AFC   B4                     OR   H   
1AFD   28 52                  JR   Z,expectM_0_2604S43   
1AFF   CD 08 0B               CALL   printStr   
1B02   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1B10   CD 08 0B               CALL   printStr   
1B13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B22   21 01 00               LD   HL,1   
1B25   CD 56 0A               CALL   prtdec   
1B28   CD 08 0B               CALL   printStr   
1B2B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B38   E1                     POP   hl   
1B39   E5                     PUSH   hl   
1B3A   CD 56 0A               CALL   prtdec   
1B3D   E1                     POP   hl   
1B3E   CD 08 0B               CALL   printStr   
1B41   20 28 23 00            .CSTR   " (#"   
1B45   CD 9E 0A               CALL   prthex   
1B48   CD 08 0B               CALL   printStr   
1B4B   29 0D 0A 00            .CSTR   ")\r\n"   
1B4F   76                     HALT      
1B50   00                     .CSTR      
1B51                EXPECTM_0_2604S43:      
1B51   E1                     POP   HL   
1B52                          ;*Macro unroll:  test "7 3 /", 2
1B52   31 80 41               LD   SP,STACK   
1B55   CD 0F 0B               CALL   init   
1B58   CD F8 3F               CALL   execStr   
1B5B   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1B61                          ;*Macro unroll:  expect "7 3 /",2
1B61   E1                     POP   HL   
1B62   E5                     PUSH   HL   
1B63   11 02 00               LD   DE,2   
1B66   B7                     OR   A   
1B67   ED 52                  SBC   HL,DE   
1B69   7D                     LD   A,L   
1B6A   B4                     OR   H   
1B6B   28 50                  JR   Z,expectM_0_2605S43   
1B6D   CD 08 0B               CALL   printStr   
1B70   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1B7C   CD 08 0B               CALL   printStr   
1B7F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B8E   21 02 00               LD   HL,2   
1B91   CD 56 0A               CALL   prtdec   
1B94   CD 08 0B               CALL   printStr   
1B97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BA4   E1                     POP   hl   
1BA5   E5                     PUSH   hl   
1BA6   CD 56 0A               CALL   prtdec   
1BA9   E1                     POP   hl   
1BAA   CD 08 0B               CALL   printStr   
1BAD   20 28 23 00            .CSTR   " (#"   
1BB1   CD 9E 0A               CALL   prthex   
1BB4   CD 08 0B               CALL   printStr   
1BB7   29 0D 0A 00            .CSTR   ")\r\n"   
1BBB   76                     HALT      
1BBC   00                     .CSTR      
1BBD                EXPECTM_0_2605S43:      
1BBD   E1                     POP   HL   
1BBE                          ;*Macro unroll:  test "2 3 ==", FALSE
1BBE   31 80 41               LD   SP,STACK   
1BC1   CD 0F 0B               CALL   init   
1BC4   CD F8 3F               CALL   execStr   
1BC7   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1BCE                          ;*Macro unroll:  expect "2 3 ==",FALSE
1BCE   E1                     POP   HL   
1BCF   E5                     PUSH   HL   
1BD0   11 00 00               LD   DE,FALSE   
1BD3   B7                     OR   A   
1BD4   ED 52                  SBC   HL,DE   
1BD6   7D                     LD   A,L   
1BD7   B4                     OR   H   
1BD8   28 51                  JR   Z,expectM_0_2606S43   
1BDA   CD 08 0B               CALL   printStr   
1BDD   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1BEA   CD 08 0B               CALL   printStr   
1BED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BFC   21 00 00               LD   HL,FALSE   
1BFF   CD 56 0A               CALL   prtdec   
1C02   CD 08 0B               CALL   printStr   
1C05   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C12   E1                     POP   hl   
1C13   E5                     PUSH   hl   
1C14   CD 56 0A               CALL   prtdec   
1C17   E1                     POP   hl   
1C18   CD 08 0B               CALL   printStr   
1C1B   20 28 23 00            .CSTR   " (#"   
1C1F   CD 9E 0A               CALL   prthex   
1C22   CD 08 0B               CALL   printStr   
1C25   29 0D 0A 00            .CSTR   ")\r\n"   
1C29   76                     HALT      
1C2A   00                     .CSTR      
1C2B                EXPECTM_0_2606S43:      
1C2B   E1                     POP   HL   
1C2C                          ;*Macro unroll:  test "3 3 ==", TRUE
1C2C   31 80 41               LD   SP,STACK   
1C2F   CD 0F 0B               CALL   init   
1C32   CD F8 3F               CALL   execStr   
1C35   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1C3C                          ;*Macro unroll:  expect "3 3 ==",TRUE
1C3C   E1                     POP   HL   
1C3D   E5                     PUSH   HL   
1C3E   11 FF FF               LD   DE,TRUE   
1C41   B7                     OR   A   
1C42   ED 52                  SBC   HL,DE   
1C44   7D                     LD   A,L   
1C45   B4                     OR   H   
1C46   28 51                  JR   Z,expectM_0_2607S43   
1C48   CD 08 0B               CALL   printStr   
1C4B   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1C58   CD 08 0B               CALL   printStr   
1C5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C6A   21 FF FF               LD   HL,TRUE   
1C6D   CD 56 0A               CALL   prtdec   
1C70   CD 08 0B               CALL   printStr   
1C73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C80   E1                     POP   hl   
1C81   E5                     PUSH   hl   
1C82   CD 56 0A               CALL   prtdec   
1C85   E1                     POP   hl   
1C86   CD 08 0B               CALL   printStr   
1C89   20 28 23 00            .CSTR   " (#"   
1C8D   CD 9E 0A               CALL   prthex   
1C90   CD 08 0B               CALL   printStr   
1C93   29 0D 0A 00            .CSTR   ")\r\n"   
1C97   76                     HALT      
1C98   00                     .CSTR      
1C99                EXPECTM_0_2607S43:      
1C99   E1                     POP   HL   
1C9A                          ;*Macro unroll:  test "1 2 <", TRUE
1C9A   31 80 41               LD   SP,STACK   
1C9D   CD 0F 0B               CALL   init   
1CA0   CD F8 3F               CALL   execStr   
1CA3   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1CA9                          ;*Macro unroll:  expect "1 2 <",TRUE
1CA9   E1                     POP   HL   
1CAA   E5                     PUSH   HL   
1CAB   11 FF FF               LD   DE,TRUE   
1CAE   B7                     OR   A   
1CAF   ED 52                  SBC   HL,DE   
1CB1   7D                     LD   A,L   
1CB2   B4                     OR   H   
1CB3   28 50                  JR   Z,expectM_0_2608S43   
1CB5   CD 08 0B               CALL   printStr   
1CB8   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1CC4   CD 08 0B               CALL   printStr   
1CC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD6   21 FF FF               LD   HL,TRUE   
1CD9   CD 56 0A               CALL   prtdec   
1CDC   CD 08 0B               CALL   printStr   
1CDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CEC   E1                     POP   hl   
1CED   E5                     PUSH   hl   
1CEE   CD 56 0A               CALL   prtdec   
1CF1   E1                     POP   hl   
1CF2   CD 08 0B               CALL   printStr   
1CF5   20 28 23 00            .CSTR   " (#"   
1CF9   CD 9E 0A               CALL   prthex   
1CFC   CD 08 0B               CALL   printStr   
1CFF   29 0D 0A 00            .CSTR   ")\r\n"   
1D03   76                     HALT      
1D04   00                     .CSTR      
1D05                EXPECTM_0_2608S43:      
1D05   E1                     POP   HL   
1D06                          ;*Macro unroll:  test "2 1 <", FALSE
1D06   31 80 41               LD   SP,STACK   
1D09   CD 0F 0B               CALL   init   
1D0C   CD F8 3F               CALL   execStr   
1D0F   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1D15                          ;*Macro unroll:  expect "2 1 <",FALSE
1D15   E1                     POP   HL   
1D16   E5                     PUSH   HL   
1D17   11 00 00               LD   DE,FALSE   
1D1A   B7                     OR   A   
1D1B   ED 52                  SBC   HL,DE   
1D1D   7D                     LD   A,L   
1D1E   B4                     OR   H   
1D1F   28 50                  JR   Z,expectM_0_2609S43   
1D21   CD 08 0B               CALL   printStr   
1D24   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1D30   CD 08 0B               CALL   printStr   
1D33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D42   21 00 00               LD   HL,FALSE   
1D45   CD 56 0A               CALL   prtdec   
1D48   CD 08 0B               CALL   printStr   
1D4B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D58   E1                     POP   hl   
1D59   E5                     PUSH   hl   
1D5A   CD 56 0A               CALL   prtdec   
1D5D   E1                     POP   hl   
1D5E   CD 08 0B               CALL   printStr   
1D61   20 28 23 00            .CSTR   " (#"   
1D65   CD 9E 0A               CALL   prthex   
1D68   CD 08 0B               CALL   printStr   
1D6B   29 0D 0A 00            .CSTR   ")\r\n"   
1D6F   76                     HALT      
1D70   00                     .CSTR      
1D71                EXPECTM_0_2609S43:      
1D71   E1                     POP   HL   
1D72                          ;*Macro unroll:  test "2 3 <", TRUE
1D72   31 80 41               LD   SP,STACK   
1D75   CD 0F 0B               CALL   init   
1D78   CD F8 3F               CALL   execStr   
1D7B   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1D81                          ;*Macro unroll:  expect "2 3 <",TRUE
1D81   E1                     POP   HL   
1D82   E5                     PUSH   HL   
1D83   11 FF FF               LD   DE,TRUE   
1D86   B7                     OR   A   
1D87   ED 52                  SBC   HL,DE   
1D89   7D                     LD   A,L   
1D8A   B4                     OR   H   
1D8B   28 50                  JR   Z,expectM_0_2610S43   
1D8D   CD 08 0B               CALL   printStr   
1D90   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1D9C   CD 08 0B               CALL   printStr   
1D9F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DAE   21 FF FF               LD   HL,TRUE   
1DB1   CD 56 0A               CALL   prtdec   
1DB4   CD 08 0B               CALL   printStr   
1DB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DC4   E1                     POP   hl   
1DC5   E5                     PUSH   hl   
1DC6   CD 56 0A               CALL   prtdec   
1DC9   E1                     POP   hl   
1DCA   CD 08 0B               CALL   printStr   
1DCD   20 28 23 00            .CSTR   " (#"   
1DD1   CD 9E 0A               CALL   prthex   
1DD4   CD 08 0B               CALL   printStr   
1DD7   29 0D 0A 00            .CSTR   ")\r\n"   
1DDB   76                     HALT      
1DDC   00                     .CSTR      
1DDD                EXPECTM_0_2610S43:      
1DDD   E1                     POP   HL   
1DDE                          ;*Macro unroll:  test "3 3 <", FALSE
1DDE   31 80 41               LD   SP,STACK   
1DE1   CD 0F 0B               CALL   init   
1DE4   CD F8 3F               CALL   execStr   
1DE7   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1DED                          ;*Macro unroll:  expect "3 3 <",FALSE
1DED   E1                     POP   HL   
1DEE   E5                     PUSH   HL   
1DEF   11 00 00               LD   DE,FALSE   
1DF2   B7                     OR   A   
1DF3   ED 52                  SBC   HL,DE   
1DF5   7D                     LD   A,L   
1DF6   B4                     OR   H   
1DF7   28 50                  JR   Z,expectM_0_2611S43   
1DF9   CD 08 0B               CALL   printStr   
1DFC   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1E08   CD 08 0B               CALL   printStr   
1E0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E1A   21 00 00               LD   HL,FALSE   
1E1D   CD 56 0A               CALL   prtdec   
1E20   CD 08 0B               CALL   printStr   
1E23   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E30   E1                     POP   hl   
1E31   E5                     PUSH   hl   
1E32   CD 56 0A               CALL   prtdec   
1E35   E1                     POP   hl   
1E36   CD 08 0B               CALL   printStr   
1E39   20 28 23 00            .CSTR   " (#"   
1E3D   CD 9E 0A               CALL   prthex   
1E40   CD 08 0B               CALL   printStr   
1E43   29 0D 0A 00            .CSTR   ")\r\n"   
1E47   76                     HALT      
1E48   00                     .CSTR      
1E49                EXPECTM_0_2611S43:      
1E49   E1                     POP   HL   
1E4A                          ;*Macro unroll:  test "1 2 >", FALSE
1E4A   31 80 41               LD   SP,STACK   
1E4D   CD 0F 0B               CALL   init   
1E50   CD F8 3F               CALL   execStr   
1E53   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1E59                          ;*Macro unroll:  expect "1 2 >",FALSE
1E59   E1                     POP   HL   
1E5A   E5                     PUSH   HL   
1E5B   11 00 00               LD   DE,FALSE   
1E5E   B7                     OR   A   
1E5F   ED 52                  SBC   HL,DE   
1E61   7D                     LD   A,L   
1E62   B4                     OR   H   
1E63   28 50                  JR   Z,expectM_0_2612S43   
1E65   CD 08 0B               CALL   printStr   
1E68   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1E74   CD 08 0B               CALL   printStr   
1E77   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E86   21 00 00               LD   HL,FALSE   
1E89   CD 56 0A               CALL   prtdec   
1E8C   CD 08 0B               CALL   printStr   
1E8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E9C   E1                     POP   hl   
1E9D   E5                     PUSH   hl   
1E9E   CD 56 0A               CALL   prtdec   
1EA1   E1                     POP   hl   
1EA2   CD 08 0B               CALL   printStr   
1EA5   20 28 23 00            .CSTR   " (#"   
1EA9   CD 9E 0A               CALL   prthex   
1EAC   CD 08 0B               CALL   printStr   
1EAF   29 0D 0A 00            .CSTR   ")\r\n"   
1EB3   76                     HALT      
1EB4   00                     .CSTR      
1EB5                EXPECTM_0_2612S43:      
1EB5   E1                     POP   HL   
1EB6                          ;*Macro unroll:  test "2 1 >", TRUE
1EB6   31 80 41               LD   SP,STACK   
1EB9   CD 0F 0B               CALL   init   
1EBC   CD F8 3F               CALL   execStr   
1EBF   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1EC5                          ;*Macro unroll:  expect "2 1 >",TRUE
1EC5   E1                     POP   HL   
1EC6   E5                     PUSH   HL   
1EC7   11 FF FF               LD   DE,TRUE   
1ECA   B7                     OR   A   
1ECB   ED 52                  SBC   HL,DE   
1ECD   7D                     LD   A,L   
1ECE   B4                     OR   H   
1ECF   28 50                  JR   Z,expectM_0_2613S43   
1ED1   CD 08 0B               CALL   printStr   
1ED4   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1EE0   CD 08 0B               CALL   printStr   
1EE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EF2   21 FF FF               LD   HL,TRUE   
1EF5   CD 56 0A               CALL   prtdec   
1EF8   CD 08 0B               CALL   printStr   
1EFB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F08   E1                     POP   hl   
1F09   E5                     PUSH   hl   
1F0A   CD 56 0A               CALL   prtdec   
1F0D   E1                     POP   hl   
1F0E   CD 08 0B               CALL   printStr   
1F11   20 28 23 00            .CSTR   " (#"   
1F15   CD 9E 0A               CALL   prthex   
1F18   CD 08 0B               CALL   printStr   
1F1B   29 0D 0A 00            .CSTR   ")\r\n"   
1F1F   76                     HALT      
1F20   00                     .CSTR      
1F21                EXPECTM_0_2613S43:      
1F21   E1                     POP   HL   
1F22                          ;*Macro unroll:  test "3 3 >", FALSE
1F22   31 80 41               LD   SP,STACK   
1F25   CD 0F 0B               CALL   init   
1F28   CD F8 3F               CALL   execStr   
1F2B   33 20 33 20 3E 00      .CSTR   "3 3 >"   
1F31                          ;*Macro unroll:  expect "3 3 >",FALSE
1F31   E1                     POP   HL   
1F32   E5                     PUSH   HL   
1F33   11 00 00               LD   DE,FALSE   
1F36   B7                     OR   A   
1F37   ED 52                  SBC   HL,DE   
1F39   7D                     LD   A,L   
1F3A   B4                     OR   H   
1F3B   28 50                  JR   Z,expectM_0_2614S43   
1F3D   CD 08 0B               CALL   printStr   
1F40   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
1F4C   CD 08 0B               CALL   printStr   
1F4F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F5E   21 00 00               LD   HL,FALSE   
1F61   CD 56 0A               CALL   prtdec   
1F64   CD 08 0B               CALL   printStr   
1F67   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F74   E1                     POP   hl   
1F75   E5                     PUSH   hl   
1F76   CD 56 0A               CALL   prtdec   
1F79   E1                     POP   hl   
1F7A   CD 08 0B               CALL   printStr   
1F7D   20 28 23 00            .CSTR   " (#"   
1F81   CD 9E 0A               CALL   prthex   
1F84   CD 08 0B               CALL   printStr   
1F87   29 0D 0A 00            .CSTR   ")\r\n"   
1F8B   76                     HALT      
1F8C   00                     .CSTR      
1F8D                EXPECTM_0_2614S43:      
1F8D   E1                     POP   HL   
1F8E                          ;*Macro unroll:  test "4 3 >", TRUE
1F8E   31 80 41               LD   SP,STACK   
1F91   CD 0F 0B               CALL   init   
1F94   CD F8 3F               CALL   execStr   
1F97   34 20 33 20 3E 00      .CSTR   "4 3 >"   
1F9D                          ;*Macro unroll:  expect "4 3 >",TRUE
1F9D   E1                     POP   HL   
1F9E   E5                     PUSH   HL   
1F9F   11 FF FF               LD   DE,TRUE   
1FA2   B7                     OR   A   
1FA3   ED 52                  SBC   HL,DE   
1FA5   7D                     LD   A,L   
1FA6   B4                     OR   H   
1FA7   28 50                  JR   Z,expectM_0_2615S43   
1FA9   CD 08 0B               CALL   printStr   
1FAC   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
1FB8   CD 08 0B               CALL   printStr   
1FBB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FCA   21 FF FF               LD   HL,TRUE   
1FCD   CD 56 0A               CALL   prtdec   
1FD0   CD 08 0B               CALL   printStr   
1FD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FE0   E1                     POP   hl   
1FE1   E5                     PUSH   hl   
1FE2   CD 56 0A               CALL   prtdec   
1FE5   E1                     POP   hl   
1FE6   CD 08 0B               CALL   printStr   
1FE9   20 28 23 00            .CSTR   " (#"   
1FED   CD 9E 0A               CALL   prthex   
1FF0   CD 08 0B               CALL   printStr   
1FF3   29 0D 0A 00            .CSTR   ")\r\n"   
1FF7   76                     HALT      
1FF8   00                     .CSTR      
1FF9                EXPECTM_0_2615S43:      
1FF9   E1                     POP   HL   
1FFA                          ;*Macro unroll:  test "2 2 <=", TRUE
1FFA   31 80 41               LD   SP,STACK   
1FFD   CD 0F 0B               CALL   init   
2000   CD F8 3F               CALL   execStr   
2003   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
200A                          ;*Macro unroll:  expect "2 2 <=",TRUE
200A   E1                     POP   HL   
200B   E5                     PUSH   HL   
200C   11 FF FF               LD   DE,TRUE   
200F   B7                     OR   A   
2010   ED 52                  SBC   HL,DE   
2012   7D                     LD   A,L   
2013   B4                     OR   H   
2014   28 51                  JR   Z,expectM_0_2616S43   
2016   CD 08 0B               CALL   printStr   
2019   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2026   CD 08 0B               CALL   printStr   
2029   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2038   21 FF FF               LD   HL,TRUE   
203B   CD 56 0A               CALL   prtdec   
203E   CD 08 0B               CALL   printStr   
2041   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
204E   E1                     POP   hl   
204F   E5                     PUSH   hl   
2050   CD 56 0A               CALL   prtdec   
2053   E1                     POP   hl   
2054   CD 08 0B               CALL   printStr   
2057   20 28 23 00            .CSTR   " (#"   
205B   CD 9E 0A               CALL   prthex   
205E   CD 08 0B               CALL   printStr   
2061   29 0D 0A 00            .CSTR   ")\r\n"   
2065   76                     HALT      
2066   00                     .CSTR      
2067                EXPECTM_0_2616S43:      
2067   E1                     POP   HL   
2068                          ;*Macro unroll:  test "2 2 >=", TRUE
2068   31 80 41               LD   SP,STACK   
206B   CD 0F 0B               CALL   init   
206E   CD F8 3F               CALL   execStr   
2071   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2078                          ;*Macro unroll:  expect "2 2 >=",TRUE
2078   E1                     POP   HL   
2079   E5                     PUSH   HL   
207A   11 FF FF               LD   DE,TRUE   
207D   B7                     OR   A   
207E   ED 52                  SBC   HL,DE   
2080   7D                     LD   A,L   
2081   B4                     OR   H   
2082   28 51                  JR   Z,expectM_0_2617S43   
2084   CD 08 0B               CALL   printStr   
2087   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2094   CD 08 0B               CALL   printStr   
2097   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20A6   21 FF FF               LD   HL,TRUE   
20A9   CD 56 0A               CALL   prtdec   
20AC   CD 08 0B               CALL   printStr   
20AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20BC   E1                     POP   hl   
20BD   E5                     PUSH   hl   
20BE   CD 56 0A               CALL   prtdec   
20C1   E1                     POP   hl   
20C2   CD 08 0B               CALL   printStr   
20C5   20 28 23 00            .CSTR   " (#"   
20C9   CD 9E 0A               CALL   prthex   
20CC   CD 08 0B               CALL   printStr   
20CF   29 0D 0A 00            .CSTR   ")\r\n"   
20D3   76                     HALT      
20D4   00                     .CSTR      
20D5                EXPECTM_0_2617S43:      
20D5   E1                     POP   HL   
20D6                          ;*Macro unroll:  test "3 1 <<", 6
20D6   31 80 41               LD   SP,STACK   
20D9   CD 0F 0B               CALL   init   
20DC   CD F8 3F               CALL   execStr   
20DF   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
20E6                          ;*Macro unroll:  expect "3 1 <<",6
20E6   E1                     POP   HL   
20E7   E5                     PUSH   HL   
20E8   11 06 00               LD   DE,6   
20EB   B7                     OR   A   
20EC   ED 52                  SBC   HL,DE   
20EE   7D                     LD   A,L   
20EF   B4                     OR   H   
20F0   28 51                  JR   Z,expectM_0_2618S43   
20F2   CD 08 0B               CALL   printStr   
20F5   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2102   CD 08 0B               CALL   printStr   
2105   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2114   21 06 00               LD   HL,6   
2117   CD 56 0A               CALL   prtdec   
211A   CD 08 0B               CALL   printStr   
211D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
212A   E1                     POP   hl   
212B   E5                     PUSH   hl   
212C   CD 56 0A               CALL   prtdec   
212F   E1                     POP   hl   
2130   CD 08 0B               CALL   printStr   
2133   20 28 23 00            .CSTR   " (#"   
2137   CD 9E 0A               CALL   prthex   
213A   CD 08 0B               CALL   printStr   
213D   29 0D 0A 00            .CSTR   ")\r\n"   
2141   76                     HALT      
2142   00                     .CSTR      
2143                EXPECTM_0_2618S43:      
2143   E1                     POP   HL   
2144                          ;*Macro unroll:  test "10 1 >>", 5
2144   31 80 41               LD   SP,STACK   
2147   CD 0F 0B               CALL   init   
214A   CD F8 3F               CALL   execStr   
214D   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2155                          ;*Macro unroll:  expect "10 1 >>",5
2155   E1                     POP   HL   
2156   E5                     PUSH   HL   
2157   11 05 00               LD   DE,5   
215A   B7                     OR   A   
215B   ED 52                  SBC   HL,DE   
215D   7D                     LD   A,L   
215E   B4                     OR   H   
215F   28 52                  JR   Z,expectM_0_2619S43   
2161   CD 08 0B               CALL   printStr   
2164   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2172   CD 08 0B               CALL   printStr   
2175   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2184   21 05 00               LD   HL,5   
2187   CD 56 0A               CALL   prtdec   
218A   CD 08 0B               CALL   printStr   
218D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
219A   E1                     POP   hl   
219B   E5                     PUSH   hl   
219C   CD 56 0A               CALL   prtdec   
219F   E1                     POP   hl   
21A0   CD 08 0B               CALL   printStr   
21A3   20 28 23 00            .CSTR   " (#"   
21A7   CD 9E 0A               CALL   prthex   
21AA   CD 08 0B               CALL   printStr   
21AD   29 0D 0A 00            .CSTR   ")\r\n"   
21B1   76                     HALT      
21B2   00                     .CSTR      
21B3                EXPECTM_0_2619S43:      
21B3   E1                     POP   HL   
21B4                          ;*Macro unroll:  test "1 x = x", 1
21B4   31 80 41               LD   SP,STACK   
21B7   CD 0F 0B               CALL   init   
21BA   CD F8 3F               CALL   execStr   
21BD   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
21C5                          ;*Macro unroll:  expect "1 x = x",1
21C5   E1                     POP   HL   
21C6   E5                     PUSH   HL   
21C7   11 01 00               LD   DE,1   
21CA   B7                     OR   A   
21CB   ED 52                  SBC   HL,DE   
21CD   7D                     LD   A,L   
21CE   B4                     OR   H   
21CF   28 52                  JR   Z,expectM_0_2620S43   
21D1   CD 08 0B               CALL   printStr   
21D4   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
21E2   CD 08 0B               CALL   printStr   
21E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21F4   21 01 00               LD   HL,1   
21F7   CD 56 0A               CALL   prtdec   
21FA   CD 08 0B               CALL   printStr   
21FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
220A   E1                     POP   hl   
220B   E5                     PUSH   hl   
220C   CD 56 0A               CALL   prtdec   
220F   E1                     POP   hl   
2210   CD 08 0B               CALL   printStr   
2213   20 28 23 00            .CSTR   " (#"   
2217   CD 9E 0A               CALL   prthex   
221A   CD 08 0B               CALL   printStr   
221D   29 0D 0A 00            .CSTR   ")\r\n"   
2221   76                     HALT      
2222   00                     .CSTR      
2223                EXPECTM_0_2620S43:      
2223   E1                     POP   HL   
2224                          ;*Macro unroll:  test "1{}^", 1
2224   31 80 41               LD   SP,STACK   
2227   CD 0F 0B               CALL   init   
222A   CD F8 3F               CALL   execStr   
222D   31 7B 7D 5E 00         .CSTR   "1{}^"   
2232                          ;*Macro unroll:  expect "1{}^",1
2232   E1                     POP   HL   
2233   E5                     PUSH   HL   
2234   11 01 00               LD   DE,1   
2237   B7                     OR   A   
2238   ED 52                  SBC   HL,DE   
223A   7D                     LD   A,L   
223B   B4                     OR   H   
223C   28 4F                  JR   Z,expectM_0_2621S43   
223E   CD 08 0B               CALL   printStr   
2241   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
224C   CD 08 0B               CALL   printStr   
224F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
225E   21 01 00               LD   HL,1   
2261   CD 56 0A               CALL   prtdec   
2264   CD 08 0B               CALL   printStr   
2267   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2274   E1                     POP   hl   
2275   E5                     PUSH   hl   
2276   CD 56 0A               CALL   prtdec   
2279   E1                     POP   hl   
227A   CD 08 0B               CALL   printStr   
227D   20 28 23 00            .CSTR   " (#"   
2281   CD 9E 0A               CALL   prthex   
2284   CD 08 0B               CALL   printStr   
2287   29 0D 0A 00            .CSTR   ")\r\n"   
228B   76                     HALT      
228C   00                     .CSTR      
228D                EXPECTM_0_2621S43:      
228D   E1                     POP   HL   
228E                          ;*Macro unroll:  test "{1}^", 1
228E   31 80 41               LD   SP,STACK   
2291   CD 0F 0B               CALL   init   
2294   CD F8 3F               CALL   execStr   
2297   7B 31 7D 5E 00         .CSTR   "{1}^"   
229C                          ;*Macro unroll:  expect "{1}^",1
229C   E1                     POP   HL   
229D   E5                     PUSH   HL   
229E   11 01 00               LD   DE,1   
22A1   B7                     OR   A   
22A2   ED 52                  SBC   HL,DE   
22A4   7D                     LD   A,L   
22A5   B4                     OR   H   
22A6   28 4F                  JR   Z,expectM_0_2622S43   
22A8   CD 08 0B               CALL   printStr   
22AB   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
22B6   CD 08 0B               CALL   printStr   
22B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22C8   21 01 00               LD   HL,1   
22CB   CD 56 0A               CALL   prtdec   
22CE   CD 08 0B               CALL   printStr   
22D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22DE   E1                     POP   hl   
22DF   E5                     PUSH   hl   
22E0   CD 56 0A               CALL   prtdec   
22E3   E1                     POP   hl   
22E4   CD 08 0B               CALL   printStr   
22E7   20 28 23 00            .CSTR   " (#"   
22EB   CD 9E 0A               CALL   prthex   
22EE   CD 08 0B               CALL   printStr   
22F1   29 0D 0A 00            .CSTR   ")\r\n"   
22F5   76                     HALT      
22F6   00                     .CSTR      
22F7                EXPECTM_0_2622S43:      
22F7   E1                     POP   HL   
22F8                          ;*Macro unroll:  test "{{1}^}^", 1
22F8   31 80 41               LD   SP,STACK   
22FB   CD 0F 0B               CALL   init   
22FE   CD F8 3F               CALL   execStr   
2301   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
2309                          ;*Macro unroll:  expect "{{1}^}^",1
2309   E1                     POP   HL   
230A   E5                     PUSH   HL   
230B   11 01 00               LD   DE,1   
230E   B7                     OR   A   
230F   ED 52                  SBC   HL,DE   
2311   7D                     LD   A,L   
2312   B4                     OR   H   
2313   28 52                  JR   Z,expectM_0_2623S43   
2315   CD 08 0B               CALL   printStr   
2318   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2326   CD 08 0B               CALL   printStr   
2329   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2338   21 01 00               LD   HL,1   
233B   CD 56 0A               CALL   prtdec   
233E   CD 08 0B               CALL   printStr   
2341   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
234E   E1                     POP   hl   
234F   E5                     PUSH   hl   
2350   CD 56 0A               CALL   prtdec   
2353   E1                     POP   hl   
2354   CD 08 0B               CALL   printStr   
2357   20 28 23 00            .CSTR   " (#"   
235B   CD 9E 0A               CALL   prthex   
235E   CD 08 0B               CALL   printStr   
2361   29 0D 0A 00            .CSTR   ")\r\n"   
2365   76                     HALT      
2366   00                     .CSTR      
2367                EXPECTM_0_2623S43:      
2367   E1                     POP   HL   
2368                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2368   31 80 41               LD   SP,STACK   
236B   CD 0F 0B               CALL   init   
236E   CD F8 3F               CALL   execStr   
2371   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
237C                          ;*Macro unroll:  expect "{{{1}^}^}^",1
237C   E1                     POP   HL   
237D   E5                     PUSH   HL   
237E   11 01 00               LD   DE,1   
2381   B7                     OR   A   
2382   ED 52                  SBC   HL,DE   
2384   7D                     LD   A,L   
2385   B4                     OR   H   
2386   28 55                  JR   Z,expectM_0_2624S43   
2388   CD 08 0B               CALL   printStr   
238B   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
239C   CD 08 0B               CALL   printStr   
239F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23AE   21 01 00               LD   HL,1   
23B1   CD 56 0A               CALL   prtdec   
23B4   CD 08 0B               CALL   printStr   
23B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23C4   E1                     POP   hl   
23C5   E5                     PUSH   hl   
23C6   CD 56 0A               CALL   prtdec   
23C9   E1                     POP   hl   
23CA   CD 08 0B               CALL   printStr   
23CD   20 28 23 00            .CSTR   " (#"   
23D1   CD 9E 0A               CALL   prthex   
23D4   CD 08 0B               CALL   printStr   
23D7   29 0D 0A 00            .CSTR   ")\r\n"   
23DB   76                     HALT      
23DC   00                     .CSTR      
23DD                EXPECTM_0_2624S43:      
23DD   E1                     POP   HL   
23DE                          ;*Macro unroll:  test "5 /f{10} ?", 5
23DE   31 80 41               LD   SP,STACK   
23E1   CD 0F 0B               CALL   init   
23E4   CD F8 3F               CALL   execStr   
23E7   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
23F2                          ;*Macro unroll:  expect "5 /f{10} ?",5
23F2   E1                     POP   HL   
23F3   E5                     PUSH   HL   
23F4   11 05 00               LD   DE,5   
23F7   B7                     OR   A   
23F8   ED 52                  SBC   HL,DE   
23FA   7D                     LD   A,L   
23FB   B4                     OR   H   
23FC   28 55                  JR   Z,expectM_0_2625S43   
23FE   CD 08 0B               CALL   printStr   
2401   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2412   CD 08 0B               CALL   printStr   
2415   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2424   21 05 00               LD   HL,5   
2427   CD 56 0A               CALL   prtdec   
242A   CD 08 0B               CALL   printStr   
242D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
243A   E1                     POP   hl   
243B   E5                     PUSH   hl   
243C   CD 56 0A               CALL   prtdec   
243F   E1                     POP   hl   
2440   CD 08 0B               CALL   printStr   
2443   20 28 23 00            .CSTR   " (#"   
2447   CD 9E 0A               CALL   prthex   
244A   CD 08 0B               CALL   printStr   
244D   29 0D 0A 00            .CSTR   ")\r\n"   
2451   76                     HALT      
2452   00                     .CSTR      
2453                EXPECTM_0_2625S43:      
2453   E1                     POP   HL   
2454                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2454   31 80 41               LD   SP,STACK   
2457   CD 0F 0B               CALL   init   
245A   CD F8 3F               CALL   execStr   
245D   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
246A                          ;*Macro unroll:  expect "5 /t{10} ? +",15
246A   E1                     POP   HL   
246B   E5                     PUSH   HL   
246C   11 0F 00               LD   DE,15   
246F   B7                     OR   A   
2470   ED 52                  SBC   HL,DE   
2472   7D                     LD   A,L   
2473   B4                     OR   H   
2474   28 57                  JR   Z,expectM_0_2626S43   
2476   CD 08 0B               CALL   printStr   
2479   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
248C   CD 08 0B               CALL   printStr   
248F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
249E   21 0F 00               LD   HL,15   
24A1   CD 56 0A               CALL   prtdec   
24A4   CD 08 0B               CALL   printStr   
24A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24B4   E1                     POP   hl   
24B5   E5                     PUSH   hl   
24B6   CD 56 0A               CALL   prtdec   
24B9   E1                     POP   hl   
24BA   CD 08 0B               CALL   printStr   
24BD   20 28 23 00            .CSTR   " (#"   
24C1   CD 9E 0A               CALL   prthex   
24C4   CD 08 0B               CALL   printStr   
24C7   29 0D 0A 00            .CSTR   ")\r\n"   
24CB   76                     HALT      
24CC   00                     .CSTR      
24CD                EXPECTM_0_2626S43:      
24CD   E1                     POP   HL   
24CE                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
24CE   31 80 41               LD   SP,STACK   
24D1   CD 0F 0B               CALL   init   
24D4   CD F8 3F               CALL   execStr   
24D7   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
24E9                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
24E9   E1                     POP   HL   
24EA   E5                     PUSH   HL   
24EB   11 15 00               LD   DE,21   
24EE   B7                     OR   A   
24EF   ED 52                  SBC   HL,DE   
24F1   7D                     LD   A,L   
24F2   B4                     OR   H   
24F3   28 5C                  JR   Z,expectM_0_2627S43   
24F5   CD 08 0B               CALL   printStr   
24F8   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2510   CD 08 0B               CALL   printStr   
2513   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2522   21 15 00               LD   HL,21   
2525   CD 56 0A               CALL   prtdec   
2528   CD 08 0B               CALL   printStr   
252B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2538   E1                     POP   hl   
2539   E5                     PUSH   hl   
253A   CD 56 0A               CALL   prtdec   
253D   E1                     POP   hl   
253E   CD 08 0B               CALL   printStr   
2541   20 28 23 00            .CSTR   " (#"   
2545   CD 9E 0A               CALL   prthex   
2548   CD 08 0B               CALL   printStr   
254B   29 0D 0A 00            .CSTR   ")\r\n"   
254F   76                     HALT      
2550   00                     .CSTR      
2551                EXPECTM_0_2627S43:      
2551   E1                     POP   HL   
2552                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2552   31 80 41               LD   SP,STACK   
2555   CD 0F 0B               CALL   init   
2558   CD F8 3F               CALL   execStr   
255B   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
256D                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
256D   E1                     POP   HL   
256E   E5                     PUSH   HL   
256F   11 0B 00               LD   DE,11   
2572   B7                     OR   A   
2573   ED 52                  SBC   HL,DE   
2575   7D                     LD   A,L   
2576   B4                     OR   H   
2577   28 5C                  JR   Z,expectM_0_2628S43   
2579   CD 08 0B               CALL   printStr   
257C   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2594   CD 08 0B               CALL   printStr   
2597   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25A6   21 0B 00               LD   HL,11   
25A9   CD 56 0A               CALL   prtdec   
25AC   CD 08 0B               CALL   printStr   
25AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25BC   E1                     POP   hl   
25BD   E5                     PUSH   hl   
25BE   CD 56 0A               CALL   prtdec   
25C1   E1                     POP   hl   
25C2   CD 08 0B               CALL   printStr   
25C5   20 28 23 00            .CSTR   " (#"   
25C9   CD 9E 0A               CALL   prthex   
25CC   CD 08 0B               CALL   printStr   
25CF   29 0D 0A 00            .CSTR   ")\r\n"   
25D3   76                     HALT      
25D4   00                     .CSTR      
25D5                EXPECTM_0_2628S43:      
25D5   E1                     POP   HL   
25D6                          ;*Macro unroll:  test ": -2%", $0000
25D6   31 80 41               LD   SP,STACK   
25D9   CD 0F 0B               CALL   init   
25DC   CD F8 3F               CALL   execStr   
25DF   3A 20 2D 32 25 00      .CSTR   ": -2%"   
25E5                          ;*Macro unroll:  expect ": -2%",$0000
25E5   E1                     POP   HL   
25E6   E5                     PUSH   HL   
25E7   11 00 00               LD   DE,$0000   
25EA   B7                     OR   A   
25EB   ED 52                  SBC   HL,DE   
25ED   7D                     LD   A,L   
25EE   B4                     OR   H   
25EF   28 50                  JR   Z,expectM_0_2629S43   
25F1   CD 08 0B               CALL   printStr   
25F4   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
2600   CD 08 0B               CALL   printStr   
2603   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2612   21 00 00               LD   HL,$0000   
2615   CD 56 0A               CALL   prtdec   
2618   CD 08 0B               CALL   printStr   
261B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2628   E1                     POP   hl   
2629   E5                     PUSH   hl   
262A   CD 56 0A               CALL   prtdec   
262D   E1                     POP   hl   
262E   CD 08 0B               CALL   printStr   
2631   20 28 23 00            .CSTR   " (#"   
2635   CD 9E 0A               CALL   prthex   
2638   CD 08 0B               CALL   printStr   
263B   29 0D 0A 00            .CSTR   ")\r\n"   
263F   76                     HALT      
2640   00                     .CSTR      
2641                EXPECTM_0_2629S43:      
2641   E1                     POP   HL   
2642                          ;*Macro unroll:  test ":a -1%", $0001
2642   31 80 41               LD   SP,STACK   
2645   CD 0F 0B               CALL   init   
2648   CD F8 3F               CALL   execStr   
264B   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
2652                          ;*Macro unroll:  expect ":a -1%",$0001
2652   E1                     POP   HL   
2653   E5                     PUSH   HL   
2654   11 01 00               LD   DE,$0001   
2657   B7                     OR   A   
2658   ED 52                  SBC   HL,DE   
265A   7D                     LD   A,L   
265B   B4                     OR   H   
265C   28 51                  JR   Z,expectM_0_2630S43   
265E   CD 08 0B               CALL   printStr   
2661   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
266E   CD 08 0B               CALL   printStr   
2671   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2680   21 01 00               LD   HL,$0001   
2683   CD 56 0A               CALL   prtdec   
2686   CD 08 0B               CALL   printStr   
2689   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2696   E1                     POP   hl   
2697   E5                     PUSH   hl   
2698   CD 56 0A               CALL   prtdec   
269B   E1                     POP   hl   
269C   CD 08 0B               CALL   printStr   
269F   20 28 23 00            .CSTR   " (#"   
26A3   CD 9E 0A               CALL   prthex   
26A6   CD 08 0B               CALL   printStr   
26A9   29 0D 0A 00            .CSTR   ")\r\n"   
26AD   76                     HALT      
26AE   00                     .CSTR      
26AF                EXPECTM_0_2630S43:      
26AF   E1                     POP   HL   
26B0                          ;*Macro unroll:  test ":a: -1%", $0001
26B0   31 80 41               LD   SP,STACK   
26B3   CD 0F 0B               CALL   init   
26B6   CD F8 3F               CALL   execStr   
26B9   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
26C1                          ;*Macro unroll:  expect ":a: -1%",$0001
26C1   E1                     POP   HL   
26C2   E5                     PUSH   HL   
26C3   11 01 00               LD   DE,$0001   
26C6   B7                     OR   A   
26C7   ED 52                  SBC   HL,DE   
26C9   7D                     LD   A,L   
26CA   B4                     OR   H   
26CB   28 52                  JR   Z,expectM_0_2631S43   
26CD   CD 08 0B               CALL   printStr   
26D0   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
26DE   CD 08 0B               CALL   printStr   
26E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26F0   21 01 00               LD   HL,$0001   
26F3   CD 56 0A               CALL   prtdec   
26F6   CD 08 0B               CALL   printStr   
26F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2706   E1                     POP   hl   
2707   E5                     PUSH   hl   
2708   CD 56 0A               CALL   prtdec   
270B   E1                     POP   hl   
270C   CD 08 0B               CALL   printStr   
270F   20 28 23 00            .CSTR   " (#"   
2713   CD 9E 0A               CALL   prthex   
2716   CD 08 0B               CALL   printStr   
2719   29 0D 0A 00            .CSTR   ")\r\n"   
271D   76                     HALT      
271E   00                     .CSTR      
271F                EXPECTM_0_2631S43:      
271F   E1                     POP   HL   
2720                          ;*Macro unroll:  test ":a:b -1%", $0102
2720   31 80 41               LD   SP,STACK   
2723   CD 0F 0B               CALL   init   
2726   CD F8 3F               CALL   execStr   
2729   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
2732                          ;*Macro unroll:  expect ":a:b -1%",$0102
2732   E1                     POP   HL   
2733   E5                     PUSH   HL   
2734   11 02 01               LD   DE,$0102   
2737   B7                     OR   A   
2738   ED 52                  SBC   HL,DE   
273A   7D                     LD   A,L   
273B   B4                     OR   H   
273C   28 53                  JR   Z,expectM_0_2632S43   
273E   CD 08 0B               CALL   printStr   
2741   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
2750   CD 08 0B               CALL   printStr   
2753   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2762   21 02 01               LD   HL,$0102   
2765   CD 56 0A               CALL   prtdec   
2768   CD 08 0B               CALL   printStr   
276B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2778   E1                     POP   hl   
2779   E5                     PUSH   hl   
277A   CD 56 0A               CALL   prtdec   
277D   E1                     POP   hl   
277E   CD 08 0B               CALL   printStr   
2781   20 28 23 00            .CSTR   " (#"   
2785   CD 9E 0A               CALL   prthex   
2788   CD 08 0B               CALL   printStr   
278B   29 0D 0A 00            .CSTR   ")\r\n"   
278F   76                     HALT      
2790   00                     .CSTR      
2791                EXPECTM_0_2632S43:      
2791   E1                     POP   HL   
2792                          ;*Macro unroll:  test "::b -1%", $0101
2792   31 80 41               LD   SP,STACK   
2795   CD 0F 0B               CALL   init   
2798   CD F8 3F               CALL   execStr   
279B   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
27A3                          ;*Macro unroll:  expect "::b -1%",$0101
27A3   E1                     POP   HL   
27A4   E5                     PUSH   HL   
27A5   11 01 01               LD   DE,$0101   
27A8   B7                     OR   A   
27A9   ED 52                  SBC   HL,DE   
27AB   7D                     LD   A,L   
27AC   B4                     OR   H   
27AD   28 52                  JR   Z,expectM_0_2633S43   
27AF   CD 08 0B               CALL   printStr   
27B2   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
27C0   CD 08 0B               CALL   printStr   
27C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27D2   21 01 01               LD   HL,$0101   
27D5   CD 56 0A               CALL   prtdec   
27D8   CD 08 0B               CALL   printStr   
27DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27E8   E1                     POP   hl   
27E9   E5                     PUSH   hl   
27EA   CD 56 0A               CALL   prtdec   
27ED   E1                     POP   hl   
27EE   CD 08 0B               CALL   printStr   
27F1   20 28 23 00            .CSTR   " (#"   
27F5   CD 9E 0A               CALL   prthex   
27F8   CD 08 0B               CALL   printStr   
27FB   29 0D 0A 00            .CSTR   ")\r\n"   
27FF   76                     HALT      
2800   00                     .CSTR      
2801                EXPECTM_0_2633S43:      
2801   E1                     POP   HL   
2802                          ;*Macro unroll:  test ":{2};^", 2
2802   31 80 41               LD   SP,STACK   
2805   CD 0F 0B               CALL   init   
2808   CD F8 3F               CALL   execStr   
280B   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
2812                          ;*Macro unroll:  expect ":{2};^",2
2812   E1                     POP   HL   
2813   E5                     PUSH   HL   
2814   11 02 00               LD   DE,2   
2817   B7                     OR   A   
2818   ED 52                  SBC   HL,DE   
281A   7D                     LD   A,L   
281B   B4                     OR   H   
281C   28 51                  JR   Z,expectM_0_2634S43   
281E   CD 08 0B               CALL   printStr   
2821   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
282E   CD 08 0B               CALL   printStr   
2831   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2840   21 02 00               LD   HL,2   
2843   CD 56 0A               CALL   prtdec   
2846   CD 08 0B               CALL   printStr   
2849   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2856   E1                     POP   hl   
2857   E5                     PUSH   hl   
2858   CD 56 0A               CALL   prtdec   
285B   E1                     POP   hl   
285C   CD 08 0B               CALL   printStr   
285F   20 28 23 00            .CSTR   " (#"   
2863   CD 9E 0A               CALL   prthex   
2866   CD 08 0B               CALL   printStr   
2869   29 0D 0A 00            .CSTR   ")\r\n"   
286D   76                     HALT      
286E   00                     .CSTR      
286F                EXPECTM_0_2634S43:      
286F   E1                     POP   HL   
2870                          ;*Macro unroll:  test ":a{2};^", 2
2870   31 80 41               LD   SP,STACK   
2873   CD 0F 0B               CALL   init   
2876   CD F8 3F               CALL   execStr   
2879   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2881                          ;*Macro unroll:  expect ":a{2};^",2
2881   E1                     POP   HL   
2882   E5                     PUSH   HL   
2883   11 02 00               LD   DE,2   
2886   B7                     OR   A   
2887   ED 52                  SBC   HL,DE   
2889   7D                     LD   A,L   
288A   B4                     OR   H   
288B   28 52                  JR   Z,expectM_0_2635S43   
288D   CD 08 0B               CALL   printStr   
2890   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
289E   CD 08 0B               CALL   printStr   
28A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28B0   21 02 00               LD   HL,2   
28B3   CD 56 0A               CALL   prtdec   
28B6   CD 08 0B               CALL   printStr   
28B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28C6   E1                     POP   hl   
28C7   E5                     PUSH   hl   
28C8   CD 56 0A               CALL   prtdec   
28CB   E1                     POP   hl   
28CC   CD 08 0B               CALL   printStr   
28CF   20 28 23 00            .CSTR   " (#"   
28D3   CD 9E 0A               CALL   prthex   
28D6   CD 08 0B               CALL   printStr   
28D9   29 0D 0A 00            .CSTR   ")\r\n"   
28DD   76                     HALT      
28DE   00                     .CSTR      
28DF                EXPECTM_0_2635S43:      
28DF   E1                     POP   HL   
28E0                          ;*Macro unroll:  test "5 :a{$a};^", 5
28E0   31 80 41               LD   SP,STACK   
28E3   CD 0F 0B               CALL   init   
28E6   CD F8 3F               CALL   execStr   
28E9   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
28F4                          ;*Macro unroll:  expect "5 :a{$a};^",5
28F4   E1                     POP   HL   
28F5   E5                     PUSH   HL   
28F6   11 05 00               LD   DE,5   
28F9   B7                     OR   A   
28FA   ED 52                  SBC   HL,DE   
28FC   7D                     LD   A,L   
28FD   B4                     OR   H   
28FE   28 55                  JR   Z,expectM_0_2636S43   
2900   CD 08 0B               CALL   printStr   
2903   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2914   CD 08 0B               CALL   printStr   
2917   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2926   21 05 00               LD   HL,5   
2929   CD 56 0A               CALL   prtdec   
292C   CD 08 0B               CALL   printStr   
292F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
293C   E1                     POP   hl   
293D   E5                     PUSH   hl   
293E   CD 56 0A               CALL   prtdec   
2941   E1                     POP   hl   
2942   CD 08 0B               CALL   printStr   
2945   20 28 23 00            .CSTR   " (#"   
2949   CD 9E 0A               CALL   prthex   
294C   CD 08 0B               CALL   printStr   
294F   29 0D 0A 00            .CSTR   ")\r\n"   
2953   76                     HALT      
2954   00                     .CSTR      
2955                EXPECTM_0_2636S43:      
2955   E1                     POP   HL   
2956                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2956   31 80 41               LD   SP,STACK   
2959   CD 0F 0B               CALL   init   
295C   CD F8 3F               CALL   execStr   
295F   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
296C                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
296C   E1                     POP   HL   
296D   E5                     PUSH   HL   
296E   11 05 00               LD   DE,5   
2971   B7                     OR   A   
2972   ED 52                  SBC   HL,DE   
2974   7D                     LD   A,L   
2975   B4                     OR   H   
2976   28 57                  JR   Z,expectM_0_2637S43   
2978   CD 08 0B               CALL   printStr   
297B   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
298E   CD 08 0B               CALL   printStr   
2991   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29A0   21 05 00               LD   HL,5   
29A3   CD 56 0A               CALL   prtdec   
29A6   CD 08 0B               CALL   printStr   
29A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29B6   E1                     POP   hl   
29B7   E5                     PUSH   hl   
29B8   CD 56 0A               CALL   prtdec   
29BB   E1                     POP   hl   
29BC   CD 08 0B               CALL   printStr   
29BF   20 28 23 00            .CSTR   " (#"   
29C3   CD 9E 0A               CALL   prthex   
29C6   CD 08 0B               CALL   printStr   
29C9   29 0D 0A 00            .CSTR   ")\r\n"   
29CD   76                     HALT      
29CE   00                     .CSTR      
29CF                EXPECTM_0_2637S43:      
29CF   E1                     POP   HL   
29D0                          ;*Macro unroll:  test ":a{{2}^};^", 2
29D0   31 80 41               LD   SP,STACK   
29D3   CD 0F 0B               CALL   init   
29D6   CD F8 3F               CALL   execStr   
29D9   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
29E4                          ;*Macro unroll:  expect ":a{{2}^};^",2
29E4   E1                     POP   HL   
29E5   E5                     PUSH   HL   
29E6   11 02 00               LD   DE,2   
29E9   B7                     OR   A   
29EA   ED 52                  SBC   HL,DE   
29EC   7D                     LD   A,L   
29ED   B4                     OR   H   
29EE   28 55                  JR   Z,expectM_0_2638S43   
29F0   CD 08 0B               CALL   printStr   
29F3   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2A04   CD 08 0B               CALL   printStr   
2A07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A16   21 02 00               LD   HL,2   
2A19   CD 56 0A               CALL   prtdec   
2A1C   CD 08 0B               CALL   printStr   
2A1F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A2C   E1                     POP   hl   
2A2D   E5                     PUSH   hl   
2A2E   CD 56 0A               CALL   prtdec   
2A31   E1                     POP   hl   
2A32   CD 08 0B               CALL   printStr   
2A35   20 28 23 00            .CSTR   " (#"   
2A39   CD 9E 0A               CALL   prthex   
2A3C   CD 08 0B               CALL   printStr   
2A3F   29 0D 0A 00            .CSTR   ")\r\n"   
2A43   76                     HALT      
2A44   00                     .CSTR      
2A45                EXPECTM_0_2638S43:      
2A45   E1                     POP   HL   
2A46                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2A46   31 80 41               LD   SP,STACK   
2A49   CD 0F 0B               CALL   init   
2A4C   CD F8 3F               CALL   execStr   
2A4F   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2A5F                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2A5F   E1                     POP   HL   
2A60   E5                     PUSH   HL   
2A61   11 05 00               LD   DE,5   
2A64   B7                     OR   A   
2A65   ED 52                  SBC   HL,DE   
2A67   7D                     LD   A,L   
2A68   B4                     OR   H   
2A69   28 5A                  JR   Z,expectM_0_2639S43   
2A6B   CD 08 0B               CALL   printStr   
2A6E   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2A84   CD 08 0B               CALL   printStr   
2A87   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A96   21 05 00               LD   HL,5   
2A99   CD 56 0A               CALL   prtdec   
2A9C   CD 08 0B               CALL   printStr   
2A9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AAC   E1                     POP   hl   
2AAD   E5                     PUSH   hl   
2AAE   CD 56 0A               CALL   prtdec   
2AB1   E1                     POP   hl   
2AB2   CD 08 0B               CALL   printStr   
2AB5   20 28 23 00            .CSTR   " (#"   
2AB9   CD 9E 0A               CALL   prthex   
2ABC   CD 08 0B               CALL   printStr   
2ABF   29 0D 0A 00            .CSTR   ")\r\n"   
2AC3   76                     HALT      
2AC4   00                     .CSTR      
2AC5                EXPECTM_0_2639S43:      
2AC5   E1                     POP   HL   
2AC6                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2AC6   31 80 41               LD   SP,STACK   
2AC9   CD 0F 0B               CALL   init   
2ACC   CD F8 3F               CALL   execStr   
2ACF   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2AE0                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2AE0   E1                     POP   HL   
2AE1   E5                     PUSH   HL   
2AE2   11 01 00               LD   DE,1   
2AE5   B7                     OR   A   
2AE6   ED 52                  SBC   HL,DE   
2AE8   7D                     LD   A,L   
2AE9   B4                     OR   H   
2AEA   28 5B                  JR   Z,expectM_0_2640S43   
2AEC   CD 08 0B               CALL   printStr   
2AEF   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2B06   CD 08 0B               CALL   printStr   
2B09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B18   21 01 00               LD   HL,1   
2B1B   CD 56 0A               CALL   prtdec   
2B1E   CD 08 0B               CALL   printStr   
2B21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B2E   E1                     POP   hl   
2B2F   E5                     PUSH   hl   
2B30   CD 56 0A               CALL   prtdec   
2B33   E1                     POP   hl   
2B34   CD 08 0B               CALL   printStr   
2B37   20 28 23 00            .CSTR   " (#"   
2B3B   CD 9E 0A               CALL   prthex   
2B3E   CD 08 0B               CALL   printStr   
2B41   29 0D 0A 00            .CSTR   ")\r\n"   
2B45   76                     HALT      
2B46   00                     .CSTR      
2B47                EXPECTM_0_2640S43:      
2B47   E1                     POP   HL   
2B48                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2B48   31 80 41               LD   SP,STACK   
2B4B   CD 0F 0B               CALL   init   
2B4E   CD F8 3F               CALL   execStr   
2B51   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
2B65                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
2B65   E1                     POP   HL   
2B66   E5                     PUSH   HL   
2B67   11 07 00               LD   DE,7   
2B6A   B7                     OR   A   
2B6B   ED 52                  SBC   HL,DE   
2B6D   7D                     LD   A,L   
2B6E   B4                     OR   H   
2B6F   28 5E                  JR   Z,expectM_0_2641S43   
2B71   CD 08 0B               CALL   printStr   
2B74   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
2B8E   CD 08 0B               CALL   printStr   
2B91   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BA0   21 07 00               LD   HL,7   
2BA3   CD 56 0A               CALL   prtdec   
2BA6   CD 08 0B               CALL   printStr   
2BA9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BB6   E1                     POP   hl   
2BB7   E5                     PUSH   hl   
2BB8   CD 56 0A               CALL   prtdec   
2BBB   E1                     POP   hl   
2BBC   CD 08 0B               CALL   printStr   
2BBF   20 28 23 00            .CSTR   " (#"   
2BC3   CD 9E 0A               CALL   prthex   
2BC6   CD 08 0B               CALL   printStr   
2BC9   29 0D 0A 00            .CSTR   ")\r\n"   
2BCD   76                     HALT      
2BCE   00                     .CSTR      
2BCF                EXPECTM_0_2641S43:      
2BCF   E1                     POP   HL   
2BD0                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
2BD0   31 80 41               LD   SP,STACK   
2BD3   CD 0F 0B               CALL   init   
2BD6   CD F8 3F               CALL   execStr   
2BD9   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
2BEF                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
2BEF   E1                     POP   HL   
2BF0   E5                     PUSH   HL   
2BF1   11 06 00               LD   DE,6   
2BF4   B7                     OR   A   
2BF5   ED 52                  SBC   HL,DE   
2BF7   7D                     LD   A,L   
2BF8   B4                     OR   H   
2BF9   28 60                  JR   Z,expectM_0_2642S43   
2BFB   CD 08 0B               CALL   printStr   
2BFE   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
2C1A   CD 08 0B               CALL   printStr   
2C1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C2C   21 06 00               LD   HL,6   
2C2F   CD 56 0A               CALL   prtdec   
2C32   CD 08 0B               CALL   printStr   
2C35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C42   E1                     POP   hl   
2C43   E5                     PUSH   hl   
2C44   CD 56 0A               CALL   prtdec   
2C47   E1                     POP   hl   
2C48   CD 08 0B               CALL   printStr   
2C4B   20 28 23 00            .CSTR   " (#"   
2C4F   CD 9E 0A               CALL   prthex   
2C52   CD 08 0B               CALL   printStr   
2C55   29 0D 0A 00            .CSTR   ")\r\n"   
2C59   76                     HALT      
2C5A   00                     .CSTR      
2C5B                EXPECTM_0_2642S43:      
2C5B   E1                     POP   HL   
2C5C                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
2C5C   31 80 41               LD   SP,STACK   
2C5F   CD 0F 0B               CALL   init   
2C62   CD F8 3F               CALL   execStr   
2C65   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
2C74                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
2C74   E1                     POP   HL   
2C75   E5                     PUSH   HL   
2C76   11 02 00               LD   DE,2   
2C79   B7                     OR   A   
2C7A   ED 52                  SBC   HL,DE   
2C7C   7D                     LD   A,L   
2C7D   B4                     OR   H   
2C7E   28 59                  JR   Z,expectM_0_2643S43   
2C80   CD 08 0B               CALL   printStr   
2C83   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
2C98   CD 08 0B               CALL   printStr   
2C9B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CAA   21 02 00               LD   HL,2   
2CAD   CD 56 0A               CALL   prtdec   
2CB0   CD 08 0B               CALL   printStr   
2CB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CC0   E1                     POP   hl   
2CC1   E5                     PUSH   hl   
2CC2   CD 56 0A               CALL   prtdec   
2CC5   E1                     POP   hl   
2CC6   CD 08 0B               CALL   printStr   
2CC9   20 28 23 00            .CSTR   " (#"   
2CCD   CD 9E 0A               CALL   prthex   
2CD0   CD 08 0B               CALL   printStr   
2CD3   29 0D 0A 00            .CSTR   ")\r\n"   
2CD7   76                     HALT      
2CD8   00                     .CSTR      
2CD9                EXPECTM_0_2643S43:      
2CD9   E1                     POP   HL   
2CDA                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
2CDA   31 80 41               LD   SP,STACK   
2CDD   CD 0F 0B               CALL   init   
2CE0   CD F8 3F               CALL   execStr   
2CE3   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
2CF5                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
2CF5   E1                     POP   HL   
2CF6   E5                     PUSH   HL   
2CF7   11 01 00               LD   DE,1   
2CFA   B7                     OR   A   
2CFB   ED 52                  SBC   HL,DE   
2CFD   7D                     LD   A,L   
2CFE   B4                     OR   H   
2CFF   28 5C                  JR   Z,expectM_0_2644S43   
2D01   CD 08 0B               CALL   printStr   
2D04   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
2D1C   CD 08 0B               CALL   printStr   
2D1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D2E   21 01 00               LD   HL,1   
2D31   CD 56 0A               CALL   prtdec   
2D34   CD 08 0B               CALL   printStr   
2D37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D44   E1                     POP   hl   
2D45   E5                     PUSH   hl   
2D46   CD 56 0A               CALL   prtdec   
2D49   E1                     POP   hl   
2D4A   CD 08 0B               CALL   printStr   
2D4D   20 28 23 00            .CSTR   " (#"   
2D51   CD 9E 0A               CALL   prthex   
2D54   CD 08 0B               CALL   printStr   
2D57   29 0D 0A 00            .CSTR   ")\r\n"   
2D5B   76                     HALT      
2D5C   00                     .CSTR      
2D5D                EXPECTM_0_2644S43:      
2D5D   E1                     POP   HL   
2D5E                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
2D5E   31 80 41               LD   SP,STACK   
2D61   CD 0F 0B               CALL   init   
2D64   CD F8 3F               CALL   execStr   
2D67   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
2D7A                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
2D7A   E1                     POP   HL   
2D7B   E5                     PUSH   HL   
2D7C   11 02 00               LD   DE,2   
2D7F   B7                     OR   A   
2D80   ED 52                  SBC   HL,DE   
2D82   7D                     LD   A,L   
2D83   B4                     OR   H   
2D84   28 5D                  JR   Z,expectM_0_2645S43   
2D86   CD 08 0B               CALL   printStr   
2D89   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
2DA2   CD 08 0B               CALL   printStr   
2DA5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DB4   21 02 00               LD   HL,2   
2DB7   CD 56 0A               CALL   prtdec   
2DBA   CD 08 0B               CALL   printStr   
2DBD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DCA   E1                     POP   hl   
2DCB   E5                     PUSH   hl   
2DCC   CD 56 0A               CALL   prtdec   
2DCF   E1                     POP   hl   
2DD0   CD 08 0B               CALL   printStr   
2DD3   20 28 23 00            .CSTR   " (#"   
2DD7   CD 9E 0A               CALL   prthex   
2DDA   CD 08 0B               CALL   printStr   
2DDD   29 0D 0A 00            .CSTR   ")\r\n"   
2DE1   76                     HALT      
2DE2   00                     .CSTR      
2DE3                EXPECTM_0_2645S43:      
2DE3   E1                     POP   HL   
2DE4                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
2DE4   31 80 41               LD   SP,STACK   
2DE7   CD 0F 0B               CALL   init   
2DEA   CD F8 3F               CALL   execStr   
2DED   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
2E01                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
2E01   E1                     POP   HL   
2E02   E5                     PUSH   HL   
2E03   11 02 00               LD   DE,2   
2E06   B7                     OR   A   
2E07   ED 52                  SBC   HL,DE   
2E09   7D                     LD   A,L   
2E0A   B4                     OR   H   
2E0B   28 5E                  JR   Z,expectM_0_2646S43   
2E0D   CD 08 0B               CALL   printStr   
2E10   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
2E2A   CD 08 0B               CALL   printStr   
2E2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E3C   21 02 00               LD   HL,2   
2E3F   CD 56 0A               CALL   prtdec   
2E42   CD 08 0B               CALL   printStr   
2E45   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E52   E1                     POP   hl   
2E53   E5                     PUSH   hl   
2E54   CD 56 0A               CALL   prtdec   
2E57   E1                     POP   hl   
2E58   CD 08 0B               CALL   printStr   
2E5B   20 28 23 00            .CSTR   " (#"   
2E5F   CD 9E 0A               CALL   prthex   
2E62   CD 08 0B               CALL   printStr   
2E65   29 0D 0A 00            .CSTR   ")\r\n"   
2E69   76                     HALT      
2E6A   00                     .CSTR      
2E6B                EXPECTM_0_2646S43:      
2E6B   E1                     POP   HL   
2E6C                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
2E6C   31 80 41               LD   SP,STACK   
2E6F   CD 0F 0B               CALL   init   
2E72   CD F8 3F               CALL   execStr   
2E75   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
2E88                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
2E88   E1                     POP   HL   
2E89   E5                     PUSH   HL   
2E8A   11 02 00               LD   DE,2   
2E8D   B7                     OR   A   
2E8E   ED 52                  SBC   HL,DE   
2E90   7D                     LD   A,L   
2E91   B4                     OR   H   
2E92   28 5D                  JR   Z,expectM_0_2647S43   
2E94   CD 08 0B               CALL   printStr   
2E97   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
2EB0   CD 08 0B               CALL   printStr   
2EB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EC2   21 02 00               LD   HL,2   
2EC5   CD 56 0A               CALL   prtdec   
2EC8   CD 08 0B               CALL   printStr   
2ECB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ED8   E1                     POP   hl   
2ED9   E5                     PUSH   hl   
2EDA   CD 56 0A               CALL   prtdec   
2EDD   E1                     POP   hl   
2EDE   CD 08 0B               CALL   printStr   
2EE1   20 28 23 00            .CSTR   " (#"   
2EE5   CD 9E 0A               CALL   prthex   
2EE8   CD 08 0B               CALL   printStr   
2EEB   29 0D 0A 00            .CSTR   ")\r\n"   
2EEF   76                     HALT      
2EF0   00                     .CSTR      
2EF1                EXPECTM_0_2647S43:      
2EF1   E1                     POP   HL   
2EF2                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
2EF2   31 80 41               LD   SP,STACK   
2EF5   CD 0F 0B               CALL   init   
2EF8   CD F8 3F               CALL   execStr   
2EFB   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
2F15                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
2F15   E1                     POP   HL   
2F16   E5                     PUSH   HL   
2F17   11 05 00               LD   DE,5   
2F1A   B7                     OR   A   
2F1B   ED 52                  SBC   HL,DE   
2F1D   7D                     LD   A,L   
2F1E   B4                     OR   H   
2F1F   28 64                  JR   Z,expectM_0_2648S43   
2F21   CD 08 0B               CALL   printStr   
2F24   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
2F44   CD 08 0B               CALL   printStr   
2F47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F56   21 05 00               LD   HL,5   
2F59   CD 56 0A               CALL   prtdec   
2F5C   CD 08 0B               CALL   printStr   
2F5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F6C   E1                     POP   hl   
2F6D   E5                     PUSH   hl   
2F6E   CD 56 0A               CALL   prtdec   
2F71   E1                     POP   hl   
2F72   CD 08 0B               CALL   printStr   
2F75   20 28 23 00            .CSTR   " (#"   
2F79   CD 9E 0A               CALL   prthex   
2F7C   CD 08 0B               CALL   printStr   
2F7F   29 0D 0A 00            .CSTR   ")\r\n"   
2F83   76                     HALT      
2F84   00                     .CSTR      
2F85                EXPECTM_0_2648S43:      
2F85   E1                     POP   HL   
2F86                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
2F86   31 80 41               LD   SP,STACK   
2F89   CD 0F 0B               CALL   init   
2F8C   CD F8 3F               CALL   execStr   
2F8F   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
2FA0                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
2FA0   E1                     POP   HL   
2FA1   E5                     PUSH   HL   
2FA2   11 02 00               LD   DE,2   
2FA5   B7                     OR   A   
2FA6   ED 52                  SBC   HL,DE   
2FA8   7D                     LD   A,L   
2FA9   B4                     OR   H   
2FAA   28 5B                  JR   Z,expectM_0_2649S43   
2FAC   CD 08 0B               CALL   printStr   
2FAF   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
2FC6   CD 08 0B               CALL   printStr   
2FC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FD8   21 02 00               LD   HL,2   
2FDB   CD 56 0A               CALL   prtdec   
2FDE   CD 08 0B               CALL   printStr   
2FE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FEE   E1                     POP   hl   
2FEF   E5                     PUSH   hl   
2FF0   CD 56 0A               CALL   prtdec   
2FF3   E1                     POP   hl   
2FF4   CD 08 0B               CALL   printStr   
2FF7   20 28 23 00            .CSTR   " (#"   
2FFB   CD 9E 0A               CALL   prthex   
2FFE   CD 08 0B               CALL   printStr   
3001   29 0D 0A 00            .CSTR   ")\r\n"   
3005   76                     HALT      
3006   00                     .CSTR      
3007                EXPECTM_0_2649S43:      
3007   E1                     POP   HL   
3008                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
3008   31 80 41               LD   SP,STACK   
300B   CD 0F 0B               CALL   init   
300E   CD F8 3F               CALL   execStr   
3011   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
3028                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
3028   E1                     POP   HL   
3029   E5                     PUSH   HL   
302A   11 64 00               LD   DE,100   
302D   B7                     OR   A   
302E   ED 52                  SBC   HL,DE   
3030   7D                     LD   A,L   
3031   B4                     OR   H   
3032   28 61                  JR   Z,expectM_0_2650S43   
3034   CD 08 0B               CALL   printStr   
3037   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
3054   CD 08 0B               CALL   printStr   
3057   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3066   21 64 00               LD   HL,100   
3069   CD 56 0A               CALL   prtdec   
306C   CD 08 0B               CALL   printStr   
306F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
307C   E1                     POP   hl   
307D   E5                     PUSH   hl   
307E   CD 56 0A               CALL   prtdec   
3081   E1                     POP   hl   
3082   CD 08 0B               CALL   printStr   
3085   20 28 23 00            .CSTR   " (#"   
3089   CD 9E 0A               CALL   prthex   
308C   CD 08 0B               CALL   printStr   
308F   29 0D 0A 00            .CSTR   ")\r\n"   
3093   76                     HALT      
3094   00                     .CSTR      
3095                EXPECTM_0_2650S43:      
3095   E1                     POP   HL   
3096                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
3096   31 80 41               LD   SP,STACK   
3099   CD 0F 0B               CALL   init   
309C   CD F8 3F               CALL   execStr   
309F   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
30B7                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
30B7   E1                     POP   HL   
30B8   E5                     PUSH   HL   
30B9   11 01 00               LD   DE,1   
30BC   B7                     OR   A   
30BD   ED 52                  SBC   HL,DE   
30BF   7D                     LD   A,L   
30C0   B4                     OR   H   
30C1   28 62                  JR   Z,expectM_0_2651S43   
30C3   CD 08 0B               CALL   printStr   
30C6   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
30E4   CD 08 0B               CALL   printStr   
30E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30F6   21 01 00               LD   HL,1   
30F9   CD 56 0A               CALL   prtdec   
30FC   CD 08 0B               CALL   printStr   
30FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
310C   E1                     POP   hl   
310D   E5                     PUSH   hl   
310E   CD 56 0A               CALL   prtdec   
3111   E1                     POP   hl   
3112   CD 08 0B               CALL   printStr   
3115   20 28 23 00            .CSTR   " (#"   
3119   CD 9E 0A               CALL   prthex   
311C   CD 08 0B               CALL   printStr   
311F   29 0D 0A 00            .CSTR   ")\r\n"   
3123   76                     HALT      
3124   00                     .CSTR      
3125                EXPECTM_0_2651S43:      
3125   E1                     POP   HL   
3126                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
3126   31 80 41               LD   SP,STACK   
3129   CD 0F 0B               CALL   init   
312C   CD F8 3F               CALL   execStr   
312F   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
3148                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
3148   E1                     POP   HL   
3149   E5                     PUSH   HL   
314A   11 02 00               LD   DE,2   
314D   B7                     OR   A   
314E   ED 52                  SBC   HL,DE   
3150   7D                     LD   A,L   
3151   B4                     OR   H   
3152   28 63                  JR   Z,expectM_0_2652S43   
3154   CD 08 0B               CALL   printStr   
3157   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
3176   CD 08 0B               CALL   printStr   
3179   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3188   21 02 00               LD   HL,2   
318B   CD 56 0A               CALL   prtdec   
318E   CD 08 0B               CALL   printStr   
3191   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
319E   E1                     POP   hl   
319F   E5                     PUSH   hl   
31A0   CD 56 0A               CALL   prtdec   
31A3   E1                     POP   hl   
31A4   CD 08 0B               CALL   printStr   
31A7   20 28 23 00            .CSTR   " (#"   
31AB   CD 9E 0A               CALL   prthex   
31AE   CD 08 0B               CALL   printStr   
31B1   29 0D 0A 00            .CSTR   ")\r\n"   
31B5   76                     HALT      
31B6   00                     .CSTR      
31B7                EXPECTM_0_2652S43:      
31B7   E1                     POP   HL   
31B8                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
31B8   31 80 41               LD   SP,STACK   
31BB   CD 0F 0B               CALL   init   
31BE   CD F8 3F               CALL   execStr   
31C1   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
31E0                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
31E0   E1                     POP   HL   
31E1   E5                     PUSH   HL   
31E2   11 0B 00               LD   DE,11   
31E5   B7                     OR   A   
31E6   ED 52                  SBC   HL,DE   
31E8   7D                     LD   A,L   
31E9   B4                     OR   H   
31EA   28 69                  JR   Z,expectM_0_2653S43   
31EC   CD 08 0B               CALL   printStr   
31EF   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
3214   CD 08 0B               CALL   printStr   
3217   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3226   21 0B 00               LD   HL,11   
3229   CD 56 0A               CALL   prtdec   
322C   CD 08 0B               CALL   printStr   
322F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
323C   E1                     POP   hl   
323D   E5                     PUSH   hl   
323E   CD 56 0A               CALL   prtdec   
3241   E1                     POP   hl   
3242   CD 08 0B               CALL   printStr   
3245   20 28 23 00            .CSTR   " (#"   
3249   CD 9E 0A               CALL   prthex   
324C   CD 08 0B               CALL   printStr   
324F   29 0D 0A 00            .CSTR   ")\r\n"   
3253   76                     HALT      
3254   00                     .CSTR      
3255                EXPECTM_0_2653S43:      
3255   E1                     POP   HL   
3256                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
3256   31 80 41               LD   SP,STACK   
3259   CD 0F 0B               CALL   init   
325C   CD F8 3F               CALL   execStr   
325F   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
327E                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
327E   E1                     POP   HL   
327F   E5                     PUSH   HL   
3280   11 15 00               LD   DE,21   
3283   B7                     OR   A   
3284   ED 52                  SBC   HL,DE   
3286   7D                     LD   A,L   
3287   B4                     OR   H   
3288   28 69                  JR   Z,expectM_0_2654S43   
328A   CD 08 0B               CALL   printStr   
328D   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
32B2   CD 08 0B               CALL   printStr   
32B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32C4   21 15 00               LD   HL,21   
32C7   CD 56 0A               CALL   prtdec   
32CA   CD 08 0B               CALL   printStr   
32CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32DA   E1                     POP   hl   
32DB   E5                     PUSH   hl   
32DC   CD 56 0A               CALL   prtdec   
32DF   E1                     POP   hl   
32E0   CD 08 0B               CALL   printStr   
32E3   20 28 23 00            .CSTR   " (#"   
32E7   CD 9E 0A               CALL   prthex   
32EA   CD 08 0B               CALL   printStr   
32ED   29 0D 0A 00            .CSTR   ")\r\n"   
32F1   76                     HALT      
32F2   00                     .CSTR      
32F3                EXPECTM_0_2654S43:      
32F3   E1                     POP   HL   
32F4                          ;*Macro unroll:  test "[10 20 30] 1%", 20
32F4   31 80 41               LD   SP,STACK   
32F7   CD 0F 0B               CALL   init   
32FA   CD F8 3F               CALL   execStr   
32FD   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
330B                          ;*Macro unroll:  expect "[10 20 30] 1%",20
330B   E1                     POP   HL   
330C   E5                     PUSH   HL   
330D   11 14 00               LD   DE,20   
3310   B7                     OR   A   
3311   ED 52                  SBC   HL,DE   
3313   7D                     LD   A,L   
3314   B4                     OR   H   
3315   28 58                  JR   Z,expectM_0_2655S43   
3317   CD 08 0B               CALL   printStr   
331A   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
332E   CD 08 0B               CALL   printStr   
3331   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3340   21 14 00               LD   HL,20   
3343   CD 56 0A               CALL   prtdec   
3346   CD 08 0B               CALL   printStr   
3349   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3356   E1                     POP   hl   
3357   E5                     PUSH   hl   
3358   CD 56 0A               CALL   prtdec   
335B   E1                     POP   hl   
335C   CD 08 0B               CALL   printStr   
335F   20 28 23 00            .CSTR   " (#"   
3363   CD 9E 0A               CALL   prthex   
3366   CD 08 0B               CALL   printStr   
3369   29 0D 0A 00            .CSTR   ")\r\n"   
336D   76                     HALT      
336E   00                     .CSTR      
336F                EXPECTM_0_2655S43:      
336F   E1                     POP   HL   
3370                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
3370   31 80 41               LD   SP,STACK   
3373   CD 0F 0B               CALL   init   
3376   CD F8 3F               CALL   execStr   
3379   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
3387                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
3387   E1                     POP   HL   
3388   E5                     PUSH   HL   
3389   11 02 00               LD   DE,2   
338C   B7                     OR   A   
338D   ED 52                  SBC   HL,DE   
338F   7D                     LD   A,L   
3390   B4                     OR   H   
3391   28 58                  JR   Z,expectM_0_2656S43   
3393   CD 08 0B               CALL   printStr   
3396   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
33AA   CD 08 0B               CALL   printStr   
33AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33BC   21 02 00               LD   HL,2   
33BF   CD 56 0A               CALL   prtdec   
33C2   CD 08 0B               CALL   printStr   
33C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33D2   E1                     POP   hl   
33D3   E5                     PUSH   hl   
33D4   CD 56 0A               CALL   prtdec   
33D7   E1                     POP   hl   
33D8   CD 08 0B               CALL   printStr   
33DB   20 28 23 00            .CSTR   " (#"   
33DF   CD 9E 0A               CALL   prthex   
33E2   CD 08 0B               CALL   printStr   
33E5   29 0D 0A 00            .CSTR   ")\r\n"   
33E9   76                     HALT      
33EA   00                     .CSTR      
33EB                EXPECTM_0_2656S43:      
33EB   E1                     POP   HL   
33EC                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
33EC   31 80 41               LD   SP,STACK   
33EF   CD 0F 0B               CALL   init   
33F2   CD F8 3F               CALL   execStr   
33F5   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
3409                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
3409   E1                     POP   HL   
340A   E5                     PUSH   HL   
340B   11 42 00               LD   DE,66   
340E   B7                     OR   A   
340F   ED 52                  SBC   HL,DE   
3411   7D                     LD   A,L   
3412   B4                     OR   H   
3413   28 5E                  JR   Z,expectM_0_2657S43   
3415   CD 08 0B               CALL   printStr   
3418   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
3432   CD 08 0B               CALL   printStr   
3435   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3444   21 42 00               LD   HL,66   
3447   CD 56 0A               CALL   prtdec   
344A   CD 08 0B               CALL   printStr   
344D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
345A   E1                     POP   hl   
345B   E5                     PUSH   hl   
345C   CD 56 0A               CALL   prtdec   
345F   E1                     POP   hl   
3460   CD 08 0B               CALL   printStr   
3463   20 28 23 00            .CSTR   " (#"   
3467   CD 9E 0A               CALL   prthex   
346A   CD 08 0B               CALL   printStr   
346D   29 0D 0A 00            .CSTR   ")\r\n"   
3471   76                     HALT      
3472   00                     .CSTR      
3473                EXPECTM_0_2657S43:      
3473   E1                     POP   HL   
3474                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
3474   31 80 41               LD   SP,STACK   
3477   CD 0F 0B               CALL   init   
347A   CD F8 3F               CALL   execStr   
347D   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
3491                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
3491   E1                     POP   HL   
3492   E5                     PUSH   HL   
3493   11 0A 00               LD   DE,10   
3496   B7                     OR   A   
3497   ED 52                  SBC   HL,DE   
3499   7D                     LD   A,L   
349A   B4                     OR   H   
349B   28 5E                  JR   Z,expectM_0_2658S43   
349D   CD 08 0B               CALL   printStr   
34A0   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
34BA   CD 08 0B               CALL   printStr   
34BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34CC   21 0A 00               LD   HL,10   
34CF   CD 56 0A               CALL   prtdec   
34D2   CD 08 0B               CALL   printStr   
34D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34E2   E1                     POP   hl   
34E3   E5                     PUSH   hl   
34E4   CD 56 0A               CALL   prtdec   
34E7   E1                     POP   hl   
34E8   CD 08 0B               CALL   printStr   
34EB   20 28 23 00            .CSTR   " (#"   
34EF   CD 9E 0A               CALL   prthex   
34F2   CD 08 0B               CALL   printStr   
34F5   29 0D 0A 00            .CSTR   ")\r\n"   
34F9   76                     HALT      
34FA   00                     .CSTR      
34FB                EXPECTM_0_2658S43:      
34FB   E1                     POP   HL   
34FC                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
34FC   31 80 41               LD   SP,STACK   
34FF   CD 0F 0B               CALL   init   
3502   CD F8 3F               CALL   execStr   
3505   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
3521                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
3521   E1                     POP   HL   
3522   E5                     PUSH   HL   
3523   11 0A 00               LD   DE,10   
3526   B7                     OR   A   
3527   ED 52                  SBC   HL,DE   
3529   7D                     LD   A,L   
352A   B4                     OR   H   
352B   28 66                  JR   Z,expectM_0_2659S43   
352D   CD 08 0B               CALL   printStr   
3530   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
3552   CD 08 0B               CALL   printStr   
3555   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3564   21 0A 00               LD   HL,10   
3567   CD 56 0A               CALL   prtdec   
356A   CD 08 0B               CALL   printStr   
356D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
357A   E1                     POP   hl   
357B   E5                     PUSH   hl   
357C   CD 56 0A               CALL   prtdec   
357F   E1                     POP   hl   
3580   CD 08 0B               CALL   printStr   
3583   20 28 23 00            .CSTR   " (#"   
3587   CD 9E 0A               CALL   prthex   
358A   CD 08 0B               CALL   printStr   
358D   29 0D 0A 00            .CSTR   ")\r\n"   
3591   76                     HALT      
3592   00                     .CSTR      
3593                EXPECTM_0_2659S43:      
3593   E1                     POP   HL   
3594                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
3594   31 80 41               LD   SP,STACK   
3597   CD 0F 0B               CALL   init   
359A   CD F8 3F               CALL   execStr   
359D   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
35BD                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
35BD   E1                     POP   HL   
35BE   E5                     PUSH   HL   
35BF   11 0A 00               LD   DE,10   
35C2   B7                     OR   A   
35C3   ED 52                  SBC   HL,DE   
35C5   7D                     LD   A,L   
35C6   B4                     OR   H   
35C7   28 6A                  JR   Z,expectM_0_2660S43   
35C9   CD 08 0B               CALL   printStr   
35CC   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
35F2   CD 08 0B               CALL   printStr   
35F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3604   21 0A 00               LD   HL,10   
3607   CD 56 0A               CALL   prtdec   
360A   CD 08 0B               CALL   printStr   
360D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
361A   E1                     POP   hl   
361B   E5                     PUSH   hl   
361C   CD 56 0A               CALL   prtdec   
361F   E1                     POP   hl   
3620   CD 08 0B               CALL   printStr   
3623   20 28 23 00            .CSTR   " (#"   
3627   CD 9E 0A               CALL   prthex   
362A   CD 08 0B               CALL   printStr   
362D   29 0D 0A 00            .CSTR   ")\r\n"   
3631   76                     HALT      
3632   00                     .CSTR      
3633                EXPECTM_0_2660S43:      
3633   E1                     POP   HL   
3634                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
3634   31 80 41               LD   SP,STACK   
3637   CD 0F 0B               CALL   init   
363A   CD F8 3F               CALL   execStr   
363D   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
365D                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
365D   E1                     POP   HL   
365E   E5                     PUSH   HL   
365F   11 14 00               LD   DE,20   
3662   B7                     OR   A   
3663   ED 52                  SBC   HL,DE   
3665   7D                     LD   A,L   
3666   B4                     OR   H   
3667   28 6A                  JR   Z,expectM_0_2661S43   
3669   CD 08 0B               CALL   printStr   
366C   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3692   CD 08 0B               CALL   printStr   
3695   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36A4   21 14 00               LD   HL,20   
36A7   CD 56 0A               CALL   prtdec   
36AA   CD 08 0B               CALL   printStr   
36AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36BA   E1                     POP   hl   
36BB   E5                     PUSH   hl   
36BC   CD 56 0A               CALL   prtdec   
36BF   E1                     POP   hl   
36C0   CD 08 0B               CALL   printStr   
36C3   20 28 23 00            .CSTR   " (#"   
36C7   CD 9E 0A               CALL   prthex   
36CA   CD 08 0B               CALL   printStr   
36CD   29 0D 0A 00            .CSTR   ")\r\n"   
36D1   76                     HALT      
36D2   00                     .CSTR      
36D3                EXPECTM_0_2661S43:      
36D3   E1                     POP   HL   
36D4                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
36D4   31 80 41               LD   SP,STACK   
36D7   CD 0F 0B               CALL   init   
36DA   CD F8 3F               CALL   execStr   
36DD   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
36F1                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
36F1   E1                     POP   HL   
36F2   E5                     PUSH   HL   
36F3   11 04 00               LD   DE,4   
36F6   B7                     OR   A   
36F7   ED 52                  SBC   HL,DE   
36F9   7D                     LD   A,L   
36FA   B4                     OR   H   
36FB   28 5E                  JR   Z,expectM_0_2662S43   
36FD   CD 08 0B               CALL   printStr   
3700   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
371A   CD 08 0B               CALL   printStr   
371D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
372C   21 04 00               LD   HL,4   
372F   CD 56 0A               CALL   prtdec   
3732   CD 08 0B               CALL   printStr   
3735   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3742   E1                     POP   hl   
3743   E5                     PUSH   hl   
3744   CD 56 0A               CALL   prtdec   
3747   E1                     POP   hl   
3748   CD 08 0B               CALL   printStr   
374B   20 28 23 00            .CSTR   " (#"   
374F   CD 9E 0A               CALL   prthex   
3752   CD 08 0B               CALL   printStr   
3755   29 0D 0A 00            .CSTR   ")\r\n"   
3759   76                     HALT      
375A   00                     .CSTR      
375B                EXPECTM_0_2662S43:      
375B   E1                     POP   HL   
375C                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
375C   31 80 41               LD   SP,STACK   
375F   CD 0F 0B               CALL   init   
3762   CD F8 3F               CALL   execStr   
3765   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
377F                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
377F   E1                     POP   HL   
3780   E5                     PUSH   HL   
3781   11 09 00               LD   DE,9   
3784   B7                     OR   A   
3785   ED 52                  SBC   HL,DE   
3787   7D                     LD   A,L   
3788   B4                     OR   H   
3789   28 64                  JR   Z,expectM_0_2663S43   
378B   CD 08 0B               CALL   printStr   
378E   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
37AE   CD 08 0B               CALL   printStr   
37B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37C0   21 09 00               LD   HL,9   
37C3   CD 56 0A               CALL   prtdec   
37C6   CD 08 0B               CALL   printStr   
37C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37D6   E1                     POP   hl   
37D7   E5                     PUSH   hl   
37D8   CD 56 0A               CALL   prtdec   
37DB   E1                     POP   hl   
37DC   CD 08 0B               CALL   printStr   
37DF   20 28 23 00            .CSTR   " (#"   
37E3   CD 9E 0A               CALL   prthex   
37E6   CD 08 0B               CALL   printStr   
37E9   29 0D 0A 00            .CSTR   ")\r\n"   
37ED   76                     HALT      
37EE   00                     .CSTR      
37EF                EXPECTM_0_2663S43:      
37EF   E1                     POP   HL   
37F0                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
37F0   31 80 41               LD   SP,STACK   
37F3   CD 0F 0B               CALL   init   
37F6   CD F8 3F               CALL   execStr   
37F9   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3811                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3811   E1                     POP   HL   
3812   E5                     PUSH   HL   
3813   11 06 00               LD   DE,6   
3816   B7                     OR   A   
3817   ED 52                  SBC   HL,DE   
3819   7D                     LD   A,L   
381A   B4                     OR   H   
381B   28 62                  JR   Z,expectM_0_2664S43   
381D   CD 08 0B               CALL   printStr   
3820   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
383E   CD 08 0B               CALL   printStr   
3841   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3850   21 06 00               LD   HL,6   
3853   CD 56 0A               CALL   prtdec   
3856   CD 08 0B               CALL   printStr   
3859   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3866   E1                     POP   hl   
3867   E5                     PUSH   hl   
3868   CD 56 0A               CALL   prtdec   
386B   E1                     POP   hl   
386C   CD 08 0B               CALL   printStr   
386F   20 28 23 00            .CSTR   " (#"   
3873   CD 9E 0A               CALL   prthex   
3876   CD 08 0B               CALL   printStr   
3879   29 0D 0A 00            .CSTR   ")\r\n"   
387D   76                     HALT      
387E   00                     .CSTR      
387F                EXPECTM_0_2664S43:      
387F   E1                     POP   HL   
3880                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
3880   31 80 41               LD   SP,STACK   
3883   CD 0F 0B               CALL   init   
3886   CD F8 3F               CALL   execStr   
3889   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
38A4                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
38A4   E1                     POP   HL   
38A5   E5                     PUSH   HL   
38A6   11 02 00               LD   DE,2   
38A9   B7                     OR   A   
38AA   ED 52                  SBC   HL,DE   
38AC   7D                     LD   A,L   
38AD   B4                     OR   H   
38AE   28 65                  JR   Z,expectM_0_2665S43   
38B0   CD 08 0B               CALL   printStr   
38B3   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
38D4   CD 08 0B               CALL   printStr   
38D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38E6   21 02 00               LD   HL,2   
38E9   CD 56 0A               CALL   prtdec   
38EC   CD 08 0B               CALL   printStr   
38EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38FC   E1                     POP   hl   
38FD   E5                     PUSH   hl   
38FE   CD 56 0A               CALL   prtdec   
3901   E1                     POP   hl   
3902   CD 08 0B               CALL   printStr   
3905   20 28 23 00            .CSTR   " (#"   
3909   CD 9E 0A               CALL   prthex   
390C   CD 08 0B               CALL   printStr   
390F   29 0D 0A 00            .CSTR   ")\r\n"   
3913   76                     HALT      
3914   00                     .CSTR      
3915                EXPECTM_0_2665S43:      
3915   E1                     POP   HL   
3916                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3916   31 80 41               LD   SP,STACK   
3919   CD 0F 0B               CALL   init   
391C   CD F8 3F               CALL   execStr   
391F   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3945                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
3945   E1                     POP   HL   
3946   E5                     PUSH   HL   
3947   11 0A 00               LD   DE,10   
394A   B7                     OR   A   
394B   ED 52                  SBC   HL,DE   
394D   7D                     LD   A,L   
394E   B4                     OR   H   
394F   28 70                  JR   Z,expectM_0_2666S43   
3951   CD 08 0B               CALL   printStr   
3954   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3980   CD 08 0B               CALL   printStr   
3983   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3992   21 0A 00               LD   HL,10   
3995   CD 56 0A               CALL   prtdec   
3998   CD 08 0B               CALL   printStr   
399B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39A8   E1                     POP   hl   
39A9   E5                     PUSH   hl   
39AA   CD 56 0A               CALL   prtdec   
39AD   E1                     POP   hl   
39AE   CD 08 0B               CALL   printStr   
39B1   20 28 23 00            .CSTR   " (#"   
39B5   CD 9E 0A               CALL   prthex   
39B8   CD 08 0B               CALL   printStr   
39BB   29 0D 0A 00            .CSTR   ")\r\n"   
39BF   76                     HALT      
39C0   00                     .CSTR      
39C1                EXPECTM_0_2666S43:      
39C1   E1                     POP   HL   
39C2                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
39C2   31 80 41               LD   SP,STACK   
39C5   CD 0F 0B               CALL   init   
39C8   CD F8 3F               CALL   execStr   
39CB   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
39D7                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
39D7   E1                     POP   HL   
39D8   E5                     PUSH   HL   
39D9   11 00 00               LD   DE,NUL   
39DC   B7                     OR   A   
39DD   ED 52                  SBC   HL,DE   
39DF   7D                     LD   A,L   
39E0   B4                     OR   H   
39E1   28 56                  JR   Z,expectM_0_2667S43   
39E3   CD 08 0B               CALL   printStr   
39E6   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
39F8   CD 08 0B               CALL   printStr   
39FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A0A   21 00 00               LD   HL,NUL   
3A0D   CD 56 0A               CALL   prtdec   
3A10   CD 08 0B               CALL   printStr   
3A13   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A20   E1                     POP   hl   
3A21   E5                     PUSH   hl   
3A22   CD 56 0A               CALL   prtdec   
3A25   E1                     POP   hl   
3A26   CD 08 0B               CALL   printStr   
3A29   20 28 23 00            .CSTR   " (#"   
3A2D   CD 9E 0A               CALL   prthex   
3A30   CD 08 0B               CALL   printStr   
3A33   29 0D 0A 00            .CSTR   ")\r\n"   
3A37   76                     HALT      
3A38   00                     .CSTR      
3A39                EXPECTM_0_2667S43:      
3A39   E1                     POP   HL   
3A3A                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
3A3A   31 80 41               LD   SP,STACK   
3A3D   CD 0F 0B               CALL   init   
3A40   CD F8 3F               CALL   execStr   
3A43   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
3A4F                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
3A4F   E1                     POP   HL   
3A50   E5                     PUSH   HL   
3A51   11 00 00               LD   DE,NUL   
3A54   B7                     OR   A   
3A55   ED 52                  SBC   HL,DE   
3A57   7D                     LD   A,L   
3A58   B4                     OR   H   
3A59   28 56                  JR   Z,expectM_0_2668S43   
3A5B   CD 08 0B               CALL   printStr   
3A5E   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
3A70   CD 08 0B               CALL   printStr   
3A73   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A82   21 00 00               LD   HL,NUL   
3A85   CD 56 0A               CALL   prtdec   
3A88   CD 08 0B               CALL   printStr   
3A8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A98   E1                     POP   hl   
3A99   E5                     PUSH   hl   
3A9A   CD 56 0A               CALL   prtdec   
3A9D   E1                     POP   hl   
3A9E   CD 08 0B               CALL   printStr   
3AA1   20 28 23 00            .CSTR   " (#"   
3AA5   CD 9E 0A               CALL   prthex   
3AA8   CD 08 0B               CALL   printStr   
3AAB   29 0D 0A 00            .CSTR   ")\r\n"   
3AAF   76                     HALT      
3AB0   00                     .CSTR      
3AB1                EXPECTM_0_2668S43:      
3AB1   E1                     POP   HL   
3AB2                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
3AB2   31 80 41               LD   SP,STACK   
3AB5   CD 0F 0B               CALL   init   
3AB8   CD F8 3F               CALL   execStr   
3ABB   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
3AC7                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
3AC7   E1                     POP   HL   
3AC8   E5                     PUSH   HL   
3AC9   11 00 00               LD   DE,NUL   
3ACC   B7                     OR   A   
3ACD   ED 52                  SBC   HL,DE   
3ACF   7D                     LD   A,L   
3AD0   B4                     OR   H   
3AD1   28 56                  JR   Z,expectM_0_2669S43   
3AD3   CD 08 0B               CALL   printStr   
3AD6   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
3AE8   CD 08 0B               CALL   printStr   
3AEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AFA   21 00 00               LD   HL,NUL   
3AFD   CD 56 0A               CALL   prtdec   
3B00   CD 08 0B               CALL   printStr   
3B03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B10   E1                     POP   hl   
3B11   E5                     PUSH   hl   
3B12   CD 56 0A               CALL   prtdec   
3B15   E1                     POP   hl   
3B16   CD 08 0B               CALL   printStr   
3B19   20 28 23 00            .CSTR   " (#"   
3B1D   CD 9E 0A               CALL   prthex   
3B20   CD 08 0B               CALL   printStr   
3B23   29 0D 0A 00            .CSTR   ")\r\n"   
3B27   76                     HALT      
3B28   00                     .CSTR      
3B29                EXPECTM_0_2669S43:      
3B29   E1                     POP   HL   
3B2A                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
3B2A   31 80 41               LD   SP,STACK   
3B2D   CD 0F 0B               CALL   init   
3B30   CD F8 3F               CALL   execStr   
3B33   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
3B3F                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
3B3F   E1                     POP   HL   
3B40   E5                     PUSH   HL   
3B41   11 00 00               LD   DE,NUL   
3B44   B7                     OR   A   
3B45   ED 52                  SBC   HL,DE   
3B47   7D                     LD   A,L   
3B48   B4                     OR   H   
3B49   28 56                  JR   Z,expectM_0_2670S43   
3B4B   CD 08 0B               CALL   printStr   
3B4E   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
3B60   CD 08 0B               CALL   printStr   
3B63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B72   21 00 00               LD   HL,NUL   
3B75   CD 56 0A               CALL   prtdec   
3B78   CD 08 0B               CALL   printStr   
3B7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B88   E1                     POP   hl   
3B89   E5                     PUSH   hl   
3B8A   CD 56 0A               CALL   prtdec   
3B8D   E1                     POP   hl   
3B8E   CD 08 0B               CALL   printStr   
3B91   20 28 23 00            .CSTR   " (#"   
3B95   CD 9E 0A               CALL   prthex   
3B98   CD 08 0B               CALL   printStr   
3B9B   29 0D 0A 00            .CSTR   ")\r\n"   
3B9F   76                     HALT      
3BA0   00                     .CSTR      
3BA1                EXPECTM_0_2670S43:      
3BA1   E1                     POP   HL   
3BA2                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
3BA2   31 80 41               LD   SP,STACK   
3BA5   CD 0F 0B               CALL   init   
3BA8   CD F8 3F               CALL   execStr   
3BAB   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
3BB3                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
3BB3   E1                     POP   HL   
3BB4   E5                     PUSH   HL   
3BB5   11 66 42               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3BB8   B7                     OR   A   
3BB9   ED 52                  SBC   HL,DE   
3BBB   7D                     LD   A,L   
3BBC   B4                     OR   H   
3BBD   28 52                  JR   Z,expectM_0_2671S43   
3BBF   CD 08 0B               CALL   printStr   
3BC2   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
3BD0   CD 08 0B               CALL   printStr   
3BD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BE2   21 66 42               LD   HL,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3BE5   CD 56 0A               CALL   prtdec   
3BE8   CD 08 0B               CALL   printStr   
3BEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BF8   E1                     POP   hl   
3BF9   E5                     PUSH   hl   
3BFA   CD 56 0A               CALL   prtdec   
3BFD   E1                     POP   hl   
3BFE   CD 08 0B               CALL   printStr   
3C01   20 28 23 00            .CSTR   " (#"   
3C05   CD 9E 0A               CALL   prthex   
3C08   CD 08 0B               CALL   printStr   
3C0B   29 0D 0A 00            .CSTR   ")\r\n"   
3C0F   76                     HALT      
3C10   00                     .CSTR      
3C11                EXPECTM_0_2671S43:      
3C11   E1                     POP   HL   
3C12                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
3C12   31 80 41               LD   SP,STACK   
3C15   CD 0F 0B               CALL   init   
3C18   CD F8 3F               CALL   execStr   
3C1B   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
3C23                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
3C23   E1                     POP   HL   
3C24   E5                     PUSH   HL   
3C25   11 34 42               LD   DE,VARS + ("Z"-"A"+1)*2   
3C28   B7                     OR   A   
3C29   ED 52                  SBC   HL,DE   
3C2B   7D                     LD   A,L   
3C2C   B4                     OR   H   
3C2D   28 52                  JR   Z,expectM_0_2672S43   
3C2F   CD 08 0B               CALL   printStr   
3C32   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
3C40   CD 08 0B               CALL   printStr   
3C43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C52   21 34 42               LD   HL,VARS + ("Z"-"A"+1)*2   
3C55   CD 56 0A               CALL   prtdec   
3C58   CD 08 0B               CALL   printStr   
3C5B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C68   E1                     POP   hl   
3C69   E5                     PUSH   hl   
3C6A   CD 56 0A               CALL   prtdec   
3C6D   E1                     POP   hl   
3C6E   CD 08 0B               CALL   printStr   
3C71   20 28 23 00            .CSTR   " (#"   
3C75   CD 9E 0A               CALL   prthex   
3C78   CD 08 0B               CALL   printStr   
3C7B   29 0D 0A 00            .CSTR   ")\r\n"   
3C7F   76                     HALT      
3C80   00                     .CSTR      
3C81                EXPECTM_0_2672S43:      
3C81   E1                     POP   HL   
3C82                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
3C82   31 80 41               LD   SP,STACK   
3C85   CD 0F 0B               CALL   init   
3C88   CD F8 3F               CALL   execStr   
3C8B   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
3C93                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
3C93   E1                     POP   HL   
3C94   E5                     PUSH   HL   
3C95   11 32 42               LD   DE,VARS + ("Z"-"A")*2   
3C98   B7                     OR   A   
3C99   ED 52                  SBC   HL,DE   
3C9B   7D                     LD   A,L   
3C9C   B4                     OR   H   
3C9D   28 52                  JR   Z,expectM_0_2673S43   
3C9F   CD 08 0B               CALL   printStr   
3CA2   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
3CB0   CD 08 0B               CALL   printStr   
3CB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CC2   21 32 42               LD   HL,VARS + ("Z"-"A")*2   
3CC5   CD 56 0A               CALL   prtdec   
3CC8   CD 08 0B               CALL   printStr   
3CCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CD8   E1                     POP   hl   
3CD9   E5                     PUSH   hl   
3CDA   CD 56 0A               CALL   prtdec   
3CDD   E1                     POP   hl   
3CDE   CD 08 0B               CALL   printStr   
3CE1   20 28 23 00            .CSTR   " (#"   
3CE5   CD 9E 0A               CALL   prthex   
3CE8   CD 08 0B               CALL   printStr   
3CEB   29 0D 0A 00            .CSTR   ")\r\n"   
3CEF   76                     HALT      
3CF0   00                     .CSTR      
3CF1                EXPECTM_0_2673S43:      
3CF1   E1                     POP   HL   
3CF2                          ;*Macro unroll:  test "'A' /ad", VARS
3CF2   31 80 41               LD   SP,STACK   
3CF5   CD 0F 0B               CALL   init   
3CF8   CD F8 3F               CALL   execStr   
3CFB   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
3D03                          ;*Macro unroll:  expect "'A' /ad",VARS
3D03   E1                     POP   HL   
3D04   E5                     PUSH   HL   
3D05   11 00 42               LD   DE,VARS   
3D08   B7                     OR   A   
3D09   ED 52                  SBC   HL,DE   
3D0B   7D                     LD   A,L   
3D0C   B4                     OR   H   
3D0D   28 52                  JR   Z,expectM_0_2674S43   
3D0F   CD 08 0B               CALL   printStr   
3D12   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
3D20   CD 08 0B               CALL   printStr   
3D23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D32   21 00 42               LD   HL,VARS   
3D35   CD 56 0A               CALL   prtdec   
3D38   CD 08 0B               CALL   printStr   
3D3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D48   E1                     POP   hl   
3D49   E5                     PUSH   hl   
3D4A   CD 56 0A               CALL   prtdec   
3D4D   E1                     POP   hl   
3D4E   CD 08 0B               CALL   printStr   
3D51   20 28 23 00            .CSTR   " (#"   
3D55   CD 9E 0A               CALL   prthex   
3D58   CD 08 0B               CALL   printStr   
3D5B   29 0D 0A 00            .CSTR   ")\r\n"   
3D5F   76                     HALT      
3D60   00                     .CSTR      
3D61                EXPECTM_0_2674S43:      
3D61   E1                     POP   HL   
3D62                          ;*Macro unroll:  test "-1 /bd/vT/c 0%", $2D
3D62   31 80 41               LD   SP,STACK   
3D65   CD 0F 0B               CALL   init   
3D68   CD F8 3F               CALL   execStr   
3D6B   2D 31 20 2F 62 64 2F 76 54 2F 63 20 30 25 00 .CSTR   "-1 /bd/vT/c 0%"   
3D7A                          ;*Macro unroll:  expect "-1 /bd/vT/c 0%",$2D
3D7A   E1                     POP   HL   
3D7B   E5                     PUSH   HL   
3D7C   11 2D 00               LD   DE,$2D   
3D7F   B7                     OR   A   
3D80   ED 52                  SBC   HL,DE   
3D82   7D                     LD   A,L   
3D83   B4                     OR   H   
3D84   28 59                  JR   Z,expectM_0_2675S43   
3D86   CD 08 0B               CALL   printStr   
3D89   43 6F 64 65 3A 20 2D 31 20 2F 62 64 2F 76 54 2F 63 20 30 25 00 .CSTR   "Code: ","-1 /bd/vT/c 0%"   
3D9E   CD 08 0B               CALL   printStr   
3DA1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DB0   21 2D 00               LD   HL,$2D   
3DB3   CD 56 0A               CALL   prtdec   
3DB6   CD 08 0B               CALL   printStr   
3DB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DC6   E1                     POP   hl   
3DC7   E5                     PUSH   hl   
3DC8   CD 56 0A               CALL   prtdec   
3DCB   E1                     POP   hl   
3DCC   CD 08 0B               CALL   printStr   
3DCF   20 28 23 00            .CSTR   " (#"   
3DD3   CD 9E 0A               CALL   prthex   
3DD6   CD 08 0B               CALL   printStr   
3DD9   29 0D 0A 00            .CSTR   ")\r\n"   
3DDD   76                     HALT      
3DDE   00                     .CSTR      
3DDF                EXPECTM_0_2675S43:      
3DDF   E1                     POP   HL   
3DE0                          ;*Macro unroll:  test "`A` /bs/vT/c 0%", 65
3DE0   31 80 41               LD   SP,STACK   
3DE3   CD 0F 0B               CALL   init   
3DE6   CD F8 3F               CALL   execStr   
3DE9   60 41 60 20 2F 62 73 2F 76 54 2F 63 20 30 25 00 .CSTR   "`A` /bs/vT/c 0%"   
3DF9                          ;*Macro unroll:  expect "`A` /bs/vT/c 0%",65
3DF9   E1                     POP   HL   
3DFA   E5                     PUSH   HL   
3DFB   11 41 00               LD   DE,65   
3DFE   B7                     OR   A   
3DFF   ED 52                  SBC   HL,DE   
3E01   7D                     LD   A,L   
3E02   B4                     OR   H   
3E03   28 5A                  JR   Z,expectM_0_2676S43   
3E05   CD 08 0B               CALL   printStr   
3E08   43 6F 64 65 3A 20 60 41 60 20 2F 62 73 2F 76 54 2F 63 20 30 25 00 .CSTR   "Code: ","`A` /bs/vT/c 0%"   
3E1E   CD 08 0B               CALL   printStr   
3E21   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E30   21 41 00               LD   HL,65   
3E33   CD 56 0A               CALL   prtdec   
3E36   CD 08 0B               CALL   printStr   
3E39   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E46   E1                     POP   hl   
3E47   E5                     PUSH   hl   
3E48   CD 56 0A               CALL   prtdec   
3E4B   E1                     POP   hl   
3E4C   CD 08 0B               CALL   printStr   
3E4F   20 28 23 00            .CSTR   " (#"   
3E53   CD 9E 0A               CALL   prthex   
3E56   CD 08 0B               CALL   printStr   
3E59   29 0D 0A 00            .CSTR   ")\r\n"   
3E5D   76                     HALT      
3E5E   00                     .CSTR      
3E5F                EXPECTM_0_2676S43:      
3E5F   E1                     POP   HL   
3E60                          ;*Macro unroll:  test "123 /bd", 3
3E60   31 80 41               LD   SP,STACK   
3E63   CD 0F 0B               CALL   init   
3E66   CD F8 3F               CALL   execStr   
3E69   31 32 33 20 2F 62 64 00 .CSTR   "123 /bd"   
3E71                          ;*Macro unroll:  expect "123 /bd",3
3E71   E1                     POP   HL   
3E72   E5                     PUSH   HL   
3E73   11 03 00               LD   DE,3   
3E76   B7                     OR   A   
3E77   ED 52                  SBC   HL,DE   
3E79   7D                     LD   A,L   
3E7A   B4                     OR   H   
3E7B   28 52                  JR   Z,expectM_0_2677S43   
3E7D   CD 08 0B               CALL   printStr   
3E80   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 00 .CSTR   "Code: ","123 /bd"   
3E8E   CD 08 0B               CALL   printStr   
3E91   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EA0   21 03 00               LD   HL,3   
3EA3   CD 56 0A               CALL   prtdec   
3EA6   CD 08 0B               CALL   printStr   
3EA9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EB6   E1                     POP   hl   
3EB7   E5                     PUSH   hl   
3EB8   CD 56 0A               CALL   prtdec   
3EBB   E1                     POP   hl   
3EBC   CD 08 0B               CALL   printStr   
3EBF   20 28 23 00            .CSTR   " (#"   
3EC3   CD 9E 0A               CALL   prthex   
3EC6   CD 08 0B               CALL   printStr   
3EC9   29 0D 0A 00            .CSTR   ")\r\n"   
3ECD   76                     HALT      
3ECE   00                     .CSTR      
3ECF                EXPECTM_0_2677S43:      
3ECF   E1                     POP   HL   
3ED0                          ;*Macro unroll:  test "123 /bd/vT/c 1%", $32
3ED0   31 80 41               LD   SP,STACK   
3ED3   CD 0F 0B               CALL   init   
3ED6   CD F8 3F               CALL   execStr   
3ED9   31 32 33 20 2F 62 64 2F 76 54 2F 63 20 31 25 00 .CSTR   "123 /bd/vT/c 1%"   
3EE9                          ;*Macro unroll:  expect "123 /bd/vT/c 1%",$32
3EE9   E1                     POP   HL   
3EEA   E5                     PUSH   HL   
3EEB   11 32 00               LD   DE,$32   
3EEE   B7                     OR   A   
3EEF   ED 52                  SBC   HL,DE   
3EF1   7D                     LD   A,L   
3EF2   B4                     OR   H   
3EF3   28 5A                  JR   Z,expectM_0_2678S43   
3EF5   CD 08 0B               CALL   printStr   
3EF8   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 2F 76 54 2F 63 20 31 25 00 .CSTR   "Code: ","123 /bd/vT/c 1%"   
3F0E   CD 08 0B               CALL   printStr   
3F11   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F20   21 32 00               LD   HL,$32   
3F23   CD 56 0A               CALL   prtdec   
3F26   CD 08 0B               CALL   printStr   
3F29   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F36   E1                     POP   hl   
3F37   E5                     PUSH   hl   
3F38   CD 56 0A               CALL   prtdec   
3F3B   E1                     POP   hl   
3F3C   CD 08 0B               CALL   printStr   
3F3F   20 28 23 00            .CSTR   " (#"   
3F43   CD 9E 0A               CALL   prthex   
3F46   CD 08 0B               CALL   printStr   
3F49   29 0D 0A 00            .CSTR   ")\r\n"   
3F4D   76                     HALT      
3F4E   00                     .CSTR      
3F4F                EXPECTM_0_2678S43:      
3F4F   E1                     POP   HL   
3F50                          ;*Macro unroll:  test "123/bd ` x `/bs 456/bd + + ", 9
3F50   31 80 41               LD   SP,STACK   
3F53   CD 0F 0B               CALL   init   
3F56   CD F8 3F               CALL   execStr   
3F59   31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "123/bd ` x `/bs 456/bd + + "   
3F75                          ;*Macro unroll:  expect "123/bd ` x `/bs 456/bd + + ",9
3F75   E1                     POP   HL   
3F76   E5                     PUSH   HL   
3F77   11 09 00               LD   DE,9   
3F7A   B7                     OR   A   
3F7B   ED 52                  SBC   HL,DE   
3F7D   7D                     LD   A,L   
3F7E   B4                     OR   H   
3F7F   28 66                  JR   Z,expectM_0_2679S43   
3F81   CD 08 0B               CALL   printStr   
3F84   43 6F 64 65 3A 20 31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "Code: ","123/bd ` x `/bs 456/bd + + "   
3FA6   CD 08 0B               CALL   printStr   
3FA9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FB8   21 09 00               LD   HL,9   
3FBB   CD 56 0A               CALL   prtdec   
3FBE   CD 08 0B               CALL   printStr   
3FC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FCE   E1                     POP   hl   
3FCF   E5                     PUSH   hl   
3FD0   CD 56 0A               CALL   prtdec   
3FD3   E1                     POP   hl   
3FD4   CD 08 0B               CALL   printStr   
3FD7   20 28 23 00            .CSTR   " (#"   
3FDB   CD 9E 0A               CALL   prthex   
3FDE   CD 08 0B               CALL   printStr   
3FE1   29 0D 0A 00            .CSTR   ")\r\n"   
3FE5   76                     HALT      
3FE6   00                     .CSTR      
3FE7                EXPECTM_0_2679S43:      
3FE7   E1                     POP   HL   
3FE8                             ; 
3FE8   CD 08 0B               CALL   printStr   
3FEB   44 6F 6E 65 21 00      .CSTR   "Done!"   
3FF1   76                     HALT      
3FF2                          ALIGN   2   
3FF2                PRINTER:      
3FF2   E1                     POP   hl   
3FF3   CD 56 0A               CALL   prtdec   
3FF6   DD E9                  JP   (ix)   
3FF8                             ; executes a null teminated string (null executes exit_)
3FF8                             ; the string should be immedaitely following the call
3FF8                EXECSTR:      ; create a root stack frame
3FF8   C1                     POP   bc   ; bc = code*
3FF9   0B                     DEC   bc   ; dec to prepare for next routine
3FFA   11 00 00               LD   de,0   
3FFD   D5                     PUSH   de   ; push fake IP
3FFE   D5                     PUSH   de   ; push null arg_list*
3FFF   D5                     PUSH   de   ; push null first_arg*
4000   D5                     PUSH   de   ; push fake BP
4001   DD E9                  JP   (ix)   
4003                          ALIGN   $100   
4100                             ; .org RAMSTART
4100                          DS   DSIZE   
4180                STACK:       
4180                          ALIGN   $100   
4200                VARS:        
4200                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
42D0                RESTARTS:      
42D0                RST08:    DS   2   
42D2                RST10:    DS   2   
42D4                RST18:    DS   2   
42D6                RST20:    DS   2   
42D8                RST28:    DS   2   
42DA                RST30:    DS   2   ; 
42DC                BAUD:     DS   2   ; 
42DE                INTVEC:   DS   2   ; 
42E0                NMIVEC:   DS   2   ; 
42E2                GETCVEC:   DS   2   ; 
42E4                PUTCVEC:   DS   2   ; 
42E6                SYSVARS:      
42E6                             ; initialised sys variables (preserved)
42E6                VDATAWIDTH:   DS   2   ; 
42E8                VTIBPTR:   DS   2   ; 
42EA                VNEXT:    DS   2   ; 
42EC                VHEAPPTR:   DS   2   ; 
42EE                             ; uninitialised sys variables (preserved)
42EE                VPOINTER:   DS   2   ; 
42F0                VREMAIN:   DS   2   ; 
42F2                VSAVEDIP:   DS   2   ; 
42F4                VSAVEDSP:   DS   2   ; 
42F6                VSAVEDBP:   DS   2   ; 
42F8                VCHECKSUM:   DS   2   ; 
42FA                             ; uninitialised sys variables (unpreserved)
42FA                VTEMP1:   DS   2   ; 
42FC                VTEMP2:   DS   2   ; 
42FE                VLASTDEF:   DS   2   ; 
4300                VHASHSTR:   DS   2   ; 
4302                TBPTR:    DS   2   ; reserved for tests
4304                          ALIGN   $100   
4400                TIB:      DS   TIBSIZE   
4500                          ALIGN   $100   
4500                PAD:      DS   $100   
4600                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 58 IN MAIN.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0A32 DEFINED AT LINE 1622 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 29 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 53 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 22 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1847 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 26 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 27 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 28 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
Z80_RST8:           00CF DEFINED AT LINE 31 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 63 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 68 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
OPCODESBASE:        0200 DEFINED AT LINE 76 IN MAIN.asm
CTRLCODES:          0200 DEFINED AT LINE 78 IN MAIN.asm
OPCODES:            0220 DEFINED AT LINE 112 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 215 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 217 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 219 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 221 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 223 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 225 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 227 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 229 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 231 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 233 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 235 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 237 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 239 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 241 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 243 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 245 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 247 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 249 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 251 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 253 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 255 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 260 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 262 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 264 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 266 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 268 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 270 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 272 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 285 IN MAIN.asm
LPAREN_:            036D DEFINED AT LINE 293 IN MAIN.asm
LT_:                0370 DEFINED AT LINE 295 IN MAIN.asm
LT1:                0379 DEFINED AT LINE 302 IN MAIN.asm
                    > USED AT LINE 292 IN MAIN.asm
SLASH_:             0382 DEFINED AT LINE 307 IN MAIN.asm
NOP_:               0385 DEFINED AT LINE 309 IN MAIN.asm
RPAREN_:            0387 DEFINED AT LINE 311 IN MAIN.asm
PLUS:               038A DEFINED AT LINE 318 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
ADD:                038A DEFINED AT LINE 319 IN MAIN.asm
ADD1:               0395 DEFINED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 323 IN MAIN.asm
ADD3:               0399 DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
AT:                 039C DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
ADDR:               039C DEFINED AT LINE 344 IN MAIN.asm
AMPER:              03A6 DEFINED AT LINE 349 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
AND:                03A6 DEFINED AT LINE 350 IN MAIN.asm
AND1:               03AD DEFINED AT LINE 358 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
PIPE:               03B1 DEFINED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
OR:                 03B1 DEFINED AT LINE 364 IN MAIN.asm
XOR:                03BA DEFINED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
XOR1:               03BB DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
INVERT:             03C5 DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
DOLLAR:             03CA DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ARG:                03CA DEFINED AT LINE 394 IN MAIN.asm
ARG0:               03E8 DEFINED AT LINE 415 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
ARG0A:              03F1 DEFINED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
ARG1:               03F6 DEFINED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
ARG1A:              03FE DEFINED AT LINE 433 IN MAIN.asm
                    > USED AT LINE 425 IN MAIN.asm
LBRACK:             0401 DEFINED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
ARRBEGIN:           0401 DEFINED AT LINE 438 IN MAIN.asm
RBRACK:             041D DEFINED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
ARREND:             041D DEFINED AT LINE 453 IN MAIN.asm
ARREND1:            0437 DEFINED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
ARREND2:            0447 DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
ARRINDEX:           046B DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
ARRINDEX0:          0473 DEFINED AT LINE 512 IN MAIN.asm
ARRINDEX1:          0474 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
ARRINDEX2:          0480 DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
ASSIGN:             0483 DEFINED AT LINE 528 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
ASSIGN0:            0485 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
ASSIGNX:            0486 DEFINED AT LINE 533 IN MAIN.asm
ASSIGN1:            0492 DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
COLON:              0494 DEFINED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
ARGLIST:            0494 DEFINED AT LINE 549 IN MAIN.asm
ARGLIST1:           049E DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 577 IN MAIN.asm
ARGLIST1A:          04A6 DEFINED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
ARGLIST2:           04AE DEFINED AT LINE 567 IN MAIN.asm
ARGLIST3:           04B6 DEFINED AT LINE 575 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
ARGLIST4:           04B9 DEFINED AT LINE 578 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
ARGLIST5:           04BF DEFINED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
LBRACE:             04CB DEFINED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
BLOCK:              04CB DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
BLOCK1:             04CF DEFINED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
BLOCK2:             04FB DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
BLOCK3:             04FE DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
BLOCK4:             0506 DEFINED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 607 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
BLOCK5:             0509 DEFINED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
BLOCK6:             0531 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
RBRACE:             0534 DEFINED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
BLOCKEND:           0534 DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
BLOCKEND1:          0566 DEFINED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
BLOCKEND2:          0572 DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
BLOCKEND3:          0584 DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
TICK:               0590 DEFINED AT LINE 713 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
CHAR:               0590 DEFINED AT LINE 714 IN MAIN.asm
CHAR1:              0593 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
CHAR2:              059F DEFINED AT LINE 725 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
CHAR3:              05A2 DEFINED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
BACKSLASH:          05A5 DEFINED AT LINE 732 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
COMMA:              05A7 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
DISCARD:            05A7 DEFINED AT LINE 738 IN MAIN.asm
DISCARD1:           05B4 DEFINED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
SLASH:              05B6 DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 308 IN MAIN.asm
DOT:                05D4 DEFINED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
DOT1:               05E0 DEFINED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
DOT2:               05E9 DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
DOT3:               05F3 DEFINED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
DOT4:               05F7 DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
DIVIDE:             05FE DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
DIVIDE1:            0603 DEFINED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
DIVIDE2:            0610 DEFINED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
DIVIDE3:            0611 DEFINED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
EQUALS:             0617 DEFINED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
LESSTHANEQ:         061F DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 304 IN MAIN.asm
LESSTHAN:           0624 DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
LESSTHAN1:          0629 DEFINED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
TRUE1:              062C DEFINED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
NULL1:              0632 DEFINED AT LINE 846 IN MAIN.asm
FALSE1:             0632 DEFINED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
LPAREN:             0638 DEFINED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
CARET:              063B DEFINED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
GO:                 063B DEFINED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
GO1:                063C DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
GO2:                0642 DEFINED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
GOBLOCK:            064E DEFINED AT LINE 874 IN MAIN.asm
GOBLOCK1:           064E DEFINED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
GOBLOCK2:           0673 DEFINED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
GOFUNC:             0681 DEFINED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
GOFUNC1:            069A DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
GOFUNC2:            06A0 DEFINED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
GOFUNC3:            06AB DEFINED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
GOFUNC4:            06C3 DEFINED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
GOFUNC5:            06C7 DEFINED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
GOFUNC6:            06CA DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
GOFUNC7:            06CD DEFINED AT LINE 961 IN MAIN.asm
GOFUNC8:            06D2 DEFINED AT LINE 967 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
HASH:               06DD DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
HEXNUM:             06DD DEFINED AT LINE 977 IN MAIN.asm
HEXNUM1:            06E0 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
HEXNUM2:            06E8 DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
UPCASE:             06FA DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 248 IN MAIN.asm
LOWCASE:            06FF DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
IDENT1:             0704 DEFINED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
QUESTION:           0711 DEFINED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
IF:                 0711 DEFINED AT LINE 1019 IN MAIN.asm
IFTE:               071D DEFINED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 1023 IN MAIN.asm
IFTE1:              071E DEFINED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 1026 IN MAIN.asm
STAR:               072A DEFINED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
MUL:                072A DEFINED AT LINE 1042 IN MAIN.asm
MUL2:               072C DEFINED AT LINE 1045 IN MAIN.asm
MUL3:               0734 DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
NUM:                0746 DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
NUM0:               074F DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
NUM1:               0750 DEFINED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
NUM2:               0768 DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
NUM3:               0773 DEFINED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
UNDERSCORE:         0776 DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
REMAIN:             0776 DEFINED AT LINE 1102 IN MAIN.asm
RPAREN:             077C DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 312 IN MAIN.asm
SEMICOLON:          0784 DEFINED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
SHIFTLEFT:          07A0 DEFINED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 299 IN MAIN.asm
SHIFTLEFT1:         07A8 DEFINED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
SHIFTLEFT2:         07A9 DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
SHIFTRIGHT:         07B0 DEFINED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
SHIFTRIGHT1:        07B8 DEFINED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
SHIFTRIGHT2:        07BC DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
DBLQUOTE:           07C3 DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
STRING:             07C3 DEFINED AT LINE 1174 IN MAIN.asm
STRING1:            07CC DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
STRING2:            07CF DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
STRING3:            07D8 DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
MINUS:              07EB DEFINED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 271 IN MAIN.asm
SUB:                07F7 DEFINED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
SUB1:               0801 DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
COMMAND:            080A DEFINED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
ERROR1:             084F DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
COMMAND_A:          0855 DEFINED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
COMMAND_B:          0863 DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
COMMAND_I:          0876 DEFINED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
COMMAND_P:          0884 DEFINED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
COMMAND_V:          0897 DEFINED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
COMMENT:            08AF DEFINED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
ABSOLUTE:           08B8 DEFINED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
ADDROF:             08C5 DEFINED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
ADDROF1:            08D9 DEFINED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
ADDROF2:            08E4 DEFINED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1360 IN MAIN.asm
BUFFERSTRING:       08E6 DEFINED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
BUFFERSTRING0:      08ED DEFINED AT LINE 1379 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
BUFFERSTRING1:      08F0 DEFINED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
BUFFERDEC:          0902 DEFINED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
BUFFERDEC0:         091A DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1401 IN MAIN.asm
BUFFERDEC1:         092A DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
BUFFERDEC2:         094A DEFINED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1440 IN MAIN.asm
BUFFERDEC3:         094C DEFINED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
BUFFERDEC4:         095C DEFINED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
BUFFERDEC5:         095D DEFINED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
BREAK:              0963 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
BREAK1:             096A DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
PARTIAL:            097D DEFINED AT LINE 1485 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
PRINTCHARS:         099D DEFINED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
PRINTCHARS1:        09A2 DEFINED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
PRINTCHARS2:        09A4 DEFINED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
PRINTSTACK:         09AE DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
PRINTSTACK1:        09C9 DEFINED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
PRINTSTACK2:        09D8 DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
CHARS:              09E5 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
CHARS1:             09E8 DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
CONSTHEAPSTART:     09ED DEFINED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
CONSTTIBSTART:      09F2 DEFINED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
VARHEAPPTR:         09F7 DEFINED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
VARTIBPTR:          0A00 DEFINED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
VARIABLE:           0A09 DEFINED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 1568 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
CONSTANT:           0A0C DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1559 IN MAIN.asm
                    > USED AT LINE 1563 IN MAIN.asm
INPUT:              0A0F DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
KEY:                0A1A DEFINED AT LINE 1593 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
OUTPUT:             0A23 DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
NUMBERS:            0A2C DEFINED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
FILTER:             0A32 DEFINED AT LINE 1620 IN MAIN.asm
MAP:                0A32 DEFINED AT LINE 1621 IN MAIN.asm
ZPRT:               0A34 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
ZPRT_ARGS:          0A3F DEFINED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
ZPRT_BLOCK:         0A41 DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
PRTDEC:             0A56 DEFINED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 146
PRTDEC0:            0A65 DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
PRTDEC1:            0A87 DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
PRTDEC2:            0A89 DEFINED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
PRTDEC3:            0A99 DEFINED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
PRTDEC4:            0A9A DEFINED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
PRTHEX:             0A9E DEFINED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0AA9 DEFINED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
PRTHEX3:            0AB2 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
PRTSTR0:            0ABD DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
PRTSTR:             0AC1 DEFINED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
NESTING:            0AC6 DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
NESTING0:           0AD0 DEFINED AT LINE 1735 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
NESTING1A:          0AD7 DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
NESTING1:           0ADA DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
NESTING2:           0AE9 DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
NESTING3:           0AEB DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
NESTING4:           0AF6 DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
PROMPT:             0AF8 DEFINED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
CRLF:               0B01 DEFINED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
PRINTSTR:           0B08 DEFINED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 139
INIT:               0B0F DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              0B28 DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
START:              0B2D DEFINED AT LINE 1801 IN MAIN.asm
INTERPRET:          0B43 DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
INTERPRET2:         0B4F DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
INTERPRET3:         0B57 DEFINED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
INTERPRET4:         0B5D DEFINED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
INTERPRET5:         0B62 DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
INTERPRET5A:        0B85 DEFINED AT LINE 1869 IN MAIN.asm
INTERPRET6:         0B87 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
INTERPRET7:         0B95 DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
INTERPRET8:         0BA8 DEFINED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
NEXT:               0BB3 DEFINED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 71 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
NEXT1:              0BC2 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
EXIT:               0BC9 DEFINED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
RUN:                0BCD DEFINED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
ERROR:              0BD1 DEFINED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
BACKSPACE_:         0BE1 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1846 IN MAIN.asm
EDIT_:              0BF1 DEFINED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
REEDIT_:            0C09 DEFINED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
PRINTSTACK_:        0C0C DEFINED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2571S43:  0D65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2572S43:  0DCB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2573S43:  0E2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2574S43:  0E93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2575S43:  0EF7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2576S43:  0F5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2577S43:  0FC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2578S43:  1029 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2579S43:  108F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2580S43:  10F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2581S43:  115D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2582S43:  11C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2583S43:  122F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2584S43:  1297 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2585S43:  1305 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2586S43:  1373 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2587S43:  13DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2588S43:  144F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2589S43:  14C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2590S43:  1535 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2591S43:  15A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2592S43:  1615 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2593S43:  1685 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2594S43:  16F1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2595S43:  175D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2596S43:  17D1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2597S43:  183D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2598S43:  18A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2599S43:  1917 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2600S43:  1995 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2601S43:  1A01 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2602S43:  1A75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2603S43:  1AE1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2604S43:  1B51 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2605S43:  1BBD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2606S43:  1C2B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2607S43:  1C99 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2608S43:  1D05 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2609S43:  1D71 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2610S43:  1DDD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2611S43:  1E49 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2612S43:  1EB5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2613S43:  1F21 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2614S43:  1F8D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2615S43:  1FF9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2616S43:  2067 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2617S43:  20D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2618S43:  2143 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2619S43:  21B3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2620S43:  2223 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2621S43:  228D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2622S43:  22F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2623S43:  2367 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2624S43:  23DD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2625S43:  2453 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2626S43:  24CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2627S43:  2551 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2628S43:  25D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2629S43:  2641 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2630S43:  26AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2631S43:  271F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2632S43:  2791 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2633S43:  2801 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2634S43:  286F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2635S43:  28DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2636S43:  2955 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2637S43:  29CF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2638S43:  2A45 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2639S43:  2AC5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2640S43:  2B47 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2641S43:  2BCF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2642S43:  2C5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2643S43:  2CD9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2644S43:  2D5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2645S43:  2DE3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2646S43:  2E6B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2647S43:  2EF1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2648S43:  2F85 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2649S43:  3007 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2650S43:  3095 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2651S43:  3125 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2652S43:  31B7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2653S43:  3255 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2654S43:  32F3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2655S43:  336F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2656S43:  33EB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2657S43:  3473 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2658S43:  34FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2659S43:  3593 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2660S43:  3633 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2661S43:  36D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2662S43:  375B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2663S43:  37EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2664S43:  387F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2665S43:  3915 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2666S43:  39C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2667S43:  3A39 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2668S43:  3AB1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2669S43:  3B29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2670S43:  3BA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2671S43:  3C11 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2672S43:  3C81 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2673S43:  3CF1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2674S43:  3D61 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2675S43:  3DDF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2676S43:  3E5F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2677S43:  3ECF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2678S43:  3F4F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2679S43:  3FE7 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3FF2 DEFINED AT LINE 144
EXECSTR:            3FF8 DEFINED AT LINE 151
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              4180 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               4200 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1363 IN MAIN.asm
                    > USED AT LINE 1792 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           42D0 DEFINED AT LINE 11 IN ram.asm
RST08:              42D0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              42D2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              42D4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              42D6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              42D8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              42DA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               42DC DEFINED AT LINE 19 IN ram.asm
INTVEC:             42DE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             42E0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            42E2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            42E4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            42E6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1789 IN MAIN.asm
VDATAWIDTH:         42E6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
VTIBPTR:            42E8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1398 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 1572 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
VNEXT:              42EA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1786 IN MAIN.asm
VHEAPPTR:           42EC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
VPOINTER:           42EE DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 346 IN MAIN.asm
                    > USED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
VREMAIN:            42F0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
VSAVEDIP:           42F2 DEFINED AT LINE 39 IN ram.asm
VSAVEDSP:           42F4 DEFINED AT LINE 40 IN ram.asm
VSAVEDBP:           42F6 DEFINED AT LINE 41 IN ram.asm
VCHECKSUM:          42F8 DEFINED AT LINE 42 IN ram.asm
VTEMP1:             42FA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
VTEMP2:             42FC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
VLASTDEF:           42FE DEFINED AT LINE 48 IN ram.asm
VHASHSTR:           4300 DEFINED AT LINE 49 IN ram.asm
TBPTR:              4302 DEFINED AT LINE 50 IN ram.asm
TIB:                4400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 70 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
PAD:                4500 DEFINED AT LINE 56 IN ram.asm
HEAP:               4600 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 72 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 1558 IN MAIN.asm
