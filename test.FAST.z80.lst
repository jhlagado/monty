0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hb./db"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hb./db `\r\n`.s"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 50               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 50               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 50               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 50               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 50               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 50               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 50               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 50               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 50               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 50               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4E               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 50               LD   (RST08),HL   
0094   22 D2 50               LD   (RST10),HL   
0097   22 D4 50               LD   (RST18),HL   
009A   22 D6 50               LD   (RST20),HL   
009D   22 D8 50               LD   (RST28),HL   
00A0   22 DA 50               LD   (RST30),HL   
00A3   22 DE 50               LD   (INTVEC),HL   
00A6   22 E0 50               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 50               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 50               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 11               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   04                     DB   lsb(bang_)   ; !     1
0181   41                     DB   lsb(dquote_)   ; "     2
0182   44                     DB   lsb(hash_)   ; #     1
0183   5C                     DB   lsb(dollar_)   ; $     1
0184   5F                     DB   lsb(percent_)   ; %     1
0185   62                     DB   lsb(amper_)   ; &     1
0186   6D                     DB   lsb(quote_)   ; '     2
0187   70                     DB   lsb(lparen_)   ; (     1
0188   73                     DB   lsb(rparen_)   ; )     1
0189   7B                     DB   lsb(star_)   ; *     1
018A   97                     DB   lsb(plus_)   ; +     1
018B   B3                     DB   lsb(comma_)   ; ,     2
018C   B6                     DB   lsb(minus_)   ; -     1
018D   D4                     DB   lsb(dot_)   ; .     2
018E   D7                     DB   lsb(slash_)   ; /	    1
018F   DA                     DB   lsb(num_)   ; 0     1
0190   DA                     DB   lsb(num_)   ; 1
0191   DA                     DB   lsb(num_)   ; 2
0192   DA                     DB   lsb(num_)   ; 3
0193   DA                     DB   lsb(num_)   ; 4
0194   DA                     DB   lsb(num_)   ; 5
0195   DA                     DB   lsb(num_)   ; 6
0196   DA                     DB   lsb(num_)   ; 7
0197   DA                     DB   lsb(num_)   ; 8
0198   DA                     DB   lsb(num_)   ; 9
0199   DD                     DB   lsb(colon_)   ; :     2
019A   F6                     DB   lsb(semicolon_)   ; ;     2
019B   2F                     DB   lsb(lt_)   ; <     1
019C   15                     DB   lsb(eq_)   ; =     1
019D   24                     DB   lsb(gt_)   ; >     1
019E   F9                     DB   lsb(question_)   ; ?     1
019F   8E                     DB   lsb(at_)   ; @     2
01A0   FC                     DB   lsb(upcase_)   ; A     1
01A1   FC                     DB   lsb(upcase_)   ; B
01A2   FC                     DB   lsb(upcase_)   ; C
01A3   FC                     DB   lsb(upcase_)   ; D
01A4   FC                     DB   lsb(upcase_)   ; E
01A5   FC                     DB   lsb(upcase_)   ; F
01A6   FC                     DB   lsb(upcase_)   ; G
01A7   FC                     DB   lsb(upcase_)   ; h
01A8   FC                     DB   lsb(upcase_)   ; I
01A9   FC                     DB   lsb(upcase_)   ; J
01AA   FC                     DB   lsb(upcase_)   ; K
01AB   FC                     DB   lsb(upcase_)   ; L
01AC   FC                     DB   lsb(upcase_)   ; M
01AD   FC                     DB   lsb(upcase_)   ; N
01AE   FC                     DB   lsb(upcase_)   ; O
01AF   FC                     DB   lsb(upcase_)   ; p
01B0   FC                     DB   lsb(upcase_)   ; Q
01B1   FC                     DB   lsb(upcase_)   ; R
01B2   FC                     DB   lsb(upcase_)   ; S
01B3   FC                     DB   lsb(upcase_)   ; T
01B4   FC                     DB   lsb(upcase_)   ; U
01B5   FC                     DB   lsb(upcase_)   ; V
01B6   FC                     DB   lsb(upcase_)   ; W
01B7   FC                     DB   lsb(upcase_)   ; X
01B8   FC                     DB   lsb(upcase_)   ; Y
01B9   FC                     DB   lsb(upcase_)   ; Z
01BA   13                     DB   lsb(lbrack_)   ; [     2
01BB   2F                     DB   lsb(backslash_)   ; \     2
01BC   50                     DB   lsb(rbrack_)   ; ]     2
01BD   A0                     DB   lsb(caret_)   ; ^     1
01BE   B6                     DB   lsb(underscore_)   ; _     2
01BF   B9                     DB   lsb(grave_)   ; `     2   	
01C0   01                     DB   lsb(lowcase_)   ; a     1
01C1   01                     DB   lsb(lowcase_)   ; b
01C2   01                     DB   lsb(lowcase_)   ; c
01C3   01                     DB   lsb(lowcase_)   ; d
01C4   01                     DB   lsb(lowcase_)   ; e
01C5   01                     DB   lsb(lowcase_)   ; f
01C6   01                     DB   lsb(lowcase_)   ; g
01C7   01                     DB   lsb(lowcase_)   ; h
01C8   01                     DB   lsb(lowcase_)   ; i
01C9   01                     DB   lsb(lowcase_)   ; j
01CA   01                     DB   lsb(lowcase_)   ; k
01CB   01                     DB   lsb(lowcase_)   ; l
01CC   01                     DB   lsb(lowcase_)   ; m
01CD   01                     DB   lsb(lowcase_)   ; n
01CE   01                     DB   lsb(lowcase_)   ; o
01CF   01                     DB   lsb(lowcase_)   ; p
01D0   01                     DB   lsb(lowcase_)   ; q
01D1   01                     DB   lsb(lowcase_)   ; r
01D2   01                     DB   lsb(lowcase_)   ; s
01D3   01                     DB   lsb(lowcase_)   ; t
01D4   01                     DB   lsb(lowcase_)   ; u
01D5   01                     DB   lsb(lowcase_)   ; v
01D6   01                     DB   lsb(lowcase_)   ; w
01D7   01                     DB   lsb(lowcase_)   ; x
01D8   01                     DB   lsb(lowcase_)   ; y
01D9   01                     DB   lsb(lowcase_)   ; z
01DA   CF                     DB   lsb(lbrace_)   ; {     1
01DB   D4                     DB   lsb(pipe_)   ; |     1
01DC   DE                     DB   lsb(rbrace_)   ; }     1
01DD   E1                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4E                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 4F                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   99 0F                  DW   next   ; nNext
01E8   22 51                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                BANG_:       
0204                BANG:        ; logical invert, any non zero value
0204   03                     INC   bc   
0205   0A                     LD   a,(bc)   
0206   FE 3D                  CP   "="   
0208   20 05                  JR   nz,not   
020A   E1                     POP   hl   
020B   D1                     POP   de   
020C   C3 24 0C               JP   notequals   
020F                NOT:         
020F   0B                     DEC   bc   
0210   21 00 00               LD   hl,0   ; is considered true
0213   18 0B                  JR   eq1   
0215                EQ_:         
0215                EQ:          
0215   03                     INC   bc   
0216   0A                     LD   a,(bc)   
0217   FE 3D                  CP   "="   
0219   28 04                  JR   z,eq0   
021B   0B                     DEC   bc   
021C   C3 F8 0B               JP   assign   
021F                EQ0:         
021F   E1                     POP   hl   
0220                EQ1:         
0220   D1                     POP   de   
0221   C3 1D 0C               JP   equals   
0224                GT_:         
0224                GT:          
0224   03                     INC   bc   
0225   0A                     LD   a,(bc)   
0226   FE 3E                  CP   ">"   
0228   CA 54 0C               JP   z,shiftRight   
022B   D1                     POP   de   
022C   E1                     POP   hl   
022D   18 09                  JR   lt1   
022F                LT_:         
022F                LT:          
022F   03                     INC   bc   
0230   0A                     LD   a,(bc)   
0231   FE 3C                  CP   "<"   
0233   CA 44 0C               JP   z,shiftLeft   
0236   E1                     POP   hl   
0237   D1                     POP   de   
0238                LT1:         
0238   FE 3D                  CP   "="   
023A   CA 2B 0C               JP   z,lessthaneq   
023D   0B                     DEC   bc   
023E   C3 30 0C               JP   lessthan   
0241                DQUOTE_:      
0241   C3 DC 0C               JP   dquote   
0244                             ; index of an array, based on vDataWidth 22
0244                             ; array* num -- value    ; also sets vPointer to address
0244                HASH_:       
0244                HASH:        
0244                ARRAYINDEX:      
0244   E1                     POP   hl   ; hl = index
0245   D1                     POP   de   ; de = array
0246   3A E6 50               LD   a,(vDataWidth)   ; a = data width
0249   3D                     DEC   a   
024A   28 01                  JR   z,arrayIndex1   
024C                ARRAYINDEX0:      
024C   29                     ADD   hl,hl   ; if data width = 2 then double
024D                ARRAYINDEX1:      
024D   19                     ADD   hl,de   ; add addr
024E   22 F8 50               LD   (vPointer),hl   ; store address in setter
0251   16 00                  LD   d,0   
0253   5E                     LD   e,(hl)   
0254   B7                     OR   a   ; check data width again
0255   28 02                  JR   z,arrayIndex2   
0257   23                     INC   hl   
0258   56                     LD   d,(hl)   
0259                ARRAYINDEX2:      
0259   D5                     PUSH   de   
025A   DD E9                  JP   (ix)   
025C                DOLLAR_:      
025C   C3 98 0A               JP   dollar   
025F                PERCENT_:      
025F   C3 81 0C               JP   percent   
0262                             ; & and                          14
0262                             ; a b -- c
0262                AMPER_:      
0262                AMPER:       
0262                AND:         
0262   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0263   E1                     POP   hl   
0264   7B                     LD   a,e   
0265   A5                     AND   l   
0266   6F                     LD   l,a   
0267   7A                     LD   a,d   
0268   A4                     AND   h   
0269                AND1:        
0269   67                     LD   h,a   
026A   E5                     PUSH   hl   
026B   DD E9                  JP   (ix)   
026D                QUOTE_:      
026D   C3 67 0C               JP   quote   
0270                             ; { block start                 ; 4
0270                             ; -- block*
0270                LPAREN_:      
0270   C3 CF 03               JP   lbrace   
0273                             ;                               4
0273                RPAREN_:      
0273                RPAREN:      
0273   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0276   FD 46 09               LD   b,(iy+9)   
0279   DD E9                  JP   (ix)   
027B                STAR_:       ; 21
027B                STAR:        
027B                MUL:         
027B   D1                     POP   de   ; get first value
027C   E1                     POP   hl   
027D                MUL2:        
027D   C5                     PUSH   bc   ; Preserve the IP
027E   44 4D                  LD   bc,hl   ; bc = 2nd value
0280   21 00 00               LD   hl,0   
0283   3E 10                  LD   a,16   
0285                MUL3:        
0285   29                     ADD   hl,hl   
0286   CB 13                  RL   e   
0288   CB 12                  RL   d   
028A   30 04                  JR   nc,$+6   
028C   09                     ADD   hl,bc   
028D   30 01                  JR   nc,$+3   
028F   13                     INC   de   
0290   3D                     DEC   a   
0291   20 F2                  JR   nz,mul3   
0293   C1                     POP   bc   ; Restore the IP
0294   C3 A6 02               JP   add3   
0297                             ; + add                         25
0297                             ; a b -- c
0297                PLUS_:       
0297                PLUS:        
0297                ADD:         
0297   03                     INC   bc   
0298   0A                     LD   a,(bc)   
0299   FE 2B                  CP   "+"   ; ++ increment variable
029B   20 05                  JR   nz,add1   
029D   E1                     POP   hl   
029E   23                     INC   hl   
029F   C3 FA 0B               JP   assign0   
02A2                ADD1:        
02A2   0B                     DEC   bc   
02A3   D1                     POP   de   ; second term
02A4   E1                     POP   hl   ; first term
02A5   19                     ADD   hl,de   
02A6                ADD3:        
02A6   03                     INC   bc   
02A7   0A                     LD   a,(bc)   
02A8   FE 3D                  CP   "="   
02AA   28 04                  JR   z,add4   
02AC   0B                     DEC   bc   
02AD   E5                     PUSH   hl   
02AE   DD E9                  JP   (ix)   
02B0                ADD4:        
02B0   C3 FA 0B               JP   assign0   
02B3                COMMA_:      
02B3   C3 DC 0C               JP   comma   
02B6                             ; - sub                          23
02B6                             ; a b -- c
02B6                MINUS_:      
02B6                MINUS:       
02B6   03                     INC   bc   ; check if sign of a number
02B7   0A                     LD   a,(bc)   
02B8   0B                     DEC   bc   
02B9   FE 30                  CP   "0"   
02BB   38 05                  JR   c,sub   
02BD   FE 3A                  CP   "9"+1   
02BF   DA CE 0A               JP   c,num   
02C2                SUB:         ; Subtract the value 2nd on stack from top of stack
02C2   03                     INC   bc   
02C3   FE 2D                  CP   "-"   
02C5   20 05                  JR   nz,sub1   
02C7   E1                     POP   hl   
02C8   2B                     DEC   hl   
02C9   C3 FA 0B               JP   assign0   
02CC                SUB1:        
02CC   0B                     DEC   bc   
02CD   D1                     POP   de   
02CE   E1                     POP   hl   
02CF   B7                     OR   a   
02D0   ED 52                  SBC   hl,de   
02D2   18 D2                  JR   add3   
02D4                DOT_:        
02D4   C3 00 04               JP   dot   
02D7                SLASH_:      
02D7   C3 00 05               JP   slash   
02DA                NUM_:        
02DA   C3 CE 0A               JP   num   
02DD                COLON_:      
02DD   C3 E0 02               JP   colon   
02E0                COLON:       
02E0   03                     INC   bc   ; arg_list must ve immediately followed by {
02E1   0A                     LD   a,(bc)   
02E2   FE 3D                  CP   "="   ; := definition
02E4   28 07                  JR   z,defineStart   
02E6   0B                     DEC   bc   
02E7   21 01 00               LD   hl,1   
02EA   C3 BD 0F               JP   error   
02ED                DEFINESTART:      
02ED   E1                     POP   hl   ; discard variable value
02EE   2A F8 50               LD   hl,(vPointer)   ; vDefine = vPointer
02F1   22 F4 50               LD   (vDefine),hl   
02F4   DD E9                  JP   (ix)   
02F6                SEMICOLON_:      
02F6   C3 09 0C               JP   semicolon   
02F9                QUESTION_:      
02F9   C3 B5 0A               JP   question   
02FC                             ;                               18
02FC                UPCASE_:      
02FC                UPCASE:      
02FC   0A                     LD   a,(bc)   ; a = identifier char
02FD   D6 41                  SUB   "A"   ; "A" = 0
02FF   18 05                  JR   ident1   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3 BEGIN *********************************************
0301                LOWCASE_:      
0301                LOWCASE:      
0301   0A                     LD   a,(bc)   
0302   D6 61                  SUB   "a"   
0304   C6 1A                  ADD   a,26   
0306                IDENT1:      
0306   87                     ADD   a,a   ; l = a * 2
0307   6F                     LD   l,a   
0308   26 50                  LD   h,msb(vars)   
030A   22 F8 50               LD   (vPointer),hl   ; store address in setter
030D   5E                     LD   e,(hl)   
030E   23                     INC   hl   
030F   56                     LD   d,(hl)   
0310   D5                     PUSH   de   
0311   DD E9                  JP   (ix)   
0313                             ; [                             14
0313                LBRACK_:      
0313                LBRACK:      
0313                ARRAYSTART:      
0313   11 00 00               LD   de,0   ; create stack frame
0316   D5                     PUSH   de   ; push null for IP
0317   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
031A   FD 56 05               LD   d,(iy+5)   ; 
031D   D5                     PUSH   de   ; 
031E   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0321   FD 56 03               LD   d,(iy+3)   ; 
0324   D5                     PUSH   de   ; 
0325   FD E5                  PUSH   iy   ; push BP
0327   FD 21 00 00            LD   iy,0   ; BP = SP
032B   FD 39                  ADD   iy,sp   
032D   DD E9                  JP   (ix)   
032F                             ; \                             19
032F                BACKSLASH_:      
032F                BACKSLASH:      
032F                LAMBDA:      
032F   DD E5                  PUSH   ix   
0331   CD F7 0C               CALL   parseArgs   
0334                LAMBDA1:      
0334   03                     INC   bc   ; arg_list must ve immediately followed by {
0335   0A                     LD   a,(bc)   
0336   FE 21                  CP   " "+1   ; skip white space
0338   38 FA                  JR   c,lambda1   
033A   FE 7B                  CP   "{"   
033C   28 06                  JR   z,lambda2   
033E   21 02 00               LD   hl,2   ; error 2: parse error
0341   C3 BD 0F               JP   error   
0344                LAMBDA2:      
0344   CD 2D 0D               CALL   parseBlock   
0347   CD 97 0D               CALL   createFunc   
034A   E1                     POP   hl   
034B   DD E1                  POP   ix   
034D   E5                     PUSH   hl   
034E   DD E9                  JP   (ix)   
0350                RBRACK_:      
0350                RBRACK:      
0350                ARRAYEND:      ; 53
0350   FD 54                  LD   d,iyh   ; de = BP
0352   FD 5D                  LD   e,iyl   
0354   ED 43 04 51            LD   (vTemp1),bc   ; save IP
0358   62 6B                  LD   hl,de   ; hl = de = BP
035A   B7                     OR   a   
035B   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035D   CB 3C                  SRL   h   ; 
035F   CB 1D                  RR   l   
0361   44 4D                  LD   bc,hl   ; bc = count
0363   2A F0 50               LD   hl,(vHeapPtr)   ; hl = array[-4]
0366   71                     LD   (hl),c   ; write num items in length word
0367   23                     INC   hl   
0368   70                     LD   (hl),b   
0369   23                     INC   hl   ; hl = array[0], bc = count
036A                             ; de = BP, hl = array[0], bc = count
036A   18 15                  JR   arrayEnd3   
036C                ARRAYEND1:      
036C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036F   77                     LD   (hl),a   ; write lsb of array item
0370   23                     INC   hl   ; move to msb of array item
0371   3A E6 50               LD   a,(vDataWidth)   ; vDataWidth=1?
0374   3D                     DEC   a   
0375   28 05                  JR   z,arrayEnd2   
0377   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
037A   77                     LD   (hl),a   ; write msb of array item
037B   23                     INC   hl   ; move to next word in array
037C                ARRAYEND2:      
037C   FD 2B                  DEC   iy   ; move to next word on stack
037E   FD 2B                  DEC   iy   
0380   0B                     DEC   bc   ; dec items count
0381                ARRAYEND3:      
0381   79                     LD   a,c   ; if not zero loop
0382   B0                     OR   b   
0383   20 E7                  JR   nz,arrayEnd1   
0385   EB                     EX   de,hl   ; de = end of array, hl = BP
0386   F9                     LD   sp,hl   ; sp = BP
0387   E1                     POP   hl   ; de = end of array, hl = old BP
0388   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0389   FD 62                  LD   iyh,d   
038B   FD 6B                  LD   iyl,e   
038D   D1                     POP   de   ; pop arg_list (discard)
038E   D1                     POP   de   ; pop first_arg* (discard)
038F   D1                     POP   de   ; pop IP (discard)
0390   ED 5B F0 50            LD   de,(vHeapPtr)   ; de = array[-2]
0394   13                     INC   de   
0395   13                     INC   de   
0396   D5                     PUSH   de   ; return array[0]
0397   22 F0 50               LD   (vHeapPtr),hl   ; move heap* to end of array
039A   ED 4B 04 51            LD   bc,(vTemp1)   ; restore IP
039E   DD E9                  JP   (ix)   
03A0                CARET_:      
03A0                             ; execute a block of code which ends with } 116
03A0                             ; creates a root scope if BP == stack
03A0                             ; else uses outer scope
03A0                CARET:       
03A0                GO:          
03A0   D1                     POP   de   ; de = block*
03A1                GO1:         
03A1   7B                     LD   a,e   ; if block* == null, exit
03A2   B2                     OR   d   
03A3   20 02                  JR   nz,go2   
03A5   DD E9                  JP   (ix)   
03A7                GO2:         
03A7   1A                     LD   a,(de)   
03A8   FE 7B                  CP   "{"   
03AA   CA 6B 0B               JP   z,goBlock   
03AD   FE 28                  CP   "("   
03AF   C2 9E 0B               JP   nz,goFunc   
03B2   D5                     PUSH   de   ; push de just before stack frame
03B3   CA 6B 0B               JP   z,goBlock   
03B6                UNDERSCORE_:      
03B6   C3 DC 0C               JP   underscore   
03B9                GRAVE_:      
03B9                GRAVE:       
03B9                PRINTLITERAL:      
03B9   03                     INC   bc   ; move to first char
03BA   ED 5B EC 50            LD   de,(vBufPtr)   ; de = buffer*
03BE   18 03                  JR   printLiteral1   
03C0                PRINTLITERAL0:      
03C0   12                     LD   (de),a   ; a -> buffer*
03C1   13                     INC   de   ; string*++,
03C2   03                     INC   bc   
03C3                PRINTLITERAL1:      
03C3   0A                     LD   a,(bc)   ; a <- string*
03C4   FE 60                  CP   "`"   ; if ` exit loop
03C6   20 F8                  JR   nz,printLiteral0   
03C8   ED 53 EC 50            LD   (vBufPtr),de   ; save buffer*' in pointer
03CC   C3 B6 0C               JP   dotNext   
03CF                LBRACE_:      
03CF                LBRACE:      
03CF   CD 2D 0D               CALL   parseBlock   
03D2   DD E9                  JP   (ix)   
03D4                             ; | or                          11
03D4                             ; a b -- c
03D4                PIPE_:       
03D4                PIPE:        
03D4                OR:          
03D4   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D5   E1                     POP   hl   
03D6   7B                     LD   a,e   
03D7   B5                     OR   l   
03D8   6F                     LD   l,a   
03D9   7A                     LD   a,d   
03DA   B4                     OR   h   
03DB   C3 69 02               JP   and1   
03DE                RBRACE_:      
03DE   C3 FE 0A               JP   rbrace   
03E1                             ; ~ char                        8
03E1                TILDE_:      
03E1                TILDE:       
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                             ;********************** PAGE 3 END *********************************************
03E9                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 4F 0E               CALL   jumpTable   
0403   61                     DB   "a"   ; .a print array
0404   46 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   12 04                  DW   printChar   
0409   68                     DB   "h"   ; .h print hex without $ prefix
040A   A7 04                  DW   printHex0   
040C   73                     DB   "s"   ; .s print string
040D   21 04                  DW   printString   
040F   00                     DB   NUL   ; .  print number, fall through
0410   36 04                  DW   printNumber   
0412                             ; .c print char
0412                             ; char --
0412                PRINTCHAR:      
0412   E1                     POP   hl   ; a = char
0413   7D                     LD   a,l   
0414   ED 5B EC 50            LD   de,(vBufPtr)   ; de = buffer*
0418   12                     LD   (de),a   
0419   13                     INC   de   
041A   ED 53 EC 50            LD   (vBufPtr),de   ; save buffer*'
041E   C3 B6 0C               JP   dotNext   
0421                             ; .s print string
0421                             ; string* --
0421                PRINTSTRING:      
0421   E1                     POP   hl   ; hl = string*
0422   ED 5B EC 50            LD   de,(vBufPtr)   ; de = buffer*
0426   18 03                  JR   printString1   
0428                PRINTSTRING0:      
0428   12                     LD   (de),a   ; a -> buffer*
0429   13                     INC   de   ; string*++,
042A   23                     INC   hl   
042B                PRINTSTRING1:      
042B   7E                     LD   a,(hl)   ; a <- string*
042C   B7                     OR   a   ; if NUL exit loop
042D   20 F9                  JR   nz,printString0   
042F   ED 53 EC 50            LD   (vBufPtr),de   ; save buffer*' in pointer
0433   C3 B6 0C               JP   dotNext   
0436                             ; . print decimal
0436                             ; value --
0436                PRINTNUMBER:      
0436   3A E8 50               LD   a,(vNumBase)   
0439   FE 10                  CP   16   
043B   CA AD 04               JP   z,printHex   ; else falls through
043E   C3 41 04               JP   printDec   
0441                             ; print decimal                 ; 70
0441                             ; value --
0441                PRINTDEC:      
0441   ED 5B EC 50            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0445   D9                     EXX      
0446   E1                     POP   hl   ; hl = value
0447   3A E6 50               LD   a,(vDataWidth)   
044A   3D                     DEC   a   
044B   20 02                  JR   nz,printDec1   
044D   26 00                  LD   h,0   
044F                PRINTDEC1:      
044F   CD 5E 04               CALL   printDec2   
0452   D9                     EXX      ; de = buffer*' bc = IP
0453   3E 20                  LD   a," "   ; append space to buffer
0455   12                     LD   (de),a   
0456   13                     INC   de   ; string*++,
0457   ED 53 EC 50            LD   (vBufPtr),de   ; update buffer* with buffer*'
045B   C3 B6 0C               JP   dotNext   
045E                             ; hl = value
045E                             ; de' = buffer*
045E                             ; a, bc, de, hl destroyed
045E                PRINTDEC2:      
045E   CB 7C                  BIT   7,h   
0460   28 0C                  JR   z,printDec3   
0462   D9                     EXX      
0463   3E 2D                  LD   a,"-"   
0465   12                     LD   (de),a   
0466   13                     INC   de   
0467   D9                     EXX      
0468   AF                     XOR   a   
0469   95                     SUB   l   
046A   6F                     LD   l,a   
046B   9F                     SBC   a,a   
046C   94                     SUB   h   
046D   67                     LD   h,a   
046E                PRINTDEC3:      
046E   0E 00                  LD   c,0   ; leading zeros flag = false
0470   11 F0 D8               LD   de,-10000   
0473   CD 8E 04               CALL   printDec4   
0476   11 18 FC               LD   de,-1000   
0479   CD 8E 04               CALL   printDec4   
047C   11 9C FF               LD   de,-100   
047F   CD 8E 04               CALL   printDec4   
0482   1E F6                  LD   e,-10   
0484   CD 8E 04               CALL   printDec4   
0487   0C                     INC   c   ; flag = true for at least digit
0488   1E FF                  LD   e,-1   
048A   CD 8E 04               CALL   printDec4   
048D   C9                     RET      
048E                PRINTDEC4:      
048E   06 2F                  LD   b,"0"-1   
0490                PRINTDEC5:      
0490   04                     INC   b   
0491   19                     ADD   hl,de   
0492   38 FC                  JR   c,printDec5   
0494   ED 52                  SBC   hl,de   
0496   3E 30                  LD   a,"0"   
0498   B8                     CP   b   
0499   20 05                  JR   nz,printDec6   
049B   AF                     XOR   a   
049C   B1                     OR   c   
049D   C8                     RET   z   
049E   18 01                  JR   printDec7   
04A0                PRINTDEC6:      
04A0   0C                     INC   c   
04A1                PRINTDEC7:      
04A1   78                     LD   a,b   
04A2   D9                     EXX      
04A3   12                     LD   (de),a   
04A4   13                     INC   de   
04A5   D9                     EXX      
04A6   C9                     RET      
04A7                             ; buffer hex                    37
04A7                             ; value --
04A7                PRINTHEX0:      
04A7   ED 5B EC 50            LD   de,(vBufPtr)   
04AB   18 08                  JR   printHex1   
04AD                PRINTHEX:      
04AD   ED 5B EC 50            LD   de,(vBufPtr)   
04B1   3E 24                  LD   a,"$"   ; # prefix
04B3   12                     LD   (de),a   
04B4   13                     INC   de   ; string*++,
04B5                PRINTHEX1:      
04B5   E1                     POP   hl   ; hl = value
04B6   3A E6 50               LD   a,(vDataWidth)   
04B9   3D                     DEC   a   
04BA   28 04                  JR   z,printHex2   
04BC   7C                     LD   a,h   
04BD   CD CF 04               CALL   printHex3   
04C0                PRINTHEX2:      
04C0   7D                     LD   a,l   
04C1   CD CF 04               CALL   printHex3   
04C4   3E 20                  LD   a," "   ; append space to buffer
04C6   12                     LD   (de),a   
04C7   13                     INC   de   ; string*++,
04C8   ED 53 EC 50            LD   (vBufPtr),de   
04CC   C3 B6 0C               JP   dotNext   
04CF                PRINTHEX3:      
04CF   F5                     PUSH   af   
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   1F                     RRA      
04D4   CD D8 04               CALL   printHex4   
04D7   F1                     POP   af   
04D8                PRINTHEX4:      
04D8   E6 0F                  AND   0x0F   
04DA   C6 90                  ADD   a,0x90   
04DC   27                     DAA      
04DD   CE 40                  ADC   a,0x40   
04DF   27                     DAA      
04E0   12                     LD   (de),a   
04E1   13                     INC   de   ; string*++,
04E2   C9                     RET      
04E3                             ;********************** PAGE 4 END *********************************************
04E3                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 4C 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 39 0E               CALL   commandTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C5                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C5                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C5                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   C5                     DB   lsb(command_nop_)   
0515   71                     DB   lsb(key_)   
0516   C5                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C5                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A4                     DB   lsb(true_)   
051F   C5                     DB   lsb(command_nop_)   
0520   A7                     DB   lsb(command_v_)   
0521   BC                     DB   lsb(command_w_)   
0522   C2                     DB   lsb(xor_)   
0523   C5                     DB   lsb(command_nop_)   
0524   C5                     DB   lsb(command_nop_)   
0525   C8                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   DE 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   EC 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   C6 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   0D 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   16 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   6F 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   04 0F                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   44 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   2A 06                  DW   break   
0541   00                     DB   NUL   
0542   6F 06                  DW   error1   
0544                COMMAND_D_:      
0544   62                     DB   "b"   ; /db decimal base
0545   67 06                  DW   decBase   
0547   00                     DB   NUL   
0548   67 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   6F 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   C1 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   0D 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   11 09                  DW   filter   
0556   31                     DB   "1"   
0557   02 10                  DW   f1   
0559   32                     DB   "2"   
055A   0E 10                  DW   f2   
055C   33                     DB   "3"   
055D   1A 10                  DW   f3   
055F   34                     DB   "4"   
0560   26 10                  DW   f4   
0562   00                     DB   NUL   
0563   3E 0C                  DW   false1   
0565                COMMAND_H_:      
0565   62                     DB   "b"   ; /hb hex base
0566   75 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   6F 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   7B 06                  DW   input   
056E   00                     DB   NUL   
056F   6F 06                  DW   error1   
0571                KEY_:        
0571   00                     DB   NUL   
0572   86 06                  DW   key   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   CF 08                  DW   map   
0577   00                     DB   NUL   
0578   6F 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   8F 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   6F 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   98 06                  DW   quit   
0583   00                     DB   NUL   
0584   6F 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   A2 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   A8 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   32 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   6F 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   AE 06                  DW   stringBegin   
0595   65                     DB   "e"   
0596   B6 06                  DW   stringEnd   
0598   69                     DB   "i"   
0599   47 08                  DW   stringIter   
059B   6C                     DB   "l"   
059C   E5 06                  DW   stringLength   
059E   73                     DB   "s"   
059F   F4 06                  DW   stringSize   
05A1   00                     DB   NUL   
05A2   6F 06                  DW   error1   
05A4                TRUE_:       
05A4   00                     DB   NUL   
05A5   38 0C                  DW   true1   
05A7                COMMAND_V_:      
05A7   62                     DB   "b"   
05A8   00 07                  DW   varBufPtr   
05AA   68                     DB   "h"   
05AB   09 07                  DW   varHeapPtr   
05AD   74                     DB   "t"   
05AE   12 07                  DW   varTIBPtr   
05B0   42                     DB   "B"   
05B1   61 06                  DW   constBufStart   
05B3   48                     DB   "H"   
05B4   55 06                  DW   constHeapStart   
05B6   54                     DB   "T"   
05B7   5B 06                  DW   constTIBStart   
05B9   00                     DB   NUL   
05BA   6F 06                  DW   error1   
05BC                COMMAND_W_:      
05BC   6D                     DB   "m"   ; /wm word mode
05BD   21 07                  DW   wordMode   
05BF   00                     DB   NUL   
05C0   6F 06                  DW   error1   
05C2                XOR_:        
05C2   00                     DB   NUL   
05C3   27 07                  DW   xor   
05C5                             ; 2
05C5                COMMAND_NOP_:      
05C5   00                     DB   NUL   
05C6   CB 05                  DW   nop   
05C8                             ; 3
05C8                COMMAND_DEFAULT_:      
05C8   00                     DB   NUL   
05C9   CD 05                  DW   div   
05CB                             ;********************** PAGE 5 END *********************************************
05CB                NOP:         
05CB   DD E9                  JP   (ix)   
05CD                             ;                               32
05CD                DIV:         
05CD   D1                     POP   de   
05CE   E1                     POP   hl   
05CF   C5                     PUSH   bc   ; preserve the IP
05D0   44 4D                  LD   bc,hl   
05D2   CD DE 0C               CALL   divide   
05D5   EB                     EX   de,hl   
05D6   ED 53 FA 50            LD   (vRemain),de   
05DA   C1                     POP   bc   
05DB   C3 A6 02               JP   add3   
05DE                             ; /ab absolute
05DE                             ; num -- num
05DE                ABSOLUTE:      
05DE   E1                     POP   hl   
05DF   CB 7C                  BIT   7,h   
05E1   28 06                  JR   z,absolute1   
05E3   AF                     XOR   a   
05E4   95                     SUB   l   
05E5   6F                     LD   l,a   
05E6   9F                     SBC   a,a   
05E7   94                     SUB   h   
05E8   67                     LD   h,a   
05E9                ABSOLUTE1:      
05E9   E5                     PUSH   hl   
05EA   DD E9                  JP   (ix)   
05EC                             ; /ad addrOf                    24
05EC                             ; char -- addr
05EC                ADDROF:      
05EC   E1                     POP   hl   ; a = char
05ED   7D                     LD   a,l   
05EE   FE 7B                  CP   "z"+1   ; if a > z then exit
05F0   30 19                  JR   nc,addrOf2   
05F2   D6 41                  SUB   "A"   ; a - 65
05F4   38 15                  JR   c,addrOf2   ; if < A then exit
05F6   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
05F8   38 06                  JR   c,addrOf1   
05FA   D6 06                  SUB   "a"-("Z"+1)   
05FC   FE 1A                  CP   "Z"-"A"+1   
05FE   38 0B                  JR   c,addrOf2   ; if < a then exit
0600                ADDROF1:      
0600   87                     ADD   a,a   ; double a
0601   21 00 50               LD   hl,VARS   ; hl = VARS + a
0604   85                     ADD   a,l   
0605   6F                     LD   l,a   
0606   3E 00                  LD   a,0   
0608   8C                     ADC   a,h   
0609   67                     LD   h,a   
060A   E5                     PUSH   hl   
060B                ADDROF2:      
060B   DD E9                  JP   (ix)   
060D                             ; /al length of an array, num elements
060D                             ; array* -- num
060D                ARRAYLENGTH:      
060D   E1                     POP   hl   
060E   2B                     DEC   hl   ; msb size
060F   56                     LD   d,(hl)   
0610   2B                     DEC   hl   ; lsb size
0611   5E                     LD   e,(hl)   
0612   EB                     EX   de,hl   
0613                ARRAYLENGTH1:      
0613   E5                     PUSH   hl   
0614   DD E9                  JP   (ix)   
0616                             ; /as size in bytes of an array, based on current data width
0616                             ; array* -- num
0616                ARRAYSIZE:      
0616                          ;*Macro unroll:  PERFORM arrayLength
0616   DD 21 1D 06            LD   ix,performM_1521S1038   
061A   C3 0D 06               JP   arrayLength   
061D                PERFORMM_1521S1038:      
061D   E1                     POP   hl   
061E   3A E6 50               LD   a,(vDataWidth)   
0621   3D                     DEC   a   
0622   28 EF                  JR   z,arrayLength1   
0624   CB 3C                  SRL   h   
0626   CB 1D                  RR   l   
0628   18 E9                  JR   arrayLength1   
062A                             ; 13
062A                             ; /br break from loop
062A                             ; --
062A                BREAK:       
062A   E1                     POP   hl   ; hl = condition, break if false
062B   7D                     LD   a,l   
062C   B4                     OR   h   
062D   28 02                  JR   z,break1   
062F   DD E9                  JP   (ix)   
0631                BREAK1:      
0631   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0633   FD 54                  LD   d,iyh   
0635   21 08 00               LD   hl,8   
0638   19                     ADD   hl,de   
0639   23                     INC   hl   
063A   23                     INC   hl   
063B   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
063E   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0641   C3 FE 0A               JP   blockEnd   
0644                             ; /b
0644                BYTEMODE:      
0644   21 01 00               LD   hl,1   
0647                BYTEMODE1:      
0647   22 E6 50               LD   (vDataWidth),hl   
064A   DD E9                  JP   (ix)   
064C                             ; //
064C                COMMENT:      
064C   03                     INC   bc   ; point to next char
064D   0A                     LD   a,(bc)   
064E   FE 20                  CP   " "   ; terminate on any char less than SP
0650   30 FA                  JR   nc,comment   
0652   0B                     DEC   bc   
0653   DD E9                  JP   (ix)   
0655                CONSTHEAPSTART:      
0655   11 22 51               LD   de,HEAP   
0658   C3 1E 07               JP   constant   
065B                CONSTTIBSTART:      
065B   11 00 4E               LD   de,TIB   
065E   C3 1E 07               JP   constant   
0661                CONSTBUFSTART:      
0661   11 00 4F               LD   de,BUFFER   
0664   C3 1E 07               JP   constant   
0667                DECBASE:      
0667   21 0A 00               LD   hl,10   
066A                DECBASE1:      
066A   22 E8 50               LD   (vNumBase),hl   
066D   DD E9                  JP   (ix)   
066F                ERROR1:      
066F   21 01 00               LD   hl,1   ; error 1: unknown command
0672   C3 BD 0F               JP   error   
0675                HEXBASE:      
0675   21 10 00               LD   hl,16   
0678   C3 6A 06               JP   decBase1   
067B                             ; Z80 port input
067B                             ; port -- value
067B                INPUT:       
067B   E1                     POP   hl   
067C   59                     LD   e,c   ; save IP
067D   4D                     LD   c,l   
067E   ED 68                  IN   l,(c)   
0680   26 00                  LD   h,0   
0682   4B                     LD   c,e   ; restore IP
0683   E5                     PUSH   hl   
0684   DD E9                  JP   (ix)   
0686                             ; /k                              6
0686                KEY:         
0686   CD 81 00               CALL   getchar   
0689   26 00                  LD   h,0   
068B   6F                     LD   l,a   
068C   E5                     PUSH   hl   
068D   DD E9                  JP   (ix)   
068F                             ; /o Z80 port output
068F                             ; value port --
068F                OUTPUT:      
068F   E1                     POP   hl   
0690   59                     LD   e,c   ; save IP
0691   4D                     LD   c,l   
0692   E1                     POP   hl   
0693   ED 69                  OUT   (c),l   
0695   4B                     LD   c,e   ; restore IP
0696   DD E9                  JP   (ix)   
0698                             ; /qt
0698                             ; bool --
0698                QUIT:        
0698   E1                     POP   hl   ; hl = condition, exit if true
0699   7D                     LD   a,l   
069A   B4                     OR   h   
069B   20 02                  JR   nz,quit1   
069D   DD E9                  JP   (ix)   
069F                QUIT1:       
069F   C3 FE 0A               JP   blockEnd   
06A2                RECUR:       
06A2   E1                     POP   hl   
06A3   22 F2 50               LD   (vRecur),hl   
06A6   DD E9                  JP   (ix)   
06A8                REMAIN:      
06A8   2A FA 50               LD   hl,(vRemain)   
06AB   E5                     PUSH   hl   
06AC   DD E9                  JP   (ix)   
06AE                STRINGBEGIN:      
06AE   21 FF FF               LD   hl,TRUE   ; string mode = true
06B1   22 F6 50               LD   (vStrMode),hl   
06B4   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06B6                STRINGEND:      
06B6   21 00 00               LD   hl,FALSE   ; string mode = false
06B9   22 F6 50               LD   (vStrMode),hl   
06BC   2A EC 50               LD   hl,(vBufPtr)   ; append NUL to string
06BF   AF                     XOR   a   
06C0   77                     LD   (hl),a   
06C1   23                     INC   hl   ; hl = string_end*
06C2   ED 43 04 51            LD   (vTemp1),bc   ; save IP
06C6   11 00 4F               LD   de,BUFFER   ; de = string*
06C9   B7                     OR   a   ; bc = size
06CA   ED 52                  SBC   hl,de   
06CC   44 4D                  LD   bc,hl   
06CE   2A F0 50               LD   hl,(vHeapPtr)   ; hl = hstring*
06D1   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06D2   D5                     PUSH   de   ; return hstring*
06D3   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06D5   ED 53 F0 50            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06D9   ED 4B 04 51            LD   bc,(vTemp1)   ; restore IP
06DD                STRINGEND1:      
06DD   21 00 4F               LD   hl,BUFFER   ; reset vBufPtr
06E0   22 EC 50               LD   (vBufPtr),hl   
06E3   DD E9                  JP   (ix)   
06E5                STRINGLENGTH:      
06E5   D1                     POP   de   
06E6   21 00 00               LD   hl,0   
06E9   18 02                  JR   stringLength2   
06EB                STRINGLENGTH1:      
06EB   13                     INC   de   
06EC   23                     INC   hl   
06ED                STRINGLENGTH2:      
06ED   1A                     LD   a,(de)   
06EE   B7                     OR   a   
06EF   20 FA                  JR   nz,stringLength1   
06F1                STRINGLENGTH3:      
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                STRINGSIZE:      
06F4                          ;*Macro unroll:  PERFORM stringLength
06F4   DD 21 FB 06            LD   ix,performM_1669S1206   
06F8   C3 E5 06               JP   stringLength   
06FB                PERFORMM_1669S1206:      
06FB   E1                     POP   hl   
06FC   23                     INC   hl   
06FD   C3 F1 06               JP   stringLength3   
0700                VARBUFPTR:      
0700   ED 5B EC 50            LD   de,(vBufPtr)   
0704   21 EC 50               LD   hl,vBufPtr   
0707   18 12                  JR   variable   
0709                VARHEAPPTR:      
0709   ED 5B F0 50            LD   de,(vHeapPtr)   
070D   21 F0 50               LD   hl,vHeapPtr   
0710   18 09                  JR   variable   
0712                VARTIBPTR:      
0712   ED 5B EA 50            LD   de,(vTIBPtr)   
0716   21 EA 50               LD   hl,vTIBPtr   
0719   18 00                  JR   variable   
071B                VARIABLE:      
071B   22 F8 50               LD   (vPointer),hl   
071E                CONSTANT:      
071E   D5                     PUSH   de   
071F   DD E9                  JP   (ix)   
0721                             ; /wm
0721                WORDMODE:      
0721   21 02 00               LD   hl,2   
0724   C3 47 06               JP   byteMode1   
0727                XOR:         
0727   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0728                XOR1:        
0728   E1                     POP   hl   
0729   7B                     LD   a,e   
072A   AD                     XOR   l   
072B   6F                     LD   l,a   
072C   7A                     LD   a,d   
072D   AC                     XOR   h   
072E   67                     LD   h,a   
072F   E5                     PUSH   hl   
0730   DD E9                  JP   (ix)   
0732                             ;*******************************************************************
0732                             ; Monty implementations
0732                             ;*******************************************************************
0732                             ; /rg rangeSrc
0732                             ; begin end step -- src
0732                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0732                RANGESRC:      ; range source: begin, end, step, local: L
0732   CD A0 03               CALL   go   
0735   00 00                  DW   NUL   
0737   41 07                  DW   rangeSrcM_1711S1256   
0739   3B 07                  DW   $+2   
073B   01                     DB   1   
073C   04 62 65 73 4C         .PSTR   "besL"   
0741                RANGESRCM_1711S1256:      
0741   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0742   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}??] %L= "   
0767   5C 6B 74 7B            DB   "\\kt{"   
076B   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0773   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0779   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0781   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0789   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0793   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
079B   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07A0   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07B4   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
07BC   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07C3   7D                     DB   "}"   
07C4   7D                     DB   "}"   
07C5   00                     DB   0   
07C6                             ; /ai arrayIter
07C6                             ; array* -- src
07C6                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07C6                ARRAYITER:      
07C6   CD A0 03               CALL   go   
07C9   00 00                  DW   NUL   
07CB   D3 07                  DW   arrayIterM_1730S1276   
07CD   CF 07                  DW   $+2   
07CF   01                     DB   1   
07D0   02 61 4C               .PSTR   "aL"   
07D3                ARRAYITERM_1730S1276:      
07D3   7B                     DB   "{"   
07D4   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
07E4   5C 6B 74 7B            DB   "\\kt{"   
07E8   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07F0   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
07F6   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07FE   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
0806   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
080D   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0815   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
081E   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
0835   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
083D   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0844   7D                     DB   "}"   
0845   7D                     DB   "}"   
0846   00                     DB   0   
0847                             ; /si stringIter
0847                             ; string* -- src
0847                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0847                STRINGITER:      
0847   CD A0 03               CALL   go   
084A   00 00                  DW   NUL   
084C   54 08                  DW   stringIterM_1749S1296   
084E   50 08                  DW   $+2   
0850   01                     DB   1   
0851   02 73 4C               .PSTR   "sL"   
0854                STRINGITERM_1749S1296:      
0854   7B                     DB   "{"   
0855   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
085F   5C 6B 74 7B            DB   "\\kt{"   
0863   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
086B   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0872   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
087A   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
0882   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
0889   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
089A   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08A2   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08A9   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08BD   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
08C5   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08CC   7D                     DB   "}"   
08CD   7D                     DB   "}"   
08CE   00                     DB   0   
08CF                             ; /mp map
08CF                             ; src func -- src1
08CF                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08CF                MAP:         ; map: source, function
08CF   CD A0 03               CALL   go   
08D2   00 00                  DW   NUL   
08D4   DC 08                  DW   mapM_1769S1318   
08D6   D8 08                  DW   $+2   
08D8   00                     DB   0   
08D9   02 73 66               .PSTR   "sf"   
08DC                MAPM_1769S1318:      
08DC   7B                     DB   "{"   
08DD   5C 6B 74 7B            DB   "\\kt{"   
08E1   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08E9   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
08ED   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
08F2   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
08FE   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0907   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
090E   7D                     DB   "}"   
090F   7D                     DB   "}"   
0910   00                     DB   0   
0911                             ; /ft filter
0911                             ; src pred -- src1
0911                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0911                FILTER:      ; filter: source, predicate, local: T
0911   CD A0 03               CALL   go   
0914   00 00                  DW   NUL   
0916   1F 09                  DW   filterM_1783S1333   
0918   1A 09                  DW   $+2   
091A   01                     DB   1   
091B   03 73 70 54            .PSTR   "spT"   
091F                FILTERM_1783S1333:      
091F   7B                     DB   "{"   
0920   5B 30 5D 25 54 3D      DB   "[0]%T="   
0926   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
092A   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
092E   5B                     DB   "["   
092F   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
093C   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0944   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0948   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
094D   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0963   3F 3F                  DB   "??"   
0965   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
096C   7D                     DB   "}"   
096D   7D                     DB   "}"   
096E   00                     DB   0   
096F                             ; /fd fold
096F                             ; reducer is a function like: \\da00bbLi4u
096F                             ; src init reducer -- src1
096F                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
096F                FOLD:        ; src, init, reducer
096F   CD A0 03               CALL   go   
0972   00 00                  DW   NUL   
0974   7E 09                  DW   foldM_1802S1353   
0976   78 09                  DW   $+2   
0978   01                     DB   1   
0979   04 73 69 72 41         .PSTR   "sirA"   
097E                FOLDM_1802S1353:      
097E   7B                     DB   "{"   ; reducer: \\da00bbLi4u
097F   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0986   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
098A   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
098E   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0993   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09AE   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
09B7   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09BE   7D                     DB   "}"   
09BF   7D                     DB   "}"   
09C0   00                     DB   0   
09C1                             ; /fe forEach
09C1                             ; src proc --
09C1                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09C1                FOREACH:      ; forEach: source, procedure, local: T
09C1   CD A0 03               CALL   go   
09C4   00 00                  DW   NUL   
09C6   CF 09                  DW   forEachM_1816S1368   
09C8   CA 09                  DW   $+2   
09CA   01                     DB   1   
09CB   03 73 70 54            .PSTR   "spT"   
09CF                FOREACHM_1816S1368:      
09CF   7B                     DB   "{"   
09D0   5B 30 5D 25 54 3D      DB   "[0]%T="   
09D6   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09DA   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09E2   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
09E7   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
09F9   3F 3F                  DB   "??"   ; ifte:
09FB   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A04   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A0B   7D                     DB   "}"   
0A0C   00                     DB   0   
0A0D                             ; ; /fs funcSrc
0A0D                             ; ; func -- src
0A0D                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A0D                FUNCSRC:      ; :f func or block
0A0D   CD A0 03               CALL   go   
0A10   00 00                  DW   NUL   
0A12   19 0A                  DW   funcSrcM_1830S1383   
0A14   16 0A                  DW   $+2   
0A16   00                     DB   0   
0A17   01 66                  .PSTR   "f"   
0A19                FUNCSRCM_1830S1383:      
0A19   7B                     DB   "{"   
0A1A   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A1E   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A26   5C 64 74 7B            DB   "\\dt{"   
0A2A   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A3C   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A43   7D                     DB   "}"   
0A44   7D                     DB   "}"   
0A45   00                     DB   0   
0A46                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A46                PRINTARRAY:      
0A46   CD A0 03               CALL   go   
0A49   00 00                  DW   NUL   
0A4B   54 0A                  DW   printArrayM_1840S1394   
0A4D   4F 0A                  DW   $+2   
0A4F   02                     DB   2   
0A50   03 61 62 63            .PSTR   "abc"   
0A54                PRINTARRAYM_1840S1394:      
0A54   7B                     DB   "{"   
0A55   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0A8C   7D                     DB   "}"   
0A8D   00                     DB   0   
0A8E                             ;*******************************************************************
0A8E                             ; implementations continued
0A8E                             ;*******************************************************************
0A8E                AT_:         
0A8E                AT:          
0A8E                ADDR:        
0A8E   ED 5B F8 50            LD   de,(vPointer)   
0A92   21 F8 50               LD   hl,vPointer   
0A95   C3 1B 07               JP   variable   
0A98                             ; $ hex                         ; 22
0A98                DOLLAR:      
0A98                HEXNUM:      
0A98   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A9B                HEXNUM1:      
0A9B   03                     INC   bc   
0A9C   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A9D   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A9F   28 02                  JR   z,hexnum2   ; no a decimal
0AA1   D6 07                  SUB   7   ; sub 7  to make $a - $F
0AA3                HEXNUM2:      
0AA3   D6 30                  SUB   $30   ; form decimal digit
0AA5   DA F0 0A               JP   c,num2   
0AA8   FE 10                  CP   $0F+1   
0AAA   D2 F0 0A               JP   nc,num2   
0AAD   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AAE   29                     ADD   hl,hl   ; 4X
0AAF   29                     ADD   hl,hl   ; 8X
0AB0   29                     ADD   hl,hl   ; 16X
0AB1   85                     ADD   a,l   ; add into bottom of hl
0AB2   6F                     LD   l,a   
0AB3   18 E6                  JR   hexnum1   
0AB5                             ; if                            23
0AB5                             ; condition then -- value
0AB5                QUESTION:      
0AB5                IF:          
0AB5   03                     INC   bc   
0AB6   0A                     LD   a,(bc)   
0AB7   FE 3F                  CP   "?"   
0AB9   28 06                  JR   z,ifte   
0ABB   0B                     DEC   bc   
0ABC   11 00 00               LD   de,NUL   ; NUL pointer for else
0ABF   18 01                  JR   ifte1   
0AC1                             ; ifte
0AC1                             ; condition then else -- value
0AC1                IFTE:        
0AC1   D1                     POP   de   ; de = else
0AC2                IFTE1:       
0AC2   E1                     POP   hl   ; hl = then
0AC3   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AC4   7C                     LD   a,h   
0AC5   B5                     OR   l   
0AC6   E1                     POP   hl   ; hl = then
0AC7   CA A1 03               JP   z,go1   ; if z de = else
0ACA   EB                     EX   de,hl   ; condition = false, de = then
0ACB   C3 A1 03               JP   go1   
0ACE                             ; 0..9 number                   37
0ACE                NUM:         
0ACE   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0AD1   0A                     LD   a,(bc)   ; Get numeral or -
0AD2   FE 2D                  CP   "-"   
0AD4   20 01                  JR   nz,num0   
0AD6   03                     INC   bc   ; move to next char, no flags affected
0AD7                NUM0:        
0AD7   08                     EX   af,af'   ; save zero flag = 0 for later
0AD8                NUM1:        
0AD8   0A                     LD   a,(bc)   ; read digit
0AD9   D6 30                  SUB   "0"   ; less than 0?
0ADB   38 13                  JR   c,num2   ; not a digit, exit loop
0ADD   FE 0A                  CP   10   ; greater that 9?
0ADF   30 0F                  JR   nc,num2   ; not a digit, exit loop
0AE1   03                     INC   bc   ; inc IP
0AE2   54 5D                  LD   de,hl   ; multiply hl * 10
0AE4   29                     ADD   hl,hl   
0AE5   29                     ADD   hl,hl   
0AE6   19                     ADD   hl,de   
0AE7   29                     ADD   hl,hl   
0AE8   85                     ADD   a,l   ; add digit in a to hl
0AE9   6F                     LD   l,a   
0AEA   3E 00                  LD   a,0   
0AEC   8C                     ADC   a,h   
0AED   67                     LD   h,a   
0AEE   18 E8                  JR   num1   
0AF0                NUM2:        
0AF0   0B                     DEC   bc   
0AF1   08                     EX   af,af'   ; restore zero flag
0AF2   20 07                  JR   nz,num3   
0AF4   EB                     EX   de,hl   ; negate the value of hl
0AF5   21 00 00               LD   hl,0   
0AF8   B7                     OR   a   ; jump to sub2
0AF9   ED 52                  SBC   hl,de   
0AFB                NUM3:        
0AFB   E5                     PUSH   hl   ; Put the number on the stack
0AFC   DD E9                  JP   (ix)   ; and process the next character
0AFE                             ;                               58
0AFE                RBRACE:      
0AFE                BLOCKEND:      
0AFE   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B01   FD 56 01               LD   d,(iy+1)   
0B04   ED 53 04 51            LD   (vTemp1),de   
0B08   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0B0B   FD 56 07               LD   d,(iy+7)   
0B0E   ED 53 06 51            LD   (vTemp2),de   
0B12   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0B15   FD 56 03               LD   d,(iy+3)   
0B18   EB                     EX   de,hl   
0B19   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0B1C   FD 56 01               LD   d,(iy+1)   
0B1F   13                     INC   de   ; for carry flag <=
0B20   B7                     OR   a   
0B21   ED 52                  SBC   hl,de   
0B23   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0B25   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0B27   FD 5D                  LD   e,iyl   
0B29   21 08 00               LD   hl,8   
0B2C   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0B2D   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0B2E   18 0C                  JR   blockEnd2   
0B30                BLOCKEND1:      ; same scope
0B30   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0B33   FD 56 03               LD   d,(iy+3)   
0B36   EB                     EX   de,hl   
0B37   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0B39   FD 5D                  LD   e,iyl   
0B3B   EB                     EX   de,hl   
0B3C                BLOCKEND2:      
0B3C   44 4D                  LD   bc,hl   ; bc = hl = BP
0B3E   B7                     OR   a   ; hl = BP - SP = count
0B3F   ED 72                  SBC   hl,sp   
0B41   7D                     LD   a,l   
0B42   B4                     OR   h   
0B43   28 09                  JR   z,blockEnd3   
0B45   C5                     PUSH   bc   ; bc = count, hl = BP
0B46   44 4D                  LD   bc,hl   
0B48   E1                     POP   hl   
0B49   2B                     DEC   hl   ; hl = BP-1
0B4A   1B                     DEC   de   ; de = args*-1
0B4B   ED B8                  LDDR      
0B4D   13                     INC   de   
0B4E                BLOCKEND3:      
0B4E   EB                     EX   de,hl   ; sp = de = new tos*
0B4F   F9                     LD   sp,hl   
0B50   ED 4B 06 51            LD   bc,(vTemp2)   
0B54   FD 2A 04 51            LD   iy,(vTemp1)   
0B58   ED 5B F2 50            LD   de,(vRecur)   ; de = recur vector
0B5C   7B                     LD   a,e   ; check for NUL
0B5D   B2                     OR   d   
0B5E   20 02                  JR   nz,blockEnd4   
0B60   DD E9                  JP   (ix)   
0B62                BLOCKEND4:      
0B62   21 00 00               LD   hl,0   ; clear recur vector
0B65   22 F2 50               LD   (vRecur),hl   
0B68   C3 A1 03               JP   go1   ; execute de
0B6B                GOBLOCK:      
0B6B   ED 53 04 51            LD   (vTemp1),de   ; save de
0B6F   21 00 4E               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0B72   FD 54                  LD   d,iyh   
0B74   FD 5D                  LD   e,iyl   
0B76   B7                     OR   a   ; if stack* == BP then this is the root_scope
0B77   ED 52                  SBC   hl,de   
0B79   ED 5B 04 51            LD   de,(vTemp1)   ; restore de
0B7D   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0B7E   B4                     OR   h   
0B7F   3E 00                  LD   a,0   
0B81   28 6A                  JR   z,goFunc8   
0B83   C5                     PUSH   bc   ; push IP
0B84   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0B87   FD 46 05               LD   b,(iy+5)   
0B8A   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0B8D   FD 66 03               LD   h,(iy+3)   
0B90                GOBLOCK2:      
0B90   C5                     PUSH   bc   ; arg_list*
0B91   E5                     PUSH   hl   ; first_arg*
0B92   FD E5                  PUSH   iy   ; push BP
0B94   FD 21 00 00            LD   iy,0   ; BP = SP
0B98   FD 39                  ADD   iy,sp   
0B9A                GOBLOCK3:      
0B9A   42 4B                  LD   bc,de   ; bc = de = block*-1
0B9C   DD E9                  JP   (ix)   
0B9E                GOFUNC:      ; execute func
0B9E   EB                     EX   de,hl   ; hl = func*
0B9F   5E                     LD   e,(hl)   ; de = partial_array*
0BA0   23                     INC   hl   
0BA1   56                     LD   d,(hl)   
0BA2   23                     INC   hl   
0BA3   7B                     LD   a,e   ; if partial_array* == null skip
0BA4   B2                     OR   d   
0BA5   28 21                  JR   z,goFunc3   
0BA7   ED 43 04 51            LD   (vTemp1),bc   
0BAB   22 06 51               LD   (vTemp2),hl   ; save bc,hl
0BAE   EB                     EX   de,hl   ; hl = partial_array*
0BAF   2B                     DEC   hl   ; bc = count
0BB0   46                     LD   b,(hl)   
0BB1   2B                     DEC   hl   
0BB2   4E                     LD   c,(hl)   
0BB3   23                     INC   hl   ; hl = array data*
0BB4   23                     INC   hl   
0BB5   18 06                  JR   goFunc2   ; push each item on stack
0BB7                GOFUNC1:      
0BB7   5E                     LD   e,(hl)   ; de = partial item
0BB8   23                     INC   hl   
0BB9   56                     LD   d,(hl)   
0BBA   23                     INC   hl   
0BBB   D5                     PUSH   de   ; push on stack
0BBC   0B                     DEC   bc   
0BBD                GOFUNC2:      
0BBD   79                     LD   a,c   ; if count != 0 then loop
0BBE   B0                     OR   b   
0BBF   20 F6                  JR   nz,goFunc1   
0BC1   ED 4B 04 51            LD   bc,(vTemp1)   ; restore bc
0BC5   2A 06 51               LD   hl,(vTemp2)   ; restore hl
0BC8                GOFUNC3:      
0BC8   5E                     LD   e,(hl)   ; de = block*
0BC9   23                     INC   hl   
0BCA   56                     LD   d,(hl)   
0BCB   23                     INC   hl   
0BCC   ED 53 04 51            LD   (vTemp1),de   ; save block*
0BD0   5E                     LD   e,(hl)   ; de = arg_list*
0BD1   23                     INC   hl   
0BD2   56                     LD   d,(hl)   
0BD3   23                     INC   hl   
0BD4   EB                     EX   de,hl   ; hl = arg_list*
0BD5   ED 5B 04 51            LD   de,(vTemp1)   ; restore de = block*
0BD9   7D                     LD   a,l   ; if arg_list* == null a = 0
0BDA   B4                     OR   h   
0BDB   20 03                  JR   nz,goFunc4   
0BDD   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0BDE   18 0D                  JR   goFunc8   
0BE0                GOFUNC4:      ; allocate locals
0BE0   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0BE1   18 03                  JR   goFunc6   
0BE3                GOFUNC5:      ; loop
0BE3   3B                     DEC   sp   
0BE4   3B                     DEC   sp   
0BE5   3D                     DEC   a   
0BE6                GOFUNC6:      
0BE6   B7                     OR   a   
0BE7   20 FA                  JR   nz,goFunc5   ; end loop
0BE9                GOFUNC7:      
0BE9   23                     INC   hl   ; a = num_args* x 2
0BEA   7E                     LD   a,(hl)   
0BEB   2B                     DEC   hl   
0BEC   87                     ADD   a,a   ; a *= 2
0BED                GOFUNC8:      
0BED   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0BEE   44 4D                  LD   bc,hl   
0BF0   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0BF3   85                     ADD   a,l   
0BF4   6F                     LD   l,a   
0BF5   39                     ADD   hl,sp   
0BF6   18 98                  JR   goBlock2   
0BF8                             ;                               21
0BF8                             ; value _oldValue --            ; uses address in vPointer 15
0BF8                ASSIGN:      
0BF8   E1                     POP   hl   ; discard last accessed value
0BF9   E1                     POP   hl   ; hl = new value
0BFA                ASSIGN0:      
0BFA   EB                     EX   de,hl   ; de = new value
0BFB   2A F8 50               LD   hl,(vPointer)   
0BFE                ASSIGN1:      ; entry point from defineEnd
0BFE   73                     LD   (hl),e   
0BFF   3A E6 50               LD   a,(vDataWidth)   
0C02   3D                     DEC   a   ; is it byte?
0C03   28 02                  JR   z,assign2   
0C05   23                     INC   hl   
0C06   72                     LD   (hl),d   
0C07                ASSIGN2:      
0C07   DD E9                  JP   (ix)   
0C09                SEMICOLON:      
0C09                DEFINEEND:      
0C09   2A F4 50               LD   hl,(vDefine)   ; hl = define*
0C0C   7D                     LD   a,l   
0C0D   B4                     OR   h   
0C0E   28 0B                  JR   z,defineEnd1   
0C10   11 00 00               LD   de,NUL   ; set vDefine=NUL
0C13   ED 53 F4 50            LD   (vDefine),de   
0C17   D1                     POP   de   ; de = value
0C18   C3 FE 0B               JP   assign1   
0C1B                DEFINEEND1:      
0C1B   DD E9                  JP   (ix)   
0C1D                             ; hl = value1, de = value2
0C1D                             ; hl = result
0C1D                EQUALS:      
0C1D   B7                     OR   a   ; reset the carry flag
0C1E   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0C20   28 16                  JR   z,true1   
0C22   18 1A                  JR   false1   
0C24                NOTEQUALS:      
0C24   B7                     OR   a   ; reset the carry flag
0C25   ED 52                  SBC   hl,de   
0C27   20 0F                  JR   nz,true1   
0C29   18 13                  JR   false1   
0C2B                             ; hl = value1 de = value2
0C2B                             ; hl = result
0C2B                LESSTHANEQ:      
0C2B   B7                     OR   a   
0C2C   ED 52                  SBC   hl,de   
0C2E   18 05                  JR   lessthan1   
0C30                             ; hl = value1 de = value2
0C30                             ; hl = result
0C30                LESSTHAN:      
0C30   B7                     OR   a   
0C31   ED 52                  SBC   hl,de   
0C33   28 09                  JR   z,false1   
0C35                LESSTHAN1:      
0C35   FA 3E 0C               JP   m,false1   
0C38                TRUE1:       
0C38   21 FF FF               LD   hl,TRUE   
0C3B   E5                     PUSH   hl   
0C3C   DD E9                  JP   (ix)   
0C3E                NULL1:       
0C3E                FALSE1:      
0C3E   21 00 00               LD   hl,FALSE   
0C41   E5                     PUSH   hl   
0C42   DD E9                  JP   (ix)   
0C44                             ; shiftLeft                     15
0C44                             ; value count -- value2          shift left count places
0C44                SHIFTLEFT:      
0C44   50 59                  LD   de,bc   ; save IP
0C46   C1                     POP   bc   ; bc = count
0C47   41                     LD   b,c   ; b = loop counter
0C48   E1                     POP   hl   
0C49   04                     INC   b   ; test for counter=0 case
0C4A   18 01                  JR   shiftLeft2   
0C4C                SHIFTLEFT1:      
0C4C   29                     ADD   hl,hl   ; left shift hl
0C4D                SHIFTLEFT2:      
0C4D   10 FD                  DJNZ   shiftLeft1   
0C4F   E5                     PUSH   hl   
0C50   42 4B                  LD   bc,de   ; restore IP
0C52   DD E9                  JP   (ix)   
0C54                             ; shiftRight                    16
0C54                             ; value count -- value2          shift left count places
0C54                SHIFTRIGHT:      
0C54   50 59                  LD   de,bc   ; save IP
0C56   C1                     POP   bc   ; bc = count
0C57   41                     LD   b,c   ; b = loop counter
0C58   E1                     POP   hl   
0C59   04                     INC   b   ; test for counter=0 case
0C5A   18 04                  JR   shiftRight2   
0C5C                SHIFTRIGHT1:      
0C5C   CB 3C                  SRL   h   ; right shift hl
0C5E   CB 1D                  RR   l   
0C60                SHIFTRIGHT2:      
0C60   10 FA                  DJNZ   shiftRight1   
0C62   E5                     PUSH   hl   
0C63   42 4B                  LD   bc,de   ; restore IP
0C65   DD E9                  JP   (ix)   
0C67                             ; string                        ;38
0C67                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0C67                QUOTE:       
0C67                STRING:      
0C67   2A F0 50               LD   hl,(vHeapPtr)   ; hl = heap*
0C6A   E5                     PUSH   hl   ; save start of string
0C6B   0A                     LD   a,(bc)   
0C6C   5F                     LD   e,a   ; e = matching terminator
0C6D   03                     INC   bc   ; point to next char
0C6E   18 03                  JR   string2   
0C70                STRING1:      
0C70   77                     LD   (hl),a   
0C71   23                     INC   hl   ; increase count
0C72   03                     INC   bc   ; point to next char
0C73                STRING2:      
0C73   0A                     LD   a,(bc)   
0C74   BB                     CP   e   ; is it the string terminator
0C75   28 02                  JR   z,string3   
0C77   18 F7                  JR   string1   
0C79                STRING3:      
0C79   AF                     XOR   a   ; write NUL to terminate string
0C7A   77                     LD   (hl),a   ; hl = end of string
0C7B   23                     INC   hl   
0C7C   22 F0 50               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C7F   DD E9                  JP   (ix)   
0C81                             ; %a .. %z                      43
0C81                             ; -- value
0C81                             ; returns value of arg
0C81                PERCENT:      
0C81                ARG:         
0C81   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0C84   FD 56 05               LD   d,(iy+5)   
0C87   EB                     EX   de,hl   
0C88   7D                     LD   a,l   ; arg_list* == null, skip
0C89   B4                     OR   h   
0C8A   28 1A                  JR   z,arg0a   
0C8C   23                     INC   hl   ; a = num_args, hl = arg_list*
0C8D   7E                     LD   a,(hl)   
0C8E   23                     INC   hl   
0C8F   B7                     OR   a   
0C90   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C92   5F                     LD   e,a   ; e = a = num_args
0C93   03                     INC   bc   ; a = next char = dollar_name
0C94   0A                     LD   a,(bc)   
0C95   C5                     PUSH   bc   ; save IP
0C96   43                     LD   b,e   ; b = e = num_args
0C97   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C9A   FD 56 03               LD   d,(iy+3)   
0C9D                ARG0:        
0C9D   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C9E   1B                     DEC   de   
0C9F   BE                     CP   (hl)   
0CA0   28 09                  JR   z,arg1   
0CA2   23                     INC   hl   ; hl = next arg_list*
0CA3   10 F8                  DJNZ   arg0   
0CA5   C1                     POP   bc   ; no match, restore IP
0CA6                ARG0A:       
0CA6   11 00 00               LD   de,0   ; return 0
0CA9   18 08                  JR   arg1a   
0CAB                ARG1:        
0CAB   C1                     POP   bc   ; restore IP
0CAC   EB                     EX   de,hl   ; hl = arg*
0CAD   22 F8 50               LD   (vPointer),hl   ; store arg* in setter
0CB0   5E                     LD   e,(hl)   
0CB1   23                     INC   hl   
0CB2   56                     LD   d,(hl)   ; de = arg
0CB3                ARG1A:       
0CB3   D5                     PUSH   de   ; push arg
0CB4   DD E9                  JP   (ix)   
0CB6                DOTNEXT:      
0CB6   3A F6 50               LD   a,(vStrMode)   ; if string mode then exit
0CB9   3C                     INC   a   
0CBA   20 02                  JR   nz,dotNext1   
0CBC   DD E9                  JP   (ix)   
0CBE                DOTNEXT1:      
0CBE   11 00 4F               LD   de,BUFFER   
0CC1   2A EC 50               LD   hl,(vBufPtr)   
0CC4   B7                     OR   a   ; hl = count, de = vHeapPtr
0CC5   ED 52                  SBC   hl,de   
0CC7   C3 D0 0C               JP   dotNext3   
0CCA                DOTNEXT2:      
0CCA   1A                     LD   a,(de)   ; print char at char*
0CCB   CD 85 00               CALL   putchar   
0CCE   13                     INC   de   ; char*++
0CCF   2B                     DEC   hl   ; count--
0CD0                DOTNEXT3:      
0CD0   7D                     LD   a,l   ; count == 0?
0CD1   B4                     OR   h   
0CD2   20 F6                  JR   nz,dotNext2   ; if not loop
0CD4   21 00 4F               LD   hl,BUFFER   ; reset vBufPtr to vHeapPtr
0CD7   22 EC 50               LD   (vBufPtr),hl   
0CDA   DD E9                  JP   (ix)   
0CDC                             ; unused
0CDC                DQUOTE:      
0CDC                UNDERSCORE:      
0CDC                COMMA:       
0CDC   DD E9                  JP   (ix)   
0CDE                             ; division subroutine.
0CDE                             ; bc: divisor, de: dividend, hl: remainder
0CDE                DIVIDE:      
0CDE   21 00 00               LD   hl,0   ; zero the remainder
0CE1   3E 10                  LD   a,16   ; loop counter
0CE3                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0CE3   CB 21                  SLA   c   
0CE5   CB 10                  RL   b   
0CE7   ED 6A                  ADC   hl,hl   
0CE9   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0CEB   38 03                  JR   c,divide2   
0CED   0C                     INC   c   
0CEE   18 01                  JR   divide3   
0CF0                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0CF0   19                     ADD   hl,de   
0CF1                DIVIDE3:      
0CF1   3D                     DEC   a   
0CF2   20 EF                  JR   nz,divide1   
0CF4   50 59                  LD   de,bc   ; result from bc to de
0CF6   C9                     RET      
0CF7                             ; arg_list - parses arg_list e.g. ab:c
0CF7                             ; -- arg_list*
0CF7                PARSEARGS:      
0CF7   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CFA   2A F0 50               LD   hl,(vHeapPtr)   ; hl = heap*
0CFD   E5                     PUSH   hl   ; save start of arg_list
0CFE   23                     INC   hl   ; skip length fields to start of string
0CFF   23                     INC   hl   
0D00   03                     INC   bc   ; point to next char
0D01                PARSEARGS1:      
0D01   0A                     LD   a,(bc)   
0D02   FE 3A                  CP   ":"   ; ":" switches from args to locals
0D04   20 03                  JR   nz,parseArgs1a   
0D06   14                     INC   d   ; non zero value local count acts as flag
0D07   18 10                  JR   parseArgs3   
0D09                PARSEARGS1A:      
0D09   FE 61                  CP   "a"   ; < "a" terminates arg_list
0D0B   38 0F                  JR   c,parseArgs4   
0D0D   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0D0F   30 0B                  JR   nc,parseArgs4   
0D11                PARSEARGS2:      
0D11   77                     LD   (hl),a   
0D12   23                     INC   hl   
0D13   1C                     INC   e   ; increase arg count
0D14   AF                     XOR   a   
0D15   B2                     OR   d   
0D16   28 01                  JR   z,parseArgs3   
0D18   14                     INC   d   ; if d > 0 increase local count
0D19                PARSEARGS3:      
0D19   03                     INC   bc   ; point to next char
0D1A   18 E5                  JR   parseArgs1   
0D1C                PARSEARGS4:      
0D1C   0B                     DEC   bc   
0D1D   AF                     XOR   a   
0D1E   B2                     OR   d   
0D1F   28 01                  JR   z,parseArgs5   
0D21   15                     DEC   d   ; remove initial inc
0D22                PARSEARGS5:      
0D22   23                     INC   hl   
0D23   22 F0 50               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D26   E1                     POP   hl   ; hl = start of arg_list
0D27   72                     LD   (hl),d   ; write number of locals at start - 1
0D28   23                     INC   hl   
0D29   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D2A   2B                     DEC   hl   
0D2B   E3                     EX   (sp),hl   
0D2C   E9                     JP   (hl)   
0D2D                             ; create block: parses block e.g. 00bbIC4uLi4g
0D2D                             ; -- block*
0D2D                PARSEBLOCK:      
0D2D   C5                     PUSH   bc   ; return pointer to first { of block
0D2E   03                     INC   bc   
0D2F   16 01                  LD   d,1   ; nesting: count first parenthesis
0D31                PARSEBLOCK1:      ; Skip to end of definition
0D31   0A                     LD   a,(bc)   ; Get the next character
0D32   03                     INC   bc   ; Point to next character
0D33   FE 21                  CP   " " + 1   ; ignore whitespace
0D35   38 FA                  JR   c,parseBlock1   
0D37   FE 29                  CP   ")"   
0D39   28 2D                  JR   z,parseBlock4   
0D3B   FE 7D                  CP   "}"   
0D3D   28 29                  JR   z,parseBlock4   
0D3F   FE 5D                  CP   "]"   
0D41   28 25                  JR   z,parseBlock4   
0D43   FE 28                  CP   "("   
0D45   28 16                  JR   z,parseBlock2   
0D47   FE 7B                  CP   "{"   
0D49   28 12                  JR   z,parseBlock2   
0D4B   FE 5B                  CP   "["   
0D4D   28 0E                  JR   z,parseBlock2   
0D4F   FE 27                  CP   "'"   
0D51   28 0D                  JR   z,parseBlock3   
0D53   FE 60                  CP   "`"   
0D55   28 09                  JR   z,parseBlock3   
0D57   FE 22                  CP   DQ   
0D59   28 05                  JR   z,parseBlock3   
0D5B   18 D4                  JR   parseBlock1   
0D5D                PARSEBLOCK2:      
0D5D   14                     INC   d   
0D5E   18 D1                  JR   parseBlock1   
0D60                PARSEBLOCK3:      
0D60   3E 80                  LD   a,$80   
0D62   AA                     XOR   d   
0D63   57                     LD   d,a   
0D64   20 CB                  JR   nz,parseBlock1   
0D66   18 03                  JR   parseBlock5   
0D68                PARSEBLOCK4:      
0D68   15                     DEC   d   
0D69   20 C6                  JR   nz,parseBlock1   ; get the next element
0D6B                PARSEBLOCK5:      
0D6B   60 69                  LD   hl,bc   ; hl = IP
0D6D   11 22 51               LD   de,HEAP   ; is IP pointing to object in heap
0D70   B7                     OR   a   ; IP - HEAP
0D71   ED 52                  SBC   hl,de   
0D73   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D75   28 1C                  JR   z,parseBlock6   
0D77   60 69                  LD   hl,bc   ; hl = IP
0D79   D1                     POP   de   ; de = block*
0D7A   ED 43 04 51            LD   (vTemp1),bc   ; save IP
0D7E   B7                     OR   a   ; bc = size
0D7F   ED 52                  SBC   hl,de   
0D81   44 4D                  LD   bc,hl   
0D83   EB                     EX   de,hl   ; hl = block* de = heap*
0D84   ED 5B F0 50            LD   de,(vHeapPtr)   
0D88   D5                     PUSH   de   ; return hblock*
0D89   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D8B   ED 53 F0 50            LD   (vHeapPtr),de   ; heap* += size
0D8F   ED 4B 04 51            LD   bc,(vTemp1)   ; restore IP
0D93                PARSEBLOCK6:      
0D93   0B                     DEC   bc   ; balanced, exit
0D94   E1                     POP   hl   ; hl = block*
0D95   E3                     EX   (sp),hl   ; return to caller
0D96   E9                     JP   (hl)   
0D97                             ; create function
0D97                             ; arg_list* block* -- func*
0D97                CREATEFUNC:      
0D97   E1                     POP   hl   ; save retrn address
0D98   22 08 51               LD   (vTemp3),hl   
0D9B   ED 43 04 51            LD   (vTemp1),bc   ; save IP
0D9F   E1                     POP   hl   ; hl = block*
0DA0   22 06 51               LD   (vTemp2),hl   ; save block*
0DA3   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0DA6   FD 56 05               LD   d,(iy+5)   
0DA9   7B                     LD   a,e   ; if arg_list == null then make a func
0DAA   B2                     OR   d   
0DAB   20 09                  JR   nz,createFunc0   
0DAD   21 00 00               LD   hl,0   ; partial_array = null
0DB0   ED 5B F0 50            LD   de,(vHeapPtr)   ; de = compile*
0DB4   18 65                  JR   createFunc5   
0DB6                CREATEFUNC0:      
0DB6   E1                     POP   hl   ; hl = inner_arg_list*
0DB7   E5                     PUSH   hl   ; save inner_arg_list
0DB8   ED 5B F0 50            LD   de,(vHeapPtr)   ; de = compile*
0DBC   7E                     LD   a,(hl)   ; compile inner_num_locals
0DBD   4F                     LD   c,a   ; b = inner_num_locals
0DBE   12                     LD   (de),a   
0DBF   23                     INC   hl   
0DC0   13                     INC   de   
0DC1   7E                     LD   a,(hl)   ; compile inner_length
0DC2   12                     LD   (de),a   
0DC3   91                     SUB   c   ; a = inner_num args
0DC4   23                     INC   hl   
0DC5   13                     INC   de   
0DC6   B7                     OR   a   ; compile args if inner_length > 0
0DC7   28 05                  JR   z,createFunc1   
0DC9   4F                     LD   c,a   ; bc = a
0DCA   06 00                  LD   b,0   
0DCC   ED B0                  LDIR      
0DCE                CREATEFUNC1:      
0DCE   EB                     EX   de,hl   ; hl = outer_arg_list
0DCF   FD 5E 04               LD   e,(iy+4)   
0DD2   FD 56 05               LD   d,(iy+5)   
0DD5   EB                     EX   de,hl   
0DD6   23                     INC   hl   ; a = outer_length
0DD7   7E                     LD   a,(hl)   
0DD8   23                     INC   hl   
0DD9   B7                     OR   a   
0DDA   28 05                  JR   z,createFunc2   
0DDC   4F                     LD   c,a   
0DDD   06 00                  LD   b,0   
0DDF   ED B0                  LDIR      ; append outer_args
0DE1                CREATEFUNC2:      ; a = outer_length
0DE1   47                     LD   b,a   ; b = a = outer_length
0DE2   2A F0 50               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DE5   23                     INC   hl   
0DE6   7E                     LD   a,(hl)   ; add outer_length to new length
0DE7   80                     ADD   a,b   
0DE8   77                     LD   (hl),a   
0DE9   2B                     DEC   hl   
0DEA   78                     LD   a,b   ; save outer_length in a'
0DEB   08                     EX   af,af'   
0DEC   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DED   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DEE   B7                     OR   a   
0DEF   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DF1   4F                     LD   c,a   ; c = inner_num_locals
0DF2   06 00                  LD   b,0   ; bc = inner_num_locals
0DF4   23                     INC   hl   ; a = inner_length
0DF5   7E                     LD   a,(hl)   
0DF6   91                     SUB   c   ; a = inner_num_args
0DF7   23                     INC   hl   ; hl = inner_arg_chars
0DF8   85                     ADD   a,l   ; hl += a
0DF9   6F                     LD   l,a   
0DFA   3E 00                  LD   a,0   
0DFC   84                     ADD   a,h   
0DFD   67                     LD   h,a   
0DFE   ED B0                  LDIR      ; append inner_locals
0E00                CREATEFUNC2A:      
0E00   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0E01   12                     LD   (de),a   ; compile partial_array length field
0E02   13                     INC   de   
0E03   AF                     XOR   a   
0E04   12                     LD   (de),a   
0E05   13                     INC   de   
0E06   D5                     PUSH   de   ; push partial_array*
0E07   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0E08   FD 5E 02               LD   e,(iy+2)   
0E0B   FD 56 03               LD   d,(iy+3)   
0E0E   EB                     EX   de,hl   
0E0F                CREATEFUNC3:      
0E0F   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0E10   4E                     LD   c,(hl)   
0E11   2B                     DEC   hl   
0E12   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0E13   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0E14   13                     INC   de   
0E15   79                     LD   a,c   
0E16   12                     LD   (de),a   
0E17   13                     INC   de   
0E18   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E1A                CREATEFUNC4:      
0E1A   E1                     POP   hl   ; hl = partial_array*
0E1B                CREATEFUNC5:      
0E1B   C1                     POP   bc   ; bc = new_arg_list*
0E1C   D5                     PUSH   de   ; return new func*
0E1D   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0E1E   73                     LD   (hl),e   ; compile partial_array* to func
0E1F   23                     INC   hl   
0E20   72                     LD   (hl),d   
0E21   23                     INC   hl   
0E22   ED 5B 06 51            LD   de,(vTemp2)   ; de = block*
0E26   73                     LD   (hl),e   ; compile block* to func
0E27   23                     INC   hl   
0E28   72                     LD   (hl),d   
0E29   23                     INC   hl   
0E2A   71                     LD   (hl),c   ; compile new_arg_list* to func
0E2B   23                     INC   hl   
0E2C   70                     LD   (hl),b   
0E2D   23                     INC   hl   
0E2E   22 F0 50               LD   (vHeapPtr),hl   ; bump heap ptr
0E31   ED 4B 04 51            LD   bc,(vTemp1)   ; restore IP
0E35   2A 08 51               LD   hl,(vTemp3)   ; jump to return address
0E38   E9                     JP   (hl)   
0E39                             ;*******************************************************************
0E39                             ; general routines
0E39                             ;*******************************************************************
0E39                             ; followed by a table
0E39                             ; indexed on the 0-25 lowercase letter
0E39                             ; db lsb(addr)
0E39                             ; the final item index 26 matches any other char
0E39                COMMANDTABLE:      
0E39   03                     INC   bc   
0E3A   0A                     LD   a,(bc)   
0E3B   FE 7B                  CP   "z"+1   
0E3D   30 0B                  JR   nc,commandTable2   
0E3F   D6 61                  SUB   "a"   
0E41   38 07                  JR   c,commandTable2   
0E43                COMMANDTABLE1:      
0E43   E1                     POP   hl   
0E44   85                     ADD   a,l   
0E45   6F                     LD   l,a   
0E46   6E                     LD   l,(hl)   ; must have the same msb as the table
0E47   C3 50 0E               JP   jumpTable1   
0E4A                COMMANDTABLE2:      
0E4A   3E 1A                  LD   a,26   
0E4C   0B                     DEC   bc   
0E4D   18 F4                  JR   commandTable1   
0E4F                             ; followed by a table
0E4F                             ; db char
0E4F                             ; dw addr
0E4F                             ; the final item must have char == NUL
0E4F                JUMPTABLE:      
0E4F   E1                     POP   hl   
0E50                JUMPTABLE1:      
0E50   03                     INC   bc   
0E51                JUMPTABLE2:      
0E51   AF                     XOR   a   
0E52   BE                     CP   (hl)   
0E53   20 03                  JR   nz,jumpTable3   
0E55   0B                     DEC   bc   
0E56   18 09                  JR   jumpTable4   
0E58                JUMPTABLE3:      
0E58   0A                     LD   a,(bc)   
0E59   BE                     CP   (hl)   
0E5A   28 05                  JR   z,jumpTable4   
0E5C   23                     INC   hl   
0E5D   23                     INC   hl   
0E5E   23                     INC   hl   
0E5F   18 F0                  JR   jumpTable2   
0E61                JUMPTABLE4:      
0E61   23                     INC   hl   
0E62   5E                     LD   e,(hl)   
0E63   23                     INC   hl   
0E64   56                     LD   d,(hl)   
0E65   EB                     EX   de,hl   
0E66   E9                     JP   (hl)   
0E67                PRTSTR0:      
0E67   CD 85 00               CALL   putchar   
0E6A   23                     INC   hl   
0E6B                PRTSTR:      
0E6B   7E                     LD   a,(hl)   
0E6C   B7                     OR   a   
0E6D   20 F8                  JR   nz,prtstr0   
0E6F   C9                     RET      
0E70                             ; **************************************************************************
0E70                             ; calculate nesting value
0E70                             ; a is char to be tested,
0E70                             ; e is the nesting value (initially 0)
0E70                             ; e is increased by ( and [
0E70                             ; e is decreased by ) and ]
0E70                             ; e has its bit 7 toggled by `
0E70                             ; limited to 127 levels
0E70                             ; **************************************************************************
0E70                NESTING:      
0E70   FE 22                  CP   DQ   ; quote char
0E72   28 06                  JR   z,nesting0   
0E74   FE 60                  CP   "`"   ; quote char
0E76   28 02                  JR   z,nesting0   
0E78   18 0A                  JR   nesting1   
0E7A                NESTING0:      
0E7A   CB 7B                  BIT   7,e   
0E7C   28 03                  JR   z,nesting1a   
0E7E   CB BB                  RES   7,e   
0E80   C9                     RET      
0E81                NESTING1A:      
0E81   CB FB                  SET   7,e   
0E83   C9                     RET      
0E84                NESTING1:      
0E84   CB 7B                  BIT   7,e   
0E86   C0                     RET   nz   
0E87   FE 7B                  CP   "{"   
0E89   28 08                  JR   z,nesting2   
0E8B   FE 5B                  CP   "["   
0E8D   28 04                  JR   z,nesting2   
0E8F   FE 28                  CP   "("   
0E91   20 02                  JR   nz,nesting3   
0E93                NESTING2:      
0E93   1C                     INC   e   
0E94   C9                     RET      
0E95                NESTING3:      
0E95   FE 7D                  CP   "}"   
0E97   28 07                  JR   z,nesting4   
0E99   FE 5D                  CP   "]"   
0E9B   28 03                  JR   z,nesting4   
0E9D   FE 29                  CP   ")"   
0E9F   C0                     RET   nz   
0EA0                NESTING4:      
0EA0   1D                     DEC   e   
0EA1   C9                     RET      
0EA2                PROMPT:      
0EA2   CD B2 0E               CALL   printStr   
0EA5   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0EAA   C9                     RET      
0EAB                CRLF:        
0EAB   CD B2 0E               CALL   printStr   
0EAE   0D 0A 00               .CSTR   "\r\n"   
0EB1   C9                     RET      
0EB2                             ; prints a null teminated string
0EB2                             ; the string should be immediately following the call
0EB2                PRINTSTR:      
0EB2   E3                     EX   (sp),hl   ; swap			
0EB3   CD 6B 0E               CALL   prtstr   
0EB6   23                     INC   hl   ; inc past NUL
0EB7   E3                     EX   (sp),hl   ; put it back	
0EB8   C9                     RET      
0EB9                INIT:        
0EB9   21 F0 01               LD   hl,titleStr   
0EBC   11 0E 51               LD   de,titleBuf   
0EBF   06 14                  LD   b,20   
0EC1                INIT1:       
0EC1   1A                     LD   a,(de)   
0EC2   BE                     CP   (hl)   
0EC3   20 17                  JR   nz,coldBoot0   
0EC5   13                     INC   de   
0EC6   23                     INC   hl   
0EC7   10 F8                  DJNZ   init1   
0EC9                WARMINIT:      
0EC9   ED 4B FC 50            LD   bc,(vSavedIP)   ; restore IP
0ECD   ED 7B FE 50            LD   sp,(vSavedSP)   ; restore SP
0ED1   DD 2A 00 51            LD   ix,(vSavedNext)   ; restore Next
0ED5   FD 2A 02 51            LD   iy,(vSavedBP)   ; restore BP
0ED9   C3 13 0F               JP   start1   
0EDC                COLDBOOT0:      
0EDC   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0EDF   11 0E 51               LD   de,titleBuf   
0EE2   06 14                  LD   b,20   
0EE4   ED B0                  LDIR      
0EE6                COLDINIT:      
0EE6   21 DE 01               LD   hl,isysVars   
0EE9   11 E6 50               LD   de,sysVars   
0EEC   01 12 00               LD   bc,9 * 2   
0EEF   ED B0                  LDIR      
0EF1   21 00 50               LD   hl,vars   ; 52 vars LO HI
0EF4   06 34                  LD   b,26*2   
0EF6   AF                     XOR   a   
0EF7                COLDBOOT1:      
0EF7   77                     LD   (hl),a   
0EF8   23                     INC   hl   
0EF9   10 FC                  DJNZ   coldBoot1   
0EFB   DD 2A EE 50            LD   ix,(vNext)   
0EFF   FD 21 00 4E            LD   iy,STACK   
0F03   C9                     RET      
0F04                COLDSTART:      
0F04   31 00 4E               LD   sp,STACK   
0F07   CD DC 0E               CALL   coldBoot0   
0F0A   C3 13 0F               JP   start1   
0F0D                START:       
0F0D   31 00 4E               LD   sp,STACK   ; start Monty
0F10   CD B9 0E               CALL   init   ; setups
0F13                START1:      
0F13   21 0E 51               LD   hl,titleBuf   
0F16   CD 6B 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0F19                INTERPRET:      
0F19   CD A2 0E               CALL   prompt   
0F1C   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F1F   21 00 4E               LD   hl,TIB   
0F22   22 EA 50               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F25                INTERPRET2:      ; calculate nesting
0F25   1E 00                  LD   e,0   ; initilize nesting value
0F27   C5                     PUSH   bc   ; save offset into TIB,
0F28                             ; bc is also the count of chars in TIB
0F28   21 00 4E               LD   hl,TIB   ; hl is start of TIB
0F2B   18 0B                  JR   interpret4   
0F2D                INTERPRET3:      
0F2D   3E 33                  LD   a,"3"   
0F2F   CD 85 00               CALL   putchar   
0F32   7E                     LD   a,(hl)   ; a = char in TIB
0F33   23                     INC   hl   ; inc pointer into TIB
0F34   0B                     DEC   bc   ; dec count of chars in TIB
0F35   CD 70 0E               CALL   nesting   ; update nesting value
0F38                INTERPRET4:      
0F38   79                     LD   a,c   ; is count zero?
0F39   B0                     OR   b   
0F3A   20 F1                  JR   nz,interpret3   ; if not loop
0F3C   C1                     POP   bc   ; restore offset into TIB
0F3D                INTERPRET5:      
0F3D   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F40   FE 20                  CP   $20   ; compare to space
0F42   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F44   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F46                             ; ???? NEEDED?
0F46   28 36                  JR   z,interpret8   
0F48   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F4A   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F4C   FE 05                  CP   CTRL_E   
0F4E   CA DF 0F               JP   z,edit_   
0F51   FE 08                  CP   CTRL_H   
0F53   CA CF 0F               JP   z,backSpace_   
0F56   FE 0A                  CP   CTRL_J   
0F58   CA F5 0F               JP   z,reEdit_   
0F5B                             ; cp CTRL_S
0F5B                             ; jp z,printStack_
0F5B                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F5B                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F5B                             ; DB     lsb(list_)       ; FF  ^L 12
0F5B                             ; DB     lsb(printStack_) ; DLE ^P 16
0F5B                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F5B                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F5B                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F5B                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F5B                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F5B                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F5B                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F5B                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F5B                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F5B                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F5B                INTERPRET5A:      
0F5B                             ; ld (vTIBPtr),bc
0F5B                             ; ld bc,(vTIBPtr)
0F5B   18 C8                  JR   interpret2   
0F5D                INTERPRET6:      
0F5D   21 00 4E               LD   hl,TIB   
0F60   09                     ADD   hl,bc   
0F61   77                     LD   (hl),a   ; store the character in textbuf
0F62   03                     INC   bc   
0F63   CD 85 00               CALL   putchar   ; echo character to screen
0F66   CD 70 0E               CALL   nesting   
0F69   18 D2                  JR   interpret5   ; wait for next character
0F6B                INTERPRET7:      
0F6B   21 00 4E               LD   hl,TIB   
0F6E   09                     ADD   hl,bc   
0F6F   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F71   23                     INC   hl   
0F72   36 0A                  LD   (hl),"\n"   
0F74   23                     INC   hl   
0F75   03                     INC   bc   
0F76   03                     INC   bc   
0F77   CD AB 0E               CALL   crlf   ; echo character to screen
0F7A   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F7B   B7                     OR   a   
0F7C   20 BF                  JR   nz,interpret5   
0F7E                INTERPRET8:      
0F7E   21 00 4E               LD   hl,TIB   
0F81   09                     ADD   hl,bc   
0F82   22 EA 50               LD   (vTIBPtr),hl   
0F85   01 00 4E               LD   bc,TIB   
0F88   ED 43 FC 50            LD   (vSavedIP),bc   ; save IP
0F8C   ED 73 FE 50            LD   (vSavedSP),sp   ; save SP
0F90   DD 22 00 51            LD   (vSavedNext),ix   ; save Next
0F94   FD 22 02 51            LD   (vSavedBP),iy   ; save BP
0F98   0B                     DEC   bc   
0F99                NEXT:        
0F99   03                     INC   bc   ; Increment the IP
0F9A   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F9B   FE 20                  CP   " "   ; whitespace?
0F9D   28 FA                  JR   z,next   ; space? ignore
0F9F   38 0D                  JR   c,next1   
0FA1   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0FA3   6F                     LD   l,a   ; index into table
0FA4   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0FA6   6E                     LD   l,(hl)   ; get low jump address
0FA7   24                     INC   h   ; page 2
0FA8   FE BA                  CP   "Z" - "!" + 1 + $80   
0FAA   38 01                  JR   c,next0   
0FAC   24                     INC   h   ; page 3
0FAD                NEXT0:       
0FAD   E9                     JP   (hl)   ; Jump to routine
0FAE                NEXT1:       
0FAE   FE 00                  CP   NUL   ; end of input string?
0FB0   28 03                  JR   z,exit   
0FB2   C3 19 0F               JP   interpret   ; no, other whitespace, macros?
0FB5                EXIT:        
0FB5   03                     INC   bc   
0FB6   60 69                  LD   hl,bc   
0FB8   E9                     JP   (hl)   
0FB9                RUN:         
0FB9   C1                     POP   bc   
0FBA   0B                     DEC   bc   
0FBB   DD E9                  JP   (ix)   
0FBD                ERROR:       
0FBD   E5                     PUSH   hl   
0FBE   CD B9 0F               CALL   run   
0FC1   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0FCC   C3 19 0F               JP   interpret   
0FCF                BACKSPACE_:      
0FCF   79                     LD   a,c   
0FD0   B0                     OR   b   
0FD1   CA 25 0F               JP   z,interpret2   
0FD4   0B                     DEC   bc   
0FD5   CD B2 0E               CALL   printStr   
0FD8   08 20 08 00            .CSTR   "\b \b"   
0FDC   C3 25 0F               JP   interpret2   
0FDF                             ; edit
0FDF                EDIT_:       
0FDF   CD B9 0F               CALL   run   
0FE2   60 76 61 72 3F 60 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?` /k/ad .h",0   
0FF2   C3 19 0F               JP   interpret   
0FF5                REEDIT_:      
0FF5   C3 19 0F               JP   interpret   
0FF8                PRINTSTACK_:      
0FF8   CD B9 0F               CALL   run   
0FFB   2F 70 6B 00            .CSTR   "/pk"   
0FFF   C3 19 0F               JP   interpret   
1002                             ; editDef:
1002                             ;     pop hl                      ; pop ret address
1002                             ;     ex (sp),hl                  ; swap with TOS
1002                             ;     push hl                     ; dup TOS
1002                             ;     ld a,l                      ; a = ident
1002                             ;     ld de,TIB                   ; de = start of TIB
1002                             ;     ld (vTIBPtr),de             ; update TIB*
1002                             ;     push ix                     ; save NEXT
1002                             ;     ld ix,editDef0              ; NEXT = editDef0
1002                             ;     jp lookupRef                ; convert letter into address
1002                             ; editDef0:
1002                             ;     ld e,(hl)                   ; de = (hl++)
1002                             ;     inc hl
1002                             ;     ld d,(hl)
1002                             ;     ld a,d                      ; de == 0 ?
1002                             ;     or e
1002                             ;     jr z,editDef4
1002                             ;     ld ix,editDef3              ; NEXT = editDef3
1002                             ;     ex de,hl
1002                             ;     ld a,(hl)
1002                             ;     cp "{"
1002                             ;     jr nz,editDef1
1002                             ;     jp editBlock0               ; convert letter into address
1002                             ; editDef1:
1002                             ;     cp "("
1002                             ;     jr nz,editDef2
1002                             ;     jp editBlock0               ; convert letter into address
1002                             ; editDef2:
1002                             ;     jp editFunc
1002                             ; editDef3:
1002                             ;     ld a," "                    ; write assign
1002                             ;     call writeChar
1002                             ;     pop hl                      ; a = ident
1002                             ;     ld a,l
1002                             ;     call writeChar
1002                             ;     ld a,"="                    ; write assign
1002                             ;     call writeChar
1002                             ;     ld ix,editDef4              ; NEXT = editDef4
1002                             ;     jp printTIB
1002                             ; editDef4:
1002                             ;     pop ix                      ; restore NEXT
1002                             ;     jp (ix)
1002                             ; writeChar:
1002                             ;     ld de,(vTIBPtr)             ; de = TIB*
1002                             ;     ld (de),a                   ; write ident
1002                             ;     inc de
1002                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
1002                             ;     ret
1002                             ; ; printTIB
1002                             ; printTIB:
1002                             ;     ld hl,(vTIBPtr)
1002                             ;     ld de,TIB
1002                             ;     or a
1002                             ;     sbc hl,de
1002                             ;     jp printTIB2
1002                             ; printTIB1:
1002                             ;     ld a,(de)
1002                             ;     call putchar
1002                             ; printTIB2:
1002                             ;     ld a,l
1002                             ;     or h
1002                             ;     jr nz,printTIB1
1002                             ;     jp (ix)
1002                             ; editBlock:
1002                             ;     pop hl                      ; hl = block*
1002                             ; editBlock0:
1002                             ;     push ix                     ; save next
1002                             ;     push hl                     ; push block*
1002                             ;     push hl                     ; push block*
1002                             ;     ld ix,(editBlock2)
1002                             ;     jp blockLength
1002                             ; editBlock1:
1002                             ;     pop hl                      ; bc = length, (sp) = IP
1002                             ;     pop de                      ; de = block*
1002                             ;     ld a,l
1002                             ;     or h
1002                             ;     jr z,editBlock2
1002                             ;     push bc
1002                             ;     ld bc,hl
1002                             ;     ex de,hl                    ; hl = block*
1002                             ;     ld de,(vTIBPtr)              ; de = TIB*
1002                             ;     ldir                        ; copy block to TIB
1002                             ;     ld (vTIBPtr),de              ; save TIB*
1002                             ;     pop bc
1002                             ; editBlock2:
1002                             ;     pop ix                      ; restore next
1002                             ;     jp (ix)
1002                             ; editFunc:
1002                             ;     jp (ix)
1002                             ; editArray:
1002                             ;     jp (ix)
1002                             ; editparseArgs:
1002                             ;     jp (ix)
1002                             ; ; blockLength
1002                             ; ; addr1 -- length
1002                             ; blockLength:
1002                             ;     pop hl                      ; block*
1002                             ;     push hl                     ; save block*
1002                             ;     inc hl                      ; skip first char
1002                             ;     ld d,1                      ; increase nesting
1002                             ; blockLength1:                   ; Skip to end of definition
1002                             ;     ld a,(hl)                   ; Get the next character
1002                             ;     inc hl                      ; Point to next character
1002                             ;     cp " " + 1                  ; ignore whitespace
1002                             ;     jr c,blockLength1
1002                             ;     cp ")"
1002                             ;     jr z,blockLength4
1002                             ;     cp "}"
1002                             ;     jr z,blockLength4
1002                             ;     cp "]"
1002                             ;     jr z,blockLength4
1002                             ;     cp "("
1002                             ;     jr z,blockLength2
1002                             ;     cp "{"
1002                             ;     jr z,blockLength2
1002                             ;     cp "["
1002                             ;     jr z,blockLength2
1002                             ;     cp "'"
1002                             ;     jr z,blockLength3
1002                             ;     cp "`"
1002                             ;     jr z,blockLength3
1002                             ;     cp DQ
1002                             ;     jr z,blockLength3
1002                             ;     jr blockLength1
1002                             ; blockLength2:
1002                             ;     inc d
1002                             ;     jr blockLength1
1002                             ; blockLength4:
1002                             ;     dec d
1002                             ;     jr nz, blockLength1         ; get the next element
1002                             ; blockLength3:
1002                             ;     ld a,$80
1002                             ;     xor d
1002                             ;     ld d,a
1002                             ;     jr nz, blockLength1
1002                             ;     pop hl                      ; hl = block*
1002                             ;     or a
1002                             ;     sbc hl,de
1002                             ;     push hl
1002                             ;     jp (ix)
1002                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
1002                             ; \a start of stack \#3 depth \b base \$ prompt
1002                             ; DW dStack               ; a vS0 start of datastack			
1002                             ; DW FALSE                ; b vBase16
1002                             ; DW 0                    ; c vTIBPtr an offset to the tib
1002                             ; DW 0                    ; d
1002                             ; DW 65                   ; e vLastDef "A" last command u defined
1002                             ; DW 0                    ; f
1002                             ; DW page6                ; g 256 bytes limits
1002                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
1002                          ;*Macro unroll: FUNC f1, 0, ""
1002                F1:          
1002   CD A0 03               CALL   go   
1005   00 00                  DW   NUL   
1007   0D 10                  DW   f1M_3002S12   
1009   0B 10                  DW   $+2   
100B   00                     DB   0   
100C   00                     .PSTR   ""   
100D                F1M_3002S12:      
100D   00                     DB   0   
100E                          ;*Macro unroll: FUNC f2, 0, ""
100E                F2:          
100E   CD A0 03               CALL   go   
1011   00 00                  DW   NUL   
1013   19 10                  DW   f2M_3004S15   
1015   17 10                  DW   $+2   
1017   00                     DB   0   
1018   00                     .PSTR   ""   
1019                F2M_3004S15:      
1019   00                     DB   0   
101A                          ;*Macro unroll: FUNC f3, 0, ""
101A                F3:          
101A   CD A0 03               CALL   go   
101D   00 00                  DW   NUL   
101F   25 10                  DW   f3M_3006S18   
1021   23 10                  DW   $+2   
1023   00                     DB   0   
1024   00                     .PSTR   ""   
1025                F3M_3006S18:      
1025   00                     DB   0   
1026                          ;*Macro unroll: FUNC f4, 0, ""
1026                F4:          
1026   CD A0 03               CALL   go   
1029   00 00                  DW   NUL   
102B   31 10                  DW   f4M_3008S21   
102D   2F 10                  DW   $+2   
102F   00                     DB   0   
1030   00                     .PSTR   ""   
1031                F4M_3008S21:      
1031   00                     DB   0   
1032                          ALIGN   $100   
1100                TESTSSTART:      
1100                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", 0
1100                             ; test "[10 20 30] /ai \\a{%a.} /fe", 0
1100                             ; test "[1 2 3].a", 0
1100                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
1100                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1100                             ; test "/hb/bm$1234.",0
1100                             ; test "/bm257.",0
1100                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1100                          ;*Macro unroll:  test "10 0 -1 /rg \\a{%a.} /fe", 0
1100   31 00 4E               LD   SP,STACK   
1103   CD E6 0E               CALL   coldInit   
1106   CD AC 4C               CALL   execStr   
1109   31 30 20 30 20 2D 31 20 2F 72 67 20 5C 61 7B 25 61 2E 7D 20 2F 66 65 00 DB   "10 0 -1 /rg \\a{%a.} /fe",0   
1121   E1                     POP   HL   
1122   E5                     PUSH   HL   
1123   11 00 00               LD   DE,0   
1126   B7                     OR   A   
1127   ED 52                  SBC   HL,DE   
1129   7D                     LD   A,L   
112A   B4                     OR   H   
112B   CA 9B 11               JP   Z,expectM_3023S40   
112E   CD B2 0E               CALL   printStr   
1131   43 6F 64 65 3A 20 31 30 20 30 20 2D 31 20 2F 72 67 20 5C 61 7B 25 61 2E 7D 20 2F 66 65 00 .CSTR   "Code: ","10 0 -1 /rg \\a{%a.} /fe"   
114F   CD B2 0E               CALL   printStr   
1152   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1161   21 00 00               LD   hl,0   
1164   E5                     PUSH   hl   
1165   E5                     PUSH   hl   
1166   CD B9 0F               CALL   run   
1169   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1173   CD B2 0E               CALL   printStr   
1176   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1183   E1                     POP   hl   
1184   E5                     PUSH   hl   
1185   E5                     PUSH   hl   
1186   CD B9 0F               CALL   run   
1189   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
119A   76                     HALT      
119B                EXPECTM_3023S40:      
119B   E1                     POP   HL   
119C                             ; test "0 10 1 /f1 \\a{%a.} /fe", 0
119C                             ; test "[1 2 3 /ab].a",0
119C   CD B2 0E               CALL   printStr   
119F   44 6F 6E 65 21 00      .CSTR   "Done!"   
11A5   76                     HALT      
11A6                          ;*Macro unroll:  test "/f", false
11A6   31 00 4E               LD   SP,STACK   
11A9   CD E6 0E               CALL   coldInit   
11AC   CD AC 4C               CALL   execStr   
11AF   2F 66 00               DB   "/f",0   
11B2   E1                     POP   HL   
11B3   E5                     PUSH   HL   
11B4   11 00 00               LD   DE,false   
11B7   B7                     OR   A   
11B8   ED 52                  SBC   HL,DE   
11BA   7D                     LD   A,L   
11BB   B4                     OR   H   
11BC   CA 17 12               JP   Z,expectM_3029S47   
11BF   CD B2 0E               CALL   printStr   
11C2   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
11CB   CD B2 0E               CALL   printStr   
11CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11DD   21 00 00               LD   hl,false   
11E0   E5                     PUSH   hl   
11E1   E5                     PUSH   hl   
11E2   CD B9 0F               CALL   run   
11E5   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
11EF   CD B2 0E               CALL   printStr   
11F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11FF   E1                     POP   hl   
1200   E5                     PUSH   hl   
1201   E5                     PUSH   hl   
1202   CD B9 0F               CALL   run   
1205   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1216   76                     HALT      
1217                EXPECTM_3029S47:      
1217   E1                     POP   HL   
1218                          ;*Macro unroll:  test "/t", true
1218   31 00 4E               LD   SP,STACK   
121B   CD E6 0E               CALL   coldInit   
121E   CD AC 4C               CALL   execStr   
1221   2F 74 00               DB   "/t",0   
1224   E1                     POP   HL   
1225   E5                     PUSH   HL   
1226   11 FF FF               LD   DE,true   
1229   B7                     OR   A   
122A   ED 52                  SBC   HL,DE   
122C   7D                     LD   A,L   
122D   B4                     OR   H   
122E   CA 89 12               JP   Z,expectM_3030S48   
1231   CD B2 0E               CALL   printStr   
1234   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
123D   CD B2 0E               CALL   printStr   
1240   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
124F   21 FF FF               LD   hl,true   
1252   E5                     PUSH   hl   
1253   E5                     PUSH   hl   
1254   CD B9 0F               CALL   run   
1257   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1261   CD B2 0E               CALL   printStr   
1264   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1271   E1                     POP   hl   
1272   E5                     PUSH   hl   
1273   E5                     PUSH   hl   
1274   CD B9 0F               CALL   run   
1277   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1288   76                     HALT      
1289                EXPECTM_3030S48:      
1289   E1                     POP   HL   
128A                          ;*Macro unroll:  test "1", 1
128A   31 00 4E               LD   SP,STACK   
128D   CD E6 0E               CALL   coldInit   
1290   CD AC 4C               CALL   execStr   
1293   31 00                  DB   "1",0   
1295   E1                     POP   HL   
1296   E5                     PUSH   HL   
1297   11 01 00               LD   DE,1   
129A   B7                     OR   A   
129B   ED 52                  SBC   HL,DE   
129D   7D                     LD   A,L   
129E   B4                     OR   H   
129F   CA F9 12               JP   Z,expectM_3031S49   
12A2   CD B2 0E               CALL   printStr   
12A5   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
12AD   CD B2 0E               CALL   printStr   
12B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12BF   21 01 00               LD   hl,1   
12C2   E5                     PUSH   hl   
12C3   E5                     PUSH   hl   
12C4   CD B9 0F               CALL   run   
12C7   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
12D1   CD B2 0E               CALL   printStr   
12D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12E1   E1                     POP   hl   
12E2   E5                     PUSH   hl   
12E3   E5                     PUSH   hl   
12E4   CD B9 0F               CALL   run   
12E7   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
12F8   76                     HALT      
12F9                EXPECTM_3031S49:      
12F9   E1                     POP   HL   
12FA                          ;*Macro unroll:  test "2", 2
12FA   31 00 4E               LD   SP,STACK   
12FD   CD E6 0E               CALL   coldInit   
1300   CD AC 4C               CALL   execStr   
1303   32 00                  DB   "2",0   
1305   E1                     POP   HL   
1306   E5                     PUSH   HL   
1307   11 02 00               LD   DE,2   
130A   B7                     OR   A   
130B   ED 52                  SBC   HL,DE   
130D   7D                     LD   A,L   
130E   B4                     OR   H   
130F   CA 69 13               JP   Z,expectM_3032S50   
1312   CD B2 0E               CALL   printStr   
1315   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
131D   CD B2 0E               CALL   printStr   
1320   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
132F   21 02 00               LD   hl,2   
1332   E5                     PUSH   hl   
1333   E5                     PUSH   hl   
1334   CD B9 0F               CALL   run   
1337   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1341   CD B2 0E               CALL   printStr   
1344   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1351   E1                     POP   hl   
1352   E5                     PUSH   hl   
1353   E5                     PUSH   hl   
1354   CD B9 0F               CALL   run   
1357   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1368   76                     HALT      
1369                EXPECTM_3032S50:      
1369   E1                     POP   HL   
136A                          ;*Macro unroll:  test "1", 1
136A   31 00 4E               LD   SP,STACK   
136D   CD E6 0E               CALL   coldInit   
1370   CD AC 4C               CALL   execStr   
1373   31 00                  DB   "1",0   
1375   E1                     POP   HL   
1376   E5                     PUSH   HL   
1377   11 01 00               LD   DE,1   
137A   B7                     OR   A   
137B   ED 52                  SBC   HL,DE   
137D   7D                     LD   A,L   
137E   B4                     OR   H   
137F   CA D9 13               JP   Z,expectM_3033S51   
1382   CD B2 0E               CALL   printStr   
1385   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
138D   CD B2 0E               CALL   printStr   
1390   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
139F   21 01 00               LD   hl,1   
13A2   E5                     PUSH   hl   
13A3   E5                     PUSH   hl   
13A4   CD B9 0F               CALL   run   
13A7   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
13B1   CD B2 0E               CALL   printStr   
13B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13C1   E1                     POP   hl   
13C2   E5                     PUSH   hl   
13C3   E5                     PUSH   hl   
13C4   CD B9 0F               CALL   run   
13C7   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
13D8   76                     HALT      
13D9                EXPECTM_3033S51:      
13D9   E1                     POP   HL   
13DA                          ;*Macro unroll:  test "0", 0
13DA   31 00 4E               LD   SP,STACK   
13DD   CD E6 0E               CALL   coldInit   
13E0   CD AC 4C               CALL   execStr   
13E3   30 00                  DB   "0",0   
13E5   E1                     POP   HL   
13E6   E5                     PUSH   HL   
13E7   11 00 00               LD   DE,0   
13EA   B7                     OR   A   
13EB   ED 52                  SBC   HL,DE   
13ED   7D                     LD   A,L   
13EE   B4                     OR   H   
13EF   CA 49 14               JP   Z,expectM_3034S52   
13F2   CD B2 0E               CALL   printStr   
13F5   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
13FD   CD B2 0E               CALL   printStr   
1400   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
140F   21 00 00               LD   hl,0   
1412   E5                     PUSH   hl   
1413   E5                     PUSH   hl   
1414   CD B9 0F               CALL   run   
1417   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1421   CD B2 0E               CALL   printStr   
1424   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1431   E1                     POP   hl   
1432   E5                     PUSH   hl   
1433   E5                     PUSH   hl   
1434   CD B9 0F               CALL   run   
1437   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1448   76                     HALT      
1449                EXPECTM_3034S52:      
1449   E1                     POP   HL   
144A                          ;*Macro unroll:  test "10", 10
144A   31 00 4E               LD   SP,STACK   
144D   CD E6 0E               CALL   coldInit   
1450   CD AC 4C               CALL   execStr   
1453   31 30 00               DB   "10",0   
1456   E1                     POP   HL   
1457   E5                     PUSH   HL   
1458   11 0A 00               LD   DE,10   
145B   B7                     OR   A   
145C   ED 52                  SBC   HL,DE   
145E   7D                     LD   A,L   
145F   B4                     OR   H   
1460   CA BB 14               JP   Z,expectM_3035S53   
1463   CD B2 0E               CALL   printStr   
1466   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
146F   CD B2 0E               CALL   printStr   
1472   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1481   21 0A 00               LD   hl,10   
1484   E5                     PUSH   hl   
1485   E5                     PUSH   hl   
1486   CD B9 0F               CALL   run   
1489   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1493   CD B2 0E               CALL   printStr   
1496   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14A3   E1                     POP   hl   
14A4   E5                     PUSH   hl   
14A5   E5                     PUSH   hl   
14A6   CD B9 0F               CALL   run   
14A9   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
14BA   76                     HALT      
14BB                EXPECTM_3035S53:      
14BB   E1                     POP   HL   
14BC                          ;*Macro unroll:  test "123", 123
14BC   31 00 4E               LD   SP,STACK   
14BF   CD E6 0E               CALL   coldInit   
14C2   CD AC 4C               CALL   execStr   
14C5   31 32 33 00            DB   "123",0   
14C9   E1                     POP   HL   
14CA   E5                     PUSH   HL   
14CB   11 7B 00               LD   DE,123   
14CE   B7                     OR   A   
14CF   ED 52                  SBC   HL,DE   
14D1   7D                     LD   A,L   
14D2   B4                     OR   H   
14D3   CA 2F 15               JP   Z,expectM_3036S54   
14D6   CD B2 0E               CALL   printStr   
14D9   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
14E3   CD B2 0E               CALL   printStr   
14E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14F5   21 7B 00               LD   hl,123   
14F8   E5                     PUSH   hl   
14F9   E5                     PUSH   hl   
14FA   CD B9 0F               CALL   run   
14FD   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1507   CD B2 0E               CALL   printStr   
150A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1517   E1                     POP   hl   
1518   E5                     PUSH   hl   
1519   E5                     PUSH   hl   
151A   CD B9 0F               CALL   run   
151D   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
152E   76                     HALT      
152F                EXPECTM_3036S54:      
152F   E1                     POP   HL   
1530                          ;*Macro unroll:  test "-1",-1
1530   31 00 4E               LD   SP,STACK   
1533   CD E6 0E               CALL   coldInit   
1536   CD AC 4C               CALL   execStr   
1539   2D 31 00               DB   "-1",0   
153C   E1                     POP   HL   
153D   E5                     PUSH   HL   
153E   11 FF FF               LD   DE,-1   
1541   B7                     OR   A   
1542   ED 52                  SBC   HL,DE   
1544   7D                     LD   A,L   
1545   B4                     OR   H   
1546   CA A1 15               JP   Z,expectM_3037S55   
1549   CD B2 0E               CALL   printStr   
154C   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1555   CD B2 0E               CALL   printStr   
1558   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1567   21 FF FF               LD   hl,-1   
156A   E5                     PUSH   hl   
156B   E5                     PUSH   hl   
156C   CD B9 0F               CALL   run   
156F   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1579   CD B2 0E               CALL   printStr   
157C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1589   E1                     POP   hl   
158A   E5                     PUSH   hl   
158B   E5                     PUSH   hl   
158C   CD B9 0F               CALL   run   
158F   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
15A0   76                     HALT      
15A1                EXPECTM_3037S55:      
15A1   E1                     POP   HL   
15A2                          ;*Macro unroll:  test "~a", $61
15A2   31 00 4E               LD   SP,STACK   
15A5   CD E6 0E               CALL   coldInit   
15A8   CD AC 4C               CALL   execStr   
15AB   7E 61 00               DB   "~a",0   
15AE   E1                     POP   HL   
15AF   E5                     PUSH   HL   
15B0   11 61 00               LD   DE,$61   
15B3   B7                     OR   A   
15B4   ED 52                  SBC   HL,DE   
15B6   7D                     LD   A,L   
15B7   B4                     OR   H   
15B8   CA 13 16               JP   Z,expectM_3038S56   
15BB   CD B2 0E               CALL   printStr   
15BE   43 6F 64 65 3A 20 7E 61 00 .CSTR   "Code: ","~a"   
15C7   CD B2 0E               CALL   printStr   
15CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15D9   21 61 00               LD   hl,$61   
15DC   E5                     PUSH   hl   
15DD   E5                     PUSH   hl   
15DE   CD B9 0F               CALL   run   
15E1   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
15EB   CD B2 0E               CALL   printStr   
15EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15FB   E1                     POP   hl   
15FC   E5                     PUSH   hl   
15FD   E5                     PUSH   hl   
15FE   CD B9 0F               CALL   run   
1601   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1612   76                     HALT      
1613                EXPECTM_3038S56:      
1613   E1                     POP   HL   
1614                          ;*Macro unroll:  test "~~", $7e
1614   31 00 4E               LD   SP,STACK   
1617   CD E6 0E               CALL   coldInit   
161A   CD AC 4C               CALL   execStr   
161D   7E 7E 00               DB   "~~",0   
1620   E1                     POP   HL   
1621   E5                     PUSH   HL   
1622   11 7E 00               LD   DE,$7e   
1625   B7                     OR   A   
1626   ED 52                  SBC   HL,DE   
1628   7D                     LD   A,L   
1629   B4                     OR   H   
162A   CA 85 16               JP   Z,expectM_3039S57   
162D   CD B2 0E               CALL   printStr   
1630   43 6F 64 65 3A 20 7E 7E 00 .CSTR   "Code: ","~~"   
1639   CD B2 0E               CALL   printStr   
163C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
164B   21 7E 00               LD   hl,$7e   
164E   E5                     PUSH   hl   
164F   E5                     PUSH   hl   
1650   CD B9 0F               CALL   run   
1653   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
165D   CD B2 0E               CALL   printStr   
1660   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
166D   E1                     POP   hl   
166E   E5                     PUSH   hl   
166F   E5                     PUSH   hl   
1670   CD B9 0F               CALL   run   
1673   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1684   76                     HALT      
1685                EXPECTM_3039S57:      
1685   E1                     POP   HL   
1686                          ;*Macro unroll:  test "$10", $10
1686   31 00 4E               LD   SP,STACK   
1689   CD E6 0E               CALL   coldInit   
168C   CD AC 4C               CALL   execStr   
168F   24 31 30 00            DB   "$10",0   
1693   E1                     POP   HL   
1694   E5                     PUSH   HL   
1695   11 10 00               LD   DE,$10   
1698   B7                     OR   A   
1699   ED 52                  SBC   HL,DE   
169B   7D                     LD   A,L   
169C   B4                     OR   H   
169D   CA F9 16               JP   Z,expectM_3040S58   
16A0   CD B2 0E               CALL   printStr   
16A3   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
16AD   CD B2 0E               CALL   printStr   
16B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16BF   21 10 00               LD   hl,$10   
16C2   E5                     PUSH   hl   
16C3   E5                     PUSH   hl   
16C4   CD B9 0F               CALL   run   
16C7   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
16D1   CD B2 0E               CALL   printStr   
16D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16E1   E1                     POP   hl   
16E2   E5                     PUSH   hl   
16E3   E5                     PUSH   hl   
16E4   CD B9 0F               CALL   run   
16E7   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
16F8   76                     HALT      
16F9                EXPECTM_3040S58:      
16F9   E1                     POP   HL   
16FA                          ;*Macro unroll:  test "$FF", $FF
16FA   31 00 4E               LD   SP,STACK   
16FD   CD E6 0E               CALL   coldInit   
1700   CD AC 4C               CALL   execStr   
1703   24 46 46 00            DB   "$FF",0   
1707   E1                     POP   HL   
1708   E5                     PUSH   HL   
1709   11 FF 00               LD   DE,$FF   
170C   B7                     OR   A   
170D   ED 52                  SBC   HL,DE   
170F   7D                     LD   A,L   
1710   B4                     OR   H   
1711   CA 6D 17               JP   Z,expectM_3041S59   
1714   CD B2 0E               CALL   printStr   
1717   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1721   CD B2 0E               CALL   printStr   
1724   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1733   21 FF 00               LD   hl,$FF   
1736   E5                     PUSH   hl   
1737   E5                     PUSH   hl   
1738   CD B9 0F               CALL   run   
173B   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1745   CD B2 0E               CALL   printStr   
1748   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1755   E1                     POP   hl   
1756   E5                     PUSH   hl   
1757   E5                     PUSH   hl   
1758   CD B9 0F               CALL   run   
175B   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
176C   76                     HALT      
176D                EXPECTM_3041S59:      
176D   E1                     POP   HL   
176E                          ;*Macro unroll:  test "-1 2 +",1
176E   31 00 4E               LD   SP,STACK   
1771   CD E6 0E               CALL   coldInit   
1774   CD AC 4C               CALL   execStr   
1777   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
177E   E1                     POP   HL   
177F   E5                     PUSH   HL   
1780   11 01 00               LD   DE,1   
1783   B7                     OR   A   
1784   ED 52                  SBC   HL,DE   
1786   7D                     LD   A,L   
1787   B4                     OR   H   
1788   CA E7 17               JP   Z,expectM_3042S60   
178B   CD B2 0E               CALL   printStr   
178E   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
179B   CD B2 0E               CALL   printStr   
179E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17AD   21 01 00               LD   hl,1   
17B0   E5                     PUSH   hl   
17B1   E5                     PUSH   hl   
17B2   CD B9 0F               CALL   run   
17B5   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
17BF   CD B2 0E               CALL   printStr   
17C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17CF   E1                     POP   hl   
17D0   E5                     PUSH   hl   
17D1   E5                     PUSH   hl   
17D2   CD B9 0F               CALL   run   
17D5   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
17E6   76                     HALT      
17E7                EXPECTM_3042S60:      
17E7   E1                     POP   HL   
17E8                          ;*Macro unroll:  test "-1 1 +",0
17E8   31 00 4E               LD   SP,STACK   
17EB   CD E6 0E               CALL   coldInit   
17EE   CD AC 4C               CALL   execStr   
17F1   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
17F8   E1                     POP   HL   
17F9   E5                     PUSH   HL   
17FA   11 00 00               LD   DE,0   
17FD   B7                     OR   A   
17FE   ED 52                  SBC   HL,DE   
1800   7D                     LD   A,L   
1801   B4                     OR   H   
1802   CA 61 18               JP   Z,expectM_3043S61   
1805   CD B2 0E               CALL   printStr   
1808   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1815   CD B2 0E               CALL   printStr   
1818   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1827   21 00 00               LD   hl,0   
182A   E5                     PUSH   hl   
182B   E5                     PUSH   hl   
182C   CD B9 0F               CALL   run   
182F   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1839   CD B2 0E               CALL   printStr   
183C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1849   E1                     POP   hl   
184A   E5                     PUSH   hl   
184B   E5                     PUSH   hl   
184C   CD B9 0F               CALL   run   
184F   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1860   76                     HALT      
1861                EXPECTM_3043S61:      
1861   E1                     POP   HL   
1862                          ;*Macro unroll:  test "1 2 +", 3
1862   31 00 4E               LD   SP,STACK   
1865   CD E6 0E               CALL   coldInit   
1868   CD AC 4C               CALL   execStr   
186B   31 20 32 20 2B 00      DB   "1 2 +",0   
1871   E1                     POP   HL   
1872   E5                     PUSH   HL   
1873   11 03 00               LD   DE,3   
1876   B7                     OR   A   
1877   ED 52                  SBC   HL,DE   
1879   7D                     LD   A,L   
187A   B4                     OR   H   
187B   CA D9 18               JP   Z,expectM_3044S62   
187E   CD B2 0E               CALL   printStr   
1881   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
188D   CD B2 0E               CALL   printStr   
1890   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
189F   21 03 00               LD   hl,3   
18A2   E5                     PUSH   hl   
18A3   E5                     PUSH   hl   
18A4   CD B9 0F               CALL   run   
18A7   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
18B1   CD B2 0E               CALL   printStr   
18B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18C1   E1                     POP   hl   
18C2   E5                     PUSH   hl   
18C3   E5                     PUSH   hl   
18C4   CD B9 0F               CALL   run   
18C7   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
18D8   76                     HALT      
18D9                EXPECTM_3044S62:      
18D9   E1                     POP   HL   
18DA                          ;*Macro unroll:  test "4 1 2 +", 3
18DA   31 00 4E               LD   SP,STACK   
18DD   CD E6 0E               CALL   coldInit   
18E0   CD AC 4C               CALL   execStr   
18E3   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
18EB   E1                     POP   HL   
18EC   E5                     PUSH   HL   
18ED   11 03 00               LD   DE,3   
18F0   B7                     OR   A   
18F1   ED 52                  SBC   HL,DE   
18F3   7D                     LD   A,L   
18F4   B4                     OR   H   
18F5   CA 55 19               JP   Z,expectM_3045S63   
18F8   CD B2 0E               CALL   printStr   
18FB   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1909   CD B2 0E               CALL   printStr   
190C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
191B   21 03 00               LD   hl,3   
191E   E5                     PUSH   hl   
191F   E5                     PUSH   hl   
1920   CD B9 0F               CALL   run   
1923   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
192D   CD B2 0E               CALL   printStr   
1930   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
193D   E1                     POP   hl   
193E   E5                     PUSH   hl   
193F   E5                     PUSH   hl   
1940   CD B9 0F               CALL   run   
1943   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1954   76                     HALT      
1955                EXPECTM_3045S63:      
1955   E1                     POP   HL   
1956                          ;*Macro unroll:  test "123 456 +", 123+456
1956   31 00 4E               LD   SP,STACK   
1959   CD E6 0E               CALL   coldInit   
195C   CD AC 4C               CALL   execStr   
195F   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1969   E1                     POP   HL   
196A   E5                     PUSH   HL   
196B   11 43 02               LD   DE,123+456   
196E   B7                     OR   A   
196F   ED 52                  SBC   HL,DE   
1971   7D                     LD   A,L   
1972   B4                     OR   H   
1973   CA D5 19               JP   Z,expectM_3046S64   
1976   CD B2 0E               CALL   printStr   
1979   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1989   CD B2 0E               CALL   printStr   
198C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
199B   21 43 02               LD   hl,123+456   
199E   E5                     PUSH   hl   
199F   E5                     PUSH   hl   
19A0   CD B9 0F               CALL   run   
19A3   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
19AD   CD B2 0E               CALL   printStr   
19B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19BD   E1                     POP   hl   
19BE   E5                     PUSH   hl   
19BF   E5                     PUSH   hl   
19C0   CD B9 0F               CALL   run   
19C3   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
19D4   76                     HALT      
19D5                EXPECTM_3046S64:      
19D5   E1                     POP   HL   
19D6                          ;*Macro unroll:  test "64 128 +", 64+128
19D6   31 00 4E               LD   SP,STACK   
19D9   CD E6 0E               CALL   coldInit   
19DC   CD AC 4C               CALL   execStr   
19DF   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
19E8   E1                     POP   HL   
19E9   E5                     PUSH   HL   
19EA   11 C0 00               LD   DE,64+128   
19ED   B7                     OR   A   
19EE   ED 52                  SBC   HL,DE   
19F0   7D                     LD   A,L   
19F1   B4                     OR   H   
19F2   CA 53 1A               JP   Z,expectM_3047S65   
19F5   CD B2 0E               CALL   printStr   
19F8   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1A07   CD B2 0E               CALL   printStr   
1A0A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A19   21 C0 00               LD   hl,64+128   
1A1C   E5                     PUSH   hl   
1A1D   E5                     PUSH   hl   
1A1E   CD B9 0F               CALL   run   
1A21   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1A2B   CD B2 0E               CALL   printStr   
1A2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A3B   E1                     POP   hl   
1A3C   E5                     PUSH   hl   
1A3D   E5                     PUSH   hl   
1A3E   CD B9 0F               CALL   run   
1A41   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1A52   76                     HALT      
1A53                EXPECTM_3047S65:      
1A53   E1                     POP   HL   
1A54                          ;*Macro unroll:  test "1 2 +", 3
1A54   31 00 4E               LD   SP,STACK   
1A57   CD E6 0E               CALL   coldInit   
1A5A   CD AC 4C               CALL   execStr   
1A5D   31 20 32 20 2B 00      DB   "1 2 +",0   
1A63   E1                     POP   HL   
1A64   E5                     PUSH   HL   
1A65   11 03 00               LD   DE,3   
1A68   B7                     OR   A   
1A69   ED 52                  SBC   HL,DE   
1A6B   7D                     LD   A,L   
1A6C   B4                     OR   H   
1A6D   CA CB 1A               JP   Z,expectM_3048S66   
1A70   CD B2 0E               CALL   printStr   
1A73   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A7F   CD B2 0E               CALL   printStr   
1A82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A91   21 03 00               LD   hl,3   
1A94   E5                     PUSH   hl   
1A95   E5                     PUSH   hl   
1A96   CD B9 0F               CALL   run   
1A99   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1AA3   CD B2 0E               CALL   printStr   
1AA6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AB3   E1                     POP   hl   
1AB4   E5                     PUSH   hl   
1AB5   E5                     PUSH   hl   
1AB6   CD B9 0F               CALL   run   
1AB9   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1ACA   76                     HALT      
1ACB                EXPECTM_3048S66:      
1ACB   E1                     POP   HL   
1ACC                          ;*Macro unroll:  test "1a= a++ a",2
1ACC   31 00 4E               LD   SP,STACK   
1ACF   CD E6 0E               CALL   coldInit   
1AD2   CD AC 4C               CALL   execStr   
1AD5   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1ADF   E1                     POP   HL   
1AE0   E5                     PUSH   HL   
1AE1   11 02 00               LD   DE,2   
1AE4   B7                     OR   A   
1AE5   ED 52                  SBC   HL,DE   
1AE7   7D                     LD   A,L   
1AE8   B4                     OR   H   
1AE9   CA 4B 1B               JP   Z,expectM_3049S67   
1AEC   CD B2 0E               CALL   printStr   
1AEF   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1AFF   CD B2 0E               CALL   printStr   
1B02   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B11   21 02 00               LD   hl,2   
1B14   E5                     PUSH   hl   
1B15   E5                     PUSH   hl   
1B16   CD B9 0F               CALL   run   
1B19   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1B23   CD B2 0E               CALL   printStr   
1B26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B33   E1                     POP   hl   
1B34   E5                     PUSH   hl   
1B35   E5                     PUSH   hl   
1B36   CD B9 0F               CALL   run   
1B39   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1B4A   76                     HALT      
1B4B                EXPECTM_3049S67:      
1B4B   E1                     POP   HL   
1B4C                          ;*Macro unroll:  test "-1 -1 -",0
1B4C   31 00 4E               LD   SP,STACK   
1B4F   CD E6 0E               CALL   coldInit   
1B52   CD AC 4C               CALL   execStr   
1B55   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1B5D   E1                     POP   HL   
1B5E   E5                     PUSH   HL   
1B5F   11 00 00               LD   DE,0   
1B62   B7                     OR   A   
1B63   ED 52                  SBC   HL,DE   
1B65   7D                     LD   A,L   
1B66   B4                     OR   H   
1B67   CA C7 1B               JP   Z,expectM_3050S68   
1B6A   CD B2 0E               CALL   printStr   
1B6D   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1B7B   CD B2 0E               CALL   printStr   
1B7E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B8D   21 00 00               LD   hl,0   
1B90   E5                     PUSH   hl   
1B91   E5                     PUSH   hl   
1B92   CD B9 0F               CALL   run   
1B95   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1B9F   CD B2 0E               CALL   printStr   
1BA2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BAF   E1                     POP   hl   
1BB0   E5                     PUSH   hl   
1BB1   E5                     PUSH   hl   
1BB2   CD B9 0F               CALL   run   
1BB5   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1BC6   76                     HALT      
1BC7                EXPECTM_3050S68:      
1BC7   E1                     POP   HL   
1BC8                          ;*Macro unroll:  test "5 3 -", 2
1BC8   31 00 4E               LD   SP,STACK   
1BCB   CD E6 0E               CALL   coldInit   
1BCE   CD AC 4C               CALL   execStr   
1BD1   35 20 33 20 2D 00      DB   "5 3 -",0   
1BD7   E1                     POP   HL   
1BD8   E5                     PUSH   HL   
1BD9   11 02 00               LD   DE,2   
1BDC   B7                     OR   A   
1BDD   ED 52                  SBC   HL,DE   
1BDF   7D                     LD   A,L   
1BE0   B4                     OR   H   
1BE1   CA 3F 1C               JP   Z,expectM_3051S69   
1BE4   CD B2 0E               CALL   printStr   
1BE7   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1BF3   CD B2 0E               CALL   printStr   
1BF6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C05   21 02 00               LD   hl,2   
1C08   E5                     PUSH   hl   
1C09   E5                     PUSH   hl   
1C0A   CD B9 0F               CALL   run   
1C0D   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1C17   CD B2 0E               CALL   printStr   
1C1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C27   E1                     POP   hl   
1C28   E5                     PUSH   hl   
1C29   E5                     PUSH   hl   
1C2A   CD B9 0F               CALL   run   
1C2D   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1C3E   76                     HALT      
1C3F                EXPECTM_3051S69:      
1C3F   E1                     POP   HL   
1C40                          ;*Macro unroll:  test "2 1 -",1
1C40   31 00 4E               LD   SP,STACK   
1C43   CD E6 0E               CALL   coldInit   
1C46   CD AC 4C               CALL   execStr   
1C49   32 20 31 20 2D 00      DB   "2 1 -",0   
1C4F   E1                     POP   HL   
1C50   E5                     PUSH   HL   
1C51   11 01 00               LD   DE,1   
1C54   B7                     OR   A   
1C55   ED 52                  SBC   HL,DE   
1C57   7D                     LD   A,L   
1C58   B4                     OR   H   
1C59   CA B7 1C               JP   Z,expectM_3052S70   
1C5C   CD B2 0E               CALL   printStr   
1C5F   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1C6B   CD B2 0E               CALL   printStr   
1C6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C7D   21 01 00               LD   hl,1   
1C80   E5                     PUSH   hl   
1C81   E5                     PUSH   hl   
1C82   CD B9 0F               CALL   run   
1C85   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1C8F   CD B2 0E               CALL   printStr   
1C92   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C9F   E1                     POP   hl   
1CA0   E5                     PUSH   hl   
1CA1   E5                     PUSH   hl   
1CA2   CD B9 0F               CALL   run   
1CA5   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1CB6   76                     HALT      
1CB7                EXPECTM_3052S70:      
1CB7   E1                     POP   HL   
1CB8                          ;*Macro unroll:  test "3a= a-- a",2
1CB8   31 00 4E               LD   SP,STACK   
1CBB   CD E6 0E               CALL   coldInit   
1CBE   CD AC 4C               CALL   execStr   
1CC1   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1CCB   E1                     POP   HL   
1CCC   E5                     PUSH   HL   
1CCD   11 02 00               LD   DE,2   
1CD0   B7                     OR   A   
1CD1   ED 52                  SBC   HL,DE   
1CD3   7D                     LD   A,L   
1CD4   B4                     OR   H   
1CD5   CA 37 1D               JP   Z,expectM_3053S71   
1CD8   CD B2 0E               CALL   printStr   
1CDB   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1CEB   CD B2 0E               CALL   printStr   
1CEE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CFD   21 02 00               LD   hl,2   
1D00   E5                     PUSH   hl   
1D01   E5                     PUSH   hl   
1D02   CD B9 0F               CALL   run   
1D05   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1D0F   CD B2 0E               CALL   printStr   
1D12   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D1F   E1                     POP   hl   
1D20   E5                     PUSH   hl   
1D21   E5                     PUSH   hl   
1D22   CD B9 0F               CALL   run   
1D25   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1D36   76                     HALT      
1D37                EXPECTM_3053S71:      
1D37   E1                     POP   HL   
1D38                          ;*Macro unroll:  test "3 5 &", 1
1D38   31 00 4E               LD   SP,STACK   
1D3B   CD E6 0E               CALL   coldInit   
1D3E   CD AC 4C               CALL   execStr   
1D41   33 20 35 20 26 00      DB   "3 5 &",0   
1D47   E1                     POP   HL   
1D48   E5                     PUSH   HL   
1D49   11 01 00               LD   DE,1   
1D4C   B7                     OR   A   
1D4D   ED 52                  SBC   HL,DE   
1D4F   7D                     LD   A,L   
1D50   B4                     OR   H   
1D51   CA AF 1D               JP   Z,expectM_3054S72   
1D54   CD B2 0E               CALL   printStr   
1D57   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1D63   CD B2 0E               CALL   printStr   
1D66   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D75   21 01 00               LD   hl,1   
1D78   E5                     PUSH   hl   
1D79   E5                     PUSH   hl   
1D7A   CD B9 0F               CALL   run   
1D7D   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1D87   CD B2 0E               CALL   printStr   
1D8A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D97   E1                     POP   hl   
1D98   E5                     PUSH   hl   
1D99   E5                     PUSH   hl   
1D9A   CD B9 0F               CALL   run   
1D9D   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1DAE   76                     HALT      
1DAF                EXPECTM_3054S72:      
1DAF   E1                     POP   HL   
1DB0                          ;*Macro unroll:  test "3 5 |", 7
1DB0   31 00 4E               LD   SP,STACK   
1DB3   CD E6 0E               CALL   coldInit   
1DB6   CD AC 4C               CALL   execStr   
1DB9   33 20 35 20 7C 00      DB   "3 5 |",0   
1DBF   E1                     POP   HL   
1DC0   E5                     PUSH   HL   
1DC1   11 07 00               LD   DE,7   
1DC4   B7                     OR   A   
1DC5   ED 52                  SBC   HL,DE   
1DC7   7D                     LD   A,L   
1DC8   B4                     OR   H   
1DC9   CA 27 1E               JP   Z,expectM_3055S73   
1DCC   CD B2 0E               CALL   printStr   
1DCF   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1DDB   CD B2 0E               CALL   printStr   
1DDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DED   21 07 00               LD   hl,7   
1DF0   E5                     PUSH   hl   
1DF1   E5                     PUSH   hl   
1DF2   CD B9 0F               CALL   run   
1DF5   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1DFF   CD B2 0E               CALL   printStr   
1E02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E0F   E1                     POP   hl   
1E10   E5                     PUSH   hl   
1E11   E5                     PUSH   hl   
1E12   CD B9 0F               CALL   run   
1E15   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1E26   76                     HALT      
1E27                EXPECTM_3055S73:      
1E27   E1                     POP   HL   
1E28                          ;*Macro unroll:  test "3 5 /x", 6
1E28   31 00 4E               LD   SP,STACK   
1E2B   CD E6 0E               CALL   coldInit   
1E2E   CD AC 4C               CALL   execStr   
1E31   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1E38   E1                     POP   HL   
1E39   E5                     PUSH   HL   
1E3A   11 06 00               LD   DE,6   
1E3D   B7                     OR   A   
1E3E   ED 52                  SBC   HL,DE   
1E40   7D                     LD   A,L   
1E41   B4                     OR   H   
1E42   CA A1 1E               JP   Z,expectM_3056S74   
1E45   CD B2 0E               CALL   printStr   
1E48   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1E55   CD B2 0E               CALL   printStr   
1E58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E67   21 06 00               LD   hl,6   
1E6A   E5                     PUSH   hl   
1E6B   E5                     PUSH   hl   
1E6C   CD B9 0F               CALL   run   
1E6F   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1E79   CD B2 0E               CALL   printStr   
1E7C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E89   E1                     POP   hl   
1E8A   E5                     PUSH   hl   
1E8B   E5                     PUSH   hl   
1E8C   CD B9 0F               CALL   run   
1E8F   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1EA0   76                     HALT      
1EA1                EXPECTM_3056S74:      
1EA1   E1                     POP   HL   
1EA2                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1EA2   31 00 4E               LD   SP,STACK   
1EA5   CD E6 0E               CALL   coldInit   
1EA8   CD AC 4C               CALL   execStr   
1EAB   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1EBA   E1                     POP   HL   
1EBB   E5                     PUSH   HL   
1EBC   11 06 00               LD   DE,6   
1EBF   B7                     OR   A   
1EC0   ED 52                  SBC   HL,DE   
1EC2   7D                     LD   A,L   
1EC3   B4                     OR   H   
1EC4   CA 2B 1F               JP   Z,expectM_3057S75   
1EC7   CD B2 0E               CALL   printStr   
1ECA   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1EDF   CD B2 0E               CALL   printStr   
1EE2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EF1   21 06 00               LD   hl,6   
1EF4   E5                     PUSH   hl   
1EF5   E5                     PUSH   hl   
1EF6   CD B9 0F               CALL   run   
1EF9   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1F03   CD B2 0E               CALL   printStr   
1F06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F13   E1                     POP   hl   
1F14   E5                     PUSH   hl   
1F15   E5                     PUSH   hl   
1F16   CD B9 0F               CALL   run   
1F19   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1F2A   76                     HALT      
1F2B                EXPECTM_3057S75:      
1F2B   E1                     POP   HL   
1F2C                          ;*Macro unroll:  test "2 3 *", 6
1F2C   31 00 4E               LD   SP,STACK   
1F2F   CD E6 0E               CALL   coldInit   
1F32   CD AC 4C               CALL   execStr   
1F35   32 20 33 20 2A 00      DB   "2 3 *",0   
1F3B   E1                     POP   HL   
1F3C   E5                     PUSH   HL   
1F3D   11 06 00               LD   DE,6   
1F40   B7                     OR   A   
1F41   ED 52                  SBC   HL,DE   
1F43   7D                     LD   A,L   
1F44   B4                     OR   H   
1F45   CA A3 1F               JP   Z,expectM_3058S76   
1F48   CD B2 0E               CALL   printStr   
1F4B   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1F57   CD B2 0E               CALL   printStr   
1F5A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F69   21 06 00               LD   hl,6   
1F6C   E5                     PUSH   hl   
1F6D   E5                     PUSH   hl   
1F6E   CD B9 0F               CALL   run   
1F71   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1F7B   CD B2 0E               CALL   printStr   
1F7E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F8B   E1                     POP   hl   
1F8C   E5                     PUSH   hl   
1F8D   E5                     PUSH   hl   
1F8E   CD B9 0F               CALL   run   
1F91   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
1FA2   76                     HALT      
1FA3                EXPECTM_3058S76:      
1FA3   E1                     POP   HL   
1FA4                          ;*Macro unroll:  test "1 2 3 + *", 5
1FA4   31 00 4E               LD   SP,STACK   
1FA7   CD E6 0E               CALL   coldInit   
1FAA   CD AC 4C               CALL   execStr   
1FAD   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1FB7   E1                     POP   HL   
1FB8   E5                     PUSH   HL   
1FB9   11 05 00               LD   DE,5   
1FBC   B7                     OR   A   
1FBD   ED 52                  SBC   HL,DE   
1FBF   7D                     LD   A,L   
1FC0   B4                     OR   H   
1FC1   CA 23 20               JP   Z,expectM_3059S77   
1FC4   CD B2 0E               CALL   printStr   
1FC7   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1FD7   CD B2 0E               CALL   printStr   
1FDA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FE9   21 05 00               LD   hl,5   
1FEC   E5                     PUSH   hl   
1FED   E5                     PUSH   hl   
1FEE   CD B9 0F               CALL   run   
1FF1   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
1FFB   CD B2 0E               CALL   printStr   
1FFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
200B   E1                     POP   hl   
200C   E5                     PUSH   hl   
200D   E5                     PUSH   hl   
200E   CD B9 0F               CALL   run   
2011   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2022   76                     HALT      
2023                EXPECTM_3059S77:      
2023   E1                     POP   HL   
2024                          ;*Macro unroll:  test "7 3 /", 2
2024   31 00 4E               LD   SP,STACK   
2027   CD E6 0E               CALL   coldInit   
202A   CD AC 4C               CALL   execStr   
202D   37 20 33 20 2F 00      DB   "7 3 /",0   
2033   E1                     POP   HL   
2034   E5                     PUSH   HL   
2035   11 02 00               LD   DE,2   
2038   B7                     OR   A   
2039   ED 52                  SBC   HL,DE   
203B   7D                     LD   A,L   
203C   B4                     OR   H   
203D   CA 9B 20               JP   Z,expectM_3060S78   
2040   CD B2 0E               CALL   printStr   
2043   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
204F   CD B2 0E               CALL   printStr   
2052   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2061   21 02 00               LD   hl,2   
2064   E5                     PUSH   hl   
2065   E5                     PUSH   hl   
2066   CD B9 0F               CALL   run   
2069   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2073   CD B2 0E               CALL   printStr   
2076   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2083   E1                     POP   hl   
2084   E5                     PUSH   hl   
2085   E5                     PUSH   hl   
2086   CD B9 0F               CALL   run   
2089   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
209A   76                     HALT      
209B                EXPECTM_3060S78:      
209B   E1                     POP   HL   
209C                          ;*Macro unroll:  test "100a= 1a+= a", 101
209C   31 00 4E               LD   SP,STACK   
209F   CD E6 0E               CALL   coldInit   
20A2   CD AC 4C               CALL   execStr   
20A5   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
20B2   E1                     POP   HL   
20B3   E5                     PUSH   HL   
20B4   11 65 00               LD   DE,101   
20B7   B7                     OR   A   
20B8   ED 52                  SBC   HL,DE   
20BA   7D                     LD   A,L   
20BB   B4                     OR   H   
20BC   CA 21 21               JP   Z,expectM_3061S79   
20BF   CD B2 0E               CALL   printStr   
20C2   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
20D5   CD B2 0E               CALL   printStr   
20D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20E7   21 65 00               LD   hl,101   
20EA   E5                     PUSH   hl   
20EB   E5                     PUSH   hl   
20EC   CD B9 0F               CALL   run   
20EF   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
20F9   CD B2 0E               CALL   printStr   
20FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2109   E1                     POP   hl   
210A   E5                     PUSH   hl   
210B   E5                     PUSH   hl   
210C   CD B9 0F               CALL   run   
210F   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2120   76                     HALT      
2121                EXPECTM_3061S79:      
2121   E1                     POP   HL   
2122                          ;*Macro unroll:  test "100a= a1-= a", 99
2122   31 00 4E               LD   SP,STACK   
2125   CD E6 0E               CALL   coldInit   
2128   CD AC 4C               CALL   execStr   
212B   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
2138   E1                     POP   HL   
2139   E5                     PUSH   HL   
213A   11 63 00               LD   DE,99   
213D   B7                     OR   A   
213E   ED 52                  SBC   HL,DE   
2140   7D                     LD   A,L   
2141   B4                     OR   H   
2142   CA A7 21               JP   Z,expectM_3062S80   
2145   CD B2 0E               CALL   printStr   
2148   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
215B   CD B2 0E               CALL   printStr   
215E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
216D   21 63 00               LD   hl,99   
2170   E5                     PUSH   hl   
2171   E5                     PUSH   hl   
2172   CD B9 0F               CALL   run   
2175   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
217F   CD B2 0E               CALL   printStr   
2182   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
218F   E1                     POP   hl   
2190   E5                     PUSH   hl   
2191   E5                     PUSH   hl   
2192   CD B9 0F               CALL   run   
2195   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
21A6   76                     HALT      
21A7                EXPECTM_3062S80:      
21A7   E1                     POP   HL   
21A8                          ;*Macro unroll:  test "100a= a2*= a", 200
21A8   31 00 4E               LD   SP,STACK   
21AB   CD E6 0E               CALL   coldInit   
21AE   CD AC 4C               CALL   execStr   
21B1   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
21BE   E1                     POP   HL   
21BF   E5                     PUSH   HL   
21C0   11 C8 00               LD   DE,200   
21C3   B7                     OR   A   
21C4   ED 52                  SBC   HL,DE   
21C6   7D                     LD   A,L   
21C7   B4                     OR   H   
21C8   CA 2D 22               JP   Z,expectM_3063S81   
21CB   CD B2 0E               CALL   printStr   
21CE   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
21E1   CD B2 0E               CALL   printStr   
21E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21F3   21 C8 00               LD   hl,200   
21F6   E5                     PUSH   hl   
21F7   E5                     PUSH   hl   
21F8   CD B9 0F               CALL   run   
21FB   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2205   CD B2 0E               CALL   printStr   
2208   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2215   E1                     POP   hl   
2216   E5                     PUSH   hl   
2217   E5                     PUSH   hl   
2218   CD B9 0F               CALL   run   
221B   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
222C   76                     HALT      
222D                EXPECTM_3063S81:      
222D   E1                     POP   HL   
222E                          ;*Macro unroll:  test "100a= a2/= a", 50
222E   31 00 4E               LD   SP,STACK   
2231   CD E6 0E               CALL   coldInit   
2234   CD AC 4C               CALL   execStr   
2237   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
2244   E1                     POP   HL   
2245   E5                     PUSH   HL   
2246   11 32 00               LD   DE,50   
2249   B7                     OR   A   
224A   ED 52                  SBC   HL,DE   
224C   7D                     LD   A,L   
224D   B4                     OR   H   
224E   CA B3 22               JP   Z,expectM_3064S82   
2251   CD B2 0E               CALL   printStr   
2254   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
2267   CD B2 0E               CALL   printStr   
226A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2279   21 32 00               LD   hl,50   
227C   E5                     PUSH   hl   
227D   E5                     PUSH   hl   
227E   CD B9 0F               CALL   run   
2281   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
228B   CD B2 0E               CALL   printStr   
228E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
229B   E1                     POP   hl   
229C   E5                     PUSH   hl   
229D   E5                     PUSH   hl   
229E   CD B9 0F               CALL   run   
22A1   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
22B2   76                     HALT      
22B3                EXPECTM_3064S82:      
22B3   E1                     POP   HL   
22B4                          ;*Macro unroll:  test "7 3 / /re", 1
22B4   31 00 4E               LD   SP,STACK   
22B7   CD E6 0E               CALL   coldInit   
22BA   CD AC 4C               CALL   execStr   
22BD   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
22C7   E1                     POP   HL   
22C8   E5                     PUSH   HL   
22C9   11 01 00               LD   DE,1   
22CC   B7                     OR   A   
22CD   ED 52                  SBC   HL,DE   
22CF   7D                     LD   A,L   
22D0   B4                     OR   H   
22D1   CA 33 23               JP   Z,expectM_3065S83   
22D4   CD B2 0E               CALL   printStr   
22D7   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
22E7   CD B2 0E               CALL   printStr   
22EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22F9   21 01 00               LD   hl,1   
22FC   E5                     PUSH   hl   
22FD   E5                     PUSH   hl   
22FE   CD B9 0F               CALL   run   
2301   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
230B   CD B2 0E               CALL   printStr   
230E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
231B   E1                     POP   hl   
231C   E5                     PUSH   hl   
231D   E5                     PUSH   hl   
231E   CD B9 0F               CALL   run   
2321   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2332   76                     HALT      
2333                EXPECTM_3065S83:      
2333   E1                     POP   HL   
2334                          ;*Macro unroll:  test "7 3 /", 2
2334   31 00 4E               LD   SP,STACK   
2337   CD E6 0E               CALL   coldInit   
233A   CD AC 4C               CALL   execStr   
233D   37 20 33 20 2F 00      DB   "7 3 /",0   
2343   E1                     POP   HL   
2344   E5                     PUSH   HL   
2345   11 02 00               LD   DE,2   
2348   B7                     OR   A   
2349   ED 52                  SBC   HL,DE   
234B   7D                     LD   A,L   
234C   B4                     OR   H   
234D   CA AB 23               JP   Z,expectM_3066S84   
2350   CD B2 0E               CALL   printStr   
2353   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
235F   CD B2 0E               CALL   printStr   
2362   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2371   21 02 00               LD   hl,2   
2374   E5                     PUSH   hl   
2375   E5                     PUSH   hl   
2376   CD B9 0F               CALL   run   
2379   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2383   CD B2 0E               CALL   printStr   
2386   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2393   E1                     POP   hl   
2394   E5                     PUSH   hl   
2395   E5                     PUSH   hl   
2396   CD B9 0F               CALL   run   
2399   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
23AA   76                     HALT      
23AB                EXPECTM_3066S84:      
23AB   E1                     POP   HL   
23AC                          ;*Macro unroll:  test "2 3 ==", FALSE
23AC   31 00 4E               LD   SP,STACK   
23AF   CD E6 0E               CALL   coldInit   
23B2   CD AC 4C               CALL   execStr   
23B5   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
23BC   E1                     POP   HL   
23BD   E5                     PUSH   HL   
23BE   11 00 00               LD   DE,FALSE   
23C1   B7                     OR   A   
23C2   ED 52                  SBC   HL,DE   
23C4   7D                     LD   A,L   
23C5   B4                     OR   H   
23C6   CA 25 24               JP   Z,expectM_3067S85   
23C9   CD B2 0E               CALL   printStr   
23CC   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
23D9   CD B2 0E               CALL   printStr   
23DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23EB   21 00 00               LD   hl,FALSE   
23EE   E5                     PUSH   hl   
23EF   E5                     PUSH   hl   
23F0   CD B9 0F               CALL   run   
23F3   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
23FD   CD B2 0E               CALL   printStr   
2400   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
240D   E1                     POP   hl   
240E   E5                     PUSH   hl   
240F   E5                     PUSH   hl   
2410   CD B9 0F               CALL   run   
2413   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2424   76                     HALT      
2425                EXPECTM_3067S85:      
2425   E1                     POP   HL   
2426                          ;*Macro unroll:  test "3 3 ==", TRUE
2426   31 00 4E               LD   SP,STACK   
2429   CD E6 0E               CALL   coldInit   
242C   CD AC 4C               CALL   execStr   
242F   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2436   E1                     POP   HL   
2437   E5                     PUSH   HL   
2438   11 FF FF               LD   DE,TRUE   
243B   B7                     OR   A   
243C   ED 52                  SBC   HL,DE   
243E   7D                     LD   A,L   
243F   B4                     OR   H   
2440   CA 9F 24               JP   Z,expectM_3068S86   
2443   CD B2 0E               CALL   printStr   
2446   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2453   CD B2 0E               CALL   printStr   
2456   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2465   21 FF FF               LD   hl,TRUE   
2468   E5                     PUSH   hl   
2469   E5                     PUSH   hl   
246A   CD B9 0F               CALL   run   
246D   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2477   CD B2 0E               CALL   printStr   
247A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2487   E1                     POP   hl   
2488   E5                     PUSH   hl   
2489   E5                     PUSH   hl   
248A   CD B9 0F               CALL   run   
248D   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
249E   76                     HALT      
249F                EXPECTM_3068S86:      
249F   E1                     POP   HL   
24A0                          ;*Macro unroll:  test "1 2 <", TRUE
24A0   31 00 4E               LD   SP,STACK   
24A3   CD E6 0E               CALL   coldInit   
24A6   CD AC 4C               CALL   execStr   
24A9   31 20 32 20 3C 00      DB   "1 2 <",0   
24AF   E1                     POP   HL   
24B0   E5                     PUSH   HL   
24B1   11 FF FF               LD   DE,TRUE   
24B4   B7                     OR   A   
24B5   ED 52                  SBC   HL,DE   
24B7   7D                     LD   A,L   
24B8   B4                     OR   H   
24B9   CA 17 25               JP   Z,expectM_3069S87   
24BC   CD B2 0E               CALL   printStr   
24BF   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
24CB   CD B2 0E               CALL   printStr   
24CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24DD   21 FF FF               LD   hl,TRUE   
24E0   E5                     PUSH   hl   
24E1   E5                     PUSH   hl   
24E2   CD B9 0F               CALL   run   
24E5   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
24EF   CD B2 0E               CALL   printStr   
24F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24FF   E1                     POP   hl   
2500   E5                     PUSH   hl   
2501   E5                     PUSH   hl   
2502   CD B9 0F               CALL   run   
2505   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2516   76                     HALT      
2517                EXPECTM_3069S87:      
2517   E1                     POP   HL   
2518                          ;*Macro unroll:  test "2 1 <", FALSE
2518   31 00 4E               LD   SP,STACK   
251B   CD E6 0E               CALL   coldInit   
251E   CD AC 4C               CALL   execStr   
2521   32 20 31 20 3C 00      DB   "2 1 <",0   
2527   E1                     POP   HL   
2528   E5                     PUSH   HL   
2529   11 00 00               LD   DE,FALSE   
252C   B7                     OR   A   
252D   ED 52                  SBC   HL,DE   
252F   7D                     LD   A,L   
2530   B4                     OR   H   
2531   CA 8F 25               JP   Z,expectM_3070S88   
2534   CD B2 0E               CALL   printStr   
2537   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2543   CD B2 0E               CALL   printStr   
2546   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2555   21 00 00               LD   hl,FALSE   
2558   E5                     PUSH   hl   
2559   E5                     PUSH   hl   
255A   CD B9 0F               CALL   run   
255D   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2567   CD B2 0E               CALL   printStr   
256A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2577   E1                     POP   hl   
2578   E5                     PUSH   hl   
2579   E5                     PUSH   hl   
257A   CD B9 0F               CALL   run   
257D   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
258E   76                     HALT      
258F                EXPECTM_3070S88:      
258F   E1                     POP   HL   
2590                          ;*Macro unroll:  test "2 3 <", TRUE
2590   31 00 4E               LD   SP,STACK   
2593   CD E6 0E               CALL   coldInit   
2596   CD AC 4C               CALL   execStr   
2599   32 20 33 20 3C 00      DB   "2 3 <",0   
259F   E1                     POP   HL   
25A0   E5                     PUSH   HL   
25A1   11 FF FF               LD   DE,TRUE   
25A4   B7                     OR   A   
25A5   ED 52                  SBC   HL,DE   
25A7   7D                     LD   A,L   
25A8   B4                     OR   H   
25A9   CA 07 26               JP   Z,expectM_3071S89   
25AC   CD B2 0E               CALL   printStr   
25AF   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
25BB   CD B2 0E               CALL   printStr   
25BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25CD   21 FF FF               LD   hl,TRUE   
25D0   E5                     PUSH   hl   
25D1   E5                     PUSH   hl   
25D2   CD B9 0F               CALL   run   
25D5   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
25DF   CD B2 0E               CALL   printStr   
25E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25EF   E1                     POP   hl   
25F0   E5                     PUSH   hl   
25F1   E5                     PUSH   hl   
25F2   CD B9 0F               CALL   run   
25F5   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2606   76                     HALT      
2607                EXPECTM_3071S89:      
2607   E1                     POP   HL   
2608                          ;*Macro unroll:  test "3 3 <", FALSE
2608   31 00 4E               LD   SP,STACK   
260B   CD E6 0E               CALL   coldInit   
260E   CD AC 4C               CALL   execStr   
2611   33 20 33 20 3C 00      DB   "3 3 <",0   
2617   E1                     POP   HL   
2618   E5                     PUSH   HL   
2619   11 00 00               LD   DE,FALSE   
261C   B7                     OR   A   
261D   ED 52                  SBC   HL,DE   
261F   7D                     LD   A,L   
2620   B4                     OR   H   
2621   CA 7F 26               JP   Z,expectM_3072S90   
2624   CD B2 0E               CALL   printStr   
2627   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2633   CD B2 0E               CALL   printStr   
2636   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2645   21 00 00               LD   hl,FALSE   
2648   E5                     PUSH   hl   
2649   E5                     PUSH   hl   
264A   CD B9 0F               CALL   run   
264D   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2657   CD B2 0E               CALL   printStr   
265A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2667   E1                     POP   hl   
2668   E5                     PUSH   hl   
2669   E5                     PUSH   hl   
266A   CD B9 0F               CALL   run   
266D   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
267E   76                     HALT      
267F                EXPECTM_3072S90:      
267F   E1                     POP   HL   
2680                          ;*Macro unroll:  test "1 2 >", FALSE
2680   31 00 4E               LD   SP,STACK   
2683   CD E6 0E               CALL   coldInit   
2686   CD AC 4C               CALL   execStr   
2689   31 20 32 20 3E 00      DB   "1 2 >",0   
268F   E1                     POP   HL   
2690   E5                     PUSH   HL   
2691   11 00 00               LD   DE,FALSE   
2694   B7                     OR   A   
2695   ED 52                  SBC   HL,DE   
2697   7D                     LD   A,L   
2698   B4                     OR   H   
2699   CA F7 26               JP   Z,expectM_3073S91   
269C   CD B2 0E               CALL   printStr   
269F   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
26AB   CD B2 0E               CALL   printStr   
26AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26BD   21 00 00               LD   hl,FALSE   
26C0   E5                     PUSH   hl   
26C1   E5                     PUSH   hl   
26C2   CD B9 0F               CALL   run   
26C5   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
26CF   CD B2 0E               CALL   printStr   
26D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26DF   E1                     POP   hl   
26E0   E5                     PUSH   hl   
26E1   E5                     PUSH   hl   
26E2   CD B9 0F               CALL   run   
26E5   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
26F6   76                     HALT      
26F7                EXPECTM_3073S91:      
26F7   E1                     POP   HL   
26F8                          ;*Macro unroll:  test "2 1 >", TRUE
26F8   31 00 4E               LD   SP,STACK   
26FB   CD E6 0E               CALL   coldInit   
26FE   CD AC 4C               CALL   execStr   
2701   32 20 31 20 3E 00      DB   "2 1 >",0   
2707   E1                     POP   HL   
2708   E5                     PUSH   HL   
2709   11 FF FF               LD   DE,TRUE   
270C   B7                     OR   A   
270D   ED 52                  SBC   HL,DE   
270F   7D                     LD   A,L   
2710   B4                     OR   H   
2711   CA 6F 27               JP   Z,expectM_3074S92   
2714   CD B2 0E               CALL   printStr   
2717   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2723   CD B2 0E               CALL   printStr   
2726   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2735   21 FF FF               LD   hl,TRUE   
2738   E5                     PUSH   hl   
2739   E5                     PUSH   hl   
273A   CD B9 0F               CALL   run   
273D   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2747   CD B2 0E               CALL   printStr   
274A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2757   E1                     POP   hl   
2758   E5                     PUSH   hl   
2759   E5                     PUSH   hl   
275A   CD B9 0F               CALL   run   
275D   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
276E   76                     HALT      
276F                EXPECTM_3074S92:      
276F   E1                     POP   HL   
2770                          ;*Macro unroll:  test "3 3 >", FALSE
2770   31 00 4E               LD   SP,STACK   
2773   CD E6 0E               CALL   coldInit   
2776   CD AC 4C               CALL   execStr   
2779   33 20 33 20 3E 00      DB   "3 3 >",0   
277F   E1                     POP   HL   
2780   E5                     PUSH   HL   
2781   11 00 00               LD   DE,FALSE   
2784   B7                     OR   A   
2785   ED 52                  SBC   HL,DE   
2787   7D                     LD   A,L   
2788   B4                     OR   H   
2789   CA E7 27               JP   Z,expectM_3075S93   
278C   CD B2 0E               CALL   printStr   
278F   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
279B   CD B2 0E               CALL   printStr   
279E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27AD   21 00 00               LD   hl,FALSE   
27B0   E5                     PUSH   hl   
27B1   E5                     PUSH   hl   
27B2   CD B9 0F               CALL   run   
27B5   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
27BF   CD B2 0E               CALL   printStr   
27C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27CF   E1                     POP   hl   
27D0   E5                     PUSH   hl   
27D1   E5                     PUSH   hl   
27D2   CD B9 0F               CALL   run   
27D5   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
27E6   76                     HALT      
27E7                EXPECTM_3075S93:      
27E7   E1                     POP   HL   
27E8                          ;*Macro unroll:  test "4 3 >", TRUE
27E8   31 00 4E               LD   SP,STACK   
27EB   CD E6 0E               CALL   coldInit   
27EE   CD AC 4C               CALL   execStr   
27F1   34 20 33 20 3E 00      DB   "4 3 >",0   
27F7   E1                     POP   HL   
27F8   E5                     PUSH   HL   
27F9   11 FF FF               LD   DE,TRUE   
27FC   B7                     OR   A   
27FD   ED 52                  SBC   HL,DE   
27FF   7D                     LD   A,L   
2800   B4                     OR   H   
2801   CA 5F 28               JP   Z,expectM_3076S94   
2804   CD B2 0E               CALL   printStr   
2807   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2813   CD B2 0E               CALL   printStr   
2816   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2825   21 FF FF               LD   hl,TRUE   
2828   E5                     PUSH   hl   
2829   E5                     PUSH   hl   
282A   CD B9 0F               CALL   run   
282D   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2837   CD B2 0E               CALL   printStr   
283A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2847   E1                     POP   hl   
2848   E5                     PUSH   hl   
2849   E5                     PUSH   hl   
284A   CD B9 0F               CALL   run   
284D   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
285E   76                     HALT      
285F                EXPECTM_3076S94:      
285F   E1                     POP   HL   
2860                          ;*Macro unroll:  test "2 2 <=", TRUE
2860   31 00 4E               LD   SP,STACK   
2863   CD E6 0E               CALL   coldInit   
2866   CD AC 4C               CALL   execStr   
2869   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2870   E1                     POP   HL   
2871   E5                     PUSH   HL   
2872   11 FF FF               LD   DE,TRUE   
2875   B7                     OR   A   
2876   ED 52                  SBC   HL,DE   
2878   7D                     LD   A,L   
2879   B4                     OR   H   
287A   CA D9 28               JP   Z,expectM_3077S95   
287D   CD B2 0E               CALL   printStr   
2880   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
288D   CD B2 0E               CALL   printStr   
2890   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
289F   21 FF FF               LD   hl,TRUE   
28A2   E5                     PUSH   hl   
28A3   E5                     PUSH   hl   
28A4   CD B9 0F               CALL   run   
28A7   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
28B1   CD B2 0E               CALL   printStr   
28B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28C1   E1                     POP   hl   
28C2   E5                     PUSH   hl   
28C3   E5                     PUSH   hl   
28C4   CD B9 0F               CALL   run   
28C7   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
28D8   76                     HALT      
28D9                EXPECTM_3077S95:      
28D9   E1                     POP   HL   
28DA                          ;*Macro unroll:  test "2 2 >=", TRUE
28DA   31 00 4E               LD   SP,STACK   
28DD   CD E6 0E               CALL   coldInit   
28E0   CD AC 4C               CALL   execStr   
28E3   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
28EA   E1                     POP   HL   
28EB   E5                     PUSH   HL   
28EC   11 FF FF               LD   DE,TRUE   
28EF   B7                     OR   A   
28F0   ED 52                  SBC   HL,DE   
28F2   7D                     LD   A,L   
28F3   B4                     OR   H   
28F4   CA 53 29               JP   Z,expectM_3078S96   
28F7   CD B2 0E               CALL   printStr   
28FA   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2907   CD B2 0E               CALL   printStr   
290A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2919   21 FF FF               LD   hl,TRUE   
291C   E5                     PUSH   hl   
291D   E5                     PUSH   hl   
291E   CD B9 0F               CALL   run   
2921   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
292B   CD B2 0E               CALL   printStr   
292E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
293B   E1                     POP   hl   
293C   E5                     PUSH   hl   
293D   E5                     PUSH   hl   
293E   CD B9 0F               CALL   run   
2941   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2952   76                     HALT      
2953                EXPECTM_3078S96:      
2953   E1                     POP   HL   
2954                          ;*Macro unroll:  test "3 1 <<", 6
2954   31 00 4E               LD   SP,STACK   
2957   CD E6 0E               CALL   coldInit   
295A   CD AC 4C               CALL   execStr   
295D   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2964   E1                     POP   HL   
2965   E5                     PUSH   HL   
2966   11 06 00               LD   DE,6   
2969   B7                     OR   A   
296A   ED 52                  SBC   HL,DE   
296C   7D                     LD   A,L   
296D   B4                     OR   H   
296E   CA CD 29               JP   Z,expectM_3079S97   
2971   CD B2 0E               CALL   printStr   
2974   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2981   CD B2 0E               CALL   printStr   
2984   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2993   21 06 00               LD   hl,6   
2996   E5                     PUSH   hl   
2997   E5                     PUSH   hl   
2998   CD B9 0F               CALL   run   
299B   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
29A5   CD B2 0E               CALL   printStr   
29A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29B5   E1                     POP   hl   
29B6   E5                     PUSH   hl   
29B7   E5                     PUSH   hl   
29B8   CD B9 0F               CALL   run   
29BB   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
29CC   76                     HALT      
29CD                EXPECTM_3079S97:      
29CD   E1                     POP   HL   
29CE                          ;*Macro unroll:  test "10 1 >>", 5
29CE   31 00 4E               LD   SP,STACK   
29D1   CD E6 0E               CALL   coldInit   
29D4   CD AC 4C               CALL   execStr   
29D7   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
29DF   E1                     POP   HL   
29E0   E5                     PUSH   HL   
29E1   11 05 00               LD   DE,5   
29E4   B7                     OR   A   
29E5   ED 52                  SBC   HL,DE   
29E7   7D                     LD   A,L   
29E8   B4                     OR   H   
29E9   CA 49 2A               JP   Z,expectM_3080S98   
29EC   CD B2 0E               CALL   printStr   
29EF   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
29FD   CD B2 0E               CALL   printStr   
2A00   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A0F   21 05 00               LD   hl,5   
2A12   E5                     PUSH   hl   
2A13   E5                     PUSH   hl   
2A14   CD B9 0F               CALL   run   
2A17   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2A21   CD B2 0E               CALL   printStr   
2A24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A31   E1                     POP   hl   
2A32   E5                     PUSH   hl   
2A33   E5                     PUSH   hl   
2A34   CD B9 0F               CALL   run   
2A37   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2A48   76                     HALT      
2A49                EXPECTM_3080S98:      
2A49   E1                     POP   HL   
2A4A                          ;*Macro unroll:  test "1 x = x", 1
2A4A   31 00 4E               LD   SP,STACK   
2A4D   CD E6 0E               CALL   coldInit   
2A50   CD AC 4C               CALL   execStr   
2A53   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2A5B   E1                     POP   HL   
2A5C   E5                     PUSH   HL   
2A5D   11 01 00               LD   DE,1   
2A60   B7                     OR   A   
2A61   ED 52                  SBC   HL,DE   
2A63   7D                     LD   A,L   
2A64   B4                     OR   H   
2A65   CA C5 2A               JP   Z,expectM_3081S99   
2A68   CD B2 0E               CALL   printStr   
2A6B   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2A79   CD B2 0E               CALL   printStr   
2A7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A8B   21 01 00               LD   hl,1   
2A8E   E5                     PUSH   hl   
2A8F   E5                     PUSH   hl   
2A90   CD B9 0F               CALL   run   
2A93   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2A9D   CD B2 0E               CALL   printStr   
2AA0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AAD   E1                     POP   hl   
2AAE   E5                     PUSH   hl   
2AAF   E5                     PUSH   hl   
2AB0   CD B9 0F               CALL   run   
2AB3   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2AC4   76                     HALT      
2AC5                EXPECTM_3081S99:      
2AC5   E1                     POP   HL   
2AC6                          ;*Macro unroll:  test "1{}^", 1
2AC6   31 00 4E               LD   SP,STACK   
2AC9   CD E6 0E               CALL   coldInit   
2ACC   CD AC 4C               CALL   execStr   
2ACF   31 7B 7D 5E 00         DB   "1{}^",0   
2AD4   E1                     POP   HL   
2AD5   E5                     PUSH   HL   
2AD6   11 01 00               LD   DE,1   
2AD9   B7                     OR   A   
2ADA   ED 52                  SBC   HL,DE   
2ADC   7D                     LD   A,L   
2ADD   B4                     OR   H   
2ADE   CA 3B 2B               JP   Z,expectM_3082S100   
2AE1   CD B2 0E               CALL   printStr   
2AE4   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2AEF   CD B2 0E               CALL   printStr   
2AF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B01   21 01 00               LD   hl,1   
2B04   E5                     PUSH   hl   
2B05   E5                     PUSH   hl   
2B06   CD B9 0F               CALL   run   
2B09   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2B13   CD B2 0E               CALL   printStr   
2B16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B23   E1                     POP   hl   
2B24   E5                     PUSH   hl   
2B25   E5                     PUSH   hl   
2B26   CD B9 0F               CALL   run   
2B29   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2B3A   76                     HALT      
2B3B                EXPECTM_3082S100:      
2B3B   E1                     POP   HL   
2B3C                          ;*Macro unroll:  test "{1}^", 1
2B3C   31 00 4E               LD   SP,STACK   
2B3F   CD E6 0E               CALL   coldInit   
2B42   CD AC 4C               CALL   execStr   
2B45   7B 31 7D 5E 00         DB   "{1}^",0   
2B4A   E1                     POP   HL   
2B4B   E5                     PUSH   HL   
2B4C   11 01 00               LD   DE,1   
2B4F   B7                     OR   A   
2B50   ED 52                  SBC   HL,DE   
2B52   7D                     LD   A,L   
2B53   B4                     OR   H   
2B54   CA B1 2B               JP   Z,expectM_3083S101   
2B57   CD B2 0E               CALL   printStr   
2B5A   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2B65   CD B2 0E               CALL   printStr   
2B68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B77   21 01 00               LD   hl,1   
2B7A   E5                     PUSH   hl   
2B7B   E5                     PUSH   hl   
2B7C   CD B9 0F               CALL   run   
2B7F   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2B89   CD B2 0E               CALL   printStr   
2B8C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B99   E1                     POP   hl   
2B9A   E5                     PUSH   hl   
2B9B   E5                     PUSH   hl   
2B9C   CD B9 0F               CALL   run   
2B9F   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2BB0   76                     HALT      
2BB1                EXPECTM_3083S101:      
2BB1   E1                     POP   HL   
2BB2                          ;*Macro unroll:  test "{{1}^}^", 1
2BB2   31 00 4E               LD   SP,STACK   
2BB5   CD E6 0E               CALL   coldInit   
2BB8   CD AC 4C               CALL   execStr   
2BBB   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2BC3   E1                     POP   HL   
2BC4   E5                     PUSH   HL   
2BC5   11 01 00               LD   DE,1   
2BC8   B7                     OR   A   
2BC9   ED 52                  SBC   HL,DE   
2BCB   7D                     LD   A,L   
2BCC   B4                     OR   H   
2BCD   CA 2D 2C               JP   Z,expectM_3084S102   
2BD0   CD B2 0E               CALL   printStr   
2BD3   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2BE1   CD B2 0E               CALL   printStr   
2BE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BF3   21 01 00               LD   hl,1   
2BF6   E5                     PUSH   hl   
2BF7   E5                     PUSH   hl   
2BF8   CD B9 0F               CALL   run   
2BFB   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2C05   CD B2 0E               CALL   printStr   
2C08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C15   E1                     POP   hl   
2C16   E5                     PUSH   hl   
2C17   E5                     PUSH   hl   
2C18   CD B9 0F               CALL   run   
2C1B   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2C2C   76                     HALT      
2C2D                EXPECTM_3084S102:      
2C2D   E1                     POP   HL   
2C2E                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2C2E   31 00 4E               LD   SP,STACK   
2C31   CD E6 0E               CALL   coldInit   
2C34   CD AC 4C               CALL   execStr   
2C37   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2C42   E1                     POP   HL   
2C43   E5                     PUSH   HL   
2C44   11 01 00               LD   DE,1   
2C47   B7                     OR   A   
2C48   ED 52                  SBC   HL,DE   
2C4A   7D                     LD   A,L   
2C4B   B4                     OR   H   
2C4C   CA AF 2C               JP   Z,expectM_3085S103   
2C4F   CD B2 0E               CALL   printStr   
2C52   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2C63   CD B2 0E               CALL   printStr   
2C66   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C75   21 01 00               LD   hl,1   
2C78   E5                     PUSH   hl   
2C79   E5                     PUSH   hl   
2C7A   CD B9 0F               CALL   run   
2C7D   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2C87   CD B2 0E               CALL   printStr   
2C8A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C97   E1                     POP   hl   
2C98   E5                     PUSH   hl   
2C99   E5                     PUSH   hl   
2C9A   CD B9 0F               CALL   run   
2C9D   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2CAE   76                     HALT      
2CAF                EXPECTM_3085S103:      
2CAF   E1                     POP   HL   
2CB0                          ;*Macro unroll:  test "5 /f{10} ?", 5
2CB0   31 00 4E               LD   SP,STACK   
2CB3   CD E6 0E               CALL   coldInit   
2CB6   CD AC 4C               CALL   execStr   
2CB9   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2CC4   E1                     POP   HL   
2CC5   E5                     PUSH   HL   
2CC6   11 05 00               LD   DE,5   
2CC9   B7                     OR   A   
2CCA   ED 52                  SBC   HL,DE   
2CCC   7D                     LD   A,L   
2CCD   B4                     OR   H   
2CCE   CA 31 2D               JP   Z,expectM_3086S104   
2CD1   CD B2 0E               CALL   printStr   
2CD4   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2CE5   CD B2 0E               CALL   printStr   
2CE8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CF7   21 05 00               LD   hl,5   
2CFA   E5                     PUSH   hl   
2CFB   E5                     PUSH   hl   
2CFC   CD B9 0F               CALL   run   
2CFF   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2D09   CD B2 0E               CALL   printStr   
2D0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D19   E1                     POP   hl   
2D1A   E5                     PUSH   hl   
2D1B   E5                     PUSH   hl   
2D1C   CD B9 0F               CALL   run   
2D1F   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2D30   76                     HALT      
2D31                EXPECTM_3086S104:      
2D31   E1                     POP   HL   
2D32                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2D32   31 00 4E               LD   SP,STACK   
2D35   CD E6 0E               CALL   coldInit   
2D38   CD AC 4C               CALL   execStr   
2D3B   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2D48   E1                     POP   HL   
2D49   E5                     PUSH   HL   
2D4A   11 0F 00               LD   DE,15   
2D4D   B7                     OR   A   
2D4E   ED 52                  SBC   HL,DE   
2D50   7D                     LD   A,L   
2D51   B4                     OR   H   
2D52   CA B7 2D               JP   Z,expectM_3087S105   
2D55   CD B2 0E               CALL   printStr   
2D58   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2D6B   CD B2 0E               CALL   printStr   
2D6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D7D   21 0F 00               LD   hl,15   
2D80   E5                     PUSH   hl   
2D81   E5                     PUSH   hl   
2D82   CD B9 0F               CALL   run   
2D85   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2D8F   CD B2 0E               CALL   printStr   
2D92   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D9F   E1                     POP   hl   
2DA0   E5                     PUSH   hl   
2DA1   E5                     PUSH   hl   
2DA2   CD B9 0F               CALL   run   
2DA5   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2DB6   76                     HALT      
2DB7                EXPECTM_3087S105:      
2DB7   E1                     POP   HL   
2DB8                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2DB8   31 00 4E               LD   SP,STACK   
2DBB   CD E6 0E               CALL   coldInit   
2DBE   CD AC 4C               CALL   execStr   
2DC1   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2DD3   E1                     POP   HL   
2DD4   E5                     PUSH   HL   
2DD5   11 15 00               LD   DE,21   
2DD8   B7                     OR   A   
2DD9   ED 52                  SBC   HL,DE   
2DDB   7D                     LD   A,L   
2DDC   B4                     OR   H   
2DDD   CA 47 2E               JP   Z,expectM_3088S106   
2DE0   CD B2 0E               CALL   printStr   
2DE3   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2DFB   CD B2 0E               CALL   printStr   
2DFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E0D   21 15 00               LD   hl,21   
2E10   E5                     PUSH   hl   
2E11   E5                     PUSH   hl   
2E12   CD B9 0F               CALL   run   
2E15   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2E1F   CD B2 0E               CALL   printStr   
2E22   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E2F   E1                     POP   hl   
2E30   E5                     PUSH   hl   
2E31   E5                     PUSH   hl   
2E32   CD B9 0F               CALL   run   
2E35   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2E46   76                     HALT      
2E47                EXPECTM_3088S106:      
2E47   E1                     POP   HL   
2E48                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2E48   31 00 4E               LD   SP,STACK   
2E4B   CD E6 0E               CALL   coldInit   
2E4E   CD AC 4C               CALL   execStr   
2E51   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2E63   E1                     POP   HL   
2E64   E5                     PUSH   HL   
2E65   11 0B 00               LD   DE,11   
2E68   B7                     OR   A   
2E69   ED 52                  SBC   HL,DE   
2E6B   7D                     LD   A,L   
2E6C   B4                     OR   H   
2E6D   CA D7 2E               JP   Z,expectM_3089S107   
2E70   CD B2 0E               CALL   printStr   
2E73   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2E8B   CD B2 0E               CALL   printStr   
2E8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E9D   21 0B 00               LD   hl,11   
2EA0   E5                     PUSH   hl   
2EA1   E5                     PUSH   hl   
2EA2   CD B9 0F               CALL   run   
2EA5   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2EAF   CD B2 0E               CALL   printStr   
2EB2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EBF   E1                     POP   hl   
2EC0   E5                     PUSH   hl   
2EC1   E5                     PUSH   hl   
2EC2   CD B9 0F               CALL   run   
2EC5   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2ED6   76                     HALT      
2ED7                EXPECTM_3089S107:      
2ED7   E1                     POP   HL   
2ED8                          ;*Macro unroll:  test "\\{2}^", 2
2ED8   31 00 4E               LD   SP,STACK   
2EDB   CD E6 0E               CALL   coldInit   
2EDE   CD AC 4C               CALL   execStr   
2EE1   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
2EE7   E1                     POP   HL   
2EE8   E5                     PUSH   HL   
2EE9   11 02 00               LD   DE,2   
2EEC   B7                     OR   A   
2EED   ED 52                  SBC   HL,DE   
2EEF   7D                     LD   A,L   
2EF0   B4                     OR   H   
2EF1   CA 4F 2F               JP   Z,expectM_3090S108   
2EF4   CD B2 0E               CALL   printStr   
2EF7   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
2F03   CD B2 0E               CALL   printStr   
2F06   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F15   21 02 00               LD   hl,2   
2F18   E5                     PUSH   hl   
2F19   E5                     PUSH   hl   
2F1A   CD B9 0F               CALL   run   
2F1D   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2F27   CD B2 0E               CALL   printStr   
2F2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F37   E1                     POP   hl   
2F38   E5                     PUSH   hl   
2F39   E5                     PUSH   hl   
2F3A   CD B9 0F               CALL   run   
2F3D   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2F4E   76                     HALT      
2F4F                EXPECTM_3090S108:      
2F4F   E1                     POP   HL   
2F50                          ;*Macro unroll:  test "\\a{2}^", 2
2F50   31 00 4E               LD   SP,STACK   
2F53   CD E6 0E               CALL   coldInit   
2F56   CD AC 4C               CALL   execStr   
2F59   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
2F60   E1                     POP   HL   
2F61   E5                     PUSH   HL   
2F62   11 02 00               LD   DE,2   
2F65   B7                     OR   A   
2F66   ED 52                  SBC   HL,DE   
2F68   7D                     LD   A,L   
2F69   B4                     OR   H   
2F6A   CA C9 2F               JP   Z,expectM_3091S109   
2F6D   CD B2 0E               CALL   printStr   
2F70   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
2F7D   CD B2 0E               CALL   printStr   
2F80   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F8F   21 02 00               LD   hl,2   
2F92   E5                     PUSH   hl   
2F93   E5                     PUSH   hl   
2F94   CD B9 0F               CALL   run   
2F97   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
2FA1   CD B2 0E               CALL   printStr   
2FA4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FB1   E1                     POP   hl   
2FB2   E5                     PUSH   hl   
2FB3   E5                     PUSH   hl   
2FB4   CD B9 0F               CALL   run   
2FB7   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
2FC8   76                     HALT      
2FC9                EXPECTM_3091S109:      
2FC9   E1                     POP   HL   
2FCA                          ;*Macro unroll:  test "5 \\a{%a}^", 5
2FCA   31 00 4E               LD   SP,STACK   
2FCD   CD E6 0E               CALL   coldInit   
2FD0   CD AC 4C               CALL   execStr   
2FD3   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
2FDD   E1                     POP   HL   
2FDE   E5                     PUSH   HL   
2FDF   11 05 00               LD   DE,5   
2FE2   B7                     OR   A   
2FE3   ED 52                  SBC   HL,DE   
2FE5   7D                     LD   A,L   
2FE6   B4                     OR   H   
2FE7   CA 49 30               JP   Z,expectM_3092S110   
2FEA   CD B2 0E               CALL   printStr   
2FED   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
2FFD   CD B2 0E               CALL   printStr   
3000   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
300F   21 05 00               LD   hl,5   
3012   E5                     PUSH   hl   
3013   E5                     PUSH   hl   
3014   CD B9 0F               CALL   run   
3017   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3021   CD B2 0E               CALL   printStr   
3024   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3031   E1                     POP   hl   
3032   E5                     PUSH   hl   
3033   E5                     PUSH   hl   
3034   CD B9 0F               CALL   run   
3037   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3048   76                     HALT      
3049                EXPECTM_3092S110:      
3049   E1                     POP   HL   
304A                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
304A   31 00 4E               LD   SP,STACK   
304D   CD E6 0E               CALL   coldInit   
3050   CD AC 4C               CALL   execStr   
3053   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
305F   E1                     POP   HL   
3060   E5                     PUSH   HL   
3061   11 05 00               LD   DE,5   
3064   B7                     OR   A   
3065   ED 52                  SBC   HL,DE   
3067   7D                     LD   A,L   
3068   B4                     OR   H   
3069   CA CD 30               JP   Z,expectM_3093S111   
306C   CD B2 0E               CALL   printStr   
306F   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
3081   CD B2 0E               CALL   printStr   
3084   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3093   21 05 00               LD   hl,5   
3096   E5                     PUSH   hl   
3097   E5                     PUSH   hl   
3098   CD B9 0F               CALL   run   
309B   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
30A5   CD B2 0E               CALL   printStr   
30A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30B5   E1                     POP   hl   
30B6   E5                     PUSH   hl   
30B7   E5                     PUSH   hl   
30B8   CD B9 0F               CALL   run   
30BB   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
30CC   76                     HALT      
30CD                EXPECTM_3093S111:      
30CD   E1                     POP   HL   
30CE                          ;*Macro unroll:  test "\\a{{2}^}^", 2
30CE   31 00 4E               LD   SP,STACK   
30D1   CD E6 0E               CALL   coldInit   
30D4   CD AC 4C               CALL   execStr   
30D7   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
30E1   E1                     POP   HL   
30E2   E5                     PUSH   HL   
30E3   11 02 00               LD   DE,2   
30E6   B7                     OR   A   
30E7   ED 52                  SBC   HL,DE   
30E9   7D                     LD   A,L   
30EA   B4                     OR   H   
30EB   CA 4D 31               JP   Z,expectM_3094S112   
30EE   CD B2 0E               CALL   printStr   
30F1   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
3101   CD B2 0E               CALL   printStr   
3104   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3113   21 02 00               LD   hl,2   
3116   E5                     PUSH   hl   
3117   E5                     PUSH   hl   
3118   CD B9 0F               CALL   run   
311B   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3125   CD B2 0E               CALL   printStr   
3128   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3135   E1                     POP   hl   
3136   E5                     PUSH   hl   
3137   E5                     PUSH   hl   
3138   CD B9 0F               CALL   run   
313B   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
314C   76                     HALT      
314D                EXPECTM_3094S112:      
314D   E1                     POP   HL   
314E                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
314E   31 00 4E               LD   SP,STACK   
3151   CD E6 0E               CALL   coldInit   
3154   CD AC 4C               CALL   execStr   
3157   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
3166   E1                     POP   HL   
3167   E5                     PUSH   HL   
3168   11 05 00               LD   DE,5   
316B   B7                     OR   A   
316C   ED 52                  SBC   HL,DE   
316E   7D                     LD   A,L   
316F   B4                     OR   H   
3170   CA D7 31               JP   Z,expectM_3095S113   
3173   CD B2 0E               CALL   printStr   
3176   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
318B   CD B2 0E               CALL   printStr   
318E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
319D   21 05 00               LD   hl,5   
31A0   E5                     PUSH   hl   
31A1   E5                     PUSH   hl   
31A2   CD B9 0F               CALL   run   
31A5   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
31AF   CD B2 0E               CALL   printStr   
31B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31BF   E1                     POP   hl   
31C0   E5                     PUSH   hl   
31C1   E5                     PUSH   hl   
31C2   CD B9 0F               CALL   run   
31C5   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
31D6   76                     HALT      
31D7                EXPECTM_3095S113:      
31D7   E1                     POP   HL   
31D8                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
31D8   31 00 4E               LD   SP,STACK   
31DB   CD E6 0E               CALL   coldInit   
31DE   CD AC 4C               CALL   execStr   
31E1   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
31F1   E1                     POP   HL   
31F2   E5                     PUSH   HL   
31F3   11 01 00               LD   DE,1   
31F6   B7                     OR   A   
31F7   ED 52                  SBC   HL,DE   
31F9   7D                     LD   A,L   
31FA   B4                     OR   H   
31FB   CA 63 32               JP   Z,expectM_3096S114   
31FE   CD B2 0E               CALL   printStr   
3201   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3217   CD B2 0E               CALL   printStr   
321A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3229   21 01 00               LD   hl,1   
322C   E5                     PUSH   hl   
322D   E5                     PUSH   hl   
322E   CD B9 0F               CALL   run   
3231   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
323B   CD B2 0E               CALL   printStr   
323E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
324B   E1                     POP   hl   
324C   E5                     PUSH   hl   
324D   E5                     PUSH   hl   
324E   CD B9 0F               CALL   run   
3251   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3262   76                     HALT      
3263                EXPECTM_3096S114:      
3263   E1                     POP   HL   
3264                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
3264   31 00 4E               LD   SP,STACK   
3267   CD E6 0E               CALL   coldInit   
326A   CD AC 4C               CALL   execStr   
326D   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
3280   E1                     POP   HL   
3281   E5                     PUSH   HL   
3282   11 07 00               LD   DE,7   
3285   B7                     OR   A   
3286   ED 52                  SBC   HL,DE   
3288   7D                     LD   A,L   
3289   B4                     OR   H   
328A   CA F5 32               JP   Z,expectM_3097S115   
328D   CD B2 0E               CALL   printStr   
3290   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
32A9   CD B2 0E               CALL   printStr   
32AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32BB   21 07 00               LD   hl,7   
32BE   E5                     PUSH   hl   
32BF   E5                     PUSH   hl   
32C0   CD B9 0F               CALL   run   
32C3   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
32CD   CD B2 0E               CALL   printStr   
32D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32DD   E1                     POP   hl   
32DE   E5                     PUSH   hl   
32DF   E5                     PUSH   hl   
32E0   CD B9 0F               CALL   run   
32E3   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
32F4   76                     HALT      
32F5                EXPECTM_3097S115:      
32F5   E1                     POP   HL   
32F6                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
32F6   31 00 4E               LD   SP,STACK   
32F9   CD E6 0E               CALL   coldInit   
32FC   CD AC 4C               CALL   execStr   
32FF   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3314   E1                     POP   HL   
3315   E5                     PUSH   HL   
3316   11 06 00               LD   DE,6   
3319   B7                     OR   A   
331A   ED 52                  SBC   HL,DE   
331C   7D                     LD   A,L   
331D   B4                     OR   H   
331E   CA 8B 33               JP   Z,expectM_3098S116   
3321   CD B2 0E               CALL   printStr   
3324   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
333F   CD B2 0E               CALL   printStr   
3342   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3351   21 06 00               LD   hl,6   
3354   E5                     PUSH   hl   
3355   E5                     PUSH   hl   
3356   CD B9 0F               CALL   run   
3359   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3363   CD B2 0E               CALL   printStr   
3366   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3373   E1                     POP   hl   
3374   E5                     PUSH   hl   
3375   E5                     PUSH   hl   
3376   CD B9 0F               CALL   run   
3379   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
338A   76                     HALT      
338B                EXPECTM_3098S116:      
338B   E1                     POP   HL   
338C                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
338C   31 00 4E               LD   SP,STACK   
338F   CD E6 0E               CALL   coldInit   
3392   CD AC 4C               CALL   execStr   
3395   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
33A3   E1                     POP   HL   
33A4   E5                     PUSH   HL   
33A5   11 02 00               LD   DE,2   
33A8   B7                     OR   A   
33A9   ED 52                  SBC   HL,DE   
33AB   7D                     LD   A,L   
33AC   B4                     OR   H   
33AD   CA 13 34               JP   Z,expectM_3099S117   
33B0   CD B2 0E               CALL   printStr   
33B3   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
33C7   CD B2 0E               CALL   printStr   
33CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33D9   21 02 00               LD   hl,2   
33DC   E5                     PUSH   hl   
33DD   E5                     PUSH   hl   
33DE   CD B9 0F               CALL   run   
33E1   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
33EB   CD B2 0E               CALL   printStr   
33EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33FB   E1                     POP   hl   
33FC   E5                     PUSH   hl   
33FD   E5                     PUSH   hl   
33FE   CD B9 0F               CALL   run   
3401   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3412   76                     HALT      
3413                EXPECTM_3099S117:      
3413   E1                     POP   HL   
3414                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3414   31 00 4E               LD   SP,STACK   
3417   CD E6 0E               CALL   coldInit   
341A   CD AC 4C               CALL   execStr   
341D   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
342E   E1                     POP   HL   
342F   E5                     PUSH   HL   
3430   11 01 00               LD   DE,1   
3433   B7                     OR   A   
3434   ED 52                  SBC   HL,DE   
3436   7D                     LD   A,L   
3437   B4                     OR   H   
3438   CA A1 34               JP   Z,expectM_3100S118   
343B   CD B2 0E               CALL   printStr   
343E   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3455   CD B2 0E               CALL   printStr   
3458   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3467   21 01 00               LD   hl,1   
346A   E5                     PUSH   hl   
346B   E5                     PUSH   hl   
346C   CD B9 0F               CALL   run   
346F   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3479   CD B2 0E               CALL   printStr   
347C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3489   E1                     POP   hl   
348A   E5                     PUSH   hl   
348B   E5                     PUSH   hl   
348C   CD B9 0F               CALL   run   
348F   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
34A0   76                     HALT      
34A1                EXPECTM_3100S118:      
34A1   E1                     POP   HL   
34A2                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
34A2   31 00 4E               LD   SP,STACK   
34A5   CD E6 0E               CALL   coldInit   
34A8   CD AC 4C               CALL   execStr   
34AB   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
34BD   E1                     POP   HL   
34BE   E5                     PUSH   HL   
34BF   11 02 00               LD   DE,2   
34C2   B7                     OR   A   
34C3   ED 52                  SBC   HL,DE   
34C5   7D                     LD   A,L   
34C6   B4                     OR   H   
34C7   CA 31 35               JP   Z,expectM_3101S119   
34CA   CD B2 0E               CALL   printStr   
34CD   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
34E5   CD B2 0E               CALL   printStr   
34E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34F7   21 02 00               LD   hl,2   
34FA   E5                     PUSH   hl   
34FB   E5                     PUSH   hl   
34FC   CD B9 0F               CALL   run   
34FF   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3509   CD B2 0E               CALL   printStr   
350C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3519   E1                     POP   hl   
351A   E5                     PUSH   hl   
351B   E5                     PUSH   hl   
351C   CD B9 0F               CALL   run   
351F   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3530   76                     HALT      
3531                EXPECTM_3101S119:      
3531   E1                     POP   HL   
3532                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3532   31 00 4E               LD   SP,STACK   
3535   CD E6 0E               CALL   coldInit   
3538   CD AC 4C               CALL   execStr   
353B   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
354E   E1                     POP   HL   
354F   E5                     PUSH   HL   
3550   11 02 00               LD   DE,2   
3553   B7                     OR   A   
3554   ED 52                  SBC   HL,DE   
3556   7D                     LD   A,L   
3557   B4                     OR   H   
3558   CA C3 35               JP   Z,expectM_3102S120   
355B   CD B2 0E               CALL   printStr   
355E   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3577   CD B2 0E               CALL   printStr   
357A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3589   21 02 00               LD   hl,2   
358C   E5                     PUSH   hl   
358D   E5                     PUSH   hl   
358E   CD B9 0F               CALL   run   
3591   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
359B   CD B2 0E               CALL   printStr   
359E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35AB   E1                     POP   hl   
35AC   E5                     PUSH   hl   
35AD   E5                     PUSH   hl   
35AE   CD B9 0F               CALL   run   
35B1   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
35C2   76                     HALT      
35C3                EXPECTM_3102S120:      
35C3   E1                     POP   HL   
35C4                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
35C4   31 00 4E               LD   SP,STACK   
35C7   CD E6 0E               CALL   coldInit   
35CA   CD AC 4C               CALL   execStr   
35CD   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
35DF   E1                     POP   HL   
35E0   E5                     PUSH   HL   
35E1   11 02 00               LD   DE,2   
35E4   B7                     OR   A   
35E5   ED 52                  SBC   HL,DE   
35E7   7D                     LD   A,L   
35E8   B4                     OR   H   
35E9   CA 53 36               JP   Z,expectM_3103S121   
35EC   CD B2 0E               CALL   printStr   
35EF   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3607   CD B2 0E               CALL   printStr   
360A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3619   21 02 00               LD   hl,2   
361C   E5                     PUSH   hl   
361D   E5                     PUSH   hl   
361E   CD B9 0F               CALL   run   
3621   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
362B   CD B2 0E               CALL   printStr   
362E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
363B   E1                     POP   hl   
363C   E5                     PUSH   hl   
363D   E5                     PUSH   hl   
363E   CD B9 0F               CALL   run   
3641   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3652   76                     HALT      
3653                EXPECTM_3103S121:      
3653   E1                     POP   HL   
3654                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3654   31 00 4E               LD   SP,STACK   
3657   CD E6 0E               CALL   coldInit   
365A   CD AC 4C               CALL   execStr   
365D   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3676   E1                     POP   HL   
3677   E5                     PUSH   HL   
3678   11 05 00               LD   DE,5   
367B   B7                     OR   A   
367C   ED 52                  SBC   HL,DE   
367E   7D                     LD   A,L   
367F   B4                     OR   H   
3680   CA F1 36               JP   Z,expectM_3104S122   
3683   CD B2 0E               CALL   printStr   
3686   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
36A5   CD B2 0E               CALL   printStr   
36A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36B7   21 05 00               LD   hl,5   
36BA   E5                     PUSH   hl   
36BB   E5                     PUSH   hl   
36BC   CD B9 0F               CALL   run   
36BF   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
36C9   CD B2 0E               CALL   printStr   
36CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36D9   E1                     POP   hl   
36DA   E5                     PUSH   hl   
36DB   E5                     PUSH   hl   
36DC   CD B9 0F               CALL   run   
36DF   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
36F0   76                     HALT      
36F1                EXPECTM_3104S122:      
36F1   E1                     POP   HL   
36F2                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
36F2   31 00 4E               LD   SP,STACK   
36F5   CD E6 0E               CALL   coldInit   
36F8   CD AC 4C               CALL   execStr   
36FB   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
370B   E1                     POP   HL   
370C   E5                     PUSH   HL   
370D   11 02 00               LD   DE,2   
3710   B7                     OR   A   
3711   ED 52                  SBC   HL,DE   
3713   7D                     LD   A,L   
3714   B4                     OR   H   
3715   CA 7D 37               JP   Z,expectM_3105S123   
3718   CD B2 0E               CALL   printStr   
371B   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3731   CD B2 0E               CALL   printStr   
3734   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3743   21 02 00               LD   hl,2   
3746   E5                     PUSH   hl   
3747   E5                     PUSH   hl   
3748   CD B9 0F               CALL   run   
374B   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3755   CD B2 0E               CALL   printStr   
3758   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3765   E1                     POP   hl   
3766   E5                     PUSH   hl   
3767   E5                     PUSH   hl   
3768   CD B9 0F               CALL   run   
376B   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
377C   76                     HALT      
377D                EXPECTM_3105S123:      
377D   E1                     POP   HL   
377E                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
377E   31 00 4E               LD   SP,STACK   
3781   CD E6 0E               CALL   coldInit   
3784   CD AC 4C               CALL   execStr   
3787   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
379E   E1                     POP   HL   
379F   E5                     PUSH   HL   
37A0   11 64 00               LD   DE,100   
37A3   B7                     OR   A   
37A4   ED 52                  SBC   HL,DE   
37A6   7D                     LD   A,L   
37A7   B4                     OR   H   
37A8   CA 17 38               JP   Z,expectM_3106S124   
37AB   CD B2 0E               CALL   printStr   
37AE   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
37CB   CD B2 0E               CALL   printStr   
37CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37DD   21 64 00               LD   hl,100   
37E0   E5                     PUSH   hl   
37E1   E5                     PUSH   hl   
37E2   CD B9 0F               CALL   run   
37E5   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
37EF   CD B2 0E               CALL   printStr   
37F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37FF   E1                     POP   hl   
3800   E5                     PUSH   hl   
3801   E5                     PUSH   hl   
3802   CD B9 0F               CALL   run   
3805   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3816   76                     HALT      
3817                EXPECTM_3106S124:      
3817   E1                     POP   HL   
3818                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
3818   31 00 4E               LD   SP,STACK   
381B   CD E6 0E               CALL   coldInit   
381E   CD AC 4C               CALL   execStr   
3821   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3839   E1                     POP   HL   
383A   E5                     PUSH   HL   
383B   11 01 00               LD   DE,1   
383E   B7                     OR   A   
383F   ED 52                  SBC   HL,DE   
3841   7D                     LD   A,L   
3842   B4                     OR   H   
3843   CA B3 38               JP   Z,expectM_3107S125   
3846   CD B2 0E               CALL   printStr   
3849   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3867   CD B2 0E               CALL   printStr   
386A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3879   21 01 00               LD   hl,1   
387C   E5                     PUSH   hl   
387D   E5                     PUSH   hl   
387E   CD B9 0F               CALL   run   
3881   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
388B   CD B2 0E               CALL   printStr   
388E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
389B   E1                     POP   hl   
389C   E5                     PUSH   hl   
389D   E5                     PUSH   hl   
389E   CD B9 0F               CALL   run   
38A1   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
38B2   76                     HALT      
38B3                EXPECTM_3107S125:      
38B3   E1                     POP   HL   
38B4                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
38B4   31 00 4E               LD   SP,STACK   
38B7   CD E6 0E               CALL   coldInit   
38BA   CD AC 4C               CALL   execStr   
38BD   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
38D6   E1                     POP   HL   
38D7   E5                     PUSH   HL   
38D8   11 02 00               LD   DE,2   
38DB   B7                     OR   A   
38DC   ED 52                  SBC   HL,DE   
38DE   7D                     LD   A,L   
38DF   B4                     OR   H   
38E0   CA 51 39               JP   Z,expectM_3108S126   
38E3   CD B2 0E               CALL   printStr   
38E6   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3905   CD B2 0E               CALL   printStr   
3908   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3917   21 02 00               LD   hl,2   
391A   E5                     PUSH   hl   
391B   E5                     PUSH   hl   
391C   CD B9 0F               CALL   run   
391F   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3929   CD B2 0E               CALL   printStr   
392C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3939   E1                     POP   hl   
393A   E5                     PUSH   hl   
393B   E5                     PUSH   hl   
393C   CD B9 0F               CALL   run   
393F   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3950   76                     HALT      
3951                EXPECTM_3108S126:      
3951   E1                     POP   HL   
3952                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
3952   31 00 4E               LD   SP,STACK   
3955   CD E6 0E               CALL   coldInit   
3958   CD AC 4C               CALL   execStr   
395B   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
3979   E1                     POP   HL   
397A   E5                     PUSH   HL   
397B   11 0B 00               LD   DE,11   
397E   B7                     OR   A   
397F   ED 52                  SBC   HL,DE   
3981   7D                     LD   A,L   
3982   B4                     OR   H   
3983   CA F9 39               JP   Z,expectM_3109S127   
3986   CD B2 0E               CALL   printStr   
3989   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
39AD   CD B2 0E               CALL   printStr   
39B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39BF   21 0B 00               LD   hl,11   
39C2   E5                     PUSH   hl   
39C3   E5                     PUSH   hl   
39C4   CD B9 0F               CALL   run   
39C7   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
39D1   CD B2 0E               CALL   printStr   
39D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39E1   E1                     POP   hl   
39E2   E5                     PUSH   hl   
39E3   E5                     PUSH   hl   
39E4   CD B9 0F               CALL   run   
39E7   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
39F8   76                     HALT      
39F9                EXPECTM_3109S127:      
39F9   E1                     POP   HL   
39FA                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
39FA   31 00 4E               LD   SP,STACK   
39FD   CD E6 0E               CALL   coldInit   
3A00   CD AC 4C               CALL   execStr   
3A03   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
3A21   E1                     POP   HL   
3A22   E5                     PUSH   HL   
3A23   11 15 00               LD   DE,21   
3A26   B7                     OR   A   
3A27   ED 52                  SBC   HL,DE   
3A29   7D                     LD   A,L   
3A2A   B4                     OR   H   
3A2B   CA A1 3A               JP   Z,expectM_3110S128   
3A2E   CD B2 0E               CALL   printStr   
3A31   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
3A55   CD B2 0E               CALL   printStr   
3A58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A67   21 15 00               LD   hl,21   
3A6A   E5                     PUSH   hl   
3A6B   E5                     PUSH   hl   
3A6C   CD B9 0F               CALL   run   
3A6F   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3A79   CD B2 0E               CALL   printStr   
3A7C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A89   E1                     POP   hl   
3A8A   E5                     PUSH   hl   
3A8B   E5                     PUSH   hl   
3A8C   CD B9 0F               CALL   run   
3A8F   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3AA0   76                     HALT      
3AA1                EXPECTM_3110S128:      
3AA1   E1                     POP   HL   
3AA2                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3AA2   31 00 4E               LD   SP,STACK   
3AA5   CD E6 0E               CALL   coldInit   
3AA8   CD AC 4C               CALL   execStr   
3AAB   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3AB9   E1                     POP   HL   
3ABA   E5                     PUSH   HL   
3ABB   11 14 00               LD   DE,20   
3ABE   B7                     OR   A   
3ABF   ED 52                  SBC   HL,DE   
3AC1   7D                     LD   A,L   
3AC2   B4                     OR   H   
3AC3   CA 29 3B               JP   Z,expectM_3111S129   
3AC6   CD B2 0E               CALL   printStr   
3AC9   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3ADD   CD B2 0E               CALL   printStr   
3AE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AEF   21 14 00               LD   hl,20   
3AF2   E5                     PUSH   hl   
3AF3   E5                     PUSH   hl   
3AF4   CD B9 0F               CALL   run   
3AF7   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3B01   CD B2 0E               CALL   printStr   
3B04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B11   E1                     POP   hl   
3B12   E5                     PUSH   hl   
3B13   E5                     PUSH   hl   
3B14   CD B9 0F               CALL   run   
3B17   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3B28   76                     HALT      
3B29                EXPECTM_3111S129:      
3B29   E1                     POP   HL   
3B2A                          ;*Macro unroll:  test "[10 20 30 40] /al", 4
3B2A   31 00 4E               LD   SP,STACK   
3B2D   CD E6 0E               CALL   coldInit   
3B30   CD AC 4C               CALL   execStr   
3B33   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 DB   "[10 20 30 40] /al",0   
3B45   E1                     POP   HL   
3B46   E5                     PUSH   HL   
3B47   11 04 00               LD   DE,4   
3B4A   B7                     OR   A   
3B4B   ED 52                  SBC   HL,DE   
3B4D   7D                     LD   A,L   
3B4E   B4                     OR   H   
3B4F   CA B9 3B               JP   Z,expectM_3112S130   
3B52   CD B2 0E               CALL   printStr   
3B55   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 .CSTR   "Code: ","[10 20 30 40] /al"   
3B6D   CD B2 0E               CALL   printStr   
3B70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B7F   21 04 00               LD   hl,4   
3B82   E5                     PUSH   hl   
3B83   E5                     PUSH   hl   
3B84   CD B9 0F               CALL   run   
3B87   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3B91   CD B2 0E               CALL   printStr   
3B94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BA1   E1                     POP   hl   
3BA2   E5                     PUSH   hl   
3BA3   E5                     PUSH   hl   
3BA4   CD B9 0F               CALL   run   
3BA7   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3BB8   76                     HALT      
3BB9                EXPECTM_3112S130:      
3BB9   E1                     POP   HL   
3BBA                          ;*Macro unroll:  test "/bm [1 2 3] 1#", 2
3BBA   31 00 4E               LD   SP,STACK   
3BBD   CD E6 0E               CALL   coldInit   
3BC0   CD AC 4C               CALL   execStr   
3BC3   2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/bm [1 2 3] 1#",0   
3BD2   E1                     POP   HL   
3BD3   E5                     PUSH   HL   
3BD4   11 02 00               LD   DE,2   
3BD7   B7                     OR   A   
3BD8   ED 52                  SBC   HL,DE   
3BDA   7D                     LD   A,L   
3BDB   B4                     OR   H   
3BDC   CA 43 3C               JP   Z,expectM_3113S131   
3BDF   CD B2 0E               CALL   printStr   
3BE2   43 6F 64 65 3A 20 2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/bm [1 2 3] 1#"   
3BF7   CD B2 0E               CALL   printStr   
3BFA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C09   21 02 00               LD   hl,2   
3C0C   E5                     PUSH   hl   
3C0D   E5                     PUSH   hl   
3C0E   CD B9 0F               CALL   run   
3C11   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3C1B   CD B2 0E               CALL   printStr   
3C1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C2B   E1                     POP   hl   
3C2C   E5                     PUSH   hl   
3C2D   E5                     PUSH   hl   
3C2E   CD B9 0F               CALL   run   
3C31   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3C42   76                     HALT      
3C43                EXPECTM_3113S131:      
3C43   E1                     POP   HL   
3C44                          ;*Macro unroll:  test "/bm [~A ~B ~C] 1#", 66
3C44   31 00 4E               LD   SP,STACK   
3C47   CD E6 0E               CALL   coldInit   
3C4A   CD AC 4C               CALL   execStr   
3C4D   2F 62 6D 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 DB   "/bm [~A ~B ~C] 1#",0   
3C5F   E1                     POP   HL   
3C60   E5                     PUSH   HL   
3C61   11 42 00               LD   DE,66   
3C64   B7                     OR   A   
3C65   ED 52                  SBC   HL,DE   
3C67   7D                     LD   A,L   
3C68   B4                     OR   H   
3C69   CA D3 3C               JP   Z,expectM_3114S132   
3C6C   CD B2 0E               CALL   printStr   
3C6F   43 6F 64 65 3A 20 2F 62 6D 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 .CSTR   "Code: ","/bm [~A ~B ~C] 1#"   
3C87   CD B2 0E               CALL   printStr   
3C8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C99   21 42 00               LD   hl,66   
3C9C   E5                     PUSH   hl   
3C9D   E5                     PUSH   hl   
3C9E   CD B9 0F               CALL   run   
3CA1   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3CAB   CD B2 0E               CALL   printStr   
3CAE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CBB   E1                     POP   hl   
3CBC   E5                     PUSH   hl   
3CBD   E5                     PUSH   hl   
3CBE   CD B9 0F               CALL   run   
3CC1   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3CD2   76                     HALT      
3CD3                EXPECTM_3114S132:      
3CD3   E1                     POP   HL   
3CD4                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3CD4   31 00 4E               LD   SP,STACK   
3CD7   CD E6 0E               CALL   coldInit   
3CDA   CD AC 4C               CALL   execStr   
3CDD   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3CF1   E1                     POP   HL   
3CF2   E5                     PUSH   HL   
3CF3   11 0A 00               LD   DE,10   
3CF6   B7                     OR   A   
3CF7   ED 52                  SBC   HL,DE   
3CF9   7D                     LD   A,L   
3CFA   B4                     OR   H   
3CFB   CA 67 3D               JP   Z,expectM_3115S133   
3CFE   CD B2 0E               CALL   printStr   
3D01   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3D1B   CD B2 0E               CALL   printStr   
3D1E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D2D   21 0A 00               LD   hl,10   
3D30   E5                     PUSH   hl   
3D31   E5                     PUSH   hl   
3D32   CD B9 0F               CALL   run   
3D35   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3D3F   CD B2 0E               CALL   printStr   
3D42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D4F   E1                     POP   hl   
3D50   E5                     PUSH   hl   
3D51   E5                     PUSH   hl   
3D52   CD B9 0F               CALL   run   
3D55   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3D66   76                     HALT      
3D67                EXPECTM_3115S133:      
3D67   E1                     POP   HL   
3D68                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
3D68   31 00 4E               LD   SP,STACK   
3D6B   CD E6 0E               CALL   coldInit   
3D6E   CD AC 4C               CALL   execStr   
3D71   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
3D8C   E1                     POP   HL   
3D8D   E5                     PUSH   HL   
3D8E   11 0A 00               LD   DE,10   
3D91   B7                     OR   A   
3D92   ED 52                  SBC   HL,DE   
3D94   7D                     LD   A,L   
3D95   B4                     OR   H   
3D96   CA 09 3E               JP   Z,expectM_3116S134   
3D99   CD B2 0E               CALL   printStr   
3D9C   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
3DBD   CD B2 0E               CALL   printStr   
3DC0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DCF   21 0A 00               LD   hl,10   
3DD2   E5                     PUSH   hl   
3DD3   E5                     PUSH   hl   
3DD4   CD B9 0F               CALL   run   
3DD7   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3DE1   CD B2 0E               CALL   printStr   
3DE4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DF1   E1                     POP   hl   
3DF2   E5                     PUSH   hl   
3DF3   E5                     PUSH   hl   
3DF4   CD B9 0F               CALL   run   
3DF7   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3E08   76                     HALT      
3E09                EXPECTM_3116S134:      
3E09   E1                     POP   HL   
3E0A                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
3E0A   31 00 4E               LD   SP,STACK   
3E0D   CD E6 0E               CALL   coldInit   
3E10   CD AC 4C               CALL   execStr   
3E13   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3E32   E1                     POP   HL   
3E33   E5                     PUSH   HL   
3E34   11 0A 00               LD   DE,10   
3E37   B7                     OR   A   
3E38   ED 52                  SBC   HL,DE   
3E3A   7D                     LD   A,L   
3E3B   B4                     OR   H   
3E3C   CA B3 3E               JP   Z,expectM_3117S135   
3E3F   CD B2 0E               CALL   printStr   
3E42   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3E67   CD B2 0E               CALL   printStr   
3E6A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E79   21 0A 00               LD   hl,10   
3E7C   E5                     PUSH   hl   
3E7D   E5                     PUSH   hl   
3E7E   CD B9 0F               CALL   run   
3E81   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3E8B   CD B2 0E               CALL   printStr   
3E8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E9B   E1                     POP   hl   
3E9C   E5                     PUSH   hl   
3E9D   E5                     PUSH   hl   
3E9E   CD B9 0F               CALL   run   
3EA1   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3EB2   76                     HALT      
3EB3                EXPECTM_3117S135:      
3EB3   E1                     POP   HL   
3EB4                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
3EB4   31 00 4E               LD   SP,STACK   
3EB7   CD E6 0E               CALL   coldInit   
3EBA   CD AC 4C               CALL   execStr   
3EBD   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3EDC   E1                     POP   HL   
3EDD   E5                     PUSH   HL   
3EDE   11 14 00               LD   DE,20   
3EE1   B7                     OR   A   
3EE2   ED 52                  SBC   HL,DE   
3EE4   7D                     LD   A,L   
3EE5   B4                     OR   H   
3EE6   CA 5D 3F               JP   Z,expectM_3118S136   
3EE9   CD B2 0E               CALL   printStr   
3EEC   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3F11   CD B2 0E               CALL   printStr   
3F14   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F23   21 14 00               LD   hl,20   
3F26   E5                     PUSH   hl   
3F27   E5                     PUSH   hl   
3F28   CD B9 0F               CALL   run   
3F2B   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3F35   CD B2 0E               CALL   printStr   
3F38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F45   E1                     POP   hl   
3F46   E5                     PUSH   hl   
3F47   E5                     PUSH   hl   
3F48   CD B9 0F               CALL   run   
3F4B   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3F5C   76                     HALT      
3F5D                EXPECTM_3118S136:      
3F5D   E1                     POP   HL   
3F5E                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3F5E   31 00 4E               LD   SP,STACK   
3F61   CD E6 0E               CALL   coldInit   
3F64   CD AC 4C               CALL   execStr   
3F67   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3F7F   E1                     POP   HL   
3F80   E5                     PUSH   HL   
3F81   11 06 00               LD   DE,6   
3F84   B7                     OR   A   
3F85   ED 52                  SBC   HL,DE   
3F87   7D                     LD   A,L   
3F88   B4                     OR   H   
3F89   CA F9 3F               JP   Z,expectM_3119S137   
3F8C   CD B2 0E               CALL   printStr   
3F8F   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3FAD   CD B2 0E               CALL   printStr   
3FB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FBF   21 06 00               LD   hl,6   
3FC2   E5                     PUSH   hl   
3FC3   E5                     PUSH   hl   
3FC4   CD B9 0F               CALL   run   
3FC7   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
3FD1   CD B2 0E               CALL   printStr   
3FD4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FE1   E1                     POP   hl   
3FE2   E5                     PUSH   hl   
3FE3   E5                     PUSH   hl   
3FE4   CD B9 0F               CALL   run   
3FE7   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
3FF8   76                     HALT      
3FF9                EXPECTM_3119S137:      
3FF9   E1                     POP   HL   
3FFA                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3FFA   31 00 4E               LD   SP,STACK   
3FFD   CD E6 0E               CALL   coldInit   
4000   CD AC 4C               CALL   execStr   
4003   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
401E   E1                     POP   HL   
401F   E5                     PUSH   HL   
4020   11 02 00               LD   DE,2   
4023   B7                     OR   A   
4024   ED 52                  SBC   HL,DE   
4026   7D                     LD   A,L   
4027   B4                     OR   H   
4028   CA 9B 40               JP   Z,expectM_3120S138   
402B   CD B2 0E               CALL   printStr   
402E   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
404F   CD B2 0E               CALL   printStr   
4052   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4061   21 02 00               LD   hl,2   
4064   E5                     PUSH   hl   
4065   E5                     PUSH   hl   
4066   CD B9 0F               CALL   run   
4069   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
4073   CD B2 0E               CALL   printStr   
4076   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4083   E1                     POP   hl   
4084   E5                     PUSH   hl   
4085   E5                     PUSH   hl   
4086   CD B9 0F               CALL   run   
4089   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
409A   76                     HALT      
409B                EXPECTM_3120S138:      
409B   E1                     POP   HL   
409C                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
409C   31 00 4E               LD   SP,STACK   
409F   CD E6 0E               CALL   coldInit   
40A2   CD AC 4C               CALL   execStr   
40A5   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
40CB   E1                     POP   HL   
40CC   E5                     PUSH   HL   
40CD   11 0A 00               LD   DE,10   
40D0   B7                     OR   A   
40D1   ED 52                  SBC   HL,DE   
40D3   7D                     LD   A,L   
40D4   B4                     OR   H   
40D5   CA 53 41               JP   Z,expectM_3121S139   
40D8   CD B2 0E               CALL   printStr   
40DB   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4107   CD B2 0E               CALL   printStr   
410A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4119   21 0A 00               LD   hl,10   
411C   E5                     PUSH   hl   
411D   E5                     PUSH   hl   
411E   CD B9 0F               CALL   run   
4121   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
412B   CD B2 0E               CALL   printStr   
412E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
413B   E1                     POP   hl   
413C   E5                     PUSH   hl   
413D   E5                     PUSH   hl   
413E   CD B9 0F               CALL   run   
4141   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
4152   76                     HALT      
4153                EXPECTM_3121S139:      
4153   E1                     POP   HL   
4154                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
4154   31 00 4E               LD   SP,STACK   
4157   CD E6 0E               CALL   coldInit   
415A   CD AC 4C               CALL   execStr   
415D   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
4188   E1                     POP   HL   
4189   E5                     PUSH   HL   
418A   11 06 00               LD   DE,6   
418D   B7                     OR   A   
418E   ED 52                  SBC   HL,DE   
4190   7D                     LD   A,L   
4191   B4                     OR   H   
4192   CA 15 42               JP   Z,expectM_3122S140   
4195   CD B2 0E               CALL   printStr   
4198   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
41C9   CD B2 0E               CALL   printStr   
41CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41DB   21 06 00               LD   hl,6   
41DE   E5                     PUSH   hl   
41DF   E5                     PUSH   hl   
41E0   CD B9 0F               CALL   run   
41E3   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
41ED   CD B2 0E               CALL   printStr   
41F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41FD   E1                     POP   hl   
41FE   E5                     PUSH   hl   
41FF   E5                     PUSH   hl   
4200   CD B9 0F               CALL   run   
4203   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
4214   76                     HALT      
4215                EXPECTM_3122S140:      
4215   E1                     POP   HL   
4216                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
4216   31 00 4E               LD   SP,STACK   
4219   CD E6 0E               CALL   coldInit   
421C   CD AC 4C               CALL   execStr   
421F   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
4233   E1                     POP   HL   
4234   E5                     PUSH   HL   
4235   11 03 00               LD   DE,3   
4238   B7                     OR   A   
4239   ED 52                  SBC   HL,DE   
423B   7D                     LD   A,L   
423C   B4                     OR   H   
423D   CA A9 42               JP   Z,expectM_3123S141   
4240   CD B2 0E               CALL   printStr   
4243   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
425D   CD B2 0E               CALL   printStr   
4260   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
426F   21 03 00               LD   hl,3   
4272   E5                     PUSH   hl   
4273   E5                     PUSH   hl   
4274   CD B9 0F               CALL   run   
4277   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
4281   CD B2 0E               CALL   printStr   
4284   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4291   E1                     POP   hl   
4292   E5                     PUSH   hl   
4293   E5                     PUSH   hl   
4294   CD B9 0F               CALL   run   
4297   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
42A8   76                     HALT      
42A9                EXPECTM_3123S141:      
42A9   E1                     POP   HL   
42AA                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
42AA   31 00 4E               LD   SP,STACK   
42AD   CD E6 0E               CALL   coldInit   
42B0   CD AC 4C               CALL   execStr   
42B3   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
42C7   E1                     POP   HL   
42C8   E5                     PUSH   HL   
42C9   11 01 00               LD   DE,1   
42CC   B7                     OR   A   
42CD   ED 52                  SBC   HL,DE   
42CF   7D                     LD   A,L   
42D0   B4                     OR   H   
42D1   CA 3D 43               JP   Z,expectM_3124S142   
42D4   CD B2 0E               CALL   printStr   
42D7   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
42F1   CD B2 0E               CALL   printStr   
42F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4303   21 01 00               LD   hl,1   
4306   E5                     PUSH   hl   
4307   E5                     PUSH   hl   
4308   CD B9 0F               CALL   run   
430B   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
4315   CD B2 0E               CALL   printStr   
4318   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4325   E1                     POP   hl   
4326   E5                     PUSH   hl   
4327   E5                     PUSH   hl   
4328   CD B9 0F               CALL   run   
432B   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
433C   76                     HALT      
433D                EXPECTM_3124S142:      
433D   E1                     POP   HL   
433E                          ;*Macro unroll:  test "~A 1 - /ad", NUL
433E   31 00 4E               LD   SP,STACK   
4341   CD E6 0E               CALL   coldInit   
4344   CD AC 4C               CALL   execStr   
4347   7E 41 20 31 20 2D 20 2F 61 64 00 DB   "~A 1 - /ad",0   
4352   E1                     POP   HL   
4353   E5                     PUSH   HL   
4354   11 00 00               LD   DE,NUL   
4357   B7                     OR   A   
4358   ED 52                  SBC   HL,DE   
435A   7D                     LD   A,L   
435B   B4                     OR   H   
435C   CA BF 43               JP   Z,expectM_3125S143   
435F   CD B2 0E               CALL   printStr   
4362   43 6F 64 65 3A 20 7E 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~A 1 - /ad"   
4373   CD B2 0E               CALL   printStr   
4376   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4385   21 00 00               LD   hl,NUL   
4388   E5                     PUSH   hl   
4389   E5                     PUSH   hl   
438A   CD B9 0F               CALL   run   
438D   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
4397   CD B2 0E               CALL   printStr   
439A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43A7   E1                     POP   hl   
43A8   E5                     PUSH   hl   
43A9   E5                     PUSH   hl   
43AA   CD B9 0F               CALL   run   
43AD   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
43BE   76                     HALT      
43BF                EXPECTM_3125S143:      
43BF   E1                     POP   HL   
43C0                          ;*Macro unroll:  test "~Z 1 + /ad", NUL
43C0   31 00 4E               LD   SP,STACK   
43C3   CD E6 0E               CALL   coldInit   
43C6   CD AC 4C               CALL   execStr   
43C9   7E 5A 20 31 20 2B 20 2F 61 64 00 DB   "~Z 1 + /ad",0   
43D4   E1                     POP   HL   
43D5   E5                     PUSH   HL   
43D6   11 00 00               LD   DE,NUL   
43D9   B7                     OR   A   
43DA   ED 52                  SBC   HL,DE   
43DC   7D                     LD   A,L   
43DD   B4                     OR   H   
43DE   CA 41 44               JP   Z,expectM_3126S144   
43E1   CD B2 0E               CALL   printStr   
43E4   43 6F 64 65 3A 20 7E 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~Z 1 + /ad"   
43F5   CD B2 0E               CALL   printStr   
43F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4407   21 00 00               LD   hl,NUL   
440A   E5                     PUSH   hl   
440B   E5                     PUSH   hl   
440C   CD B9 0F               CALL   run   
440F   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
4419   CD B2 0E               CALL   printStr   
441C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4429   E1                     POP   hl   
442A   E5                     PUSH   hl   
442B   E5                     PUSH   hl   
442C   CD B9 0F               CALL   run   
442F   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
4440   76                     HALT      
4441                EXPECTM_3126S144:      
4441   E1                     POP   HL   
4442                          ;*Macro unroll:  test "~a 1 - /ad", NUL
4442   31 00 4E               LD   SP,STACK   
4445   CD E6 0E               CALL   coldInit   
4448   CD AC 4C               CALL   execStr   
444B   7E 61 20 31 20 2D 20 2F 61 64 00 DB   "~a 1 - /ad",0   
4456   E1                     POP   HL   
4457   E5                     PUSH   HL   
4458   11 00 00               LD   DE,NUL   
445B   B7                     OR   A   
445C   ED 52                  SBC   HL,DE   
445E   7D                     LD   A,L   
445F   B4                     OR   H   
4460   CA C3 44               JP   Z,expectM_3127S145   
4463   CD B2 0E               CALL   printStr   
4466   43 6F 64 65 3A 20 7E 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~a 1 - /ad"   
4477   CD B2 0E               CALL   printStr   
447A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4489   21 00 00               LD   hl,NUL   
448C   E5                     PUSH   hl   
448D   E5                     PUSH   hl   
448E   CD B9 0F               CALL   run   
4491   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
449B   CD B2 0E               CALL   printStr   
449E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44AB   E1                     POP   hl   
44AC   E5                     PUSH   hl   
44AD   E5                     PUSH   hl   
44AE   CD B9 0F               CALL   run   
44B1   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
44C2   76                     HALT      
44C3                EXPECTM_3127S145:      
44C3   E1                     POP   HL   
44C4                          ;*Macro unroll:  test "~z 1 + /ad", NUL
44C4   31 00 4E               LD   SP,STACK   
44C7   CD E6 0E               CALL   coldInit   
44CA   CD AC 4C               CALL   execStr   
44CD   7E 7A 20 31 20 2B 20 2F 61 64 00 DB   "~z 1 + /ad",0   
44D8   E1                     POP   HL   
44D9   E5                     PUSH   HL   
44DA   11 00 00               LD   DE,NUL   
44DD   B7                     OR   A   
44DE   ED 52                  SBC   HL,DE   
44E0   7D                     LD   A,L   
44E1   B4                     OR   H   
44E2   CA 45 45               JP   Z,expectM_3128S146   
44E5   CD B2 0E               CALL   printStr   
44E8   43 6F 64 65 3A 20 7E 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~z 1 + /ad"   
44F9   CD B2 0E               CALL   printStr   
44FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
450B   21 00 00               LD   hl,NUL   
450E   E5                     PUSH   hl   
450F   E5                     PUSH   hl   
4510   CD B9 0F               CALL   run   
4513   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
451D   CD B2 0E               CALL   printStr   
4520   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
452D   E1                     POP   hl   
452E   E5                     PUSH   hl   
452F   E5                     PUSH   hl   
4530   CD B9 0F               CALL   run   
4533   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
4544   76                     HALT      
4545                EXPECTM_3128S146:      
4545   E1                     POP   HL   
4546                          ;*Macro unroll:  test "~z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4546   31 00 4E               LD   SP,STACK   
4549   CD E6 0E               CALL   coldInit   
454C   CD AC 4C               CALL   execStr   
454F   7E 7A 20 2F 61 64 00   DB   "~z /ad",0   
4556   E1                     POP   HL   
4557   E5                     PUSH   HL   
4558   11 66 50               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
455B   B7                     OR   A   
455C   ED 52                  SBC   HL,DE   
455E   7D                     LD   A,L   
455F   B4                     OR   H   
4560   CA BF 45               JP   Z,expectM_3129S147   
4563   CD B2 0E               CALL   printStr   
4566   43 6F 64 65 3A 20 7E 7A 20 2F 61 64 00 .CSTR   "Code: ","~z /ad"   
4573   CD B2 0E               CALL   printStr   
4576   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4585   21 66 50               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4588   E5                     PUSH   hl   
4589   E5                     PUSH   hl   
458A   CD B9 0F               CALL   run   
458D   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
4597   CD B2 0E               CALL   printStr   
459A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45A7   E1                     POP   hl   
45A8   E5                     PUSH   hl   
45A9   E5                     PUSH   hl   
45AA   CD B9 0F               CALL   run   
45AD   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
45BE   76                     HALT      
45BF                EXPECTM_3129S147:      
45BF   E1                     POP   HL   
45C0                          ;*Macro unroll:  test "~a /ad", VARS + ("Z"-"A"+1)*2
45C0   31 00 4E               LD   SP,STACK   
45C3   CD E6 0E               CALL   coldInit   
45C6   CD AC 4C               CALL   execStr   
45C9   7E 61 20 2F 61 64 00   DB   "~a /ad",0   
45D0   E1                     POP   HL   
45D1   E5                     PUSH   HL   
45D2   11 34 50               LD   DE,VARS + ("Z"-"A"+1)*2   
45D5   B7                     OR   A   
45D6   ED 52                  SBC   HL,DE   
45D8   7D                     LD   A,L   
45D9   B4                     OR   H   
45DA   CA 39 46               JP   Z,expectM_3130S148   
45DD   CD B2 0E               CALL   printStr   
45E0   43 6F 64 65 3A 20 7E 61 20 2F 61 64 00 .CSTR   "Code: ","~a /ad"   
45ED   CD B2 0E               CALL   printStr   
45F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45FF   21 34 50               LD   hl,VARS + ("Z"-"A"+1)*2   
4602   E5                     PUSH   hl   
4603   E5                     PUSH   hl   
4604   CD B9 0F               CALL   run   
4607   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
4611   CD B2 0E               CALL   printStr   
4614   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4621   E1                     POP   hl   
4622   E5                     PUSH   hl   
4623   E5                     PUSH   hl   
4624   CD B9 0F               CALL   run   
4627   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
4638   76                     HALT      
4639                EXPECTM_3130S148:      
4639   E1                     POP   HL   
463A                          ;*Macro unroll:  test "~Z /ad", VARS + ("Z"-"A")*2
463A   31 00 4E               LD   SP,STACK   
463D   CD E6 0E               CALL   coldInit   
4640   CD AC 4C               CALL   execStr   
4643   7E 5A 20 2F 61 64 00   DB   "~Z /ad",0   
464A   E1                     POP   HL   
464B   E5                     PUSH   HL   
464C   11 32 50               LD   DE,VARS + ("Z"-"A")*2   
464F   B7                     OR   A   
4650   ED 52                  SBC   HL,DE   
4652   7D                     LD   A,L   
4653   B4                     OR   H   
4654   CA B3 46               JP   Z,expectM_3131S149   
4657   CD B2 0E               CALL   printStr   
465A   43 6F 64 65 3A 20 7E 5A 20 2F 61 64 00 .CSTR   "Code: ","~Z /ad"   
4667   CD B2 0E               CALL   printStr   
466A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4679   21 32 50               LD   hl,VARS + ("Z"-"A")*2   
467C   E5                     PUSH   hl   
467D   E5                     PUSH   hl   
467E   CD B9 0F               CALL   run   
4681   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
468B   CD B2 0E               CALL   printStr   
468E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
469B   E1                     POP   hl   
469C   E5                     PUSH   hl   
469D   E5                     PUSH   hl   
469E   CD B9 0F               CALL   run   
46A1   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
46B2   76                     HALT      
46B3                EXPECTM_3131S149:      
46B3   E1                     POP   HL   
46B4                          ;*Macro unroll:  test "~A /ad", VARS
46B4   31 00 4E               LD   SP,STACK   
46B7   CD E6 0E               CALL   coldInit   
46BA   CD AC 4C               CALL   execStr   
46BD   7E 41 20 2F 61 64 00   DB   "~A /ad",0   
46C4   E1                     POP   HL   
46C5   E5                     PUSH   HL   
46C6   11 00 50               LD   DE,VARS   
46C9   B7                     OR   A   
46CA   ED 52                  SBC   HL,DE   
46CC   7D                     LD   A,L   
46CD   B4                     OR   H   
46CE   CA 2D 47               JP   Z,expectM_3132S150   
46D1   CD B2 0E               CALL   printStr   
46D4   43 6F 64 65 3A 20 7E 41 20 2F 61 64 00 .CSTR   "Code: ","~A /ad"   
46E1   CD B2 0E               CALL   printStr   
46E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46F3   21 00 50               LD   hl,VARS   
46F6   E5                     PUSH   hl   
46F7   E5                     PUSH   hl   
46F8   CD B9 0F               CALL   run   
46FB   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
4705   CD B2 0E               CALL   printStr   
4708   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4715   E1                     POP   hl   
4716   E5                     PUSH   hl   
4717   E5                     PUSH   hl   
4718   CD B9 0F               CALL   run   
471B   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
472C   76                     HALT      
472D                EXPECTM_3132S150:      
472D   E1                     POP   HL   
472E                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
472E   31 00 4E               LD   SP,STACK   
4731   CD E6 0E               CALL   coldInit   
4734   CD AC 4C               CALL   execStr   
4737   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
4744   E1                     POP   HL   
4745   E5                     PUSH   HL   
4746   11 01 00               LD   DE,1   
4749   B7                     OR   A   
474A   ED 52                  SBC   HL,DE   
474C   7D                     LD   A,L   
474D   B4                     OR   H   
474E   CA B3 47               JP   Z,expectM_3133S151   
4751   CD B2 0E               CALL   printStr   
4754   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4767   CD B2 0E               CALL   printStr   
476A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4779   21 01 00               LD   hl,1   
477C   E5                     PUSH   hl   
477D   E5                     PUSH   hl   
477E   CD B9 0F               CALL   run   
4781   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
478B   CD B2 0E               CALL   printStr   
478E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
479B   E1                     POP   hl   
479C   E5                     PUSH   hl   
479D   E5                     PUSH   hl   
479E   CD B9 0F               CALL   run   
47A1   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
47B2   76                     HALT      
47B3                EXPECTM_3133S151:      
47B3   E1                     POP   HL   
47B4                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
47B4   31 00 4E               LD   SP,STACK   
47B7   CD E6 0E               CALL   coldInit   
47BA   CD AC 4C               CALL   execStr   
47BD   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
47D1   E1                     POP   HL   
47D2   E5                     PUSH   HL   
47D3   11 03 00               LD   DE,3   
47D6   B7                     OR   A   
47D7   ED 52                  SBC   HL,DE   
47D9   7D                     LD   A,L   
47DA   B4                     OR   H   
47DB   CA 47 48               JP   Z,expectM_3134S152   
47DE   CD B2 0E               CALL   printStr   
47E1   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
47FB   CD B2 0E               CALL   printStr   
47FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
480D   21 03 00               LD   hl,3   
4810   E5                     PUSH   hl   
4811   E5                     PUSH   hl   
4812   CD B9 0F               CALL   run   
4815   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
481F   CD B2 0E               CALL   printStr   
4822   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
482F   E1                     POP   hl   
4830   E5                     PUSH   hl   
4831   E5                     PUSH   hl   
4832   CD B9 0F               CALL   run   
4835   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
4846   76                     HALT      
4847                EXPECTM_3134S152:      
4847   E1                     POP   HL   
4848                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
4848   31 00 4E               LD   SP,STACK   
484B   CD E6 0E               CALL   coldInit   
484E   CD AC 4C               CALL   execStr   
4851   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
4868   E1                     POP   HL   
4869   E5                     PUSH   HL   
486A   11 02 00               LD   DE,2   
486D   B7                     OR   A   
486E   ED 52                  SBC   HL,DE   
4870   7D                     LD   A,L   
4871   B4                     OR   H   
4872   CA E1 48               JP   Z,expectM_3135S153   
4875   CD B2 0E               CALL   printStr   
4878   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
4895   CD B2 0E               CALL   printStr   
4898   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48A7   21 02 00               LD   hl,2   
48AA   E5                     PUSH   hl   
48AB   E5                     PUSH   hl   
48AC   CD B9 0F               CALL   run   
48AF   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
48B9   CD B2 0E               CALL   printStr   
48BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48C9   E1                     POP   hl   
48CA   E5                     PUSH   hl   
48CB   E5                     PUSH   hl   
48CC   CD B9 0F               CALL   run   
48CF   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
48E0   76                     HALT      
48E1                EXPECTM_3135S153:      
48E1   E1                     POP   HL   
48E2                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
48E2   31 00 4E               LD   SP,STACK   
48E5   CD E6 0E               CALL   coldInit   
48E8   CD AC 4C               CALL   execStr   
48EB   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
490E   E1                     POP   HL   
490F   E5                     PUSH   HL   
4910   11 01 00               LD   DE,1   
4913   B7                     OR   A   
4914   ED 52                  SBC   HL,DE   
4916   7D                     LD   A,L   
4917   B4                     OR   H   
4918   CA 93 49               JP   Z,expectM_3136S154   
491B   CD B2 0E               CALL   printStr   
491E   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4947   CD B2 0E               CALL   printStr   
494A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4959   21 01 00               LD   hl,1   
495C   E5                     PUSH   hl   
495D   E5                     PUSH   hl   
495E   CD B9 0F               CALL   run   
4961   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
496B   CD B2 0E               CALL   printStr   
496E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
497B   E1                     POP   hl   
497C   E5                     PUSH   hl   
497D   E5                     PUSH   hl   
497E   CD B9 0F               CALL   run   
4981   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
4992   76                     HALT      
4993                EXPECTM_3136S154:      
4993   E1                     POP   HL   
4994                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
4994   31 00 4E               LD   SP,STACK   
4997   CD E6 0E               CALL   coldInit   
499A   CD AC 4C               CALL   execStr   
499D   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
49C0   E1                     POP   HL   
49C1   E5                     PUSH   HL   
49C2   11 01 00               LD   DE,1   
49C5   B7                     OR   A   
49C6   ED 52                  SBC   HL,DE   
49C8   7D                     LD   A,L   
49C9   B4                     OR   H   
49CA   CA 45 4A               JP   Z,expectM_3137S155   
49CD   CD B2 0E               CALL   printStr   
49D0   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
49F9   CD B2 0E               CALL   printStr   
49FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A0B   21 01 00               LD   hl,1   
4A0E   E5                     PUSH   hl   
4A0F   E5                     PUSH   hl   
4A10   CD B9 0F               CALL   run   
4A13   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
4A1D   CD B2 0E               CALL   printStr   
4A20   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A2D   E1                     POP   hl   
4A2E   E5                     PUSH   hl   
4A2F   E5                     PUSH   hl   
4A30   CD B9 0F               CALL   run   
4A33   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
4A44   76                     HALT      
4A45                EXPECTM_3137S155:      
4A45   E1                     POP   HL   
4A46                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4A46   31 00 4E               LD   SP,STACK   
4A49   CD E6 0E               CALL   coldInit   
4A4C   CD AC 4C               CALL   execStr   
4A4F   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4A7F   E1                     POP   HL   
4A80   E5                     PUSH   HL   
4A81   11 02 00               LD   DE,2   
4A84   B7                     OR   A   
4A85   ED 52                  SBC   HL,DE   
4A87   7D                     LD   A,L   
4A88   B4                     OR   H   
4A89   CA 11 4B               JP   Z,expectM_3138S156   
4A8C   CD B2 0E               CALL   printStr   
4A8F   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4AC5   CD B2 0E               CALL   printStr   
4AC8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AD7   21 02 00               LD   hl,2   
4ADA   E5                     PUSH   hl   
4ADB   E5                     PUSH   hl   
4ADC   CD B9 0F               CALL   run   
4ADF   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
4AE9   CD B2 0E               CALL   printStr   
4AEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AF9   E1                     POP   hl   
4AFA   E5                     PUSH   hl   
4AFB   E5                     PUSH   hl   
4AFC   CD B9 0F               CALL   run   
4AFF   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
4B10   76                     HALT      
4B11                EXPECTM_3138S156:      
4B11   E1                     POP   HL   
4B12                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
4B12   31 00 4E               LD   SP,STACK   
4B15   CD E6 0E               CALL   coldInit   
4B18   CD AC 4C               CALL   execStr   
4B1B   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4B30   E1                     POP   HL   
4B31   E5                     PUSH   HL   
4B32   11 02 00               LD   DE,2   
4B35   B7                     OR   A   
4B36   ED 52                  SBC   HL,DE   
4B38   7D                     LD   A,L   
4B39   B4                     OR   H   
4B3A   CA A7 4B               JP   Z,expectM_3139S157   
4B3D   CD B2 0E               CALL   printStr   
4B40   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
4B5B   CD B2 0E               CALL   printStr   
4B5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B6D   21 02 00               LD   hl,2   
4B70   E5                     PUSH   hl   
4B71   E5                     PUSH   hl   
4B72   CD B9 0F               CALL   run   
4B75   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
4B7F   CD B2 0E               CALL   printStr   
4B82   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B8F   E1                     POP   hl   
4B90   E5                     PUSH   hl   
4B91   E5                     PUSH   hl   
4B92   CD B9 0F               CALL   run   
4B95   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
4BA6   76                     HALT      
4BA7                EXPECTM_3139S157:      
4BA7   E1                     POP   HL   
4BA8                          ;*Macro unroll:  test "'hello'/sl",5
4BA8   31 00 4E               LD   SP,STACK   
4BAB   CD E6 0E               CALL   coldInit   
4BAE   CD AC 4C               CALL   execStr   
4BB1   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
4BBC   E1                     POP   HL   
4BBD   E5                     PUSH   HL   
4BBE   11 05 00               LD   DE,5   
4BC1   B7                     OR   A   
4BC2   ED 52                  SBC   HL,DE   
4BC4   7D                     LD   A,L   
4BC5   B4                     OR   H   
4BC6   CA 29 4C               JP   Z,expectM_3140S158   
4BC9   CD B2 0E               CALL   printStr   
4BCC   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
4BDD   CD B2 0E               CALL   printStr   
4BE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BEF   21 05 00               LD   hl,5   
4BF2   E5                     PUSH   hl   
4BF3   E5                     PUSH   hl   
4BF4   CD B9 0F               CALL   run   
4BF7   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
4C01   CD B2 0E               CALL   printStr   
4C04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C11   E1                     POP   hl   
4C12   E5                     PUSH   hl   
4C13   E5                     PUSH   hl   
4C14   CD B9 0F               CALL   run   
4C17   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
4C28   76                     HALT      
4C29                EXPECTM_3140S158:      
4C29   E1                     POP   HL   
4C2A                          ;*Macro unroll:  test "-1/ab", 1
4C2A   31 00 4E               LD   SP,STACK   
4C2D   CD E6 0E               CALL   coldInit   
4C30   CD AC 4C               CALL   execStr   
4C33   2D 31 2F 61 62 00      DB   "-1/ab",0   
4C39   E1                     POP   HL   
4C3A   E5                     PUSH   HL   
4C3B   11 01 00               LD   DE,1   
4C3E   B7                     OR   A   
4C3F   ED 52                  SBC   HL,DE   
4C41   7D                     LD   A,L   
4C42   B4                     OR   H   
4C43   CA A1 4C               JP   Z,expectM_3141S159   
4C46   CD B2 0E               CALL   printStr   
4C49   43 6F 64 65 3A 20 2D 31 2F 61 62 00 .CSTR   "Code: ","-1/ab"   
4C55   CD B2 0E               CALL   printStr   
4C58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C67   21 01 00               LD   hl,1   
4C6A   E5                     PUSH   hl   
4C6B   E5                     PUSH   hl   
4C6C   CD B9 0F               CALL   run   
4C6F   2E 20 2F 68 62 2E 2F 64 62 00 .CSTR   ". /hb./db"   
4C79   CD B2 0E               CALL   printStr   
4C7C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C89   E1                     POP   hl   
4C8A   E5                     PUSH   hl   
4C8B   E5                     PUSH   hl   
4C8C   CD B9 0F               CALL   run   
4C8F   2E 20 2F 68 62 2E 2F 64 62 20 60 0D 0A 60 2E 73 00 .CSTR   ". /hb./db `\r\n`.s"   
4CA0   76                     HALT      
4CA1                EXPECTM_3141S159:      
4CA1   E1                     POP   HL   
4CA2                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
4CA2                             ; 
4CA2   CD B2 0E               CALL   printStr   
4CA5   44 6F 6E 65 21 00      .CSTR   "Done!"   
4CAB   76                     HALT      
4CAC                             ; executes a null teminated string (null executes exit_)
4CAC                             ; the string should be immedaitely following the call
4CAC                EXECSTR:      ; create a root stack frame
4CAC   C1                     POP   bc   ; bc = code*
4CAD   0B                     DEC   bc   ; dec to prepare for next routine
4CAE   11 00 00               LD   de,0   
4CB1   D5                     PUSH   de   ; push fake IP
4CB2   D5                     PUSH   de   ; push null arg_list*
4CB3   D5                     PUSH   de   ; push null first_arg*
4CB4   D5                     PUSH   de   ; push fake BP
4CB5   DD E9                  JP   (ix)   
4CB7                STKSIZE:   EQU   $100   ; Stack size
4CB7                TIBSIZE:   EQU   $100   ; 256 bytes
4CB7                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4CB7                          ALIGN   $100   
4D00                          DS   STKSIZE   
4E00                STACK:       
4E00                          ALIGN   $100   
4E00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4F00                          ALIGN   $100   
4F00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5000                          ALIGN   $100   
5000                VARS:        
5000                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
50D0                RESTARTS:      
50D0                RST08:    DS   2   
50D2                RST10:    DS   2   
50D4                RST18:    DS   2   
50D6                RST20:    DS   2   
50D8                RST28:    DS   2   
50DA                RST30:    DS   2   ; 
50DC                BAUD:     DS   2   ; 
50DE                INTVEC:   DS   2   ; 
50E0                NMIVEC:   DS   2   ; 
50E2                GETCVEC:   DS   2   ; 
50E4                PUTCVEC:   DS   2   ; 
50E6                SYSVARS:      
50E6                             ; initialised sys variables (preserved)
50E6                VDATAWIDTH:   DS   2   ; 
50E8                VNUMBASE:   DS   2   ; 
50EA                VTIBPTR:   DS   2   ; 
50EC                VBUFPTR:   DS   2   ; 
50EE                VNEXT:    DS   2   ; 
50F0                VHEAPPTR:   DS   2   ; 
50F2                VRECUR:   DS   2   ; 
50F4                VDEFINE:   DS   2   ; 
50F6                VSTRMODE:   DS   2   ; 
50F8                             ; uninitialised sys variables (preserved)
50F8                VPOINTER:   DS   2   ; 
50FA                VREMAIN:   DS   2   ; 
50FC                VSAVEDIP:   DS   2   ; 
50FE                VSAVEDSP:   DS   2   ; 
5100                VSAVEDNEXT:   DS   2   ; 
5102                VSAVEDBP:   DS   2   ; 
5104                             ; uninitialised sys variables (unpreserved)
5104                VTEMP1:   DS   2   ; 
5106                VTEMP2:   DS   2   ; 
5108                VTEMP3:   DS   2   ; 
510A                VLASTDEF:   DS   2   ; 
510C                TBPTR:    DS   2   ; reserved for tests
510E                TITLEBUF:   DS   20   
5122                HEAP:        
5122                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
5122                             ; db "{"
5122                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
5122                             ; db    "\\kt{"
5122                             ; db      "0%t!=/qt"                  ; break if type != 0
5122                             ; db      "\\dt:a{"                   ; return talkback to receive data
5122                             ; db        "%L1#!/qt"                ; if not active don't send
5122                             ; db        "%L0# %a="                ; store current index in A
5122                             ; db        "%s %L0# +="              ; inc value of index by step
5122                             ; db        "1%t!=/qt"                ; break if type != 0
5122                             ; db        "%a %e <"                 ; ifte: in range?
5122                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: /t index, /f active = false, quit
5122                             ; db          "?? %k/rc"              ; ifte: send to sink note: /rc recur
5122                             ; db      "} 0 %k^"                   ; init sink
5122                             ; db    "}"
5122                             ; db "}"
5122                             ; db 0
5122                             ; FUNC map, 0, "sf"                   ; map
5122                             ; db "{"
5122                             ; db    "\\kt{"
5122                             ; db      "0%t!=/qt"                  ; break if type != 0
5122                             ; db      "\\dt{"                     ; call source with tb
5122                             ; db        "1%t=="                   ; ifte: type == 1 ?
5122                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
5122                             ; db        "?? %t %k^"               ; ifte: send to sink
5122                             ; db      "} 0 %s^"
5122                             ; db    "}"
5122                             ; db "}"
5122                             ; db 0
5122                             ; ; /ft filter
5122                             ; ; src pred -- src1
5122                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
5122                             ; db "{"
5122                             ; db    "[0]%T="
5122                             ; db    "\\kt{"                       ; return talkback to receive data
5122                             ; db      "\\dt{"                     ; call source with tb
5122                             ; db        "["
5122                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
5122                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
5122                             ; db          "{/t}"                  ; case 2: return true
5122                             ; db        "]%t#^"                   ; select on %t
5122                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
5122                             ; db        "??"
5122                             ; db      "} 0 %s^"
5122                             ; db    "}"
5122                             ; db "}"
5122                             ; db 0
5122                             ; FUNC forEach, 1, "spT"
5122                             ; db "{"
5122                             ; db    "[0]%T="
5122                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
5122                             ; db      "2%t==/qt"                    ; if type == 2 skip
5122                             ; db      "0%t=="                   ; ifte: type = 0 ?
5122                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
5122                             ; db      "??"                      ; ifte:
5122                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
5122                             ; db    "} 0 %s^"
5122                             ; db "}"
5122                             ; db 0
5122                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
5122                             ; db "{"                                  ; reducer: \\da00bbLi4u
5122                             ; db    "[%i]%A="
5122                             ; db    "\\kt{"                         ; return talkback to receive data
5122                             ; db      "\\dt{"                         ; call source with tb
5122                             ; db        "1%t=="                       ; ifte: type == 1 ?
5122                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
5122                             ; db        "?? %t %k^"                    ; ifte: send to sink
5122                             ; db      "} 0 %s^"
5122                             ; db    "}"
5122                             ; db "}"
5122                             ; db 0
5122                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 2348 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 2351 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 2205 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2357 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2359 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2286 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2280 IN MAIN.asm
BANG_:              0204 DEFINED AT LINE 174 IN MAIN.asm
BANG:               0204 DEFINED AT LINE 175 IN MAIN.asm
NOT:                020F DEFINED AT LINE 183 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
EQ_:                0215 DEFINED AT LINE 187 IN MAIN.asm
EQ:                 0215 DEFINED AT LINE 188 IN MAIN.asm
EQ0:                021F DEFINED AT LINE 195 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
EQ1:                0220 DEFINED AT LINE 197 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
GT_:                0224 DEFINED AT LINE 201 IN MAIN.asm
GT:                 0224 DEFINED AT LINE 202 IN MAIN.asm
LT_:                022F DEFINED AT LINE 210 IN MAIN.asm
LT:                 022F DEFINED AT LINE 211 IN MAIN.asm
LT1:                0238 DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
DQUOTE_:            0241 DEFINED AT LINE 224 IN MAIN.asm
HASH_:              0244 DEFINED AT LINE 229 IN MAIN.asm
HASH:               0244 DEFINED AT LINE 230 IN MAIN.asm
ARRAYINDEX:         0244 DEFINED AT LINE 231 IN MAIN.asm
ARRAYINDEX0:        024C DEFINED AT LINE 237 IN MAIN.asm
ARRAYINDEX1:        024D DEFINED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
ARRAYINDEX2:        0259 DEFINED AT LINE 248 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
DOLLAR_:            025C DEFINED AT LINE 252 IN MAIN.asm
PERCENT_:           025F DEFINED AT LINE 255 IN MAIN.asm
AMPER_:             0262 DEFINED AT LINE 260 IN MAIN.asm
AMPER:              0262 DEFINED AT LINE 261 IN MAIN.asm
AND:                0262 DEFINED AT LINE 262 IN MAIN.asm
AND1:               0269 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
QUOTE_:             026D DEFINED AT LINE 275 IN MAIN.asm
LPAREN_:            0270 DEFINED AT LINE 280 IN MAIN.asm
RPAREN_:            0273 DEFINED AT LINE 284 IN MAIN.asm
RPAREN:             0273 DEFINED AT LINE 285 IN MAIN.asm
STAR_:              027B DEFINED AT LINE 290 IN MAIN.asm
STAR:               027B DEFINED AT LINE 291 IN MAIN.asm
MUL:                027B DEFINED AT LINE 292 IN MAIN.asm
MUL2:               027D DEFINED AT LINE 295 IN MAIN.asm
MUL3:               0285 DEFINED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
PLUS_:              0297 DEFINED AT LINE 315 IN MAIN.asm
PLUS:               0297 DEFINED AT LINE 316 IN MAIN.asm
ADD:                0297 DEFINED AT LINE 317 IN MAIN.asm
ADD1:               02A2 DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 321 IN MAIN.asm
ADD3:               02A6 DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
ADD4:               02B0 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
COMMA_:             02B3 DEFINED AT LINE 341 IN MAIN.asm
MINUS_:             02B6 DEFINED AT LINE 346 IN MAIN.asm
MINUS:              02B6 DEFINED AT LINE 347 IN MAIN.asm
SUB:                02C2 DEFINED AT LINE 355 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
SUB1:               02CC DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
DOT_:               02D4 DEFINED AT LINE 370 IN MAIN.asm
SLASH_:             02D7 DEFINED AT LINE 373 IN MAIN.asm
NUM_:               02DA DEFINED AT LINE 376 IN MAIN.asm
COLON_:             02DD DEFINED AT LINE 379 IN MAIN.asm
COLON:              02E0 DEFINED AT LINE 381 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
DEFINESTART:        02ED DEFINED AT LINE 389 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
SEMICOLON_:         02F6 DEFINED AT LINE 395 IN MAIN.asm
QUESTION_:          02F9 DEFINED AT LINE 398 IN MAIN.asm
UPCASE_:            02FC DEFINED AT LINE 402 IN MAIN.asm
UPCASE:             02FC DEFINED AT LINE 403 IN MAIN.asm
LOWCASE_:           0301 DEFINED AT LINE 411 IN MAIN.asm
LOWCASE:            0301 DEFINED AT LINE 412 IN MAIN.asm
IDENT1:             0306 DEFINED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
LBRACK_:            0313 DEFINED AT LINE 428 IN MAIN.asm
LBRACK:             0313 DEFINED AT LINE 429 IN MAIN.asm
ARRAYSTART:         0313 DEFINED AT LINE 430 IN MAIN.asm
BACKSLASH_:         032F DEFINED AT LINE 445 IN MAIN.asm
BACKSLASH:          032F DEFINED AT LINE 446 IN MAIN.asm
LAMBDA:             032F DEFINED AT LINE 447 IN MAIN.asm
LAMBDA1:            0334 DEFINED AT LINE 450 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
LAMBDA2:            0344 DEFINED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
RBRACK_:            0350 DEFINED AT LINE 467 IN MAIN.asm
RBRACK:             0350 DEFINED AT LINE 468 IN MAIN.asm
ARRAYEND:           0350 DEFINED AT LINE 469 IN MAIN.asm
ARRAYEND1:          036C DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
ARRAYEND2:          037C DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
ARRAYEND3:          0381 DEFINED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
CARET_:             03A0 DEFINED AT LINE 521 IN MAIN.asm
CARET:              03A0 DEFINED AT LINE 525 IN MAIN.asm
GO:                 03A0 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A1 DEFINED AT LINE 528 IN MAIN.asm
                    > USED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
GO2:                03A7 DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
UNDERSCORE_:        03B6 DEFINED AT LINE 542 IN MAIN.asm
GRAVE_:             03B9 DEFINED AT LINE 545 IN MAIN.asm
GRAVE:              03B9 DEFINED AT LINE 546 IN MAIN.asm
PRINTLITERAL:       03B9 DEFINED AT LINE 547 IN MAIN.asm
PRINTLITERAL0:      03C0 DEFINED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
PRINTLITERAL1:      03C3 DEFINED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
LBRACE_:            03CF DEFINED AT LINE 562 IN MAIN.asm
LBRACE:             03CF DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
PIPE_:              03D4 DEFINED AT LINE 569 IN MAIN.asm
PIPE:               03D4 DEFINED AT LINE 570 IN MAIN.asm
OR:                 03D4 DEFINED AT LINE 571 IN MAIN.asm
RBRACE_:            03DE DEFINED AT LINE 581 IN MAIN.asm
TILDE_:             03E1 DEFINED AT LINE 585 IN MAIN.asm
TILDE:              03E1 DEFINED AT LINE 586 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 587 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 601 IN MAIN.asm
PRINTCHAR:          0412 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
PRINTSTRING:        0421 DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       0428 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
PRINTSTRING1:       042B DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
PRINTNUMBER:        0436 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0441 DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTDEC1:          044F DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTDEC2:          045E DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTDEC3:          046E DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
PRINTDEC4:          048E DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
PRINTDEC5:          0490 DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
PRINTDEC6:          04A0 DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
PRINTDEC7:          04A1 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
PRINTHEX0:          04A7 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTHEX:           04AD DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTHEX1:          04B5 DEFINED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
PRINTHEX2:          04C0 DEFINED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
PRINTHEX3:          04CF DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 744 IN MAIN.asm
PRINTHEX4:          04D8 DEFINED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 775 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 811 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 825 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 835 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 841 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 861 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 868 IN MAIN.asm
KEY_:               0571 DEFINED AT LINE 874 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 878 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 884 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 888 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 893 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 899 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 909 IN MAIN.asm
TRUE_:              05A4 DEFINED AT LINE 923 IN MAIN.asm
COMMAND_V_:         05A7 DEFINED AT LINE 927 IN MAIN.asm
COMMAND_W_:         05BC DEFINED AT LINE 943 IN MAIN.asm
XOR_:               05C2 DEFINED AT LINE 949 IN MAIN.asm
COMMAND_NOP_:       05C5 DEFINED AT LINE 954 IN MAIN.asm
COMMAND_DEFAULT_:   05C8 DEFINED AT LINE 959 IN MAIN.asm
NOP:                05CB DEFINED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
DIV:                05CD DEFINED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
ABSOLUTE:           05DE DEFINED AT LINE 982 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
ABSOLUTE1:          05E9 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
ADDROF:             05EC DEFINED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
ADDROF1:            0600 DEFINED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 1006 IN MAIN.asm
ADDROF2:            060B DEFINED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 1009 IN MAIN.asm
ARRAYLENGTH:        060D DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0613 DEFINED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
ARRAYSIZE:          0616 DEFINED AT LINE 1037 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
PERFORMM_1521S1038: 061D DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              062A DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
BREAK1:             0631 DEFINED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
BYTEMODE:           0644 DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
BYTEMODE1:          0647 DEFINED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
COMMENT:            064C DEFINED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
CONSTHEAPSTART:     0655 DEFINED AT LINE 1083 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
CONSTTIBSTART:      065B DEFINED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
CONSTBUFSTART:      0661 DEFINED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
DECBASE:            0667 DEFINED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
DECBASE1:           066A DEFINED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
ERROR1:             066F DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
HEXBASE:            0675 DEFINED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
INPUT:              067B DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 870 IN MAIN.asm
KEY:                0686 DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
OUTPUT:             068F DEFINED AT LINE 1132 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
QUIT:               0698 DEFINED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
QUIT1:              069F DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
RECUR:              06A2 DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
REMAIN:             06A8 DEFINED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
STRINGBEGIN:        06AE DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
STRINGEND:          06B6 DEFINED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
STRINGEND1:         06DD DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
STRINGLENGTH:       06E5 DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06EB DEFINED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
STRINGLENGTH2:      06ED DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
STRINGLENGTH3:      06F1 DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
STRINGSIZE:         06F4 DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
PERFORMM_1669S1206: 06FB DEFINED AT LINE 45
                    > USED AT LINE 43
VARBUFPTR:          0700 DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
VARHEAPPTR:         0709 DEFINED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
VARTIBPTR:          0712 DEFINED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
VARIABLE:           071B DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1409 IN MAIN.asm
CONSTANT:           071E DEFINED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
WORDMODE:           0721 DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
XOR:                0727 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
XOR1:               0728 DEFINED AT LINE 1239 IN MAIN.asm
RANGESRC:           0732 DEFINED AT LINE 32
                    > USED AT LINE 905 IN MAIN.asm
RANGESRCM_1711S1256: 0741 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07C6 DEFINED AT LINE 32
                    > USED AT LINE 817 IN MAIN.asm
ARRAYITERM_1730S1276: 07D3 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0847 DEFINED AT LINE 32
                    > USED AT LINE 915 IN MAIN.asm
STRINGITERM_1749S1296: 0854 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08CF DEFINED AT LINE 32
                    > USED AT LINE 880 IN MAIN.asm
MAPM_1769S1318:     08DC DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0911 DEFINED AT LINE 32
                    > USED AT LINE 849 IN MAIN.asm
FILTERM_1783S1333:  091F DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               096F DEFINED AT LINE 32
                    > USED AT LINE 843 IN MAIN.asm
FOLDM_1802S1353:    097E DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09C1 DEFINED AT LINE 32
                    > USED AT LINE 845 IN MAIN.asm
FOREACHM_1816S1368: 09CF DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A0D DEFINED AT LINE 32
                    > USED AT LINE 847 IN MAIN.asm
FUNCSRCM_1830S1383: 0A19 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A46 DEFINED AT LINE 32
                    > USED AT LINE 604 IN MAIN.asm
PRINTARRAYM_1840S1394: 0A54 DEFINED AT LINE 39
                    > USED AT LINE 35
AT_:                0A8E DEFINED AT LINE 1404 IN MAIN.asm
AT:                 0A8E DEFINED AT LINE 1405 IN MAIN.asm
ADDR:               0A8E DEFINED AT LINE 1406 IN MAIN.asm
DOLLAR:             0A98 DEFINED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
HEXNUM:             0A98 DEFINED AT LINE 1413 IN MAIN.asm
HEXNUM1:            0A9B DEFINED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
HEXNUM2:            0AA3 DEFINED AT LINE 1421 IN MAIN.asm
                    > USED AT LINE 1419 IN MAIN.asm
QUESTION:           0AB5 DEFINED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
IF:                 0AB5 DEFINED AT LINE 1438 IN MAIN.asm
IFTE:               0AC1 DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1442 IN MAIN.asm
IFTE1:              0AC2 DEFINED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
NUM:                0ACE DEFINED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
NUM0:               0AD7 DEFINED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
NUM1:               0AD8 DEFINED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
NUM2:               0AF0 DEFINED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1423 IN MAIN.asm
                    > USED AT LINE 1425 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
NUM3:               0AFB DEFINED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
RBRACE:             0AFE DEFINED AT LINE 1500 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKEND:           0AFE DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
BLOCKEND1:          0B30 DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
BLOCKEND2:          0B3C DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
BLOCKEND3:          0B4E DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
BLOCKEND4:          0B62 DEFINED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1552 IN MAIN.asm
GOBLOCK:            0B6B DEFINED AT LINE 1559 IN MAIN.asm
                    > USED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
GOBLOCK2:           0B90 DEFINED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
GOBLOCK3:           0B9A DEFINED AT LINE 1582 IN MAIN.asm
GOFUNC:             0B9E DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
GOFUNC1:            0BB7 DEFINED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
GOFUNC2:            0BBD DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
GOFUNC3:            0BC8 DEFINED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
GOFUNC4:            0BE0 DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
GOFUNC5:            0BE3 DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
GOFUNC6:            0BE6 DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1637 IN MAIN.asm
GOFUNC7:            0BE9 DEFINED AT LINE 1645 IN MAIN.asm
GOFUNC8:            0BED DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
ASSIGN:             0BF8 DEFINED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
ASSIGN0:            0BFA DEFINED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 339 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
ASSIGN1:            0BFE DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
ASSIGN2:            0C07 DEFINED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
SEMICOLON:          0C09 DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
DEFINEEND:          0C09 DEFINED AT LINE 1678 IN MAIN.asm
DEFINEEND1:         0C1B DEFINED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
EQUALS:             0C1D DEFINED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
NOTEQUALS:          0C24 DEFINED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
LESSTHANEQ:         0C2B DEFINED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
LESSTHAN:           0C30 DEFINED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
LESSTHAN1:          0C35 DEFINED AT LINE 1718 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
TRUE1:              0C38 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
NULL1:              0C3E DEFINED AT LINE 1725 IN MAIN.asm
FALSE1:             0C3E DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 1719 IN MAIN.asm
SHIFTLEFT:          0C44 DEFINED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
SHIFTLEFT1:         0C4C DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
SHIFTLEFT2:         0C4D DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
SHIFTRIGHT:         0C54 DEFINED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
SHIFTRIGHT1:        0C5C DEFINED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
SHIFTRIGHT2:        0C60 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
QUOTE:              0C67 DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
STRING:             0C67 DEFINED AT LINE 1769 IN MAIN.asm
STRING1:            0C70 DEFINED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
STRING2:            0C73 DEFINED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
STRING3:            0C79 DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
PERCENT:            0C81 DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
ARG:                0C81 DEFINED AT LINE 1796 IN MAIN.asm
ARG0:               0C9D DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
ARG0A:              0CA6 DEFINED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
ARG1:               0CAB DEFINED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
ARG1A:              0CB3 DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
DOTNEXT:            0CB6 DEFINED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
DOTNEXT1:           0CBE DEFINED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1840 IN MAIN.asm
DOTNEXT2:           0CCA DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
DOTNEXT3:           0CD0 DEFINED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 1847 IN MAIN.asm
DQUOTE:             0CDC DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
UNDERSCORE:         0CDC DEFINED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 543 IN MAIN.asm
COMMA:              0CDC DEFINED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
DIVIDE:             0CDE DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
DIVIDE1:            0CE3 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
DIVIDE2:            0CF0 DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
DIVIDE3:            0CF1 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
PARSEARGS:          0CF7 DEFINED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
PARSEARGS1:         0D01 DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
PARSEARGS1A:        0D09 DEFINED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
PARSEARGS2:         0D11 DEFINED AT LINE 1910 IN MAIN.asm
PARSEARGS3:         0D19 DEFINED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
PARSEARGS4:         0D1C DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
PARSEARGS5:         0D22 DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
PARSEBLOCK:         0D2D DEFINED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
PARSEBLOCK1:        0D31 DEFINED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
PARSEBLOCK2:        0D5D DEFINED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
PARSEBLOCK3:        0D60 DEFINED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
PARSEBLOCK4:        0D68 DEFINED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
PARSEBLOCK5:        0D6B DEFINED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
PARSEBLOCK6:        0D93 DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
CREATEFUNC:         0D97 DEFINED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 461 IN MAIN.asm
CREATEFUNC0:        0DB6 DEFINED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
CREATEFUNC1:        0DCE DEFINED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
CREATEFUNC2:        0DE1 DEFINED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
CREATEFUNC2A:       0E00 DEFINED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
CREATEFUNC3:        0E0F DEFINED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2104 IN MAIN.asm
CREATEFUNC4:        0E1A DEFINED AT LINE 2105 IN MAIN.asm
CREATEFUNC5:        0E1B DEFINED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
COMMANDTABLE:       0E39 DEFINED AT LINE 2137 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
COMMANDTABLE1:      0E43 DEFINED AT LINE 2144 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
COMMANDTABLE2:      0E4A DEFINED AT LINE 2150 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 2143 IN MAIN.asm
JUMPTABLE:          0E4F DEFINED AT LINE 2159 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
JUMPTABLE1:         0E50 DEFINED AT LINE 2161 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
JUMPTABLE2:         0E51 DEFINED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2176 IN MAIN.asm
JUMPTABLE3:         0E58 DEFINED AT LINE 2169 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
JUMPTABLE4:         0E61 DEFINED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
PRTSTR0:            0E67 DEFINED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2191 IN MAIN.asm
PRTSTR:             0E6B DEFINED AT LINE 2188 IN MAIN.asm
                    > USED AT LINE 2255 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
NESTING:            0E70 DEFINED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 2395 IN MAIN.asm
NESTING0:           0E7A DEFINED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
NESTING1A:          0E81 DEFINED AT LINE 2215 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
NESTING1:           0E84 DEFINED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
NESTING2:           0E93 DEFINED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
NESTING3:           0E95 DEFINED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
NESTING4:           0EA0 DEFINED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
PROMPT:             0EA2 DEFINED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
CRLF:               0EAB DEFINED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2408 IN MAIN.asm
PRINTSTR:           0EB2 DEFINED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 43
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 165
INIT:               0EB9 DEFINED AT LINE 2260 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
INIT1:              0EC1 DEFINED AT LINE 2264 IN MAIN.asm
                    > USED AT LINE 2270 IN MAIN.asm
WARMINIT:           0EC9 DEFINED AT LINE 2272 IN MAIN.asm
COLDBOOT0:          0EDC DEFINED AT LINE 2279 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
COLDINIT:           0EE6 DEFINED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0EF7 DEFINED AT LINE 2294 IN MAIN.asm
                    > USED AT LINE 2297 IN MAIN.asm
COLDSTART:          0F04 DEFINED AT LINE 2303 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
START:              0F0D DEFINED AT LINE 2307 IN MAIN.asm
START1:             0F13 DEFINED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2306 IN MAIN.asm
INTERPRET:          0F19 DEFINED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
                    > USED AT LINE 2460 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
                    > USED AT LINE 2485 IN MAIN.asm
INTERPRET2:         0F25 DEFINED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
                    > USED AT LINE 2471 IN MAIN.asm
INTERPRET3:         0F2D DEFINED AT LINE 2330 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
INTERPRET4:         0F38 DEFINED AT LINE 2339 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
INTERPRET5:         0F3D DEFINED AT LINE 2346 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
INTERPRET5A:        0F5B DEFINED AT LINE 2383 IN MAIN.asm
INTERPRET6:         0F5D DEFINED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
INTERPRET7:         0F6B DEFINED AT LINE 2398 IN MAIN.asm
                    > USED AT LINE 2355 IN MAIN.asm
INTERPRET8:         0F7E DEFINED AT LINE 2413 IN MAIN.asm
                    > USED AT LINE 2353 IN MAIN.asm
NEXT:               0F99 DEFINED AT LINE 2426 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2430 IN MAIN.asm
NEXT0:              0FAD DEFINED AT LINE 2440 IN MAIN.asm
                    > USED AT LINE 2438 IN MAIN.asm
NEXT1:              0FAE DEFINED AT LINE 2442 IN MAIN.asm
                    > USED AT LINE 2431 IN MAIN.asm
EXIT:               0FB5 DEFINED AT LINE 2447 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
RUN:                0FB9 DEFINED AT LINE 2451 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0FBD DEFINED AT LINE 2456 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
BACKSPACE_:         0FCF DEFINED AT LINE 2464 IN MAIN.asm
                    > USED AT LINE 2360 IN MAIN.asm
EDIT_:              0FDF DEFINED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 2358 IN MAIN.asm
REEDIT_:            0FF5 DEFINED AT LINE 2479 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
PRINTSTACK_:        0FF8 DEFINED AT LINE 2482 IN MAIN.asm
F1:                 1002 DEFINED AT LINE 32
                    > USED AT LINE 851 IN MAIN.asm
F1M_3002S12:        100D DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 100E DEFINED AT LINE 32
                    > USED AT LINE 853 IN MAIN.asm
F2M_3004S15:        1019 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 101A DEFINED AT LINE 32
                    > USED AT LINE 855 IN MAIN.asm
F3M_3006S18:        1025 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 1026 DEFINED AT LINE 32
                    > USED AT LINE 857 IN MAIN.asm
F4M_3008S21:        1031 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1100 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3023S40:    119B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3029S47:    1217 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3030S48:    1289 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3031S49:    12F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3032S50:    1369 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3033S51:    13D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3034S52:    1449 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3035S53:    14BB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3036S54:    152F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3037S55:    15A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3038S56:    1613 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3039S57:    1685 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3040S58:    16F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3041S59:    176D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3042S60:    17E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3043S61:    1861 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3044S62:    18D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3045S63:    1955 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3046S64:    19D5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3047S65:    1A53 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3048S66:    1ACB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3049S67:    1B4B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3050S68:    1BC7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3051S69:    1C3F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3052S70:    1CB7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3053S71:    1D37 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3054S72:    1DAF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3055S73:    1E27 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3056S74:    1EA1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3057S75:    1F2B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3058S76:    1FA3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3059S77:    2023 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3060S78:    209B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3061S79:    2121 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3062S80:    21A7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3063S81:    222D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3064S82:    22B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3065S83:    2333 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3066S84:    23AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3067S85:    2425 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S86:    249F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S87:    2517 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S88:    258F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S89:    2607 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S90:    267F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S91:    26F7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S92:    276F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S93:    27E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S94:    285F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S95:    28D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3078S96:    2953 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S97:    29CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S98:    2A49 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3081S99:    2AC5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3082S100:   2B3B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3083S101:   2BB1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3084S102:   2C2D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3085S103:   2CAF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3086S104:   2D31 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S105:   2DB7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S106:   2E47 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S107:   2ED7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S108:   2F4F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S109:   2FC9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S110:   3049 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3093S111:   30CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3094S112:   314D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3095S113:   31D7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3096S114:   3263 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3097S115:   32F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S116:   338B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S117:   3413 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S118:   34A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S119:   3531 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S120:   35C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S121:   3653 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S122:   36F1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S123:   377D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S124:   3817 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S125:   38B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S126:   3951 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S127:   39F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S128:   3AA1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S129:   3B29 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S130:   3BB9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S131:   3C43 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S132:   3CD3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S133:   3D67 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S134:   3E09 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S135:   3EB3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S136:   3F5D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S137:   3FF9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S138:   409B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S139:   4153 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S140:   4215 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S141:   42A9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S142:   433D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S143:   43BF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S144:   4441 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S145:   44C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S146:   4545 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S147:   45BF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S148:   4639 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S149:   46B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S150:   472D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S151:   47B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S152:   4847 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S153:   48E1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S154:   4993 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S155:   4A45 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S156:   4B11 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S157:   4BA7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S158:   4C29 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S159:   4CA1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            4CAC DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4E00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4E00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
                    > USED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
BUFFER:             4F00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
VARS:               5000 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           50D0 DEFINED AT LINE 18 IN ram.asm
RST08:              50D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              50D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              50D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              50D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              50D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              50DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               50DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             50DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             50E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            50E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            50E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            50E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2287 IN MAIN.asm
VDATAWIDTH:         50E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
VNUMBASE:           50E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
VTIBPTR:            50EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2417 IN MAIN.asm
VBUFPTR:            50EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
VNEXT:              50EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2299 IN MAIN.asm
VHEAPPTR:           50F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 513 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
VRECUR:             50F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1556 IN MAIN.asm
VDEFINE:            50F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 392 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
VSTRMODE:           50F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
VPOINTER:           50F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 241 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
VREMAIN:            50FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
VSAVEDIP:           50FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2273 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
VSAVEDSP:           50FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2274 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
VSAVEDNEXT:         5100 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2275 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
VSAVEDBP:           5102 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2276 IN MAIN.asm
                    > USED AT LINE 2423 IN MAIN.asm
VTEMP1:             5104 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
VTEMP2:             5106 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
VTEMP3:             5108 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
VLASTDEF:           510A DEFINED AT LINE 61 IN ram.asm
TBPTR:              510C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           510E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2262 IN MAIN.asm
                    > USED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2311 IN MAIN.asm
HEAP:               5122 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
