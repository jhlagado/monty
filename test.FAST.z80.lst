0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 55               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 55               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 55               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 55               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 55               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 55               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 55               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 55               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 55               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 55               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 53               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 55               LD   (RST08),HL   
0094   22 D2 55               LD   (RST10),HL   
0097   22 D4 55               LD   (RST18),HL   
009A   22 D6 55               LD   (RST20),HL   
009D   22 D8 55               LD   (RST28),HL   
00A0   22 DA 55               LD   (RST30),HL   
00A3   22 DE 55               LD   (INTVEC),HL   
00A6   22 E0 55               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 55               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 55               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 10               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 53                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 54                  DW   BUF   ; vBUFPtr pointer into BUF
0188   FB 0D                  DW   next   ; nNext
018A   1C 56                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C   00 00                  DW   0   ; vRecur
018E   00 00                  DW   0   ; unused
0190                          ALIGN   $100   
0200                OPCODES:      ; still available ` ~ _ \
0200   87                     DB   lsb(nop_)   ; SP
0201   33                     DB   lsb(bang_)   ; !
0202   53                     DB   lsb(dquote_)   ; "
0203   47                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1B                     DB   lsb(tick_)   ; '
0208   15                     DB   lsb(lparen_)   ; (
0209   89                     DB   lsb(rparen_)   ; )
020A   30                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   50                     DB   lsb(comma_)   ; ,
020D   56                     DB   lsb(minus_)   ; -
020E   21                     DB   lsb(dot_)   ; .
020F   84                     DB   lsb(slash_)   ; /	
0210   44                     DB   lsb(num_)   ; 0
0211   44                     DB   lsb(num_)   ; 1
0212   44                     DB   lsb(num_)   ; 2
0213   44                     DB   lsb(num_)   ; 3
0214   44                     DB   lsb(num_)   ; 4
0215   44                     DB   lsb(num_)   ; 5
0216   44                     DB   lsb(num_)   ; 6
0217   44                     DB   lsb(num_)   ; 7
0218   44                     DB   lsb(num_)   ; 8
0219   44                     DB   lsb(num_)   ; 9
021A   24                     DB   lsb(colon_)   ; :
021B   1E                     DB   lsb(semicolon_)   ; ;
021C   72                     DB   lsb(lt_)   ; <
021D   59                     DB   lsb(eq_)   ; =
021E   67                     DB   lsb(gt_)   ; >
021F   2D                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   27                     DB   lsb(upcase_)   ; A
0222   27                     DB   lsb(upcase_)   ; B
0223   27                     DB   lsb(upcase_)   ; C
0224   27                     DB   lsb(upcase_)   ; D
0225   27                     DB   lsb(upcase_)   ; E
0226   27                     DB   lsb(upcase_)   ; F
0227   27                     DB   lsb(upcase_)   ; G
0228   27                     DB   lsb(upcase_)   ; h
0229   27                     DB   lsb(upcase_)   ; I
022A   27                     DB   lsb(upcase_)   ; J
022B   27                     DB   lsb(upcase_)   ; K
022C   27                     DB   lsb(upcase_)   ; L
022D   27                     DB   lsb(upcase_)   ; M
022E   27                     DB   lsb(upcase_)   ; N
022F   27                     DB   lsb(upcase_)   ; O
0230   27                     DB   lsb(upcase_)   ; p
0231   27                     DB   lsb(upcase_)   ; Q
0232   27                     DB   lsb(upcase_)   ; R
0233   27                     DB   lsb(upcase_)   ; S
0234   27                     DB   lsb(upcase_)   ; T
0235   27                     DB   lsb(upcase_)   ; U
0236   27                     DB   lsb(upcase_)   ; V
0237   27                     DB   lsb(upcase_)   ; W
0238   27                     DB   lsb(upcase_)   ; X
0239   27                     DB   lsb(upcase_)   ; Y
023A   27                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   87                     DB   lsb(nop_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   4D                     DB   lsb(caret_)   ; ^
023F   87                     DB   lsb(nop_)   ; _
0240   53                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2A                     DB   lsb(lowcase_)   ; a
0242   2A                     DB   lsb(lowcase_)   ; b
0243   2A                     DB   lsb(lowcase_)   ; c
0244   2A                     DB   lsb(lowcase_)   ; d
0245   2A                     DB   lsb(lowcase_)   ; e
0246   2A                     DB   lsb(lowcase_)   ; f
0247   2A                     DB   lsb(lowcase_)   ; g
0248   2A                     DB   lsb(lowcase_)   ; h
0249   2A                     DB   lsb(lowcase_)   ; i
024A   2A                     DB   lsb(lowcase_)   ; j
024B   2A                     DB   lsb(lowcase_)   ; k
024C   2A                     DB   lsb(lowcase_)   ; l
024D   2A                     DB   lsb(lowcase_)   ; m
024E   2A                     DB   lsb(lowcase_)   ; n
024F   2A                     DB   lsb(lowcase_)   ; o
0250   2A                     DB   lsb(lowcase_)   ; p
0251   2A                     DB   lsb(lowcase_)   ; q
0252   2A                     DB   lsb(lowcase_)   ; r
0253   2A                     DB   lsb(lowcase_)   ; s
0254   2A                     DB   lsb(lowcase_)   ; t
0255   2A                     DB   lsb(lowcase_)   ; u
0256   2A                     DB   lsb(lowcase_)   ; v
0257   2A                     DB   lsb(lowcase_)   ; w
0258   2A                     DB   lsb(lowcase_)   ; x
0259   2A                     DB   lsb(lowcase_)   ; y
025A   2A                     DB   lsb(lowcase_)   ; z
025B   15                     DB   lsb(lbrace_)   ; {
025C   4A                     DB   lsb(pipe_)   ; |
025D   18                     DB   lsb(rbrace_)   ; }
025E   87                     DB   lsb(nop_)   ; ~
025F   87                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8C 03               JP   plus   
0303                AT_:         
0303   C3 A9 03               JP   at   
0306                AMPER_:      
0306   C3 B3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 7E 0A               JP   dollar   
030C                LBRACK_:      
030C   C3 15 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 31 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 E0 03               JP   percent   
0315                LPAREN_:      
0315                LBRACE_:      
0315   C3 0E 05               JP   lbrace   
0318                RBRACE_:      
0318   C3 77 05               JP   rbrace   
031B                TICK_:       
031B   C3 FE 05               JP   tick   
031E                SEMICOLON_:      
031E   C3 E7 06               JP   semicolon   
0321                DOT_:        
0321   C3 B1 07               JP   dot   
0324                COLON_:      
0324   C3 99 04               JP   colon   
0327                UPCASE_:      
0327   C3 9B 0A               JP   upcase   
032A                LOWCASE_:      
032A   C3 A0 0A               JP   lowcase   
032D                QUESTION_:      
032D   C3 B2 0A               JP   question   
0330                STAR_:       
0330   C3 38 0B               JP   star   
0333                BANG_:       ; logical invert, any non zero value
0333   03                     INC   bc   
0334   0A                     LD   a,(bc)   
0335   FE 3D                  CP   "="   
0337   20 05                  JR   nz,not   
0339   E1                     POP   hl   
033A   D1                     POP   de   
033B   C3 0D 09               JP   notequals   
033E                NOT:         
033E   0B                     DEC   bc   
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1F                  JR   eq1   
0344                NUM_:        
0344   C3 54 0B               JP   num   
0347                HASH_:       
0347   C3 81 04               JP   hash   
034A                PIPE_:       
034A   C3 BE 03               JP   pipe   
034D                CARET_:      
034D   C3 DF 09               JP   caret   
0350                COMMA_:      
0350   C3 83 07               JP   comma   
0353                DQUOTE_:      
0353   C3 B9 0B               JP   dquote   
0356                MINUS_:      
0356   C3 E1 0B               JP   minus   
0359                EQ_:         
0359   CD 97 0C               CALL   jumpTable   
035C   3D                     DB   "="   
035D   62 03                  DW   eq0   
035F   00                     DB   NUL   
0360   CF 04                  DW   assign   
0362                             ; inc bc
0362                             ; ld a,(bc)                   ; is it == ?
0362                             ; cp "="
0362                             ; jr z,eq0                    ; no its equality
0362                             ; dec bc
0362                             ; jp assign                   ; no its assignment
0362                EQ0:         
0362   E1                     POP   hl   
0363                EQ1:         
0363   D1                     POP   de   
0364   C3 05 09               JP   equals   
0367                GT_:         
0367   03                     INC   bc   
0368   0A                     LD   a,(bc)   
0369   FE 3E                  CP   ">"   
036B   CA A6 0B               JP   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 09                  JR   lt1   
0372                LT_:         
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   CA 96 0B               JP   z,shiftLeft   
0379   E1                     POP   hl   
037A   D1                     POP   de   
037B                LT1:         
037B   FE 3D                  CP   "="   
037D   CA 16 09               JP   z,lessthaneq   
0380   0B                     DEC   bc   
0381   C3 1B 09               JP   lessthan   
0384                SLASH_:      
0384   C3 13 06               JP   slash   
0387                NOP_:        
0387   DD E9                  JP   (ix)   
0389                RPAREN_:      
0389   C3 8E 0B               JP   rparen   
038C                             ;*******************************************************************
038C                             ; implementations
038C                             ;*******************************************************************
038C                PLUS:        
038C                ADD:         
038C   03                     INC   bc   
038D   0A                     LD   a,(bc)   
038E   FE 2B                  CP   "+"   ; ++ increment variable
0390   20 05                  JR   nz,add1   
0392   E1                     POP   hl   
0393   23                     INC   hl   
0394   C3 D1 04               JP   assign0   
0397                ADD1:        
0397   0B                     DEC   bc   
0398   D1                     POP   de   ; second term
0399   E1                     POP   hl   ; first term
039A   19                     ADD   hl,de   
039B                ADD3:        
039B   03                     INC   bc   
039C   0A                     LD   a,(bc)   
039D   FE 3D                  CP   "="   
039F   CA A6 03               JP   z,add4   
03A2   0B                     DEC   bc   
03A3   E5                     PUSH   hl   
03A4   DD E9                  JP   (ix)   
03A6                ADD4:        
03A6   C3 D1 04               JP   assign0   
03A9                             ; @ addr
03A9                             ; -- ptr
03A9                AT:          
03A9                ADDR:        
03A9   ED 5B F4 55            LD   de,(vPointer)   
03AD   21 F4 55               LD   hl,vPointer   
03B0   C3 78 0C               JP   variable   
03B3                AMPER:       
03B3                AND:         
03B3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B4   E1                     POP   hl   
03B5   7B                     LD   a,e   
03B6   A5                     AND   l   
03B7   6F                     LD   l,a   
03B8   7A                     LD   a,d   
03B9   A4                     AND   h   
03BA                AND1:        
03BA   67                     LD   h,a   
03BB   E5                     PUSH   hl   
03BC   DD E9                  JP   (ix)   
03BE                PIPE:        
03BE   CD 97 0C               CALL   jumpTable   
03C1   3E                     DB   ">"   
03C2   84 0B                  DW   pipeStream   
03C4   00                     DB   NUL   
03C5   C7 03                  DW   or   
03C7                OR:          
03C7   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C8   E1                     POP   hl   
03C9   7B                     LD   a,e   
03CA   B5                     OR   l   
03CB   6F                     LD   l,a   
03CC   7A                     LD   a,d   
03CD   B4                     OR   h   
03CE   18 EA                  JR   and1   
03D0                XOR:         
03D0   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03D1                XOR1:        
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   AD                     XOR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   AC                     XOR   h   
03D7   67                     LD   h,a   
03D8   E5                     PUSH   hl   
03D9   DD E9                  JP   (ix)   
03DB                INVERT:      ; Bitwise INVert the top member of the stack
03DB   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03DE   18 F1                  JR   xor1   
03E0                             ; %a .. %z
03E0                             ; -- value
03E0                             ; returns value of arg
03E0                PERCENT:      
03E0                ARG:         
03E0   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03E3   FD 56 05               LD   d,(iy+5)   
03E6   EB                     EX   de,hl   
03E7   7D                     LD   a,l   ; arg_list* == null, skip
03E8   B4                     OR   h   
03E9   28 1A                  JR   z,arg0a   
03EB   23                     INC   hl   ; a = num_args, hl = arg_list*
03EC   7E                     LD   a,(hl)   
03ED   23                     INC   hl   
03EE   B7                     OR   a   
03EF   28 14                  JR   z,arg0a   ; num_args == 0, skip
03F1   5F                     LD   e,a   ; e = a = num_args
03F2   03                     INC   bc   ; a = next char = dollar_name
03F3   0A                     LD   a,(bc)   
03F4   C5                     PUSH   bc   ; save IP
03F5   43                     LD   b,e   ; b = e = num_args
03F6   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F9   FD 56 03               LD   d,(iy+3)   
03FC                ARG0:        
03FC   1B                     DEC   de   ; a = dollar_name, de = next arg*
03FD   1B                     DEC   de   
03FE   BE                     CP   (hl)   
03FF   28 09                  JR   z,arg1   
0401   23                     INC   hl   ; hl = next arg_list*
0402   10 F8                  DJNZ   arg0   
0404   C1                     POP   bc   ; no match, restore IP
0405                ARG0A:       
0405   11 00 00               LD   de,0   ; return 0
0408   18 08                  JR   arg1a   
040A                ARG1:        
040A   C1                     POP   bc   ; restore IP
040B   EB                     EX   de,hl   ; hl = arg*
040C   22 F4 55               LD   (vPointer),hl   ; store arg* in setter
040F   5E                     LD   e,(hl)   
0410   23                     INC   hl   
0411   56                     LD   d,(hl)   ; de = arg
0412                ARG1A:       
0412   D5                     PUSH   de   ; push arg
0413   DD E9                  JP   (ix)   
0415                LBRACK:      
0415                ARRAYSTART:      
0415   11 00 00               LD   de,0   ; create stack frame
0418   D5                     PUSH   de   ; push null for IP
0419   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
041C   FD 56 05               LD   d,(iy+5)   ; 
041F   D5                     PUSH   de   ; 
0420   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0423   FD 56 03               LD   d,(iy+3)   ; 
0426   D5                     PUSH   de   ; 
0427   FD E5                  PUSH   iy   ; push BP
0429   FD 21 00 00            LD   iy,0   ; BP = SP
042D   FD 39                  ADD   iy,sp   
042F   DD E9                  JP   (ix)   
0431                RBRACK:      
0431                ARRAYEND:      
0431   FD 54                  LD   d,iyh   ; de = BP
0433   FD 5D                  LD   e,iyl   
0435   ED 43 00 56            LD   (vTemp1),bc   ; save IP
0439   62 6B                  LD   hl,de   ; hl = de = BP
043B   B7                     OR   a   
043C   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
043E   CB 3C                  SRL   h   ; 
0440   CB 1D                  RR   l   
0442   44 4D                  LD   bc,hl   ; bc = count
0444   2A F0 55               LD   hl,(vHeapPtr)   ; hl = array[-4]
0447   71                     LD   (hl),c   ; write num items in length word
0448   23                     INC   hl   
0449   70                     LD   (hl),b   
044A   23                     INC   hl   ; hl = array[0], bc = count
044B                             ; de = BP, hl = array[0], bc = count
044B   18 15                  JR   arrayEnd3   
044D                ARRAYEND1:      
044D   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0450   77                     LD   (hl),a   ; write lsb of array item
0451   23                     INC   hl   ; move to msb of array item
0452   3A E6 55               LD   a,(vDataWidth)   ; vDataWidth=1?
0455   3D                     DEC   a   
0456   28 05                  JR   z,arrayEnd2   
0458   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
045B   77                     LD   (hl),a   ; write msb of array item
045C   23                     INC   hl   ; move to next word in array
045D                ARRAYEND2:      
045D   FD 2B                  DEC   iy   ; move to next word on stack
045F   FD 2B                  DEC   iy   
0461   0B                     DEC   bc   ; dec items count
0462                ARRAYEND3:      
0462   79                     LD   a,c   ; if not zero loop
0463   B0                     OR   b   
0464   20 E7                  JR   nz,arrayEnd1   
0466   EB                     EX   de,hl   ; de = end of array, hl = BP
0467   F9                     LD   sp,hl   ; sp = BP
0468   E1                     POP   hl   ; de = end of array, hl = old BP
0469   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
046A   FD 62                  LD   iyh,d   
046C   FD 6B                  LD   iyl,e   
046E   D1                     POP   de   ; pop arg_list (discard)
046F   D1                     POP   de   ; pop first_arg* (discard)
0470   D1                     POP   de   ; pop IP (discard)
0471   ED 5B F0 55            LD   de,(vHeapPtr)   ; de = array[-2]
0475   13                     INC   de   
0476   13                     INC   de   
0477   D5                     PUSH   de   ; return array[0]
0478   22 F0 55               LD   (vHeapPtr),hl   ; move heap* to end of array
047B   ED 4B 00 56            LD   bc,(vTemp1)   ; restore IP
047F   DD E9                  JP   (ix)   
0481                             ; index of an array, based on vDataWidth
0481                             ; array num -- value    ; also sets vPointer to address
0481                HASH:        
0481                ARRAYINDEX:      
0481   E1                     POP   hl   ; hl = index
0482   D1                     POP   de   ; de = array
0483   3A E6 55               LD   a,(vDataWidth)   ; a = data width
0486   3D                     DEC   a   
0487   28 01                  JR   z,arrayIndex1   
0489                ARRAYINDEX0:      
0489   29                     ADD   hl,hl   ; if data width = 2 then double
048A                ARRAYINDEX1:      
048A   19                     ADD   hl,de   ; add addr
048B   22 F4 55               LD   (vPointer),hl   ; store address in setter
048E   16 00                  LD   d,0   
0490   5E                     LD   e,(hl)   
0491   B7                     OR   a   ; check data width again
0492   28 02                  JR   z,arrayIndex2   
0494   23                     INC   hl   
0495   56                     LD   d,(hl)   
0496                ARRAYINDEX2:      
0496   D5                     PUSH   de   
0497   DD E9                  JP   (ix)   
0499                             ; arg_list - parses input (ab:c)
0499                             ; names after the : represent uninitialised locals
0499                             ; return values are the state of the stack after the block ends
0499                             ; format: numLocals totNumArgs argChars...
0499                COLON:       
0499                ARGLIST:      
0499   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049C   2A F0 55               LD   hl,(vHeapPtr)   ; hl = heap*
049F   E5                     PUSH   hl   ; save start of arg_list
04A0   23                     INC   hl   ; skip length fields to start of string
04A1   23                     INC   hl   
04A2   03                     INC   bc   ; point to next char
04A3                ARGLIST1:      
04A3   0A                     LD   a,(bc)   
04A4   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A6   20 03                  JR   nz,arglist1a   
04A8   14                     INC   d   ; non zero value local count acts as flag
04A9   18 10                  JR   arglist3   
04AB                ARGLIST1A:      
04AB   FE 61                  CP   "a"   ; < "a" terminates arg_list
04AD   38 0F                  JR   c,arglist4   
04AF   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B1   30 0B                  JR   nc,arglist4   
04B3                ARGLIST2:      
04B3   77                     LD   (hl),a   
04B4   23                     INC   hl   
04B5   1C                     INC   e   ; increase arg count
04B6   AF                     XOR   a   
04B7   B2                     OR   d   
04B8   28 01                  JR   z,arglist3   
04BA   14                     INC   d   ; if d > 0 increase local count
04BB                ARGLIST3:      
04BB   03                     INC   bc   ; point to next char
04BC   18 E5                  JR   arglist1   
04BE                ARGLIST4:      
04BE   0B                     DEC   bc   
04BF   AF                     XOR   a   
04C0   B2                     OR   d   
04C1   28 01                  JR   z,arglist5   
04C3   15                     DEC   d   ; remove initial inc
04C4                ARGLIST5:      
04C4   23                     INC   hl   
04C5   22 F0 55               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C8   E1                     POP   hl   ; hl = start of arg_list
04C9   E5                     PUSH   hl   ; return start of arg_list
04CA   72                     LD   (hl),d   ; write number of locals at start - 1
04CB   23                     INC   hl   
04CC   73                     LD   (hl),e   ; write number of args + locals at start - 2
04CD   DD E9                  JP   (ix)   
04CF                             ; value _oldValue --            ; uses address in vPointer
04CF                ASSIGN:      
04CF   E1                     POP   hl   ; discard last accessed value
04D0   E1                     POP   hl   ; hl = new value
04D1                ASSIGN0:      
04D1   EB                     EX   de,hl   ; de = new value
04D2                ASSIGNX:      
04D2   2A F4 55               LD   hl,(vPointer)   
04D5   73                     LD   (hl),e   
04D6   3A E6 55               LD   a,(vDataWidth)   
04D9   3D                     DEC   a   ; is it byte?
04DA   28 02                  JR   z,assign1   
04DC   23                     INC   hl   
04DD   72                     LD   (hl),d   
04DE                ASSIGN1:      
04DE   DD E9                  JP   (ix)   
04E0                             ; /ab absolute
04E0                             ; num -- num
04E0                ABSOLUTE:      
04E0   E1                     POP   hl   
04E1   CB 7C                  BIT   7,h   
04E3   C8                     RET   z   
04E4   AF                     XOR   a   
04E5   95                     SUB   l   
04E6   6F                     LD   l,a   
04E7   9F                     SBC   a,a   
04E8   94                     SUB   h   
04E9   67                     LD   h,a   
04EA   E5                     PUSH   hl   
04EB   DD E9                  JP   (ix)   
04ED                             ; /ad addrOf
04ED                             ; char -- addr
04ED                ADDROF:      
04ED   E1                     POP   hl   ; a = char
04EE   7D                     LD   a,l   
04EF   FE 7B                  CP   "z"+1   ; if a > z then exit
04F1   30 19                  JR   nc,addrOf2   
04F3   D6 41                  SUB   "A"   ; a - 65
04F5   38 15                  JR   c,addrOf2   ; if < A then exit
04F7   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
04F9   38 06                  JR   c,addrOf1   
04FB   D6 06                  SUB   "a"-("Z"+1)   
04FD   FE 1A                  CP   "Z"-"A"+1   
04FF   38 0B                  JR   c,addrOf2   ; if < a then exit
0501                ADDROF1:      
0501   87                     ADD   a,a   ; double a
0502   21 00 55               LD   hl,VARS   ; hl = VARS + a
0505   85                     ADD   a,l   
0506   6F                     LD   l,a   
0507   3E 00                  LD   a,0   
0509   8C                     ADC   a,h   
050A   67                     LD   h,a   
050B   E5                     PUSH   hl   
050C                ADDROF2:      
050C   DD E9                  JP   (ix)   
050E                LBRACE:      
050E                BLOCKSTART:      
050E   C5                     PUSH   bc   ; return pointer to first { of block
050F   03                     INC   bc   
0510   16 01                  LD   d,1   ; nesting: count first parenthesis
0512                BLOCKSTART1:      ; Skip to end of definition
0512   0A                     LD   a,(bc)   ; Get the next character
0513   03                     INC   bc   ; Point to next character
0514   FE 21                  CP   " " + 1   ; ignore whitespace
0516   38 FA                  JR   c,blockStart1   
0518   FE 29                  CP   ")"   
051A   28 2D                  JR   z,blockStart4   
051C   FE 7D                  CP   "}"   
051E   28 29                  JR   z,blockStart4   
0520   FE 5D                  CP   "]"   
0522   28 25                  JR   z,blockStart4   
0524   FE 28                  CP   "("   
0526   28 16                  JR   z,blockStart2   
0528   FE 7B                  CP   "{"   
052A   28 12                  JR   z,blockStart2   
052C   FE 5B                  CP   "["   
052E   28 0E                  JR   z,blockStart2   
0530   FE 27                  CP   "'"   
0532   28 0D                  JR   z,blockStart3   
0534   FE 60                  CP   "`"   
0536   28 09                  JR   z,blockStart3   
0538   FE 22                  CP   DQ   
053A   28 05                  JR   z,blockStart3   
053C   18 D4                  JR   blockStart1   
053E                BLOCKSTART2:      
053E   14                     INC   d   
053F   18 D1                  JR   blockStart1   
0541                BLOCKSTART3:      
0541   3E 80                  LD   a,$80   
0543   AA                     XOR   d   
0544   57                     LD   d,a   
0545   20 CB                  JR   nz,blockStart1   
0547   18 03                  JR   blockStart5   
0549                BLOCKSTART4:      
0549   15                     DEC   d   
054A   20 C6                  JR   nz,blockStart1   ; get the next element
054C                BLOCKSTART5:      
054C   60 69                  LD   hl,bc   ; hl = IP
054E   11 1C 56               LD   de,HEAP   ; is IP pointing to object in heap
0551   B7                     OR   a   ; IP - HEAP
0552   ED 52                  SBC   hl,de   
0554   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0556   28 1C                  JR   z,blockStart6   
0558   60 69                  LD   hl,bc   ; hl = IP
055A   D1                     POP   de   ; de = block*
055B   ED 43 00 56            LD   (vTemp1),bc   ; save IP
055F   B7                     OR   a   ; bc = size
0560   ED 52                  SBC   hl,de   
0562   44 4D                  LD   bc,hl   
0564   EB                     EX   de,hl   ; hl = block* de = heap*
0565   ED 5B F0 55            LD   de,(vHeapPtr)   
0569   D5                     PUSH   de   ; return hblock*
056A   ED B0                  LDIR      ; copy size bytes from block* to hblock*
056C   ED 53 F0 55            LD   (vHeapPtr),de   ; heap* += size
0570   ED 4B 00 56            LD   bc,(vTemp1)   ; restore IP
0574                BLOCKSTART6:      
0574   0B                     DEC   bc   ; balanced, exit
0575   DD E9                  JP   (ix)   
0577                RBRACE:      
0577                BLOCKEND:      
0577   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
057A   FD 56 01               LD   d,(iy+1)   
057D   ED 53 00 56            LD   (vTemp1),de   
0581   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0584   FD 56 07               LD   d,(iy+7)   
0587   ED 53 02 56            LD   (vTemp2),de   
058B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
058E   FD 56 03               LD   d,(iy+3)   
0591   EB                     EX   de,hl   
0592   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0595   FD 56 01               LD   d,(iy+1)   
0598   13                     INC   de   ; for carry flag <=
0599   B7                     OR   a   
059A   ED 52                  SBC   hl,de   
059C   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
059E   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
05A0   FD 5D                  LD   e,iyl   
05A2   21 08 00               LD   hl,8   
05A5   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
05A6   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
05A7   18 0C                  JR   blockEnd2   
05A9                BLOCKEND1:      ; same scope
05A9   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
05AC   FD 56 03               LD   d,(iy+3)   
05AF   EB                     EX   de,hl   
05B0   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
05B2   FD 5D                  LD   e,iyl   
05B4   EB                     EX   de,hl   
05B5                BLOCKEND2:      
05B5   44 4D                  LD   bc,hl   ; bc = hl = BP
05B7   B7                     OR   a   ; hl = BP - SP = count
05B8   ED 72                  SBC   hl,sp   
05BA   7D                     LD   a,l   
05BB   B4                     OR   h   
05BC   28 09                  JR   z,blockEnd3   
05BE   C5                     PUSH   bc   ; bc = count, hl = BP
05BF   44 4D                  LD   bc,hl   
05C1   E1                     POP   hl   
05C2   2B                     DEC   hl   ; hl = BP-1
05C3   1B                     DEC   de   ; de = args*-1
05C4   ED B8                  LDDR      
05C6   13                     INC   de   
05C7                BLOCKEND3:      
05C7   EB                     EX   de,hl   ; sp = de = new tos*
05C8   F9                     LD   sp,hl   
05C9   ED 4B 02 56            LD   bc,(vTemp2)   
05CD   FD 2A 00 56            LD   iy,(vTemp1)   
05D1   ED 5B F2 55            LD   de,(vRecur)   ; de = recur vector
05D5   7B                     LD   a,e   ; check for NUL
05D6   B2                     OR   d   
05D7   20 02                  JR   nz,blockEnd4   
05D9   DD E9                  JP   (ix)   
05DB                BLOCKEND4:      
05DB   21 00 00               LD   hl,0   ; clear recur vector
05DE   22 F2 55               LD   (vRecur),hl   
05E1   C3 E0 09               JP   go1   ; execute de
05E4                             ; /br break from loop
05E4                             ; --
05E4                BREAK:       
05E4   E1                     POP   hl   
05E5   7D                     LD   a,l   
05E6   B4                     OR   h   
05E7   28 02                  JR   z,break1   
05E9   DD E9                  JP   (ix)   
05EB                BREAK1:      
05EB   FD 5D                  LD   e,iyl   ; get block* just under stack frame
05ED   FD 54                  LD   d,iyh   
05EF   21 08 00               LD   hl,8   
05F2   19                     ADD   hl,de   
05F3   23                     INC   hl   
05F4   23                     INC   hl   
05F5   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
05F8   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
05FB   C3 77 05               JP   blockEnd   
05FE                TICK:        
05FE                CHAR:        
05FE   21 00 00               LD   hl,0   ; if "" is empty or null
0601                CHAR1:       
0601   03                     INC   bc   ; point to next char
0602   0A                     LD   a,(bc)   
0603   FE 27                  CP   "'"   ; ' is the terminator
0605   28 09                  JR   z,char3   
0607   FE 5C                  CP   $5c   ; \ is the escape
0609   20 02                  JR   nz,char2   
060B   03                     INC   bc   
060C   0A                     LD   a,(bc)   
060D                CHAR2:       
060D   6F                     LD   l,a   
060E   18 F1                  JR   char1   
0610                CHAR3:       
0610   E5                     PUSH   hl   
0611   DD E9                  JP   (ix)   
0613                SLASH:       
0613                COMMAND:      
0613   CD 97 0C               CALL   jumpTable   
0616   2F                     DB   "/"   ; // comment
0617   DE 06                  DW   comment   
0619   61                     DB   "a"   
061A   52 06                  DW   command_a   
061C   62                     DB   "b"   
061D   5E 06                  DW   command_b   
061F   63                     DB   "c"   ; /c chars
0620   D0 06                  DW   chars   
0622   64                     DB   "d"   ; /d decimal
0623   A3 07                  DW   decimal   
0625   66                     DB   "f"   
0626   6A 06                  DW   command_f   
0628   68                     DB   "h"   ; /h hexadecimal
0629   AB 07                  DW   hexadecimal   
062B   69                     DB   "i"   
062C   82 06                  DW   command_i   
062E   6B                     DB   "k"   ; /k key
062F   D6 0A                  DW   key   
0631   6C                     DB   "l"   
0632   8E 06                  DW   command_l   
0634   6D                     DB   "m"   
0635   97 06                  DW   command_m   
0637   6E                     DB   "n"   ; /n numbers
0638   D8 06                  DW   numbers   
063A   6F                     DB   "o"   ; /o output
063B   E8 0A                  DW   output   
063D   70                     DB   "p"   
063E   A0 06                  DW   command_p   
0640   72                     DB   "r"   
0641   AF 06                  DW   command_r   
0643   73                     DB   "s"   ; /s size
0644   46 0C                  DW   size   
0646   74                     DB   "t"   ; /t true
0647   23 09                  DW   true1   
0649   76                     DB   "v"   
064A   BB 06                  DW   command_v   
064C   78                     DB   "x"   ; /x xor
064D   D0 03                  DW   xor   
064F   00                     DB   NUL   
0650   92 07                  DW   div   
0652                COMMAND_A:      
0652   CD 97 0C               CALL   jumpTable   
0655   62                     DB   "b"   ; /ab absolute
0656   E0 04                  DW   absolute   
0658   64                     DB   "d"   ; /ad address of
0659   ED 04                  DW   addrOf   
065B   00                     DB   NUL   
065C   2F 09                  DW   error1   
065E                COMMAND_B:      
065E   CD 97 0C               CALL   jumpTable   
0661   72                     DB   "r"   ; /br break
0662   E4 05                  DW   break   
0664   79                     DB   "y"   ; /by cold boot
0665   5E 0D                  DW   coldStart   
0667   00                     DB   NUL   
0668   2F 09                  DW   error1   
066A                COMMAND_F:      
066A   CD 97 0C               CALL   jumpTable   
066D   65                     DB   "e"   ; /fe forEach
066E   36 09                  DW   forEach   
0670   73                     DB   "s"   ; /fs funcSrc
0671   A4 09                  DW   funcSrc   
0673   31                     DB   "1"   
0674   63 0E                  DW   f1   
0676   32                     DB   "2"   
0677   D2 0E                  DW   f2   
0679   33                     DB   "3"   
067A   36 0F                  DW   f3   
067C   34                     DB   "4"   
067D   46 0F                  DW   f4   
067F   00                     DB   NUL   
0680   29 09                  DW   false1   
0682                COMMAND_I:      
0682   CD 97 0C               CALL   jumpTable   
0685   6E                     DB   "n"   ; /in input
0686   CB 0A                  DW   input   
0688   76                     DB   "v"   ; /iv invert
0689   DB 03                  DW   invert   
068B   00                     DB   NUL   
068C   2F 09                  DW   error1   
068E                COMMAND_L:      
068E   CD 97 0C               CALL   jumpTable   
0691   69                     DB   "i"   ; /li literal
0692   DF 0A                  DW   literal   
0694   00                     DB   NUL   
0695   2F 09                  DW   error1   
0697                COMMAND_M:      
0697   CD 97 0C               CALL   jumpTable   
069A   70                     DB   "p"   ; /mp map
069B   F1 0A                  DW   map   
069D   00                     DB   NUL   
069E   2F 09                  DW   error1   
06A0                COMMAND_P:      
06A0   CD 97 0C               CALL   jumpTable   
06A3   62                     DB   "b"   ; /pb print buffer
06A4   00 0C                  DW   printBuffer   
06A6   63                     DB   "c"   ; /pc print chars
06A7   26 0C                  DW   printChars   
06A9   6B                     DB   "k"   ; /pk print stack
06AA   38 0C                  DW   printStack   
06AC   00                     DB   NUL   
06AD   2F 09                  DW   error1   
06AF                COMMAND_R:      
06AF   CD 97 0C               CALL   jumpTable   
06B2   63                     DB   "c"   ; /rc tail call optimisation
06B3   3A 0C                  DW   recur   
06B5   65                     DB   "e"   ; /re remainder
06B6   40 0C                  DW   remain   
06B8   00                     DB   NUL   
06B9   2F 09                  DW   error1   
06BB                COMMAND_V:      
06BB   CD 97 0C               CALL   jumpTable   
06BE   62                     DB   "b"   
06BF   5D 0C                  DW   varBufPtr   
06C1   68                     DB   "h"   
06C2   66 0C                  DW   varHeapPtr   
06C4   74                     DB   "t"   
06C5   6F 0C                  DW   varTIBPtr   
06C7   42                     DB   "B"   
06C8   4E 0C                  DW   constBufStart   
06CA   54                     DB   "T"   
06CB   58 0C                  DW   constTIBStart   
06CD   00                     DB   NUL   
06CE   2F 09                  DW   error1   
06D0                CHARS:       
06D0   21 01 00               LD   hl,1   
06D3                CHARS1:      
06D3   22 E6 55               LD   (vDataWidth),hl   
06D6   DD E9                  JP   (ix)   
06D8                NUMBERS:      
06D8   21 02 00               LD   hl,2   
06DB   C3 D3 06               JP   chars1   
06DE                COMMENT:      
06DE   03                     INC   bc   ; point to next char
06DF   0A                     LD   a,(bc)   
06E0   FE 20                  CP   " "   ; terminate on any char less than SP
06E2   30 FA                  JR   nc,comment   
06E4   0B                     DEC   bc   
06E5   DD E9                  JP   (ix)   
06E7                             ; ";" createFunc
06E7                             ; arg_list* block* -- func*
06E7                SEMICOLON:      
06E7                CREATEFUNC:      
06E7   ED 43 00 56            LD   (vTemp1),bc   ; save IP
06EB   E1                     POP   hl   ; hl = block*
06EC   22 02 56               LD   (vTemp2),hl   ; save block*
06EF   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
06F2   FD 56 05               LD   d,(iy+5)   
06F5   7B                     LD   a,e   ; if arg_list == null then make a func
06F6   B2                     OR   d   
06F7   20 09                  JR   nz,createFunc0   
06F9   21 00 00               LD   hl,0   ; partial_array = null
06FC   ED 5B F0 55            LD   de,(vHeapPtr)   ; de = compile*
0700   18 65                  JR   createFunc5   
0702                CREATEFUNC0:      
0702   E1                     POP   hl   ; hl = inner_arg_list*
0703   E5                     PUSH   hl   ; save inner_arg_list
0704   ED 5B F0 55            LD   de,(vHeapPtr)   ; de = compile*
0708   7E                     LD   a,(hl)   ; compile inner_num_locals
0709   4F                     LD   c,a   ; b = inner_num_locals
070A   12                     LD   (de),a   
070B   23                     INC   hl   
070C   13                     INC   de   
070D   7E                     LD   a,(hl)   ; compile inner_length
070E   12                     LD   (de),a   
070F   91                     SUB   c   ; a = inner_num args
0710   23                     INC   hl   
0711   13                     INC   de   
0712   B7                     OR   a   ; compile args if inner_length > 0
0713   28 05                  JR   z,createFunc1   
0715   4F                     LD   c,a   ; bc = a
0716   06 00                  LD   b,0   
0718   ED B0                  LDIR      
071A                CREATEFUNC1:      
071A   EB                     EX   de,hl   ; hl = outer_arg_list
071B   FD 5E 04               LD   e,(iy+4)   
071E   FD 56 05               LD   d,(iy+5)   
0721   EB                     EX   de,hl   
0722   23                     INC   hl   ; a = outer_length
0723   7E                     LD   a,(hl)   
0724   23                     INC   hl   
0725   B7                     OR   a   
0726   28 05                  JR   z,createFunc2   
0728   4F                     LD   c,a   
0729   06 00                  LD   b,0   
072B   ED B0                  LDIR      ; append outer_args
072D                CREATEFUNC2:      ; a = outer_length
072D   47                     LD   b,a   ; b = a = outer_length
072E   2A F0 55               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0731   23                     INC   hl   
0732   7E                     LD   a,(hl)   ; add outer_length to new length
0733   80                     ADD   a,b   
0734   77                     LD   (hl),a   
0735   2B                     DEC   hl   
0736   78                     LD   a,b   ; save outer_length in a'
0737   08                     EX   af,af'   
0738   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0739   7E                     LD   a,(hl)   ; c = a = inner_num_locals
073A   B7                     OR   a   
073B   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
073D   4F                     LD   c,a   ; c = inner_num_locals
073E   06 00                  LD   b,0   ; bc = inner_num_locals
0740   23                     INC   hl   ; a = inner_length
0741   7E                     LD   a,(hl)   
0742   91                     SUB   c   ; a = inner_num_args
0743   23                     INC   hl   ; hl = inner_arg_chars
0744   85                     ADD   a,l   ; hl += a
0745   6F                     LD   l,a   
0746   3E 00                  LD   a,0   
0748   84                     ADD   a,h   
0749   67                     LD   h,a   
074A   ED B0                  LDIR      ; append inner_locals
074C                CREATEFUNC2A:      
074C   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
074D   12                     LD   (de),a   ; compile partial_array length field
074E   13                     INC   de   
074F   AF                     XOR   a   
0750   12                     LD   (de),a   
0751   13                     INC   de   
0752   D5                     PUSH   de   ; push partial_array*
0753   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0754   FD 5E 02               LD   e,(iy+2)   
0757   FD 56 03               LD   d,(iy+3)   
075A   EB                     EX   de,hl   
075B                CREATEFUNC3:      
075B   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
075C   4E                     LD   c,(hl)   
075D   2B                     DEC   hl   
075E   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
075F   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0760   13                     INC   de   
0761   79                     LD   a,c   
0762   12                     LD   (de),a   
0763   13                     INC   de   
0764   10 F5                  DJNZ   createFunc3   ; b = outer_length
0766                CREATEFUNC4:      
0766   E1                     POP   hl   ; hl = partial_array*
0767                CREATEFUNC5:      
0767   C1                     POP   bc   ; bc = new_arg_list*
0768   D5                     PUSH   de   ; return new func*
0769   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
076A   73                     LD   (hl),e   ; compile partial_array* to func
076B   23                     INC   hl   
076C   72                     LD   (hl),d   
076D   23                     INC   hl   
076E   ED 5B 02 56            LD   de,(vTemp2)   ; de = block*
0772   73                     LD   (hl),e   ; compile block* to func
0773   23                     INC   hl   
0774   72                     LD   (hl),d   
0775   23                     INC   hl   
0776   71                     LD   (hl),c   ; compile new_arg_list* to func
0777   23                     INC   hl   
0778   70                     LD   (hl),b   
0779   23                     INC   hl   
077A   22 F0 55               LD   (vHeapPtr),hl   ; bump heap ptr
077D   ED 4B 00 56            LD   bc,(vTemp1)   ; restore IP
0781   DD E9                  JP   (ix)   
0783                             ; , discard stack item
0783                             ; x y -- x
0783                COMMA:       
0783                DISCARD:      
0783   FD 54                  LD   d,iyh   ; limit this to SP <= BP
0785   FD 5D                  LD   e,iyl   
0787   EB                     EX   de,hl   
0788   B7                     OR   a   
0789   ED 72                  SBC   hl,sp   
078B   CB 7C                  BIT   7,h   
078D   20 01                  JR   nz,discard1   
078F   E1                     POP   hl   
0790                DISCARD1:      
0790   DD E9                  JP   (ix)   
0792                DIV:         
0792   D1                     POP   de   
0793   E1                     POP   hl   
0794   C5                     PUSH   bc   ; preserve the IP
0795   44 4D                  LD   bc,hl   
0797   CD EC 08               CALL   divide   
079A   EB                     EX   de,hl   
079B   ED 53 F6 55            LD   (vRemain),de   
079F   C1                     POP   bc   
07A0   C3 9B 03               JP   add3   
07A3                DECIMAL:      
07A3   21 0A 00               LD   hl,10   
07A6                DECIMAL1:      
07A6   22 E8 55               LD   (vNumBase),hl   
07A9   DD E9                  JP   (ix)   
07AB                HEXADECIMAL:      
07AB   21 10 00               LD   hl,16   
07AE   C3 A6 07               JP   decimal1   
07B1                DOT:         
07B1   CD 97 0C               CALL   jumpTable   
07B4   61                     DB   "a"   ; .a print array
07B5   C3 07                  DW   bufferArray   
07B7   63                     DB   "c"   ; .c print char
07B8   CB 08                  DW   bufferChar   
07BA   73                     DB   "s"   ; .s print string
07BB   B1 08                  DW   bufferString   
07BD   78                     DB   "x"   ; .x print x chars
07BE   D0 08                  DW   bufferXChars   
07C0   00                     DB   NUL   ; .  print number
07C1   0C 08                  DW   bufferNumber   
07C3                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
07C3                BUFFERARRAY:      
07C3   CD DF 09               CALL   go   
07C6   00 00                  DW   NUL   
07C8   D1 07                  DW   bufferArrayM_1609S1094   
07CA   CC 07                  DW   $+2   
07CC   02                     DB   2   
07CD   03 61 62 63            .PSTR   "abc"   
07D1                BUFFERARRAYM_1609S1094:      
07D1   7B 22 5B 20 22 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 22 5D 22 2E 73 7D 00 00 .CSTR   "{",DQ,"[ ",DQ,".s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ",DQ,"]",DQ,".s}",0   
080C                             ; /bd buffer decimal
080C                             ; value --
080C                BUFFERNUMBER:      
080C   3A E8 55               LD   a,(vNumBase)   
080F   FE 10                  CP   16   
0811   28 66                  JR   z,bufferHex   ; else falls through
0813                             ; /bd buffer decimal
0813                             ; value --
0813                BUFFERDEC:      
0813   ED 5B EC 55            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0817   D9                     EXX      
0818   E1                     POP   hl   ; hl = value
0819   CD 2D 08               CALL   bufferDec0   
081C   D9                     EXX      ; de = buffer*' bc = IP
081D   3E 20                  LD   a," "   ; append space to buffer
081F   12                     LD   (de),a   
0820   1C                     INC   e   ; buffer*++, wraparound
0821   CC 80 0C               CALL   z,flushBuffer   
0824   2A EC 55               LD   hl,(vBufPtr)   ; hl = buffer*
0827   ED 53 EC 55            LD   (vBufPtr),de   ; update buffer* with buffer*'
082B   DD E9                  JP   (ix)   
082D                             ; hl = value
082D                             ; de' = buffer*
082D                             ; a, bc, de, hl destroyed
082D                BUFFERDEC0:      
082D   CB 7C                  BIT   7,h   
082F   28 0C                  JR   z,bufferDec1   
0831   D9                     EXX      
0832   3E 2D                  LD   a,"-"   
0834   12                     LD   (de),a   
0835   13                     INC   de   
0836   D9                     EXX      
0837   AF                     XOR   a   
0838   95                     SUB   l   
0839   6F                     LD   l,a   
083A   9F                     SBC   a,a   
083B   94                     SUB   h   
083C   67                     LD   h,a   
083D                BUFFERDEC1:      
083D   0E 00                  LD   c,0   ; leading zeros flag = false
083F   11 F0 D8               LD   de,-10000   
0842   CD 5D 08               CALL   bufferDec2   
0845   11 18 FC               LD   de,-1000   
0848   CD 5D 08               CALL   bufferDec2   
084B   11 9C FF               LD   de,-100   
084E   CD 5D 08               CALL   bufferDec2   
0851   1E F6                  LD   e,-10   
0853   CD 5D 08               CALL   bufferDec2   
0856   0C                     INC   c   ; flag = true for at least digit
0857   1E FF                  LD   e,-1   
0859   CD 5D 08               CALL   bufferDec2   
085C   C9                     RET      
085D                BUFFERDEC2:      
085D   06 2F                  LD   b,"0"-1   
085F                BUFFERDEC3:      
085F   04                     INC   b   
0860   19                     ADD   hl,de   
0861   38 FC                  JR   c,bufferDec3   
0863   ED 52                  SBC   hl,de   
0865   3E 30                  LD   a,"0"   
0867   B8                     CP   b   
0868   20 05                  JR   nz,bufferDec4   
086A   AF                     XOR   a   
086B   B1                     OR   c   
086C   C8                     RET   z   
086D   18 01                  JR   bufferDec5   
086F                BUFFERDEC4:      
086F   0C                     INC   c   
0870                BUFFERDEC5:      
0870   78                     LD   a,b   
0871   D9                     EXX      
0872   12                     LD   (de),a   
0873   1C                     INC   e   
0874   CC 80 0C               CALL   z,flushBuffer   
0877   D9                     EXX      
0878   C9                     RET      
0879                             ; /bh buffer hex
0879                             ; value --
0879                BUFFERHEX:      
0879   E1                     POP   hl   ; hl = value
087A   ED 5B EC 55            LD   de,(vBufPtr)   
087E   3E 24                  LD   a,"$"   ; # prefix
0880   12                     LD   (de),a   
0881   1C                     INC   e   ; buffer*++, wraparound
0882   CC 80 0C               CALL   z,flushBuffer   
0885   7C                     LD   a,h   
0886   CD 9A 08               CALL   bufferHex1   
0889   7D                     LD   a,l   
088A   CD 9A 08               CALL   bufferHex1   
088D   3E 20                  LD   a," "   ; append space to buffer
088F   12                     LD   (de),a   
0890   1C                     INC   e   ; buffer*++, wraparound
0891   CC 80 0C               CALL   z,flushBuffer   
0894   ED 53 EC 55            LD   (vBufPtr),de   
0898   DD E9                  JP   (ix)   
089A                BUFFERHEX1:      
089A   F5                     PUSH   af   
089B   1F                     RRA      
089C   1F                     RRA      
089D   1F                     RRA      
089E   1F                     RRA      
089F   CD A3 08               CALL   bufferHex2   
08A2   F1                     POP   af   
08A3                BUFFERHEX2:      
08A3   E6 0F                  AND   0x0F   
08A5   C6 90                  ADD   a,0x90   
08A7   27                     DAA      
08A8   CE 40                  ADC   a,0x40   
08AA   27                     DAA      
08AB   12                     LD   (de),a   
08AC   1C                     INC   e   ; buffer*++, wraparound
08AD   CC 80 0C               CALL   z,flushBuffer   
08B0   C9                     RET      
08B1                             ; /bs buffered string
08B1                             ; string* --
08B1                BUFFERSTRING:      
08B1   E1                     POP   hl   ; hl = string*
08B2   ED 5B EC 55            LD   de,(vBufPtr)   ; de = buffer*
08B6   18 06                  JR   bufferString1   
08B8                BUFFERSTRING0:      
08B8   12                     LD   (de),a   ; a -> buffer*
08B9   1C                     INC   e   ; buffer*++, wraparound
08BA   CC 80 0C               CALL   z,flushBuffer   
08BD   23                     INC   hl   
08BE                BUFFERSTRING1:      
08BE   7E                     LD   a,(hl)   ; a <- string*
08BF   B7                     OR   a   ; if NUL exit loop
08C0   20 F6                  JR   nz,bufferString0   
08C2   2A EC 55               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
08C5   ED 53 EC 55            LD   (vBufPtr),de   ; save buffer*' in pointer
08C9   DD E9                  JP   (ix)   
08CB                             ; /bc buffer char
08CB                             ; char --
08CB                BUFFERCHAR:      
08CB   21 01 00               LD   hl,1   
08CE   18 01                  JR   bufferXChars0   
08D0                             ; /bx buffered x chars
08D0                             ; char length --
08D0                BUFFERXCHARS:      
08D0   E1                     POP   hl   ; hl = length
08D1                BUFFERXCHARS0:      
08D1   D1                     POP   de   ; a' = char
08D2   7B                     LD   a,e   
08D3   08                     EX   af,af'   
08D4   ED 5B EC 55            LD   de,(vBufPtr)   ; de = buffer*
08D8   18 08                  JR   bufferXChars2   
08DA                BUFFERXCHARS1:      
08DA   08                     EX   af,af'   
08DB   12                     LD   (de),a   
08DC   08                     EX   af,af'   
08DD   1C                     INC   e   ; buffer*++, wraparound
08DE   CC 80 0C               CALL   z,flushBuffer   
08E1   2B                     DEC   hl   
08E2                BUFFERXCHARS2:      
08E2   7D                     LD   a,l   
08E3   B4                     OR   h   
08E4   20 F4                  JR   nz,bufferXChars1   
08E6   ED 53 EC 55            LD   (vBufPtr),de   ; save buffer*'
08EA   DD E9                  JP   (ix)   
08EC                             ; division subroutine.
08EC                             ; bc: divisor, de: dividend, hl: remainder
08EC                DIVIDE:      
08EC   21 00 00               LD   hl,0   ; zero the remainder
08EF   3E 10                  LD   a,16   ; loop counter
08F1                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
08F1   CB 21                  SLA   c   
08F3   CB 10                  RL   b   
08F5   ED 6A                  ADC   hl,hl   
08F7   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
08F9   38 03                  JR   c,divide2   
08FB   0C                     INC   c   
08FC   18 01                  JR   divide3   
08FE                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
08FE   19                     ADD   hl,de   
08FF                DIVIDE3:      
08FF   3D                     DEC   a   
0900   20 EF                  JR   nz,divide1   
0902   50 59                  LD   de,bc   ; result from bc to de
0904   C9                     RET      
0905                             ; hl = value1, de = value2
0905                             ; hl = result
0905                EQUALS:      
0905   B7                     OR   a   ; reset the carry flag
0906   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0908   28 19                  JR   z,true1   
090A   C3 29 09               JP   false1   
090D                NOTEQUALS:      
090D   B7                     OR   a   ; reset the carry flag
090E   ED 52                  SBC   hl,de   
0910   C2 23 09               JP   nz,true1   
0913   C3 29 09               JP   false1   
0916                             ; hl = value1 de = value2
0916                             ; hl = result
0916                LESSTHANEQ:      
0916   B7                     OR   a   
0917   ED 52                  SBC   hl,de   
0919   18 05                  JR   lessthan1   
091B                             ; hl = value1 de = value2
091B                             ; hl = result
091B                LESSTHAN:      
091B   B7                     OR   a   
091C   ED 52                  SBC   hl,de   
091E   28 09                  JR   z,false1   
0920                LESSTHAN1:      
0920   FA 29 09               JP   m,false1   
0923                TRUE1:       
0923   21 FF FF               LD   hl,TRUE   
0926   E5                     PUSH   hl   
0927   DD E9                  JP   (ix)   
0929                NULL1:       
0929                FALSE1:      
0929   21 00 00               LD   hl,FALSE   
092C   E5                     PUSH   hl   
092D   DD E9                  JP   (ix)   
092F                ERROR1:      
092F   21 01 00               LD   hl,1   ; error 1: unknown command
0932   E5                     PUSH   hl   
0933   C3 1B 0E               JP   error   
0936                             ; /fe forEach
0936                             ; :o -- :s
0936                          ;*Macro unroll: FUNC forEach, 0, "p"                       ; :p proc
0936                FOREACH:      ; :p proc
0936   CD DF 09               CALL   go   
0939   00 00                  DW   NUL   
093B   42 09                  DW   forEachM_1831S1334   
093D   3F 09                  DW   $+2   
093F   00                     DB   0   
0940   01 70                  .PSTR   "p"   
0942                FOREACHM_1831S1334:      
0942   7B                     DB   "{"   
0943   3A 73 3A 54 7B         DB   ":s:T{"   ; :s source
0948   5B 30 5D 25 54 3D      DB   "[0]%T="   
094E   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0956   3A 64 74 7B            DB   ":dt{"   
095A   7B 20 30 25 74 3D 3D 2F 62 72 20 25 64 20 25 54 30 23 3D 20 7D DB   "{ 0%t==/br %d %T0#= }"   ; 0: store talkback
096F   7B 20 31 25 74 3D 3D 2F 62 72 20 25 64 20 25 70 5E 20 7D DB   "{ 1%t==/br %d %p^ }"   ; 1: send data to proc
0982   7B 20 32 25 74 21 3D 2F 62 72 20 30 20 31 20 25 54 30 23 5E 20 7D DB   "{ 2%t!=/br 0 1 %T0#^ }"   ; 0 or 1: get next data item
0998   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   ; init source
09A0   7D 3B                  DB   "};"   
09A2   7D                     DB   "}"   
09A3   00                     DB   0   
09A4                             ; ; /fs funcSrc
09A4                             ; ; func -- src
09A4                             ; FUNC funcSrc, 1, "f"                      ; :f func or block
09A4                             ; db "{"
09A4                             ; db    ":kt{"                              ; :kt sink, type
09A4                             ; db         "0%t==/br"                     ; break if t != 0
09A4                             ; db         ":dt{"
09A4                             ; db             "1%t==/br %f^ 1 %k^"       ; if t == 1 send data to sink
09A4                             ; db         "}; 0 %k^"                      ; init sink
09A4                             ; db     "};"
09A4                             ; db "}"
09A4                             ; db 0
09A4                             ; ; /fs funcSrc
09A4                             ; ; func -- src
09A4                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
09A4                FUNCSRC:      ; :f func or block
09A4   CD DF 09               CALL   go   
09A7   00 00                  DW   NUL   
09A9   B0 09                  DW   funcSrcM_1858S1363   
09AB   AD 09                  DW   $+2   
09AD   00                     DB   0   
09AE   01 66                  .PSTR   "f"   
09B0                FUNCSRCM_1858S1363:      
09B0   7B                     DB   "{"   
09B1   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
09B5   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
09BD   3A 64 74 7B            DB   ":dt{"   
09C1   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
09D3   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
09DB   7D 3B                  DB   "};"   
09DD   7D                     DB   "}"   
09DE   00                     DB   0   
09DF                             ; execute a block of code which ends with }
09DF                             ; creates a root scope if BP == stack
09DF                             ; else uses outer scope
09DF                CARET:       
09DF                GO:          
09DF   D1                     POP   de   ; de = block*
09E0                GO1:         
09E0   7B                     LD   a,e   ; if block* == null, exit
09E1   B2                     OR   d   
09E2   20 02                  JR   nz,go2   
09E4   DD E9                  JP   (ix)   
09E6                GO2:         
09E6   1A                     LD   a,(de)   
09E7   FE 7B                  CP   "{"   
09E9   28 06                  JR   z,goBlock   
09EB   FE 28                  CP   "("   
09ED   C2 24 0A               JP   nz,goFunc   
09F0   D5                     PUSH   de   ; push de just before stack frame
09F1                GOBLOCK:      
09F1   ED 53 00 56            LD   (vTemp1),de   ; save de
09F5   21 00 53               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
09F8   FD 54                  LD   d,iyh   
09FA   FD 5D                  LD   e,iyl   
09FC   B7                     OR   a   ; if stack* == BP then this is the root_scope
09FD   ED 52                  SBC   hl,de   
09FF   ED 5B 00 56            LD   de,(vTemp1)   ; restore de
0A03   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0A04   B4                     OR   h   
0A05   3E 00                  LD   a,0   
0A07   28 6A                  JR   z,goFunc8   
0A09   C5                     PUSH   bc   ; push IP
0A0A   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A0D   FD 46 05               LD   b,(iy+5)   
0A10   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A13   FD 66 03               LD   h,(iy+3)   
0A16                GOBLOCK2:      
0A16   C5                     PUSH   bc   ; arg_list*
0A17   E5                     PUSH   hl   ; first_arg*
0A18   FD E5                  PUSH   iy   ; push BP
0A1A   FD 21 00 00            LD   iy,0   ; BP = SP
0A1E   FD 39                  ADD   iy,sp   
0A20                GOBLOCK3:      
0A20   42 4B                  LD   bc,de   ; bc = de = block*-1
0A22   DD E9                  JP   (ix)   
0A24                GOFUNC:      ; execute func
0A24   EB                     EX   de,hl   ; hl = func*
0A25   5E                     LD   e,(hl)   ; de = partial_array*
0A26   23                     INC   hl   
0A27   56                     LD   d,(hl)   
0A28   23                     INC   hl   
0A29   7B                     LD   a,e   ; if partial_array* == null skip
0A2A   B2                     OR   d   
0A2B   28 21                  JR   z,goFunc3   
0A2D   ED 43 00 56            LD   (vTemp1),bc   
0A31   22 02 56               LD   (vTemp2),hl   ; save bc,hl
0A34   EB                     EX   de,hl   ; hl = partial_array*
0A35   2B                     DEC   hl   ; bc = count
0A36   46                     LD   b,(hl)   
0A37   2B                     DEC   hl   
0A38   4E                     LD   c,(hl)   
0A39   23                     INC   hl   ; hl = array data*
0A3A   23                     INC   hl   
0A3B   18 06                  JR   goFunc2   ; push each item on stack
0A3D                GOFUNC1:      
0A3D   5E                     LD   e,(hl)   ; de = partial item
0A3E   23                     INC   hl   
0A3F   56                     LD   d,(hl)   
0A40   23                     INC   hl   
0A41   D5                     PUSH   de   ; push on stack
0A42   0B                     DEC   bc   
0A43                GOFUNC2:      
0A43   79                     LD   a,c   ; if count != 0 then loop
0A44   B0                     OR   b   
0A45   20 F6                  JR   nz,goFunc1   
0A47   ED 4B 00 56            LD   bc,(vTemp1)   ; restore bc
0A4B   2A 02 56               LD   hl,(vTemp2)   ; restore hl
0A4E                GOFUNC3:      
0A4E   5E                     LD   e,(hl)   ; de = block*
0A4F   23                     INC   hl   
0A50   56                     LD   d,(hl)   
0A51   23                     INC   hl   
0A52   ED 53 00 56            LD   (vTemp1),de   ; save block*
0A56   5E                     LD   e,(hl)   ; de = arg_list*
0A57   23                     INC   hl   
0A58   56                     LD   d,(hl)   
0A59   23                     INC   hl   
0A5A   EB                     EX   de,hl   ; hl = arg_list*
0A5B   ED 5B 00 56            LD   de,(vTemp1)   ; restore de = block*
0A5F   7D                     LD   a,l   ; if arg_list* == null a = 0
0A60   B4                     OR   h   
0A61   20 03                  JR   nz,goFunc4   
0A63   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A64   18 0D                  JR   goFunc8   
0A66                GOFUNC4:      ; allocate locals
0A66   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A67   18 03                  JR   goFunc6   
0A69                GOFUNC5:      ; loop
0A69   3B                     DEC   sp   
0A6A   3B                     DEC   sp   
0A6B   3D                     DEC   a   
0A6C                GOFUNC6:      
0A6C   B7                     OR   a   
0A6D   20 FA                  JR   nz,goFunc5   ; end loop
0A6F                GOFUNC7:      
0A6F   23                     INC   hl   ; a = num_args* x 2
0A70   7E                     LD   a,(hl)   
0A71   2B                     DEC   hl   
0A72   87                     ADD   a,a   ; a *= 2
0A73                GOFUNC8:      
0A73   C5                     PUSH   bc   ; push IP
0A74   44 4D                  LD   bc,hl   
0A76   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A79   85                     ADD   a,l   
0A7A   6F                     LD   l,a   
0A7B   39                     ADD   hl,sp   
0A7C   18 98                  JR   goBlock2   
0A7E                DOLLAR:      
0A7E                HEXNUM:      
0A7E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A81                HEXNUM1:      
0A81   03                     INC   bc   
0A82   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A83   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A85   28 02                  JR   z,hexnum2   ; no a decimal
0A87   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A89                HEXNUM2:      
0A89   D6 30                  SUB   $30   ; form decimal digit
0A8B   DA 76 0B               JP   c,num2   
0A8E   FE 10                  CP   $0F+1   
0A90   D2 76 0B               JP   nc,num2   
0A93   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A94   29                     ADD   hl,hl   ; 4X
0A95   29                     ADD   hl,hl   ; 8X
0A96   29                     ADD   hl,hl   ; 16X
0A97   85                     ADD   a,l   ; add into bottom of hl
0A98   6F                     LD   l,a   
0A99   18 E6                  JR   hexnum1   
0A9B                UPCASE:      
0A9B   0A                     LD   a,(bc)   ; a = identifier char
0A9C   D6 41                  SUB   "A"   ; "A" = 0
0A9E   18 05                  JR   ident1   
0AA0                LOWCASE:      
0AA0   0A                     LD   a,(bc)   
0AA1   D6 61                  SUB   "a"   
0AA3   C6 1A                  ADD   a,26   
0AA5                IDENT1:      
0AA5   87                     ADD   a,a   ; l = a * 2
0AA6   6F                     LD   l,a   
0AA7   26 55                  LD   h,msb(vars)   
0AA9   22 F4 55               LD   (vPointer),hl   ; store address in setter
0AAC   5E                     LD   e,(hl)   
0AAD   23                     INC   hl   
0AAE   56                     LD   d,(hl)   
0AAF   D5                     PUSH   de   
0AB0   DD E9                  JP   (ix)   
0AB2                             ; if
0AB2                             ; condition then -- value
0AB2                QUESTION:      
0AB2                IF:          
0AB2   03                     INC   bc   
0AB3   0A                     LD   a,(bc)   
0AB4   FE 3F                  CP   "?"   
0AB6   28 06                  JR   z,ifte   
0AB8   0B                     DEC   bc   
0AB9   11 00 00               LD   de,NUL   ; NUL pointer for else
0ABC   18 01                  JR   ifte1   
0ABE                             ; ifte
0ABE                             ; condition then else -- value
0ABE                IFTE:        
0ABE   D1                     POP   de   ; de = else
0ABF                IFTE1:       
0ABF   E1                     POP   hl   ; hl = then
0AC0   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AC1   7C                     LD   a,h   
0AC2   B5                     OR   l   
0AC3   E1                     POP   hl   ; hl = then
0AC4   CA E0 09               JP   z,go1   ; if z de = else
0AC7   EB                     EX   de,hl   ; condition = false, de = then
0AC8   C3 E0 09               JP   go1   
0ACB                             ; Z80 port input
0ACB                             ; port -- value
0ACB                INPUT:       
0ACB   E1                     POP   hl   
0ACC   59                     LD   e,c   ; save IP
0ACD   4D                     LD   c,l   
0ACE   ED 68                  IN   l,(c)   
0AD0   26 00                  LD   h,0   
0AD2   4B                     LD   c,e   ; restore IP
0AD3   E5                     PUSH   hl   
0AD4   DD E9                  JP   (ix)   
0AD6                KEY:         
0AD6   CD 81 00               CALL   getchar   
0AD9   26 00                  LD   h,0   
0ADB   6F                     LD   l,a   
0ADC   E5                     PUSH   hl   
0ADD   DD E9                  JP   (ix)   
0ADF                             ; /li literal
0ADF                             ; low level operation
0ADF                             ; reads the next two bytes and
0ADF                             ; pushes a word on the stack
0ADF                             ; -- value
0ADF                LITERAL:      
0ADF   03                     INC   bc   
0AE0   0A                     LD   a,(bc)   
0AE1   6F                     LD   l,a   
0AE2   03                     INC   bc   
0AE3   0A                     LD   a,(bc)   
0AE4   67                     LD   h,a   
0AE5   E5                     PUSH   hl   
0AE6   DD E9                  JP   (ix)   
0AE8                             ; Z80 port output
0AE8                             ; value port --
0AE8                OUTPUT:      
0AE8   E1                     POP   hl   
0AE9   59                     LD   e,c   ; save IP
0AEA   4D                     LD   c,l   
0AEB   E1                     POP   hl   
0AEC   ED 69                  OUT   (c),l   
0AEE   4B                     LD   c,e   ; restore IP
0AEF   DD E9                  JP   (ix)   
0AF1                             ; /mp map
0AF1                             ; func -- :s00bbOm1r
0AF1                          ;*Macro unroll: FUNC map, 0, "f"                            ; :f func
0AF1                MAP:         ; :f func
0AF1   CD DF 09               CALL   go   
0AF4   00 00                  DW   NUL   
0AF6   FD 0A                  DW   mapM_2090S1606   
0AF8   FA 0A                  DW   $+2   
0AFA   00                     DB   0   
0AFB   01 66                  .PSTR   "f"   
0AFD                MAPM_2090S1606:      
0AFD   7B                     DB   "{"   
0AFE   3A 73 7B               DB   ":s{"   ; :s source
0B01   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0B05   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0B0D   3A 64 74 7B            DB   ":dt{"   
0B11   31 25 74 3D 3D 7B 25 64 20 25 66 5E 7D 7B 25 64 7D 3F 3F DB   "1%t=={%d %f^}{%d}??"   ; if t == 1 pass data through func else raw
0B24   25 74 20 25 6B 5E      DB   "%t %k^"   ; send data to sink
0B2A   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   ; init source
0B32   7D 3B                  DB   "};"   
0B34   7D 3B                  DB   "};"   
0B36   7D                     DB   "}"   
0B37   00                     DB   0   
0B38                STAR:        
0B38                MUL:         
0B38   D1                     POP   de   ; get first value
0B39   E1                     POP   hl   
0B3A                MUL2:        
0B3A   C5                     PUSH   bc   ; Preserve the IP
0B3B   44 4D                  LD   bc,hl   ; bc = 2nd value
0B3D   21 00 00               LD   hl,0   
0B40   3E 10                  LD   a,16   
0B42                MUL3:        
0B42   29                     ADD   hl,hl   
0B43   CB 13                  RL   e   
0B45   CB 12                  RL   d   
0B47   30 04                  JR   nc,$+6   
0B49   09                     ADD   hl,bc   
0B4A   30 01                  JR   nc,$+3   
0B4C   13                     INC   de   
0B4D   3D                     DEC   a   
0B4E   20 F2                  JR   nz,mul3   
0B50   C1                     POP   bc   ; Restore the IP
0B51   C3 9B 03               JP   add3   
0B54                NUM:         
0B54   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B57   0A                     LD   a,(bc)   ; Get numeral or -
0B58   FE 2D                  CP   "-"   
0B5A   20 01                  JR   nz,num0   
0B5C   03                     INC   bc   ; move to next char, no flags affected
0B5D                NUM0:        
0B5D   08                     EX   af,af'   ; save zero flag = 0 for later
0B5E                NUM1:        
0B5E   0A                     LD   a,(bc)   ; read digit
0B5F   D6 30                  SUB   "0"   ; less than 0?
0B61   38 13                  JR   c,num2   ; not a digit, exit loop
0B63   FE 0A                  CP   10   ; greater that 9?
0B65   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B67   03                     INC   bc   ; inc IP
0B68   54 5D                  LD   de,hl   ; multiply hl * 10
0B6A   29                     ADD   hl,hl   
0B6B   29                     ADD   hl,hl   
0B6C   19                     ADD   hl,de   
0B6D   29                     ADD   hl,hl   
0B6E   85                     ADD   a,l   ; add digit in a to hl
0B6F   6F                     LD   l,a   
0B70   3E 00                  LD   a,0   
0B72   8C                     ADC   a,h   
0B73   67                     LD   h,a   
0B74   18 E8                  JR   num1   
0B76                NUM2:        
0B76   0B                     DEC   bc   
0B77   08                     EX   af,af'   ; restore zero flag
0B78   20 07                  JR   nz,num3   
0B7A   EB                     EX   de,hl   ; negate the value of hl
0B7B   21 00 00               LD   hl,0   
0B7E   B7                     OR   a   ; jump to sub2
0B7F   ED 52                  SBC   hl,de   
0B81                NUM3:        
0B81   E5                     PUSH   hl   ; Put the number on the stack
0B82   DD E9                  JP   (ix)   ; and process the next character
0B84                             ; |> pipeStream
0B84                             ; source sink -- source
0B84                             ; connects a sink with a source
0B84                PIPESTREAM:      
0B84   E1                     POP   hl   ; hl = sink
0B85   D1                     POP   de   ; de = src
0B86   E5                     PUSH   hl   ; push sink
0B87   21 00 00               LD   hl,0   ; push type = greet
0B8A   E5                     PUSH   hl   
0B8B   C3 E0 09               JP   go1   ; go to address in de
0B8E                RPAREN:      
0B8E   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B91   FD 46 09               LD   b,(iy+9)   
0B94   DD E9                  JP   (ix)   
0B96                             ; shiftLeft
0B96                             ; value count -- value2          shift left count places
0B96                SHIFTLEFT:      
0B96   50 59                  LD   de,bc   ; save IP
0B98   C1                     POP   bc   ; bc = count
0B99   41                     LD   b,c   ; b = loop counter
0B9A   E1                     POP   hl   
0B9B   04                     INC   b   ; test for counter=0 case
0B9C   18 01                  JR   shiftLeft2   
0B9E                SHIFTLEFT1:      
0B9E   29                     ADD   hl,hl   ; left shift hl
0B9F                SHIFTLEFT2:      
0B9F   10 FD                  DJNZ   shiftLeft1   
0BA1   E5                     PUSH   hl   
0BA2   42 4B                  LD   bc,de   ; restore IP
0BA4   DD E9                  JP   (ix)   
0BA6                             ; shiftRight
0BA6                             ; value count -- value2          shift left count places
0BA6                SHIFTRIGHT:      
0BA6   50 59                  LD   de,bc   ; save IP
0BA8   C1                     POP   bc   ; bc = count
0BA9   41                     LD   b,c   ; b = loop counter
0BAA   E1                     POP   hl   
0BAB   04                     INC   b   ; test for counter=0 case
0BAC   18 04                  JR   shiftRight2   
0BAE                SHIFTRIGHT1:      
0BAE   CB 3C                  SRL   h   ; right shift hl
0BB0   CB 1D                  RR   l   
0BB2                SHIFTRIGHT2:      
0BB2   10 FA                  DJNZ   shiftRight1   
0BB4   E5                     PUSH   hl   
0BB5   42 4B                  LD   bc,de   ; restore IP
0BB7   DD E9                  JP   (ix)   
0BB9                             ; string
0BB9                             ; -- ptr                        ; points to start of string chars,
0BB9                             ; length is stored at start - 2 bytes
0BB9                DQUOTE:      
0BB9                STRING:      
0BB9   2A F0 55               LD   hl,(vHeapPtr)   ; hl = heap*
0BBC   23                     INC   hl   ; skip length field to start
0BBD   23                     INC   hl   
0BBE   E5                     PUSH   hl   ; save start of string
0BBF   03                     INC   bc   ; point to next char
0BC0   18 03                  JR   string2   
0BC2                STRING1:      
0BC2   77                     LD   (hl),a   
0BC3   23                     INC   hl   ; increase count
0BC4   03                     INC   bc   ; point to next char
0BC5                STRING2:      
0BC5   0A                     LD   a,(bc)   
0BC6   FE 22                  CP   DQ   ; " is the string terminator
0BC8   28 04                  JR   z,string3   
0BCA   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0BCC   20 F4                  JR   nz,string1   
0BCE                STRING3:      
0BCE   AF                     XOR   a   ; write NUL to terminate string
0BCF   77                     LD   (hl),a   ; hl = end of string
0BD0   23                     INC   hl   
0BD1   22 F0 55               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BD4   2B                     DEC   hl   ; hl = end of string without terminator
0BD5   D1                     POP   de   ; de = start of string
0BD6   D5                     PUSH   de   ; return start of string
0BD7   B7                     OR   a   ; hl = length bytes, de = start of string
0BD8   ED 52                  SBC   hl,de   
0BDA   EB                     EX   de,hl   
0BDB   2B                     DEC   hl   ; write length bytes to length field at start - 2
0BDC   72                     LD   (hl),d   
0BDD   2B                     DEC   hl   
0BDE   73                     LD   (hl),e   
0BDF   DD E9                  JP   (ix)   
0BE1                MINUS:       ; negative sign or subtract
0BE1   03                     INC   bc   ; check if sign of a number
0BE2   0A                     LD   a,(bc)   
0BE3   0B                     DEC   bc   
0BE4   FE 30                  CP   "0"   
0BE6   38 05                  JR   c,sub   
0BE8   FE 3A                  CP   "9"+1   
0BEA   DA 44 03               JP   c,num_   
0BED                SUB:         ; Subtract the value 2nd on stack from top of stack
0BED   03                     INC   bc   
0BEE   FE 2D                  CP   "-"   
0BF0   20 05                  JR   nz,sub1   
0BF2   E1                     POP   hl   
0BF3   2B                     DEC   hl   
0BF4   C3 D1 04               JP   assign0   
0BF7                SUB1:        
0BF7   0B                     DEC   bc   
0BF8   D1                     POP   de   
0BF9   E1                     POP   hl   
0BFA   B7                     OR   a   
0BFB   ED 52                  SBC   hl,de   
0BFD   C3 9B 03               JP   add3   
0C00                             ; /pb printBuffer
0C00                             ; --
0C00                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0C00                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0C00                PRINTBUFFER:      
0C00   CD DF 09               CALL   go   
0C03   00 00                  DW   NUL   
0C05   0C 0C                  DW   printBufferM_2270S1796   
0C07   09 0C                  DW   $+2   
0C09   00                     DB   0   
0C0A   01 61                  .PSTR   "a"   
0C0C                PRINTBUFFERM_2270S1796:      
0C0C   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0C26                             ; printChars
0C26                             ; char* len --
0C26                PRINTCHARS:      
0C26   E1                     POP   hl   ; hl = count
0C27   D1                     POP   de   ; de = char*
0C28   CD 33 0C               CALL   printChars2   
0C2B   DD E9                  JP   (ix)   
0C2D                PRINTCHARS1:      
0C2D   1A                     LD   a,(de)   ; print char at char*
0C2E   CD 85 00               CALL   putchar   
0C31   13                     INC   de   ; char*++
0C32   2B                     DEC   hl   ; count--
0C33                PRINTCHARS2:      
0C33   7D                     LD   a,l   ; count == 0?
0C34   B4                     OR   h   
0C35   C8                     RET   z   
0C36   18 F5                  JR   printChars1   ; if not loop
0C38                             ; /pk print stack
0C38                             ; --
0C38                PRINTSTACK:      
0C38                             ;     ld (vTemp1),bc
0C38                             ;     call printStr
0C38                             ;     .cstr "=> "
0C38                             ;     ld hl,STACK
0C38                             ;     sbc hl,sp
0C38                             ;     srl h
0C38                             ;     rr l
0C38                             ;     ld bc,hl
0C38                             ;     ld hl,STACK
0C38                             ;     jr printStack2
0C38                             ; printStack1:
0C38                             ;     dec bc
0C38                             ;     dec hl
0C38                             ;     ld d,(hl)
0C38                             ;     dec hl
0C38                             ;     ld e,(hl)
0C38                             ;     ex de,hl
0C38                             ;     call prthex
0C38                             ;     ex de,hl
0C38                             ;     ld a," "
0C38                             ;     call putchar
0C38                             ; printStack2:
0C38                             ;     ld a,c
0C38                             ;     or b
0C38                             ;     jr nz,printStack1
0C38                             ;     call prompt
0C38                             ;     ld bc,(vTemp1)
0C38   DD E9                  JP   (ix)   
0C3A                RECUR:       
0C3A   E1                     POP   hl   
0C3B   22 F2 55               LD   (vRecur),hl   
0C3E   DD E9                  JP   (ix)   
0C40                REMAIN:      
0C40   2A F6 55               LD   hl,(vRemain)   
0C43   E5                     PUSH   hl   
0C44   DD E9                  JP   (ix)   
0C46                SIZE:        
0C46   E1                     POP   hl   
0C47   2B                     DEC   hl   ; msb size
0C48   56                     LD   d,(hl)   
0C49   2B                     DEC   hl   ; lsb size
0C4A   5E                     LD   e,(hl)   
0C4B   D5                     PUSH   de   
0C4C   DD E9                  JP   (ix)   
0C4E                CONSTBUFSTART:      
0C4E   11 00 54               LD   de,BUF   
0C51   18 28                  JR   constant   
0C53                CONSTHEAPSTART:      
0C53   11 1C 56               LD   de,HEAP   
0C56   18 23                  JR   constant   
0C58                CONSTTIBSTART:      
0C58   11 00 53               LD   de,TIB   
0C5B   18 1E                  JR   constant   
0C5D                VARBUFPTR:      
0C5D   ED 5B EC 55            LD   de,(vBufPtr)   
0C61   21 EC 55               LD   hl,vBufPtr   
0C64   18 12                  JR   variable   
0C66                VARHEAPPTR:      
0C66   ED 5B F0 55            LD   de,(vHeapPtr)   
0C6A   21 F0 55               LD   hl,vHeapPtr   
0C6D   18 09                  JR   variable   
0C6F                VARTIBPTR:      
0C6F   ED 5B EA 55            LD   de,(vTIBPtr)   
0C73   21 EA 55               LD   hl,vTIBPtr   
0C76   18 00                  JR   variable   
0C78                VARIABLE:      
0C78   22 F4 55               LD   (vPointer),hl   
0C7B                CONSTANT:      
0C7B   D5                     PUSH   de   
0C7C   DD E9                  JP   (ix)   
0C7E                             ; 
0C7E                FILTER:      
0C7E                SCAN:        
0C7E   DD E9                  JP   (ix)   
0C80                             ;*******************************************************************
0C80                             ; general routines
0C80                             ;*******************************************************************
0C80                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0C80                FLUSHBUFFER:      
0C80   F5                     PUSH   af   
0C81   D5                     PUSH   de   
0C82   E5                     PUSH   hl   
0C83   2A EC 55               LD   hl,(vBufPtr)   
0C86   11 00 54               LD   de,BUF   
0C89   ED 53 EC 55            LD   (vBufPtr),de   
0C8D   B7                     OR   a   
0C8E   ED 52                  SBC   hl,de   
0C90   CD 33 0C               CALL   printChars2   
0C93   E1                     POP   hl   
0C94   D1                     POP   de   
0C95   F1                     POP   af   
0C96   C9                     RET      
0C97                             ; followed by a table
0C97                             ; db char
0C97                             ; dw addr
0C97                             ; the final item must have char == NUL
0C97                JUMPTABLE:      
0C97   03                     INC   bc   
0C98   E1                     POP   hl   
0C99                JUMPTABLE0:      
0C99   AF                     XOR   a   
0C9A   BE                     CP   (hl)   
0C9B   28 09                  JR   z,jumpTable1   
0C9D   0A                     LD   a,(bc)   
0C9E   BE                     CP   (hl)   
0C9F   28 06                  JR   z,jumpTable2   
0CA1   23                     INC   hl   
0CA2   23                     INC   hl   
0CA3   23                     INC   hl   
0CA4   18 F3                  JR   jumpTable0   
0CA6                JUMPTABLE1:      
0CA6   0B                     DEC   bc   
0CA7                JUMPTABLE2:      
0CA7   23                     INC   hl   
0CA8   5E                     LD   e,(hl)   
0CA9   23                     INC   hl   
0CAA   56                     LD   d,(hl)   
0CAB   EB                     EX   de,hl   
0CAC   E9                     JP   (hl)   
0CAD                PRTSTR0:      
0CAD   CD 85 00               CALL   putchar   
0CB0   23                     INC   hl   
0CB1                PRTSTR:      
0CB1   7E                     LD   a,(hl)   
0CB2   B7                     OR   a   
0CB3   20 F8                  JR   nz,prtstr0   
0CB5   C9                     RET      
0CB6                             ; **************************************************************************
0CB6                             ; calculate nesting value
0CB6                             ; a is char to be tested,
0CB6                             ; e is the nesting value (initially 0)
0CB6                             ; e is increased by ( and [
0CB6                             ; e is decreased by ) and ]
0CB6                             ; e has its bit 7 toggled by `
0CB6                             ; limited to 127 levels
0CB6                             ; **************************************************************************
0CB6                NESTING:      
0CB6   FE 22                  CP   DQ   ; quote char
0CB8   28 06                  JR   z,nesting0   
0CBA   FE 60                  CP   "`"   ; quote char
0CBC   28 02                  JR   z,nesting0   
0CBE   18 0A                  JR   nesting1   
0CC0                NESTING0:      
0CC0   CB 7B                  BIT   7,e   
0CC2   28 03                  JR   z,nesting1a   
0CC4   CB BB                  RES   7,e   
0CC6   C9                     RET      
0CC7                NESTING1A:      
0CC7   CB FB                  SET   7,e   
0CC9   C9                     RET      
0CCA                NESTING1:      
0CCA   CB 7B                  BIT   7,e   
0CCC   C0                     RET   nz   
0CCD   FE 7B                  CP   "{"   
0CCF   28 08                  JR   z,nesting2   
0CD1   FE 5B                  CP   "["   
0CD3   28 04                  JR   z,nesting2   
0CD5   FE 28                  CP   "("   
0CD7   20 02                  JR   nz,nesting3   
0CD9                NESTING2:      
0CD9   1C                     INC   e   
0CDA   C9                     RET      
0CDB                NESTING3:      
0CDB   FE 7D                  CP   "}"   
0CDD   28 07                  JR   z,nesting4   
0CDF   FE 5D                  CP   "]"   
0CE1   28 03                  JR   z,nesting4   
0CE3   FE 29                  CP   ")"   
0CE5   C0                     RET   nz   
0CE6                NESTING4:      
0CE6   1D                     DEC   e   
0CE7   C9                     RET      
0CE8                PROMPT:      
0CE8   CD F8 0C               CALL   printStr   
0CEB   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0CF0   C9                     RET      
0CF1                CRLF:        
0CF1   CD F8 0C               CALL   printStr   
0CF4   0D 0A 00               .CSTR   "\r\n"   
0CF7   C9                     RET      
0CF8                             ; prints a null teminated string
0CF8                             ; the string should be immediately following the call
0CF8                PRINTSTR:      
0CF8   E3                     EX   (sp),hl   ; swap			
0CF9   CD B1 0C               CALL   prtstr   
0CFC   23                     INC   hl   ; inc past NUL
0CFD   E3                     EX   (sp),hl   ; put it back	
0CFE   C9                     RET      
0CFF                TITLESTR:      
0CFF   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0D13                INIT:        
0D13   21 FF 0C               LD   hl,titleStr   
0D16   11 08 56               LD   de,titleBuf   
0D19   06 14                  LD   b,20   
0D1B                INIT1:       
0D1B   1A                     LD   a,(de)   
0D1C   BE                     CP   (hl)   
0D1D   20 17                  JR   nz,coldBoot0   
0D1F   13                     INC   de   
0D20   23                     INC   hl   
0D21   10 F8                  DJNZ   init1   
0D23                WARMINIT:      
0D23   ED 4B F8 55            LD   bc,(vSavedIP)   ; restore IP
0D27   ED 7B FA 55            LD   sp,(vSavedSP)   ; restore SP
0D2B   DD 2A FC 55            LD   ix,(vSavedNext)   ; restore Next
0D2F   FD 2A FE 55            LD   iy,(vSavedBP)   ; restore BP
0D33   C3 6D 0D               JP   start1   
0D36                COLDBOOT0:      
0D36   21 FF 0C               LD   hl,titleStr   ; copy titleStr to titleBuf
0D39   11 08 56               LD   de,titleBuf   
0D3C   06 14                  LD   b,20   
0D3E   ED B0                  LDIR      
0D40                COLDINIT:      
0D40   21 80 01               LD   hl,isysVars   
0D43   11 E6 55               LD   de,sysVars   
0D46   01 10 00               LD   bc,8 * 2   
0D49   ED B0                  LDIR      
0D4B   21 00 55               LD   hl,vars   ; 52 vars LO HI
0D4E   06 34                  LD   b,26*2   
0D50   AF                     XOR   a   
0D51                COLDBOOT1:      
0D51   77                     LD   (hl),a   
0D52   23                     INC   hl   
0D53   10 FC                  DJNZ   coldBoot1   
0D55   DD 2A EE 55            LD   ix,(vNext)   
0D59   FD 21 00 53            LD   iy,STACK   
0D5D   C9                     RET      
0D5E                COLDSTART:      
0D5E   31 00 53               LD   sp,STACK   
0D61   CD 36 0D               CALL   coldBoot0   
0D64   C3 6D 0D               JP   start1   
0D67                START:       
0D67   31 00 53               LD   sp,STACK   ; start Monty
0D6A   CD 13 0D               CALL   init   ; setups
0D6D                START1:      
0D6D   21 08 56               LD   hl,titleBuf   
0D70   CD B1 0C               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0D73                INTERPRET:      
0D73   CD 80 0C               CALL   flushBuffer   
0D76   CD E8 0C               CALL   prompt   
0D79   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0D7C   21 00 53               LD   hl,TIB   
0D7F   22 EA 55               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0D82                INTERPRET2:      ; calculate nesting
0D82   1E 00                  LD   e,0   ; initilize nesting value
0D84   C5                     PUSH   bc   ; save offset into TIB,
0D85                             ; bc is also the count of chars in TIB
0D85   21 00 53               LD   hl,TIB   ; hl is start of TIB
0D88   18 0B                  JR   interpret4   
0D8A                INTERPRET3:      
0D8A   3E 33                  LD   a,"3"   
0D8C   CD 85 00               CALL   putchar   
0D8F   7E                     LD   a,(hl)   ; a = char in TIB
0D90   23                     INC   hl   ; inc pointer into TIB
0D91   0B                     DEC   bc   ; dec count of chars in TIB
0D92   CD B6 0C               CALL   nesting   ; update nesting value
0D95                INTERPRET4:      
0D95   79                     LD   a,c   ; is count zero?
0D96   B0                     OR   b   
0D97   20 F1                  JR   nz,interpret3   ; if not loop
0D99   C1                     POP   bc   ; restore offset into TIB
0D9A                INTERPRET5:      
0D9A   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0D9D   FE 20                  CP   $20   ; compare to space
0D9F   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0DA1   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0DA3                             ; ???? NEEDED?
0DA3   28 3B                  JR   z,interpret8   
0DA5   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0DA7   28 24                  JR   z,interpret7   ; if anything else its macro/control
0DA9   FE 05                  CP   CTRL_E   
0DAB   CA 3E 0E               JP   z,edit_   
0DAE   FE 08                  CP   CTRL_H   
0DB0   CA 2E 0E               JP   z,backSpace_   
0DB3   FE 0A                  CP   CTRL_J   
0DB5   CA 56 0E               JP   z,reEdit_   
0DB8   FE 13                  CP   CTRL_S   
0DBA   CA 59 0E               JP   z,printStack_   
0DBD                             ; DB     lsb(edit_)       ; ENQ ^E  5
0DBD                             ; DB     lsb(reedit_)     ; LF  ^J 10
0DBD                             ; DB     lsb(list_)       ; FF  ^L 12
0DBD                             ; DB     lsb(printStack_) ; DLE ^P 16
0DBD                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0DBD                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0DBD                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0DBD                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0DBD                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0DBD                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0DBD                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0DBD                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0DBD                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0DBD                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0DBD                INTERPRET5A:      
0DBD                             ; ld (vTIBPtr),bc
0DBD                             ; ld bc,(vTIBPtr)
0DBD   18 C3                  JR   interpret2   
0DBF                INTERPRET6:      
0DBF   21 00 53               LD   hl,TIB   
0DC2   09                     ADD   hl,bc   
0DC3   77                     LD   (hl),a   ; store the character in textbuf
0DC4   03                     INC   bc   
0DC5   CD 85 00               CALL   putchar   ; echo character to screen
0DC8   CD B6 0C               CALL   nesting   
0DCB   18 CD                  JR   interpret5   ; wait for next character
0DCD                INTERPRET7:      
0DCD   21 00 53               LD   hl,TIB   
0DD0   09                     ADD   hl,bc   
0DD1   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0DD3   23                     INC   hl   
0DD4   36 0A                  LD   (hl),"\n"   
0DD6   23                     INC   hl   
0DD7   03                     INC   bc   
0DD8   03                     INC   bc   
0DD9   CD F1 0C               CALL   crlf   ; echo character to screen
0DDC   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0DDD   B7                     OR   a   
0DDE   20 BA                  JR   nz,interpret5   
0DE0                INTERPRET8:      
0DE0   21 00 53               LD   hl,TIB   
0DE3   09                     ADD   hl,bc   
0DE4   22 EA 55               LD   (vTIBPtr),hl   
0DE7   01 00 53               LD   bc,TIB   
0DEA   ED 43 F8 55            LD   (vSavedIP),bc   ; save IP
0DEE   ED 73 FA 55            LD   (vSavedSP),sp   ; save SP
0DF2   DD 22 FC 55            LD   (vSavedNext),ix   ; save Next
0DF6   FD 22 FE 55            LD   (vSavedBP),iy   ; save BP
0DFA   0B                     DEC   bc   
0DFB                NEXT:        
0DFB   03                     INC   bc   ; Increment the IP
0DFC   0A                     LD   a,(bc)   ; Get the next character and dispatch
0DFD   FE 20                  CP   " "   ; whitespace?
0DFF   28 FA                  JR   z,next   ; space? ignore
0E01   38 09                  JR   c,next1   
0E03   D6 20                  SUB   " "   
0E05   6F                     LD   l,a   ; index into table
0E06   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0E08   6E                     LD   l,(hl)   ; get low jump address
0E09   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0E0B   E9                     JP   (hl)   ; Jump to routine
0E0C                NEXT1:       
0E0C   FE 00                  CP   NUL   ; end of input string?
0E0E   28 03                  JR   z,exit   
0E10   C3 73 0D               JP   interpret   ; no, other whitespace, macros?
0E13                EXIT:        
0E13   03                     INC   bc   
0E14   60 69                  LD   hl,bc   
0E16   E9                     JP   (hl)   
0E17                RUN:         
0E17   C1                     POP   bc   
0E18   0B                     DEC   bc   
0E19   DD E9                  JP   (ix)   
0E1B                ERROR:       
0E1B   CD 17 0E               CALL   run   
0E1E   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQ,"Error ",DQ,".s .",0   
0E2B   C3 73 0D               JP   interpret   
0E2E                BACKSPACE_:      
0E2E   79                     LD   a,c   
0E2F   B0                     OR   b   
0E30   CA 82 0D               JP   z,interpret2   
0E33   0B                     DEC   bc   
0E34   CD F8 0C               CALL   printStr   
0E37   08 20 08 00            .CSTR   "\b \b"   
0E3B   C3 82 0D               JP   interpret2   
0E3E                             ; edit
0E3E                EDIT_:       
0E3E   CD 17 0E               CALL   run   
0E41   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQ,"var?",DQ,".s /k/ad .h",0   
0E53   C3 73 0D               JP   interpret   
0E56                REEDIT_:      
0E56   C3 73 0D               JP   interpret   
0E59                PRINTSTACK_:      
0E59   CD 17 0E               CALL   run   
0E5C   2F 70 6B 00            .CSTR   "/pk"   
0E60   C3 73 0D               JP   interpret   
0E63                             ; editDef:
0E63                             ;     pop hl                      ; pop ret address
0E63                             ;     ex (sp),hl                  ; swap with TOS
0E63                             ;     push hl                     ; dup TOS
0E63                             ;     ld a,l                      ; a = ident
0E63                             ;     ld de,TIB                   ; de = start of TIB
0E63                             ;     ld (vTIBPtr),de             ; update TIB*
0E63                             ;     push ix                     ; save NEXT
0E63                             ;     ld ix,editDef0              ; NEXT = editDef0
0E63                             ;     jp lookupRef                ; convert letter into address
0E63                             ; editDef0:
0E63                             ;     ld e,(hl)                   ; de = (hl++)
0E63                             ;     inc hl
0E63                             ;     ld d,(hl)
0E63                             ;     ld a,d                      ; de == 0 ?
0E63                             ;     or e
0E63                             ;     jr z,editDef4
0E63                             ;     ld ix,editDef3              ; NEXT = editDef3
0E63                             ;     ex de,hl
0E63                             ;     ld a,(hl)
0E63                             ;     cp "{"
0E63                             ;     jr nz,editDef1
0E63                             ;     jp editBlock0               ; convert letter into address
0E63                             ; editDef1:
0E63                             ;     cp "("
0E63                             ;     jr nz,editDef2
0E63                             ;     jp editBlock0               ; convert letter into address
0E63                             ; editDef2:
0E63                             ;     jp editFunc
0E63                             ; editDef3:
0E63                             ;     ld a," "                    ; write assign
0E63                             ;     call writeChar
0E63                             ;     pop hl                      ; a = ident
0E63                             ;     ld a,l
0E63                             ;     call writeChar
0E63                             ;     ld a,"="                    ; write assign
0E63                             ;     call writeChar
0E63                             ;     ld ix,editDef4              ; NEXT = editDef4
0E63                             ;     jp printTIB
0E63                             ; editDef4:
0E63                             ;     pop ix                      ; restore NEXT
0E63                             ;     jp (ix)
0E63                             ; writeChar:
0E63                             ;     ld de,(vTIBPtr)             ; de = TIB*
0E63                             ;     ld (de),a                   ; write ident
0E63                             ;     inc de
0E63                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0E63                             ;     ret
0E63                             ; ; printTIB
0E63                             ; printTIB:
0E63                             ;     ld hl,(vTIBPtr)
0E63                             ;     ld de,TIB
0E63                             ;     or a
0E63                             ;     sbc hl,de
0E63                             ;     jp printTIB2
0E63                             ; printTIB1:
0E63                             ;     ld a,(de)
0E63                             ;     call putchar
0E63                             ; printTIB2:
0E63                             ;     ld a,l
0E63                             ;     or h
0E63                             ;     jr nz,printTIB1
0E63                             ;     jp (ix)
0E63                             ; editBlock:
0E63                             ;     pop hl                      ; hl = block*
0E63                             ; editBlock0:
0E63                             ;     push ix                     ; save next
0E63                             ;     push hl                     ; push block*
0E63                             ;     push hl                     ; push block*
0E63                             ;     ld ix,(editBlock2)
0E63                             ;     jp blockLength
0E63                             ; editBlock1:
0E63                             ;     pop hl                      ; bc = length, (sp) = IP
0E63                             ;     pop de                      ; de = block*
0E63                             ;     ld a,l
0E63                             ;     or h
0E63                             ;     jr z,editBlock2
0E63                             ;     push bc
0E63                             ;     ld bc,hl
0E63                             ;     ex de,hl                    ; hl = block*
0E63                             ;     ld de,(vTIBPtr)              ; de = TIB*
0E63                             ;     ldir                        ; copy block to TIB
0E63                             ;     ld (vTIBPtr),de              ; save TIB*
0E63                             ;     pop bc
0E63                             ; editBlock2:
0E63                             ;     pop ix                      ; restore next
0E63                             ;     jp (ix)
0E63                             ; editFunc:
0E63                             ;     jp (ix)
0E63                             ; editArray:
0E63                             ;     jp (ix)
0E63                             ; editArglist:
0E63                             ;     jp (ix)
0E63                             ; ; blockLength
0E63                             ; ; addr1 -- length
0E63                             ; blockLength:
0E63                             ;     pop hl                      ; block*
0E63                             ;     push hl                     ; save block*
0E63                             ;     inc hl                      ; skip first char
0E63                             ;     ld d,1                      ; increase nesting
0E63                             ; blockLength1:                   ; Skip to end of definition
0E63                             ;     ld a,(hl)                   ; Get the next character
0E63                             ;     inc hl                      ; Point to next character
0E63                             ;     cp " " + 1                  ; ignore whitespace
0E63                             ;     jr c,blockLength1
0E63                             ;     cp ")"
0E63                             ;     jr z,blockLength4
0E63                             ;     cp "}"
0E63                             ;     jr z,blockLength4
0E63                             ;     cp "]"
0E63                             ;     jr z,blockLength4
0E63                             ;     cp "("
0E63                             ;     jr z,blockLength2
0E63                             ;     cp "{"
0E63                             ;     jr z,blockLength2
0E63                             ;     cp "["
0E63                             ;     jr z,blockLength2
0E63                             ;     cp "'"
0E63                             ;     jr z,blockLength3
0E63                             ;     cp "`"
0E63                             ;     jr z,blockLength3
0E63                             ;     cp DQ
0E63                             ;     jr z,blockLength3
0E63                             ;     jr blockLength1
0E63                             ; blockLength2:
0E63                             ;     inc d
0E63                             ;     jr blockLength1
0E63                             ; blockLength4:
0E63                             ;     dec d
0E63                             ;     jr nz, blockLength1         ; get the next element
0E63                             ; blockLength3:
0E63                             ;     ld a,$80
0E63                             ;     xor d
0E63                             ;     ld d,a
0E63                             ;     jr nz, blockLength1
0E63                             ;     pop hl                      ; hl = block*
0E63                             ;     or a
0E63                             ;     sbc hl,de
0E63                             ;     push hl
0E63                             ;     jp (ix)
0E63                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0E63                             ; \a start of stack \#3 depth \b base \$ prompt
0E63                             ; DW dStack               ; a vS0 start of datastack			
0E63                             ; DW FALSE                ; b vBase16
0E63                             ; DW 0                    ; c vTIBPtr an offset to the tib
0E63                             ; DW 0                    ; d
0E63                             ; DW 65                   ; e vLastDef "A" last command u defined
0E63                             ; DW 0                    ; f
0E63                             ; DW page6                ; g 256 bytes limits
0E63                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0E63                          ;*Macro unroll: FUNC f1, 2, "besIA"                         ; range source
0E63                F1:          ; range source
0E63   CD DF 09               CALL   go   
0E66   00 00                  DW   NUL   
0E68   73 0E                  DW   f1M_2816S12   
0E6A   6C 0E                  DW   $+2   
0E6C   02                     DB   2   
0E6D   05 62 65 73 49 41      .PSTR   "besIA"   
0E73                F1M_2816S12:      
0E73   7B                     DB   "{"   
0E74   5B 25 62 5D 20 25 49 3D DB   "[%b] %I="   ; init mutable I to b
0E7C   3A 6B 74 7B            DB   ":kt{"   
0E80   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0E88   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data
0E8C   25 49 30 23 20 25 41 3D DB   "%I0# %A="   
0E94   25 73 20 25 49 30 23 20 2B 20 25 49 30 23 3D DB   "%s %I0# + %I0#="   ; inc value of I by s
0EA3                             ; db              "%s %I0# +="                ; inc value of I by s
0EA3   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
0EAB   25 41 20 25 65 20 3C   DB   "%A %e <"   ; cond: in range?
0EB2   7B 25 41 20 31 7D 7B 30 20 32 7D 20 3F 3F 20 25 6B 2F 72 63 DB   "{%A 1}{0 2} ?? %k/rc"   ; ifte args to send to sink,
0EC6                             ; note: /rc recur
0EC6   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0ECE   7D 3B                  DB   "};"   
0ED0   7D                     DB   "}"   
0ED1   00                     DB   0   
0ED2                          ;*Macro unroll: FUNC f2, 1, "spT"                           ; forEach
0ED2                F2:          ; forEach
0ED2   CD DF 09               CALL   go   
0ED5   00 00                  DW   NUL   
0ED7   E0 0E                  DW   f2M_2833S30   
0ED9   DB 0E                  DW   $+2   
0EDB   01                     DB   1   
0EDC   03 73 70 54            .PSTR   "spT"   
0EE0                F2M_2833S30:      
0EE0   7B                     DB   "{"   
0EE1   5B 30 5D 25 54 3D      DB   "[0]%T="   
0EE7   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data
0EEB   7B 20 30 25 74 3D 3D 2F 62 72 20 25 64 20 25 54 30 23 3D 20 7D 5E DB   "{ 0%t==/br %d %T0#= }^"   ; 0: store talkback
0F01   7B 20 31 25 74 3D 3D 2F 62 72 20 25 64 20 25 70 5E 20 7D 5E DB   "{ 1%t==/br %d %p^ }^"   ; 1: send data to proc
0F15   7B 20 32 25 74 21 3D 2F 62 72 20 30 20 31 20 25 54 30 23 5E 20 7D 5E DB   "{ 2%t!=/br 0 1 %T0#^ }^"   ; 0 or 1: get next data item
0F2C   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0F34   7D                     DB   "}"   
0F35   00                     DB   0   
0F36                          ;*Macro unroll: FUNC f3, 0, "dt"                            ; sink
0F36                F3:          ; sink
0F36   CD DF 09               CALL   go   
0F39   00 00                  DW   NUL   
0F3B   43 0F                  DW   f3M_2843S41   
0F3D   3F 0F                  DW   $+2   
0F3F   00                     DB   0   
0F40   02 64 74               .PSTR   "dt"   
0F43                F3M_2843S41:      
0F43   7B                     DB   "{"   
0F44   7D                     DB   "}"   
0F45   00                     DB   0   
0F46                          ;*Macro unroll: FUNC f4, 0, "dt"                            ; sink
0F46                F4:          ; sink
0F46   CD DF 09               CALL   go   
0F49   00 00                  DW   NUL   
0F4B   53 0F                  DW   f4M_2847S46   
0F4D   4F 0F                  DW   $+2   
0F4F   00                     DB   0   
0F50   02 64 74               .PSTR   "dt"   
0F53                F4M_2847S46:      
0F53   7B                     DB   "{"   
0F54   7D                     DB   "}"   
0F55   00                     DB   0   
0F56                          ALIGN   $100   
1000                TESTSSTART:      
1000                          ;*Macro unroll:  test "0 10 1 /f1 :a{%a.}; /f2 `end`.s", 0
1000   31 00 53               LD   SP,STACK   
1003   CD 40 0D               CALL   coldInit   
1006   CD 56 51               CALL   execStr   
1009   30 20 31 30 20 31 20 2F 66 31 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 32 20 60 65 6E 64 60 2E 73 00 DB   "0 10 1 /f1 :a{%a.}; /f2 `end`.s",0   
1029   CD 80 0C               CALL   flushBuffer   
102C   E1                     POP   HL   
102D   E5                     PUSH   HL   
102E   11 00 00               LD   DE,0   
1031   B7                     OR   A   
1032   ED 52                  SBC   HL,DE   
1034   7D                     LD   A,L   
1035   B4                     OR   H   
1036   CA B0 10               JP   Z,expectM_2853S54   
1039   CD F8 0C               CALL   printStr   
103C   43 6F 64 65 3A 20 30 20 31 30 20 31 20 2F 66 31 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 32 20 60 65 6E 64 60 2E 73 00 .CSTR   "Code: ","0 10 1 /f1 :a{%a.}; /f2 `end`.s"   
1062   CD F8 0C               CALL   printStr   
1065   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1074   21 00 00               LD   hl,0   
1077   E5                     PUSH   hl   
1078   E5                     PUSH   hl   
1079   CD 17 0E               CALL   run   
107C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1084   CD 80 0C               CALL   flushBuffer   
1087   CD F8 0C               CALL   printStr   
108A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1097   E1                     POP   hl   
1098   E5                     PUSH   hl   
1099   E5                     PUSH   hl   
109A   CD 17 0E               CALL   run   
109D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10AC   CD 80 0C               CALL   flushBuffer   
10AF   76                     HALT      
10B0                EXPECTM_2853S54:      
10B0   E1                     POP   HL   
10B1   CD F8 0C               CALL   printStr   
10B4   44 6F 6E 65 21 00      .CSTR   "Done!"   
10BA   76                     HALT      
10BB                             ; 
10BB                          ;*Macro unroll:  test "/f", false
10BB   31 00 53               LD   SP,STACK   
10BE   CD 40 0D               CALL   coldInit   
10C1   CD 56 51               CALL   execStr   
10C4   2F 66 00               DB   "/f",0   
10C7   CD 80 0C               CALL   flushBuffer   
10CA   E1                     POP   HL   
10CB   E5                     PUSH   HL   
10CC   11 00 00               LD   DE,false   
10CF   B7                     OR   A   
10D0   ED 52                  SBC   HL,DE   
10D2   7D                     LD   A,L   
10D3   B4                     OR   H   
10D4   CA 31 11               JP   Z,expectM_2858S62   
10D7   CD F8 0C               CALL   printStr   
10DA   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
10E3   CD F8 0C               CALL   printStr   
10E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10F5   21 00 00               LD   hl,false   
10F8   E5                     PUSH   hl   
10F9   E5                     PUSH   hl   
10FA   CD 17 0E               CALL   run   
10FD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1105   CD 80 0C               CALL   flushBuffer   
1108   CD F8 0C               CALL   printStr   
110B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1118   E1                     POP   hl   
1119   E5                     PUSH   hl   
111A   E5                     PUSH   hl   
111B   CD 17 0E               CALL   run   
111E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
112D   CD 80 0C               CALL   flushBuffer   
1130   76                     HALT      
1131                EXPECTM_2858S62:      
1131   E1                     POP   HL   
1132                          ;*Macro unroll:  test "/t", true
1132   31 00 53               LD   SP,STACK   
1135   CD 40 0D               CALL   coldInit   
1138   CD 56 51               CALL   execStr   
113B   2F 74 00               DB   "/t",0   
113E   CD 80 0C               CALL   flushBuffer   
1141   E1                     POP   HL   
1142   E5                     PUSH   HL   
1143   11 FF FF               LD   DE,true   
1146   B7                     OR   A   
1147   ED 52                  SBC   HL,DE   
1149   7D                     LD   A,L   
114A   B4                     OR   H   
114B   CA A8 11               JP   Z,expectM_2859S63   
114E   CD F8 0C               CALL   printStr   
1151   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
115A   CD F8 0C               CALL   printStr   
115D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
116C   21 FF FF               LD   hl,true   
116F   E5                     PUSH   hl   
1170   E5                     PUSH   hl   
1171   CD 17 0E               CALL   run   
1174   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
117C   CD 80 0C               CALL   flushBuffer   
117F   CD F8 0C               CALL   printStr   
1182   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
118F   E1                     POP   hl   
1190   E5                     PUSH   hl   
1191   E5                     PUSH   hl   
1192   CD 17 0E               CALL   run   
1195   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11A4   CD 80 0C               CALL   flushBuffer   
11A7   76                     HALT      
11A8                EXPECTM_2859S63:      
11A8   E1                     POP   HL   
11A9                          ;*Macro unroll:  test "1", 1
11A9   31 00 53               LD   SP,STACK   
11AC   CD 40 0D               CALL   coldInit   
11AF   CD 56 51               CALL   execStr   
11B2   31 00                  DB   "1",0   
11B4   CD 80 0C               CALL   flushBuffer   
11B7   E1                     POP   HL   
11B8   E5                     PUSH   HL   
11B9   11 01 00               LD   DE,1   
11BC   B7                     OR   A   
11BD   ED 52                  SBC   HL,DE   
11BF   7D                     LD   A,L   
11C0   B4                     OR   H   
11C1   CA 1D 12               JP   Z,expectM_2860S64   
11C4   CD F8 0C               CALL   printStr   
11C7   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
11CF   CD F8 0C               CALL   printStr   
11D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11E1   21 01 00               LD   hl,1   
11E4   E5                     PUSH   hl   
11E5   E5                     PUSH   hl   
11E6   CD 17 0E               CALL   run   
11E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11F1   CD 80 0C               CALL   flushBuffer   
11F4   CD F8 0C               CALL   printStr   
11F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1204   E1                     POP   hl   
1205   E5                     PUSH   hl   
1206   E5                     PUSH   hl   
1207   CD 17 0E               CALL   run   
120A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1219   CD 80 0C               CALL   flushBuffer   
121C   76                     HALT      
121D                EXPECTM_2860S64:      
121D   E1                     POP   HL   
121E                          ;*Macro unroll:  test "2", 2
121E   31 00 53               LD   SP,STACK   
1221   CD 40 0D               CALL   coldInit   
1224   CD 56 51               CALL   execStr   
1227   32 00                  DB   "2",0   
1229   CD 80 0C               CALL   flushBuffer   
122C   E1                     POP   HL   
122D   E5                     PUSH   HL   
122E   11 02 00               LD   DE,2   
1231   B7                     OR   A   
1232   ED 52                  SBC   HL,DE   
1234   7D                     LD   A,L   
1235   B4                     OR   H   
1236   CA 92 12               JP   Z,expectM_2861S65   
1239   CD F8 0C               CALL   printStr   
123C   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1244   CD F8 0C               CALL   printStr   
1247   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1256   21 02 00               LD   hl,2   
1259   E5                     PUSH   hl   
125A   E5                     PUSH   hl   
125B   CD 17 0E               CALL   run   
125E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1266   CD 80 0C               CALL   flushBuffer   
1269   CD F8 0C               CALL   printStr   
126C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1279   E1                     POP   hl   
127A   E5                     PUSH   hl   
127B   E5                     PUSH   hl   
127C   CD 17 0E               CALL   run   
127F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
128E   CD 80 0C               CALL   flushBuffer   
1291   76                     HALT      
1292                EXPECTM_2861S65:      
1292   E1                     POP   HL   
1293                          ;*Macro unroll:  test "1", 1
1293   31 00 53               LD   SP,STACK   
1296   CD 40 0D               CALL   coldInit   
1299   CD 56 51               CALL   execStr   
129C   31 00                  DB   "1",0   
129E   CD 80 0C               CALL   flushBuffer   
12A1   E1                     POP   HL   
12A2   E5                     PUSH   HL   
12A3   11 01 00               LD   DE,1   
12A6   B7                     OR   A   
12A7   ED 52                  SBC   HL,DE   
12A9   7D                     LD   A,L   
12AA   B4                     OR   H   
12AB   CA 07 13               JP   Z,expectM_2862S66   
12AE   CD F8 0C               CALL   printStr   
12B1   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
12B9   CD F8 0C               CALL   printStr   
12BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12CB   21 01 00               LD   hl,1   
12CE   E5                     PUSH   hl   
12CF   E5                     PUSH   hl   
12D0   CD 17 0E               CALL   run   
12D3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12DB   CD 80 0C               CALL   flushBuffer   
12DE   CD F8 0C               CALL   printStr   
12E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12EE   E1                     POP   hl   
12EF   E5                     PUSH   hl   
12F0   E5                     PUSH   hl   
12F1   CD 17 0E               CALL   run   
12F4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1303   CD 80 0C               CALL   flushBuffer   
1306   76                     HALT      
1307                EXPECTM_2862S66:      
1307   E1                     POP   HL   
1308                          ;*Macro unroll:  test "0", 0
1308   31 00 53               LD   SP,STACK   
130B   CD 40 0D               CALL   coldInit   
130E   CD 56 51               CALL   execStr   
1311   30 00                  DB   "0",0   
1313   CD 80 0C               CALL   flushBuffer   
1316   E1                     POP   HL   
1317   E5                     PUSH   HL   
1318   11 00 00               LD   DE,0   
131B   B7                     OR   A   
131C   ED 52                  SBC   HL,DE   
131E   7D                     LD   A,L   
131F   B4                     OR   H   
1320   CA 7C 13               JP   Z,expectM_2863S67   
1323   CD F8 0C               CALL   printStr   
1326   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
132E   CD F8 0C               CALL   printStr   
1331   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1340   21 00 00               LD   hl,0   
1343   E5                     PUSH   hl   
1344   E5                     PUSH   hl   
1345   CD 17 0E               CALL   run   
1348   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1350   CD 80 0C               CALL   flushBuffer   
1353   CD F8 0C               CALL   printStr   
1356   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1363   E1                     POP   hl   
1364   E5                     PUSH   hl   
1365   E5                     PUSH   hl   
1366   CD 17 0E               CALL   run   
1369   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1378   CD 80 0C               CALL   flushBuffer   
137B   76                     HALT      
137C                EXPECTM_2863S67:      
137C   E1                     POP   HL   
137D                          ;*Macro unroll:  test "10", 10
137D   31 00 53               LD   SP,STACK   
1380   CD 40 0D               CALL   coldInit   
1383   CD 56 51               CALL   execStr   
1386   31 30 00               DB   "10",0   
1389   CD 80 0C               CALL   flushBuffer   
138C   E1                     POP   HL   
138D   E5                     PUSH   HL   
138E   11 0A 00               LD   DE,10   
1391   B7                     OR   A   
1392   ED 52                  SBC   HL,DE   
1394   7D                     LD   A,L   
1395   B4                     OR   H   
1396   CA F3 13               JP   Z,expectM_2864S68   
1399   CD F8 0C               CALL   printStr   
139C   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
13A5   CD F8 0C               CALL   printStr   
13A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13B7   21 0A 00               LD   hl,10   
13BA   E5                     PUSH   hl   
13BB   E5                     PUSH   hl   
13BC   CD 17 0E               CALL   run   
13BF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13C7   CD 80 0C               CALL   flushBuffer   
13CA   CD F8 0C               CALL   printStr   
13CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13DA   E1                     POP   hl   
13DB   E5                     PUSH   hl   
13DC   E5                     PUSH   hl   
13DD   CD 17 0E               CALL   run   
13E0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13EF   CD 80 0C               CALL   flushBuffer   
13F2   76                     HALT      
13F3                EXPECTM_2864S68:      
13F3   E1                     POP   HL   
13F4                          ;*Macro unroll:  test "123", 123
13F4   31 00 53               LD   SP,STACK   
13F7   CD 40 0D               CALL   coldInit   
13FA   CD 56 51               CALL   execStr   
13FD   31 32 33 00            DB   "123",0   
1401   CD 80 0C               CALL   flushBuffer   
1404   E1                     POP   HL   
1405   E5                     PUSH   HL   
1406   11 7B 00               LD   DE,123   
1409   B7                     OR   A   
140A   ED 52                  SBC   HL,DE   
140C   7D                     LD   A,L   
140D   B4                     OR   H   
140E   CA 6C 14               JP   Z,expectM_2865S69   
1411   CD F8 0C               CALL   printStr   
1414   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
141E   CD F8 0C               CALL   printStr   
1421   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1430   21 7B 00               LD   hl,123   
1433   E5                     PUSH   hl   
1434   E5                     PUSH   hl   
1435   CD 17 0E               CALL   run   
1438   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1440   CD 80 0C               CALL   flushBuffer   
1443   CD F8 0C               CALL   printStr   
1446   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1453   E1                     POP   hl   
1454   E5                     PUSH   hl   
1455   E5                     PUSH   hl   
1456   CD 17 0E               CALL   run   
1459   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1468   CD 80 0C               CALL   flushBuffer   
146B   76                     HALT      
146C                EXPECTM_2865S69:      
146C   E1                     POP   HL   
146D                          ;*Macro unroll:  test "-1",-1
146D   31 00 53               LD   SP,STACK   
1470   CD 40 0D               CALL   coldInit   
1473   CD 56 51               CALL   execStr   
1476   2D 31 00               DB   "-1",0   
1479   CD 80 0C               CALL   flushBuffer   
147C   E1                     POP   HL   
147D   E5                     PUSH   HL   
147E   11 FF FF               LD   DE,-1   
1481   B7                     OR   A   
1482   ED 52                  SBC   HL,DE   
1484   7D                     LD   A,L   
1485   B4                     OR   H   
1486   CA E3 14               JP   Z,expectM_2866S70   
1489   CD F8 0C               CALL   printStr   
148C   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1495   CD F8 0C               CALL   printStr   
1498   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14A7   21 FF FF               LD   hl,-1   
14AA   E5                     PUSH   hl   
14AB   E5                     PUSH   hl   
14AC   CD 17 0E               CALL   run   
14AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14B7   CD 80 0C               CALL   flushBuffer   
14BA   CD F8 0C               CALL   printStr   
14BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14CA   E1                     POP   hl   
14CB   E5                     PUSH   hl   
14CC   E5                     PUSH   hl   
14CD   CD 17 0E               CALL   run   
14D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14DF   CD 80 0C               CALL   flushBuffer   
14E2   76                     HALT      
14E3                EXPECTM_2866S70:      
14E3   E1                     POP   HL   
14E4                          ;*Macro unroll:  test "''", 0
14E4   31 00 53               LD   SP,STACK   
14E7   CD 40 0D               CALL   coldInit   
14EA   CD 56 51               CALL   execStr   
14ED   27 27 00               DB   "''",0   
14F0   CD 80 0C               CALL   flushBuffer   
14F3   E1                     POP   HL   
14F4   E5                     PUSH   HL   
14F5   11 00 00               LD   DE,0   
14F8   B7                     OR   A   
14F9   ED 52                  SBC   HL,DE   
14FB   7D                     LD   A,L   
14FC   B4                     OR   H   
14FD   CA 5A 15               JP   Z,expectM_2867S71   
1500   CD F8 0C               CALL   printStr   
1503   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
150C   CD F8 0C               CALL   printStr   
150F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
151E   21 00 00               LD   hl,0   
1521   E5                     PUSH   hl   
1522   E5                     PUSH   hl   
1523   CD 17 0E               CALL   run   
1526   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
152E   CD 80 0C               CALL   flushBuffer   
1531   CD F8 0C               CALL   printStr   
1534   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1541   E1                     POP   hl   
1542   E5                     PUSH   hl   
1543   E5                     PUSH   hl   
1544   CD 17 0E               CALL   run   
1547   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1556   CD 80 0C               CALL   flushBuffer   
1559   76                     HALT      
155A                EXPECTM_2867S71:      
155A   E1                     POP   HL   
155B                          ;*Macro unroll:  test "'a'", $61
155B   31 00 53               LD   SP,STACK   
155E   CD 40 0D               CALL   coldInit   
1561   CD 56 51               CALL   execStr   
1564   27 61 27 00            DB   "'a'",0   
1568   CD 80 0C               CALL   flushBuffer   
156B   E1                     POP   HL   
156C   E5                     PUSH   HL   
156D   11 61 00               LD   DE,$61   
1570   B7                     OR   A   
1571   ED 52                  SBC   HL,DE   
1573   7D                     LD   A,L   
1574   B4                     OR   H   
1575   CA D3 15               JP   Z,expectM_2868S72   
1578   CD F8 0C               CALL   printStr   
157B   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1585   CD F8 0C               CALL   printStr   
1588   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1597   21 61 00               LD   hl,$61   
159A   E5                     PUSH   hl   
159B   E5                     PUSH   hl   
159C   CD 17 0E               CALL   run   
159F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15A7   CD 80 0C               CALL   flushBuffer   
15AA   CD F8 0C               CALL   printStr   
15AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15BA   E1                     POP   hl   
15BB   E5                     PUSH   hl   
15BC   E5                     PUSH   hl   
15BD   CD 17 0E               CALL   run   
15C0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15CF   CD 80 0C               CALL   flushBuffer   
15D2   76                     HALT      
15D3                EXPECTM_2868S72:      
15D3   E1                     POP   HL   
15D4                          ;*Macro unroll:  test "'\\''", $27
15D4   31 00 53               LD   SP,STACK   
15D7   CD 40 0D               CALL   coldInit   
15DA   CD 56 51               CALL   execStr   
15DD   27 5C 27 27 00         DB   "'\\''",0   
15E2   CD 80 0C               CALL   flushBuffer   
15E5   E1                     POP   HL   
15E6   E5                     PUSH   HL   
15E7   11 27 00               LD   DE,$27   
15EA   B7                     OR   A   
15EB   ED 52                  SBC   HL,DE   
15ED   7D                     LD   A,L   
15EE   B4                     OR   H   
15EF   CA 4E 16               JP   Z,expectM_2869S73   
15F2   CD F8 0C               CALL   printStr   
15F5   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1600   CD F8 0C               CALL   printStr   
1603   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1612   21 27 00               LD   hl,$27   
1615   E5                     PUSH   hl   
1616   E5                     PUSH   hl   
1617   CD 17 0E               CALL   run   
161A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1622   CD 80 0C               CALL   flushBuffer   
1625   CD F8 0C               CALL   printStr   
1628   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1635   E1                     POP   hl   
1636   E5                     PUSH   hl   
1637   E5                     PUSH   hl   
1638   CD 17 0E               CALL   run   
163B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
164A   CD 80 0C               CALL   flushBuffer   
164D   76                     HALT      
164E                EXPECTM_2869S73:      
164E   E1                     POP   HL   
164F                          ;*Macro unroll:  test "$10", $10
164F   31 00 53               LD   SP,STACK   
1652   CD 40 0D               CALL   coldInit   
1655   CD 56 51               CALL   execStr   
1658   24 31 30 00            DB   "$10",0   
165C   CD 80 0C               CALL   flushBuffer   
165F   E1                     POP   HL   
1660   E5                     PUSH   HL   
1661   11 10 00               LD   DE,$10   
1664   B7                     OR   A   
1665   ED 52                  SBC   HL,DE   
1667   7D                     LD   A,L   
1668   B4                     OR   H   
1669   CA C7 16               JP   Z,expectM_2870S74   
166C   CD F8 0C               CALL   printStr   
166F   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1679   CD F8 0C               CALL   printStr   
167C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
168B   21 10 00               LD   hl,$10   
168E   E5                     PUSH   hl   
168F   E5                     PUSH   hl   
1690   CD 17 0E               CALL   run   
1693   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
169B   CD 80 0C               CALL   flushBuffer   
169E   CD F8 0C               CALL   printStr   
16A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16AE   E1                     POP   hl   
16AF   E5                     PUSH   hl   
16B0   E5                     PUSH   hl   
16B1   CD 17 0E               CALL   run   
16B4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16C3   CD 80 0C               CALL   flushBuffer   
16C6   76                     HALT      
16C7                EXPECTM_2870S74:      
16C7   E1                     POP   HL   
16C8                          ;*Macro unroll:  test "$FF", $FF
16C8   31 00 53               LD   SP,STACK   
16CB   CD 40 0D               CALL   coldInit   
16CE   CD 56 51               CALL   execStr   
16D1   24 46 46 00            DB   "$FF",0   
16D5   CD 80 0C               CALL   flushBuffer   
16D8   E1                     POP   HL   
16D9   E5                     PUSH   HL   
16DA   11 FF 00               LD   DE,$FF   
16DD   B7                     OR   A   
16DE   ED 52                  SBC   HL,DE   
16E0   7D                     LD   A,L   
16E1   B4                     OR   H   
16E2   CA 40 17               JP   Z,expectM_2871S75   
16E5   CD F8 0C               CALL   printStr   
16E8   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
16F2   CD F8 0C               CALL   printStr   
16F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1704   21 FF 00               LD   hl,$FF   
1707   E5                     PUSH   hl   
1708   E5                     PUSH   hl   
1709   CD 17 0E               CALL   run   
170C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1714   CD 80 0C               CALL   flushBuffer   
1717   CD F8 0C               CALL   printStr   
171A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1727   E1                     POP   hl   
1728   E5                     PUSH   hl   
1729   E5                     PUSH   hl   
172A   CD 17 0E               CALL   run   
172D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
173C   CD 80 0C               CALL   flushBuffer   
173F   76                     HALT      
1740                EXPECTM_2871S75:      
1740   E1                     POP   HL   
1741                          ;*Macro unroll:  test "-1 2 +",1
1741   31 00 53               LD   SP,STACK   
1744   CD 40 0D               CALL   coldInit   
1747   CD 56 51               CALL   execStr   
174A   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1751   CD 80 0C               CALL   flushBuffer   
1754   E1                     POP   HL   
1755   E5                     PUSH   HL   
1756   11 01 00               LD   DE,1   
1759   B7                     OR   A   
175A   ED 52                  SBC   HL,DE   
175C   7D                     LD   A,L   
175D   B4                     OR   H   
175E   CA BF 17               JP   Z,expectM_2872S76   
1761   CD F8 0C               CALL   printStr   
1764   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1771   CD F8 0C               CALL   printStr   
1774   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1783   21 01 00               LD   hl,1   
1786   E5                     PUSH   hl   
1787   E5                     PUSH   hl   
1788   CD 17 0E               CALL   run   
178B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1793   CD 80 0C               CALL   flushBuffer   
1796   CD F8 0C               CALL   printStr   
1799   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17A6   E1                     POP   hl   
17A7   E5                     PUSH   hl   
17A8   E5                     PUSH   hl   
17A9   CD 17 0E               CALL   run   
17AC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17BB   CD 80 0C               CALL   flushBuffer   
17BE   76                     HALT      
17BF                EXPECTM_2872S76:      
17BF   E1                     POP   HL   
17C0                          ;*Macro unroll:  test "-1 1 +",0
17C0   31 00 53               LD   SP,STACK   
17C3   CD 40 0D               CALL   coldInit   
17C6   CD 56 51               CALL   execStr   
17C9   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
17D0   CD 80 0C               CALL   flushBuffer   
17D3   E1                     POP   HL   
17D4   E5                     PUSH   HL   
17D5   11 00 00               LD   DE,0   
17D8   B7                     OR   A   
17D9   ED 52                  SBC   HL,DE   
17DB   7D                     LD   A,L   
17DC   B4                     OR   H   
17DD   CA 3E 18               JP   Z,expectM_2873S77   
17E0   CD F8 0C               CALL   printStr   
17E3   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
17F0   CD F8 0C               CALL   printStr   
17F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1802   21 00 00               LD   hl,0   
1805   E5                     PUSH   hl   
1806   E5                     PUSH   hl   
1807   CD 17 0E               CALL   run   
180A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1812   CD 80 0C               CALL   flushBuffer   
1815   CD F8 0C               CALL   printStr   
1818   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1825   E1                     POP   hl   
1826   E5                     PUSH   hl   
1827   E5                     PUSH   hl   
1828   CD 17 0E               CALL   run   
182B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
183A   CD 80 0C               CALL   flushBuffer   
183D   76                     HALT      
183E                EXPECTM_2873S77:      
183E   E1                     POP   HL   
183F                          ;*Macro unroll:  test "1 2 +", 3
183F   31 00 53               LD   SP,STACK   
1842   CD 40 0D               CALL   coldInit   
1845   CD 56 51               CALL   execStr   
1848   31 20 32 20 2B 00      DB   "1 2 +",0   
184E   CD 80 0C               CALL   flushBuffer   
1851   E1                     POP   HL   
1852   E5                     PUSH   HL   
1853   11 03 00               LD   DE,3   
1856   B7                     OR   A   
1857   ED 52                  SBC   HL,DE   
1859   7D                     LD   A,L   
185A   B4                     OR   H   
185B   CA BB 18               JP   Z,expectM_2874S78   
185E   CD F8 0C               CALL   printStr   
1861   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
186D   CD F8 0C               CALL   printStr   
1870   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
187F   21 03 00               LD   hl,3   
1882   E5                     PUSH   hl   
1883   E5                     PUSH   hl   
1884   CD 17 0E               CALL   run   
1887   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
188F   CD 80 0C               CALL   flushBuffer   
1892   CD F8 0C               CALL   printStr   
1895   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18A2   E1                     POP   hl   
18A3   E5                     PUSH   hl   
18A4   E5                     PUSH   hl   
18A5   CD 17 0E               CALL   run   
18A8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18B7   CD 80 0C               CALL   flushBuffer   
18BA   76                     HALT      
18BB                EXPECTM_2874S78:      
18BB   E1                     POP   HL   
18BC                          ;*Macro unroll:  test "4 1 2 +", 3
18BC   31 00 53               LD   SP,STACK   
18BF   CD 40 0D               CALL   coldInit   
18C2   CD 56 51               CALL   execStr   
18C5   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
18CD   CD 80 0C               CALL   flushBuffer   
18D0   E1                     POP   HL   
18D1   E5                     PUSH   HL   
18D2   11 03 00               LD   DE,3   
18D5   B7                     OR   A   
18D6   ED 52                  SBC   HL,DE   
18D8   7D                     LD   A,L   
18D9   B4                     OR   H   
18DA   CA 3C 19               JP   Z,expectM_2875S79   
18DD   CD F8 0C               CALL   printStr   
18E0   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
18EE   CD F8 0C               CALL   printStr   
18F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1900   21 03 00               LD   hl,3   
1903   E5                     PUSH   hl   
1904   E5                     PUSH   hl   
1905   CD 17 0E               CALL   run   
1908   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1910   CD 80 0C               CALL   flushBuffer   
1913   CD F8 0C               CALL   printStr   
1916   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1923   E1                     POP   hl   
1924   E5                     PUSH   hl   
1925   E5                     PUSH   hl   
1926   CD 17 0E               CALL   run   
1929   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1938   CD 80 0C               CALL   flushBuffer   
193B   76                     HALT      
193C                EXPECTM_2875S79:      
193C   E1                     POP   HL   
193D                          ;*Macro unroll:  test "123 456 +", 123+456
193D   31 00 53               LD   SP,STACK   
1940   CD 40 0D               CALL   coldInit   
1943   CD 56 51               CALL   execStr   
1946   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1950   CD 80 0C               CALL   flushBuffer   
1953   E1                     POP   HL   
1954   E5                     PUSH   HL   
1955   11 43 02               LD   DE,123+456   
1958   B7                     OR   A   
1959   ED 52                  SBC   HL,DE   
195B   7D                     LD   A,L   
195C   B4                     OR   H   
195D   CA C1 19               JP   Z,expectM_2876S80   
1960   CD F8 0C               CALL   printStr   
1963   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1973   CD F8 0C               CALL   printStr   
1976   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1985   21 43 02               LD   hl,123+456   
1988   E5                     PUSH   hl   
1989   E5                     PUSH   hl   
198A   CD 17 0E               CALL   run   
198D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1995   CD 80 0C               CALL   flushBuffer   
1998   CD F8 0C               CALL   printStr   
199B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19A8   E1                     POP   hl   
19A9   E5                     PUSH   hl   
19AA   E5                     PUSH   hl   
19AB   CD 17 0E               CALL   run   
19AE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19BD   CD 80 0C               CALL   flushBuffer   
19C0   76                     HALT      
19C1                EXPECTM_2876S80:      
19C1   E1                     POP   HL   
19C2                          ;*Macro unroll:  test "64 128 +", 64+128
19C2   31 00 53               LD   SP,STACK   
19C5   CD 40 0D               CALL   coldInit   
19C8   CD 56 51               CALL   execStr   
19CB   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
19D4   CD 80 0C               CALL   flushBuffer   
19D7   E1                     POP   HL   
19D8   E5                     PUSH   HL   
19D9   11 C0 00               LD   DE,64+128   
19DC   B7                     OR   A   
19DD   ED 52                  SBC   HL,DE   
19DF   7D                     LD   A,L   
19E0   B4                     OR   H   
19E1   CA 44 1A               JP   Z,expectM_2877S81   
19E4   CD F8 0C               CALL   printStr   
19E7   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
19F6   CD F8 0C               CALL   printStr   
19F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A08   21 C0 00               LD   hl,64+128   
1A0B   E5                     PUSH   hl   
1A0C   E5                     PUSH   hl   
1A0D   CD 17 0E               CALL   run   
1A10   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A18   CD 80 0C               CALL   flushBuffer   
1A1B   CD F8 0C               CALL   printStr   
1A1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A2B   E1                     POP   hl   
1A2C   E5                     PUSH   hl   
1A2D   E5                     PUSH   hl   
1A2E   CD 17 0E               CALL   run   
1A31   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A40   CD 80 0C               CALL   flushBuffer   
1A43   76                     HALT      
1A44                EXPECTM_2877S81:      
1A44   E1                     POP   HL   
1A45                          ;*Macro unroll:  test "1 2 +", 3
1A45   31 00 53               LD   SP,STACK   
1A48   CD 40 0D               CALL   coldInit   
1A4B   CD 56 51               CALL   execStr   
1A4E   31 20 32 20 2B 00      DB   "1 2 +",0   
1A54   CD 80 0C               CALL   flushBuffer   
1A57   E1                     POP   HL   
1A58   E5                     PUSH   HL   
1A59   11 03 00               LD   DE,3   
1A5C   B7                     OR   A   
1A5D   ED 52                  SBC   HL,DE   
1A5F   7D                     LD   A,L   
1A60   B4                     OR   H   
1A61   CA C1 1A               JP   Z,expectM_2878S82   
1A64   CD F8 0C               CALL   printStr   
1A67   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A73   CD F8 0C               CALL   printStr   
1A76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A85   21 03 00               LD   hl,3   
1A88   E5                     PUSH   hl   
1A89   E5                     PUSH   hl   
1A8A   CD 17 0E               CALL   run   
1A8D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A95   CD 80 0C               CALL   flushBuffer   
1A98   CD F8 0C               CALL   printStr   
1A9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AA8   E1                     POP   hl   
1AA9   E5                     PUSH   hl   
1AAA   E5                     PUSH   hl   
1AAB   CD 17 0E               CALL   run   
1AAE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1ABD   CD 80 0C               CALL   flushBuffer   
1AC0   76                     HALT      
1AC1                EXPECTM_2878S82:      
1AC1   E1                     POP   HL   
1AC2                          ;*Macro unroll:  test "1a= a++ a",2
1AC2   31 00 53               LD   SP,STACK   
1AC5   CD 40 0D               CALL   coldInit   
1AC8   CD 56 51               CALL   execStr   
1ACB   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1AD5   CD 80 0C               CALL   flushBuffer   
1AD8   E1                     POP   HL   
1AD9   E5                     PUSH   HL   
1ADA   11 02 00               LD   DE,2   
1ADD   B7                     OR   A   
1ADE   ED 52                  SBC   HL,DE   
1AE0   7D                     LD   A,L   
1AE1   B4                     OR   H   
1AE2   CA 46 1B               JP   Z,expectM_2879S83   
1AE5   CD F8 0C               CALL   printStr   
1AE8   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1AF8   CD F8 0C               CALL   printStr   
1AFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B0A   21 02 00               LD   hl,2   
1B0D   E5                     PUSH   hl   
1B0E   E5                     PUSH   hl   
1B0F   CD 17 0E               CALL   run   
1B12   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B1A   CD 80 0C               CALL   flushBuffer   
1B1D   CD F8 0C               CALL   printStr   
1B20   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B2D   E1                     POP   hl   
1B2E   E5                     PUSH   hl   
1B2F   E5                     PUSH   hl   
1B30   CD 17 0E               CALL   run   
1B33   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B42   CD 80 0C               CALL   flushBuffer   
1B45   76                     HALT      
1B46                EXPECTM_2879S83:      
1B46   E1                     POP   HL   
1B47                          ;*Macro unroll:  test "-1 -1 -",0
1B47   31 00 53               LD   SP,STACK   
1B4A   CD 40 0D               CALL   coldInit   
1B4D   CD 56 51               CALL   execStr   
1B50   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1B58   CD 80 0C               CALL   flushBuffer   
1B5B   E1                     POP   HL   
1B5C   E5                     PUSH   HL   
1B5D   11 00 00               LD   DE,0   
1B60   B7                     OR   A   
1B61   ED 52                  SBC   HL,DE   
1B63   7D                     LD   A,L   
1B64   B4                     OR   H   
1B65   CA C7 1B               JP   Z,expectM_2880S84   
1B68   CD F8 0C               CALL   printStr   
1B6B   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1B79   CD F8 0C               CALL   printStr   
1B7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B8B   21 00 00               LD   hl,0   
1B8E   E5                     PUSH   hl   
1B8F   E5                     PUSH   hl   
1B90   CD 17 0E               CALL   run   
1B93   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B9B   CD 80 0C               CALL   flushBuffer   
1B9E   CD F8 0C               CALL   printStr   
1BA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BAE   E1                     POP   hl   
1BAF   E5                     PUSH   hl   
1BB0   E5                     PUSH   hl   
1BB1   CD 17 0E               CALL   run   
1BB4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BC3   CD 80 0C               CALL   flushBuffer   
1BC6   76                     HALT      
1BC7                EXPECTM_2880S84:      
1BC7   E1                     POP   HL   
1BC8                          ;*Macro unroll:  test "5 3 -", 2
1BC8   31 00 53               LD   SP,STACK   
1BCB   CD 40 0D               CALL   coldInit   
1BCE   CD 56 51               CALL   execStr   
1BD1   35 20 33 20 2D 00      DB   "5 3 -",0   
1BD7   CD 80 0C               CALL   flushBuffer   
1BDA   E1                     POP   HL   
1BDB   E5                     PUSH   HL   
1BDC   11 02 00               LD   DE,2   
1BDF   B7                     OR   A   
1BE0   ED 52                  SBC   HL,DE   
1BE2   7D                     LD   A,L   
1BE3   B4                     OR   H   
1BE4   CA 44 1C               JP   Z,expectM_2881S85   
1BE7   CD F8 0C               CALL   printStr   
1BEA   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1BF6   CD F8 0C               CALL   printStr   
1BF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C08   21 02 00               LD   hl,2   
1C0B   E5                     PUSH   hl   
1C0C   E5                     PUSH   hl   
1C0D   CD 17 0E               CALL   run   
1C10   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C18   CD 80 0C               CALL   flushBuffer   
1C1B   CD F8 0C               CALL   printStr   
1C1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C2B   E1                     POP   hl   
1C2C   E5                     PUSH   hl   
1C2D   E5                     PUSH   hl   
1C2E   CD 17 0E               CALL   run   
1C31   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C40   CD 80 0C               CALL   flushBuffer   
1C43   76                     HALT      
1C44                EXPECTM_2881S85:      
1C44   E1                     POP   HL   
1C45                          ;*Macro unroll:  test "2 1 -",1
1C45   31 00 53               LD   SP,STACK   
1C48   CD 40 0D               CALL   coldInit   
1C4B   CD 56 51               CALL   execStr   
1C4E   32 20 31 20 2D 00      DB   "2 1 -",0   
1C54   CD 80 0C               CALL   flushBuffer   
1C57   E1                     POP   HL   
1C58   E5                     PUSH   HL   
1C59   11 01 00               LD   DE,1   
1C5C   B7                     OR   A   
1C5D   ED 52                  SBC   HL,DE   
1C5F   7D                     LD   A,L   
1C60   B4                     OR   H   
1C61   CA C1 1C               JP   Z,expectM_2882S86   
1C64   CD F8 0C               CALL   printStr   
1C67   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1C73   CD F8 0C               CALL   printStr   
1C76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C85   21 01 00               LD   hl,1   
1C88   E5                     PUSH   hl   
1C89   E5                     PUSH   hl   
1C8A   CD 17 0E               CALL   run   
1C8D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C95   CD 80 0C               CALL   flushBuffer   
1C98   CD F8 0C               CALL   printStr   
1C9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CA8   E1                     POP   hl   
1CA9   E5                     PUSH   hl   
1CAA   E5                     PUSH   hl   
1CAB   CD 17 0E               CALL   run   
1CAE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CBD   CD 80 0C               CALL   flushBuffer   
1CC0   76                     HALT      
1CC1                EXPECTM_2882S86:      
1CC1   E1                     POP   HL   
1CC2                          ;*Macro unroll:  test "3a= a-- a",2
1CC2   31 00 53               LD   SP,STACK   
1CC5   CD 40 0D               CALL   coldInit   
1CC8   CD 56 51               CALL   execStr   
1CCB   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1CD5   CD 80 0C               CALL   flushBuffer   
1CD8   E1                     POP   HL   
1CD9   E5                     PUSH   HL   
1CDA   11 02 00               LD   DE,2   
1CDD   B7                     OR   A   
1CDE   ED 52                  SBC   HL,DE   
1CE0   7D                     LD   A,L   
1CE1   B4                     OR   H   
1CE2   CA 46 1D               JP   Z,expectM_2883S87   
1CE5   CD F8 0C               CALL   printStr   
1CE8   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1CF8   CD F8 0C               CALL   printStr   
1CFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D0A   21 02 00               LD   hl,2   
1D0D   E5                     PUSH   hl   
1D0E   E5                     PUSH   hl   
1D0F   CD 17 0E               CALL   run   
1D12   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D1A   CD 80 0C               CALL   flushBuffer   
1D1D   CD F8 0C               CALL   printStr   
1D20   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D2D   E1                     POP   hl   
1D2E   E5                     PUSH   hl   
1D2F   E5                     PUSH   hl   
1D30   CD 17 0E               CALL   run   
1D33   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D42   CD 80 0C               CALL   flushBuffer   
1D45   76                     HALT      
1D46                EXPECTM_2883S87:      
1D46   E1                     POP   HL   
1D47                          ;*Macro unroll:  test "3 5 &", 1
1D47   31 00 53               LD   SP,STACK   
1D4A   CD 40 0D               CALL   coldInit   
1D4D   CD 56 51               CALL   execStr   
1D50   33 20 35 20 26 00      DB   "3 5 &",0   
1D56   CD 80 0C               CALL   flushBuffer   
1D59   E1                     POP   HL   
1D5A   E5                     PUSH   HL   
1D5B   11 01 00               LD   DE,1   
1D5E   B7                     OR   A   
1D5F   ED 52                  SBC   HL,DE   
1D61   7D                     LD   A,L   
1D62   B4                     OR   H   
1D63   CA C3 1D               JP   Z,expectM_2884S88   
1D66   CD F8 0C               CALL   printStr   
1D69   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1D75   CD F8 0C               CALL   printStr   
1D78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D87   21 01 00               LD   hl,1   
1D8A   E5                     PUSH   hl   
1D8B   E5                     PUSH   hl   
1D8C   CD 17 0E               CALL   run   
1D8F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D97   CD 80 0C               CALL   flushBuffer   
1D9A   CD F8 0C               CALL   printStr   
1D9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DAA   E1                     POP   hl   
1DAB   E5                     PUSH   hl   
1DAC   E5                     PUSH   hl   
1DAD   CD 17 0E               CALL   run   
1DB0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DBF   CD 80 0C               CALL   flushBuffer   
1DC2   76                     HALT      
1DC3                EXPECTM_2884S88:      
1DC3   E1                     POP   HL   
1DC4                          ;*Macro unroll:  test "3 5 |", 7
1DC4   31 00 53               LD   SP,STACK   
1DC7   CD 40 0D               CALL   coldInit   
1DCA   CD 56 51               CALL   execStr   
1DCD   33 20 35 20 7C 00      DB   "3 5 |",0   
1DD3   CD 80 0C               CALL   flushBuffer   
1DD6   E1                     POP   HL   
1DD7   E5                     PUSH   HL   
1DD8   11 07 00               LD   DE,7   
1DDB   B7                     OR   A   
1DDC   ED 52                  SBC   HL,DE   
1DDE   7D                     LD   A,L   
1DDF   B4                     OR   H   
1DE0   CA 40 1E               JP   Z,expectM_2885S89   
1DE3   CD F8 0C               CALL   printStr   
1DE6   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1DF2   CD F8 0C               CALL   printStr   
1DF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E04   21 07 00               LD   hl,7   
1E07   E5                     PUSH   hl   
1E08   E5                     PUSH   hl   
1E09   CD 17 0E               CALL   run   
1E0C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E14   CD 80 0C               CALL   flushBuffer   
1E17   CD F8 0C               CALL   printStr   
1E1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E27   E1                     POP   hl   
1E28   E5                     PUSH   hl   
1E29   E5                     PUSH   hl   
1E2A   CD 17 0E               CALL   run   
1E2D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E3C   CD 80 0C               CALL   flushBuffer   
1E3F   76                     HALT      
1E40                EXPECTM_2885S89:      
1E40   E1                     POP   HL   
1E41                          ;*Macro unroll:  test "3 5 /x", 6
1E41   31 00 53               LD   SP,STACK   
1E44   CD 40 0D               CALL   coldInit   
1E47   CD 56 51               CALL   execStr   
1E4A   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1E51   CD 80 0C               CALL   flushBuffer   
1E54   E1                     POP   HL   
1E55   E5                     PUSH   HL   
1E56   11 06 00               LD   DE,6   
1E59   B7                     OR   A   
1E5A   ED 52                  SBC   HL,DE   
1E5C   7D                     LD   A,L   
1E5D   B4                     OR   H   
1E5E   CA BF 1E               JP   Z,expectM_2886S90   
1E61   CD F8 0C               CALL   printStr   
1E64   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1E71   CD F8 0C               CALL   printStr   
1E74   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E83   21 06 00               LD   hl,6   
1E86   E5                     PUSH   hl   
1E87   E5                     PUSH   hl   
1E88   CD 17 0E               CALL   run   
1E8B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E93   CD 80 0C               CALL   flushBuffer   
1E96   CD F8 0C               CALL   printStr   
1E99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EA6   E1                     POP   hl   
1EA7   E5                     PUSH   hl   
1EA8   E5                     PUSH   hl   
1EA9   CD 17 0E               CALL   run   
1EAC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1EBB   CD 80 0C               CALL   flushBuffer   
1EBE   76                     HALT      
1EBF                EXPECTM_2886S90:      
1EBF   E1                     POP   HL   
1EC0                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1EC0   31 00 53               LD   SP,STACK   
1EC3   CD 40 0D               CALL   coldInit   
1EC6   CD 56 51               CALL   execStr   
1EC9   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1ED8   CD 80 0C               CALL   flushBuffer   
1EDB   E1                     POP   HL   
1EDC   E5                     PUSH   HL   
1EDD   11 06 00               LD   DE,6   
1EE0   B7                     OR   A   
1EE1   ED 52                  SBC   HL,DE   
1EE3   7D                     LD   A,L   
1EE4   B4                     OR   H   
1EE5   CA 4E 1F               JP   Z,expectM_2887S91   
1EE8   CD F8 0C               CALL   printStr   
1EEB   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1F00   CD F8 0C               CALL   printStr   
1F03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F12   21 06 00               LD   hl,6   
1F15   E5                     PUSH   hl   
1F16   E5                     PUSH   hl   
1F17   CD 17 0E               CALL   run   
1F1A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F22   CD 80 0C               CALL   flushBuffer   
1F25   CD F8 0C               CALL   printStr   
1F28   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F35   E1                     POP   hl   
1F36   E5                     PUSH   hl   
1F37   E5                     PUSH   hl   
1F38   CD 17 0E               CALL   run   
1F3B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F4A   CD 80 0C               CALL   flushBuffer   
1F4D   76                     HALT      
1F4E                EXPECTM_2887S91:      
1F4E   E1                     POP   HL   
1F4F                          ;*Macro unroll:  test "2 3 *", 6
1F4F   31 00 53               LD   SP,STACK   
1F52   CD 40 0D               CALL   coldInit   
1F55   CD 56 51               CALL   execStr   
1F58   32 20 33 20 2A 00      DB   "2 3 *",0   
1F5E   CD 80 0C               CALL   flushBuffer   
1F61   E1                     POP   HL   
1F62   E5                     PUSH   HL   
1F63   11 06 00               LD   DE,6   
1F66   B7                     OR   A   
1F67   ED 52                  SBC   HL,DE   
1F69   7D                     LD   A,L   
1F6A   B4                     OR   H   
1F6B   CA CB 1F               JP   Z,expectM_2888S92   
1F6E   CD F8 0C               CALL   printStr   
1F71   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1F7D   CD F8 0C               CALL   printStr   
1F80   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F8F   21 06 00               LD   hl,6   
1F92   E5                     PUSH   hl   
1F93   E5                     PUSH   hl   
1F94   CD 17 0E               CALL   run   
1F97   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F9F   CD 80 0C               CALL   flushBuffer   
1FA2   CD F8 0C               CALL   printStr   
1FA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FB2   E1                     POP   hl   
1FB3   E5                     PUSH   hl   
1FB4   E5                     PUSH   hl   
1FB5   CD 17 0E               CALL   run   
1FB8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FC7   CD 80 0C               CALL   flushBuffer   
1FCA   76                     HALT      
1FCB                EXPECTM_2888S92:      
1FCB   E1                     POP   HL   
1FCC                          ;*Macro unroll:  test "1 2 3 + *", 5
1FCC   31 00 53               LD   SP,STACK   
1FCF   CD 40 0D               CALL   coldInit   
1FD2   CD 56 51               CALL   execStr   
1FD5   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1FDF   CD 80 0C               CALL   flushBuffer   
1FE2   E1                     POP   HL   
1FE3   E5                     PUSH   HL   
1FE4   11 05 00               LD   DE,5   
1FE7   B7                     OR   A   
1FE8   ED 52                  SBC   HL,DE   
1FEA   7D                     LD   A,L   
1FEB   B4                     OR   H   
1FEC   CA 50 20               JP   Z,expectM_2889S93   
1FEF   CD F8 0C               CALL   printStr   
1FF2   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
2002   CD F8 0C               CALL   printStr   
2005   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2014   21 05 00               LD   hl,5   
2017   E5                     PUSH   hl   
2018   E5                     PUSH   hl   
2019   CD 17 0E               CALL   run   
201C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2024   CD 80 0C               CALL   flushBuffer   
2027   CD F8 0C               CALL   printStr   
202A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2037   E1                     POP   hl   
2038   E5                     PUSH   hl   
2039   E5                     PUSH   hl   
203A   CD 17 0E               CALL   run   
203D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
204C   CD 80 0C               CALL   flushBuffer   
204F   76                     HALT      
2050                EXPECTM_2889S93:      
2050   E1                     POP   HL   
2051                          ;*Macro unroll:  test "7 3 /", 2
2051   31 00 53               LD   SP,STACK   
2054   CD 40 0D               CALL   coldInit   
2057   CD 56 51               CALL   execStr   
205A   37 20 33 20 2F 00      DB   "7 3 /",0   
2060   CD 80 0C               CALL   flushBuffer   
2063   E1                     POP   HL   
2064   E5                     PUSH   HL   
2065   11 02 00               LD   DE,2   
2068   B7                     OR   A   
2069   ED 52                  SBC   HL,DE   
206B   7D                     LD   A,L   
206C   B4                     OR   H   
206D   CA CD 20               JP   Z,expectM_2890S94   
2070   CD F8 0C               CALL   printStr   
2073   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
207F   CD F8 0C               CALL   printStr   
2082   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2091   21 02 00               LD   hl,2   
2094   E5                     PUSH   hl   
2095   E5                     PUSH   hl   
2096   CD 17 0E               CALL   run   
2099   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20A1   CD 80 0C               CALL   flushBuffer   
20A4   CD F8 0C               CALL   printStr   
20A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20B4   E1                     POP   hl   
20B5   E5                     PUSH   hl   
20B6   E5                     PUSH   hl   
20B7   CD 17 0E               CALL   run   
20BA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20C9   CD 80 0C               CALL   flushBuffer   
20CC   76                     HALT      
20CD                EXPECTM_2890S94:      
20CD   E1                     POP   HL   
20CE                          ;*Macro unroll:  test "100a= 1a+= a", 101
20CE   31 00 53               LD   SP,STACK   
20D1   CD 40 0D               CALL   coldInit   
20D4   CD 56 51               CALL   execStr   
20D7   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
20E4   CD 80 0C               CALL   flushBuffer   
20E7   E1                     POP   HL   
20E8   E5                     PUSH   HL   
20E9   11 65 00               LD   DE,101   
20EC   B7                     OR   A   
20ED   ED 52                  SBC   HL,DE   
20EF   7D                     LD   A,L   
20F0   B4                     OR   H   
20F1   CA 58 21               JP   Z,expectM_2891S95   
20F4   CD F8 0C               CALL   printStr   
20F7   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
210A   CD F8 0C               CALL   printStr   
210D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
211C   21 65 00               LD   hl,101   
211F   E5                     PUSH   hl   
2120   E5                     PUSH   hl   
2121   CD 17 0E               CALL   run   
2124   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
212C   CD 80 0C               CALL   flushBuffer   
212F   CD F8 0C               CALL   printStr   
2132   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
213F   E1                     POP   hl   
2140   E5                     PUSH   hl   
2141   E5                     PUSH   hl   
2142   CD 17 0E               CALL   run   
2145   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2154   CD 80 0C               CALL   flushBuffer   
2157   76                     HALT      
2158                EXPECTM_2891S95:      
2158   E1                     POP   HL   
2159                          ;*Macro unroll:  test "100a= a1-= a", 99
2159   31 00 53               LD   SP,STACK   
215C   CD 40 0D               CALL   coldInit   
215F   CD 56 51               CALL   execStr   
2162   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
216F   CD 80 0C               CALL   flushBuffer   
2172   E1                     POP   HL   
2173   E5                     PUSH   HL   
2174   11 63 00               LD   DE,99   
2177   B7                     OR   A   
2178   ED 52                  SBC   HL,DE   
217A   7D                     LD   A,L   
217B   B4                     OR   H   
217C   CA E3 21               JP   Z,expectM_2892S96   
217F   CD F8 0C               CALL   printStr   
2182   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
2195   CD F8 0C               CALL   printStr   
2198   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21A7   21 63 00               LD   hl,99   
21AA   E5                     PUSH   hl   
21AB   E5                     PUSH   hl   
21AC   CD 17 0E               CALL   run   
21AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21B7   CD 80 0C               CALL   flushBuffer   
21BA   CD F8 0C               CALL   printStr   
21BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21CA   E1                     POP   hl   
21CB   E5                     PUSH   hl   
21CC   E5                     PUSH   hl   
21CD   CD 17 0E               CALL   run   
21D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21DF   CD 80 0C               CALL   flushBuffer   
21E2   76                     HALT      
21E3                EXPECTM_2892S96:      
21E3   E1                     POP   HL   
21E4                          ;*Macro unroll:  test "100a= a2*= a", 200
21E4   31 00 53               LD   SP,STACK   
21E7   CD 40 0D               CALL   coldInit   
21EA   CD 56 51               CALL   execStr   
21ED   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
21FA   CD 80 0C               CALL   flushBuffer   
21FD   E1                     POP   HL   
21FE   E5                     PUSH   HL   
21FF   11 C8 00               LD   DE,200   
2202   B7                     OR   A   
2203   ED 52                  SBC   HL,DE   
2205   7D                     LD   A,L   
2206   B4                     OR   H   
2207   CA 6E 22               JP   Z,expectM_2893S97   
220A   CD F8 0C               CALL   printStr   
220D   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
2220   CD F8 0C               CALL   printStr   
2223   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2232   21 C8 00               LD   hl,200   
2235   E5                     PUSH   hl   
2236   E5                     PUSH   hl   
2237   CD 17 0E               CALL   run   
223A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2242   CD 80 0C               CALL   flushBuffer   
2245   CD F8 0C               CALL   printStr   
2248   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2255   E1                     POP   hl   
2256   E5                     PUSH   hl   
2257   E5                     PUSH   hl   
2258   CD 17 0E               CALL   run   
225B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
226A   CD 80 0C               CALL   flushBuffer   
226D   76                     HALT      
226E                EXPECTM_2893S97:      
226E   E1                     POP   HL   
226F                          ;*Macro unroll:  test "100a= a2/= a", 50
226F   31 00 53               LD   SP,STACK   
2272   CD 40 0D               CALL   coldInit   
2275   CD 56 51               CALL   execStr   
2278   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
2285   CD 80 0C               CALL   flushBuffer   
2288   E1                     POP   HL   
2289   E5                     PUSH   HL   
228A   11 32 00               LD   DE,50   
228D   B7                     OR   A   
228E   ED 52                  SBC   HL,DE   
2290   7D                     LD   A,L   
2291   B4                     OR   H   
2292   CA F9 22               JP   Z,expectM_2894S98   
2295   CD F8 0C               CALL   printStr   
2298   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
22AB   CD F8 0C               CALL   printStr   
22AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22BD   21 32 00               LD   hl,50   
22C0   E5                     PUSH   hl   
22C1   E5                     PUSH   hl   
22C2   CD 17 0E               CALL   run   
22C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22CD   CD 80 0C               CALL   flushBuffer   
22D0   CD F8 0C               CALL   printStr   
22D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22E0   E1                     POP   hl   
22E1   E5                     PUSH   hl   
22E2   E5                     PUSH   hl   
22E3   CD 17 0E               CALL   run   
22E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22F5   CD 80 0C               CALL   flushBuffer   
22F8   76                     HALT      
22F9                EXPECTM_2894S98:      
22F9   E1                     POP   HL   
22FA                          ;*Macro unroll:  test "7 3 / /re", 1
22FA   31 00 53               LD   SP,STACK   
22FD   CD 40 0D               CALL   coldInit   
2300   CD 56 51               CALL   execStr   
2303   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
230D   CD 80 0C               CALL   flushBuffer   
2310   E1                     POP   HL   
2311   E5                     PUSH   HL   
2312   11 01 00               LD   DE,1   
2315   B7                     OR   A   
2316   ED 52                  SBC   HL,DE   
2318   7D                     LD   A,L   
2319   B4                     OR   H   
231A   CA 7E 23               JP   Z,expectM_2895S99   
231D   CD F8 0C               CALL   printStr   
2320   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2330   CD F8 0C               CALL   printStr   
2333   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2342   21 01 00               LD   hl,1   
2345   E5                     PUSH   hl   
2346   E5                     PUSH   hl   
2347   CD 17 0E               CALL   run   
234A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2352   CD 80 0C               CALL   flushBuffer   
2355   CD F8 0C               CALL   printStr   
2358   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2365   E1                     POP   hl   
2366   E5                     PUSH   hl   
2367   E5                     PUSH   hl   
2368   CD 17 0E               CALL   run   
236B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
237A   CD 80 0C               CALL   flushBuffer   
237D   76                     HALT      
237E                EXPECTM_2895S99:      
237E   E1                     POP   HL   
237F                          ;*Macro unroll:  test "7 3 /", 2
237F   31 00 53               LD   SP,STACK   
2382   CD 40 0D               CALL   coldInit   
2385   CD 56 51               CALL   execStr   
2388   37 20 33 20 2F 00      DB   "7 3 /",0   
238E   CD 80 0C               CALL   flushBuffer   
2391   E1                     POP   HL   
2392   E5                     PUSH   HL   
2393   11 02 00               LD   DE,2   
2396   B7                     OR   A   
2397   ED 52                  SBC   HL,DE   
2399   7D                     LD   A,L   
239A   B4                     OR   H   
239B   CA FB 23               JP   Z,expectM_2896S100   
239E   CD F8 0C               CALL   printStr   
23A1   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
23AD   CD F8 0C               CALL   printStr   
23B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23BF   21 02 00               LD   hl,2   
23C2   E5                     PUSH   hl   
23C3   E5                     PUSH   hl   
23C4   CD 17 0E               CALL   run   
23C7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23CF   CD 80 0C               CALL   flushBuffer   
23D2   CD F8 0C               CALL   printStr   
23D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23E2   E1                     POP   hl   
23E3   E5                     PUSH   hl   
23E4   E5                     PUSH   hl   
23E5   CD 17 0E               CALL   run   
23E8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23F7   CD 80 0C               CALL   flushBuffer   
23FA   76                     HALT      
23FB                EXPECTM_2896S100:      
23FB   E1                     POP   HL   
23FC                          ;*Macro unroll:  test "2 3 ==", FALSE
23FC   31 00 53               LD   SP,STACK   
23FF   CD 40 0D               CALL   coldInit   
2402   CD 56 51               CALL   execStr   
2405   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
240C   CD 80 0C               CALL   flushBuffer   
240F   E1                     POP   HL   
2410   E5                     PUSH   HL   
2411   11 00 00               LD   DE,FALSE   
2414   B7                     OR   A   
2415   ED 52                  SBC   HL,DE   
2417   7D                     LD   A,L   
2418   B4                     OR   H   
2419   CA 7A 24               JP   Z,expectM_2897S101   
241C   CD F8 0C               CALL   printStr   
241F   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
242C   CD F8 0C               CALL   printStr   
242F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
243E   21 00 00               LD   hl,FALSE   
2441   E5                     PUSH   hl   
2442   E5                     PUSH   hl   
2443   CD 17 0E               CALL   run   
2446   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
244E   CD 80 0C               CALL   flushBuffer   
2451   CD F8 0C               CALL   printStr   
2454   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2461   E1                     POP   hl   
2462   E5                     PUSH   hl   
2463   E5                     PUSH   hl   
2464   CD 17 0E               CALL   run   
2467   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2476   CD 80 0C               CALL   flushBuffer   
2479   76                     HALT      
247A                EXPECTM_2897S101:      
247A   E1                     POP   HL   
247B                          ;*Macro unroll:  test "3 3 ==", TRUE
247B   31 00 53               LD   SP,STACK   
247E   CD 40 0D               CALL   coldInit   
2481   CD 56 51               CALL   execStr   
2484   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
248B   CD 80 0C               CALL   flushBuffer   
248E   E1                     POP   HL   
248F   E5                     PUSH   HL   
2490   11 FF FF               LD   DE,TRUE   
2493   B7                     OR   A   
2494   ED 52                  SBC   HL,DE   
2496   7D                     LD   A,L   
2497   B4                     OR   H   
2498   CA F9 24               JP   Z,expectM_2898S102   
249B   CD F8 0C               CALL   printStr   
249E   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
24AB   CD F8 0C               CALL   printStr   
24AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24BD   21 FF FF               LD   hl,TRUE   
24C0   E5                     PUSH   hl   
24C1   E5                     PUSH   hl   
24C2   CD 17 0E               CALL   run   
24C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24CD   CD 80 0C               CALL   flushBuffer   
24D0   CD F8 0C               CALL   printStr   
24D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24E0   E1                     POP   hl   
24E1   E5                     PUSH   hl   
24E2   E5                     PUSH   hl   
24E3   CD 17 0E               CALL   run   
24E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24F5   CD 80 0C               CALL   flushBuffer   
24F8   76                     HALT      
24F9                EXPECTM_2898S102:      
24F9   E1                     POP   HL   
24FA                          ;*Macro unroll:  test "1 2 <", TRUE
24FA   31 00 53               LD   SP,STACK   
24FD   CD 40 0D               CALL   coldInit   
2500   CD 56 51               CALL   execStr   
2503   31 20 32 20 3C 00      DB   "1 2 <",0   
2509   CD 80 0C               CALL   flushBuffer   
250C   E1                     POP   HL   
250D   E5                     PUSH   HL   
250E   11 FF FF               LD   DE,TRUE   
2511   B7                     OR   A   
2512   ED 52                  SBC   HL,DE   
2514   7D                     LD   A,L   
2515   B4                     OR   H   
2516   CA 76 25               JP   Z,expectM_2899S103   
2519   CD F8 0C               CALL   printStr   
251C   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2528   CD F8 0C               CALL   printStr   
252B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
253A   21 FF FF               LD   hl,TRUE   
253D   E5                     PUSH   hl   
253E   E5                     PUSH   hl   
253F   CD 17 0E               CALL   run   
2542   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
254A   CD 80 0C               CALL   flushBuffer   
254D   CD F8 0C               CALL   printStr   
2550   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
255D   E1                     POP   hl   
255E   E5                     PUSH   hl   
255F   E5                     PUSH   hl   
2560   CD 17 0E               CALL   run   
2563   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2572   CD 80 0C               CALL   flushBuffer   
2575   76                     HALT      
2576                EXPECTM_2899S103:      
2576   E1                     POP   HL   
2577                          ;*Macro unroll:  test "2 1 <", FALSE
2577   31 00 53               LD   SP,STACK   
257A   CD 40 0D               CALL   coldInit   
257D   CD 56 51               CALL   execStr   
2580   32 20 31 20 3C 00      DB   "2 1 <",0   
2586   CD 80 0C               CALL   flushBuffer   
2589   E1                     POP   HL   
258A   E5                     PUSH   HL   
258B   11 00 00               LD   DE,FALSE   
258E   B7                     OR   A   
258F   ED 52                  SBC   HL,DE   
2591   7D                     LD   A,L   
2592   B4                     OR   H   
2593   CA F3 25               JP   Z,expectM_2900S104   
2596   CD F8 0C               CALL   printStr   
2599   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
25A5   CD F8 0C               CALL   printStr   
25A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25B7   21 00 00               LD   hl,FALSE   
25BA   E5                     PUSH   hl   
25BB   E5                     PUSH   hl   
25BC   CD 17 0E               CALL   run   
25BF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25C7   CD 80 0C               CALL   flushBuffer   
25CA   CD F8 0C               CALL   printStr   
25CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25DA   E1                     POP   hl   
25DB   E5                     PUSH   hl   
25DC   E5                     PUSH   hl   
25DD   CD 17 0E               CALL   run   
25E0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25EF   CD 80 0C               CALL   flushBuffer   
25F2   76                     HALT      
25F3                EXPECTM_2900S104:      
25F3   E1                     POP   HL   
25F4                          ;*Macro unroll:  test "2 3 <", TRUE
25F4   31 00 53               LD   SP,STACK   
25F7   CD 40 0D               CALL   coldInit   
25FA   CD 56 51               CALL   execStr   
25FD   32 20 33 20 3C 00      DB   "2 3 <",0   
2603   CD 80 0C               CALL   flushBuffer   
2606   E1                     POP   HL   
2607   E5                     PUSH   HL   
2608   11 FF FF               LD   DE,TRUE   
260B   B7                     OR   A   
260C   ED 52                  SBC   HL,DE   
260E   7D                     LD   A,L   
260F   B4                     OR   H   
2610   CA 70 26               JP   Z,expectM_2901S105   
2613   CD F8 0C               CALL   printStr   
2616   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2622   CD F8 0C               CALL   printStr   
2625   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2634   21 FF FF               LD   hl,TRUE   
2637   E5                     PUSH   hl   
2638   E5                     PUSH   hl   
2639   CD 17 0E               CALL   run   
263C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2644   CD 80 0C               CALL   flushBuffer   
2647   CD F8 0C               CALL   printStr   
264A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2657   E1                     POP   hl   
2658   E5                     PUSH   hl   
2659   E5                     PUSH   hl   
265A   CD 17 0E               CALL   run   
265D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
266C   CD 80 0C               CALL   flushBuffer   
266F   76                     HALT      
2670                EXPECTM_2901S105:      
2670   E1                     POP   HL   
2671                          ;*Macro unroll:  test "3 3 <", FALSE
2671   31 00 53               LD   SP,STACK   
2674   CD 40 0D               CALL   coldInit   
2677   CD 56 51               CALL   execStr   
267A   33 20 33 20 3C 00      DB   "3 3 <",0   
2680   CD 80 0C               CALL   flushBuffer   
2683   E1                     POP   HL   
2684   E5                     PUSH   HL   
2685   11 00 00               LD   DE,FALSE   
2688   B7                     OR   A   
2689   ED 52                  SBC   HL,DE   
268B   7D                     LD   A,L   
268C   B4                     OR   H   
268D   CA ED 26               JP   Z,expectM_2902S106   
2690   CD F8 0C               CALL   printStr   
2693   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
269F   CD F8 0C               CALL   printStr   
26A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26B1   21 00 00               LD   hl,FALSE   
26B4   E5                     PUSH   hl   
26B5   E5                     PUSH   hl   
26B6   CD 17 0E               CALL   run   
26B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26C1   CD 80 0C               CALL   flushBuffer   
26C4   CD F8 0C               CALL   printStr   
26C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26D4   E1                     POP   hl   
26D5   E5                     PUSH   hl   
26D6   E5                     PUSH   hl   
26D7   CD 17 0E               CALL   run   
26DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26E9   CD 80 0C               CALL   flushBuffer   
26EC   76                     HALT      
26ED                EXPECTM_2902S106:      
26ED   E1                     POP   HL   
26EE                          ;*Macro unroll:  test "1 2 >", FALSE
26EE   31 00 53               LD   SP,STACK   
26F1   CD 40 0D               CALL   coldInit   
26F4   CD 56 51               CALL   execStr   
26F7   31 20 32 20 3E 00      DB   "1 2 >",0   
26FD   CD 80 0C               CALL   flushBuffer   
2700   E1                     POP   HL   
2701   E5                     PUSH   HL   
2702   11 00 00               LD   DE,FALSE   
2705   B7                     OR   A   
2706   ED 52                  SBC   HL,DE   
2708   7D                     LD   A,L   
2709   B4                     OR   H   
270A   CA 6A 27               JP   Z,expectM_2903S107   
270D   CD F8 0C               CALL   printStr   
2710   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
271C   CD F8 0C               CALL   printStr   
271F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
272E   21 00 00               LD   hl,FALSE   
2731   E5                     PUSH   hl   
2732   E5                     PUSH   hl   
2733   CD 17 0E               CALL   run   
2736   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
273E   CD 80 0C               CALL   flushBuffer   
2741   CD F8 0C               CALL   printStr   
2744   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2751   E1                     POP   hl   
2752   E5                     PUSH   hl   
2753   E5                     PUSH   hl   
2754   CD 17 0E               CALL   run   
2757   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2766   CD 80 0C               CALL   flushBuffer   
2769   76                     HALT      
276A                EXPECTM_2903S107:      
276A   E1                     POP   HL   
276B                          ;*Macro unroll:  test "2 1 >", TRUE
276B   31 00 53               LD   SP,STACK   
276E   CD 40 0D               CALL   coldInit   
2771   CD 56 51               CALL   execStr   
2774   32 20 31 20 3E 00      DB   "2 1 >",0   
277A   CD 80 0C               CALL   flushBuffer   
277D   E1                     POP   HL   
277E   E5                     PUSH   HL   
277F   11 FF FF               LD   DE,TRUE   
2782   B7                     OR   A   
2783   ED 52                  SBC   HL,DE   
2785   7D                     LD   A,L   
2786   B4                     OR   H   
2787   CA E7 27               JP   Z,expectM_2904S108   
278A   CD F8 0C               CALL   printStr   
278D   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2799   CD F8 0C               CALL   printStr   
279C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27AB   21 FF FF               LD   hl,TRUE   
27AE   E5                     PUSH   hl   
27AF   E5                     PUSH   hl   
27B0   CD 17 0E               CALL   run   
27B3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27BB   CD 80 0C               CALL   flushBuffer   
27BE   CD F8 0C               CALL   printStr   
27C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27CE   E1                     POP   hl   
27CF   E5                     PUSH   hl   
27D0   E5                     PUSH   hl   
27D1   CD 17 0E               CALL   run   
27D4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27E3   CD 80 0C               CALL   flushBuffer   
27E6   76                     HALT      
27E7                EXPECTM_2904S108:      
27E7   E1                     POP   HL   
27E8                          ;*Macro unroll:  test "3 3 >", FALSE
27E8   31 00 53               LD   SP,STACK   
27EB   CD 40 0D               CALL   coldInit   
27EE   CD 56 51               CALL   execStr   
27F1   33 20 33 20 3E 00      DB   "3 3 >",0   
27F7   CD 80 0C               CALL   flushBuffer   
27FA   E1                     POP   HL   
27FB   E5                     PUSH   HL   
27FC   11 00 00               LD   DE,FALSE   
27FF   B7                     OR   A   
2800   ED 52                  SBC   HL,DE   
2802   7D                     LD   A,L   
2803   B4                     OR   H   
2804   CA 64 28               JP   Z,expectM_2905S109   
2807   CD F8 0C               CALL   printStr   
280A   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2816   CD F8 0C               CALL   printStr   
2819   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2828   21 00 00               LD   hl,FALSE   
282B   E5                     PUSH   hl   
282C   E5                     PUSH   hl   
282D   CD 17 0E               CALL   run   
2830   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2838   CD 80 0C               CALL   flushBuffer   
283B   CD F8 0C               CALL   printStr   
283E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
284B   E1                     POP   hl   
284C   E5                     PUSH   hl   
284D   E5                     PUSH   hl   
284E   CD 17 0E               CALL   run   
2851   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2860   CD 80 0C               CALL   flushBuffer   
2863   76                     HALT      
2864                EXPECTM_2905S109:      
2864   E1                     POP   HL   
2865                          ;*Macro unroll:  test "4 3 >", TRUE
2865   31 00 53               LD   SP,STACK   
2868   CD 40 0D               CALL   coldInit   
286B   CD 56 51               CALL   execStr   
286E   34 20 33 20 3E 00      DB   "4 3 >",0   
2874   CD 80 0C               CALL   flushBuffer   
2877   E1                     POP   HL   
2878   E5                     PUSH   HL   
2879   11 FF FF               LD   DE,TRUE   
287C   B7                     OR   A   
287D   ED 52                  SBC   HL,DE   
287F   7D                     LD   A,L   
2880   B4                     OR   H   
2881   CA E1 28               JP   Z,expectM_2906S110   
2884   CD F8 0C               CALL   printStr   
2887   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2893   CD F8 0C               CALL   printStr   
2896   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28A5   21 FF FF               LD   hl,TRUE   
28A8   E5                     PUSH   hl   
28A9   E5                     PUSH   hl   
28AA   CD 17 0E               CALL   run   
28AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28B5   CD 80 0C               CALL   flushBuffer   
28B8   CD F8 0C               CALL   printStr   
28BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28C8   E1                     POP   hl   
28C9   E5                     PUSH   hl   
28CA   E5                     PUSH   hl   
28CB   CD 17 0E               CALL   run   
28CE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28DD   CD 80 0C               CALL   flushBuffer   
28E0   76                     HALT      
28E1                EXPECTM_2906S110:      
28E1   E1                     POP   HL   
28E2                          ;*Macro unroll:  test "2 2 <=", TRUE
28E2   31 00 53               LD   SP,STACK   
28E5   CD 40 0D               CALL   coldInit   
28E8   CD 56 51               CALL   execStr   
28EB   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
28F2   CD 80 0C               CALL   flushBuffer   
28F5   E1                     POP   HL   
28F6   E5                     PUSH   HL   
28F7   11 FF FF               LD   DE,TRUE   
28FA   B7                     OR   A   
28FB   ED 52                  SBC   HL,DE   
28FD   7D                     LD   A,L   
28FE   B4                     OR   H   
28FF   CA 60 29               JP   Z,expectM_2907S111   
2902   CD F8 0C               CALL   printStr   
2905   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2912   CD F8 0C               CALL   printStr   
2915   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2924   21 FF FF               LD   hl,TRUE   
2927   E5                     PUSH   hl   
2928   E5                     PUSH   hl   
2929   CD 17 0E               CALL   run   
292C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2934   CD 80 0C               CALL   flushBuffer   
2937   CD F8 0C               CALL   printStr   
293A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2947   E1                     POP   hl   
2948   E5                     PUSH   hl   
2949   E5                     PUSH   hl   
294A   CD 17 0E               CALL   run   
294D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
295C   CD 80 0C               CALL   flushBuffer   
295F   76                     HALT      
2960                EXPECTM_2907S111:      
2960   E1                     POP   HL   
2961                          ;*Macro unroll:  test "2 2 >=", TRUE
2961   31 00 53               LD   SP,STACK   
2964   CD 40 0D               CALL   coldInit   
2967   CD 56 51               CALL   execStr   
296A   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2971   CD 80 0C               CALL   flushBuffer   
2974   E1                     POP   HL   
2975   E5                     PUSH   HL   
2976   11 FF FF               LD   DE,TRUE   
2979   B7                     OR   A   
297A   ED 52                  SBC   HL,DE   
297C   7D                     LD   A,L   
297D   B4                     OR   H   
297E   CA DF 29               JP   Z,expectM_2908S112   
2981   CD F8 0C               CALL   printStr   
2984   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2991   CD F8 0C               CALL   printStr   
2994   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29A3   21 FF FF               LD   hl,TRUE   
29A6   E5                     PUSH   hl   
29A7   E5                     PUSH   hl   
29A8   CD 17 0E               CALL   run   
29AB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29B3   CD 80 0C               CALL   flushBuffer   
29B6   CD F8 0C               CALL   printStr   
29B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29C6   E1                     POP   hl   
29C7   E5                     PUSH   hl   
29C8   E5                     PUSH   hl   
29C9   CD 17 0E               CALL   run   
29CC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29DB   CD 80 0C               CALL   flushBuffer   
29DE   76                     HALT      
29DF                EXPECTM_2908S112:      
29DF   E1                     POP   HL   
29E0                          ;*Macro unroll:  test "3 1 <<", 6
29E0   31 00 53               LD   SP,STACK   
29E3   CD 40 0D               CALL   coldInit   
29E6   CD 56 51               CALL   execStr   
29E9   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
29F0   CD 80 0C               CALL   flushBuffer   
29F3   E1                     POP   HL   
29F4   E5                     PUSH   HL   
29F5   11 06 00               LD   DE,6   
29F8   B7                     OR   A   
29F9   ED 52                  SBC   HL,DE   
29FB   7D                     LD   A,L   
29FC   B4                     OR   H   
29FD   CA 5E 2A               JP   Z,expectM_2909S113   
2A00   CD F8 0C               CALL   printStr   
2A03   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2A10   CD F8 0C               CALL   printStr   
2A13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A22   21 06 00               LD   hl,6   
2A25   E5                     PUSH   hl   
2A26   E5                     PUSH   hl   
2A27   CD 17 0E               CALL   run   
2A2A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A32   CD 80 0C               CALL   flushBuffer   
2A35   CD F8 0C               CALL   printStr   
2A38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A45   E1                     POP   hl   
2A46   E5                     PUSH   hl   
2A47   E5                     PUSH   hl   
2A48   CD 17 0E               CALL   run   
2A4B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A5A   CD 80 0C               CALL   flushBuffer   
2A5D   76                     HALT      
2A5E                EXPECTM_2909S113:      
2A5E   E1                     POP   HL   
2A5F                          ;*Macro unroll:  test "10 1 >>", 5
2A5F   31 00 53               LD   SP,STACK   
2A62   CD 40 0D               CALL   coldInit   
2A65   CD 56 51               CALL   execStr   
2A68   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2A70   CD 80 0C               CALL   flushBuffer   
2A73   E1                     POP   HL   
2A74   E5                     PUSH   HL   
2A75   11 05 00               LD   DE,5   
2A78   B7                     OR   A   
2A79   ED 52                  SBC   HL,DE   
2A7B   7D                     LD   A,L   
2A7C   B4                     OR   H   
2A7D   CA DF 2A               JP   Z,expectM_2910S114   
2A80   CD F8 0C               CALL   printStr   
2A83   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2A91   CD F8 0C               CALL   printStr   
2A94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AA3   21 05 00               LD   hl,5   
2AA6   E5                     PUSH   hl   
2AA7   E5                     PUSH   hl   
2AA8   CD 17 0E               CALL   run   
2AAB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AB3   CD 80 0C               CALL   flushBuffer   
2AB6   CD F8 0C               CALL   printStr   
2AB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AC6   E1                     POP   hl   
2AC7   E5                     PUSH   hl   
2AC8   E5                     PUSH   hl   
2AC9   CD 17 0E               CALL   run   
2ACC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2ADB   CD 80 0C               CALL   flushBuffer   
2ADE   76                     HALT      
2ADF                EXPECTM_2910S114:      
2ADF   E1                     POP   HL   
2AE0                          ;*Macro unroll:  test "1 x = x", 1
2AE0   31 00 53               LD   SP,STACK   
2AE3   CD 40 0D               CALL   coldInit   
2AE6   CD 56 51               CALL   execStr   
2AE9   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2AF1   CD 80 0C               CALL   flushBuffer   
2AF4   E1                     POP   HL   
2AF5   E5                     PUSH   HL   
2AF6   11 01 00               LD   DE,1   
2AF9   B7                     OR   A   
2AFA   ED 52                  SBC   HL,DE   
2AFC   7D                     LD   A,L   
2AFD   B4                     OR   H   
2AFE   CA 60 2B               JP   Z,expectM_2911S115   
2B01   CD F8 0C               CALL   printStr   
2B04   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2B12   CD F8 0C               CALL   printStr   
2B15   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B24   21 01 00               LD   hl,1   
2B27   E5                     PUSH   hl   
2B28   E5                     PUSH   hl   
2B29   CD 17 0E               CALL   run   
2B2C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B34   CD 80 0C               CALL   flushBuffer   
2B37   CD F8 0C               CALL   printStr   
2B3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B47   E1                     POP   hl   
2B48   E5                     PUSH   hl   
2B49   E5                     PUSH   hl   
2B4A   CD 17 0E               CALL   run   
2B4D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B5C   CD 80 0C               CALL   flushBuffer   
2B5F   76                     HALT      
2B60                EXPECTM_2911S115:      
2B60   E1                     POP   HL   
2B61                          ;*Macro unroll:  test "1{}^", 1
2B61   31 00 53               LD   SP,STACK   
2B64   CD 40 0D               CALL   coldInit   
2B67   CD 56 51               CALL   execStr   
2B6A   31 7B 7D 5E 00         DB   "1{}^",0   
2B6F   CD 80 0C               CALL   flushBuffer   
2B72   E1                     POP   HL   
2B73   E5                     PUSH   HL   
2B74   11 01 00               LD   DE,1   
2B77   B7                     OR   A   
2B78   ED 52                  SBC   HL,DE   
2B7A   7D                     LD   A,L   
2B7B   B4                     OR   H   
2B7C   CA DB 2B               JP   Z,expectM_2912S116   
2B7F   CD F8 0C               CALL   printStr   
2B82   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2B8D   CD F8 0C               CALL   printStr   
2B90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B9F   21 01 00               LD   hl,1   
2BA2   E5                     PUSH   hl   
2BA3   E5                     PUSH   hl   
2BA4   CD 17 0E               CALL   run   
2BA7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BAF   CD 80 0C               CALL   flushBuffer   
2BB2   CD F8 0C               CALL   printStr   
2BB5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BC2   E1                     POP   hl   
2BC3   E5                     PUSH   hl   
2BC4   E5                     PUSH   hl   
2BC5   CD 17 0E               CALL   run   
2BC8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BD7   CD 80 0C               CALL   flushBuffer   
2BDA   76                     HALT      
2BDB                EXPECTM_2912S116:      
2BDB   E1                     POP   HL   
2BDC                          ;*Macro unroll:  test "{1}^", 1
2BDC   31 00 53               LD   SP,STACK   
2BDF   CD 40 0D               CALL   coldInit   
2BE2   CD 56 51               CALL   execStr   
2BE5   7B 31 7D 5E 00         DB   "{1}^",0   
2BEA   CD 80 0C               CALL   flushBuffer   
2BED   E1                     POP   HL   
2BEE   E5                     PUSH   HL   
2BEF   11 01 00               LD   DE,1   
2BF2   B7                     OR   A   
2BF3   ED 52                  SBC   HL,DE   
2BF5   7D                     LD   A,L   
2BF6   B4                     OR   H   
2BF7   CA 56 2C               JP   Z,expectM_2913S117   
2BFA   CD F8 0C               CALL   printStr   
2BFD   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2C08   CD F8 0C               CALL   printStr   
2C0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C1A   21 01 00               LD   hl,1   
2C1D   E5                     PUSH   hl   
2C1E   E5                     PUSH   hl   
2C1F   CD 17 0E               CALL   run   
2C22   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C2A   CD 80 0C               CALL   flushBuffer   
2C2D   CD F8 0C               CALL   printStr   
2C30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C3D   E1                     POP   hl   
2C3E   E5                     PUSH   hl   
2C3F   E5                     PUSH   hl   
2C40   CD 17 0E               CALL   run   
2C43   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C52   CD 80 0C               CALL   flushBuffer   
2C55   76                     HALT      
2C56                EXPECTM_2913S117:      
2C56   E1                     POP   HL   
2C57                          ;*Macro unroll:  test "{{1}^}^", 1
2C57   31 00 53               LD   SP,STACK   
2C5A   CD 40 0D               CALL   coldInit   
2C5D   CD 56 51               CALL   execStr   
2C60   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2C68   CD 80 0C               CALL   flushBuffer   
2C6B   E1                     POP   HL   
2C6C   E5                     PUSH   HL   
2C6D   11 01 00               LD   DE,1   
2C70   B7                     OR   A   
2C71   ED 52                  SBC   HL,DE   
2C73   7D                     LD   A,L   
2C74   B4                     OR   H   
2C75   CA D7 2C               JP   Z,expectM_2914S118   
2C78   CD F8 0C               CALL   printStr   
2C7B   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2C89   CD F8 0C               CALL   printStr   
2C8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C9B   21 01 00               LD   hl,1   
2C9E   E5                     PUSH   hl   
2C9F   E5                     PUSH   hl   
2CA0   CD 17 0E               CALL   run   
2CA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CAB   CD 80 0C               CALL   flushBuffer   
2CAE   CD F8 0C               CALL   printStr   
2CB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CBE   E1                     POP   hl   
2CBF   E5                     PUSH   hl   
2CC0   E5                     PUSH   hl   
2CC1   CD 17 0E               CALL   run   
2CC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CD3   CD 80 0C               CALL   flushBuffer   
2CD6   76                     HALT      
2CD7                EXPECTM_2914S118:      
2CD7   E1                     POP   HL   
2CD8                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2CD8   31 00 53               LD   SP,STACK   
2CDB   CD 40 0D               CALL   coldInit   
2CDE   CD 56 51               CALL   execStr   
2CE1   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2CEC   CD 80 0C               CALL   flushBuffer   
2CEF   E1                     POP   HL   
2CF0   E5                     PUSH   HL   
2CF1   11 01 00               LD   DE,1   
2CF4   B7                     OR   A   
2CF5   ED 52                  SBC   HL,DE   
2CF7   7D                     LD   A,L   
2CF8   B4                     OR   H   
2CF9   CA 5E 2D               JP   Z,expectM_2915S119   
2CFC   CD F8 0C               CALL   printStr   
2CFF   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2D10   CD F8 0C               CALL   printStr   
2D13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D22   21 01 00               LD   hl,1   
2D25   E5                     PUSH   hl   
2D26   E5                     PUSH   hl   
2D27   CD 17 0E               CALL   run   
2D2A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D32   CD 80 0C               CALL   flushBuffer   
2D35   CD F8 0C               CALL   printStr   
2D38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D45   E1                     POP   hl   
2D46   E5                     PUSH   hl   
2D47   E5                     PUSH   hl   
2D48   CD 17 0E               CALL   run   
2D4B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D5A   CD 80 0C               CALL   flushBuffer   
2D5D   76                     HALT      
2D5E                EXPECTM_2915S119:      
2D5E   E1                     POP   HL   
2D5F                          ;*Macro unroll:  test "5 /f{10} ?", 5
2D5F   31 00 53               LD   SP,STACK   
2D62   CD 40 0D               CALL   coldInit   
2D65   CD 56 51               CALL   execStr   
2D68   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2D73   CD 80 0C               CALL   flushBuffer   
2D76   E1                     POP   HL   
2D77   E5                     PUSH   HL   
2D78   11 05 00               LD   DE,5   
2D7B   B7                     OR   A   
2D7C   ED 52                  SBC   HL,DE   
2D7E   7D                     LD   A,L   
2D7F   B4                     OR   H   
2D80   CA E5 2D               JP   Z,expectM_2916S120   
2D83   CD F8 0C               CALL   printStr   
2D86   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2D97   CD F8 0C               CALL   printStr   
2D9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DA9   21 05 00               LD   hl,5   
2DAC   E5                     PUSH   hl   
2DAD   E5                     PUSH   hl   
2DAE   CD 17 0E               CALL   run   
2DB1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DB9   CD 80 0C               CALL   flushBuffer   
2DBC   CD F8 0C               CALL   printStr   
2DBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DCC   E1                     POP   hl   
2DCD   E5                     PUSH   hl   
2DCE   E5                     PUSH   hl   
2DCF   CD 17 0E               CALL   run   
2DD2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DE1   CD 80 0C               CALL   flushBuffer   
2DE4   76                     HALT      
2DE5                EXPECTM_2916S120:      
2DE5   E1                     POP   HL   
2DE6                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2DE6   31 00 53               LD   SP,STACK   
2DE9   CD 40 0D               CALL   coldInit   
2DEC   CD 56 51               CALL   execStr   
2DEF   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2DFC   CD 80 0C               CALL   flushBuffer   
2DFF   E1                     POP   HL   
2E00   E5                     PUSH   HL   
2E01   11 0F 00               LD   DE,15   
2E04   B7                     OR   A   
2E05   ED 52                  SBC   HL,DE   
2E07   7D                     LD   A,L   
2E08   B4                     OR   H   
2E09   CA 70 2E               JP   Z,expectM_2917S121   
2E0C   CD F8 0C               CALL   printStr   
2E0F   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2E22   CD F8 0C               CALL   printStr   
2E25   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E34   21 0F 00               LD   hl,15   
2E37   E5                     PUSH   hl   
2E38   E5                     PUSH   hl   
2E39   CD 17 0E               CALL   run   
2E3C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E44   CD 80 0C               CALL   flushBuffer   
2E47   CD F8 0C               CALL   printStr   
2E4A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E57   E1                     POP   hl   
2E58   E5                     PUSH   hl   
2E59   E5                     PUSH   hl   
2E5A   CD 17 0E               CALL   run   
2E5D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E6C   CD 80 0C               CALL   flushBuffer   
2E6F   76                     HALT      
2E70                EXPECTM_2917S121:      
2E70   E1                     POP   HL   
2E71                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2E71   31 00 53               LD   SP,STACK   
2E74   CD 40 0D               CALL   coldInit   
2E77   CD 56 51               CALL   execStr   
2E7A   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2E8C   CD 80 0C               CALL   flushBuffer   
2E8F   E1                     POP   HL   
2E90   E5                     PUSH   HL   
2E91   11 15 00               LD   DE,21   
2E94   B7                     OR   A   
2E95   ED 52                  SBC   HL,DE   
2E97   7D                     LD   A,L   
2E98   B4                     OR   H   
2E99   CA 05 2F               JP   Z,expectM_2918S122   
2E9C   CD F8 0C               CALL   printStr   
2E9F   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2EB7   CD F8 0C               CALL   printStr   
2EBA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EC9   21 15 00               LD   hl,21   
2ECC   E5                     PUSH   hl   
2ECD   E5                     PUSH   hl   
2ECE   CD 17 0E               CALL   run   
2ED1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2ED9   CD 80 0C               CALL   flushBuffer   
2EDC   CD F8 0C               CALL   printStr   
2EDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EEC   E1                     POP   hl   
2EED   E5                     PUSH   hl   
2EEE   E5                     PUSH   hl   
2EEF   CD 17 0E               CALL   run   
2EF2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F01   CD 80 0C               CALL   flushBuffer   
2F04   76                     HALT      
2F05                EXPECTM_2918S122:      
2F05   E1                     POP   HL   
2F06                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2F06   31 00 53               LD   SP,STACK   
2F09   CD 40 0D               CALL   coldInit   
2F0C   CD 56 51               CALL   execStr   
2F0F   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2F21   CD 80 0C               CALL   flushBuffer   
2F24   E1                     POP   HL   
2F25   E5                     PUSH   HL   
2F26   11 0B 00               LD   DE,11   
2F29   B7                     OR   A   
2F2A   ED 52                  SBC   HL,DE   
2F2C   7D                     LD   A,L   
2F2D   B4                     OR   H   
2F2E   CA 9A 2F               JP   Z,expectM_2919S123   
2F31   CD F8 0C               CALL   printStr   
2F34   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2F4C   CD F8 0C               CALL   printStr   
2F4F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F5E   21 0B 00               LD   hl,11   
2F61   E5                     PUSH   hl   
2F62   E5                     PUSH   hl   
2F63   CD 17 0E               CALL   run   
2F66   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F6E   CD 80 0C               CALL   flushBuffer   
2F71   CD F8 0C               CALL   printStr   
2F74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F81   E1                     POP   hl   
2F82   E5                     PUSH   hl   
2F83   E5                     PUSH   hl   
2F84   CD 17 0E               CALL   run   
2F87   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F96   CD 80 0C               CALL   flushBuffer   
2F99   76                     HALT      
2F9A                EXPECTM_2919S123:      
2F9A   E1                     POP   HL   
2F9B                          ;*Macro unroll:  test ": 0#", $0000
2F9B   31 00 53               LD   SP,STACK   
2F9E   CD 40 0D               CALL   coldInit   
2FA1   CD 56 51               CALL   execStr   
2FA4   3A 20 30 23 00         DB   ": 0#",0   
2FA9   CD 80 0C               CALL   flushBuffer   
2FAC   E1                     POP   HL   
2FAD   E5                     PUSH   HL   
2FAE   11 00 00               LD   DE,$0000   
2FB1   B7                     OR   A   
2FB2   ED 52                  SBC   HL,DE   
2FB4   7D                     LD   A,L   
2FB5   B4                     OR   H   
2FB6   CA 15 30               JP   Z,expectM_2920S124   
2FB9   CD F8 0C               CALL   printStr   
2FBC   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
2FC7   CD F8 0C               CALL   printStr   
2FCA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FD9   21 00 00               LD   hl,$0000   
2FDC   E5                     PUSH   hl   
2FDD   E5                     PUSH   hl   
2FDE   CD 17 0E               CALL   run   
2FE1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FE9   CD 80 0C               CALL   flushBuffer   
2FEC   CD F8 0C               CALL   printStr   
2FEF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FFC   E1                     POP   hl   
2FFD   E5                     PUSH   hl   
2FFE   E5                     PUSH   hl   
2FFF   CD 17 0E               CALL   run   
3002   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3011   CD 80 0C               CALL   flushBuffer   
3014   76                     HALT      
3015                EXPECTM_2920S124:      
3015   E1                     POP   HL   
3016                          ;*Macro unroll:  test ":a 0#", $0100
3016   31 00 53               LD   SP,STACK   
3019   CD 40 0D               CALL   coldInit   
301C   CD 56 51               CALL   execStr   
301F   3A 61 20 30 23 00      DB   ":a 0#",0   
3025   CD 80 0C               CALL   flushBuffer   
3028   E1                     POP   HL   
3029   E5                     PUSH   HL   
302A   11 00 01               LD   DE,$0100   
302D   B7                     OR   A   
302E   ED 52                  SBC   HL,DE   
3030   7D                     LD   A,L   
3031   B4                     OR   H   
3032   CA 92 30               JP   Z,expectM_2921S125   
3035   CD F8 0C               CALL   printStr   
3038   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
3044   CD F8 0C               CALL   printStr   
3047   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3056   21 00 01               LD   hl,$0100   
3059   E5                     PUSH   hl   
305A   E5                     PUSH   hl   
305B   CD 17 0E               CALL   run   
305E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3066   CD 80 0C               CALL   flushBuffer   
3069   CD F8 0C               CALL   printStr   
306C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3079   E1                     POP   hl   
307A   E5                     PUSH   hl   
307B   E5                     PUSH   hl   
307C   CD 17 0E               CALL   run   
307F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
308E   CD 80 0C               CALL   flushBuffer   
3091   76                     HALT      
3092                EXPECTM_2921S125:      
3092   E1                     POP   HL   
3093                          ;*Macro unroll:  test ":a: 0#", $0100
3093   31 00 53               LD   SP,STACK   
3096   CD 40 0D               CALL   coldInit   
3099   CD 56 51               CALL   execStr   
309C   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
30A3   CD 80 0C               CALL   flushBuffer   
30A6   E1                     POP   HL   
30A7   E5                     PUSH   HL   
30A8   11 00 01               LD   DE,$0100   
30AB   B7                     OR   A   
30AC   ED 52                  SBC   HL,DE   
30AE   7D                     LD   A,L   
30AF   B4                     OR   H   
30B0   CA 11 31               JP   Z,expectM_2922S126   
30B3   CD F8 0C               CALL   printStr   
30B6   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
30C3   CD F8 0C               CALL   printStr   
30C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30D5   21 00 01               LD   hl,$0100   
30D8   E5                     PUSH   hl   
30D9   E5                     PUSH   hl   
30DA   CD 17 0E               CALL   run   
30DD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30E5   CD 80 0C               CALL   flushBuffer   
30E8   CD F8 0C               CALL   printStr   
30EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30F8   E1                     POP   hl   
30F9   E5                     PUSH   hl   
30FA   E5                     PUSH   hl   
30FB   CD 17 0E               CALL   run   
30FE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
310D   CD 80 0C               CALL   flushBuffer   
3110   76                     HALT      
3111                EXPECTM_2922S126:      
3111   E1                     POP   HL   
3112                          ;*Macro unroll:  test ":a:b 0#", $0201
3112   31 00 53               LD   SP,STACK   
3115   CD 40 0D               CALL   coldInit   
3118   CD 56 51               CALL   execStr   
311B   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
3123   CD 80 0C               CALL   flushBuffer   
3126   E1                     POP   HL   
3127   E5                     PUSH   HL   
3128   11 01 02               LD   DE,$0201   
312B   B7                     OR   A   
312C   ED 52                  SBC   HL,DE   
312E   7D                     LD   A,L   
312F   B4                     OR   H   
3130   CA 92 31               JP   Z,expectM_2923S127   
3133   CD F8 0C               CALL   printStr   
3136   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
3144   CD F8 0C               CALL   printStr   
3147   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3156   21 01 02               LD   hl,$0201   
3159   E5                     PUSH   hl   
315A   E5                     PUSH   hl   
315B   CD 17 0E               CALL   run   
315E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3166   CD 80 0C               CALL   flushBuffer   
3169   CD F8 0C               CALL   printStr   
316C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3179   E1                     POP   hl   
317A   E5                     PUSH   hl   
317B   E5                     PUSH   hl   
317C   CD 17 0E               CALL   run   
317F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
318E   CD 80 0C               CALL   flushBuffer   
3191   76                     HALT      
3192                EXPECTM_2923S127:      
3192   E1                     POP   HL   
3193                          ;*Macro unroll:  test "::b 0#", $0101
3193   31 00 53               LD   SP,STACK   
3196   CD 40 0D               CALL   coldInit   
3199   CD 56 51               CALL   execStr   
319C   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
31A3   CD 80 0C               CALL   flushBuffer   
31A6   E1                     POP   HL   
31A7   E5                     PUSH   HL   
31A8   11 01 01               LD   DE,$0101   
31AB   B7                     OR   A   
31AC   ED 52                  SBC   HL,DE   
31AE   7D                     LD   A,L   
31AF   B4                     OR   H   
31B0   CA 11 32               JP   Z,expectM_2924S128   
31B3   CD F8 0C               CALL   printStr   
31B6   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
31C3   CD F8 0C               CALL   printStr   
31C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31D5   21 01 01               LD   hl,$0101   
31D8   E5                     PUSH   hl   
31D9   E5                     PUSH   hl   
31DA   CD 17 0E               CALL   run   
31DD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31E5   CD 80 0C               CALL   flushBuffer   
31E8   CD F8 0C               CALL   printStr   
31EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31F8   E1                     POP   hl   
31F9   E5                     PUSH   hl   
31FA   E5                     PUSH   hl   
31FB   CD 17 0E               CALL   run   
31FE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
320D   CD 80 0C               CALL   flushBuffer   
3210   76                     HALT      
3211                EXPECTM_2924S128:      
3211   E1                     POP   HL   
3212                          ;*Macro unroll:  test ":{2};^", 2
3212   31 00 53               LD   SP,STACK   
3215   CD 40 0D               CALL   coldInit   
3218   CD 56 51               CALL   execStr   
321B   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
3222   CD 80 0C               CALL   flushBuffer   
3225   E1                     POP   HL   
3226   E5                     PUSH   HL   
3227   11 02 00               LD   DE,2   
322A   B7                     OR   A   
322B   ED 52                  SBC   HL,DE   
322D   7D                     LD   A,L   
322E   B4                     OR   H   
322F   CA 90 32               JP   Z,expectM_2925S129   
3232   CD F8 0C               CALL   printStr   
3235   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
3242   CD F8 0C               CALL   printStr   
3245   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3254   21 02 00               LD   hl,2   
3257   E5                     PUSH   hl   
3258   E5                     PUSH   hl   
3259   CD 17 0E               CALL   run   
325C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3264   CD 80 0C               CALL   flushBuffer   
3267   CD F8 0C               CALL   printStr   
326A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3277   E1                     POP   hl   
3278   E5                     PUSH   hl   
3279   E5                     PUSH   hl   
327A   CD 17 0E               CALL   run   
327D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
328C   CD 80 0C               CALL   flushBuffer   
328F   76                     HALT      
3290                EXPECTM_2925S129:      
3290   E1                     POP   HL   
3291                          ;*Macro unroll:  test ":a{2};^", 2
3291   31 00 53               LD   SP,STACK   
3294   CD 40 0D               CALL   coldInit   
3297   CD 56 51               CALL   execStr   
329A   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
32A2   CD 80 0C               CALL   flushBuffer   
32A5   E1                     POP   HL   
32A6   E5                     PUSH   HL   
32A7   11 02 00               LD   DE,2   
32AA   B7                     OR   A   
32AB   ED 52                  SBC   HL,DE   
32AD   7D                     LD   A,L   
32AE   B4                     OR   H   
32AF   CA 11 33               JP   Z,expectM_2926S130   
32B2   CD F8 0C               CALL   printStr   
32B5   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
32C3   CD F8 0C               CALL   printStr   
32C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32D5   21 02 00               LD   hl,2   
32D8   E5                     PUSH   hl   
32D9   E5                     PUSH   hl   
32DA   CD 17 0E               CALL   run   
32DD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32E5   CD 80 0C               CALL   flushBuffer   
32E8   CD F8 0C               CALL   printStr   
32EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32F8   E1                     POP   hl   
32F9   E5                     PUSH   hl   
32FA   E5                     PUSH   hl   
32FB   CD 17 0E               CALL   run   
32FE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
330D   CD 80 0C               CALL   flushBuffer   
3310   76                     HALT      
3311                EXPECTM_2926S130:      
3311   E1                     POP   HL   
3312                          ;*Macro unroll:  test "5 :a{%a};^", 5
3312   31 00 53               LD   SP,STACK   
3315   CD 40 0D               CALL   coldInit   
3318   CD 56 51               CALL   execStr   
331B   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
3326   CD 80 0C               CALL   flushBuffer   
3329   E1                     POP   HL   
332A   E5                     PUSH   HL   
332B   11 05 00               LD   DE,5   
332E   B7                     OR   A   
332F   ED 52                  SBC   HL,DE   
3331   7D                     LD   A,L   
3332   B4                     OR   H   
3333   CA 98 33               JP   Z,expectM_2927S131   
3336   CD F8 0C               CALL   printStr   
3339   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
334A   CD F8 0C               CALL   printStr   
334D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
335C   21 05 00               LD   hl,5   
335F   E5                     PUSH   hl   
3360   E5                     PUSH   hl   
3361   CD 17 0E               CALL   run   
3364   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
336C   CD 80 0C               CALL   flushBuffer   
336F   CD F8 0C               CALL   printStr   
3372   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
337F   E1                     POP   hl   
3380   E5                     PUSH   hl   
3381   E5                     PUSH   hl   
3382   CD 17 0E               CALL   run   
3385   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3394   CD 80 0C               CALL   flushBuffer   
3397   76                     HALT      
3398                EXPECTM_2927S131:      
3398   E1                     POP   HL   
3399                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
3399   31 00 53               LD   SP,STACK   
339C   CD 40 0D               CALL   coldInit   
339F   CD 56 51               CALL   execStr   
33A2   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
33AF   CD 80 0C               CALL   flushBuffer   
33B2   E1                     POP   HL   
33B3   E5                     PUSH   HL   
33B4   11 05 00               LD   DE,5   
33B7   B7                     OR   A   
33B8   ED 52                  SBC   HL,DE   
33BA   7D                     LD   A,L   
33BB   B4                     OR   H   
33BC   CA 23 34               JP   Z,expectM_2928S132   
33BF   CD F8 0C               CALL   printStr   
33C2   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
33D5   CD F8 0C               CALL   printStr   
33D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33E7   21 05 00               LD   hl,5   
33EA   E5                     PUSH   hl   
33EB   E5                     PUSH   hl   
33EC   CD 17 0E               CALL   run   
33EF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33F7   CD 80 0C               CALL   flushBuffer   
33FA   CD F8 0C               CALL   printStr   
33FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
340A   E1                     POP   hl   
340B   E5                     PUSH   hl   
340C   E5                     PUSH   hl   
340D   CD 17 0E               CALL   run   
3410   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
341F   CD 80 0C               CALL   flushBuffer   
3422   76                     HALT      
3423                EXPECTM_2928S132:      
3423   E1                     POP   HL   
3424                          ;*Macro unroll:  test ":a{{2}^};^", 2
3424   31 00 53               LD   SP,STACK   
3427   CD 40 0D               CALL   coldInit   
342A   CD 56 51               CALL   execStr   
342D   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
3438   CD 80 0C               CALL   flushBuffer   
343B   E1                     POP   HL   
343C   E5                     PUSH   HL   
343D   11 02 00               LD   DE,2   
3440   B7                     OR   A   
3441   ED 52                  SBC   HL,DE   
3443   7D                     LD   A,L   
3444   B4                     OR   H   
3445   CA AA 34               JP   Z,expectM_2929S133   
3448   CD F8 0C               CALL   printStr   
344B   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
345C   CD F8 0C               CALL   printStr   
345F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
346E   21 02 00               LD   hl,2   
3471   E5                     PUSH   hl   
3472   E5                     PUSH   hl   
3473   CD 17 0E               CALL   run   
3476   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
347E   CD 80 0C               CALL   flushBuffer   
3481   CD F8 0C               CALL   printStr   
3484   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3491   E1                     POP   hl   
3492   E5                     PUSH   hl   
3493   E5                     PUSH   hl   
3494   CD 17 0E               CALL   run   
3497   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34A6   CD 80 0C               CALL   flushBuffer   
34A9   76                     HALT      
34AA                EXPECTM_2929S133:      
34AA   E1                     POP   HL   
34AB                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
34AB   31 00 53               LD   SP,STACK   
34AE   CD 40 0D               CALL   coldInit   
34B1   CD 56 51               CALL   execStr   
34B4   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
34C4   CD 80 0C               CALL   flushBuffer   
34C7   E1                     POP   HL   
34C8   E5                     PUSH   HL   
34C9   11 05 00               LD   DE,5   
34CC   B7                     OR   A   
34CD   ED 52                  SBC   HL,DE   
34CF   7D                     LD   A,L   
34D0   B4                     OR   H   
34D1   CA 3B 35               JP   Z,expectM_2930S134   
34D4   CD F8 0C               CALL   printStr   
34D7   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
34ED   CD F8 0C               CALL   printStr   
34F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34FF   21 05 00               LD   hl,5   
3502   E5                     PUSH   hl   
3503   E5                     PUSH   hl   
3504   CD 17 0E               CALL   run   
3507   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
350F   CD 80 0C               CALL   flushBuffer   
3512   CD F8 0C               CALL   printStr   
3515   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3522   E1                     POP   hl   
3523   E5                     PUSH   hl   
3524   E5                     PUSH   hl   
3525   CD 17 0E               CALL   run   
3528   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3537   CD 80 0C               CALL   flushBuffer   
353A   76                     HALT      
353B                EXPECTM_2930S134:      
353B   E1                     POP   HL   
353C                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
353C   31 00 53               LD   SP,STACK   
353F   CD 40 0D               CALL   coldInit   
3542   CD 56 51               CALL   execStr   
3545   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
3556   CD 80 0C               CALL   flushBuffer   
3559   E1                     POP   HL   
355A   E5                     PUSH   HL   
355B   11 01 00               LD   DE,1   
355E   B7                     OR   A   
355F   ED 52                  SBC   HL,DE   
3561   7D                     LD   A,L   
3562   B4                     OR   H   
3563   CA CE 35               JP   Z,expectM_2931S135   
3566   CD F8 0C               CALL   printStr   
3569   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
3580   CD F8 0C               CALL   printStr   
3583   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3592   21 01 00               LD   hl,1   
3595   E5                     PUSH   hl   
3596   E5                     PUSH   hl   
3597   CD 17 0E               CALL   run   
359A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35A2   CD 80 0C               CALL   flushBuffer   
35A5   CD F8 0C               CALL   printStr   
35A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35B5   E1                     POP   hl   
35B6   E5                     PUSH   hl   
35B7   E5                     PUSH   hl   
35B8   CD 17 0E               CALL   run   
35BB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35CA   CD 80 0C               CALL   flushBuffer   
35CD   76                     HALT      
35CE                EXPECTM_2931S135:      
35CE   E1                     POP   HL   
35CF                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
35CF   31 00 53               LD   SP,STACK   
35D2   CD 40 0D               CALL   coldInit   
35D5   CD 56 51               CALL   execStr   
35D8   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
35EC   CD 80 0C               CALL   flushBuffer   
35EF   E1                     POP   HL   
35F0   E5                     PUSH   HL   
35F1   11 07 00               LD   DE,7   
35F4   B7                     OR   A   
35F5   ED 52                  SBC   HL,DE   
35F7   7D                     LD   A,L   
35F8   B4                     OR   H   
35F9   CA 67 36               JP   Z,expectM_2932S136   
35FC   CD F8 0C               CALL   printStr   
35FF   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
3619   CD F8 0C               CALL   printStr   
361C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
362B   21 07 00               LD   hl,7   
362E   E5                     PUSH   hl   
362F   E5                     PUSH   hl   
3630   CD 17 0E               CALL   run   
3633   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
363B   CD 80 0C               CALL   flushBuffer   
363E   CD F8 0C               CALL   printStr   
3641   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
364E   E1                     POP   hl   
364F   E5                     PUSH   hl   
3650   E5                     PUSH   hl   
3651   CD 17 0E               CALL   run   
3654   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3663   CD 80 0C               CALL   flushBuffer   
3666   76                     HALT      
3667                EXPECTM_2932S136:      
3667   E1                     POP   HL   
3668                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
3668   31 00 53               LD   SP,STACK   
366B   CD 40 0D               CALL   coldInit   
366E   CD 56 51               CALL   execStr   
3671   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
3687   CD 80 0C               CALL   flushBuffer   
368A   E1                     POP   HL   
368B   E5                     PUSH   HL   
368C   11 06 00               LD   DE,6   
368F   B7                     OR   A   
3690   ED 52                  SBC   HL,DE   
3692   7D                     LD   A,L   
3693   B4                     OR   H   
3694   CA 04 37               JP   Z,expectM_2933S137   
3697   CD F8 0C               CALL   printStr   
369A   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
36B6   CD F8 0C               CALL   printStr   
36B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36C8   21 06 00               LD   hl,6   
36CB   E5                     PUSH   hl   
36CC   E5                     PUSH   hl   
36CD   CD 17 0E               CALL   run   
36D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36D8   CD 80 0C               CALL   flushBuffer   
36DB   CD F8 0C               CALL   printStr   
36DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36EB   E1                     POP   hl   
36EC   E5                     PUSH   hl   
36ED   E5                     PUSH   hl   
36EE   CD 17 0E               CALL   run   
36F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3700   CD 80 0C               CALL   flushBuffer   
3703   76                     HALT      
3704                EXPECTM_2933S137:      
3704   E1                     POP   HL   
3705                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
3705   31 00 53               LD   SP,STACK   
3708   CD 40 0D               CALL   coldInit   
370B   CD 56 51               CALL   execStr   
370E   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
371D   CD 80 0C               CALL   flushBuffer   
3720   E1                     POP   HL   
3721   E5                     PUSH   HL   
3722   11 02 00               LD   DE,2   
3725   B7                     OR   A   
3726   ED 52                  SBC   HL,DE   
3728   7D                     LD   A,L   
3729   B4                     OR   H   
372A   CA 93 37               JP   Z,expectM_2934S138   
372D   CD F8 0C               CALL   printStr   
3730   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
3745   CD F8 0C               CALL   printStr   
3748   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3757   21 02 00               LD   hl,2   
375A   E5                     PUSH   hl   
375B   E5                     PUSH   hl   
375C   CD 17 0E               CALL   run   
375F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3767   CD 80 0C               CALL   flushBuffer   
376A   CD F8 0C               CALL   printStr   
376D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
377A   E1                     POP   hl   
377B   E5                     PUSH   hl   
377C   E5                     PUSH   hl   
377D   CD 17 0E               CALL   run   
3780   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
378F   CD 80 0C               CALL   flushBuffer   
3792   76                     HALT      
3793                EXPECTM_2934S138:      
3793   E1                     POP   HL   
3794                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
3794   31 00 53               LD   SP,STACK   
3797   CD 40 0D               CALL   coldInit   
379A   CD 56 51               CALL   execStr   
379D   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
37AF   CD 80 0C               CALL   flushBuffer   
37B2   E1                     POP   HL   
37B3   E5                     PUSH   HL   
37B4   11 01 00               LD   DE,1   
37B7   B7                     OR   A   
37B8   ED 52                  SBC   HL,DE   
37BA   7D                     LD   A,L   
37BB   B4                     OR   H   
37BC   CA 28 38               JP   Z,expectM_2935S139   
37BF   CD F8 0C               CALL   printStr   
37C2   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
37DA   CD F8 0C               CALL   printStr   
37DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37EC   21 01 00               LD   hl,1   
37EF   E5                     PUSH   hl   
37F0   E5                     PUSH   hl   
37F1   CD 17 0E               CALL   run   
37F4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37FC   CD 80 0C               CALL   flushBuffer   
37FF   CD F8 0C               CALL   printStr   
3802   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
380F   E1                     POP   hl   
3810   E5                     PUSH   hl   
3811   E5                     PUSH   hl   
3812   CD 17 0E               CALL   run   
3815   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3824   CD 80 0C               CALL   flushBuffer   
3827   76                     HALT      
3828                EXPECTM_2935S139:      
3828   E1                     POP   HL   
3829                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3829   31 00 53               LD   SP,STACK   
382C   CD 40 0D               CALL   coldInit   
382F   CD 56 51               CALL   execStr   
3832   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
3845   CD 80 0C               CALL   flushBuffer   
3848   E1                     POP   HL   
3849   E5                     PUSH   HL   
384A   11 02 00               LD   DE,2   
384D   B7                     OR   A   
384E   ED 52                  SBC   HL,DE   
3850   7D                     LD   A,L   
3851   B4                     OR   H   
3852   CA BF 38               JP   Z,expectM_2936S140   
3855   CD F8 0C               CALL   printStr   
3858   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
3871   CD F8 0C               CALL   printStr   
3874   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3883   21 02 00               LD   hl,2   
3886   E5                     PUSH   hl   
3887   E5                     PUSH   hl   
3888   CD 17 0E               CALL   run   
388B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3893   CD 80 0C               CALL   flushBuffer   
3896   CD F8 0C               CALL   printStr   
3899   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38A6   E1                     POP   hl   
38A7   E5                     PUSH   hl   
38A8   E5                     PUSH   hl   
38A9   CD 17 0E               CALL   run   
38AC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38BB   CD 80 0C               CALL   flushBuffer   
38BE   76                     HALT      
38BF                EXPECTM_2936S140:      
38BF   E1                     POP   HL   
38C0                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
38C0   31 00 53               LD   SP,STACK   
38C3   CD 40 0D               CALL   coldInit   
38C6   CD 56 51               CALL   execStr   
38C9   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
38DD   CD 80 0C               CALL   flushBuffer   
38E0   E1                     POP   HL   
38E1   E5                     PUSH   HL   
38E2   11 02 00               LD   DE,2   
38E5   B7                     OR   A   
38E6   ED 52                  SBC   HL,DE   
38E8   7D                     LD   A,L   
38E9   B4                     OR   H   
38EA   CA 58 39               JP   Z,expectM_2937S141   
38ED   CD F8 0C               CALL   printStr   
38F0   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
390A   CD F8 0C               CALL   printStr   
390D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
391C   21 02 00               LD   hl,2   
391F   E5                     PUSH   hl   
3920   E5                     PUSH   hl   
3921   CD 17 0E               CALL   run   
3924   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
392C   CD 80 0C               CALL   flushBuffer   
392F   CD F8 0C               CALL   printStr   
3932   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
393F   E1                     POP   hl   
3940   E5                     PUSH   hl   
3941   E5                     PUSH   hl   
3942   CD 17 0E               CALL   run   
3945   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3954   CD 80 0C               CALL   flushBuffer   
3957   76                     HALT      
3958                EXPECTM_2937S141:      
3958   E1                     POP   HL   
3959                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3959   31 00 53               LD   SP,STACK   
395C   CD 40 0D               CALL   coldInit   
395F   CD 56 51               CALL   execStr   
3962   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
3975   CD 80 0C               CALL   flushBuffer   
3978   E1                     POP   HL   
3979   E5                     PUSH   HL   
397A   11 02 00               LD   DE,2   
397D   B7                     OR   A   
397E   ED 52                  SBC   HL,DE   
3980   7D                     LD   A,L   
3981   B4                     OR   H   
3982   CA EF 39               JP   Z,expectM_2938S142   
3985   CD F8 0C               CALL   printStr   
3988   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
39A1   CD F8 0C               CALL   printStr   
39A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39B3   21 02 00               LD   hl,2   
39B6   E5                     PUSH   hl   
39B7   E5                     PUSH   hl   
39B8   CD 17 0E               CALL   run   
39BB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
39C3   CD 80 0C               CALL   flushBuffer   
39C6   CD F8 0C               CALL   printStr   
39C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39D6   E1                     POP   hl   
39D7   E5                     PUSH   hl   
39D8   E5                     PUSH   hl   
39D9   CD 17 0E               CALL   run   
39DC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39EB   CD 80 0C               CALL   flushBuffer   
39EE   76                     HALT      
39EF                EXPECTM_2938S142:      
39EF   E1                     POP   HL   
39F0                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
39F0   31 00 53               LD   SP,STACK   
39F3   CD 40 0D               CALL   coldInit   
39F6   CD 56 51               CALL   execStr   
39F9   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
3A13   CD 80 0C               CALL   flushBuffer   
3A16   E1                     POP   HL   
3A17   E5                     PUSH   HL   
3A18   11 05 00               LD   DE,5   
3A1B   B7                     OR   A   
3A1C   ED 52                  SBC   HL,DE   
3A1E   7D                     LD   A,L   
3A1F   B4                     OR   H   
3A20   CA 94 3A               JP   Z,expectM_2939S143   
3A23   CD F8 0C               CALL   printStr   
3A26   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
3A46   CD F8 0C               CALL   printStr   
3A49   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A58   21 05 00               LD   hl,5   
3A5B   E5                     PUSH   hl   
3A5C   E5                     PUSH   hl   
3A5D   CD 17 0E               CALL   run   
3A60   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A68   CD 80 0C               CALL   flushBuffer   
3A6B   CD F8 0C               CALL   printStr   
3A6E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A7B   E1                     POP   hl   
3A7C   E5                     PUSH   hl   
3A7D   E5                     PUSH   hl   
3A7E   CD 17 0E               CALL   run   
3A81   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A90   CD 80 0C               CALL   flushBuffer   
3A93   76                     HALT      
3A94                EXPECTM_2939S143:      
3A94   E1                     POP   HL   
3A95                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3A95   31 00 53               LD   SP,STACK   
3A98   CD 40 0D               CALL   coldInit   
3A9B   CD 56 51               CALL   execStr   
3A9E   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
3AAF   CD 80 0C               CALL   flushBuffer   
3AB2   E1                     POP   HL   
3AB3   E5                     PUSH   HL   
3AB4   11 02 00               LD   DE,2   
3AB7   B7                     OR   A   
3AB8   ED 52                  SBC   HL,DE   
3ABA   7D                     LD   A,L   
3ABB   B4                     OR   H   
3ABC   CA 27 3B               JP   Z,expectM_2940S144   
3ABF   CD F8 0C               CALL   printStr   
3AC2   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
3AD9   CD F8 0C               CALL   printStr   
3ADC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AEB   21 02 00               LD   hl,2   
3AEE   E5                     PUSH   hl   
3AEF   E5                     PUSH   hl   
3AF0   CD 17 0E               CALL   run   
3AF3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AFB   CD 80 0C               CALL   flushBuffer   
3AFE   CD F8 0C               CALL   printStr   
3B01   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B0E   E1                     POP   hl   
3B0F   E5                     PUSH   hl   
3B10   E5                     PUSH   hl   
3B11   CD 17 0E               CALL   run   
3B14   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B23   CD 80 0C               CALL   flushBuffer   
3B26   76                     HALT      
3B27                EXPECTM_2940S144:      
3B27   E1                     POP   HL   
3B28                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
3B28   31 00 53               LD   SP,STACK   
3B2B   CD 40 0D               CALL   coldInit   
3B2E   CD 56 51               CALL   execStr   
3B31   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
3B49   CD 80 0C               CALL   flushBuffer   
3B4C   E1                     POP   HL   
3B4D   E5                     PUSH   HL   
3B4E   11 64 00               LD   DE,100   
3B51   B7                     OR   A   
3B52   ED 52                  SBC   HL,DE   
3B54   7D                     LD   A,L   
3B55   B4                     OR   H   
3B56   CA C8 3B               JP   Z,expectM_2941S145   
3B59   CD F8 0C               CALL   printStr   
3B5C   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
3B7A   CD F8 0C               CALL   printStr   
3B7D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B8C   21 64 00               LD   hl,100   
3B8F   E5                     PUSH   hl   
3B90   E5                     PUSH   hl   
3B91   CD 17 0E               CALL   run   
3B94   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B9C   CD 80 0C               CALL   flushBuffer   
3B9F   CD F8 0C               CALL   printStr   
3BA2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BAF   E1                     POP   hl   
3BB0   E5                     PUSH   hl   
3BB1   E5                     PUSH   hl   
3BB2   CD 17 0E               CALL   run   
3BB5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BC4   CD 80 0C               CALL   flushBuffer   
3BC7   76                     HALT      
3BC8                EXPECTM_2941S145:      
3BC8   E1                     POP   HL   
3BC9                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
3BC9   31 00 53               LD   SP,STACK   
3BCC   CD 40 0D               CALL   coldInit   
3BCF   CD 56 51               CALL   execStr   
3BD2   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
3BEB   CD 80 0C               CALL   flushBuffer   
3BEE   E1                     POP   HL   
3BEF   E5                     PUSH   HL   
3BF0   11 01 00               LD   DE,1   
3BF3   B7                     OR   A   
3BF4   ED 52                  SBC   HL,DE   
3BF6   7D                     LD   A,L   
3BF7   B4                     OR   H   
3BF8   CA 6B 3C               JP   Z,expectM_2942S146   
3BFB   CD F8 0C               CALL   printStr   
3BFE   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
3C1D   CD F8 0C               CALL   printStr   
3C20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C2F   21 01 00               LD   hl,1   
3C32   E5                     PUSH   hl   
3C33   E5                     PUSH   hl   
3C34   CD 17 0E               CALL   run   
3C37   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C3F   CD 80 0C               CALL   flushBuffer   
3C42   CD F8 0C               CALL   printStr   
3C45   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C52   E1                     POP   hl   
3C53   E5                     PUSH   hl   
3C54   E5                     PUSH   hl   
3C55   CD 17 0E               CALL   run   
3C58   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C67   CD 80 0C               CALL   flushBuffer   
3C6A   76                     HALT      
3C6B                EXPECTM_2942S146:      
3C6B   E1                     POP   HL   
3C6C                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
3C6C   31 00 53               LD   SP,STACK   
3C6F   CD 40 0D               CALL   coldInit   
3C72   CD 56 51               CALL   execStr   
3C75   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
3C8F   CD 80 0C               CALL   flushBuffer   
3C92   E1                     POP   HL   
3C93   E5                     PUSH   HL   
3C94   11 02 00               LD   DE,2   
3C97   B7                     OR   A   
3C98   ED 52                  SBC   HL,DE   
3C9A   7D                     LD   A,L   
3C9B   B4                     OR   H   
3C9C   CA 10 3D               JP   Z,expectM_2943S147   
3C9F   CD F8 0C               CALL   printStr   
3CA2   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
3CC2   CD F8 0C               CALL   printStr   
3CC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CD4   21 02 00               LD   hl,2   
3CD7   E5                     PUSH   hl   
3CD8   E5                     PUSH   hl   
3CD9   CD 17 0E               CALL   run   
3CDC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CE4   CD 80 0C               CALL   flushBuffer   
3CE7   CD F8 0C               CALL   printStr   
3CEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CF7   E1                     POP   hl   
3CF8   E5                     PUSH   hl   
3CF9   E5                     PUSH   hl   
3CFA   CD 17 0E               CALL   run   
3CFD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D0C   CD 80 0C               CALL   flushBuffer   
3D0F   76                     HALT      
3D10                EXPECTM_2943S147:      
3D10   E1                     POP   HL   
3D11                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
3D11   31 00 53               LD   SP,STACK   
3D14   CD 40 0D               CALL   coldInit   
3D17   CD 56 51               CALL   execStr   
3D1A   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
3D39   CD 80 0C               CALL   flushBuffer   
3D3C   E1                     POP   HL   
3D3D   E5                     PUSH   HL   
3D3E   11 0B 00               LD   DE,11   
3D41   B7                     OR   A   
3D42   ED 52                  SBC   HL,DE   
3D44   7D                     LD   A,L   
3D45   B4                     OR   H   
3D46   CA BF 3D               JP   Z,expectM_2944S148   
3D49   CD F8 0C               CALL   printStr   
3D4C   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
3D71   CD F8 0C               CALL   printStr   
3D74   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D83   21 0B 00               LD   hl,11   
3D86   E5                     PUSH   hl   
3D87   E5                     PUSH   hl   
3D88   CD 17 0E               CALL   run   
3D8B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D93   CD 80 0C               CALL   flushBuffer   
3D96   CD F8 0C               CALL   printStr   
3D99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DA6   E1                     POP   hl   
3DA7   E5                     PUSH   hl   
3DA8   E5                     PUSH   hl   
3DA9   CD 17 0E               CALL   run   
3DAC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DBB   CD 80 0C               CALL   flushBuffer   
3DBE   76                     HALT      
3DBF                EXPECTM_2944S148:      
3DBF   E1                     POP   HL   
3DC0                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
3DC0   31 00 53               LD   SP,STACK   
3DC3   CD 40 0D               CALL   coldInit   
3DC6   CD 56 51               CALL   execStr   
3DC9   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
3DE8   CD 80 0C               CALL   flushBuffer   
3DEB   E1                     POP   HL   
3DEC   E5                     PUSH   HL   
3DED   11 15 00               LD   DE,21   
3DF0   B7                     OR   A   
3DF1   ED 52                  SBC   HL,DE   
3DF3   7D                     LD   A,L   
3DF4   B4                     OR   H   
3DF5   CA 6E 3E               JP   Z,expectM_2945S149   
3DF8   CD F8 0C               CALL   printStr   
3DFB   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3E20   CD F8 0C               CALL   printStr   
3E23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E32   21 15 00               LD   hl,21   
3E35   E5                     PUSH   hl   
3E36   E5                     PUSH   hl   
3E37   CD 17 0E               CALL   run   
3E3A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E42   CD 80 0C               CALL   flushBuffer   
3E45   CD F8 0C               CALL   printStr   
3E48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E55   E1                     POP   hl   
3E56   E5                     PUSH   hl   
3E57   E5                     PUSH   hl   
3E58   CD 17 0E               CALL   run   
3E5B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E6A   CD 80 0C               CALL   flushBuffer   
3E6D   76                     HALT      
3E6E                EXPECTM_2945S149:      
3E6E   E1                     POP   HL   
3E6F                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3E6F   31 00 53               LD   SP,STACK   
3E72   CD 40 0D               CALL   coldInit   
3E75   CD 56 51               CALL   execStr   
3E78   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3E86   CD 80 0C               CALL   flushBuffer   
3E89   E1                     POP   HL   
3E8A   E5                     PUSH   HL   
3E8B   11 14 00               LD   DE,20   
3E8E   B7                     OR   A   
3E8F   ED 52                  SBC   HL,DE   
3E91   7D                     LD   A,L   
3E92   B4                     OR   H   
3E93   CA FB 3E               JP   Z,expectM_2946S150   
3E96   CD F8 0C               CALL   printStr   
3E99   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3EAD   CD F8 0C               CALL   printStr   
3EB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EBF   21 14 00               LD   hl,20   
3EC2   E5                     PUSH   hl   
3EC3   E5                     PUSH   hl   
3EC4   CD 17 0E               CALL   run   
3EC7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3ECF   CD 80 0C               CALL   flushBuffer   
3ED2   CD F8 0C               CALL   printStr   
3ED5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EE2   E1                     POP   hl   
3EE3   E5                     PUSH   hl   
3EE4   E5                     PUSH   hl   
3EE5   CD 17 0E               CALL   run   
3EE8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3EF7   CD 80 0C               CALL   flushBuffer   
3EFA   76                     HALT      
3EFB                EXPECTM_2946S150:      
3EFB   E1                     POP   HL   
3EFC                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
3EFC   31 00 53               LD   SP,STACK   
3EFF   CD 40 0D               CALL   coldInit   
3F02   CD 56 51               CALL   execStr   
3F05   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 DB   "[10 20 30 40] /s",0   
3F16   CD 80 0C               CALL   flushBuffer   
3F19   E1                     POP   HL   
3F1A   E5                     PUSH   HL   
3F1B   11 04 00               LD   DE,4   
3F1E   B7                     OR   A   
3F1F   ED 52                  SBC   HL,DE   
3F21   7D                     LD   A,L   
3F22   B4                     OR   H   
3F23   CA 8E 3F               JP   Z,expectM_2947S151   
3F26   CD F8 0C               CALL   printStr   
3F29   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3F40   CD F8 0C               CALL   printStr   
3F43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F52   21 04 00               LD   hl,4   
3F55   E5                     PUSH   hl   
3F56   E5                     PUSH   hl   
3F57   CD 17 0E               CALL   run   
3F5A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F62   CD 80 0C               CALL   flushBuffer   
3F65   CD F8 0C               CALL   printStr   
3F68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F75   E1                     POP   hl   
3F76   E5                     PUSH   hl   
3F77   E5                     PUSH   hl   
3F78   CD 17 0E               CALL   run   
3F7B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F8A   CD 80 0C               CALL   flushBuffer   
3F8D   76                     HALT      
3F8E                EXPECTM_2947S151:      
3F8E   E1                     POP   HL   
3F8F                          ;*Macro unroll:  test "/c [1 2 3] 1#", 2
3F8F   31 00 53               LD   SP,STACK   
3F92   CD 40 0D               CALL   coldInit   
3F95   CD 56 51               CALL   execStr   
3F98   2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/c [1 2 3] 1#",0   
3FA6   CD 80 0C               CALL   flushBuffer   
3FA9   E1                     POP   HL   
3FAA   E5                     PUSH   HL   
3FAB   11 02 00               LD   DE,2   
3FAE   B7                     OR   A   
3FAF   ED 52                  SBC   HL,DE   
3FB1   7D                     LD   A,L   
3FB2   B4                     OR   H   
3FB3   CA 1B 40               JP   Z,expectM_2948S152   
3FB6   CD F8 0C               CALL   printStr   
3FB9   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/c [1 2 3] 1#"   
3FCD   CD F8 0C               CALL   printStr   
3FD0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FDF   21 02 00               LD   hl,2   
3FE2   E5                     PUSH   hl   
3FE3   E5                     PUSH   hl   
3FE4   CD 17 0E               CALL   run   
3FE7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FEF   CD 80 0C               CALL   flushBuffer   
3FF2   CD F8 0C               CALL   printStr   
3FF5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4002   E1                     POP   hl   
4003   E5                     PUSH   hl   
4004   E5                     PUSH   hl   
4005   CD 17 0E               CALL   run   
4008   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4017   CD 80 0C               CALL   flushBuffer   
401A   76                     HALT      
401B                EXPECTM_2948S152:      
401B   E1                     POP   HL   
401C                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1#", 66
401C   31 00 53               LD   SP,STACK   
401F   CD 40 0D               CALL   coldInit   
4022   CD 56 51               CALL   execStr   
4025   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/c ['A' 'B' 'C'] 1#",0   
4039   CD 80 0C               CALL   flushBuffer   
403C   E1                     POP   HL   
403D   E5                     PUSH   HL   
403E   11 42 00               LD   DE,66   
4041   B7                     OR   A   
4042   ED 52                  SBC   HL,DE   
4044   7D                     LD   A,L   
4045   B4                     OR   H   
4046   CA B4 40               JP   Z,expectM_2949S153   
4049   CD F8 0C               CALL   printStr   
404C   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1#"   
4066   CD F8 0C               CALL   printStr   
4069   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4078   21 42 00               LD   hl,66   
407B   E5                     PUSH   hl   
407C   E5                     PUSH   hl   
407D   CD 17 0E               CALL   run   
4080   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4088   CD 80 0C               CALL   flushBuffer   
408B   CD F8 0C               CALL   printStr   
408E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
409B   E1                     POP   hl   
409C   E5                     PUSH   hl   
409D   E5                     PUSH   hl   
409E   CD 17 0E               CALL   run   
40A1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40B0   CD 80 0C               CALL   flushBuffer   
40B3   76                     HALT      
40B4                EXPECTM_2949S153:      
40B4   E1                     POP   HL   
40B5                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
40B5   31 00 53               LD   SP,STACK   
40B8   CD 40 0D               CALL   coldInit   
40BB   CD 56 51               CALL   execStr   
40BE   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
40D2   CD 80 0C               CALL   flushBuffer   
40D5   E1                     POP   HL   
40D6   E5                     PUSH   HL   
40D7   11 0A 00               LD   DE,10   
40DA   B7                     OR   A   
40DB   ED 52                  SBC   HL,DE   
40DD   7D                     LD   A,L   
40DE   B4                     OR   H   
40DF   CA 4D 41               JP   Z,expectM_2950S154   
40E2   CD F8 0C               CALL   printStr   
40E5   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
40FF   CD F8 0C               CALL   printStr   
4102   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4111   21 0A 00               LD   hl,10   
4114   E5                     PUSH   hl   
4115   E5                     PUSH   hl   
4116   CD 17 0E               CALL   run   
4119   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4121   CD 80 0C               CALL   flushBuffer   
4124   CD F8 0C               CALL   printStr   
4127   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4134   E1                     POP   hl   
4135   E5                     PUSH   hl   
4136   E5                     PUSH   hl   
4137   CD 17 0E               CALL   run   
413A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4149   CD 80 0C               CALL   flushBuffer   
414C   76                     HALT      
414D                EXPECTM_2950S154:      
414D   E1                     POP   HL   
414E                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
414E   31 00 53               LD   SP,STACK   
4151   CD 40 0D               CALL   coldInit   
4154   CD 56 51               CALL   execStr   
4157   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
4174   CD 80 0C               CALL   flushBuffer   
4177   E1                     POP   HL   
4178   E5                     PUSH   HL   
4179   11 0A 00               LD   DE,10   
417C   B7                     OR   A   
417D   ED 52                  SBC   HL,DE   
417F   7D                     LD   A,L   
4180   B4                     OR   H   
4181   CA F8 41               JP   Z,expectM_2951S155   
4184   CD F8 0C               CALL   printStr   
4187   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
41AA   CD F8 0C               CALL   printStr   
41AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41BC   21 0A 00               LD   hl,10   
41BF   E5                     PUSH   hl   
41C0   E5                     PUSH   hl   
41C1   CD 17 0E               CALL   run   
41C4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41CC   CD 80 0C               CALL   flushBuffer   
41CF   CD F8 0C               CALL   printStr   
41D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41DF   E1                     POP   hl   
41E0   E5                     PUSH   hl   
41E1   E5                     PUSH   hl   
41E2   CD 17 0E               CALL   run   
41E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41F4   CD 80 0C               CALL   flushBuffer   
41F7   76                     HALT      
41F8                EXPECTM_2951S155:      
41F8   E1                     POP   HL   
41F9                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
41F9   31 00 53               LD   SP,STACK   
41FC   CD 40 0D               CALL   coldInit   
41FF   CD 56 51               CALL   execStr   
4202   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
4223   CD 80 0C               CALL   flushBuffer   
4226   E1                     POP   HL   
4227   E5                     PUSH   HL   
4228   11 0A 00               LD   DE,10   
422B   B7                     OR   A   
422C   ED 52                  SBC   HL,DE   
422E   7D                     LD   A,L   
422F   B4                     OR   H   
4230   CA AB 42               JP   Z,expectM_2952S156   
4233   CD F8 0C               CALL   printStr   
4236   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
425D   CD F8 0C               CALL   printStr   
4260   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
426F   21 0A 00               LD   hl,10   
4272   E5                     PUSH   hl   
4273   E5                     PUSH   hl   
4274   CD 17 0E               CALL   run   
4277   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
427F   CD 80 0C               CALL   flushBuffer   
4282   CD F8 0C               CALL   printStr   
4285   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4292   E1                     POP   hl   
4293   E5                     PUSH   hl   
4294   E5                     PUSH   hl   
4295   CD 17 0E               CALL   run   
4298   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
42A7   CD 80 0C               CALL   flushBuffer   
42AA   76                     HALT      
42AB                EXPECTM_2952S156:      
42AB   E1                     POP   HL   
42AC                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
42AC   31 00 53               LD   SP,STACK   
42AF   CD 40 0D               CALL   coldInit   
42B2   CD 56 51               CALL   execStr   
42B5   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
42D6   CD 80 0C               CALL   flushBuffer   
42D9   E1                     POP   HL   
42DA   E5                     PUSH   HL   
42DB   11 14 00               LD   DE,20   
42DE   B7                     OR   A   
42DF   ED 52                  SBC   HL,DE   
42E1   7D                     LD   A,L   
42E2   B4                     OR   H   
42E3   CA 5E 43               JP   Z,expectM_2953S157   
42E6   CD F8 0C               CALL   printStr   
42E9   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
4310   CD F8 0C               CALL   printStr   
4313   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4322   21 14 00               LD   hl,20   
4325   E5                     PUSH   hl   
4326   E5                     PUSH   hl   
4327   CD 17 0E               CALL   run   
432A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4332   CD 80 0C               CALL   flushBuffer   
4335   CD F8 0C               CALL   printStr   
4338   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4345   E1                     POP   hl   
4346   E5                     PUSH   hl   
4347   E5                     PUSH   hl   
4348   CD 17 0E               CALL   run   
434B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
435A   CD 80 0C               CALL   flushBuffer   
435D   76                     HALT      
435E                EXPECTM_2953S157:      
435E   E1                     POP   HL   
435F                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
435F   31 00 53               LD   SP,STACK   
4362   CD 40 0D               CALL   coldInit   
4365   CD 56 51               CALL   execStr   
4368   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
4380   CD 80 0C               CALL   flushBuffer   
4383   E1                     POP   HL   
4384   E5                     PUSH   HL   
4385   11 06 00               LD   DE,6   
4388   B7                     OR   A   
4389   ED 52                  SBC   HL,DE   
438B   7D                     LD   A,L   
438C   B4                     OR   H   
438D   CA FF 43               JP   Z,expectM_2954S158   
4390   CD F8 0C               CALL   printStr   
4393   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
43B1   CD F8 0C               CALL   printStr   
43B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43C3   21 06 00               LD   hl,6   
43C6   E5                     PUSH   hl   
43C7   E5                     PUSH   hl   
43C8   CD 17 0E               CALL   run   
43CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43D3   CD 80 0C               CALL   flushBuffer   
43D6   CD F8 0C               CALL   printStr   
43D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43E6   E1                     POP   hl   
43E7   E5                     PUSH   hl   
43E8   E5                     PUSH   hl   
43E9   CD 17 0E               CALL   run   
43EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43FB   CD 80 0C               CALL   flushBuffer   
43FE   76                     HALT      
43FF                EXPECTM_2954S158:      
43FF   E1                     POP   HL   
4400                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
4400   31 00 53               LD   SP,STACK   
4403   CD 40 0D               CALL   coldInit   
4406   CD 56 51               CALL   execStr   
4409   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
4424   CD 80 0C               CALL   flushBuffer   
4427   E1                     POP   HL   
4428   E5                     PUSH   HL   
4429   11 02 00               LD   DE,2   
442C   B7                     OR   A   
442D   ED 52                  SBC   HL,DE   
442F   7D                     LD   A,L   
4430   B4                     OR   H   
4431   CA A6 44               JP   Z,expectM_2955S159   
4434   CD F8 0C               CALL   printStr   
4437   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
4458   CD F8 0C               CALL   printStr   
445B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
446A   21 02 00               LD   hl,2   
446D   E5                     PUSH   hl   
446E   E5                     PUSH   hl   
446F   CD 17 0E               CALL   run   
4472   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
447A   CD 80 0C               CALL   flushBuffer   
447D   CD F8 0C               CALL   printStr   
4480   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
448D   E1                     POP   hl   
448E   E5                     PUSH   hl   
448F   E5                     PUSH   hl   
4490   CD 17 0E               CALL   run   
4493   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44A2   CD 80 0C               CALL   flushBuffer   
44A5   76                     HALT      
44A6                EXPECTM_2955S159:      
44A6   E1                     POP   HL   
44A7                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
44A7   31 00 53               LD   SP,STACK   
44AA   CD 40 0D               CALL   coldInit   
44AD   CD 56 51               CALL   execStr   
44B0   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
44D6   CD 80 0C               CALL   flushBuffer   
44D9   E1                     POP   HL   
44DA   E5                     PUSH   HL   
44DB   11 0A 00               LD   DE,10   
44DE   B7                     OR   A   
44DF   ED 52                  SBC   HL,DE   
44E1   7D                     LD   A,L   
44E2   B4                     OR   H   
44E3   CA 63 45               JP   Z,expectM_2956S160   
44E6   CD F8 0C               CALL   printStr   
44E9   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4515   CD F8 0C               CALL   printStr   
4518   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4527   21 0A 00               LD   hl,10   
452A   E5                     PUSH   hl   
452B   E5                     PUSH   hl   
452C   CD 17 0E               CALL   run   
452F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4537   CD 80 0C               CALL   flushBuffer   
453A   CD F8 0C               CALL   printStr   
453D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
454A   E1                     POP   hl   
454B   E5                     PUSH   hl   
454C   E5                     PUSH   hl   
454D   CD 17 0E               CALL   run   
4550   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
455F   CD 80 0C               CALL   flushBuffer   
4562   76                     HALT      
4563                EXPECTM_2956S160:      
4563   E1                     POP   HL   
4564                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
4564   31 00 53               LD   SP,STACK   
4567   CD 40 0D               CALL   coldInit   
456A   CD 56 51               CALL   execStr   
456D   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
459A   CD 80 0C               CALL   flushBuffer   
459D   E1                     POP   HL   
459E   E5                     PUSH   HL   
459F   11 06 00               LD   DE,6   
45A2   B7                     OR   A   
45A3   ED 52                  SBC   HL,DE   
45A5   7D                     LD   A,L   
45A6   B4                     OR   H   
45A7   CA 2E 46               JP   Z,expectM_2957S161   
45AA   CD F8 0C               CALL   printStr   
45AD   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
45E0   CD F8 0C               CALL   printStr   
45E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45F2   21 06 00               LD   hl,6   
45F5   E5                     PUSH   hl   
45F6   E5                     PUSH   hl   
45F7   CD 17 0E               CALL   run   
45FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4602   CD 80 0C               CALL   flushBuffer   
4605   CD F8 0C               CALL   printStr   
4608   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4615   E1                     POP   hl   
4616   E5                     PUSH   hl   
4617   E5                     PUSH   hl   
4618   CD 17 0E               CALL   run   
461B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
462A   CD 80 0C               CALL   flushBuffer   
462D   76                     HALT      
462E                EXPECTM_2957S161:      
462E   E1                     POP   HL   
462F                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +};^",3
462F   31 00 53               LD   SP,STACK   
4632   CD 40 0D               CALL   coldInit   
4635   CD 56 51               CALL   execStr   
4638   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/t :f{1 %f/br 2 +};^",0   
464D   CD 80 0C               CALL   flushBuffer   
4650   E1                     POP   HL   
4651   E5                     PUSH   HL   
4652   11 03 00               LD   DE,3   
4655   B7                     OR   A   
4656   ED 52                  SBC   HL,DE   
4658   7D                     LD   A,L   
4659   B4                     OR   H   
465A   CA C9 46               JP   Z,expectM_2958S162   
465D   CD F8 0C               CALL   printStr   
4660   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +};^"   
467B   CD F8 0C               CALL   printStr   
467E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
468D   21 03 00               LD   hl,3   
4690   E5                     PUSH   hl   
4691   E5                     PUSH   hl   
4692   CD 17 0E               CALL   run   
4695   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
469D   CD 80 0C               CALL   flushBuffer   
46A0   CD F8 0C               CALL   printStr   
46A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46B0   E1                     POP   hl   
46B1   E5                     PUSH   hl   
46B2   E5                     PUSH   hl   
46B3   CD 17 0E               CALL   run   
46B6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46C5   CD 80 0C               CALL   flushBuffer   
46C8   76                     HALT      
46C9                EXPECTM_2958S162:      
46C9   E1                     POP   HL   
46CA                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +};^",1
46CA   31 00 53               LD   SP,STACK   
46CD   CD 40 0D               CALL   coldInit   
46D0   CD 56 51               CALL   execStr   
46D3   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/f :f{1 %f/br 2 +};^",0   
46E8   CD 80 0C               CALL   flushBuffer   
46EB   E1                     POP   HL   
46EC   E5                     PUSH   HL   
46ED   11 01 00               LD   DE,1   
46F0   B7                     OR   A   
46F1   ED 52                  SBC   HL,DE   
46F3   7D                     LD   A,L   
46F4   B4                     OR   H   
46F5   CA 64 47               JP   Z,expectM_2959S163   
46F8   CD F8 0C               CALL   printStr   
46FB   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +};^"   
4716   CD F8 0C               CALL   printStr   
4719   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4728   21 01 00               LD   hl,1   
472B   E5                     PUSH   hl   
472C   E5                     PUSH   hl   
472D   CD 17 0E               CALL   run   
4730   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4738   CD 80 0C               CALL   flushBuffer   
473B   CD F8 0C               CALL   printStr   
473E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
474B   E1                     POP   hl   
474C   E5                     PUSH   hl   
474D   E5                     PUSH   hl   
474E   CD 17 0E               CALL   run   
4751   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4760   CD 80 0C               CALL   flushBuffer   
4763   76                     HALT      
4764                EXPECTM_2959S163:      
4764   E1                     POP   HL   
4765                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
4765   31 00 53               LD   SP,STACK   
4768   CD 40 0D               CALL   coldInit   
476B   CD 56 51               CALL   execStr   
476E   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
477A   CD 80 0C               CALL   flushBuffer   
477D   E1                     POP   HL   
477E   E5                     PUSH   HL   
477F   11 00 00               LD   DE,NUL   
4782   B7                     OR   A   
4783   ED 52                  SBC   HL,DE   
4785   7D                     LD   A,L   
4786   B4                     OR   H   
4787   CA ED 47               JP   Z,expectM_2960S164   
478A   CD F8 0C               CALL   printStr   
478D   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
479F   CD F8 0C               CALL   printStr   
47A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47B1   21 00 00               LD   hl,NUL   
47B4   E5                     PUSH   hl   
47B5   E5                     PUSH   hl   
47B6   CD 17 0E               CALL   run   
47B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47C1   CD 80 0C               CALL   flushBuffer   
47C4   CD F8 0C               CALL   printStr   
47C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47D4   E1                     POP   hl   
47D5   E5                     PUSH   hl   
47D6   E5                     PUSH   hl   
47D7   CD 17 0E               CALL   run   
47DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47E9   CD 80 0C               CALL   flushBuffer   
47EC   76                     HALT      
47ED                EXPECTM_2960S164:      
47ED   E1                     POP   HL   
47EE                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
47EE   31 00 53               LD   SP,STACK   
47F1   CD 40 0D               CALL   coldInit   
47F4   CD 56 51               CALL   execStr   
47F7   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
4803   CD 80 0C               CALL   flushBuffer   
4806   E1                     POP   HL   
4807   E5                     PUSH   HL   
4808   11 00 00               LD   DE,NUL   
480B   B7                     OR   A   
480C   ED 52                  SBC   HL,DE   
480E   7D                     LD   A,L   
480F   B4                     OR   H   
4810   CA 76 48               JP   Z,expectM_2961S165   
4813   CD F8 0C               CALL   printStr   
4816   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
4828   CD F8 0C               CALL   printStr   
482B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
483A   21 00 00               LD   hl,NUL   
483D   E5                     PUSH   hl   
483E   E5                     PUSH   hl   
483F   CD 17 0E               CALL   run   
4842   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
484A   CD 80 0C               CALL   flushBuffer   
484D   CD F8 0C               CALL   printStr   
4850   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
485D   E1                     POP   hl   
485E   E5                     PUSH   hl   
485F   E5                     PUSH   hl   
4860   CD 17 0E               CALL   run   
4863   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4872   CD 80 0C               CALL   flushBuffer   
4875   76                     HALT      
4876                EXPECTM_2961S165:      
4876   E1                     POP   HL   
4877                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
4877   31 00 53               LD   SP,STACK   
487A   CD 40 0D               CALL   coldInit   
487D   CD 56 51               CALL   execStr   
4880   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
488C   CD 80 0C               CALL   flushBuffer   
488F   E1                     POP   HL   
4890   E5                     PUSH   HL   
4891   11 00 00               LD   DE,NUL   
4894   B7                     OR   A   
4895   ED 52                  SBC   HL,DE   
4897   7D                     LD   A,L   
4898   B4                     OR   H   
4899   CA FF 48               JP   Z,expectM_2962S166   
489C   CD F8 0C               CALL   printStr   
489F   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
48B1   CD F8 0C               CALL   printStr   
48B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48C3   21 00 00               LD   hl,NUL   
48C6   E5                     PUSH   hl   
48C7   E5                     PUSH   hl   
48C8   CD 17 0E               CALL   run   
48CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48D3   CD 80 0C               CALL   flushBuffer   
48D6   CD F8 0C               CALL   printStr   
48D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48E6   E1                     POP   hl   
48E7   E5                     PUSH   hl   
48E8   E5                     PUSH   hl   
48E9   CD 17 0E               CALL   run   
48EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48FB   CD 80 0C               CALL   flushBuffer   
48FE   76                     HALT      
48FF                EXPECTM_2962S166:      
48FF   E1                     POP   HL   
4900                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4900   31 00 53               LD   SP,STACK   
4903   CD 40 0D               CALL   coldInit   
4906   CD 56 51               CALL   execStr   
4909   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
4915   CD 80 0C               CALL   flushBuffer   
4918   E1                     POP   HL   
4919   E5                     PUSH   HL   
491A   11 00 00               LD   DE,NUL   
491D   B7                     OR   A   
491E   ED 52                  SBC   HL,DE   
4920   7D                     LD   A,L   
4921   B4                     OR   H   
4922   CA 88 49               JP   Z,expectM_2963S167   
4925   CD F8 0C               CALL   printStr   
4928   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
493A   CD F8 0C               CALL   printStr   
493D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
494C   21 00 00               LD   hl,NUL   
494F   E5                     PUSH   hl   
4950   E5                     PUSH   hl   
4951   CD 17 0E               CALL   run   
4954   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
495C   CD 80 0C               CALL   flushBuffer   
495F   CD F8 0C               CALL   printStr   
4962   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
496F   E1                     POP   hl   
4970   E5                     PUSH   hl   
4971   E5                     PUSH   hl   
4972   CD 17 0E               CALL   run   
4975   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4984   CD 80 0C               CALL   flushBuffer   
4987   76                     HALT      
4988                EXPECTM_2963S167:      
4988   E1                     POP   HL   
4989                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4989   31 00 53               LD   SP,STACK   
498C   CD 40 0D               CALL   coldInit   
498F   CD 56 51               CALL   execStr   
4992   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
499A   CD 80 0C               CALL   flushBuffer   
499D   E1                     POP   HL   
499E   E5                     PUSH   HL   
499F   11 66 55               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
49A2   B7                     OR   A   
49A3   ED 52                  SBC   HL,DE   
49A5   7D                     LD   A,L   
49A6   B4                     OR   H   
49A7   CA 09 4A               JP   Z,expectM_2964S168   
49AA   CD F8 0C               CALL   printStr   
49AD   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
49BB   CD F8 0C               CALL   printStr   
49BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49CD   21 66 55               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
49D0   E5                     PUSH   hl   
49D1   E5                     PUSH   hl   
49D2   CD 17 0E               CALL   run   
49D5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49DD   CD 80 0C               CALL   flushBuffer   
49E0   CD F8 0C               CALL   printStr   
49E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49F0   E1                     POP   hl   
49F1   E5                     PUSH   hl   
49F2   E5                     PUSH   hl   
49F3   CD 17 0E               CALL   run   
49F6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A05   CD 80 0C               CALL   flushBuffer   
4A08   76                     HALT      
4A09                EXPECTM_2964S168:      
4A09   E1                     POP   HL   
4A0A                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
4A0A   31 00 53               LD   SP,STACK   
4A0D   CD 40 0D               CALL   coldInit   
4A10   CD 56 51               CALL   execStr   
4A13   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
4A1B   CD 80 0C               CALL   flushBuffer   
4A1E   E1                     POP   HL   
4A1F   E5                     PUSH   HL   
4A20   11 34 55               LD   DE,VARS + ("Z"-"A"+1)*2   
4A23   B7                     OR   A   
4A24   ED 52                  SBC   HL,DE   
4A26   7D                     LD   A,L   
4A27   B4                     OR   H   
4A28   CA 8A 4A               JP   Z,expectM_2965S169   
4A2B   CD F8 0C               CALL   printStr   
4A2E   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
4A3C   CD F8 0C               CALL   printStr   
4A3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A4E   21 34 55               LD   hl,VARS + ("Z"-"A"+1)*2   
4A51   E5                     PUSH   hl   
4A52   E5                     PUSH   hl   
4A53   CD 17 0E               CALL   run   
4A56   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A5E   CD 80 0C               CALL   flushBuffer   
4A61   CD F8 0C               CALL   printStr   
4A64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A71   E1                     POP   hl   
4A72   E5                     PUSH   hl   
4A73   E5                     PUSH   hl   
4A74   CD 17 0E               CALL   run   
4A77   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A86   CD 80 0C               CALL   flushBuffer   
4A89   76                     HALT      
4A8A                EXPECTM_2965S169:      
4A8A   E1                     POP   HL   
4A8B                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4A8B   31 00 53               LD   SP,STACK   
4A8E   CD 40 0D               CALL   coldInit   
4A91   CD 56 51               CALL   execStr   
4A94   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
4A9C   CD 80 0C               CALL   flushBuffer   
4A9F   E1                     POP   HL   
4AA0   E5                     PUSH   HL   
4AA1   11 32 55               LD   DE,VARS + ("Z"-"A")*2   
4AA4   B7                     OR   A   
4AA5   ED 52                  SBC   HL,DE   
4AA7   7D                     LD   A,L   
4AA8   B4                     OR   H   
4AA9   CA 0B 4B               JP   Z,expectM_2966S170   
4AAC   CD F8 0C               CALL   printStr   
4AAF   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4ABD   CD F8 0C               CALL   printStr   
4AC0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4ACF   21 32 55               LD   hl,VARS + ("Z"-"A")*2   
4AD2   E5                     PUSH   hl   
4AD3   E5                     PUSH   hl   
4AD4   CD 17 0E               CALL   run   
4AD7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4ADF   CD 80 0C               CALL   flushBuffer   
4AE2   CD F8 0C               CALL   printStr   
4AE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AF2   E1                     POP   hl   
4AF3   E5                     PUSH   hl   
4AF4   E5                     PUSH   hl   
4AF5   CD 17 0E               CALL   run   
4AF8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B07   CD 80 0C               CALL   flushBuffer   
4B0A   76                     HALT      
4B0B                EXPECTM_2966S170:      
4B0B   E1                     POP   HL   
4B0C                          ;*Macro unroll:  test "'A' /ad", VARS
4B0C   31 00 53               LD   SP,STACK   
4B0F   CD 40 0D               CALL   coldInit   
4B12   CD 56 51               CALL   execStr   
4B15   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
4B1D   CD 80 0C               CALL   flushBuffer   
4B20   E1                     POP   HL   
4B21   E5                     PUSH   HL   
4B22   11 00 55               LD   DE,VARS   
4B25   B7                     OR   A   
4B26   ED 52                  SBC   HL,DE   
4B28   7D                     LD   A,L   
4B29   B4                     OR   H   
4B2A   CA 8C 4B               JP   Z,expectM_2967S171   
4B2D   CD F8 0C               CALL   printStr   
4B30   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4B3E   CD F8 0C               CALL   printStr   
4B41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B50   21 00 55               LD   hl,VARS   
4B53   E5                     PUSH   hl   
4B54   E5                     PUSH   hl   
4B55   CD 17 0E               CALL   run   
4B58   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B60   CD 80 0C               CALL   flushBuffer   
4B63   CD F8 0C               CALL   printStr   
4B66   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B73   E1                     POP   hl   
4B74   E5                     PUSH   hl   
4B75   E5                     PUSH   hl   
4B76   CD 17 0E               CALL   run   
4B79   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B88   CD 80 0C               CALL   flushBuffer   
4B8B   76                     HALT      
4B8C                EXPECTM_2967S171:      
4B8C   E1                     POP   HL   
4B8D                          ;*Macro unroll:  test "-1. /c/vB 0#", $2D
4B8D   31 00 53               LD   SP,STACK   
4B90   CD 40 0D               CALL   coldInit   
4B93   CD 56 51               CALL   execStr   
4B96   2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 DB   "-1. /c/vB 0#",0   
4BA3   CD 80 0C               CALL   flushBuffer   
4BA6   E1                     POP   HL   
4BA7   E5                     PUSH   HL   
4BA8   11 2D 00               LD   DE,$2D   
4BAB   B7                     OR   A   
4BAC   ED 52                  SBC   HL,DE   
4BAE   7D                     LD   A,L   
4BAF   B4                     OR   H   
4BB0   CA 17 4C               JP   Z,expectM_2968S172   
4BB3   CD F8 0C               CALL   printStr   
4BB6   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /c/vB 0#"   
4BC9   CD F8 0C               CALL   printStr   
4BCC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BDB   21 2D 00               LD   hl,$2D   
4BDE   E5                     PUSH   hl   
4BDF   E5                     PUSH   hl   
4BE0   CD 17 0E               CALL   run   
4BE3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4BEB   CD 80 0C               CALL   flushBuffer   
4BEE   CD F8 0C               CALL   printStr   
4BF1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BFE   E1                     POP   hl   
4BFF   E5                     PUSH   hl   
4C00   E5                     PUSH   hl   
4C01   CD 17 0E               CALL   run   
4C04   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C13   CD 80 0C               CALL   flushBuffer   
4C16   76                     HALT      
4C17                EXPECTM_2968S172:      
4C17   E1                     POP   HL   
4C18                          ;*Macro unroll:  test {DQ,"A",DQ,".s /c/vB 0#"}, 65
4C18   31 00 53               LD   SP,STACK   
4C1B   CD 40 0D               CALL   coldInit   
4C1E   CD 56 51               CALL   execStr   
4C21   22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /c/vB 0#",0   
4C30   CD 80 0C               CALL   flushBuffer   
4C33   E1                     POP   HL   
4C34   E5                     PUSH   HL   
4C35   11 41 00               LD   DE,65   
4C38   B7                     OR   A   
4C39   ED 52                  SBC   HL,DE   
4C3B   7D                     LD   A,L   
4C3C   B4                     OR   H   
4C3D   CA A6 4C               JP   Z,expectM_2969S173   
4C40   CD F8 0C               CALL   printStr   
4C43   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /c/vB 0#"   
4C58   CD F8 0C               CALL   printStr   
4C5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C6A   21 41 00               LD   hl,65   
4C6D   E5                     PUSH   hl   
4C6E   E5                     PUSH   hl   
4C6F   CD 17 0E               CALL   run   
4C72   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C7A   CD 80 0C               CALL   flushBuffer   
4C7D   CD F8 0C               CALL   printStr   
4C80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C8D   E1                     POP   hl   
4C8E   E5                     PUSH   hl   
4C8F   E5                     PUSH   hl   
4C90   CD 17 0E               CALL   run   
4C93   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4CA2   CD 80 0C               CALL   flushBuffer   
4CA5   76                     HALT      
4CA6                EXPECTM_2969S173:      
4CA6   E1                     POP   HL   
4CA7                          ;*Macro unroll:  test "123. /c/vB 1#", $32
4CA7   31 00 53               LD   SP,STACK   
4CAA   CD 40 0D               CALL   coldInit   
4CAD   CD 56 51               CALL   execStr   
4CB0   31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 DB   "123. /c/vB 1#",0   
4CBE   CD 80 0C               CALL   flushBuffer   
4CC1   E1                     POP   HL   
4CC2   E5                     PUSH   HL   
4CC3   11 32 00               LD   DE,$32   
4CC6   B7                     OR   A   
4CC7   ED 52                  SBC   HL,DE   
4CC9   7D                     LD   A,L   
4CCA   B4                     OR   H   
4CCB   CA 33 4D               JP   Z,expectM_2970S174   
4CCE   CD F8 0C               CALL   printStr   
4CD1   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /c/vB 1#"   
4CE5   CD F8 0C               CALL   printStr   
4CE8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CF7   21 32 00               LD   hl,$32   
4CFA   E5                     PUSH   hl   
4CFB   E5                     PUSH   hl   
4CFC   CD 17 0E               CALL   run   
4CFF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4D07   CD 80 0C               CALL   flushBuffer   
4D0A   CD F8 0C               CALL   printStr   
4D0D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D1A   E1                     POP   hl   
4D1B   E5                     PUSH   hl   
4D1C   E5                     PUSH   hl   
4D1D   CD 17 0E               CALL   run   
4D20   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4D2F   CD 80 0C               CALL   flushBuffer   
4D32   76                     HALT      
4D33                EXPECTM_2970S174:      
4D33   E1                     POP   HL   
4D34                          ;*Macro unroll:  test ":a{%a}; F=1F^", 1
4D34   31 00 53               LD   SP,STACK   
4D37   CD 40 0D               CALL   coldInit   
4D3A   CD 56 51               CALL   execStr   
4D3D   3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 DB   ":a{%a}; F=1F^",0   
4D4B   CD 80 0C               CALL   flushBuffer   
4D4E   E1                     POP   HL   
4D4F   E5                     PUSH   HL   
4D50   11 01 00               LD   DE,1   
4D53   B7                     OR   A   
4D54   ED 52                  SBC   HL,DE   
4D56   7D                     LD   A,L   
4D57   B4                     OR   H   
4D58   CA C0 4D               JP   Z,expectM_2971S175   
4D5B   CD F8 0C               CALL   printStr   
4D5E   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a}; F=1F^"   
4D72   CD F8 0C               CALL   printStr   
4D75   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D84   21 01 00               LD   hl,1   
4D87   E5                     PUSH   hl   
4D88   E5                     PUSH   hl   
4D89   CD 17 0E               CALL   run   
4D8C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4D94   CD 80 0C               CALL   flushBuffer   
4D97   CD F8 0C               CALL   printStr   
4D9A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DA7   E1                     POP   hl   
4DA8   E5                     PUSH   hl   
4DA9   E5                     PUSH   hl   
4DAA   CD 17 0E               CALL   run   
4DAD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4DBC   CD 80 0C               CALL   flushBuffer   
4DBF   76                     HALT      
4DC0                EXPECTM_2971S175:      
4DC0   E1                     POP   HL   
4DC1                          ;*Macro unroll:  test "1 :b{:a{%a};};^F= 3F^",3
4DC1   31 00 53               LD   SP,STACK   
4DC4   CD 40 0D               CALL   coldInit   
4DC7   CD 56 51               CALL   execStr   
4DCA   31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a};};^F= 3F^",0   
4DE0   CD 80 0C               CALL   flushBuffer   
4DE3   E1                     POP   HL   
4DE4   E5                     PUSH   HL   
4DE5   11 03 00               LD   DE,3   
4DE8   B7                     OR   A   
4DE9   ED 52                  SBC   HL,DE   
4DEB   7D                     LD   A,L   
4DEC   B4                     OR   H   
4DED   CA 5D 4E               JP   Z,expectM_2972S176   
4DF0   CD F8 0C               CALL   printStr   
4DF3   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a};};^F= 3F^"   
4E0F   CD F8 0C               CALL   printStr   
4E12   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E21   21 03 00               LD   hl,3   
4E24   E5                     PUSH   hl   
4E25   E5                     PUSH   hl   
4E26   CD 17 0E               CALL   run   
4E29   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4E31   CD 80 0C               CALL   flushBuffer   
4E34   CD F8 0C               CALL   printStr   
4E37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E44   E1                     POP   hl   
4E45   E5                     PUSH   hl   
4E46   E5                     PUSH   hl   
4E47   CD 17 0E               CALL   run   
4E4A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4E59   CD 80 0C               CALL   flushBuffer   
4E5C   76                     HALT      
4E5D                EXPECTM_2972S176:      
4E5D   E1                     POP   HL   
4E5E                          ;*Macro unroll:  test "1 :b{:a{%a%b-};};^F= 3F^",2
4E5E   31 00 53               LD   SP,STACK   
4E61   CD 40 0D               CALL   coldInit   
4E64   CD 56 51               CALL   execStr   
4E67   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-};};^F= 3F^",0   
4E80   CD 80 0C               CALL   flushBuffer   
4E83   E1                     POP   HL   
4E84   E5                     PUSH   HL   
4E85   11 02 00               LD   DE,2   
4E88   B7                     OR   A   
4E89   ED 52                  SBC   HL,DE   
4E8B   7D                     LD   A,L   
4E8C   B4                     OR   H   
4E8D   CA 00 4F               JP   Z,expectM_2973S177   
4E90   CD F8 0C               CALL   printStr   
4E93   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-};};^F= 3F^"   
4EB2   CD F8 0C               CALL   printStr   
4EB5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EC4   21 02 00               LD   hl,2   
4EC7   E5                     PUSH   hl   
4EC8   E5                     PUSH   hl   
4EC9   CD 17 0E               CALL   run   
4ECC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4ED4   CD 80 0C               CALL   flushBuffer   
4ED7   CD F8 0C               CALL   printStr   
4EDA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4EE7   E1                     POP   hl   
4EE8   E5                     PUSH   hl   
4EE9   E5                     PUSH   hl   
4EEA   CD 17 0E               CALL   run   
4EED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4EFC   CD 80 0C               CALL   flushBuffer   
4EFF   76                     HALT      
4F00                EXPECTM_2973S177:      
4F00   E1                     POP   HL   
4F01                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",1
4F01   31 00 53               LD   SP,STACK   
4F04   CD 40 0D               CALL   coldInit   
4F07   CD 56 51               CALL   execStr   
4F0A   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",0   
4F2F   CD 80 0C               CALL   flushBuffer   
4F32   E1                     POP   HL   
4F33   E5                     PUSH   HL   
4F34   11 01 00               LD   DE,1   
4F37   B7                     OR   A   
4F38   ED 52                  SBC   HL,DE   
4F3A   7D                     LD   A,L   
4F3B   B4                     OR   H   
4F3C   CA BB 4F               JP   Z,expectM_2974S178   
4F3F   CD F8 0C               CALL   printStr   
4F42   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^"   
4F6D   CD F8 0C               CALL   printStr   
4F70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F7F   21 01 00               LD   hl,1   
4F82   E5                     PUSH   hl   
4F83   E5                     PUSH   hl   
4F84   CD 17 0E               CALL   run   
4F87   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4F8F   CD 80 0C               CALL   flushBuffer   
4F92   CD F8 0C               CALL   printStr   
4F95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FA2   E1                     POP   hl   
4FA3   E5                     PUSH   hl   
4FA4   E5                     PUSH   hl   
4FA5   CD 17 0E               CALL   run   
4FA8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4FB7   CD 80 0C               CALL   flushBuffer   
4FBA   76                     HALT      
4FBB                EXPECTM_2974S178:      
4FBB   E1                     POP   HL   
4FBC                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",1
4FBC   31 00 53               LD   SP,STACK   
4FBF   CD 40 0D               CALL   coldInit   
4FC2   CD 56 51               CALL   execStr   
4FC5   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",0   
4FEA   CD 80 0C               CALL   flushBuffer   
4FED   E1                     POP   HL   
4FEE   E5                     PUSH   HL   
4FEF   11 01 00               LD   DE,1   
4FF2   B7                     OR   A   
4FF3   ED 52                  SBC   HL,DE   
4FF5   7D                     LD   A,L   
4FF6   B4                     OR   H   
4FF7   CA 76 50               JP   Z,expectM_2975S179   
4FFA   CD F8 0C               CALL   printStr   
4FFD   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^"   
5028   CD F8 0C               CALL   printStr   
502B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
503A   21 01 00               LD   hl,1   
503D   E5                     PUSH   hl   
503E   E5                     PUSH   hl   
503F   CD 17 0E               CALL   run   
5042   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
504A   CD 80 0C               CALL   flushBuffer   
504D   CD F8 0C               CALL   printStr   
5050   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
505D   E1                     POP   hl   
505E   E5                     PUSH   hl   
505F   E5                     PUSH   hl   
5060   CD 17 0E               CALL   run   
5063   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
5072   CD 80 0C               CALL   flushBuffer   
5075   76                     HALT      
5076                EXPECTM_2975S179:      
5076   E1                     POP   HL   
5077                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",2
5077   31 00 53               LD   SP,STACK   
507A   CD 40 0D               CALL   coldInit   
507D   CD 56 51               CALL   execStr   
5080   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",0   
50B2   CD 80 0C               CALL   flushBuffer   
50B5   E1                     POP   HL   
50B6   E5                     PUSH   HL   
50B7   11 02 00               LD   DE,2   
50BA   B7                     OR   A   
50BB   ED 52                  SBC   HL,DE   
50BD   7D                     LD   A,L   
50BE   B4                     OR   H   
50BF   CA 4B 51               JP   Z,expectM_2976S180   
50C2   CD F8 0C               CALL   printStr   
50C5   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^"   
50FD   CD F8 0C               CALL   printStr   
5100   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
510F   21 02 00               LD   hl,2   
5112   E5                     PUSH   hl   
5113   E5                     PUSH   hl   
5114   CD 17 0E               CALL   run   
5117   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
511F   CD 80 0C               CALL   flushBuffer   
5122   CD F8 0C               CALL   printStr   
5125   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5132   E1                     POP   hl   
5133   E5                     PUSH   hl   
5134   E5                     PUSH   hl   
5135   CD 17 0E               CALL   run   
5138   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
5147   CD 80 0C               CALL   flushBuffer   
514A   76                     HALT      
514B                EXPECTM_2976S180:      
514B   E1                     POP   HL   
514C                             ; 
514C   CD F8 0C               CALL   printStr   
514F   44 6F 6E 65 21 00      .CSTR   "Done!"   
5155   76                     HALT      
5156                             ; executes a null teminated string (null executes exit_)
5156                             ; the string should be immedaitely following the call
5156                EXECSTR:      ; create a root stack frame
5156   C1                     POP   bc   ; bc = code*
5157   0B                     DEC   bc   ; dec to prepare for next routine
5158   11 00 00               LD   de,0   
515B   D5                     PUSH   de   ; push fake IP
515C   D5                     PUSH   de   ; push null arg_list*
515D   D5                     PUSH   de   ; push null first_arg*
515E   D5                     PUSH   de   ; push fake BP
515F   DD E9                  JP   (ix)   
5161                STKSIZE:   EQU   $100   ; Stack size
5161                TIBSIZE:   EQU   $100   ; 256 bytes
5161                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
5161                          ALIGN   $100   
5200                          DS   STKSIZE   
5300                STACK:       
5300                          ALIGN   $100   
5300                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5400                          ALIGN   $100   
5400                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5500                          ALIGN   $100   
5500                VARS:        
5500                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
55D0                RESTARTS:      
55D0                RST08:    DS   2   
55D2                RST10:    DS   2   
55D4                RST18:    DS   2   
55D6                RST20:    DS   2   
55D8                RST28:    DS   2   
55DA                RST30:    DS   2   ; 
55DC                BAUD:     DS   2   ; 
55DE                INTVEC:   DS   2   ; 
55E0                NMIVEC:   DS   2   ; 
55E2                GETCVEC:   DS   2   ; 
55E4                PUTCVEC:   DS   2   ; 
55E6                SYSVARS:      
55E6                             ; initialised sys variables (preserved)
55E6                VDATAWIDTH:   DS   2   ; 
55E8                VNUMBASE:   DS   2   ; 
55EA                VTIBPTR:   DS   2   ; 
55EC                VBUFPTR:   DS   2   ; 
55EE                VNEXT:    DS   2   ; 
55F0                VHEAPPTR:   DS   2   ; 
55F2                VRECUR:   DS   2   ; 
55F4                             ; uninitialised sys variables (preserved)
55F4                VPOINTER:   DS   2   ; 
55F6                VREMAIN:   DS   2   ; 
55F8                VSAVEDIP:   DS   2   ; 
55FA                VSAVEDSP:   DS   2   ; 
55FC                VSAVEDNEXT:   DS   2   ; 
55FE                VSAVEDBP:   DS   2   ; 
5600                             ; uninitialised sys variables (unpreserved)
5600                VTEMP1:   DS   2   ; 
5602                VTEMP2:   DS   2   ; 
5604                VLASTDEF:   DS   2   ; 
5606                TBPTR:    DS   2   ; reserved for tests
5608                TITLEBUF:   DS   20   
561C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0C7E DEFINED AT LINE 1908 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1572 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2137 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
LPAREN_:            0315 DEFINED AT LINE 188 IN MAIN.asm
LBRACE_:            0315 DEFINED AT LINE 189 IN MAIN.asm
RBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
TICK_:              031B DEFINED AT LINE 193 IN MAIN.asm
SEMICOLON_:         031E DEFINED AT LINE 195 IN MAIN.asm
DOT_:               0321 DEFINED AT LINE 197 IN MAIN.asm
COLON_:             0324 DEFINED AT LINE 199 IN MAIN.asm
UPCASE_:            0327 DEFINED AT LINE 201 IN MAIN.asm
LOWCASE_:           032A DEFINED AT LINE 203 IN MAIN.asm
QUESTION_:          032D DEFINED AT LINE 205 IN MAIN.asm
STAR_:              0330 DEFINED AT LINE 207 IN MAIN.asm
BANG_:              0333 DEFINED AT LINE 209 IN MAIN.asm
NOT:                033E DEFINED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
NUM_:               0344 DEFINED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
HASH_:              0347 DEFINED AT LINE 223 IN MAIN.asm
PIPE_:              034A DEFINED AT LINE 225 IN MAIN.asm
CARET_:             034D DEFINED AT LINE 227 IN MAIN.asm
COMMA_:             0350 DEFINED AT LINE 229 IN MAIN.asm
DQUOTE_:            0353 DEFINED AT LINE 231 IN MAIN.asm
MINUS_:             0356 DEFINED AT LINE 233 IN MAIN.asm
EQ_:                0359 DEFINED AT LINE 235 IN MAIN.asm
EQ0:                0362 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
EQ1:                0363 DEFINED AT LINE 249 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GT_:                0367 DEFINED AT LINE 253 IN MAIN.asm
LT_:                0372 DEFINED AT LINE 261 IN MAIN.asm
LT1:                037B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
SLASH_:             0384 DEFINED AT LINE 273 IN MAIN.asm
NOP_:               0387 DEFINED AT LINE 275 IN MAIN.asm
RPAREN_:            0389 DEFINED AT LINE 277 IN MAIN.asm
PLUS:               038C DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                038C DEFINED AT LINE 284 IN MAIN.asm
ADD1:               0397 DEFINED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
ADD3:               039B DEFINED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1790 IN MAIN.asm
ADD4:               03A6 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
AT:                 03A9 DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               03A9 DEFINED AT LINE 311 IN MAIN.asm
AMPER:              03B3 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03B3 DEFINED AT LINE 317 IN MAIN.asm
AND1:               03BA DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
PIPE:               03BE DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
OR:                 03C7 DEFINED AT LINE 337 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
XOR:                03D0 DEFINED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
XOR1:               03D1 DEFINED AT LINE 349 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
INVERT:             03DB DEFINED AT LINE 359 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
PERCENT:            03E0 DEFINED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARG:                03E0 DEFINED AT LINE 367 IN MAIN.asm
ARG0:               03FC DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ARG0A:              0405 DEFINED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
ARG1:               040A DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 390 IN MAIN.asm
ARG1A:              0412 DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
LBRACK:             0415 DEFINED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         0415 DEFINED AT LINE 409 IN MAIN.asm
RBRACK:             0431 DEFINED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           0431 DEFINED AT LINE 424 IN MAIN.asm
ARRAYEND1:          044D DEFINED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
ARRAYEND2:          045D DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
ARRAYEND3:          0462 DEFINED AT LINE 455 IN MAIN.asm
                    > USED AT LINE 440 IN MAIN.asm
HASH:               0481 DEFINED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ARRAYINDEX:         0481 DEFINED AT LINE 479 IN MAIN.asm
ARRAYINDEX0:        0489 DEFINED AT LINE 485 IN MAIN.asm
ARRAYINDEX1:        048A DEFINED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
ARRAYINDEX2:        0496 DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
COLON:              0499 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
ARGLIST:            0499 DEFINED AT LINE 505 IN MAIN.asm
ARGLIST1:           04A3 DEFINED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
ARGLIST1A:          04AB DEFINED AT LINE 518 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
ARGLIST2:           04B3 DEFINED AT LINE 523 IN MAIN.asm
ARGLIST3:           04BB DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
ARGLIST4:           04BE DEFINED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
ARGLIST5:           04C4 DEFINED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
ASSIGN:             04CF DEFINED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
ASSIGN0:            04D1 DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
ASSIGNX:            04D2 DEFINED AT LINE 556 IN MAIN.asm
ASSIGN1:            04DE DEFINED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
ABSOLUTE:           04E0 DEFINED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
ADDROF:             04ED DEFINED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
ADDROF1:            0501 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
ADDROF2:            050C DEFINED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
LBRACE:             050E DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
BLOCKSTART:         050E DEFINED AT LINE 610 IN MAIN.asm
BLOCKSTART1:        0512 DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 652 IN MAIN.asm
BLOCKSTART2:        053E DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
BLOCKSTART3:        0541 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCKSTART4:        0549 DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
BLOCKSTART5:        054C DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
BLOCKSTART6:        0574 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
RBRACE:             0577 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKEND:           0577 DEFINED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
BLOCKEND1:          05A9 DEFINED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
BLOCKEND2:          05B5 DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
BLOCKEND3:          05C7 DEFINED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
BLOCKEND4:          05DB DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
BREAK:              05E4 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
BREAK1:             05EB DEFINED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
TICK:               05FE DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
CHAR:               05FE DEFINED AT LINE 755 IN MAIN.asm
CHAR1:              0601 DEFINED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
CHAR2:              060D DEFINED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
CHAR3:              0610 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
SLASH:              0613 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
COMMAND:            0613 DEFINED AT LINE 774 IN MAIN.asm
COMMAND_A:          0652 DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
COMMAND_B:          065E DEFINED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
COMMAND_F:          066A DEFINED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
COMMAND_I:          0682 DEFINED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
COMMAND_L:          068E DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
COMMAND_M:          0697 DEFINED AT LINE 868 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
COMMAND_P:          06A0 DEFINED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
COMMAND_R:          06AF DEFINED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
COMMAND_V:          06BB DEFINED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
CHARS:              06D0 DEFINED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
CHARS1:             06D3 DEFINED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
NUMBERS:            06D8 DEFINED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
COMMENT:            06DE DEFINED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
SEMICOLON:          06E7 DEFINED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CREATEFUNC:         06E7 DEFINED AT LINE 930 IN MAIN.asm
CREATEFUNC0:        0702 DEFINED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
CREATEFUNC1:        071A DEFINED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
CREATEFUNC2:        072D DEFINED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
CREATEFUNC2A:       074C DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
CREATEFUNC3:        075B DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
CREATEFUNC4:        0766 DEFINED AT LINE 1023 IN MAIN.asm
CREATEFUNC5:        0767 DEFINED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
COMMA:              0783 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
DISCARD:            0783 DEFINED AT LINE 1049 IN MAIN.asm
DISCARD1:           0790 DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
DIV:                0792 DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
DECIMAL:            07A3 DEFINED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
DECIMAL1:           07A6 DEFINED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
HEXADECIMAL:        07AB DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
DOT:                07B1 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
BUFFERARRAY:        07C3 DEFINED AT LINE 32
                    > USED AT LINE 1084 IN MAIN.asm
BUFFERARRAYM_1609S1094: 07D1 DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       080C DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
BUFFERDEC:          0813 DEFINED AT LINE 1106 IN MAIN.asm
BUFFERDEC0:         082D DEFINED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
BUFFERDEC1:         083D DEFINED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
BUFFERDEC2:         085D DEFINED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
BUFFERDEC3:         085F DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
BUFFERDEC4:         086F DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
BUFFERDEC5:         0870 DEFINED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
BUFFERHEX:          0879 DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
BUFFERHEX1:         089A DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
BUFFERHEX2:         08A3 DEFINED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
BUFFERSTRING:       08B1 DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
BUFFERSTRING0:      08B8 DEFINED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
BUFFERSTRING1:      08BE DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
BUFFERCHAR:         08CB DEFINED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
BUFFERXCHARS:       08D0 DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
BUFFERXCHARS0:      08D1 DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
BUFFERXCHARS1:      08DA DEFINED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
BUFFERXCHARS2:      08E2 DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
DIVIDE:             08EC DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
DIVIDE1:            08F1 DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
DIVIDE2:            08FE DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
DIVIDE3:            08FF DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
EQUALS:             0905 DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
NOTEQUALS:          090D DEFINED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
LESSTHANEQ:         0916 DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
LESSTHAN:           091B DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
LESSTHAN1:          0920 DEFINED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
TRUE1:              0923 DEFINED AT LINE 1317 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
NULL1:              0929 DEFINED AT LINE 1321 IN MAIN.asm
FALSE1:             0929 DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
ERROR1:             092F DEFINED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
FOREACH:            0936 DEFINED AT LINE 32
                    > USED AT LINE 838 IN MAIN.asm
FOREACHM_1831S1334: 0942 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            09A4 DEFINED AT LINE 32
                    > USED AT LINE 840 IN MAIN.asm
FUNCSRCM_1858S1363: 09B0 DEFINED AT LINE 39
                    > USED AT LINE 35
CARET:              09DF DEFINED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
GO:                 09DF DEFINED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                09E0 DEFINED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
GO2:                09E6 DEFINED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
GOBLOCK:            09F1 DEFINED AT LINE 1393 IN MAIN.asm
                    > USED AT LINE 1388 IN MAIN.asm
GOBLOCK2:           0A16 DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
GOBLOCK3:           0A20 DEFINED AT LINE 1416 IN MAIN.asm
GOFUNC:             0A24 DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
GOFUNC1:            0A3D DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
GOFUNC2:            0A43 DEFINED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
GOFUNC3:            0A4E DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
GOFUNC4:            0A66 DEFINED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
GOFUNC5:            0A69 DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
GOFUNC6:            0A6C DEFINED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
GOFUNC7:            0A6F DEFINED AT LINE 1479 IN MAIN.asm
GOFUNC8:            0A73 DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
DOLLAR:             0A7E DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
HEXNUM:             0A7E DEFINED AT LINE 1494 IN MAIN.asm
HEXNUM1:            0A81 DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
HEXNUM2:            0A89 DEFINED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
UPCASE:             0A9B DEFINED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
LOWCASE:            0AA0 DEFINED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
IDENT1:             0AA5 DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
QUESTION:           0AB2 DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
IF:                 0AB2 DEFINED AT LINE 1537 IN MAIN.asm
IFTE:               0ABE DEFINED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
IFTE1:              0ABF DEFINED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
INPUT:              0ACB DEFINED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
KEY:                0AD6 DEFINED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
LITERAL:            0ADF DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
OUTPUT:             0AE8 DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
MAP:                0AF1 DEFINED AT LINE 32
                    > USED AT LINE 871 IN MAIN.asm
MAPM_2090S1606:     0AFD DEFINED AT LINE 39
                    > USED AT LINE 35
STAR:               0B38 DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
MUL:                0B38 DEFINED AT LINE 1621 IN MAIN.asm
MUL2:               0B3A DEFINED AT LINE 1624 IN MAIN.asm
MUL3:               0B42 DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1638 IN MAIN.asm
NUM:                0B54 DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
NUM0:               0B5D DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
NUM1:               0B5E DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
NUM2:               0B76 DEFINED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
NUM3:               0B81 DEFINED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
PIPESTREAM:         0B84 DEFINED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
RPAREN:             0B8E DEFINED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
SHIFTLEFT:          0B96 DEFINED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SHIFTLEFT1:         0B9E DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
SHIFTLEFT2:         0B9F DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
SHIFTRIGHT:         0BA6 DEFINED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
SHIFTRIGHT1:        0BAE DEFINED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
SHIFTRIGHT2:        0BB2 DEFINED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
DQUOTE:             0BB9 DEFINED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
STRING:             0BB9 DEFINED AT LINE 1735 IN MAIN.asm
STRING1:            0BC2 DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
STRING2:            0BC5 DEFINED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
STRING3:            0BCE DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
MINUS:              0BE1 DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
SUB:                0BED DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
SUB1:               0BF7 DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
PRINTBUFFER:        0C00 DEFINED AT LINE 32
                    > USED AT LINE 878 IN MAIN.asm
PRINTBUFFERM_2270S1796: 0C0C DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0C26 DEFINED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
PRINTCHARS1:        0C2D DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
PRINTCHARS2:        0C33 DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
PRINTSTACK:         0C38 DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
RECUR:              0C3A DEFINED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
REMAIN:             0C40 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
SIZE:               0C46 DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
CONSTBUFSTART:      0C4E DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
CONSTHEAPSTART:     0C53 DEFINED AT LINE 1873 IN MAIN.asm
CONSTTIBSTART:      0C58 DEFINED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
VARBUFPTR:          0C5D DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
VARHEAPPTR:         0C66 DEFINED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
VARTIBPTR:          0C6F DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
VARIABLE:           0C78 DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
CONSTANT:           0C7B DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
FILTER:             0C7E DEFINED AT LINE 1907 IN MAIN.asm
FLUSHBUFFER:        0C80 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
JUMPTABLE:          0C97 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
JUMPTABLE0:         0C99 DEFINED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
JUMPTABLE1:         0CA6 DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
JUMPTABLE2:         0CA7 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
PRTSTR0:            0CAD DEFINED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
PRTSTR:             0CB1 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
NESTING:            0CB6 DEFINED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
NESTING0:           0CC0 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
NESTING1A:          0CC7 DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
NESTING1:           0CCA DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
NESTING2:           0CD9 DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
NESTING3:           0CDB DEFINED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
NESTING4:           0CE6 DEFINED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
PROMPT:             0CE8 DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
CRLF:               0CF1 DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
PRINTSTR:           0CF8 DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 56
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 184
TITLESTR:           0CFF DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
INIT:               0D13 DEFINED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
INIT1:              0D1B DEFINED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
WARMINIT:           0D23 DEFINED AT LINE 2049 IN MAIN.asm
COLDBOOT0:          0D36 DEFINED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
COLDINIT:           0D40 DEFINED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0D51 DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
COLDSTART:          0D5E DEFINED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
START:              0D67 DEFINED AT LINE 2084 IN MAIN.asm
START1:             0D6D DEFINED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
INTERPRET:          0D73 DEFINED AT LINE 2091 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2256 IN MAIN.asm
INTERPRET2:         0D82 DEFINED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
INTERPRET3:         0D8A DEFINED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
INTERPRET4:         0D95 DEFINED AT LINE 2117 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
INTERPRET5:         0D9A DEFINED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2189 IN MAIN.asm
INTERPRET5A:        0DBD DEFINED AT LINE 2161 IN MAIN.asm
INTERPRET6:         0DBF DEFINED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
INTERPRET7:         0DCD DEFINED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
INTERPRET8:         0DE0 DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
NEXT:               0DFB DEFINED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
NEXT1:              0E0C DEFINED AT LINE 2216 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
EXIT:               0E13 DEFINED AT LINE 2221 IN MAIN.asm
                    > USED AT LINE 2218 IN MAIN.asm
RUN:                0E17 DEFINED AT LINE 2225 IN MAIN.asm
                    > USED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0E1B DEFINED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
BACKSPACE_:         0E2E DEFINED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
EDIT_:              0E3E DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
REEDIT_:            0E56 DEFINED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2140 IN MAIN.asm
PRINTSTACK_:        0E59 DEFINED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
F1:                 0E63 DEFINED AT LINE 32
                    > USED AT LINE 842 IN MAIN.asm
F1M_2816S12:        0E73 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0ED2 DEFINED AT LINE 32
                    > USED AT LINE 844 IN MAIN.asm
F2M_2833S30:        0EE0 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0F36 DEFINED AT LINE 32
                    > USED AT LINE 846 IN MAIN.asm
F3M_2843S41:        0F43 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0F46 DEFINED AT LINE 32
                    > USED AT LINE 848 IN MAIN.asm
F4M_2847S46:        0F53 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1000 DEFINED AT LINE 52
                    > USED AT LINE 8
EXPECTM_2853S54:    10B0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2858S62:    1131 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2859S63:    11A8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2860S64:    121D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2861S65:    1292 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2862S66:    1307 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2863S67:    137C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2864S68:    13F3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2865S69:    146C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2866S70:    14E3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2867S71:    155A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2868S72:    15D3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2869S73:    164E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2870S74:    16C7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2871S75:    1740 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2872S76:    17BF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S77:    183E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S78:    18BB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S79:    193C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S80:    19C1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S81:    1A44 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S82:    1AC1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S83:    1B46 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S84:    1BC7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S85:    1C44 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S86:    1CC1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S87:    1D46 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S88:    1DC3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S89:    1E40 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S90:    1EBF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S91:    1F4E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S92:    1FCB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S93:    2050 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S94:    20CD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S95:    2158 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S96:    21E3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2893S97:    226E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2894S98:    22F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2895S99:    237E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2896S100:   23FB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2897S101:   247A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2898S102:   24F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2899S103:   2576 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2900S104:   25F3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2901S105:   2670 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2902S106:   26ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2903S107:   276A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2904S108:   27E7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2905S109:   2864 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2906S110:   28E1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2907S111:   2960 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2908S112:   29DF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2909S113:   2A5E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2910S114:   2ADF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2911S115:   2B60 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2912S116:   2BDB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2913S117:   2C56 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2914S118:   2CD7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2915S119:   2D5E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2916S120:   2DE5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2917S121:   2E70 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2918S122:   2F05 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2919S123:   2F9A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2920S124:   3015 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2921S125:   3092 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2922S126:   3111 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2923S127:   3192 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2924S128:   3211 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2925S129:   3290 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2926S130:   3311 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2927S131:   3398 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2928S132:   3423 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2929S133:   34AA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2930S134:   353B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2931S135:   35CE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2932S136:   3667 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2933S137:   3704 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2934S138:   3793 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2935S139:   3828 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2936S140:   38BF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2937S141:   3958 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2938S142:   39EF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2939S143:   3A94 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2940S144:   3B27 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2941S145:   3BC8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2942S146:   3C6B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2943S147:   3D10 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2944S148:   3DBF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2945S149:   3E6E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2946S150:   3EFB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2947S151:   3F8E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2948S152:   401B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2949S153:   40B4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2950S154:   414D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2951S155:   41F8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2952S156:   42AB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2953S157:   435E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2954S158:   43FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2955S159:   44A6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2956S160:   4563 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2957S161:   462E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2958S162:   46C9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2959S163:   4764 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2960S164:   47ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2961S165:   4876 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2962S166:   48FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2963S167:   4988 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2964S168:   4A09 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2965S169:   4A8A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2966S170:   4B0B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2967S171:   4B8C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2968S172:   4C17 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2969S173:   4CA6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2970S174:   4D33 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2971S175:   4DC0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2972S176:   4E5D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2973S177:   4F00 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2974S178:   4FBB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2975S179:   5076 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2976S180:   514B DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            5156 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5300 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5300 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 2193 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
BUF:                5400 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
VARS:               5500 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 598 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           55D0 DEFINED AT LINE 18 IN ram.asm
RST08:              55D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              55D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              55D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              55D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              55D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              55DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               55DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             55DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             55E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            55E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            55E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            55E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2064 IN MAIN.asm
VDATAWIDTH:         55E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 445 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
VNUMBASE:           55E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
VTIBPTR:            55EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
VBUFPTR:            55EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
VNEXT:              55EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2076 IN MAIN.asm
VHEAPPTR:           55F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 434 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
VRECUR:             55F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 725 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
                    > USED AT LINE 1852 IN MAIN.asm
VPOINTER:           55F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
VREMAIN:            55F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
VSAVEDIP:           55F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
VSAVEDSP:           55FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2199 IN MAIN.asm
VSAVEDNEXT:         55FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
VSAVEDBP:           55FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
VTEMP1:             5600 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 1400 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
VTEMP2:             5602 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
VLASTDEF:           5604 DEFINED AT LINE 58 IN ram.asm
TBPTR:              5606 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           5608 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
HEAP:               561C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
