0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; call prtdec
0000                             ; push hl
0000                             ; call prtdec
0000                             ; pop hl
0000                             ; call printStr
0000                             ; .cstr " (#"
0000                             ; call prthex
0000                             ; call printStr
0000                             ; .cstr ")\r\n"
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 call run
0000                 .cstr "."
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". `(#`.s .h `)\r\n`.s"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 46               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 46               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 46               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 46               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 46               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 46               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 46               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 46               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 46               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 46               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 45               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 46               LD   (RST08),HL   
0094   22 D2 46               LD   (RST10),HL   
0097   22 D4 46               LD   (RST18),HL   
009A   22 D6 46               LD   (RST20),HL   
009D   22 D8 46               LD   (RST28),HL   
00A0   22 DA 46               LD   (RST30),HL   
00A3   22 DE 46               LD   (INTVEC),HL   
00A6   22 E0 46               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 46               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 46               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 45               LD   SP,STACK   
00C6   CD C5 0B               CALL   init   
00C9   C3 00 0D               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                STKSIZE:   EQU   $80   ; Stack size
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                BUFSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                TMAGIC:   EQU   $AA   ; magic number
00CC                TRESERV:   EQU   $A0   ; reserved
00CC                TNUMBER:   EQU   $A1   ; number
00CC                TSTRING:   EQU   $A2   ; string
00CC                TPOINTER:   EQU   $A3   ; pointer
00CC                TARRAY:   EQU   $A4   ; array
00CC                TBLOCK:   EQU   $A5   ; block
00CC                TLAMBDA:   EQU   $A6   ; lambda
00CC                TARGLST:   EQU   $A7   ; arglist
00CC                             ; z80_RST8    equ     $CF
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 48                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 49                  DW   BUF   ; vBUFPtr pointer into BUF
0188   69 0C                  DW   next   ; nNext
018A   00 4B                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   82                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   84                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7F                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6D                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   82                     DB   lsb(nop_)   ; ~
025F   82                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                AT_:         
0303   C3 99 03               JP   at   
0306                AMPER_:      
0306   C3 A3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C7 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FE 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 1A 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 72 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AC 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 D2 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3B 05               JP   rbrace   
031E                TICK_:       
031E   C3 97 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 01 08               JP   semicolon   
0324                DOT_:        
0324   C3 04 06               JP   dot   
0327                UNDERSCORE_:      
0327   C3 F3 07               JP   underscore   
032A                COLON_:      
032A   C3 9B 04               JP   colon   
032D                UPCASE_:      
032D   C3 77 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 7C 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 8E 07               JP   question   
0336                STAR_:       
0336   C3 A7 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 C3 07               JP   num   
0341                HASH_:       
0341   C3 5A 07               JP   hash   
0344                PIPE_:       
0344   C3 AE 03               JP   pipe   
0347                CARET_:      
0347   C3 B4 06               JP   caret   
034A                COMMA_:      
034A   C3 AE 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 40 08               JP   dblquote   
0350                MINUS_:      
0350   C3 68 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8A 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 93 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA 2D 08               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 09                  JR   lt1   
036D                LT_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   
036F   FE 3C                  CP   "<"   
0371   CA 1D 08               JP   z,shiftLeft   
0374   E1                     POP   hl   
0375   D1                     POP   de   
0376                LT1:         
0376   FE 3D                  CP   "="   
0378   CA 9B 06               JP   z,lessthaneq   
037B   0B                     DEC   bc   
037C   C3 A0 06               JP   lessthan   
037F                SLASH_:      
037F   C3 BD 05               JP   slash   
0382                NOP_:        
0382   DD E9                  JP   (ix)   
0384                RPAREN_:      
0384   C3 F9 07               JP   rparen   
0387                             ;*******************************************************************
0387                             ; implementations
0387                             ;*******************************************************************
0387                PLUS:        
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 05                  JR   nz,add1   
038D   E1                     POP   hl   
038E   23                     INC   hl   
038F   C3 8C 04               JP   assign0   
0392                ADD1:        
0392   0B                     DEC   bc   
0393   D1                     POP   de   ; second term
0394   E1                     POP   hl   ; first term
0395   19                     ADD   hl,de   
0396                ADD3:        
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; @ addr
0399                             ; -- ptr
0399                AT:          
0399                ADDR:        
0399   ED 5B F2 46            LD   de,(vPointer)   
039D   21 F2 46               LD   hl,vPointer   
03A0   C3 D5 0A               JP   variable   
03A3                AMPER:       
03A3                AND:         
03A3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A4   E1                     POP   hl   
03A5   7B                     LD   a,e   
03A6   A5                     AND   l   
03A7   6F                     LD   l,a   
03A8   7A                     LD   a,d   
03A9   A4                     AND   h   
03AA                AND1:        
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                PIPE:        
03AE                OR:          
03AE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   B5                     OR   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   B4                     OR   h   
03B5   18 F3                  JR   and1   
03B7                XOR:         
03B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B8                XOR1:        
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   AD                     XOR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   AC                     XOR   h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0   DD E9                  JP   (ix)   
03C2                INVERT:      ; Bitwise INVert the top member of the stack
03C2   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C5   18 F1                  JR   xor1   
03C7                             ; $a .. $z
03C7                             ; -- value
03C7                             ; returns value of arg
03C7                DOLLAR:      
03C7                ARG:         
03C7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CA   FD 56 05               LD   d,(iy+5)   
03CD   EB                     EX   de,hl   
03CE   7D                     LD   a,l   ; arg_list* == null, skip
03CF   B4                     OR   h   
03D0   28 1C                  JR   z,arg0a   
03D2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D3   2B                     DEC   hl   
03D4   7E                     LD   a,(hl)   
03D5   23                     INC   hl   
03D6   23                     INC   hl   
03D7   B7                     OR   a   
03D8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DA   5F                     LD   e,a   ; e = a = num_args
03DB   03                     INC   bc   ; a = next char = dollar_name
03DC   0A                     LD   a,(bc)   
03DD   C5                     PUSH   bc   ; save IP
03DE   43                     LD   b,e   ; b = e = num_args
03DF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E2   FD 56 03               LD   d,(iy+3)   
03E5                ARG0:        
03E5   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E6   1B                     DEC   de   
03E7   BE                     CP   (hl)   
03E8   28 09                  JR   z,arg1   
03EA   23                     INC   hl   ; hl = next arg_list*
03EB   10 F8                  DJNZ   arg0   
03ED   C1                     POP   bc   ; no match, restore IP
03EE                ARG0A:       
03EE   11 00 00               LD   de,0   ; return 0
03F1   18 08                  JR   arg1a   
03F3                ARG1:        
03F3   C1                     POP   bc   ; restore IP
03F4   EB                     EX   de,hl   ; hl = arg*
03F5   22 F2 46               LD   (vPointer),hl   ; store arg* in setter
03F8   5E                     LD   e,(hl)   
03F9   23                     INC   hl   
03FA   56                     LD   d,(hl)   ; de = arg
03FB                ARG1A:       
03FB   D5                     PUSH   de   ; push arg
03FC   DD E9                  JP   (ix)   
03FE                LBRACK:      
03FE                ARRAYSTART:      
03FE   11 00 00               LD   de,0   ; create stack frame
0401   D5                     PUSH   de   ; push null for IP
0402   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0405   FD 56 05               LD   d,(iy+5)   ; 
0408   D5                     PUSH   de   ; 
0409   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040C   FD 56 03               LD   d,(iy+3)   ; 
040F   D5                     PUSH   de   ; 
0410   FD E5                  PUSH   iy   ; push BP
0412   FD 21 00 00            LD   iy,0   ; BP = SP
0416   FD 39                  ADD   iy,sp   
0418   DD E9                  JP   (ix)   
041A                RBRACK:      
041A                ARRAYEND:      
041A   FD 54                  LD   d,iyh   ; de = BP
041C   FD 5D                  LD   e,iyl   
041E   ED 43 FE 46            LD   (vTemp1),bc   ; save IP
0422   62 6B                  LD   hl,de   ; hl = de = BP
0424   B7                     OR   a   
0425   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0427   CB 3C                  SRL   h   ; 
0429   CB 1D                  RR   l   
042B   44 4D                  LD   bc,hl   ; bc = count
042D   2A F0 46               LD   hl,(vHeapPtr)   ; hl = array[-4]
0430   71                     LD   (hl),c   ; write num items in length word
0431   23                     INC   hl   
0432   70                     LD   (hl),b   
0433   23                     INC   hl   ; hl = array[0], bc = count
0434                             ; de = BP, hl = array[0], bc = count
0434   3E A4                  LD   a,TARRAY   ; write type tag
0436   77                     LD   (hl),a   
0437   23                     INC   hl   
0438   3E AA                  LD   a,TMAGIC   ; write magic byte
043A   77                     LD   (hl),a   
043B   23                     INC   hl   
043C                ARRAYEND1:      
043C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043F   77                     LD   (hl),a   ; write lsb of array item
0440   23                     INC   hl   ; move to msb of array item
0441   3A E6 46               LD   a,(vDataWidth)   ; vDataWidth=1?
0444   3D                     DEC   a   
0445   28 05                  JR   z,arrayEnd2   
0447   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044A   77                     LD   (hl),a   ; write msb of array item
044B   23                     INC   hl   ; move to next word in array
044C                ARRAYEND2:      
044C   FD 2B                  DEC   iy   ; move to next word on stack
044E   FD 2B                  DEC   iy   
0450   0B                     DEC   bc   ; dec items count
0451   79                     LD   a,c   ; if not zero loop
0452   B0                     OR   b   
0453   20 E7                  JR   nz,arrayEnd1   
0455   EB                     EX   de,hl   ; de = end of array, hl = BP
0456   F9                     LD   sp,hl   ; sp = BP
0457   E1                     POP   hl   ; de = end of array, hl = old BP
0458   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0459   FD 62                  LD   iyh,d   
045B   FD 6B                  LD   iyl,e   
045D   D1                     POP   de   ; pop arg_list (discard)
045E   D1                     POP   de   ; pop first_arg* (discard)
045F   D1                     POP   de   ; pop IP (discard)
0460   ED 5B F0 46            LD   de,(vHeapPtr)   ; de = array[-4]
0464   13                     INC   de   ; de = array[0]
0465   13                     INC   de   
0466   13                     INC   de   
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   22 F0 46               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FE 46            LD   bc,(vTemp1)   ; restore IP
0470   DD E9                  JP   (ix)   
0472                             ; index of an array, based on vDataWidth
0472                             ; array num -- value    ; also sets vPointer to address
0472                ARRINDEX:      
0472   E1                     POP   hl   ; hl = index
0473   D1                     POP   de   ; de = array
0474   3A E6 46               LD   a,(vDataWidth)   ; a = data width
0477   3D                     DEC   a   
0478   28 01                  JR   z,arrIndex1   
047A                ARRINDEX0:      
047A   29                     ADD   hl,hl   ; if data width = 2 then double
047B                ARRINDEX1:      
047B   19                     ADD   hl,de   ; add addr
047C   22 F2 46               LD   (vPointer),hl   ; store address in setter
047F   16 00                  LD   d,0   
0481   5E                     LD   e,(hl)   
0482   B7                     OR   a   ; check data width again
0483   28 02                  JR   z,arrIndex2   
0485   23                     INC   hl   
0486   56                     LD   d,(hl)   
0487                ARRINDEX2:      
0487   D5                     PUSH   de   
0488   DD E9                  JP   (ix)   
048A                             ; value _oldValue --            ; uses address in vPointer
048A                ASSIGN:      
048A   E1                     POP   hl   ; discard last accessed value
048B   E1                     POP   hl   ; hl = new value
048C                ASSIGN0:      
048C   EB                     EX   de,hl   ; de = new value
048D                ASSIGNX:      
048D   2A F2 46               LD   hl,(vPointer)   
0490   73                     LD   (hl),e   
0491   3A E6 46               LD   a,(vDataWidth)   
0494   3D                     DEC   a   ; is it byte?
0495   28 02                  JR   z,assign1   
0497   23                     INC   hl   
0498   72                     LD   (hl),d   
0499                ASSIGN1:      
0499   DD E9                  JP   (ix)   
049B                             ; arg_list - parses input (ab:c)
049B                             ; names after the : represent uninitialised locals
049B                             ; return values are the state of the stack after the block ends
049B                COLON:       
049B                ARGLIST:      
049B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049E   2A F0 46               LD   hl,(vHeapPtr)   ; hl = heap*
04A1   23                     INC   hl   ; skip length field to start
04A2   23                     INC   hl   
04A3   E5                     PUSH   hl   ; save start of arg_list
04A4   03                     INC   bc   ; point to next char
04A5                ARGLIST1:      
04A5   0A                     LD   a,(bc)   
04A6   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A8   20 03                  JR   nz,arglist1a   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   18 10                  JR   arglist3   
04AD                ARGLIST1A:      
04AD   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AF   38 0F                  JR   c,arglist4   
04B1   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B3   30 0B                  JR   nc,arglist4   
04B5                ARGLIST2:      
04B5   77                     LD   (hl),a   
04B6   23                     INC   hl   
04B7   1C                     INC   e   ; increase arg count
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arglist3   
04BC   14                     INC   d   ; if d > 0 increase local count
04BD                ARGLIST3:      
04BD   03                     INC   bc   ; point to next char
04BE   18 E5                  JR   arglist1   
04C0                ARGLIST4:      
04C0   0B                     DEC   bc   
04C1   AF                     XOR   a   
04C2   B2                     OR   d   
04C3   28 01                  JR   z,arglist5   
04C5   15                     DEC   d   ; remove initial inc
04C6                ARGLIST5:      
04C6   23                     INC   hl   
04C7   22 F0 46               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CA   E1                     POP   hl   ; hl = start of arg_list
04CB   E5                     PUSH   hl   ; return start of arg_list
04CC   2B                     DEC   hl   ; write number of locals at start - 1
04CD   72                     LD   (hl),d   
04CE   2B                     DEC   hl   ; write number of args + locals at start - 2
04CF   73                     LD   (hl),e   
04D0   DD E9                  JP   (ix)   
04D2                LBRACE:      
04D2                BLOCKSTART:      
04D2   C5                     PUSH   bc   ; return pointer to first { of block
04D3   03                     INC   bc   
04D4   16 01                  LD   d,1   ; nesting: count first parenthesis
04D6                BLOCKSTART1:      ; Skip to end of definition
04D6   0A                     LD   a,(bc)   ; Get the next character
04D7   03                     INC   bc   ; Point to next character
04D8   FE 21                  CP   " " + 1   ; ignore whitespace
04DA   38 FA                  JR   c,blockStart1   
04DC   FE 29                  CP   ")"   
04DE   28 2D                  JR   z,blockStart4   
04E0   FE 7D                  CP   "}"   
04E2   28 29                  JR   z,blockStart4   
04E4   FE 5D                  CP   "]"   
04E6   28 25                  JR   z,blockStart4   
04E8   FE 28                  CP   "("   
04EA   28 16                  JR   z,blockStart2   
04EC   FE 7B                  CP   "{"   
04EE   28 12                  JR   z,blockStart2   
04F0   FE 5B                  CP   "["   
04F2   28 0E                  JR   z,blockStart2   
04F4   FE 27                  CP   "'"   
04F6   28 0D                  JR   z,blockStart3   
04F8   FE 60                  CP   "`"   
04FA   28 09                  JR   z,blockStart3   
04FC   FE 22                  CP   DQUOTE   
04FE   28 05                  JR   z,blockStart3   
0500   18 D4                  JR   blockStart1   
0502                BLOCKSTART2:      
0502   14                     INC   d   
0503   18 D1                  JR   blockStart1   
0505                BLOCKSTART3:      
0505   3E 80                  LD   a,$80   
0507   AA                     XOR   d   
0508   47                     LD   b,a   
0509   20 CB                  JR   nz,blockStart1   
050B   18 03                  JR   blockStart5   
050D                BLOCKSTART4:      
050D   15                     DEC   d   
050E   20 C6                  JR   nz,blockStart1   ; get the next element
0510                BLOCKSTART5:      
0510   60 69                  LD   hl,bc   ; hl = IP
0512   11 00 4B               LD   de,HEAP   ; is IP pointing to object in heap
0515   B7                     OR   a   ; IP - HEAP
0516   ED 52                  SBC   hl,de   
0518   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051A   28 1C                  JR   z,blockStart6   
051C   60 69                  LD   hl,bc   ; hl = IP
051E   D1                     POP   de   ; de = block*
051F   ED 43 FE 46            LD   (vTemp1),bc   ; save IP
0523   B7                     OR   a   ; bc = size
0524   ED 52                  SBC   hl,de   
0526   44 4D                  LD   bc,hl   
0528   EB                     EX   de,hl   ; hl = block* de = heap*
0529   ED 5B F0 46            LD   de,(vHeapPtr)   
052D   D5                     PUSH   de   ; return hblock*
052E   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0530   ED 53 F0 46            LD   (vHeapPtr),de   ; heap* += size
0534   ED 4B FE 46            LD   bc,(vTemp1)   ; restore IP
0538                BLOCKSTART6:      
0538   0B                     DEC   bc   ; balanced, exit
0539   DD E9                  JP   (ix)   
053B                RBRACE:      
053B                BLOCKEND:      
053B   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053E   FD 56 01               LD   d,(iy+1)   
0541   ED 53 FE 46            LD   (vTemp1),de   
0545   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0548   FD 56 07               LD   d,(iy+7)   
054B   ED 53 00 47            LD   (vTemp2),de   
054F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0552   FD 56 03               LD   d,(iy+3)   
0555   EB                     EX   de,hl   
0556   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0559   FD 56 01               LD   d,(iy+1)   
055C   13                     INC   de   ; for carry flag <=
055D   B7                     OR   a   
055E   ED 52                  SBC   hl,de   
0560   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0562   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0564   FD 5D                  LD   e,iyl   
0566   21 08 00               LD   hl,8   
0569   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056A   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056B   18 0C                  JR   blockEnd2   
056D                BLOCKEND1:      ; same scope
056D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0570   FD 56 03               LD   d,(iy+3)   
0573   EB                     EX   de,hl   
0574   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0576   FD 5D                  LD   e,iyl   
0578   EB                     EX   de,hl   
0579                BLOCKEND2:      
0579   44 4D                  LD   bc,hl   ; bc = hl = BP
057B   B7                     OR   a   ; hl = BP - SP = count
057C   ED 72                  SBC   hl,sp   
057E   7D                     LD   a,l   
057F   B4                     OR   h   
0580   28 09                  JR   z,blockEnd3   
0582   C5                     PUSH   bc   ; bc = count, hl = BP
0583   44 4D                  LD   bc,hl   
0585   E1                     POP   hl   
0586   2B                     DEC   hl   ; hl = BP-1
0587   1B                     DEC   de   ; de = args*-1
0588   ED B8                  LDDR      
058A   13                     INC   de   
058B                BLOCKEND3:      
058B   EB                     EX   de,hl   ; sp = de = new tos*
058C   F9                     LD   sp,hl   
058D   ED 4B 00 47            LD   bc,(vTemp2)   
0591   FD 2A FE 46            LD   iy,(vTemp1)   
0595   DD E9                  JP   (ix)   
0597                TICK:        
0597                CHAR:        
0597   21 00 00               LD   hl,0   ; if "" is empty or null
059A                CHAR1:       
059A   03                     INC   bc   ; point to next char
059B   0A                     LD   a,(bc)   
059C   FE 27                  CP   "'"   ; ' is the terminator
059E   28 09                  JR   z,char3   
05A0   FE 5C                  CP   $5c   ; \ is the escape
05A2   20 02                  JR   nz,char2   
05A4   03                     INC   bc   
05A5   0A                     LD   a,(bc)   
05A6                CHAR2:       
05A6   6F                     LD   l,a   
05A7   18 F1                  JR   char1   
05A9                CHAR3:       
05A9   E5                     PUSH   hl   
05AA   DD E9                  JP   (ix)   
05AC                BACKSLASH:      
05AC   DD E9                  JP   (ix)   
05AE                             ; , discard stack item
05AE                             ; x y -- x
05AE                COMMA:       
05AE                DISCARD:      
05AE   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05B0   FD 5D                  LD   e,iyl   
05B2   EB                     EX   de,hl   
05B3   B7                     OR   a   
05B4   ED 72                  SBC   hl,sp   
05B6   CB 7C                  BIT   7,h   
05B8   20 01                  JR   nz,discard1   
05BA   E1                     POP   hl   
05BB                DISCARD1:      
05BB   DD E9                  JP   (ix)   
05BD                SLASH:       
05BD   CD 5D 0B               CALL   jumpTable   
05C0   2F                     DB   "/"   
05C1   8E 08                  DW   comment   
05C3   61                     DB   "a"   
05C4   97 08                  DW   command_a   
05C6   62                     DB   "b"   
05C7   D1 08                  DW   command_b   
05C9   63                     DB   "c"   
05CA   DB 0A                  DW   chars   
05CC   64                     DB   "d"   
05CD   E3 0A                  DW   decimal   
05CF   66                     DB   "f"   
05D0   AE 06                  DW   false1   
05D2   68                     DB   "h"   
05D3   EB 0A                  DW   hexadecimal   
05D5   69                     DB   "i"   
05D6   0F 0A                  DW   command_i   
05D8   6B                     DB   "k"   
05D9   FC 0A                  DW   key   
05DB   6E                     DB   "n"   
05DC   0E 0B                  DW   numbers   
05DE   6F                     DB   "o"   
05DF   05 0B                  DW   output   
05E1   70                     DB   "p"   
05E2   1B 0A                  DW   command_p   
05E4   73                     DB   "s"   
05E5   61 0A                  DW   size   
05E7   74                     DB   "t"   
05E8   A8 06                  DW   true1   
05EA   76                     DB   "v"   
05EB   96 0A                  DW   command_v   
05ED   78                     DB   "x"   
05EE   B7 03                  DW   xor   
05F0   00                     DB   NUL   
05F1   F3 05                  DW   div   
05F3                DIV:         
05F3   D1                     POP   de   
05F4   E1                     POP   hl   
05F5   C5                     PUSH   bc   ; preserve the IP
05F6   44 4D                  LD   bc,hl   
05F8   CD 7A 06               CALL   divide   
05FB   EB                     EX   de,hl   
05FC   ED 53 F4 46            LD   (vRemain),de   
0600   C1                     POP   bc   
0601   C3 96 03               JP   add3   
0604                DOT:         
0604   CD 5D 0B               CALL   jumpTable   
0607   61                     DB   "a"   
0608   16 06                  DW   dotArray   
060A   68                     DB   "h"   
060B   2A 06                  DW   dotHex   
060D   73                     DB   "s"   
060E   3E 06                  DW   dotStr   
0610   63                     DB   "c"   
0611   52 06                  DW   dotChar   
0613   00                     DB   NUL   
0614   66 06                  DW   dotDec   
0616                DOTARRAY:      
0616   CD B4 06               CALL   go   
0619   00 00                  DW   NUL   ; null closure
061B   1F 06                  DW   dotArray_block   
061D   4F 0B                  DW   args1A0L   
061F                DOTARRAY_BLOCK:      
061F   7B 24 61 2F 62 61 2F 70 78 7D 00 .CSTR   "{$a/ba/px}"   ; block
062A                DOTHEX:      
062A   CD B4 06               CALL   go   
062D   00 00                  DW   NUL   ; null closure
062F   33 06                  DW   dotHex_block   
0631   4F 0B                  DW   args1A0L   
0633                DOTHEX_BLOCK:      
0633   7B 24 61 2F 62 68 2F 70 78 7D 00 .CSTR   "{$a/bh/px}"   ; block
063E                DOTSTR:      
063E   CD B4 06               CALL   go   
0641   00 00                  DW   NUL   ; null closure
0643   47 06                  DW   dotStr_block   
0645   4F 0B                  DW   args1A0L   
0647                DOTSTR_BLOCK:      
0647   7B 24 61 2F 62 73 2F 70 78 7D 00 .CSTR   "{$a/bs/px}"   ; block
0652                DOTCHAR:      
0652   CD B4 06               CALL   go   
0655   00 00                  DW   NUL   ; null closure
0657   5B 06                  DW   dotChar_block   
0659   4F 0B                  DW   args1A0L   
065B                DOTCHAR_BLOCK:      
065B   7B 24 61 2F 62 63 2F 70 78 7D 00 .CSTR   "{$a/bc/px}"   ; block
0666                DOTDEC:      
0666   CD B4 06               CALL   go   
0669   00 00                  DW   NUL   ; closure
066B   6F 06                  DW   dotDec_block   
066D   4F 0B                  DW   args1A0L   
066F                DOTDEC_BLOCK:      
066F   7B 24 61 2F 62 64 2F 70 78 7D 00 .CSTR   "{$a/bd/px}"   ; block
067A                             ; division subroutine.
067A                             ; bc: divisor, de: dividend, hl: remainder
067A                DIVIDE:      
067A   21 00 00               LD   hl,0   ; zero the remainder
067D   3E 10                  LD   a,16   ; loop counter
067F                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
067F   CB 21                  SLA   c   
0681   CB 10                  RL   b   
0683   ED 6A                  ADC   hl,hl   
0685   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0687   38 03                  JR   c,divide2   
0689   0C                     INC   c   
068A   18 01                  JR   divide3   
068C                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
068C   19                     ADD   hl,de   
068D                DIVIDE3:      
068D   3D                     DEC   a   
068E   20 EF                  JR   nz,divide1   
0690   50 59                  LD   de,bc   ; result from bc to de
0692   C9                     RET      
0693                             ; hl = value1, de = value2
0693                             ; hl = result
0693                EQUALS:      
0693   B7                     OR   a   ; reset the carry flag
0694   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0696   28 10                  JR   z,true1   
0698   C3 AE 06               JP   false1   
069B                             ; hl = value1 de = value2
069B                             ; hl = result
069B                LESSTHANEQ:      
069B   B7                     OR   a   
069C   ED 52                  SBC   hl,de   
069E   18 05                  JR   lessthan1   
06A0                             ; hl = value1 de = value2
06A0                             ; hl = result
06A0                LESSTHAN:      
06A0   B7                     OR   a   
06A1   ED 52                  SBC   hl,de   
06A3   28 09                  JR   z,false1   
06A5                LESSTHAN1:      
06A5   FA AE 06               JP   m,false1   
06A8                TRUE1:       
06A8   21 FF FF               LD   hl,TRUE   
06AB   E5                     PUSH   hl   
06AC   DD E9                  JP   (ix)   
06AE                NULL1:       
06AE                FALSE1:      
06AE   21 00 00               LD   hl,FALSE   
06B1   E5                     PUSH   hl   
06B2   DD E9                  JP   (ix)   
06B4                             ; execute a block of code which ends with }
06B4                             ; creates a root scope if BP == stack
06B4                             ; else uses outer scope
06B4                CARET:       
06B4                GO:          
06B4   D1                     POP   de   ; de = block*
06B5                GO1:         
06B5   7B                     LD   a,e   ; if block* == null, exit
06B6   B2                     OR   d   
06B7   20 02                  JR   nz,go2   
06B9   DD E9                  JP   (ix)   
06BB                GO2:         
06BB   1A                     LD   a,(de)   
06BC   FE 7B                  CP   "{"   
06BE   28 07                  JR   z,goBlock1   
06C0   FE 28                  CP   "("   
06C2   C2 FA 06               JP   nz,goLambda   
06C5   13                     INC   de   ; de is the address to jump back to
06C6   D5                     PUSH   de   ; push de just before stack frame
06C7                GOBLOCK:      
06C7                GOBLOCK1:      
06C7   ED 53 FE 46            LD   (vTemp1),de   ; save de
06CB   21 80 45               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
06CE   FD 54                  LD   d,iyh   
06D0   FD 5D                  LD   e,iyl   
06D2   B7                     OR   a   ; if stack* == BP then this is the root_scope
06D3   ED 52                  SBC   hl,de   
06D5   ED 5B FE 46            LD   de,(vTemp1)   ; restore de
06D9   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
06DA   B4                     OR   h   
06DB   3E 00                  LD   a,0   
06DD   28 70                  JR   z,goLambda8   
06DF   C5                     PUSH   bc   ; push IP
06E0   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
06E3   FD 46 05               LD   b,(iy+5)   
06E6   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
06E9   FD 66 03               LD   h,(iy+3)   
06EC                GOBLOCK2:      
06EC   C5                     PUSH   bc   ; arg_list*
06ED   E5                     PUSH   hl   ; first_arg*
06EE   FD E5                  PUSH   iy   ; push BP
06F0   FD 21 00 00            LD   iy,0   ; BP = SP
06F4   FD 39                  ADD   iy,sp   
06F6   42 4B                  LD   bc,de   ; bc = de = block*-1
06F8   DD E9                  JP   (ix)   
06FA                GOLAMBDA:      ; execute lambda
06FA   EB                     EX   de,hl   ; hl = lambda*
06FB   5E                     LD   e,(hl)   ; de = partial_array*
06FC   23                     INC   hl   
06FD   56                     LD   d,(hl)   
06FE   23                     INC   hl   
06FF   7B                     LD   a,e   ; if partial_array* == null skip
0700   B2                     OR   d   
0701   28 25                  JR   z,goLambda3   
0703   ED 43 FE 46            LD   (vTemp1),bc   
0707   22 00 47               LD   (vTemp2),hl   ; save bc,hl
070A   EB                     EX   de,hl   ; hl = partial_array*
070B   2B                     DEC   hl   ; skip type byte
070C   2B                     DEC   hl   ; skip magic byte
070D   2B                     DEC   hl   ; bc = count
070E   46                     LD   b,(hl)   
070F   2B                     DEC   hl   
0710   4E                     LD   c,(hl)   
0711   23                     INC   hl   ; hl = array data*
0712   23                     INC   hl   
0713   23                     INC   hl   
0714   23                     INC   hl   
0715   18 06                  JR   goLambda2   ; push each item on stack
0717                GOLAMBDA1:      
0717   5E                     LD   e,(hl)   ; de = partial item
0718   23                     INC   hl   
0719   56                     LD   d,(hl)   
071A   23                     INC   hl   
071B   D5                     PUSH   de   ; push on stack
071C   0B                     DEC   bc   
071D                GOLAMBDA2:      
071D   79                     LD   a,c   ; if count != 0 then loop
071E   B0                     OR   b   
071F   20 F6                  JR   nz,goLambda1   
0721   ED 4B FE 46            LD   bc,(vTemp1)   ; restore bc
0725   2A 00 47               LD   hl,(vTemp2)   ; restore hl
0728                GOLAMBDA3:      
0728   5E                     LD   e,(hl)   ; de = block*
0729   23                     INC   hl   
072A   56                     LD   d,(hl)   
072B   23                     INC   hl   
072C   ED 53 FE 46            LD   (vTemp1),de   ; save block*
0730   5E                     LD   e,(hl)   ; de = arg_list*
0731   23                     INC   hl   
0732   56                     LD   d,(hl)   
0733   23                     INC   hl   
0734   EB                     EX   de,hl   ; hl = arg_list*
0735   ED 5B FE 46            LD   de,(vTemp1)   ; restore de = block*
0739   7D                     LD   a,l   ; if arg_list* == null a = 0
073A   B4                     OR   h   
073B   20 03                  JR   nz,goLambda4   
073D   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
073E   18 0F                  JR   goLambda8   
0740                GOLAMBDA4:      ; allocate locals
0740   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0741   7E                     LD   a,(hl)   
0742   18 03                  JR   goLambda6   
0744                GOLAMBDA5:      ; loop
0744   3B                     DEC   sp   
0745   3B                     DEC   sp   
0746   3D                     DEC   a   
0747                GOLAMBDA6:      
0747   B7                     OR   a   
0748   20 FA                  JR   nz,goLambda5   ; end loop
074A                GOLAMBDA7:      
074A   2B                     DEC   hl   ; a = num_args* x 2
074B   7E                     LD   a,(hl)   
074C   23                     INC   hl   
074D   23                     INC   hl   
074E   87                     ADD   a,a   ; a *= 2
074F                GOLAMBDA8:      
074F   C5                     PUSH   bc   ; push IP
0750   44 4D                  LD   bc,hl   
0752   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0755   85                     ADD   a,l   
0756   6F                     LD   l,a   
0757   39                     ADD   hl,sp   
0758   18 92                  JR   goBlock2   
075A                HASH:        
075A                HEXNUM:      
075A   21 00 00               LD   hl,0   ; Clear hl to accept the number
075D                HEXNUM1:      
075D   03                     INC   bc   
075E   0A                     LD   a,(bc)   ; Get the character which is a numeral
075F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0761   28 02                  JR   z,hexnum2   ; no a decimal
0763   D6 07                  SUB   7   ; sub 7  to make $a - $F
0765                HEXNUM2:      
0765   D6 30                  SUB   $30   ; form decimal digit
0767   DA E5 07               JP   c,num2   
076A   FE 10                  CP   $0F+1   
076C   D2 E5 07               JP   nc,num2   
076F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0770   29                     ADD   hl,hl   ; 4X
0771   29                     ADD   hl,hl   ; 8X
0772   29                     ADD   hl,hl   ; 16X
0773   85                     ADD   a,l   ; add into bottom of hl
0774   6F                     LD   l,a   
0775   18 E6                  JR   hexnum1   
0777                UPCASE:      
0777   0A                     LD   a,(bc)   ; a = identifier char
0778   D6 41                  SUB   "A"   ; "A" = 0
077A   18 05                  JR   ident1   
077C                LOWCASE:      
077C   0A                     LD   a,(bc)   
077D   D6 61                  SUB   "a"   
077F   C6 1A                  ADD   a,26   
0781                IDENT1:      
0781   87                     ADD   a,a   ; l = a * 2
0782   6F                     LD   l,a   
0783   26 46                  LD   h,msb(vars)   
0785   22 F2 46               LD   (vPointer),hl   ; store address in setter
0788   5E                     LD   e,(hl)   
0789   23                     INC   hl   
078A   56                     LD   d,(hl)   
078B   D5                     PUSH   de   
078C   DD E9                  JP   (ix)   
078E                             ; if
078E                             ; condition then -- value
078E                QUESTION:      
078E                IF:          
078E   03                     INC   bc   
078F   0A                     LD   a,(bc)   
0790   FE 3F                  CP   "?"   
0792   28 06                  JR   z,ifte   
0794   0B                     DEC   bc   
0795   11 00 00               LD   de,NUL   ; NUL pointer for else
0798   18 01                  JR   ifte1   
079A                             ; ifte
079A                             ; condition then else -- value
079A                IFTE:        
079A   D1                     POP   de   ; de = else
079B                IFTE1:       
079B   E1                     POP   hl   ; hl = then
079C   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
079D   7C                     LD   a,h   
079E   B5                     OR   l   
079F   E1                     POP   hl   ; hl = then
07A0   CA B5 06               JP   z,go1   ; if z de = else
07A3   EB                     EX   de,hl   ; condition = false, de = then
07A4   C3 B5 06               JP   go1   
07A7                STAR:        
07A7                MUL:         
07A7   D1                     POP   de   ; get first value
07A8   E1                     POP   hl   
07A9                MUL2:        
07A9   C5                     PUSH   bc   ; Preserve the IP
07AA   44 4D                  LD   bc,hl   ; bc = 2nd value
07AC   21 00 00               LD   hl,0   
07AF   3E 10                  LD   a,16   
07B1                MUL3:        
07B1   29                     ADD   hl,hl   
07B2   CB 13                  RL   e   
07B4   CB 12                  RL   d   
07B6   30 04                  JR   nc,$+6   
07B8   09                     ADD   hl,bc   
07B9   30 01                  JR   nc,$+3   
07BB   13                     INC   de   
07BC   3D                     DEC   a   
07BD   20 F2                  JR   nz,mul3   
07BF   C1                     POP   bc   ; Restore the IP
07C0   C3 96 03               JP   add3   
07C3                NUM:         
07C3   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07C6   0A                     LD   a,(bc)   ; Get numeral or -
07C7   FE 2D                  CP   "-"   
07C9   20 01                  JR   nz,num0   
07CB   03                     INC   bc   ; move to next char, no flags affected
07CC                NUM0:        
07CC   08                     EX   af,af'   ; save zero flag = 0 for later
07CD                NUM1:        
07CD   0A                     LD   a,(bc)   ; read digit
07CE   D6 30                  SUB   "0"   ; less than 0?
07D0   38 13                  JR   c,num2   ; not a digit, exit loop
07D2   FE 0A                  CP   10   ; greater that 9?
07D4   30 0F                  JR   nc,num2   ; not a digit, exit loop
07D6   03                     INC   bc   ; inc IP
07D7   54 5D                  LD   de,hl   ; multiply hl * 10
07D9   29                     ADD   hl,hl   
07DA   29                     ADD   hl,hl   
07DB   19                     ADD   hl,de   
07DC   29                     ADD   hl,hl   
07DD   85                     ADD   a,l   ; add digit in a to hl
07DE   6F                     LD   l,a   
07DF   3E 00                  LD   a,0   
07E1   8C                     ADC   a,h   
07E2   67                     LD   h,a   
07E3   18 E8                  JR   num1   
07E5                NUM2:        
07E5   0B                     DEC   bc   
07E6   08                     EX   af,af'   ; restore zero flag
07E7   20 07                  JR   nz,num3   
07E9   EB                     EX   de,hl   ; negate the value of hl
07EA   21 00 00               LD   hl,0   
07ED   B7                     OR   a   ; jump to sub2
07EE   ED 52                  SBC   hl,de   
07F0                NUM3:        
07F0   E5                     PUSH   hl   ; Put the number on the stack
07F1   DD E9                  JP   (ix)   ; and process the next character
07F3                UNDERSCORE:      
07F3                REMAIN:      
07F3   2A F4 46               LD   hl,(vRemain)   
07F6   E5                     PUSH   hl   
07F7   DD E9                  JP   (ix)   
07F9                RPAREN:      
07F9   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07FC   FD 46 09               LD   b,(iy+9)   
07FF   DD E9                  JP   (ix)   
0801                             ; arg_list* block* -- ptr
0801                SEMICOLON:      
0801   D1                     POP   de   ; de = block* hl = heap*
0802   2A F0 46               LD   hl,(vHeapPtr)   
0805   AF                     XOR   a   
0806   77                     LD   (hl),a   ; compile null partial_array*
0807   23                     INC   hl   
0808   77                     LD   (hl),a   
0809   23                     INC   hl   
080A   73                     LD   (hl),e   ; compile block*
080B   23                     INC   hl   
080C   72                     LD   (hl),d   
080D   23                     INC   hl   
080E   D1                     POP   de   ; de = block*
080F   73                     LD   (hl),e   ; compile arg_list*
0810   23                     INC   hl   
0811   72                     LD   (hl),d   
0812   23                     INC   hl   
0813   ED 5B F0 46            LD   de,(vHeapPtr)   ; return lambda*
0817   D5                     PUSH   de   
0818   22 F0 46               LD   (vHeapPtr),hl   ; heap* += 4
081B   DD E9                  JP   (ix)   
081D                             ; shiftLeft
081D                             ; value count -- value2          shift left count places
081D                SHIFTLEFT:      
081D   50 59                  LD   de,bc   ; save IP
081F   C1                     POP   bc   ; bc = count
0820   41                     LD   b,c   ; b = loop counter
0821   E1                     POP   hl   
0822   04                     INC   b   ; test for counter=0 case
0823   18 01                  JR   shiftLeft2   
0825                SHIFTLEFT1:      
0825   29                     ADD   hl,hl   ; left shift hl
0826                SHIFTLEFT2:      
0826   10 FD                  DJNZ   shiftLeft1   
0828   E5                     PUSH   hl   
0829   42 4B                  LD   bc,de   ; restore IP
082B   DD E9                  JP   (ix)   
082D                             ; shiftRight
082D                             ; value count -- value2          shift left count places
082D                SHIFTRIGHT:      
082D   50 59                  LD   de,bc   ; save IP
082F   C1                     POP   bc   ; bc = count
0830   41                     LD   b,c   ; b = loop counter
0831   E1                     POP   hl   
0832   04                     INC   b   ; test for counter=0 case
0833   18 04                  JR   shiftRight2   
0835                SHIFTRIGHT1:      
0835   CB 3C                  SRL   h   ; right shift hl
0837   CB 1D                  RR   l   
0839                SHIFTRIGHT2:      
0839   10 FA                  DJNZ   shiftRight1   
083B   E5                     PUSH   hl   
083C   42 4B                  LD   bc,de   ; restore IP
083E   DD E9                  JP   (ix)   
0840                             ; string
0840                             ; -- ptr                        ; points to start of string chars,
0840                             ; length is stored at start - 2 bytes
0840                DBLQUOTE:      
0840                STRING:      
0840   2A F0 46               LD   hl,(vHeapPtr)   ; hl = heap*
0843   23                     INC   hl   ; skip length field to start
0844   23                     INC   hl   
0845   E5                     PUSH   hl   ; save start of string
0846   03                     INC   bc   ; point to next char
0847   18 03                  JR   string2   
0849                STRING1:      
0849   77                     LD   (hl),a   
084A   23                     INC   hl   ; increase count
084B   03                     INC   bc   ; point to next char
084C                STRING2:      
084C   0A                     LD   a,(bc)   
084D   FE 22                  CP   DQUOTE   ; " is the string terminator
084F   28 04                  JR   z,string3   
0851   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0853   20 F4                  JR   nz,string1   
0855                STRING3:      
0855   AF                     XOR   a   ; write NUL to terminate string
0856   77                     LD   (hl),a   ; hl = end of string
0857   23                     INC   hl   
0858   22 F0 46               LD   (vHeapPtr),hl   ; bump heap* to after end of string
085B   2B                     DEC   hl   ; hl = end of string without terminator
085C   D1                     POP   de   ; de = start of string
085D   D5                     PUSH   de   ; return start of string
085E   B7                     OR   a   ; hl = length bytes, de = start of string
085F   ED 52                  SBC   hl,de   
0861   EB                     EX   de,hl   
0862   2B                     DEC   hl   ; write length bytes to length field at start - 2
0863   72                     LD   (hl),d   
0864   2B                     DEC   hl   
0865   73                     LD   (hl),e   
0866   DD E9                  JP   (ix)   
0868                MINUS:       ; negative sign or subtract
0868   03                     INC   bc   ; check if sign of a number
0869   0A                     LD   a,(bc)   
086A   0B                     DEC   bc   
086B   FE 30                  CP   "0"   
086D   38 05                  JR   c,sub   
086F   FE 3A                  CP   "9"+1   
0871   DA 3E 03               JP   c,num_   
0874                SUB:         ; Subtract the value 2nd on stack from top of stack
0874   03                     INC   bc   
0875   FE 2D                  CP   "-"   
0877   20 05                  JR   nz,sub1   
0879   E1                     POP   hl   
087A   2B                     DEC   hl   
087B   C3 8C 04               JP   assign0   
087E                SUB1:        
087E   0B                     DEC   bc   
087F   D1                     POP   de   
0880   E1                     POP   hl   
0881   B7                     OR   a   
0882   ED 52                  SBC   hl,de   
0884   C3 96 03               JP   add3   
0887                ERROR1:      
0887   21 01 00               LD   hl,1   ; error 1: unknown command
088A   E5                     PUSH   hl   
088B   C3 89 0C               JP   error   
088E                COMMENT:      
088E   03                     INC   bc   ; point to next char
088F   0A                     LD   a,(bc)   
0890   FE 20                  CP   " "   ; terminate on any char less than SP
0892   30 FA                  JR   nc,comment   
0894   0B                     DEC   bc   
0895   DD E9                  JP   (ix)   
0897                COMMAND_A:      
0897   CD 5D 0B               CALL   jumpTable   
089A   62                     DB   "b"   
089B   A3 08                  DW   absolute   
089D   64                     DB   "d"   
089E   B0 08                  DW   addrOf   
08A0   00                     DB   NUL   
08A1   87 08                  DW   error1   
08A3                             ; /ab absolute
08A3                             ; num -- num
08A3                ABSOLUTE:      
08A3   E1                     POP   hl   
08A4   CB 7C                  BIT   7,h   
08A6   C8                     RET   z   
08A7   AF                     XOR   a   
08A8   95                     SUB   l   
08A9   6F                     LD   l,a   
08AA   9F                     SBC   a,a   
08AB   94                     SUB   h   
08AC   67                     LD   h,a   
08AD   E5                     PUSH   hl   
08AE   DD E9                  JP   (ix)   
08B0                             ; /ad addrOf
08B0                             ; char -- addr
08B0                ADDROF:      
08B0   E1                     POP   hl   ; a = char
08B1   7D                     LD   a,l   
08B2   FE 7B                  CP   "z"+1   ; if a > z then exit
08B4   30 19                  JR   nc,addrOf2   
08B6   D6 41                  SUB   "A"   ; a - 65
08B8   38 15                  JR   c,addrOf2   ; if < A then exit
08BA   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08BC   38 06                  JR   c,addrOf1   
08BE   D6 06                  SUB   "a"-("Z"+1)   
08C0   FE 1A                  CP   "Z"-"A"+1   
08C2   38 0B                  JR   c,addrOf2   ; if < a then exit
08C4                ADDROF1:      
08C4   87                     ADD   a,a   ; double a
08C5   21 00 46               LD   hl,VARS   ; hl = VARS + a
08C8   85                     ADD   a,l   
08C9   6F                     LD   l,a   
08CA   3E 00                  LD   a,0   
08CC   8C                     ADC   a,h   
08CD   67                     LD   h,a   
08CE   E5                     PUSH   hl   
08CF                ADDROF2:      
08CF   DD E9                  JP   (ix)   
08D1                COMMAND_B:      
08D1   CD 5D 0B               CALL   jumpTable   
08D4   61                     DB   "a"   
08D5   EC 08                  DW   bufferArray   
08D7   63                     DB   "c"   
08D8   26 09                  DW   bufferChar   
08DA   64                     DB   "d"   
08DB   35 09                  DW   bufferDec   
08DD   68                     DB   "h"   
08DE   96 09                  DW   bufferHex   
08E0   72                     DB   "r"   
08E1   C5 09                  DW   break   
08E3   73                     DB   "s"   
08E4   DF 09                  DW   bufferString   
08E6   78                     DB   "x"   
08E7   FB 09                  DW   bufferXSpaces   
08E9   00                     DB   NUL   
08EA   87 08                  DW   error1   
08EC                BUFFERARRAY:      
08EC   CD B4 06               CALL   go   
08EF   00 00                  DW   NUL   ; closure
08F1   F5 08                  DW   bufferArray_block   
08F3   5A 0B                  DW   args1A2L   
08F5                BUFFERARRAY_BLOCK:      
08F5   7B 24 61 2F 73 24 63 3D 20 60 5B 20 60 2E 73 20 30 24 62 3D 28 24 61 24 62 25 2E 20 24 62 2B 2B 20 24 63 24 62 3D 3D 2F 62 29 5E 60 20 5D 60 7D 00 .CSTR   "{$a/s$c= `[ `.s 0$b=($a$b%. $b++ $c$b==/b)^` ]`}"   ; block
0926                             ;     ld (vTemp1),bc
0926                             ;     ld (vTemp2),ix
0926                             ;     ld de,(vBufPtr)
0926                             ;     ld a,"["
0926                             ;     ld (de),a
0926                             ;     inc de
0926                             ;     ld a," "
0926                             ;     ld (de),a
0926                             ;     inc de
0926                             ;     ld (vBufPtr),de
0926                             ;     pop hl
0926                             ;     dec hl
0926                             ;     dec hl
0926                             ;     dec hl
0926                             ;     ld b,(hl)
0926                             ;     dec hl
0926                             ;     ld c,(hl)
0926                             ;     inc hl
0926                             ;     inc hl
0926                             ;     inc hl
0926                             ;     push hl
0926                             ;     ld ix,bufferArray3
0926                             ;     jp (ix)
0926                             ; bufferArray2:
0926                             ;     dec bc
0926                             ;     ld e,(hl)
0926                             ;     inc hl
0926                             ;     ld d,(hl)
0926                             ;     inc hl
0926                             ;     push hl
0926                             ;     push de
0926                             ;     jp bufferDec
0926                             ; bufferArray3:
0926                             ;     pop hl
0926                             ;     ld a,c
0926                             ;     or b
0926                             ;     jr nz,bufferArray2
0926                             ;     ld de,(vBufPtr)
0926                             ;     ld a," "
0926                             ;     ld (de),a
0926                             ;     inc de
0926                             ;     ld a,"]"
0926                             ;     ld (de),a
0926                             ;     inc de
0926                             ;     ld (vBufPtr),de
0926                             ;     ld bc,(vTemp1)
0926                             ;     ld ix,(vTemp2)
0926                             ;     jp (ix)
0926                             ; /bc buffer char
0926                             ; char -- length
0926                BUFFERCHAR:      
0926   D1                     POP   de   ; e = char
0927   2A EC 46               LD   hl,(vBufPtr)   ; hl = buffer*
092A   73                     LD   (hl),e   ; e -> buffer*
092B   23                     INC   hl   ; buffer*++
092C   22 EC 46               LD   (vBufPtr),hl   ; save buffer*' in pointer
092F   11 01 00               LD   de,1   ; return 1 byte
0932   D5                     PUSH   de   
0933   DD E9                  JP   (ix)   
0935                             ; /bd buffer decimal
0935                             ; value -- length               ; length can be used to rewind buffer*
0935                BUFFERDEC:      
0935   ED 5B EC 46            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0939   D9                     EXX      
093A   E1                     POP   hl   ; hl = value
093B   CD 4D 09               CALL   bufferDec0   
093E   D9                     EXX      ; de = buffer*' bc = IP
093F   2A EC 46               LD   hl,(vBufPtr)   ; hl = buffer*
0942   ED 53 EC 46            LD   (vBufPtr),de   ; update buffer* with buffer*'
0946   EB                     EX   de,hl   ; hl = length
0947   B7                     OR   a   
0948   ED 52                  SBC   hl,de   
094A   E5                     PUSH   hl   ; return length
094B   DD E9                  JP   (ix)   
094D                             ; hl = value
094D                             ; de' = buffer*
094D                             ; a, bc, de, hl destroyed
094D                BUFFERDEC0:      
094D   CB 7C                  BIT   7,h   
094F   28 0C                  JR   z,bufferDec1   
0951   D9                     EXX      
0952   3E 2D                  LD   a,"-"   
0954   12                     LD   (de),a   
0955   13                     INC   de   
0956   D9                     EXX      
0957   AF                     XOR   a   
0958   95                     SUB   l   
0959   6F                     LD   l,a   
095A   9F                     SBC   a,a   
095B   94                     SUB   h   
095C   67                     LD   h,a   
095D                BUFFERDEC1:      
095D   0E 00                  LD   c,0   ; leading zeros flag = false
095F   11 F0 D8               LD   de,-10000   
0962   CD 7D 09               CALL   bufferDec2   
0965   11 18 FC               LD   de,-1000   
0968   CD 7D 09               CALL   bufferDec2   
096B   11 9C FF               LD   de,-100   
096E   CD 7D 09               CALL   bufferDec2   
0971   1E F6                  LD   e,-10   
0973   CD 7D 09               CALL   bufferDec2   
0976   0C                     INC   c   ; flag = true for at least digit
0977   1E FF                  LD   e,-1   
0979   CD 7D 09               CALL   bufferDec2   
097C   C9                     RET      
097D                BUFFERDEC2:      
097D   06 2F                  LD   b,"0"-1   
097F                BUFFERDEC3:      
097F   04                     INC   b   
0980   19                     ADD   hl,de   
0981   38 FC                  JR   c,bufferDec3   
0983   ED 52                  SBC   hl,de   
0985   3E 30                  LD   a,"0"   
0987   B8                     CP   b   
0988   20 05                  JR   nz,bufferDec4   
098A   AF                     XOR   a   
098B   B1                     OR   c   
098C   C8                     RET   z   
098D   18 01                  JR   bufferDec5   
098F                BUFFERDEC4:      
098F   0C                     INC   c   
0990                BUFFERDEC5:      
0990   78                     LD   a,b   
0991   D9                     EXX      
0992   12                     LD   (de),a   
0993   13                     INC   de   
0994   D9                     EXX      
0995   C9                     RET      
0996                             ; /bh buffer hex
0996                             ; value -- length               ; length can be used to rewind buffer*
0996                BUFFERHEX:      
0996   E1                     POP   hl   ; hl = value
0997   ED 5B EC 46            LD   de,(vBufPtr)   
099B   7C                     LD   a,h   
099C   CD B1 09               CALL   bufferHex1   
099F   7D                     LD   a,l   
09A0   CD B1 09               CALL   bufferHex1   
09A3   EB                     EX   de,hl   
09A4   ED 5B EC 46            LD   de,(vBufPtr)   
09A8   22 EC 46               LD   (vBufPtr),hl   
09AB   B7                     OR   a   
09AC   ED 52                  SBC   hl,de   
09AE   E5                     PUSH   hl   
09AF   DD E9                  JP   (ix)   
09B1                BUFFERHEX1:      
09B1   F5                     PUSH   af   
09B2   1F                     RRA      
09B3   1F                     RRA      
09B4   1F                     RRA      
09B5   1F                     RRA      
09B6   CD BA 09               CALL   bufferHex2   
09B9   F1                     POP   af   
09BA                BUFFERHEX2:      
09BA   E6 0F                  AND   0x0F   
09BC   C6 90                  ADD   a,0x90   
09BE   27                     DAA      
09BF   CE 40                  ADC   a,0x40   
09C1   27                     DAA      
09C2   12                     LD   (de),a   
09C3   13                     INC   de   
09C4   C9                     RET      
09C5                             ; /br break from loop
09C5                             ; --
09C5                BREAK:       
09C5   E1                     POP   hl   
09C6   7D                     LD   a,l   
09C7   B4                     OR   h   
09C8   28 02                  JR   z,break1   
09CA   DD E9                  JP   (ix)   
09CC                BREAK1:      
09CC   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09CE   FD 54                  LD   d,iyh   
09D0   21 08 00               LD   hl,8   
09D3   19                     ADD   hl,de   
09D4   23                     INC   hl   
09D5   23                     INC   hl   
09D6   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
09D9   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
09DC   C3 3B 05               JP   blockEnd   
09DF                             ; /bs buffered string
09DF                             ; string* -- length
09DF                BUFFERSTRING:      
09DF   E1                     POP   hl   ; hl = string*
09E0   ED 5B EC 46            LD   de,(vBufPtr)   ; de = buffer*
09E4   18 03                  JR   bufferString1   
09E6                BUFFERSTRING0:      
09E6   12                     LD   (de),a   ; a -> buffer*
09E7   13                     INC   de   ; string*++ buffer++
09E8   23                     INC   hl   
09E9                BUFFERSTRING1:      
09E9   7E                     LD   a,(hl)   ; a <- string*
09EA   B7                     OR   a   ; if NUL exit loop
09EB   20 F9                  JR   nz,bufferString0   
09ED   2A EC 46               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
09F0   ED 53 EC 46            LD   (vBufPtr),de   ; save buffer*' in pointer
09F4   EB                     EX   de,hl   ; hl = length
09F5   B7                     OR   a   
09F6   ED 52                  SBC   hl,de   
09F8   E5                     PUSH   hl   ; return length
09F9   DD E9                  JP   (ix)   
09FB                             ; /bx buffered x spaces
09FB                             ; length -- length
09FB                BUFFERXSPACES:      
09FB   D1                     POP   de   ; bc = length
09FC   D5                     PUSH   de   ; return length
09FD   2A EC 46               LD   hl,(vBufPtr)   ; hl = buffer*
0A00   18 04                  JR   bufferXSpaces2   
0A02                BUFFERXSPACES1:      
0A02   36 20                  LD   (hl)," "   
0A04   23                     INC   hl   
0A05   1B                     DEC   de   
0A06                BUFFERXSPACES2:      
0A06   7B                     LD   a,e   
0A07   B2                     OR   d   
0A08   20 F8                  JR   nz,bufferXSpaces1   
0A0A   22 EC 46               LD   (vBufPtr),hl   ; save buffer*'
0A0D   DD E9                  JP   (ix)   
0A0F                COMMAND_I:      
0A0F   CD 5D 0B               CALL   jumpTable   
0A12   6E                     DB   "n"   
0A13   F1 0A                  DW   input   
0A15   76                     DB   "v"   
0A16   C2 03                  DW   invert   
0A18   00                     DB   NUL   
0A19   87 08                  DW   error1   
0A1B                COMMAND_P:      
0A1B   CD 5D 0B               CALL   jumpTable   
0A1E   61                     DB   "a"   
0A1F   2D 0A                  DW   partial   
0A21   63                     DB   "c"   
0A22   4D 0A                  DW   printChars   
0A24   6B                     DB   "k"   
0A25   5F 0A                  DW   printStack   
0A27   78                     DB   "x"   
0A28   6B 0A                  DW   printX   
0A2A   00                     DB   NUL   
0A2B   87 08                  DW   error1   
0A2D                             ; partial
0A2D                             ; array* lambda* -- lambda1*
0A2D                PARTIAL:      
0A2D   E1                     POP   hl   ; h1 = lambda*
0A2E   ED 5B F0 46            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0A32   ED 43 FE 46            LD   (vTemp1),bc   ; save IP
0A36   01 06 00               LD   bc,6   ; bc = count
0A39   ED B0                  LDIR      ; clone lambda
0A3B   ED 4B FE 46            LD   bc,(vTemp1)   ; restore IP
0A3F   2A F0 46               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0A42   ED 53 F0 46            LD   (vHeapPtr),de   ; heap* += 6
0A46   D1                     POP   de   ; de = array*
0A47   E5                     PUSH   hl   ; return partial_array*
0A48   73                     LD   (hl),e   ; compile array*
0A49   23                     INC   hl   
0A4A   72                     LD   (hl),d   
0A4B   DD E9                  JP   (ix)   
0A4D                             ; printChars
0A4D                             ; char* len --
0A4D                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
0A4D                PRINTCHARS:      
0A4D   E1                     POP   hl   
0A4E   2B                     DEC   hl   
0A4F   D1                     POP   de   
0A50   C3 55 0A               JP   printChars2   
0A53                PRINTCHARS1:      
0A53   13                     INC   de   
0A54   2B                     DEC   hl   
0A55                PRINTCHARS2:      
0A55   1A                     LD   a,(de)   
0A56   CD 85 00               CALL   putchar   
0A59   7D                     LD   a,l   
0A5A   B4                     OR   h   
0A5B   20 F6                  JR   nz,printChars1   
0A5D   DD E9                  JP   (ix)   
0A5F                             ; /pk print stack
0A5F                             ; --
0A5F                PRINTSTACK:      
0A5F                             ;     ld (vTemp1),bc
0A5F                             ;     call printStr
0A5F                             ;     .cstr "=> "
0A5F                             ;     ld hl,STACK
0A5F                             ;     sbc hl,sp
0A5F                             ;     srl h
0A5F                             ;     rr l
0A5F                             ;     ld bc,hl
0A5F                             ;     ld hl,STACK
0A5F                             ;     jr printStack2
0A5F                             ; printStack1:
0A5F                             ;     dec bc
0A5F                             ;     dec hl
0A5F                             ;     ld d,(hl)
0A5F                             ;     dec hl
0A5F                             ;     ld e,(hl)
0A5F                             ;     ex de,hl
0A5F                             ;     call prthex
0A5F                             ;     ex de,hl
0A5F                             ;     ld a," "
0A5F                             ;     call putchar
0A5F                             ; printStack2:
0A5F                             ;     ld a,c
0A5F                             ;     or b
0A5F                             ;     jr nz,printStack1
0A5F                             ;     call prompt
0A5F                             ;     ld bc,(vTemp1)
0A5F   DD E9                  JP   (ix)   
0A61                SIZE:        
0A61   E1                     POP   hl   
0A62   2B                     DEC   hl   ; skip magic byte
0A63   2B                     DEC   hl   ; skip type tag
0A64   2B                     DEC   hl   ; msb size
0A65   56                     LD   d,(hl)   
0A66   2B                     DEC   hl   ; lsb size
0A67   5E                     LD   e,(hl)   
0A68   D5                     PUSH   de   
0A69   DD E9                  JP   (ix)   
0A6B                PRINTX:      
0A6B   CD B4 06               CALL   go   
0A6E   00 00                  DW   NUL   ; closure
0A70   74 0A                  DW   printX_block   
0A72   4F 0B                  DW   args1A0L   
0A74                PRINTX_BLOCK:      
0A74   7B 24 61 20 31 2F 62 78 2B 24 61 3D 20 2F 76 62 24 61 2D 2F 76 62 3D 20 2F 76 62 24 61 2F 70 63 7D 00 .CSTR   "{$a 1/bx+$a= /vb$a-/vb= /vb$a/pc}"   ; block
0A96                COMMAND_V:      
0A96   CD 5D 0B               CALL   jumpTable   
0A99   62                     DB   "b"   
0A9A   BA 0A                  DW   varBufPtr   
0A9C   68                     DB   "h"   
0A9D   C3 0A                  DW   varHeapPtr   
0A9F   74                     DB   "t"   
0AA0   CC 0A                  DW   varTIBPtr   
0AA2   42                     DB   "B"   
0AA3   AB 0A                  DW   constBufStart   
0AA5   54                     DB   "T"   
0AA6   B5 0A                  DW   constTIBStart   
0AA8   00                     DB   NUL   
0AA9   87 08                  DW   error1   
0AAB                CONSTBUFSTART:      
0AAB   11 00 49               LD   de,BUF   
0AAE   18 28                  JR   constant   
0AB0                CONSTHEAPSTART:      
0AB0   11 00 4B               LD   de,HEAP   
0AB3   18 23                  JR   constant   
0AB5                CONSTTIBSTART:      
0AB5   11 00 48               LD   de,TIB   
0AB8   18 1E                  JR   constant   
0ABA                VARBUFPTR:      
0ABA   ED 5B EC 46            LD   de,(vBufPtr)   
0ABE   21 EC 46               LD   hl,vBufPtr   
0AC1   18 12                  JR   variable   
0AC3                VARHEAPPTR:      
0AC3   ED 5B F0 46            LD   de,(vHeapPtr)   
0AC7   21 F0 46               LD   hl,vHeapPtr   
0ACA   18 09                  JR   variable   
0ACC                VARTIBPTR:      
0ACC   ED 5B EA 46            LD   de,(vTIBPtr)   
0AD0   21 EA 46               LD   hl,vTIBPtr   
0AD3   18 00                  JR   variable   
0AD5                VARIABLE:      
0AD5   22 F2 46               LD   (vPointer),hl   
0AD8                CONSTANT:      
0AD8   D5                     PUSH   de   
0AD9   DD E9                  JP   (ix)   
0ADB                CHARS:       
0ADB   21 01 00               LD   hl,1   
0ADE                CHARS1:      
0ADE   22 E6 46               LD   (vDataWidth),hl   
0AE1   DD E9                  JP   (ix)   
0AE3                DECIMAL:      
0AE3   21 0A 00               LD   hl,10   
0AE6                DECIMAL1:      
0AE6   22 E8 46               LD   (vNumBase),hl   
0AE9   DD E9                  JP   (ix)   
0AEB                HEXADECIMAL:      
0AEB   21 10 00               LD   hl,16   
0AEE   C3 E6 0A               JP   decimal1   
0AF1                             ; Z80 port input
0AF1                             ; port -- value
0AF1                INPUT:       
0AF1   E1                     POP   hl   
0AF2   59                     LD   e,c   ; save IP
0AF3   4D                     LD   c,l   
0AF4   ED 68                  IN   l,(c)   
0AF6   26 00                  LD   h,0   
0AF8   4B                     LD   c,e   ; restore IP
0AF9   E5                     PUSH   hl   
0AFA   DD E9                  JP   (ix)   
0AFC                KEY:         
0AFC   CD 81 00               CALL   getchar   
0AFF   26 00                  LD   h,0   
0B01   6F                     LD   l,a   
0B02   E5                     PUSH   hl   
0B03   DD E9                  JP   (ix)   
0B05                             ; Z80 port output
0B05                             ; value port --
0B05                OUTPUT:      
0B05   E1                     POP   hl   
0B06   59                     LD   e,c   ; save IP
0B07   4D                     LD   c,l   
0B08   E1                     POP   hl   
0B09   ED 69                  OUT   (c),l   
0B0B   4B                     LD   c,e   ; restore IP
0B0C   DD E9                  JP   (ix)   
0B0E                NUMBERS:      
0B0E   21 02 00               LD   hl,2   
0B11   C3 DE 0A               JP   chars1   
0B14                             ; 
0B14                             ; 
0B14                             ; 
0B14                             ; 
0B14                FILTER:      
0B14                MAP:         
0B14                SCAN:        
0B14   DD E9                  JP   (ix)   
0B16                ZPRT:        
0B16   CD B4 06               CALL   go   
0B19   00 00                  DW   NUL   ; closure
0B1B   23 0B                  DW   zprt_block   
0B1D   21 0B                  DW   zprt_args   
0B1F   02                     DB   2   ; num args + locals
0B20   01                     DB   1   ; num locals
0B21                ZPRT_ARGS:      
0B21   6E 73                  DB   "ns"   
0B23                ZPRT_BLOCK:      
0B23   7B 24 6E 2F 62 64 60 20 60 2F 62 73 20 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$n/bd` `/bs +$s= /vb$s-/vb= /vb$s/pc}"   ; block
0B4A                             ;*******************************************************************
0B4A                             ; reusable arglists
0B4A                             ;*******************************************************************
0B4A                ARGS0A1L_:      ; zero args one local
0B4A   01                     DB   1   ; num args + locals
0B4B   01                     DB   1   ; num locals
0B4C                ARGS0A1L:      
0B4C   61                     DB   "a"   
0B4D                ARGS1A0L_:      ; one arg zero locals
0B4D   01                     DB   1   ; num args + locals
0B4E   00                     DB   0   ; num locals
0B4F                ARGS1A0L:      
0B4F   61                     DB   "a"   
0B50                ARGS1A1L_:      ; one arg one local
0B50   02                     DB   2   ; num args + locals
0B51   01                     DB   1   ; num locals
0B52                ARGS1A1L:      
0B52   61 62                  DB   "ab"   
0B54                ARGS2A0L_:      ; two args zero locals
0B54   02                     DB   2   ; num args + locals
0B55   00                     DB   0   ; num locals
0B56                ARGS2A0L:      
0B56   61 62                  DB   "ab"   
0B58                ARGS1A2L_:      ; one arg two locals
0B58   03                     DB   3   ; num args + locals
0B59   02                     DB   2   ; num locals
0B5A                ARGS1A2L:      
0B5A   61 62 63               DB   "abc"   
0B5D                             ;*******************************************************************
0B5D                             ; general routines
0B5D                             ;*******************************************************************
0B5D                             ; followed by a table
0B5D                             ; db char
0B5D                             ; dw addr
0B5D                             ; the final item must have char == NUL
0B5D                JUMPTABLE:      
0B5D   03                     INC   bc   
0B5E   E1                     POP   hl   
0B5F                JUMPTABLE0:      
0B5F   AF                     XOR   a   
0B60   BE                     CP   (hl)   
0B61   28 09                  JR   z,jumpTable1   
0B63   0A                     LD   a,(bc)   
0B64   BE                     CP   (hl)   
0B65   28 06                  JR   z,jumpTable2   
0B67   23                     INC   hl   
0B68   23                     INC   hl   
0B69   23                     INC   hl   
0B6A   18 F3                  JR   jumpTable0   
0B6C                JUMPTABLE1:      
0B6C   0B                     DEC   bc   
0B6D                JUMPTABLE2:      
0B6D   23                     INC   hl   
0B6E   5E                     LD   e,(hl)   
0B6F   23                     INC   hl   
0B70   56                     LD   d,(hl)   
0B71   EB                     EX   de,hl   
0B72   E9                     JP   (hl)   
0B73                PRTSTR0:      
0B73   CD 85 00               CALL   putchar   
0B76   23                     INC   hl   
0B77                PRTSTR:      
0B77   7E                     LD   a,(hl)   
0B78   B7                     OR   a   
0B79   20 F8                  JR   nz,prtstr0   
0B7B   C9                     RET      
0B7C                             ; **************************************************************************
0B7C                             ; calculate nesting value
0B7C                             ; a is char to be tested,
0B7C                             ; e is the nesting value (initially 0)
0B7C                             ; e is increased by ( and [
0B7C                             ; e is decreased by ) and ]
0B7C                             ; e has its bit 7 toggled by `
0B7C                             ; limited to 127 levels
0B7C                             ; **************************************************************************
0B7C                NESTING:      
0B7C   FE 22                  CP   DQUOTE   ; quote char
0B7E   28 06                  JR   z,nesting0   
0B80   FE 60                  CP   "`"   ; quote char
0B82   28 02                  JR   z,nesting0   
0B84   18 0A                  JR   nesting1   
0B86                NESTING0:      
0B86   CB 7B                  BIT   7,e   
0B88   28 03                  JR   z,nesting1a   
0B8A   CB BB                  RES   7,e   
0B8C   C9                     RET      
0B8D                NESTING1A:      
0B8D   CB FB                  SET   7,e   
0B8F   C9                     RET      
0B90                NESTING1:      
0B90   CB 7B                  BIT   7,e   
0B92   C0                     RET   nz   
0B93   FE 7B                  CP   "{"   
0B95   28 08                  JR   z,nesting2   
0B97   FE 5B                  CP   "["   
0B99   28 04                  JR   z,nesting2   
0B9B   FE 28                  CP   "("   
0B9D   20 02                  JR   nz,nesting3   
0B9F                NESTING2:      
0B9F   1C                     INC   e   
0BA0   C9                     RET      
0BA1                NESTING3:      
0BA1   FE 7D                  CP   "}"   
0BA3   28 07                  JR   z,nesting4   
0BA5   FE 5D                  CP   "]"   
0BA7   28 03                  JR   z,nesting4   
0BA9   FE 29                  CP   ")"   
0BAB   C0                     RET   nz   
0BAC                NESTING4:      
0BAC   1D                     DEC   e   
0BAD   C9                     RET      
0BAE                PROMPT:      
0BAE   CD BE 0B               CALL   printStr   
0BB1   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0BB6   C9                     RET      
0BB7                CRLF:        
0BB7   CD BE 0B               CALL   printStr   
0BBA   0D 0A 00               .CSTR   "\r\n"   
0BBD   C9                     RET      
0BBE                             ; prints a null teminated string
0BBE                             ; the string should be immediately following the call
0BBE                PRINTSTR:      
0BBE   E3                     EX   (sp),hl   ; swap			
0BBF   CD 77 0B               CALL   prtstr   
0BC2   23                     INC   hl   ; inc past NUL
0BC3   E3                     EX   (sp),hl   ; put it back	
0BC4   C9                     RET      
0BC5                INIT:        
0BC5   DD 2A EE 46            LD   ix,(vNext)   
0BC9   FD 21 80 45            LD   iy,STACK   
0BCD   21 80 01               LD   hl,isysVars   
0BD0   11 E6 46               LD   de,sysVars   
0BD3   01 10 00               LD   bc,8 * 2   
0BD6   ED B0                  LDIR      
0BD8   21 00 46               LD   hl,vars   ; 52 vars LO HI
0BDB   06 34                  LD   b,26*2   
0BDD   AF                     XOR   a   
0BDE                INIT0:       
0BDE   77                     LD   (hl),a   
0BDF   23                     INC   hl   
0BE0   10 FC                  DJNZ   init0   
0BE2   C9                     RET      
0BE3                START:       
0BE3   31 80 45               LD   sp,STACK   ; start Monty
0BE6   CD C5 0B               CALL   init   ; setups
0BE9   CD BE 0B               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0BEC   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0BF9                INTERPRET:      
0BF9   CD AE 0B               CALL   prompt   
0BFC   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BFF   21 00 48               LD   hl,TIB   
0C02   22 EA 46               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C05                INTERPRET2:      ; calculate nesting
0C05   1E 00                  LD   e,0   ; initilize nesting value
0C07   C5                     PUSH   bc   ; save offset into TIB,
0C08                             ; bc is also the count of chars in TIB
0C08   21 00 48               LD   hl,TIB   ; hl is start of TIB
0C0B   18 06                  JR   interpret4   
0C0D                INTERPRET3:      
0C0D   7E                     LD   a,(hl)   ; a = char in TIB
0C0E   23                     INC   hl   ; inc pointer into TIB
0C0F   0B                     DEC   bc   ; dec count of chars in TIB
0C10   CD 7C 0B               CALL   nesting   ; update nesting value
0C13                INTERPRET4:      
0C13   79                     LD   a,c   ; is count zero?
0C14   B0                     OR   b   
0C15   20 F6                  JR   nz,interpret3   ; if not loop
0C17   C1                     POP   bc   ; restore offset into TIB
0C18                INTERPRET5:      
0C18   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C1B   FE 20                  CP   $20   ; compare to space
0C1D   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C1F   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C21                             ; ???? NEEDED?
0C21   28 3B                  JR   z,interpret8   
0C23   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C25   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C27   FE 05                  CP   CTRL_E   
0C29   CA AC 0C               JP   z,edit_   
0C2C   FE 08                  CP   CTRL_H   
0C2E   CA 9C 0C               JP   z,backSpace_   
0C31   FE 0A                  CP   CTRL_J   
0C33   CA C4 0C               JP   z,reEdit_   
0C36   FE 13                  CP   CTRL_S   
0C38   CA C7 0C               JP   z,printStack_   
0C3B                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C3B                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C3B                             ; DB     lsb(list_)       ; FF  ^L 12
0C3B                             ; DB     lsb(printStack_) ; DLE ^P 16
0C3B                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C3B                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C3B                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C3B                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C3B                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C3B                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C3B                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C3B                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C3B                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C3B                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C3B                INTERPRET5A:      
0C3B                             ; ld (vTIBPtr),bc
0C3B                             ; ld bc,(vTIBPtr)
0C3B   18 C8                  JR   interpret2   
0C3D                INTERPRET6:      
0C3D   21 00 48               LD   hl,TIB   
0C40   09                     ADD   hl,bc   
0C41   77                     LD   (hl),a   ; store the character in textbuf
0C42   03                     INC   bc   
0C43   CD 85 00               CALL   putchar   ; echo character to screen
0C46   CD 7C 0B               CALL   nesting   
0C49   18 CD                  JR   interpret5   ; wait for next character
0C4B                INTERPRET7:      
0C4B   21 00 48               LD   hl,TIB   
0C4E   09                     ADD   hl,bc   
0C4F   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C51   23                     INC   hl   
0C52   36 0A                  LD   (hl),"\n"   
0C54   23                     INC   hl   
0C55   03                     INC   bc   
0C56   03                     INC   bc   
0C57   CD B7 0B               CALL   crlf   ; echo character to screen
0C5A   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C5B   B7                     OR   a   
0C5C   20 BA                  JR   nz,interpret5   
0C5E                INTERPRET8:      
0C5E   21 00 48               LD   hl,TIB   
0C61   09                     ADD   hl,bc   
0C62   22 EA 46               LD   (vTIBPtr),hl   
0C65   01 00 48               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0C68                             ; we pressed enter
0C68   0B                     DEC   bc   
0C69                NEXT:        
0C69   03                     INC   bc   ; Increment the IP
0C6A   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C6B   FE 20                  CP   " "   ; whitespace?
0C6D   28 FA                  JR   z,next   ; space? ignore
0C6F   38 09                  JR   c,next1   
0C71   D6 20                  SUB   " "   
0C73   6F                     LD   l,a   ; index into table
0C74   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C76   6E                     LD   l,(hl)   ; get low jump address
0C77   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C79   E9                     JP   (hl)   ; Jump to routine
0C7A                NEXT1:       
0C7A   FE 00                  CP   NUL   ; end of input string?
0C7C   28 03                  JR   z,exit   
0C7E   C3 F9 0B               JP   interpret   ; no, other whitespace, macros?
0C81                EXIT:        
0C81   03                     INC   bc   
0C82   60 69                  LD   hl,bc   
0C84   E9                     JP   (hl)   
0C85                RUN:         
0C85   C1                     POP   bc   
0C86   0B                     DEC   bc   
0C87   DD E9                  JP   (ix)   
0C89                ERROR:       
0C89   CD 85 0C               CALL   run   
0C8C   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C99   C3 F9 0B               JP   interpret   
0C9C                BACKSPACE_:      
0C9C   79                     LD   a,c   
0C9D   B0                     OR   b   
0C9E   CA 05 0C               JP   z,interpret2   
0CA1   0B                     DEC   bc   
0CA2   CD BE 0B               CALL   printStr   
0CA5   08 20 08 00            .CSTR   "\b \b"   
0CA9   C3 05 0C               JP   interpret2   
0CAC                             ; edit
0CAC                EDIT_:       
0CAC   CD 85 0C               CALL   run   
0CAF   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0CC1   C3 F9 0B               JP   interpret   
0CC4                REEDIT_:      
0CC4   C3 F9 0B               JP   interpret   
0CC7                PRINTSTACK_:      
0CC7   CD 85 0C               CALL   run   
0CCA   2F 70 6B 00            .CSTR   "/pk"   
0CCE   C3 F9 0B               JP   interpret   
0CD1                             ; editDef:
0CD1                             ;     pop hl                      ; pop ret address
0CD1                             ;     ex (sp),hl                  ; swap with TOS
0CD1                             ;     push hl                     ; dup TOS
0CD1                             ;     ld a,l                      ; a = ident
0CD1                             ;     ld de,TIB                   ; de = start of TIB
0CD1                             ;     ld (vTIBPtr),de             ; update TIB*
0CD1                             ;     push ix                     ; save NEXT
0CD1                             ;     ld ix,editDef0              ; NEXT = editDef0
0CD1                             ;     jp lookupRef                ; convert letter into address
0CD1                             ; editDef0:
0CD1                             ;     ld e,(hl)                   ; de = (hl++)
0CD1                             ;     inc hl
0CD1                             ;     ld d,(hl)
0CD1                             ;     ld a,d                      ; de == 0 ?
0CD1                             ;     or e
0CD1                             ;     jr z,editDef4
0CD1                             ;     ld ix,editDef3              ; NEXT = editDef3
0CD1                             ;     ex de,hl
0CD1                             ;     ld a,(hl)
0CD1                             ;     cp "{"
0CD1                             ;     jr nz,editDef1
0CD1                             ;     jp editBlock0               ; convert letter into address
0CD1                             ; editDef1:
0CD1                             ;     cp "("
0CD1                             ;     jr nz,editDef2
0CD1                             ;     jp editBlock0               ; convert letter into address
0CD1                             ; editDef2:
0CD1                             ;     jp editLambda
0CD1                             ; editDef3:
0CD1                             ;     ld a," "                    ; write assign
0CD1                             ;     call writeChar
0CD1                             ;     pop hl                      ; a = ident
0CD1                             ;     ld a,l
0CD1                             ;     call writeChar
0CD1                             ;     ld a,"="                    ; write assign
0CD1                             ;     call writeChar
0CD1                             ;     ld ix,editDef4              ; NEXT = editDef4
0CD1                             ;     jp printTIB
0CD1                             ; editDef4:
0CD1                             ;     pop ix                      ; restore NEXT
0CD1                             ;     jp (ix)
0CD1                             ; writeChar:
0CD1                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CD1                             ;     ld (de),a                   ; write ident
0CD1                             ;     inc de
0CD1                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CD1                             ;     ret
0CD1                             ; ; printTIB
0CD1                             ; printTIB:
0CD1                             ;     ld hl,(vTIBPtr)
0CD1                             ;     ld de,TIB
0CD1                             ;     or a
0CD1                             ;     sbc hl,de
0CD1                             ;     jp printTIB2
0CD1                             ; printTIB1:
0CD1                             ;     ld a,(de)
0CD1                             ;     call putchar
0CD1                             ; printTIB2:
0CD1                             ;     ld a,l
0CD1                             ;     or h
0CD1                             ;     jr nz,printTIB1
0CD1                             ;     jp (ix)
0CD1                             ; editBlock:
0CD1                             ;     pop hl                      ; hl = block*
0CD1                             ; editBlock0:
0CD1                             ;     push ix                     ; save next
0CD1                             ;     push hl                     ; push block*
0CD1                             ;     push hl                     ; push block*
0CD1                             ;     ld ix,(editBlock2)
0CD1                             ;     jp blockLength
0CD1                             ; editBlock1:
0CD1                             ;     pop hl                      ; bc = length, (sp) = IP
0CD1                             ;     pop de                      ; de = block*
0CD1                             ;     ld a,l
0CD1                             ;     or h
0CD1                             ;     jr z,editBlock2
0CD1                             ;     push bc
0CD1                             ;     ld bc,hl
0CD1                             ;     ex de,hl                    ; hl = block*
0CD1                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CD1                             ;     ldir                        ; copy block to TIB
0CD1                             ;     ld (vTIBPtr),de              ; save TIB*
0CD1                             ;     pop bc
0CD1                             ; editBlock2:
0CD1                             ;     pop ix                      ; restore next
0CD1                             ;     jp (ix)
0CD1                             ; editLambda:
0CD1                             ;     jp (ix)
0CD1                             ; editArray:
0CD1                             ;     jp (ix)
0CD1                             ; editArglist:
0CD1                             ;     jp (ix)
0CD1                             ; ; blockLength
0CD1                             ; ; addr1 -- length
0CD1                             ; blockLength:
0CD1                             ;     pop hl                      ; block*
0CD1                             ;     push hl                     ; save block*
0CD1                             ;     inc hl                      ; skip first char
0CD1                             ;     ld d,1                      ; increase nesting
0CD1                             ; blockLength1:                   ; Skip to end of definition
0CD1                             ;     ld a,(hl)                   ; Get the next character
0CD1                             ;     inc hl                      ; Point to next character
0CD1                             ;     cp " " + 1                  ; ignore whitespace
0CD1                             ;     jr c,blockLength1
0CD1                             ;     cp ")"
0CD1                             ;     jr z,blockLength4
0CD1                             ;     cp "}"
0CD1                             ;     jr z,blockLength4
0CD1                             ;     cp "]"
0CD1                             ;     jr z,blockLength4
0CD1                             ;     cp "("
0CD1                             ;     jr z,blockLength2
0CD1                             ;     cp "{"
0CD1                             ;     jr z,blockLength2
0CD1                             ;     cp "["
0CD1                             ;     jr z,blockLength2
0CD1                             ;     cp "'"
0CD1                             ;     jr z,blockLength3
0CD1                             ;     cp "`"
0CD1                             ;     jr z,blockLength3
0CD1                             ;     cp DQUOTE
0CD1                             ;     jr z,blockLength3
0CD1                             ;     jr blockLength1
0CD1                             ; blockLength2:
0CD1                             ;     inc d
0CD1                             ;     jr blockLength1
0CD1                             ; blockLength4:
0CD1                             ;     dec d
0CD1                             ;     jr nz, blockLength1         ; get the next element
0CD1                             ; blockLength3:
0CD1                             ;     ld a,$80
0CD1                             ;     xor d
0CD1                             ;     ld d,a
0CD1                             ;     jr nz, blockLength1
0CD1                             ;     pop hl                      ; hl = block*
0CD1                             ;     or a
0CD1                             ;     sbc hl,de
0CD1                             ;     push hl
0CD1                             ;     jp (ix)
0CD1                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CD1                             ; \a start of stack \#3 depth \b base \$ prompt
0CD1                             ; DW dStack               ; a vS0 start of datastack			
0CD1                             ; DW FALSE                ; b vBase16
0CD1                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CD1                             ; DW 0                    ; d
0CD1                             ; DW 65                   ; e vLastDef "A" last command u defined
0CD1                             ; DW 0                    ; f
0CD1                             ; DW page6                ; g 256 bytes limits
0CD1                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CD1                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                             ; test "5 [4] :a{$a}; /pa ^", 4
0D00                             ; call printStr
0D00                             ; .cstr "Done!"
0D00                             ; HALT
0D00                             ; 
0D00                          ;*Macro unroll:  test "/f", false
0D00   31 80 45               LD   SP,STACK   
0D03   CD C5 0B               CALL   init   
0D06   CD 7C 44               CALL   execStr   
0D09   2F 66 00               .CSTR   "/f"   
0D0C                          ;*Macro unroll:  expect "/f",false
0D0C   E1                     POP   HL   
0D0D   E5                     PUSH   HL   
0D0E   11 00 00               LD   DE,false   
0D11   B7                     OR   A   
0D12   ED 52                  SBC   HL,DE   
0D14   7D                     LD   A,L   
0D15   B4                     OR   H   
0D16   CA 6C 0D               JP   Z,expectM_0_2702S50   
0D19   CD BE 0B               CALL   printStr   
0D1C   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0D25   CD BE 0B               CALL   printStr   
0D28   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D37   21 00 00               LD   hl,false   
0D3A   E5                     PUSH   hl   
0D3B   CD 85 0C               CALL   run   
0D3E   2E 00                  .CSTR   "."   
0D40   CD BE 0B               CALL   printStr   
0D43   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D50   E1                     POP   hl   
0D51   E5                     PUSH   hl   
0D52   E5                     PUSH   hl   
0D53   CD 85 0C               CALL   run   
0D56   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0D6A   76                     HALT      
0D6B   00                     .CSTR      
0D6C                EXPECTM_0_2702S50:      
0D6C   E1                     POP   HL   
0D6D                          ;*Macro unroll:  test "/t", true
0D6D   31 80 45               LD   SP,STACK   
0D70   CD C5 0B               CALL   init   
0D73   CD 7C 44               CALL   execStr   
0D76   2F 74 00               .CSTR   "/t"   
0D79                          ;*Macro unroll:  expect "/t",true
0D79   E1                     POP   HL   
0D7A   E5                     PUSH   HL   
0D7B   11 FF FF               LD   DE,true   
0D7E   B7                     OR   A   
0D7F   ED 52                  SBC   HL,DE   
0D81   7D                     LD   A,L   
0D82   B4                     OR   H   
0D83   CA D9 0D               JP   Z,expectM_0_2703S50   
0D86   CD BE 0B               CALL   printStr   
0D89   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0D92   CD BE 0B               CALL   printStr   
0D95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DA4   21 FF FF               LD   hl,true   
0DA7   E5                     PUSH   hl   
0DA8   CD 85 0C               CALL   run   
0DAB   2E 00                  .CSTR   "."   
0DAD   CD BE 0B               CALL   printStr   
0DB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DBD   E1                     POP   hl   
0DBE   E5                     PUSH   hl   
0DBF   E5                     PUSH   hl   
0DC0   CD 85 0C               CALL   run   
0DC3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0DD7   76                     HALT      
0DD8   00                     .CSTR      
0DD9                EXPECTM_0_2703S50:      
0DD9   E1                     POP   HL   
0DDA                          ;*Macro unroll:  test "1", 1
0DDA   31 80 45               LD   SP,STACK   
0DDD   CD C5 0B               CALL   init   
0DE0   CD 7C 44               CALL   execStr   
0DE3   31 00                  .CSTR   "1"   
0DE5                          ;*Macro unroll:  expect "1",1
0DE5   E1                     POP   HL   
0DE6   E5                     PUSH   HL   
0DE7   11 01 00               LD   DE,1   
0DEA   B7                     OR   A   
0DEB   ED 52                  SBC   HL,DE   
0DED   7D                     LD   A,L   
0DEE   B4                     OR   H   
0DEF   CA 44 0E               JP   Z,expectM_0_2704S50   
0DF2   CD BE 0B               CALL   printStr   
0DF5   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0DFD   CD BE 0B               CALL   printStr   
0E00   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E0F   21 01 00               LD   hl,1   
0E12   E5                     PUSH   hl   
0E13   CD 85 0C               CALL   run   
0E16   2E 00                  .CSTR   "."   
0E18   CD BE 0B               CALL   printStr   
0E1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E28   E1                     POP   hl   
0E29   E5                     PUSH   hl   
0E2A   E5                     PUSH   hl   
0E2B   CD 85 0C               CALL   run   
0E2E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0E42   76                     HALT      
0E43   00                     .CSTR      
0E44                EXPECTM_0_2704S50:      
0E44   E1                     POP   HL   
0E45                          ;*Macro unroll:  test "2", 2
0E45   31 80 45               LD   SP,STACK   
0E48   CD C5 0B               CALL   init   
0E4B   CD 7C 44               CALL   execStr   
0E4E   32 00                  .CSTR   "2"   
0E50                          ;*Macro unroll:  expect "2",2
0E50   E1                     POP   HL   
0E51   E5                     PUSH   HL   
0E52   11 02 00               LD   DE,2   
0E55   B7                     OR   A   
0E56   ED 52                  SBC   HL,DE   
0E58   7D                     LD   A,L   
0E59   B4                     OR   H   
0E5A   CA AF 0E               JP   Z,expectM_0_2705S50   
0E5D   CD BE 0B               CALL   printStr   
0E60   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0E68   CD BE 0B               CALL   printStr   
0E6B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E7A   21 02 00               LD   hl,2   
0E7D   E5                     PUSH   hl   
0E7E   CD 85 0C               CALL   run   
0E81   2E 00                  .CSTR   "."   
0E83   CD BE 0B               CALL   printStr   
0E86   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E93   E1                     POP   hl   
0E94   E5                     PUSH   hl   
0E95   E5                     PUSH   hl   
0E96   CD 85 0C               CALL   run   
0E99   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0EAD   76                     HALT      
0EAE   00                     .CSTR      
0EAF                EXPECTM_0_2705S50:      
0EAF   E1                     POP   HL   
0EB0                          ;*Macro unroll:  test "1", 1
0EB0   31 80 45               LD   SP,STACK   
0EB3   CD C5 0B               CALL   init   
0EB6   CD 7C 44               CALL   execStr   
0EB9   31 00                  .CSTR   "1"   
0EBB                          ;*Macro unroll:  expect "1",1
0EBB   E1                     POP   HL   
0EBC   E5                     PUSH   HL   
0EBD   11 01 00               LD   DE,1   
0EC0   B7                     OR   A   
0EC1   ED 52                  SBC   HL,DE   
0EC3   7D                     LD   A,L   
0EC4   B4                     OR   H   
0EC5   CA 1A 0F               JP   Z,expectM_0_2706S50   
0EC8   CD BE 0B               CALL   printStr   
0ECB   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0ED3   CD BE 0B               CALL   printStr   
0ED6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EE5   21 01 00               LD   hl,1   
0EE8   E5                     PUSH   hl   
0EE9   CD 85 0C               CALL   run   
0EEC   2E 00                  .CSTR   "."   
0EEE   CD BE 0B               CALL   printStr   
0EF1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EFE   E1                     POP   hl   
0EFF   E5                     PUSH   hl   
0F00   E5                     PUSH   hl   
0F01   CD 85 0C               CALL   run   
0F04   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0F18   76                     HALT      
0F19   00                     .CSTR      
0F1A                EXPECTM_0_2706S50:      
0F1A   E1                     POP   HL   
0F1B                          ;*Macro unroll:  test "0", 0
0F1B   31 80 45               LD   SP,STACK   
0F1E   CD C5 0B               CALL   init   
0F21   CD 7C 44               CALL   execStr   
0F24   30 00                  .CSTR   "0"   
0F26                          ;*Macro unroll:  expect "0",0
0F26   E1                     POP   HL   
0F27   E5                     PUSH   HL   
0F28   11 00 00               LD   DE,0   
0F2B   B7                     OR   A   
0F2C   ED 52                  SBC   HL,DE   
0F2E   7D                     LD   A,L   
0F2F   B4                     OR   H   
0F30   CA 85 0F               JP   Z,expectM_0_2707S50   
0F33   CD BE 0B               CALL   printStr   
0F36   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0F3E   CD BE 0B               CALL   printStr   
0F41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F50   21 00 00               LD   hl,0   
0F53   E5                     PUSH   hl   
0F54   CD 85 0C               CALL   run   
0F57   2E 00                  .CSTR   "."   
0F59   CD BE 0B               CALL   printStr   
0F5C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F69   E1                     POP   hl   
0F6A   E5                     PUSH   hl   
0F6B   E5                     PUSH   hl   
0F6C   CD 85 0C               CALL   run   
0F6F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0F83   76                     HALT      
0F84   00                     .CSTR      
0F85                EXPECTM_0_2707S50:      
0F85   E1                     POP   HL   
0F86                          ;*Macro unroll:  test "10", 10
0F86   31 80 45               LD   SP,STACK   
0F89   CD C5 0B               CALL   init   
0F8C   CD 7C 44               CALL   execStr   
0F8F   31 30 00               .CSTR   "10"   
0F92                          ;*Macro unroll:  expect "10",10
0F92   E1                     POP   HL   
0F93   E5                     PUSH   HL   
0F94   11 0A 00               LD   DE,10   
0F97   B7                     OR   A   
0F98   ED 52                  SBC   HL,DE   
0F9A   7D                     LD   A,L   
0F9B   B4                     OR   H   
0F9C   CA F2 0F               JP   Z,expectM_0_2708S50   
0F9F   CD BE 0B               CALL   printStr   
0FA2   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0FAB   CD BE 0B               CALL   printStr   
0FAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FBD   21 0A 00               LD   hl,10   
0FC0   E5                     PUSH   hl   
0FC1   CD 85 0C               CALL   run   
0FC4   2E 00                  .CSTR   "."   
0FC6   CD BE 0B               CALL   printStr   
0FC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FD6   E1                     POP   hl   
0FD7   E5                     PUSH   hl   
0FD8   E5                     PUSH   hl   
0FD9   CD 85 0C               CALL   run   
0FDC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0FF0   76                     HALT      
0FF1   00                     .CSTR      
0FF2                EXPECTM_0_2708S50:      
0FF2   E1                     POP   HL   
0FF3                          ;*Macro unroll:  test "123", 123
0FF3   31 80 45               LD   SP,STACK   
0FF6   CD C5 0B               CALL   init   
0FF9   CD 7C 44               CALL   execStr   
0FFC   31 32 33 00            .CSTR   "123"   
1000                          ;*Macro unroll:  expect "123",123
1000   E1                     POP   HL   
1001   E5                     PUSH   HL   
1002   11 7B 00               LD   DE,123   
1005   B7                     OR   A   
1006   ED 52                  SBC   HL,DE   
1008   7D                     LD   A,L   
1009   B4                     OR   H   
100A   CA 61 10               JP   Z,expectM_0_2709S50   
100D   CD BE 0B               CALL   printStr   
1010   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
101A   CD BE 0B               CALL   printStr   
101D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
102C   21 7B 00               LD   hl,123   
102F   E5                     PUSH   hl   
1030   CD 85 0C               CALL   run   
1033   2E 00                  .CSTR   "."   
1035   CD BE 0B               CALL   printStr   
1038   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1045   E1                     POP   hl   
1046   E5                     PUSH   hl   
1047   E5                     PUSH   hl   
1048   CD 85 0C               CALL   run   
104B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
105F   76                     HALT      
1060   00                     .CSTR      
1061                EXPECTM_0_2709S50:      
1061   E1                     POP   HL   
1062                          ;*Macro unroll:  test "-1",-1
1062   31 80 45               LD   SP,STACK   
1065   CD C5 0B               CALL   init   
1068   CD 7C 44               CALL   execStr   
106B   2D 31 00               .CSTR   "-1"   
106E                          ;*Macro unroll:  expect "-1",-1
106E   E1                     POP   HL   
106F   E5                     PUSH   HL   
1070   11 FF FF               LD   DE,-1   
1073   B7                     OR   A   
1074   ED 52                  SBC   HL,DE   
1076   7D                     LD   A,L   
1077   B4                     OR   H   
1078   CA CE 10               JP   Z,expectM_0_2710S50   
107B   CD BE 0B               CALL   printStr   
107E   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1087   CD BE 0B               CALL   printStr   
108A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1099   21 FF FF               LD   hl,-1   
109C   E5                     PUSH   hl   
109D   CD 85 0C               CALL   run   
10A0   2E 00                  .CSTR   "."   
10A2   CD BE 0B               CALL   printStr   
10A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10B2   E1                     POP   hl   
10B3   E5                     PUSH   hl   
10B4   E5                     PUSH   hl   
10B5   CD 85 0C               CALL   run   
10B8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
10CC   76                     HALT      
10CD   00                     .CSTR      
10CE                EXPECTM_0_2710S50:      
10CE   E1                     POP   HL   
10CF                          ;*Macro unroll:  test "''", 0
10CF   31 80 45               LD   SP,STACK   
10D2   CD C5 0B               CALL   init   
10D5   CD 7C 44               CALL   execStr   
10D8   27 27 00               .CSTR   "''"   
10DB                          ;*Macro unroll:  expect "''",0
10DB   E1                     POP   HL   
10DC   E5                     PUSH   HL   
10DD   11 00 00               LD   DE,0   
10E0   B7                     OR   A   
10E1   ED 52                  SBC   HL,DE   
10E3   7D                     LD   A,L   
10E4   B4                     OR   H   
10E5   CA 3B 11               JP   Z,expectM_0_2711S50   
10E8   CD BE 0B               CALL   printStr   
10EB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
10F4   CD BE 0B               CALL   printStr   
10F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1106   21 00 00               LD   hl,0   
1109   E5                     PUSH   hl   
110A   CD 85 0C               CALL   run   
110D   2E 00                  .CSTR   "."   
110F   CD BE 0B               CALL   printStr   
1112   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
111F   E1                     POP   hl   
1120   E5                     PUSH   hl   
1121   E5                     PUSH   hl   
1122   CD 85 0C               CALL   run   
1125   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1139   76                     HALT      
113A   00                     .CSTR      
113B                EXPECTM_0_2711S50:      
113B   E1                     POP   HL   
113C                          ;*Macro unroll:  test "'a'", $61
113C   31 80 45               LD   SP,STACK   
113F   CD C5 0B               CALL   init   
1142   CD 7C 44               CALL   execStr   
1145   27 61 27 00            .CSTR   "'a'"   
1149                          ;*Macro unroll:  expect "'a'",$61
1149   E1                     POP   HL   
114A   E5                     PUSH   HL   
114B   11 61 00               LD   DE,$61   
114E   B7                     OR   A   
114F   ED 52                  SBC   HL,DE   
1151   7D                     LD   A,L   
1152   B4                     OR   H   
1153   CA AA 11               JP   Z,expectM_0_2712S50   
1156   CD BE 0B               CALL   printStr   
1159   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1163   CD BE 0B               CALL   printStr   
1166   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1175   21 61 00               LD   hl,$61   
1178   E5                     PUSH   hl   
1179   CD 85 0C               CALL   run   
117C   2E 00                  .CSTR   "."   
117E   CD BE 0B               CALL   printStr   
1181   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
118E   E1                     POP   hl   
118F   E5                     PUSH   hl   
1190   E5                     PUSH   hl   
1191   CD 85 0C               CALL   run   
1194   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
11A8   76                     HALT      
11A9   00                     .CSTR      
11AA                EXPECTM_0_2712S50:      
11AA   E1                     POP   HL   
11AB                          ;*Macro unroll:  test "'\\''", $27
11AB   31 80 45               LD   SP,STACK   
11AE   CD C5 0B               CALL   init   
11B1   CD 7C 44               CALL   execStr   
11B4   27 5C 27 27 00         .CSTR   "'\\''"   
11B9                          ;*Macro unroll:  expect "'\\''",$27
11B9   E1                     POP   HL   
11BA   E5                     PUSH   HL   
11BB   11 27 00               LD   DE,$27   
11BE   B7                     OR   A   
11BF   ED 52                  SBC   HL,DE   
11C1   7D                     LD   A,L   
11C2   B4                     OR   H   
11C3   CA 1B 12               JP   Z,expectM_0_2713S50   
11C6   CD BE 0B               CALL   printStr   
11C9   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
11D4   CD BE 0B               CALL   printStr   
11D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11E6   21 27 00               LD   hl,$27   
11E9   E5                     PUSH   hl   
11EA   CD 85 0C               CALL   run   
11ED   2E 00                  .CSTR   "."   
11EF   CD BE 0B               CALL   printStr   
11F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11FF   E1                     POP   hl   
1200   E5                     PUSH   hl   
1201   E5                     PUSH   hl   
1202   CD 85 0C               CALL   run   
1205   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1219   76                     HALT      
121A   00                     .CSTR      
121B                EXPECTM_0_2713S50:      
121B   E1                     POP   HL   
121C                          ;*Macro unroll:  test "#10", $10
121C   31 80 45               LD   SP,STACK   
121F   CD C5 0B               CALL   init   
1222   CD 7C 44               CALL   execStr   
1225   23 31 30 00            .CSTR   "#10"   
1229                          ;*Macro unroll:  expect "#10",$10
1229   E1                     POP   HL   
122A   E5                     PUSH   HL   
122B   11 10 00               LD   DE,$10   
122E   B7                     OR   A   
122F   ED 52                  SBC   HL,DE   
1231   7D                     LD   A,L   
1232   B4                     OR   H   
1233   CA 8A 12               JP   Z,expectM_0_2714S50   
1236   CD BE 0B               CALL   printStr   
1239   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
1243   CD BE 0B               CALL   printStr   
1246   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1255   21 10 00               LD   hl,$10   
1258   E5                     PUSH   hl   
1259   CD 85 0C               CALL   run   
125C   2E 00                  .CSTR   "."   
125E   CD BE 0B               CALL   printStr   
1261   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
126E   E1                     POP   hl   
126F   E5                     PUSH   hl   
1270   E5                     PUSH   hl   
1271   CD 85 0C               CALL   run   
1274   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1288   76                     HALT      
1289   00                     .CSTR      
128A                EXPECTM_0_2714S50:      
128A   E1                     POP   HL   
128B                          ;*Macro unroll:  test "#FF", $FF
128B   31 80 45               LD   SP,STACK   
128E   CD C5 0B               CALL   init   
1291   CD 7C 44               CALL   execStr   
1294   23 46 46 00            .CSTR   "#FF"   
1298                          ;*Macro unroll:  expect "#FF",$FF
1298   E1                     POP   HL   
1299   E5                     PUSH   HL   
129A   11 FF 00               LD   DE,$FF   
129D   B7                     OR   A   
129E   ED 52                  SBC   HL,DE   
12A0   7D                     LD   A,L   
12A1   B4                     OR   H   
12A2   CA F9 12               JP   Z,expectM_0_2715S50   
12A5   CD BE 0B               CALL   printStr   
12A8   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
12B2   CD BE 0B               CALL   printStr   
12B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12C4   21 FF 00               LD   hl,$FF   
12C7   E5                     PUSH   hl   
12C8   CD 85 0C               CALL   run   
12CB   2E 00                  .CSTR   "."   
12CD   CD BE 0B               CALL   printStr   
12D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12DD   E1                     POP   hl   
12DE   E5                     PUSH   hl   
12DF   E5                     PUSH   hl   
12E0   CD 85 0C               CALL   run   
12E3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
12F7   76                     HALT      
12F8   00                     .CSTR      
12F9                EXPECTM_0_2715S50:      
12F9   E1                     POP   HL   
12FA                          ;*Macro unroll:  test "-1 2 +",1
12FA   31 80 45               LD   SP,STACK   
12FD   CD C5 0B               CALL   init   
1300   CD 7C 44               CALL   execStr   
1303   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
130A                          ;*Macro unroll:  expect "-1 2 +",1
130A   E1                     POP   HL   
130B   E5                     PUSH   HL   
130C   11 01 00               LD   DE,1   
130F   B7                     OR   A   
1310   ED 52                  SBC   HL,DE   
1312   7D                     LD   A,L   
1313   B4                     OR   H   
1314   CA 6E 13               JP   Z,expectM_0_2716S50   
1317   CD BE 0B               CALL   printStr   
131A   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1327   CD BE 0B               CALL   printStr   
132A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1339   21 01 00               LD   hl,1   
133C   E5                     PUSH   hl   
133D   CD 85 0C               CALL   run   
1340   2E 00                  .CSTR   "."   
1342   CD BE 0B               CALL   printStr   
1345   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1352   E1                     POP   hl   
1353   E5                     PUSH   hl   
1354   E5                     PUSH   hl   
1355   CD 85 0C               CALL   run   
1358   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
136C   76                     HALT      
136D   00                     .CSTR      
136E                EXPECTM_0_2716S50:      
136E   E1                     POP   HL   
136F                          ;*Macro unroll:  test "-1 1 +",0
136F   31 80 45               LD   SP,STACK   
1372   CD C5 0B               CALL   init   
1375   CD 7C 44               CALL   execStr   
1378   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
137F                          ;*Macro unroll:  expect "-1 1 +",0
137F   E1                     POP   HL   
1380   E5                     PUSH   HL   
1381   11 00 00               LD   DE,0   
1384   B7                     OR   A   
1385   ED 52                  SBC   HL,DE   
1387   7D                     LD   A,L   
1388   B4                     OR   H   
1389   CA E3 13               JP   Z,expectM_0_2717S50   
138C   CD BE 0B               CALL   printStr   
138F   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
139C   CD BE 0B               CALL   printStr   
139F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13AE   21 00 00               LD   hl,0   
13B1   E5                     PUSH   hl   
13B2   CD 85 0C               CALL   run   
13B5   2E 00                  .CSTR   "."   
13B7   CD BE 0B               CALL   printStr   
13BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13C7   E1                     POP   hl   
13C8   E5                     PUSH   hl   
13C9   E5                     PUSH   hl   
13CA   CD 85 0C               CALL   run   
13CD   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
13E1   76                     HALT      
13E2   00                     .CSTR      
13E3                EXPECTM_0_2717S50:      
13E3   E1                     POP   HL   
13E4                          ;*Macro unroll:  test "1 2 +", 3
13E4   31 80 45               LD   SP,STACK   
13E7   CD C5 0B               CALL   init   
13EA   CD 7C 44               CALL   execStr   
13ED   31 20 32 20 2B 00      .CSTR   "1 2 +"   
13F3                          ;*Macro unroll:  expect "1 2 +",3
13F3   E1                     POP   HL   
13F4   E5                     PUSH   HL   
13F5   11 03 00               LD   DE,3   
13F8   B7                     OR   A   
13F9   ED 52                  SBC   HL,DE   
13FB   7D                     LD   A,L   
13FC   B4                     OR   H   
13FD   CA 56 14               JP   Z,expectM_0_2718S50   
1400   CD BE 0B               CALL   printStr   
1403   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
140F   CD BE 0B               CALL   printStr   
1412   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1421   21 03 00               LD   hl,3   
1424   E5                     PUSH   hl   
1425   CD 85 0C               CALL   run   
1428   2E 00                  .CSTR   "."   
142A   CD BE 0B               CALL   printStr   
142D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
143A   E1                     POP   hl   
143B   E5                     PUSH   hl   
143C   E5                     PUSH   hl   
143D   CD 85 0C               CALL   run   
1440   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1454   76                     HALT      
1455   00                     .CSTR      
1456                EXPECTM_0_2718S50:      
1456   E1                     POP   HL   
1457                          ;*Macro unroll:  test "4 1 2 +", 3
1457   31 80 45               LD   SP,STACK   
145A   CD C5 0B               CALL   init   
145D   CD 7C 44               CALL   execStr   
1460   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1468                          ;*Macro unroll:  expect "4 1 2 +",3
1468   E1                     POP   HL   
1469   E5                     PUSH   HL   
146A   11 03 00               LD   DE,3   
146D   B7                     OR   A   
146E   ED 52                  SBC   HL,DE   
1470   7D                     LD   A,L   
1471   B4                     OR   H   
1472   CA CD 14               JP   Z,expectM_0_2719S50   
1475   CD BE 0B               CALL   printStr   
1478   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1486   CD BE 0B               CALL   printStr   
1489   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1498   21 03 00               LD   hl,3   
149B   E5                     PUSH   hl   
149C   CD 85 0C               CALL   run   
149F   2E 00                  .CSTR   "."   
14A1   CD BE 0B               CALL   printStr   
14A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14B1   E1                     POP   hl   
14B2   E5                     PUSH   hl   
14B3   E5                     PUSH   hl   
14B4   CD 85 0C               CALL   run   
14B7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
14CB   76                     HALT      
14CC   00                     .CSTR      
14CD                EXPECTM_0_2719S50:      
14CD   E1                     POP   HL   
14CE                          ;*Macro unroll:  test "123 456 +", 123+456
14CE   31 80 45               LD   SP,STACK   
14D1   CD C5 0B               CALL   init   
14D4   CD 7C 44               CALL   execStr   
14D7   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
14E1                          ;*Macro unroll:  expect "123 456 +",123+456
14E1   E1                     POP   HL   
14E2   E5                     PUSH   HL   
14E3   11 43 02               LD   DE,123+456   
14E6   B7                     OR   A   
14E7   ED 52                  SBC   HL,DE   
14E9   7D                     LD   A,L   
14EA   B4                     OR   H   
14EB   CA 48 15               JP   Z,expectM_0_2720S50   
14EE   CD BE 0B               CALL   printStr   
14F1   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1501   CD BE 0B               CALL   printStr   
1504   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1513   21 43 02               LD   hl,123+456   
1516   E5                     PUSH   hl   
1517   CD 85 0C               CALL   run   
151A   2E 00                  .CSTR   "."   
151C   CD BE 0B               CALL   printStr   
151F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
152C   E1                     POP   hl   
152D   E5                     PUSH   hl   
152E   E5                     PUSH   hl   
152F   CD 85 0C               CALL   run   
1532   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1546   76                     HALT      
1547   00                     .CSTR      
1548                EXPECTM_0_2720S50:      
1548   E1                     POP   HL   
1549                          ;*Macro unroll:  test "64 128 +", 64+128
1549   31 80 45               LD   SP,STACK   
154C   CD C5 0B               CALL   init   
154F   CD 7C 44               CALL   execStr   
1552   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
155B                          ;*Macro unroll:  expect "64 128 +",64+128
155B   E1                     POP   HL   
155C   E5                     PUSH   HL   
155D   11 C0 00               LD   DE,64+128   
1560   B7                     OR   A   
1561   ED 52                  SBC   HL,DE   
1563   7D                     LD   A,L   
1564   B4                     OR   H   
1565   CA C1 15               JP   Z,expectM_0_2721S50   
1568   CD BE 0B               CALL   printStr   
156B   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
157A   CD BE 0B               CALL   printStr   
157D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
158C   21 C0 00               LD   hl,64+128   
158F   E5                     PUSH   hl   
1590   CD 85 0C               CALL   run   
1593   2E 00                  .CSTR   "."   
1595   CD BE 0B               CALL   printStr   
1598   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15A5   E1                     POP   hl   
15A6   E5                     PUSH   hl   
15A7   E5                     PUSH   hl   
15A8   CD 85 0C               CALL   run   
15AB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
15BF   76                     HALT      
15C0   00                     .CSTR      
15C1                EXPECTM_0_2721S50:      
15C1   E1                     POP   HL   
15C2                          ;*Macro unroll:  test "1 2 +", 3
15C2   31 80 45               LD   SP,STACK   
15C5   CD C5 0B               CALL   init   
15C8   CD 7C 44               CALL   execStr   
15CB   31 20 32 20 2B 00      .CSTR   "1 2 +"   
15D1                          ;*Macro unroll:  expect "1 2 +",3
15D1   E1                     POP   HL   
15D2   E5                     PUSH   HL   
15D3   11 03 00               LD   DE,3   
15D6   B7                     OR   A   
15D7   ED 52                  SBC   HL,DE   
15D9   7D                     LD   A,L   
15DA   B4                     OR   H   
15DB   CA 34 16               JP   Z,expectM_0_2722S50   
15DE   CD BE 0B               CALL   printStr   
15E1   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
15ED   CD BE 0B               CALL   printStr   
15F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15FF   21 03 00               LD   hl,3   
1602   E5                     PUSH   hl   
1603   CD 85 0C               CALL   run   
1606   2E 00                  .CSTR   "."   
1608   CD BE 0B               CALL   printStr   
160B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1618   E1                     POP   hl   
1619   E5                     PUSH   hl   
161A   E5                     PUSH   hl   
161B   CD 85 0C               CALL   run   
161E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1632   76                     HALT      
1633   00                     .CSTR      
1634                EXPECTM_0_2722S50:      
1634   E1                     POP   HL   
1635                          ;*Macro unroll:  test "1a= a++ a",2
1635   31 80 45               LD   SP,STACK   
1638   CD C5 0B               CALL   init   
163B   CD 7C 44               CALL   execStr   
163E   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
1648                          ;*Macro unroll:  expect "1a= a++ a",2
1648   E1                     POP   HL   
1649   E5                     PUSH   HL   
164A   11 02 00               LD   DE,2   
164D   B7                     OR   A   
164E   ED 52                  SBC   HL,DE   
1650   7D                     LD   A,L   
1651   B4                     OR   H   
1652   CA AF 16               JP   Z,expectM_0_2723S50   
1655   CD BE 0B               CALL   printStr   
1658   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1668   CD BE 0B               CALL   printStr   
166B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
167A   21 02 00               LD   hl,2   
167D   E5                     PUSH   hl   
167E   CD 85 0C               CALL   run   
1681   2E 00                  .CSTR   "."   
1683   CD BE 0B               CALL   printStr   
1686   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1693   E1                     POP   hl   
1694   E5                     PUSH   hl   
1695   E5                     PUSH   hl   
1696   CD 85 0C               CALL   run   
1699   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
16AD   76                     HALT      
16AE   00                     .CSTR      
16AF                EXPECTM_0_2723S50:      
16AF   E1                     POP   HL   
16B0                          ;*Macro unroll:  test "-1 -1 -",0
16B0   31 80 45               LD   SP,STACK   
16B3   CD C5 0B               CALL   init   
16B6   CD 7C 44               CALL   execStr   
16B9   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
16C1                          ;*Macro unroll:  expect "-1 -1 -",0
16C1   E1                     POP   HL   
16C2   E5                     PUSH   HL   
16C3   11 00 00               LD   DE,0   
16C6   B7                     OR   A   
16C7   ED 52                  SBC   HL,DE   
16C9   7D                     LD   A,L   
16CA   B4                     OR   H   
16CB   CA 26 17               JP   Z,expectM_0_2724S50   
16CE   CD BE 0B               CALL   printStr   
16D1   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
16DF   CD BE 0B               CALL   printStr   
16E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16F1   21 00 00               LD   hl,0   
16F4   E5                     PUSH   hl   
16F5   CD 85 0C               CALL   run   
16F8   2E 00                  .CSTR   "."   
16FA   CD BE 0B               CALL   printStr   
16FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
170A   E1                     POP   hl   
170B   E5                     PUSH   hl   
170C   E5                     PUSH   hl   
170D   CD 85 0C               CALL   run   
1710   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1724   76                     HALT      
1725   00                     .CSTR      
1726                EXPECTM_0_2724S50:      
1726   E1                     POP   HL   
1727                          ;*Macro unroll:  test "5 3 -", 2
1727   31 80 45               LD   SP,STACK   
172A   CD C5 0B               CALL   init   
172D   CD 7C 44               CALL   execStr   
1730   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1736                          ;*Macro unroll:  expect "5 3 -",2
1736   E1                     POP   HL   
1737   E5                     PUSH   HL   
1738   11 02 00               LD   DE,2   
173B   B7                     OR   A   
173C   ED 52                  SBC   HL,DE   
173E   7D                     LD   A,L   
173F   B4                     OR   H   
1740   CA 99 17               JP   Z,expectM_0_2725S50   
1743   CD BE 0B               CALL   printStr   
1746   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1752   CD BE 0B               CALL   printStr   
1755   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1764   21 02 00               LD   hl,2   
1767   E5                     PUSH   hl   
1768   CD 85 0C               CALL   run   
176B   2E 00                  .CSTR   "."   
176D   CD BE 0B               CALL   printStr   
1770   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
177D   E1                     POP   hl   
177E   E5                     PUSH   hl   
177F   E5                     PUSH   hl   
1780   CD 85 0C               CALL   run   
1783   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1797   76                     HALT      
1798   00                     .CSTR      
1799                EXPECTM_0_2725S50:      
1799   E1                     POP   HL   
179A                          ;*Macro unroll:  test "2 1 -",1
179A   31 80 45               LD   SP,STACK   
179D   CD C5 0B               CALL   init   
17A0   CD 7C 44               CALL   execStr   
17A3   32 20 31 20 2D 00      .CSTR   "2 1 -"   
17A9                          ;*Macro unroll:  expect "2 1 -",1
17A9   E1                     POP   HL   
17AA   E5                     PUSH   HL   
17AB   11 01 00               LD   DE,1   
17AE   B7                     OR   A   
17AF   ED 52                  SBC   HL,DE   
17B1   7D                     LD   A,L   
17B2   B4                     OR   H   
17B3   CA 0C 18               JP   Z,expectM_0_2726S50   
17B6   CD BE 0B               CALL   printStr   
17B9   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
17C5   CD BE 0B               CALL   printStr   
17C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D7   21 01 00               LD   hl,1   
17DA   E5                     PUSH   hl   
17DB   CD 85 0C               CALL   run   
17DE   2E 00                  .CSTR   "."   
17E0   CD BE 0B               CALL   printStr   
17E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F0   E1                     POP   hl   
17F1   E5                     PUSH   hl   
17F2   E5                     PUSH   hl   
17F3   CD 85 0C               CALL   run   
17F6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
180A   76                     HALT      
180B   00                     .CSTR      
180C                EXPECTM_0_2726S50:      
180C   E1                     POP   HL   
180D                          ;*Macro unroll:  test "3a= a-- a",2
180D   31 80 45               LD   SP,STACK   
1810   CD C5 0B               CALL   init   
1813   CD 7C 44               CALL   execStr   
1816   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
1820                          ;*Macro unroll:  expect "3a= a-- a",2
1820   E1                     POP   HL   
1821   E5                     PUSH   HL   
1822   11 02 00               LD   DE,2   
1825   B7                     OR   A   
1826   ED 52                  SBC   HL,DE   
1828   7D                     LD   A,L   
1829   B4                     OR   H   
182A   CA 87 18               JP   Z,expectM_0_2727S50   
182D   CD BE 0B               CALL   printStr   
1830   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1840   CD BE 0B               CALL   printStr   
1843   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1852   21 02 00               LD   hl,2   
1855   E5                     PUSH   hl   
1856   CD 85 0C               CALL   run   
1859   2E 00                  .CSTR   "."   
185B   CD BE 0B               CALL   printStr   
185E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
186B   E1                     POP   hl   
186C   E5                     PUSH   hl   
186D   E5                     PUSH   hl   
186E   CD 85 0C               CALL   run   
1871   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1885   76                     HALT      
1886   00                     .CSTR      
1887                EXPECTM_0_2727S50:      
1887   E1                     POP   HL   
1888                          ;*Macro unroll:  test "3 5 &", 1
1888   31 80 45               LD   SP,STACK   
188B   CD C5 0B               CALL   init   
188E   CD 7C 44               CALL   execStr   
1891   33 20 35 20 26 00      .CSTR   "3 5 &"   
1897                          ;*Macro unroll:  expect "3 5 &",1
1897   E1                     POP   HL   
1898   E5                     PUSH   HL   
1899   11 01 00               LD   DE,1   
189C   B7                     OR   A   
189D   ED 52                  SBC   HL,DE   
189F   7D                     LD   A,L   
18A0   B4                     OR   H   
18A1   CA FA 18               JP   Z,expectM_0_2728S50   
18A4   CD BE 0B               CALL   printStr   
18A7   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
18B3   CD BE 0B               CALL   printStr   
18B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18C5   21 01 00               LD   hl,1   
18C8   E5                     PUSH   hl   
18C9   CD 85 0C               CALL   run   
18CC   2E 00                  .CSTR   "."   
18CE   CD BE 0B               CALL   printStr   
18D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18DE   E1                     POP   hl   
18DF   E5                     PUSH   hl   
18E0   E5                     PUSH   hl   
18E1   CD 85 0C               CALL   run   
18E4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
18F8   76                     HALT      
18F9   00                     .CSTR      
18FA                EXPECTM_0_2728S50:      
18FA   E1                     POP   HL   
18FB                          ;*Macro unroll:  test "3 5 |", 7
18FB   31 80 45               LD   SP,STACK   
18FE   CD C5 0B               CALL   init   
1901   CD 7C 44               CALL   execStr   
1904   33 20 35 20 7C 00      .CSTR   "3 5 |"   
190A                          ;*Macro unroll:  expect "3 5 |",7
190A   E1                     POP   HL   
190B   E5                     PUSH   HL   
190C   11 07 00               LD   DE,7   
190F   B7                     OR   A   
1910   ED 52                  SBC   HL,DE   
1912   7D                     LD   A,L   
1913   B4                     OR   H   
1914   CA 6D 19               JP   Z,expectM_0_2729S50   
1917   CD BE 0B               CALL   printStr   
191A   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1926   CD BE 0B               CALL   printStr   
1929   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1938   21 07 00               LD   hl,7   
193B   E5                     PUSH   hl   
193C   CD 85 0C               CALL   run   
193F   2E 00                  .CSTR   "."   
1941   CD BE 0B               CALL   printStr   
1944   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1951   E1                     POP   hl   
1952   E5                     PUSH   hl   
1953   E5                     PUSH   hl   
1954   CD 85 0C               CALL   run   
1957   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
196B   76                     HALT      
196C   00                     .CSTR      
196D                EXPECTM_0_2729S50:      
196D   E1                     POP   HL   
196E                          ;*Macro unroll:  test "3 5 /x", 6
196E   31 80 45               LD   SP,STACK   
1971   CD C5 0B               CALL   init   
1974   CD 7C 44               CALL   execStr   
1977   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
197E                          ;*Macro unroll:  expect "3 5 /x",6
197E   E1                     POP   HL   
197F   E5                     PUSH   HL   
1980   11 06 00               LD   DE,6   
1983   B7                     OR   A   
1984   ED 52                  SBC   HL,DE   
1986   7D                     LD   A,L   
1987   B4                     OR   H   
1988   CA E2 19               JP   Z,expectM_0_2730S50   
198B   CD BE 0B               CALL   printStr   
198E   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
199B   CD BE 0B               CALL   printStr   
199E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19AD   21 06 00               LD   hl,6   
19B0   E5                     PUSH   hl   
19B1   CD 85 0C               CALL   run   
19B4   2E 00                  .CSTR   "."   
19B6   CD BE 0B               CALL   printStr   
19B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19C6   E1                     POP   hl   
19C7   E5                     PUSH   hl   
19C8   E5                     PUSH   hl   
19C9   CD 85 0C               CALL   run   
19CC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
19E0   76                     HALT      
19E1   00                     .CSTR      
19E2                EXPECTM_0_2730S50:      
19E2   E1                     POP   HL   
19E3                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
19E3   31 80 45               LD   SP,STACK   
19E6   CD C5 0B               CALL   init   
19E9   CD 7C 44               CALL   execStr   
19EC   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
19FB                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
19FB   E1                     POP   HL   
19FC   E5                     PUSH   HL   
19FD   11 06 00               LD   DE,6   
1A00   B7                     OR   A   
1A01   ED 52                  SBC   HL,DE   
1A03   7D                     LD   A,L   
1A04   B4                     OR   H   
1A05   CA 67 1A               JP   Z,expectM_0_2731S50   
1A08   CD BE 0B               CALL   printStr   
1A0B   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1A20   CD BE 0B               CALL   printStr   
1A23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A32   21 06 00               LD   hl,6   
1A35   E5                     PUSH   hl   
1A36   CD 85 0C               CALL   run   
1A39   2E 00                  .CSTR   "."   
1A3B   CD BE 0B               CALL   printStr   
1A3E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A4B   E1                     POP   hl   
1A4C   E5                     PUSH   hl   
1A4D   E5                     PUSH   hl   
1A4E   CD 85 0C               CALL   run   
1A51   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1A65   76                     HALT      
1A66   00                     .CSTR      
1A67                EXPECTM_0_2731S50:      
1A67   E1                     POP   HL   
1A68                          ;*Macro unroll:  test "2 3 *", 6
1A68   31 80 45               LD   SP,STACK   
1A6B   CD C5 0B               CALL   init   
1A6E   CD 7C 44               CALL   execStr   
1A71   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1A77                          ;*Macro unroll:  expect "2 3 *",6
1A77   E1                     POP   HL   
1A78   E5                     PUSH   HL   
1A79   11 06 00               LD   DE,6   
1A7C   B7                     OR   A   
1A7D   ED 52                  SBC   HL,DE   
1A7F   7D                     LD   A,L   
1A80   B4                     OR   H   
1A81   CA DA 1A               JP   Z,expectM_0_2732S50   
1A84   CD BE 0B               CALL   printStr   
1A87   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1A93   CD BE 0B               CALL   printStr   
1A96   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AA5   21 06 00               LD   hl,6   
1AA8   E5                     PUSH   hl   
1AA9   CD 85 0C               CALL   run   
1AAC   2E 00                  .CSTR   "."   
1AAE   CD BE 0B               CALL   printStr   
1AB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ABE   E1                     POP   hl   
1ABF   E5                     PUSH   hl   
1AC0   E5                     PUSH   hl   
1AC1   CD 85 0C               CALL   run   
1AC4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1AD8   76                     HALT      
1AD9   00                     .CSTR      
1ADA                EXPECTM_0_2732S50:      
1ADA   E1                     POP   HL   
1ADB                          ;*Macro unroll:  test "1 2 3 + *", 5
1ADB   31 80 45               LD   SP,STACK   
1ADE   CD C5 0B               CALL   init   
1AE1   CD 7C 44               CALL   execStr   
1AE4   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1AEE                          ;*Macro unroll:  expect "1 2 3 + *",5
1AEE   E1                     POP   HL   
1AEF   E5                     PUSH   HL   
1AF0   11 05 00               LD   DE,5   
1AF3   B7                     OR   A   
1AF4   ED 52                  SBC   HL,DE   
1AF6   7D                     LD   A,L   
1AF7   B4                     OR   H   
1AF8   CA 55 1B               JP   Z,expectM_0_2733S50   
1AFB   CD BE 0B               CALL   printStr   
1AFE   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1B0E   CD BE 0B               CALL   printStr   
1B11   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B20   21 05 00               LD   hl,5   
1B23   E5                     PUSH   hl   
1B24   CD 85 0C               CALL   run   
1B27   2E 00                  .CSTR   "."   
1B29   CD BE 0B               CALL   printStr   
1B2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B39   E1                     POP   hl   
1B3A   E5                     PUSH   hl   
1B3B   E5                     PUSH   hl   
1B3C   CD 85 0C               CALL   run   
1B3F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1B53   76                     HALT      
1B54   00                     .CSTR      
1B55                EXPECTM_0_2733S50:      
1B55   E1                     POP   HL   
1B56                          ;*Macro unroll:  test "7 3 /", 2
1B56   31 80 45               LD   SP,STACK   
1B59   CD C5 0B               CALL   init   
1B5C   CD 7C 44               CALL   execStr   
1B5F   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1B65                          ;*Macro unroll:  expect "7 3 /",2
1B65   E1                     POP   HL   
1B66   E5                     PUSH   HL   
1B67   11 02 00               LD   DE,2   
1B6A   B7                     OR   A   
1B6B   ED 52                  SBC   HL,DE   
1B6D   7D                     LD   A,L   
1B6E   B4                     OR   H   
1B6F   CA C8 1B               JP   Z,expectM_0_2734S50   
1B72   CD BE 0B               CALL   printStr   
1B75   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1B81   CD BE 0B               CALL   printStr   
1B84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B93   21 02 00               LD   hl,2   
1B96   E5                     PUSH   hl   
1B97   CD 85 0C               CALL   run   
1B9A   2E 00                  .CSTR   "."   
1B9C   CD BE 0B               CALL   printStr   
1B9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BAC   E1                     POP   hl   
1BAD   E5                     PUSH   hl   
1BAE   E5                     PUSH   hl   
1BAF   CD 85 0C               CALL   run   
1BB2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1BC6   76                     HALT      
1BC7   00                     .CSTR      
1BC8                EXPECTM_0_2734S50:      
1BC8   E1                     POP   HL   
1BC9                          ;*Macro unroll:  test "7 3 / _", 1
1BC9   31 80 45               LD   SP,STACK   
1BCC   CD C5 0B               CALL   init   
1BCF   CD 7C 44               CALL   execStr   
1BD2   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1BDA                          ;*Macro unroll:  expect "7 3 / _",1
1BDA   E1                     POP   HL   
1BDB   E5                     PUSH   HL   
1BDC   11 01 00               LD   DE,1   
1BDF   B7                     OR   A   
1BE0   ED 52                  SBC   HL,DE   
1BE2   7D                     LD   A,L   
1BE3   B4                     OR   H   
1BE4   CA 3F 1C               JP   Z,expectM_0_2735S50   
1BE7   CD BE 0B               CALL   printStr   
1BEA   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1BF8   CD BE 0B               CALL   printStr   
1BFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C0A   21 01 00               LD   hl,1   
1C0D   E5                     PUSH   hl   
1C0E   CD 85 0C               CALL   run   
1C11   2E 00                  .CSTR   "."   
1C13   CD BE 0B               CALL   printStr   
1C16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C23   E1                     POP   hl   
1C24   E5                     PUSH   hl   
1C25   E5                     PUSH   hl   
1C26   CD 85 0C               CALL   run   
1C29   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1C3D   76                     HALT      
1C3E   00                     .CSTR      
1C3F                EXPECTM_0_2735S50:      
1C3F   E1                     POP   HL   
1C40                          ;*Macro unroll:  test "7 3 /", 2
1C40   31 80 45               LD   SP,STACK   
1C43   CD C5 0B               CALL   init   
1C46   CD 7C 44               CALL   execStr   
1C49   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1C4F                          ;*Macro unroll:  expect "7 3 /",2
1C4F   E1                     POP   HL   
1C50   E5                     PUSH   HL   
1C51   11 02 00               LD   DE,2   
1C54   B7                     OR   A   
1C55   ED 52                  SBC   HL,DE   
1C57   7D                     LD   A,L   
1C58   B4                     OR   H   
1C59   CA B2 1C               JP   Z,expectM_0_2736S50   
1C5C   CD BE 0B               CALL   printStr   
1C5F   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1C6B   CD BE 0B               CALL   printStr   
1C6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C7D   21 02 00               LD   hl,2   
1C80   E5                     PUSH   hl   
1C81   CD 85 0C               CALL   run   
1C84   2E 00                  .CSTR   "."   
1C86   CD BE 0B               CALL   printStr   
1C89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C96   E1                     POP   hl   
1C97   E5                     PUSH   hl   
1C98   E5                     PUSH   hl   
1C99   CD 85 0C               CALL   run   
1C9C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1CB0   76                     HALT      
1CB1   00                     .CSTR      
1CB2                EXPECTM_0_2736S50:      
1CB2   E1                     POP   HL   
1CB3                          ;*Macro unroll:  test "2 3 ==", FALSE
1CB3   31 80 45               LD   SP,STACK   
1CB6   CD C5 0B               CALL   init   
1CB9   CD 7C 44               CALL   execStr   
1CBC   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1CC3                          ;*Macro unroll:  expect "2 3 ==",FALSE
1CC3   E1                     POP   HL   
1CC4   E5                     PUSH   HL   
1CC5   11 00 00               LD   DE,FALSE   
1CC8   B7                     OR   A   
1CC9   ED 52                  SBC   HL,DE   
1CCB   7D                     LD   A,L   
1CCC   B4                     OR   H   
1CCD   CA 27 1D               JP   Z,expectM_0_2737S50   
1CD0   CD BE 0B               CALL   printStr   
1CD3   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1CE0   CD BE 0B               CALL   printStr   
1CE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CF2   21 00 00               LD   hl,FALSE   
1CF5   E5                     PUSH   hl   
1CF6   CD 85 0C               CALL   run   
1CF9   2E 00                  .CSTR   "."   
1CFB   CD BE 0B               CALL   printStr   
1CFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D0B   E1                     POP   hl   
1D0C   E5                     PUSH   hl   
1D0D   E5                     PUSH   hl   
1D0E   CD 85 0C               CALL   run   
1D11   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D25   76                     HALT      
1D26   00                     .CSTR      
1D27                EXPECTM_0_2737S50:      
1D27   E1                     POP   HL   
1D28                          ;*Macro unroll:  test "3 3 ==", TRUE
1D28   31 80 45               LD   SP,STACK   
1D2B   CD C5 0B               CALL   init   
1D2E   CD 7C 44               CALL   execStr   
1D31   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1D38                          ;*Macro unroll:  expect "3 3 ==",TRUE
1D38   E1                     POP   HL   
1D39   E5                     PUSH   HL   
1D3A   11 FF FF               LD   DE,TRUE   
1D3D   B7                     OR   A   
1D3E   ED 52                  SBC   HL,DE   
1D40   7D                     LD   A,L   
1D41   B4                     OR   H   
1D42   CA 9C 1D               JP   Z,expectM_0_2738S50   
1D45   CD BE 0B               CALL   printStr   
1D48   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1D55   CD BE 0B               CALL   printStr   
1D58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D67   21 FF FF               LD   hl,TRUE   
1D6A   E5                     PUSH   hl   
1D6B   CD 85 0C               CALL   run   
1D6E   2E 00                  .CSTR   "."   
1D70   CD BE 0B               CALL   printStr   
1D73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D80   E1                     POP   hl   
1D81   E5                     PUSH   hl   
1D82   E5                     PUSH   hl   
1D83   CD 85 0C               CALL   run   
1D86   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D9A   76                     HALT      
1D9B   00                     .CSTR      
1D9C                EXPECTM_0_2738S50:      
1D9C   E1                     POP   HL   
1D9D                          ;*Macro unroll:  test "1 2 <", TRUE
1D9D   31 80 45               LD   SP,STACK   
1DA0   CD C5 0B               CALL   init   
1DA3   CD 7C 44               CALL   execStr   
1DA6   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1DAC                          ;*Macro unroll:  expect "1 2 <",TRUE
1DAC   E1                     POP   HL   
1DAD   E5                     PUSH   HL   
1DAE   11 FF FF               LD   DE,TRUE   
1DB1   B7                     OR   A   
1DB2   ED 52                  SBC   HL,DE   
1DB4   7D                     LD   A,L   
1DB5   B4                     OR   H   
1DB6   CA 0F 1E               JP   Z,expectM_0_2739S50   
1DB9   CD BE 0B               CALL   printStr   
1DBC   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1DC8   CD BE 0B               CALL   printStr   
1DCB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DDA   21 FF FF               LD   hl,TRUE   
1DDD   E5                     PUSH   hl   
1DDE   CD 85 0C               CALL   run   
1DE1   2E 00                  .CSTR   "."   
1DE3   CD BE 0B               CALL   printStr   
1DE6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DF3   E1                     POP   hl   
1DF4   E5                     PUSH   hl   
1DF5   E5                     PUSH   hl   
1DF6   CD 85 0C               CALL   run   
1DF9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E0D   76                     HALT      
1E0E   00                     .CSTR      
1E0F                EXPECTM_0_2739S50:      
1E0F   E1                     POP   HL   
1E10                          ;*Macro unroll:  test "2 1 <", FALSE
1E10   31 80 45               LD   SP,STACK   
1E13   CD C5 0B               CALL   init   
1E16   CD 7C 44               CALL   execStr   
1E19   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1E1F                          ;*Macro unroll:  expect "2 1 <",FALSE
1E1F   E1                     POP   HL   
1E20   E5                     PUSH   HL   
1E21   11 00 00               LD   DE,FALSE   
1E24   B7                     OR   A   
1E25   ED 52                  SBC   HL,DE   
1E27   7D                     LD   A,L   
1E28   B4                     OR   H   
1E29   CA 82 1E               JP   Z,expectM_0_2740S50   
1E2C   CD BE 0B               CALL   printStr   
1E2F   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1E3B   CD BE 0B               CALL   printStr   
1E3E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E4D   21 00 00               LD   hl,FALSE   
1E50   E5                     PUSH   hl   
1E51   CD 85 0C               CALL   run   
1E54   2E 00                  .CSTR   "."   
1E56   CD BE 0B               CALL   printStr   
1E59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E66   E1                     POP   hl   
1E67   E5                     PUSH   hl   
1E68   E5                     PUSH   hl   
1E69   CD 85 0C               CALL   run   
1E6C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E80   76                     HALT      
1E81   00                     .CSTR      
1E82                EXPECTM_0_2740S50:      
1E82   E1                     POP   HL   
1E83                          ;*Macro unroll:  test "2 3 <", TRUE
1E83   31 80 45               LD   SP,STACK   
1E86   CD C5 0B               CALL   init   
1E89   CD 7C 44               CALL   execStr   
1E8C   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1E92                          ;*Macro unroll:  expect "2 3 <",TRUE
1E92   E1                     POP   HL   
1E93   E5                     PUSH   HL   
1E94   11 FF FF               LD   DE,TRUE   
1E97   B7                     OR   A   
1E98   ED 52                  SBC   HL,DE   
1E9A   7D                     LD   A,L   
1E9B   B4                     OR   H   
1E9C   CA F5 1E               JP   Z,expectM_0_2741S50   
1E9F   CD BE 0B               CALL   printStr   
1EA2   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1EAE   CD BE 0B               CALL   printStr   
1EB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EC0   21 FF FF               LD   hl,TRUE   
1EC3   E5                     PUSH   hl   
1EC4   CD 85 0C               CALL   run   
1EC7   2E 00                  .CSTR   "."   
1EC9   CD BE 0B               CALL   printStr   
1ECC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ED9   E1                     POP   hl   
1EDA   E5                     PUSH   hl   
1EDB   E5                     PUSH   hl   
1EDC   CD 85 0C               CALL   run   
1EDF   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1EF3   76                     HALT      
1EF4   00                     .CSTR      
1EF5                EXPECTM_0_2741S50:      
1EF5   E1                     POP   HL   
1EF6                          ;*Macro unroll:  test "3 3 <", FALSE
1EF6   31 80 45               LD   SP,STACK   
1EF9   CD C5 0B               CALL   init   
1EFC   CD 7C 44               CALL   execStr   
1EFF   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1F05                          ;*Macro unroll:  expect "3 3 <",FALSE
1F05   E1                     POP   HL   
1F06   E5                     PUSH   HL   
1F07   11 00 00               LD   DE,FALSE   
1F0A   B7                     OR   A   
1F0B   ED 52                  SBC   HL,DE   
1F0D   7D                     LD   A,L   
1F0E   B4                     OR   H   
1F0F   CA 68 1F               JP   Z,expectM_0_2742S50   
1F12   CD BE 0B               CALL   printStr   
1F15   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1F21   CD BE 0B               CALL   printStr   
1F24   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F33   21 00 00               LD   hl,FALSE   
1F36   E5                     PUSH   hl   
1F37   CD 85 0C               CALL   run   
1F3A   2E 00                  .CSTR   "."   
1F3C   CD BE 0B               CALL   printStr   
1F3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F4C   E1                     POP   hl   
1F4D   E5                     PUSH   hl   
1F4E   E5                     PUSH   hl   
1F4F   CD 85 0C               CALL   run   
1F52   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1F66   76                     HALT      
1F67   00                     .CSTR      
1F68                EXPECTM_0_2742S50:      
1F68   E1                     POP   HL   
1F69                          ;*Macro unroll:  test "1 2 >", FALSE
1F69   31 80 45               LD   SP,STACK   
1F6C   CD C5 0B               CALL   init   
1F6F   CD 7C 44               CALL   execStr   
1F72   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1F78                          ;*Macro unroll:  expect "1 2 >",FALSE
1F78   E1                     POP   HL   
1F79   E5                     PUSH   HL   
1F7A   11 00 00               LD   DE,FALSE   
1F7D   B7                     OR   A   
1F7E   ED 52                  SBC   HL,DE   
1F80   7D                     LD   A,L   
1F81   B4                     OR   H   
1F82   CA DB 1F               JP   Z,expectM_0_2743S50   
1F85   CD BE 0B               CALL   printStr   
1F88   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1F94   CD BE 0B               CALL   printStr   
1F97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FA6   21 00 00               LD   hl,FALSE   
1FA9   E5                     PUSH   hl   
1FAA   CD 85 0C               CALL   run   
1FAD   2E 00                  .CSTR   "."   
1FAF   CD BE 0B               CALL   printStr   
1FB2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FBF   E1                     POP   hl   
1FC0   E5                     PUSH   hl   
1FC1   E5                     PUSH   hl   
1FC2   CD 85 0C               CALL   run   
1FC5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1FD9   76                     HALT      
1FDA   00                     .CSTR      
1FDB                EXPECTM_0_2743S50:      
1FDB   E1                     POP   HL   
1FDC                          ;*Macro unroll:  test "2 1 >", TRUE
1FDC   31 80 45               LD   SP,STACK   
1FDF   CD C5 0B               CALL   init   
1FE2   CD 7C 44               CALL   execStr   
1FE5   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1FEB                          ;*Macro unroll:  expect "2 1 >",TRUE
1FEB   E1                     POP   HL   
1FEC   E5                     PUSH   HL   
1FED   11 FF FF               LD   DE,TRUE   
1FF0   B7                     OR   A   
1FF1   ED 52                  SBC   HL,DE   
1FF3   7D                     LD   A,L   
1FF4   B4                     OR   H   
1FF5   CA 4E 20               JP   Z,expectM_0_2744S50   
1FF8   CD BE 0B               CALL   printStr   
1FFB   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2007   CD BE 0B               CALL   printStr   
200A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2019   21 FF FF               LD   hl,TRUE   
201C   E5                     PUSH   hl   
201D   CD 85 0C               CALL   run   
2020   2E 00                  .CSTR   "."   
2022   CD BE 0B               CALL   printStr   
2025   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2032   E1                     POP   hl   
2033   E5                     PUSH   hl   
2034   E5                     PUSH   hl   
2035   CD 85 0C               CALL   run   
2038   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
204C   76                     HALT      
204D   00                     .CSTR      
204E                EXPECTM_0_2744S50:      
204E   E1                     POP   HL   
204F                          ;*Macro unroll:  test "3 3 >", FALSE
204F   31 80 45               LD   SP,STACK   
2052   CD C5 0B               CALL   init   
2055   CD 7C 44               CALL   execStr   
2058   33 20 33 20 3E 00      .CSTR   "3 3 >"   
205E                          ;*Macro unroll:  expect "3 3 >",FALSE
205E   E1                     POP   HL   
205F   E5                     PUSH   HL   
2060   11 00 00               LD   DE,FALSE   
2063   B7                     OR   A   
2064   ED 52                  SBC   HL,DE   
2066   7D                     LD   A,L   
2067   B4                     OR   H   
2068   CA C1 20               JP   Z,expectM_0_2745S50   
206B   CD BE 0B               CALL   printStr   
206E   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
207A   CD BE 0B               CALL   printStr   
207D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
208C   21 00 00               LD   hl,FALSE   
208F   E5                     PUSH   hl   
2090   CD 85 0C               CALL   run   
2093   2E 00                  .CSTR   "."   
2095   CD BE 0B               CALL   printStr   
2098   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20A5   E1                     POP   hl   
20A6   E5                     PUSH   hl   
20A7   E5                     PUSH   hl   
20A8   CD 85 0C               CALL   run   
20AB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
20BF   76                     HALT      
20C0   00                     .CSTR      
20C1                EXPECTM_0_2745S50:      
20C1   E1                     POP   HL   
20C2                          ;*Macro unroll:  test "4 3 >", TRUE
20C2   31 80 45               LD   SP,STACK   
20C5   CD C5 0B               CALL   init   
20C8   CD 7C 44               CALL   execStr   
20CB   34 20 33 20 3E 00      .CSTR   "4 3 >"   
20D1                          ;*Macro unroll:  expect "4 3 >",TRUE
20D1   E1                     POP   HL   
20D2   E5                     PUSH   HL   
20D3   11 FF FF               LD   DE,TRUE   
20D6   B7                     OR   A   
20D7   ED 52                  SBC   HL,DE   
20D9   7D                     LD   A,L   
20DA   B4                     OR   H   
20DB   CA 34 21               JP   Z,expectM_0_2746S50   
20DE   CD BE 0B               CALL   printStr   
20E1   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
20ED   CD BE 0B               CALL   printStr   
20F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20FF   21 FF FF               LD   hl,TRUE   
2102   E5                     PUSH   hl   
2103   CD 85 0C               CALL   run   
2106   2E 00                  .CSTR   "."   
2108   CD BE 0B               CALL   printStr   
210B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2118   E1                     POP   hl   
2119   E5                     PUSH   hl   
211A   E5                     PUSH   hl   
211B   CD 85 0C               CALL   run   
211E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2132   76                     HALT      
2133   00                     .CSTR      
2134                EXPECTM_0_2746S50:      
2134   E1                     POP   HL   
2135                          ;*Macro unroll:  test "2 2 <=", TRUE
2135   31 80 45               LD   SP,STACK   
2138   CD C5 0B               CALL   init   
213B   CD 7C 44               CALL   execStr   
213E   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
2145                          ;*Macro unroll:  expect "2 2 <=",TRUE
2145   E1                     POP   HL   
2146   E5                     PUSH   HL   
2147   11 FF FF               LD   DE,TRUE   
214A   B7                     OR   A   
214B   ED 52                  SBC   HL,DE   
214D   7D                     LD   A,L   
214E   B4                     OR   H   
214F   CA A9 21               JP   Z,expectM_0_2747S50   
2152   CD BE 0B               CALL   printStr   
2155   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2162   CD BE 0B               CALL   printStr   
2165   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2174   21 FF FF               LD   hl,TRUE   
2177   E5                     PUSH   hl   
2178   CD 85 0C               CALL   run   
217B   2E 00                  .CSTR   "."   
217D   CD BE 0B               CALL   printStr   
2180   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
218D   E1                     POP   hl   
218E   E5                     PUSH   hl   
218F   E5                     PUSH   hl   
2190   CD 85 0C               CALL   run   
2193   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
21A7   76                     HALT      
21A8   00                     .CSTR      
21A9                EXPECTM_0_2747S50:      
21A9   E1                     POP   HL   
21AA                          ;*Macro unroll:  test "2 2 >=", TRUE
21AA   31 80 45               LD   SP,STACK   
21AD   CD C5 0B               CALL   init   
21B0   CD 7C 44               CALL   execStr   
21B3   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
21BA                          ;*Macro unroll:  expect "2 2 >=",TRUE
21BA   E1                     POP   HL   
21BB   E5                     PUSH   HL   
21BC   11 FF FF               LD   DE,TRUE   
21BF   B7                     OR   A   
21C0   ED 52                  SBC   HL,DE   
21C2   7D                     LD   A,L   
21C3   B4                     OR   H   
21C4   CA 1E 22               JP   Z,expectM_0_2748S50   
21C7   CD BE 0B               CALL   printStr   
21CA   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
21D7   CD BE 0B               CALL   printStr   
21DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21E9   21 FF FF               LD   hl,TRUE   
21EC   E5                     PUSH   hl   
21ED   CD 85 0C               CALL   run   
21F0   2E 00                  .CSTR   "."   
21F2   CD BE 0B               CALL   printStr   
21F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2202   E1                     POP   hl   
2203   E5                     PUSH   hl   
2204   E5                     PUSH   hl   
2205   CD 85 0C               CALL   run   
2208   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
221C   76                     HALT      
221D   00                     .CSTR      
221E                EXPECTM_0_2748S50:      
221E   E1                     POP   HL   
221F                          ;*Macro unroll:  test "3 1 <<", 6
221F   31 80 45               LD   SP,STACK   
2222   CD C5 0B               CALL   init   
2225   CD 7C 44               CALL   execStr   
2228   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
222F                          ;*Macro unroll:  expect "3 1 <<",6
222F   E1                     POP   HL   
2230   E5                     PUSH   HL   
2231   11 06 00               LD   DE,6   
2234   B7                     OR   A   
2235   ED 52                  SBC   HL,DE   
2237   7D                     LD   A,L   
2238   B4                     OR   H   
2239   CA 93 22               JP   Z,expectM_0_2749S50   
223C   CD BE 0B               CALL   printStr   
223F   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
224C   CD BE 0B               CALL   printStr   
224F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
225E   21 06 00               LD   hl,6   
2261   E5                     PUSH   hl   
2262   CD 85 0C               CALL   run   
2265   2E 00                  .CSTR   "."   
2267   CD BE 0B               CALL   printStr   
226A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2277   E1                     POP   hl   
2278   E5                     PUSH   hl   
2279   E5                     PUSH   hl   
227A   CD 85 0C               CALL   run   
227D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2291   76                     HALT      
2292   00                     .CSTR      
2293                EXPECTM_0_2749S50:      
2293   E1                     POP   HL   
2294                          ;*Macro unroll:  test "10 1 >>", 5
2294   31 80 45               LD   SP,STACK   
2297   CD C5 0B               CALL   init   
229A   CD 7C 44               CALL   execStr   
229D   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
22A5                          ;*Macro unroll:  expect "10 1 >>",5
22A5   E1                     POP   HL   
22A6   E5                     PUSH   HL   
22A7   11 05 00               LD   DE,5   
22AA   B7                     OR   A   
22AB   ED 52                  SBC   HL,DE   
22AD   7D                     LD   A,L   
22AE   B4                     OR   H   
22AF   CA 0A 23               JP   Z,expectM_0_2750S50   
22B2   CD BE 0B               CALL   printStr   
22B5   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
22C3   CD BE 0B               CALL   printStr   
22C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22D5   21 05 00               LD   hl,5   
22D8   E5                     PUSH   hl   
22D9   CD 85 0C               CALL   run   
22DC   2E 00                  .CSTR   "."   
22DE   CD BE 0B               CALL   printStr   
22E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22EE   E1                     POP   hl   
22EF   E5                     PUSH   hl   
22F0   E5                     PUSH   hl   
22F1   CD 85 0C               CALL   run   
22F4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2308   76                     HALT      
2309   00                     .CSTR      
230A                EXPECTM_0_2750S50:      
230A   E1                     POP   HL   
230B                          ;*Macro unroll:  test "1 x = x", 1
230B   31 80 45               LD   SP,STACK   
230E   CD C5 0B               CALL   init   
2311   CD 7C 44               CALL   execStr   
2314   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
231C                          ;*Macro unroll:  expect "1 x = x",1
231C   E1                     POP   HL   
231D   E5                     PUSH   HL   
231E   11 01 00               LD   DE,1   
2321   B7                     OR   A   
2322   ED 52                  SBC   HL,DE   
2324   7D                     LD   A,L   
2325   B4                     OR   H   
2326   CA 81 23               JP   Z,expectM_0_2751S50   
2329   CD BE 0B               CALL   printStr   
232C   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
233A   CD BE 0B               CALL   printStr   
233D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
234C   21 01 00               LD   hl,1   
234F   E5                     PUSH   hl   
2350   CD 85 0C               CALL   run   
2353   2E 00                  .CSTR   "."   
2355   CD BE 0B               CALL   printStr   
2358   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2365   E1                     POP   hl   
2366   E5                     PUSH   hl   
2367   E5                     PUSH   hl   
2368   CD 85 0C               CALL   run   
236B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
237F   76                     HALT      
2380   00                     .CSTR      
2381                EXPECTM_0_2751S50:      
2381   E1                     POP   HL   
2382                          ;*Macro unroll:  test "1{}^", 1
2382   31 80 45               LD   SP,STACK   
2385   CD C5 0B               CALL   init   
2388   CD 7C 44               CALL   execStr   
238B   31 7B 7D 5E 00         .CSTR   "1{}^"   
2390                          ;*Macro unroll:  expect "1{}^",1
2390   E1                     POP   HL   
2391   E5                     PUSH   HL   
2392   11 01 00               LD   DE,1   
2395   B7                     OR   A   
2396   ED 52                  SBC   HL,DE   
2398   7D                     LD   A,L   
2399   B4                     OR   H   
239A   CA F2 23               JP   Z,expectM_0_2752S50   
239D   CD BE 0B               CALL   printStr   
23A0   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
23AB   CD BE 0B               CALL   printStr   
23AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23BD   21 01 00               LD   hl,1   
23C0   E5                     PUSH   hl   
23C1   CD 85 0C               CALL   run   
23C4   2E 00                  .CSTR   "."   
23C6   CD BE 0B               CALL   printStr   
23C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23D6   E1                     POP   hl   
23D7   E5                     PUSH   hl   
23D8   E5                     PUSH   hl   
23D9   CD 85 0C               CALL   run   
23DC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
23F0   76                     HALT      
23F1   00                     .CSTR      
23F2                EXPECTM_0_2752S50:      
23F2   E1                     POP   HL   
23F3                          ;*Macro unroll:  test "{1}^", 1
23F3   31 80 45               LD   SP,STACK   
23F6   CD C5 0B               CALL   init   
23F9   CD 7C 44               CALL   execStr   
23FC   7B 31 7D 5E 00         .CSTR   "{1}^"   
2401                          ;*Macro unroll:  expect "{1}^",1
2401   E1                     POP   HL   
2402   E5                     PUSH   HL   
2403   11 01 00               LD   DE,1   
2406   B7                     OR   A   
2407   ED 52                  SBC   HL,DE   
2409   7D                     LD   A,L   
240A   B4                     OR   H   
240B   CA 63 24               JP   Z,expectM_0_2753S50   
240E   CD BE 0B               CALL   printStr   
2411   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
241C   CD BE 0B               CALL   printStr   
241F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
242E   21 01 00               LD   hl,1   
2431   E5                     PUSH   hl   
2432   CD 85 0C               CALL   run   
2435   2E 00                  .CSTR   "."   
2437   CD BE 0B               CALL   printStr   
243A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2447   E1                     POP   hl   
2448   E5                     PUSH   hl   
2449   E5                     PUSH   hl   
244A   CD 85 0C               CALL   run   
244D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2461   76                     HALT      
2462   00                     .CSTR      
2463                EXPECTM_0_2753S50:      
2463   E1                     POP   HL   
2464                          ;*Macro unroll:  test "{{1}^}^", 1
2464   31 80 45               LD   SP,STACK   
2467   CD C5 0B               CALL   init   
246A   CD 7C 44               CALL   execStr   
246D   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
2475                          ;*Macro unroll:  expect "{{1}^}^",1
2475   E1                     POP   HL   
2476   E5                     PUSH   HL   
2477   11 01 00               LD   DE,1   
247A   B7                     OR   A   
247B   ED 52                  SBC   HL,DE   
247D   7D                     LD   A,L   
247E   B4                     OR   H   
247F   CA DA 24               JP   Z,expectM_0_2754S50   
2482   CD BE 0B               CALL   printStr   
2485   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2493   CD BE 0B               CALL   printStr   
2496   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24A5   21 01 00               LD   hl,1   
24A8   E5                     PUSH   hl   
24A9   CD 85 0C               CALL   run   
24AC   2E 00                  .CSTR   "."   
24AE   CD BE 0B               CALL   printStr   
24B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24BE   E1                     POP   hl   
24BF   E5                     PUSH   hl   
24C0   E5                     PUSH   hl   
24C1   CD 85 0C               CALL   run   
24C4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
24D8   76                     HALT      
24D9   00                     .CSTR      
24DA                EXPECTM_0_2754S50:      
24DA   E1                     POP   HL   
24DB                          ;*Macro unroll:  test "{{{1}^}^}^", 1
24DB   31 80 45               LD   SP,STACK   
24DE   CD C5 0B               CALL   init   
24E1   CD 7C 44               CALL   execStr   
24E4   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
24EF                          ;*Macro unroll:  expect "{{{1}^}^}^",1
24EF   E1                     POP   HL   
24F0   E5                     PUSH   HL   
24F1   11 01 00               LD   DE,1   
24F4   B7                     OR   A   
24F5   ED 52                  SBC   HL,DE   
24F7   7D                     LD   A,L   
24F8   B4                     OR   H   
24F9   CA 57 25               JP   Z,expectM_0_2755S50   
24FC   CD BE 0B               CALL   printStr   
24FF   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2510   CD BE 0B               CALL   printStr   
2513   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2522   21 01 00               LD   hl,1   
2525   E5                     PUSH   hl   
2526   CD 85 0C               CALL   run   
2529   2E 00                  .CSTR   "."   
252B   CD BE 0B               CALL   printStr   
252E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
253B   E1                     POP   hl   
253C   E5                     PUSH   hl   
253D   E5                     PUSH   hl   
253E   CD 85 0C               CALL   run   
2541   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2555   76                     HALT      
2556   00                     .CSTR      
2557                EXPECTM_0_2755S50:      
2557   E1                     POP   HL   
2558                          ;*Macro unroll:  test "5 /f{10} ?", 5
2558   31 80 45               LD   SP,STACK   
255B   CD C5 0B               CALL   init   
255E   CD 7C 44               CALL   execStr   
2561   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
256C                          ;*Macro unroll:  expect "5 /f{10} ?",5
256C   E1                     POP   HL   
256D   E5                     PUSH   HL   
256E   11 05 00               LD   DE,5   
2571   B7                     OR   A   
2572   ED 52                  SBC   HL,DE   
2574   7D                     LD   A,L   
2575   B4                     OR   H   
2576   CA D4 25               JP   Z,expectM_0_2756S50   
2579   CD BE 0B               CALL   printStr   
257C   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
258D   CD BE 0B               CALL   printStr   
2590   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
259F   21 05 00               LD   hl,5   
25A2   E5                     PUSH   hl   
25A3   CD 85 0C               CALL   run   
25A6   2E 00                  .CSTR   "."   
25A8   CD BE 0B               CALL   printStr   
25AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25B8   E1                     POP   hl   
25B9   E5                     PUSH   hl   
25BA   E5                     PUSH   hl   
25BB   CD 85 0C               CALL   run   
25BE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
25D2   76                     HALT      
25D3   00                     .CSTR      
25D4                EXPECTM_0_2756S50:      
25D4   E1                     POP   HL   
25D5                          ;*Macro unroll:  test "5 /t{10} ? +", 15
25D5   31 80 45               LD   SP,STACK   
25D8   CD C5 0B               CALL   init   
25DB   CD 7C 44               CALL   execStr   
25DE   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
25EB                          ;*Macro unroll:  expect "5 /t{10} ? +",15
25EB   E1                     POP   HL   
25EC   E5                     PUSH   HL   
25ED   11 0F 00               LD   DE,15   
25F0   B7                     OR   A   
25F1   ED 52                  SBC   HL,DE   
25F3   7D                     LD   A,L   
25F4   B4                     OR   H   
25F5   CA 55 26               JP   Z,expectM_0_2757S50   
25F8   CD BE 0B               CALL   printStr   
25FB   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
260E   CD BE 0B               CALL   printStr   
2611   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2620   21 0F 00               LD   hl,15   
2623   E5                     PUSH   hl   
2624   CD 85 0C               CALL   run   
2627   2E 00                  .CSTR   "."   
2629   CD BE 0B               CALL   printStr   
262C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2639   E1                     POP   hl   
263A   E5                     PUSH   hl   
263B   E5                     PUSH   hl   
263C   CD 85 0C               CALL   run   
263F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2653   76                     HALT      
2654   00                     .CSTR      
2655                EXPECTM_0_2757S50:      
2655   E1                     POP   HL   
2656                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2656   31 80 45               LD   SP,STACK   
2659   CD C5 0B               CALL   init   
265C   CD 7C 44               CALL   execStr   
265F   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
2671                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
2671   E1                     POP   HL   
2672   E5                     PUSH   HL   
2673   11 15 00               LD   DE,21   
2676   B7                     OR   A   
2677   ED 52                  SBC   HL,DE   
2679   7D                     LD   A,L   
267A   B4                     OR   H   
267B   CA E0 26               JP   Z,expectM_0_2758S50   
267E   CD BE 0B               CALL   printStr   
2681   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2699   CD BE 0B               CALL   printStr   
269C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26AB   21 15 00               LD   hl,21   
26AE   E5                     PUSH   hl   
26AF   CD 85 0C               CALL   run   
26B2   2E 00                  .CSTR   "."   
26B4   CD BE 0B               CALL   printStr   
26B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26C4   E1                     POP   hl   
26C5   E5                     PUSH   hl   
26C6   E5                     PUSH   hl   
26C7   CD 85 0C               CALL   run   
26CA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
26DE   76                     HALT      
26DF   00                     .CSTR      
26E0                EXPECTM_0_2758S50:      
26E0   E1                     POP   HL   
26E1                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
26E1   31 80 45               LD   SP,STACK   
26E4   CD C5 0B               CALL   init   
26E7   CD 7C 44               CALL   execStr   
26EA   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
26FC                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
26FC   E1                     POP   HL   
26FD   E5                     PUSH   HL   
26FE   11 0B 00               LD   DE,11   
2701   B7                     OR   A   
2702   ED 52                  SBC   HL,DE   
2704   7D                     LD   A,L   
2705   B4                     OR   H   
2706   CA 6B 27               JP   Z,expectM_0_2759S50   
2709   CD BE 0B               CALL   printStr   
270C   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2724   CD BE 0B               CALL   printStr   
2727   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2736   21 0B 00               LD   hl,11   
2739   E5                     PUSH   hl   
273A   CD 85 0C               CALL   run   
273D   2E 00                  .CSTR   "."   
273F   CD BE 0B               CALL   printStr   
2742   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
274F   E1                     POP   hl   
2750   E5                     PUSH   hl   
2751   E5                     PUSH   hl   
2752   CD 85 0C               CALL   run   
2755   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2769   76                     HALT      
276A   00                     .CSTR      
276B                EXPECTM_0_2759S50:      
276B   E1                     POP   HL   
276C                          ;*Macro unroll:  test ": -2%", $0000
276C   31 80 45               LD   SP,STACK   
276F   CD C5 0B               CALL   init   
2772   CD 7C 44               CALL   execStr   
2775   3A 20 2D 32 25 00      .CSTR   ": -2%"   
277B                          ;*Macro unroll:  expect ": -2%",$0000
277B   E1                     POP   HL   
277C   E5                     PUSH   HL   
277D   11 00 00               LD   DE,$0000   
2780   B7                     OR   A   
2781   ED 52                  SBC   HL,DE   
2783   7D                     LD   A,L   
2784   B4                     OR   H   
2785   CA DE 27               JP   Z,expectM_0_2760S50   
2788   CD BE 0B               CALL   printStr   
278B   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
2797   CD BE 0B               CALL   printStr   
279A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27A9   21 00 00               LD   hl,$0000   
27AC   E5                     PUSH   hl   
27AD   CD 85 0C               CALL   run   
27B0   2E 00                  .CSTR   "."   
27B2   CD BE 0B               CALL   printStr   
27B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27C2   E1                     POP   hl   
27C3   E5                     PUSH   hl   
27C4   E5                     PUSH   hl   
27C5   CD 85 0C               CALL   run   
27C8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
27DC   76                     HALT      
27DD   00                     .CSTR      
27DE                EXPECTM_0_2760S50:      
27DE   E1                     POP   HL   
27DF                          ;*Macro unroll:  test ":a -1%", $0001
27DF   31 80 45               LD   SP,STACK   
27E2   CD C5 0B               CALL   init   
27E5   CD 7C 44               CALL   execStr   
27E8   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
27EF                          ;*Macro unroll:  expect ":a -1%",$0001
27EF   E1                     POP   HL   
27F0   E5                     PUSH   HL   
27F1   11 01 00               LD   DE,$0001   
27F4   B7                     OR   A   
27F5   ED 52                  SBC   HL,DE   
27F7   7D                     LD   A,L   
27F8   B4                     OR   H   
27F9   CA 53 28               JP   Z,expectM_0_2761S50   
27FC   CD BE 0B               CALL   printStr   
27FF   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
280C   CD BE 0B               CALL   printStr   
280F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
281E   21 01 00               LD   hl,$0001   
2821   E5                     PUSH   hl   
2822   CD 85 0C               CALL   run   
2825   2E 00                  .CSTR   "."   
2827   CD BE 0B               CALL   printStr   
282A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2837   E1                     POP   hl   
2838   E5                     PUSH   hl   
2839   E5                     PUSH   hl   
283A   CD 85 0C               CALL   run   
283D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2851   76                     HALT      
2852   00                     .CSTR      
2853                EXPECTM_0_2761S50:      
2853   E1                     POP   HL   
2854                          ;*Macro unroll:  test ":a: -1%", $0001
2854   31 80 45               LD   SP,STACK   
2857   CD C5 0B               CALL   init   
285A   CD 7C 44               CALL   execStr   
285D   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
2865                          ;*Macro unroll:  expect ":a: -1%",$0001
2865   E1                     POP   HL   
2866   E5                     PUSH   HL   
2867   11 01 00               LD   DE,$0001   
286A   B7                     OR   A   
286B   ED 52                  SBC   HL,DE   
286D   7D                     LD   A,L   
286E   B4                     OR   H   
286F   CA CA 28               JP   Z,expectM_0_2762S50   
2872   CD BE 0B               CALL   printStr   
2875   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
2883   CD BE 0B               CALL   printStr   
2886   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2895   21 01 00               LD   hl,$0001   
2898   E5                     PUSH   hl   
2899   CD 85 0C               CALL   run   
289C   2E 00                  .CSTR   "."   
289E   CD BE 0B               CALL   printStr   
28A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28AE   E1                     POP   hl   
28AF   E5                     PUSH   hl   
28B0   E5                     PUSH   hl   
28B1   CD 85 0C               CALL   run   
28B4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
28C8   76                     HALT      
28C9   00                     .CSTR      
28CA                EXPECTM_0_2762S50:      
28CA   E1                     POP   HL   
28CB                          ;*Macro unroll:  test ":a:b -1%", $0102
28CB   31 80 45               LD   SP,STACK   
28CE   CD C5 0B               CALL   init   
28D1   CD 7C 44               CALL   execStr   
28D4   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
28DD                          ;*Macro unroll:  expect ":a:b -1%",$0102
28DD   E1                     POP   HL   
28DE   E5                     PUSH   HL   
28DF   11 02 01               LD   DE,$0102   
28E2   B7                     OR   A   
28E3   ED 52                  SBC   HL,DE   
28E5   7D                     LD   A,L   
28E6   B4                     OR   H   
28E7   CA 43 29               JP   Z,expectM_0_2763S50   
28EA   CD BE 0B               CALL   printStr   
28ED   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
28FC   CD BE 0B               CALL   printStr   
28FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
290E   21 02 01               LD   hl,$0102   
2911   E5                     PUSH   hl   
2912   CD 85 0C               CALL   run   
2915   2E 00                  .CSTR   "."   
2917   CD BE 0B               CALL   printStr   
291A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2927   E1                     POP   hl   
2928   E5                     PUSH   hl   
2929   E5                     PUSH   hl   
292A   CD 85 0C               CALL   run   
292D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2941   76                     HALT      
2942   00                     .CSTR      
2943                EXPECTM_0_2763S50:      
2943   E1                     POP   HL   
2944                          ;*Macro unroll:  test "::b -1%", $0101
2944   31 80 45               LD   SP,STACK   
2947   CD C5 0B               CALL   init   
294A   CD 7C 44               CALL   execStr   
294D   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
2955                          ;*Macro unroll:  expect "::b -1%",$0101
2955   E1                     POP   HL   
2956   E5                     PUSH   HL   
2957   11 01 01               LD   DE,$0101   
295A   B7                     OR   A   
295B   ED 52                  SBC   HL,DE   
295D   7D                     LD   A,L   
295E   B4                     OR   H   
295F   CA BA 29               JP   Z,expectM_0_2764S50   
2962   CD BE 0B               CALL   printStr   
2965   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
2973   CD BE 0B               CALL   printStr   
2976   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2985   21 01 01               LD   hl,$0101   
2988   E5                     PUSH   hl   
2989   CD 85 0C               CALL   run   
298C   2E 00                  .CSTR   "."   
298E   CD BE 0B               CALL   printStr   
2991   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
299E   E1                     POP   hl   
299F   E5                     PUSH   hl   
29A0   E5                     PUSH   hl   
29A1   CD 85 0C               CALL   run   
29A4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
29B8   76                     HALT      
29B9   00                     .CSTR      
29BA                EXPECTM_0_2764S50:      
29BA   E1                     POP   HL   
29BB                          ;*Macro unroll:  test ":{2};^", 2
29BB   31 80 45               LD   SP,STACK   
29BE   CD C5 0B               CALL   init   
29C1   CD 7C 44               CALL   execStr   
29C4   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
29CB                          ;*Macro unroll:  expect ":{2};^",2
29CB   E1                     POP   HL   
29CC   E5                     PUSH   HL   
29CD   11 02 00               LD   DE,2   
29D0   B7                     OR   A   
29D1   ED 52                  SBC   HL,DE   
29D3   7D                     LD   A,L   
29D4   B4                     OR   H   
29D5   CA 2F 2A               JP   Z,expectM_0_2765S50   
29D8   CD BE 0B               CALL   printStr   
29DB   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
29E8   CD BE 0B               CALL   printStr   
29EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29FA   21 02 00               LD   hl,2   
29FD   E5                     PUSH   hl   
29FE   CD 85 0C               CALL   run   
2A01   2E 00                  .CSTR   "."   
2A03   CD BE 0B               CALL   printStr   
2A06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A13   E1                     POP   hl   
2A14   E5                     PUSH   hl   
2A15   E5                     PUSH   hl   
2A16   CD 85 0C               CALL   run   
2A19   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2A2D   76                     HALT      
2A2E   00                     .CSTR      
2A2F                EXPECTM_0_2765S50:      
2A2F   E1                     POP   HL   
2A30                          ;*Macro unroll:  test ":a{2};^", 2
2A30   31 80 45               LD   SP,STACK   
2A33   CD C5 0B               CALL   init   
2A36   CD 7C 44               CALL   execStr   
2A39   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2A41                          ;*Macro unroll:  expect ":a{2};^",2
2A41   E1                     POP   HL   
2A42   E5                     PUSH   HL   
2A43   11 02 00               LD   DE,2   
2A46   B7                     OR   A   
2A47   ED 52                  SBC   HL,DE   
2A49   7D                     LD   A,L   
2A4A   B4                     OR   H   
2A4B   CA A6 2A               JP   Z,expectM_0_2766S50   
2A4E   CD BE 0B               CALL   printStr   
2A51   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2A5F   CD BE 0B               CALL   printStr   
2A62   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A71   21 02 00               LD   hl,2   
2A74   E5                     PUSH   hl   
2A75   CD 85 0C               CALL   run   
2A78   2E 00                  .CSTR   "."   
2A7A   CD BE 0B               CALL   printStr   
2A7D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A8A   E1                     POP   hl   
2A8B   E5                     PUSH   hl   
2A8C   E5                     PUSH   hl   
2A8D   CD 85 0C               CALL   run   
2A90   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2AA4   76                     HALT      
2AA5   00                     .CSTR      
2AA6                EXPECTM_0_2766S50:      
2AA6   E1                     POP   HL   
2AA7                          ;*Macro unroll:  test "5 :a{$a};^", 5
2AA7   31 80 45               LD   SP,STACK   
2AAA   CD C5 0B               CALL   init   
2AAD   CD 7C 44               CALL   execStr   
2AB0   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
2ABB                          ;*Macro unroll:  expect "5 :a{$a};^",5
2ABB   E1                     POP   HL   
2ABC   E5                     PUSH   HL   
2ABD   11 05 00               LD   DE,5   
2AC0   B7                     OR   A   
2AC1   ED 52                  SBC   HL,DE   
2AC3   7D                     LD   A,L   
2AC4   B4                     OR   H   
2AC5   CA 23 2B               JP   Z,expectM_0_2767S50   
2AC8   CD BE 0B               CALL   printStr   
2ACB   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2ADC   CD BE 0B               CALL   printStr   
2ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEE   21 05 00               LD   hl,5   
2AF1   E5                     PUSH   hl   
2AF2   CD 85 0C               CALL   run   
2AF5   2E 00                  .CSTR   "."   
2AF7   CD BE 0B               CALL   printStr   
2AFA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B07   E1                     POP   hl   
2B08   E5                     PUSH   hl   
2B09   E5                     PUSH   hl   
2B0A   CD 85 0C               CALL   run   
2B0D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2B21   76                     HALT      
2B22   00                     .CSTR      
2B23                EXPECTM_0_2767S50:      
2B23   E1                     POP   HL   
2B24                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2B24   31 80 45               LD   SP,STACK   
2B27   CD C5 0B               CALL   init   
2B2A   CD 7C 44               CALL   execStr   
2B2D   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2B3A                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2B3A   E1                     POP   HL   
2B3B   E5                     PUSH   HL   
2B3C   11 05 00               LD   DE,5   
2B3F   B7                     OR   A   
2B40   ED 52                  SBC   HL,DE   
2B42   7D                     LD   A,L   
2B43   B4                     OR   H   
2B44   CA A4 2B               JP   Z,expectM_0_2768S50   
2B47   CD BE 0B               CALL   printStr   
2B4A   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2B5D   CD BE 0B               CALL   printStr   
2B60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B6F   21 05 00               LD   hl,5   
2B72   E5                     PUSH   hl   
2B73   CD 85 0C               CALL   run   
2B76   2E 00                  .CSTR   "."   
2B78   CD BE 0B               CALL   printStr   
2B7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B88   E1                     POP   hl   
2B89   E5                     PUSH   hl   
2B8A   E5                     PUSH   hl   
2B8B   CD 85 0C               CALL   run   
2B8E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2BA2   76                     HALT      
2BA3   00                     .CSTR      
2BA4                EXPECTM_0_2768S50:      
2BA4   E1                     POP   HL   
2BA5                          ;*Macro unroll:  test ":a{{2}^};^", 2
2BA5   31 80 45               LD   SP,STACK   
2BA8   CD C5 0B               CALL   init   
2BAB   CD 7C 44               CALL   execStr   
2BAE   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2BB9                          ;*Macro unroll:  expect ":a{{2}^};^",2
2BB9   E1                     POP   HL   
2BBA   E5                     PUSH   HL   
2BBB   11 02 00               LD   DE,2   
2BBE   B7                     OR   A   
2BBF   ED 52                  SBC   HL,DE   
2BC1   7D                     LD   A,L   
2BC2   B4                     OR   H   
2BC3   CA 21 2C               JP   Z,expectM_0_2769S50   
2BC6   CD BE 0B               CALL   printStr   
2BC9   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2BDA   CD BE 0B               CALL   printStr   
2BDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BEC   21 02 00               LD   hl,2   
2BEF   E5                     PUSH   hl   
2BF0   CD 85 0C               CALL   run   
2BF3   2E 00                  .CSTR   "."   
2BF5   CD BE 0B               CALL   printStr   
2BF8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C05   E1                     POP   hl   
2C06   E5                     PUSH   hl   
2C07   E5                     PUSH   hl   
2C08   CD 85 0C               CALL   run   
2C0B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2C1F   76                     HALT      
2C20   00                     .CSTR      
2C21                EXPECTM_0_2769S50:      
2C21   E1                     POP   HL   
2C22                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2C22   31 80 45               LD   SP,STACK   
2C25   CD C5 0B               CALL   init   
2C28   CD 7C 44               CALL   execStr   
2C2B   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2C3B                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2C3B   E1                     POP   HL   
2C3C   E5                     PUSH   HL   
2C3D   11 05 00               LD   DE,5   
2C40   B7                     OR   A   
2C41   ED 52                  SBC   HL,DE   
2C43   7D                     LD   A,L   
2C44   B4                     OR   H   
2C45   CA A8 2C               JP   Z,expectM_0_2770S50   
2C48   CD BE 0B               CALL   printStr   
2C4B   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2C61   CD BE 0B               CALL   printStr   
2C64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C73   21 05 00               LD   hl,5   
2C76   E5                     PUSH   hl   
2C77   CD 85 0C               CALL   run   
2C7A   2E 00                  .CSTR   "."   
2C7C   CD BE 0B               CALL   printStr   
2C7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C8C   E1                     POP   hl   
2C8D   E5                     PUSH   hl   
2C8E   E5                     PUSH   hl   
2C8F   CD 85 0C               CALL   run   
2C92   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2CA6   76                     HALT      
2CA7   00                     .CSTR      
2CA8                EXPECTM_0_2770S50:      
2CA8   E1                     POP   HL   
2CA9                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2CA9   31 80 45               LD   SP,STACK   
2CAC   CD C5 0B               CALL   init   
2CAF   CD 7C 44               CALL   execStr   
2CB2   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2CC3                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2CC3   E1                     POP   HL   
2CC4   E5                     PUSH   HL   
2CC5   11 01 00               LD   DE,1   
2CC8   B7                     OR   A   
2CC9   ED 52                  SBC   HL,DE   
2CCB   7D                     LD   A,L   
2CCC   B4                     OR   H   
2CCD   CA 31 2D               JP   Z,expectM_0_2771S50   
2CD0   CD BE 0B               CALL   printStr   
2CD3   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2CEA   CD BE 0B               CALL   printStr   
2CED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CFC   21 01 00               LD   hl,1   
2CFF   E5                     PUSH   hl   
2D00   CD 85 0C               CALL   run   
2D03   2E 00                  .CSTR   "."   
2D05   CD BE 0B               CALL   printStr   
2D08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D15   E1                     POP   hl   
2D16   E5                     PUSH   hl   
2D17   E5                     PUSH   hl   
2D18   CD 85 0C               CALL   run   
2D1B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2D2F   76                     HALT      
2D30   00                     .CSTR      
2D31                EXPECTM_0_2771S50:      
2D31   E1                     POP   HL   
2D32                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2D32   31 80 45               LD   SP,STACK   
2D35   CD C5 0B               CALL   init   
2D38   CD 7C 44               CALL   execStr   
2D3B   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
2D4F                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
2D4F   E1                     POP   HL   
2D50   E5                     PUSH   HL   
2D51   11 07 00               LD   DE,7   
2D54   B7                     OR   A   
2D55   ED 52                  SBC   HL,DE   
2D57   7D                     LD   A,L   
2D58   B4                     OR   H   
2D59   CA C0 2D               JP   Z,expectM_0_2772S50   
2D5C   CD BE 0B               CALL   printStr   
2D5F   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
2D79   CD BE 0B               CALL   printStr   
2D7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D8B   21 07 00               LD   hl,7   
2D8E   E5                     PUSH   hl   
2D8F   CD 85 0C               CALL   run   
2D92   2E 00                  .CSTR   "."   
2D94   CD BE 0B               CALL   printStr   
2D97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DA4   E1                     POP   hl   
2DA5   E5                     PUSH   hl   
2DA6   E5                     PUSH   hl   
2DA7   CD 85 0C               CALL   run   
2DAA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2DBE   76                     HALT      
2DBF   00                     .CSTR      
2DC0                EXPECTM_0_2772S50:      
2DC0   E1                     POP   HL   
2DC1                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
2DC1   31 80 45               LD   SP,STACK   
2DC4   CD C5 0B               CALL   init   
2DC7   CD 7C 44               CALL   execStr   
2DCA   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
2DE0                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
2DE0   E1                     POP   HL   
2DE1   E5                     PUSH   HL   
2DE2   11 06 00               LD   DE,6   
2DE5   B7                     OR   A   
2DE6   ED 52                  SBC   HL,DE   
2DE8   7D                     LD   A,L   
2DE9   B4                     OR   H   
2DEA   CA 53 2E               JP   Z,expectM_0_2773S50   
2DED   CD BE 0B               CALL   printStr   
2DF0   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
2E0C   CD BE 0B               CALL   printStr   
2E0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E1E   21 06 00               LD   hl,6   
2E21   E5                     PUSH   hl   
2E22   CD 85 0C               CALL   run   
2E25   2E 00                  .CSTR   "."   
2E27   CD BE 0B               CALL   printStr   
2E2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E37   E1                     POP   hl   
2E38   E5                     PUSH   hl   
2E39   E5                     PUSH   hl   
2E3A   CD 85 0C               CALL   run   
2E3D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2E51   76                     HALT      
2E52   00                     .CSTR      
2E53                EXPECTM_0_2773S50:      
2E53   E1                     POP   HL   
2E54                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
2E54   31 80 45               LD   SP,STACK   
2E57   CD C5 0B               CALL   init   
2E5A   CD 7C 44               CALL   execStr   
2E5D   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
2E6C                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
2E6C   E1                     POP   HL   
2E6D   E5                     PUSH   HL   
2E6E   11 02 00               LD   DE,2   
2E71   B7                     OR   A   
2E72   ED 52                  SBC   HL,DE   
2E74   7D                     LD   A,L   
2E75   B4                     OR   H   
2E76   CA D8 2E               JP   Z,expectM_0_2774S50   
2E79   CD BE 0B               CALL   printStr   
2E7C   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
2E91   CD BE 0B               CALL   printStr   
2E94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EA3   21 02 00               LD   hl,2   
2EA6   E5                     PUSH   hl   
2EA7   CD 85 0C               CALL   run   
2EAA   2E 00                  .CSTR   "."   
2EAC   CD BE 0B               CALL   printStr   
2EAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EBC   E1                     POP   hl   
2EBD   E5                     PUSH   hl   
2EBE   E5                     PUSH   hl   
2EBF   CD 85 0C               CALL   run   
2EC2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2ED6   76                     HALT      
2ED7   00                     .CSTR      
2ED8                EXPECTM_0_2774S50:      
2ED8   E1                     POP   HL   
2ED9                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
2ED9   31 80 45               LD   SP,STACK   
2EDC   CD C5 0B               CALL   init   
2EDF   CD 7C 44               CALL   execStr   
2EE2   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
2EF4                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
2EF4   E1                     POP   HL   
2EF5   E5                     PUSH   HL   
2EF6   11 01 00               LD   DE,1   
2EF9   B7                     OR   A   
2EFA   ED 52                  SBC   HL,DE   
2EFC   7D                     LD   A,L   
2EFD   B4                     OR   H   
2EFE   CA 63 2F               JP   Z,expectM_0_2775S50   
2F01   CD BE 0B               CALL   printStr   
2F04   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
2F1C   CD BE 0B               CALL   printStr   
2F1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F2E   21 01 00               LD   hl,1   
2F31   E5                     PUSH   hl   
2F32   CD 85 0C               CALL   run   
2F35   2E 00                  .CSTR   "."   
2F37   CD BE 0B               CALL   printStr   
2F3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F47   E1                     POP   hl   
2F48   E5                     PUSH   hl   
2F49   E5                     PUSH   hl   
2F4A   CD 85 0C               CALL   run   
2F4D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2F61   76                     HALT      
2F62   00                     .CSTR      
2F63                EXPECTM_0_2775S50:      
2F63   E1                     POP   HL   
2F64                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
2F64   31 80 45               LD   SP,STACK   
2F67   CD C5 0B               CALL   init   
2F6A   CD 7C 44               CALL   execStr   
2F6D   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
2F80                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
2F80   E1                     POP   HL   
2F81   E5                     PUSH   HL   
2F82   11 02 00               LD   DE,2   
2F85   B7                     OR   A   
2F86   ED 52                  SBC   HL,DE   
2F88   7D                     LD   A,L   
2F89   B4                     OR   H   
2F8A   CA F0 2F               JP   Z,expectM_0_2776S50   
2F8D   CD BE 0B               CALL   printStr   
2F90   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
2FA9   CD BE 0B               CALL   printStr   
2FAC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FBB   21 02 00               LD   hl,2   
2FBE   E5                     PUSH   hl   
2FBF   CD 85 0C               CALL   run   
2FC2   2E 00                  .CSTR   "."   
2FC4   CD BE 0B               CALL   printStr   
2FC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FD4   E1                     POP   hl   
2FD5   E5                     PUSH   hl   
2FD6   E5                     PUSH   hl   
2FD7   CD 85 0C               CALL   run   
2FDA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2FEE   76                     HALT      
2FEF   00                     .CSTR      
2FF0                EXPECTM_0_2776S50:      
2FF0   E1                     POP   HL   
2FF1                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
2FF1   31 80 45               LD   SP,STACK   
2FF4   CD C5 0B               CALL   init   
2FF7   CD 7C 44               CALL   execStr   
2FFA   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
300E                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
300E   E1                     POP   HL   
300F   E5                     PUSH   HL   
3010   11 02 00               LD   DE,2   
3013   B7                     OR   A   
3014   ED 52                  SBC   HL,DE   
3016   7D                     LD   A,L   
3017   B4                     OR   H   
3018   CA 7F 30               JP   Z,expectM_0_2777S50   
301B   CD BE 0B               CALL   printStr   
301E   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
3038   CD BE 0B               CALL   printStr   
303B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
304A   21 02 00               LD   hl,2   
304D   E5                     PUSH   hl   
304E   CD 85 0C               CALL   run   
3051   2E 00                  .CSTR   "."   
3053   CD BE 0B               CALL   printStr   
3056   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3063   E1                     POP   hl   
3064   E5                     PUSH   hl   
3065   E5                     PUSH   hl   
3066   CD 85 0C               CALL   run   
3069   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
307D   76                     HALT      
307E   00                     .CSTR      
307F                EXPECTM_0_2777S50:      
307F   E1                     POP   HL   
3080                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
3080   31 80 45               LD   SP,STACK   
3083   CD C5 0B               CALL   init   
3086   CD 7C 44               CALL   execStr   
3089   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
309C                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
309C   E1                     POP   HL   
309D   E5                     PUSH   HL   
309E   11 02 00               LD   DE,2   
30A1   B7                     OR   A   
30A2   ED 52                  SBC   HL,DE   
30A4   7D                     LD   A,L   
30A5   B4                     OR   H   
30A6   CA 0C 31               JP   Z,expectM_0_2778S50   
30A9   CD BE 0B               CALL   printStr   
30AC   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
30C5   CD BE 0B               CALL   printStr   
30C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30D7   21 02 00               LD   hl,2   
30DA   E5                     PUSH   hl   
30DB   CD 85 0C               CALL   run   
30DE   2E 00                  .CSTR   "."   
30E0   CD BE 0B               CALL   printStr   
30E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30F0   E1                     POP   hl   
30F1   E5                     PUSH   hl   
30F2   E5                     PUSH   hl   
30F3   CD 85 0C               CALL   run   
30F6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
310A   76                     HALT      
310B   00                     .CSTR      
310C                EXPECTM_0_2778S50:      
310C   E1                     POP   HL   
310D                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
310D   31 80 45               LD   SP,STACK   
3110   CD C5 0B               CALL   init   
3113   CD 7C 44               CALL   execStr   
3116   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
3130                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
3130   E1                     POP   HL   
3131   E5                     PUSH   HL   
3132   11 05 00               LD   DE,5   
3135   B7                     OR   A   
3136   ED 52                  SBC   HL,DE   
3138   7D                     LD   A,L   
3139   B4                     OR   H   
313A   CA A7 31               JP   Z,expectM_0_2779S50   
313D   CD BE 0B               CALL   printStr   
3140   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
3160   CD BE 0B               CALL   printStr   
3163   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3172   21 05 00               LD   hl,5   
3175   E5                     PUSH   hl   
3176   CD 85 0C               CALL   run   
3179   2E 00                  .CSTR   "."   
317B   CD BE 0B               CALL   printStr   
317E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
318B   E1                     POP   hl   
318C   E5                     PUSH   hl   
318D   E5                     PUSH   hl   
318E   CD 85 0C               CALL   run   
3191   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
31A5   76                     HALT      
31A6   00                     .CSTR      
31A7                EXPECTM_0_2779S50:      
31A7   E1                     POP   HL   
31A8                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
31A8   31 80 45               LD   SP,STACK   
31AB   CD C5 0B               CALL   init   
31AE   CD 7C 44               CALL   execStr   
31B1   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
31C2                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
31C2   E1                     POP   HL   
31C3   E5                     PUSH   HL   
31C4   11 02 00               LD   DE,2   
31C7   B7                     OR   A   
31C8   ED 52                  SBC   HL,DE   
31CA   7D                     LD   A,L   
31CB   B4                     OR   H   
31CC   CA 30 32               JP   Z,expectM_0_2780S50   
31CF   CD BE 0B               CALL   printStr   
31D2   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
31E9   CD BE 0B               CALL   printStr   
31EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31FB   21 02 00               LD   hl,2   
31FE   E5                     PUSH   hl   
31FF   CD 85 0C               CALL   run   
3202   2E 00                  .CSTR   "."   
3204   CD BE 0B               CALL   printStr   
3207   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3214   E1                     POP   hl   
3215   E5                     PUSH   hl   
3216   E5                     PUSH   hl   
3217   CD 85 0C               CALL   run   
321A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
322E   76                     HALT      
322F   00                     .CSTR      
3230                EXPECTM_0_2780S50:      
3230   E1                     POP   HL   
3231                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
3231   31 80 45               LD   SP,STACK   
3234   CD C5 0B               CALL   init   
3237   CD 7C 44               CALL   execStr   
323A   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
3251                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
3251   E1                     POP   HL   
3252   E5                     PUSH   HL   
3253   11 64 00               LD   DE,100   
3256   B7                     OR   A   
3257   ED 52                  SBC   HL,DE   
3259   7D                     LD   A,L   
325A   B4                     OR   H   
325B   CA C5 32               JP   Z,expectM_0_2781S50   
325E   CD BE 0B               CALL   printStr   
3261   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
327E   CD BE 0B               CALL   printStr   
3281   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3290   21 64 00               LD   hl,100   
3293   E5                     PUSH   hl   
3294   CD 85 0C               CALL   run   
3297   2E 00                  .CSTR   "."   
3299   CD BE 0B               CALL   printStr   
329C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32A9   E1                     POP   hl   
32AA   E5                     PUSH   hl   
32AB   E5                     PUSH   hl   
32AC   CD 85 0C               CALL   run   
32AF   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
32C3   76                     HALT      
32C4   00                     .CSTR      
32C5                EXPECTM_0_2781S50:      
32C5   E1                     POP   HL   
32C6                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
32C6   31 80 45               LD   SP,STACK   
32C9   CD C5 0B               CALL   init   
32CC   CD 7C 44               CALL   execStr   
32CF   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
32E7                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
32E7   E1                     POP   HL   
32E8   E5                     PUSH   HL   
32E9   11 01 00               LD   DE,1   
32EC   B7                     OR   A   
32ED   ED 52                  SBC   HL,DE   
32EF   7D                     LD   A,L   
32F0   B4                     OR   H   
32F1   CA 5C 33               JP   Z,expectM_0_2782S50   
32F4   CD BE 0B               CALL   printStr   
32F7   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
3315   CD BE 0B               CALL   printStr   
3318   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3327   21 01 00               LD   hl,1   
332A   E5                     PUSH   hl   
332B   CD 85 0C               CALL   run   
332E   2E 00                  .CSTR   "."   
3330   CD BE 0B               CALL   printStr   
3333   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3340   E1                     POP   hl   
3341   E5                     PUSH   hl   
3342   E5                     PUSH   hl   
3343   CD 85 0C               CALL   run   
3346   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
335A   76                     HALT      
335B   00                     .CSTR      
335C                EXPECTM_0_2782S50:      
335C   E1                     POP   HL   
335D                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
335D   31 80 45               LD   SP,STACK   
3360   CD C5 0B               CALL   init   
3363   CD 7C 44               CALL   execStr   
3366   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
337F                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
337F   E1                     POP   HL   
3380   E5                     PUSH   HL   
3381   11 02 00               LD   DE,2   
3384   B7                     OR   A   
3385   ED 52                  SBC   HL,DE   
3387   7D                     LD   A,L   
3388   B4                     OR   H   
3389   CA F5 33               JP   Z,expectM_0_2783S50   
338C   CD BE 0B               CALL   printStr   
338F   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
33AE   CD BE 0B               CALL   printStr   
33B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33C0   21 02 00               LD   hl,2   
33C3   E5                     PUSH   hl   
33C4   CD 85 0C               CALL   run   
33C7   2E 00                  .CSTR   "."   
33C9   CD BE 0B               CALL   printStr   
33CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33D9   E1                     POP   hl   
33DA   E5                     PUSH   hl   
33DB   E5                     PUSH   hl   
33DC   CD 85 0C               CALL   run   
33DF   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
33F3   76                     HALT      
33F4   00                     .CSTR      
33F5                EXPECTM_0_2783S50:      
33F5   E1                     POP   HL   
33F6                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
33F6   31 80 45               LD   SP,STACK   
33F9   CD C5 0B               CALL   init   
33FC   CD 7C 44               CALL   execStr   
33FF   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
341E                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
341E   E1                     POP   HL   
341F   E5                     PUSH   HL   
3420   11 0B 00               LD   DE,11   
3423   B7                     OR   A   
3424   ED 52                  SBC   HL,DE   
3426   7D                     LD   A,L   
3427   B4                     OR   H   
3428   CA 9A 34               JP   Z,expectM_0_2784S50   
342B   CD BE 0B               CALL   printStr   
342E   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
3453   CD BE 0B               CALL   printStr   
3456   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3465   21 0B 00               LD   hl,11   
3468   E5                     PUSH   hl   
3469   CD 85 0C               CALL   run   
346C   2E 00                  .CSTR   "."   
346E   CD BE 0B               CALL   printStr   
3471   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
347E   E1                     POP   hl   
347F   E5                     PUSH   hl   
3480   E5                     PUSH   hl   
3481   CD 85 0C               CALL   run   
3484   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3498   76                     HALT      
3499   00                     .CSTR      
349A                EXPECTM_0_2784S50:      
349A   E1                     POP   HL   
349B                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
349B   31 80 45               LD   SP,STACK   
349E   CD C5 0B               CALL   init   
34A1   CD 7C 44               CALL   execStr   
34A4   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
34C3                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
34C3   E1                     POP   HL   
34C4   E5                     PUSH   HL   
34C5   11 15 00               LD   DE,21   
34C8   B7                     OR   A   
34C9   ED 52                  SBC   HL,DE   
34CB   7D                     LD   A,L   
34CC   B4                     OR   H   
34CD   CA 3F 35               JP   Z,expectM_0_2785S50   
34D0   CD BE 0B               CALL   printStr   
34D3   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
34F8   CD BE 0B               CALL   printStr   
34FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
350A   21 15 00               LD   hl,21   
350D   E5                     PUSH   hl   
350E   CD 85 0C               CALL   run   
3511   2E 00                  .CSTR   "."   
3513   CD BE 0B               CALL   printStr   
3516   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3523   E1                     POP   hl   
3524   E5                     PUSH   hl   
3525   E5                     PUSH   hl   
3526   CD 85 0C               CALL   run   
3529   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
353D   76                     HALT      
353E   00                     .CSTR      
353F                EXPECTM_0_2785S50:      
353F   E1                     POP   HL   
3540                          ;*Macro unroll:  test "[10 20 30] 1%", 20
3540   31 80 45               LD   SP,STACK   
3543   CD C5 0B               CALL   init   
3546   CD 7C 44               CALL   execStr   
3549   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3557                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3557   E1                     POP   HL   
3558   E5                     PUSH   HL   
3559   11 14 00               LD   DE,20   
355C   B7                     OR   A   
355D   ED 52                  SBC   HL,DE   
355F   7D                     LD   A,L   
3560   B4                     OR   H   
3561   CA C2 35               JP   Z,expectM_0_2786S50   
3564   CD BE 0B               CALL   printStr   
3567   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
357B   CD BE 0B               CALL   printStr   
357E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
358D   21 14 00               LD   hl,20   
3590   E5                     PUSH   hl   
3591   CD 85 0C               CALL   run   
3594   2E 00                  .CSTR   "."   
3596   CD BE 0B               CALL   printStr   
3599   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35A6   E1                     POP   hl   
35A7   E5                     PUSH   hl   
35A8   E5                     PUSH   hl   
35A9   CD 85 0C               CALL   run   
35AC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
35C0   76                     HALT      
35C1   00                     .CSTR      
35C2                EXPECTM_0_2786S50:      
35C2   E1                     POP   HL   
35C3                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
35C3   31 80 45               LD   SP,STACK   
35C6   CD C5 0B               CALL   init   
35C9   CD 7C 44               CALL   execStr   
35CC   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "[10 20 30 40] /s"   
35DD                          ;*Macro unroll:  expect "[10 20 30 40] /s",4
35DD   E1                     POP   HL   
35DE   E5                     PUSH   HL   
35DF   11 04 00               LD   DE,4   
35E2   B7                     OR   A   
35E3   ED 52                  SBC   HL,DE   
35E5   7D                     LD   A,L   
35E6   B4                     OR   H   
35E7   CA 4B 36               JP   Z,expectM_0_2787S50   
35EA   CD BE 0B               CALL   printStr   
35ED   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3604   CD BE 0B               CALL   printStr   
3607   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3616   21 04 00               LD   hl,4   
3619   E5                     PUSH   hl   
361A   CD 85 0C               CALL   run   
361D   2E 00                  .CSTR   "."   
361F   CD BE 0B               CALL   printStr   
3622   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
362F   E1                     POP   hl   
3630   E5                     PUSH   hl   
3631   E5                     PUSH   hl   
3632   CD 85 0C               CALL   run   
3635   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3649   76                     HALT      
364A   00                     .CSTR      
364B                EXPECTM_0_2787S50:      
364B   E1                     POP   HL   
364C                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
364C   31 80 45               LD   SP,STACK   
364F   CD C5 0B               CALL   init   
3652   CD 7C 44               CALL   execStr   
3655   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
3663                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
3663   E1                     POP   HL   
3664   E5                     PUSH   HL   
3665   11 02 00               LD   DE,2   
3668   B7                     OR   A   
3669   ED 52                  SBC   HL,DE   
366B   7D                     LD   A,L   
366C   B4                     OR   H   
366D   CA CE 36               JP   Z,expectM_0_2788S50   
3670   CD BE 0B               CALL   printStr   
3673   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3687   CD BE 0B               CALL   printStr   
368A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3699   21 02 00               LD   hl,2   
369C   E5                     PUSH   hl   
369D   CD 85 0C               CALL   run   
36A0   2E 00                  .CSTR   "."   
36A2   CD BE 0B               CALL   printStr   
36A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36B2   E1                     POP   hl   
36B3   E5                     PUSH   hl   
36B4   E5                     PUSH   hl   
36B5   CD 85 0C               CALL   run   
36B8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
36CC   76                     HALT      
36CD   00                     .CSTR      
36CE                EXPECTM_0_2788S50:      
36CE   E1                     POP   HL   
36CF                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
36CF   31 80 45               LD   SP,STACK   
36D2   CD C5 0B               CALL   init   
36D5   CD 7C 44               CALL   execStr   
36D8   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
36EC                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
36EC   E1                     POP   HL   
36ED   E5                     PUSH   HL   
36EE   11 42 00               LD   DE,66   
36F1   B7                     OR   A   
36F2   ED 52                  SBC   HL,DE   
36F4   7D                     LD   A,L   
36F5   B4                     OR   H   
36F6   CA 5D 37               JP   Z,expectM_0_2789S50   
36F9   CD BE 0B               CALL   printStr   
36FC   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
3716   CD BE 0B               CALL   printStr   
3719   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3728   21 42 00               LD   hl,66   
372B   E5                     PUSH   hl   
372C   CD 85 0C               CALL   run   
372F   2E 00                  .CSTR   "."   
3731   CD BE 0B               CALL   printStr   
3734   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3741   E1                     POP   hl   
3742   E5                     PUSH   hl   
3743   E5                     PUSH   hl   
3744   CD 85 0C               CALL   run   
3747   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
375B   76                     HALT      
375C   00                     .CSTR      
375D                EXPECTM_0_2789S50:      
375D   E1                     POP   HL   
375E                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
375E   31 80 45               LD   SP,STACK   
3761   CD C5 0B               CALL   init   
3764   CD 7C 44               CALL   execStr   
3767   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
377B                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
377B   E1                     POP   HL   
377C   E5                     PUSH   HL   
377D   11 0A 00               LD   DE,10   
3780   B7                     OR   A   
3781   ED 52                  SBC   HL,DE   
3783   7D                     LD   A,L   
3784   B4                     OR   H   
3785   CA EC 37               JP   Z,expectM_0_2790S50   
3788   CD BE 0B               CALL   printStr   
378B   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
37A5   CD BE 0B               CALL   printStr   
37A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37B7   21 0A 00               LD   hl,10   
37BA   E5                     PUSH   hl   
37BB   CD 85 0C               CALL   run   
37BE   2E 00                  .CSTR   "."   
37C0   CD BE 0B               CALL   printStr   
37C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37D0   E1                     POP   hl   
37D1   E5                     PUSH   hl   
37D2   E5                     PUSH   hl   
37D3   CD 85 0C               CALL   run   
37D6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
37EA   76                     HALT      
37EB   00                     .CSTR      
37EC                EXPECTM_0_2790S50:      
37EC   E1                     POP   HL   
37ED                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
37ED   31 80 45               LD   SP,STACK   
37F0   CD C5 0B               CALL   init   
37F3   CD 7C 44               CALL   execStr   
37F6   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
3812                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
3812   E1                     POP   HL   
3813   E5                     PUSH   HL   
3814   11 0A 00               LD   DE,10   
3817   B7                     OR   A   
3818   ED 52                  SBC   HL,DE   
381A   7D                     LD   A,L   
381B   B4                     OR   H   
381C   CA 8B 38               JP   Z,expectM_0_2791S50   
381F   CD BE 0B               CALL   printStr   
3822   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
3844   CD BE 0B               CALL   printStr   
3847   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3856   21 0A 00               LD   hl,10   
3859   E5                     PUSH   hl   
385A   CD 85 0C               CALL   run   
385D   2E 00                  .CSTR   "."   
385F   CD BE 0B               CALL   printStr   
3862   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
386F   E1                     POP   hl   
3870   E5                     PUSH   hl   
3871   E5                     PUSH   hl   
3872   CD 85 0C               CALL   run   
3875   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3889   76                     HALT      
388A   00                     .CSTR      
388B                EXPECTM_0_2791S50:      
388B   E1                     POP   HL   
388C                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
388C   31 80 45               LD   SP,STACK   
388F   CD C5 0B               CALL   init   
3892   CD 7C 44               CALL   execStr   
3895   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
38B5                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
38B5   E1                     POP   HL   
38B6   E5                     PUSH   HL   
38B7   11 0A 00               LD   DE,10   
38BA   B7                     OR   A   
38BB   ED 52                  SBC   HL,DE   
38BD   7D                     LD   A,L   
38BE   B4                     OR   H   
38BF   CA 32 39               JP   Z,expectM_0_2792S50   
38C2   CD BE 0B               CALL   printStr   
38C5   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
38EB   CD BE 0B               CALL   printStr   
38EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38FD   21 0A 00               LD   hl,10   
3900   E5                     PUSH   hl   
3901   CD 85 0C               CALL   run   
3904   2E 00                  .CSTR   "."   
3906   CD BE 0B               CALL   printStr   
3909   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3916   E1                     POP   hl   
3917   E5                     PUSH   hl   
3918   E5                     PUSH   hl   
3919   CD 85 0C               CALL   run   
391C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3930   76                     HALT      
3931   00                     .CSTR      
3932                EXPECTM_0_2792S50:      
3932   E1                     POP   HL   
3933                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
3933   31 80 45               LD   SP,STACK   
3936   CD C5 0B               CALL   init   
3939   CD 7C 44               CALL   execStr   
393C   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
395C                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
395C   E1                     POP   HL   
395D   E5                     PUSH   HL   
395E   11 14 00               LD   DE,20   
3961   B7                     OR   A   
3962   ED 52                  SBC   HL,DE   
3964   7D                     LD   A,L   
3965   B4                     OR   H   
3966   CA D9 39               JP   Z,expectM_0_2793S50   
3969   CD BE 0B               CALL   printStr   
396C   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3992   CD BE 0B               CALL   printStr   
3995   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39A4   21 14 00               LD   hl,20   
39A7   E5                     PUSH   hl   
39A8   CD 85 0C               CALL   run   
39AB   2E 00                  .CSTR   "."   
39AD   CD BE 0B               CALL   printStr   
39B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39BD   E1                     POP   hl   
39BE   E5                     PUSH   hl   
39BF   E5                     PUSH   hl   
39C0   CD 85 0C               CALL   run   
39C3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
39D7   76                     HALT      
39D8   00                     .CSTR      
39D9                EXPECTM_0_2793S50:      
39D9   E1                     POP   HL   
39DA                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
39DA   31 80 45               LD   SP,STACK   
39DD   CD C5 0B               CALL   init   
39E0   CD 7C 44               CALL   execStr   
39E3   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
39F7                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
39F7   E1                     POP   HL   
39F8   E5                     PUSH   HL   
39F9   11 04 00               LD   DE,4   
39FC   B7                     OR   A   
39FD   ED 52                  SBC   HL,DE   
39FF   7D                     LD   A,L   
3A00   B4                     OR   H   
3A01   CA 68 3A               JP   Z,expectM_0_2794S50   
3A04   CD BE 0B               CALL   printStr   
3A07   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
3A21   CD BE 0B               CALL   printStr   
3A24   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A33   21 04 00               LD   hl,4   
3A36   E5                     PUSH   hl   
3A37   CD 85 0C               CALL   run   
3A3A   2E 00                  .CSTR   "."   
3A3C   CD BE 0B               CALL   printStr   
3A3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A4C   E1                     POP   hl   
3A4D   E5                     PUSH   hl   
3A4E   E5                     PUSH   hl   
3A4F   CD 85 0C               CALL   run   
3A52   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3A66   76                     HALT      
3A67   00                     .CSTR      
3A68                EXPECTM_0_2794S50:      
3A68   E1                     POP   HL   
3A69                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
3A69   31 80 45               LD   SP,STACK   
3A6C   CD C5 0B               CALL   init   
3A6F   CD 7C 44               CALL   execStr   
3A72   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
3A8C                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
3A8C   E1                     POP   HL   
3A8D   E5                     PUSH   HL   
3A8E   11 09 00               LD   DE,9   
3A91   B7                     OR   A   
3A92   ED 52                  SBC   HL,DE   
3A94   7D                     LD   A,L   
3A95   B4                     OR   H   
3A96   CA 03 3B               JP   Z,expectM_0_2795S50   
3A99   CD BE 0B               CALL   printStr   
3A9C   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
3ABC   CD BE 0B               CALL   printStr   
3ABF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3ACE   21 09 00               LD   hl,9   
3AD1   E5                     PUSH   hl   
3AD2   CD 85 0C               CALL   run   
3AD5   2E 00                  .CSTR   "."   
3AD7   CD BE 0B               CALL   printStr   
3ADA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AE7   E1                     POP   hl   
3AE8   E5                     PUSH   hl   
3AE9   E5                     PUSH   hl   
3AEA   CD 85 0C               CALL   run   
3AED   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3B01   76                     HALT      
3B02   00                     .CSTR      
3B03                EXPECTM_0_2795S50:      
3B03   E1                     POP   HL   
3B04                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3B04   31 80 45               LD   SP,STACK   
3B07   CD C5 0B               CALL   init   
3B0A   CD 7C 44               CALL   execStr   
3B0D   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3B25                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3B25   E1                     POP   HL   
3B26   E5                     PUSH   HL   
3B27   11 06 00               LD   DE,6   
3B2A   B7                     OR   A   
3B2B   ED 52                  SBC   HL,DE   
3B2D   7D                     LD   A,L   
3B2E   B4                     OR   H   
3B2F   CA 9A 3B               JP   Z,expectM_0_2796S50   
3B32   CD BE 0B               CALL   printStr   
3B35   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3B53   CD BE 0B               CALL   printStr   
3B56   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B65   21 06 00               LD   hl,6   
3B68   E5                     PUSH   hl   
3B69   CD 85 0C               CALL   run   
3B6C   2E 00                  .CSTR   "."   
3B6E   CD BE 0B               CALL   printStr   
3B71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B7E   E1                     POP   hl   
3B7F   E5                     PUSH   hl   
3B80   E5                     PUSH   hl   
3B81   CD 85 0C               CALL   run   
3B84   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3B98   76                     HALT      
3B99   00                     .CSTR      
3B9A                EXPECTM_0_2796S50:      
3B9A   E1                     POP   HL   
3B9B                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
3B9B   31 80 45               LD   SP,STACK   
3B9E   CD C5 0B               CALL   init   
3BA1   CD 7C 44               CALL   execStr   
3BA4   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
3BBF                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
3BBF   E1                     POP   HL   
3BC0   E5                     PUSH   HL   
3BC1   11 02 00               LD   DE,2   
3BC4   B7                     OR   A   
3BC5   ED 52                  SBC   HL,DE   
3BC7   7D                     LD   A,L   
3BC8   B4                     OR   H   
3BC9   CA 37 3C               JP   Z,expectM_0_2797S50   
3BCC   CD BE 0B               CALL   printStr   
3BCF   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
3BF0   CD BE 0B               CALL   printStr   
3BF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C02   21 02 00               LD   hl,2   
3C05   E5                     PUSH   hl   
3C06   CD 85 0C               CALL   run   
3C09   2E 00                  .CSTR   "."   
3C0B   CD BE 0B               CALL   printStr   
3C0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C1B   E1                     POP   hl   
3C1C   E5                     PUSH   hl   
3C1D   E5                     PUSH   hl   
3C1E   CD 85 0C               CALL   run   
3C21   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3C35   76                     HALT      
3C36   00                     .CSTR      
3C37                EXPECTM_0_2797S50:      
3C37   E1                     POP   HL   
3C38                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3C38   31 80 45               LD   SP,STACK   
3C3B   CD C5 0B               CALL   init   
3C3E   CD 7C 44               CALL   execStr   
3C41   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3C67                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
3C67   E1                     POP   HL   
3C68   E5                     PUSH   HL   
3C69   11 0A 00               LD   DE,10   
3C6C   B7                     OR   A   
3C6D   ED 52                  SBC   HL,DE   
3C6F   7D                     LD   A,L   
3C70   B4                     OR   H   
3C71   CA EA 3C               JP   Z,expectM_0_2798S50   
3C74   CD BE 0B               CALL   printStr   
3C77   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3CA3   CD BE 0B               CALL   printStr   
3CA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CB5   21 0A 00               LD   hl,10   
3CB8   E5                     PUSH   hl   
3CB9   CD 85 0C               CALL   run   
3CBC   2E 00                  .CSTR   "."   
3CBE   CD BE 0B               CALL   printStr   
3CC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CCE   E1                     POP   hl   
3CCF   E5                     PUSH   hl   
3CD0   E5                     PUSH   hl   
3CD1   CD 85 0C               CALL   run   
3CD4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3CE8   76                     HALT      
3CE9   00                     .CSTR      
3CEA                EXPECTM_0_2798S50:      
3CEA   E1                     POP   HL   
3CEB                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
3CEB   31 80 45               LD   SP,STACK   
3CEE   CD C5 0B               CALL   init   
3CF1   CD 7C 44               CALL   execStr   
3CF4   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
3D00                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
3D00   E1                     POP   HL   
3D01   E5                     PUSH   HL   
3D02   11 00 00               LD   DE,NUL   
3D05   B7                     OR   A   
3D06   ED 52                  SBC   HL,DE   
3D08   7D                     LD   A,L   
3D09   B4                     OR   H   
3D0A   CA 69 3D               JP   Z,expectM_0_2799S50   
3D0D   CD BE 0B               CALL   printStr   
3D10   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
3D22   CD BE 0B               CALL   printStr   
3D25   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D34   21 00 00               LD   hl,NUL   
3D37   E5                     PUSH   hl   
3D38   CD 85 0C               CALL   run   
3D3B   2E 00                  .CSTR   "."   
3D3D   CD BE 0B               CALL   printStr   
3D40   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D4D   E1                     POP   hl   
3D4E   E5                     PUSH   hl   
3D4F   E5                     PUSH   hl   
3D50   CD 85 0C               CALL   run   
3D53   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3D67   76                     HALT      
3D68   00                     .CSTR      
3D69                EXPECTM_0_2799S50:      
3D69   E1                     POP   HL   
3D6A                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
3D6A   31 80 45               LD   SP,STACK   
3D6D   CD C5 0B               CALL   init   
3D70   CD 7C 44               CALL   execStr   
3D73   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
3D7F                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
3D7F   E1                     POP   HL   
3D80   E5                     PUSH   HL   
3D81   11 00 00               LD   DE,NUL   
3D84   B7                     OR   A   
3D85   ED 52                  SBC   HL,DE   
3D87   7D                     LD   A,L   
3D88   B4                     OR   H   
3D89   CA E8 3D               JP   Z,expectM_0_2800S50   
3D8C   CD BE 0B               CALL   printStr   
3D8F   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
3DA1   CD BE 0B               CALL   printStr   
3DA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DB3   21 00 00               LD   hl,NUL   
3DB6   E5                     PUSH   hl   
3DB7   CD 85 0C               CALL   run   
3DBA   2E 00                  .CSTR   "."   
3DBC   CD BE 0B               CALL   printStr   
3DBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DCC   E1                     POP   hl   
3DCD   E5                     PUSH   hl   
3DCE   E5                     PUSH   hl   
3DCF   CD 85 0C               CALL   run   
3DD2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3DE6   76                     HALT      
3DE7   00                     .CSTR      
3DE8                EXPECTM_0_2800S50:      
3DE8   E1                     POP   HL   
3DE9                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
3DE9   31 80 45               LD   SP,STACK   
3DEC   CD C5 0B               CALL   init   
3DEF   CD 7C 44               CALL   execStr   
3DF2   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
3DFE                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
3DFE   E1                     POP   HL   
3DFF   E5                     PUSH   HL   
3E00   11 00 00               LD   DE,NUL   
3E03   B7                     OR   A   
3E04   ED 52                  SBC   HL,DE   
3E06   7D                     LD   A,L   
3E07   B4                     OR   H   
3E08   CA 67 3E               JP   Z,expectM_0_2801S50   
3E0B   CD BE 0B               CALL   printStr   
3E0E   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
3E20   CD BE 0B               CALL   printStr   
3E23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E32   21 00 00               LD   hl,NUL   
3E35   E5                     PUSH   hl   
3E36   CD 85 0C               CALL   run   
3E39   2E 00                  .CSTR   "."   
3E3B   CD BE 0B               CALL   printStr   
3E3E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E4B   E1                     POP   hl   
3E4C   E5                     PUSH   hl   
3E4D   E5                     PUSH   hl   
3E4E   CD 85 0C               CALL   run   
3E51   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3E65   76                     HALT      
3E66   00                     .CSTR      
3E67                EXPECTM_0_2801S50:      
3E67   E1                     POP   HL   
3E68                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
3E68   31 80 45               LD   SP,STACK   
3E6B   CD C5 0B               CALL   init   
3E6E   CD 7C 44               CALL   execStr   
3E71   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
3E7D                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
3E7D   E1                     POP   HL   
3E7E   E5                     PUSH   HL   
3E7F   11 00 00               LD   DE,NUL   
3E82   B7                     OR   A   
3E83   ED 52                  SBC   HL,DE   
3E85   7D                     LD   A,L   
3E86   B4                     OR   H   
3E87   CA E6 3E               JP   Z,expectM_0_2802S50   
3E8A   CD BE 0B               CALL   printStr   
3E8D   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
3E9F   CD BE 0B               CALL   printStr   
3EA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EB1   21 00 00               LD   hl,NUL   
3EB4   E5                     PUSH   hl   
3EB5   CD 85 0C               CALL   run   
3EB8   2E 00                  .CSTR   "."   
3EBA   CD BE 0B               CALL   printStr   
3EBD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3ECA   E1                     POP   hl   
3ECB   E5                     PUSH   hl   
3ECC   E5                     PUSH   hl   
3ECD   CD 85 0C               CALL   run   
3ED0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3EE4   76                     HALT      
3EE5   00                     .CSTR      
3EE6                EXPECTM_0_2802S50:      
3EE6   E1                     POP   HL   
3EE7                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
3EE7   31 80 45               LD   SP,STACK   
3EEA   CD C5 0B               CALL   init   
3EED   CD 7C 44               CALL   execStr   
3EF0   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
3EF8                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
3EF8   E1                     POP   HL   
3EF9   E5                     PUSH   HL   
3EFA   11 66 46               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3EFD   B7                     OR   A   
3EFE   ED 52                  SBC   HL,DE   
3F00   7D                     LD   A,L   
3F01   B4                     OR   H   
3F02   CA 5D 3F               JP   Z,expectM_0_2803S50   
3F05   CD BE 0B               CALL   printStr   
3F08   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
3F16   CD BE 0B               CALL   printStr   
3F19   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F28   21 66 46               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3F2B   E5                     PUSH   hl   
3F2C   CD 85 0C               CALL   run   
3F2F   2E 00                  .CSTR   "."   
3F31   CD BE 0B               CALL   printStr   
3F34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F41   E1                     POP   hl   
3F42   E5                     PUSH   hl   
3F43   E5                     PUSH   hl   
3F44   CD 85 0C               CALL   run   
3F47   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3F5B   76                     HALT      
3F5C   00                     .CSTR      
3F5D                EXPECTM_0_2803S50:      
3F5D   E1                     POP   HL   
3F5E                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
3F5E   31 80 45               LD   SP,STACK   
3F61   CD C5 0B               CALL   init   
3F64   CD 7C 44               CALL   execStr   
3F67   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
3F6F                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
3F6F   E1                     POP   HL   
3F70   E5                     PUSH   HL   
3F71   11 34 46               LD   DE,VARS + ("Z"-"A"+1)*2   
3F74   B7                     OR   A   
3F75   ED 52                  SBC   HL,DE   
3F77   7D                     LD   A,L   
3F78   B4                     OR   H   
3F79   CA D4 3F               JP   Z,expectM_0_2804S50   
3F7C   CD BE 0B               CALL   printStr   
3F7F   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
3F8D   CD BE 0B               CALL   printStr   
3F90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F9F   21 34 46               LD   hl,VARS + ("Z"-"A"+1)*2   
3FA2   E5                     PUSH   hl   
3FA3   CD 85 0C               CALL   run   
3FA6   2E 00                  .CSTR   "."   
3FA8   CD BE 0B               CALL   printStr   
3FAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FB8   E1                     POP   hl   
3FB9   E5                     PUSH   hl   
3FBA   E5                     PUSH   hl   
3FBB   CD 85 0C               CALL   run   
3FBE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3FD2   76                     HALT      
3FD3   00                     .CSTR      
3FD4                EXPECTM_0_2804S50:      
3FD4   E1                     POP   HL   
3FD5                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
3FD5   31 80 45               LD   SP,STACK   
3FD8   CD C5 0B               CALL   init   
3FDB   CD 7C 44               CALL   execStr   
3FDE   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
3FE6                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
3FE6   E1                     POP   HL   
3FE7   E5                     PUSH   HL   
3FE8   11 32 46               LD   DE,VARS + ("Z"-"A")*2   
3FEB   B7                     OR   A   
3FEC   ED 52                  SBC   HL,DE   
3FEE   7D                     LD   A,L   
3FEF   B4                     OR   H   
3FF0   CA 4B 40               JP   Z,expectM_0_2805S50   
3FF3   CD BE 0B               CALL   printStr   
3FF6   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4004   CD BE 0B               CALL   printStr   
4007   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4016   21 32 46               LD   hl,VARS + ("Z"-"A")*2   
4019   E5                     PUSH   hl   
401A   CD 85 0C               CALL   run   
401D   2E 00                  .CSTR   "."   
401F   CD BE 0B               CALL   printStr   
4022   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
402F   E1                     POP   hl   
4030   E5                     PUSH   hl   
4031   E5                     PUSH   hl   
4032   CD 85 0C               CALL   run   
4035   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4049   76                     HALT      
404A   00                     .CSTR      
404B                EXPECTM_0_2805S50:      
404B   E1                     POP   HL   
404C                          ;*Macro unroll:  test "'A' /ad", VARS
404C   31 80 45               LD   SP,STACK   
404F   CD C5 0B               CALL   init   
4052   CD 7C 44               CALL   execStr   
4055   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
405D                          ;*Macro unroll:  expect "'A' /ad",VARS
405D   E1                     POP   HL   
405E   E5                     PUSH   HL   
405F   11 00 46               LD   DE,VARS   
4062   B7                     OR   A   
4063   ED 52                  SBC   HL,DE   
4065   7D                     LD   A,L   
4066   B4                     OR   H   
4067   CA C2 40               JP   Z,expectM_0_2806S50   
406A   CD BE 0B               CALL   printStr   
406D   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
407B   CD BE 0B               CALL   printStr   
407E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
408D   21 00 46               LD   hl,VARS   
4090   E5                     PUSH   hl   
4091   CD 85 0C               CALL   run   
4094   2E 00                  .CSTR   "."   
4096   CD BE 0B               CALL   printStr   
4099   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40A6   E1                     POP   hl   
40A7   E5                     PUSH   hl   
40A8   E5                     PUSH   hl   
40A9   CD 85 0C               CALL   run   
40AC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
40C0   76                     HALT      
40C1   00                     .CSTR      
40C2                EXPECTM_0_2806S50:      
40C2   E1                     POP   HL   
40C3                          ;*Macro unroll:  test "-1 /bd/vB/c 0%", $2D
40C3   31 80 45               LD   SP,STACK   
40C6   CD C5 0B               CALL   init   
40C9   CD 7C 44               CALL   execStr   
40CC   2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "-1 /bd/vB/c 0%"   
40DB                          ;*Macro unroll:  expect "-1 /bd/vB/c 0%",$2D
40DB   E1                     POP   HL   
40DC   E5                     PUSH   HL   
40DD   11 2D 00               LD   DE,$2D   
40E0   B7                     OR   A   
40E1   ED 52                  SBC   HL,DE   
40E3   7D                     LD   A,L   
40E4   B4                     OR   H   
40E5   CA 47 41               JP   Z,expectM_0_2807S50   
40E8   CD BE 0B               CALL   printStr   
40EB   43 6F 64 65 3A 20 2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","-1 /bd/vB/c 0%"   
4100   CD BE 0B               CALL   printStr   
4103   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4112   21 2D 00               LD   hl,$2D   
4115   E5                     PUSH   hl   
4116   CD 85 0C               CALL   run   
4119   2E 00                  .CSTR   "."   
411B   CD BE 0B               CALL   printStr   
411E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
412B   E1                     POP   hl   
412C   E5                     PUSH   hl   
412D   E5                     PUSH   hl   
412E   CD 85 0C               CALL   run   
4131   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4145   76                     HALT      
4146   00                     .CSTR      
4147                EXPECTM_0_2807S50:      
4147   E1                     POP   HL   
4148                          ;*Macro unroll:  test "`A` /bs/vB/c 0%", 65
4148   31 80 45               LD   SP,STACK   
414B   CD C5 0B               CALL   init   
414E   CD 7C 44               CALL   execStr   
4151   60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "`A` /bs/vB/c 0%"   
4161                          ;*Macro unroll:  expect "`A` /bs/vB/c 0%",65
4161   E1                     POP   HL   
4162   E5                     PUSH   HL   
4163   11 41 00               LD   DE,65   
4166   B7                     OR   A   
4167   ED 52                  SBC   HL,DE   
4169   7D                     LD   A,L   
416A   B4                     OR   H   
416B   CA CE 41               JP   Z,expectM_0_2808S50   
416E   CD BE 0B               CALL   printStr   
4171   43 6F 64 65 3A 20 60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","`A` /bs/vB/c 0%"   
4187   CD BE 0B               CALL   printStr   
418A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4199   21 41 00               LD   hl,65   
419C   E5                     PUSH   hl   
419D   CD 85 0C               CALL   run   
41A0   2E 00                  .CSTR   "."   
41A2   CD BE 0B               CALL   printStr   
41A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41B2   E1                     POP   hl   
41B3   E5                     PUSH   hl   
41B4   E5                     PUSH   hl   
41B5   CD 85 0C               CALL   run   
41B8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
41CC   76                     HALT      
41CD   00                     .CSTR      
41CE                EXPECTM_0_2808S50:      
41CE   E1                     POP   HL   
41CF                          ;*Macro unroll:  test "123 /bd", 3
41CF   31 80 45               LD   SP,STACK   
41D2   CD C5 0B               CALL   init   
41D5   CD 7C 44               CALL   execStr   
41D8   31 32 33 20 2F 62 64 00 .CSTR   "123 /bd"   
41E0                          ;*Macro unroll:  expect "123 /bd",3
41E0   E1                     POP   HL   
41E1   E5                     PUSH   HL   
41E2   11 03 00               LD   DE,3   
41E5   B7                     OR   A   
41E6   ED 52                  SBC   HL,DE   
41E8   7D                     LD   A,L   
41E9   B4                     OR   H   
41EA   CA 45 42               JP   Z,expectM_0_2809S50   
41ED   CD BE 0B               CALL   printStr   
41F0   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 00 .CSTR   "Code: ","123 /bd"   
41FE   CD BE 0B               CALL   printStr   
4201   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4210   21 03 00               LD   hl,3   
4213   E5                     PUSH   hl   
4214   CD 85 0C               CALL   run   
4217   2E 00                  .CSTR   "."   
4219   CD BE 0B               CALL   printStr   
421C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4229   E1                     POP   hl   
422A   E5                     PUSH   hl   
422B   E5                     PUSH   hl   
422C   CD 85 0C               CALL   run   
422F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4243   76                     HALT      
4244   00                     .CSTR      
4245                EXPECTM_0_2809S50:      
4245   E1                     POP   HL   
4246                          ;*Macro unroll:  test "123 /bd/vB/c 1%", $32
4246   31 80 45               LD   SP,STACK   
4249   CD C5 0B               CALL   init   
424C   CD 7C 44               CALL   execStr   
424F   31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "123 /bd/vB/c 1%"   
425F                          ;*Macro unroll:  expect "123 /bd/vB/c 1%",$32
425F   E1                     POP   HL   
4260   E5                     PUSH   HL   
4261   11 32 00               LD   DE,$32   
4264   B7                     OR   A   
4265   ED 52                  SBC   HL,DE   
4267   7D                     LD   A,L   
4268   B4                     OR   H   
4269   CA CC 42               JP   Z,expectM_0_2810S50   
426C   CD BE 0B               CALL   printStr   
426F   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "Code: ","123 /bd/vB/c 1%"   
4285   CD BE 0B               CALL   printStr   
4288   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4297   21 32 00               LD   hl,$32   
429A   E5                     PUSH   hl   
429B   CD 85 0C               CALL   run   
429E   2E 00                  .CSTR   "."   
42A0   CD BE 0B               CALL   printStr   
42A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42B0   E1                     POP   hl   
42B1   E5                     PUSH   hl   
42B2   E5                     PUSH   hl   
42B3   CD 85 0C               CALL   run   
42B6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
42CA   76                     HALT      
42CB   00                     .CSTR      
42CC                EXPECTM_0_2810S50:      
42CC   E1                     POP   HL   
42CD                          ;*Macro unroll:  test "123/bd ` x `/bs 456/bd + + ", 9
42CD   31 80 45               LD   SP,STACK   
42D0   CD C5 0B               CALL   init   
42D3   CD 7C 44               CALL   execStr   
42D6   31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "123/bd ` x `/bs 456/bd + + "   
42F2                          ;*Macro unroll:  expect "123/bd ` x `/bs 456/bd + + ",9
42F2   E1                     POP   HL   
42F3   E5                     PUSH   HL   
42F4   11 09 00               LD   DE,9   
42F7   B7                     OR   A   
42F8   ED 52                  SBC   HL,DE   
42FA   7D                     LD   A,L   
42FB   B4                     OR   H   
42FC   CA 6B 43               JP   Z,expectM_0_2811S50   
42FF   CD BE 0B               CALL   printStr   
4302   43 6F 64 65 3A 20 31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "Code: ","123/bd ` x `/bs 456/bd + + "   
4324   CD BE 0B               CALL   printStr   
4327   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4336   21 09 00               LD   hl,9   
4339   E5                     PUSH   hl   
433A   CD 85 0C               CALL   run   
433D   2E 00                  .CSTR   "."   
433F   CD BE 0B               CALL   printStr   
4342   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
434F   E1                     POP   hl   
4350   E5                     PUSH   hl   
4351   E5                     PUSH   hl   
4352   CD 85 0C               CALL   run   
4355   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4369   76                     HALT      
436A   00                     .CSTR      
436B                EXPECTM_0_2811S50:      
436B   E1                     POP   HL   
436C                          ;*Macro unroll:  test "#4321 /bh", 4
436C   31 80 45               LD   SP,STACK   
436F   CD C5 0B               CALL   init   
4372   CD 7C 44               CALL   execStr   
4375   23 34 33 32 31 20 2F 62 68 00 .CSTR   "#4321 /bh"   
437F                          ;*Macro unroll:  expect "#4321 /bh",4
437F   E1                     POP   HL   
4380   E5                     PUSH   HL   
4381   11 04 00               LD   DE,4   
4384   B7                     OR   A   
4385   ED 52                  SBC   HL,DE   
4387   7D                     LD   A,L   
4388   B4                     OR   H   
4389   CA E6 43               JP   Z,expectM_0_2812S50   
438C   CD BE 0B               CALL   printStr   
438F   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 00 .CSTR   "Code: ","#4321 /bh"   
439F   CD BE 0B               CALL   printStr   
43A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43B1   21 04 00               LD   hl,4   
43B4   E5                     PUSH   hl   
43B5   CD 85 0C               CALL   run   
43B8   2E 00                  .CSTR   "."   
43BA   CD BE 0B               CALL   printStr   
43BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43CA   E1                     POP   hl   
43CB   E5                     PUSH   hl   
43CC   E5                     PUSH   hl   
43CD   CD 85 0C               CALL   run   
43D0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
43E4   76                     HALT      
43E5   00                     .CSTR      
43E6                EXPECTM_0_2812S50:      
43E6   E1                     POP   HL   
43E7                          ;*Macro unroll:  test "#4321 /bh/vB/c 0%", $34
43E7   31 80 45               LD   SP,STACK   
43EA   CD C5 0B               CALL   init   
43ED   CD 7C 44               CALL   execStr   
43F0   23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "#4321 /bh/vB/c 0%"   
4402                          ;*Macro unroll:  expect "#4321 /bh/vB/c 0%",$34
4402   E1                     POP   HL   
4403   E5                     PUSH   HL   
4404   11 34 00               LD   DE,$34   
4407   B7                     OR   A   
4408   ED 52                  SBC   HL,DE   
440A   7D                     LD   A,L   
440B   B4                     OR   H   
440C   CA 71 44               JP   Z,expectM_0_2813S50   
440F   CD BE 0B               CALL   printStr   
4412   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","#4321 /bh/vB/c 0%"   
442A   CD BE 0B               CALL   printStr   
442D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
443C   21 34 00               LD   hl,$34   
443F   E5                     PUSH   hl   
4440   CD 85 0C               CALL   run   
4443   2E 00                  .CSTR   "."   
4445   CD BE 0B               CALL   printStr   
4448   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4455   E1                     POP   hl   
4456   E5                     PUSH   hl   
4457   E5                     PUSH   hl   
4458   CD 85 0C               CALL   run   
445B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
446F   76                     HALT      
4470   00                     .CSTR      
4471                EXPECTM_0_2813S50:      
4471   E1                     POP   HL   
4472                             ; 
4472   CD BE 0B               CALL   printStr   
4475   44 6F 6E 65 21 00      .CSTR   "Done!"   
447B   76                     HALT      
447C                          ALIGN   2   
447C                             ; printer:
447C                             ;     pop hl
447C                             ;     call prtdec
447C                             ;     jp (ix)
447C                             ; executes a null teminated string (null executes exit_)
447C                             ; the string should be immedaitely following the call
447C                EXECSTR:      ; create a root stack frame
447C   C1                     POP   bc   ; bc = code*
447D   0B                     DEC   bc   ; dec to prepare for next routine
447E   11 00 00               LD   de,0   
4481   D5                     PUSH   de   ; push fake IP
4482   D5                     PUSH   de   ; push null arg_list*
4483   D5                     PUSH   de   ; push null first_arg*
4484   D5                     PUSH   de   ; push fake BP
4485   DD E9                  JP   (ix)   
4487                          ALIGN   $100   
4500                          DS   STKSIZE   
4580                STACK:       
4580                          ALIGN   $100   
4600                VARS:        
4600                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
46D0                RESTARTS:      
46D0                RST08:    DS   2   
46D2                RST10:    DS   2   
46D4                RST18:    DS   2   
46D6                RST20:    DS   2   
46D8                RST28:    DS   2   
46DA                RST30:    DS   2   ; 
46DC                BAUD:     DS   2   ; 
46DE                INTVEC:   DS   2   ; 
46E0                NMIVEC:   DS   2   ; 
46E2                GETCVEC:   DS   2   ; 
46E4                PUTCVEC:   DS   2   ; 
46E6                SYSVARS:      
46E6                             ; initialised sys variables (preserved)
46E6                VDATAWIDTH:   DS   2   ; 
46E8                VNUMBASE:   DS   2   ; 
46EA                VTIBPTR:   DS   2   ; 
46EC                VBUFPTR:   DS   2   ; 
46EE                VNEXT:    DS   2   ; 
46F0                VHEAPPTR:   DS   2   ; 
46F2                             ; uninitialised sys variables (preserved)
46F2                VPOINTER:   DS   2   ; 
46F4                VREMAIN:   DS   2   ; 
46F6                VSAVEDIP:   DS   2   ; 
46F8                VSAVEDSP:   DS   2   ; 
46FA                VSAVEDBP:   DS   2   ; 
46FC                VCHECKSUM:   DS   2   ; 
46FE                             ; uninitialised sys variables (unpreserved)
46FE                VTEMP1:   DS   2   ; 
4700                VTEMP2:   DS   2   ; 
4702                VLASTDEF:   DS   2   ; 
4704                VHASHSTR:   DS   2   ; 
4706                TBPTR:    DS   2   ; reserved for tests
4708                          ALIGN   $100   
4800                TIB:      DS   TIBSIZE   
4900                BUF:      DS   BUFSIZE   
4A00                          ALIGN   $100   
4A00                PAD:      DS   $100   
4B00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 49 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0B14 DEFINED AT LINE 1779 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 30 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
STKSIZE:            0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 54 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 55 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 23 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 27 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 28 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 32 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 33 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 34 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 35 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 36 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 37 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 38 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 39 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 40 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 54 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 188 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 190 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 193 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 195 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 197 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 199 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 201 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 203 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 205 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 207 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 209 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 211 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 213 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 216 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 218 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 220 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 222 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 224 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 226 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 228 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 230 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 237 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 243 IN MAIN.asm
LT_:                036D DEFINED AT LINE 251 IN MAIN.asm
LT1:                0376 DEFINED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SLASH_:             037F DEFINED AT LINE 263 IN MAIN.asm
NOP_:               0382 DEFINED AT LINE 265 IN MAIN.asm
RPAREN_:            0384 DEFINED AT LINE 267 IN MAIN.asm
PLUS:               0387 DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                0387 DEFINED AT LINE 274 IN MAIN.asm
ADD1:               0392 DEFINED AT LINE 282 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
ADD3:               0396 DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
AT:                 0399 DEFINED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               0399 DEFINED AT LINE 294 IN MAIN.asm
AMPER:              03A3 DEFINED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03A3 DEFINED AT LINE 300 IN MAIN.asm
AND1:               03AA DEFINED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
PIPE:               03AE DEFINED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
OR:                 03AE DEFINED AT LINE 314 IN MAIN.asm
XOR:                03B7 DEFINED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
XOR1:               03B8 DEFINED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 338 IN MAIN.asm
INVERT:             03C2 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
DOLLAR:             03C7 DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                03C7 DEFINED AT LINE 344 IN MAIN.asm
ARG0:               03E5 DEFINED AT LINE 365 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
ARG0A:              03EE DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 350 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
ARG1:               03F3 DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
ARG1A:              03FB DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 375 IN MAIN.asm
LBRACK:             03FE DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         03FE DEFINED AT LINE 388 IN MAIN.asm
RBRACK:             041A DEFINED AT LINE 402 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           041A DEFINED AT LINE 403 IN MAIN.asm
ARRAYEND1:          043C DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 441 IN MAIN.asm
ARRAYEND2:          044C DEFINED AT LINE 435 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
ARRINDEX:           0472 DEFINED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARRINDEX0:          047A DEFINED AT LINE 470 IN MAIN.asm
ARRINDEX1:          047B DEFINED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
ARRINDEX2:          0487 DEFINED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
ASSIGN:             048A DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
ASSIGN0:            048C DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
ASSIGNX:            048D DEFINED AT LINE 491 IN MAIN.asm
ASSIGN1:            0499 DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
COLON:              049B DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
ARGLIST:            049B DEFINED AT LINE 507 IN MAIN.asm
ARGLIST1:           04A5 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
ARGLIST1A:          04AD DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
ARGLIST2:           04B5 DEFINED AT LINE 525 IN MAIN.asm
ARGLIST3:           04BD DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
ARGLIST4:           04C0 DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
ARGLIST5:           04C6 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
LBRACE:             04D2 DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKSTART:         04D2 DEFINED AT LINE 554 IN MAIN.asm
BLOCKSTART1:        04D6 DEFINED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
BLOCKSTART2:        0502 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
BLOCKSTART3:        0505 DEFINED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
BLOCKSTART4:        050D DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
BLOCKSTART5:        0510 DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCKSTART6:        0538 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
RBRACE:             053B DEFINED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
BLOCKEND:           053B DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
BLOCKEND1:          056D DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
BLOCKEND2:          0579 DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
BLOCKEND3:          058B DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
TICK:               0597 DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CHAR:               0597 DEFINED AT LINE 672 IN MAIN.asm
CHAR1:              059A DEFINED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
CHAR2:              05A6 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
CHAR3:              05A9 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
BACKSLASH:          05AC DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
COMMA:              05AE DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
DISCARD:            05AE DEFINED AT LINE 696 IN MAIN.asm
DISCARD1:           05BB DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
SLASH:              05BD DEFINED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 264 IN MAIN.asm
DIV:                05F3 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
DOT:                0604 DEFINED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
DOTARRAY:           0616 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
DOTARRAY_BLOCK:     061F DEFINED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
DOTHEX:             062A DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
DOTHEX_BLOCK:       0633 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
DOTSTR:             063E DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
DOTSTR_BLOCK:       0647 DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
DOTCHAR:            0652 DEFINED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
DOTCHAR_BLOCK:      065B DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
DOTDEC:             0666 DEFINED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
DOTDEC_BLOCK:       066F DEFINED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
DIVIDE:             067A DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
DIVIDE1:            067F DEFINED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
DIVIDE2:            068C DEFINED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
DIVIDE3:            068D DEFINED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
EQUALS:             0693 DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
LESSTHANEQ:         069B DEFINED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
LESSTHAN:           06A0 DEFINED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 262 IN MAIN.asm
LESSTHAN1:          06A5 DEFINED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
TRUE1:              06A8 DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
NULL1:              06AE DEFINED AT LINE 860 IN MAIN.asm
FALSE1:             06AE DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
CARET:              06B4 DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
GO:                 06B4 DEFINED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
GO1:                06B5 DEFINED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
GO2:                06BB DEFINED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
GOBLOCK:            06C7 DEFINED AT LINE 885 IN MAIN.asm
GOBLOCK1:           06C7 DEFINED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
GOBLOCK2:           06EC DEFINED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
GOLAMBDA:           06FA DEFINED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOLAMBDA1:          0717 DEFINED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
GOLAMBDA2:          071D DEFINED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
GOLAMBDA3:          0728 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
GOLAMBDA4:          0740 DEFINED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
GOLAMBDA5:          0744 DEFINED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
GOLAMBDA6:          0747 DEFINED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
GOLAMBDA7:          074A DEFINED AT LINE 976 IN MAIN.asm
GOLAMBDA8:          074F DEFINED AT LINE 982 IN MAIN.asm
                    > USED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
HASH:               075A DEFINED AT LINE 991 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
HEXNUM:             075A DEFINED AT LINE 992 IN MAIN.asm
HEXNUM1:            075D DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
HEXNUM2:            0765 DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
UPCASE:             0777 DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
LOWCASE:            077C DEFINED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
IDENT1:             0781 DEFINED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
QUESTION:           078E DEFINED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
IF:                 078E DEFINED AT LINE 1034 IN MAIN.asm
IFTE:               079A DEFINED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
IFTE1:              079B DEFINED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
STAR:               07A7 DEFINED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
MUL:                07A7 DEFINED AT LINE 1057 IN MAIN.asm
MUL2:               07A9 DEFINED AT LINE 1060 IN MAIN.asm
MUL3:               07B1 DEFINED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
NUM:                07C3 DEFINED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
NUM0:               07CC DEFINED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
NUM1:               07CD DEFINED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
NUM2:               07E5 DEFINED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
NUM3:               07F0 DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
UNDERSCORE:         07F3 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
REMAIN:             07F3 DEFINED AT LINE 1117 IN MAIN.asm
RPAREN:             07F9 DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
SEMICOLON:          0801 DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
SHIFTLEFT:          081D DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
SHIFTLEFT1:         0825 DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
SHIFTLEFT2:         0826 DEFINED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
SHIFTRIGHT:         082D DEFINED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SHIFTRIGHT1:        0835 DEFINED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
SHIFTRIGHT2:        0839 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
DBLQUOTE:           0840 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
STRING:             0840 DEFINED AT LINE 1189 IN MAIN.asm
STRING1:            0849 DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
STRING2:            084C DEFINED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
STRING3:            0855 DEFINED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
MINUS:              0868 DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
SUB:                0874 DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
SUB1:               087E DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
ERROR1:             0887 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
COMMENT:            088E DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
COMMAND_A:          0897 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
ABSOLUTE:           08A3 DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
ADDROF:             08B0 DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
ADDROF1:            08C4 DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
ADDROF2:            08CF DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
COMMAND_B:          08D1 DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
BUFFERARRAY:        08EC DEFINED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
BUFFERARRAY_BLOCK:  08F5 DEFINED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
BUFFERCHAR:         0926 DEFINED AT LINE 1389 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
BUFFERDEC:          0935 DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
BUFFERDEC0:         094D DEFINED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 1405 IN MAIN.asm
BUFFERDEC1:         095D DEFINED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
BUFFERDEC2:         097D DEFINED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
BUFFERDEC3:         097F DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
BUFFERDEC4:         098F DEFINED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
BUFFERDEC5:         0990 DEFINED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1459 IN MAIN.asm
BUFFERHEX:          0996 DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
BUFFERHEX1:         09B1 DEFINED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
BUFFERHEX2:         09BA DEFINED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
BREAK:              09C5 DEFINED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
BREAK1:             09CC DEFINED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
BUFFERSTRING:       09DF DEFINED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
BUFFERSTRING0:      09E6 DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
BUFFERSTRING1:      09E9 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
BUFFERXSPACES:      09FB DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
BUFFERXSPACES1:     0A02 DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
BUFFERXSPACES2:     0A06 DEFINED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1552 IN MAIN.asm
COMMAND_I:          0A0F DEFINED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
COMMAND_P:          0A1B DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
PARTIAL:            0A2D DEFINED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
PRINTCHARS:         0A4D DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
PRINTCHARS1:        0A53 DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
PRINTCHARS2:        0A55 DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
PRINTSTACK:         0A5F DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1580 IN MAIN.asm
SIZE:               0A61 DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
PRINTX:             0A6B DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
PRINTX_BLOCK:       0A74 DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
COMMAND_V:          0A96 DEFINED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
CONSTBUFSTART:      0AAB DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
CONSTHEAPSTART:     0AB0 DEFINED AT LINE 1693 IN MAIN.asm
CONSTTIBSTART:      0AB5 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1685 IN MAIN.asm
VARBUFPTR:          0ABA DEFINED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
VARHEAPPTR:         0AC3 DEFINED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
VARTIBPTR:          0ACC DEFINED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
VARIABLE:           0AD5 DEFINED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
CONSTANT:           0AD8 DEFINED AT LINE 1718 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1699 IN MAIN.asm
CHARS:              0ADB DEFINED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
CHARS1:             0ADE DEFINED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
DECIMAL:            0AE3 DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
DECIMAL1:           0AE6 DEFINED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
HEXADECIMAL:        0AEB DEFINED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
INPUT:              0AF1 DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
KEY:                0AFC DEFINED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
OUTPUT:             0B05 DEFINED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
NUMBERS:            0B0E DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
FILTER:             0B14 DEFINED AT LINE 1777 IN MAIN.asm
MAP:                0B14 DEFINED AT LINE 1778 IN MAIN.asm
ZPRT:               0B16 DEFINED AT LINE 1782 IN MAIN.asm
ZPRT_ARGS:          0B21 DEFINED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 1786 IN MAIN.asm
ZPRT_BLOCK:         0B23 DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1785 IN MAIN.asm
ARGS0A1L_:          0B4A DEFINED AT LINE 1797 IN MAIN.asm
ARGS0A1L:           0B4C DEFINED AT LINE 1800 IN MAIN.asm
ARGS1A0L_:          0B4D DEFINED AT LINE 1803 IN MAIN.asm
ARGS1A0L:           0B4F DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
ARGS1A1L_:          0B50 DEFINED AT LINE 1809 IN MAIN.asm
ARGS1A1L:           0B52 DEFINED AT LINE 1812 IN MAIN.asm
ARGS2A0L_:          0B54 DEFINED AT LINE 1815 IN MAIN.asm
ARGS2A0L:           0B56 DEFINED AT LINE 1818 IN MAIN.asm
ARGS1A2L_:          0B58 DEFINED AT LINE 1821 IN MAIN.asm
ARGS1A2L:           0B5A DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
JUMPTABLE:          0B5D DEFINED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
JUMPTABLE0:         0B5F DEFINED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
JUMPTABLE1:         0B6C DEFINED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
JUMPTABLE2:         0B6D DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
PRTSTR0:            0B73 DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
PRTSTR:             0B77 DEFINED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
NESTING:            0B7C DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
NESTING0:           0B86 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
NESTING1A:          0B8D DEFINED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
NESTING1:           0B90 DEFINED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
NESTING2:           0B9F DEFINED AT LINE 1901 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
NESTING3:           0BA1 DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
NESTING4:           0BAC DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
PROMPT:             0BAE DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
CRLF:               0BB7 DEFINED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
PRINTSTR:           0BBE DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 139
INIT:               0BC5 DEFINED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
INIT0:              0BDE DEFINED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
START:              0BE3 DEFINED AT LINE 1950 IN MAIN.asm
INTERPRET:          0BF9 DEFINED AT LINE 1956 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
INTERPRET2:         0C05 DEFINED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
INTERPRET3:         0C0D DEFINED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
INTERPRET4:         0C13 DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
INTERPRET5:         0C18 DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
INTERPRET5A:        0C3B DEFINED AT LINE 2018 IN MAIN.asm
INTERPRET6:         0C3D DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
INTERPRET7:         0C4B DEFINED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
INTERPRET8:         0C5E DEFINED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
NEXT:               0C69 DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
NEXT1:              0C7A DEFINED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
EXIT:               0C81 DEFINED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
RUN:                0C85 DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
ERROR:              0C89 DEFINED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
BACKSPACE_:         0C9C DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
EDIT_:              0CAC DEFINED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
REEDIT_:            0CC4 DEFINED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
PRINTSTACK_:        0CC7 DEFINED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2702S50:  0D6C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2703S50:  0DD9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2704S50:  0E44 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2705S50:  0EAF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2706S50:  0F1A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2707S50:  0F85 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2708S50:  0FF2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2709S50:  1061 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2710S50:  10CE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2711S50:  113B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2712S50:  11AA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2713S50:  121B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2714S50:  128A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2715S50:  12F9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2716S50:  136E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2717S50:  13E3 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2718S50:  1456 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2719S50:  14CD DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2720S50:  1548 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2721S50:  15C1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2722S50:  1634 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2723S50:  16AF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2724S50:  1726 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2725S50:  1799 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2726S50:  180C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2727S50:  1887 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2728S50:  18FA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2729S50:  196D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2730S50:  19E2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2731S50:  1A67 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2732S50:  1ADA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2733S50:  1B55 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2734S50:  1BC8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2735S50:  1C3F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2736S50:  1CB2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2737S50:  1D27 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2738S50:  1D9C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2739S50:  1E0F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2740S50:  1E82 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2741S50:  1EF5 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2742S50:  1F68 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2743S50:  1FDB DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2744S50:  204E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2745S50:  20C1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2746S50:  2134 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2747S50:  21A9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2748S50:  221E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2749S50:  2293 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2750S50:  230A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2751S50:  2381 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2752S50:  23F2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2753S50:  2463 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2754S50:  24DA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2755S50:  2557 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2756S50:  25D4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2757S50:  2655 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2758S50:  26E0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2759S50:  276B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2760S50:  27DE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2761S50:  2853 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2762S50:  28CA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2763S50:  2943 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2764S50:  29BA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2765S50:  2A2F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2766S50:  2AA6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2767S50:  2B23 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2768S50:  2BA4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2769S50:  2C21 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2770S50:  2CA8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2771S50:  2D31 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2772S50:  2DC0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2773S50:  2E53 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2774S50:  2ED8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2775S50:  2F63 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2776S50:  2FF0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2777S50:  307F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2778S50:  310C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2779S50:  31A7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2780S50:  3230 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2781S50:  32C5 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2782S50:  335C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2783S50:  33F5 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2784S50:  349A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2785S50:  353F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2786S50:  35C2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2787S50:  364B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2788S50:  36CE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2789S50:  375D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2790S50:  37EC DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2791S50:  388B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2792S50:  3932 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2793S50:  39D9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2794S50:  3A68 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2795S50:  3B03 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2796S50:  3B9A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2797S50:  3C37 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2798S50:  3CEA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2799S50:  3D69 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2800S50:  3DE8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2801S50:  3E67 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2802S50:  3EE6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2803S50:  3F5D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2804S50:  3FD4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2805S50:  404B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2806S50:  40C2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2807S50:  4147 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2808S50:  41CE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2809S50:  4245 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2810S50:  42CC DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2811S50:  436B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2812S50:  43E6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2813S50:  4471 DEFINED AT LINE 41
                    > USED AT LINE 10
EXECSTR:            447C DEFINED AT LINE 151
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
STACK:              4580 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
VARS:               4600 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           46D0 DEFINED AT LINE 10 IN ram.asm
RST08:              46D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              46D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              46D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              46D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              46D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              46DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               46DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             46DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             46E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            46E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            46E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            46E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1938 IN MAIN.asm
VDATAWIDTH:         46E6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
VNUMBASE:           46E8 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 1732 IN MAIN.asm
VTIBPTR:            46EA DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 2049 IN MAIN.asm
VBUFPTR:            46EC DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
VNEXT:              46EE DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1935 IN MAIN.asm
VHEAPPTR:           46F0 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
VPOINTER:           46F2 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 295 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 379 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
VREMAIN:            46F4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
VSAVEDIP:           46F6 DEFINED AT LINE 40 IN ram.asm
VSAVEDSP:           46F8 DEFINED AT LINE 41 IN ram.asm
VSAVEDBP:           46FA DEFINED AT LINE 42 IN ram.asm
VCHECKSUM:          46FC DEFINED AT LINE 43 IN ram.asm
VTEMP1:             46FE DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
VTEMP2:             4700 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
VLASTDEF:           4702 DEFINED AT LINE 49 IN ram.asm
VHASHSTR:           4704 DEFINED AT LINE 50 IN ram.asm
TBPTR:              4706 DEFINED AT LINE 51 IN ram.asm
TIB:                4800 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
BUF:                4900 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
PAD:                4A00 DEFINED AT LINE 58 IN ram.asm
HEAP:               4B00 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 65 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 1694 IN MAIN.asm
