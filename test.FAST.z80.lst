0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 3D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 3D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 3D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 3D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 3D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 3D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 3D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 3D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 3D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 3D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 3C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 3D               LD   (RST08),HL   
0094   22 D2 3D               LD   (RST10),HL   
0097   22 D4 3D               LD   (RST18),HL   
009A   22 D6 3D               LD   (RST20),HL   
009D   22 D8 3D               LD   (RST28),HL   
00A0   22 DA 3D               LD   (RST30),HL   
00A3   22 DE 3D               LD   (INTVEC),HL   
00A6   22 E0 3D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 3D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 3D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 3C               LD   SP,STACK   
00C6   CD 8E 09               CALL   init   
00C9   C3 00 0B               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   19 0A                  DW   next   ; g nNext
0186   00 40                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   88                     DB   lsb(nop_)   ; SP
0221   42                     DB   lsb(not_)   ; !
0222   53                     DB   lsb(string_)   ; "
0223   4A                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   15                     DB   lsb(arrIndex_)   ; %
0226   06                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   88                     DB   lsb(nop_)   ; )
022A   3F                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   88                     DB   lsb(nop_)   ; ,
022D   56                     DB   lsb(minus_)   ; -
022E   27                     DB   lsb(dot_)   ; .
022F   85                     DB   lsb(div_)   ; /	
0230   47                     DB   lsb(num_)   ; 0
0231   47                     DB   lsb(num_)   ; 1
0232   47                     DB   lsb(num_)   ; 2
0233   47                     DB   lsb(num_)   ; 3
0234   47                     DB   lsb(num_)   ; 4
0235   47                     DB   lsb(num_)   ; 5
0236   47                     DB   lsb(num_)   ; 6
0237   47                     DB   lsb(num_)   ; 7
0238   47                     DB   lsb(num_)   ; 8
0239   47                     DB   lsb(num_)   ; 9
023A   2D                     DB   lsb(colon_)   ; :
023B   24                     DB   lsb(semicolon_)   ; ;
023C   73                     DB   lsb(lt_)   ; <
023D   59                     DB   lsb(eq_)   ; =
023E   68                     DB   lsb(gt_)   ; >
023F   36                     DB   lsb(if_)   ; ?
0240   03                     DB   lsb(addr_)   ; @
0241   30                     DB   lsb(identU_)   ; A
0242   30                     DB   lsb(identU_)   ; B
0243   30                     DB   lsb(identU_)   ; C
0244   30                     DB   lsb(identU_)   ; D
0245   30                     DB   lsb(identU_)   ; E
0246   30                     DB   lsb(identU_)   ; F
0247   30                     DB   lsb(identU_)   ; G
0248   30                     DB   lsb(identU_)   ; h
0249   30                     DB   lsb(identU_)   ; I
024A   30                     DB   lsb(identU_)   ; J
024B   30                     DB   lsb(identU_)   ; K
024C   30                     DB   lsb(identU_)   ; L
024D   30                     DB   lsb(identU_)   ; M
024E   30                     DB   lsb(identU_)   ; N
024F   30                     DB   lsb(identU_)   ; O
0250   30                     DB   lsb(identU_)   ; p
0251   30                     DB   lsb(identU_)   ; Q
0252   30                     DB   lsb(identU_)   ; R
0253   30                     DB   lsb(identU_)   ; S
0254   30                     DB   lsb(identU_)   ; T
0255   30                     DB   lsb(identU_)   ; U
0256   30                     DB   lsb(identU_)   ; V
0257   30                     DB   lsb(identU_)   ; W
0258   30                     DB   lsb(identU_)   ; X
0259   30                     DB   lsb(identU_)   ; Y
025A   30                     DB   lsb(identU_)   ; Z
025B   0F                     DB   lsb(arrBegin_)   ; [
025C   88                     DB   lsb(nop_)   ; \
025D   12                     DB   lsb(arrEnd_)   ; ]
025E   50                     DB   lsb(caret_)   ; ^
025F   2A                     DB   lsb(remain_)   ; _
0260   53                     DB   lsb(string_)   ; `     used for testing string   	
0261   33                     DB   lsb(identL_)   ; a
0262   33                     DB   lsb(identL_)   ; b
0263   33                     DB   lsb(identL_)   ; c
0264   33                     DB   lsb(identL_)   ; d
0265   33                     DB   lsb(identL_)   ; e
0266   33                     DB   lsb(identL_)   ; f
0267   33                     DB   lsb(identL_)   ; g
0268   33                     DB   lsb(identL_)   ; h
0269   33                     DB   lsb(identL_)   ; i
026A   33                     DB   lsb(identL_)   ; j
026B   33                     DB   lsb(identL_)   ; k
026C   33                     DB   lsb(identL_)   ; l
026D   33                     DB   lsb(identL_)   ; m
026E   33                     DB   lsb(identL_)   ; n
026F   33                     DB   lsb(identL_)   ; o
0270   33                     DB   lsb(identL_)   ; p
0271   33                     DB   lsb(identL_)   ; q
0272   33                     DB   lsb(identL_)   ; r
0273   33                     DB   lsb(identL_)   ; s
0274   33                     DB   lsb(identL_)   ; t
0275   33                     DB   lsb(identL_)   ; u
0276   33                     DB   lsb(identL_)   ; v
0277   33                     DB   lsb(identL_)   ; w
0278   33                     DB   lsb(identL_)   ; x
0279   33                     DB   lsb(identL_)   ; y
027A   33                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   4D                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   39                     DB   lsb(inv_)   ; ~
027F   88                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                ADDR_:       
0303   C3 A5 03               JP   addr   
0306                AND_:        
0306   C3 B1 03               JP   and   
0309                ARG_:        
0309   C3 D0 03               JP   arg   
030C                ARG_LIST_:      
030C   C3 07 04               JP   arg_list   
030F                ARRBEGIN_:      
030F   C3 39 04               JP   arrBegin   
0312                ARREND_:      
0312   C3 55 04               JP   arrEnd   
0315                ARRINDEX_:      
0315   C3 A3 04               JP   arrIndex   
0318                BLOCK_:      
0318   C3 CC 04               JP   block   
031B                BLOCKEND_:      
031B   C3 35 05               JP   blockEnd   
031E                CHAR_:       
031E   C3 8A 05               JP   char   
0321                COMMAND_:      
0321   C3 D0 07               JP   command   
0324                SEMICOLON_:      
0324   E1                     POP   hl   
0325   DD E9                  JP   (ix)   
0327                DOT_:        
0327   C3 BD 05               JP   dot   
032A                REMAIN_:      
032A   C3 5F 07               JP   remain   
032D                COLON_:      
032D   C3 52 08               JP   colon   
0330                IDENTU_:      
0330   C3 E3 06               JP   identU   
0333                IDENTL_:      
0333   C3 E8 06               JP   identL   
0336                IF_:         
0336   C3 FA 06               JP   if   
0339                INV_:        ; Bitwise INVert the top member of the stack
0339   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
033C   C3 C6 03               JP   xor1   
033F                MUL_:        
033F   C3 13 07               JP   mul   
0342                NOT_:        ; logical invert, any non zero value
0342   21 00 00               LD   hl,0   ; is considered true
0345   18 1D                  JR   eq1   
0347                NUM_:        
0347   C3 2F 07               JP   num   
034A                HEXNUM_:      
034A   C3 C6 06               JP   hexnum   
034D                OR_:         
034D   C3 BC 03               JP   or   
0350                CARET_:      
0350   C3 21 06               JP   caret   
0353                STRING_:      
0353   C3 88 07               JP   string   
0356                MINUS_:      
0356   C3 B0 07               JP   minus   
0359                EQ_:         
0359   03                     INC   bc   
035A   0A                     LD   a,(bc)   ; is it == ?
035B   FE 3D                  CP   "="   
035D   28 04                  JR   z,eq0   ; no its equality
035F   0B                     DEC   bc   
0360   C3 BB 04               JP   assign   ; no its assignment
0363                EQ0:         
0363   E1                     POP   hl   
0364                EQ1:         
0364   D1                     POP   de   
0365   C3 00 06               JP   equals   
0368                GT_:         
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   CA 75 07               JP   z,shiftRight   
036F   D1                     POP   de   
0370   E1                     POP   hl   
0371   18 09                  JR   lt1   
0373                LT_:         
0373   03                     INC   bc   
0374   0A                     LD   a,(bc)   
0375   FE 3C                  CP   "<"   
0377   CA 65 07               JP   z,shiftLeft   
037A   E1                     POP   hl   
037B   D1                     POP   de   
037C                LT1:         
037C   FE 3D                  CP   "="   
037E   CA 08 06               JP   z,lessthaneq   
0381   0B                     DEC   bc   
0382   C3 0D 06               JP   lessthan   
0385                DIV_:        
0385   C3 9F 05               JP   div   
0388                NOP_:        
0388   DD E9                  JP   (ix)   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                PLUS:        
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 06                  JR   nz,add1   
0390   E1                     POP   hl   
0391   E5                     PUSH   hl   ; return pre-incremented value
0392   23                     INC   hl   
0393   C3 BD 04               JP   assign0   
0396                ADD1:        
0396   0B                     DEC   bc   
0397   D1                     POP   de   ; second term
0398   E1                     POP   hl   ; first term
0399   19                     ADD   hl,de   
039A                ADD3:        
039A   03                     INC   bc   
039B   0A                     LD   a,(bc)   
039C   FE 3D                  CP   "="   ; += add to variable
039E   CA BD 04               JP   z,assign0   
03A1   E5                     PUSH   hl   
03A2   0B                     DEC   bc   
03A3   DD E9                  JP   (ix)   
03A5                             ; -- ptr
03A5                ADDR:        
03A5   2A F0 3D               LD   hl,(vPointer)   
03A8   E5                     PUSH   hl   
03A9   21 F0 3D               LD   hl,vPointer   
03AC   22 F0 3D               LD   (vPointer),hl   
03AF   DD E9                  JP   (ix)   
03B1                AND:         
03B1   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B2   E1                     POP   hl   
03B3   7B                     LD   a,e   
03B4   A5                     AND   l   
03B5   6F                     LD   l,a   
03B6   7A                     LD   a,d   
03B7   A4                     AND   h   
03B8                AND1:        
03B8   67                     LD   h,a   
03B9   C3 9A 03               JP   add3   
03BC                OR:          
03BC   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BD   E1                     POP   hl   
03BE   7B                     LD   a,e   
03BF   B5                     OR   l   
03C0   6F                     LD   l,a   
03C1   7A                     LD   a,d   
03C2   B4                     OR   h   
03C3   18 F3                  JR   and1   
03C5                XOR:         
03C5   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C6                XOR1:        
03C6   E1                     POP   hl   
03C7   7B                     LD   a,e   
03C8   AD                     XOR   l   
03C9   6F                     LD   l,a   
03CA   7A                     LD   a,d   
03CB   AC                     XOR   h   
03CC   67                     LD   h,a   
03CD   E5                     PUSH   hl   
03CE   DD E9                  JP   (ix)   
03D0                             ; $a .. $z
03D0                             ; -- value
03D0                             ; returns value of arg
03D0                ARG:         
03D0   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D3   FD 56 05               LD   d,(iy+5)   
03D6   EB                     EX   de,hl   
03D7   7D                     LD   a,l   ; arg_list* == null, skip
03D8   B4                     OR   h   
03D9   28 1C                  JR   z,arg0a   
03DB   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03DC   2B                     DEC   hl   
03DD   7E                     LD   a,(hl)   
03DE   23                     INC   hl   
03DF   23                     INC   hl   
03E0   B7                     OR   a   
03E1   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E3   5F                     LD   e,a   ; e = a = num_args
03E4   03                     INC   bc   ; a = next char = arg_name
03E5   0A                     LD   a,(bc)   
03E6   C5                     PUSH   bc   ; save IP
03E7   43                     LD   b,e   ; b = e = num_args
03E8   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EB   FD 56 03               LD   d,(iy+3)   
03EE                ARG0:        
03EE   1B                     DEC   de   ; a = arg_name, de = next arg*
03EF   1B                     DEC   de   
03F0   BE                     CP   (hl)   
03F1   28 09                  JR   z,arg1   
03F3   23                     INC   hl   ; hl = next arg_list*
03F4   10 F8                  DJNZ   arg0   
03F6   C1                     POP   bc   ; no match, restore IP
03F7                ARG0A:       
03F7   11 00 00               LD   de,0   ; return 0
03FA   18 08                  JR   arg1a   
03FC                ARG1:        
03FC   C1                     POP   bc   ; restore IP
03FD   EB                     EX   de,hl   ; hl = arg*
03FE   22 F0 3D               LD   (vPointer),hl   ; store arg* in setter
0401   5E                     LD   e,(hl)   
0402   23                     INC   hl   
0403   56                     LD   d,(hl)   ; de = arg
0404                ARG1A:       
0404   D5                     PUSH   de   ; push arg
0405   DD E9                  JP   (ix)   
0407                             ; arg_list - parses input (ab:c)
0407                             ; names after the : represent uninitialised locals
0407                             ; return values are the state of the stack after the block ends
0407                ARG_LIST:      
0407   11 00 00               LD   de,0   ; d = count locals, e = count args ()
040A   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
040D   23                     INC   hl   ; skip length field to start
040E   23                     INC   hl   
040F   E5                     PUSH   hl   ; save start of arg_list
0410   03                     INC   bc   ; point to next char
0411                ARG_LIST1:      
0411   0A                     LD   a,(bc)   
0412   FE 29                  CP   ")"   ; ) is the arg_list terminator
0414   28 12                  JR   z,arg_list4   
0416   FE 3A                  CP   ":"   
0418   20 03                  JR   nz,arg_list2   
041A   14                     INC   d   ; non zero value local count acts as flag
041B   20 08                  JR   nz,arg_list3   
041D                ARG_LIST2:      
041D   77                     LD   (hl),a   
041E   23                     INC   hl   
041F   1C                     INC   e   ; increase arg count
0420   AF                     XOR   a   
0421   B2                     OR   d   
0422   28 01                  JR   z,arg_list3   
0424   14                     INC   d   ; if d > 0 increase local count
0425                ARG_LIST3:      
0425   03                     INC   bc   ; point to next char
0426   18 E9                  JR   arg_list1   
0428                ARG_LIST4:      
0428   AF                     XOR   a   
0429   B2                     OR   d   
042A   28 01                  JR   z,arg_list5   
042C   15                     DEC   d   ; remove initial inc
042D                ARG_LIST5:      
042D   23                     INC   hl   
042E   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0431   E1                     POP   hl   ; hl = start of arg_list
0432   E5                     PUSH   hl   ; return start of string
0433   2B                     DEC   hl   ; write length bytes to length field at start - 2
0434   72                     LD   (hl),d   
0435   2B                     DEC   hl   
0436   73                     LD   (hl),e   
0437   DD E9                  JP   (ix)   
0439                ARRBEGIN:      
0439   11 00 00               LD   de,0   ; create stack frame
043C   D5                     PUSH   de   ; push null for IP
043D   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0440   FD 56 05               LD   d,(iy+5)   ; 
0443   D5                     PUSH   de   ; 
0444   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0447   FD 56 03               LD   d,(iy+3)   ; 
044A   D5                     PUSH   de   ; 
044B   FD E5                  PUSH   iy   ; push BP
044D   FD 21 00 00            LD   iy,0   ; BP = SP
0451   FD 39                  ADD   iy,sp   
0453   DD E9                  JP   (ix)   
0455                ARREND:      
0455   FD 54                  LD   d,iyh   ; de = BP
0457   FD 5D                  LD   e,iyl   
0459   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
045D   62 6B                  LD   hl,de   ; hl = de = BP
045F   B7                     OR   a   
0460   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0462   CB 3C                  SRL   h   ; 
0464   CB 1D                  RR   l   
0466   44 4D                  LD   bc,hl   ; bc = count
0468   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = array[-2]
046B   71                     LD   (hl),c   ; write num items in length word
046C   23                     INC   hl   
046D   70                     LD   (hl),b   
046E   23                     INC   hl   ; hl = array[0], bc = count
046F                             ; de = BP, hl = array[0], bc = count
046F                ARREND1:      
046F   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0472   77                     LD   (hl),a   ; write lsb of array item
0473   23                     INC   hl   ; move to msb of array item
0474   3A E6 3D               LD   a,(vDataWidth)   ; vDataWidth=1?
0477   3D                     DEC   a   
0478   28 05                  JR   z,arrEnd2   
047A   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
047D   77                     LD   (hl),a   ; write msb of array item
047E   23                     INC   hl   ; move to next word in array
047F                ARREND2:      
047F   FD 2B                  DEC   iy   ; move to next word on stack
0481   FD 2B                  DEC   iy   
0483   0B                     DEC   bc   ; dec items count
0484   79                     LD   a,c   ; if not zero loop
0485   B0                     OR   b   
0486   20 E7                  JR   nz,arrEnd1   
0488   EB                     EX   de,hl   ; de = end of array, hl = BP
0489   F9                     LD   sp,hl   ; sp = BP
048A   E1                     POP   hl   ; de = end of array, hl = old BP
048B   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
048C   FD 62                  LD   iyh,d   
048E   FD 6B                  LD   iyl,e   
0490   D1                     POP   de   ; pop arg_list (discard)
0491   D1                     POP   de   ; pop first_arg* (discard)
0492   D1                     POP   de   ; pop IP (discard)
0493   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = array[-2]
0497   22 EC 3D               LD   (vHeapPtr),hl   ; move heap* to end of array
049A   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
049E   13                     INC   de   ; de = array[0]
049F   13                     INC   de   
04A0   D5                     PUSH   de   ; return array[0]
04A1   DD E9                  JP   (ix)   
04A3                             ; index of an array, based on vDataWidth
04A3                             ; array num -- value    ; also sets vPointer to address
04A3                ARRINDEX:      
04A3   E1                     POP   hl   ; hl = index
04A4   D1                     POP   de   ; de = array
04A5   3A E6 3D               LD   a,(vDataWidth)   ; a = data width
04A8   3D                     DEC   a   
04A9   28 01                  JR   z,arrIndex1   
04AB                ARRINDEX0:      
04AB   29                     ADD   hl,hl   ; if data width = 2 then double
04AC                ARRINDEX1:      
04AC   19                     ADD   hl,de   ; add addr
04AD   22 F0 3D               LD   (vPointer),hl   ; store address in setter
04B0   16 00                  LD   d,0   
04B2   5E                     LD   e,(hl)   
04B3   B7                     OR   a   ; check data width again
04B4   28 02                  JR   z,arrIndex2   
04B6   23                     INC   hl   
04B7   56                     LD   d,(hl)   
04B8                ARRINDEX2:      
04B8   D5                     PUSH   de   
04B9   DD E9                  JP   (ix)   
04BB                             ; value _oldValue --            ; uses address in vPointer
04BB                ASSIGN:      
04BB   E1                     POP   hl   ; discard last accessed value
04BC   E1                     POP   hl   ; hl = new value
04BD                ASSIGN0:      
04BD   EB                     EX   de,hl   ; de = new value
04BE                ASSIGNX:      
04BE   2A F0 3D               LD   hl,(vPointer)   
04C1   73                     LD   (hl),e   
04C2   3A E6 3D               LD   a,(vDataWidth)   
04C5   3D                     DEC   a   ; is it byte?
04C6   28 02                  JR   z,assign1   
04C8   23                     INC   hl   
04C9   72                     LD   (hl),d   
04CA                ASSIGN1:      
04CA   DD E9                  JP   (ix)   
04CC                BLOCK:       
04CC   C5                     PUSH   bc   ; return pointer to first { of block
04CD   03                     INC   bc   
04CE   16 01                  LD   d,1   ; nesting: count first parenthesis
04D0                BLOCK1:      ; Skip to end of definition
04D0   0A                     LD   a,(bc)   ; Get the next character
04D1   03                     INC   bc   ; Point to next character
04D2   FE 21                  CP   " " + 1   ; ignore whitespace
04D4   38 FA                  JR   c,block1   
04D6   FE 29                  CP   ")"   
04D8   28 2D                  JR   z,block4   
04DA   FE 7D                  CP   "}"   
04DC   28 29                  JR   z,block4   
04DE   FE 5D                  CP   "]"   
04E0   28 25                  JR   z,block4   
04E2   FE 28                  CP   "("   
04E4   28 16                  JR   z,block2   
04E6   FE 7B                  CP   "{"   
04E8   28 12                  JR   z,block2   
04EA   FE 5B                  CP   "["   
04EC   28 0E                  JR   z,block2   
04EE   FE 27                  CP   "'"   
04F0   28 0D                  JR   z,block3   
04F2   FE 60                  CP   "`"   
04F4   28 09                  JR   z,block3   
04F6   FE 22                  CP   $22   
04F8   28 05                  JR   z,block3   
04FA   18 D4                  JR   block1   
04FC                BLOCK2:      
04FC   14                     INC   d   
04FD   18 D1                  JR   block1   
04FF                BLOCK3:      
04FF   3E 80                  LD   a,$80   
0501   AA                     XOR   d   
0502   47                     LD   b,a   
0503   20 CB                  JR   nz,block1   
0505   18 03                  JR   block5   
0507                BLOCK4:      
0507   15                     DEC   d   
0508   20 C6                  JR   nz,block1   ; get the next element
050A                BLOCK5:      
050A   60 69                  LD   hl,bc   ; hl = IP
050C   11 00 40               LD   de,HEAP   ; is IP pointing to object in heap
050F   B7                     OR   a   ; IP - HEAP
0510   ED 52                  SBC   hl,de   
0512   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0514   28 1C                  JR   z,block6   
0516   60 69                  LD   hl,bc   ; hl = IP
0518   D1                     POP   de   ; de = block*
0519   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
051D   B7                     OR   a   ; bc = size
051E   ED 52                  SBC   hl,de   
0520   44 4D                  LD   bc,hl   
0522   EB                     EX   de,hl   ; hl = block* de = heap*
0523   ED 5B EC 3D            LD   de,(vHeapPtr)   
0527   D5                     PUSH   de   ; return hblock*
0528   ED B0                  LDIR      ; copy size bytes from block* to hblock*
052A   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += size
052E   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
0532                BLOCK6:      
0532   0B                     DEC   bc   ; balanced, exit
0533   DD E9                  JP   (ix)   
0535                BLOCKEND:      
0535   D9                     EXX      ; de" = oldBP bc" = oldIP
0536   FD 5E 00               LD   e,(iy+0)   
0539   FD 56 01               LD   d,(iy+1)   
053C   FD 4E 06               LD   c,(iy+6)   
053F   FD 46 07               LD   b,(iy+7)   
0542   D9                     EXX      
0543   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0546   FD 56 03               LD   d,(iy+3)   
0549   EB                     EX   de,hl   
054A   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054D   FD 56 01               LD   d,(iy+1)   
0550   13                     INC   de   ; for carry flag <=
0551   B7                     OR   a   
0552   ED 52                  SBC   hl,de   
0554   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0556   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0558   FD 5D                  LD   e,iyl   
055A   21 08 00               LD   hl,8   
055D   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055E   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055F   18 0C                  JR   blockEnd2   
0561                BLOCKEND1:      ; same scope
0561   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0564   FD 56 03               LD   d,(iy+3)   
0567   EB                     EX   de,hl   
0568   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
056A   FD 5D                  LD   e,iyl   
056C   EB                     EX   de,hl   
056D                BLOCKEND2:      
056D   44 4D                  LD   bc,hl   ; bc = hl = BP
056F   B7                     OR   a   ; hl = BP - SP = count
0570   ED 72                  SBC   hl,sp   
0572   7D                     LD   a,l   
0573   B4                     OR   h   
0574   28 09                  JR   z,blockEnd3   
0576   C5                     PUSH   bc   ; bc = count, hl = BP
0577   44 4D                  LD   bc,hl   
0579   E1                     POP   hl   
057A   2B                     DEC   hl   ; hl = BP-1
057B   1B                     DEC   de   ; de = args*-1
057C   ED B8                  LDDR      
057E   13                     INC   de   
057F                BLOCKEND3:      
057F   EB                     EX   de,hl   ; hl = new tos
0580   F9                     LD   sp,hl   ; sp = new tos
0581   D9                     EXX      ; bc = IP, iy = oldBP
0582   D5                     PUSH   de   
0583   C5                     PUSH   bc   
0584   D9                     EXX      
0585   C1                     POP   bc   
0586   FD E1                  POP   iy   
0588   DD E9                  JP   (ix)   
058A                CHAR:        
058A   21 00 00               LD   hl,0   ; if "" is empty or null
058D                CHAR1:       
058D   03                     INC   bc   ; point to next char
058E   0A                     LD   a,(bc)   
058F   FE 27                  CP   "'"   ; ' is the terminator
0591   28 09                  JR   z,char3   
0593   FE 5C                  CP   $5c   ; \ is the escape
0595   20 02                  JR   nz,char2   
0597   03                     INC   bc   
0598   0A                     LD   a,(bc)   
0599                CHAR2:       
0599   6F                     LD   l,a   
059A   18 F1                  JR   char1   
059C                CHAR3:       
059C   E5                     PUSH   hl   
059D   DD E9                  JP   (ix)   
059F                DIV:         
059F   03                     INC   bc   
05A0   0A                     LD   a,(bc)   
05A1   FE 5C                  CP   $5C   
05A3   CA 49 08               JP   z,comment   
05A6   FE 41                  CP   "A"   
05A8   D2 D0 07               JP   nc,command   
05AB   0B                     DEC   bc   
05AC   D1                     POP   de   
05AD   E1                     POP   hl   
05AE   C5                     PUSH   bc   ; preserve the IP
05AF   44 4D                  LD   bc,hl   
05B1   CD E7 05               CALL   divide   
05B4   EB                     EX   de,hl   
05B5   ED 53 F6 3D            LD   (vRemain),de   
05B9   C1                     POP   bc   
05BA   C3 9A 03               JP   add3   
05BD                DOT:         
05BD   E1                     POP   hl   
05BE   03                     INC   bc   
05BF   0A                     LD   a,(bc)   
05C0   FE 68                  CP   "h"   
05C2   20 05                  JR   nz,dot1   
05C4   CD 1D 09               CALL   prthex   
05C7   18 17                  JR   dot4   
05C9                DOT1:        
05C9   FE 73                  CP   "s"   
05CB   20 05                  JR   nz,dot2   
05CD   CD 40 09               CALL   prtstr   
05D0   18 0E                  JR   dot4   
05D2                DOT2:        
05D2   FE 63                  CP   "c"   
05D4   20 06                  JR   nz,dot3   
05D6   7D                     LD   a,l   
05D7   CD 85 00               CALL   putchar   
05DA   18 04                  JR   dot4   
05DC                DOT3:        
05DC   0B                     DEC   bc   
05DD   CD D5 08               CALL   prtdec   
05E0                DOT4:        
05E0   3E 20                  LD   a," "   
05E2   CD 85 00               CALL   putchar   
05E5   DD E9                  JP   (ix)   
05E7                             ; division subroutine.
05E7                             ; bc: divisor, de: dividend, hl: remainder
05E7                DIVIDE:      
05E7   21 00 00               LD   hl,0   ; zero the remainder
05EA   3E 10                  LD   a,16   ; loop counter
05EC                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05EC   CB 21                  SLA   c   
05EE   CB 10                  RL   b   
05F0   ED 6A                  ADC   hl,hl   
05F2   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05F4   38 03                  JR   c,divide2   
05F6   0C                     INC   c   
05F7   18 01                  JR   divide3   
05F9                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05F9   19                     ADD   hl,de   
05FA                DIVIDE3:      
05FA   3D                     DEC   a   
05FB   20 EF                  JR   nz,divide1   
05FD   50 59                  LD   de,bc   ; result from bc to de
05FF   C9                     RET      
0600                             ; hl = value1, de = value2
0600                             ; hl = result
0600                EQUALS:      
0600   B7                     OR   a   ; reset the carry flag
0601   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0603   28 10                  JR   z,true1   
0605   C3 1B 06               JP   false1   
0608                             ; hl = value1 de = value2
0608                             ; hl = result
0608                LESSTHANEQ:      
0608   B7                     OR   a   
0609   ED 52                  SBC   hl,de   
060B   18 05                  JR   lessthan1   
060D                             ; hl = value1 de = value2
060D                             ; hl = result
060D                LESSTHAN:      
060D   B7                     OR   a   
060E   ED 52                  SBC   hl,de   
0610   28 09                  JR   z,false1   
0612                LESSTHAN1:      
0612   FA 1B 06               JP   m,false1   
0615                TRUE1:       
0615   21 FF FF               LD   hl,TRUE   
0618   E5                     PUSH   hl   
0619   DD E9                  JP   (ix)   
061B                NULL1:       
061B                FALSE1:      
061B   21 00 00               LD   hl,FALSE   
061E   E5                     PUSH   hl   
061F   DD E9                  JP   (ix)   
0621                             ; execute a block of code which ends with }
0621                             ; creates a root scope if BP == stack
0621                             ; else uses outer scope
0621                CARET:       
0621                GO:          
0621   D1                     POP   de   ; de = block*
0622                GO1:         
0622   7B                     LD   a,e   ; if block* == null, exit
0623   B2                     OR   d   
0624   20 02                  JR   nz,go2   
0626   DD E9                  JP   (ix)   
0628                GO2:         
0628   1A                     LD   a,(de)   
0629   FE 7B                  CP   "{"   
062B   C2 6A 06               JP   nz,goFunc   
062E                GOBLOCK:      
062E   13                     INC   de   
062F   1A                     LD   a,(de)   
0630   1B                     DEC   de   
0631   FE 3A                  CP   ":"   
0633   20 02                  JR   nz,goBlockX1   
0635   13                     INC   de   
0636   D5                     PUSH   de   
0637                GOBLOCKX1:      
0637   ED 53 F8 3D            LD   (vTemp1),de   ; save de
063B   21 80 3C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
063E   FD 54                  LD   d,iyh   
0640   FD 5D                  LD   e,iyl   
0642   B7                     OR   a   ; if stack* == BP then this is the root_scope
0643   ED 52                  SBC   hl,de   
0645   ED 5B F8 3D            LD   de,(vTemp1)   ; restore de
0649   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
064A   B4                     OR   h   
064B   3E 00                  LD   a,0   
064D   28 6C                  JR   z,goFunc8   
064F   C5                     PUSH   bc   ; push IP
0650   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0653   FD 46 05               LD   b,(iy+5)   
0656   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0659   FD 66 03               LD   h,(iy+3)   
065C                GOBLOCK1:      
065C   C5                     PUSH   bc   ; arg_list*
065D   E5                     PUSH   hl   ; first_arg*
065E   FD E5                  PUSH   iy   ; push BP
0660   FD 21 00 00            LD   iy,0   ; BP = SP
0664   FD 39                  ADD   iy,sp   
0666   42 4B                  LD   bc,de   ; bc = de = block*-1
0668   DD E9                  JP   (ix)   
066A                GOFUNC:      ; execute function
066A   EB                     EX   de,hl   ; hl = func*
066B   5E                     LD   e,(hl)   ; de = partial_array*
066C   23                     INC   hl   
066D   56                     LD   d,(hl)   
066E   23                     INC   hl   
066F   7B                     LD   a,e   ; if partial_array* == null skip
0670   B2                     OR   d   
0671   28 21                  JR   z,goFunc3   
0673   ED 43 F8 3D            LD   (vTemp1),bc   
0677   22 FA 3D               LD   (vTemp2),hl   ; save bc,hl
067A   EB                     EX   de,hl   ; hl = partial_array*
067B   2B                     DEC   hl   ; bc = count
067C   46                     LD   b,(hl)   
067D   2B                     DEC   hl   
067E   4E                     LD   c,(hl)   
067F   23                     INC   hl   ; push each item on stack
0680   23                     INC   hl   
0681   18 06                  JR   goFunc2   
0683                GOFUNC1:      
0683   5E                     LD   e,(hl)   ; de = partial item
0684   23                     INC   hl   
0685   56                     LD   d,(hl)   
0686   23                     INC   hl   
0687   D5                     PUSH   de   ; push on stack
0688   0B                     DEC   bc   
0689                GOFUNC2:      
0689   79                     LD   a,c   ; if count != 0 then loop
068A   B0                     OR   b   
068B   20 F6                  JR   nz,goFunc1   
068D   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore bc
0691   2A FA 3D               LD   hl,(vTemp2)   ; restore hl
0694                GOFUNC3:      
0694   5E                     LD   e,(hl)   ; de = block*
0695   23                     INC   hl   
0696   56                     LD   d,(hl)   
0697   23                     INC   hl   
0698   ED 53 F8 3D            LD   (vTemp1),de   ; save block*
069C   5E                     LD   e,(hl)   ; de = arg_list*
069D   23                     INC   hl   
069E   56                     LD   d,(hl)   
069F   23                     INC   hl   
06A0   EB                     EX   de,hl   ; hl = arg_list*
06A1   ED 5B F8 3D            LD   de,(vTemp1)   ; restore de = block*
06A5   7D                     LD   a,l   ; if arg_list* == null a = 0
06A6   B4                     OR   h   
06A7   20 03                  JR   nz,goFunc4   
06A9   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06AA   18 0F                  JR   goFunc8   
06AC                GOFUNC4:      ; allocate locals
06AC   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06AD   7E                     LD   a,(hl)   
06AE   18 03                  JR   goFunc6   
06B0                GOFUNC5:      ; loop
06B0   3B                     DEC   sp   
06B1   3B                     DEC   sp   
06B2   3D                     DEC   a   
06B3                GOFUNC6:      
06B3   B7                     OR   a   
06B4   20 FA                  JR   nz,goFunc5   ; end loop
06B6                GOFUNC7:      
06B6   2B                     DEC   hl   ; a = num_args* x 2
06B7   7E                     LD   a,(hl)   
06B8   23                     INC   hl   
06B9   23                     INC   hl   
06BA   87                     ADD   a,a   ; a *= 2
06BB                GOFUNC8:      
06BB   C5                     PUSH   bc   ; push IP
06BC   44 4D                  LD   bc,hl   
06BE   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06C1   85                     ADD   a,l   
06C2   6F                     LD   l,a   
06C3   39                     ADD   hl,sp   
06C4   18 96                  JR   goBlock1   
06C6                HEXNUM:      
06C6   21 00 00               LD   hl,0   ; Clear hl to accept the number
06C9                HEXNUM1:      
06C9   03                     INC   bc   
06CA   0A                     LD   a,(bc)   ; Get the character which is a numeral
06CB   CB 77                  BIT   6,a   ; is it uppercase alpha?
06CD   28 02                  JR   z,hexnum2   ; no a decimal
06CF   D6 07                  SUB   7   ; sub 7  to make $a - $F
06D1                HEXNUM2:      
06D1   D6 30                  SUB   $30   ; form decimal digit
06D3   DA 51 07               JP   c,num2   
06D6   FE 10                  CP   $0F+1   
06D8   D2 51 07               JP   nc,num2   
06DB   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06DC   29                     ADD   hl,hl   ; 4X
06DD   29                     ADD   hl,hl   ; 8X
06DE   29                     ADD   hl,hl   ; 16X
06DF   85                     ADD   a,l   ; add into bottom of hl
06E0   6F                     LD   l,a   
06E1   18 E6                  JR   hexnum1   
06E3                IDENTU:      
06E3   0A                     LD   a,(bc)   ; a = identifier char
06E4   D6 41                  SUB   "A"   ; "A" = 0
06E6   18 05                  JR   ident1   
06E8                IDENTL:      
06E8   0A                     LD   a,(bc)   
06E9   D6 61                  SUB   "a"   
06EB   C6 1A                  ADD   a,26   
06ED                IDENT1:      
06ED   87                     ADD   a,a   ; l = a * 2
06EE   6F                     LD   l,a   
06EF   26 3D                  LD   h,msb(vars)   
06F1   22 F0 3D               LD   (vPointer),hl   ; store address in setter
06F4   5E                     LD   e,(hl)   
06F5   23                     INC   hl   
06F6   56                     LD   d,(hl)   
06F7   D5                     PUSH   de   
06F8   DD E9                  JP   (ix)   
06FA                             ; if
06FA                             ; condition then -- value
06FA                IF:          
06FA   03                     INC   bc   
06FB   0A                     LD   a,(bc)   
06FC   FE 3F                  CP   "?"   
06FE   28 06                  JR   z,ifte   
0700   0B                     DEC   bc   
0701   11 00 00               LD   de,0   ; NUL pointer for else
0704   18 01                  JR   ifte1   
0706                             ; ifte
0706                             ; condition then else -- value
0706                IFTE:        
0706   D1                     POP   de   ; de = else
0707                IFTE1:       
0707   E1                     POP   hl   ; hl = then
0708   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0709   7C                     LD   a,h   
070A   B5                     OR   l   
070B   E1                     POP   hl   ; hl = then
070C   CA 22 06               JP   z,go1   ; if z de = else
070F   EB                     EX   de,hl   ; condition = false, de = then
0710   C3 22 06               JP   go1   
0713                MUL:         
0713   D1                     POP   de   ; get first value
0714   E1                     POP   hl   
0715                MUL2:        
0715   C5                     PUSH   bc   ; Preserve the IP
0716   44 4D                  LD   bc,hl   ; bc = 2nd value
0718   21 00 00               LD   hl,0   
071B   3E 10                  LD   a,16   
071D                MUL3:        
071D   29                     ADD   hl,hl   
071E   CB 13                  RL   e   
0720   CB 12                  RL   d   
0722   30 04                  JR   nc,$+6   
0724   09                     ADD   hl,bc   
0725   30 01                  JR   nc,$+3   
0727   13                     INC   de   
0728   3D                     DEC   a   
0729   20 F2                  JR   nz,mul3   
072B   C1                     POP   bc   ; Restore the IP
072C   C3 9A 03               JP   add3   
072F                NUM:         
072F   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0732   0A                     LD   a,(bc)   ; Get numeral or -
0733   FE 2D                  CP   "-"   
0735   20 01                  JR   nz,num0   
0737   03                     INC   bc   ; move to next char, no flags affected
0738                NUM0:        
0738   08                     EX   af,af'   ; save zero flag = 0 for later
0739                NUM1:        
0739   0A                     LD   a,(bc)   ; read digit
073A   D6 30                  SUB   "0"   ; less than 0?
073C   38 13                  JR   c,num2   ; not a digit, exit loop
073E   FE 0A                  CP   10   ; greater that 9?
0740   30 0F                  JR   nc,num2   ; not a digit, exit loop
0742   03                     INC   bc   ; inc IP
0743   54 5D                  LD   de,hl   ; multiply hl * 10
0745   29                     ADD   hl,hl   
0746   29                     ADD   hl,hl   
0747   19                     ADD   hl,de   
0748   29                     ADD   hl,hl   
0749   85                     ADD   a,l   ; add digit in a to hl
074A   6F                     LD   l,a   
074B   3E 00                  LD   a,0   
074D   8C                     ADC   a,h   
074E   67                     LD   h,a   
074F   18 E8                  JR   num1   
0751                NUM2:        
0751   0B                     DEC   bc   
0752   08                     EX   af,af'   ; restore zero flag
0753   20 07                  JR   nz,num3   
0755   EB                     EX   de,hl   ; negate the value of hl
0756   21 00 00               LD   hl,0   
0759   B7                     OR   a   ; jump to sub2
075A   ED 52                  SBC   hl,de   
075C                NUM3:        
075C   E5                     PUSH   hl   ; Put the number on the stack
075D   DD E9                  JP   (ix)   ; and process the next character
075F                REMAIN:      
075F   2A F6 3D               LD   hl,(vRemain)   
0762   E5                     PUSH   hl   
0763   DD E9                  JP   (ix)   
0765                             ; shiftLeft
0765                             ; value count -- value2          shift left count places
0765                SHIFTLEFT:      
0765   50 59                  LD   de,bc   ; save IP
0767   C1                     POP   bc   ; bc = count
0768   41                     LD   b,c   ; b = loop counter
0769   E1                     POP   hl   
076A   04                     INC   b   ; test for counter=0 case
076B   18 01                  JR   shiftLeft2   
076D                SHIFTLEFT1:      
076D   29                     ADD   hl,hl   ; left shift hl
076E                SHIFTLEFT2:      
076E   10 FD                  DJNZ   shiftLeft1   
0770   E5                     PUSH   hl   
0771   42 4B                  LD   bc,de   ; restore IP
0773   DD E9                  JP   (ix)   
0775                             ; shiftRight
0775                             ; value count -- value2          shift left count places
0775                SHIFTRIGHT:      
0775   50 59                  LD   de,bc   ; save IP
0777   C1                     POP   bc   ; bc = count
0778   41                     LD   b,c   ; b = loop counter
0779   E1                     POP   hl   
077A   04                     INC   b   ; test for counter=0 case
077B   18 04                  JR   shiftRight2   
077D                SHIFTRIGHT1:      
077D   CB 3C                  SRL   h   ; right shift hl
077F   CB 1D                  RR   l   
0781                SHIFTRIGHT2:      
0781   10 FA                  DJNZ   shiftRight1   
0783   E5                     PUSH   hl   
0784   42 4B                  LD   bc,de   ; restore IP
0786   DD E9                  JP   (ix)   
0788                             ; string
0788                             ; -- ptr                        ; points to start of string chars,
0788                             ; length is stored at start - 2 bytes
0788                STRING:      
0788   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
078B   23                     INC   hl   ; skip length field to start
078C   23                     INC   hl   
078D   E5                     PUSH   hl   ; save start of string
078E   03                     INC   bc   ; point to next char
078F   18 03                  JR   string2   
0791                STRING1:      
0791   77                     LD   (hl),a   
0792   23                     INC   hl   ; increase count
0793   03                     INC   bc   ; point to next char
0794                STRING2:      
0794   0A                     LD   a,(bc)   
0795   FE 22                  CP   DQUOTE   ; " is the string terminator
0797   20 F8                  JR   nz,string1   
0799   FE 60                  CP   "`"   ; ` is the string terminator used in testing
079B   20 F4                  JR   nz,string1   
079D   AF                     XOR   a   ; write NUL to terminate string
079E   77                     LD   (hl),a   ; hl = end of string
079F   23                     INC   hl   
07A0   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07A3   2B                     DEC   hl   ; hl = end of string without terminator
07A4   D1                     POP   de   ; de = start of string
07A5   D5                     PUSH   de   ; return start of string
07A6   B7                     OR   a   ; hl = length bytes, de = start of string
07A7   ED 52                  SBC   hl,de   
07A9   EB                     EX   de,hl   
07AA   2B                     DEC   hl   ; write length bytes to length field at start - 2
07AB   72                     LD   (hl),d   
07AC   2B                     DEC   hl   
07AD   73                     LD   (hl),e   
07AE   DD E9                  JP   (ix)   
07B0                MINUS:       ; negative sign or subtract
07B0   03                     INC   bc   ; check if sign of a number
07B1   0A                     LD   a,(bc)   
07B2   0B                     DEC   bc   
07B3   FE 30                  CP   "0"   
07B5   38 05                  JR   c,sub   
07B7   FE 3A                  CP   "9"+1   
07B9   DA 47 03               JP   c,num_   
07BC                SUB:         ; Subtract the value 2nd on stack from top of stack
07BC   03                     INC   bc   
07BD   FE 2D                  CP   "-"   
07BF   20 06                  JR   nz,sub1   
07C1   E1                     POP   hl   
07C2   E5                     PUSH   hl   ; return the preincremented value
07C3   2B                     DEC   hl   
07C4   C3 BD 04               JP   assign0   
07C7                SUB1:        
07C7   0B                     DEC   bc   
07C8   D1                     POP   de   
07C9   E1                     POP   hl   
07CA   B7                     OR   a   
07CB   ED 52                  SBC   hl,de   
07CD   C3 9A 03               JP   add3   
07D0                             ;*******************************************************************
07D0                             ; commands
07D0                             ; a contains command letter
07D0                             ; bc points to command letter
07D0                             ;*******************************************************************
07D0                COMMAND:      
07D0   FE 61                  CP   "a"   ; \a absolute
07D2   CA 1C 08               JP   z,abs1   
07D5   FE 62                  CP   "b"   ; \x break
07D7   CA 65 08               JP   z,break   
07DA   FE 63                  CP   "c"   ; \c chars
07DC   CA 82 08               JP   z,chars   
07DF   FE 70                  CP   "p"   ; \p partial
07E1   CA 29 08               JP   z,partial   
07E4   FE 66                  CP   "f"   ; \f func
07E6   CA 8A 08               JP   z,func   
07E9   FE 46                  CP   "F"   ; \F false
07EB   CA 1B 06               JP   z,false1   
07EE   FE 69                  CP   "i"   ; \i input
07F0   CA A6 08               JP   z,input   
07F3   FE 6B                  CP   "k"   ; \k key
07F5   CA B1 08               JP   z,key   
07F8   FE 6E                  CP   "n"   ; \n numbers
07FA   CA CD 08               JP   z,numbers   
07FD   FE 6F                  CP   "o"   ; \o output
07FF   CA BA 08               JP   z,output   
0802   FE 64                  CP   "d"   ; \d do
0804   CA 7F 08               JP   z,do   
0807   FE 73                  CP   "s"   ; \s select
0809   CA C3 08               JP   z,select   
080C   FE 54                  CP   "T"   ; \T true
080E   CA 15 06               JP   z,true1   
0811   FE 78                  CP   "x"   ; \x xor
0813   CA C5 03               JP   z,xor   
0816                ERROR1:      
0816   21 01 00               LD   hl,1   ; error 1: unknown command
0819   C3 32 0A               JP   error   
081C                ABS1:        
081C   E1                     POP   hl   
081D   CB 7C                  BIT   7,h   
081F   C8                     RET   z   
0820   AF                     XOR   a   
0821   95                     SUB   l   
0822   6F                     LD   l,a   
0823   9F                     SBC   a,a   
0824   94                     SUB   h   
0825   67                     LD   h,a   
0826   E5                     PUSH   hl   
0827   DD E9                  JP   (ix)   
0829                             ; partial
0829                             ; array* func* -- func1*
0829                PARTIAL:      
0829   E1                     POP   hl   ; h1 = func*
082A   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
082E   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
0832   01 06 00               LD   bc,6   ; bc = count
0835   ED B0                  LDIR      ; clone func
0837   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
083B   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
083E   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += 6
0842   D1                     POP   de   ; de = array*
0843   E5                     PUSH   hl   ; return partial_array*
0844   73                     LD   (hl),e   ; compile array*
0845   23                     INC   hl   
0846   72                     LD   (hl),d   
0847   DD E9                  JP   (ix)   
0849                COMMENT:      
0849   03                     INC   bc   ; point to next char
084A   0A                     LD   a,(bc)   
084B   FE 20                  CP   " "   ; terminate on any char less than SP
084D   30 FA                  JR   nc,comment   
084F   0B                     DEC   bc   
0850   DD E9                  JP   (ix)   
0852                COLON:       
0852   03                     INC   bc   
0853   0A                     LD   a,(bc)   
0854   FE 7D                  CP   "}"   
0856   CA 5D 08               JP   z,loopEnd   
0859   0B                     DEC   bc   
085A   C3 16 08               JP   error1   
085D                LOOPEND:      
085D   FD 4E 08               LD   c,(iy+8)   ; get block* just under stack frame
0860   FD 46 09               LD   b,(iy+9)   
0863   DD E9                  JP   (ix)   
0865                BREAK:       
0865   E1                     POP   hl   
0866   7D                     LD   a,l   
0867   B4                     OR   h   
0868   28 02                  JR   z,break1   
086A   DD E9                  JP   (ix)   
086C                BREAK1:      
086C   FD 5D                  LD   e,iyl   ; get block* just under stack frame
086E   FD 54                  LD   d,iyh   
0870   21 08 00               LD   hl,8   
0873   19                     ADD   hl,de   
0874   23                     INC   hl   
0875   23                     INC   hl   
0876   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0879   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
087C   C3 35 05               JP   blockEnd   
087F                             ; do
087F                             ; rblock* --                    ; a rblock is a block ending with :}
087F                DO:          
087F                             ; dec bc                      ; rewind IP to before \r
087F                             ; dec bc
087F                             ; pop hl
087F                             ; push hl
087F                             ; push hl
087F   C3 21 06               JP   go   
0882                CHARS:       
0882   21 01 00               LD   hl,1   
0885                CHARS1:      
0885   22 E6 3D               LD   (vDataWidth),hl   
0888   DD E9                  JP   (ix)   
088A                             ; arg_list* block* -- ptr
088A                FUNC:        
088A   D1                     POP   de   ; de = block* hl = heap*
088B   2A EC 3D               LD   hl,(vHeapPtr)   
088E   AF                     XOR   a   
088F   77                     LD   (hl),a   ; compile null partial_array*
0890   23                     INC   hl   
0891   77                     LD   (hl),a   
0892   23                     INC   hl   
0893   73                     LD   (hl),e   ; compile block*
0894   23                     INC   hl   
0895   72                     LD   (hl),d   
0896   23                     INC   hl   
0897   D1                     POP   de   ; de = block*
0898   73                     LD   (hl),e   ; compile arg_list*
0899   23                     INC   hl   
089A   72                     LD   (hl),d   
089B   23                     INC   hl   
089C   ED 5B EC 3D            LD   de,(vHeapPtr)   ; return func*
08A0   D5                     PUSH   de   
08A1   22 EC 3D               LD   (vHeapPtr),hl   ; heap* += 4
08A4   DD E9                  JP   (ix)   
08A6                             ; Z80 port input
08A6                             ; port -- value
08A6                INPUT:       
08A6   E1                     POP   hl   
08A7   59                     LD   e,c   ; save IP
08A8   4D                     LD   c,l   
08A9   ED 68                  IN   l,(c)   
08AB   26 00                  LD   h,0   
08AD   4B                     LD   c,e   ; restore IP
08AE   E5                     PUSH   hl   
08AF   DD E9                  JP   (ix)   
08B1                KEY:         
08B1   CD 81 00               CALL   getchar   
08B4   26 00                  LD   h,0   
08B6   6F                     LD   l,a   
08B7   E5                     PUSH   hl   
08B8   DD E9                  JP   (ix)   
08BA                             ; Z80 port output
08BA                             ; value port --
08BA                OUTPUT:      
08BA   E1                     POP   hl   
08BB   59                     LD   e,c   ; save IP
08BC   4D                     LD   c,l   
08BD   E1                     POP   hl   
08BE   ED 69                  OUT   (c),l   
08C0   4B                     LD   c,e   ; restore IP
08C1   DD E9                  JP   (ix)   
08C3                             ; select
08C3                             ; index array -- value
08C3                SELECT:      
08C3   D1                     POP   de   ; de = array
08C4   E1                     POP   hl   ; hl = index
08C5   29                     ADD   hl,hl   ; if data width = 2 then double
08C6   19                     ADD   hl,de   ; add addr
08C7   5E                     LD   e,(hl)   
08C8   23                     INC   hl   
08C9   56                     LD   d,(hl)   
08CA   C3 22 06               JP   go1   
08CD                NUMBERS:      
08CD   21 02 00               LD   hl,2   
08D0   C3 85 08               JP   chars1   
08D3                             ; 
08D3                             ; 
08D3                             ; 
08D3                             ; 
08D3                FILTER:      
08D3                MAP:         
08D3                SCAN:        
08D3   DD E9                  JP   (ix)   
08D5                             ; print decimal
08D5                             ; hl = value
08D5                PRTDEC:      
08D5   CB 7C                  BIT   7,h   
08D7   28 0B                  JR   z,prtdec0   
08D9   3E 2D                  LD   a,"-"   
08DB   CD 85 00               CALL   putchar   
08DE   AF                     XOR   a   
08DF   95                     SUB   l   
08E0   6F                     LD   l,a   
08E1   9F                     SBC   a,a   
08E2   94                     SUB   h   
08E3   67                     LD   h,a   
08E4                PRTDEC0:      
08E4   C5                     PUSH   bc   
08E5   0E 00                  LD   c,0   ; leading zeros flag = false
08E7   11 F0 D8               LD   de,-10000   
08EA   CD 06 09               CALL   prtdec1   
08ED   11 18 FC               LD   de,-1000   
08F0   CD 06 09               CALL   prtdec1   
08F3   11 9C FF               LD   de,-100   
08F6   CD 06 09               CALL   prtdec1   
08F9   1E F6                  LD   e,-10   
08FB   CD 06 09               CALL   prtdec1   
08FE   0C                     INC   c   ; flag = true for at least digit
08FF   1E FF                  LD   e,-1   
0901   CD 06 09               CALL   prtdec1   
0904   C1                     POP   bc   
0905   C9                     RET      
0906                PRTDEC1:      
0906   06 2F                  LD   b,"0"-1   
0908                PRTDEC2:      
0908   04                     INC   b   
0909   19                     ADD   hl,de   
090A   38 FC                  JR   c,prtdec2   
090C   ED 52                  SBC   hl,de   
090E   3E 30                  LD   a,"0"   
0910   B8                     CP   b   
0911   20 05                  JR   nz,prtdec3   
0913   AF                     XOR   a   
0914   B1                     OR   c   
0915   C8                     RET   z   
0916   18 01                  JR   prtdec4   
0918                PRTDEC3:      
0918   0C                     INC   c   
0919                PRTDEC4:      
0919   78                     LD   a,b   
091A   C3 85 00               JP   putchar   
091D                PRTHEX:      ; display hl as a 16-bit number in hex.
091D   C5                     PUSH   bc   ; preserve the IP
091E   7C                     LD   a,h   
091F   CD 28 09               CALL   prthex2   
0922   7D                     LD   a,l   
0923   CD 28 09               CALL   prthex2   
0926   C1                     POP   bc   
0927   C9                     RET      
0928                PRTHEX2:      
0928   4F                     LD   c,a   
0929   1F                     RRA      
092A   1F                     RRA      
092B   1F                     RRA      
092C   1F                     RRA      
092D   CD 31 09               CALL   prthex3   
0930   79                     LD   a,c   
0931                PRTHEX3:      
0931   E6 0F                  AND   0x0F   
0933   C6 90                  ADD   a,0x90   
0935   27                     DAA      
0936   CE 40                  ADC   a,0x40   
0938   27                     DAA      
0939   C3 85 00               JP   putchar   
093C                PRTSTR0:      
093C   CD 85 00               CALL   putchar   
093F   23                     INC   hl   
0940                PRTSTR:      
0940   7E                     LD   a,(hl)   
0941   B7                     OR   a   
0942   20 F8                  JR   nz,prtstr0   
0944   C9                     RET      
0945                             ; **************************************************************************
0945                             ; calculate nesting value
0945                             ; a is char to be tested,
0945                             ; e is the nesting value (initially 0)
0945                             ; e is increased by ( and [
0945                             ; e is decreased by ) and ]
0945                             ; e has its bit 7 toggled by `
0945                             ; limited to 127 levels
0945                             ; **************************************************************************
0945                NESTING:      
0945   FE 22                  CP   DQUOTE   ; quote char
0947   28 06                  JR   z,nesting0   
0949   FE 60                  CP   "`"   ; quote char
094B   28 02                  JR   z,nesting0   
094D   18 0A                  JR   nesting1   
094F                NESTING0:      
094F   CB 7B                  BIT   7,e   
0951   28 03                  JR   z,nesting1a   
0953   CB BB                  RES   7,e   
0955   C9                     RET      
0956                NESTING1A:      
0956   CB FB                  SET   7,e   
0958   C9                     RET      
0959                NESTING1:      
0959   CB 7B                  BIT   7,e   
095B   C0                     RET   nz   
095C   FE 7B                  CP   "{"   
095E   28 08                  JR   z,nesting2   
0960   FE 5B                  CP   "["   
0962   28 04                  JR   z,nesting2   
0964   FE 28                  CP   "("   
0966   20 02                  JR   nz,nesting3   
0968                NESTING2:      
0968   1C                     INC   e   
0969   C9                     RET      
096A                NESTING3:      
096A   FE 7D                  CP   "}"   
096C   28 07                  JR   z,nesting4   
096E   FE 5D                  CP   "]"   
0970   28 03                  JR   z,nesting4   
0972   FE 29                  CP   ")"   
0974   C0                     RET   nz   
0975                NESTING4:      
0975   1D                     DEC   e   
0976   C9                     RET      
0977                PROMPT:      
0977   CD 87 09               CALL   printStr   
097A   0D 0A 3E 20 00         .CSTR   "\r\n> "   
097F   C9                     RET      
0980                CRLF:        
0980   CD 87 09               CALL   printStr   
0983   0D 0A 00               .CSTR   "\r\n"   
0986   C9                     RET      
0987                             ; prints a null teminated string
0987                             ; the string should be immedaitely following the call
0987                PRINTSTR:      
0987   E3                     EX   (sp),hl   ; swap			
0988   CD 40 09               CALL   prtstr   
098B   23                     INC   hl   ; inc past NUL
098C   E3                     EX   (sp),hl   ; put it back	
098D   C9                     RET      
098E                INIT:        
098E   DD 2A EA 3D            LD   ix,(vNext)   
0992   FD 21 80 3C            LD   iy,STACK   
0996   21 80 01               LD   hl,isysVars   
0999   11 E6 3D               LD   de,sysVars   
099C   01 10 00               LD   bc,8 * 2   
099F   ED B0                  LDIR      
09A1   21 00 3D               LD   hl,vars   ; 52 vars LO HI
09A4   06 34                  LD   b,26*2   
09A6   AF                     XOR   a   
09A7                INIT0:       
09A7   77                     LD   (hl),a   
09A8   23                     INC   hl   
09A9   10 FC                  DJNZ   init0   
09AB   C9                     RET      
09AC                START:       
09AC   31 80 3C               LD   sp,STACK   ; start of monty
09AF   CD 8E 09               CALL   init   ; setups
09B2   CD 87 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09B5   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09C2                INTERPRET:      
09C2   CD 77 09               CALL   prompt   
09C5   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09C8   ED 43 E8 3D            LD   (vTIBPtr),bc   
09CC                INTERPRET2:      ; calc nesting (a macro might have changed it)
09CC   1E 00                  LD   e,0   ; initilize nesting value
09CE   C5                     PUSH   bc   ; save offset into TIB,
09CF                             ; bc is also the count of chars in TIB
09CF   21 00 3E               LD   hl,TIB   ; hl is start of TIB
09D2   18 06                  JR   interpret4   
09D4                INTERPRET3:      
09D4   7E                     LD   a,(hl)   ; a = char in TIB
09D5   23                     INC   hl   ; inc pointer into TIB
09D6   0B                     DEC   bc   ; dec count of chars in TIB
09D7   CD 45 09               CALL   nesting   ; update nesting value
09DA                INTERPRET4:      
09DA   79                     LD   a,c   ; is count zero?
09DB   B0                     OR   b   
09DC   20 F6                  JR   nz,interpret3   ; if not loop
09DE   C1                     POP   bc   ; restore offset into TIB
09DF                INTERPRET5:      
09DF   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09E2   FE 20                  CP   $20   ; compare to space
09E4   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09E6   FE 00                  CP   $0   ; is it end of string? NUL end of string
09E8                             ; ???? NEEDED?
09E8   28 27                  JR   z,interpret8   
09EA   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09EC   28 10                  JR   z,interpret7   ; if anything else its macro/control
09EE                             ; macro
09EE                             ;  ld (vTIBPtr),bc
09EE                             ;  ld hl,ctrlCodes
09EE                             ;  add a,l			            ; look up key of macros
09EE                             ;  ld l,a
09EE                             ;  ld e,(hl)
09EE                             ;  ld a,e
09EE                             ;  or a
09EE                             ;  jr z,macro1
09EE                             ;  ld d,msb(macros)
09EE                             ;  push de
09EE                             ;  call call		            ; monty exec_ operation and jump to it
09EE                             ;  db DC1,0
09EE                             ; macro1:
09EE                             ;  ld bc,(vTIBPtr)
09EE   18 DC                  JR   interpret2   
09F0                INTERPRET6:      
09F0   21 00 3E               LD   hl,TIB   
09F3   09                     ADD   hl,bc   
09F4   77                     LD   (hl),a   ; store the character in textbuf
09F5   03                     INC   bc   
09F6   CD 85 00               CALL   putchar   ; echo character to screen
09F9   CD 45 09               CALL   nesting   
09FC   18 E1                  JR   interpret5   ; wait for next character
09FE                INTERPRET7:      
09FE   21 00 3E               LD   hl,TIB   
0A01   09                     ADD   hl,bc   
0A02   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A04   23                     INC   hl   
0A05   36 0A                  LD   (hl),"\n"   
0A07   23                     INC   hl   
0A08   03                     INC   bc   
0A09   03                     INC   bc   
0A0A   CD 80 09               CALL   crlf   ; echo character to screen
0A0D   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A0E   B7                     OR   a   
0A0F   20 CE                  JR   nz,interpret5   
0A11                INTERPRET8:      
0A11   ED 43 E8 3D            LD   (vTIBPtr),bc   
0A15   01 00 3E               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A18                             ; we pressed enter
0A18   0B                     DEC   bc   
0A19                NEXT:        
0A19   03                     INC   bc   ; Increment the IP
0A1A   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A1B   FE 20                  CP   " "   ; whitespace?
0A1D   28 FA                  JR   z,next   ; space? ignore
0A1F   38 07                  JR   c,next1   
0A21   6F                     LD   l,a   ; index into table
0A22   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A24   6E                     LD   l,(hl)   ; get low jump address
0A25   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A27   E9                     JP   (hl)   ; Jump to routine
0A28                NEXT1:       
0A28   FE 00                  CP   NUL   ; end of input string?
0A2A   28 03                  JR   z,exit_   
0A2C   C3 C2 09               JP   interpret   ; no, other whitespace, macros?
0A2F                EXIT_:       
0A2F   60 69                  LD   hl,bc   
0A31   E9                     JP   (hl)   
0A32                ERROR:       
0A32   CD 87 09               CALL   printStr   
0A35   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A3C   CD D5 08               CALL   prtdec   
0A3F   C3 C2 09               JP   interpret   
0A42                          ALIGN   $100   
0B00                TESTSSTART:      
0B00                             ; ; test "{: 1 :} /d", 6
0B00                             ; test "3i= {: i/b i-- :} /d + +", 6
0B00                             ; call printStr
0B00                             ; .cstr "Done!"
0B00                             ; HALT
0B00                             ; 
0B00                          ;*Macro unroll:  test "/F", false
0B00   31 80 3C               LD   SP,STACK   
0B03   CD 8E 09               CALL   init   
0B06   CD BC 3B               CALL   execStr   
0B09   2F 46 00               .CSTR   "/F"   
0B0C                          ;*Macro unroll:  expect "/F",false
0B0C   E1                     POP   HL   
0B0D   E5                     PUSH   HL   
0B0E   11 00 00               LD   DE,false   
0B11   B7                     OR   A   
0B12   ED 52                  SBC   HL,DE   
0B14   7D                     LD   A,L   
0B15   B4                     OR   H   
0B16   28 4D                  JR   Z,expectM_0_2130S43   
0B18   CD 87 09               CALL   printStr   
0B1B   43 6F 64 65 3A 20 2F 46 00 .CSTR   "Code: ","/F"   
0B24   CD 87 09               CALL   printStr   
0B27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B36   21 00 00               LD   HL,false   
0B39   CD D5 08               CALL   prtdec   
0B3C   CD 87 09               CALL   printStr   
0B3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B4C   E1                     POP   hl   
0B4D   E5                     PUSH   hl   
0B4E   CD D5 08               CALL   prtdec   
0B51   E1                     POP   hl   
0B52   CD 87 09               CALL   printStr   
0B55   20 28 23 00            .CSTR   " (#"   
0B59   CD 1D 09               CALL   prthex   
0B5C   CD 87 09               CALL   printStr   
0B5F   29 0D 0A 00            .CSTR   ")\r\n"   
0B63   76                     HALT      
0B64   00                     .CSTR      
0B65                EXPECTM_0_2130S43:      
0B65   E1                     POP   HL   
0B66                          ;*Macro unroll:  test "/T", true
0B66   31 80 3C               LD   SP,STACK   
0B69   CD 8E 09               CALL   init   
0B6C   CD BC 3B               CALL   execStr   
0B6F   2F 54 00               .CSTR   "/T"   
0B72                          ;*Macro unroll:  expect "/T",true
0B72   E1                     POP   HL   
0B73   E5                     PUSH   HL   
0B74   11 FF FF               LD   DE,true   
0B77   B7                     OR   A   
0B78   ED 52                  SBC   HL,DE   
0B7A   7D                     LD   A,L   
0B7B   B4                     OR   H   
0B7C   28 4D                  JR   Z,expectM_0_2131S43   
0B7E   CD 87 09               CALL   printStr   
0B81   43 6F 64 65 3A 20 2F 54 00 .CSTR   "Code: ","/T"   
0B8A   CD 87 09               CALL   printStr   
0B8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B9C   21 FF FF               LD   HL,true   
0B9F   CD D5 08               CALL   prtdec   
0BA2   CD 87 09               CALL   printStr   
0BA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BB2   E1                     POP   hl   
0BB3   E5                     PUSH   hl   
0BB4   CD D5 08               CALL   prtdec   
0BB7   E1                     POP   hl   
0BB8   CD 87 09               CALL   printStr   
0BBB   20 28 23 00            .CSTR   " (#"   
0BBF   CD 1D 09               CALL   prthex   
0BC2   CD 87 09               CALL   printStr   
0BC5   29 0D 0A 00            .CSTR   ")\r\n"   
0BC9   76                     HALT      
0BCA   00                     .CSTR      
0BCB                EXPECTM_0_2131S43:      
0BCB   E1                     POP   HL   
0BCC                          ;*Macro unroll:  test "1", 1
0BCC   31 80 3C               LD   SP,STACK   
0BCF   CD 8E 09               CALL   init   
0BD2   CD BC 3B               CALL   execStr   
0BD5   31 00                  .CSTR   "1"   
0BD7                          ;*Macro unroll:  expect "1",1
0BD7   E1                     POP   HL   
0BD8   E5                     PUSH   HL   
0BD9   11 01 00               LD   DE,1   
0BDC   B7                     OR   A   
0BDD   ED 52                  SBC   HL,DE   
0BDF   7D                     LD   A,L   
0BE0   B4                     OR   H   
0BE1   28 4C                  JR   Z,expectM_0_2132S43   
0BE3   CD 87 09               CALL   printStr   
0BE6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0BEE   CD 87 09               CALL   printStr   
0BF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C00   21 01 00               LD   HL,1   
0C03   CD D5 08               CALL   prtdec   
0C06   CD 87 09               CALL   printStr   
0C09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C16   E1                     POP   hl   
0C17   E5                     PUSH   hl   
0C18   CD D5 08               CALL   prtdec   
0C1B   E1                     POP   hl   
0C1C   CD 87 09               CALL   printStr   
0C1F   20 28 23 00            .CSTR   " (#"   
0C23   CD 1D 09               CALL   prthex   
0C26   CD 87 09               CALL   printStr   
0C29   29 0D 0A 00            .CSTR   ")\r\n"   
0C2D   76                     HALT      
0C2E   00                     .CSTR      
0C2F                EXPECTM_0_2132S43:      
0C2F   E1                     POP   HL   
0C30                          ;*Macro unroll:  test "2", 2
0C30   31 80 3C               LD   SP,STACK   
0C33   CD 8E 09               CALL   init   
0C36   CD BC 3B               CALL   execStr   
0C39   32 00                  .CSTR   "2"   
0C3B                          ;*Macro unroll:  expect "2",2
0C3B   E1                     POP   HL   
0C3C   E5                     PUSH   HL   
0C3D   11 02 00               LD   DE,2   
0C40   B7                     OR   A   
0C41   ED 52                  SBC   HL,DE   
0C43   7D                     LD   A,L   
0C44   B4                     OR   H   
0C45   28 4C                  JR   Z,expectM_0_2133S43   
0C47   CD 87 09               CALL   printStr   
0C4A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0C52   CD 87 09               CALL   printStr   
0C55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C64   21 02 00               LD   HL,2   
0C67   CD D5 08               CALL   prtdec   
0C6A   CD 87 09               CALL   printStr   
0C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C7A   E1                     POP   hl   
0C7B   E5                     PUSH   hl   
0C7C   CD D5 08               CALL   prtdec   
0C7F   E1                     POP   hl   
0C80   CD 87 09               CALL   printStr   
0C83   20 28 23 00            .CSTR   " (#"   
0C87   CD 1D 09               CALL   prthex   
0C8A   CD 87 09               CALL   printStr   
0C8D   29 0D 0A 00            .CSTR   ")\r\n"   
0C91   76                     HALT      
0C92   00                     .CSTR      
0C93                EXPECTM_0_2133S43:      
0C93   E1                     POP   HL   
0C94                          ;*Macro unroll:  test "1", 1
0C94   31 80 3C               LD   SP,STACK   
0C97   CD 8E 09               CALL   init   
0C9A   CD BC 3B               CALL   execStr   
0C9D   31 00                  .CSTR   "1"   
0C9F                          ;*Macro unroll:  expect "1",1
0C9F   E1                     POP   HL   
0CA0   E5                     PUSH   HL   
0CA1   11 01 00               LD   DE,1   
0CA4   B7                     OR   A   
0CA5   ED 52                  SBC   HL,DE   
0CA7   7D                     LD   A,L   
0CA8   B4                     OR   H   
0CA9   28 4C                  JR   Z,expectM_0_2134S43   
0CAB   CD 87 09               CALL   printStr   
0CAE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0CB6   CD 87 09               CALL   printStr   
0CB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CC8   21 01 00               LD   HL,1   
0CCB   CD D5 08               CALL   prtdec   
0CCE   CD 87 09               CALL   printStr   
0CD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CDE   E1                     POP   hl   
0CDF   E5                     PUSH   hl   
0CE0   CD D5 08               CALL   prtdec   
0CE3   E1                     POP   hl   
0CE4   CD 87 09               CALL   printStr   
0CE7   20 28 23 00            .CSTR   " (#"   
0CEB   CD 1D 09               CALL   prthex   
0CEE   CD 87 09               CALL   printStr   
0CF1   29 0D 0A 00            .CSTR   ")\r\n"   
0CF5   76                     HALT      
0CF6   00                     .CSTR      
0CF7                EXPECTM_0_2134S43:      
0CF7   E1                     POP   HL   
0CF8                          ;*Macro unroll:  test "0", 0
0CF8   31 80 3C               LD   SP,STACK   
0CFB   CD 8E 09               CALL   init   
0CFE   CD BC 3B               CALL   execStr   
0D01   30 00                  .CSTR   "0"   
0D03                          ;*Macro unroll:  expect "0",0
0D03   E1                     POP   HL   
0D04   E5                     PUSH   HL   
0D05   11 00 00               LD   DE,0   
0D08   B7                     OR   A   
0D09   ED 52                  SBC   HL,DE   
0D0B   7D                     LD   A,L   
0D0C   B4                     OR   H   
0D0D   28 4C                  JR   Z,expectM_0_2135S43   
0D0F   CD 87 09               CALL   printStr   
0D12   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0D1A   CD 87 09               CALL   printStr   
0D1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D2C   21 00 00               LD   HL,0   
0D2F   CD D5 08               CALL   prtdec   
0D32   CD 87 09               CALL   printStr   
0D35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D42   E1                     POP   hl   
0D43   E5                     PUSH   hl   
0D44   CD D5 08               CALL   prtdec   
0D47   E1                     POP   hl   
0D48   CD 87 09               CALL   printStr   
0D4B   20 28 23 00            .CSTR   " (#"   
0D4F   CD 1D 09               CALL   prthex   
0D52   CD 87 09               CALL   printStr   
0D55   29 0D 0A 00            .CSTR   ")\r\n"   
0D59   76                     HALT      
0D5A   00                     .CSTR      
0D5B                EXPECTM_0_2135S43:      
0D5B   E1                     POP   HL   
0D5C                          ;*Macro unroll:  test "10", 10
0D5C   31 80 3C               LD   SP,STACK   
0D5F   CD 8E 09               CALL   init   
0D62   CD BC 3B               CALL   execStr   
0D65   31 30 00               .CSTR   "10"   
0D68                          ;*Macro unroll:  expect "10",10
0D68   E1                     POP   HL   
0D69   E5                     PUSH   HL   
0D6A   11 0A 00               LD   DE,10   
0D6D   B7                     OR   A   
0D6E   ED 52                  SBC   HL,DE   
0D70   7D                     LD   A,L   
0D71   B4                     OR   H   
0D72   28 4D                  JR   Z,expectM_0_2136S43   
0D74   CD 87 09               CALL   printStr   
0D77   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0D80   CD 87 09               CALL   printStr   
0D83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D92   21 0A 00               LD   HL,10   
0D95   CD D5 08               CALL   prtdec   
0D98   CD 87 09               CALL   printStr   
0D9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DA8   E1                     POP   hl   
0DA9   E5                     PUSH   hl   
0DAA   CD D5 08               CALL   prtdec   
0DAD   E1                     POP   hl   
0DAE   CD 87 09               CALL   printStr   
0DB1   20 28 23 00            .CSTR   " (#"   
0DB5   CD 1D 09               CALL   prthex   
0DB8   CD 87 09               CALL   printStr   
0DBB   29 0D 0A 00            .CSTR   ")\r\n"   
0DBF   76                     HALT      
0DC0   00                     .CSTR      
0DC1                EXPECTM_0_2136S43:      
0DC1   E1                     POP   HL   
0DC2                          ;*Macro unroll:  test "123", 123
0DC2   31 80 3C               LD   SP,STACK   
0DC5   CD 8E 09               CALL   init   
0DC8   CD BC 3B               CALL   execStr   
0DCB   31 32 33 00            .CSTR   "123"   
0DCF                          ;*Macro unroll:  expect "123",123
0DCF   E1                     POP   HL   
0DD0   E5                     PUSH   HL   
0DD1   11 7B 00               LD   DE,123   
0DD4   B7                     OR   A   
0DD5   ED 52                  SBC   HL,DE   
0DD7   7D                     LD   A,L   
0DD8   B4                     OR   H   
0DD9   28 4E                  JR   Z,expectM_0_2137S43   
0DDB   CD 87 09               CALL   printStr   
0DDE   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0DE8   CD 87 09               CALL   printStr   
0DEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DFA   21 7B 00               LD   HL,123   
0DFD   CD D5 08               CALL   prtdec   
0E00   CD 87 09               CALL   printStr   
0E03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E10   E1                     POP   hl   
0E11   E5                     PUSH   hl   
0E12   CD D5 08               CALL   prtdec   
0E15   E1                     POP   hl   
0E16   CD 87 09               CALL   printStr   
0E19   20 28 23 00            .CSTR   " (#"   
0E1D   CD 1D 09               CALL   prthex   
0E20   CD 87 09               CALL   printStr   
0E23   29 0D 0A 00            .CSTR   ")\r\n"   
0E27   76                     HALT      
0E28   00                     .CSTR      
0E29                EXPECTM_0_2137S43:      
0E29   E1                     POP   HL   
0E2A                          ;*Macro unroll:  test "-1",-1
0E2A   31 80 3C               LD   SP,STACK   
0E2D   CD 8E 09               CALL   init   
0E30   CD BC 3B               CALL   execStr   
0E33   2D 31 00               .CSTR   "-1"   
0E36                          ;*Macro unroll:  expect "-1",-1
0E36   E1                     POP   HL   
0E37   E5                     PUSH   HL   
0E38   11 FF FF               LD   DE,-1   
0E3B   B7                     OR   A   
0E3C   ED 52                  SBC   HL,DE   
0E3E   7D                     LD   A,L   
0E3F   B4                     OR   H   
0E40   28 4D                  JR   Z,expectM_0_2138S43   
0E42   CD 87 09               CALL   printStr   
0E45   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0E4E   CD 87 09               CALL   printStr   
0E51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E60   21 FF FF               LD   HL,-1   
0E63   CD D5 08               CALL   prtdec   
0E66   CD 87 09               CALL   printStr   
0E69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E76   E1                     POP   hl   
0E77   E5                     PUSH   hl   
0E78   CD D5 08               CALL   prtdec   
0E7B   E1                     POP   hl   
0E7C   CD 87 09               CALL   printStr   
0E7F   20 28 23 00            .CSTR   " (#"   
0E83   CD 1D 09               CALL   prthex   
0E86   CD 87 09               CALL   printStr   
0E89   29 0D 0A 00            .CSTR   ")\r\n"   
0E8D   76                     HALT      
0E8E   00                     .CSTR      
0E8F                EXPECTM_0_2138S43:      
0E8F   E1                     POP   HL   
0E90                          ;*Macro unroll:  test "''", 0
0E90   31 80 3C               LD   SP,STACK   
0E93   CD 8E 09               CALL   init   
0E96   CD BC 3B               CALL   execStr   
0E99   27 27 00               .CSTR   "''"   
0E9C                          ;*Macro unroll:  expect "''",0
0E9C   E1                     POP   HL   
0E9D   E5                     PUSH   HL   
0E9E   11 00 00               LD   DE,0   
0EA1   B7                     OR   A   
0EA2   ED 52                  SBC   HL,DE   
0EA4   7D                     LD   A,L   
0EA5   B4                     OR   H   
0EA6   28 4D                  JR   Z,expectM_0_2139S43   
0EA8   CD 87 09               CALL   printStr   
0EAB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0EB4   CD 87 09               CALL   printStr   
0EB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EC6   21 00 00               LD   HL,0   
0EC9   CD D5 08               CALL   prtdec   
0ECC   CD 87 09               CALL   printStr   
0ECF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EDC   E1                     POP   hl   
0EDD   E5                     PUSH   hl   
0EDE   CD D5 08               CALL   prtdec   
0EE1   E1                     POP   hl   
0EE2   CD 87 09               CALL   printStr   
0EE5   20 28 23 00            .CSTR   " (#"   
0EE9   CD 1D 09               CALL   prthex   
0EEC   CD 87 09               CALL   printStr   
0EEF   29 0D 0A 00            .CSTR   ")\r\n"   
0EF3   76                     HALT      
0EF4   00                     .CSTR      
0EF5                EXPECTM_0_2139S43:      
0EF5   E1                     POP   HL   
0EF6                          ;*Macro unroll:  test "'a'", $61
0EF6   31 80 3C               LD   SP,STACK   
0EF9   CD 8E 09               CALL   init   
0EFC   CD BC 3B               CALL   execStr   
0EFF   27 61 27 00            .CSTR   "'a'"   
0F03                          ;*Macro unroll:  expect "'a'",$61
0F03   E1                     POP   HL   
0F04   E5                     PUSH   HL   
0F05   11 61 00               LD   DE,$61   
0F08   B7                     OR   A   
0F09   ED 52                  SBC   HL,DE   
0F0B   7D                     LD   A,L   
0F0C   B4                     OR   H   
0F0D   28 4E                  JR   Z,expectM_0_2140S43   
0F0F   CD 87 09               CALL   printStr   
0F12   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0F1C   CD 87 09               CALL   printStr   
0F1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F2E   21 61 00               LD   HL,$61   
0F31   CD D5 08               CALL   prtdec   
0F34   CD 87 09               CALL   printStr   
0F37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F44   E1                     POP   hl   
0F45   E5                     PUSH   hl   
0F46   CD D5 08               CALL   prtdec   
0F49   E1                     POP   hl   
0F4A   CD 87 09               CALL   printStr   
0F4D   20 28 23 00            .CSTR   " (#"   
0F51   CD 1D 09               CALL   prthex   
0F54   CD 87 09               CALL   printStr   
0F57   29 0D 0A 00            .CSTR   ")\r\n"   
0F5B   76                     HALT      
0F5C   00                     .CSTR      
0F5D                EXPECTM_0_2140S43:      
0F5D   E1                     POP   HL   
0F5E                          ;*Macro unroll:  test "'\\''", $27
0F5E   31 80 3C               LD   SP,STACK   
0F61   CD 8E 09               CALL   init   
0F64   CD BC 3B               CALL   execStr   
0F67   27 5C 27 27 00         .CSTR   "'\\''"   
0F6C                          ;*Macro unroll:  expect "'\\''",$27
0F6C   E1                     POP   HL   
0F6D   E5                     PUSH   HL   
0F6E   11 27 00               LD   DE,$27   
0F71   B7                     OR   A   
0F72   ED 52                  SBC   HL,DE   
0F74   7D                     LD   A,L   
0F75   B4                     OR   H   
0F76   28 4F                  JR   Z,expectM_0_2141S43   
0F78   CD 87 09               CALL   printStr   
0F7B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
0F86   CD 87 09               CALL   printStr   
0F89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F98   21 27 00               LD   HL,$27   
0F9B   CD D5 08               CALL   prtdec   
0F9E   CD 87 09               CALL   printStr   
0FA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FAE   E1                     POP   hl   
0FAF   E5                     PUSH   hl   
0FB0   CD D5 08               CALL   prtdec   
0FB3   E1                     POP   hl   
0FB4   CD 87 09               CALL   printStr   
0FB7   20 28 23 00            .CSTR   " (#"   
0FBB   CD 1D 09               CALL   prthex   
0FBE   CD 87 09               CALL   printStr   
0FC1   29 0D 0A 00            .CSTR   ")\r\n"   
0FC5   76                     HALT      
0FC6   00                     .CSTR      
0FC7                EXPECTM_0_2141S43:      
0FC7   E1                     POP   HL   
0FC8                          ;*Macro unroll:  test "#10", $10
0FC8   31 80 3C               LD   SP,STACK   
0FCB   CD 8E 09               CALL   init   
0FCE   CD BC 3B               CALL   execStr   
0FD1   23 31 30 00            .CSTR   "#10"   
0FD5                          ;*Macro unroll:  expect "#10",$10
0FD5   E1                     POP   HL   
0FD6   E5                     PUSH   HL   
0FD7   11 10 00               LD   DE,$10   
0FDA   B7                     OR   A   
0FDB   ED 52                  SBC   HL,DE   
0FDD   7D                     LD   A,L   
0FDE   B4                     OR   H   
0FDF   28 4E                  JR   Z,expectM_0_2142S43   
0FE1   CD 87 09               CALL   printStr   
0FE4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
0FEE   CD 87 09               CALL   printStr   
0FF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1000   21 10 00               LD   HL,$10   
1003   CD D5 08               CALL   prtdec   
1006   CD 87 09               CALL   printStr   
1009   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1016   E1                     POP   hl   
1017   E5                     PUSH   hl   
1018   CD D5 08               CALL   prtdec   
101B   E1                     POP   hl   
101C   CD 87 09               CALL   printStr   
101F   20 28 23 00            .CSTR   " (#"   
1023   CD 1D 09               CALL   prthex   
1026   CD 87 09               CALL   printStr   
1029   29 0D 0A 00            .CSTR   ")\r\n"   
102D   76                     HALT      
102E   00                     .CSTR      
102F                EXPECTM_0_2142S43:      
102F   E1                     POP   HL   
1030                          ;*Macro unroll:  test "#FF", $FF
1030   31 80 3C               LD   SP,STACK   
1033   CD 8E 09               CALL   init   
1036   CD BC 3B               CALL   execStr   
1039   23 46 46 00            .CSTR   "#FF"   
103D                          ;*Macro unroll:  expect "#FF",$FF
103D   E1                     POP   HL   
103E   E5                     PUSH   HL   
103F   11 FF 00               LD   DE,$FF   
1042   B7                     OR   A   
1043   ED 52                  SBC   HL,DE   
1045   7D                     LD   A,L   
1046   B4                     OR   H   
1047   28 4E                  JR   Z,expectM_0_2143S43   
1049   CD 87 09               CALL   printStr   
104C   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
1056   CD 87 09               CALL   printStr   
1059   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1068   21 FF 00               LD   HL,$FF   
106B   CD D5 08               CALL   prtdec   
106E   CD 87 09               CALL   printStr   
1071   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
107E   E1                     POP   hl   
107F   E5                     PUSH   hl   
1080   CD D5 08               CALL   prtdec   
1083   E1                     POP   hl   
1084   CD 87 09               CALL   printStr   
1087   20 28 23 00            .CSTR   " (#"   
108B   CD 1D 09               CALL   prthex   
108E   CD 87 09               CALL   printStr   
1091   29 0D 0A 00            .CSTR   ")\r\n"   
1095   76                     HALT      
1096   00                     .CSTR      
1097                EXPECTM_0_2143S43:      
1097   E1                     POP   HL   
1098                          ;*Macro unroll:  test "-1 2 +",1
1098   31 80 3C               LD   SP,STACK   
109B   CD 8E 09               CALL   init   
109E   CD BC 3B               CALL   execStr   
10A1   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
10A8                          ;*Macro unroll:  expect "-1 2 +",1
10A8   E1                     POP   HL   
10A9   E5                     PUSH   HL   
10AA   11 01 00               LD   DE,1   
10AD   B7                     OR   A   
10AE   ED 52                  SBC   HL,DE   
10B0   7D                     LD   A,L   
10B1   B4                     OR   H   
10B2   28 51                  JR   Z,expectM_0_2144S43   
10B4   CD 87 09               CALL   printStr   
10B7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
10C4   CD 87 09               CALL   printStr   
10C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10D6   21 01 00               LD   HL,1   
10D9   CD D5 08               CALL   prtdec   
10DC   CD 87 09               CALL   printStr   
10DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10EC   E1                     POP   hl   
10ED   E5                     PUSH   hl   
10EE   CD D5 08               CALL   prtdec   
10F1   E1                     POP   hl   
10F2   CD 87 09               CALL   printStr   
10F5   20 28 23 00            .CSTR   " (#"   
10F9   CD 1D 09               CALL   prthex   
10FC   CD 87 09               CALL   printStr   
10FF   29 0D 0A 00            .CSTR   ")\r\n"   
1103   76                     HALT      
1104   00                     .CSTR      
1105                EXPECTM_0_2144S43:      
1105   E1                     POP   HL   
1106                          ;*Macro unroll:  test "-1 1 +",0
1106   31 80 3C               LD   SP,STACK   
1109   CD 8E 09               CALL   init   
110C   CD BC 3B               CALL   execStr   
110F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1116                          ;*Macro unroll:  expect "-1 1 +",0
1116   E1                     POP   HL   
1117   E5                     PUSH   HL   
1118   11 00 00               LD   DE,0   
111B   B7                     OR   A   
111C   ED 52                  SBC   HL,DE   
111E   7D                     LD   A,L   
111F   B4                     OR   H   
1120   28 51                  JR   Z,expectM_0_2145S43   
1122   CD 87 09               CALL   printStr   
1125   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1132   CD 87 09               CALL   printStr   
1135   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1144   21 00 00               LD   HL,0   
1147   CD D5 08               CALL   prtdec   
114A   CD 87 09               CALL   printStr   
114D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
115A   E1                     POP   hl   
115B   E5                     PUSH   hl   
115C   CD D5 08               CALL   prtdec   
115F   E1                     POP   hl   
1160   CD 87 09               CALL   printStr   
1163   20 28 23 00            .CSTR   " (#"   
1167   CD 1D 09               CALL   prthex   
116A   CD 87 09               CALL   printStr   
116D   29 0D 0A 00            .CSTR   ")\r\n"   
1171   76                     HALT      
1172   00                     .CSTR      
1173                EXPECTM_0_2145S43:      
1173   E1                     POP   HL   
1174                          ;*Macro unroll:  test "1 2 +", 3
1174   31 80 3C               LD   SP,STACK   
1177   CD 8E 09               CALL   init   
117A   CD BC 3B               CALL   execStr   
117D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1183                          ;*Macro unroll:  expect "1 2 +",3
1183   E1                     POP   HL   
1184   E5                     PUSH   HL   
1185   11 03 00               LD   DE,3   
1188   B7                     OR   A   
1189   ED 52                  SBC   HL,DE   
118B   7D                     LD   A,L   
118C   B4                     OR   H   
118D   28 50                  JR   Z,expectM_0_2146S43   
118F   CD 87 09               CALL   printStr   
1192   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
119E   CD 87 09               CALL   printStr   
11A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11B0   21 03 00               LD   HL,3   
11B3   CD D5 08               CALL   prtdec   
11B6   CD 87 09               CALL   printStr   
11B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11C6   E1                     POP   hl   
11C7   E5                     PUSH   hl   
11C8   CD D5 08               CALL   prtdec   
11CB   E1                     POP   hl   
11CC   CD 87 09               CALL   printStr   
11CF   20 28 23 00            .CSTR   " (#"   
11D3   CD 1D 09               CALL   prthex   
11D6   CD 87 09               CALL   printStr   
11D9   29 0D 0A 00            .CSTR   ")\r\n"   
11DD   76                     HALT      
11DE   00                     .CSTR      
11DF                EXPECTM_0_2146S43:      
11DF   E1                     POP   HL   
11E0                          ;*Macro unroll:  test "4 1 2 +", 3
11E0   31 80 3C               LD   SP,STACK   
11E3   CD 8E 09               CALL   init   
11E6   CD BC 3B               CALL   execStr   
11E9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
11F1                          ;*Macro unroll:  expect "4 1 2 +",3
11F1   E1                     POP   HL   
11F2   E5                     PUSH   HL   
11F3   11 03 00               LD   DE,3   
11F6   B7                     OR   A   
11F7   ED 52                  SBC   HL,DE   
11F9   7D                     LD   A,L   
11FA   B4                     OR   H   
11FB   28 52                  JR   Z,expectM_0_2147S43   
11FD   CD 87 09               CALL   printStr   
1200   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
120E   CD 87 09               CALL   printStr   
1211   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1220   21 03 00               LD   HL,3   
1223   CD D5 08               CALL   prtdec   
1226   CD 87 09               CALL   printStr   
1229   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1236   E1                     POP   hl   
1237   E5                     PUSH   hl   
1238   CD D5 08               CALL   prtdec   
123B   E1                     POP   hl   
123C   CD 87 09               CALL   printStr   
123F   20 28 23 00            .CSTR   " (#"   
1243   CD 1D 09               CALL   prthex   
1246   CD 87 09               CALL   printStr   
1249   29 0D 0A 00            .CSTR   ")\r\n"   
124D   76                     HALT      
124E   00                     .CSTR      
124F                EXPECTM_0_2147S43:      
124F   E1                     POP   HL   
1250                          ;*Macro unroll:  test "123 456 +", 123+456
1250   31 80 3C               LD   SP,STACK   
1253   CD 8E 09               CALL   init   
1256   CD BC 3B               CALL   execStr   
1259   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1263                          ;*Macro unroll:  expect "123 456 +",123+456
1263   E1                     POP   HL   
1264   E5                     PUSH   HL   
1265   11 43 02               LD   DE,123+456   
1268   B7                     OR   A   
1269   ED 52                  SBC   HL,DE   
126B   7D                     LD   A,L   
126C   B4                     OR   H   
126D   28 54                  JR   Z,expectM_0_2148S43   
126F   CD 87 09               CALL   printStr   
1272   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1282   CD 87 09               CALL   printStr   
1285   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1294   21 43 02               LD   HL,123+456   
1297   CD D5 08               CALL   prtdec   
129A   CD 87 09               CALL   printStr   
129D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12AA   E1                     POP   hl   
12AB   E5                     PUSH   hl   
12AC   CD D5 08               CALL   prtdec   
12AF   E1                     POP   hl   
12B0   CD 87 09               CALL   printStr   
12B3   20 28 23 00            .CSTR   " (#"   
12B7   CD 1D 09               CALL   prthex   
12BA   CD 87 09               CALL   printStr   
12BD   29 0D 0A 00            .CSTR   ")\r\n"   
12C1   76                     HALT      
12C2   00                     .CSTR      
12C3                EXPECTM_0_2148S43:      
12C3   E1                     POP   HL   
12C4                          ;*Macro unroll:  test "64 128 +", 64+128
12C4   31 80 3C               LD   SP,STACK   
12C7   CD 8E 09               CALL   init   
12CA   CD BC 3B               CALL   execStr   
12CD   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
12D6                          ;*Macro unroll:  expect "64 128 +",64+128
12D6   E1                     POP   HL   
12D7   E5                     PUSH   HL   
12D8   11 C0 00               LD   DE,64+128   
12DB   B7                     OR   A   
12DC   ED 52                  SBC   HL,DE   
12DE   7D                     LD   A,L   
12DF   B4                     OR   H   
12E0   28 53                  JR   Z,expectM_0_2149S43   
12E2   CD 87 09               CALL   printStr   
12E5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
12F4   CD 87 09               CALL   printStr   
12F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1306   21 C0 00               LD   HL,64+128   
1309   CD D5 08               CALL   prtdec   
130C   CD 87 09               CALL   printStr   
130F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
131C   E1                     POP   hl   
131D   E5                     PUSH   hl   
131E   CD D5 08               CALL   prtdec   
1321   E1                     POP   hl   
1322   CD 87 09               CALL   printStr   
1325   20 28 23 00            .CSTR   " (#"   
1329   CD 1D 09               CALL   prthex   
132C   CD 87 09               CALL   printStr   
132F   29 0D 0A 00            .CSTR   ")\r\n"   
1333   76                     HALT      
1334   00                     .CSTR      
1335                EXPECTM_0_2149S43:      
1335   E1                     POP   HL   
1336                          ;*Macro unroll:  test "1 2 +", 3
1336   31 80 3C               LD   SP,STACK   
1339   CD 8E 09               CALL   init   
133C   CD BC 3B               CALL   execStr   
133F   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1345                          ;*Macro unroll:  expect "1 2 +",3
1345   E1                     POP   HL   
1346   E5                     PUSH   HL   
1347   11 03 00               LD   DE,3   
134A   B7                     OR   A   
134B   ED 52                  SBC   HL,DE   
134D   7D                     LD   A,L   
134E   B4                     OR   H   
134F   28 50                  JR   Z,expectM_0_2150S43   
1351   CD 87 09               CALL   printStr   
1354   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1360   CD 87 09               CALL   printStr   
1363   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1372   21 03 00               LD   HL,3   
1375   CD D5 08               CALL   prtdec   
1378   CD 87 09               CALL   printStr   
137B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1388   E1                     POP   hl   
1389   E5                     PUSH   hl   
138A   CD D5 08               CALL   prtdec   
138D   E1                     POP   hl   
138E   CD 87 09               CALL   printStr   
1391   20 28 23 00            .CSTR   " (#"   
1395   CD 1D 09               CALL   prthex   
1398   CD 87 09               CALL   printStr   
139B   29 0D 0A 00            .CSTR   ")\r\n"   
139F   76                     HALT      
13A0   00                     .CSTR      
13A1                EXPECTM_0_2150S43:      
13A1   E1                     POP   HL   
13A2                          ;*Macro unroll:  test "1 a= a++ a",2
13A2   31 80 3C               LD   SP,STACK   
13A5   CD 8E 09               CALL   init   
13A8   CD BC 3B               CALL   execStr   
13AB   31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1 a= a++ a"   
13B6                          ;*Macro unroll:  expect "1 a= a++ a",2
13B6   E1                     POP   HL   
13B7   E5                     PUSH   HL   
13B8   11 02 00               LD   DE,2   
13BB   B7                     OR   A   
13BC   ED 52                  SBC   HL,DE   
13BE   7D                     LD   A,L   
13BF   B4                     OR   H   
13C0   28 55                  JR   Z,expectM_0_2151S43   
13C2   CD 87 09               CALL   printStr   
13C5   43 6F 64 65 3A 20 31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1 a= a++ a"   
13D6   CD 87 09               CALL   printStr   
13D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E8   21 02 00               LD   HL,2   
13EB   CD D5 08               CALL   prtdec   
13EE   CD 87 09               CALL   printStr   
13F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13FE   E1                     POP   hl   
13FF   E5                     PUSH   hl   
1400   CD D5 08               CALL   prtdec   
1403   E1                     POP   hl   
1404   CD 87 09               CALL   printStr   
1407   20 28 23 00            .CSTR   " (#"   
140B   CD 1D 09               CALL   prthex   
140E   CD 87 09               CALL   printStr   
1411   29 0D 0A 00            .CSTR   ")\r\n"   
1415   76                     HALT      
1416   00                     .CSTR      
1417                EXPECTM_0_2151S43:      
1417   E1                     POP   HL   
1418                          ;*Macro unroll:  test "1 a= 2 a += a",3
1418   31 80 3C               LD   SP,STACK   
141B   CD 8E 09               CALL   init   
141E   CD BC 3B               CALL   execStr   
1421   31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "1 a= 2 a += a"   
142F                          ;*Macro unroll:  expect "1 a= 2 a += a",3
142F   E1                     POP   HL   
1430   E5                     PUSH   HL   
1431   11 03 00               LD   DE,3   
1434   B7                     OR   A   
1435   ED 52                  SBC   HL,DE   
1437   7D                     LD   A,L   
1438   B4                     OR   H   
1439   28 58                  JR   Z,expectM_0_2152S43   
143B   CD 87 09               CALL   printStr   
143E   43 6F 64 65 3A 20 31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "Code: ","1 a= 2 a += a"   
1452   CD 87 09               CALL   printStr   
1455   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1464   21 03 00               LD   HL,3   
1467   CD D5 08               CALL   prtdec   
146A   CD 87 09               CALL   printStr   
146D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
147A   E1                     POP   hl   
147B   E5                     PUSH   hl   
147C   CD D5 08               CALL   prtdec   
147F   E1                     POP   hl   
1480   CD 87 09               CALL   printStr   
1483   20 28 23 00            .CSTR   " (#"   
1487   CD 1D 09               CALL   prthex   
148A   CD 87 09               CALL   printStr   
148D   29 0D 0A 00            .CSTR   ")\r\n"   
1491   76                     HALT      
1492   00                     .CSTR      
1493                EXPECTM_0_2152S43:      
1493   E1                     POP   HL   
1494                          ;*Macro unroll:  test "-1 -1 -",0
1494   31 80 3C               LD   SP,STACK   
1497   CD 8E 09               CALL   init   
149A   CD BC 3B               CALL   execStr   
149D   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
14A5                          ;*Macro unroll:  expect "-1 -1 -",0
14A5   E1                     POP   HL   
14A6   E5                     PUSH   HL   
14A7   11 00 00               LD   DE,0   
14AA   B7                     OR   A   
14AB   ED 52                  SBC   HL,DE   
14AD   7D                     LD   A,L   
14AE   B4                     OR   H   
14AF   28 52                  JR   Z,expectM_0_2153S43   
14B1   CD 87 09               CALL   printStr   
14B4   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
14C2   CD 87 09               CALL   printStr   
14C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14D4   21 00 00               LD   HL,0   
14D7   CD D5 08               CALL   prtdec   
14DA   CD 87 09               CALL   printStr   
14DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14EA   E1                     POP   hl   
14EB   E5                     PUSH   hl   
14EC   CD D5 08               CALL   prtdec   
14EF   E1                     POP   hl   
14F0   CD 87 09               CALL   printStr   
14F3   20 28 23 00            .CSTR   " (#"   
14F7   CD 1D 09               CALL   prthex   
14FA   CD 87 09               CALL   printStr   
14FD   29 0D 0A 00            .CSTR   ")\r\n"   
1501   76                     HALT      
1502   00                     .CSTR      
1503                EXPECTM_0_2153S43:      
1503   E1                     POP   HL   
1504                          ;*Macro unroll:  test "5 3 -", 2
1504   31 80 3C               LD   SP,STACK   
1507   CD 8E 09               CALL   init   
150A   CD BC 3B               CALL   execStr   
150D   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1513                          ;*Macro unroll:  expect "5 3 -",2
1513   E1                     POP   HL   
1514   E5                     PUSH   HL   
1515   11 02 00               LD   DE,2   
1518   B7                     OR   A   
1519   ED 52                  SBC   HL,DE   
151B   7D                     LD   A,L   
151C   B4                     OR   H   
151D   28 50                  JR   Z,expectM_0_2154S43   
151F   CD 87 09               CALL   printStr   
1522   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
152E   CD 87 09               CALL   printStr   
1531   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1540   21 02 00               LD   HL,2   
1543   CD D5 08               CALL   prtdec   
1546   CD 87 09               CALL   printStr   
1549   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1556   E1                     POP   hl   
1557   E5                     PUSH   hl   
1558   CD D5 08               CALL   prtdec   
155B   E1                     POP   hl   
155C   CD 87 09               CALL   printStr   
155F   20 28 23 00            .CSTR   " (#"   
1563   CD 1D 09               CALL   prthex   
1566   CD 87 09               CALL   printStr   
1569   29 0D 0A 00            .CSTR   ")\r\n"   
156D   76                     HALT      
156E   00                     .CSTR      
156F                EXPECTM_0_2154S43:      
156F   E1                     POP   HL   
1570                          ;*Macro unroll:  test "2 1 -",1
1570   31 80 3C               LD   SP,STACK   
1573   CD 8E 09               CALL   init   
1576   CD BC 3B               CALL   execStr   
1579   32 20 31 20 2D 00      .CSTR   "2 1 -"   
157F                          ;*Macro unroll:  expect "2 1 -",1
157F   E1                     POP   HL   
1580   E5                     PUSH   HL   
1581   11 01 00               LD   DE,1   
1584   B7                     OR   A   
1585   ED 52                  SBC   HL,DE   
1587   7D                     LD   A,L   
1588   B4                     OR   H   
1589   28 50                  JR   Z,expectM_0_2155S43   
158B   CD 87 09               CALL   printStr   
158E   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
159A   CD 87 09               CALL   printStr   
159D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15AC   21 01 00               LD   HL,1   
15AF   CD D5 08               CALL   prtdec   
15B2   CD 87 09               CALL   printStr   
15B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15C2   E1                     POP   hl   
15C3   E5                     PUSH   hl   
15C4   CD D5 08               CALL   prtdec   
15C7   E1                     POP   hl   
15C8   CD 87 09               CALL   printStr   
15CB   20 28 23 00            .CSTR   " (#"   
15CF   CD 1D 09               CALL   prthex   
15D2   CD 87 09               CALL   printStr   
15D5   29 0D 0A 00            .CSTR   ")\r\n"   
15D9   76                     HALT      
15DA   00                     .CSTR      
15DB                EXPECTM_0_2155S43:      
15DB   E1                     POP   HL   
15DC                          ;*Macro unroll:  test "3 a= a-- a",2
15DC   31 80 3C               LD   SP,STACK   
15DF   CD 8E 09               CALL   init   
15E2   CD BC 3B               CALL   execStr   
15E5   33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3 a= a-- a"   
15F0                          ;*Macro unroll:  expect "3 a= a-- a",2
15F0   E1                     POP   HL   
15F1   E5                     PUSH   HL   
15F2   11 02 00               LD   DE,2   
15F5   B7                     OR   A   
15F6   ED 52                  SBC   HL,DE   
15F8   7D                     LD   A,L   
15F9   B4                     OR   H   
15FA   28 55                  JR   Z,expectM_0_2156S43   
15FC   CD 87 09               CALL   printStr   
15FF   43 6F 64 65 3A 20 33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3 a= a-- a"   
1610   CD 87 09               CALL   printStr   
1613   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1622   21 02 00               LD   HL,2   
1625   CD D5 08               CALL   prtdec   
1628   CD 87 09               CALL   printStr   
162B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1638   E1                     POP   hl   
1639   E5                     PUSH   hl   
163A   CD D5 08               CALL   prtdec   
163D   E1                     POP   hl   
163E   CD 87 09               CALL   printStr   
1641   20 28 23 00            .CSTR   " (#"   
1645   CD 1D 09               CALL   prthex   
1648   CD 87 09               CALL   printStr   
164B   29 0D 0A 00            .CSTR   ")\r\n"   
164F   76                     HALT      
1650   00                     .CSTR      
1651                EXPECTM_0_2156S43:      
1651   E1                     POP   HL   
1652                          ;*Macro unroll:  test "4 a= a 2 -= a",2
1652   31 80 3C               LD   SP,STACK   
1655   CD 8E 09               CALL   init   
1658   CD BC 3B               CALL   execStr   
165B   34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "4 a= a 2 -= a"   
1669                          ;*Macro unroll:  expect "4 a= a 2 -= a",2
1669   E1                     POP   HL   
166A   E5                     PUSH   HL   
166B   11 02 00               LD   DE,2   
166E   B7                     OR   A   
166F   ED 52                  SBC   HL,DE   
1671   7D                     LD   A,L   
1672   B4                     OR   H   
1673   28 58                  JR   Z,expectM_0_2157S43   
1675   CD 87 09               CALL   printStr   
1678   43 6F 64 65 3A 20 34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "Code: ","4 a= a 2 -= a"   
168C   CD 87 09               CALL   printStr   
168F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
169E   21 02 00               LD   HL,2   
16A1   CD D5 08               CALL   prtdec   
16A4   CD 87 09               CALL   printStr   
16A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16B4   E1                     POP   hl   
16B5   E5                     PUSH   hl   
16B6   CD D5 08               CALL   prtdec   
16B9   E1                     POP   hl   
16BA   CD 87 09               CALL   printStr   
16BD   20 28 23 00            .CSTR   " (#"   
16C1   CD 1D 09               CALL   prthex   
16C4   CD 87 09               CALL   printStr   
16C7   29 0D 0A 00            .CSTR   ")\r\n"   
16CB   76                     HALT      
16CC   00                     .CSTR      
16CD                EXPECTM_0_2157S43:      
16CD   E1                     POP   HL   
16CE                          ;*Macro unroll:  test "3 5 &", 1
16CE   31 80 3C               LD   SP,STACK   
16D1   CD 8E 09               CALL   init   
16D4   CD BC 3B               CALL   execStr   
16D7   33 20 35 20 26 00      .CSTR   "3 5 &"   
16DD                          ;*Macro unroll:  expect "3 5 &",1
16DD   E1                     POP   HL   
16DE   E5                     PUSH   HL   
16DF   11 01 00               LD   DE,1   
16E2   B7                     OR   A   
16E3   ED 52                  SBC   HL,DE   
16E5   7D                     LD   A,L   
16E6   B4                     OR   H   
16E7   28 50                  JR   Z,expectM_0_2158S43   
16E9   CD 87 09               CALL   printStr   
16EC   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
16F8   CD 87 09               CALL   printStr   
16FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
170A   21 01 00               LD   HL,1   
170D   CD D5 08               CALL   prtdec   
1710   CD 87 09               CALL   printStr   
1713   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1720   E1                     POP   hl   
1721   E5                     PUSH   hl   
1722   CD D5 08               CALL   prtdec   
1725   E1                     POP   hl   
1726   CD 87 09               CALL   printStr   
1729   20 28 23 00            .CSTR   " (#"   
172D   CD 1D 09               CALL   prthex   
1730   CD 87 09               CALL   printStr   
1733   29 0D 0A 00            .CSTR   ")\r\n"   
1737   76                     HALT      
1738   00                     .CSTR      
1739                EXPECTM_0_2158S43:      
1739   E1                     POP   HL   
173A                          ;*Macro unroll:  test "3 a= 5 a &= a",1
173A   31 80 3C               LD   SP,STACK   
173D   CD 8E 09               CALL   init   
1740   CD BC 3B               CALL   execStr   
1743   33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "3 a= 5 a &= a"   
1751                          ;*Macro unroll:  expect "3 a= 5 a &= a",1
1751   E1                     POP   HL   
1752   E5                     PUSH   HL   
1753   11 01 00               LD   DE,1   
1756   B7                     OR   A   
1757   ED 52                  SBC   HL,DE   
1759   7D                     LD   A,L   
175A   B4                     OR   H   
175B   28 58                  JR   Z,expectM_0_2159S43   
175D   CD 87 09               CALL   printStr   
1760   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a &= a"   
1774   CD 87 09               CALL   printStr   
1777   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1786   21 01 00               LD   HL,1   
1789   CD D5 08               CALL   prtdec   
178C   CD 87 09               CALL   printStr   
178F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
179C   E1                     POP   hl   
179D   E5                     PUSH   hl   
179E   CD D5 08               CALL   prtdec   
17A1   E1                     POP   hl   
17A2   CD 87 09               CALL   printStr   
17A5   20 28 23 00            .CSTR   " (#"   
17A9   CD 1D 09               CALL   prthex   
17AC   CD 87 09               CALL   printStr   
17AF   29 0D 0A 00            .CSTR   ")\r\n"   
17B3   76                     HALT      
17B4   00                     .CSTR      
17B5                EXPECTM_0_2159S43:      
17B5   E1                     POP   HL   
17B6                          ;*Macro unroll:  test "3 5 |", 7
17B6   31 80 3C               LD   SP,STACK   
17B9   CD 8E 09               CALL   init   
17BC   CD BC 3B               CALL   execStr   
17BF   33 20 35 20 7C 00      .CSTR   "3 5 |"   
17C5                          ;*Macro unroll:  expect "3 5 |",7
17C5   E1                     POP   HL   
17C6   E5                     PUSH   HL   
17C7   11 07 00               LD   DE,7   
17CA   B7                     OR   A   
17CB   ED 52                  SBC   HL,DE   
17CD   7D                     LD   A,L   
17CE   B4                     OR   H   
17CF   28 50                  JR   Z,expectM_0_2160S43   
17D1   CD 87 09               CALL   printStr   
17D4   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
17E0   CD 87 09               CALL   printStr   
17E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17F2   21 07 00               LD   HL,7   
17F5   CD D5 08               CALL   prtdec   
17F8   CD 87 09               CALL   printStr   
17FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1808   E1                     POP   hl   
1809   E5                     PUSH   hl   
180A   CD D5 08               CALL   prtdec   
180D   E1                     POP   hl   
180E   CD 87 09               CALL   printStr   
1811   20 28 23 00            .CSTR   " (#"   
1815   CD 1D 09               CALL   prthex   
1818   CD 87 09               CALL   printStr   
181B   29 0D 0A 00            .CSTR   ")\r\n"   
181F   76                     HALT      
1820   00                     .CSTR      
1821                EXPECTM_0_2160S43:      
1821   E1                     POP   HL   
1822                          ;*Macro unroll:  test "3 a= 5 a |= a",7
1822   31 80 3C               LD   SP,STACK   
1825   CD 8E 09               CALL   init   
1828   CD BC 3B               CALL   execStr   
182B   33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "3 a= 5 a |= a"   
1839                          ;*Macro unroll:  expect "3 a= 5 a |= a",7
1839   E1                     POP   HL   
183A   E5                     PUSH   HL   
183B   11 07 00               LD   DE,7   
183E   B7                     OR   A   
183F   ED 52                  SBC   HL,DE   
1841   7D                     LD   A,L   
1842   B4                     OR   H   
1843   28 58                  JR   Z,expectM_0_2161S43   
1845   CD 87 09               CALL   printStr   
1848   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a |= a"   
185C   CD 87 09               CALL   printStr   
185F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
186E   21 07 00               LD   HL,7   
1871   CD D5 08               CALL   prtdec   
1874   CD 87 09               CALL   printStr   
1877   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1884   E1                     POP   hl   
1885   E5                     PUSH   hl   
1886   CD D5 08               CALL   prtdec   
1889   E1                     POP   hl   
188A   CD 87 09               CALL   printStr   
188D   20 28 23 00            .CSTR   " (#"   
1891   CD 1D 09               CALL   prthex   
1894   CD 87 09               CALL   printStr   
1897   29 0D 0A 00            .CSTR   ")\r\n"   
189B   76                     HALT      
189C   00                     .CSTR      
189D                EXPECTM_0_2161S43:      
189D   E1                     POP   HL   
189E                          ;*Macro unroll:  test "3 5 /x", 6
189E   31 80 3C               LD   SP,STACK   
18A1   CD 8E 09               CALL   init   
18A4   CD BC 3B               CALL   execStr   
18A7   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
18AE                          ;*Macro unroll:  expect "3 5 /x",6
18AE   E1                     POP   HL   
18AF   E5                     PUSH   HL   
18B0   11 06 00               LD   DE,6   
18B3   B7                     OR   A   
18B4   ED 52                  SBC   HL,DE   
18B6   7D                     LD   A,L   
18B7   B4                     OR   H   
18B8   28 51                  JR   Z,expectM_0_2162S43   
18BA   CD 87 09               CALL   printStr   
18BD   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
18CA   CD 87 09               CALL   printStr   
18CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18DC   21 06 00               LD   HL,6   
18DF   CD D5 08               CALL   prtdec   
18E2   CD 87 09               CALL   printStr   
18E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18F2   E1                     POP   hl   
18F3   E5                     PUSH   hl   
18F4   CD D5 08               CALL   prtdec   
18F7   E1                     POP   hl   
18F8   CD 87 09               CALL   printStr   
18FB   20 28 23 00            .CSTR   " (#"   
18FF   CD 1D 09               CALL   prthex   
1902   CD 87 09               CALL   printStr   
1905   29 0D 0A 00            .CSTR   ")\r\n"   
1909   76                     HALT      
190A   00                     .CSTR      
190B                EXPECTM_0_2162S43:      
190B   E1                     POP   HL   
190C                          ;*Macro unroll:  test "3 a= 5 a /x a= a",6
190C   31 80 3C               LD   SP,STACK   
190F   CD 8E 09               CALL   init   
1912   CD BC 3B               CALL   execStr   
1915   33 20 61 3D 20 35 20 61 20 2F 78 20 61 3D 20 61 00 .CSTR   "3 a= 5 a /x a= a"   
1926                          ;*Macro unroll:  expect "3 a= 5 a /x a= a",6
1926   E1                     POP   HL   
1927   E5                     PUSH   HL   
1928   11 06 00               LD   DE,6   
192B   B7                     OR   A   
192C   ED 52                  SBC   HL,DE   
192E   7D                     LD   A,L   
192F   B4                     OR   H   
1930   28 5B                  JR   Z,expectM_0_2163S43   
1932   CD 87 09               CALL   printStr   
1935   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a /x a= a"   
194C   CD 87 09               CALL   printStr   
194F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
195E   21 06 00               LD   HL,6   
1961   CD D5 08               CALL   prtdec   
1964   CD 87 09               CALL   printStr   
1967   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1974   E1                     POP   hl   
1975   E5                     PUSH   hl   
1976   CD D5 08               CALL   prtdec   
1979   E1                     POP   hl   
197A   CD 87 09               CALL   printStr   
197D   20 28 23 00            .CSTR   " (#"   
1981   CD 1D 09               CALL   prthex   
1984   CD 87 09               CALL   printStr   
1987   29 0D 0A 00            .CSTR   ")\r\n"   
198B   76                     HALT      
198C   00                     .CSTR      
198D                EXPECTM_0_2163S43:      
198D   E1                     POP   HL   
198E                          ;*Macro unroll:  test "2 3 *", 6
198E   31 80 3C               LD   SP,STACK   
1991   CD 8E 09               CALL   init   
1994   CD BC 3B               CALL   execStr   
1997   32 20 33 20 2A 00      .CSTR   "2 3 *"   
199D                          ;*Macro unroll:  expect "2 3 *",6
199D   E1                     POP   HL   
199E   E5                     PUSH   HL   
199F   11 06 00               LD   DE,6   
19A2   B7                     OR   A   
19A3   ED 52                  SBC   HL,DE   
19A5   7D                     LD   A,L   
19A6   B4                     OR   H   
19A7   28 50                  JR   Z,expectM_0_2164S43   
19A9   CD 87 09               CALL   printStr   
19AC   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
19B8   CD 87 09               CALL   printStr   
19BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CA   21 06 00               LD   HL,6   
19CD   CD D5 08               CALL   prtdec   
19D0   CD 87 09               CALL   printStr   
19D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19E0   E1                     POP   hl   
19E1   E5                     PUSH   hl   
19E2   CD D5 08               CALL   prtdec   
19E5   E1                     POP   hl   
19E6   CD 87 09               CALL   printStr   
19E9   20 28 23 00            .CSTR   " (#"   
19ED   CD 1D 09               CALL   prthex   
19F0   CD 87 09               CALL   printStr   
19F3   29 0D 0A 00            .CSTR   ")\r\n"   
19F7   76                     HALT      
19F8   00                     .CSTR      
19F9                EXPECTM_0_2164S43:      
19F9   E1                     POP   HL   
19FA                          ;*Macro unroll:  test "3 x= 2 x *= x",6
19FA   31 80 3C               LD   SP,STACK   
19FD   CD 8E 09               CALL   init   
1A00   CD BC 3B               CALL   execStr   
1A03   33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "3 x= 2 x *= x"   
1A11                          ;*Macro unroll:  expect "3 x= 2 x *= x",6
1A11   E1                     POP   HL   
1A12   E5                     PUSH   HL   
1A13   11 06 00               LD   DE,6   
1A16   B7                     OR   A   
1A17   ED 52                  SBC   HL,DE   
1A19   7D                     LD   A,L   
1A1A   B4                     OR   H   
1A1B   28 58                  JR   Z,expectM_0_2165S43   
1A1D   CD 87 09               CALL   printStr   
1A20   43 6F 64 65 3A 20 33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "Code: ","3 x= 2 x *= x"   
1A34   CD 87 09               CALL   printStr   
1A37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A46   21 06 00               LD   HL,6   
1A49   CD D5 08               CALL   prtdec   
1A4C   CD 87 09               CALL   printStr   
1A4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A5C   E1                     POP   hl   
1A5D   E5                     PUSH   hl   
1A5E   CD D5 08               CALL   prtdec   
1A61   E1                     POP   hl   
1A62   CD 87 09               CALL   printStr   
1A65   20 28 23 00            .CSTR   " (#"   
1A69   CD 1D 09               CALL   prthex   
1A6C   CD 87 09               CALL   printStr   
1A6F   29 0D 0A 00            .CSTR   ")\r\n"   
1A73   76                     HALT      
1A74   00                     .CSTR      
1A75                EXPECTM_0_2165S43:      
1A75   E1                     POP   HL   
1A76                          ;*Macro unroll:  test "1 2 3 + *", 5
1A76   31 80 3C               LD   SP,STACK   
1A79   CD 8E 09               CALL   init   
1A7C   CD BC 3B               CALL   execStr   
1A7F   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1A89                          ;*Macro unroll:  expect "1 2 3 + *",5
1A89   E1                     POP   HL   
1A8A   E5                     PUSH   HL   
1A8B   11 05 00               LD   DE,5   
1A8E   B7                     OR   A   
1A8F   ED 52                  SBC   HL,DE   
1A91   7D                     LD   A,L   
1A92   B4                     OR   H   
1A93   28 54                  JR   Z,expectM_0_2166S43   
1A95   CD 87 09               CALL   printStr   
1A98   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1AA8   CD 87 09               CALL   printStr   
1AAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ABA   21 05 00               LD   HL,5   
1ABD   CD D5 08               CALL   prtdec   
1AC0   CD 87 09               CALL   printStr   
1AC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AD0   E1                     POP   hl   
1AD1   E5                     PUSH   hl   
1AD2   CD D5 08               CALL   prtdec   
1AD5   E1                     POP   hl   
1AD6   CD 87 09               CALL   printStr   
1AD9   20 28 23 00            .CSTR   " (#"   
1ADD   CD 1D 09               CALL   prthex   
1AE0   CD 87 09               CALL   printStr   
1AE3   29 0D 0A 00            .CSTR   ")\r\n"   
1AE7   76                     HALT      
1AE8   00                     .CSTR      
1AE9                EXPECTM_0_2166S43:      
1AE9   E1                     POP   HL   
1AEA                          ;*Macro unroll:  test "7 3 /", 2
1AEA   31 80 3C               LD   SP,STACK   
1AED   CD 8E 09               CALL   init   
1AF0   CD BC 3B               CALL   execStr   
1AF3   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1AF9                          ;*Macro unroll:  expect "7 3 /",2
1AF9   E1                     POP   HL   
1AFA   E5                     PUSH   HL   
1AFB   11 02 00               LD   DE,2   
1AFE   B7                     OR   A   
1AFF   ED 52                  SBC   HL,DE   
1B01   7D                     LD   A,L   
1B02   B4                     OR   H   
1B03   28 50                  JR   Z,expectM_0_2167S43   
1B05   CD 87 09               CALL   printStr   
1B08   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1B14   CD 87 09               CALL   printStr   
1B17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B26   21 02 00               LD   HL,2   
1B29   CD D5 08               CALL   prtdec   
1B2C   CD 87 09               CALL   printStr   
1B2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B3C   E1                     POP   hl   
1B3D   E5                     PUSH   hl   
1B3E   CD D5 08               CALL   prtdec   
1B41   E1                     POP   hl   
1B42   CD 87 09               CALL   printStr   
1B45   20 28 23 00            .CSTR   " (#"   
1B49   CD 1D 09               CALL   prthex   
1B4C   CD 87 09               CALL   printStr   
1B4F   29 0D 0A 00            .CSTR   ")\r\n"   
1B53   76                     HALT      
1B54   00                     .CSTR      
1B55                EXPECTM_0_2167S43:      
1B55   E1                     POP   HL   
1B56                          ;*Macro unroll:  test "7 x= x 3 /= x", 2
1B56   31 80 3C               LD   SP,STACK   
1B59   CD 8E 09               CALL   init   
1B5C   CD BC 3B               CALL   execStr   
1B5F   37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "7 x= x 3 /= x"   
1B6D                          ;*Macro unroll:  expect "7 x= x 3 /= x",2
1B6D   E1                     POP   HL   
1B6E   E5                     PUSH   HL   
1B6F   11 02 00               LD   DE,2   
1B72   B7                     OR   A   
1B73   ED 52                  SBC   HL,DE   
1B75   7D                     LD   A,L   
1B76   B4                     OR   H   
1B77   28 58                  JR   Z,expectM_0_2168S43   
1B79   CD 87 09               CALL   printStr   
1B7C   43 6F 64 65 3A 20 37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "Code: ","7 x= x 3 /= x"   
1B90   CD 87 09               CALL   printStr   
1B93   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BA2   21 02 00               LD   HL,2   
1BA5   CD D5 08               CALL   prtdec   
1BA8   CD 87 09               CALL   printStr   
1BAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BB8   E1                     POP   hl   
1BB9   E5                     PUSH   hl   
1BBA   CD D5 08               CALL   prtdec   
1BBD   E1                     POP   hl   
1BBE   CD 87 09               CALL   printStr   
1BC1   20 28 23 00            .CSTR   " (#"   
1BC5   CD 1D 09               CALL   prthex   
1BC8   CD 87 09               CALL   printStr   
1BCB   29 0D 0A 00            .CSTR   ")\r\n"   
1BCF   76                     HALT      
1BD0   00                     .CSTR      
1BD1                EXPECTM_0_2168S43:      
1BD1   E1                     POP   HL   
1BD2                          ;*Macro unroll:  test "7 3 / _", 1
1BD2   31 80 3C               LD   SP,STACK   
1BD5   CD 8E 09               CALL   init   
1BD8   CD BC 3B               CALL   execStr   
1BDB   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1BE3                          ;*Macro unroll:  expect "7 3 / _",1
1BE3   E1                     POP   HL   
1BE4   E5                     PUSH   HL   
1BE5   11 01 00               LD   DE,1   
1BE8   B7                     OR   A   
1BE9   ED 52                  SBC   HL,DE   
1BEB   7D                     LD   A,L   
1BEC   B4                     OR   H   
1BED   28 52                  JR   Z,expectM_0_2169S43   
1BEF   CD 87 09               CALL   printStr   
1BF2   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1C00   CD 87 09               CALL   printStr   
1C03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C12   21 01 00               LD   HL,1   
1C15   CD D5 08               CALL   prtdec   
1C18   CD 87 09               CALL   printStr   
1C1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C28   E1                     POP   hl   
1C29   E5                     PUSH   hl   
1C2A   CD D5 08               CALL   prtdec   
1C2D   E1                     POP   hl   
1C2E   CD 87 09               CALL   printStr   
1C31   20 28 23 00            .CSTR   " (#"   
1C35   CD 1D 09               CALL   prthex   
1C38   CD 87 09               CALL   printStr   
1C3B   29 0D 0A 00            .CSTR   ")\r\n"   
1C3F   76                     HALT      
1C40   00                     .CSTR      
1C41                EXPECTM_0_2169S43:      
1C41   E1                     POP   HL   
1C42                          ;*Macro unroll:  test "7 3 /", 2
1C42   31 80 3C               LD   SP,STACK   
1C45   CD 8E 09               CALL   init   
1C48   CD BC 3B               CALL   execStr   
1C4B   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1C51                          ;*Macro unroll:  expect "7 3 /",2
1C51   E1                     POP   HL   
1C52   E5                     PUSH   HL   
1C53   11 02 00               LD   DE,2   
1C56   B7                     OR   A   
1C57   ED 52                  SBC   HL,DE   
1C59   7D                     LD   A,L   
1C5A   B4                     OR   H   
1C5B   28 50                  JR   Z,expectM_0_2170S43   
1C5D   CD 87 09               CALL   printStr   
1C60   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1C6C   CD 87 09               CALL   printStr   
1C6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C7E   21 02 00               LD   HL,2   
1C81   CD D5 08               CALL   prtdec   
1C84   CD 87 09               CALL   printStr   
1C87   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C94   E1                     POP   hl   
1C95   E5                     PUSH   hl   
1C96   CD D5 08               CALL   prtdec   
1C99   E1                     POP   hl   
1C9A   CD 87 09               CALL   printStr   
1C9D   20 28 23 00            .CSTR   " (#"   
1CA1   CD 1D 09               CALL   prthex   
1CA4   CD 87 09               CALL   printStr   
1CA7   29 0D 0A 00            .CSTR   ")\r\n"   
1CAB   76                     HALT      
1CAC   00                     .CSTR      
1CAD                EXPECTM_0_2170S43:      
1CAD   E1                     POP   HL   
1CAE                          ;*Macro unroll:  test "2 3 ==", FALSE
1CAE   31 80 3C               LD   SP,STACK   
1CB1   CD 8E 09               CALL   init   
1CB4   CD BC 3B               CALL   execStr   
1CB7   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1CBE                          ;*Macro unroll:  expect "2 3 ==",FALSE
1CBE   E1                     POP   HL   
1CBF   E5                     PUSH   HL   
1CC0   11 00 00               LD   DE,FALSE   
1CC3   B7                     OR   A   
1CC4   ED 52                  SBC   HL,DE   
1CC6   7D                     LD   A,L   
1CC7   B4                     OR   H   
1CC8   28 51                  JR   Z,expectM_0_2171S43   
1CCA   CD 87 09               CALL   printStr   
1CCD   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1CDA   CD 87 09               CALL   printStr   
1CDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CEC   21 00 00               LD   HL,FALSE   
1CEF   CD D5 08               CALL   prtdec   
1CF2   CD 87 09               CALL   printStr   
1CF5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D02   E1                     POP   hl   
1D03   E5                     PUSH   hl   
1D04   CD D5 08               CALL   prtdec   
1D07   E1                     POP   hl   
1D08   CD 87 09               CALL   printStr   
1D0B   20 28 23 00            .CSTR   " (#"   
1D0F   CD 1D 09               CALL   prthex   
1D12   CD 87 09               CALL   printStr   
1D15   29 0D 0A 00            .CSTR   ")\r\n"   
1D19   76                     HALT      
1D1A   00                     .CSTR      
1D1B                EXPECTM_0_2171S43:      
1D1B   E1                     POP   HL   
1D1C                          ;*Macro unroll:  test "3 3 ==", TRUE
1D1C   31 80 3C               LD   SP,STACK   
1D1F   CD 8E 09               CALL   init   
1D22   CD BC 3B               CALL   execStr   
1D25   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1D2C                          ;*Macro unroll:  expect "3 3 ==",TRUE
1D2C   E1                     POP   HL   
1D2D   E5                     PUSH   HL   
1D2E   11 FF FF               LD   DE,TRUE   
1D31   B7                     OR   A   
1D32   ED 52                  SBC   HL,DE   
1D34   7D                     LD   A,L   
1D35   B4                     OR   H   
1D36   28 51                  JR   Z,expectM_0_2172S43   
1D38   CD 87 09               CALL   printStr   
1D3B   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1D48   CD 87 09               CALL   printStr   
1D4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D5A   21 FF FF               LD   HL,TRUE   
1D5D   CD D5 08               CALL   prtdec   
1D60   CD 87 09               CALL   printStr   
1D63   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D70   E1                     POP   hl   
1D71   E5                     PUSH   hl   
1D72   CD D5 08               CALL   prtdec   
1D75   E1                     POP   hl   
1D76   CD 87 09               CALL   printStr   
1D79   20 28 23 00            .CSTR   " (#"   
1D7D   CD 1D 09               CALL   prthex   
1D80   CD 87 09               CALL   printStr   
1D83   29 0D 0A 00            .CSTR   ")\r\n"   
1D87   76                     HALT      
1D88   00                     .CSTR      
1D89                EXPECTM_0_2172S43:      
1D89   E1                     POP   HL   
1D8A                          ;*Macro unroll:  test "1 2 <", TRUE
1D8A   31 80 3C               LD   SP,STACK   
1D8D   CD 8E 09               CALL   init   
1D90   CD BC 3B               CALL   execStr   
1D93   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1D99                          ;*Macro unroll:  expect "1 2 <",TRUE
1D99   E1                     POP   HL   
1D9A   E5                     PUSH   HL   
1D9B   11 FF FF               LD   DE,TRUE   
1D9E   B7                     OR   A   
1D9F   ED 52                  SBC   HL,DE   
1DA1   7D                     LD   A,L   
1DA2   B4                     OR   H   
1DA3   28 50                  JR   Z,expectM_0_2173S43   
1DA5   CD 87 09               CALL   printStr   
1DA8   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1DB4   CD 87 09               CALL   printStr   
1DB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DC6   21 FF FF               LD   HL,TRUE   
1DC9   CD D5 08               CALL   prtdec   
1DCC   CD 87 09               CALL   printStr   
1DCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DDC   E1                     POP   hl   
1DDD   E5                     PUSH   hl   
1DDE   CD D5 08               CALL   prtdec   
1DE1   E1                     POP   hl   
1DE2   CD 87 09               CALL   printStr   
1DE5   20 28 23 00            .CSTR   " (#"   
1DE9   CD 1D 09               CALL   prthex   
1DEC   CD 87 09               CALL   printStr   
1DEF   29 0D 0A 00            .CSTR   ")\r\n"   
1DF3   76                     HALT      
1DF4   00                     .CSTR      
1DF5                EXPECTM_0_2173S43:      
1DF5   E1                     POP   HL   
1DF6                          ;*Macro unroll:  test "2 1 <", FALSE
1DF6   31 80 3C               LD   SP,STACK   
1DF9   CD 8E 09               CALL   init   
1DFC   CD BC 3B               CALL   execStr   
1DFF   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1E05                          ;*Macro unroll:  expect "2 1 <",FALSE
1E05   E1                     POP   HL   
1E06   E5                     PUSH   HL   
1E07   11 00 00               LD   DE,FALSE   
1E0A   B7                     OR   A   
1E0B   ED 52                  SBC   HL,DE   
1E0D   7D                     LD   A,L   
1E0E   B4                     OR   H   
1E0F   28 50                  JR   Z,expectM_0_2174S43   
1E11   CD 87 09               CALL   printStr   
1E14   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1E20   CD 87 09               CALL   printStr   
1E23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E32   21 00 00               LD   HL,FALSE   
1E35   CD D5 08               CALL   prtdec   
1E38   CD 87 09               CALL   printStr   
1E3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E48   E1                     POP   hl   
1E49   E5                     PUSH   hl   
1E4A   CD D5 08               CALL   prtdec   
1E4D   E1                     POP   hl   
1E4E   CD 87 09               CALL   printStr   
1E51   20 28 23 00            .CSTR   " (#"   
1E55   CD 1D 09               CALL   prthex   
1E58   CD 87 09               CALL   printStr   
1E5B   29 0D 0A 00            .CSTR   ")\r\n"   
1E5F   76                     HALT      
1E60   00                     .CSTR      
1E61                EXPECTM_0_2174S43:      
1E61   E1                     POP   HL   
1E62                          ;*Macro unroll:  test "2 3 <", TRUE
1E62   31 80 3C               LD   SP,STACK   
1E65   CD 8E 09               CALL   init   
1E68   CD BC 3B               CALL   execStr   
1E6B   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1E71                          ;*Macro unroll:  expect "2 3 <",TRUE
1E71   E1                     POP   HL   
1E72   E5                     PUSH   HL   
1E73   11 FF FF               LD   DE,TRUE   
1E76   B7                     OR   A   
1E77   ED 52                  SBC   HL,DE   
1E79   7D                     LD   A,L   
1E7A   B4                     OR   H   
1E7B   28 50                  JR   Z,expectM_0_2175S43   
1E7D   CD 87 09               CALL   printStr   
1E80   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1E8C   CD 87 09               CALL   printStr   
1E8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E9E   21 FF FF               LD   HL,TRUE   
1EA1   CD D5 08               CALL   prtdec   
1EA4   CD 87 09               CALL   printStr   
1EA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EB4   E1                     POP   hl   
1EB5   E5                     PUSH   hl   
1EB6   CD D5 08               CALL   prtdec   
1EB9   E1                     POP   hl   
1EBA   CD 87 09               CALL   printStr   
1EBD   20 28 23 00            .CSTR   " (#"   
1EC1   CD 1D 09               CALL   prthex   
1EC4   CD 87 09               CALL   printStr   
1EC7   29 0D 0A 00            .CSTR   ")\r\n"   
1ECB   76                     HALT      
1ECC   00                     .CSTR      
1ECD                EXPECTM_0_2175S43:      
1ECD   E1                     POP   HL   
1ECE                          ;*Macro unroll:  test "3 3 <", FALSE
1ECE   31 80 3C               LD   SP,STACK   
1ED1   CD 8E 09               CALL   init   
1ED4   CD BC 3B               CALL   execStr   
1ED7   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1EDD                          ;*Macro unroll:  expect "3 3 <",FALSE
1EDD   E1                     POP   HL   
1EDE   E5                     PUSH   HL   
1EDF   11 00 00               LD   DE,FALSE   
1EE2   B7                     OR   A   
1EE3   ED 52                  SBC   HL,DE   
1EE5   7D                     LD   A,L   
1EE6   B4                     OR   H   
1EE7   28 50                  JR   Z,expectM_0_2176S43   
1EE9   CD 87 09               CALL   printStr   
1EEC   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1EF8   CD 87 09               CALL   printStr   
1EFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F0A   21 00 00               LD   HL,FALSE   
1F0D   CD D5 08               CALL   prtdec   
1F10   CD 87 09               CALL   printStr   
1F13   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F20   E1                     POP   hl   
1F21   E5                     PUSH   hl   
1F22   CD D5 08               CALL   prtdec   
1F25   E1                     POP   hl   
1F26   CD 87 09               CALL   printStr   
1F29   20 28 23 00            .CSTR   " (#"   
1F2D   CD 1D 09               CALL   prthex   
1F30   CD 87 09               CALL   printStr   
1F33   29 0D 0A 00            .CSTR   ")\r\n"   
1F37   76                     HALT      
1F38   00                     .CSTR      
1F39                EXPECTM_0_2176S43:      
1F39   E1                     POP   HL   
1F3A                          ;*Macro unroll:  test "1 2 >", FALSE
1F3A   31 80 3C               LD   SP,STACK   
1F3D   CD 8E 09               CALL   init   
1F40   CD BC 3B               CALL   execStr   
1F43   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1F49                          ;*Macro unroll:  expect "1 2 >",FALSE
1F49   E1                     POP   HL   
1F4A   E5                     PUSH   HL   
1F4B   11 00 00               LD   DE,FALSE   
1F4E   B7                     OR   A   
1F4F   ED 52                  SBC   HL,DE   
1F51   7D                     LD   A,L   
1F52   B4                     OR   H   
1F53   28 50                  JR   Z,expectM_0_2177S43   
1F55   CD 87 09               CALL   printStr   
1F58   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1F64   CD 87 09               CALL   printStr   
1F67   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F76   21 00 00               LD   HL,FALSE   
1F79   CD D5 08               CALL   prtdec   
1F7C   CD 87 09               CALL   printStr   
1F7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F8C   E1                     POP   hl   
1F8D   E5                     PUSH   hl   
1F8E   CD D5 08               CALL   prtdec   
1F91   E1                     POP   hl   
1F92   CD 87 09               CALL   printStr   
1F95   20 28 23 00            .CSTR   " (#"   
1F99   CD 1D 09               CALL   prthex   
1F9C   CD 87 09               CALL   printStr   
1F9F   29 0D 0A 00            .CSTR   ")\r\n"   
1FA3   76                     HALT      
1FA4   00                     .CSTR      
1FA5                EXPECTM_0_2177S43:      
1FA5   E1                     POP   HL   
1FA6                          ;*Macro unroll:  test "2 1 >", TRUE
1FA6   31 80 3C               LD   SP,STACK   
1FA9   CD 8E 09               CALL   init   
1FAC   CD BC 3B               CALL   execStr   
1FAF   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1FB5                          ;*Macro unroll:  expect "2 1 >",TRUE
1FB5   E1                     POP   HL   
1FB6   E5                     PUSH   HL   
1FB7   11 FF FF               LD   DE,TRUE   
1FBA   B7                     OR   A   
1FBB   ED 52                  SBC   HL,DE   
1FBD   7D                     LD   A,L   
1FBE   B4                     OR   H   
1FBF   28 50                  JR   Z,expectM_0_2178S43   
1FC1   CD 87 09               CALL   printStr   
1FC4   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1FD0   CD 87 09               CALL   printStr   
1FD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FE2   21 FF FF               LD   HL,TRUE   
1FE5   CD D5 08               CALL   prtdec   
1FE8   CD 87 09               CALL   printStr   
1FEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FF8   E1                     POP   hl   
1FF9   E5                     PUSH   hl   
1FFA   CD D5 08               CALL   prtdec   
1FFD   E1                     POP   hl   
1FFE   CD 87 09               CALL   printStr   
2001   20 28 23 00            .CSTR   " (#"   
2005   CD 1D 09               CALL   prthex   
2008   CD 87 09               CALL   printStr   
200B   29 0D 0A 00            .CSTR   ")\r\n"   
200F   76                     HALT      
2010   00                     .CSTR      
2011                EXPECTM_0_2178S43:      
2011   E1                     POP   HL   
2012                          ;*Macro unroll:  test "3 3 >", FALSE
2012   31 80 3C               LD   SP,STACK   
2015   CD 8E 09               CALL   init   
2018   CD BC 3B               CALL   execStr   
201B   33 20 33 20 3E 00      .CSTR   "3 3 >"   
2021                          ;*Macro unroll:  expect "3 3 >",FALSE
2021   E1                     POP   HL   
2022   E5                     PUSH   HL   
2023   11 00 00               LD   DE,FALSE   
2026   B7                     OR   A   
2027   ED 52                  SBC   HL,DE   
2029   7D                     LD   A,L   
202A   B4                     OR   H   
202B   28 50                  JR   Z,expectM_0_2179S43   
202D   CD 87 09               CALL   printStr   
2030   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
203C   CD 87 09               CALL   printStr   
203F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
204E   21 00 00               LD   HL,FALSE   
2051   CD D5 08               CALL   prtdec   
2054   CD 87 09               CALL   printStr   
2057   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2064   E1                     POP   hl   
2065   E5                     PUSH   hl   
2066   CD D5 08               CALL   prtdec   
2069   E1                     POP   hl   
206A   CD 87 09               CALL   printStr   
206D   20 28 23 00            .CSTR   " (#"   
2071   CD 1D 09               CALL   prthex   
2074   CD 87 09               CALL   printStr   
2077   29 0D 0A 00            .CSTR   ")\r\n"   
207B   76                     HALT      
207C   00                     .CSTR      
207D                EXPECTM_0_2179S43:      
207D   E1                     POP   HL   
207E                          ;*Macro unroll:  test "4 3 >", TRUE
207E   31 80 3C               LD   SP,STACK   
2081   CD 8E 09               CALL   init   
2084   CD BC 3B               CALL   execStr   
2087   34 20 33 20 3E 00      .CSTR   "4 3 >"   
208D                          ;*Macro unroll:  expect "4 3 >",TRUE
208D   E1                     POP   HL   
208E   E5                     PUSH   HL   
208F   11 FF FF               LD   DE,TRUE   
2092   B7                     OR   A   
2093   ED 52                  SBC   HL,DE   
2095   7D                     LD   A,L   
2096   B4                     OR   H   
2097   28 50                  JR   Z,expectM_0_2180S43   
2099   CD 87 09               CALL   printStr   
209C   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
20A8   CD 87 09               CALL   printStr   
20AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20BA   21 FF FF               LD   HL,TRUE   
20BD   CD D5 08               CALL   prtdec   
20C0   CD 87 09               CALL   printStr   
20C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20D0   E1                     POP   hl   
20D1   E5                     PUSH   hl   
20D2   CD D5 08               CALL   prtdec   
20D5   E1                     POP   hl   
20D6   CD 87 09               CALL   printStr   
20D9   20 28 23 00            .CSTR   " (#"   
20DD   CD 1D 09               CALL   prthex   
20E0   CD 87 09               CALL   printStr   
20E3   29 0D 0A 00            .CSTR   ")\r\n"   
20E7   76                     HALT      
20E8   00                     .CSTR      
20E9                EXPECTM_0_2180S43:      
20E9   E1                     POP   HL   
20EA                          ;*Macro unroll:  test "2 2 <=", TRUE
20EA   31 80 3C               LD   SP,STACK   
20ED   CD 8E 09               CALL   init   
20F0   CD BC 3B               CALL   execStr   
20F3   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
20FA                          ;*Macro unroll:  expect "2 2 <=",TRUE
20FA   E1                     POP   HL   
20FB   E5                     PUSH   HL   
20FC   11 FF FF               LD   DE,TRUE   
20FF   B7                     OR   A   
2100   ED 52                  SBC   HL,DE   
2102   7D                     LD   A,L   
2103   B4                     OR   H   
2104   28 51                  JR   Z,expectM_0_2181S43   
2106   CD 87 09               CALL   printStr   
2109   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2116   CD 87 09               CALL   printStr   
2119   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2128   21 FF FF               LD   HL,TRUE   
212B   CD D5 08               CALL   prtdec   
212E   CD 87 09               CALL   printStr   
2131   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
213E   E1                     POP   hl   
213F   E5                     PUSH   hl   
2140   CD D5 08               CALL   prtdec   
2143   E1                     POP   hl   
2144   CD 87 09               CALL   printStr   
2147   20 28 23 00            .CSTR   " (#"   
214B   CD 1D 09               CALL   prthex   
214E   CD 87 09               CALL   printStr   
2151   29 0D 0A 00            .CSTR   ")\r\n"   
2155   76                     HALT      
2156   00                     .CSTR      
2157                EXPECTM_0_2181S43:      
2157   E1                     POP   HL   
2158                          ;*Macro unroll:  test "2 2 >=", TRUE
2158   31 80 3C               LD   SP,STACK   
215B   CD 8E 09               CALL   init   
215E   CD BC 3B               CALL   execStr   
2161   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2168                          ;*Macro unroll:  expect "2 2 >=",TRUE
2168   E1                     POP   HL   
2169   E5                     PUSH   HL   
216A   11 FF FF               LD   DE,TRUE   
216D   B7                     OR   A   
216E   ED 52                  SBC   HL,DE   
2170   7D                     LD   A,L   
2171   B4                     OR   H   
2172   28 51                  JR   Z,expectM_0_2182S43   
2174   CD 87 09               CALL   printStr   
2177   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2184   CD 87 09               CALL   printStr   
2187   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2196   21 FF FF               LD   HL,TRUE   
2199   CD D5 08               CALL   prtdec   
219C   CD 87 09               CALL   printStr   
219F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21AC   E1                     POP   hl   
21AD   E5                     PUSH   hl   
21AE   CD D5 08               CALL   prtdec   
21B1   E1                     POP   hl   
21B2   CD 87 09               CALL   printStr   
21B5   20 28 23 00            .CSTR   " (#"   
21B9   CD 1D 09               CALL   prthex   
21BC   CD 87 09               CALL   printStr   
21BF   29 0D 0A 00            .CSTR   ")\r\n"   
21C3   76                     HALT      
21C4   00                     .CSTR      
21C5                EXPECTM_0_2182S43:      
21C5   E1                     POP   HL   
21C6                          ;*Macro unroll:  test "3 1 <<", 6
21C6   31 80 3C               LD   SP,STACK   
21C9   CD 8E 09               CALL   init   
21CC   CD BC 3B               CALL   execStr   
21CF   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
21D6                          ;*Macro unroll:  expect "3 1 <<",6
21D6   E1                     POP   HL   
21D7   E5                     PUSH   HL   
21D8   11 06 00               LD   DE,6   
21DB   B7                     OR   A   
21DC   ED 52                  SBC   HL,DE   
21DE   7D                     LD   A,L   
21DF   B4                     OR   H   
21E0   28 51                  JR   Z,expectM_0_2183S43   
21E2   CD 87 09               CALL   printStr   
21E5   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
21F2   CD 87 09               CALL   printStr   
21F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2204   21 06 00               LD   HL,6   
2207   CD D5 08               CALL   prtdec   
220A   CD 87 09               CALL   printStr   
220D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
221A   E1                     POP   hl   
221B   E5                     PUSH   hl   
221C   CD D5 08               CALL   prtdec   
221F   E1                     POP   hl   
2220   CD 87 09               CALL   printStr   
2223   20 28 23 00            .CSTR   " (#"   
2227   CD 1D 09               CALL   prthex   
222A   CD 87 09               CALL   printStr   
222D   29 0D 0A 00            .CSTR   ")\r\n"   
2231   76                     HALT      
2232   00                     .CSTR      
2233                EXPECTM_0_2183S43:      
2233   E1                     POP   HL   
2234                          ;*Macro unroll:  test "10 1 >>", 5
2234   31 80 3C               LD   SP,STACK   
2237   CD 8E 09               CALL   init   
223A   CD BC 3B               CALL   execStr   
223D   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2245                          ;*Macro unroll:  expect "10 1 >>",5
2245   E1                     POP   HL   
2246   E5                     PUSH   HL   
2247   11 05 00               LD   DE,5   
224A   B7                     OR   A   
224B   ED 52                  SBC   HL,DE   
224D   7D                     LD   A,L   
224E   B4                     OR   H   
224F   28 52                  JR   Z,expectM_0_2184S43   
2251   CD 87 09               CALL   printStr   
2254   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2262   CD 87 09               CALL   printStr   
2265   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2274   21 05 00               LD   HL,5   
2277   CD D5 08               CALL   prtdec   
227A   CD 87 09               CALL   printStr   
227D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
228A   E1                     POP   hl   
228B   E5                     PUSH   hl   
228C   CD D5 08               CALL   prtdec   
228F   E1                     POP   hl   
2290   CD 87 09               CALL   printStr   
2293   20 28 23 00            .CSTR   " (#"   
2297   CD 1D 09               CALL   prthex   
229A   CD 87 09               CALL   printStr   
229D   29 0D 0A 00            .CSTR   ")\r\n"   
22A1   76                     HALT      
22A2   00                     .CSTR      
22A3                EXPECTM_0_2184S43:      
22A3   E1                     POP   HL   
22A4                          ;*Macro unroll:  test "1 x = x", 1
22A4   31 80 3C               LD   SP,STACK   
22A7   CD 8E 09               CALL   init   
22AA   CD BC 3B               CALL   execStr   
22AD   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
22B5                          ;*Macro unroll:  expect "1 x = x",1
22B5   E1                     POP   HL   
22B6   E5                     PUSH   HL   
22B7   11 01 00               LD   DE,1   
22BA   B7                     OR   A   
22BB   ED 52                  SBC   HL,DE   
22BD   7D                     LD   A,L   
22BE   B4                     OR   H   
22BF   28 52                  JR   Z,expectM_0_2185S43   
22C1   CD 87 09               CALL   printStr   
22C4   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
22D2   CD 87 09               CALL   printStr   
22D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22E4   21 01 00               LD   HL,1   
22E7   CD D5 08               CALL   prtdec   
22EA   CD 87 09               CALL   printStr   
22ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22FA   E1                     POP   hl   
22FB   E5                     PUSH   hl   
22FC   CD D5 08               CALL   prtdec   
22FF   E1                     POP   hl   
2300   CD 87 09               CALL   printStr   
2303   20 28 23 00            .CSTR   " (#"   
2307   CD 1D 09               CALL   prthex   
230A   CD 87 09               CALL   printStr   
230D   29 0D 0A 00            .CSTR   ")\r\n"   
2311   76                     HALT      
2312   00                     .CSTR      
2313                EXPECTM_0_2185S43:      
2313   E1                     POP   HL   
2314                          ;*Macro unroll:  test "1{}^", 1
2314   31 80 3C               LD   SP,STACK   
2317   CD 8E 09               CALL   init   
231A   CD BC 3B               CALL   execStr   
231D   31 7B 7D 5E 00         .CSTR   "1{}^"   
2322                          ;*Macro unroll:  expect "1{}^",1
2322   E1                     POP   HL   
2323   E5                     PUSH   HL   
2324   11 01 00               LD   DE,1   
2327   B7                     OR   A   
2328   ED 52                  SBC   HL,DE   
232A   7D                     LD   A,L   
232B   B4                     OR   H   
232C   28 4F                  JR   Z,expectM_0_2186S43   
232E   CD 87 09               CALL   printStr   
2331   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
233C   CD 87 09               CALL   printStr   
233F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
234E   21 01 00               LD   HL,1   
2351   CD D5 08               CALL   prtdec   
2354   CD 87 09               CALL   printStr   
2357   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2364   E1                     POP   hl   
2365   E5                     PUSH   hl   
2366   CD D5 08               CALL   prtdec   
2369   E1                     POP   hl   
236A   CD 87 09               CALL   printStr   
236D   20 28 23 00            .CSTR   " (#"   
2371   CD 1D 09               CALL   prthex   
2374   CD 87 09               CALL   printStr   
2377   29 0D 0A 00            .CSTR   ")\r\n"   
237B   76                     HALT      
237C   00                     .CSTR      
237D                EXPECTM_0_2186S43:      
237D   E1                     POP   HL   
237E                          ;*Macro unroll:  test "{1}^", 1
237E   31 80 3C               LD   SP,STACK   
2381   CD 8E 09               CALL   init   
2384   CD BC 3B               CALL   execStr   
2387   7B 31 7D 5E 00         .CSTR   "{1}^"   
238C                          ;*Macro unroll:  expect "{1}^",1
238C   E1                     POP   HL   
238D   E5                     PUSH   HL   
238E   11 01 00               LD   DE,1   
2391   B7                     OR   A   
2392   ED 52                  SBC   HL,DE   
2394   7D                     LD   A,L   
2395   B4                     OR   H   
2396   28 4F                  JR   Z,expectM_0_2187S43   
2398   CD 87 09               CALL   printStr   
239B   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
23A6   CD 87 09               CALL   printStr   
23A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23B8   21 01 00               LD   HL,1   
23BB   CD D5 08               CALL   prtdec   
23BE   CD 87 09               CALL   printStr   
23C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23CE   E1                     POP   hl   
23CF   E5                     PUSH   hl   
23D0   CD D5 08               CALL   prtdec   
23D3   E1                     POP   hl   
23D4   CD 87 09               CALL   printStr   
23D7   20 28 23 00            .CSTR   " (#"   
23DB   CD 1D 09               CALL   prthex   
23DE   CD 87 09               CALL   printStr   
23E1   29 0D 0A 00            .CSTR   ")\r\n"   
23E5   76                     HALT      
23E6   00                     .CSTR      
23E7                EXPECTM_0_2187S43:      
23E7   E1                     POP   HL   
23E8                          ;*Macro unroll:  test "{{1}^}^", 1
23E8   31 80 3C               LD   SP,STACK   
23EB   CD 8E 09               CALL   init   
23EE   CD BC 3B               CALL   execStr   
23F1   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
23F9                          ;*Macro unroll:  expect "{{1}^}^",1
23F9   E1                     POP   HL   
23FA   E5                     PUSH   HL   
23FB   11 01 00               LD   DE,1   
23FE   B7                     OR   A   
23FF   ED 52                  SBC   HL,DE   
2401   7D                     LD   A,L   
2402   B4                     OR   H   
2403   28 52                  JR   Z,expectM_0_2188S43   
2405   CD 87 09               CALL   printStr   
2408   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2416   CD 87 09               CALL   printStr   
2419   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2428   21 01 00               LD   HL,1   
242B   CD D5 08               CALL   prtdec   
242E   CD 87 09               CALL   printStr   
2431   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
243E   E1                     POP   hl   
243F   E5                     PUSH   hl   
2440   CD D5 08               CALL   prtdec   
2443   E1                     POP   hl   
2444   CD 87 09               CALL   printStr   
2447   20 28 23 00            .CSTR   " (#"   
244B   CD 1D 09               CALL   prthex   
244E   CD 87 09               CALL   printStr   
2451   29 0D 0A 00            .CSTR   ")\r\n"   
2455   76                     HALT      
2456   00                     .CSTR      
2457                EXPECTM_0_2188S43:      
2457   E1                     POP   HL   
2458                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2458   31 80 3C               LD   SP,STACK   
245B   CD 8E 09               CALL   init   
245E   CD BC 3B               CALL   execStr   
2461   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
246C                          ;*Macro unroll:  expect "{{{1}^}^}^",1
246C   E1                     POP   HL   
246D   E5                     PUSH   HL   
246E   11 01 00               LD   DE,1   
2471   B7                     OR   A   
2472   ED 52                  SBC   HL,DE   
2474   7D                     LD   A,L   
2475   B4                     OR   H   
2476   28 55                  JR   Z,expectM_0_2189S43   
2478   CD 87 09               CALL   printStr   
247B   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
248C   CD 87 09               CALL   printStr   
248F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
249E   21 01 00               LD   HL,1   
24A1   CD D5 08               CALL   prtdec   
24A4   CD 87 09               CALL   printStr   
24A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24B4   E1                     POP   hl   
24B5   E5                     PUSH   hl   
24B6   CD D5 08               CALL   prtdec   
24B9   E1                     POP   hl   
24BA   CD 87 09               CALL   printStr   
24BD   20 28 23 00            .CSTR   " (#"   
24C1   CD 1D 09               CALL   prthex   
24C4   CD 87 09               CALL   printStr   
24C7   29 0D 0A 00            .CSTR   ")\r\n"   
24CB   76                     HALT      
24CC   00                     .CSTR      
24CD                EXPECTM_0_2189S43:      
24CD   E1                     POP   HL   
24CE                          ;*Macro unroll:  test "5 /F {10} ?", 5
24CE   31 80 3C               LD   SP,STACK   
24D1   CD 8E 09               CALL   init   
24D4   CD BC 3B               CALL   execStr   
24D7   35 20 2F 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 /F {10} ?"   
24E3                          ;*Macro unroll:  expect "5 /F {10} ?",5
24E3   E1                     POP   HL   
24E4   E5                     PUSH   HL   
24E5   11 05 00               LD   DE,5   
24E8   B7                     OR   A   
24E9   ED 52                  SBC   HL,DE   
24EB   7D                     LD   A,L   
24EC   B4                     OR   H   
24ED   28 56                  JR   Z,expectM_0_2190S43   
24EF   CD 87 09               CALL   printStr   
24F2   43 6F 64 65 3A 20 35 20 2F 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /F {10} ?"   
2504   CD 87 09               CALL   printStr   
2507   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2516   21 05 00               LD   HL,5   
2519   CD D5 08               CALL   prtdec   
251C   CD 87 09               CALL   printStr   
251F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
252C   E1                     POP   hl   
252D   E5                     PUSH   hl   
252E   CD D5 08               CALL   prtdec   
2531   E1                     POP   hl   
2532   CD 87 09               CALL   printStr   
2535   20 28 23 00            .CSTR   " (#"   
2539   CD 1D 09               CALL   prthex   
253C   CD 87 09               CALL   printStr   
253F   29 0D 0A 00            .CSTR   ")\r\n"   
2543   76                     HALT      
2544   00                     .CSTR      
2545                EXPECTM_0_2190S43:      
2545   E1                     POP   HL   
2546                          ;*Macro unroll:  test "5 /T {10} ? +", 15
2546   31 80 3C               LD   SP,STACK   
2549   CD 8E 09               CALL   init   
254C   CD BC 3B               CALL   execStr   
254F   35 20 2F 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /T {10} ? +"   
255D                          ;*Macro unroll:  expect "5 /T {10} ? +",15
255D   E1                     POP   HL   
255E   E5                     PUSH   HL   
255F   11 0F 00               LD   DE,15   
2562   B7                     OR   A   
2563   ED 52                  SBC   HL,DE   
2565   7D                     LD   A,L   
2566   B4                     OR   H   
2567   28 58                  JR   Z,expectM_0_2191S43   
2569   CD 87 09               CALL   printStr   
256C   43 6F 64 65 3A 20 35 20 2F 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /T {10} ? +"   
2580   CD 87 09               CALL   printStr   
2583   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2592   21 0F 00               LD   HL,15   
2595   CD D5 08               CALL   prtdec   
2598   CD 87 09               CALL   printStr   
259B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25A8   E1                     POP   hl   
25A9   E5                     PUSH   hl   
25AA   CD D5 08               CALL   prtdec   
25AD   E1                     POP   hl   
25AE   CD 87 09               CALL   printStr   
25B1   20 28 23 00            .CSTR   " (#"   
25B5   CD 1D 09               CALL   prthex   
25B8   CD 87 09               CALL   printStr   
25BB   29 0D 0A 00            .CSTR   ")\r\n"   
25BF   76                     HALT      
25C0   00                     .CSTR      
25C1                EXPECTM_0_2191S43:      
25C1   E1                     POP   HL   
25C2                          ;*Macro unroll:  test "1 /F {10} {20} ?? +", 21
25C2   31 80 3C               LD   SP,STACK   
25C5   CD 8E 09               CALL   init   
25C8   CD BC 3B               CALL   execStr   
25CB   31 20 2F 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /F {10} {20} ?? +"   
25DF                          ;*Macro unroll:  expect "1 /F {10} {20} ?? +",21
25DF   E1                     POP   HL   
25E0   E5                     PUSH   HL   
25E1   11 15 00               LD   DE,21   
25E4   B7                     OR   A   
25E5   ED 52                  SBC   HL,DE   
25E7   7D                     LD   A,L   
25E8   B4                     OR   H   
25E9   28 5E                  JR   Z,expectM_0_2192S43   
25EB   CD 87 09               CALL   printStr   
25EE   43 6F 64 65 3A 20 31 20 2F 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /F {10} {20} ?? +"   
2608   CD 87 09               CALL   printStr   
260B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
261A   21 15 00               LD   HL,21   
261D   CD D5 08               CALL   prtdec   
2620   CD 87 09               CALL   printStr   
2623   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2630   E1                     POP   hl   
2631   E5                     PUSH   hl   
2632   CD D5 08               CALL   prtdec   
2635   E1                     POP   hl   
2636   CD 87 09               CALL   printStr   
2639   20 28 23 00            .CSTR   " (#"   
263D   CD 1D 09               CALL   prthex   
2640   CD 87 09               CALL   printStr   
2643   29 0D 0A 00            .CSTR   ")\r\n"   
2647   76                     HALT      
2648   00                     .CSTR      
2649                EXPECTM_0_2192S43:      
2649   E1                     POP   HL   
264A                          ;*Macro unroll:  test "1 /T {10} {20} ?? +", 11
264A   31 80 3C               LD   SP,STACK   
264D   CD 8E 09               CALL   init   
2650   CD BC 3B               CALL   execStr   
2653   31 20 2F 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /T {10} {20} ?? +"   
2667                          ;*Macro unroll:  expect "1 /T {10} {20} ?? +",11
2667   E1                     POP   HL   
2668   E5                     PUSH   HL   
2669   11 0B 00               LD   DE,11   
266C   B7                     OR   A   
266D   ED 52                  SBC   HL,DE   
266F   7D                     LD   A,L   
2670   B4                     OR   H   
2671   28 5E                  JR   Z,expectM_0_2193S43   
2673   CD 87 09               CALL   printStr   
2676   43 6F 64 65 3A 20 31 20 2F 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /T {10} {20} ?? +"   
2690   CD 87 09               CALL   printStr   
2693   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26A2   21 0B 00               LD   HL,11   
26A5   CD D5 08               CALL   prtdec   
26A8   CD 87 09               CALL   printStr   
26AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26B8   E1                     POP   hl   
26B9   E5                     PUSH   hl   
26BA   CD D5 08               CALL   prtdec   
26BD   E1                     POP   hl   
26BE   CD 87 09               CALL   printStr   
26C1   20 28 23 00            .CSTR   " (#"   
26C5   CD 1D 09               CALL   prthex   
26C8   CD 87 09               CALL   printStr   
26CB   29 0D 0A 00            .CSTR   ")\r\n"   
26CF   76                     HALT      
26D0   00                     .CSTR      
26D1                EXPECTM_0_2193S43:      
26D1   E1                     POP   HL   
26D2                          ;*Macro unroll:  test "() -2%", $0000
26D2   31 80 3C               LD   SP,STACK   
26D5   CD 8E 09               CALL   init   
26D8   CD BC 3B               CALL   execStr   
26DB   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
26E2                          ;*Macro unroll:  expect "() -2%",$0000
26E2   E1                     POP   HL   
26E3   E5                     PUSH   HL   
26E4   11 00 00               LD   DE,$0000   
26E7   B7                     OR   A   
26E8   ED 52                  SBC   HL,DE   
26EA   7D                     LD   A,L   
26EB   B4                     OR   H   
26EC   28 51                  JR   Z,expectM_0_2194S43   
26EE   CD 87 09               CALL   printStr   
26F1   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
26FE   CD 87 09               CALL   printStr   
2701   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2710   21 00 00               LD   HL,$0000   
2713   CD D5 08               CALL   prtdec   
2716   CD 87 09               CALL   printStr   
2719   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2726   E1                     POP   hl   
2727   E5                     PUSH   hl   
2728   CD D5 08               CALL   prtdec   
272B   E1                     POP   hl   
272C   CD 87 09               CALL   printStr   
272F   20 28 23 00            .CSTR   " (#"   
2733   CD 1D 09               CALL   prthex   
2736   CD 87 09               CALL   printStr   
2739   29 0D 0A 00            .CSTR   ")\r\n"   
273D   76                     HALT      
273E   00                     .CSTR      
273F                EXPECTM_0_2194S43:      
273F   E1                     POP   HL   
2740                          ;*Macro unroll:  test "(a) -1%", $0001
2740   31 80 3C               LD   SP,STACK   
2743   CD 8E 09               CALL   init   
2746   CD BC 3B               CALL   execStr   
2749   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
2751                          ;*Macro unroll:  expect "(a) -1%",$0001
2751   E1                     POP   HL   
2752   E5                     PUSH   HL   
2753   11 01 00               LD   DE,$0001   
2756   B7                     OR   A   
2757   ED 52                  SBC   HL,DE   
2759   7D                     LD   A,L   
275A   B4                     OR   H   
275B   28 52                  JR   Z,expectM_0_2195S43   
275D   CD 87 09               CALL   printStr   
2760   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
276E   CD 87 09               CALL   printStr   
2771   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2780   21 01 00               LD   HL,$0001   
2783   CD D5 08               CALL   prtdec   
2786   CD 87 09               CALL   printStr   
2789   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2796   E1                     POP   hl   
2797   E5                     PUSH   hl   
2798   CD D5 08               CALL   prtdec   
279B   E1                     POP   hl   
279C   CD 87 09               CALL   printStr   
279F   20 28 23 00            .CSTR   " (#"   
27A3   CD 1D 09               CALL   prthex   
27A6   CD 87 09               CALL   printStr   
27A9   29 0D 0A 00            .CSTR   ")\r\n"   
27AD   76                     HALT      
27AE   00                     .CSTR      
27AF                EXPECTM_0_2195S43:      
27AF   E1                     POP   HL   
27B0                          ;*Macro unroll:  test "(a:) -1%", $0001
27B0   31 80 3C               LD   SP,STACK   
27B3   CD 8E 09               CALL   init   
27B6   CD BC 3B               CALL   execStr   
27B9   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
27C2                          ;*Macro unroll:  expect "(a:) -1%",$0001
27C2   E1                     POP   HL   
27C3   E5                     PUSH   HL   
27C4   11 01 00               LD   DE,$0001   
27C7   B7                     OR   A   
27C8   ED 52                  SBC   HL,DE   
27CA   7D                     LD   A,L   
27CB   B4                     OR   H   
27CC   28 53                  JR   Z,expectM_0_2196S43   
27CE   CD 87 09               CALL   printStr   
27D1   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
27E0   CD 87 09               CALL   printStr   
27E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27F2   21 01 00               LD   HL,$0001   
27F5   CD D5 08               CALL   prtdec   
27F8   CD 87 09               CALL   printStr   
27FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2808   E1                     POP   hl   
2809   E5                     PUSH   hl   
280A   CD D5 08               CALL   prtdec   
280D   E1                     POP   hl   
280E   CD 87 09               CALL   printStr   
2811   20 28 23 00            .CSTR   " (#"   
2815   CD 1D 09               CALL   prthex   
2818   CD 87 09               CALL   printStr   
281B   29 0D 0A 00            .CSTR   ")\r\n"   
281F   76                     HALT      
2820   00                     .CSTR      
2821                EXPECTM_0_2196S43:      
2821   E1                     POP   HL   
2822                          ;*Macro unroll:  test "(a:b) -1%", $0102
2822   31 80 3C               LD   SP,STACK   
2825   CD 8E 09               CALL   init   
2828   CD BC 3B               CALL   execStr   
282B   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
2835                          ;*Macro unroll:  expect "(a:b) -1%",$0102
2835   E1                     POP   HL   
2836   E5                     PUSH   HL   
2837   11 02 01               LD   DE,$0102   
283A   B7                     OR   A   
283B   ED 52                  SBC   HL,DE   
283D   7D                     LD   A,L   
283E   B4                     OR   H   
283F   28 54                  JR   Z,expectM_0_2197S43   
2841   CD 87 09               CALL   printStr   
2844   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
2854   CD 87 09               CALL   printStr   
2857   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2866   21 02 01               LD   HL,$0102   
2869   CD D5 08               CALL   prtdec   
286C   CD 87 09               CALL   printStr   
286F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
287C   E1                     POP   hl   
287D   E5                     PUSH   hl   
287E   CD D5 08               CALL   prtdec   
2881   E1                     POP   hl   
2882   CD 87 09               CALL   printStr   
2885   20 28 23 00            .CSTR   " (#"   
2889   CD 1D 09               CALL   prthex   
288C   CD 87 09               CALL   printStr   
288F   29 0D 0A 00            .CSTR   ")\r\n"   
2893   76                     HALT      
2894   00                     .CSTR      
2895                EXPECTM_0_2197S43:      
2895   E1                     POP   HL   
2896                          ;*Macro unroll:  test "(:b) -1%", $0101
2896   31 80 3C               LD   SP,STACK   
2899   CD 8E 09               CALL   init   
289C   CD BC 3B               CALL   execStr   
289F   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
28A8                          ;*Macro unroll:  expect "(:b) -1%",$0101
28A8   E1                     POP   HL   
28A9   E5                     PUSH   HL   
28AA   11 01 01               LD   DE,$0101   
28AD   B7                     OR   A   
28AE   ED 52                  SBC   HL,DE   
28B0   7D                     LD   A,L   
28B1   B4                     OR   H   
28B2   28 53                  JR   Z,expectM_0_2198S43   
28B4   CD 87 09               CALL   printStr   
28B7   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
28C6   CD 87 09               CALL   printStr   
28C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28D8   21 01 01               LD   HL,$0101   
28DB   CD D5 08               CALL   prtdec   
28DE   CD 87 09               CALL   printStr   
28E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28EE   E1                     POP   hl   
28EF   E5                     PUSH   hl   
28F0   CD D5 08               CALL   prtdec   
28F3   E1                     POP   hl   
28F4   CD 87 09               CALL   printStr   
28F7   20 28 23 00            .CSTR   " (#"   
28FB   CD 1D 09               CALL   prthex   
28FE   CD 87 09               CALL   printStr   
2901   29 0D 0A 00            .CSTR   ")\r\n"   
2905   76                     HALT      
2906   00                     .CSTR      
2907                EXPECTM_0_2198S43:      
2907   E1                     POP   HL   
2908                          ;*Macro unroll:  test "() {2} /f^", 2
2908   31 80 3C               LD   SP,STACK   
290B   CD 8E 09               CALL   init   
290E   CD BC 3B               CALL   execStr   
2911   28 29 20 7B 32 7D 20 2F 66 5E 00 .CSTR   "() {2} /f^"   
291C                          ;*Macro unroll:  expect "() {2} /f^",2
291C   E1                     POP   HL   
291D   E5                     PUSH   HL   
291E   11 02 00               LD   DE,2   
2921   B7                     OR   A   
2922   ED 52                  SBC   HL,DE   
2924   7D                     LD   A,L   
2925   B4                     OR   H   
2926   28 55                  JR   Z,expectM_0_2199S43   
2928   CD 87 09               CALL   printStr   
292B   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 2F 66 5E 00 .CSTR   "Code: ","() {2} /f^"   
293C   CD 87 09               CALL   printStr   
293F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
294E   21 02 00               LD   HL,2   
2951   CD D5 08               CALL   prtdec   
2954   CD 87 09               CALL   printStr   
2957   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2964   E1                     POP   hl   
2965   E5                     PUSH   hl   
2966   CD D5 08               CALL   prtdec   
2969   E1                     POP   hl   
296A   CD 87 09               CALL   printStr   
296D   20 28 23 00            .CSTR   " (#"   
2971   CD 1D 09               CALL   prthex   
2974   CD 87 09               CALL   printStr   
2977   29 0D 0A 00            .CSTR   ")\r\n"   
297B   76                     HALT      
297C   00                     .CSTR      
297D                EXPECTM_0_2199S43:      
297D   E1                     POP   HL   
297E                          ;*Macro unroll:  test "(a) {2} /f^", 2
297E   31 80 3C               LD   SP,STACK   
2981   CD 8E 09               CALL   init   
2984   CD BC 3B               CALL   execStr   
2987   28 61 29 20 7B 32 7D 20 2F 66 5E 00 .CSTR   "(a) {2} /f^"   
2993                          ;*Macro unroll:  expect "(a) {2} /f^",2
2993   E1                     POP   HL   
2994   E5                     PUSH   HL   
2995   11 02 00               LD   DE,2   
2998   B7                     OR   A   
2999   ED 52                  SBC   HL,DE   
299B   7D                     LD   A,L   
299C   B4                     OR   H   
299D   28 56                  JR   Z,expectM_0_2200S43   
299F   CD 87 09               CALL   printStr   
29A2   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 2F 66 5E 00 .CSTR   "Code: ","(a) {2} /f^"   
29B4   CD 87 09               CALL   printStr   
29B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29C6   21 02 00               LD   HL,2   
29C9   CD D5 08               CALL   prtdec   
29CC   CD 87 09               CALL   printStr   
29CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29DC   E1                     POP   hl   
29DD   E5                     PUSH   hl   
29DE   CD D5 08               CALL   prtdec   
29E1   E1                     POP   hl   
29E2   CD 87 09               CALL   printStr   
29E5   20 28 23 00            .CSTR   " (#"   
29E9   CD 1D 09               CALL   prthex   
29EC   CD 87 09               CALL   printStr   
29EF   29 0D 0A 00            .CSTR   ")\r\n"   
29F3   76                     HALT      
29F4   00                     .CSTR      
29F5                EXPECTM_0_2200S43:      
29F5   E1                     POP   HL   
29F6                          ;*Macro unroll:  test "5 (a) {$a} /f^", 5
29F6   31 80 3C               LD   SP,STACK   
29F9   CD 8E 09               CALL   init   
29FC   CD BC 3B               CALL   execStr   
29FF   35 20 28 61 29 20 7B 24 61 7D 20 2F 66 5E 00 .CSTR   "5 (a) {$a} /f^"   
2A0E                          ;*Macro unroll:  expect "5 (a) {$a} /f^",5
2A0E   E1                     POP   HL   
2A0F   E5                     PUSH   HL   
2A10   11 05 00               LD   DE,5   
2A13   B7                     OR   A   
2A14   ED 52                  SBC   HL,DE   
2A16   7D                     LD   A,L   
2A17   B4                     OR   H   
2A18   28 59                  JR   Z,expectM_0_2201S43   
2A1A   CD 87 09               CALL   printStr   
2A1D   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 2F 66 5E 00 .CSTR   "Code: ","5 (a) {$a} /f^"   
2A32   CD 87 09               CALL   printStr   
2A35   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A44   21 05 00               LD   HL,5   
2A47   CD D5 08               CALL   prtdec   
2A4A   CD 87 09               CALL   printStr   
2A4D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A5A   E1                     POP   hl   
2A5B   E5                     PUSH   hl   
2A5C   CD D5 08               CALL   prtdec   
2A5F   E1                     POP   hl   
2A60   CD 87 09               CALL   printStr   
2A63   20 28 23 00            .CSTR   " (#"   
2A67   CD 1D 09               CALL   prthex   
2A6A   CD 87 09               CALL   printStr   
2A6D   29 0D 0A 00            .CSTR   ")\r\n"   
2A71   76                     HALT      
2A72   00                     .CSTR      
2A73                EXPECTM_0_2201S43:      
2A73   E1                     POP   HL   
2A74                          ;*Macro unroll:  test "5 (a:b) {$a} /f^", 5
2A74   31 80 3C               LD   SP,STACK   
2A77   CD 8E 09               CALL   init   
2A7A   CD BC 3B               CALL   execStr   
2A7D   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 2F 66 5E 00 .CSTR   "5 (a:b) {$a} /f^"   
2A8E                          ;*Macro unroll:  expect "5 (a:b) {$a} /f^",5
2A8E   E1                     POP   HL   
2A8F   E5                     PUSH   HL   
2A90   11 05 00               LD   DE,5   
2A93   B7                     OR   A   
2A94   ED 52                  SBC   HL,DE   
2A96   7D                     LD   A,L   
2A97   B4                     OR   H   
2A98   28 5B                  JR   Z,expectM_0_2202S43   
2A9A   CD 87 09               CALL   printStr   
2A9D   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 2F 66 5E 00 .CSTR   "Code: ","5 (a:b) {$a} /f^"   
2AB4   CD 87 09               CALL   printStr   
2AB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AC6   21 05 00               LD   HL,5   
2AC9   CD D5 08               CALL   prtdec   
2ACC   CD 87 09               CALL   printStr   
2ACF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ADC   E1                     POP   hl   
2ADD   E5                     PUSH   hl   
2ADE   CD D5 08               CALL   prtdec   
2AE1   E1                     POP   hl   
2AE2   CD 87 09               CALL   printStr   
2AE5   20 28 23 00            .CSTR   " (#"   
2AE9   CD 1D 09               CALL   prthex   
2AEC   CD 87 09               CALL   printStr   
2AEF   29 0D 0A 00            .CSTR   ")\r\n"   
2AF3   76                     HALT      
2AF4   00                     .CSTR      
2AF5                EXPECTM_0_2202S43:      
2AF5   E1                     POP   HL   
2AF6                          ;*Macro unroll:  test "(a) {{2}^} /f^", 2
2AF6   31 80 3C               LD   SP,STACK   
2AF9   CD 8E 09               CALL   init   
2AFC   CD BC 3B               CALL   execStr   
2AFF   28 61 29 20 7B 7B 32 7D 5E 7D 20 2F 66 5E 00 .CSTR   "(a) {{2}^} /f^"   
2B0E                          ;*Macro unroll:  expect "(a) {{2}^} /f^",2
2B0E   E1                     POP   HL   
2B0F   E5                     PUSH   HL   
2B10   11 02 00               LD   DE,2   
2B13   B7                     OR   A   
2B14   ED 52                  SBC   HL,DE   
2B16   7D                     LD   A,L   
2B17   B4                     OR   H   
2B18   28 59                  JR   Z,expectM_0_2203S43   
2B1A   CD 87 09               CALL   printStr   
2B1D   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 5E 7D 20 2F 66 5E 00 .CSTR   "Code: ","(a) {{2}^} /f^"   
2B32   CD 87 09               CALL   printStr   
2B35   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B44   21 02 00               LD   HL,2   
2B47   CD D5 08               CALL   prtdec   
2B4A   CD 87 09               CALL   printStr   
2B4D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B5A   E1                     POP   hl   
2B5B   E5                     PUSH   hl   
2B5C   CD D5 08               CALL   prtdec   
2B5F   E1                     POP   hl   
2B60   CD 87 09               CALL   printStr   
2B63   20 28 23 00            .CSTR   " (#"   
2B67   CD 1D 09               CALL   prthex   
2B6A   CD 87 09               CALL   printStr   
2B6D   29 0D 0A 00            .CSTR   ")\r\n"   
2B71   76                     HALT      
2B72   00                     .CSTR      
2B73                EXPECTM_0_2203S43:      
2B73   E1                     POP   HL   
2B74                          ;*Macro unroll:  test "1 5 (a) {{$a}^} /f^", 5
2B74   31 80 3C               LD   SP,STACK   
2B77   CD 8E 09               CALL   init   
2B7A   CD BC 3B               CALL   execStr   
2B7D   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 5E 7D 20 2F 66 5E 00 .CSTR   "1 5 (a) {{$a}^} /f^"   
2B91                          ;*Macro unroll:  expect "1 5 (a) {{$a}^} /f^",5
2B91   E1                     POP   HL   
2B92   E5                     PUSH   HL   
2B93   11 05 00               LD   DE,5   
2B96   B7                     OR   A   
2B97   ED 52                  SBC   HL,DE   
2B99   7D                     LD   A,L   
2B9A   B4                     OR   H   
2B9B   28 5E                  JR   Z,expectM_0_2204S43   
2B9D   CD 87 09               CALL   printStr   
2BA0   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 5E 7D 20 2F 66 5E 00 .CSTR   "Code: ","1 5 (a) {{$a}^} /f^"   
2BBA   CD 87 09               CALL   printStr   
2BBD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BCC   21 05 00               LD   HL,5   
2BCF   CD D5 08               CALL   prtdec   
2BD2   CD 87 09               CALL   printStr   
2BD5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BE2   E1                     POP   hl   
2BE3   E5                     PUSH   hl   
2BE4   CD D5 08               CALL   prtdec   
2BE7   E1                     POP   hl   
2BE8   CD 87 09               CALL   printStr   
2BEB   20 28 23 00            .CSTR   " (#"   
2BEF   CD 1D 09               CALL   prthex   
2BF2   CD 87 09               CALL   printStr   
2BF5   29 0D 0A 00            .CSTR   ")\r\n"   
2BF9   76                     HALT      
2BFA   00                     .CSTR      
2BFB                EXPECTM_0_2204S43:      
2BFB   E1                     POP   HL   
2BFC                          ;*Macro unroll:  test "1 5 (ab) {{$a}^} /f^", 1
2BFC   31 80 3C               LD   SP,STACK   
2BFF   CD 8E 09               CALL   init   
2C02   CD BC 3B               CALL   execStr   
2C05   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 5E 7D 20 2F 66 5E 00 .CSTR   "1 5 (ab) {{$a}^} /f^"   
2C1A                          ;*Macro unroll:  expect "1 5 (ab) {{$a}^} /f^",1
2C1A   E1                     POP   HL   
2C1B   E5                     PUSH   HL   
2C1C   11 01 00               LD   DE,1   
2C1F   B7                     OR   A   
2C20   ED 52                  SBC   HL,DE   
2C22   7D                     LD   A,L   
2C23   B4                     OR   H   
2C24   28 5F                  JR   Z,expectM_0_2205S43   
2C26   CD 87 09               CALL   printStr   
2C29   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 5E 7D 20 2F 66 5E 00 .CSTR   "Code: ","1 5 (ab) {{$a}^} /f^"   
2C44   CD 87 09               CALL   printStr   
2C47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C56   21 01 00               LD   HL,1   
2C59   CD D5 08               CALL   prtdec   
2C5C   CD 87 09               CALL   printStr   
2C5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C6C   E1                     POP   hl   
2C6D   E5                     PUSH   hl   
2C6E   CD D5 08               CALL   prtdec   
2C71   E1                     POP   hl   
2C72   CD 87 09               CALL   printStr   
2C75   20 28 23 00            .CSTR   " (#"   
2C79   CD 1D 09               CALL   prthex   
2C7C   CD 87 09               CALL   printStr   
2C7F   29 0D 0A 00            .CSTR   ")\r\n"   
2C83   76                     HALT      
2C84   00                     .CSTR      
2C85                EXPECTM_0_2205S43:      
2C85   E1                     POP   HL   
2C86                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}^} /f^", 7
2C86   31 80 3C               LD   SP,STACK   
2C89   CD 8E 09               CALL   init   
2C8C   CD BC 3B               CALL   execStr   
2C8F   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 5E 7D 20 2F 66 5E 00 .CSTR   "1 5 (a) {{$a 2 +}^} /f^"   
2CA7                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}^} /f^",7
2CA7   E1                     POP   HL   
2CA8   E5                     PUSH   HL   
2CA9   11 07 00               LD   DE,7   
2CAC   B7                     OR   A   
2CAD   ED 52                  SBC   HL,DE   
2CAF   7D                     LD   A,L   
2CB0   B4                     OR   H   
2CB1   28 62                  JR   Z,expectM_0_2206S43   
2CB3   CD 87 09               CALL   printStr   
2CB6   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 5E 7D 20 2F 66 5E 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}^} /f^"   
2CD4   CD 87 09               CALL   printStr   
2CD7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CE6   21 07 00               LD   HL,7   
2CE9   CD D5 08               CALL   prtdec   
2CEC   CD 87 09               CALL   printStr   
2CEF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CFC   E1                     POP   hl   
2CFD   E5                     PUSH   hl   
2CFE   CD D5 08               CALL   prtdec   
2D01   E1                     POP   hl   
2D02   CD 87 09               CALL   printStr   
2D05   20 28 23 00            .CSTR   " (#"   
2D09   CD 1D 09               CALL   prthex   
2D0C   CD 87 09               CALL   printStr   
2D0F   29 0D 0A 00            .CSTR   ")\r\n"   
2D13   76                     HALT      
2D14   00                     .CSTR      
2D15                EXPECTM_0_2206S43:      
2D15   E1                     POP   HL   
2D16                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}^} /f^", 6
2D16   31 80 3C               LD   SP,STACK   
2D19   CD 8E 09               CALL   init   
2D1C   CD BC 3B               CALL   execStr   
2D1F   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 20 2F 66 5E 00 .CSTR   "1 5 (ab) {{$a $b +}^} /f^"   
2D39                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}^} /f^",6
2D39   E1                     POP   HL   
2D3A   E5                     PUSH   HL   
2D3B   11 06 00               LD   DE,6   
2D3E   B7                     OR   A   
2D3F   ED 52                  SBC   HL,DE   
2D41   7D                     LD   A,L   
2D42   B4                     OR   H   
2D43   28 64                  JR   Z,expectM_0_2207S43   
2D45   CD 87 09               CALL   printStr   
2D48   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 20 2F 66 5E 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}^} /f^"   
2D68   CD 87 09               CALL   printStr   
2D6B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D7A   21 06 00               LD   HL,6   
2D7D   CD D5 08               CALL   prtdec   
2D80   CD 87 09               CALL   printStr   
2D83   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D90   E1                     POP   hl   
2D91   E5                     PUSH   hl   
2D92   CD D5 08               CALL   prtdec   
2D95   E1                     POP   hl   
2D96   CD 87 09               CALL   printStr   
2D99   20 28 23 00            .CSTR   " (#"   
2D9D   CD 1D 09               CALL   prthex   
2DA0   CD 87 09               CALL   printStr   
2DA3   29 0D 0A 00            .CSTR   ")\r\n"   
2DA7   76                     HALT      
2DA8   00                     .CSTR      
2DA9                EXPECTM_0_2207S43:      
2DA9   E1                     POP   HL   
2DAA                          ;*Macro unroll:  test "(a) {2} /f x= 1 x^", 2
2DAA   31 80 3C               LD   SP,STACK   
2DAD   CD 8E 09               CALL   init   
2DB0   CD BC 3B               CALL   execStr   
2DB3   28 61 29 20 7B 32 7D 20 2F 66 20 78 3D 20 31 20 78 5E 00 .CSTR   "(a) {2} /f x= 1 x^"   
2DC6                          ;*Macro unroll:  expect "(a) {2} /f x= 1 x^",2
2DC6   E1                     POP   HL   
2DC7   E5                     PUSH   HL   
2DC8   11 02 00               LD   DE,2   
2DCB   B7                     OR   A   
2DCC   ED 52                  SBC   HL,DE   
2DCE   7D                     LD   A,L   
2DCF   B4                     OR   H   
2DD0   28 5D                  JR   Z,expectM_0_2208S43   
2DD2   CD 87 09               CALL   printStr   
2DD5   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 2F 66 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","(a) {2} /f x= 1 x^"   
2DEE   CD 87 09               CALL   printStr   
2DF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E00   21 02 00               LD   HL,2   
2E03   CD D5 08               CALL   prtdec   
2E06   CD 87 09               CALL   printStr   
2E09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E16   E1                     POP   hl   
2E17   E5                     PUSH   hl   
2E18   CD D5 08               CALL   prtdec   
2E1B   E1                     POP   hl   
2E1C   CD 87 09               CALL   printStr   
2E1F   20 28 23 00            .CSTR   " (#"   
2E23   CD 1D 09               CALL   prthex   
2E26   CD 87 09               CALL   printStr   
2E29   29 0D 0A 00            .CSTR   ")\r\n"   
2E2D   76                     HALT      
2E2E   00                     .CSTR      
2E2F                EXPECTM_0_2208S43:      
2E2F   E1                     POP   HL   
2E30                          ;*Macro unroll:  test "(a) {$a} /f x= 0 1 x^", 1
2E30   31 80 3C               LD   SP,STACK   
2E33   CD 8E 09               CALL   init   
2E36   CD BC 3B               CALL   execStr   
2E39   28 61 29 20 7B 24 61 7D 20 2F 66 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "(a) {$a} /f x= 0 1 x^"   
2E4F                          ;*Macro unroll:  expect "(a) {$a} /f x= 0 1 x^",1
2E4F   E1                     POP   HL   
2E50   E5                     PUSH   HL   
2E51   11 01 00               LD   DE,1   
2E54   B7                     OR   A   
2E55   ED 52                  SBC   HL,DE   
2E57   7D                     LD   A,L   
2E58   B4                     OR   H   
2E59   28 60                  JR   Z,expectM_0_2209S43   
2E5B   CD 87 09               CALL   printStr   
2E5E   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 2F 66 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","(a) {$a} /f x= 0 1 x^"   
2E7A   CD 87 09               CALL   printStr   
2E7D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E8C   21 01 00               LD   HL,1   
2E8F   CD D5 08               CALL   prtdec   
2E92   CD 87 09               CALL   printStr   
2E95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EA2   E1                     POP   hl   
2EA3   E5                     PUSH   hl   
2EA4   CD D5 08               CALL   prtdec   
2EA7   E1                     POP   hl   
2EA8   CD 87 09               CALL   printStr   
2EAB   20 28 23 00            .CSTR   " (#"   
2EAF   CD 1D 09               CALL   prthex   
2EB2   CD 87 09               CALL   printStr   
2EB5   29 0D 0A 00            .CSTR   ")\r\n"   
2EB9   76                     HALT      
2EBA   00                     .CSTR      
2EBB                EXPECTM_0_2209S43:      
2EBB   E1                     POP   HL   
2EBC                          ;*Macro unroll:  test "(ab) {$b} /f x= 1 2 x^", 2
2EBC   31 80 3C               LD   SP,STACK   
2EBF   CD 8E 09               CALL   init   
2EC2   CD BC 3B               CALL   execStr   
2EC5   28 61 62 29 20 7B 24 62 7D 20 2F 66 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "(ab) {$b} /f x= 1 2 x^"   
2EDC                          ;*Macro unroll:  expect "(ab) {$b} /f x= 1 2 x^",2
2EDC   E1                     POP   HL   
2EDD   E5                     PUSH   HL   
2EDE   11 02 00               LD   DE,2   
2EE1   B7                     OR   A   
2EE2   ED 52                  SBC   HL,DE   
2EE4   7D                     LD   A,L   
2EE5   B4                     OR   H   
2EE6   28 61                  JR   Z,expectM_0_2210S43   
2EE8   CD 87 09               CALL   printStr   
2EEB   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 2F 66 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","(ab) {$b} /f x= 1 2 x^"   
2F08   CD 87 09               CALL   printStr   
2F0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F1A   21 02 00               LD   HL,2   
2F1D   CD D5 08               CALL   prtdec   
2F20   CD 87 09               CALL   printStr   
2F23   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F30   E1                     POP   hl   
2F31   E5                     PUSH   hl   
2F32   CD D5 08               CALL   prtdec   
2F35   E1                     POP   hl   
2F36   CD 87 09               CALL   printStr   
2F39   20 28 23 00            .CSTR   " (#"   
2F3D   CD 1D 09               CALL   prthex   
2F40   CD 87 09               CALL   printStr   
2F43   29 0D 0A 00            .CSTR   ")\r\n"   
2F47   76                     HALT      
2F48   00                     .CSTR      
2F49                EXPECTM_0_2210S43:      
2F49   E1                     POP   HL   
2F4A                          ;*Macro unroll:  test "(a:b) {$a} /f x= 1 2 x^", 2
2F4A   31 80 3C               LD   SP,STACK   
2F4D   CD 8E 09               CALL   init   
2F50   CD BC 3B               CALL   execStr   
2F53   28 61 3A 62 29 20 7B 24 61 7D 20 2F 66 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "(a:b) {$a} /f x= 1 2 x^"   
2F6B                          ;*Macro unroll:  expect "(a:b) {$a} /f x= 1 2 x^",2
2F6B   E1                     POP   HL   
2F6C   E5                     PUSH   HL   
2F6D   11 02 00               LD   DE,2   
2F70   B7                     OR   A   
2F71   ED 52                  SBC   HL,DE   
2F73   7D                     LD   A,L   
2F74   B4                     OR   H   
2F75   28 62                  JR   Z,expectM_0_2211S43   
2F77   CD 87 09               CALL   printStr   
2F7A   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 2F 66 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","(a:b) {$a} /f x= 1 2 x^"   
2F98   CD 87 09               CALL   printStr   
2F9B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FAA   21 02 00               LD   HL,2   
2FAD   CD D5 08               CALL   prtdec   
2FB0   CD 87 09               CALL   printStr   
2FB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FC0   E1                     POP   hl   
2FC1   E5                     PUSH   hl   
2FC2   CD D5 08               CALL   prtdec   
2FC5   E1                     POP   hl   
2FC6   CD 87 09               CALL   printStr   
2FC9   20 28 23 00            .CSTR   " (#"   
2FCD   CD 1D 09               CALL   prthex   
2FD0   CD 87 09               CALL   printStr   
2FD3   29 0D 0A 00            .CSTR   ")\r\n"   
2FD7   76                     HALT      
2FD8   00                     .CSTR      
2FD9                EXPECTM_0_2211S43:      
2FD9   E1                     POP   HL   
2FDA                          ;*Macro unroll:  test "(ab) {$b} /f x= 1 2 x^", 2
2FDA   31 80 3C               LD   SP,STACK   
2FDD   CD 8E 09               CALL   init   
2FE0   CD BC 3B               CALL   execStr   
2FE3   28 61 62 29 20 7B 24 62 7D 20 2F 66 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "(ab) {$b} /f x= 1 2 x^"   
2FFA                          ;*Macro unroll:  expect "(ab) {$b} /f x= 1 2 x^",2
2FFA   E1                     POP   HL   
2FFB   E5                     PUSH   HL   
2FFC   11 02 00               LD   DE,2   
2FFF   B7                     OR   A   
3000   ED 52                  SBC   HL,DE   
3002   7D                     LD   A,L   
3003   B4                     OR   H   
3004   28 61                  JR   Z,expectM_0_2212S43   
3006   CD 87 09               CALL   printStr   
3009   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 2F 66 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","(ab) {$b} /f x= 1 2 x^"   
3026   CD 87 09               CALL   printStr   
3029   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3038   21 02 00               LD   HL,2   
303B   CD D5 08               CALL   prtdec   
303E   CD 87 09               CALL   printStr   
3041   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
304E   E1                     POP   hl   
304F   E5                     PUSH   hl   
3050   CD D5 08               CALL   prtdec   
3053   E1                     POP   hl   
3054   CD 87 09               CALL   printStr   
3057   20 28 23 00            .CSTR   " (#"   
305B   CD 1D 09               CALL   prthex   
305E   CD 87 09               CALL   printStr   
3061   29 0D 0A 00            .CSTR   ")\r\n"   
3065   76                     HALT      
3066   00                     .CSTR      
3067                EXPECTM_0_2212S43:      
3067   E1                     POP   HL   
3068                          ;*Macro unroll:  test "(ab) {$b $a} /f x= 10 15 x^ -", 5
3068   31 80 3C               LD   SP,STACK   
306B   CD 8E 09               CALL   init   
306E   CD BC 3B               CALL   execStr   
3071   28 61 62 29 20 7B 24 62 20 24 61 7D 20 2F 66 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "(ab) {$b $a} /f x= 10 15 x^ -"   
308F                          ;*Macro unroll:  expect "(ab) {$b $a} /f x= 10 15 x^ -",5
308F   E1                     POP   HL   
3090   E5                     PUSH   HL   
3091   11 05 00               LD   DE,5   
3094   B7                     OR   A   
3095   ED 52                  SBC   HL,DE   
3097   7D                     LD   A,L   
3098   B4                     OR   H   
3099   28 68                  JR   Z,expectM_0_2213S43   
309B   CD 87 09               CALL   printStr   
309E   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 2F 66 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} /f x= 10 15 x^ -"   
30C2   CD 87 09               CALL   printStr   
30C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30D4   21 05 00               LD   HL,5   
30D7   CD D5 08               CALL   prtdec   
30DA   CD 87 09               CALL   printStr   
30DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30EA   E1                     POP   hl   
30EB   E5                     PUSH   hl   
30EC   CD D5 08               CALL   prtdec   
30EF   E1                     POP   hl   
30F0   CD 87 09               CALL   printStr   
30F3   20 28 23 00            .CSTR   " (#"   
30F7   CD 1D 09               CALL   prthex   
30FA   CD 87 09               CALL   printStr   
30FD   29 0D 0A 00            .CSTR   ")\r\n"   
3101   76                     HALT      
3102   00                     .CSTR      
3103                EXPECTM_0_2213S43:      
3103   E1                     POP   HL   
3104                          ;*Macro unroll:  test "(a:b) {2} /f x= 1 x^", 2
3104   31 80 3C               LD   SP,STACK   
3107   CD 8E 09               CALL   init   
310A   CD BC 3B               CALL   execStr   
310D   28 61 3A 62 29 20 7B 32 7D 20 2F 66 20 78 3D 20 31 20 78 5E 00 .CSTR   "(a:b) {2} /f x= 1 x^"   
3122                          ;*Macro unroll:  expect "(a:b) {2} /f x= 1 x^",2
3122   E1                     POP   HL   
3123   E5                     PUSH   HL   
3124   11 02 00               LD   DE,2   
3127   B7                     OR   A   
3128   ED 52                  SBC   HL,DE   
312A   7D                     LD   A,L   
312B   B4                     OR   H   
312C   28 5F                  JR   Z,expectM_0_2214S43   
312E   CD 87 09               CALL   printStr   
3131   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 2F 66 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","(a:b) {2} /f x= 1 x^"   
314C   CD 87 09               CALL   printStr   
314F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
315E   21 02 00               LD   HL,2   
3161   CD D5 08               CALL   prtdec   
3164   CD 87 09               CALL   printStr   
3167   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3174   E1                     POP   hl   
3175   E5                     PUSH   hl   
3176   CD D5 08               CALL   prtdec   
3179   E1                     POP   hl   
317A   CD 87 09               CALL   printStr   
317D   20 28 23 00            .CSTR   " (#"   
3181   CD 1D 09               CALL   prthex   
3184   CD 87 09               CALL   printStr   
3187   29 0D 0A 00            .CSTR   ")\r\n"   
318B   76                     HALT      
318C   00                     .CSTR      
318D                EXPECTM_0_2214S43:      
318D   E1                     POP   HL   
318E                          ;*Macro unroll:  test "(:b) {100 $b= $b} /f x= x^", 100
318E   31 80 3C               LD   SP,STACK   
3191   CD 8E 09               CALL   init   
3194   CD BC 3B               CALL   execStr   
3197   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 2F 66 20 78 3D 20 78 5E 00 .CSTR   "(:b) {100 $b= $b} /f x= x^"   
31B2                          ;*Macro unroll:  expect "(:b) {100 $b= $b} /f x= x^",100
31B2   E1                     POP   HL   
31B3   E5                     PUSH   HL   
31B4   11 64 00               LD   DE,100   
31B7   B7                     OR   A   
31B8   ED 52                  SBC   HL,DE   
31BA   7D                     LD   A,L   
31BB   B4                     OR   H   
31BC   28 65                  JR   Z,expectM_0_2215S43   
31BE   CD 87 09               CALL   printStr   
31C1   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 2F 66 20 78 3D 20 78 5E 00 .CSTR   "Code: ","(:b) {100 $b= $b} /f x= x^"   
31E2   CD 87 09               CALL   printStr   
31E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31F4   21 64 00               LD   HL,100   
31F7   CD D5 08               CALL   prtdec   
31FA   CD 87 09               CALL   printStr   
31FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
320A   E1                     POP   hl   
320B   E5                     PUSH   hl   
320C   CD D5 08               CALL   prtdec   
320F   E1                     POP   hl   
3210   CD 87 09               CALL   printStr   
3213   20 28 23 00            .CSTR   " (#"   
3217   CD 1D 09               CALL   prthex   
321A   CD 87 09               CALL   printStr   
321D   29 0D 0A 00            .CSTR   ")\r\n"   
3221   76                     HALT      
3222   00                     .CSTR      
3223                EXPECTM_0_2215S43:      
3223   E1                     POP   HL   
3224                          ;*Macro unroll:  test "(a:b) {1 $b= $b} /f x= 2 x^", 1
3224   31 80 3C               LD   SP,STACK   
3227   CD 8E 09               CALL   init   
322A   CD BC 3B               CALL   execStr   
322D   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 2F 66 20 78 3D 20 32 20 78 5E 00 .CSTR   "(a:b) {1 $b= $b} /f x= 2 x^"   
3249                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} /f x= 2 x^",1
3249   E1                     POP   HL   
324A   E5                     PUSH   HL   
324B   11 01 00               LD   DE,1   
324E   B7                     OR   A   
324F   ED 52                  SBC   HL,DE   
3251   7D                     LD   A,L   
3252   B4                     OR   H   
3253   28 66                  JR   Z,expectM_0_2216S43   
3255   CD 87 09               CALL   printStr   
3258   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 2F 66 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","(a:b) {1 $b= $b} /f x= 2 x^"   
327A   CD 87 09               CALL   printStr   
327D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
328C   21 01 00               LD   HL,1   
328F   CD D5 08               CALL   prtdec   
3292   CD 87 09               CALL   printStr   
3295   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32A2   E1                     POP   hl   
32A3   E5                     PUSH   hl   
32A4   CD D5 08               CALL   prtdec   
32A7   E1                     POP   hl   
32A8   CD 87 09               CALL   printStr   
32AB   20 28 23 00            .CSTR   " (#"   
32AF   CD 1D 09               CALL   prthex   
32B2   CD 87 09               CALL   printStr   
32B5   29 0D 0A 00            .CSTR   ")\r\n"   
32B9   76                     HALT      
32BA   00                     .CSTR      
32BB                EXPECTM_0_2216S43:      
32BB   E1                     POP   HL   
32BC                          ;*Macro unroll:  test "(a:b) {$a $b= $b} /f x= 2 x^", 2
32BC   31 80 3C               LD   SP,STACK   
32BF   CD 8E 09               CALL   init   
32C2   CD BC 3B               CALL   execStr   
32C5   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 2F 66 20 78 3D 20 32 20 78 5E 00 .CSTR   "(a:b) {$a $b= $b} /f x= 2 x^"   
32E2                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} /f x= 2 x^",2
32E2   E1                     POP   HL   
32E3   E5                     PUSH   HL   
32E4   11 02 00               LD   DE,2   
32E7   B7                     OR   A   
32E8   ED 52                  SBC   HL,DE   
32EA   7D                     LD   A,L   
32EB   B4                     OR   H   
32EC   28 67                  JR   Z,expectM_0_2217S43   
32EE   CD 87 09               CALL   printStr   
32F1   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 2F 66 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","(a:b) {$a $b= $b} /f x= 2 x^"   
3314   CD 87 09               CALL   printStr   
3317   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3326   21 02 00               LD   HL,2   
3329   CD D5 08               CALL   prtdec   
332C   CD 87 09               CALL   printStr   
332F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
333C   E1                     POP   hl   
333D   E5                     PUSH   hl   
333E   CD D5 08               CALL   prtdec   
3341   E1                     POP   hl   
3342   CD 87 09               CALL   printStr   
3345   20 28 23 00            .CSTR   " (#"   
3349   CD 1D 09               CALL   prthex   
334C   CD 87 09               CALL   printStr   
334F   29 0D 0A 00            .CSTR   ")\r\n"   
3353   76                     HALT      
3354   00                     .CSTR      
3355                EXPECTM_0_2217S43:      
3355   E1                     POP   HL   
3356                          ;*Macro unroll:  test "1 10 20 (ab) {/T {$a} {$b} ??} /f^ +", 11
3356   31 80 3C               LD   SP,STACK   
3359   CD 8E 09               CALL   init   
335C   CD BC 3B               CALL   execStr   
335F   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2F 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 2F 66 5E 20 2B 00 .CSTR   "1 10 20 (ab) {/T {$a} {$b} ??} /f^ +"   
3384                          ;*Macro unroll:  expect "1 10 20 (ab) {/T {$a} {$b} ??} /f^ +",11
3384   E1                     POP   HL   
3385   E5                     PUSH   HL   
3386   11 0B 00               LD   DE,11   
3389   B7                     OR   A   
338A   ED 52                  SBC   HL,DE   
338C   7D                     LD   A,L   
338D   B4                     OR   H   
338E   28 6F                  JR   Z,expectM_0_2218S43   
3390   CD 87 09               CALL   printStr   
3393   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2F 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 2F 66 5E 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {/T {$a} {$b} ??} /f^ +"   
33BE   CD 87 09               CALL   printStr   
33C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33D0   21 0B 00               LD   HL,11   
33D3   CD D5 08               CALL   prtdec   
33D6   CD 87 09               CALL   printStr   
33D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33E6   E1                     POP   hl   
33E7   E5                     PUSH   hl   
33E8   CD D5 08               CALL   prtdec   
33EB   E1                     POP   hl   
33EC   CD 87 09               CALL   printStr   
33EF   20 28 23 00            .CSTR   " (#"   
33F3   CD 1D 09               CALL   prthex   
33F6   CD 87 09               CALL   printStr   
33F9   29 0D 0A 00            .CSTR   ")\r\n"   
33FD   76                     HALT      
33FE   00                     .CSTR      
33FF                EXPECTM_0_2218S43:      
33FF   E1                     POP   HL   
3400                          ;*Macro unroll:  test "1 10 20 (ab) {/F {$a} {$b} ??} /f^ +", 21
3400   31 80 3C               LD   SP,STACK   
3403   CD 8E 09               CALL   init   
3406   CD BC 3B               CALL   execStr   
3409   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2F 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 2F 66 5E 20 2B 00 .CSTR   "1 10 20 (ab) {/F {$a} {$b} ??} /f^ +"   
342E                          ;*Macro unroll:  expect "1 10 20 (ab) {/F {$a} {$b} ??} /f^ +",21
342E   E1                     POP   HL   
342F   E5                     PUSH   HL   
3430   11 15 00               LD   DE,21   
3433   B7                     OR   A   
3434   ED 52                  SBC   HL,DE   
3436   7D                     LD   A,L   
3437   B4                     OR   H   
3438   28 6F                  JR   Z,expectM_0_2219S43   
343A   CD 87 09               CALL   printStr   
343D   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2F 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 2F 66 5E 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {/F {$a} {$b} ??} /f^ +"   
3468   CD 87 09               CALL   printStr   
346B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
347A   21 15 00               LD   HL,21   
347D   CD D5 08               CALL   prtdec   
3480   CD 87 09               CALL   printStr   
3483   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3490   E1                     POP   hl   
3491   E5                     PUSH   hl   
3492   CD D5 08               CALL   prtdec   
3495   E1                     POP   hl   
3496   CD 87 09               CALL   printStr   
3499   20 28 23 00            .CSTR   " (#"   
349D   CD 1D 09               CALL   prthex   
34A0   CD 87 09               CALL   printStr   
34A3   29 0D 0A 00            .CSTR   ")\r\n"   
34A7   76                     HALT      
34A8   00                     .CSTR      
34A9                EXPECTM_0_2219S43:      
34A9   E1                     POP   HL   
34AA                          ;*Macro unroll:  test "[10 20 30] 1%", 20
34AA   31 80 3C               LD   SP,STACK   
34AD   CD 8E 09               CALL   init   
34B0   CD BC 3B               CALL   execStr   
34B3   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
34C1                          ;*Macro unroll:  expect "[10 20 30] 1%",20
34C1   E1                     POP   HL   
34C2   E5                     PUSH   HL   
34C3   11 14 00               LD   DE,20   
34C6   B7                     OR   A   
34C7   ED 52                  SBC   HL,DE   
34C9   7D                     LD   A,L   
34CA   B4                     OR   H   
34CB   28 58                  JR   Z,expectM_0_2220S43   
34CD   CD 87 09               CALL   printStr   
34D0   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
34E4   CD 87 09               CALL   printStr   
34E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34F6   21 14 00               LD   HL,20   
34F9   CD D5 08               CALL   prtdec   
34FC   CD 87 09               CALL   printStr   
34FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
350C   E1                     POP   hl   
350D   E5                     PUSH   hl   
350E   CD D5 08               CALL   prtdec   
3511   E1                     POP   hl   
3512   CD 87 09               CALL   printStr   
3515   20 28 23 00            .CSTR   " (#"   
3519   CD 1D 09               CALL   prthex   
351C   CD 87 09               CALL   printStr   
351F   29 0D 0A 00            .CSTR   ")\r\n"   
3523   76                     HALT      
3524   00                     .CSTR      
3525                EXPECTM_0_2220S43:      
3525   E1                     POP   HL   
3526                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
3526   31 80 3C               LD   SP,STACK   
3529   CD 8E 09               CALL   init   
352C   CD BC 3B               CALL   execStr   
352F   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
353D                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
353D   E1                     POP   HL   
353E   E5                     PUSH   HL   
353F   11 02 00               LD   DE,2   
3542   B7                     OR   A   
3543   ED 52                  SBC   HL,DE   
3545   7D                     LD   A,L   
3546   B4                     OR   H   
3547   28 58                  JR   Z,expectM_0_2221S43   
3549   CD 87 09               CALL   printStr   
354C   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3560   CD 87 09               CALL   printStr   
3563   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3572   21 02 00               LD   HL,2   
3575   CD D5 08               CALL   prtdec   
3578   CD 87 09               CALL   printStr   
357B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3588   E1                     POP   hl   
3589   E5                     PUSH   hl   
358A   CD D5 08               CALL   prtdec   
358D   E1                     POP   hl   
358E   CD 87 09               CALL   printStr   
3591   20 28 23 00            .CSTR   " (#"   
3595   CD 1D 09               CALL   prthex   
3598   CD 87 09               CALL   printStr   
359B   29 0D 0A 00            .CSTR   ")\r\n"   
359F   76                     HALT      
35A0   00                     .CSTR      
35A1                EXPECTM_0_2221S43:      
35A1   E1                     POP   HL   
35A2                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
35A2   31 80 3C               LD   SP,STACK   
35A5   CD 8E 09               CALL   init   
35A8   CD BC 3B               CALL   execStr   
35AB   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
35BF                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
35BF   E1                     POP   HL   
35C0   E5                     PUSH   HL   
35C1   11 42 00               LD   DE,66   
35C4   B7                     OR   A   
35C5   ED 52                  SBC   HL,DE   
35C7   7D                     LD   A,L   
35C8   B4                     OR   H   
35C9   28 5E                  JR   Z,expectM_0_2222S43   
35CB   CD 87 09               CALL   printStr   
35CE   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
35E8   CD 87 09               CALL   printStr   
35EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35FA   21 42 00               LD   HL,66   
35FD   CD D5 08               CALL   prtdec   
3600   CD 87 09               CALL   printStr   
3603   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3610   E1                     POP   hl   
3611   E5                     PUSH   hl   
3612   CD D5 08               CALL   prtdec   
3615   E1                     POP   hl   
3616   CD 87 09               CALL   printStr   
3619   20 28 23 00            .CSTR   " (#"   
361D   CD 1D 09               CALL   prthex   
3620   CD 87 09               CALL   printStr   
3623   29 0D 0A 00            .CSTR   ")\r\n"   
3627   76                     HALT      
3628   00                     .CSTR      
3629                EXPECTM_0_2222S43:      
3629   E1                     POP   HL   
362A                          ;*Macro unroll:  test "0 [{10} {20} {30}] /s", 10
362A   31 80 3C               LD   SP,STACK   
362D   CD 8E 09               CALL   init   
3630   CD BC 3B               CALL   execStr   
3633   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 2F 73 00 .CSTR   "0 [{10} {20} {30}] /s"   
3649                          ;*Macro unroll:  expect "0 [{10} {20} {30}] /s",10
3649   E1                     POP   HL   
364A   E5                     PUSH   HL   
364B   11 0A 00               LD   DE,10   
364E   B7                     OR   A   
364F   ED 52                  SBC   HL,DE   
3651   7D                     LD   A,L   
3652   B4                     OR   H   
3653   28 60                  JR   Z,expectM_0_2223S43   
3655   CD 87 09               CALL   printStr   
3658   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 2F 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] /s"   
3674   CD 87 09               CALL   printStr   
3677   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3686   21 0A 00               LD   HL,10   
3689   CD D5 08               CALL   prtdec   
368C   CD 87 09               CALL   printStr   
368F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
369C   E1                     POP   hl   
369D   E5                     PUSH   hl   
369E   CD D5 08               CALL   prtdec   
36A1   E1                     POP   hl   
36A2   CD 87 09               CALL   printStr   
36A5   20 28 23 00            .CSTR   " (#"   
36A9   CD 1D 09               CALL   prthex   
36AC   CD 87 09               CALL   printStr   
36AF   29 0D 0A 00            .CSTR   ")\r\n"   
36B3   76                     HALT      
36B4   00                     .CSTR      
36B5                EXPECTM_0_2223S43:      
36B5   E1                     POP   HL   
36B6                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] /s} /f^", 10
36B6   31 80 3C               LD   SP,STACK   
36B9   CD 8E 09               CALL   init   
36BC   CD BC 3B               CALL   execStr   
36BF   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 2F 66 5E 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] /s} /f^"   
36E3                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] /s} /f^",10
36E3   E1                     POP   HL   
36E4   E5                     PUSH   HL   
36E5   11 0A 00               LD   DE,10   
36E8   B7                     OR   A   
36E9   ED 52                  SBC   HL,DE   
36EB   7D                     LD   A,L   
36EC   B4                     OR   H   
36ED   28 6E                  JR   Z,expectM_0_2224S43   
36EF   CD 87 09               CALL   printStr   
36F2   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 2F 66 5E 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] /s} /f^"   
371C   CD 87 09               CALL   printStr   
371F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
372E   21 0A 00               LD   HL,10   
3731   CD D5 08               CALL   prtdec   
3734   CD 87 09               CALL   printStr   
3737   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3744   E1                     POP   hl   
3745   E5                     PUSH   hl   
3746   CD D5 08               CALL   prtdec   
3749   E1                     POP   hl   
374A   CD 87 09               CALL   printStr   
374D   20 28 23 00            .CSTR   " (#"   
3751   CD 1D 09               CALL   prthex   
3754   CD 87 09               CALL   printStr   
3757   29 0D 0A 00            .CSTR   ")\r\n"   
375B   76                     HALT      
375C   00                     .CSTR      
375D                EXPECTM_0_2224S43:      
375D   E1                     POP   HL   
375E                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] /s} /f^", 10
375E   31 80 3C               LD   SP,STACK   
3761   CD 8E 09               CALL   init   
3764   CD BC 3B               CALL   execStr   
3767   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 2F 66 5E 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] /s} /f^"   
378D                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] /s} /f^",10
378D   E1                     POP   HL   
378E   E5                     PUSH   HL   
378F   11 0A 00               LD   DE,10   
3792   B7                     OR   A   
3793   ED 52                  SBC   HL,DE   
3795   7D                     LD   A,L   
3796   B4                     OR   H   
3797   28 70                  JR   Z,expectM_0_2225S43   
3799   CD 87 09               CALL   printStr   
379C   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 2F 66 5E 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] /s} /f^"   
37C8   CD 87 09               CALL   printStr   
37CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37DA   21 0A 00               LD   HL,10   
37DD   CD D5 08               CALL   prtdec   
37E0   CD 87 09               CALL   printStr   
37E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37F0   E1                     POP   hl   
37F1   E5                     PUSH   hl   
37F2   CD D5 08               CALL   prtdec   
37F5   E1                     POP   hl   
37F6   CD 87 09               CALL   printStr   
37F9   20 28 23 00            .CSTR   " (#"   
37FD   CD 1D 09               CALL   prthex   
3800   CD 87 09               CALL   printStr   
3803   29 0D 0A 00            .CSTR   ")\r\n"   
3807   76                     HALT      
3808   00                     .CSTR      
3809                EXPECTM_0_2225S43:      
3809   E1                     POP   HL   
380A                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] /s} /f^", 20
380A   31 80 3C               LD   SP,STACK   
380D   CD 8E 09               CALL   init   
3810   CD BC 3B               CALL   execStr   
3813   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 2F 66 5E 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] /s} /f^"   
3839                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] /s} /f^",20
3839   E1                     POP   HL   
383A   E5                     PUSH   HL   
383B   11 14 00               LD   DE,20   
383E   B7                     OR   A   
383F   ED 52                  SBC   HL,DE   
3841   7D                     LD   A,L   
3842   B4                     OR   H   
3843   28 70                  JR   Z,expectM_0_2226S43   
3845   CD 87 09               CALL   printStr   
3848   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 2F 66 5E 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] /s} /f^"   
3874   CD 87 09               CALL   printStr   
3877   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3886   21 14 00               LD   HL,20   
3889   CD D5 08               CALL   prtdec   
388C   CD 87 09               CALL   printStr   
388F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
389C   E1                     POP   hl   
389D   E5                     PUSH   hl   
389E   CD D5 08               CALL   prtdec   
38A1   E1                     POP   hl   
38A2   CD 87 09               CALL   printStr   
38A5   20 28 23 00            .CSTR   " (#"   
38A9   CD 1D 09               CALL   prthex   
38AC   CD 87 09               CALL   printStr   
38AF   29 0D 0A 00            .CSTR   ")\r\n"   
38B3   76                     HALT      
38B4   00                     .CSTR      
38B5                EXPECTM_0_2226S43:      
38B5   E1                     POP   HL   
38B6                          ;*Macro unroll:  test "5 [4] (a) {$a} /f /p ^", 4
38B6   31 80 3C               LD   SP,STACK   
38B9   CD 8E 09               CALL   init   
38BC   CD BC 3B               CALL   execStr   
38BF   35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 2F 66 20 2F 70 20 5E 00 .CSTR   "5 [4] (a) {$a} /f /p ^"   
38D6                          ;*Macro unroll:  expect "5 [4] (a) {$a} /f /p ^",4
38D6   E1                     POP   HL   
38D7   E5                     PUSH   HL   
38D8   11 04 00               LD   DE,4   
38DB   B7                     OR   A   
38DC   ED 52                  SBC   HL,DE   
38DE   7D                     LD   A,L   
38DF   B4                     OR   H   
38E0   28 61                  JR   Z,expectM_0_2227S43   
38E2   CD 87 09               CALL   printStr   
38E5   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 2F 66 20 2F 70 20 5E 00 .CSTR   "Code: ","5 [4] (a) {$a} /f /p ^"   
3902   CD 87 09               CALL   printStr   
3905   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3914   21 04 00               LD   HL,4   
3917   CD D5 08               CALL   prtdec   
391A   CD 87 09               CALL   printStr   
391D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
392A   E1                     POP   hl   
392B   E5                     PUSH   hl   
392C   CD D5 08               CALL   prtdec   
392F   E1                     POP   hl   
3930   CD 87 09               CALL   printStr   
3933   20 28 23 00            .CSTR   " (#"   
3937   CD 1D 09               CALL   prthex   
393A   CD 87 09               CALL   printStr   
393D   29 0D 0A 00            .CSTR   ")\r\n"   
3941   76                     HALT      
3942   00                     .CSTR      
3943                EXPECTM_0_2227S43:      
3943   E1                     POP   HL   
3944                          ;*Macro unroll:  test "5 [4] (ab) {$a $b +} /f /p ^", 9
3944   31 80 3C               LD   SP,STACK   
3947   CD 8E 09               CALL   init   
394A   CD BC 3B               CALL   execStr   
394D   35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 2F 66 20 2F 70 20 5E 00 .CSTR   "5 [4] (ab) {$a $b +} /f /p ^"   
396A                          ;*Macro unroll:  expect "5 [4] (ab) {$a $b +} /f /p ^",9
396A   E1                     POP   HL   
396B   E5                     PUSH   HL   
396C   11 09 00               LD   DE,9   
396F   B7                     OR   A   
3970   ED 52                  SBC   HL,DE   
3972   7D                     LD   A,L   
3973   B4                     OR   H   
3974   28 67                  JR   Z,expectM_0_2228S43   
3976   CD 87 09               CALL   printStr   
3979   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 2F 66 20 2F 70 20 5E 00 .CSTR   "Code: ","5 [4] (ab) {$a $b +} /f /p ^"   
399C   CD 87 09               CALL   printStr   
399F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39AE   21 09 00               LD   HL,9   
39B1   CD D5 08               CALL   prtdec   
39B4   CD 87 09               CALL   printStr   
39B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39C4   E1                     POP   hl   
39C5   E5                     PUSH   hl   
39C6   CD D5 08               CALL   prtdec   
39C9   E1                     POP   hl   
39CA   CD 87 09               CALL   printStr   
39CD   20 28 23 00            .CSTR   " (#"   
39D1   CD 1D 09               CALL   prthex   
39D4   CD 87 09               CALL   printStr   
39D7   29 0D 0A 00            .CSTR   ")\r\n"   
39DB   76                     HALT      
39DC   00                     .CSTR      
39DD                EXPECTM_0_2228S43:      
39DD   E1                     POP   HL   
39DE                          ;*Macro unroll:  test "3i= {: i/b i-- :}/d + +", 6
39DE   31 80 3C               LD   SP,STACK   
39E1   CD 8E 09               CALL   init   
39E4   CD BC 3B               CALL   execStr   
39E7   33 69 3D 20 7B 3A 20 69 2F 62 20 69 2D 2D 20 3A 7D 2F 64 20 2B 20 2B 00 .CSTR   "3i= {: i/b i-- :}/d + +"   
39FF                          ;*Macro unroll:  expect "3i= {: i/b i-- :}/d + +",6
39FF   E1                     POP   HL   
3A00   E5                     PUSH   HL   
3A01   11 06 00               LD   DE,6   
3A04   B7                     OR   A   
3A05   ED 52                  SBC   HL,DE   
3A07   7D                     LD   A,L   
3A08   B4                     OR   H   
3A09   28 62                  JR   Z,expectM_0_2229S43   
3A0B   CD 87 09               CALL   printStr   
3A0E   43 6F 64 65 3A 20 33 69 3D 20 7B 3A 20 69 2F 62 20 69 2D 2D 20 3A 7D 2F 64 20 2B 20 2B 00 .CSTR   "Code: ","3i= {: i/b i-- :}/d + +"   
3A2C   CD 87 09               CALL   printStr   
3A2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A3E   21 06 00               LD   HL,6   
3A41   CD D5 08               CALL   prtdec   
3A44   CD 87 09               CALL   printStr   
3A47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A54   E1                     POP   hl   
3A55   E5                     PUSH   hl   
3A56   CD D5 08               CALL   prtdec   
3A59   E1                     POP   hl   
3A5A   CD 87 09               CALL   printStr   
3A5D   20 28 23 00            .CSTR   " (#"   
3A61   CD 1D 09               CALL   prthex   
3A64   CD 87 09               CALL   printStr   
3A67   29 0D 0A 00            .CSTR   ")\r\n"   
3A6B   76                     HALT      
3A6C   00                     .CSTR      
3A6D                EXPECTM_0_2229S43:      
3A6D   E1                     POP   HL   
3A6E                          ;*Macro unroll:  test "3i= [ {: i/b i-- :}/d ] 1%", 2
3A6E   31 80 3C               LD   SP,STACK   
3A71   CD 8E 09               CALL   init   
3A74   CD BC 3B               CALL   execStr   
3A77   33 69 3D 20 5B 20 7B 3A 20 69 2F 62 20 69 2D 2D 20 3A 7D 2F 64 20 5D 20 31 25 00 .CSTR   "3i= [ {: i/b i-- :}/d ] 1%"   
3A92                          ;*Macro unroll:  expect "3i= [ {: i/b i-- :}/d ] 1%",2
3A92   E1                     POP   HL   
3A93   E5                     PUSH   HL   
3A94   11 02 00               LD   DE,2   
3A97   B7                     OR   A   
3A98   ED 52                  SBC   HL,DE   
3A9A   7D                     LD   A,L   
3A9B   B4                     OR   H   
3A9C   28 65                  JR   Z,expectM_0_2230S43   
3A9E   CD 87 09               CALL   printStr   
3AA1   43 6F 64 65 3A 20 33 69 3D 20 5B 20 7B 3A 20 69 2F 62 20 69 2D 2D 20 3A 7D 2F 64 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ {: i/b i-- :}/d ] 1%"   
3AC2   CD 87 09               CALL   printStr   
3AC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AD4   21 02 00               LD   HL,2   
3AD7   CD D5 08               CALL   prtdec   
3ADA   CD 87 09               CALL   printStr   
3ADD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AEA   E1                     POP   hl   
3AEB   E5                     PUSH   hl   
3AEC   CD D5 08               CALL   prtdec   
3AEF   E1                     POP   hl   
3AF0   CD 87 09               CALL   printStr   
3AF3   20 28 23 00            .CSTR   " (#"   
3AF7   CD 1D 09               CALL   prthex   
3AFA   CD 87 09               CALL   printStr   
3AFD   29 0D 0A 00            .CSTR   ")\r\n"   
3B01   76                     HALT      
3B02   00                     .CSTR      
3B03                EXPECTM_0_2230S43:      
3B03   E1                     POP   HL   
3B04                          ;*Macro unroll:  test "0 j= 4 i= {: i/b i j+= i--; :}/d j ", 10
3B04   31 80 3C               LD   SP,STACK   
3B07   CD 8E 09               CALL   init   
3B0A   CD BC 3B               CALL   execStr   
3B0D   30 20 6A 3D 20 34 20 69 3D 20 7B 3A 20 69 2F 62 20 69 20 6A 2B 3D 20 69 2D 2D 3B 20 3A 7D 2F 64 20 6A 20 00 .CSTR   "0 j= 4 i= {: i/b i j+= i--; :}/d j "   
3B31                          ;*Macro unroll:  expect "0 j= 4 i= {: i/b i j+= i--; :}/d j ",10
3B31   E1                     POP   HL   
3B32   E5                     PUSH   HL   
3B33   11 0A 00               LD   DE,10   
3B36   B7                     OR   A   
3B37   ED 52                  SBC   HL,DE   
3B39   7D                     LD   A,L   
3B3A   B4                     OR   H   
3B3B   28 6E                  JR   Z,expectM_0_2231S43   
3B3D   CD 87 09               CALL   printStr   
3B40   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 7B 3A 20 69 2F 62 20 69 20 6A 2B 3D 20 69 2D 2D 3B 20 3A 7D 2F 64 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= {: i/b i j+= i--; :}/d j "   
3B6A   CD 87 09               CALL   printStr   
3B6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B7C   21 0A 00               LD   HL,10   
3B7F   CD D5 08               CALL   prtdec   
3B82   CD 87 09               CALL   printStr   
3B85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B92   E1                     POP   hl   
3B93   E5                     PUSH   hl   
3B94   CD D5 08               CALL   prtdec   
3B97   E1                     POP   hl   
3B98   CD 87 09               CALL   printStr   
3B9B   20 28 23 00            .CSTR   " (#"   
3B9F   CD 1D 09               CALL   prthex   
3BA2   CD 87 09               CALL   printStr   
3BA5   29 0D 0A 00            .CSTR   ")\r\n"   
3BA9   76                     HALT      
3BAA   00                     .CSTR      
3BAB                EXPECTM_0_2231S43:      
3BAB   E1                     POP   HL   
3BAC                             ; 
3BAC   CD 87 09               CALL   printStr   
3BAF   44 6F 6E 65 21 00      .CSTR   "Done!"   
3BB5   76                     HALT      
3BB6                          ALIGN   2   
3BB6                PRINTER:      
3BB6   E1                     POP   hl   
3BB7   CD D5 08               CALL   prtdec   
3BBA   DD E9                  JP   (ix)   
3BBC                             ; executes a null teminated string (null executes exit_)
3BBC                             ; the string should be immedaitely following the call
3BBC                EXECSTR:      ; create a root stack frame
3BBC   C1                     POP   bc   ; bc = code*
3BBD   0B                     DEC   bc   ; dec to prepare for next routine
3BBE   11 00 00               LD   de,0   
3BC1   D5                     PUSH   de   ; push fake IP
3BC2   D5                     PUSH   de   ; push null arg_list*
3BC3   D5                     PUSH   de   ; push null first_arg*
3BC4   D5                     PUSH   de   ; push fake BP
3BC5   DD E9                  JP   (ix)   
3BC7                          ALIGN   $100   
3C00                             ; .org RAMSTART
3C00                          DS   DSIZE   
3C80                STACK:       
3C80                          ALIGN   $100   
3D00                VARS:        
3D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
3DD0                RESTARTS:      
3DD0                RST08:    DS   2   
3DD2                RST10:    DS   2   
3DD4                RST18:    DS   2   
3DD6                RST20:    DS   2   
3DD8                RST28:    DS   2   
3DDA                RST30:    DS   2   ; 
3DDC                BAUD:     DS   2   ; 
3DDE                INTVEC:   DS   2   ; 
3DE0                NMIVEC:   DS   2   ; 
3DE2                GETCVEC:   DS   2   ; 
3DE4                PUTCVEC:   DS   2   ; 
3DE6                SYSVARS:      
3DE6                             ; initialised sys variables
3DE6                VDATAWIDTH:   DS   2   ; 
3DE8                VTIBPTR:   DS   2   ; 
3DEA                VNEXT:    DS   2   ; 
3DEC                VHEAPPTR:   DS   2   ; 
3DEE                             ; uninitialised sys variables
3DEE                VBLOCKEND:   DS   2   ; 
3DF0                VPOINTER:   DS   2   ; 
3DF2                VHASHSTR:   DS   2   ; 
3DF4                VLASTDEF:   DS   2   ; 
3DF6                VREMAIN:   DS   2   ; 
3DF8                VTEMP1:   DS   2   ; 
3DFA                VTEMP2:   DS   2   ; 
3DFC                TBPTR:    DS   2   ; reserved for tests
3DFE                          ALIGN   $100   
3E00                TIB:      DS   TIBSIZE   
3F00                          ALIGN   $100   
3F00                PAD:      DS   $100   
4000                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08D3 DEFINED AT LINE 1366 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1326 IN monty.asm
                    > USED AT LINE 1567 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 754 IN monty.asm
                    > USED AT LINE 761 IN monty.asm
                    > USED AT LINE 1377 IN monty.asm
                    > USED AT LINE 1418 IN monty.asm
                    > USED AT LINE 1442 IN monty.asm
                    > USED AT LINE 1445 IN monty.asm
                    > USED AT LINE 1598 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 812 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 817 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1634 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1123 IN monty.asm
                    > USED AT LINE 1464 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1522 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
PLUS_:              0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0303 DEFINED AT LINE 217 IN monty.asm
AND_:               0306 DEFINED AT LINE 219 IN monty.asm
ARG_:               0309 DEFINED AT LINE 221 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 223 IN monty.asm
ARRBEGIN_:          030F DEFINED AT LINE 225 IN monty.asm
ARREND_:            0312 DEFINED AT LINE 227 IN monty.asm
ARRINDEX_:          0315 DEFINED AT LINE 229 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 231 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 233 IN monty.asm
CHAR_:              031E DEFINED AT LINE 235 IN monty.asm
COMMAND_:           0321 DEFINED AT LINE 237 IN monty.asm
SEMICOLON_:         0324 DEFINED AT LINE 239 IN monty.asm
DOT_:               0327 DEFINED AT LINE 242 IN monty.asm
REMAIN_:            032A DEFINED AT LINE 244 IN monty.asm
COLON_:             032D DEFINED AT LINE 246 IN monty.asm
IDENTU_:            0330 DEFINED AT LINE 248 IN monty.asm
IDENTL_:            0333 DEFINED AT LINE 250 IN monty.asm
IF_:                0336 DEFINED AT LINE 252 IN monty.asm
INV_:               0339 DEFINED AT LINE 254 IN monty.asm
MUL_:               033F DEFINED AT LINE 257 IN monty.asm
NOT_:               0342 DEFINED AT LINE 259 IN monty.asm
NUM_:               0347 DEFINED AT LINE 262 IN monty.asm
                    > USED AT LINE 1150 IN monty.asm
HEXNUM_:            034A DEFINED AT LINE 264 IN monty.asm
OR_:                034D DEFINED AT LINE 266 IN monty.asm
CARET_:             0350 DEFINED AT LINE 268 IN monty.asm
STRING_:            0353 DEFINED AT LINE 270 IN monty.asm
MINUS_:             0356 DEFINED AT LINE 272 IN monty.asm
EQ_:                0359 DEFINED AT LINE 274 IN monty.asm
EQ0:                0363 DEFINED AT LINE 281 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
EQ1:                0364 DEFINED AT LINE 283 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
GT_:                0368 DEFINED AT LINE 287 IN monty.asm
LT_:                0373 DEFINED AT LINE 296 IN monty.asm
LT1:                037C DEFINED AT LINE 303 IN monty.asm
                    > USED AT LINE 294 IN monty.asm
DIV_:               0385 DEFINED AT LINE 309 IN monty.asm
NOP_:               0388 DEFINED AT LINE 311 IN monty.asm
PLUS:               038A DEFINED AT LINE 318 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               0396 DEFINED AT LINE 327 IN monty.asm
                    > USED AT LINE 322 IN monty.asm
ADD3:               039A DEFINED AT LINE 332 IN monty.asm
                    > USED AT LINE 358 IN monty.asm
                    > USED AT LINE 735 IN monty.asm
                    > USED AT LINE 1027 IN monty.asm
                    > USED AT LINE 1165 IN monty.asm
ADDR:               03A5 DEFINED AT LINE 342 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AND:                03B1 DEFINED AT LINE 348 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03B8 DEFINED AT LINE 356 IN monty.asm
                    > USED AT LINE 368 IN monty.asm
OR:                 03BC DEFINED AT LINE 360 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
XOR:                03C5 DEFINED AT LINE 370 IN monty.asm
                    > USED AT LINE 1200 IN monty.asm
XOR1:               03C6 DEFINED AT LINE 372 IN monty.asm
                    > USED AT LINE 256 IN monty.asm
ARG:                03D0 DEFINED AT LINE 386 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03EE DEFINED AT LINE 407 IN monty.asm
                    > USED AT LINE 413 IN monty.asm
ARG0A:              03F7 DEFINED AT LINE 415 IN monty.asm
                    > USED AT LINE 392 IN monty.asm
                    > USED AT LINE 399 IN monty.asm
ARG1:               03FC DEFINED AT LINE 418 IN monty.asm
                    > USED AT LINE 411 IN monty.asm
ARG1A:              0404 DEFINED AT LINE 425 IN monty.asm
                    > USED AT LINE 417 IN monty.asm
ARG_LIST:           0407 DEFINED AT LINE 434 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG_LIST1:          0411 DEFINED AT LINE 441 IN monty.asm
                    > USED AT LINE 459 IN monty.asm
ARG_LIST2:          041D DEFINED AT LINE 449 IN monty.asm
                    > USED AT LINE 446 IN monty.asm
ARG_LIST3:          0425 DEFINED AT LINE 457 IN monty.asm
                    > USED AT LINE 448 IN monty.asm
                    > USED AT LINE 455 IN monty.asm
ARG_LIST4:          0428 DEFINED AT LINE 460 IN monty.asm
                    > USED AT LINE 444 IN monty.asm
ARG_LIST5:          042D DEFINED AT LINE 465 IN monty.asm
                    > USED AT LINE 463 IN monty.asm
ARRBEGIN:           0439 DEFINED AT LINE 476 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             0455 DEFINED AT LINE 490 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARREND1:            046F DEFINED AT LINE 506 IN monty.asm
                    > USED AT LINE 522 IN monty.asm
ARREND2:            047F DEFINED AT LINE 516 IN monty.asm
                    > USED AT LINE 512 IN monty.asm
ARRINDEX:           04A3 DEFINED AT LINE 543 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARRINDEX0:          04AB DEFINED AT LINE 549 IN monty.asm
ARRINDEX1:          04AC DEFINED AT LINE 551 IN monty.asm
                    > USED AT LINE 548 IN monty.asm
ARRINDEX2:          04B8 DEFINED AT LINE 560 IN monty.asm
                    > USED AT LINE 557 IN monty.asm
ASSIGN:             04BB DEFINED AT LINE 565 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
ASSIGN0:            04BD DEFINED AT LINE 568 IN monty.asm
                    > USED AT LINE 326 IN monty.asm
                    > USED AT LINE 336 IN monty.asm
                    > USED AT LINE 1158 IN monty.asm
ASSIGNX:            04BE DEFINED AT LINE 570 IN monty.asm
ASSIGN1:            04CA DEFINED AT LINE 578 IN monty.asm
                    > USED AT LINE 575 IN monty.asm
BLOCK:              04CC DEFINED AT LINE 581 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK1:             04D0 DEFINED AT LINE 585 IN monty.asm
                    > USED AT LINE 589 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
                    > USED AT LINE 614 IN monty.asm
                    > USED AT LINE 619 IN monty.asm
                    > USED AT LINE 623 IN monty.asm
BLOCK2:             04FC DEFINED AT LINE 612 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
                    > USED AT LINE 601 IN monty.asm
                    > USED AT LINE 603 IN monty.asm
BLOCK3:             04FF DEFINED AT LINE 615 IN monty.asm
                    > USED AT LINE 606 IN monty.asm
                    > USED AT LINE 608 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
BLOCK4:             0507 DEFINED AT LINE 621 IN monty.asm
                    > USED AT LINE 592 IN monty.asm
                    > USED AT LINE 594 IN monty.asm
                    > USED AT LINE 596 IN monty.asm
BLOCK5:             050A DEFINED AT LINE 624 IN monty.asm
                    > USED AT LINE 620 IN monty.asm
BLOCK6:             0532 DEFINED AT LINE 643 IN monty.asm
                    > USED AT LINE 630 IN monty.asm
BLOCKEND:           0535 DEFINED AT LINE 647 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 1272 IN monty.asm
BLOCKEND1:          0561 DEFINED AT LINE 669 IN monty.asm
                    > USED AT LINE 662 IN monty.asm
BLOCKEND2:          056D DEFINED AT LINE 676 IN monty.asm
                    > USED AT LINE 668 IN monty.asm
BLOCKEND3:          057F DEFINED AT LINE 690 IN monty.asm
                    > USED AT LINE 682 IN monty.asm
CHAR:               058A DEFINED AT LINE 701 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR1:              058D DEFINED AT LINE 703 IN monty.asm
                    > USED AT LINE 714 IN monty.asm
CHAR2:              0599 DEFINED AT LINE 712 IN monty.asm
                    > USED AT LINE 709 IN monty.asm
CHAR3:              059C DEFINED AT LINE 715 IN monty.asm
                    > USED AT LINE 707 IN monty.asm
DIV:                059F DEFINED AT LINE 719 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
DOT:                05BD DEFINED AT LINE 737 IN monty.asm
                    > USED AT LINE 243 IN monty.asm
DOT1:               05C9 DEFINED AT LINE 745 IN monty.asm
                    > USED AT LINE 742 IN monty.asm
DOT2:               05D2 DEFINED AT LINE 750 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
DOT3:               05DC DEFINED AT LINE 756 IN monty.asm
                    > USED AT LINE 752 IN monty.asm
DOT4:               05E0 DEFINED AT LINE 759 IN monty.asm
                    > USED AT LINE 744 IN monty.asm
                    > USED AT LINE 749 IN monty.asm
                    > USED AT LINE 755 IN monty.asm
DIVIDE:             05E7 DEFINED AT LINE 767 IN monty.asm
                    > USED AT LINE 731 IN monty.asm
DIVIDE1:            05EC DEFINED AT LINE 770 IN monty.asm
                    > USED AT LINE 782 IN monty.asm
DIVIDE2:            05F9 DEFINED AT LINE 778 IN monty.asm
                    > USED AT LINE 775 IN monty.asm
DIVIDE3:            05FA DEFINED AT LINE 780 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
EQUALS:             0600 DEFINED AT LINE 788 IN monty.asm
                    > USED AT LINE 285 IN monty.asm
LESSTHANEQ:         0608 DEFINED AT LINE 796 IN monty.asm
                    > USED AT LINE 305 IN monty.asm
LESSTHAN:           060D DEFINED AT LINE 803 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
LESSTHAN1:          0612 DEFINED AT LINE 808 IN monty.asm
                    > USED AT LINE 799 IN monty.asm
TRUE1:              0615 DEFINED AT LINE 811 IN monty.asm
                    > USED AT LINE 791 IN monty.asm
                    > USED AT LINE 1198 IN monty.asm
NULL1:              061B DEFINED AT LINE 815 IN monty.asm
FALSE1:             061B DEFINED AT LINE 816 IN monty.asm
                    > USED AT LINE 792 IN monty.asm
                    > USED AT LINE 806 IN monty.asm
                    > USED AT LINE 809 IN monty.asm
                    > USED AT LINE 1184 IN monty.asm
CARET:              0621 DEFINED AT LINE 824 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
GO:                 0621 DEFINED AT LINE 825 IN monty.asm
                    > USED AT LINE 1282 IN monty.asm
GO1:                0622 DEFINED AT LINE 827 IN monty.asm
                    > USED AT LINE 1004 IN monty.asm
                    > USED AT LINE 1006 IN monty.asm
                    > USED AT LINE 1353 IN monty.asm
GO2:                0628 DEFINED AT LINE 832 IN monty.asm
                    > USED AT LINE 830 IN monty.asm
GOBLOCK:            062E DEFINED AT LINE 836 IN monty.asm
GOBLOCKX1:          0637 DEFINED AT LINE 844 IN monty.asm
                    > USED AT LINE 841 IN monty.asm
GOBLOCK1:           065C DEFINED AT LINE 861 IN monty.asm
                    > USED AT LINE 943 IN monty.asm
GOFUNC:             066A DEFINED AT LINE 870 IN monty.asm
                    > USED AT LINE 835 IN monty.asm
GOFUNC1:            0683 DEFINED AT LINE 889 IN monty.asm
                    > USED AT LINE 899 IN monty.asm
GOFUNC2:            0689 DEFINED AT LINE 896 IN monty.asm
                    > USED AT LINE 888 IN monty.asm
GOFUNC3:            0694 DEFINED AT LINE 902 IN monty.asm
                    > USED AT LINE 878 IN monty.asm
GOFUNC4:            06AC DEFINED AT LINE 919 IN monty.asm
                    > USED AT LINE 916 IN monty.asm
GOFUNC5:            06B0 DEFINED AT LINE 923 IN monty.asm
                    > USED AT LINE 929 IN monty.asm
GOFUNC6:            06B3 DEFINED AT LINE 927 IN monty.asm
                    > USED AT LINE 922 IN monty.asm
GOFUNC7:            06B6 DEFINED AT LINE 930 IN monty.asm
GOFUNC8:            06BB DEFINED AT LINE 936 IN monty.asm
                    > USED AT LINE 855 IN monty.asm
                    > USED AT LINE 918 IN monty.asm
HEXNUM:             06C6 DEFINED AT LINE 945 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
HEXNUM1:            06C9 DEFINED AT LINE 947 IN monty.asm
                    > USED AT LINE 964 IN monty.asm
HEXNUM2:            06D1 DEFINED AT LINE 953 IN monty.asm
                    > USED AT LINE 951 IN monty.asm
IDENTU:             06E3 DEFINED AT LINE 965 IN monty.asm
                    > USED AT LINE 249 IN monty.asm
IDENTL:             06E8 DEFINED AT LINE 969 IN monty.asm
                    > USED AT LINE 251 IN monty.asm
IDENT1:             06ED DEFINED AT LINE 973 IN monty.asm
                    > USED AT LINE 968 IN monty.asm
IF:                 06FA DEFINED AT LINE 986 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
IFTE:               0706 DEFINED AT LINE 996 IN monty.asm
                    > USED AT LINE 990 IN monty.asm
IFTE1:              0707 DEFINED AT LINE 998 IN monty.asm
                    > USED AT LINE 993 IN monty.asm
MUL:                0713 DEFINED AT LINE 1008 IN monty.asm
                    > USED AT LINE 258 IN monty.asm
MUL2:               0715 DEFINED AT LINE 1011 IN monty.asm
MUL3:               071D DEFINED AT LINE 1016 IN monty.asm
                    > USED AT LINE 1025 IN monty.asm
NUM:                072F DEFINED AT LINE 1029 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
NUM0:               0738 DEFINED AT LINE 1035 IN monty.asm
                    > USED AT LINE 1033 IN monty.asm
NUM1:               0739 DEFINED AT LINE 1037 IN monty.asm
                    > USED AT LINE 1054 IN monty.asm
NUM2:               0751 DEFINED AT LINE 1055 IN monty.asm
                    > USED AT LINE 955 IN monty.asm
                    > USED AT LINE 957 IN monty.asm
                    > USED AT LINE 1040 IN monty.asm
                    > USED AT LINE 1042 IN monty.asm
NUM3:               075C DEFINED AT LINE 1063 IN monty.asm
                    > USED AT LINE 1058 IN monty.asm
REMAIN:             075F DEFINED AT LINE 1067 IN monty.asm
                    > USED AT LINE 245 IN monty.asm
SHIFTLEFT:          0765 DEFINED AT LINE 1074 IN monty.asm
                    > USED AT LINE 300 IN monty.asm
SHIFTLEFT1:         076D DEFINED AT LINE 1081 IN monty.asm
                    > USED AT LINE 1084 IN monty.asm
SHIFTLEFT2:         076E DEFINED AT LINE 1083 IN monty.asm
                    > USED AT LINE 1080 IN monty.asm
SHIFTRIGHT:         0775 DEFINED AT LINE 1091 IN monty.asm
                    > USED AT LINE 291 IN monty.asm
SHIFTRIGHT1:        077D DEFINED AT LINE 1098 IN monty.asm
                    > USED AT LINE 1102 IN monty.asm
SHIFTRIGHT2:        0781 DEFINED AT LINE 1101 IN monty.asm
                    > USED AT LINE 1097 IN monty.asm
STRING:             0788 DEFINED AT LINE 1110 IN monty.asm
                    > USED AT LINE 271 IN monty.asm
STRING1:            0791 DEFINED AT LINE 1117 IN monty.asm
                    > USED AT LINE 1124 IN monty.asm
                    > USED AT LINE 1126 IN monty.asm
STRING2:            0794 DEFINED AT LINE 1121 IN monty.asm
                    > USED AT LINE 1116 IN monty.asm
MINUS:              07B0 DEFINED AT LINE 1143 IN monty.asm
                    > USED AT LINE 273 IN monty.asm
SUB:                07BC DEFINED AT LINE 1151 IN monty.asm
                    > USED AT LINE 1148 IN monty.asm
SUB1:               07C7 DEFINED AT LINE 1159 IN monty.asm
                    > USED AT LINE 1154 IN monty.asm
COMMAND:            07D0 DEFINED AT LINE 1172 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
                    > USED AT LINE 725 IN monty.asm
ERROR1:             0816 DEFINED AT LINE 1201 IN monty.asm
                    > USED AT LINE 1250 IN monty.asm
ABS1:               081C DEFINED AT LINE 1205 IN monty.asm
                    > USED AT LINE 1174 IN monty.asm
PARTIAL:            0829 DEFINED AT LINE 1220 IN monty.asm
                    > USED AT LINE 1180 IN monty.asm
COMMENT:            0849 DEFINED AT LINE 1236 IN monty.asm
                    > USED AT LINE 723 IN monty.asm
                    > USED AT LINE 1240 IN monty.asm
COLON:              0852 DEFINED AT LINE 1244 IN monty.asm
                    > USED AT LINE 247 IN monty.asm
LOOPEND:            085D DEFINED AT LINE 1252 IN monty.asm
                    > USED AT LINE 1248 IN monty.asm
BREAK:              0865 DEFINED AT LINE 1257 IN monty.asm
                    > USED AT LINE 1176 IN monty.asm
BREAK1:             086C DEFINED AT LINE 1263 IN monty.asm
                    > USED AT LINE 1261 IN monty.asm
DO:                 087F DEFINED AT LINE 1276 IN monty.asm
                    > USED AT LINE 1194 IN monty.asm
CHARS:              0882 DEFINED AT LINE 1284 IN monty.asm
                    > USED AT LINE 1178 IN monty.asm
CHARS1:             0885 DEFINED AT LINE 1286 IN monty.asm
                    > USED AT LINE 1357 IN monty.asm
FUNC:               088A DEFINED AT LINE 1291 IN monty.asm
                    > USED AT LINE 1182 IN monty.asm
INPUT:              08A6 DEFINED AT LINE 1315 IN monty.asm
                    > USED AT LINE 1186 IN monty.asm
KEY:                08B1 DEFINED AT LINE 1325 IN monty.asm
                    > USED AT LINE 1188 IN monty.asm
OUTPUT:             08BA DEFINED AT LINE 1334 IN monty.asm
                    > USED AT LINE 1192 IN monty.asm
SELECT:             08C3 DEFINED AT LINE 1345 IN monty.asm
                    > USED AT LINE 1196 IN monty.asm
NUMBERS:            08CD DEFINED AT LINE 1355 IN monty.asm
                    > USED AT LINE 1190 IN monty.asm
FILTER:             08D3 DEFINED AT LINE 1364 IN monty.asm
MAP:                08D3 DEFINED AT LINE 1365 IN monty.asm
PRTDEC:             08D5 DEFINED AT LINE 1373 IN monty.asm
                    > USED AT LINE 758 IN monty.asm
                    > USED AT LINE 1644 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 138
PRTDEC0:            08E4 DEFINED AT LINE 1384 IN monty.asm
                    > USED AT LINE 1375 IN monty.asm
PRTDEC1:            0906 DEFINED AT LINE 1400 IN monty.asm
                    > USED AT LINE 1388 IN monty.asm
                    > USED AT LINE 1390 IN monty.asm
                    > USED AT LINE 1392 IN monty.asm
                    > USED AT LINE 1394 IN monty.asm
                    > USED AT LINE 1397 IN monty.asm
PRTDEC2:            0908 DEFINED AT LINE 1402 IN monty.asm
                    > USED AT LINE 1405 IN monty.asm
PRTDEC3:            0918 DEFINED AT LINE 1414 IN monty.asm
                    > USED AT LINE 1409 IN monty.asm
PRTDEC4:            0919 DEFINED AT LINE 1416 IN monty.asm
                    > USED AT LINE 1413 IN monty.asm
PRTHEX:             091D DEFINED AT LINE 1420 IN monty.asm
                    > USED AT LINE 743 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0928 DEFINED AT LINE 1428 IN monty.asm
                    > USED AT LINE 1423 IN monty.asm
                    > USED AT LINE 1425 IN monty.asm
PRTHEX3:            0931 DEFINED AT LINE 1436 IN monty.asm
                    > USED AT LINE 1434 IN monty.asm
PRTSTR0:            093C DEFINED AT LINE 1444 IN monty.asm
                    > USED AT LINE 1450 IN monty.asm
PRTSTR:             0940 DEFINED AT LINE 1447 IN monty.asm
                    > USED AT LINE 748 IN monty.asm
                    > USED AT LINE 1514 IN monty.asm
NESTING:            0945 DEFINED AT LINE 1463 IN monty.asm
                    > USED AT LINE 1558 IN monty.asm
                    > USED AT LINE 1599 IN monty.asm
NESTING0:           094F DEFINED AT LINE 1469 IN monty.asm
                    > USED AT LINE 1465 IN monty.asm
                    > USED AT LINE 1467 IN monty.asm
NESTING1A:          0956 DEFINED AT LINE 1474 IN monty.asm
                    > USED AT LINE 1471 IN monty.asm
NESTING1:           0959 DEFINED AT LINE 1477 IN monty.asm
                    > USED AT LINE 1468 IN monty.asm
NESTING2:           0968 DEFINED AT LINE 1486 IN monty.asm
                    > USED AT LINE 1481 IN monty.asm
                    > USED AT LINE 1483 IN monty.asm
NESTING3:           096A DEFINED AT LINE 1489 IN monty.asm
                    > USED AT LINE 1485 IN monty.asm
NESTING4:           0975 DEFINED AT LINE 1496 IN monty.asm
                    > USED AT LINE 1491 IN monty.asm
                    > USED AT LINE 1493 IN monty.asm
PROMPT:             0977 DEFINED AT LINE 1500 IN monty.asm
                    > USED AT LINE 1542 IN monty.asm
CRLF:               0980 DEFINED AT LINE 1505 IN monty.asm
                    > USED AT LINE 1611 IN monty.asm
PRINTSTR:           0987 DEFINED AT LINE 1512 IN monty.asm
                    > USED AT LINE 1501 IN monty.asm
                    > USED AT LINE 1506 IN monty.asm
                    > USED AT LINE 1538 IN monty.asm
                    > USED AT LINE 1642 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 131
INIT:               098E DEFINED AT LINE 1519 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1537 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              09A7 DEFINED AT LINE 1529 IN monty.asm
                    > USED AT LINE 1532 IN monty.asm
START:              09AC DEFINED AT LINE 1535 IN monty.asm
INTERPRET:          09C2 DEFINED AT LINE 1541 IN monty.asm
                    > USED AT LINE 1636 IN monty.asm
                    > USED AT LINE 1645 IN monty.asm
INTERPRET2:         09CC DEFINED AT LINE 1547 IN monty.asm
                    > USED AT LINE 1591 IN monty.asm
INTERPRET3:         09D4 DEFINED AT LINE 1554 IN monty.asm
                    > USED AT LINE 1563 IN monty.asm
INTERPRET4:         09DA DEFINED AT LINE 1560 IN monty.asm
                    > USED AT LINE 1552 IN monty.asm
INTERPRET5:         09DF DEFINED AT LINE 1566 IN monty.asm
                    > USED AT LINE 1600 IN monty.asm
                    > USED AT LINE 1614 IN monty.asm
INTERPRET6:         09F0 DEFINED AT LINE 1593 IN monty.asm
                    > USED AT LINE 1569 IN monty.asm
INTERPRET7:         09FE DEFINED AT LINE 1602 IN monty.asm
                    > USED AT LINE 1574 IN monty.asm
INTERPRET8:         0A11 DEFINED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1572 IN monty.asm
NEXT:               0A19 DEFINED AT LINE 1622 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1626 IN monty.asm
NEXT1:              0A28 DEFINED AT LINE 1633 IN monty.asm
                    > USED AT LINE 1627 IN monty.asm
EXIT_:              0A2F DEFINED AT LINE 1637 IN monty.asm
                    > USED AT LINE 1635 IN monty.asm
ERROR:              0A32 DEFINED AT LINE 1641 IN monty.asm
                    > USED AT LINE 1203 IN monty.asm
TESTSSTART:         0B00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2130S43:  0B65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2131S43:  0BCB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2132S43:  0C2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2133S43:  0C93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2134S43:  0CF7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2135S43:  0D5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2136S43:  0DC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2137S43:  0E29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2138S43:  0E8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2139S43:  0EF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2140S43:  0F5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2141S43:  0FC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2142S43:  102F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2143S43:  1097 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2144S43:  1105 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2145S43:  1173 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2146S43:  11DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2147S43:  124F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2148S43:  12C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2149S43:  1335 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2150S43:  13A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2151S43:  1417 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2152S43:  1493 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2153S43:  1503 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2154S43:  156F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2155S43:  15DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2156S43:  1651 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2157S43:  16CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2158S43:  1739 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2159S43:  17B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2160S43:  1821 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2161S43:  189D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2162S43:  190B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2163S43:  198D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2164S43:  19F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2165S43:  1A75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2166S43:  1AE9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2167S43:  1B55 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2168S43:  1BD1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2169S43:  1C41 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2170S43:  1CAD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2171S43:  1D1B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2172S43:  1D89 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2173S43:  1DF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2174S43:  1E61 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2175S43:  1ECD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2176S43:  1F39 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2177S43:  1FA5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2178S43:  2011 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2179S43:  207D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2180S43:  20E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2181S43:  2157 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2182S43:  21C5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2183S43:  2233 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2184S43:  22A3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2185S43:  2313 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2186S43:  237D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2187S43:  23E7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2188S43:  2457 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2189S43:  24CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2190S43:  2545 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2191S43:  25C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2192S43:  2649 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2193S43:  26D1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2194S43:  273F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2195S43:  27AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2196S43:  2821 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2197S43:  2895 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2198S43:  2907 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2199S43:  297D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2200S43:  29F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2201S43:  2A73 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2202S43:  2AF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2203S43:  2B73 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2204S43:  2BFB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2205S43:  2C85 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2206S43:  2D15 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2207S43:  2DA9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2208S43:  2E2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2209S43:  2EBB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2210S43:  2F49 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2211S43:  2FD9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2212S43:  3067 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2213S43:  3103 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2214S43:  318D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2215S43:  3223 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2216S43:  32BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2217S43:  3355 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2218S43:  33FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2219S43:  34A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2220S43:  3525 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2221S43:  35A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2222S43:  3629 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2223S43:  36B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2224S43:  375D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2225S43:  3809 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2226S43:  38B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2227S43:  3943 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2228S43:  39DD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2229S43:  3A6D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2230S43:  3B03 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2231S43:  3BAB DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3BB6 DEFINED AT LINE 136
EXECSTR:            3BBC DEFINED AT LINE 143
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3C80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 846 IN monty.asm
                    > USED AT LINE 1521 IN monty.asm
                    > USED AT LINE 1536 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3D00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1526 IN monty.asm
RESTARTS:           3DD0 DEFINED AT LINE 11 IN ram.asm
RST08:              3DD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              3DD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              3DD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              3DD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              3DD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              3DDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               3DDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             3DDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             3DE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            3DE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            3DE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            3DE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1523 IN monty.asm
VDATAWIDTH:         3DE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 510 IN monty.asm
                    > USED AT LINE 546 IN monty.asm
                    > USED AT LINE 573 IN monty.asm
                    > USED AT LINE 1287 IN monty.asm
VTIBPTR:            3DE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1545 IN monty.asm
                    > USED AT LINE 1617 IN monty.asm
VNEXT:              3DEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1520 IN monty.asm
VHEAPPTR:           3DEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 436 IN monty.asm
                    > USED AT LINE 467 IN monty.asm
                    > USED AT LINE 500 IN monty.asm
                    > USED AT LINE 532 IN monty.asm
                    > USED AT LINE 533 IN monty.asm
                    > USED AT LINE 638 IN monty.asm
                    > USED AT LINE 641 IN monty.asm
                    > USED AT LINE 1111 IN monty.asm
                    > USED AT LINE 1130 IN monty.asm
                    > USED AT LINE 1222 IN monty.asm
                    > USED AT LINE 1227 IN monty.asm
                    > USED AT LINE 1228 IN monty.asm
                    > USED AT LINE 1293 IN monty.asm
                    > USED AT LINE 1308 IN monty.asm
                    > USED AT LINE 1310 IN monty.asm
VBLOCKEND:          3DEE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           3DF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 343 IN monty.asm
                    > USED AT LINE 345 IN monty.asm
                    > USED AT LINE 346 IN monty.asm
                    > USED AT LINE 421 IN monty.asm
                    > USED AT LINE 553 IN monty.asm
                    > USED AT LINE 571 IN monty.asm
                    > USED AT LINE 977 IN monty.asm
VHASHSTR:           3DF2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           3DF4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            3DF6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 733 IN monty.asm
                    > USED AT LINE 1068 IN monty.asm
VTEMP1:             3DF8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 493 IN monty.asm
                    > USED AT LINE 534 IN monty.asm
                    > USED AT LINE 633 IN monty.asm
                    > USED AT LINE 642 IN monty.asm
                    > USED AT LINE 845 IN monty.asm
                    > USED AT LINE 851 IN monty.asm
                    > USED AT LINE 879 IN monty.asm
                    > USED AT LINE 900 IN monty.asm
                    > USED AT LINE 907 IN monty.asm
                    > USED AT LINE 913 IN monty.asm
                    > USED AT LINE 1223 IN monty.asm
                    > USED AT LINE 1226 IN monty.asm
VTEMP2:             3DFA DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 880 IN monty.asm
                    > USED AT LINE 901 IN monty.asm
TBPTR:              3DFC DEFINED AT LINE 43 IN ram.asm
TIB:                3E00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1551 IN monty.asm
                    > USED AT LINE 1594 IN monty.asm
                    > USED AT LINE 1603 IN monty.asm
                    > USED AT LINE 1618 IN monty.asm
PAD:                3F00 DEFINED AT LINE 49 IN ram.asm
HEAP:               4000 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 626 IN monty.asm
