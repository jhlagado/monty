0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; call prtdec
0000                             ; push hl
0000                             ; call prtdec
0000                             ; pop hl
0000                             ; call printStr
0000                             ; .cstr " (#"
0000                             ; call prthex
0000                             ; call printStr
0000                             ; .cstr ")\r\n"
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 call run
0000                 .cstr "."
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". `(#`.s .h `)\r\n`.s"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 45               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 45               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 45               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 45               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 45               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 45               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 45               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 45               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 45               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 45               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 44               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 45               LD   (RST08),HL   
0094   22 D2 45               LD   (RST10),HL   
0097   22 D4 45               LD   (RST18),HL   
009A   22 D6 45               LD   (RST20),HL   
009D   22 D8 45               LD   (RST28),HL   
00A0   22 DA 45               LD   (RST30),HL   
00A3   22 DE 45               LD   (INTVEC),HL   
00A6   22 E0 45               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 45               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 45               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 44               LD   SP,STACK   
00C6   CD 7E 0B               CALL   init   
00C9   C3 00 0D               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                BUFSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   00 47                  DW   TIB   ; vTIBPtr pointer into TIB
0184   00 48                  DW   BUF   ; vBUFPtr pointer into BUF
0186   22 0C                  DW   next   ; nNext
0188   00 4A                  DW   HEAP   ; vHeapPtr \h start of the free mem
018A                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   0   ; ^@  0 NUL
0201   00                     DB   0   ; ^A  1 SOH
0202   00                     DB   0   ; ^B  2 STX
0203   00                     DB   0   ; ^C  3 ETX
0204   00                     DB   0   ; ^D  4 EOT
0205   00                     DB   0   ; ^E  5 ENQ
0206   00                     DB   0   ; ^F  6 ACK
0207   00                     DB   0   ; ^G  7 BEL
0208   00                     DB   0   ; ^H  8 BS
0209   00                     DB   0   ; ^I  9 TAB
020A   00                     DB   0   ; ^J 10 LF
020B   00                     DB   0   ; ^K 11 VT
020C   00                     DB   0   ; ^L 12 FF
020D   00                     DB   0   ; ^M 13 CR
020E   00                     DB   0   ; ^N 14 SO
020F   00                     DB   0   ; ^O 15 SI
0210   00                     DB   0   ; ^P 16 DLE
0211   00                     DB   0   ; ^Q 17 DC1
0212   00                     DB   0   ; ^R 18 DC2
0213   00                     DB   0   ; ^S 19 DC3
0214   00                     DB   0   ; ^T 20 DC4
0215   00                     DB   0   ; ^U 21 NAK
0216   00                     DB   0   ; ^V 22 SYN
0217   00                     DB   0   ; ^W 23 ETB
0218   00                     DB   0   ; ^X 24 CAN
0219   00                     DB   0   ; ^Y 25 EM
021A   00                     DB   0   ; ^Z 26 SUB
021B   00                     DB   0   ; ^[ 27 ESC
021C   00                     DB   0   ; ^\ 28 FS
021D   00                     DB   0   ; ^] 29 GS
021E   00                     DB   0   ; ^^ 30 RS
021F   00                     DB   0   ; ^_ 31 US
0220                OPCODES:      ; still available ~ `
0220   85                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(bang_)   ; !
0222   4D                     DB   lsb(dblquote_)   ; "
0223   41                     DB   lsb(hash_)   ; #
0224   09                     DB   lsb(dollar_)   ; $
0225   12                     DB   lsb(percent_)   ; %
0226   06                     DB   lsb(amper_)   ; &
0227   1E                     DB   lsb(tick_)   ; '
0228   6D                     DB   lsb(lparen_)   ; (
0229   87                     DB   lsb(rparen_)   ; )
022A   36                     DB   lsb(star_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4A                     DB   lsb(comma_)   ; ,
022D   50                     DB   lsb(minus_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(slash_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(colon_)   ; :
023B   21                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   53                     DB   lsb(eq_)   ; =
023E   62                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(question_)   ; ?
0240   03                     DB   lsb(at_)   ; @
0241   2D                     DB   lsb(upcase_)   ; A
0242   2D                     DB   lsb(upcase_)   ; B
0243   2D                     DB   lsb(upcase_)   ; C
0244   2D                     DB   lsb(upcase_)   ; D
0245   2D                     DB   lsb(upcase_)   ; E
0246   2D                     DB   lsb(upcase_)   ; F
0247   2D                     DB   lsb(upcase_)   ; G
0248   2D                     DB   lsb(upcase_)   ; h
0249   2D                     DB   lsb(upcase_)   ; I
024A   2D                     DB   lsb(upcase_)   ; J
024B   2D                     DB   lsb(upcase_)   ; K
024C   2D                     DB   lsb(upcase_)   ; L
024D   2D                     DB   lsb(upcase_)   ; M
024E   2D                     DB   lsb(upcase_)   ; N
024F   2D                     DB   lsb(upcase_)   ; O
0250   2D                     DB   lsb(upcase_)   ; p
0251   2D                     DB   lsb(upcase_)   ; Q
0252   2D                     DB   lsb(upcase_)   ; R
0253   2D                     DB   lsb(upcase_)   ; S
0254   2D                     DB   lsb(upcase_)   ; T
0255   2D                     DB   lsb(upcase_)   ; U
0256   2D                     DB   lsb(upcase_)   ; V
0257   2D                     DB   lsb(upcase_)   ; W
0258   2D                     DB   lsb(upcase_)   ; X
0259   2D                     DB   lsb(upcase_)   ; Y
025A   2D                     DB   lsb(upcase_)   ; Z
025B   0C                     DB   lsb(lbrack_)   ; [
025C   15                     DB   lsb(backslash_)   ; \
025D   0F                     DB   lsb(rbrack_)   ; ]
025E   47                     DB   lsb(caret_)   ; ^
025F   27                     DB   lsb(underscore_)   ; _
0260   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0261   30                     DB   lsb(lowcase_)   ; a
0262   30                     DB   lsb(lowcase_)   ; b
0263   30                     DB   lsb(lowcase_)   ; c
0264   30                     DB   lsb(lowcase_)   ; d
0265   30                     DB   lsb(lowcase_)   ; e
0266   30                     DB   lsb(lowcase_)   ; f
0267   30                     DB   lsb(lowcase_)   ; g
0268   30                     DB   lsb(lowcase_)   ; h
0269   30                     DB   lsb(lowcase_)   ; i
026A   30                     DB   lsb(lowcase_)   ; j
026B   30                     DB   lsb(lowcase_)   ; k
026C   30                     DB   lsb(lowcase_)   ; l
026D   30                     DB   lsb(lowcase_)   ; m
026E   30                     DB   lsb(lowcase_)   ; n
026F   30                     DB   lsb(lowcase_)   ; o
0270   30                     DB   lsb(lowcase_)   ; p
0271   30                     DB   lsb(lowcase_)   ; q
0272   30                     DB   lsb(lowcase_)   ; r
0273   30                     DB   lsb(lowcase_)   ; s
0274   30                     DB   lsb(lowcase_)   ; t
0275   30                     DB   lsb(lowcase_)   ; u
0276   30                     DB   lsb(lowcase_)   ; v
0277   30                     DB   lsb(lowcase_)   ; w
0278   30                     DB   lsb(lowcase_)   ; x
0279   30                     DB   lsb(lowcase_)   ; y
027A   30                     DB   lsb(lowcase_)   ; z
027B   18                     DB   lsb(lbrace_)   ; {
027C   44                     DB   lsb(pipe_)   ; |
027D   1B                     DB   lsb(rbrace_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; opcode landing page
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 9C 03               JP   at   
0306                AMPER_:      
0306   C3 A6 03               JP   amper   
0309                DOLLAR_:      
0309   C3 CA 03               JP   dollar   
030C                LBRACK_:      
030C   C3 01 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 1D 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 6B 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 A5 05               JP   backslash   
0318                LBRACE_:      
0318   C3 CB 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 34 05               JP   rbrace   
031E                TICK_:       
031E   C3 90 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 BF 07               JP   semicolon   
0324                DOT_:        
0324   C3 D4 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 B1 07               JP   underscore   
032A                COLON_:      
032A   C3 94 04               JP   colon   
032D                UPCASE_:      
032D   C3 35 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 3A 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 4C 07               JP   question   
0336                STAR_:       
0336   C3 65 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 81 07               JP   num   
0341                HASH_:       
0341   C3 18 07               JP   hash   
0344                PIPE_:       
0344   C3 B1 03               JP   pipe   
0347                CARET_:      
0347   C3 76 06               JP   caret   
034A                COMMA_:      
034A   C3 A7 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 FE 07               JP   dblquote   
0350                MINUS_:      
0350   C3 26 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 83 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 52 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA EB 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 73 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA DB 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 5A 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 5F 06               JP   lessthan   
0382                SLASH_:      
0382   C3 B6 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 B7 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; implementations
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 85 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399                             ; inc bc
0399                             ; ld a,(bc)
0399                             ; cp "="                      ; += add to variable
0399                             ; jp z,assign0
0399   E5                     PUSH   hl   
039A                             ; dec bc
039A   DD E9                  JP   (ix)   
039C                             ; @ addr
039C                             ; -- ptr
039C                AT:          
039C                ADDR:        
039C   ED 5B F0 45            LD   de,(vPointer)   
03A0   21 F0 45               LD   hl,vPointer   
03A3   C3 A8 0A               JP   variable   
03A6                AMPER:       
03A6                AND:         
03A6   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A7   E1                     POP   hl   
03A8   7B                     LD   a,e   
03A9   A5                     AND   l   
03AA   6F                     LD   l,a   
03AB   7A                     LD   a,d   
03AC   A4                     AND   h   
03AD                AND1:        
03AD   67                     LD   h,a   
03AE   E5                     PUSH   hl   
03AF   DD E9                  JP   (ix)   
03B1                PIPE:        
03B1                OR:          
03B1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03B2   E1                     POP   hl   
03B3   7B                     LD   a,e   
03B4   B5                     OR   l   
03B5   6F                     LD   l,a   
03B6   7A                     LD   a,d   
03B7   B4                     OR   h   
03B8   18 F3                  JR   and1   
03BA                XOR:         
03BA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03BB                XOR1:        
03BB   E1                     POP   hl   
03BC   7B                     LD   a,e   
03BD   AD                     XOR   l   
03BE   6F                     LD   l,a   
03BF   7A                     LD   a,d   
03C0   AC                     XOR   h   
03C1   67                     LD   h,a   
03C2   E5                     PUSH   hl   
03C3   DD E9                  JP   (ix)   
03C5                INVERT:      ; Bitwise INVert the top member of the stack
03C5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C8   18 F1                  JR   xor1   
03CA                             ; $a .. $z
03CA                             ; -- value
03CA                             ; returns value of arg
03CA                DOLLAR:      
03CA                ARG:         
03CA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CD   FD 56 05               LD   d,(iy+5)   
03D0   EB                     EX   de,hl   
03D1   7D                     LD   a,l   ; arg_list* == null, skip
03D2   B4                     OR   h   
03D3   28 1C                  JR   z,arg0a   
03D5   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D6   2B                     DEC   hl   
03D7   7E                     LD   a,(hl)   
03D8   23                     INC   hl   
03D9   23                     INC   hl   
03DA   B7                     OR   a   
03DB   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DD   5F                     LD   e,a   ; e = a = num_args
03DE   03                     INC   bc   ; a = next char = dollar_name
03DF   0A                     LD   a,(bc)   
03E0   C5                     PUSH   bc   ; save IP
03E1   43                     LD   b,e   ; b = e = num_args
03E2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E5   FD 56 03               LD   d,(iy+3)   
03E8                ARG0:        
03E8   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E9   1B                     DEC   de   
03EA   BE                     CP   (hl)   
03EB   28 09                  JR   z,arg1   
03ED   23                     INC   hl   ; hl = next arg_list*
03EE   10 F8                  DJNZ   arg0   
03F0   C1                     POP   bc   ; no match, restore IP
03F1                ARG0A:       
03F1   11 00 00               LD   de,0   ; return 0
03F4   18 08                  JR   arg1a   
03F6                ARG1:        
03F6   C1                     POP   bc   ; restore IP
03F7   EB                     EX   de,hl   ; hl = arg*
03F8   22 F0 45               LD   (vPointer),hl   ; store arg* in setter
03FB   5E                     LD   e,(hl)   
03FC   23                     INC   hl   
03FD   56                     LD   d,(hl)   ; de = arg
03FE                ARG1A:       
03FE   D5                     PUSH   de   ; push arg
03FF   DD E9                  JP   (ix)   
0401                LBRACK:      
0401                ARRBEGIN:      
0401   11 00 00               LD   de,0   ; create stack frame
0404   D5                     PUSH   de   ; push null for IP
0405   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0408   FD 56 05               LD   d,(iy+5)   ; 
040B   D5                     PUSH   de   ; 
040C   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040F   FD 56 03               LD   d,(iy+3)   ; 
0412   D5                     PUSH   de   ; 
0413   FD E5                  PUSH   iy   ; push BP
0415   FD 21 00 00            LD   iy,0   ; BP = SP
0419   FD 39                  ADD   iy,sp   
041B   DD E9                  JP   (ix)   
041D                RBRACK:      
041D                ARREND:      
041D   FD 54                  LD   d,iyh   ; de = BP
041F   FD 5D                  LD   e,iyl   
0421   ED 43 FC 45            LD   (vTemp1),bc   ; save IP
0425   62 6B                  LD   hl,de   ; hl = de = BP
0427   B7                     OR   a   
0428   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
042A   CB 3C                  SRL   h   ; 
042C   CB 1D                  RR   l   
042E   44 4D                  LD   bc,hl   ; bc = count
0430   2A EE 45               LD   hl,(vHeapPtr)   ; hl = array[-2]
0433   71                     LD   (hl),c   ; write num items in length word
0434   23                     INC   hl   
0435   70                     LD   (hl),b   
0436   23                     INC   hl   ; hl = array[0], bc = count
0437                             ; de = BP, hl = array[0], bc = count
0437                ARREND1:      
0437   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043A   77                     LD   (hl),a   ; write lsb of array item
043B   23                     INC   hl   ; move to msb of array item
043C   3A E6 45               LD   a,(vDataWidth)   ; vDataWidth=1?
043F   3D                     DEC   a   
0440   28 05                  JR   z,arrEnd2   
0442   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0445   77                     LD   (hl),a   ; write msb of array item
0446   23                     INC   hl   ; move to next word in array
0447                ARREND2:      
0447   FD 2B                  DEC   iy   ; move to next word on stack
0449   FD 2B                  DEC   iy   
044B   0B                     DEC   bc   ; dec items count
044C   79                     LD   a,c   ; if not zero loop
044D   B0                     OR   b   
044E   20 E7                  JR   nz,arrEnd1   
0450   EB                     EX   de,hl   ; de = end of array, hl = BP
0451   F9                     LD   sp,hl   ; sp = BP
0452   E1                     POP   hl   ; de = end of array, hl = old BP
0453   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0454   FD 62                  LD   iyh,d   
0456   FD 6B                  LD   iyl,e   
0458   D1                     POP   de   ; pop arg_list (discard)
0459   D1                     POP   de   ; pop first_arg* (discard)
045A   D1                     POP   de   ; pop IP (discard)
045B   ED 5B EE 45            LD   de,(vHeapPtr)   ; de = array[-2]
045F   13                     INC   de   ; de = array[0]
0460   13                     INC   de   
0461   D5                     PUSH   de   ; return array[0]
0462   22 EE 45               LD   (vHeapPtr),hl   ; move heap* to end of array
0465   ED 4B FC 45            LD   bc,(vTemp1)   ; restore IP
0469   DD E9                  JP   (ix)   
046B                             ; index of an array, based on vDataWidth
046B                             ; array num -- value    ; also sets vPointer to address
046B                ARRINDEX:      
046B   E1                     POP   hl   ; hl = index
046C   D1                     POP   de   ; de = array
046D   3A E6 45               LD   a,(vDataWidth)   ; a = data width
0470   3D                     DEC   a   
0471   28 01                  JR   z,arrIndex1   
0473                ARRINDEX0:      
0473   29                     ADD   hl,hl   ; if data width = 2 then double
0474                ARRINDEX1:      
0474   19                     ADD   hl,de   ; add addr
0475   22 F0 45               LD   (vPointer),hl   ; store address in setter
0478   16 00                  LD   d,0   
047A   5E                     LD   e,(hl)   
047B   B7                     OR   a   ; check data width again
047C   28 02                  JR   z,arrIndex2   
047E   23                     INC   hl   
047F   56                     LD   d,(hl)   
0480                ARRINDEX2:      
0480   D5                     PUSH   de   
0481   DD E9                  JP   (ix)   
0483                             ; value _oldValue --            ; uses address in vPointer
0483                ASSIGN:      
0483   E1                     POP   hl   ; discard last accessed value
0484   E1                     POP   hl   ; hl = new value
0485                ASSIGN0:      
0485   EB                     EX   de,hl   ; de = new value
0486                ASSIGNX:      
0486   2A F0 45               LD   hl,(vPointer)   
0489   73                     LD   (hl),e   
048A   3A E6 45               LD   a,(vDataWidth)   
048D   3D                     DEC   a   ; is it byte?
048E   28 02                  JR   z,assign1   
0490   23                     INC   hl   
0491   72                     LD   (hl),d   
0492                ASSIGN1:      
0492   DD E9                  JP   (ix)   
0494                             ; arg_list - parses input (ab:c)
0494                             ; names after the : represent uninitialised locals
0494                             ; return values are the state of the stack after the block ends
0494                COLON:       
0494                ARGLIST:      
0494   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0497   2A EE 45               LD   hl,(vHeapPtr)   ; hl = heap*
049A   23                     INC   hl   ; skip length field to start
049B   23                     INC   hl   
049C   E5                     PUSH   hl   ; save start of arg_list
049D   03                     INC   bc   ; point to next char
049E                ARGLIST1:      
049E   0A                     LD   a,(bc)   
049F   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A1   20 03                  JR   nz,arglist1a   
04A3   14                     INC   d   ; non zero value local count acts as flag
04A4   18 10                  JR   arglist3   
04A6                ARGLIST1A:      
04A6   FE 41                  CP   "A"   ; < "A" terminates arg_list
04A8   38 0F                  JR   c,arglist4   
04AA   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04AC   30 0B                  JR   nc,arglist4   
04AE                ARGLIST2:      
04AE   77                     LD   (hl),a   
04AF   23                     INC   hl   
04B0   1C                     INC   e   ; increase arg count
04B1   AF                     XOR   a   
04B2   B2                     OR   d   
04B3   28 01                  JR   z,arglist3   
04B5   14                     INC   d   ; if d > 0 increase local count
04B6                ARGLIST3:      
04B6   03                     INC   bc   ; point to next char
04B7   18 E5                  JR   arglist1   
04B9                ARGLIST4:      
04B9   0B                     DEC   bc   
04BA   AF                     XOR   a   
04BB   B2                     OR   d   
04BC   28 01                  JR   z,arglist5   
04BE   15                     DEC   d   ; remove initial inc
04BF                ARGLIST5:      
04BF   23                     INC   hl   
04C0   22 EE 45               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C3   E1                     POP   hl   ; hl = start of arg_list
04C4   E5                     PUSH   hl   ; return start of arg_list
04C5   2B                     DEC   hl   ; write number of locals at start - 1
04C6   72                     LD   (hl),d   
04C7   2B                     DEC   hl   ; write number of args + locals at start - 2
04C8   73                     LD   (hl),e   
04C9   DD E9                  JP   (ix)   
04CB                LBRACE:      
04CB                BLOCK:       
04CB   C5                     PUSH   bc   ; return pointer to first { of block
04CC   03                     INC   bc   
04CD   16 01                  LD   d,1   ; nesting: count first parenthesis
04CF                BLOCK1:      ; Skip to end of definition
04CF   0A                     LD   a,(bc)   ; Get the next character
04D0   03                     INC   bc   ; Point to next character
04D1   FE 21                  CP   " " + 1   ; ignore whitespace
04D3   38 FA                  JR   c,block1   
04D5   FE 29                  CP   ")"   
04D7   28 2D                  JR   z,block4   
04D9   FE 7D                  CP   "}"   
04DB   28 29                  JR   z,block4   
04DD   FE 5D                  CP   "]"   
04DF   28 25                  JR   z,block4   
04E1   FE 28                  CP   "("   
04E3   28 16                  JR   z,block2   
04E5   FE 7B                  CP   "{"   
04E7   28 12                  JR   z,block2   
04E9   FE 5B                  CP   "["   
04EB   28 0E                  JR   z,block2   
04ED   FE 27                  CP   "'"   
04EF   28 0D                  JR   z,block3   
04F1   FE 60                  CP   "`"   
04F3   28 09                  JR   z,block3   
04F5   FE 22                  CP   DQUOTE   
04F7   28 05                  JR   z,block3   
04F9   18 D4                  JR   block1   
04FB                BLOCK2:      
04FB   14                     INC   d   
04FC   18 D1                  JR   block1   
04FE                BLOCK3:      
04FE   3E 80                  LD   a,$80   
0500   AA                     XOR   d   
0501   47                     LD   b,a   
0502   20 CB                  JR   nz,block1   
0504   18 03                  JR   block5   
0506                BLOCK4:      
0506   15                     DEC   d   
0507   20 C6                  JR   nz,block1   ; get the next element
0509                BLOCK5:      
0509   60 69                  LD   hl,bc   ; hl = IP
050B   11 00 4A               LD   de,HEAP   ; is IP pointing to object in heap
050E   B7                     OR   a   ; IP - HEAP
050F   ED 52                  SBC   hl,de   
0511   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0513   28 1C                  JR   z,block6   
0515   60 69                  LD   hl,bc   ; hl = IP
0517   D1                     POP   de   ; de = block*
0518   ED 43 FC 45            LD   (vTemp1),bc   ; save IP
051C   B7                     OR   a   ; bc = size
051D   ED 52                  SBC   hl,de   
051F   44 4D                  LD   bc,hl   
0521   EB                     EX   de,hl   ; hl = block* de = heap*
0522   ED 5B EE 45            LD   de,(vHeapPtr)   
0526   D5                     PUSH   de   ; return hblock*
0527   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0529   ED 53 EE 45            LD   (vHeapPtr),de   ; heap* += size
052D   ED 4B FC 45            LD   bc,(vTemp1)   ; restore IP
0531                BLOCK6:      
0531   0B                     DEC   bc   ; balanced, exit
0532   DD E9                  JP   (ix)   
0534                RBRACE:      
0534                BLOCKEND:      
0534   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0537   FD 56 01               LD   d,(iy+1)   
053A   ED 53 FC 45            LD   (vTemp1),de   
053E   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0541   FD 56 07               LD   d,(iy+7)   
0544   ED 53 FE 45            LD   (vTemp2),de   
0548   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054B   FD 56 03               LD   d,(iy+3)   
054E   EB                     EX   de,hl   
054F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0552   FD 56 01               LD   d,(iy+1)   
0555   13                     INC   de   ; for carry flag <=
0556   B7                     OR   a   
0557   ED 52                  SBC   hl,de   
0559   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055B   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
055D   FD 5D                  LD   e,iyl   
055F   21 08 00               LD   hl,8   
0562   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0563   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0564   18 0C                  JR   blockEnd2   
0566                BLOCKEND1:      ; same scope
0566   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0569   FD 56 03               LD   d,(iy+3)   
056C   EB                     EX   de,hl   
056D   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
056F   FD 5D                  LD   e,iyl   
0571   EB                     EX   de,hl   
0572                BLOCKEND2:      
0572   44 4D                  LD   bc,hl   ; bc = hl = BP
0574   B7                     OR   a   ; hl = BP - SP = count
0575   ED 72                  SBC   hl,sp   
0577   7D                     LD   a,l   
0578   B4                     OR   h   
0579   28 09                  JR   z,blockEnd3   
057B   C5                     PUSH   bc   ; bc = count, hl = BP
057C   44 4D                  LD   bc,hl   
057E   E1                     POP   hl   
057F   2B                     DEC   hl   ; hl = BP-1
0580   1B                     DEC   de   ; de = args*-1
0581   ED B8                  LDDR      
0583   13                     INC   de   
0584                BLOCKEND3:      
0584   EB                     EX   de,hl   ; sp = de = new tos*
0585   F9                     LD   sp,hl   
0586   ED 4B FE 45            LD   bc,(vTemp2)   
058A   FD 2A FC 45            LD   iy,(vTemp1)   
058E   DD E9                  JP   (ix)   
0590                TICK:        
0590                CHAR:        
0590   21 00 00               LD   hl,0   ; if "" is empty or null
0593                CHAR1:       
0593   03                     INC   bc   ; point to next char
0594   0A                     LD   a,(bc)   
0595   FE 27                  CP   "'"   ; ' is the terminator
0597   28 09                  JR   z,char3   
0599   FE 5C                  CP   $5c   ; \ is the escape
059B   20 02                  JR   nz,char2   
059D   03                     INC   bc   
059E   0A                     LD   a,(bc)   
059F                CHAR2:       
059F   6F                     LD   l,a   
05A0   18 F1                  JR   char1   
05A2                CHAR3:       
05A2   E5                     PUSH   hl   
05A3   DD E9                  JP   (ix)   
05A5                BACKSLASH:      
05A5   DD E9                  JP   (ix)   
05A7                             ; , discard stack item
05A7                             ; x y -- x
05A7                COMMA:       
05A7                DISCARD:      
05A7   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A9   FD 5D                  LD   e,iyl   
05AB   EB                     EX   de,hl   
05AC   B7                     OR   a   
05AD   ED 72                  SBC   hl,sp   
05AF   CB 7C                  BIT   7,h   
05B1   20 01                  JR   nz,discard1   
05B3   E1                     POP   hl   
05B4                DISCARD1:      
05B4   DD E9                  JP   (ix)   
05B6                SLASH:       
05B6   03                     INC   bc   
05B7   0A                     LD   a,(bc)   
05B8   FE 5C                  CP   $5C   
05BA   CA 91 08               JP   z,comment   
05BD   FE 41                  CP   "A"   
05BF   D2 45 08               JP   nc,command   
05C2   0B                     DEC   bc   
05C3   D1                     POP   de   
05C4   E1                     POP   hl   
05C5   C5                     PUSH   bc   ; preserve the IP
05C6   44 4D                  LD   bc,hl   
05C8   CD 39 06               CALL   divide   
05CB   EB                     EX   de,hl   
05CC   ED 53 F2 45            LD   (vRemain),de   
05D0   C1                     POP   bc   
05D1   C3 99 03               JP   add3   
05D4                DOT:         
05D4   03                     INC   bc   
05D5   0A                     LD   a,(bc)   
05D6   FE 68                  CP   "h"   
05D8   CA E9 05               JP   z,dotHex   
05DB   FE 73                  CP   "s"   
05DD   CA FD 05               JP   z,dotStr   
05E0   FE 63                  CP   "c"   
05E2   CA 11 06               JP   z,dotChar   
05E5   0B                     DEC   bc   
05E6   C3 25 06               JP   dotDec   
05E9                DOTHEX:      
05E9   CD 76 06               CALL   go   
05EC   00 00                  DW   NUL   ; closure
05EE   F2 05                  DW   dotHex_block   
05F0   23 0B                  DW   args1A0L   
05F2                DOTHEX_BLOCK:      
05F2   7B 24 61 2F 62 68 2F 70 78 7D 00 .CSTR   "{$a/bh/px}"   ; block
05FD                DOTSTR:      
05FD   CD 76 06               CALL   go   
0600   00 00                  DW   NUL   ; closure
0602   06 06                  DW   dotStr_block   
0604   23 0B                  DW   args1A0L   
0606                DOTSTR_BLOCK:      
0606   7B 24 61 2F 62 73 2F 70 78 7D 00 .CSTR   "{$a/bs/px}"   ; block
0611                DOTCHAR:      
0611   CD 76 06               CALL   go   
0614   00 00                  DW   NUL   ; closure
0616   1A 06                  DW   dotChar_block   
0618   23 0B                  DW   args1A0L   
061A                DOTCHAR_BLOCK:      
061A   7B 24 61 2F 62 63 2F 70 78 7D 00 .CSTR   "{$a/bc/px}"   ; block
0625                DOTDEC:      
0625   CD 76 06               CALL   go   
0628   00 00                  DW   NUL   ; closure
062A   2E 06                  DW   dotDec_block   
062C   23 0B                  DW   args1A0L   
062E                DOTDEC_BLOCK:      
062E   7B 24 61 2F 62 64 2F 70 78 7D 00 .CSTR   "{$a/bd/px}"   ; block
0639                             ; division subroutine.
0639                             ; bc: divisor, de: dividend, hl: remainder
0639                DIVIDE:      
0639   21 00 00               LD   hl,0   ; zero the remainder
063C   3E 10                  LD   a,16   ; loop counter
063E                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
063E   CB 21                  SLA   c   
0640   CB 10                  RL   b   
0642   ED 6A                  ADC   hl,hl   
0644   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0646   38 03                  JR   c,divide2   
0648   0C                     INC   c   
0649   18 01                  JR   divide3   
064B                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
064B   19                     ADD   hl,de   
064C                DIVIDE3:      
064C   3D                     DEC   a   
064D   20 EF                  JR   nz,divide1   
064F   50 59                  LD   de,bc   ; result from bc to de
0651   C9                     RET      
0652                             ; hl = value1, de = value2
0652                             ; hl = result
0652                EQUALS:      
0652   B7                     OR   a   ; reset the carry flag
0653   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0655   28 10                  JR   z,true1   
0657   C3 6D 06               JP   false1   
065A                             ; hl = value1 de = value2
065A                             ; hl = result
065A                LESSTHANEQ:      
065A   B7                     OR   a   
065B   ED 52                  SBC   hl,de   
065D   18 05                  JR   lessthan1   
065F                             ; hl = value1 de = value2
065F                             ; hl = result
065F                LESSTHAN:      
065F   B7                     OR   a   
0660   ED 52                  SBC   hl,de   
0662   28 09                  JR   z,false1   
0664                LESSTHAN1:      
0664   FA 6D 06               JP   m,false1   
0667                TRUE1:       
0667   21 FF FF               LD   hl,TRUE   
066A   E5                     PUSH   hl   
066B   DD E9                  JP   (ix)   
066D                NULL1:       
066D                FALSE1:      
066D   21 00 00               LD   hl,FALSE   
0670   E5                     PUSH   hl   
0671   DD E9                  JP   (ix)   
0673                LPAREN:      
0673   C3 CB 04               JP   block   
0676                             ; execute a block of code which ends with }
0676                             ; creates a root scope if BP == stack
0676                             ; else uses outer scope
0676                CARET:       
0676                GO:          
0676   D1                     POP   de   ; de = block*
0677                GO1:         
0677   7B                     LD   a,e   ; if block* == null, exit
0678   B2                     OR   d   
0679   20 02                  JR   nz,go2   
067B   DD E9                  JP   (ix)   
067D                GO2:         
067D   1A                     LD   a,(de)   
067E   FE 7B                  CP   "{"   
0680   28 07                  JR   z,goBlock1   
0682   FE 28                  CP   "("   
0684   C2 BC 06               JP   nz,goFunc   
0687   13                     INC   de   ; de is the address to jump back to
0688   D5                     PUSH   de   ; push de just before stack frame
0689                GOBLOCK:      
0689                GOBLOCK1:      
0689   ED 53 FC 45            LD   (vTemp1),de   ; save de
068D   21 80 44               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0690   FD 54                  LD   d,iyh   
0692   FD 5D                  LD   e,iyl   
0694   B7                     OR   a   ; if stack* == BP then this is the root_scope
0695   ED 52                  SBC   hl,de   
0697   ED 5B FC 45            LD   de,(vTemp1)   ; restore de
069B   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
069C   B4                     OR   h   
069D   3E 00                  LD   a,0   
069F   28 6C                  JR   z,goFunc8   
06A1   C5                     PUSH   bc   ; push IP
06A2   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
06A5   FD 46 05               LD   b,(iy+5)   
06A8   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
06AB   FD 66 03               LD   h,(iy+3)   
06AE                GOBLOCK2:      
06AE   C5                     PUSH   bc   ; arg_list*
06AF   E5                     PUSH   hl   ; first_arg*
06B0   FD E5                  PUSH   iy   ; push BP
06B2   FD 21 00 00            LD   iy,0   ; BP = SP
06B6   FD 39                  ADD   iy,sp   
06B8   42 4B                  LD   bc,de   ; bc = de = block*-1
06BA   DD E9                  JP   (ix)   
06BC                GOFUNC:      ; execute function
06BC   EB                     EX   de,hl   ; hl = func*
06BD   5E                     LD   e,(hl)   ; de = partial_array*
06BE   23                     INC   hl   
06BF   56                     LD   d,(hl)   
06C0   23                     INC   hl   
06C1   7B                     LD   a,e   ; if partial_array* == null skip
06C2   B2                     OR   d   
06C3   28 21                  JR   z,goFunc3   
06C5   ED 43 FC 45            LD   (vTemp1),bc   
06C9   22 FE 45               LD   (vTemp2),hl   ; save bc,hl
06CC   EB                     EX   de,hl   ; hl = partial_array*
06CD   2B                     DEC   hl   ; bc = count
06CE   46                     LD   b,(hl)   
06CF   2B                     DEC   hl   
06D0   4E                     LD   c,(hl)   
06D1   23                     INC   hl   ; push each item on stack
06D2   23                     INC   hl   
06D3   18 06                  JR   goFunc2   
06D5                GOFUNC1:      
06D5   5E                     LD   e,(hl)   ; de = partial item
06D6   23                     INC   hl   
06D7   56                     LD   d,(hl)   
06D8   23                     INC   hl   
06D9   D5                     PUSH   de   ; push on stack
06DA   0B                     DEC   bc   
06DB                GOFUNC2:      
06DB   79                     LD   a,c   ; if count != 0 then loop
06DC   B0                     OR   b   
06DD   20 F6                  JR   nz,goFunc1   
06DF   ED 4B FC 45            LD   bc,(vTemp1)   ; restore bc
06E3   2A FE 45               LD   hl,(vTemp2)   ; restore hl
06E6                GOFUNC3:      
06E6   5E                     LD   e,(hl)   ; de = block*
06E7   23                     INC   hl   
06E8   56                     LD   d,(hl)   
06E9   23                     INC   hl   
06EA   ED 53 FC 45            LD   (vTemp1),de   ; save block*
06EE   5E                     LD   e,(hl)   ; de = arg_list*
06EF   23                     INC   hl   
06F0   56                     LD   d,(hl)   
06F1   23                     INC   hl   
06F2   EB                     EX   de,hl   ; hl = arg_list*
06F3   ED 5B FC 45            LD   de,(vTemp1)   ; restore de = block*
06F7   7D                     LD   a,l   ; if arg_list* == null a = 0
06F8   B4                     OR   h   
06F9   20 03                  JR   nz,goFunc4   
06FB   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06FC   18 0F                  JR   goFunc8   
06FE                GOFUNC4:      ; allocate locals
06FE   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06FF   7E                     LD   a,(hl)   
0700   18 03                  JR   goFunc6   
0702                GOFUNC5:      ; loop
0702   3B                     DEC   sp   
0703   3B                     DEC   sp   
0704   3D                     DEC   a   
0705                GOFUNC6:      
0705   B7                     OR   a   
0706   20 FA                  JR   nz,goFunc5   ; end loop
0708                GOFUNC7:      
0708   2B                     DEC   hl   ; a = num_args* x 2
0709   7E                     LD   a,(hl)   
070A   23                     INC   hl   
070B   23                     INC   hl   
070C   87                     ADD   a,a   ; a *= 2
070D                GOFUNC8:      
070D   C5                     PUSH   bc   ; push IP
070E   44 4D                  LD   bc,hl   
0710   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0713   85                     ADD   a,l   
0714   6F                     LD   l,a   
0715   39                     ADD   hl,sp   
0716   18 96                  JR   goBlock2   
0718                HASH:        
0718                HEXNUM:      
0718   21 00 00               LD   hl,0   ; Clear hl to accept the number
071B                HEXNUM1:      
071B   03                     INC   bc   
071C   0A                     LD   a,(bc)   ; Get the character which is a numeral
071D   CB 77                  BIT   6,a   ; is it uppercase alpha?
071F   28 02                  JR   z,hexnum2   ; no a decimal
0721   D6 07                  SUB   7   ; sub 7  to make $a - $F
0723                HEXNUM2:      
0723   D6 30                  SUB   $30   ; form decimal digit
0725   DA A3 07               JP   c,num2   
0728   FE 10                  CP   $0F+1   
072A   D2 A3 07               JP   nc,num2   
072D   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
072E   29                     ADD   hl,hl   ; 4X
072F   29                     ADD   hl,hl   ; 8X
0730   29                     ADD   hl,hl   ; 16X
0731   85                     ADD   a,l   ; add into bottom of hl
0732   6F                     LD   l,a   
0733   18 E6                  JR   hexnum1   
0735                UPCASE:      
0735   0A                     LD   a,(bc)   ; a = identifier char
0736   D6 41                  SUB   "A"   ; "A" = 0
0738   18 05                  JR   ident1   
073A                LOWCASE:      
073A   0A                     LD   a,(bc)   
073B   D6 61                  SUB   "a"   
073D   C6 1A                  ADD   a,26   
073F                IDENT1:      
073F   87                     ADD   a,a   ; l = a * 2
0740   6F                     LD   l,a   
0741   26 45                  LD   h,msb(vars)   
0743   22 F0 45               LD   (vPointer),hl   ; store address in setter
0746   5E                     LD   e,(hl)   
0747   23                     INC   hl   
0748   56                     LD   d,(hl)   
0749   D5                     PUSH   de   
074A   DD E9                  JP   (ix)   
074C                             ; if
074C                             ; condition then -- value
074C                QUESTION:      
074C                IF:          
074C   03                     INC   bc   
074D   0A                     LD   a,(bc)   
074E   FE 3F                  CP   "?"   
0750   28 06                  JR   z,ifte   
0752   0B                     DEC   bc   
0753   11 00 00               LD   de,NUL   ; NUL pointer for else
0756   18 01                  JR   ifte1   
0758                             ; ifte
0758                             ; condition then else -- value
0758                IFTE:        
0758   D1                     POP   de   ; de = else
0759                IFTE1:       
0759   E1                     POP   hl   ; hl = then
075A   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
075B   7C                     LD   a,h   
075C   B5                     OR   l   
075D   E1                     POP   hl   ; hl = then
075E   CA 77 06               JP   z,go1   ; if z de = else
0761   EB                     EX   de,hl   ; condition = false, de = then
0762   C3 77 06               JP   go1   
0765                STAR:        
0765                MUL:         
0765   D1                     POP   de   ; get first value
0766   E1                     POP   hl   
0767                MUL2:        
0767   C5                     PUSH   bc   ; Preserve the IP
0768   44 4D                  LD   bc,hl   ; bc = 2nd value
076A   21 00 00               LD   hl,0   
076D   3E 10                  LD   a,16   
076F                MUL3:        
076F   29                     ADD   hl,hl   
0770   CB 13                  RL   e   
0772   CB 12                  RL   d   
0774   30 04                  JR   nc,$+6   
0776   09                     ADD   hl,bc   
0777   30 01                  JR   nc,$+3   
0779   13                     INC   de   
077A   3D                     DEC   a   
077B   20 F2                  JR   nz,mul3   
077D   C1                     POP   bc   ; Restore the IP
077E   C3 99 03               JP   add3   
0781                NUM:         
0781   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0784   0A                     LD   a,(bc)   ; Get numeral or -
0785   FE 2D                  CP   "-"   
0787   20 01                  JR   nz,num0   
0789   03                     INC   bc   ; move to next char, no flags affected
078A                NUM0:        
078A   08                     EX   af,af'   ; save zero flag = 0 for later
078B                NUM1:        
078B   0A                     LD   a,(bc)   ; read digit
078C   D6 30                  SUB   "0"   ; less than 0?
078E   38 13                  JR   c,num2   ; not a digit, exit loop
0790   FE 0A                  CP   10   ; greater that 9?
0792   30 0F                  JR   nc,num2   ; not a digit, exit loop
0794   03                     INC   bc   ; inc IP
0795   54 5D                  LD   de,hl   ; multiply hl * 10
0797   29                     ADD   hl,hl   
0798   29                     ADD   hl,hl   
0799   19                     ADD   hl,de   
079A   29                     ADD   hl,hl   
079B   85                     ADD   a,l   ; add digit in a to hl
079C   6F                     LD   l,a   
079D   3E 00                  LD   a,0   
079F   8C                     ADC   a,h   
07A0   67                     LD   h,a   
07A1   18 E8                  JR   num1   
07A3                NUM2:        
07A3   0B                     DEC   bc   
07A4   08                     EX   af,af'   ; restore zero flag
07A5   20 07                  JR   nz,num3   
07A7   EB                     EX   de,hl   ; negate the value of hl
07A8   21 00 00               LD   hl,0   
07AB   B7                     OR   a   ; jump to sub2
07AC   ED 52                  SBC   hl,de   
07AE                NUM3:        
07AE   E5                     PUSH   hl   ; Put the number on the stack
07AF   DD E9                  JP   (ix)   ; and process the next character
07B1                UNDERSCORE:      
07B1                REMAIN:      
07B1   2A F2 45               LD   hl,(vRemain)   
07B4   E5                     PUSH   hl   
07B5   DD E9                  JP   (ix)   
07B7                RPAREN:      
07B7   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07BA   FD 46 09               LD   b,(iy+9)   
07BD   DD E9                  JP   (ix)   
07BF                             ; arg_list* block* -- ptr
07BF                SEMICOLON:      
07BF   D1                     POP   de   ; de = block* hl = heap*
07C0   2A EE 45               LD   hl,(vHeapPtr)   
07C3   AF                     XOR   a   
07C4   77                     LD   (hl),a   ; compile null partial_array*
07C5   23                     INC   hl   
07C6   77                     LD   (hl),a   
07C7   23                     INC   hl   
07C8   73                     LD   (hl),e   ; compile block*
07C9   23                     INC   hl   
07CA   72                     LD   (hl),d   
07CB   23                     INC   hl   
07CC   D1                     POP   de   ; de = block*
07CD   73                     LD   (hl),e   ; compile arg_list*
07CE   23                     INC   hl   
07CF   72                     LD   (hl),d   
07D0   23                     INC   hl   
07D1   ED 5B EE 45            LD   de,(vHeapPtr)   ; return func*
07D5   D5                     PUSH   de   
07D6   22 EE 45               LD   (vHeapPtr),hl   ; heap* += 4
07D9   DD E9                  JP   (ix)   
07DB                             ; shiftLeft
07DB                             ; value count -- value2          shift left count places
07DB                SHIFTLEFT:      
07DB   50 59                  LD   de,bc   ; save IP
07DD   C1                     POP   bc   ; bc = count
07DE   41                     LD   b,c   ; b = loop counter
07DF   E1                     POP   hl   
07E0   04                     INC   b   ; test for counter=0 case
07E1   18 01                  JR   shiftLeft2   
07E3                SHIFTLEFT1:      
07E3   29                     ADD   hl,hl   ; left shift hl
07E4                SHIFTLEFT2:      
07E4   10 FD                  DJNZ   shiftLeft1   
07E6   E5                     PUSH   hl   
07E7   42 4B                  LD   bc,de   ; restore IP
07E9   DD E9                  JP   (ix)   
07EB                             ; shiftRight
07EB                             ; value count -- value2          shift left count places
07EB                SHIFTRIGHT:      
07EB   50 59                  LD   de,bc   ; save IP
07ED   C1                     POP   bc   ; bc = count
07EE   41                     LD   b,c   ; b = loop counter
07EF   E1                     POP   hl   
07F0   04                     INC   b   ; test for counter=0 case
07F1   18 04                  JR   shiftRight2   
07F3                SHIFTRIGHT1:      
07F3   CB 3C                  SRL   h   ; right shift hl
07F5   CB 1D                  RR   l   
07F7                SHIFTRIGHT2:      
07F7   10 FA                  DJNZ   shiftRight1   
07F9   E5                     PUSH   hl   
07FA   42 4B                  LD   bc,de   ; restore IP
07FC   DD E9                  JP   (ix)   
07FE                             ; string
07FE                             ; -- ptr                        ; points to start of string chars,
07FE                             ; length is stored at start - 2 bytes
07FE                DBLQUOTE:      
07FE                STRING:      
07FE   2A EE 45               LD   hl,(vHeapPtr)   ; hl = heap*
0801   23                     INC   hl   ; skip length field to start
0802   23                     INC   hl   
0803   E5                     PUSH   hl   ; save start of string
0804   03                     INC   bc   ; point to next char
0805   18 03                  JR   string2   
0807                STRING1:      
0807   77                     LD   (hl),a   
0808   23                     INC   hl   ; increase count
0809   03                     INC   bc   ; point to next char
080A                STRING2:      
080A   0A                     LD   a,(bc)   
080B   FE 22                  CP   DQUOTE   ; " is the string terminator
080D   28 04                  JR   z,string3   
080F   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0811   20 F4                  JR   nz,string1   
0813                STRING3:      
0813   AF                     XOR   a   ; write NUL to terminate string
0814   77                     LD   (hl),a   ; hl = end of string
0815   23                     INC   hl   
0816   22 EE 45               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0819   2B                     DEC   hl   ; hl = end of string without terminator
081A   D1                     POP   de   ; de = start of string
081B   D5                     PUSH   de   ; return start of string
081C   B7                     OR   a   ; hl = length bytes, de = start of string
081D   ED 52                  SBC   hl,de   
081F   EB                     EX   de,hl   
0820   2B                     DEC   hl   ; write length bytes to length field at start - 2
0821   72                     LD   (hl),d   
0822   2B                     DEC   hl   
0823   73                     LD   (hl),e   
0824   DD E9                  JP   (ix)   
0826                MINUS:       ; negative sign or subtract
0826   03                     INC   bc   ; check if sign of a number
0827   0A                     LD   a,(bc)   
0828   0B                     DEC   bc   
0829   FE 30                  CP   "0"   
082B   38 05                  JR   c,sub   
082D   FE 3A                  CP   "9"+1   
082F   DA 3E 03               JP   c,num_   
0832                SUB:         ; Subtract the value 2nd on stack from top of stack
0832   03                     INC   bc   
0833   FE 2D                  CP   "-"   
0835   20 05                  JR   nz,sub1   
0837   E1                     POP   hl   
0838   2B                     DEC   hl   
0839   C3 85 04               JP   assign0   
083C                SUB1:        
083C   0B                     DEC   bc   
083D   D1                     POP   de   
083E   E1                     POP   hl   
083F   B7                     OR   a   
0840   ED 52                  SBC   hl,de   
0842   C3 99 03               JP   add3   
0845                             ;*******************************************************************
0845                             ; commands
0845                             ; a contains command letter
0845                             ; bc points to command letter
0845                             ;*******************************************************************
0845                COMMAND:      
0845   FE 2F                  CP   "/"   ; // comment
0847   CA 91 08               JP   z,comment   
084A   FE 61                  CP   "a"   ; /ab absolute /ad address of
084C   28 4C                  JR   z,command_a   
084E   FE 62                  CP   "b"   ; /ba buf array /bb buf block
0850                             ; /bd buf decimal /bp buf params
0850                             ; /bs buf string /br break
0850   CA D7 08               JP   z,command_b   
0853   FE 63                  CP   "c"   ; /c chars
0855   CA BD 0A               JP   z,chars   
0858   FE 66                  CP   "f"   ; /f false
085A   CA 6D 06               JP   z,false1   
085D   FE 69                  CP   "i"   ; /in input iv invert
085F   CA AE 0A               JP   z,command_i   
0862   FE 6B                  CP   "k"   ; /k key
0864   CA D0 0A               JP   z,key   
0867   FE 6E                  CP   "n"   ; /n numbers
0869   CA E2 0A               JP   z,numbers   
086C   FE 6F                  CP   "o"   ; /o output
086E   CA D9 0A               JP   z,output   
0871   FE 70                  CP   "p"   ; /pa partial /pc print chars /pk print stack
0873   CA E3 09               JP   z,command_p   
0876   FE 74                  CP   "t"   ; /t true
0878   CA 67 06               JP   z,true1   
087B   FE 76                  CP   "v"   ; /vH heap start vT TIB start /vh heapPtr /vb TIBPtr
087D   CA 5B 0A               JP   z,command_v   
0880   FE 78                  CP   "x"   ; /x xor
0882   CA BA 03               JP   z,xor   
0885   FE 7A                  CP   "z"   ; /z
0887   CA EA 0A               JP   z,zprt   
088A                ERROR1:      
088A   21 01 00               LD   hl,1   ; error 1: unknown command
088D   E5                     PUSH   hl   
088E   C3 40 0C               JP   error   
0891                COMMENT:      
0891   03                     INC   bc   ; point to next char
0892   0A                     LD   a,(bc)   
0893   FE 20                  CP   " "   ; terminate on any char less than SP
0895   30 FA                  JR   nc,comment   
0897   0B                     DEC   bc   
0898   DD E9                  JP   (ix)   
089A                COMMAND_A:      
089A   03                     INC   bc   
089B   0A                     LD   a,(bc)   
089C   FE 62                  CP   "b"   
089E   CA A9 08               JP   z,absolute   
08A1   FE 64                  CP   "d"   
08A3   CA B6 08               JP   z,addrOf   
08A6   C3 8A 08               JP   error1   
08A9                             ; /ab absolute
08A9                             ; num -- num
08A9                ABSOLUTE:      
08A9   E1                     POP   hl   
08AA   CB 7C                  BIT   7,h   
08AC   C8                     RET   z   
08AD   AF                     XOR   a   
08AE   95                     SUB   l   
08AF   6F                     LD   l,a   
08B0   9F                     SBC   a,a   
08B1   94                     SUB   h   
08B2   67                     LD   h,a   
08B3   E5                     PUSH   hl   
08B4   DD E9                  JP   (ix)   
08B6                             ; /ad addrOf
08B6                             ; char -- addr
08B6                ADDROF:      
08B6   E1                     POP   hl   ; a = char
08B7   7D                     LD   a,l   
08B8   FE 7B                  CP   "z"+1   ; if a > z then exit
08BA   30 19                  JR   nc,addrOf2   
08BC   D6 41                  SUB   "A"   ; a - 65
08BE   38 15                  JR   c,addrOf2   ; if < A then exit
08C0   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08C2   38 06                  JR   c,addrOf1   
08C4   D6 06                  SUB   "a"-("Z"+1)   
08C6   FE 1A                  CP   "Z"-"A"+1   
08C8   38 0B                  JR   c,addrOf2   ; if < a then exit
08CA                ADDROF1:      
08CA   87                     ADD   a,a   ; double a
08CB   21 00 45               LD   hl,VARS   ; hl = VARS + a
08CE   85                     ADD   a,l   
08CF   6F                     LD   l,a   
08D0   3E 00                  LD   a,0   
08D2   8C                     ADC   a,h   
08D3   67                     LD   h,a   
08D4   E5                     PUSH   hl   
08D5                ADDROF2:      
08D5   DD E9                  JP   (ix)   
08D7                COMMAND_B:      
08D7   03                     INC   bc   
08D8   0A                     LD   a,(bc)   
08D9   FE 63                  CP   "c"   ; /bc buffer char
08DB   CA FA 08               JP   z,bufferChar   
08DE   FE 64                  CP   "d"   ; /bd buffer decimal
08E0   CA 09 09               JP   z,bufferDec   
08E3   FE 68                  CP   "h"   ; /bd buffer hexadecimal
08E5   CA 6A 09               JP   z,bufferHex   
08E8   FE 72                  CP   "r"   ; /br break
08EA   CA 99 09               JP   z,break   
08ED   FE 73                  CP   "s"   ; /bs buffer string
08EF   CA B3 09               JP   z,bufferString   
08F2   FE 78                  CP   "x"   ; /bx buffer x spaces
08F4   CA CF 09               JP   z,bufferXSpaces   
08F7   C3 8A 08               JP   error1   
08FA                             ; /bc buffer char
08FA                             ; char -- length
08FA                BUFFERCHAR:      
08FA   D1                     POP   de   ; e = char
08FB   2A EA 45               LD   hl,(vBufPtr)   ; hl = buffer*
08FE   73                     LD   (hl),e   ; e -> buffer*
08FF   23                     INC   hl   ; buffer*++
0900   22 EA 45               LD   (vBufPtr),hl   ; save buffer*' in pointer
0903   11 01 00               LD   de,1   ; return 1 byte
0906   D5                     PUSH   de   
0907   DD E9                  JP   (ix)   
0909                             ; /bd buffer decimal
0909                             ; value -- length               ; length can be used to rewind buffer*
0909                BUFFERDEC:      
0909   ED 5B EA 45            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
090D   D9                     EXX      
090E   E1                     POP   hl   ; hl = value
090F   CD 21 09               CALL   bufferDec0   
0912   D9                     EXX      ; de = buffer*' bc = IP
0913   2A EA 45               LD   hl,(vBufPtr)   ; hl = buffer*
0916   ED 53 EA 45            LD   (vBufPtr),de   ; update buffer* with buffer*'
091A   EB                     EX   de,hl   ; hl = length
091B   B7                     OR   a   
091C   ED 52                  SBC   hl,de   
091E   E5                     PUSH   hl   ; return length
091F   DD E9                  JP   (ix)   
0921                             ; hl = value
0921                             ; de' = buffer*
0921                             ; a, bc, de, hl destroyed
0921                BUFFERDEC0:      
0921   CB 7C                  BIT   7,h   
0923   28 0C                  JR   z,bufferDec1   
0925   D9                     EXX      
0926   3E 2D                  LD   a,"-"   
0928   12                     LD   (de),a   
0929   13                     INC   de   
092A   D9                     EXX      
092B   AF                     XOR   a   
092C   95                     SUB   l   
092D   6F                     LD   l,a   
092E   9F                     SBC   a,a   
092F   94                     SUB   h   
0930   67                     LD   h,a   
0931                BUFFERDEC1:      
0931   0E 00                  LD   c,0   ; leading zeros flag = false
0933   11 F0 D8               LD   de,-10000   
0936   CD 51 09               CALL   bufferDec2   
0939   11 18 FC               LD   de,-1000   
093C   CD 51 09               CALL   bufferDec2   
093F   11 9C FF               LD   de,-100   
0942   CD 51 09               CALL   bufferDec2   
0945   1E F6                  LD   e,-10   
0947   CD 51 09               CALL   bufferDec2   
094A   0C                     INC   c   ; flag = true for at least digit
094B   1E FF                  LD   e,-1   
094D   CD 51 09               CALL   bufferDec2   
0950   C9                     RET      
0951                BUFFERDEC2:      
0951   06 2F                  LD   b,"0"-1   
0953                BUFFERDEC3:      
0953   04                     INC   b   
0954   19                     ADD   hl,de   
0955   38 FC                  JR   c,bufferDec3   
0957   ED 52                  SBC   hl,de   
0959   3E 30                  LD   a,"0"   
095B   B8                     CP   b   
095C   20 05                  JR   nz,bufferDec4   
095E   AF                     XOR   a   
095F   B1                     OR   c   
0960   C8                     RET   z   
0961   18 01                  JR   bufferDec5   
0963                BUFFERDEC4:      
0963   0C                     INC   c   
0964                BUFFERDEC5:      
0964   78                     LD   a,b   
0965   D9                     EXX      
0966   12                     LD   (de),a   
0967   13                     INC   de   
0968   D9                     EXX      
0969   C9                     RET      
096A                             ; /bh buffer hex
096A                             ; value -- length               ; length can be used to rewind buffer*
096A                BUFFERHEX:      
096A   E1                     POP   hl   ; hl = value
096B   ED 5B EA 45            LD   de,(vBufPtr)   
096F   7C                     LD   a,h   
0970   CD 85 09               CALL   bufferHex1   
0973   7D                     LD   a,l   
0974   CD 85 09               CALL   bufferHex1   
0977   EB                     EX   de,hl   
0978   ED 5B EA 45            LD   de,(vBufPtr)   
097C   22 EA 45               LD   (vBufPtr),hl   
097F   B7                     OR   a   
0980   ED 52                  SBC   hl,de   
0982   E5                     PUSH   hl   
0983   DD E9                  JP   (ix)   
0985                BUFFERHEX1:      
0985   F5                     PUSH   af   
0986   1F                     RRA      
0987   1F                     RRA      
0988   1F                     RRA      
0989   1F                     RRA      
098A   CD 8E 09               CALL   bufferHex2   
098D   F1                     POP   af   
098E                BUFFERHEX2:      
098E   E6 0F                  AND   0x0F   
0990   C6 90                  ADD   a,0x90   
0992   27                     DAA      
0993   CE 40                  ADC   a,0x40   
0995   27                     DAA      
0996   12                     LD   (de),a   
0997   13                     INC   de   
0998   C9                     RET      
0999                             ; /br break from loop
0999                             ; --
0999                BREAK:       
0999   E1                     POP   hl   
099A   7D                     LD   a,l   
099B   B4                     OR   h   
099C   28 02                  JR   z,break1   
099E   DD E9                  JP   (ix)   
09A0                BREAK1:      
09A0   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09A2   FD 54                  LD   d,iyh   
09A4   21 08 00               LD   hl,8   
09A7   19                     ADD   hl,de   
09A8   23                     INC   hl   
09A9   23                     INC   hl   
09AA   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
09AD   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
09B0   C3 34 05               JP   blockEnd   
09B3                             ; /bs buffered string
09B3                             ; string* -- length
09B3                BUFFERSTRING:      
09B3   E1                     POP   hl   ; hl = string*
09B4   ED 5B EA 45            LD   de,(vBufPtr)   ; de = buffer*
09B8   18 03                  JR   bufferString1   
09BA                BUFFERSTRING0:      
09BA   12                     LD   (de),a   ; a -> buffer*
09BB   13                     INC   de   ; string*++ buffer++
09BC   23                     INC   hl   
09BD                BUFFERSTRING1:      
09BD   7E                     LD   a,(hl)   ; a <- string*
09BE   B7                     OR   a   ; if NUL exit loop
09BF   20 F9                  JR   nz,bufferString0   
09C1   2A EA 45               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
09C4   ED 53 EA 45            LD   (vBufPtr),de   ; save buffer*' in pointer
09C8   EB                     EX   de,hl   ; hl = length
09C9   B7                     OR   a   
09CA   ED 52                  SBC   hl,de   
09CC   E5                     PUSH   hl   ; return length
09CD   DD E9                  JP   (ix)   
09CF                             ; /bx buffered x spaces
09CF                             ; length -- length
09CF                BUFFERXSPACES:      
09CF   D1                     POP   de   ; bc = length
09D0   D5                     PUSH   de   ; return length
09D1   2A EA 45               LD   hl,(vBufPtr)   ; hl = buffer*
09D4   18 04                  JR   bufferXSpaces2   
09D6                BUFFERXSPACES1:      
09D6   36 20                  LD   (hl)," "   
09D8   23                     INC   hl   
09D9   1B                     DEC   de   
09DA                BUFFERXSPACES2:      
09DA   7B                     LD   a,e   
09DB   B2                     OR   d   
09DC   20 F8                  JR   nz,bufferXSpaces1   
09DE   22 EA 45               LD   (vBufPtr),hl   ; save buffer*'
09E1   DD E9                  JP   (ix)   
09E3                COMMAND_P:      
09E3   03                     INC   bc   
09E4   0A                     LD   a,(bc)   
09E5   FE 61                  CP   "a"   
09E7   CA FC 09               JP   z,partial   
09EA   FE 63                  CP   "c"   
09EC   CA 1C 0A               JP   z,printChars   
09EF   FE 6B                  CP   "k"   
09F1   CA 2E 0A               JP   z,printStack   
09F4   FE 78                  CP   "x"   
09F6   CA 30 0A               JP   z,printX   
09F9   C3 8A 08               JP   error1   
09FC                             ; partial
09FC                             ; array* func* -- func1*
09FC                PARTIAL:      
09FC   E1                     POP   hl   ; h1 = func*
09FD   ED 5B EE 45            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0A01   ED 43 FC 45            LD   (vTemp1),bc   ; save IP
0A05   01 06 00               LD   bc,6   ; bc = count
0A08   ED B0                  LDIR      ; clone func
0A0A   ED 4B FC 45            LD   bc,(vTemp1)   ; restore IP
0A0E   2A EE 45               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0A11   ED 53 EE 45            LD   (vHeapPtr),de   ; heap* += 6
0A15   D1                     POP   de   ; de = array*
0A16   E5                     PUSH   hl   ; return partial_array*
0A17   73                     LD   (hl),e   ; compile array*
0A18   23                     INC   hl   
0A19   72                     LD   (hl),d   
0A1A   DD E9                  JP   (ix)   
0A1C                             ; printChars
0A1C                             ; char* len --
0A1C                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
0A1C                PRINTCHARS:      
0A1C   E1                     POP   hl   
0A1D   2B                     DEC   hl   
0A1E   D1                     POP   de   
0A1F   C3 24 0A               JP   printChars2   
0A22                PRINTCHARS1:      
0A22   13                     INC   de   
0A23   2B                     DEC   hl   
0A24                PRINTCHARS2:      
0A24   1A                     LD   a,(de)   
0A25   CD 85 00               CALL   putchar   
0A28   7D                     LD   a,l   
0A29   B4                     OR   h   
0A2A   20 F6                  JR   nz,printChars1   
0A2C   DD E9                  JP   (ix)   
0A2E                             ; /pk print stack
0A2E                             ; --
0A2E                PRINTSTACK:      
0A2E                             ;     ld (vTemp1),bc
0A2E                             ;     call printStr
0A2E                             ;     .cstr "=> "
0A2E                             ;     ld hl,STACK
0A2E                             ;     sbc hl,sp
0A2E                             ;     srl h
0A2E                             ;     rr l
0A2E                             ;     ld bc,hl
0A2E                             ;     ld hl,STACK
0A2E                             ;     jr printStack2
0A2E                             ; printStack1:
0A2E                             ;     dec bc
0A2E                             ;     dec hl
0A2E                             ;     ld d,(hl)
0A2E                             ;     dec hl
0A2E                             ;     ld e,(hl)
0A2E                             ;     ex de,hl
0A2E                             ;     call prthex
0A2E                             ;     ex de,hl
0A2E                             ;     ld a," "
0A2E                             ;     call putchar
0A2E                             ; printStack2:
0A2E                             ;     ld a,c
0A2E                             ;     or b
0A2E                             ;     jr nz,printStack1
0A2E                             ;     call prompt
0A2E                             ;     ld bc,(vTemp1)
0A2E   DD E9                  JP   (ix)   
0A30                PRINTX:      
0A30   CD 76 06               CALL   go   
0A33   00 00                  DW   NUL   ; closure
0A35   39 0A                  DW   printX_block   
0A37   23 0B                  DW   args1A0L   
0A39                PRINTX_BLOCK:      
0A39   7B 24 61 20 31 2F 62 78 2B 24 61 3D 20 2F 76 62 24 61 2D 2F 76 62 3D 20 2F 76 62 24 61 2F 70 63 7D 00 .CSTR   "{$a 1/bx+$a= /vb$a-/vb= /vb$a/pc}"   ; block
0A5B                COMMAND_V:      
0A5B   03                     INC   bc   
0A5C   0A                     LD   a,(bc)   
0A5D   FE 62                  CP   "b"   
0A5F   CA 8D 0A               JP   z,varBufPtr   
0A62   FE 68                  CP   "h"   
0A64   CA 96 0A               JP   z,varHeapPtr   
0A67   FE 74                  CP   "t"   
0A69   CA 9F 0A               JP   z,varTIBPtr   
0A6C   FE 42                  CP   "B"   
0A6E   CA 7E 0A               JP   z,constBufStart   
0A71   FE 48                  CP   "H"   
0A73   CA 83 0A               JP   z,constHeapStart   
0A76   FE 54                  CP   "T"   
0A78   CA 88 0A               JP   z,constTIBStart   
0A7B   C3 8A 08               JP   error1   
0A7E                CONSTBUFSTART:      
0A7E   11 00 48               LD   de,BUF   
0A81   18 28                  JR   constant   
0A83                CONSTHEAPSTART:      
0A83   11 00 4A               LD   de,HEAP   
0A86   18 23                  JR   constant   
0A88                CONSTTIBSTART:      
0A88   11 00 47               LD   de,TIB   
0A8B   18 1E                  JR   constant   
0A8D                VARBUFPTR:      
0A8D   ED 5B EA 45            LD   de,(vBufPtr)   
0A91   21 EA 45               LD   hl,vBufPtr   
0A94   18 12                  JR   variable   
0A96                VARHEAPPTR:      
0A96   ED 5B EE 45            LD   de,(vHeapPtr)   
0A9A   21 EE 45               LD   hl,vHeapPtr   
0A9D   18 09                  JR   variable   
0A9F                VARTIBPTR:      
0A9F   ED 5B E8 45            LD   de,(vTIBPtr)   
0AA3   21 E8 45               LD   hl,vTIBPtr   
0AA6   18 00                  JR   variable   
0AA8                VARIABLE:      
0AA8   22 F0 45               LD   (vPointer),hl   
0AAB                CONSTANT:      
0AAB   D5                     PUSH   de   
0AAC   DD E9                  JP   (ix)   
0AAE                COMMAND_I:      
0AAE   03                     INC   bc   
0AAF   0A                     LD   a,(bc)   
0AB0   FE 6E                  CP   "n"   ; /in input
0AB2   CA C5 0A               JP   z,input   
0AB5   FE 76                  CP   "v"   ; /iv invert
0AB7   CA C5 03               JP   z,invert   
0ABA   C3 8A 08               JP   error1   
0ABD                CHARS:       
0ABD   21 01 00               LD   hl,1   
0AC0                CHARS1:      
0AC0   22 E6 45               LD   (vDataWidth),hl   
0AC3   DD E9                  JP   (ix)   
0AC5                             ; Z80 port input
0AC5                             ; port -- value
0AC5                INPUT:       
0AC5   E1                     POP   hl   
0AC6   59                     LD   e,c   ; save IP
0AC7   4D                     LD   c,l   
0AC8   ED 68                  IN   l,(c)   
0ACA   26 00                  LD   h,0   
0ACC   4B                     LD   c,e   ; restore IP
0ACD   E5                     PUSH   hl   
0ACE   DD E9                  JP   (ix)   
0AD0                KEY:         
0AD0   CD 81 00               CALL   getchar   
0AD3   26 00                  LD   h,0   
0AD5   6F                     LD   l,a   
0AD6   E5                     PUSH   hl   
0AD7   DD E9                  JP   (ix)   
0AD9                             ; Z80 port output
0AD9                             ; value port --
0AD9                OUTPUT:      
0AD9   E1                     POP   hl   
0ADA   59                     LD   e,c   ; save IP
0ADB   4D                     LD   c,l   
0ADC   E1                     POP   hl   
0ADD   ED 69                  OUT   (c),l   
0ADF   4B                     LD   c,e   ; restore IP
0AE0   DD E9                  JP   (ix)   
0AE2                NUMBERS:      
0AE2   21 02 00               LD   hl,2   
0AE5   C3 C0 0A               JP   chars1   
0AE8                             ; 
0AE8                             ; 
0AE8                             ; 
0AE8                             ; 
0AE8                FILTER:      
0AE8                MAP:         
0AE8                SCAN:        
0AE8   DD E9                  JP   (ix)   
0AEA                ZPRT:        
0AEA   CD 76 06               CALL   go   
0AED   00 00                  DW   NUL   ; closure
0AEF   F7 0A                  DW   zprt_block   
0AF1   F5 0A                  DW   zprt_args   
0AF3   02                     DB   2   ; num args + locals
0AF4   01                     DB   1   ; num locals
0AF5                ZPRT_ARGS:      
0AF5   6E 73                  DB   "ns"   
0AF7                ZPRT_BLOCK:      
0AF7   7B 24 6E 2F 62 64 60 20 60 2F 62 73 20 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$n/bd` `/bs +$s= /vb$s-/vb= /vb$s/pc}"   ; block
0B1E                             ;*******************************************************************
0B1E                             ; reusable arglists
0B1E                             ;*******************************************************************
0B1E                ARGS0A1L_:      ; zero args one local
0B1E   01                     DB   1   ; num args + locals
0B1F   01                     DB   1   ; num locals
0B20                ARGS0A1L:      
0B20   61                     DB   "a"   
0B21                ARGS1A0L_:      ; one arg zero locals
0B21   01                     DB   1   ; num args + locals
0B22   00                     DB   0   ; num locals
0B23                ARGS1A0L:      
0B23   61                     DB   "a"   
0B24                ARGS1A1L_:      ; one arg one local
0B24   02                     DB   2   ; num args + locals
0B25   01                     DB   1   ; num locals
0B26                ARGS1A1L:      
0B26   61 62                  DB   "ab"   
0B28                ARGS2A0L_:      ; two args zero locals
0B28   02                     DB   2   ; num args + locals
0B29   00                     DB   0   ; num locals
0B2A                ARGS2A0L:      
0B2A   61 62                  DB   "ab"   
0B2C                             ;*******************************************************************
0B2C                             ; general routines
0B2C                             ;*******************************************************************
0B2C                             ; ; print decimal
0B2C                             ; ; hl = value
0B2C                             ; prtdec:
0B2C                             ;     bit 7,h
0B2C                             ;     jr z,prtdec0
0B2C                             ;     ld a,"-"
0B2C                             ;     call putchar
0B2C                             ;     xor a
0B2C                             ;     sub l
0B2C                             ;     ld l,a
0B2C                             ;     sbc a,a
0B2C                             ;     sub h
0B2C                             ;     ld h,a
0B2C                             ; prtdec0:
0B2C                             ;     push bc
0B2C                             ;     ld c,0                      ; leading zeros flag = false
0B2C                             ;     ld de,-10000
0B2C                             ;     call prtdec1
0B2C                             ;     ld de,-1000
0B2C                             ;     call prtdec1
0B2C                             ;     ld de,-100
0B2C                             ;     call prtdec1
0B2C                             ;     ld e,-10
0B2C                             ;     call prtdec1
0B2C                             ;     inc c                       ; flag = true for at least digit
0B2C                             ;     ld e,-1
0B2C                             ;     call prtdec1
0B2C                             ;     pop bc
0B2C                             ;     ret
0B2C                             ; prtdec1:	
0B2C                             ;     ld b,"0"-1
0B2C                             ; prtdec2:	
0B2C                             ;     inc b
0B2C                             ;     add hl,de
0B2C                             ;     jr c,prtdec2
0B2C                             ;     sbc hl,de
0B2C                             ;     ld a,"0"
0B2C                             ;     cp b
0B2C                             ;     jr nz,prtdec3
0B2C                             ;     xor a
0B2C                             ;     or c
0B2C                             ;     ret z
0B2C                             ;     jr prtdec4
0B2C                             ; prtdec3:	
0B2C                             ;     inc c
0B2C                             ; prtdec4:	
0B2C                             ;     ld a,b
0B2C                             ;     jp putchar
0B2C                             ; prthex:                         ; display hl as a 16-bit number in hex.
0B2C                             ;     push bc                     ; preserve the IP
0B2C                             ;     ld a,h
0B2C                             ;     call prthex2
0B2C                             ;     ld a,l
0B2C                             ;     call prthex2
0B2C                             ;     pop bc
0B2C                             ;     ret
0B2C                             ; prthex2:		
0B2C                             ;     ld	c,a
0B2C                             ; 	rra
0B2C                             ; 	rra
0B2C                             ; 	rra
0B2C                             ; 	rra
0B2C                             ;     call prthex3
0B2C                             ;     ld a,c
0B2C                             ; prthex3:		
0B2C                             ;     and	0x0F
0B2C                             ; 	add	a,0x90
0B2C                             ; 	daa
0B2C                             ; 	adc	a,0x40
0B2C                             ; 	daa
0B2C                             ; 	jp putchar
0B2C                PRTSTR0:      
0B2C   CD 85 00               CALL   putchar   
0B2F   23                     INC   hl   
0B30                PRTSTR:      
0B30   7E                     LD   a,(hl)   
0B31   B7                     OR   a   
0B32   20 F8                  JR   nz,prtstr0   
0B34   C9                     RET      
0B35                             ; **************************************************************************
0B35                             ; calculate nesting value
0B35                             ; a is char to be tested,
0B35                             ; e is the nesting value (initially 0)
0B35                             ; e is increased by ( and [
0B35                             ; e is decreased by ) and ]
0B35                             ; e has its bit 7 toggled by `
0B35                             ; limited to 127 levels
0B35                             ; **************************************************************************
0B35                NESTING:      
0B35   FE 22                  CP   DQUOTE   ; quote char
0B37   28 06                  JR   z,nesting0   
0B39   FE 60                  CP   "`"   ; quote char
0B3B   28 02                  JR   z,nesting0   
0B3D   18 0A                  JR   nesting1   
0B3F                NESTING0:      
0B3F   CB 7B                  BIT   7,e   
0B41   28 03                  JR   z,nesting1a   
0B43   CB BB                  RES   7,e   
0B45   C9                     RET      
0B46                NESTING1A:      
0B46   CB FB                  SET   7,e   
0B48   C9                     RET      
0B49                NESTING1:      
0B49   CB 7B                  BIT   7,e   
0B4B   C0                     RET   nz   
0B4C   FE 7B                  CP   "{"   
0B4E   28 08                  JR   z,nesting2   
0B50   FE 5B                  CP   "["   
0B52   28 04                  JR   z,nesting2   
0B54   FE 28                  CP   "("   
0B56   20 02                  JR   nz,nesting3   
0B58                NESTING2:      
0B58   1C                     INC   e   
0B59   C9                     RET      
0B5A                NESTING3:      
0B5A   FE 7D                  CP   "}"   
0B5C   28 07                  JR   z,nesting4   
0B5E   FE 5D                  CP   "]"   
0B60   28 03                  JR   z,nesting4   
0B62   FE 29                  CP   ")"   
0B64   C0                     RET   nz   
0B65                NESTING4:      
0B65   1D                     DEC   e   
0B66   C9                     RET      
0B67                PROMPT:      
0B67   CD 77 0B               CALL   printStr   
0B6A   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B6F   C9                     RET      
0B70                CRLF:        
0B70   CD 77 0B               CALL   printStr   
0B73   0D 0A 00               .CSTR   "\r\n"   
0B76   C9                     RET      
0B77                             ; prints a null teminated string
0B77                             ; the string should be immediately following the call
0B77                PRINTSTR:      
0B77   E3                     EX   (sp),hl   ; swap			
0B78   CD 30 0B               CALL   prtstr   
0B7B   23                     INC   hl   ; inc past NUL
0B7C   E3                     EX   (sp),hl   ; put it back	
0B7D   C9                     RET      
0B7E                INIT:        
0B7E   DD 2A EC 45            LD   ix,(vNext)   
0B82   FD 21 80 44            LD   iy,STACK   
0B86   21 80 01               LD   hl,isysVars   
0B89   11 E6 45               LD   de,sysVars   
0B8C   01 10 00               LD   bc,8 * 2   
0B8F   ED B0                  LDIR      
0B91   21 00 45               LD   hl,vars   ; 52 vars LO HI
0B94   06 34                  LD   b,26*2   
0B96   AF                     XOR   a   
0B97                INIT0:       
0B97   77                     LD   (hl),a   
0B98   23                     INC   hl   
0B99   10 FC                  DJNZ   init0   
0B9B   C9                     RET      
0B9C                START:       
0B9C   31 80 44               LD   sp,STACK   ; start of monty
0B9F   CD 7E 0B               CALL   init   ; setups
0BA2   CD 77 0B               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0BA5   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0BB2                INTERPRET:      
0BB2   CD 67 0B               CALL   prompt   
0BB5   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BB8   21 00 47               LD   hl,TIB   
0BBB   22 E8 45               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BBE                INTERPRET2:      ; calculate nesting
0BBE   1E 00                  LD   e,0   ; initilize nesting value
0BC0   C5                     PUSH   bc   ; save offset into TIB,
0BC1                             ; bc is also the count of chars in TIB
0BC1   21 00 47               LD   hl,TIB   ; hl is start of TIB
0BC4   18 06                  JR   interpret4   
0BC6                INTERPRET3:      
0BC6   7E                     LD   a,(hl)   ; a = char in TIB
0BC7   23                     INC   hl   ; inc pointer into TIB
0BC8   0B                     DEC   bc   ; dec count of chars in TIB
0BC9   CD 35 0B               CALL   nesting   ; update nesting value
0BCC                INTERPRET4:      
0BCC   79                     LD   a,c   ; is count zero?
0BCD   B0                     OR   b   
0BCE   20 F6                  JR   nz,interpret3   ; if not loop
0BD0   C1                     POP   bc   ; restore offset into TIB
0BD1                INTERPRET5:      
0BD1   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BD4   FE 20                  CP   $20   ; compare to space
0BD6   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BD8   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BDA                             ; ???? NEEDED?
0BDA   28 3B                  JR   z,interpret8   
0BDC   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BDE   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BE0   FE 05                  CP   CTRL_E   
0BE2   CA 63 0C               JP   z,edit_   
0BE5   FE 08                  CP   CTRL_H   
0BE7   CA 53 0C               JP   z,backSpace_   
0BEA   FE 0A                  CP   CTRL_J   
0BEC   CA 7B 0C               JP   z,reEdit_   
0BEF   FE 13                  CP   CTRL_S   
0BF1   CA 7E 0C               JP   z,printStack_   
0BF4                             ; DB     lsb(edit_)       ; ENQ ^E  5
0BF4                             ; DB     lsb(reedit_)     ; LF  ^J 10
0BF4                             ; DB     lsb(list_)       ; FF  ^L 12
0BF4                             ; DB     lsb(printStack_) ; DLE ^P 16
0BF4                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0BF4                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0BF4                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0BF4                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0BF4                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0BF4                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0BF4                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0BF4                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0BF4                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0BF4                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0BF4                INTERPRET5A:      
0BF4                             ; ld (vTIBPtr),bc
0BF4                             ; ld bc,(vTIBPtr)
0BF4   18 C8                  JR   interpret2   
0BF6                INTERPRET6:      
0BF6   21 00 47               LD   hl,TIB   
0BF9   09                     ADD   hl,bc   
0BFA   77                     LD   (hl),a   ; store the character in textbuf
0BFB   03                     INC   bc   
0BFC   CD 85 00               CALL   putchar   ; echo character to screen
0BFF   CD 35 0B               CALL   nesting   
0C02   18 CD                  JR   interpret5   ; wait for next character
0C04                INTERPRET7:      
0C04   21 00 47               LD   hl,TIB   
0C07   09                     ADD   hl,bc   
0C08   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C0A   23                     INC   hl   
0C0B   36 0A                  LD   (hl),"\n"   
0C0D   23                     INC   hl   
0C0E   03                     INC   bc   
0C0F   03                     INC   bc   
0C10   CD 70 0B               CALL   crlf   ; echo character to screen
0C13   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C14   B7                     OR   a   
0C15   20 BA                  JR   nz,interpret5   
0C17                INTERPRET8:      
0C17   21 00 47               LD   hl,TIB   
0C1A   09                     ADD   hl,bc   
0C1B   22 E8 45               LD   (vTIBPtr),hl   
0C1E   01 00 47               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0C21                             ; we pressed enter
0C21   0B                     DEC   bc   
0C22                NEXT:        
0C22   03                     INC   bc   ; Increment the IP
0C23   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C24   FE 20                  CP   " "   ; whitespace?
0C26   28 FA                  JR   z,next   ; space? ignore
0C28   38 07                  JR   c,next1   
0C2A   6F                     LD   l,a   ; index into table
0C2B   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0C2D   6E                     LD   l,(hl)   ; get low jump address
0C2E   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C30   E9                     JP   (hl)   ; Jump to routine
0C31                NEXT1:       
0C31   FE 00                  CP   NUL   ; end of input string?
0C33   28 03                  JR   z,exit   
0C35   C3 B2 0B               JP   interpret   ; no, other whitespace, macros?
0C38                EXIT:        
0C38   03                     INC   bc   
0C39   60 69                  LD   hl,bc   
0C3B   E9                     JP   (hl)   
0C3C                RUN:         
0C3C   C1                     POP   bc   
0C3D   0B                     DEC   bc   
0C3E   DD E9                  JP   (ix)   
0C40                ERROR:       
0C40   CD 3C 0C               CALL   run   
0C43   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C50   C3 B2 0B               JP   interpret   
0C53                BACKSPACE_:      
0C53   79                     LD   a,c   
0C54   B0                     OR   b   
0C55   CA BE 0B               JP   z,interpret2   
0C58   0B                     DEC   bc   
0C59   CD 77 0B               CALL   printStr   
0C5C   08 20 08 00            .CSTR   "\b \b"   
0C60   C3 BE 0B               JP   interpret2   
0C63                             ; edit
0C63                EDIT_:       
0C63   CD 3C 0C               CALL   run   
0C66   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C78   C3 B2 0B               JP   interpret   
0C7B                REEDIT_:      
0C7B   C3 B2 0B               JP   interpret   
0C7E                PRINTSTACK_:      
0C7E   CD 3C 0C               CALL   run   
0C81   2F 70 6B 00            .CSTR   "/pk"   
0C85   C3 B2 0B               JP   interpret   
0C88                             ; editDef:
0C88                             ;     pop hl                      ; pop ret address
0C88                             ;     ex (sp),hl                  ; swap with TOS
0C88                             ;     push hl                     ; dup TOS
0C88                             ;     ld a,l                      ; a = ident
0C88                             ;     ld de,TIB                   ; de = start of TIB
0C88                             ;     ld (vTIBPtr),de             ; update TIB*
0C88                             ;     push ix                     ; save NEXT
0C88                             ;     ld ix,editDef0              ; NEXT = editDef0
0C88                             ;     jp lookupRef                ; convert letter into address
0C88                             ; editDef0:
0C88                             ;     ld e,(hl)                   ; de = (hl++)
0C88                             ;     inc hl
0C88                             ;     ld d,(hl)
0C88                             ;     ld a,d                      ; de == 0 ?
0C88                             ;     or e
0C88                             ;     jr z,editDef4
0C88                             ;     ld ix,editDef3              ; NEXT = editDef3
0C88                             ;     ex de,hl
0C88                             ;     ld a,(hl)
0C88                             ;     cp "{"
0C88                             ;     jr nz,editDef1
0C88                             ;     jp editBlock0               ; convert letter into address
0C88                             ; editDef1:
0C88                             ;     cp "("
0C88                             ;     jr nz,editDef2
0C88                             ;     jp editBlock0               ; convert letter into address
0C88                             ; editDef2:
0C88                             ;     jp editFunc
0C88                             ; editDef3:
0C88                             ;     ld a," "                    ; write assign
0C88                             ;     call writeChar
0C88                             ;     pop hl                      ; a = ident
0C88                             ;     ld a,l
0C88                             ;     call writeChar
0C88                             ;     ld a,"="                    ; write assign
0C88                             ;     call writeChar
0C88                             ;     ld ix,editDef4              ; NEXT = editDef4
0C88                             ;     jp printTIB
0C88                             ; editDef4:
0C88                             ;     pop ix                      ; restore NEXT
0C88                             ;     jp (ix)
0C88                             ; writeChar:
0C88                             ;     ld de,(vTIBPtr)             ; de = TIB*
0C88                             ;     ld (de),a                   ; write ident
0C88                             ;     inc de
0C88                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0C88                             ;     ret
0C88                             ; ; printTIB
0C88                             ; printTIB:
0C88                             ;     ld hl,(vTIBPtr)
0C88                             ;     ld de,TIB
0C88                             ;     or a
0C88                             ;     sbc hl,de
0C88                             ;     jp printTIB2
0C88                             ; printTIB1:
0C88                             ;     ld a,(de)
0C88                             ;     call putchar
0C88                             ; printTIB2:
0C88                             ;     ld a,l
0C88                             ;     or h
0C88                             ;     jr nz,printTIB1
0C88                             ;     jp (ix)
0C88                             ; editBlock:
0C88                             ;     pop hl                      ; hl = block*
0C88                             ; editBlock0:
0C88                             ;     push ix                     ; save next
0C88                             ;     push hl                     ; push block*
0C88                             ;     push hl                     ; push block*
0C88                             ;     ld ix,(editBlock2)
0C88                             ;     jp blockLength
0C88                             ; editBlock1:
0C88                             ;     pop hl                      ; bc = length, (sp) = IP
0C88                             ;     pop de                      ; de = block*
0C88                             ;     ld a,l
0C88                             ;     or h
0C88                             ;     jr z,editBlock2
0C88                             ;     push bc
0C88                             ;     ld bc,hl
0C88                             ;     ex de,hl                    ; hl = block*
0C88                             ;     ld de,(vTIBPtr)              ; de = TIB*
0C88                             ;     ldir                        ; copy block to TIB
0C88                             ;     ld (vTIBPtr),de              ; save TIB*
0C88                             ;     pop bc
0C88                             ; editBlock2:
0C88                             ;     pop ix                      ; restore next
0C88                             ;     jp (ix)
0C88                             ; editFunc:
0C88                             ;     jp (ix)
0C88                             ; editArray:
0C88                             ;     jp (ix)
0C88                             ; editArglist:
0C88                             ;     jp (ix)
0C88                             ; ; blockLength
0C88                             ; ; addr1 -- length
0C88                             ; blockLength:
0C88                             ;     pop hl                      ; block*
0C88                             ;     push hl                     ; save block*
0C88                             ;     inc hl                      ; skip first char
0C88                             ;     ld d,1                      ; increase nesting
0C88                             ; blockLength1:                   ; Skip to end of definition
0C88                             ;     ld a,(hl)                   ; Get the next character
0C88                             ;     inc hl                      ; Point to next character
0C88                             ;     cp " " + 1                  ; ignore whitespace
0C88                             ;     jr c,blockLength1
0C88                             ;     cp ")"
0C88                             ;     jr z,blockLength4
0C88                             ;     cp "}"
0C88                             ;     jr z,blockLength4
0C88                             ;     cp "]"
0C88                             ;     jr z,blockLength4
0C88                             ;     cp "("
0C88                             ;     jr z,blockLength2
0C88                             ;     cp "{"
0C88                             ;     jr z,blockLength2
0C88                             ;     cp "["
0C88                             ;     jr z,blockLength2
0C88                             ;     cp "'"
0C88                             ;     jr z,blockLength3
0C88                             ;     cp "`"
0C88                             ;     jr z,blockLength3
0C88                             ;     cp DQUOTE
0C88                             ;     jr z,blockLength3
0C88                             ;     jr blockLength1
0C88                             ; blockLength2:
0C88                             ;     inc d
0C88                             ;     jr blockLength1
0C88                             ; blockLength4:
0C88                             ;     dec d
0C88                             ;     jr nz, blockLength1         ; get the next element
0C88                             ; blockLength3:
0C88                             ;     ld a,$80
0C88                             ;     xor d
0C88                             ;     ld d,a
0C88                             ;     jr nz, blockLength1
0C88                             ;     pop hl                      ; hl = block*
0C88                             ;     or a
0C88                             ;     sbc hl,de
0C88                             ;     push hl
0C88                             ;     jp (ix)
0C88                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0C88                             ; \a start of stack \#3 depth \b base \$ prompt
0C88                             ; DW dStack               ; a vS0 start of datastack			
0C88                             ; DW FALSE                ; b vBase16
0C88                             ; DW 0                    ; c vTIBPtr an offset to the tib
0C88                             ; DW 0                    ; d
0C88                             ; DW 65                   ; e vLastDef "A" last command u defined
0C88                             ; DW 0                    ; f
0C88                             ; DW page6                ; g 256 bytes limits
0C88                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0C88                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                             ; test "[10 20 30 40] -1%", 4
0D00                             ; test "[10 20 30] 0%", 10
0D00                             ; call printStr
0D00                             ; .cstr "Done!"
0D00                             ; HALT
0D00                             ; 
0D00                          ;*Macro unroll:  test "/f", false
0D00   31 80 44               LD   SP,STACK   
0D03   CD 7E 0B               CALL   init   
0D06   CD F4 43               CALL   execStr   
0D09   2F 66 00               .CSTR   "/f"   
0D0C                          ;*Macro unroll:  expect "/f",false
0D0C   E1                     POP   HL   
0D0D   E5                     PUSH   HL   
0D0E   11 00 00               LD   DE,false   
0D11   B7                     OR   A   
0D12   ED 52                  SBC   HL,DE   
0D14   7D                     LD   A,L   
0D15   B4                     OR   H   
0D16   CA 6C 0D               JP   Z,expectM_0_2708S50   
0D19   CD 77 0B               CALL   printStr   
0D1C   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0D25   CD 77 0B               CALL   printStr   
0D28   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D37   21 00 00               LD   hl,false   
0D3A   E5                     PUSH   hl   
0D3B   CD 3C 0C               CALL   run   
0D3E   2E 00                  .CSTR   "."   
0D40   CD 77 0B               CALL   printStr   
0D43   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D50   E1                     POP   hl   
0D51   E5                     PUSH   hl   
0D52   E5                     PUSH   hl   
0D53   CD 3C 0C               CALL   run   
0D56   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0D6A   76                     HALT      
0D6B   00                     .CSTR      
0D6C                EXPECTM_0_2708S50:      
0D6C   E1                     POP   HL   
0D6D                          ;*Macro unroll:  test "/t", true
0D6D   31 80 44               LD   SP,STACK   
0D70   CD 7E 0B               CALL   init   
0D73   CD F4 43               CALL   execStr   
0D76   2F 74 00               .CSTR   "/t"   
0D79                          ;*Macro unroll:  expect "/t",true
0D79   E1                     POP   HL   
0D7A   E5                     PUSH   HL   
0D7B   11 FF FF               LD   DE,true   
0D7E   B7                     OR   A   
0D7F   ED 52                  SBC   HL,DE   
0D81   7D                     LD   A,L   
0D82   B4                     OR   H   
0D83   CA D9 0D               JP   Z,expectM_0_2709S50   
0D86   CD 77 0B               CALL   printStr   
0D89   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0D92   CD 77 0B               CALL   printStr   
0D95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DA4   21 FF FF               LD   hl,true   
0DA7   E5                     PUSH   hl   
0DA8   CD 3C 0C               CALL   run   
0DAB   2E 00                  .CSTR   "."   
0DAD   CD 77 0B               CALL   printStr   
0DB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DBD   E1                     POP   hl   
0DBE   E5                     PUSH   hl   
0DBF   E5                     PUSH   hl   
0DC0   CD 3C 0C               CALL   run   
0DC3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0DD7   76                     HALT      
0DD8   00                     .CSTR      
0DD9                EXPECTM_0_2709S50:      
0DD9   E1                     POP   HL   
0DDA                          ;*Macro unroll:  test "1", 1
0DDA   31 80 44               LD   SP,STACK   
0DDD   CD 7E 0B               CALL   init   
0DE0   CD F4 43               CALL   execStr   
0DE3   31 00                  .CSTR   "1"   
0DE5                          ;*Macro unroll:  expect "1",1
0DE5   E1                     POP   HL   
0DE6   E5                     PUSH   HL   
0DE7   11 01 00               LD   DE,1   
0DEA   B7                     OR   A   
0DEB   ED 52                  SBC   HL,DE   
0DED   7D                     LD   A,L   
0DEE   B4                     OR   H   
0DEF   CA 44 0E               JP   Z,expectM_0_2710S50   
0DF2   CD 77 0B               CALL   printStr   
0DF5   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0DFD   CD 77 0B               CALL   printStr   
0E00   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E0F   21 01 00               LD   hl,1   
0E12   E5                     PUSH   hl   
0E13   CD 3C 0C               CALL   run   
0E16   2E 00                  .CSTR   "."   
0E18   CD 77 0B               CALL   printStr   
0E1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E28   E1                     POP   hl   
0E29   E5                     PUSH   hl   
0E2A   E5                     PUSH   hl   
0E2B   CD 3C 0C               CALL   run   
0E2E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0E42   76                     HALT      
0E43   00                     .CSTR      
0E44                EXPECTM_0_2710S50:      
0E44   E1                     POP   HL   
0E45                          ;*Macro unroll:  test "2", 2
0E45   31 80 44               LD   SP,STACK   
0E48   CD 7E 0B               CALL   init   
0E4B   CD F4 43               CALL   execStr   
0E4E   32 00                  .CSTR   "2"   
0E50                          ;*Macro unroll:  expect "2",2
0E50   E1                     POP   HL   
0E51   E5                     PUSH   HL   
0E52   11 02 00               LD   DE,2   
0E55   B7                     OR   A   
0E56   ED 52                  SBC   HL,DE   
0E58   7D                     LD   A,L   
0E59   B4                     OR   H   
0E5A   CA AF 0E               JP   Z,expectM_0_2711S50   
0E5D   CD 77 0B               CALL   printStr   
0E60   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0E68   CD 77 0B               CALL   printStr   
0E6B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E7A   21 02 00               LD   hl,2   
0E7D   E5                     PUSH   hl   
0E7E   CD 3C 0C               CALL   run   
0E81   2E 00                  .CSTR   "."   
0E83   CD 77 0B               CALL   printStr   
0E86   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E93   E1                     POP   hl   
0E94   E5                     PUSH   hl   
0E95   E5                     PUSH   hl   
0E96   CD 3C 0C               CALL   run   
0E99   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0EAD   76                     HALT      
0EAE   00                     .CSTR      
0EAF                EXPECTM_0_2711S50:      
0EAF   E1                     POP   HL   
0EB0                          ;*Macro unroll:  test "1", 1
0EB0   31 80 44               LD   SP,STACK   
0EB3   CD 7E 0B               CALL   init   
0EB6   CD F4 43               CALL   execStr   
0EB9   31 00                  .CSTR   "1"   
0EBB                          ;*Macro unroll:  expect "1",1
0EBB   E1                     POP   HL   
0EBC   E5                     PUSH   HL   
0EBD   11 01 00               LD   DE,1   
0EC0   B7                     OR   A   
0EC1   ED 52                  SBC   HL,DE   
0EC3   7D                     LD   A,L   
0EC4   B4                     OR   H   
0EC5   CA 1A 0F               JP   Z,expectM_0_2712S50   
0EC8   CD 77 0B               CALL   printStr   
0ECB   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0ED3   CD 77 0B               CALL   printStr   
0ED6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EE5   21 01 00               LD   hl,1   
0EE8   E5                     PUSH   hl   
0EE9   CD 3C 0C               CALL   run   
0EEC   2E 00                  .CSTR   "."   
0EEE   CD 77 0B               CALL   printStr   
0EF1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EFE   E1                     POP   hl   
0EFF   E5                     PUSH   hl   
0F00   E5                     PUSH   hl   
0F01   CD 3C 0C               CALL   run   
0F04   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0F18   76                     HALT      
0F19   00                     .CSTR      
0F1A                EXPECTM_0_2712S50:      
0F1A   E1                     POP   HL   
0F1B                          ;*Macro unroll:  test "0", 0
0F1B   31 80 44               LD   SP,STACK   
0F1E   CD 7E 0B               CALL   init   
0F21   CD F4 43               CALL   execStr   
0F24   30 00                  .CSTR   "0"   
0F26                          ;*Macro unroll:  expect "0",0
0F26   E1                     POP   HL   
0F27   E5                     PUSH   HL   
0F28   11 00 00               LD   DE,0   
0F2B   B7                     OR   A   
0F2C   ED 52                  SBC   HL,DE   
0F2E   7D                     LD   A,L   
0F2F   B4                     OR   H   
0F30   CA 85 0F               JP   Z,expectM_0_2713S50   
0F33   CD 77 0B               CALL   printStr   
0F36   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0F3E   CD 77 0B               CALL   printStr   
0F41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F50   21 00 00               LD   hl,0   
0F53   E5                     PUSH   hl   
0F54   CD 3C 0C               CALL   run   
0F57   2E 00                  .CSTR   "."   
0F59   CD 77 0B               CALL   printStr   
0F5C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F69   E1                     POP   hl   
0F6A   E5                     PUSH   hl   
0F6B   E5                     PUSH   hl   
0F6C   CD 3C 0C               CALL   run   
0F6F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0F83   76                     HALT      
0F84   00                     .CSTR      
0F85                EXPECTM_0_2713S50:      
0F85   E1                     POP   HL   
0F86                          ;*Macro unroll:  test "10", 10
0F86   31 80 44               LD   SP,STACK   
0F89   CD 7E 0B               CALL   init   
0F8C   CD F4 43               CALL   execStr   
0F8F   31 30 00               .CSTR   "10"   
0F92                          ;*Macro unroll:  expect "10",10
0F92   E1                     POP   HL   
0F93   E5                     PUSH   HL   
0F94   11 0A 00               LD   DE,10   
0F97   B7                     OR   A   
0F98   ED 52                  SBC   HL,DE   
0F9A   7D                     LD   A,L   
0F9B   B4                     OR   H   
0F9C   CA F2 0F               JP   Z,expectM_0_2714S50   
0F9F   CD 77 0B               CALL   printStr   
0FA2   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0FAB   CD 77 0B               CALL   printStr   
0FAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FBD   21 0A 00               LD   hl,10   
0FC0   E5                     PUSH   hl   
0FC1   CD 3C 0C               CALL   run   
0FC4   2E 00                  .CSTR   "."   
0FC6   CD 77 0B               CALL   printStr   
0FC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FD6   E1                     POP   hl   
0FD7   E5                     PUSH   hl   
0FD8   E5                     PUSH   hl   
0FD9   CD 3C 0C               CALL   run   
0FDC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0FF0   76                     HALT      
0FF1   00                     .CSTR      
0FF2                EXPECTM_0_2714S50:      
0FF2   E1                     POP   HL   
0FF3                          ;*Macro unroll:  test "123", 123
0FF3   31 80 44               LD   SP,STACK   
0FF6   CD 7E 0B               CALL   init   
0FF9   CD F4 43               CALL   execStr   
0FFC   31 32 33 00            .CSTR   "123"   
1000                          ;*Macro unroll:  expect "123",123
1000   E1                     POP   HL   
1001   E5                     PUSH   HL   
1002   11 7B 00               LD   DE,123   
1005   B7                     OR   A   
1006   ED 52                  SBC   HL,DE   
1008   7D                     LD   A,L   
1009   B4                     OR   H   
100A   CA 61 10               JP   Z,expectM_0_2715S50   
100D   CD 77 0B               CALL   printStr   
1010   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
101A   CD 77 0B               CALL   printStr   
101D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
102C   21 7B 00               LD   hl,123   
102F   E5                     PUSH   hl   
1030   CD 3C 0C               CALL   run   
1033   2E 00                  .CSTR   "."   
1035   CD 77 0B               CALL   printStr   
1038   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1045   E1                     POP   hl   
1046   E5                     PUSH   hl   
1047   E5                     PUSH   hl   
1048   CD 3C 0C               CALL   run   
104B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
105F   76                     HALT      
1060   00                     .CSTR      
1061                EXPECTM_0_2715S50:      
1061   E1                     POP   HL   
1062                          ;*Macro unroll:  test "-1",-1
1062   31 80 44               LD   SP,STACK   
1065   CD 7E 0B               CALL   init   
1068   CD F4 43               CALL   execStr   
106B   2D 31 00               .CSTR   "-1"   
106E                          ;*Macro unroll:  expect "-1",-1
106E   E1                     POP   HL   
106F   E5                     PUSH   HL   
1070   11 FF FF               LD   DE,-1   
1073   B7                     OR   A   
1074   ED 52                  SBC   HL,DE   
1076   7D                     LD   A,L   
1077   B4                     OR   H   
1078   CA CE 10               JP   Z,expectM_0_2716S50   
107B   CD 77 0B               CALL   printStr   
107E   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1087   CD 77 0B               CALL   printStr   
108A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1099   21 FF FF               LD   hl,-1   
109C   E5                     PUSH   hl   
109D   CD 3C 0C               CALL   run   
10A0   2E 00                  .CSTR   "."   
10A2   CD 77 0B               CALL   printStr   
10A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10B2   E1                     POP   hl   
10B3   E5                     PUSH   hl   
10B4   E5                     PUSH   hl   
10B5   CD 3C 0C               CALL   run   
10B8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
10CC   76                     HALT      
10CD   00                     .CSTR      
10CE                EXPECTM_0_2716S50:      
10CE   E1                     POP   HL   
10CF                          ;*Macro unroll:  test "''", 0
10CF   31 80 44               LD   SP,STACK   
10D2   CD 7E 0B               CALL   init   
10D5   CD F4 43               CALL   execStr   
10D8   27 27 00               .CSTR   "''"   
10DB                          ;*Macro unroll:  expect "''",0
10DB   E1                     POP   HL   
10DC   E5                     PUSH   HL   
10DD   11 00 00               LD   DE,0   
10E0   B7                     OR   A   
10E1   ED 52                  SBC   HL,DE   
10E3   7D                     LD   A,L   
10E4   B4                     OR   H   
10E5   CA 3B 11               JP   Z,expectM_0_2717S50   
10E8   CD 77 0B               CALL   printStr   
10EB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
10F4   CD 77 0B               CALL   printStr   
10F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1106   21 00 00               LD   hl,0   
1109   E5                     PUSH   hl   
110A   CD 3C 0C               CALL   run   
110D   2E 00                  .CSTR   "."   
110F   CD 77 0B               CALL   printStr   
1112   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
111F   E1                     POP   hl   
1120   E5                     PUSH   hl   
1121   E5                     PUSH   hl   
1122   CD 3C 0C               CALL   run   
1125   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1139   76                     HALT      
113A   00                     .CSTR      
113B                EXPECTM_0_2717S50:      
113B   E1                     POP   HL   
113C                          ;*Macro unroll:  test "'a'", $61
113C   31 80 44               LD   SP,STACK   
113F   CD 7E 0B               CALL   init   
1142   CD F4 43               CALL   execStr   
1145   27 61 27 00            .CSTR   "'a'"   
1149                          ;*Macro unroll:  expect "'a'",$61
1149   E1                     POP   HL   
114A   E5                     PUSH   HL   
114B   11 61 00               LD   DE,$61   
114E   B7                     OR   A   
114F   ED 52                  SBC   HL,DE   
1151   7D                     LD   A,L   
1152   B4                     OR   H   
1153   CA AA 11               JP   Z,expectM_0_2718S50   
1156   CD 77 0B               CALL   printStr   
1159   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1163   CD 77 0B               CALL   printStr   
1166   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1175   21 61 00               LD   hl,$61   
1178   E5                     PUSH   hl   
1179   CD 3C 0C               CALL   run   
117C   2E 00                  .CSTR   "."   
117E   CD 77 0B               CALL   printStr   
1181   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
118E   E1                     POP   hl   
118F   E5                     PUSH   hl   
1190   E5                     PUSH   hl   
1191   CD 3C 0C               CALL   run   
1194   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
11A8   76                     HALT      
11A9   00                     .CSTR      
11AA                EXPECTM_0_2718S50:      
11AA   E1                     POP   HL   
11AB                          ;*Macro unroll:  test "'\\''", $27
11AB   31 80 44               LD   SP,STACK   
11AE   CD 7E 0B               CALL   init   
11B1   CD F4 43               CALL   execStr   
11B4   27 5C 27 27 00         .CSTR   "'\\''"   
11B9                          ;*Macro unroll:  expect "'\\''",$27
11B9   E1                     POP   HL   
11BA   E5                     PUSH   HL   
11BB   11 27 00               LD   DE,$27   
11BE   B7                     OR   A   
11BF   ED 52                  SBC   HL,DE   
11C1   7D                     LD   A,L   
11C2   B4                     OR   H   
11C3   CA 1B 12               JP   Z,expectM_0_2719S50   
11C6   CD 77 0B               CALL   printStr   
11C9   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
11D4   CD 77 0B               CALL   printStr   
11D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11E6   21 27 00               LD   hl,$27   
11E9   E5                     PUSH   hl   
11EA   CD 3C 0C               CALL   run   
11ED   2E 00                  .CSTR   "."   
11EF   CD 77 0B               CALL   printStr   
11F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11FF   E1                     POP   hl   
1200   E5                     PUSH   hl   
1201   E5                     PUSH   hl   
1202   CD 3C 0C               CALL   run   
1205   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1219   76                     HALT      
121A   00                     .CSTR      
121B                EXPECTM_0_2719S50:      
121B   E1                     POP   HL   
121C                          ;*Macro unroll:  test "#10", $10
121C   31 80 44               LD   SP,STACK   
121F   CD 7E 0B               CALL   init   
1222   CD F4 43               CALL   execStr   
1225   23 31 30 00            .CSTR   "#10"   
1229                          ;*Macro unroll:  expect "#10",$10
1229   E1                     POP   HL   
122A   E5                     PUSH   HL   
122B   11 10 00               LD   DE,$10   
122E   B7                     OR   A   
122F   ED 52                  SBC   HL,DE   
1231   7D                     LD   A,L   
1232   B4                     OR   H   
1233   CA 8A 12               JP   Z,expectM_0_2720S50   
1236   CD 77 0B               CALL   printStr   
1239   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
1243   CD 77 0B               CALL   printStr   
1246   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1255   21 10 00               LD   hl,$10   
1258   E5                     PUSH   hl   
1259   CD 3C 0C               CALL   run   
125C   2E 00                  .CSTR   "."   
125E   CD 77 0B               CALL   printStr   
1261   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
126E   E1                     POP   hl   
126F   E5                     PUSH   hl   
1270   E5                     PUSH   hl   
1271   CD 3C 0C               CALL   run   
1274   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1288   76                     HALT      
1289   00                     .CSTR      
128A                EXPECTM_0_2720S50:      
128A   E1                     POP   HL   
128B                          ;*Macro unroll:  test "#FF", $FF
128B   31 80 44               LD   SP,STACK   
128E   CD 7E 0B               CALL   init   
1291   CD F4 43               CALL   execStr   
1294   23 46 46 00            .CSTR   "#FF"   
1298                          ;*Macro unroll:  expect "#FF",$FF
1298   E1                     POP   HL   
1299   E5                     PUSH   HL   
129A   11 FF 00               LD   DE,$FF   
129D   B7                     OR   A   
129E   ED 52                  SBC   HL,DE   
12A0   7D                     LD   A,L   
12A1   B4                     OR   H   
12A2   CA F9 12               JP   Z,expectM_0_2721S50   
12A5   CD 77 0B               CALL   printStr   
12A8   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
12B2   CD 77 0B               CALL   printStr   
12B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12C4   21 FF 00               LD   hl,$FF   
12C7   E5                     PUSH   hl   
12C8   CD 3C 0C               CALL   run   
12CB   2E 00                  .CSTR   "."   
12CD   CD 77 0B               CALL   printStr   
12D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12DD   E1                     POP   hl   
12DE   E5                     PUSH   hl   
12DF   E5                     PUSH   hl   
12E0   CD 3C 0C               CALL   run   
12E3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
12F7   76                     HALT      
12F8   00                     .CSTR      
12F9                EXPECTM_0_2721S50:      
12F9   E1                     POP   HL   
12FA                          ;*Macro unroll:  test "-1 2 +",1
12FA   31 80 44               LD   SP,STACK   
12FD   CD 7E 0B               CALL   init   
1300   CD F4 43               CALL   execStr   
1303   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
130A                          ;*Macro unroll:  expect "-1 2 +",1
130A   E1                     POP   HL   
130B   E5                     PUSH   HL   
130C   11 01 00               LD   DE,1   
130F   B7                     OR   A   
1310   ED 52                  SBC   HL,DE   
1312   7D                     LD   A,L   
1313   B4                     OR   H   
1314   CA 6E 13               JP   Z,expectM_0_2722S50   
1317   CD 77 0B               CALL   printStr   
131A   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1327   CD 77 0B               CALL   printStr   
132A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1339   21 01 00               LD   hl,1   
133C   E5                     PUSH   hl   
133D   CD 3C 0C               CALL   run   
1340   2E 00                  .CSTR   "."   
1342   CD 77 0B               CALL   printStr   
1345   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1352   E1                     POP   hl   
1353   E5                     PUSH   hl   
1354   E5                     PUSH   hl   
1355   CD 3C 0C               CALL   run   
1358   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
136C   76                     HALT      
136D   00                     .CSTR      
136E                EXPECTM_0_2722S50:      
136E   E1                     POP   HL   
136F                          ;*Macro unroll:  test "-1 1 +",0
136F   31 80 44               LD   SP,STACK   
1372   CD 7E 0B               CALL   init   
1375   CD F4 43               CALL   execStr   
1378   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
137F                          ;*Macro unroll:  expect "-1 1 +",0
137F   E1                     POP   HL   
1380   E5                     PUSH   HL   
1381   11 00 00               LD   DE,0   
1384   B7                     OR   A   
1385   ED 52                  SBC   HL,DE   
1387   7D                     LD   A,L   
1388   B4                     OR   H   
1389   CA E3 13               JP   Z,expectM_0_2723S50   
138C   CD 77 0B               CALL   printStr   
138F   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
139C   CD 77 0B               CALL   printStr   
139F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13AE   21 00 00               LD   hl,0   
13B1   E5                     PUSH   hl   
13B2   CD 3C 0C               CALL   run   
13B5   2E 00                  .CSTR   "."   
13B7   CD 77 0B               CALL   printStr   
13BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13C7   E1                     POP   hl   
13C8   E5                     PUSH   hl   
13C9   E5                     PUSH   hl   
13CA   CD 3C 0C               CALL   run   
13CD   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
13E1   76                     HALT      
13E2   00                     .CSTR      
13E3                EXPECTM_0_2723S50:      
13E3   E1                     POP   HL   
13E4                          ;*Macro unroll:  test "1 2 +", 3
13E4   31 80 44               LD   SP,STACK   
13E7   CD 7E 0B               CALL   init   
13EA   CD F4 43               CALL   execStr   
13ED   31 20 32 20 2B 00      .CSTR   "1 2 +"   
13F3                          ;*Macro unroll:  expect "1 2 +",3
13F3   E1                     POP   HL   
13F4   E5                     PUSH   HL   
13F5   11 03 00               LD   DE,3   
13F8   B7                     OR   A   
13F9   ED 52                  SBC   HL,DE   
13FB   7D                     LD   A,L   
13FC   B4                     OR   H   
13FD   CA 56 14               JP   Z,expectM_0_2724S50   
1400   CD 77 0B               CALL   printStr   
1403   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
140F   CD 77 0B               CALL   printStr   
1412   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1421   21 03 00               LD   hl,3   
1424   E5                     PUSH   hl   
1425   CD 3C 0C               CALL   run   
1428   2E 00                  .CSTR   "."   
142A   CD 77 0B               CALL   printStr   
142D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
143A   E1                     POP   hl   
143B   E5                     PUSH   hl   
143C   E5                     PUSH   hl   
143D   CD 3C 0C               CALL   run   
1440   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1454   76                     HALT      
1455   00                     .CSTR      
1456                EXPECTM_0_2724S50:      
1456   E1                     POP   HL   
1457                          ;*Macro unroll:  test "4 1 2 +", 3
1457   31 80 44               LD   SP,STACK   
145A   CD 7E 0B               CALL   init   
145D   CD F4 43               CALL   execStr   
1460   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1468                          ;*Macro unroll:  expect "4 1 2 +",3
1468   E1                     POP   HL   
1469   E5                     PUSH   HL   
146A   11 03 00               LD   DE,3   
146D   B7                     OR   A   
146E   ED 52                  SBC   HL,DE   
1470   7D                     LD   A,L   
1471   B4                     OR   H   
1472   CA CD 14               JP   Z,expectM_0_2725S50   
1475   CD 77 0B               CALL   printStr   
1478   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1486   CD 77 0B               CALL   printStr   
1489   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1498   21 03 00               LD   hl,3   
149B   E5                     PUSH   hl   
149C   CD 3C 0C               CALL   run   
149F   2E 00                  .CSTR   "."   
14A1   CD 77 0B               CALL   printStr   
14A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14B1   E1                     POP   hl   
14B2   E5                     PUSH   hl   
14B3   E5                     PUSH   hl   
14B4   CD 3C 0C               CALL   run   
14B7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
14CB   76                     HALT      
14CC   00                     .CSTR      
14CD                EXPECTM_0_2725S50:      
14CD   E1                     POP   HL   
14CE                          ;*Macro unroll:  test "123 456 +", 123+456
14CE   31 80 44               LD   SP,STACK   
14D1   CD 7E 0B               CALL   init   
14D4   CD F4 43               CALL   execStr   
14D7   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
14E1                          ;*Macro unroll:  expect "123 456 +",123+456
14E1   E1                     POP   HL   
14E2   E5                     PUSH   HL   
14E3   11 43 02               LD   DE,123+456   
14E6   B7                     OR   A   
14E7   ED 52                  SBC   HL,DE   
14E9   7D                     LD   A,L   
14EA   B4                     OR   H   
14EB   CA 48 15               JP   Z,expectM_0_2726S50   
14EE   CD 77 0B               CALL   printStr   
14F1   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1501   CD 77 0B               CALL   printStr   
1504   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1513   21 43 02               LD   hl,123+456   
1516   E5                     PUSH   hl   
1517   CD 3C 0C               CALL   run   
151A   2E 00                  .CSTR   "."   
151C   CD 77 0B               CALL   printStr   
151F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
152C   E1                     POP   hl   
152D   E5                     PUSH   hl   
152E   E5                     PUSH   hl   
152F   CD 3C 0C               CALL   run   
1532   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1546   76                     HALT      
1547   00                     .CSTR      
1548                EXPECTM_0_2726S50:      
1548   E1                     POP   HL   
1549                          ;*Macro unroll:  test "64 128 +", 64+128
1549   31 80 44               LD   SP,STACK   
154C   CD 7E 0B               CALL   init   
154F   CD F4 43               CALL   execStr   
1552   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
155B                          ;*Macro unroll:  expect "64 128 +",64+128
155B   E1                     POP   HL   
155C   E5                     PUSH   HL   
155D   11 C0 00               LD   DE,64+128   
1560   B7                     OR   A   
1561   ED 52                  SBC   HL,DE   
1563   7D                     LD   A,L   
1564   B4                     OR   H   
1565   CA C1 15               JP   Z,expectM_0_2727S50   
1568   CD 77 0B               CALL   printStr   
156B   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
157A   CD 77 0B               CALL   printStr   
157D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
158C   21 C0 00               LD   hl,64+128   
158F   E5                     PUSH   hl   
1590   CD 3C 0C               CALL   run   
1593   2E 00                  .CSTR   "."   
1595   CD 77 0B               CALL   printStr   
1598   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15A5   E1                     POP   hl   
15A6   E5                     PUSH   hl   
15A7   E5                     PUSH   hl   
15A8   CD 3C 0C               CALL   run   
15AB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
15BF   76                     HALT      
15C0   00                     .CSTR      
15C1                EXPECTM_0_2727S50:      
15C1   E1                     POP   HL   
15C2                          ;*Macro unroll:  test "1 2 +", 3
15C2   31 80 44               LD   SP,STACK   
15C5   CD 7E 0B               CALL   init   
15C8   CD F4 43               CALL   execStr   
15CB   31 20 32 20 2B 00      .CSTR   "1 2 +"   
15D1                          ;*Macro unroll:  expect "1 2 +",3
15D1   E1                     POP   HL   
15D2   E5                     PUSH   HL   
15D3   11 03 00               LD   DE,3   
15D6   B7                     OR   A   
15D7   ED 52                  SBC   HL,DE   
15D9   7D                     LD   A,L   
15DA   B4                     OR   H   
15DB   CA 34 16               JP   Z,expectM_0_2728S50   
15DE   CD 77 0B               CALL   printStr   
15E1   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
15ED   CD 77 0B               CALL   printStr   
15F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15FF   21 03 00               LD   hl,3   
1602   E5                     PUSH   hl   
1603   CD 3C 0C               CALL   run   
1606   2E 00                  .CSTR   "."   
1608   CD 77 0B               CALL   printStr   
160B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1618   E1                     POP   hl   
1619   E5                     PUSH   hl   
161A   E5                     PUSH   hl   
161B   CD 3C 0C               CALL   run   
161E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1632   76                     HALT      
1633   00                     .CSTR      
1634                EXPECTM_0_2728S50:      
1634   E1                     POP   HL   
1635                          ;*Macro unroll:  test "1a= a++ a",2
1635   31 80 44               LD   SP,STACK   
1638   CD 7E 0B               CALL   init   
163B   CD F4 43               CALL   execStr   
163E   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
1648                          ;*Macro unroll:  expect "1a= a++ a",2
1648   E1                     POP   HL   
1649   E5                     PUSH   HL   
164A   11 02 00               LD   DE,2   
164D   B7                     OR   A   
164E   ED 52                  SBC   HL,DE   
1650   7D                     LD   A,L   
1651   B4                     OR   H   
1652   CA AF 16               JP   Z,expectM_0_2729S50   
1655   CD 77 0B               CALL   printStr   
1658   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1668   CD 77 0B               CALL   printStr   
166B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
167A   21 02 00               LD   hl,2   
167D   E5                     PUSH   hl   
167E   CD 3C 0C               CALL   run   
1681   2E 00                  .CSTR   "."   
1683   CD 77 0B               CALL   printStr   
1686   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1693   E1                     POP   hl   
1694   E5                     PUSH   hl   
1695   E5                     PUSH   hl   
1696   CD 3C 0C               CALL   run   
1699   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
16AD   76                     HALT      
16AE   00                     .CSTR      
16AF                EXPECTM_0_2729S50:      
16AF   E1                     POP   HL   
16B0                          ;*Macro unroll:  test "-1 -1 -",0
16B0   31 80 44               LD   SP,STACK   
16B3   CD 7E 0B               CALL   init   
16B6   CD F4 43               CALL   execStr   
16B9   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
16C1                          ;*Macro unroll:  expect "-1 -1 -",0
16C1   E1                     POP   HL   
16C2   E5                     PUSH   HL   
16C3   11 00 00               LD   DE,0   
16C6   B7                     OR   A   
16C7   ED 52                  SBC   HL,DE   
16C9   7D                     LD   A,L   
16CA   B4                     OR   H   
16CB   CA 26 17               JP   Z,expectM_0_2730S50   
16CE   CD 77 0B               CALL   printStr   
16D1   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
16DF   CD 77 0B               CALL   printStr   
16E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16F1   21 00 00               LD   hl,0   
16F4   E5                     PUSH   hl   
16F5   CD 3C 0C               CALL   run   
16F8   2E 00                  .CSTR   "."   
16FA   CD 77 0B               CALL   printStr   
16FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
170A   E1                     POP   hl   
170B   E5                     PUSH   hl   
170C   E5                     PUSH   hl   
170D   CD 3C 0C               CALL   run   
1710   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1724   76                     HALT      
1725   00                     .CSTR      
1726                EXPECTM_0_2730S50:      
1726   E1                     POP   HL   
1727                          ;*Macro unroll:  test "5 3 -", 2
1727   31 80 44               LD   SP,STACK   
172A   CD 7E 0B               CALL   init   
172D   CD F4 43               CALL   execStr   
1730   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1736                          ;*Macro unroll:  expect "5 3 -",2
1736   E1                     POP   HL   
1737   E5                     PUSH   HL   
1738   11 02 00               LD   DE,2   
173B   B7                     OR   A   
173C   ED 52                  SBC   HL,DE   
173E   7D                     LD   A,L   
173F   B4                     OR   H   
1740   CA 99 17               JP   Z,expectM_0_2731S50   
1743   CD 77 0B               CALL   printStr   
1746   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1752   CD 77 0B               CALL   printStr   
1755   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1764   21 02 00               LD   hl,2   
1767   E5                     PUSH   hl   
1768   CD 3C 0C               CALL   run   
176B   2E 00                  .CSTR   "."   
176D   CD 77 0B               CALL   printStr   
1770   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
177D   E1                     POP   hl   
177E   E5                     PUSH   hl   
177F   E5                     PUSH   hl   
1780   CD 3C 0C               CALL   run   
1783   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1797   76                     HALT      
1798   00                     .CSTR      
1799                EXPECTM_0_2731S50:      
1799   E1                     POP   HL   
179A                          ;*Macro unroll:  test "2 1 -",1
179A   31 80 44               LD   SP,STACK   
179D   CD 7E 0B               CALL   init   
17A0   CD F4 43               CALL   execStr   
17A3   32 20 31 20 2D 00      .CSTR   "2 1 -"   
17A9                          ;*Macro unroll:  expect "2 1 -",1
17A9   E1                     POP   HL   
17AA   E5                     PUSH   HL   
17AB   11 01 00               LD   DE,1   
17AE   B7                     OR   A   
17AF   ED 52                  SBC   HL,DE   
17B1   7D                     LD   A,L   
17B2   B4                     OR   H   
17B3   CA 0C 18               JP   Z,expectM_0_2732S50   
17B6   CD 77 0B               CALL   printStr   
17B9   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
17C5   CD 77 0B               CALL   printStr   
17C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D7   21 01 00               LD   hl,1   
17DA   E5                     PUSH   hl   
17DB   CD 3C 0C               CALL   run   
17DE   2E 00                  .CSTR   "."   
17E0   CD 77 0B               CALL   printStr   
17E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F0   E1                     POP   hl   
17F1   E5                     PUSH   hl   
17F2   E5                     PUSH   hl   
17F3   CD 3C 0C               CALL   run   
17F6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
180A   76                     HALT      
180B   00                     .CSTR      
180C                EXPECTM_0_2732S50:      
180C   E1                     POP   HL   
180D                          ;*Macro unroll:  test "3a= a-- a",2
180D   31 80 44               LD   SP,STACK   
1810   CD 7E 0B               CALL   init   
1813   CD F4 43               CALL   execStr   
1816   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
1820                          ;*Macro unroll:  expect "3a= a-- a",2
1820   E1                     POP   HL   
1821   E5                     PUSH   HL   
1822   11 02 00               LD   DE,2   
1825   B7                     OR   A   
1826   ED 52                  SBC   HL,DE   
1828   7D                     LD   A,L   
1829   B4                     OR   H   
182A   CA 87 18               JP   Z,expectM_0_2733S50   
182D   CD 77 0B               CALL   printStr   
1830   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1840   CD 77 0B               CALL   printStr   
1843   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1852   21 02 00               LD   hl,2   
1855   E5                     PUSH   hl   
1856   CD 3C 0C               CALL   run   
1859   2E 00                  .CSTR   "."   
185B   CD 77 0B               CALL   printStr   
185E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
186B   E1                     POP   hl   
186C   E5                     PUSH   hl   
186D   E5                     PUSH   hl   
186E   CD 3C 0C               CALL   run   
1871   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1885   76                     HALT      
1886   00                     .CSTR      
1887                EXPECTM_0_2733S50:      
1887   E1                     POP   HL   
1888                          ;*Macro unroll:  test "3 5 &", 1
1888   31 80 44               LD   SP,STACK   
188B   CD 7E 0B               CALL   init   
188E   CD F4 43               CALL   execStr   
1891   33 20 35 20 26 00      .CSTR   "3 5 &"   
1897                          ;*Macro unroll:  expect "3 5 &",1
1897   E1                     POP   HL   
1898   E5                     PUSH   HL   
1899   11 01 00               LD   DE,1   
189C   B7                     OR   A   
189D   ED 52                  SBC   HL,DE   
189F   7D                     LD   A,L   
18A0   B4                     OR   H   
18A1   CA FA 18               JP   Z,expectM_0_2734S50   
18A4   CD 77 0B               CALL   printStr   
18A7   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
18B3   CD 77 0B               CALL   printStr   
18B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18C5   21 01 00               LD   hl,1   
18C8   E5                     PUSH   hl   
18C9   CD 3C 0C               CALL   run   
18CC   2E 00                  .CSTR   "."   
18CE   CD 77 0B               CALL   printStr   
18D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18DE   E1                     POP   hl   
18DF   E5                     PUSH   hl   
18E0   E5                     PUSH   hl   
18E1   CD 3C 0C               CALL   run   
18E4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
18F8   76                     HALT      
18F9   00                     .CSTR      
18FA                EXPECTM_0_2734S50:      
18FA   E1                     POP   HL   
18FB                          ;*Macro unroll:  test "3 5 |", 7
18FB   31 80 44               LD   SP,STACK   
18FE   CD 7E 0B               CALL   init   
1901   CD F4 43               CALL   execStr   
1904   33 20 35 20 7C 00      .CSTR   "3 5 |"   
190A                          ;*Macro unroll:  expect "3 5 |",7
190A   E1                     POP   HL   
190B   E5                     PUSH   HL   
190C   11 07 00               LD   DE,7   
190F   B7                     OR   A   
1910   ED 52                  SBC   HL,DE   
1912   7D                     LD   A,L   
1913   B4                     OR   H   
1914   CA 6D 19               JP   Z,expectM_0_2735S50   
1917   CD 77 0B               CALL   printStr   
191A   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1926   CD 77 0B               CALL   printStr   
1929   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1938   21 07 00               LD   hl,7   
193B   E5                     PUSH   hl   
193C   CD 3C 0C               CALL   run   
193F   2E 00                  .CSTR   "."   
1941   CD 77 0B               CALL   printStr   
1944   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1951   E1                     POP   hl   
1952   E5                     PUSH   hl   
1953   E5                     PUSH   hl   
1954   CD 3C 0C               CALL   run   
1957   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
196B   76                     HALT      
196C   00                     .CSTR      
196D                EXPECTM_0_2735S50:      
196D   E1                     POP   HL   
196E                          ;*Macro unroll:  test "3 5 /x", 6
196E   31 80 44               LD   SP,STACK   
1971   CD 7E 0B               CALL   init   
1974   CD F4 43               CALL   execStr   
1977   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
197E                          ;*Macro unroll:  expect "3 5 /x",6
197E   E1                     POP   HL   
197F   E5                     PUSH   HL   
1980   11 06 00               LD   DE,6   
1983   B7                     OR   A   
1984   ED 52                  SBC   HL,DE   
1986   7D                     LD   A,L   
1987   B4                     OR   H   
1988   CA E2 19               JP   Z,expectM_0_2736S50   
198B   CD 77 0B               CALL   printStr   
198E   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
199B   CD 77 0B               CALL   printStr   
199E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19AD   21 06 00               LD   hl,6   
19B0   E5                     PUSH   hl   
19B1   CD 3C 0C               CALL   run   
19B4   2E 00                  .CSTR   "."   
19B6   CD 77 0B               CALL   printStr   
19B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19C6   E1                     POP   hl   
19C7   E5                     PUSH   hl   
19C8   E5                     PUSH   hl   
19C9   CD 3C 0C               CALL   run   
19CC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
19E0   76                     HALT      
19E1   00                     .CSTR      
19E2                EXPECTM_0_2736S50:      
19E2   E1                     POP   HL   
19E3                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
19E3   31 80 44               LD   SP,STACK   
19E6   CD 7E 0B               CALL   init   
19E9   CD F4 43               CALL   execStr   
19EC   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
19FB                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
19FB   E1                     POP   HL   
19FC   E5                     PUSH   HL   
19FD   11 06 00               LD   DE,6   
1A00   B7                     OR   A   
1A01   ED 52                  SBC   HL,DE   
1A03   7D                     LD   A,L   
1A04   B4                     OR   H   
1A05   CA 67 1A               JP   Z,expectM_0_2737S50   
1A08   CD 77 0B               CALL   printStr   
1A0B   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1A20   CD 77 0B               CALL   printStr   
1A23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A32   21 06 00               LD   hl,6   
1A35   E5                     PUSH   hl   
1A36   CD 3C 0C               CALL   run   
1A39   2E 00                  .CSTR   "."   
1A3B   CD 77 0B               CALL   printStr   
1A3E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A4B   E1                     POP   hl   
1A4C   E5                     PUSH   hl   
1A4D   E5                     PUSH   hl   
1A4E   CD 3C 0C               CALL   run   
1A51   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1A65   76                     HALT      
1A66   00                     .CSTR      
1A67                EXPECTM_0_2737S50:      
1A67   E1                     POP   HL   
1A68                          ;*Macro unroll:  test "2 3 *", 6
1A68   31 80 44               LD   SP,STACK   
1A6B   CD 7E 0B               CALL   init   
1A6E   CD F4 43               CALL   execStr   
1A71   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1A77                          ;*Macro unroll:  expect "2 3 *",6
1A77   E1                     POP   HL   
1A78   E5                     PUSH   HL   
1A79   11 06 00               LD   DE,6   
1A7C   B7                     OR   A   
1A7D   ED 52                  SBC   HL,DE   
1A7F   7D                     LD   A,L   
1A80   B4                     OR   H   
1A81   CA DA 1A               JP   Z,expectM_0_2738S50   
1A84   CD 77 0B               CALL   printStr   
1A87   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1A93   CD 77 0B               CALL   printStr   
1A96   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AA5   21 06 00               LD   hl,6   
1AA8   E5                     PUSH   hl   
1AA9   CD 3C 0C               CALL   run   
1AAC   2E 00                  .CSTR   "."   
1AAE   CD 77 0B               CALL   printStr   
1AB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ABE   E1                     POP   hl   
1ABF   E5                     PUSH   hl   
1AC0   E5                     PUSH   hl   
1AC1   CD 3C 0C               CALL   run   
1AC4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1AD8   76                     HALT      
1AD9   00                     .CSTR      
1ADA                EXPECTM_0_2738S50:      
1ADA   E1                     POP   HL   
1ADB                          ;*Macro unroll:  test "1 2 3 + *", 5
1ADB   31 80 44               LD   SP,STACK   
1ADE   CD 7E 0B               CALL   init   
1AE1   CD F4 43               CALL   execStr   
1AE4   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1AEE                          ;*Macro unroll:  expect "1 2 3 + *",5
1AEE   E1                     POP   HL   
1AEF   E5                     PUSH   HL   
1AF0   11 05 00               LD   DE,5   
1AF3   B7                     OR   A   
1AF4   ED 52                  SBC   HL,DE   
1AF6   7D                     LD   A,L   
1AF7   B4                     OR   H   
1AF8   CA 55 1B               JP   Z,expectM_0_2739S50   
1AFB   CD 77 0B               CALL   printStr   
1AFE   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1B0E   CD 77 0B               CALL   printStr   
1B11   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B20   21 05 00               LD   hl,5   
1B23   E5                     PUSH   hl   
1B24   CD 3C 0C               CALL   run   
1B27   2E 00                  .CSTR   "."   
1B29   CD 77 0B               CALL   printStr   
1B2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B39   E1                     POP   hl   
1B3A   E5                     PUSH   hl   
1B3B   E5                     PUSH   hl   
1B3C   CD 3C 0C               CALL   run   
1B3F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1B53   76                     HALT      
1B54   00                     .CSTR      
1B55                EXPECTM_0_2739S50:      
1B55   E1                     POP   HL   
1B56                          ;*Macro unroll:  test "7 3 /", 2
1B56   31 80 44               LD   SP,STACK   
1B59   CD 7E 0B               CALL   init   
1B5C   CD F4 43               CALL   execStr   
1B5F   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1B65                          ;*Macro unroll:  expect "7 3 /",2
1B65   E1                     POP   HL   
1B66   E5                     PUSH   HL   
1B67   11 02 00               LD   DE,2   
1B6A   B7                     OR   A   
1B6B   ED 52                  SBC   HL,DE   
1B6D   7D                     LD   A,L   
1B6E   B4                     OR   H   
1B6F   CA C8 1B               JP   Z,expectM_0_2740S50   
1B72   CD 77 0B               CALL   printStr   
1B75   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1B81   CD 77 0B               CALL   printStr   
1B84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B93   21 02 00               LD   hl,2   
1B96   E5                     PUSH   hl   
1B97   CD 3C 0C               CALL   run   
1B9A   2E 00                  .CSTR   "."   
1B9C   CD 77 0B               CALL   printStr   
1B9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BAC   E1                     POP   hl   
1BAD   E5                     PUSH   hl   
1BAE   E5                     PUSH   hl   
1BAF   CD 3C 0C               CALL   run   
1BB2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1BC6   76                     HALT      
1BC7   00                     .CSTR      
1BC8                EXPECTM_0_2740S50:      
1BC8   E1                     POP   HL   
1BC9                          ;*Macro unroll:  test "7 3 / _", 1
1BC9   31 80 44               LD   SP,STACK   
1BCC   CD 7E 0B               CALL   init   
1BCF   CD F4 43               CALL   execStr   
1BD2   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1BDA                          ;*Macro unroll:  expect "7 3 / _",1
1BDA   E1                     POP   HL   
1BDB   E5                     PUSH   HL   
1BDC   11 01 00               LD   DE,1   
1BDF   B7                     OR   A   
1BE0   ED 52                  SBC   HL,DE   
1BE2   7D                     LD   A,L   
1BE3   B4                     OR   H   
1BE4   CA 3F 1C               JP   Z,expectM_0_2741S50   
1BE7   CD 77 0B               CALL   printStr   
1BEA   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1BF8   CD 77 0B               CALL   printStr   
1BFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C0A   21 01 00               LD   hl,1   
1C0D   E5                     PUSH   hl   
1C0E   CD 3C 0C               CALL   run   
1C11   2E 00                  .CSTR   "."   
1C13   CD 77 0B               CALL   printStr   
1C16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C23   E1                     POP   hl   
1C24   E5                     PUSH   hl   
1C25   E5                     PUSH   hl   
1C26   CD 3C 0C               CALL   run   
1C29   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1C3D   76                     HALT      
1C3E   00                     .CSTR      
1C3F                EXPECTM_0_2741S50:      
1C3F   E1                     POP   HL   
1C40                          ;*Macro unroll:  test "7 3 /", 2
1C40   31 80 44               LD   SP,STACK   
1C43   CD 7E 0B               CALL   init   
1C46   CD F4 43               CALL   execStr   
1C49   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1C4F                          ;*Macro unroll:  expect "7 3 /",2
1C4F   E1                     POP   HL   
1C50   E5                     PUSH   HL   
1C51   11 02 00               LD   DE,2   
1C54   B7                     OR   A   
1C55   ED 52                  SBC   HL,DE   
1C57   7D                     LD   A,L   
1C58   B4                     OR   H   
1C59   CA B2 1C               JP   Z,expectM_0_2742S50   
1C5C   CD 77 0B               CALL   printStr   
1C5F   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1C6B   CD 77 0B               CALL   printStr   
1C6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C7D   21 02 00               LD   hl,2   
1C80   E5                     PUSH   hl   
1C81   CD 3C 0C               CALL   run   
1C84   2E 00                  .CSTR   "."   
1C86   CD 77 0B               CALL   printStr   
1C89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C96   E1                     POP   hl   
1C97   E5                     PUSH   hl   
1C98   E5                     PUSH   hl   
1C99   CD 3C 0C               CALL   run   
1C9C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1CB0   76                     HALT      
1CB1   00                     .CSTR      
1CB2                EXPECTM_0_2742S50:      
1CB2   E1                     POP   HL   
1CB3                          ;*Macro unroll:  test "2 3 ==", FALSE
1CB3   31 80 44               LD   SP,STACK   
1CB6   CD 7E 0B               CALL   init   
1CB9   CD F4 43               CALL   execStr   
1CBC   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1CC3                          ;*Macro unroll:  expect "2 3 ==",FALSE
1CC3   E1                     POP   HL   
1CC4   E5                     PUSH   HL   
1CC5   11 00 00               LD   DE,FALSE   
1CC8   B7                     OR   A   
1CC9   ED 52                  SBC   HL,DE   
1CCB   7D                     LD   A,L   
1CCC   B4                     OR   H   
1CCD   CA 27 1D               JP   Z,expectM_0_2743S50   
1CD0   CD 77 0B               CALL   printStr   
1CD3   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1CE0   CD 77 0B               CALL   printStr   
1CE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CF2   21 00 00               LD   hl,FALSE   
1CF5   E5                     PUSH   hl   
1CF6   CD 3C 0C               CALL   run   
1CF9   2E 00                  .CSTR   "."   
1CFB   CD 77 0B               CALL   printStr   
1CFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D0B   E1                     POP   hl   
1D0C   E5                     PUSH   hl   
1D0D   E5                     PUSH   hl   
1D0E   CD 3C 0C               CALL   run   
1D11   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D25   76                     HALT      
1D26   00                     .CSTR      
1D27                EXPECTM_0_2743S50:      
1D27   E1                     POP   HL   
1D28                          ;*Macro unroll:  test "3 3 ==", TRUE
1D28   31 80 44               LD   SP,STACK   
1D2B   CD 7E 0B               CALL   init   
1D2E   CD F4 43               CALL   execStr   
1D31   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1D38                          ;*Macro unroll:  expect "3 3 ==",TRUE
1D38   E1                     POP   HL   
1D39   E5                     PUSH   HL   
1D3A   11 FF FF               LD   DE,TRUE   
1D3D   B7                     OR   A   
1D3E   ED 52                  SBC   HL,DE   
1D40   7D                     LD   A,L   
1D41   B4                     OR   H   
1D42   CA 9C 1D               JP   Z,expectM_0_2744S50   
1D45   CD 77 0B               CALL   printStr   
1D48   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1D55   CD 77 0B               CALL   printStr   
1D58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D67   21 FF FF               LD   hl,TRUE   
1D6A   E5                     PUSH   hl   
1D6B   CD 3C 0C               CALL   run   
1D6E   2E 00                  .CSTR   "."   
1D70   CD 77 0B               CALL   printStr   
1D73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D80   E1                     POP   hl   
1D81   E5                     PUSH   hl   
1D82   E5                     PUSH   hl   
1D83   CD 3C 0C               CALL   run   
1D86   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D9A   76                     HALT      
1D9B   00                     .CSTR      
1D9C                EXPECTM_0_2744S50:      
1D9C   E1                     POP   HL   
1D9D                          ;*Macro unroll:  test "1 2 <", TRUE
1D9D   31 80 44               LD   SP,STACK   
1DA0   CD 7E 0B               CALL   init   
1DA3   CD F4 43               CALL   execStr   
1DA6   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1DAC                          ;*Macro unroll:  expect "1 2 <",TRUE
1DAC   E1                     POP   HL   
1DAD   E5                     PUSH   HL   
1DAE   11 FF FF               LD   DE,TRUE   
1DB1   B7                     OR   A   
1DB2   ED 52                  SBC   HL,DE   
1DB4   7D                     LD   A,L   
1DB5   B4                     OR   H   
1DB6   CA 0F 1E               JP   Z,expectM_0_2745S50   
1DB9   CD 77 0B               CALL   printStr   
1DBC   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1DC8   CD 77 0B               CALL   printStr   
1DCB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DDA   21 FF FF               LD   hl,TRUE   
1DDD   E5                     PUSH   hl   
1DDE   CD 3C 0C               CALL   run   
1DE1   2E 00                  .CSTR   "."   
1DE3   CD 77 0B               CALL   printStr   
1DE6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DF3   E1                     POP   hl   
1DF4   E5                     PUSH   hl   
1DF5   E5                     PUSH   hl   
1DF6   CD 3C 0C               CALL   run   
1DF9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E0D   76                     HALT      
1E0E   00                     .CSTR      
1E0F                EXPECTM_0_2745S50:      
1E0F   E1                     POP   HL   
1E10                          ;*Macro unroll:  test "2 1 <", FALSE
1E10   31 80 44               LD   SP,STACK   
1E13   CD 7E 0B               CALL   init   
1E16   CD F4 43               CALL   execStr   
1E19   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1E1F                          ;*Macro unroll:  expect "2 1 <",FALSE
1E1F   E1                     POP   HL   
1E20   E5                     PUSH   HL   
1E21   11 00 00               LD   DE,FALSE   
1E24   B7                     OR   A   
1E25   ED 52                  SBC   HL,DE   
1E27   7D                     LD   A,L   
1E28   B4                     OR   H   
1E29   CA 82 1E               JP   Z,expectM_0_2746S50   
1E2C   CD 77 0B               CALL   printStr   
1E2F   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1E3B   CD 77 0B               CALL   printStr   
1E3E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E4D   21 00 00               LD   hl,FALSE   
1E50   E5                     PUSH   hl   
1E51   CD 3C 0C               CALL   run   
1E54   2E 00                  .CSTR   "."   
1E56   CD 77 0B               CALL   printStr   
1E59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E66   E1                     POP   hl   
1E67   E5                     PUSH   hl   
1E68   E5                     PUSH   hl   
1E69   CD 3C 0C               CALL   run   
1E6C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E80   76                     HALT      
1E81   00                     .CSTR      
1E82                EXPECTM_0_2746S50:      
1E82   E1                     POP   HL   
1E83                          ;*Macro unroll:  test "2 3 <", TRUE
1E83   31 80 44               LD   SP,STACK   
1E86   CD 7E 0B               CALL   init   
1E89   CD F4 43               CALL   execStr   
1E8C   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1E92                          ;*Macro unroll:  expect "2 3 <",TRUE
1E92   E1                     POP   HL   
1E93   E5                     PUSH   HL   
1E94   11 FF FF               LD   DE,TRUE   
1E97   B7                     OR   A   
1E98   ED 52                  SBC   HL,DE   
1E9A   7D                     LD   A,L   
1E9B   B4                     OR   H   
1E9C   CA F5 1E               JP   Z,expectM_0_2747S50   
1E9F   CD 77 0B               CALL   printStr   
1EA2   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1EAE   CD 77 0B               CALL   printStr   
1EB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EC0   21 FF FF               LD   hl,TRUE   
1EC3   E5                     PUSH   hl   
1EC4   CD 3C 0C               CALL   run   
1EC7   2E 00                  .CSTR   "."   
1EC9   CD 77 0B               CALL   printStr   
1ECC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ED9   E1                     POP   hl   
1EDA   E5                     PUSH   hl   
1EDB   E5                     PUSH   hl   
1EDC   CD 3C 0C               CALL   run   
1EDF   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1EF3   76                     HALT      
1EF4   00                     .CSTR      
1EF5                EXPECTM_0_2747S50:      
1EF5   E1                     POP   HL   
1EF6                          ;*Macro unroll:  test "3 3 <", FALSE
1EF6   31 80 44               LD   SP,STACK   
1EF9   CD 7E 0B               CALL   init   
1EFC   CD F4 43               CALL   execStr   
1EFF   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1F05                          ;*Macro unroll:  expect "3 3 <",FALSE
1F05   E1                     POP   HL   
1F06   E5                     PUSH   HL   
1F07   11 00 00               LD   DE,FALSE   
1F0A   B7                     OR   A   
1F0B   ED 52                  SBC   HL,DE   
1F0D   7D                     LD   A,L   
1F0E   B4                     OR   H   
1F0F   CA 68 1F               JP   Z,expectM_0_2748S50   
1F12   CD 77 0B               CALL   printStr   
1F15   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1F21   CD 77 0B               CALL   printStr   
1F24   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F33   21 00 00               LD   hl,FALSE   
1F36   E5                     PUSH   hl   
1F37   CD 3C 0C               CALL   run   
1F3A   2E 00                  .CSTR   "."   
1F3C   CD 77 0B               CALL   printStr   
1F3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F4C   E1                     POP   hl   
1F4D   E5                     PUSH   hl   
1F4E   E5                     PUSH   hl   
1F4F   CD 3C 0C               CALL   run   
1F52   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1F66   76                     HALT      
1F67   00                     .CSTR      
1F68                EXPECTM_0_2748S50:      
1F68   E1                     POP   HL   
1F69                          ;*Macro unroll:  test "1 2 >", FALSE
1F69   31 80 44               LD   SP,STACK   
1F6C   CD 7E 0B               CALL   init   
1F6F   CD F4 43               CALL   execStr   
1F72   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1F78                          ;*Macro unroll:  expect "1 2 >",FALSE
1F78   E1                     POP   HL   
1F79   E5                     PUSH   HL   
1F7A   11 00 00               LD   DE,FALSE   
1F7D   B7                     OR   A   
1F7E   ED 52                  SBC   HL,DE   
1F80   7D                     LD   A,L   
1F81   B4                     OR   H   
1F82   CA DB 1F               JP   Z,expectM_0_2749S50   
1F85   CD 77 0B               CALL   printStr   
1F88   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1F94   CD 77 0B               CALL   printStr   
1F97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FA6   21 00 00               LD   hl,FALSE   
1FA9   E5                     PUSH   hl   
1FAA   CD 3C 0C               CALL   run   
1FAD   2E 00                  .CSTR   "."   
1FAF   CD 77 0B               CALL   printStr   
1FB2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FBF   E1                     POP   hl   
1FC0   E5                     PUSH   hl   
1FC1   E5                     PUSH   hl   
1FC2   CD 3C 0C               CALL   run   
1FC5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1FD9   76                     HALT      
1FDA   00                     .CSTR      
1FDB                EXPECTM_0_2749S50:      
1FDB   E1                     POP   HL   
1FDC                          ;*Macro unroll:  test "2 1 >", TRUE
1FDC   31 80 44               LD   SP,STACK   
1FDF   CD 7E 0B               CALL   init   
1FE2   CD F4 43               CALL   execStr   
1FE5   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1FEB                          ;*Macro unroll:  expect "2 1 >",TRUE
1FEB   E1                     POP   HL   
1FEC   E5                     PUSH   HL   
1FED   11 FF FF               LD   DE,TRUE   
1FF0   B7                     OR   A   
1FF1   ED 52                  SBC   HL,DE   
1FF3   7D                     LD   A,L   
1FF4   B4                     OR   H   
1FF5   CA 4E 20               JP   Z,expectM_0_2750S50   
1FF8   CD 77 0B               CALL   printStr   
1FFB   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2007   CD 77 0B               CALL   printStr   
200A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2019   21 FF FF               LD   hl,TRUE   
201C   E5                     PUSH   hl   
201D   CD 3C 0C               CALL   run   
2020   2E 00                  .CSTR   "."   
2022   CD 77 0B               CALL   printStr   
2025   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2032   E1                     POP   hl   
2033   E5                     PUSH   hl   
2034   E5                     PUSH   hl   
2035   CD 3C 0C               CALL   run   
2038   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
204C   76                     HALT      
204D   00                     .CSTR      
204E                EXPECTM_0_2750S50:      
204E   E1                     POP   HL   
204F                          ;*Macro unroll:  test "3 3 >", FALSE
204F   31 80 44               LD   SP,STACK   
2052   CD 7E 0B               CALL   init   
2055   CD F4 43               CALL   execStr   
2058   33 20 33 20 3E 00      .CSTR   "3 3 >"   
205E                          ;*Macro unroll:  expect "3 3 >",FALSE
205E   E1                     POP   HL   
205F   E5                     PUSH   HL   
2060   11 00 00               LD   DE,FALSE   
2063   B7                     OR   A   
2064   ED 52                  SBC   HL,DE   
2066   7D                     LD   A,L   
2067   B4                     OR   H   
2068   CA C1 20               JP   Z,expectM_0_2751S50   
206B   CD 77 0B               CALL   printStr   
206E   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
207A   CD 77 0B               CALL   printStr   
207D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
208C   21 00 00               LD   hl,FALSE   
208F   E5                     PUSH   hl   
2090   CD 3C 0C               CALL   run   
2093   2E 00                  .CSTR   "."   
2095   CD 77 0B               CALL   printStr   
2098   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20A5   E1                     POP   hl   
20A6   E5                     PUSH   hl   
20A7   E5                     PUSH   hl   
20A8   CD 3C 0C               CALL   run   
20AB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
20BF   76                     HALT      
20C0   00                     .CSTR      
20C1                EXPECTM_0_2751S50:      
20C1   E1                     POP   HL   
20C2                          ;*Macro unroll:  test "4 3 >", TRUE
20C2   31 80 44               LD   SP,STACK   
20C5   CD 7E 0B               CALL   init   
20C8   CD F4 43               CALL   execStr   
20CB   34 20 33 20 3E 00      .CSTR   "4 3 >"   
20D1                          ;*Macro unroll:  expect "4 3 >",TRUE
20D1   E1                     POP   HL   
20D2   E5                     PUSH   HL   
20D3   11 FF FF               LD   DE,TRUE   
20D6   B7                     OR   A   
20D7   ED 52                  SBC   HL,DE   
20D9   7D                     LD   A,L   
20DA   B4                     OR   H   
20DB   CA 34 21               JP   Z,expectM_0_2752S50   
20DE   CD 77 0B               CALL   printStr   
20E1   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
20ED   CD 77 0B               CALL   printStr   
20F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20FF   21 FF FF               LD   hl,TRUE   
2102   E5                     PUSH   hl   
2103   CD 3C 0C               CALL   run   
2106   2E 00                  .CSTR   "."   
2108   CD 77 0B               CALL   printStr   
210B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2118   E1                     POP   hl   
2119   E5                     PUSH   hl   
211A   E5                     PUSH   hl   
211B   CD 3C 0C               CALL   run   
211E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2132   76                     HALT      
2133   00                     .CSTR      
2134                EXPECTM_0_2752S50:      
2134   E1                     POP   HL   
2135                          ;*Macro unroll:  test "2 2 <=", TRUE
2135   31 80 44               LD   SP,STACK   
2138   CD 7E 0B               CALL   init   
213B   CD F4 43               CALL   execStr   
213E   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
2145                          ;*Macro unroll:  expect "2 2 <=",TRUE
2145   E1                     POP   HL   
2146   E5                     PUSH   HL   
2147   11 FF FF               LD   DE,TRUE   
214A   B7                     OR   A   
214B   ED 52                  SBC   HL,DE   
214D   7D                     LD   A,L   
214E   B4                     OR   H   
214F   CA A9 21               JP   Z,expectM_0_2753S50   
2152   CD 77 0B               CALL   printStr   
2155   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2162   CD 77 0B               CALL   printStr   
2165   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2174   21 FF FF               LD   hl,TRUE   
2177   E5                     PUSH   hl   
2178   CD 3C 0C               CALL   run   
217B   2E 00                  .CSTR   "."   
217D   CD 77 0B               CALL   printStr   
2180   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
218D   E1                     POP   hl   
218E   E5                     PUSH   hl   
218F   E5                     PUSH   hl   
2190   CD 3C 0C               CALL   run   
2193   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
21A7   76                     HALT      
21A8   00                     .CSTR      
21A9                EXPECTM_0_2753S50:      
21A9   E1                     POP   HL   
21AA                          ;*Macro unroll:  test "2 2 >=", TRUE
21AA   31 80 44               LD   SP,STACK   
21AD   CD 7E 0B               CALL   init   
21B0   CD F4 43               CALL   execStr   
21B3   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
21BA                          ;*Macro unroll:  expect "2 2 >=",TRUE
21BA   E1                     POP   HL   
21BB   E5                     PUSH   HL   
21BC   11 FF FF               LD   DE,TRUE   
21BF   B7                     OR   A   
21C0   ED 52                  SBC   HL,DE   
21C2   7D                     LD   A,L   
21C3   B4                     OR   H   
21C4   CA 1E 22               JP   Z,expectM_0_2754S50   
21C7   CD 77 0B               CALL   printStr   
21CA   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
21D7   CD 77 0B               CALL   printStr   
21DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21E9   21 FF FF               LD   hl,TRUE   
21EC   E5                     PUSH   hl   
21ED   CD 3C 0C               CALL   run   
21F0   2E 00                  .CSTR   "."   
21F2   CD 77 0B               CALL   printStr   
21F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2202   E1                     POP   hl   
2203   E5                     PUSH   hl   
2204   E5                     PUSH   hl   
2205   CD 3C 0C               CALL   run   
2208   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
221C   76                     HALT      
221D   00                     .CSTR      
221E                EXPECTM_0_2754S50:      
221E   E1                     POP   HL   
221F                          ;*Macro unroll:  test "3 1 <<", 6
221F   31 80 44               LD   SP,STACK   
2222   CD 7E 0B               CALL   init   
2225   CD F4 43               CALL   execStr   
2228   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
222F                          ;*Macro unroll:  expect "3 1 <<",6
222F   E1                     POP   HL   
2230   E5                     PUSH   HL   
2231   11 06 00               LD   DE,6   
2234   B7                     OR   A   
2235   ED 52                  SBC   HL,DE   
2237   7D                     LD   A,L   
2238   B4                     OR   H   
2239   CA 93 22               JP   Z,expectM_0_2755S50   
223C   CD 77 0B               CALL   printStr   
223F   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
224C   CD 77 0B               CALL   printStr   
224F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
225E   21 06 00               LD   hl,6   
2261   E5                     PUSH   hl   
2262   CD 3C 0C               CALL   run   
2265   2E 00                  .CSTR   "."   
2267   CD 77 0B               CALL   printStr   
226A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2277   E1                     POP   hl   
2278   E5                     PUSH   hl   
2279   E5                     PUSH   hl   
227A   CD 3C 0C               CALL   run   
227D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2291   76                     HALT      
2292   00                     .CSTR      
2293                EXPECTM_0_2755S50:      
2293   E1                     POP   HL   
2294                          ;*Macro unroll:  test "10 1 >>", 5
2294   31 80 44               LD   SP,STACK   
2297   CD 7E 0B               CALL   init   
229A   CD F4 43               CALL   execStr   
229D   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
22A5                          ;*Macro unroll:  expect "10 1 >>",5
22A5   E1                     POP   HL   
22A6   E5                     PUSH   HL   
22A7   11 05 00               LD   DE,5   
22AA   B7                     OR   A   
22AB   ED 52                  SBC   HL,DE   
22AD   7D                     LD   A,L   
22AE   B4                     OR   H   
22AF   CA 0A 23               JP   Z,expectM_0_2756S50   
22B2   CD 77 0B               CALL   printStr   
22B5   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
22C3   CD 77 0B               CALL   printStr   
22C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22D5   21 05 00               LD   hl,5   
22D8   E5                     PUSH   hl   
22D9   CD 3C 0C               CALL   run   
22DC   2E 00                  .CSTR   "."   
22DE   CD 77 0B               CALL   printStr   
22E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22EE   E1                     POP   hl   
22EF   E5                     PUSH   hl   
22F0   E5                     PUSH   hl   
22F1   CD 3C 0C               CALL   run   
22F4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2308   76                     HALT      
2309   00                     .CSTR      
230A                EXPECTM_0_2756S50:      
230A   E1                     POP   HL   
230B                          ;*Macro unroll:  test "1 x = x", 1
230B   31 80 44               LD   SP,STACK   
230E   CD 7E 0B               CALL   init   
2311   CD F4 43               CALL   execStr   
2314   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
231C                          ;*Macro unroll:  expect "1 x = x",1
231C   E1                     POP   HL   
231D   E5                     PUSH   HL   
231E   11 01 00               LD   DE,1   
2321   B7                     OR   A   
2322   ED 52                  SBC   HL,DE   
2324   7D                     LD   A,L   
2325   B4                     OR   H   
2326   CA 81 23               JP   Z,expectM_0_2757S50   
2329   CD 77 0B               CALL   printStr   
232C   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
233A   CD 77 0B               CALL   printStr   
233D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
234C   21 01 00               LD   hl,1   
234F   E5                     PUSH   hl   
2350   CD 3C 0C               CALL   run   
2353   2E 00                  .CSTR   "."   
2355   CD 77 0B               CALL   printStr   
2358   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2365   E1                     POP   hl   
2366   E5                     PUSH   hl   
2367   E5                     PUSH   hl   
2368   CD 3C 0C               CALL   run   
236B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
237F   76                     HALT      
2380   00                     .CSTR      
2381                EXPECTM_0_2757S50:      
2381   E1                     POP   HL   
2382                          ;*Macro unroll:  test "1{}^", 1
2382   31 80 44               LD   SP,STACK   
2385   CD 7E 0B               CALL   init   
2388   CD F4 43               CALL   execStr   
238B   31 7B 7D 5E 00         .CSTR   "1{}^"   
2390                          ;*Macro unroll:  expect "1{}^",1
2390   E1                     POP   HL   
2391   E5                     PUSH   HL   
2392   11 01 00               LD   DE,1   
2395   B7                     OR   A   
2396   ED 52                  SBC   HL,DE   
2398   7D                     LD   A,L   
2399   B4                     OR   H   
239A   CA F2 23               JP   Z,expectM_0_2758S50   
239D   CD 77 0B               CALL   printStr   
23A0   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
23AB   CD 77 0B               CALL   printStr   
23AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23BD   21 01 00               LD   hl,1   
23C0   E5                     PUSH   hl   
23C1   CD 3C 0C               CALL   run   
23C4   2E 00                  .CSTR   "."   
23C6   CD 77 0B               CALL   printStr   
23C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23D6   E1                     POP   hl   
23D7   E5                     PUSH   hl   
23D8   E5                     PUSH   hl   
23D9   CD 3C 0C               CALL   run   
23DC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
23F0   76                     HALT      
23F1   00                     .CSTR      
23F2                EXPECTM_0_2758S50:      
23F2   E1                     POP   HL   
23F3                          ;*Macro unroll:  test "{1}^", 1
23F3   31 80 44               LD   SP,STACK   
23F6   CD 7E 0B               CALL   init   
23F9   CD F4 43               CALL   execStr   
23FC   7B 31 7D 5E 00         .CSTR   "{1}^"   
2401                          ;*Macro unroll:  expect "{1}^",1
2401   E1                     POP   HL   
2402   E5                     PUSH   HL   
2403   11 01 00               LD   DE,1   
2406   B7                     OR   A   
2407   ED 52                  SBC   HL,DE   
2409   7D                     LD   A,L   
240A   B4                     OR   H   
240B   CA 63 24               JP   Z,expectM_0_2759S50   
240E   CD 77 0B               CALL   printStr   
2411   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
241C   CD 77 0B               CALL   printStr   
241F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
242E   21 01 00               LD   hl,1   
2431   E5                     PUSH   hl   
2432   CD 3C 0C               CALL   run   
2435   2E 00                  .CSTR   "."   
2437   CD 77 0B               CALL   printStr   
243A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2447   E1                     POP   hl   
2448   E5                     PUSH   hl   
2449   E5                     PUSH   hl   
244A   CD 3C 0C               CALL   run   
244D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2461   76                     HALT      
2462   00                     .CSTR      
2463                EXPECTM_0_2759S50:      
2463   E1                     POP   HL   
2464                          ;*Macro unroll:  test "{{1}^}^", 1
2464   31 80 44               LD   SP,STACK   
2467   CD 7E 0B               CALL   init   
246A   CD F4 43               CALL   execStr   
246D   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
2475                          ;*Macro unroll:  expect "{{1}^}^",1
2475   E1                     POP   HL   
2476   E5                     PUSH   HL   
2477   11 01 00               LD   DE,1   
247A   B7                     OR   A   
247B   ED 52                  SBC   HL,DE   
247D   7D                     LD   A,L   
247E   B4                     OR   H   
247F   CA DA 24               JP   Z,expectM_0_2760S50   
2482   CD 77 0B               CALL   printStr   
2485   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2493   CD 77 0B               CALL   printStr   
2496   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24A5   21 01 00               LD   hl,1   
24A8   E5                     PUSH   hl   
24A9   CD 3C 0C               CALL   run   
24AC   2E 00                  .CSTR   "."   
24AE   CD 77 0B               CALL   printStr   
24B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24BE   E1                     POP   hl   
24BF   E5                     PUSH   hl   
24C0   E5                     PUSH   hl   
24C1   CD 3C 0C               CALL   run   
24C4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
24D8   76                     HALT      
24D9   00                     .CSTR      
24DA                EXPECTM_0_2760S50:      
24DA   E1                     POP   HL   
24DB                          ;*Macro unroll:  test "{{{1}^}^}^", 1
24DB   31 80 44               LD   SP,STACK   
24DE   CD 7E 0B               CALL   init   
24E1   CD F4 43               CALL   execStr   
24E4   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
24EF                          ;*Macro unroll:  expect "{{{1}^}^}^",1
24EF   E1                     POP   HL   
24F0   E5                     PUSH   HL   
24F1   11 01 00               LD   DE,1   
24F4   B7                     OR   A   
24F5   ED 52                  SBC   HL,DE   
24F7   7D                     LD   A,L   
24F8   B4                     OR   H   
24F9   CA 57 25               JP   Z,expectM_0_2761S50   
24FC   CD 77 0B               CALL   printStr   
24FF   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2510   CD 77 0B               CALL   printStr   
2513   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2522   21 01 00               LD   hl,1   
2525   E5                     PUSH   hl   
2526   CD 3C 0C               CALL   run   
2529   2E 00                  .CSTR   "."   
252B   CD 77 0B               CALL   printStr   
252E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
253B   E1                     POP   hl   
253C   E5                     PUSH   hl   
253D   E5                     PUSH   hl   
253E   CD 3C 0C               CALL   run   
2541   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2555   76                     HALT      
2556   00                     .CSTR      
2557                EXPECTM_0_2761S50:      
2557   E1                     POP   HL   
2558                          ;*Macro unroll:  test "5 /f{10} ?", 5
2558   31 80 44               LD   SP,STACK   
255B   CD 7E 0B               CALL   init   
255E   CD F4 43               CALL   execStr   
2561   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
256C                          ;*Macro unroll:  expect "5 /f{10} ?",5
256C   E1                     POP   HL   
256D   E5                     PUSH   HL   
256E   11 05 00               LD   DE,5   
2571   B7                     OR   A   
2572   ED 52                  SBC   HL,DE   
2574   7D                     LD   A,L   
2575   B4                     OR   H   
2576   CA D4 25               JP   Z,expectM_0_2762S50   
2579   CD 77 0B               CALL   printStr   
257C   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
258D   CD 77 0B               CALL   printStr   
2590   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
259F   21 05 00               LD   hl,5   
25A2   E5                     PUSH   hl   
25A3   CD 3C 0C               CALL   run   
25A6   2E 00                  .CSTR   "."   
25A8   CD 77 0B               CALL   printStr   
25AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25B8   E1                     POP   hl   
25B9   E5                     PUSH   hl   
25BA   E5                     PUSH   hl   
25BB   CD 3C 0C               CALL   run   
25BE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
25D2   76                     HALT      
25D3   00                     .CSTR      
25D4                EXPECTM_0_2762S50:      
25D4   E1                     POP   HL   
25D5                          ;*Macro unroll:  test "5 /t{10} ? +", 15
25D5   31 80 44               LD   SP,STACK   
25D8   CD 7E 0B               CALL   init   
25DB   CD F4 43               CALL   execStr   
25DE   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
25EB                          ;*Macro unroll:  expect "5 /t{10} ? +",15
25EB   E1                     POP   HL   
25EC   E5                     PUSH   HL   
25ED   11 0F 00               LD   DE,15   
25F0   B7                     OR   A   
25F1   ED 52                  SBC   HL,DE   
25F3   7D                     LD   A,L   
25F4   B4                     OR   H   
25F5   CA 55 26               JP   Z,expectM_0_2763S50   
25F8   CD 77 0B               CALL   printStr   
25FB   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
260E   CD 77 0B               CALL   printStr   
2611   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2620   21 0F 00               LD   hl,15   
2623   E5                     PUSH   hl   
2624   CD 3C 0C               CALL   run   
2627   2E 00                  .CSTR   "."   
2629   CD 77 0B               CALL   printStr   
262C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2639   E1                     POP   hl   
263A   E5                     PUSH   hl   
263B   E5                     PUSH   hl   
263C   CD 3C 0C               CALL   run   
263F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2653   76                     HALT      
2654   00                     .CSTR      
2655                EXPECTM_0_2763S50:      
2655   E1                     POP   HL   
2656                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2656   31 80 44               LD   SP,STACK   
2659   CD 7E 0B               CALL   init   
265C   CD F4 43               CALL   execStr   
265F   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
2671                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
2671   E1                     POP   HL   
2672   E5                     PUSH   HL   
2673   11 15 00               LD   DE,21   
2676   B7                     OR   A   
2677   ED 52                  SBC   HL,DE   
2679   7D                     LD   A,L   
267A   B4                     OR   H   
267B   CA E0 26               JP   Z,expectM_0_2764S50   
267E   CD 77 0B               CALL   printStr   
2681   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2699   CD 77 0B               CALL   printStr   
269C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26AB   21 15 00               LD   hl,21   
26AE   E5                     PUSH   hl   
26AF   CD 3C 0C               CALL   run   
26B2   2E 00                  .CSTR   "."   
26B4   CD 77 0B               CALL   printStr   
26B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26C4   E1                     POP   hl   
26C5   E5                     PUSH   hl   
26C6   E5                     PUSH   hl   
26C7   CD 3C 0C               CALL   run   
26CA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
26DE   76                     HALT      
26DF   00                     .CSTR      
26E0                EXPECTM_0_2764S50:      
26E0   E1                     POP   HL   
26E1                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
26E1   31 80 44               LD   SP,STACK   
26E4   CD 7E 0B               CALL   init   
26E7   CD F4 43               CALL   execStr   
26EA   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
26FC                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
26FC   E1                     POP   HL   
26FD   E5                     PUSH   HL   
26FE   11 0B 00               LD   DE,11   
2701   B7                     OR   A   
2702   ED 52                  SBC   HL,DE   
2704   7D                     LD   A,L   
2705   B4                     OR   H   
2706   CA 6B 27               JP   Z,expectM_0_2765S50   
2709   CD 77 0B               CALL   printStr   
270C   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2724   CD 77 0B               CALL   printStr   
2727   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2736   21 0B 00               LD   hl,11   
2739   E5                     PUSH   hl   
273A   CD 3C 0C               CALL   run   
273D   2E 00                  .CSTR   "."   
273F   CD 77 0B               CALL   printStr   
2742   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
274F   E1                     POP   hl   
2750   E5                     PUSH   hl   
2751   E5                     PUSH   hl   
2752   CD 3C 0C               CALL   run   
2755   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2769   76                     HALT      
276A   00                     .CSTR      
276B                EXPECTM_0_2765S50:      
276B   E1                     POP   HL   
276C                          ;*Macro unroll:  test ": -2%", $0000
276C   31 80 44               LD   SP,STACK   
276F   CD 7E 0B               CALL   init   
2772   CD F4 43               CALL   execStr   
2775   3A 20 2D 32 25 00      .CSTR   ": -2%"   
277B                          ;*Macro unroll:  expect ": -2%",$0000
277B   E1                     POP   HL   
277C   E5                     PUSH   HL   
277D   11 00 00               LD   DE,$0000   
2780   B7                     OR   A   
2781   ED 52                  SBC   HL,DE   
2783   7D                     LD   A,L   
2784   B4                     OR   H   
2785   CA DE 27               JP   Z,expectM_0_2766S50   
2788   CD 77 0B               CALL   printStr   
278B   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
2797   CD 77 0B               CALL   printStr   
279A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27A9   21 00 00               LD   hl,$0000   
27AC   E5                     PUSH   hl   
27AD   CD 3C 0C               CALL   run   
27B0   2E 00                  .CSTR   "."   
27B2   CD 77 0B               CALL   printStr   
27B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27C2   E1                     POP   hl   
27C3   E5                     PUSH   hl   
27C4   E5                     PUSH   hl   
27C5   CD 3C 0C               CALL   run   
27C8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
27DC   76                     HALT      
27DD   00                     .CSTR      
27DE                EXPECTM_0_2766S50:      
27DE   E1                     POP   HL   
27DF                          ;*Macro unroll:  test ":a -1%", $0001
27DF   31 80 44               LD   SP,STACK   
27E2   CD 7E 0B               CALL   init   
27E5   CD F4 43               CALL   execStr   
27E8   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
27EF                          ;*Macro unroll:  expect ":a -1%",$0001
27EF   E1                     POP   HL   
27F0   E5                     PUSH   HL   
27F1   11 01 00               LD   DE,$0001   
27F4   B7                     OR   A   
27F5   ED 52                  SBC   HL,DE   
27F7   7D                     LD   A,L   
27F8   B4                     OR   H   
27F9   CA 53 28               JP   Z,expectM_0_2767S50   
27FC   CD 77 0B               CALL   printStr   
27FF   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
280C   CD 77 0B               CALL   printStr   
280F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
281E   21 01 00               LD   hl,$0001   
2821   E5                     PUSH   hl   
2822   CD 3C 0C               CALL   run   
2825   2E 00                  .CSTR   "."   
2827   CD 77 0B               CALL   printStr   
282A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2837   E1                     POP   hl   
2838   E5                     PUSH   hl   
2839   E5                     PUSH   hl   
283A   CD 3C 0C               CALL   run   
283D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2851   76                     HALT      
2852   00                     .CSTR      
2853                EXPECTM_0_2767S50:      
2853   E1                     POP   HL   
2854                          ;*Macro unroll:  test ":a: -1%", $0001
2854   31 80 44               LD   SP,STACK   
2857   CD 7E 0B               CALL   init   
285A   CD F4 43               CALL   execStr   
285D   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
2865                          ;*Macro unroll:  expect ":a: -1%",$0001
2865   E1                     POP   HL   
2866   E5                     PUSH   HL   
2867   11 01 00               LD   DE,$0001   
286A   B7                     OR   A   
286B   ED 52                  SBC   HL,DE   
286D   7D                     LD   A,L   
286E   B4                     OR   H   
286F   CA CA 28               JP   Z,expectM_0_2768S50   
2872   CD 77 0B               CALL   printStr   
2875   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
2883   CD 77 0B               CALL   printStr   
2886   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2895   21 01 00               LD   hl,$0001   
2898   E5                     PUSH   hl   
2899   CD 3C 0C               CALL   run   
289C   2E 00                  .CSTR   "."   
289E   CD 77 0B               CALL   printStr   
28A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28AE   E1                     POP   hl   
28AF   E5                     PUSH   hl   
28B0   E5                     PUSH   hl   
28B1   CD 3C 0C               CALL   run   
28B4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
28C8   76                     HALT      
28C9   00                     .CSTR      
28CA                EXPECTM_0_2768S50:      
28CA   E1                     POP   HL   
28CB                          ;*Macro unroll:  test ":a:b -1%", $0102
28CB   31 80 44               LD   SP,STACK   
28CE   CD 7E 0B               CALL   init   
28D1   CD F4 43               CALL   execStr   
28D4   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
28DD                          ;*Macro unroll:  expect ":a:b -1%",$0102
28DD   E1                     POP   HL   
28DE   E5                     PUSH   HL   
28DF   11 02 01               LD   DE,$0102   
28E2   B7                     OR   A   
28E3   ED 52                  SBC   HL,DE   
28E5   7D                     LD   A,L   
28E6   B4                     OR   H   
28E7   CA 43 29               JP   Z,expectM_0_2769S50   
28EA   CD 77 0B               CALL   printStr   
28ED   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
28FC   CD 77 0B               CALL   printStr   
28FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
290E   21 02 01               LD   hl,$0102   
2911   E5                     PUSH   hl   
2912   CD 3C 0C               CALL   run   
2915   2E 00                  .CSTR   "."   
2917   CD 77 0B               CALL   printStr   
291A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2927   E1                     POP   hl   
2928   E5                     PUSH   hl   
2929   E5                     PUSH   hl   
292A   CD 3C 0C               CALL   run   
292D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2941   76                     HALT      
2942   00                     .CSTR      
2943                EXPECTM_0_2769S50:      
2943   E1                     POP   HL   
2944                          ;*Macro unroll:  test "::b -1%", $0101
2944   31 80 44               LD   SP,STACK   
2947   CD 7E 0B               CALL   init   
294A   CD F4 43               CALL   execStr   
294D   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
2955                          ;*Macro unroll:  expect "::b -1%",$0101
2955   E1                     POP   HL   
2956   E5                     PUSH   HL   
2957   11 01 01               LD   DE,$0101   
295A   B7                     OR   A   
295B   ED 52                  SBC   HL,DE   
295D   7D                     LD   A,L   
295E   B4                     OR   H   
295F   CA BA 29               JP   Z,expectM_0_2770S50   
2962   CD 77 0B               CALL   printStr   
2965   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
2973   CD 77 0B               CALL   printStr   
2976   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2985   21 01 01               LD   hl,$0101   
2988   E5                     PUSH   hl   
2989   CD 3C 0C               CALL   run   
298C   2E 00                  .CSTR   "."   
298E   CD 77 0B               CALL   printStr   
2991   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
299E   E1                     POP   hl   
299F   E5                     PUSH   hl   
29A0   E5                     PUSH   hl   
29A1   CD 3C 0C               CALL   run   
29A4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
29B8   76                     HALT      
29B9   00                     .CSTR      
29BA                EXPECTM_0_2770S50:      
29BA   E1                     POP   HL   
29BB                          ;*Macro unroll:  test ":{2};^", 2
29BB   31 80 44               LD   SP,STACK   
29BE   CD 7E 0B               CALL   init   
29C1   CD F4 43               CALL   execStr   
29C4   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
29CB                          ;*Macro unroll:  expect ":{2};^",2
29CB   E1                     POP   HL   
29CC   E5                     PUSH   HL   
29CD   11 02 00               LD   DE,2   
29D0   B7                     OR   A   
29D1   ED 52                  SBC   HL,DE   
29D3   7D                     LD   A,L   
29D4   B4                     OR   H   
29D5   CA 2F 2A               JP   Z,expectM_0_2771S50   
29D8   CD 77 0B               CALL   printStr   
29DB   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
29E8   CD 77 0B               CALL   printStr   
29EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29FA   21 02 00               LD   hl,2   
29FD   E5                     PUSH   hl   
29FE   CD 3C 0C               CALL   run   
2A01   2E 00                  .CSTR   "."   
2A03   CD 77 0B               CALL   printStr   
2A06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A13   E1                     POP   hl   
2A14   E5                     PUSH   hl   
2A15   E5                     PUSH   hl   
2A16   CD 3C 0C               CALL   run   
2A19   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2A2D   76                     HALT      
2A2E   00                     .CSTR      
2A2F                EXPECTM_0_2771S50:      
2A2F   E1                     POP   HL   
2A30                          ;*Macro unroll:  test ":a{2};^", 2
2A30   31 80 44               LD   SP,STACK   
2A33   CD 7E 0B               CALL   init   
2A36   CD F4 43               CALL   execStr   
2A39   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2A41                          ;*Macro unroll:  expect ":a{2};^",2
2A41   E1                     POP   HL   
2A42   E5                     PUSH   HL   
2A43   11 02 00               LD   DE,2   
2A46   B7                     OR   A   
2A47   ED 52                  SBC   HL,DE   
2A49   7D                     LD   A,L   
2A4A   B4                     OR   H   
2A4B   CA A6 2A               JP   Z,expectM_0_2772S50   
2A4E   CD 77 0B               CALL   printStr   
2A51   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2A5F   CD 77 0B               CALL   printStr   
2A62   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A71   21 02 00               LD   hl,2   
2A74   E5                     PUSH   hl   
2A75   CD 3C 0C               CALL   run   
2A78   2E 00                  .CSTR   "."   
2A7A   CD 77 0B               CALL   printStr   
2A7D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A8A   E1                     POP   hl   
2A8B   E5                     PUSH   hl   
2A8C   E5                     PUSH   hl   
2A8D   CD 3C 0C               CALL   run   
2A90   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2AA4   76                     HALT      
2AA5   00                     .CSTR      
2AA6                EXPECTM_0_2772S50:      
2AA6   E1                     POP   HL   
2AA7                          ;*Macro unroll:  test "5 :a{$a};^", 5
2AA7   31 80 44               LD   SP,STACK   
2AAA   CD 7E 0B               CALL   init   
2AAD   CD F4 43               CALL   execStr   
2AB0   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
2ABB                          ;*Macro unroll:  expect "5 :a{$a};^",5
2ABB   E1                     POP   HL   
2ABC   E5                     PUSH   HL   
2ABD   11 05 00               LD   DE,5   
2AC0   B7                     OR   A   
2AC1   ED 52                  SBC   HL,DE   
2AC3   7D                     LD   A,L   
2AC4   B4                     OR   H   
2AC5   CA 23 2B               JP   Z,expectM_0_2773S50   
2AC8   CD 77 0B               CALL   printStr   
2ACB   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2ADC   CD 77 0B               CALL   printStr   
2ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEE   21 05 00               LD   hl,5   
2AF1   E5                     PUSH   hl   
2AF2   CD 3C 0C               CALL   run   
2AF5   2E 00                  .CSTR   "."   
2AF7   CD 77 0B               CALL   printStr   
2AFA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B07   E1                     POP   hl   
2B08   E5                     PUSH   hl   
2B09   E5                     PUSH   hl   
2B0A   CD 3C 0C               CALL   run   
2B0D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2B21   76                     HALT      
2B22   00                     .CSTR      
2B23                EXPECTM_0_2773S50:      
2B23   E1                     POP   HL   
2B24                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2B24   31 80 44               LD   SP,STACK   
2B27   CD 7E 0B               CALL   init   
2B2A   CD F4 43               CALL   execStr   
2B2D   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2B3A                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2B3A   E1                     POP   HL   
2B3B   E5                     PUSH   HL   
2B3C   11 05 00               LD   DE,5   
2B3F   B7                     OR   A   
2B40   ED 52                  SBC   HL,DE   
2B42   7D                     LD   A,L   
2B43   B4                     OR   H   
2B44   CA A4 2B               JP   Z,expectM_0_2774S50   
2B47   CD 77 0B               CALL   printStr   
2B4A   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2B5D   CD 77 0B               CALL   printStr   
2B60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B6F   21 05 00               LD   hl,5   
2B72   E5                     PUSH   hl   
2B73   CD 3C 0C               CALL   run   
2B76   2E 00                  .CSTR   "."   
2B78   CD 77 0B               CALL   printStr   
2B7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B88   E1                     POP   hl   
2B89   E5                     PUSH   hl   
2B8A   E5                     PUSH   hl   
2B8B   CD 3C 0C               CALL   run   
2B8E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2BA2   76                     HALT      
2BA3   00                     .CSTR      
2BA4                EXPECTM_0_2774S50:      
2BA4   E1                     POP   HL   
2BA5                          ;*Macro unroll:  test ":a{{2}^};^", 2
2BA5   31 80 44               LD   SP,STACK   
2BA8   CD 7E 0B               CALL   init   
2BAB   CD F4 43               CALL   execStr   
2BAE   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2BB9                          ;*Macro unroll:  expect ":a{{2}^};^",2
2BB9   E1                     POP   HL   
2BBA   E5                     PUSH   HL   
2BBB   11 02 00               LD   DE,2   
2BBE   B7                     OR   A   
2BBF   ED 52                  SBC   HL,DE   
2BC1   7D                     LD   A,L   
2BC2   B4                     OR   H   
2BC3   CA 21 2C               JP   Z,expectM_0_2775S50   
2BC6   CD 77 0B               CALL   printStr   
2BC9   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2BDA   CD 77 0B               CALL   printStr   
2BDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BEC   21 02 00               LD   hl,2   
2BEF   E5                     PUSH   hl   
2BF0   CD 3C 0C               CALL   run   
2BF3   2E 00                  .CSTR   "."   
2BF5   CD 77 0B               CALL   printStr   
2BF8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C05   E1                     POP   hl   
2C06   E5                     PUSH   hl   
2C07   E5                     PUSH   hl   
2C08   CD 3C 0C               CALL   run   
2C0B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2C1F   76                     HALT      
2C20   00                     .CSTR      
2C21                EXPECTM_0_2775S50:      
2C21   E1                     POP   HL   
2C22                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2C22   31 80 44               LD   SP,STACK   
2C25   CD 7E 0B               CALL   init   
2C28   CD F4 43               CALL   execStr   
2C2B   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2C3B                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2C3B   E1                     POP   HL   
2C3C   E5                     PUSH   HL   
2C3D   11 05 00               LD   DE,5   
2C40   B7                     OR   A   
2C41   ED 52                  SBC   HL,DE   
2C43   7D                     LD   A,L   
2C44   B4                     OR   H   
2C45   CA A8 2C               JP   Z,expectM_0_2776S50   
2C48   CD 77 0B               CALL   printStr   
2C4B   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2C61   CD 77 0B               CALL   printStr   
2C64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C73   21 05 00               LD   hl,5   
2C76   E5                     PUSH   hl   
2C77   CD 3C 0C               CALL   run   
2C7A   2E 00                  .CSTR   "."   
2C7C   CD 77 0B               CALL   printStr   
2C7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C8C   E1                     POP   hl   
2C8D   E5                     PUSH   hl   
2C8E   E5                     PUSH   hl   
2C8F   CD 3C 0C               CALL   run   
2C92   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2CA6   76                     HALT      
2CA7   00                     .CSTR      
2CA8                EXPECTM_0_2776S50:      
2CA8   E1                     POP   HL   
2CA9                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2CA9   31 80 44               LD   SP,STACK   
2CAC   CD 7E 0B               CALL   init   
2CAF   CD F4 43               CALL   execStr   
2CB2   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2CC3                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2CC3   E1                     POP   HL   
2CC4   E5                     PUSH   HL   
2CC5   11 01 00               LD   DE,1   
2CC8   B7                     OR   A   
2CC9   ED 52                  SBC   HL,DE   
2CCB   7D                     LD   A,L   
2CCC   B4                     OR   H   
2CCD   CA 31 2D               JP   Z,expectM_0_2777S50   
2CD0   CD 77 0B               CALL   printStr   
2CD3   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2CEA   CD 77 0B               CALL   printStr   
2CED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CFC   21 01 00               LD   hl,1   
2CFF   E5                     PUSH   hl   
2D00   CD 3C 0C               CALL   run   
2D03   2E 00                  .CSTR   "."   
2D05   CD 77 0B               CALL   printStr   
2D08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D15   E1                     POP   hl   
2D16   E5                     PUSH   hl   
2D17   E5                     PUSH   hl   
2D18   CD 3C 0C               CALL   run   
2D1B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2D2F   76                     HALT      
2D30   00                     .CSTR      
2D31                EXPECTM_0_2777S50:      
2D31   E1                     POP   HL   
2D32                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2D32   31 80 44               LD   SP,STACK   
2D35   CD 7E 0B               CALL   init   
2D38   CD F4 43               CALL   execStr   
2D3B   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
2D4F                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
2D4F   E1                     POP   HL   
2D50   E5                     PUSH   HL   
2D51   11 07 00               LD   DE,7   
2D54   B7                     OR   A   
2D55   ED 52                  SBC   HL,DE   
2D57   7D                     LD   A,L   
2D58   B4                     OR   H   
2D59   CA C0 2D               JP   Z,expectM_0_2778S50   
2D5C   CD 77 0B               CALL   printStr   
2D5F   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
2D79   CD 77 0B               CALL   printStr   
2D7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D8B   21 07 00               LD   hl,7   
2D8E   E5                     PUSH   hl   
2D8F   CD 3C 0C               CALL   run   
2D92   2E 00                  .CSTR   "."   
2D94   CD 77 0B               CALL   printStr   
2D97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DA4   E1                     POP   hl   
2DA5   E5                     PUSH   hl   
2DA6   E5                     PUSH   hl   
2DA7   CD 3C 0C               CALL   run   
2DAA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2DBE   76                     HALT      
2DBF   00                     .CSTR      
2DC0                EXPECTM_0_2778S50:      
2DC0   E1                     POP   HL   
2DC1                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
2DC1   31 80 44               LD   SP,STACK   
2DC4   CD 7E 0B               CALL   init   
2DC7   CD F4 43               CALL   execStr   
2DCA   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
2DE0                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
2DE0   E1                     POP   HL   
2DE1   E5                     PUSH   HL   
2DE2   11 06 00               LD   DE,6   
2DE5   B7                     OR   A   
2DE6   ED 52                  SBC   HL,DE   
2DE8   7D                     LD   A,L   
2DE9   B4                     OR   H   
2DEA   CA 53 2E               JP   Z,expectM_0_2779S50   
2DED   CD 77 0B               CALL   printStr   
2DF0   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
2E0C   CD 77 0B               CALL   printStr   
2E0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E1E   21 06 00               LD   hl,6   
2E21   E5                     PUSH   hl   
2E22   CD 3C 0C               CALL   run   
2E25   2E 00                  .CSTR   "."   
2E27   CD 77 0B               CALL   printStr   
2E2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E37   E1                     POP   hl   
2E38   E5                     PUSH   hl   
2E39   E5                     PUSH   hl   
2E3A   CD 3C 0C               CALL   run   
2E3D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2E51   76                     HALT      
2E52   00                     .CSTR      
2E53                EXPECTM_0_2779S50:      
2E53   E1                     POP   HL   
2E54                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
2E54   31 80 44               LD   SP,STACK   
2E57   CD 7E 0B               CALL   init   
2E5A   CD F4 43               CALL   execStr   
2E5D   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
2E6C                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
2E6C   E1                     POP   HL   
2E6D   E5                     PUSH   HL   
2E6E   11 02 00               LD   DE,2   
2E71   B7                     OR   A   
2E72   ED 52                  SBC   HL,DE   
2E74   7D                     LD   A,L   
2E75   B4                     OR   H   
2E76   CA D8 2E               JP   Z,expectM_0_2780S50   
2E79   CD 77 0B               CALL   printStr   
2E7C   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
2E91   CD 77 0B               CALL   printStr   
2E94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EA3   21 02 00               LD   hl,2   
2EA6   E5                     PUSH   hl   
2EA7   CD 3C 0C               CALL   run   
2EAA   2E 00                  .CSTR   "."   
2EAC   CD 77 0B               CALL   printStr   
2EAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EBC   E1                     POP   hl   
2EBD   E5                     PUSH   hl   
2EBE   E5                     PUSH   hl   
2EBF   CD 3C 0C               CALL   run   
2EC2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2ED6   76                     HALT      
2ED7   00                     .CSTR      
2ED8                EXPECTM_0_2780S50:      
2ED8   E1                     POP   HL   
2ED9                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
2ED9   31 80 44               LD   SP,STACK   
2EDC   CD 7E 0B               CALL   init   
2EDF   CD F4 43               CALL   execStr   
2EE2   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
2EF4                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
2EF4   E1                     POP   HL   
2EF5   E5                     PUSH   HL   
2EF6   11 01 00               LD   DE,1   
2EF9   B7                     OR   A   
2EFA   ED 52                  SBC   HL,DE   
2EFC   7D                     LD   A,L   
2EFD   B4                     OR   H   
2EFE   CA 63 2F               JP   Z,expectM_0_2781S50   
2F01   CD 77 0B               CALL   printStr   
2F04   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
2F1C   CD 77 0B               CALL   printStr   
2F1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F2E   21 01 00               LD   hl,1   
2F31   E5                     PUSH   hl   
2F32   CD 3C 0C               CALL   run   
2F35   2E 00                  .CSTR   "."   
2F37   CD 77 0B               CALL   printStr   
2F3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F47   E1                     POP   hl   
2F48   E5                     PUSH   hl   
2F49   E5                     PUSH   hl   
2F4A   CD 3C 0C               CALL   run   
2F4D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2F61   76                     HALT      
2F62   00                     .CSTR      
2F63                EXPECTM_0_2781S50:      
2F63   E1                     POP   HL   
2F64                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
2F64   31 80 44               LD   SP,STACK   
2F67   CD 7E 0B               CALL   init   
2F6A   CD F4 43               CALL   execStr   
2F6D   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
2F80                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
2F80   E1                     POP   HL   
2F81   E5                     PUSH   HL   
2F82   11 02 00               LD   DE,2   
2F85   B7                     OR   A   
2F86   ED 52                  SBC   HL,DE   
2F88   7D                     LD   A,L   
2F89   B4                     OR   H   
2F8A   CA F0 2F               JP   Z,expectM_0_2782S50   
2F8D   CD 77 0B               CALL   printStr   
2F90   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
2FA9   CD 77 0B               CALL   printStr   
2FAC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FBB   21 02 00               LD   hl,2   
2FBE   E5                     PUSH   hl   
2FBF   CD 3C 0C               CALL   run   
2FC2   2E 00                  .CSTR   "."   
2FC4   CD 77 0B               CALL   printStr   
2FC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FD4   E1                     POP   hl   
2FD5   E5                     PUSH   hl   
2FD6   E5                     PUSH   hl   
2FD7   CD 3C 0C               CALL   run   
2FDA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2FEE   76                     HALT      
2FEF   00                     .CSTR      
2FF0                EXPECTM_0_2782S50:      
2FF0   E1                     POP   HL   
2FF1                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
2FF1   31 80 44               LD   SP,STACK   
2FF4   CD 7E 0B               CALL   init   
2FF7   CD F4 43               CALL   execStr   
2FFA   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
300E                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
300E   E1                     POP   HL   
300F   E5                     PUSH   HL   
3010   11 02 00               LD   DE,2   
3013   B7                     OR   A   
3014   ED 52                  SBC   HL,DE   
3016   7D                     LD   A,L   
3017   B4                     OR   H   
3018   CA 7F 30               JP   Z,expectM_0_2783S50   
301B   CD 77 0B               CALL   printStr   
301E   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
3038   CD 77 0B               CALL   printStr   
303B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
304A   21 02 00               LD   hl,2   
304D   E5                     PUSH   hl   
304E   CD 3C 0C               CALL   run   
3051   2E 00                  .CSTR   "."   
3053   CD 77 0B               CALL   printStr   
3056   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3063   E1                     POP   hl   
3064   E5                     PUSH   hl   
3065   E5                     PUSH   hl   
3066   CD 3C 0C               CALL   run   
3069   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
307D   76                     HALT      
307E   00                     .CSTR      
307F                EXPECTM_0_2783S50:      
307F   E1                     POP   HL   
3080                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
3080   31 80 44               LD   SP,STACK   
3083   CD 7E 0B               CALL   init   
3086   CD F4 43               CALL   execStr   
3089   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
309C                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
309C   E1                     POP   HL   
309D   E5                     PUSH   HL   
309E   11 02 00               LD   DE,2   
30A1   B7                     OR   A   
30A2   ED 52                  SBC   HL,DE   
30A4   7D                     LD   A,L   
30A5   B4                     OR   H   
30A6   CA 0C 31               JP   Z,expectM_0_2784S50   
30A9   CD 77 0B               CALL   printStr   
30AC   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
30C5   CD 77 0B               CALL   printStr   
30C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30D7   21 02 00               LD   hl,2   
30DA   E5                     PUSH   hl   
30DB   CD 3C 0C               CALL   run   
30DE   2E 00                  .CSTR   "."   
30E0   CD 77 0B               CALL   printStr   
30E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30F0   E1                     POP   hl   
30F1   E5                     PUSH   hl   
30F2   E5                     PUSH   hl   
30F3   CD 3C 0C               CALL   run   
30F6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
310A   76                     HALT      
310B   00                     .CSTR      
310C                EXPECTM_0_2784S50:      
310C   E1                     POP   HL   
310D                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
310D   31 80 44               LD   SP,STACK   
3110   CD 7E 0B               CALL   init   
3113   CD F4 43               CALL   execStr   
3116   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
3130                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
3130   E1                     POP   HL   
3131   E5                     PUSH   HL   
3132   11 05 00               LD   DE,5   
3135   B7                     OR   A   
3136   ED 52                  SBC   HL,DE   
3138   7D                     LD   A,L   
3139   B4                     OR   H   
313A   CA A7 31               JP   Z,expectM_0_2785S50   
313D   CD 77 0B               CALL   printStr   
3140   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
3160   CD 77 0B               CALL   printStr   
3163   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3172   21 05 00               LD   hl,5   
3175   E5                     PUSH   hl   
3176   CD 3C 0C               CALL   run   
3179   2E 00                  .CSTR   "."   
317B   CD 77 0B               CALL   printStr   
317E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
318B   E1                     POP   hl   
318C   E5                     PUSH   hl   
318D   E5                     PUSH   hl   
318E   CD 3C 0C               CALL   run   
3191   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
31A5   76                     HALT      
31A6   00                     .CSTR      
31A7                EXPECTM_0_2785S50:      
31A7   E1                     POP   HL   
31A8                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
31A8   31 80 44               LD   SP,STACK   
31AB   CD 7E 0B               CALL   init   
31AE   CD F4 43               CALL   execStr   
31B1   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
31C2                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
31C2   E1                     POP   HL   
31C3   E5                     PUSH   HL   
31C4   11 02 00               LD   DE,2   
31C7   B7                     OR   A   
31C8   ED 52                  SBC   HL,DE   
31CA   7D                     LD   A,L   
31CB   B4                     OR   H   
31CC   CA 30 32               JP   Z,expectM_0_2786S50   
31CF   CD 77 0B               CALL   printStr   
31D2   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
31E9   CD 77 0B               CALL   printStr   
31EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31FB   21 02 00               LD   hl,2   
31FE   E5                     PUSH   hl   
31FF   CD 3C 0C               CALL   run   
3202   2E 00                  .CSTR   "."   
3204   CD 77 0B               CALL   printStr   
3207   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3214   E1                     POP   hl   
3215   E5                     PUSH   hl   
3216   E5                     PUSH   hl   
3217   CD 3C 0C               CALL   run   
321A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
322E   76                     HALT      
322F   00                     .CSTR      
3230                EXPECTM_0_2786S50:      
3230   E1                     POP   HL   
3231                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
3231   31 80 44               LD   SP,STACK   
3234   CD 7E 0B               CALL   init   
3237   CD F4 43               CALL   execStr   
323A   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
3251                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
3251   E1                     POP   HL   
3252   E5                     PUSH   HL   
3253   11 64 00               LD   DE,100   
3256   B7                     OR   A   
3257   ED 52                  SBC   HL,DE   
3259   7D                     LD   A,L   
325A   B4                     OR   H   
325B   CA C5 32               JP   Z,expectM_0_2787S50   
325E   CD 77 0B               CALL   printStr   
3261   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
327E   CD 77 0B               CALL   printStr   
3281   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3290   21 64 00               LD   hl,100   
3293   E5                     PUSH   hl   
3294   CD 3C 0C               CALL   run   
3297   2E 00                  .CSTR   "."   
3299   CD 77 0B               CALL   printStr   
329C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32A9   E1                     POP   hl   
32AA   E5                     PUSH   hl   
32AB   E5                     PUSH   hl   
32AC   CD 3C 0C               CALL   run   
32AF   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
32C3   76                     HALT      
32C4   00                     .CSTR      
32C5                EXPECTM_0_2787S50:      
32C5   E1                     POP   HL   
32C6                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
32C6   31 80 44               LD   SP,STACK   
32C9   CD 7E 0B               CALL   init   
32CC   CD F4 43               CALL   execStr   
32CF   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
32E7                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
32E7   E1                     POP   HL   
32E8   E5                     PUSH   HL   
32E9   11 01 00               LD   DE,1   
32EC   B7                     OR   A   
32ED   ED 52                  SBC   HL,DE   
32EF   7D                     LD   A,L   
32F0   B4                     OR   H   
32F1   CA 5C 33               JP   Z,expectM_0_2788S50   
32F4   CD 77 0B               CALL   printStr   
32F7   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
3315   CD 77 0B               CALL   printStr   
3318   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3327   21 01 00               LD   hl,1   
332A   E5                     PUSH   hl   
332B   CD 3C 0C               CALL   run   
332E   2E 00                  .CSTR   "."   
3330   CD 77 0B               CALL   printStr   
3333   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3340   E1                     POP   hl   
3341   E5                     PUSH   hl   
3342   E5                     PUSH   hl   
3343   CD 3C 0C               CALL   run   
3346   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
335A   76                     HALT      
335B   00                     .CSTR      
335C                EXPECTM_0_2788S50:      
335C   E1                     POP   HL   
335D                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
335D   31 80 44               LD   SP,STACK   
3360   CD 7E 0B               CALL   init   
3363   CD F4 43               CALL   execStr   
3366   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
337F                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
337F   E1                     POP   HL   
3380   E5                     PUSH   HL   
3381   11 02 00               LD   DE,2   
3384   B7                     OR   A   
3385   ED 52                  SBC   HL,DE   
3387   7D                     LD   A,L   
3388   B4                     OR   H   
3389   CA F5 33               JP   Z,expectM_0_2789S50   
338C   CD 77 0B               CALL   printStr   
338F   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
33AE   CD 77 0B               CALL   printStr   
33B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33C0   21 02 00               LD   hl,2   
33C3   E5                     PUSH   hl   
33C4   CD 3C 0C               CALL   run   
33C7   2E 00                  .CSTR   "."   
33C9   CD 77 0B               CALL   printStr   
33CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33D9   E1                     POP   hl   
33DA   E5                     PUSH   hl   
33DB   E5                     PUSH   hl   
33DC   CD 3C 0C               CALL   run   
33DF   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
33F3   76                     HALT      
33F4   00                     .CSTR      
33F5                EXPECTM_0_2789S50:      
33F5   E1                     POP   HL   
33F6                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
33F6   31 80 44               LD   SP,STACK   
33F9   CD 7E 0B               CALL   init   
33FC   CD F4 43               CALL   execStr   
33FF   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
341E                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
341E   E1                     POP   HL   
341F   E5                     PUSH   HL   
3420   11 0B 00               LD   DE,11   
3423   B7                     OR   A   
3424   ED 52                  SBC   HL,DE   
3426   7D                     LD   A,L   
3427   B4                     OR   H   
3428   CA 9A 34               JP   Z,expectM_0_2790S50   
342B   CD 77 0B               CALL   printStr   
342E   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
3453   CD 77 0B               CALL   printStr   
3456   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3465   21 0B 00               LD   hl,11   
3468   E5                     PUSH   hl   
3469   CD 3C 0C               CALL   run   
346C   2E 00                  .CSTR   "."   
346E   CD 77 0B               CALL   printStr   
3471   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
347E   E1                     POP   hl   
347F   E5                     PUSH   hl   
3480   E5                     PUSH   hl   
3481   CD 3C 0C               CALL   run   
3484   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3498   76                     HALT      
3499   00                     .CSTR      
349A                EXPECTM_0_2790S50:      
349A   E1                     POP   HL   
349B                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
349B   31 80 44               LD   SP,STACK   
349E   CD 7E 0B               CALL   init   
34A1   CD F4 43               CALL   execStr   
34A4   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
34C3                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
34C3   E1                     POP   HL   
34C4   E5                     PUSH   HL   
34C5   11 15 00               LD   DE,21   
34C8   B7                     OR   A   
34C9   ED 52                  SBC   HL,DE   
34CB   7D                     LD   A,L   
34CC   B4                     OR   H   
34CD   CA 3F 35               JP   Z,expectM_0_2791S50   
34D0   CD 77 0B               CALL   printStr   
34D3   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
34F8   CD 77 0B               CALL   printStr   
34FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
350A   21 15 00               LD   hl,21   
350D   E5                     PUSH   hl   
350E   CD 3C 0C               CALL   run   
3511   2E 00                  .CSTR   "."   
3513   CD 77 0B               CALL   printStr   
3516   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3523   E1                     POP   hl   
3524   E5                     PUSH   hl   
3525   E5                     PUSH   hl   
3526   CD 3C 0C               CALL   run   
3529   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
353D   76                     HALT      
353E   00                     .CSTR      
353F                EXPECTM_0_2791S50:      
353F   E1                     POP   HL   
3540                          ;*Macro unroll:  test "[10 20 30] 1%", 20
3540   31 80 44               LD   SP,STACK   
3543   CD 7E 0B               CALL   init   
3546   CD F4 43               CALL   execStr   
3549   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3557                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3557   E1                     POP   HL   
3558   E5                     PUSH   HL   
3559   11 14 00               LD   DE,20   
355C   B7                     OR   A   
355D   ED 52                  SBC   HL,DE   
355F   7D                     LD   A,L   
3560   B4                     OR   H   
3561   CA C2 35               JP   Z,expectM_0_2792S50   
3564   CD 77 0B               CALL   printStr   
3567   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
357B   CD 77 0B               CALL   printStr   
357E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
358D   21 14 00               LD   hl,20   
3590   E5                     PUSH   hl   
3591   CD 3C 0C               CALL   run   
3594   2E 00                  .CSTR   "."   
3596   CD 77 0B               CALL   printStr   
3599   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35A6   E1                     POP   hl   
35A7   E5                     PUSH   hl   
35A8   E5                     PUSH   hl   
35A9   CD 3C 0C               CALL   run   
35AC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
35C0   76                     HALT      
35C1   00                     .CSTR      
35C2                EXPECTM_0_2792S50:      
35C2   E1                     POP   HL   
35C3                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
35C3   31 80 44               LD   SP,STACK   
35C6   CD 7E 0B               CALL   init   
35C9   CD F4 43               CALL   execStr   
35CC   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
35DA                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
35DA   E1                     POP   HL   
35DB   E5                     PUSH   HL   
35DC   11 02 00               LD   DE,2   
35DF   B7                     OR   A   
35E0   ED 52                  SBC   HL,DE   
35E2   7D                     LD   A,L   
35E3   B4                     OR   H   
35E4   CA 45 36               JP   Z,expectM_0_2793S50   
35E7   CD 77 0B               CALL   printStr   
35EA   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
35FE   CD 77 0B               CALL   printStr   
3601   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3610   21 02 00               LD   hl,2   
3613   E5                     PUSH   hl   
3614   CD 3C 0C               CALL   run   
3617   2E 00                  .CSTR   "."   
3619   CD 77 0B               CALL   printStr   
361C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3629   E1                     POP   hl   
362A   E5                     PUSH   hl   
362B   E5                     PUSH   hl   
362C   CD 3C 0C               CALL   run   
362F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3643   76                     HALT      
3644   00                     .CSTR      
3645                EXPECTM_0_2793S50:      
3645   E1                     POP   HL   
3646                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
3646   31 80 44               LD   SP,STACK   
3649   CD 7E 0B               CALL   init   
364C   CD F4 43               CALL   execStr   
364F   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
3663                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
3663   E1                     POP   HL   
3664   E5                     PUSH   HL   
3665   11 42 00               LD   DE,66   
3668   B7                     OR   A   
3669   ED 52                  SBC   HL,DE   
366B   7D                     LD   A,L   
366C   B4                     OR   H   
366D   CA D4 36               JP   Z,expectM_0_2794S50   
3670   CD 77 0B               CALL   printStr   
3673   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
368D   CD 77 0B               CALL   printStr   
3690   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
369F   21 42 00               LD   hl,66   
36A2   E5                     PUSH   hl   
36A3   CD 3C 0C               CALL   run   
36A6   2E 00                  .CSTR   "."   
36A8   CD 77 0B               CALL   printStr   
36AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36B8   E1                     POP   hl   
36B9   E5                     PUSH   hl   
36BA   E5                     PUSH   hl   
36BB   CD 3C 0C               CALL   run   
36BE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
36D2   76                     HALT      
36D3   00                     .CSTR      
36D4                EXPECTM_0_2794S50:      
36D4   E1                     POP   HL   
36D5                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
36D5   31 80 44               LD   SP,STACK   
36D8   CD 7E 0B               CALL   init   
36DB   CD F4 43               CALL   execStr   
36DE   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
36F2                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
36F2   E1                     POP   HL   
36F3   E5                     PUSH   HL   
36F4   11 0A 00               LD   DE,10   
36F7   B7                     OR   A   
36F8   ED 52                  SBC   HL,DE   
36FA   7D                     LD   A,L   
36FB   B4                     OR   H   
36FC   CA 63 37               JP   Z,expectM_0_2795S50   
36FF   CD 77 0B               CALL   printStr   
3702   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
371C   CD 77 0B               CALL   printStr   
371F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
372E   21 0A 00               LD   hl,10   
3731   E5                     PUSH   hl   
3732   CD 3C 0C               CALL   run   
3735   2E 00                  .CSTR   "."   
3737   CD 77 0B               CALL   printStr   
373A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3747   E1                     POP   hl   
3748   E5                     PUSH   hl   
3749   E5                     PUSH   hl   
374A   CD 3C 0C               CALL   run   
374D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3761   76                     HALT      
3762   00                     .CSTR      
3763                EXPECTM_0_2795S50:      
3763   E1                     POP   HL   
3764                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
3764   31 80 44               LD   SP,STACK   
3767   CD 7E 0B               CALL   init   
376A   CD F4 43               CALL   execStr   
376D   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
3789                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
3789   E1                     POP   HL   
378A   E5                     PUSH   HL   
378B   11 0A 00               LD   DE,10   
378E   B7                     OR   A   
378F   ED 52                  SBC   HL,DE   
3791   7D                     LD   A,L   
3792   B4                     OR   H   
3793   CA 02 38               JP   Z,expectM_0_2796S50   
3796   CD 77 0B               CALL   printStr   
3799   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
37BB   CD 77 0B               CALL   printStr   
37BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37CD   21 0A 00               LD   hl,10   
37D0   E5                     PUSH   hl   
37D1   CD 3C 0C               CALL   run   
37D4   2E 00                  .CSTR   "."   
37D6   CD 77 0B               CALL   printStr   
37D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37E6   E1                     POP   hl   
37E7   E5                     PUSH   hl   
37E8   E5                     PUSH   hl   
37E9   CD 3C 0C               CALL   run   
37EC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3800   76                     HALT      
3801   00                     .CSTR      
3802                EXPECTM_0_2796S50:      
3802   E1                     POP   HL   
3803                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
3803   31 80 44               LD   SP,STACK   
3806   CD 7E 0B               CALL   init   
3809   CD F4 43               CALL   execStr   
380C   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
382C                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
382C   E1                     POP   HL   
382D   E5                     PUSH   HL   
382E   11 0A 00               LD   DE,10   
3831   B7                     OR   A   
3832   ED 52                  SBC   HL,DE   
3834   7D                     LD   A,L   
3835   B4                     OR   H   
3836   CA A9 38               JP   Z,expectM_0_2797S50   
3839   CD 77 0B               CALL   printStr   
383C   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3862   CD 77 0B               CALL   printStr   
3865   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3874   21 0A 00               LD   hl,10   
3877   E5                     PUSH   hl   
3878   CD 3C 0C               CALL   run   
387B   2E 00                  .CSTR   "."   
387D   CD 77 0B               CALL   printStr   
3880   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
388D   E1                     POP   hl   
388E   E5                     PUSH   hl   
388F   E5                     PUSH   hl   
3890   CD 3C 0C               CALL   run   
3893   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
38A7   76                     HALT      
38A8   00                     .CSTR      
38A9                EXPECTM_0_2797S50:      
38A9   E1                     POP   HL   
38AA                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
38AA   31 80 44               LD   SP,STACK   
38AD   CD 7E 0B               CALL   init   
38B0   CD F4 43               CALL   execStr   
38B3   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
38D3                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
38D3   E1                     POP   HL   
38D4   E5                     PUSH   HL   
38D5   11 14 00               LD   DE,20   
38D8   B7                     OR   A   
38D9   ED 52                  SBC   HL,DE   
38DB   7D                     LD   A,L   
38DC   B4                     OR   H   
38DD   CA 50 39               JP   Z,expectM_0_2798S50   
38E0   CD 77 0B               CALL   printStr   
38E3   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3909   CD 77 0B               CALL   printStr   
390C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
391B   21 14 00               LD   hl,20   
391E   E5                     PUSH   hl   
391F   CD 3C 0C               CALL   run   
3922   2E 00                  .CSTR   "."   
3924   CD 77 0B               CALL   printStr   
3927   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3934   E1                     POP   hl   
3935   E5                     PUSH   hl   
3936   E5                     PUSH   hl   
3937   CD 3C 0C               CALL   run   
393A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
394E   76                     HALT      
394F   00                     .CSTR      
3950                EXPECTM_0_2798S50:      
3950   E1                     POP   HL   
3951                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
3951   31 80 44               LD   SP,STACK   
3954   CD 7E 0B               CALL   init   
3957   CD F4 43               CALL   execStr   
395A   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
396E                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
396E   E1                     POP   HL   
396F   E5                     PUSH   HL   
3970   11 04 00               LD   DE,4   
3973   B7                     OR   A   
3974   ED 52                  SBC   HL,DE   
3976   7D                     LD   A,L   
3977   B4                     OR   H   
3978   CA DF 39               JP   Z,expectM_0_2799S50   
397B   CD 77 0B               CALL   printStr   
397E   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
3998   CD 77 0B               CALL   printStr   
399B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39AA   21 04 00               LD   hl,4   
39AD   E5                     PUSH   hl   
39AE   CD 3C 0C               CALL   run   
39B1   2E 00                  .CSTR   "."   
39B3   CD 77 0B               CALL   printStr   
39B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39C3   E1                     POP   hl   
39C4   E5                     PUSH   hl   
39C5   E5                     PUSH   hl   
39C6   CD 3C 0C               CALL   run   
39C9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
39DD   76                     HALT      
39DE   00                     .CSTR      
39DF                EXPECTM_0_2799S50:      
39DF   E1                     POP   HL   
39E0                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
39E0   31 80 44               LD   SP,STACK   
39E3   CD 7E 0B               CALL   init   
39E6   CD F4 43               CALL   execStr   
39E9   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
3A03                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
3A03   E1                     POP   HL   
3A04   E5                     PUSH   HL   
3A05   11 09 00               LD   DE,9   
3A08   B7                     OR   A   
3A09   ED 52                  SBC   HL,DE   
3A0B   7D                     LD   A,L   
3A0C   B4                     OR   H   
3A0D   CA 7A 3A               JP   Z,expectM_0_2800S50   
3A10   CD 77 0B               CALL   printStr   
3A13   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
3A33   CD 77 0B               CALL   printStr   
3A36   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A45   21 09 00               LD   hl,9   
3A48   E5                     PUSH   hl   
3A49   CD 3C 0C               CALL   run   
3A4C   2E 00                  .CSTR   "."   
3A4E   CD 77 0B               CALL   printStr   
3A51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A5E   E1                     POP   hl   
3A5F   E5                     PUSH   hl   
3A60   E5                     PUSH   hl   
3A61   CD 3C 0C               CALL   run   
3A64   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3A78   76                     HALT      
3A79   00                     .CSTR      
3A7A                EXPECTM_0_2800S50:      
3A7A   E1                     POP   HL   
3A7B                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3A7B   31 80 44               LD   SP,STACK   
3A7E   CD 7E 0B               CALL   init   
3A81   CD F4 43               CALL   execStr   
3A84   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3A9C                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3A9C   E1                     POP   HL   
3A9D   E5                     PUSH   HL   
3A9E   11 06 00               LD   DE,6   
3AA1   B7                     OR   A   
3AA2   ED 52                  SBC   HL,DE   
3AA4   7D                     LD   A,L   
3AA5   B4                     OR   H   
3AA6   CA 11 3B               JP   Z,expectM_0_2801S50   
3AA9   CD 77 0B               CALL   printStr   
3AAC   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3ACA   CD 77 0B               CALL   printStr   
3ACD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3ADC   21 06 00               LD   hl,6   
3ADF   E5                     PUSH   hl   
3AE0   CD 3C 0C               CALL   run   
3AE3   2E 00                  .CSTR   "."   
3AE5   CD 77 0B               CALL   printStr   
3AE8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AF5   E1                     POP   hl   
3AF6   E5                     PUSH   hl   
3AF7   E5                     PUSH   hl   
3AF8   CD 3C 0C               CALL   run   
3AFB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3B0F   76                     HALT      
3B10   00                     .CSTR      
3B11                EXPECTM_0_2801S50:      
3B11   E1                     POP   HL   
3B12                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
3B12   31 80 44               LD   SP,STACK   
3B15   CD 7E 0B               CALL   init   
3B18   CD F4 43               CALL   execStr   
3B1B   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
3B36                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
3B36   E1                     POP   HL   
3B37   E5                     PUSH   HL   
3B38   11 02 00               LD   DE,2   
3B3B   B7                     OR   A   
3B3C   ED 52                  SBC   HL,DE   
3B3E   7D                     LD   A,L   
3B3F   B4                     OR   H   
3B40   CA AE 3B               JP   Z,expectM_0_2802S50   
3B43   CD 77 0B               CALL   printStr   
3B46   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
3B67   CD 77 0B               CALL   printStr   
3B6A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B79   21 02 00               LD   hl,2   
3B7C   E5                     PUSH   hl   
3B7D   CD 3C 0C               CALL   run   
3B80   2E 00                  .CSTR   "."   
3B82   CD 77 0B               CALL   printStr   
3B85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B92   E1                     POP   hl   
3B93   E5                     PUSH   hl   
3B94   E5                     PUSH   hl   
3B95   CD 3C 0C               CALL   run   
3B98   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3BAC   76                     HALT      
3BAD   00                     .CSTR      
3BAE                EXPECTM_0_2802S50:      
3BAE   E1                     POP   HL   
3BAF                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3BAF   31 80 44               LD   SP,STACK   
3BB2   CD 7E 0B               CALL   init   
3BB5   CD F4 43               CALL   execStr   
3BB8   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3BDE                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
3BDE   E1                     POP   HL   
3BDF   E5                     PUSH   HL   
3BE0   11 0A 00               LD   DE,10   
3BE3   B7                     OR   A   
3BE4   ED 52                  SBC   HL,DE   
3BE6   7D                     LD   A,L   
3BE7   B4                     OR   H   
3BE8   CA 61 3C               JP   Z,expectM_0_2803S50   
3BEB   CD 77 0B               CALL   printStr   
3BEE   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3C1A   CD 77 0B               CALL   printStr   
3C1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C2C   21 0A 00               LD   hl,10   
3C2F   E5                     PUSH   hl   
3C30   CD 3C 0C               CALL   run   
3C33   2E 00                  .CSTR   "."   
3C35   CD 77 0B               CALL   printStr   
3C38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C45   E1                     POP   hl   
3C46   E5                     PUSH   hl   
3C47   E5                     PUSH   hl   
3C48   CD 3C 0C               CALL   run   
3C4B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3C5F   76                     HALT      
3C60   00                     .CSTR      
3C61                EXPECTM_0_2803S50:      
3C61   E1                     POP   HL   
3C62                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
3C62   31 80 44               LD   SP,STACK   
3C65   CD 7E 0B               CALL   init   
3C68   CD F4 43               CALL   execStr   
3C6B   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
3C77                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
3C77   E1                     POP   HL   
3C78   E5                     PUSH   HL   
3C79   11 00 00               LD   DE,NUL   
3C7C   B7                     OR   A   
3C7D   ED 52                  SBC   HL,DE   
3C7F   7D                     LD   A,L   
3C80   B4                     OR   H   
3C81   CA E0 3C               JP   Z,expectM_0_2804S50   
3C84   CD 77 0B               CALL   printStr   
3C87   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
3C99   CD 77 0B               CALL   printStr   
3C9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CAB   21 00 00               LD   hl,NUL   
3CAE   E5                     PUSH   hl   
3CAF   CD 3C 0C               CALL   run   
3CB2   2E 00                  .CSTR   "."   
3CB4   CD 77 0B               CALL   printStr   
3CB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CC4   E1                     POP   hl   
3CC5   E5                     PUSH   hl   
3CC6   E5                     PUSH   hl   
3CC7   CD 3C 0C               CALL   run   
3CCA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3CDE   76                     HALT      
3CDF   00                     .CSTR      
3CE0                EXPECTM_0_2804S50:      
3CE0   E1                     POP   HL   
3CE1                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
3CE1   31 80 44               LD   SP,STACK   
3CE4   CD 7E 0B               CALL   init   
3CE7   CD F4 43               CALL   execStr   
3CEA   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
3CF6                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
3CF6   E1                     POP   HL   
3CF7   E5                     PUSH   HL   
3CF8   11 00 00               LD   DE,NUL   
3CFB   B7                     OR   A   
3CFC   ED 52                  SBC   HL,DE   
3CFE   7D                     LD   A,L   
3CFF   B4                     OR   H   
3D00   CA 5F 3D               JP   Z,expectM_0_2805S50   
3D03   CD 77 0B               CALL   printStr   
3D06   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
3D18   CD 77 0B               CALL   printStr   
3D1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D2A   21 00 00               LD   hl,NUL   
3D2D   E5                     PUSH   hl   
3D2E   CD 3C 0C               CALL   run   
3D31   2E 00                  .CSTR   "."   
3D33   CD 77 0B               CALL   printStr   
3D36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D43   E1                     POP   hl   
3D44   E5                     PUSH   hl   
3D45   E5                     PUSH   hl   
3D46   CD 3C 0C               CALL   run   
3D49   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3D5D   76                     HALT      
3D5E   00                     .CSTR      
3D5F                EXPECTM_0_2805S50:      
3D5F   E1                     POP   HL   
3D60                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
3D60   31 80 44               LD   SP,STACK   
3D63   CD 7E 0B               CALL   init   
3D66   CD F4 43               CALL   execStr   
3D69   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
3D75                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
3D75   E1                     POP   HL   
3D76   E5                     PUSH   HL   
3D77   11 00 00               LD   DE,NUL   
3D7A   B7                     OR   A   
3D7B   ED 52                  SBC   HL,DE   
3D7D   7D                     LD   A,L   
3D7E   B4                     OR   H   
3D7F   CA DE 3D               JP   Z,expectM_0_2806S50   
3D82   CD 77 0B               CALL   printStr   
3D85   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
3D97   CD 77 0B               CALL   printStr   
3D9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DA9   21 00 00               LD   hl,NUL   
3DAC   E5                     PUSH   hl   
3DAD   CD 3C 0C               CALL   run   
3DB0   2E 00                  .CSTR   "."   
3DB2   CD 77 0B               CALL   printStr   
3DB5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DC2   E1                     POP   hl   
3DC3   E5                     PUSH   hl   
3DC4   E5                     PUSH   hl   
3DC5   CD 3C 0C               CALL   run   
3DC8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3DDC   76                     HALT      
3DDD   00                     .CSTR      
3DDE                EXPECTM_0_2806S50:      
3DDE   E1                     POP   HL   
3DDF                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
3DDF   31 80 44               LD   SP,STACK   
3DE2   CD 7E 0B               CALL   init   
3DE5   CD F4 43               CALL   execStr   
3DE8   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
3DF4                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
3DF4   E1                     POP   HL   
3DF5   E5                     PUSH   HL   
3DF6   11 00 00               LD   DE,NUL   
3DF9   B7                     OR   A   
3DFA   ED 52                  SBC   HL,DE   
3DFC   7D                     LD   A,L   
3DFD   B4                     OR   H   
3DFE   CA 5D 3E               JP   Z,expectM_0_2807S50   
3E01   CD 77 0B               CALL   printStr   
3E04   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
3E16   CD 77 0B               CALL   printStr   
3E19   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E28   21 00 00               LD   hl,NUL   
3E2B   E5                     PUSH   hl   
3E2C   CD 3C 0C               CALL   run   
3E2F   2E 00                  .CSTR   "."   
3E31   CD 77 0B               CALL   printStr   
3E34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E41   E1                     POP   hl   
3E42   E5                     PUSH   hl   
3E43   E5                     PUSH   hl   
3E44   CD 3C 0C               CALL   run   
3E47   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3E5B   76                     HALT      
3E5C   00                     .CSTR      
3E5D                EXPECTM_0_2807S50:      
3E5D   E1                     POP   HL   
3E5E                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
3E5E   31 80 44               LD   SP,STACK   
3E61   CD 7E 0B               CALL   init   
3E64   CD F4 43               CALL   execStr   
3E67   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
3E6F                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
3E6F   E1                     POP   HL   
3E70   E5                     PUSH   HL   
3E71   11 66 45               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3E74   B7                     OR   A   
3E75   ED 52                  SBC   HL,DE   
3E77   7D                     LD   A,L   
3E78   B4                     OR   H   
3E79   CA D4 3E               JP   Z,expectM_0_2808S50   
3E7C   CD 77 0B               CALL   printStr   
3E7F   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
3E8D   CD 77 0B               CALL   printStr   
3E90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E9F   21 66 45               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3EA2   E5                     PUSH   hl   
3EA3   CD 3C 0C               CALL   run   
3EA6   2E 00                  .CSTR   "."   
3EA8   CD 77 0B               CALL   printStr   
3EAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EB8   E1                     POP   hl   
3EB9   E5                     PUSH   hl   
3EBA   E5                     PUSH   hl   
3EBB   CD 3C 0C               CALL   run   
3EBE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3ED2   76                     HALT      
3ED3   00                     .CSTR      
3ED4                EXPECTM_0_2808S50:      
3ED4   E1                     POP   HL   
3ED5                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
3ED5   31 80 44               LD   SP,STACK   
3ED8   CD 7E 0B               CALL   init   
3EDB   CD F4 43               CALL   execStr   
3EDE   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
3EE6                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
3EE6   E1                     POP   HL   
3EE7   E5                     PUSH   HL   
3EE8   11 34 45               LD   DE,VARS + ("Z"-"A"+1)*2   
3EEB   B7                     OR   A   
3EEC   ED 52                  SBC   HL,DE   
3EEE   7D                     LD   A,L   
3EEF   B4                     OR   H   
3EF0   CA 4B 3F               JP   Z,expectM_0_2809S50   
3EF3   CD 77 0B               CALL   printStr   
3EF6   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
3F04   CD 77 0B               CALL   printStr   
3F07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F16   21 34 45               LD   hl,VARS + ("Z"-"A"+1)*2   
3F19   E5                     PUSH   hl   
3F1A   CD 3C 0C               CALL   run   
3F1D   2E 00                  .CSTR   "."   
3F1F   CD 77 0B               CALL   printStr   
3F22   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F2F   E1                     POP   hl   
3F30   E5                     PUSH   hl   
3F31   E5                     PUSH   hl   
3F32   CD 3C 0C               CALL   run   
3F35   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3F49   76                     HALT      
3F4A   00                     .CSTR      
3F4B                EXPECTM_0_2809S50:      
3F4B   E1                     POP   HL   
3F4C                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
3F4C   31 80 44               LD   SP,STACK   
3F4F   CD 7E 0B               CALL   init   
3F52   CD F4 43               CALL   execStr   
3F55   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
3F5D                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
3F5D   E1                     POP   HL   
3F5E   E5                     PUSH   HL   
3F5F   11 32 45               LD   DE,VARS + ("Z"-"A")*2   
3F62   B7                     OR   A   
3F63   ED 52                  SBC   HL,DE   
3F65   7D                     LD   A,L   
3F66   B4                     OR   H   
3F67   CA C2 3F               JP   Z,expectM_0_2810S50   
3F6A   CD 77 0B               CALL   printStr   
3F6D   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
3F7B   CD 77 0B               CALL   printStr   
3F7E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F8D   21 32 45               LD   hl,VARS + ("Z"-"A")*2   
3F90   E5                     PUSH   hl   
3F91   CD 3C 0C               CALL   run   
3F94   2E 00                  .CSTR   "."   
3F96   CD 77 0B               CALL   printStr   
3F99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FA6   E1                     POP   hl   
3FA7   E5                     PUSH   hl   
3FA8   E5                     PUSH   hl   
3FA9   CD 3C 0C               CALL   run   
3FAC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3FC0   76                     HALT      
3FC1   00                     .CSTR      
3FC2                EXPECTM_0_2810S50:      
3FC2   E1                     POP   HL   
3FC3                          ;*Macro unroll:  test "'A' /ad", VARS
3FC3   31 80 44               LD   SP,STACK   
3FC6   CD 7E 0B               CALL   init   
3FC9   CD F4 43               CALL   execStr   
3FCC   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
3FD4                          ;*Macro unroll:  expect "'A' /ad",VARS
3FD4   E1                     POP   HL   
3FD5   E5                     PUSH   HL   
3FD6   11 00 45               LD   DE,VARS   
3FD9   B7                     OR   A   
3FDA   ED 52                  SBC   HL,DE   
3FDC   7D                     LD   A,L   
3FDD   B4                     OR   H   
3FDE   CA 39 40               JP   Z,expectM_0_2811S50   
3FE1   CD 77 0B               CALL   printStr   
3FE4   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
3FF2   CD 77 0B               CALL   printStr   
3FF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4004   21 00 45               LD   hl,VARS   
4007   E5                     PUSH   hl   
4008   CD 3C 0C               CALL   run   
400B   2E 00                  .CSTR   "."   
400D   CD 77 0B               CALL   printStr   
4010   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
401D   E1                     POP   hl   
401E   E5                     PUSH   hl   
401F   E5                     PUSH   hl   
4020   CD 3C 0C               CALL   run   
4023   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4037   76                     HALT      
4038   00                     .CSTR      
4039                EXPECTM_0_2811S50:      
4039   E1                     POP   HL   
403A                          ;*Macro unroll:  test "-1 /bd/vB/c 0%", $2D
403A   31 80 44               LD   SP,STACK   
403D   CD 7E 0B               CALL   init   
4040   CD F4 43               CALL   execStr   
4043   2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "-1 /bd/vB/c 0%"   
4052                          ;*Macro unroll:  expect "-1 /bd/vB/c 0%",$2D
4052   E1                     POP   HL   
4053   E5                     PUSH   HL   
4054   11 2D 00               LD   DE,$2D   
4057   B7                     OR   A   
4058   ED 52                  SBC   HL,DE   
405A   7D                     LD   A,L   
405B   B4                     OR   H   
405C   CA BE 40               JP   Z,expectM_0_2812S50   
405F   CD 77 0B               CALL   printStr   
4062   43 6F 64 65 3A 20 2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","-1 /bd/vB/c 0%"   
4077   CD 77 0B               CALL   printStr   
407A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4089   21 2D 00               LD   hl,$2D   
408C   E5                     PUSH   hl   
408D   CD 3C 0C               CALL   run   
4090   2E 00                  .CSTR   "."   
4092   CD 77 0B               CALL   printStr   
4095   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40A2   E1                     POP   hl   
40A3   E5                     PUSH   hl   
40A4   E5                     PUSH   hl   
40A5   CD 3C 0C               CALL   run   
40A8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
40BC   76                     HALT      
40BD   00                     .CSTR      
40BE                EXPECTM_0_2812S50:      
40BE   E1                     POP   HL   
40BF                          ;*Macro unroll:  test "`A` /bs/vB/c 0%", 65
40BF   31 80 44               LD   SP,STACK   
40C2   CD 7E 0B               CALL   init   
40C5   CD F4 43               CALL   execStr   
40C8   60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "`A` /bs/vB/c 0%"   
40D8                          ;*Macro unroll:  expect "`A` /bs/vB/c 0%",65
40D8   E1                     POP   HL   
40D9   E5                     PUSH   HL   
40DA   11 41 00               LD   DE,65   
40DD   B7                     OR   A   
40DE   ED 52                  SBC   HL,DE   
40E0   7D                     LD   A,L   
40E1   B4                     OR   H   
40E2   CA 45 41               JP   Z,expectM_0_2813S50   
40E5   CD 77 0B               CALL   printStr   
40E8   43 6F 64 65 3A 20 60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","`A` /bs/vB/c 0%"   
40FE   CD 77 0B               CALL   printStr   
4101   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4110   21 41 00               LD   hl,65   
4113   E5                     PUSH   hl   
4114   CD 3C 0C               CALL   run   
4117   2E 00                  .CSTR   "."   
4119   CD 77 0B               CALL   printStr   
411C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4129   E1                     POP   hl   
412A   E5                     PUSH   hl   
412B   E5                     PUSH   hl   
412C   CD 3C 0C               CALL   run   
412F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4143   76                     HALT      
4144   00                     .CSTR      
4145                EXPECTM_0_2813S50:      
4145   E1                     POP   HL   
4146                          ;*Macro unroll:  test "123 /bd", 3
4146   31 80 44               LD   SP,STACK   
4149   CD 7E 0B               CALL   init   
414C   CD F4 43               CALL   execStr   
414F   31 32 33 20 2F 62 64 00 .CSTR   "123 /bd"   
4157                          ;*Macro unroll:  expect "123 /bd",3
4157   E1                     POP   HL   
4158   E5                     PUSH   HL   
4159   11 03 00               LD   DE,3   
415C   B7                     OR   A   
415D   ED 52                  SBC   HL,DE   
415F   7D                     LD   A,L   
4160   B4                     OR   H   
4161   CA BC 41               JP   Z,expectM_0_2814S50   
4164   CD 77 0B               CALL   printStr   
4167   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 00 .CSTR   "Code: ","123 /bd"   
4175   CD 77 0B               CALL   printStr   
4178   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4187   21 03 00               LD   hl,3   
418A   E5                     PUSH   hl   
418B   CD 3C 0C               CALL   run   
418E   2E 00                  .CSTR   "."   
4190   CD 77 0B               CALL   printStr   
4193   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41A0   E1                     POP   hl   
41A1   E5                     PUSH   hl   
41A2   E5                     PUSH   hl   
41A3   CD 3C 0C               CALL   run   
41A6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
41BA   76                     HALT      
41BB   00                     .CSTR      
41BC                EXPECTM_0_2814S50:      
41BC   E1                     POP   HL   
41BD                          ;*Macro unroll:  test "123 /bd/vB/c 1%", $32
41BD   31 80 44               LD   SP,STACK   
41C0   CD 7E 0B               CALL   init   
41C3   CD F4 43               CALL   execStr   
41C6   31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "123 /bd/vB/c 1%"   
41D6                          ;*Macro unroll:  expect "123 /bd/vB/c 1%",$32
41D6   E1                     POP   HL   
41D7   E5                     PUSH   HL   
41D8   11 32 00               LD   DE,$32   
41DB   B7                     OR   A   
41DC   ED 52                  SBC   HL,DE   
41DE   7D                     LD   A,L   
41DF   B4                     OR   H   
41E0   CA 43 42               JP   Z,expectM_0_2815S50   
41E3   CD 77 0B               CALL   printStr   
41E6   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "Code: ","123 /bd/vB/c 1%"   
41FC   CD 77 0B               CALL   printStr   
41FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
420E   21 32 00               LD   hl,$32   
4211   E5                     PUSH   hl   
4212   CD 3C 0C               CALL   run   
4215   2E 00                  .CSTR   "."   
4217   CD 77 0B               CALL   printStr   
421A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4227   E1                     POP   hl   
4228   E5                     PUSH   hl   
4229   E5                     PUSH   hl   
422A   CD 3C 0C               CALL   run   
422D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4241   76                     HALT      
4242   00                     .CSTR      
4243                EXPECTM_0_2815S50:      
4243   E1                     POP   HL   
4244                          ;*Macro unroll:  test "123/bd ` x `/bs 456/bd + + ", 9
4244   31 80 44               LD   SP,STACK   
4247   CD 7E 0B               CALL   init   
424A   CD F4 43               CALL   execStr   
424D   31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "123/bd ` x `/bs 456/bd + + "   
4269                          ;*Macro unroll:  expect "123/bd ` x `/bs 456/bd + + ",9
4269   E1                     POP   HL   
426A   E5                     PUSH   HL   
426B   11 09 00               LD   DE,9   
426E   B7                     OR   A   
426F   ED 52                  SBC   HL,DE   
4271   7D                     LD   A,L   
4272   B4                     OR   H   
4273   CA E2 42               JP   Z,expectM_0_2816S50   
4276   CD 77 0B               CALL   printStr   
4279   43 6F 64 65 3A 20 31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "Code: ","123/bd ` x `/bs 456/bd + + "   
429B   CD 77 0B               CALL   printStr   
429E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42AD   21 09 00               LD   hl,9   
42B0   E5                     PUSH   hl   
42B1   CD 3C 0C               CALL   run   
42B4   2E 00                  .CSTR   "."   
42B6   CD 77 0B               CALL   printStr   
42B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42C6   E1                     POP   hl   
42C7   E5                     PUSH   hl   
42C8   E5                     PUSH   hl   
42C9   CD 3C 0C               CALL   run   
42CC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
42E0   76                     HALT      
42E1   00                     .CSTR      
42E2                EXPECTM_0_2816S50:      
42E2   E1                     POP   HL   
42E3                          ;*Macro unroll:  test "#4321 /bh", 4
42E3   31 80 44               LD   SP,STACK   
42E6   CD 7E 0B               CALL   init   
42E9   CD F4 43               CALL   execStr   
42EC   23 34 33 32 31 20 2F 62 68 00 .CSTR   "#4321 /bh"   
42F6                          ;*Macro unroll:  expect "#4321 /bh",4
42F6   E1                     POP   HL   
42F7   E5                     PUSH   HL   
42F8   11 04 00               LD   DE,4   
42FB   B7                     OR   A   
42FC   ED 52                  SBC   HL,DE   
42FE   7D                     LD   A,L   
42FF   B4                     OR   H   
4300   CA 5D 43               JP   Z,expectM_0_2817S50   
4303   CD 77 0B               CALL   printStr   
4306   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 00 .CSTR   "Code: ","#4321 /bh"   
4316   CD 77 0B               CALL   printStr   
4319   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4328   21 04 00               LD   hl,4   
432B   E5                     PUSH   hl   
432C   CD 3C 0C               CALL   run   
432F   2E 00                  .CSTR   "."   
4331   CD 77 0B               CALL   printStr   
4334   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4341   E1                     POP   hl   
4342   E5                     PUSH   hl   
4343   E5                     PUSH   hl   
4344   CD 3C 0C               CALL   run   
4347   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
435B   76                     HALT      
435C   00                     .CSTR      
435D                EXPECTM_0_2817S50:      
435D   E1                     POP   HL   
435E                          ;*Macro unroll:  test "#4321 /bh/vB/c 0%", $34
435E   31 80 44               LD   SP,STACK   
4361   CD 7E 0B               CALL   init   
4364   CD F4 43               CALL   execStr   
4367   23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "#4321 /bh/vB/c 0%"   
4379                          ;*Macro unroll:  expect "#4321 /bh/vB/c 0%",$34
4379   E1                     POP   HL   
437A   E5                     PUSH   HL   
437B   11 34 00               LD   DE,$34   
437E   B7                     OR   A   
437F   ED 52                  SBC   HL,DE   
4381   7D                     LD   A,L   
4382   B4                     OR   H   
4383   CA E8 43               JP   Z,expectM_0_2818S50   
4386   CD 77 0B               CALL   printStr   
4389   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","#4321 /bh/vB/c 0%"   
43A1   CD 77 0B               CALL   printStr   
43A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43B3   21 34 00               LD   hl,$34   
43B6   E5                     PUSH   hl   
43B7   CD 3C 0C               CALL   run   
43BA   2E 00                  .CSTR   "."   
43BC   CD 77 0B               CALL   printStr   
43BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43CC   E1                     POP   hl   
43CD   E5                     PUSH   hl   
43CE   E5                     PUSH   hl   
43CF   CD 3C 0C               CALL   run   
43D2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
43E6   76                     HALT      
43E7   00                     .CSTR      
43E8                EXPECTM_0_2818S50:      
43E8   E1                     POP   HL   
43E9                             ; 
43E9   CD 77 0B               CALL   printStr   
43EC   44 6F 6E 65 21 00      .CSTR   "Done!"   
43F2   76                     HALT      
43F3                          ALIGN   2   
43F4                             ; printer:
43F4                             ;     pop hl
43F4                             ;     call prtdec
43F4                             ;     jp (ix)
43F4                             ; executes a null teminated string (null executes exit_)
43F4                             ; the string should be immedaitely following the call
43F4                EXECSTR:      ; create a root stack frame
43F4   C1                     POP   bc   ; bc = code*
43F5   0B                     DEC   bc   ; dec to prepare for next routine
43F6   11 00 00               LD   de,0   
43F9   D5                     PUSH   de   ; push fake IP
43FA   D5                     PUSH   de   ; push null arg_list*
43FB   D5                     PUSH   de   ; push null first_arg*
43FC   D5                     PUSH   de   ; push fake BP
43FD   DD E9                  JP   (ix)   
43FF                          ALIGN   $100   
4400                             ; .org RAMSTART
4400                          DS   DSIZE   
4480                STACK:       
4480                          ALIGN   $100   
4500                VARS:        
4500                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
45D0                RESTARTS:      
45D0                RST08:    DS   2   
45D2                RST10:    DS   2   
45D4                RST18:    DS   2   
45D6                RST20:    DS   2   
45D8                RST28:    DS   2   
45DA                RST30:    DS   2   ; 
45DC                BAUD:     DS   2   ; 
45DE                INTVEC:   DS   2   ; 
45E0                NMIVEC:   DS   2   ; 
45E2                GETCVEC:   DS   2   ; 
45E4                PUTCVEC:   DS   2   ; 
45E6                SYSVARS:      
45E6                             ; initialised sys variables (preserved)
45E6                VDATAWIDTH:   DS   2   ; 
45E8                VTIBPTR:   DS   2   ; 
45EA                VBUFPTR:   DS   2   ; 
45EC                VNEXT:    DS   2   ; 
45EE                VHEAPPTR:   DS   2   ; 
45F0                             ; uninitialised sys variables (preserved)
45F0                VPOINTER:   DS   2   ; 
45F2                VREMAIN:   DS   2   ; 
45F4                VSAVEDIP:   DS   2   ; 
45F6                VSAVEDSP:   DS   2   ; 
45F8                VSAVEDBP:   DS   2   ; 
45FA                VCHECKSUM:   DS   2   ; 
45FC                             ; uninitialised sys variables (unpreserved)
45FC                VTEMP1:   DS   2   ; 
45FE                VTEMP2:   DS   2   ; 
4600                VLASTDEF:   DS   2   ; 
4602                VHASHSTR:   DS   2   ; 
4604                TBPTR:    DS   2   ; reserved for tests
4606                          ALIGN   $100   
4700                TIB:      DS   TIBSIZE   
4800                BUF:      DS   BUFSIZE   
4900                          ALIGN   $100   
4900                PAD:      DS   $100   
4A00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 59 IN MAIN.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AE8 DEFINED AT LINE 1741 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 30 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 54 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 55 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 23 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 27 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 28 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
Z80_RST8:           00CF DEFINED AT LINE 32 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 64 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 69 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
OPCODESBASE:        0200 DEFINED AT LINE 78 IN MAIN.asm
CTRLCODES:          0200 DEFINED AT LINE 80 IN MAIN.asm
OPCODES:            0220 DEFINED AT LINE 114 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 217 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 219 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 221 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 223 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 225 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 227 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 229 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 231 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 233 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 235 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 237 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 239 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 241 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 243 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 245 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 247 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 249 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 251 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 253 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 255 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 257 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 262 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 264 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 266 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 268 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 270 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 272 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 274 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 287 IN MAIN.asm
LPAREN_:            036D DEFINED AT LINE 295 IN MAIN.asm
LT_:                0370 DEFINED AT LINE 297 IN MAIN.asm
LT1:                0379 DEFINED AT LINE 304 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
SLASH_:             0382 DEFINED AT LINE 309 IN MAIN.asm
NOP_:               0385 DEFINED AT LINE 311 IN MAIN.asm
RPAREN_:            0387 DEFINED AT LINE 313 IN MAIN.asm
PLUS:               038A DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
ADD:                038A DEFINED AT LINE 320 IN MAIN.asm
ADD1:               0395 DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
ADD3:               0399 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
AT:                 039C DEFINED AT LINE 344 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
ADDR:               039C DEFINED AT LINE 345 IN MAIN.asm
AMPER:              03A6 DEFINED AT LINE 350 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
AND:                03A6 DEFINED AT LINE 351 IN MAIN.asm
AND1:               03AD DEFINED AT LINE 359 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
PIPE:               03B1 DEFINED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
OR:                 03B1 DEFINED AT LINE 365 IN MAIN.asm
XOR:                03BA DEFINED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
XOR1:               03BB DEFINED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 389 IN MAIN.asm
INVERT:             03C5 DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
DOLLAR:             03CA DEFINED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
ARG:                03CA DEFINED AT LINE 395 IN MAIN.asm
ARG0:               03E8 DEFINED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
ARG0A:              03F1 DEFINED AT LINE 424 IN MAIN.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
ARG1:               03F6 DEFINED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
ARG1A:              03FE DEFINED AT LINE 434 IN MAIN.asm
                    > USED AT LINE 426 IN MAIN.asm
LBRACK:             0401 DEFINED AT LINE 438 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
ARRBEGIN:           0401 DEFINED AT LINE 439 IN MAIN.asm
RBRACK:             041D DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
ARREND:             041D DEFINED AT LINE 454 IN MAIN.asm
ARREND1:            0437 DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARREND2:            0447 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 476 IN MAIN.asm
ARRINDEX:           046B DEFINED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
ARRINDEX0:          0473 DEFINED AT LINE 513 IN MAIN.asm
ARRINDEX1:          0474 DEFINED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
ARRINDEX2:          0480 DEFINED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ASSIGN:             0483 DEFINED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 280 IN MAIN.asm
ASSIGN0:            0485 DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
ASSIGNX:            0486 DEFINED AT LINE 534 IN MAIN.asm
ASSIGN1:            0492 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
COLON:              0494 DEFINED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 248 IN MAIN.asm
ARGLIST:            0494 DEFINED AT LINE 550 IN MAIN.asm
ARGLIST1:           049E DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
ARGLIST1A:          04A6 DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
ARGLIST2:           04AE DEFINED AT LINE 568 IN MAIN.asm
ARGLIST3:           04B6 DEFINED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
ARGLIST4:           04B9 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
ARGLIST5:           04BF DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
LBRACE:             04CB DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
BLOCK:              04CB DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
BLOCK1:             04CF DEFINED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCK2:             04FB DEFINED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
BLOCK3:             04FE DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
BLOCK4:             0506 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
BLOCK5:             0509 DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
BLOCK6:             0531 DEFINED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
RBRACE:             0534 DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
BLOCKEND:           0534 DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
BLOCKEND1:          0566 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
BLOCKEND2:          0572 DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
BLOCKEND3:          0584 DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
TICK:               0590 DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
CHAR:               0590 DEFINED AT LINE 715 IN MAIN.asm
CHAR1:              0593 DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
CHAR2:              059F DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
CHAR3:              05A2 DEFINED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
BACKSLASH:          05A5 DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
COMMA:              05A7 DEFINED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
DISCARD:            05A7 DEFINED AT LINE 739 IN MAIN.asm
DISCARD1:           05B4 DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
SLASH:              05B6 DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
DOT:                05D4 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
DOTHEX:             05E9 DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
DOTHEX_BLOCK:       05F2 DEFINED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
DOTSTR:             05FD DEFINED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
DOTSTR_BLOCK:       0606 DEFINED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
DOTCHAR:            0611 DEFINED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
DOTCHAR_BLOCK:      061A DEFINED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
DOTDEC:             0625 DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DOTDEC_BLOCK:       062E DEFINED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
DIVIDE:             0639 DEFINED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
DIVIDE1:            063E DEFINED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
DIVIDE2:            064B DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
DIVIDE3:            064C DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
EQUALS:             0652 DEFINED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 285 IN MAIN.asm
LESSTHANEQ:         065A DEFINED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
LESSTHAN:           065F DEFINED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 308 IN MAIN.asm
LESSTHAN1:          0664 DEFINED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
TRUE1:              0667 DEFINED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
NULL1:              066D DEFINED AT LINE 864 IN MAIN.asm
FALSE1:             066D DEFINED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
LPAREN:             0673 DEFINED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
CARET:              0676 DEFINED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
GO:                 0676 DEFINED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
GO1:                0677 DEFINED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 1057 IN MAIN.asm
GO2:                067D DEFINED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOBLOCK:            0689 DEFINED AT LINE 892 IN MAIN.asm
GOBLOCK1:           0689 DEFINED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
GOBLOCK2:           06AE DEFINED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
GOFUNC:             06BC DEFINED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
GOFUNC1:            06D5 DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
GOFUNC2:            06DB DEFINED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
GOFUNC3:            06E6 DEFINED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
GOFUNC4:            06FE DEFINED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
GOFUNC5:            0702 DEFINED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
GOFUNC6:            0705 DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
GOFUNC7:            0708 DEFINED AT LINE 979 IN MAIN.asm
GOFUNC8:            070D DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
HASH:               0718 DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
HEXNUM:             0718 DEFINED AT LINE 995 IN MAIN.asm
HEXNUM1:            071B DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
HEXNUM2:            0723 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
UPCASE:             0735 DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
LOWCASE:            073A DEFINED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
IDENT1:             073F DEFINED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 1018 IN MAIN.asm
QUESTION:           074C DEFINED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
IF:                 074C DEFINED AT LINE 1037 IN MAIN.asm
IFTE:               0758 DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
IFTE1:              0759 DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
STAR:               0765 DEFINED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
MUL:                0765 DEFINED AT LINE 1060 IN MAIN.asm
MUL2:               0767 DEFINED AT LINE 1063 IN MAIN.asm
MUL3:               076F DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
NUM:                0781 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
NUM0:               078A DEFINED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
NUM1:               078B DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
NUM2:               07A3 DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
NUM3:               07AE DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
UNDERSCORE:         07B1 DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
REMAIN:             07B1 DEFINED AT LINE 1120 IN MAIN.asm
RPAREN:             07B7 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
SEMICOLON:          07BF DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTLEFT:          07DB DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
SHIFTLEFT1:         07E3 DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
SHIFTLEFT2:         07E4 DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
SHIFTRIGHT:         07EB DEFINED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
SHIFTRIGHT1:        07F3 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
SHIFTRIGHT2:        07F7 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
DBLQUOTE:           07FE DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 271 IN MAIN.asm
STRING:             07FE DEFINED AT LINE 1192 IN MAIN.asm
STRING1:            0807 DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
STRING2:            080A DEFINED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
STRING3:            0813 DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
MINUS:              0826 DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
SUB:                0832 DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
SUB1:               083C DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
COMMAND:            0845 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
ERROR1:             088A DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
COMMENT:            0891 DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
COMMAND_A:          089A DEFINED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
ABSOLUTE:           08A9 DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
ADDROF:             08B6 DEFINED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
ADDROF1:            08CA DEFINED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
ADDROF2:            08D5 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1335 IN MAIN.asm
COMMAND_B:          08D7 DEFINED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
BUFFERCHAR:         08FA DEFINED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
BUFFERDEC:          0909 DEFINED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
BUFFERDEC0:         0921 DEFINED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 1384 IN MAIN.asm
BUFFERDEC1:         0931 DEFINED AT LINE 1411 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
BUFFERDEC2:         0951 DEFINED AT LINE 1425 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1423 IN MAIN.asm
BUFFERDEC3:         0953 DEFINED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
BUFFERDEC4:         0963 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
BUFFERDEC5:         0964 DEFINED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
BUFFERHEX:          096A DEFINED AT LINE 1451 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
BUFFERHEX1:         0985 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
BUFFERHEX2:         098E DEFINED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
BREAK:              0999 DEFINED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
BREAK1:             09A0 DEFINED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
BUFFERSTRING:       09B3 DEFINED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
BUFFERSTRING0:      09BA DEFINED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
BUFFERSTRING1:      09BD DEFINED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
BUFFERXSPACES:      09CF DEFINED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
BUFFERXSPACES1:     09D6 DEFINED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
BUFFERXSPACES2:     09DA DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
COMMAND_P:          09E3 DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
PARTIAL:            09FC DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
PRINTCHARS:         0A1C DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
PRINTCHARS1:        0A22 DEFINED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
PRINTCHARS2:        0A24 DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
PRINTSTACK:         0A2E DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
PRINTX:             0A30 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
PRINTX_BLOCK:       0A39 DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
COMMAND_V:          0A5B DEFINED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
CONSTBUFSTART:      0A7E DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
CONSTHEAPSTART:     0A83 DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
CONSTTIBSTART:      0A88 DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
VARBUFPTR:          0A8D DEFINED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1637 IN MAIN.asm
VARHEAPPTR:         0A96 DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
VARTIBPTR:          0A9F DEFINED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
VARIABLE:           0AA8 DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
CONSTANT:           0AAB DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
COMMAND_I:          0AAE DEFINED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
CHARS:              0ABD DEFINED AT LINE 1693 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
CHARS1:             0AC0 DEFINED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
INPUT:              0AC5 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
KEY:                0AD0 DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
OUTPUT:             0AD9 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
NUMBERS:            0AE2 DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
FILTER:             0AE8 DEFINED AT LINE 1739 IN MAIN.asm
MAP:                0AE8 DEFINED AT LINE 1740 IN MAIN.asm
ZPRT:               0AEA DEFINED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
ZPRT_ARGS:          0AF5 DEFINED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
ZPRT_BLOCK:         0AF7 DEFINED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
ARGS0A1L_:          0B1E DEFINED AT LINE 1759 IN MAIN.asm
ARGS0A1L:           0B20 DEFINED AT LINE 1762 IN MAIN.asm
ARGS1A0L_:          0B21 DEFINED AT LINE 1765 IN MAIN.asm
ARGS1A0L:           0B23 DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
ARGS1A1L_:          0B24 DEFINED AT LINE 1771 IN MAIN.asm
ARGS1A1L:           0B26 DEFINED AT LINE 1774 IN MAIN.asm
ARGS2A0L_:          0B28 DEFINED AT LINE 1777 IN MAIN.asm
ARGS2A0L:           0B2A DEFINED AT LINE 1780 IN MAIN.asm
PRTSTR0:            0B2C DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
PRTSTR:             0B30 DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
NESTING:            0B35 DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
NESTING0:           0B3F DEFINED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
NESTING1A:          0B46 DEFINED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
NESTING1:           0B49 DEFINED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
NESTING2:           0B58 DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
NESTING3:           0B5A DEFINED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
NESTING4:           0B65 DEFINED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
PROMPT:             0B67 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
CRLF:               0B70 DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
PRINTSTR:           0B77 DEFINED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 141
INIT:               0B7E DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
INIT0:              0B97 DEFINED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
START:              0B9C DEFINED AT LINE 1951 IN MAIN.asm
INTERPRET:          0BB2 DEFINED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
INTERPRET2:         0BBE DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
INTERPRET3:         0BC6 DEFINED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
INTERPRET4:         0BCC DEFINED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
INTERPRET5:         0BD1 DEFINED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
INTERPRET5A:        0BF4 DEFINED AT LINE 2019 IN MAIN.asm
INTERPRET6:         0BF6 DEFINED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
INTERPRET7:         0C04 DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
INTERPRET8:         0C17 DEFINED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
NEXT:               0C22 DEFINED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 73 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
NEXT1:              0C31 DEFINED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
EXIT:               0C38 DEFINED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
RUN:                0C3C DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
ERROR:              0C40 DEFINED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
BACKSPACE_:         0C53 DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
EDIT_:              0C63 DEFINED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
REEDIT_:            0C7B DEFINED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
PRINTSTACK_:        0C7E DEFINED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2708S50:  0D6C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2709S50:  0DD9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2710S50:  0E44 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2711S50:  0EAF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2712S50:  0F1A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2713S50:  0F85 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2714S50:  0FF2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2715S50:  1061 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2716S50:  10CE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2717S50:  113B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2718S50:  11AA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2719S50:  121B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2720S50:  128A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2721S50:  12F9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2722S50:  136E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2723S50:  13E3 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2724S50:  1456 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2725S50:  14CD DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2726S50:  1548 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2727S50:  15C1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2728S50:  1634 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2729S50:  16AF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2730S50:  1726 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2731S50:  1799 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2732S50:  180C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2733S50:  1887 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2734S50:  18FA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2735S50:  196D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2736S50:  19E2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2737S50:  1A67 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2738S50:  1ADA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2739S50:  1B55 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2740S50:  1BC8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2741S50:  1C3F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2742S50:  1CB2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2743S50:  1D27 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2744S50:  1D9C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2745S50:  1E0F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2746S50:  1E82 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2747S50:  1EF5 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2748S50:  1F68 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2749S50:  1FDB DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2750S50:  204E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2751S50:  20C1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2752S50:  2134 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2753S50:  21A9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2754S50:  221E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2755S50:  2293 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2756S50:  230A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2757S50:  2381 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2758S50:  23F2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2759S50:  2463 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2760S50:  24DA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2761S50:  2557 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2762S50:  25D4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2763S50:  2655 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2764S50:  26E0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2765S50:  276B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2766S50:  27DE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2767S50:  2853 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2768S50:  28CA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2769S50:  2943 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2770S50:  29BA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2771S50:  2A2F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2772S50:  2AA6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2773S50:  2B23 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2774S50:  2BA4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2775S50:  2C21 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2776S50:  2CA8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2777S50:  2D31 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2778S50:  2DC0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2779S50:  2E53 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2780S50:  2ED8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2781S50:  2F63 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2782S50:  2FF0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2783S50:  307F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2784S50:  310C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2785S50:  31A7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2786S50:  3230 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2787S50:  32C5 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2788S50:  335C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2789S50:  33F5 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2790S50:  349A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2791S50:  353F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2792S50:  35C2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2793S50:  3645 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2794S50:  36D4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2795S50:  3763 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2796S50:  3802 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2797S50:  38A9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2798S50:  3950 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2799S50:  39DF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2800S50:  3A7A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2801S50:  3B11 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2802S50:  3BAE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2803S50:  3C61 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2804S50:  3CE0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2805S50:  3D5F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2806S50:  3DDE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2807S50:  3E5D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2808S50:  3ED4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2809S50:  3F4B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2810S50:  3FC2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2811S50:  4039 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2812S50:  40BE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2813S50:  4145 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2814S50:  41BC DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2815S50:  4243 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2816S50:  42E2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2817S50:  435D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2818S50:  43E8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXECSTR:            43F4 DEFINED AT LINE 153
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
STACK:              4480 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
VARS:               4500 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           45D0 DEFINED AT LINE 11 IN ram.asm
RST08:              45D0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              45D2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              45D4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              45D6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              45D8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              45DA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               45DC DEFINED AT LINE 19 IN ram.asm
INTVEC:             45DE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             45E0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            45E2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            45E4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            45E6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1939 IN MAIN.asm
VDATAWIDTH:         45E6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
VTIBPTR:            45E8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
VBUFPTR:            45EA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1664 IN MAIN.asm
VNEXT:              45EC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1936 IN MAIN.asm
VHEAPPTR:           45EE DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
VPOINTER:           45F0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 346 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
VREMAIN:            45F2 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
VSAVEDIP:           45F4 DEFINED AT LINE 40 IN ram.asm
VSAVEDSP:           45F6 DEFINED AT LINE 41 IN ram.asm
VSAVEDBP:           45F8 DEFINED AT LINE 42 IN ram.asm
VCHECKSUM:          45FA DEFINED AT LINE 43 IN ram.asm
VTEMP1:             45FC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1564 IN MAIN.asm
VTEMP2:             45FE DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
VLASTDEF:           4600 DEFINED AT LINE 49 IN ram.asm
VHASHSTR:           4602 DEFINED AT LINE 50 IN ram.asm
TBPTR:              4604 DEFINED AT LINE 51 IN ram.asm
TIB:                4700 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 71 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
BUF:                4800 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 72 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
PAD:                4900 DEFINED AT LINE 58 IN ram.asm
HEAP:               4A00 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 74 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
