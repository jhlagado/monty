0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 50               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 50               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 50               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 50               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 50               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 50               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 50               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 50               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 50               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 50               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4E               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 50               LD   (RST08),HL   
0094   22 D2 50               LD   (RST10),HL   
0097   22 D4 50               LD   (RST18),HL   
009A   22 D6 50               LD   (RST20),HL   
009D   22 D8 50               LD   (RST28),HL   
00A0   22 DA 50               LD   (RST30),HL   
00A3   22 DE 50               LD   (INTVEC),HL   
00A6   22 E0 50               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 50               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 50               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0E               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   3E                     DB   lsb(bang_)   ; !
0181   F3                     DB   lsb(dquote_)   ; "
0182   EA                     DB   lsb(hash_)   ; #
0183   C0                     DB   lsb(dollar_)   ; $
0184   C9                     DB   lsb(percent_)   ; %
0185   20                     DB   lsb(amper_)   ; &
0186   D2                     DB   lsb(tick_)   ; '
0187   CC                     DB   lsb(lparen_)   ; (
0188   BD                     DB   lsb(rparen_)   ; )
0189   E7                     DB   lsb(star_)   ; *
018A   04                     DB   lsb(plus_)   ; +
018B   F0                     DB   lsb(comma_)   ; ,
018C   4E                     DB   lsb(minus_)   ; -
018D   D8                     DB   lsb(dot_)   ; .
018E   FF                     DB   lsb(slash_)   ; /	
018F   6B                     DB   lsb(num_)   ; 0
0190   6B                     DB   lsb(num_)   ; 1
0191   6B                     DB   lsb(num_)   ; 2
0192   6B                     DB   lsb(num_)   ; 3
0193   6B                     DB   lsb(num_)   ; 4
0194   6B                     DB   lsb(num_)   ; 5
0195   6B                     DB   lsb(num_)   ; 6
0196   6B                     DB   lsb(num_)   ; 7
0197   6B                     DB   lsb(num_)   ; 8
0198   6B                     DB   lsb(num_)   ; 9
0199   DB                     DB   lsb(colon_)   ; :
019A   D5                     DB   lsb(semicolon_)   ; ;
019B   86                     DB   lsb(lt_)   ; <
019C   6E                     DB   lsb(eq_)   ; =
019D   7B                     DB   lsb(gt_)   ; >
019E   E4                     DB   lsb(question_)   ; ?
019F   34                     DB   lsb(at_)   ; @
01A0   DE                     DB   lsb(upcase_)   ; A
01A1   DE                     DB   lsb(upcase_)   ; B
01A2   DE                     DB   lsb(upcase_)   ; C
01A3   DE                     DB   lsb(upcase_)   ; D
01A4   DE                     DB   lsb(upcase_)   ; E
01A5   DE                     DB   lsb(upcase_)   ; F
01A6   DE                     DB   lsb(upcase_)   ; G
01A7   DE                     DB   lsb(upcase_)   ; h
01A8   DE                     DB   lsb(upcase_)   ; I
01A9   DE                     DB   lsb(upcase_)   ; J
01AA   DE                     DB   lsb(upcase_)   ; K
01AB   DE                     DB   lsb(upcase_)   ; L
01AC   DE                     DB   lsb(upcase_)   ; M
01AD   DE                     DB   lsb(upcase_)   ; N
01AE   DE                     DB   lsb(upcase_)   ; O
01AF   DE                     DB   lsb(upcase_)   ; p
01B0   DE                     DB   lsb(upcase_)   ; Q
01B1   DE                     DB   lsb(upcase_)   ; R
01B2   DE                     DB   lsb(upcase_)   ; S
01B3   DE                     DB   lsb(upcase_)   ; T
01B4   DE                     DB   lsb(upcase_)   ; U
01B5   DE                     DB   lsb(upcase_)   ; V
01B6   DE                     DB   lsb(upcase_)   ; W
01B7   DE                     DB   lsb(upcase_)   ; X
01B8   DE                     DB   lsb(upcase_)   ; Y
01B9   DE                     DB   lsb(upcase_)   ; Z
01BA   C3                     DB   lsb(lbrack_)   ; [
01BB   F6                     DB   lsb(backslash_)   ; \
01BC   C6                     DB   lsb(rbrack_)   ; ]
01BD   ED                     DB   lsb(caret_)   ; ^
01BE   F9                     DB   lsb(underscore_)   ; _
01BF   F3                     DB   lsb(dquote_)   ; `     used for testing string   	
01C0   E1                     DB   lsb(lowcase_)   ; a
01C1   E1                     DB   lsb(lowcase_)   ; b
01C2   E1                     DB   lsb(lowcase_)   ; c
01C3   E1                     DB   lsb(lowcase_)   ; d
01C4   E1                     DB   lsb(lowcase_)   ; e
01C5   E1                     DB   lsb(lowcase_)   ; f
01C6   E1                     DB   lsb(lowcase_)   ; g
01C7   E1                     DB   lsb(lowcase_)   ; h
01C8   E1                     DB   lsb(lowcase_)   ; i
01C9   E1                     DB   lsb(lowcase_)   ; j
01CA   E1                     DB   lsb(lowcase_)   ; k
01CB   E1                     DB   lsb(lowcase_)   ; l
01CC   E1                     DB   lsb(lowcase_)   ; m
01CD   E1                     DB   lsb(lowcase_)   ; n
01CE   E1                     DB   lsb(lowcase_)   ; o
01CF   E1                     DB   lsb(lowcase_)   ; p
01D0   E1                     DB   lsb(lowcase_)   ; q
01D1   E1                     DB   lsb(lowcase_)   ; r
01D2   E1                     DB   lsb(lowcase_)   ; s
01D3   E1                     DB   lsb(lowcase_)   ; t
01D4   E1                     DB   lsb(lowcase_)   ; u
01D5   E1                     DB   lsb(lowcase_)   ; v
01D6   E1                     DB   lsb(lowcase_)   ; w
01D7   E1                     DB   lsb(lowcase_)   ; x
01D8   E1                     DB   lsb(lowcase_)   ; y
01D9   E1                     DB   lsb(lowcase_)   ; z
01DA   CC                     DB   lsb(lbrace_)   ; {
01DB   2B                     DB   lsb(pipe_)   ; |
01DC   CF                     DB   lsb(rbrace_)   ; }
01DD   FC                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4E                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 4F                  DW   BUF   ; vBUFPtr pointer into BUF
01E6   38 0D                  DW   next   ; nNext
01E8   1E 51                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; unused
01EE   00 00                  DW   0   ; unused
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN *********************************************
0204                PLUS_:       ; add the top 2 members of the stack
0204                ADD:         
0204   03                     INC   bc   
0205   0A                     LD   a,(bc)   
0206   FE 2B                  CP   "+"   ; ++ increment variable
0208   20 05                  JR   nz,add1   
020A   E1                     POP   hl   
020B   23                     INC   hl   
020C   C3 31 08               JP   assign0   
020F                ADD1:        
020F   0B                     DEC   bc   
0210   D1                     POP   de   ; second term
0211   E1                     POP   hl   ; first term
0212   19                     ADD   hl,de   
0213                ADD3:        
0213   03                     INC   bc   
0214   0A                     LD   a,(bc)   
0215   FE 3D                  CP   "="   
0217   28 04                  JR   z,add4   
0219   0B                     DEC   bc   
021A   E5                     PUSH   hl   
021B   DD E9                  JP   (ix)   
021D                ADD4:        
021D   C3 31 08               JP   assign0   
0220                AMPER_:      
0220                AND:         
0220   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0221   E1                     POP   hl   
0222   7B                     LD   a,e   
0223   A5                     AND   l   
0224   6F                     LD   l,a   
0225   7A                     LD   a,d   
0226   A4                     AND   h   
0227                AND1:        
0227   67                     LD   h,a   
0228   E5                     PUSH   hl   
0229   DD E9                  JP   (ix)   
022B                PIPE_:       
022B                OR:          
022B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
022C   E1                     POP   hl   
022D   7B                     LD   a,e   
022E   B5                     OR   l   
022F   6F                     LD   l,a   
0230   7A                     LD   a,d   
0231   B4                     OR   h   
0232   18 F3                  JR   and1   
0234                             ; @ addr
0234                             ; -- ptr
0234                AT_:         
0234                ADDR:        
0234   ED 5B F4 50            LD   de,(vPointer)   
0238   21 F4 50               LD   hl,vPointer   
023B   C3 9C 04               JP   variable   
023E                BANG_:       ; logical invert, any non zero value
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3D                  CP   "="   
0242   20 04                  JR   nz,not   
0244   E1                     POP   hl   
0245   D1                     POP   de   
0246   18 55                  JR   notequals   
0248                NOT:         
0248   0B                     DEC   bc   
0249   21 00 00               LD   hl,0   ; is considered true
024C   18 2A                  JR   eq1   
024E                MINUS_:      
024E   03                     INC   bc   ; check if sign of a number
024F   0A                     LD   a,(bc)   
0250   0B                     DEC   bc   
0251   FE 30                  CP   "0"   
0253   38 04                  JR   c,sub   
0255   FE 3A                  CP   "9"+1   
0257   38 12                  JR   c,num_   
0259                SUB:         ; Subtract the value 2nd on stack from top of stack
0259   03                     INC   bc   
025A   FE 2D                  CP   "-"   
025C   20 05                  JR   nz,sub1   
025E   E1                     POP   hl   
025F   2B                     DEC   hl   
0260   C3 31 08               JP   assign0   
0263                SUB1:        
0263   0B                     DEC   bc   
0264   D1                     POP   de   
0265   E1                     POP   hl   
0266   B7                     OR   a   
0267   ED 52                  SBC   hl,de   
0269   18 A8                  JR   add3   
026B                NUM_:        
026B   C3 34 0B               JP   num   
026E                EQ_:         
026E   CD EF 0B               CALL   jumpTable   
0271   3D                     DB   "="   
0272   77                     DB   lsb(eq0_)   
0273   00                     DB   NUL   
0274   C3 2F 08               JP   assign   
0277                EQ0_:        
0277   E1                     POP   hl   
0278                EQ1:         
0278   D1                     POP   de   
0279   18 1B                  JR   equals   
027B                GT_:         
027B   03                     INC   bc   
027C   0A                     LD   a,(bc)   
027D   FE 3E                  CP   ">"   
027F   CA 7C 0B               JP   z,shiftRight   
0282   D1                     POP   de   
0283   E1                     POP   hl   
0284   18 09                  JR   lt1   
0286                LT_:         
0286   03                     INC   bc   
0287   0A                     LD   a,(bc)   
0288   FE 3C                  CP   "<"   
028A   CA 6C 0B               JP   z,shiftLeft   
028D   E1                     POP   hl   
028E   D1                     POP   de   
028F                LT1:         
028F   FE 3D                  CP   "="   
0291   28 11                  JR   z,lessthaneq   
0293   0B                     DEC   bc   
0294   18 13                  JR   lessthan   
0296                             ; hl = value1, de = value2
0296                             ; hl = result
0296                EQUALS:      
0296   B7                     OR   a   ; reset the carry flag
0297   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0299   28 16                  JR   z,true1   
029B   18 1A                  JR   false1   
029D                NOTEQUALS:      
029D   B7                     OR   a   ; reset the carry flag
029E   ED 52                  SBC   hl,de   
02A0   20 0F                  JR   nz,true1   
02A2   18 13                  JR   false1   
02A4                             ; hl = value1 de = value2
02A4                             ; hl = result
02A4                LESSTHANEQ:      
02A4   B7                     OR   a   
02A5   ED 52                  SBC   hl,de   
02A7   18 05                  JR   lessthan1   
02A9                             ; hl = value1 de = value2
02A9                             ; hl = result
02A9                LESSTHAN:      
02A9   B7                     OR   a   
02AA   ED 52                  SBC   hl,de   
02AC   28 09                  JR   z,false1   
02AE                LESSTHAN1:      
02AE   FA B7 02               JP   m,false1   
02B1                TRUE1:       
02B1   21 FF FF               LD   hl,TRUE   
02B4   E5                     PUSH   hl   
02B5   DD E9                  JP   (ix)   
02B7                NULL1:       
02B7                FALSE1:      
02B7   21 00 00               LD   hl,FALSE   
02BA   E5                     PUSH   hl   
02BB                NOP_:        
02BB   DD E9                  JP   (ix)   
02BD                RPAREN_:      
02BD   C3 64 0B               JP   rparen   
02C0                DOLLAR_:      
02C0   C3 B9 0A               JP   dollar   
02C3                LBRACK_:      
02C3   C3 AB 07               JP   lbrack   
02C6                RBRACK_:      
02C6   C3 C7 07               JP   rbrack   
02C9                PERCENT_:      
02C9   C3 76 07               JP   percent   
02CC                LPAREN_:      
02CC                LBRACE_:      
02CC   C3 40 08               JP   lbrace   
02CF                RBRACE_:      
02CF   C3 A9 08               JP   rbrace   
02D2                TICK_:       
02D2   C3 30 09               JP   tick   
02D5                SEMICOLON_:      
02D5   C3 86 06               JP   semicolon   
02D8                DOT_:        
02D8   C3 A2 04               JP   dot   
02DB                COLON_:      
02DB   C3 88 06               JP   colon   
02DE                UPCASE_:      
02DE   C3 D6 0A               JP   upcase   
02E1                LOWCASE_:      
02E1   C3 DB 0A               JP   lowcase   
02E4                QUESTION_:      
02E4   C3 ED 0A               JP   question   
02E7                STAR_:       
02E7   C3 18 0B               JP   star   
02EA                HASH_:       
02EA   C3 17 08               JP   hash   
02ED                CARET_:      
02ED   C3 1A 0A               JP   caret   
02F0                COMMA_:      
02F0   C3 86 06               JP   comma   
02F3                DQUOTE_:      
02F3   C3 8F 0B               JP   dquote   
02F6                BACKSLASH_:      
02F6   C3 86 06               JP   backslash   
02F9                UNDERSCORE_:      
02F9   C3 86 06               JP   underscore   
02FC                TILDE_:      
02FC   C3 86 06               JP   tilde   
02FF                SLASH_:      
02FF   18 00                  JR   slash   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3 BEGIN *********************************************
0301                SLASH:       
0301                COMMAND:      
0301   03                     INC   bc   
0302   0A                     LD   a,(bc)   
0303   FE 2F                  CP   "/"   ; // comment
0305   CA FA 03               JP   z,comment   
0308   0B                     DEC   bc   
0309   CD DB 0B               CALL   commandTable   
030C   27                     DB   lsb(command_a_)   
030D   34                     DB   lsb(command_b_)   
030E   66                     DB   lsb(command_nop_)   
030F   68                     DB   lsb(decimal_)   
0310   66                     DB   lsb(command_nop_)   
0311   3F                     DB   lsb(command_f_)   
0312   66                     DB   lsb(command_nop_)   
0313   77                     DB   lsb(hexadecimal_)   
0314   42                     DB   lsb(command_i_)   
0315   66                     DB   lsb(command_nop_)   
0316   7D                     DB   lsb(key_)   
0317   66                     DB   lsb(command_nop_)   
0318   4B                     DB   lsb(command_m_)   
0319   66                     DB   lsb(command_nop_)   
031A   80                     DB   lsb(output_)   
031B   4E                     DB   lsb(command_p_)   
031C   57                     DB   lsb(command_q_)   
031D   60                     DB   lsb(command_r_)   
031E   66                     DB   lsb(command_nop_)   
031F   83                     DB   lsb(true_)   
0320   66                     DB   lsb(command_nop_)   
0321   63                     DB   lsb(command_v_)   
0322   86                     DB   lsb(words_)   
0323   89                     DB   lsb(xor_)   
0324   66                     DB   lsb(command_nop_)   
0325   66                     DB   lsb(command_nop_)   
0326   70                     DB   lsb(div_)   
0327                COMMAND_A_:      
0327   CD EF 0B               CALL   jumpTable   
032A   62                     DB   "b"   ; /ab absolute
032B   94                     DB   lsb(absolute_)   
032C   64                     DB   "d"   ; /ad address of
032D   A1                     DB   lsb(addrOf_)   
032E   73                     DB   "s"   ; /as array size
032F   C2                     DB   lsb(arraySize_)   
0330   00                     DB   NUL   
0331   C3 74 03               JP   error1_   
0334                COMMAND_B_:      
0334   CD EF 0B               CALL   jumpTable   
0337   72                     DB   "r"   ; /br break
0338   CA                     DB   lsb(break_)   
0339   79                     DB   "y"   ; /by cold boot
033A   CD                     DB   lsb(coldStart_)   
033B   00                     DB   NUL   
033C   C3 D0 03               JP   bytes_   ; /b bytes
033F                COMMAND_F_:      
033F   C3 03 04               JP   command_f   
0342                COMMAND_I_:      
0342   CD EF 0B               CALL   jumpTable   
0345   6E                     DB   "n"   ; /in input
0346   D8                     DB   lsb(input_)   
0347   00                     DB   NUL   
0348   C3 74 03               JP   error1_   
034B                COMMAND_M_:      
034B   C3 37 04               JP   command_m   
034E                COMMAND_P_:      
034E   CD EF 0B               CALL   jumpTable   
0351   63                     DB   "c"   ; /pc print chars
0352   E3                     DB   lsb(printChars_)   
0353   00                     DB   NUL   
0354   C3 74 03               JP   error1_   
0357                COMMAND_Q_:      
0357   CD EF 0B               CALL   jumpTable   
035A   74                     DB   "t"   ; /qt quit
035B   EA                     DB   lsb(quit_)   
035C   00                     DB   NUL   
035D   C3 74 03               JP   error1_   
0360                COMMAND_R_:      
0360   C3 43 04               JP   command_r   
0363                COMMAND_V_:      
0363   C3 5F 04               JP   command_v   
0366                COMMAND_NOP_:      
0366   DD E9                  JP   (ix)   
0368                DECIMAL_:      
0368   21 0A 00               LD   hl,10   
036B                DECIMAL1:      
036B   22 E8 50               LD   (vNumBase),hl   
036E   DD E9                  JP   (ix)   
0370                DIV_:        
0370   00                     DB   NUL   
0371   C3 45 09               JP   div   
0374                ERROR1_:      
0374   C3 57 0D               JP   error1   
0377                HEXADECIMAL_:      
0377   21 10 00               LD   hl,16   
037A   C3 6B 03               JP   decimal1   
037D                KEY_:        
037D   C3 7D 03               JP   key_   
0380                OUTPUT_:      
0380   C3 0F 0B               JP   output   
0383                TRUE_:       
0383   C3 B1 02               JP   true1   
0386                WORDS_:      
0386   C3 F4 03               JP   words   
0389                XOR_:        
0389   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
038A                XOR1:        
038A   E1                     POP   hl   
038B   7B                     LD   a,e   
038C   AD                     XOR   l   
038D   6F                     LD   l,a   
038E   7A                     LD   a,d   
038F   AC                     XOR   h   
0390   67                     LD   h,a   
0391   E5                     PUSH   hl   
0392   DD E9                  JP   (ix)   
0394                             ; /ab absolute
0394                             ; num -- num
0394                ABSOLUTE_:      
0394   E1                     POP   hl   
0395   CB 7C                  BIT   7,h   
0397   C8                     RET   z   
0398   AF                     XOR   a   
0399   95                     SUB   l   
039A   6F                     LD   l,a   
039B   9F                     SBC   a,a   
039C   94                     SUB   h   
039D   67                     LD   h,a   
039E   E5                     PUSH   hl   
039F   DD E9                  JP   (ix)   
03A1                             ; /ad addrOf
03A1                             ; char -- addr
03A1                ADDROF_:      
03A1   E1                     POP   hl   ; a = char
03A2   7D                     LD   a,l   
03A3   FE 7B                  CP   "z"+1   ; if a > z then exit
03A5   30 19                  JR   nc,addrOf2   
03A7   D6 41                  SUB   "A"   ; a - 65
03A9   38 15                  JR   c,addrOf2   ; if < A then exit
03AB   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
03AD   38 06                  JR   c,addrOf1   
03AF   D6 06                  SUB   "a"-("Z"+1)   
03B1   FE 1A                  CP   "Z"-"A"+1   
03B3   38 0B                  JR   c,addrOf2   ; if < a then exit
03B5                ADDROF1:      
03B5   87                     ADD   a,a   ; double a
03B6   21 00 50               LD   hl,VARS   ; hl = VARS + a
03B9   85                     ADD   a,l   
03BA   6F                     LD   l,a   
03BB   3E 00                  LD   a,0   
03BD   8C                     ADC   a,h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0                ADDROF2:      
03C0   DD E9                  JP   (ix)   
03C2                             ; /as size of an array, num elements, ignores vDataWidth :-/
03C2                             ; array* -- num
03C2                ARRAYSIZE_:      
03C2   E1                     POP   hl   
03C3   2B                     DEC   hl   ; msb size
03C4   56                     LD   d,(hl)   
03C5   2B                     DEC   hl   ; lsb size
03C6   5E                     LD   e,(hl)   
03C7   D5                     PUSH   de   
03C8   DD E9                  JP   (ix)   
03CA                             ; /br
03CA                BREAK_:      
03CA   C3 16 09               JP   break   
03CD                             ; /by
03CD                COLDSTART_:      
03CD   C3 A0 0C               JP   coldStart   
03D0                             ; /b
03D0                BYTES_:      
03D0   21 01 00               LD   hl,1   
03D3                BYTES1:      
03D3   22 E6 50               LD   (vDataWidth),hl   
03D6   DD E9                  JP   (ix)   
03D8                             ; Z80 port input
03D8                             ; port -- value
03D8                INPUT_:      
03D8   E1                     POP   hl   
03D9   59                     LD   e,c   ; save IP
03DA   4D                     LD   c,l   
03DB   ED 68                  IN   l,(c)   
03DD   26 00                  LD   h,0   
03DF   4B                     LD   c,e   ; restore IP
03E0   E5                     PUSH   hl   
03E1   DD E9                  JP   (ix)   
03E3                             ; /pc printChars
03E3                             ; char* len --
03E3                PRINTCHARS_:      
03E3   E1                     POP   hl   ; hl = count
03E4   D1                     POP   de   ; de = char*
03E5   CD BD 0B               CALL   printChars2   
03E8   DD E9                  JP   (ix)   
03EA                             ; /qt
03EA                QUIT_:       
03EA   E1                     POP   hl   ; hl = condition, exit if true
03EB   7D                     LD   a,l   
03EC   B4                     OR   h   
03ED   20 02                  JR   nz,quit1   
03EF   DD E9                  JP   (ix)   
03F1                QUIT1:       
03F1   C3 A9 08               JP   blockEnd   
03F4                             ; /w
03F4                WORDS:       
03F4   21 02 00               LD   hl,2   
03F7   C3 D3 03               JP   bytes1   
03FA                             ; //
03FA                COMMENT:      
03FA   03                     INC   bc   ; point to next char
03FB   0A                     LD   a,(bc)   
03FC   FE 20                  CP   " "   ; terminate on any char less than SP
03FE   30 FA                  JR   nc,comment   
0400   0B                     DEC   bc   
0401   DD E9                  JP   (ix)   
0403                             ;********************** PAGE 3 END *********************************************
0403                             ;********************** PAGE 4 BEGIN *********************************************
0403                COMMAND_F:      
0403   CD EF 0B               CALL   jumpTable   
0406   65                     DB   "e"   ; /fe forEach
0407   1A                     DB   lsb(forEach_)   
0408   6C                     DB   "l"   ; /fl flush output buffer
0409   1D                     DB   lsb(flush_)   
040A   73                     DB   "s"   ; /fs funcSrc
040B   22                     DB   lsb(funcSrc_)   
040C   31                     DB   "1"   
040D   25                     DB   lsb(f1_)   
040E   32                     DB   "2"   
040F   28                     DB   lsb(f2_)   
0410   33                     DB   "3"   
0411   2B                     DB   lsb(f3_)   
0412   34                     DB   "4"   
0413   2E                     DB   lsb(f4_)   
0414   7A                     DB   "z"   
0415   31                     DB   lsb(fz_)   
0416   00                     DB   NUL   
0417   C3 34 04               JP   false_   
041A                FOREACH_:      
041A   C3 F7 04               JP   forEach   
041D                             ; /fl flush
041D                             ; --
041D                FLUSH_:      
041D   CD C4 0B               CALL   flushBuffer   
0420   DD E9                  JP   (ix)   
0422                FUNCSRC_:      
0422   C3 43 05               JP   funcSrc   
0425                F1_:         
0425   C3 A3 0D               JP   f1   
0428                F2_:         
0428   C3 AF 0D               JP   f2   
042B                F3_:         
042B   C3 BB 0D               JP   f3   
042E                F4_:         
042E   C3 C7 0D               JP   f4   
0431                FZ_:         
0431   C3 0D 0A               JP   fz   
0434                FALSE_:      
0434   C3 B7 02               JP   false1   
0437                COMMAND_M:      
0437   CD EF 0B               CALL   jumpTable   
043A   70                     DB   "p"   ; /mp map
043B   40                     DB   lsb(map_)   
043C   00                     DB   NUL   
043D   C3 74 03               JP   error1_   
0440                MAP_:        
0440   C3 C4 05               JP   map   
0443                COMMAND_R:      
0443   CD EF 0B               CALL   jumpTable   
0446   63                     DB   "c"   ; /rc tail call optimisation
0447   50                     DB   lsb(recur_)   
0448   65                     DB   "e"   ; /re remainder
0449   56                     DB   lsb(remain_)   
044A   67                     DB   "g"   ; /rg range src
044B   5C                     DB   lsb(rangeSrc_)   
044C   00                     DB   NUL   
044D   C3 74 03               JP   error1_   
0450                RECUR_:      
0450   E1                     POP   hl   
0451   22 F2 50               LD   (vRecur),hl   
0454   DD E9                  JP   (ix)   
0456                REMAIN_:      
0456   2A F6 50               LD   hl,(vRemain)   
0459   E5                     PUSH   hl   
045A   DD E9                  JP   (ix)   
045C                RANGESRC_:      
045C   C3 06 06               JP   rangeSrc   
045F                COMMAND_V:      
045F   CD EF 0B               CALL   jumpTable   
0462   62                     DB   "b"   
0463   81                     DB   lsb(varBufPtr_)   
0464   68                     DB   "h"   
0465   8A                     DB   lsb(varHeapPtr_)   
0466   74                     DB   "t"   
0467   93                     DB   lsb(varTIBPtr_)   
0468   42                     DB   "B"   
0469   72                     DB   lsb(constBufStart_)   
046A   48                     DB   "H"   
046B   77                     DB   lsb(constHeapStart_)   
046C   54                     DB   "T"   
046D   7C                     DB   lsb(constTIBStart_)   
046E   00                     DB   NUL   
046F   C3 74 03               JP   error1_   
0472                CONSTBUFSTART_:      
0472   11 00 4F               LD   de,BUF   
0475   18 28                  JR   constant   
0477                CONSTHEAPSTART_:      
0477   11 1E 51               LD   de,HEAP   
047A   18 23                  JR   constant   
047C                CONSTTIBSTART_:      
047C   11 00 4E               LD   de,TIB   
047F   18 1E                  JR   constant   
0481                VARBUFPTR_:      
0481   ED 5B EC 50            LD   de,(vBufPtr)   
0485   21 EC 50               LD   hl,vBufPtr   
0488   18 12                  JR   variable   
048A                VARHEAPPTR_:      
048A   ED 5B F0 50            LD   de,(vHeapPtr)   
048E   21 F0 50               LD   hl,vHeapPtr   
0491   18 09                  JR   variable   
0493                VARTIBPTR_:      
0493   ED 5B EA 50            LD   de,(vTIBPtr)   
0497   21 EA 50               LD   hl,vTIBPtr   
049A   18 00                  JR   variable   
049C                VARIABLE:      
049C   22 F4 50               LD   (vPointer),hl   
049F                CONSTANT:      
049F   D5                     PUSH   de   
04A0   DD E9                  JP   (ix)   
04A2                DOT:         
04A2   CD EF 0B               CALL   jumpTable   
04A5   61                     DB   "a"   ; .a print array
04A6   7C                     DB   lsb(dotArray)   
04A7   63                     DB   "c"   ; .c print char
04A8   D6                     DB   lsb(dotChar_)   
04A9   73                     DB   "s"   ; .s print string
04AA   BC                     DB   lsb(dotString_)   
04AB   78                     DB   "x"   ; .x print x chars
04AC   DB                     DB   lsb(dotXChars_)   
04AD   00                     DB   NUL   ; .  print number
04AE   C3 B1 04               JP   dotNumber_   
04B1                             ; /bd buffer decimal
04B1                             ; value --
04B1                DOTNUMBER_:      
04B1   3A E8 50               LD   a,(vNumBase)   
04B4   FE 10                  CP   16   
04B6   CA BC 09               JP   z,bufferHex   ; else falls through
04B9   C3 56 09               JP   bufferDec   
04BC                             ; /bs buffered string
04BC                             ; string* --
04BC                DOTSTRING_:      
04BC   E1                     POP   hl   ; hl = string*
04BD   ED 5B EC 50            LD   de,(vBufPtr)   ; de = buffer*
04C1   18 06                  JR   dotString1   
04C3                DOTSTRING0:      
04C3   12                     LD   (de),a   ; a -> buffer*
04C4   1C                     INC   e   ; buffer*++, wraparound
04C5   CC C4 0B               CALL   z,flushBuffer   
04C8   23                     INC   hl   
04C9                DOTSTRING1:      
04C9   7E                     LD   a,(hl)   ; a <- string*
04CA   B7                     OR   a   ; if NUL exit loop
04CB   20 F6                  JR   nz,dotString0   
04CD   2A EC 50               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
04D0   ED 53 EC 50            LD   (vBufPtr),de   ; save buffer*' in pointer
04D4   DD E9                  JP   (ix)   
04D6                             ; /bc buffer char
04D6                             ; char --
04D6                DOTCHAR_:      
04D6   21 01 00               LD   hl,1   
04D9   18 01                  JR   dotXChars0   
04DB                             ; /bx buffered x chars
04DB                             ; char length --
04DB                DOTXCHARS_:      
04DB   E1                     POP   hl   ; hl = length
04DC                DOTXCHARS0:      
04DC   D1                     POP   de   ; a' = char
04DD   7B                     LD   a,e   
04DE   08                     EX   af,af'   
04DF   ED 5B EC 50            LD   de,(vBufPtr)   ; de = buffer*
04E3   18 08                  JR   dotXChars2   
04E5                DOTXCHARS1:      
04E5   08                     EX   af,af'   
04E6   12                     LD   (de),a   
04E7   08                     EX   af,af'   
04E8   1C                     INC   e   ; buffer*++, wraparound
04E9   CC C4 0B               CALL   z,flushBuffer   
04EC   2B                     DEC   hl   
04ED                DOTXCHARS2:      
04ED   7D                     LD   a,l   
04EE   B4                     OR   h   
04EF   20 F4                  JR   nz,dotXChars1   
04F1   ED 53 EC 50            LD   (vBufPtr),de   ; save buffer*'
04F5   DD E9                  JP   (ix)   
04F7                             ;********************** PAGE 4 END *********************************************
04F7                             ;*******************************************************************
04F7                             ; Monty implementations
04F7                             ;*******************************************************************
04F7                             ; /fe forEach
04F7                             ; src proc --
04F7                          ;*Macro unroll: FUNC forEach, 1, "spT"
04F7                FOREACH:      
04F7   CD 1A 0A               CALL   go   
04FA   00 00                  DW   NUL   
04FC   05 05                  DW   forEachM_1334S864   
04FE   00 05                  DW   $+2   
0500   01                     DB   1   
0501   03 73 70 54            .PSTR   "spT"   
0505                FOREACHM_1334S864:      
0505   7B                     DB   "{"   
0506   5B 30 5D 25 54 3D      DB   "[0]%T="   
050C   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data ; $56AA
0510   32 25 74 21 3D 7B      DB   "2%t!={"   ; if type == 2 skip
0516   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
051B   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
052D   3F 3F                  DB   "??"   ; ifte:
052F   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0538   7D 3F                  DB   "}?"   
053A   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0541   7D                     DB   "}"   
0542   00                     DB   0   
0543                             ; ; /fs funcSrc
0543                             ; ; func -- src
0543                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0543                FUNCSRC:      ; :f func or block
0543   CD 1A 0A               CALL   go   
0546   00 00                  DW   NUL   
0548   4F 05                  DW   funcSrcM_1349S880   
054A   4C 05                  DW   $+2   
054C   00                     DB   0   
054D   01 66                  .PSTR   "f"   
054F                FUNCSRCM_1349S880:      
054F   7B                     DB   "{"   
0550   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0554   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
055C   3A 64 74 7B            DB   ":dt{"   
0560   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0572   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0579   7D                     DB   "}"   
057A   7D                     DB   "}"   
057B   00                     DB   0   
057C                          ;*Macro unroll: FUNC dotArray, 2, "abc"
057C                DOTARRAY:      
057C   CD 1A 0A               CALL   go   
057F   00 00                  DW   NUL   
0581   8A 05                  DW   dotArrayM_1359S891   
0583   85 05                  DW   $+2   
0585   02                     DB   2   
0586   03 61 62 63            .PSTR   "abc"   
058A                DOTARRAYM_1359S891:      
058A   7B                     DB   "{"   
058B   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
05C2   7D                     DB   "}"   
05C3   00                     DB   0   
05C4                             ; /mp map
05C4                             ; src func -- src1
05C4                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map
05C4                MAP:         ; map
05C4   CD 1A 0A               CALL   go   
05C7   00 00                  DW   NUL   
05C9   D1 05                  DW   mapM_1366S899   
05CB   CD 05                  DW   $+2   
05CD   00                     DB   0   
05CE   02 73 66               .PSTR   "sf"   
05D1                MAPM_1366S899:      
05D1   7B                     DB   "{"   
05D2   3A 6B 74 7B            DB   ":kt{"   
05D6   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
05DE   3A 64 74 7B            DB   ":dt{"   ; call source with tb
05E2   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
05E7   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
05F3   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
05FC   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0603   7D                     DB   "}"   
0604   7D                     DB   "}"   
0605   00                     DB   0   
0606                             ; /rg rangeSrc
0606                             ; begin end step -- src
0606                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
0606                RANGESRC:      ; range source (begin end step)
0606   CD 1A 0A               CALL   go   
0609   00 00                  DW   NUL   
060B   15 06                  DW   rangeSrcM_1380S914   
060D   0F 06                  DW   $+2   
060F   01                     DB   1   
0610   04 62 65 73 4C         .PSTR   "besL"   
0615                RANGESRCM_1380S914:      
0615   7B                     DB   "{"   
0616   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0621   3A 6B 74 7B            DB   ":kt{"   
0625   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
062D   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0633   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
063A   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0642   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0651   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
0659   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0660   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0674   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
067C   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0683   7D                     DB   "}"   
0684   7D                     DB   "}"   
0685   00                     DB   0   
0686                             ;*******************************************************************
0686                             ; unused opcodes (reserved)
0686                             ;*******************************************************************
0686                BACKSLASH:      
0686                UNDERSCORE:      
0686                TILDE:       
0686                COMMA:       
0686                SEMICOLON:      
0686   DD E9                  JP   (ix)   
0688                             ;*******************************************************************
0688                             ; implementations
0688                             ;*******************************************************************
0688                             ; _ func
0688                             ; -- func*
0688                COLON:       
0688                LAMBDA:      
0688   DD E5                  PUSH   ix   
068A   CD 9E 06               CALL   arglist   
068D   03                     INC   bc   
068E                          ;*Macro unroll:  PERFORM blockStart
068E   DD 21 95 06            LD   ix,performM_1416S954   
0692   C3 40 08               JP   blockStart   
0695                PERFORMM_1416S954:      
0695   CD D4 06               CALL   createFunc   
0698   E1                     POP   hl   
0699   DD E1                  POP   ix   
069B   E5                     PUSH   hl   
069C   DD E9                  JP   (ix)   
069E                             ; arg_list - parses input (ab:c)
069E                             ; names after the : represent uninitialised locals
069E                             ; return values are the state of the stack after the block ends
069E                             ; format: numLocals totNumArgs argChars...
069E                             ; colon:
069E                ARGLIST:      
069E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
06A1   2A F0 50               LD   hl,(vHeapPtr)   ; hl = heap*
06A4   E5                     PUSH   hl   ; save start of arg_list
06A5   23                     INC   hl   ; skip length fields to start of string
06A6   23                     INC   hl   
06A7   03                     INC   bc   ; point to next char
06A8                ARGLIST1:      
06A8   0A                     LD   a,(bc)   
06A9   FE 3A                  CP   ":"   ; ":" switches from args to locals
06AB   20 03                  JR   nz,arglist1a   
06AD   14                     INC   d   ; non zero value local count acts as flag
06AE   18 10                  JR   arglist3   
06B0                ARGLIST1A:      
06B0   FE 61                  CP   "a"   ; < "a" terminates arg_list
06B2   38 0F                  JR   c,arglist4   
06B4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
06B6   30 0B                  JR   nc,arglist4   
06B8                ARGLIST2:      
06B8   77                     LD   (hl),a   
06B9   23                     INC   hl   
06BA   1C                     INC   e   ; increase arg count
06BB   AF                     XOR   a   
06BC   B2                     OR   d   
06BD   28 01                  JR   z,arglist3   
06BF   14                     INC   d   ; if d > 0 increase local count
06C0                ARGLIST3:      
06C0   03                     INC   bc   ; point to next char
06C1   18 E5                  JR   arglist1   
06C3                ARGLIST4:      
06C3   0B                     DEC   bc   
06C4   AF                     XOR   a   
06C5   B2                     OR   d   
06C6   28 01                  JR   z,arglist5   
06C8   15                     DEC   d   ; remove initial inc
06C9                ARGLIST5:      
06C9   23                     INC   hl   
06CA   22 F0 50               LD   (vHeapPtr),hl   ; bump heap* to after end of string
06CD   E1                     POP   hl   ; hl = start of arg_list
06CE   72                     LD   (hl),d   ; write number of locals at start - 1
06CF   23                     INC   hl   
06D0   73                     LD   (hl),e   ; write number of args + locals at start - 2
06D1   2B                     DEC   hl   
06D2   E3                     EX   (sp),hl   
06D3   E9                     JP   (hl)   
06D4                             ; arg_list* block* -- func*
06D4                             ; semicolon:
06D4                CREATEFUNC:      
06D4   E1                     POP   hl   ; save retrn address
06D5   22 04 51               LD   (vTemp3),hl   
06D8   ED 43 00 51            LD   (vTemp1),bc   ; save IP
06DC   E1                     POP   hl   ; hl = block*
06DD   22 02 51               LD   (vTemp2),hl   ; save block*
06E0   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
06E3   FD 56 05               LD   d,(iy+5)   
06E6   7B                     LD   a,e   ; if arg_list == null then make a func
06E7   B2                     OR   d   
06E8   20 09                  JR   nz,createFunc0   
06EA   21 00 00               LD   hl,0   ; partial_array = null
06ED   ED 5B F0 50            LD   de,(vHeapPtr)   ; de = compile*
06F1   18 65                  JR   createFunc5   
06F3                CREATEFUNC0:      
06F3   E1                     POP   hl   ; hl = inner_arg_list*
06F4   E5                     PUSH   hl   ; save inner_arg_list
06F5   ED 5B F0 50            LD   de,(vHeapPtr)   ; de = compile*
06F9   7E                     LD   a,(hl)   ; compile inner_num_locals
06FA   4F                     LD   c,a   ; b = inner_num_locals
06FB   12                     LD   (de),a   
06FC   23                     INC   hl   
06FD   13                     INC   de   
06FE   7E                     LD   a,(hl)   ; compile inner_length
06FF   12                     LD   (de),a   
0700   91                     SUB   c   ; a = inner_num args
0701   23                     INC   hl   
0702   13                     INC   de   
0703   B7                     OR   a   ; compile args if inner_length > 0
0704   28 05                  JR   z,createFunc1   
0706   4F                     LD   c,a   ; bc = a
0707   06 00                  LD   b,0   
0709   ED B0                  LDIR      
070B                CREATEFUNC1:      
070B   EB                     EX   de,hl   ; hl = outer_arg_list
070C   FD 5E 04               LD   e,(iy+4)   
070F   FD 56 05               LD   d,(iy+5)   
0712   EB                     EX   de,hl   
0713   23                     INC   hl   ; a = outer_length
0714   7E                     LD   a,(hl)   
0715   23                     INC   hl   
0716   B7                     OR   a   
0717   28 05                  JR   z,createFunc2   
0719   4F                     LD   c,a   
071A   06 00                  LD   b,0   
071C   ED B0                  LDIR      ; append outer_args
071E                CREATEFUNC2:      ; a = outer_length
071E   47                     LD   b,a   ; b = a = outer_length
071F   2A F0 50               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0722   23                     INC   hl   
0723   7E                     LD   a,(hl)   ; add outer_length to new length
0724   80                     ADD   a,b   
0725   77                     LD   (hl),a   
0726   2B                     DEC   hl   
0727   78                     LD   a,b   ; save outer_length in a'
0728   08                     EX   af,af'   
0729   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
072A   7E                     LD   a,(hl)   ; c = a = inner_num_locals
072B   B7                     OR   a   
072C   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
072E   4F                     LD   c,a   ; c = inner_num_locals
072F   06 00                  LD   b,0   ; bc = inner_num_locals
0731   23                     INC   hl   ; a = inner_length
0732   7E                     LD   a,(hl)   
0733   91                     SUB   c   ; a = inner_num_args
0734   23                     INC   hl   ; hl = inner_arg_chars
0735   85                     ADD   a,l   ; hl += a
0736   6F                     LD   l,a   
0737   3E 00                  LD   a,0   
0739   84                     ADD   a,h   
073A   67                     LD   h,a   
073B   ED B0                  LDIR      ; append inner_locals
073D                CREATEFUNC2A:      
073D   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
073E   12                     LD   (de),a   ; compile partial_array length field
073F   13                     INC   de   
0740   AF                     XOR   a   
0741   12                     LD   (de),a   
0742   13                     INC   de   
0743   D5                     PUSH   de   ; push partial_array*
0744   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0745   FD 5E 02               LD   e,(iy+2)   
0748   FD 56 03               LD   d,(iy+3)   
074B   EB                     EX   de,hl   
074C                CREATEFUNC3:      
074C   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
074D   4E                     LD   c,(hl)   
074E   2B                     DEC   hl   
074F   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0750   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0751   13                     INC   de   
0752   79                     LD   a,c   
0753   12                     LD   (de),a   
0754   13                     INC   de   
0755   10 F5                  DJNZ   createFunc3   ; b = outer_length
0757                CREATEFUNC4:      
0757   E1                     POP   hl   ; hl = partial_array*
0758                CREATEFUNC5:      
0758   C1                     POP   bc   ; bc = new_arg_list*
0759   D5                     PUSH   de   ; return new func*
075A   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
075B   73                     LD   (hl),e   ; compile partial_array* to func
075C   23                     INC   hl   
075D   72                     LD   (hl),d   
075E   23                     INC   hl   
075F   ED 5B 02 51            LD   de,(vTemp2)   ; de = block*
0763   73                     LD   (hl),e   ; compile block* to func
0764   23                     INC   hl   
0765   72                     LD   (hl),d   
0766   23                     INC   hl   
0767   71                     LD   (hl),c   ; compile new_arg_list* to func
0768   23                     INC   hl   
0769   70                     LD   (hl),b   
076A   23                     INC   hl   
076B   22 F0 50               LD   (vHeapPtr),hl   ; bump heap ptr
076E   ED 4B 00 51            LD   bc,(vTemp1)   ; restore IP
0772   2A 04 51               LD   hl,(vTemp3)   ; jump to return address
0775   E9                     JP   (hl)   
0776                             ; %a .. %z
0776                             ; -- value
0776                             ; returns value of arg
0776                PERCENT:      
0776                ARG:         
0776   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0779   FD 56 05               LD   d,(iy+5)   
077C   EB                     EX   de,hl   
077D   7D                     LD   a,l   ; arg_list* == null, skip
077E   B4                     OR   h   
077F   28 1A                  JR   z,arg0a   
0781   23                     INC   hl   ; a = num_args, hl = arg_list*
0782   7E                     LD   a,(hl)   
0783   23                     INC   hl   
0784   B7                     OR   a   
0785   28 14                  JR   z,arg0a   ; num_args == 0, skip
0787   5F                     LD   e,a   ; e = a = num_args
0788   03                     INC   bc   ; a = next char = dollar_name
0789   0A                     LD   a,(bc)   
078A   C5                     PUSH   bc   ; save IP
078B   43                     LD   b,e   ; b = e = num_args
078C   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
078F   FD 56 03               LD   d,(iy+3)   
0792                ARG0:        
0792   1B                     DEC   de   ; a = dollar_name, de = next arg*
0793   1B                     DEC   de   
0794   BE                     CP   (hl)   
0795   28 09                  JR   z,arg1   
0797   23                     INC   hl   ; hl = next arg_list*
0798   10 F8                  DJNZ   arg0   
079A   C1                     POP   bc   ; no match, restore IP
079B                ARG0A:       
079B   11 00 00               LD   de,0   ; return 0
079E   18 08                  JR   arg1a   
07A0                ARG1:        
07A0   C1                     POP   bc   ; restore IP
07A1   EB                     EX   de,hl   ; hl = arg*
07A2   22 F4 50               LD   (vPointer),hl   ; store arg* in setter
07A5   5E                     LD   e,(hl)   
07A6   23                     INC   hl   
07A7   56                     LD   d,(hl)   ; de = arg
07A8                ARG1A:       
07A8   D5                     PUSH   de   ; push arg
07A9   DD E9                  JP   (ix)   
07AB                LBRACK:      
07AB                ARRAYSTART:      
07AB   11 00 00               LD   de,0   ; create stack frame
07AE   D5                     PUSH   de   ; push null for IP
07AF   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
07B2   FD 56 05               LD   d,(iy+5)   ; 
07B5   D5                     PUSH   de   ; 
07B6   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
07B9   FD 56 03               LD   d,(iy+3)   ; 
07BC   D5                     PUSH   de   ; 
07BD   FD E5                  PUSH   iy   ; push BP
07BF   FD 21 00 00            LD   iy,0   ; BP = SP
07C3   FD 39                  ADD   iy,sp   
07C5   DD E9                  JP   (ix)   
07C7                RBRACK:      
07C7                ARRAYEND:      
07C7   FD 54                  LD   d,iyh   ; de = BP
07C9   FD 5D                  LD   e,iyl   
07CB   ED 43 00 51            LD   (vTemp1),bc   ; save IP
07CF   62 6B                  LD   hl,de   ; hl = de = BP
07D1   B7                     OR   a   
07D2   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
07D4   CB 3C                  SRL   h   ; 
07D6   CB 1D                  RR   l   
07D8   44 4D                  LD   bc,hl   ; bc = count
07DA   2A F0 50               LD   hl,(vHeapPtr)   ; hl = array[-4]
07DD   71                     LD   (hl),c   ; write num items in length word
07DE   23                     INC   hl   
07DF   70                     LD   (hl),b   
07E0   23                     INC   hl   ; hl = array[0], bc = count
07E1                             ; de = BP, hl = array[0], bc = count
07E1   18 15                  JR   arrayEnd3   
07E3                ARRAYEND1:      
07E3   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
07E6   77                     LD   (hl),a   ; write lsb of array item
07E7   23                     INC   hl   ; move to msb of array item
07E8   3A E6 50               LD   a,(vDataWidth)   ; vDataWidth=1?
07EB   3D                     DEC   a   
07EC   28 05                  JR   z,arrayEnd2   
07EE   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
07F1   77                     LD   (hl),a   ; write msb of array item
07F2   23                     INC   hl   ; move to next word in array
07F3                ARRAYEND2:      
07F3   FD 2B                  DEC   iy   ; move to next word on stack
07F5   FD 2B                  DEC   iy   
07F7   0B                     DEC   bc   ; dec items count
07F8                ARRAYEND3:      
07F8   79                     LD   a,c   ; if not zero loop
07F9   B0                     OR   b   
07FA   20 E7                  JR   nz,arrayEnd1   
07FC   EB                     EX   de,hl   ; de = end of array, hl = BP
07FD   F9                     LD   sp,hl   ; sp = BP
07FE   E1                     POP   hl   ; de = end of array, hl = old BP
07FF   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0800   FD 62                  LD   iyh,d   
0802   FD 6B                  LD   iyl,e   
0804   D1                     POP   de   ; pop arg_list (discard)
0805   D1                     POP   de   ; pop first_arg* (discard)
0806   D1                     POP   de   ; pop IP (discard)
0807   ED 5B F0 50            LD   de,(vHeapPtr)   ; de = array[-2]
080B   13                     INC   de   
080C   13                     INC   de   
080D   D5                     PUSH   de   ; return array[0]
080E   22 F0 50               LD   (vHeapPtr),hl   ; move heap* to end of array
0811   ED 4B 00 51            LD   bc,(vTemp1)   ; restore IP
0815   DD E9                  JP   (ix)   
0817                             ; index of an array, based on vDataWidth
0817                             ; array* num -- value    ; also sets vPointer to address
0817                HASH:        
0817                ARRAYINDEX:      
0817   E1                     POP   hl   ; hl = index
0818   D1                     POP   de   ; de = array
0819   3A E6 50               LD   a,(vDataWidth)   ; a = data width
081C   3D                     DEC   a   
081D   28 01                  JR   z,arrayIndex1   
081F                ARRAYINDEX0:      
081F   29                     ADD   hl,hl   ; if data width = 2 then double
0820                ARRAYINDEX1:      
0820   19                     ADD   hl,de   ; add addr
0821   22 F4 50               LD   (vPointer),hl   ; store address in setter
0824   16 00                  LD   d,0   
0826   5E                     LD   e,(hl)   
0827   B7                     OR   a   ; check data width again
0828   28 02                  JR   z,arrayIndex2   
082A   23                     INC   hl   
082B   56                     LD   d,(hl)   
082C                ARRAYINDEX2:      
082C   D5                     PUSH   de   
082D   DD E9                  JP   (ix)   
082F                             ; value _oldValue --            ; uses address in vPointer
082F                ASSIGN:      
082F   E1                     POP   hl   ; discard last accessed value
0830   E1                     POP   hl   ; hl = new value
0831                ASSIGN0:      
0831   EB                     EX   de,hl   ; de = new value
0832                ASSIGNX:      
0832   2A F4 50               LD   hl,(vPointer)   
0835   73                     LD   (hl),e   
0836   3A E6 50               LD   a,(vDataWidth)   
0839   3D                     DEC   a   ; is it byte?
083A   28 02                  JR   z,assign1   
083C   23                     INC   hl   
083D   72                     LD   (hl),d   
083E                ASSIGN1:      
083E   DD E9                  JP   (ix)   
0840                LBRACE:      
0840                BLOCKSTART:      
0840   C5                     PUSH   bc   ; return pointer to first { of block
0841   03                     INC   bc   
0842   16 01                  LD   d,1   ; nesting: count first parenthesis
0844                BLOCKSTART1:      ; Skip to end of definition
0844   0A                     LD   a,(bc)   ; Get the next character
0845   03                     INC   bc   ; Point to next character
0846   FE 21                  CP   " " + 1   ; ignore whitespace
0848   38 FA                  JR   c,blockStart1   
084A   FE 29                  CP   ")"   
084C   28 2D                  JR   z,blockStart4   
084E   FE 7D                  CP   "}"   
0850   28 29                  JR   z,blockStart4   
0852   FE 5D                  CP   "]"   
0854   28 25                  JR   z,blockStart4   
0856   FE 28                  CP   "("   
0858   28 16                  JR   z,blockStart2   
085A   FE 7B                  CP   "{"   
085C   28 12                  JR   z,blockStart2   
085E   FE 5B                  CP   "["   
0860   28 0E                  JR   z,blockStart2   
0862   FE 27                  CP   "'"   
0864   28 0D                  JR   z,blockStart3   
0866   FE 60                  CP   "`"   
0868   28 09                  JR   z,blockStart3   
086A   FE 22                  CP   DQ   
086C   28 05                  JR   z,blockStart3   
086E   18 D4                  JR   blockStart1   
0870                BLOCKSTART2:      
0870   14                     INC   d   
0871   18 D1                  JR   blockStart1   
0873                BLOCKSTART3:      
0873   3E 80                  LD   a,$80   
0875   AA                     XOR   d   
0876   57                     LD   d,a   
0877   20 CB                  JR   nz,blockStart1   
0879   18 03                  JR   blockStart5   
087B                BLOCKSTART4:      
087B   15                     DEC   d   
087C   20 C6                  JR   nz,blockStart1   ; get the next element
087E                BLOCKSTART5:      
087E   60 69                  LD   hl,bc   ; hl = IP
0880   11 1E 51               LD   de,HEAP   ; is IP pointing to object in heap
0883   B7                     OR   a   ; IP - HEAP
0884   ED 52                  SBC   hl,de   
0886   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0888   28 1C                  JR   z,blockStart6   
088A   60 69                  LD   hl,bc   ; hl = IP
088C   D1                     POP   de   ; de = block*
088D   ED 43 00 51            LD   (vTemp1),bc   ; save IP
0891   B7                     OR   a   ; bc = size
0892   ED 52                  SBC   hl,de   
0894   44 4D                  LD   bc,hl   
0896   EB                     EX   de,hl   ; hl = block* de = heap*
0897   ED 5B F0 50            LD   de,(vHeapPtr)   
089B   D5                     PUSH   de   ; return hblock*
089C   ED B0                  LDIR      ; copy size bytes from block* to hblock*
089E   ED 53 F0 50            LD   (vHeapPtr),de   ; heap* += size
08A2   ED 4B 00 51            LD   bc,(vTemp1)   ; restore IP
08A6                BLOCKSTART6:      
08A6   0B                     DEC   bc   ; balanced, exit
08A7   DD E9                  JP   (ix)   
08A9                RBRACE:      
08A9                BLOCKEND:      
08A9   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
08AC   FD 56 01               LD   d,(iy+1)   
08AF   ED 53 00 51            LD   (vTemp1),de   
08B3   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
08B6   FD 56 07               LD   d,(iy+7)   
08B9   ED 53 02 51            LD   (vTemp2),de   
08BD   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
08C0   FD 56 03               LD   d,(iy+3)   
08C3   EB                     EX   de,hl   
08C4   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
08C7   FD 56 01               LD   d,(iy+1)   
08CA   13                     INC   de   ; for carry flag <=
08CB   B7                     OR   a   
08CC   ED 52                  SBC   hl,de   
08CE   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
08D0   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
08D2   FD 5D                  LD   e,iyl   
08D4   21 08 00               LD   hl,8   
08D7   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
08D8   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
08D9   18 0C                  JR   blockEnd2   
08DB                BLOCKEND1:      ; same scope
08DB   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
08DE   FD 56 03               LD   d,(iy+3)   
08E1   EB                     EX   de,hl   
08E2   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
08E4   FD 5D                  LD   e,iyl   
08E6   EB                     EX   de,hl   
08E7                BLOCKEND2:      
08E7   44 4D                  LD   bc,hl   ; bc = hl = BP
08E9   B7                     OR   a   ; hl = BP - SP = count
08EA   ED 72                  SBC   hl,sp   
08EC   7D                     LD   a,l   
08ED   B4                     OR   h   
08EE   28 09                  JR   z,blockEnd3   
08F0   C5                     PUSH   bc   ; bc = count, hl = BP
08F1   44 4D                  LD   bc,hl   
08F3   E1                     POP   hl   
08F4   2B                     DEC   hl   ; hl = BP-1
08F5   1B                     DEC   de   ; de = args*-1
08F6   ED B8                  LDDR      
08F8   13                     INC   de   
08F9                BLOCKEND3:      
08F9   EB                     EX   de,hl   ; sp = de = new tos*
08FA   F9                     LD   sp,hl   
08FB   ED 4B 02 51            LD   bc,(vTemp2)   
08FF   FD 2A 00 51            LD   iy,(vTemp1)   
0903   ED 5B F2 50            LD   de,(vRecur)   ; de = recur vector
0907   7B                     LD   a,e   ; check for NUL
0908   B2                     OR   d   
0909   20 02                  JR   nz,blockEnd4   
090B   DD E9                  JP   (ix)   
090D                BLOCKEND4:      
090D   21 00 00               LD   hl,0   ; clear recur vector
0910   22 F2 50               LD   (vRecur),hl   
0913   C3 1B 0A               JP   go1   ; execute de
0916                             ; /br break from loop
0916                             ; --
0916                BREAK:       
0916   E1                     POP   hl   ; hl = condition, break if false
0917   7D                     LD   a,l   
0918   B4                     OR   h   
0919   28 02                  JR   z,break1   
091B   DD E9                  JP   (ix)   
091D                BREAK1:      
091D   FD 5D                  LD   e,iyl   ; get block* just under stack frame
091F   FD 54                  LD   d,iyh   
0921   21 08 00               LD   hl,8   
0924   19                     ADD   hl,de   
0925   23                     INC   hl   
0926   23                     INC   hl   
0927   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
092A   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
092D   C3 A9 08               JP   blockEnd   
0930                TICK:        
0930                CHAR:        
0930   21 00 00               LD   hl,0   ; if "" is empty or null
0933                CHAR1:       
0933   03                     INC   bc   ; point to next char
0934   0A                     LD   a,(bc)   
0935   FE 27                  CP   "'"   ; ' is the terminator
0937   28 09                  JR   z,char3   
0939   FE 5C                  CP   $5c   ; \ is the escape
093B   20 02                  JR   nz,char2   
093D   03                     INC   bc   
093E   0A                     LD   a,(bc)   
093F                CHAR2:       
093F   6F                     LD   l,a   
0940   18 F1                  JR   char1   
0942                CHAR3:       
0942   E5                     PUSH   hl   
0943   DD E9                  JP   (ix)   
0945                DIV:         
0945   D1                     POP   de   
0946   E1                     POP   hl   
0947   C5                     PUSH   bc   ; preserve the IP
0948   44 4D                  LD   bc,hl   
094A   CD F4 09               CALL   divide   
094D   EB                     EX   de,hl   
094E   ED 53 F6 50            LD   (vRemain),de   
0952   C1                     POP   bc   
0953   C3 13 02               JP   add3   
0956                             ; /bd buffer decimal
0956                             ; value --
0956                BUFFERDEC:      
0956   ED 5B EC 50            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
095A   D9                     EXX      
095B   E1                     POP   hl   ; hl = value
095C   CD 70 09               CALL   bufferDec0   
095F   D9                     EXX      ; de = buffer*' bc = IP
0960   3E 20                  LD   a," "   ; append space to buffer
0962   12                     LD   (de),a   
0963   1C                     INC   e   ; buffer*++, wraparound
0964   CC C4 0B               CALL   z,flushBuffer   
0967   2A EC 50               LD   hl,(vBufPtr)   ; hl = buffer*
096A   ED 53 EC 50            LD   (vBufPtr),de   ; update buffer* with buffer*'
096E   DD E9                  JP   (ix)   
0970                             ; hl = value
0970                             ; de' = buffer*
0970                             ; a, bc, de, hl destroyed
0970                BUFFERDEC0:      
0970   CB 7C                  BIT   7,h   
0972   28 0C                  JR   z,bufferDec1   
0974   D9                     EXX      
0975   3E 2D                  LD   a,"-"   
0977   12                     LD   (de),a   
0978   13                     INC   de   
0979   D9                     EXX      
097A   AF                     XOR   a   
097B   95                     SUB   l   
097C   6F                     LD   l,a   
097D   9F                     SBC   a,a   
097E   94                     SUB   h   
097F   67                     LD   h,a   
0980                BUFFERDEC1:      
0980   0E 00                  LD   c,0   ; leading zeros flag = false
0982   11 F0 D8               LD   de,-10000   
0985   CD A0 09               CALL   bufferDec2   
0988   11 18 FC               LD   de,-1000   
098B   CD A0 09               CALL   bufferDec2   
098E   11 9C FF               LD   de,-100   
0991   CD A0 09               CALL   bufferDec2   
0994   1E F6                  LD   e,-10   
0996   CD A0 09               CALL   bufferDec2   
0999   0C                     INC   c   ; flag = true for at least digit
099A   1E FF                  LD   e,-1   
099C   CD A0 09               CALL   bufferDec2   
099F   C9                     RET      
09A0                BUFFERDEC2:      
09A0   06 2F                  LD   b,"0"-1   
09A2                BUFFERDEC3:      
09A2   04                     INC   b   
09A3   19                     ADD   hl,de   
09A4   38 FC                  JR   c,bufferDec3   
09A6   ED 52                  SBC   hl,de   
09A8   3E 30                  LD   a,"0"   
09AA   B8                     CP   b   
09AB   20 05                  JR   nz,bufferDec4   
09AD   AF                     XOR   a   
09AE   B1                     OR   c   
09AF   C8                     RET   z   
09B0   18 01                  JR   bufferDec5   
09B2                BUFFERDEC4:      
09B2   0C                     INC   c   
09B3                BUFFERDEC5:      
09B3   78                     LD   a,b   
09B4   D9                     EXX      
09B5   12                     LD   (de),a   
09B6   1C                     INC   e   
09B7   CC C4 0B               CALL   z,flushBuffer   
09BA   D9                     EXX      
09BB   C9                     RET      
09BC                             ; /bh buffer hex
09BC                             ; value --
09BC                BUFFERHEX:      
09BC   E1                     POP   hl   ; hl = value
09BD   ED 5B EC 50            LD   de,(vBufPtr)   
09C1   3E 24                  LD   a,"$"   ; # prefix
09C3   12                     LD   (de),a   
09C4   1C                     INC   e   ; buffer*++, wraparound
09C5   CC C4 0B               CALL   z,flushBuffer   
09C8   7C                     LD   a,h   
09C9   CD DD 09               CALL   bufferHex1   
09CC   7D                     LD   a,l   
09CD   CD DD 09               CALL   bufferHex1   
09D0   3E 20                  LD   a," "   ; append space to buffer
09D2   12                     LD   (de),a   
09D3   1C                     INC   e   ; buffer*++, wraparound
09D4   CC C4 0B               CALL   z,flushBuffer   
09D7   ED 53 EC 50            LD   (vBufPtr),de   
09DB   DD E9                  JP   (ix)   
09DD                BUFFERHEX1:      
09DD   F5                     PUSH   af   
09DE   1F                     RRA      
09DF   1F                     RRA      
09E0   1F                     RRA      
09E1   1F                     RRA      
09E2   CD E6 09               CALL   bufferHex2   
09E5   F1                     POP   af   
09E6                BUFFERHEX2:      
09E6   E6 0F                  AND   0x0F   
09E8   C6 90                  ADD   a,0x90   
09EA   27                     DAA      
09EB   CE 40                  ADC   a,0x40   
09ED   27                     DAA      
09EE   12                     LD   (de),a   
09EF   1C                     INC   e   ; buffer*++, wraparound
09F0   CC C4 0B               CALL   z,flushBuffer   
09F3   C9                     RET      
09F4                             ; division subroutine.
09F4                             ; bc: divisor, de: dividend, hl: remainder
09F4                DIVIDE:      
09F4   21 00 00               LD   hl,0   ; zero the remainder
09F7   3E 10                  LD   a,16   ; loop counter
09F9                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
09F9   CB 21                  SLA   c   
09FB   CB 10                  RL   b   
09FD   ED 6A                  ADC   hl,hl   
09FF   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0A01   38 03                  JR   c,divide2   
0A03   0C                     INC   c   
0A04   18 01                  JR   divide3   
0A06                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0A06   19                     ADD   hl,de   
0A07                DIVIDE3:      
0A07   3D                     DEC   a   
0A08   20 EF                  JR   nz,divide1   
0A0A   50 59                  LD   de,bc   ; result from bc to de
0A0C   C9                     RET      
0A0D                FZ:          
0A0D   21 00 4E               LD   hl,STACK   
0A10   ED 72                  SBC   hl,sp   
0A12   CB 3C                  SRL   h   
0A14   CB 1D                  RR   l   
0A16   E5                     PUSH   hl   
0A17   C3 B1 04               JP   dotNumber_   
0A1A                             ; execute a block of code which ends with }
0A1A                             ; creates a root scope if BP == stack
0A1A                             ; else uses outer scope
0A1A                CARET:       
0A1A                GO:          
0A1A   D1                     POP   de   ; de = block*
0A1B                GO1:         
0A1B   7B                     LD   a,e   ; if block* == null, exit
0A1C   B2                     OR   d   
0A1D   20 02                  JR   nz,go2   
0A1F   DD E9                  JP   (ix)   
0A21                GO2:         
0A21   1A                     LD   a,(de)   
0A22   FE 7B                  CP   "{"   
0A24   28 06                  JR   z,goBlock   
0A26   FE 28                  CP   "("   
0A28   C2 5F 0A               JP   nz,goFunc   
0A2B   D5                     PUSH   de   ; push de just before stack frame
0A2C                GOBLOCK:      
0A2C   ED 53 00 51            LD   (vTemp1),de   ; save de
0A30   21 00 4E               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0A33   FD 54                  LD   d,iyh   
0A35   FD 5D                  LD   e,iyl   
0A37   B7                     OR   a   ; if stack* == BP then this is the root_scope
0A38   ED 52                  SBC   hl,de   
0A3A   ED 5B 00 51            LD   de,(vTemp1)   ; restore de
0A3E   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0A3F   B4                     OR   h   
0A40   3E 00                  LD   a,0   
0A42   28 6A                  JR   z,goFunc8   
0A44   C5                     PUSH   bc   ; push IP
0A45   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A48   FD 46 05               LD   b,(iy+5)   
0A4B   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A4E   FD 66 03               LD   h,(iy+3)   
0A51                GOBLOCK2:      
0A51   C5                     PUSH   bc   ; arg_list*
0A52   E5                     PUSH   hl   ; first_arg*
0A53   FD E5                  PUSH   iy   ; push BP
0A55   FD 21 00 00            LD   iy,0   ; BP = SP
0A59   FD 39                  ADD   iy,sp   
0A5B                GOBLOCK3:      
0A5B   42 4B                  LD   bc,de   ; bc = de = block*-1
0A5D   DD E9                  JP   (ix)   
0A5F                GOFUNC:      ; execute func
0A5F   EB                     EX   de,hl   ; hl = func*
0A60   5E                     LD   e,(hl)   ; de = partial_array*
0A61   23                     INC   hl   
0A62   56                     LD   d,(hl)   
0A63   23                     INC   hl   
0A64   7B                     LD   a,e   ; if partial_array* == null skip
0A65   B2                     OR   d   
0A66   28 21                  JR   z,goFunc3   
0A68   ED 43 00 51            LD   (vTemp1),bc   
0A6C   22 02 51               LD   (vTemp2),hl   ; save bc,hl
0A6F   EB                     EX   de,hl   ; hl = partial_array*
0A70   2B                     DEC   hl   ; bc = count
0A71   46                     LD   b,(hl)   
0A72   2B                     DEC   hl   
0A73   4E                     LD   c,(hl)   
0A74   23                     INC   hl   ; hl = array data*
0A75   23                     INC   hl   
0A76   18 06                  JR   goFunc2   ; push each item on stack
0A78                GOFUNC1:      
0A78   5E                     LD   e,(hl)   ; de = partial item
0A79   23                     INC   hl   
0A7A   56                     LD   d,(hl)   
0A7B   23                     INC   hl   
0A7C   D5                     PUSH   de   ; push on stack
0A7D   0B                     DEC   bc   
0A7E                GOFUNC2:      
0A7E   79                     LD   a,c   ; if count != 0 then loop
0A7F   B0                     OR   b   
0A80   20 F6                  JR   nz,goFunc1   
0A82   ED 4B 00 51            LD   bc,(vTemp1)   ; restore bc
0A86   2A 02 51               LD   hl,(vTemp2)   ; restore hl
0A89                GOFUNC3:      
0A89   5E                     LD   e,(hl)   ; de = block*
0A8A   23                     INC   hl   
0A8B   56                     LD   d,(hl)   
0A8C   23                     INC   hl   
0A8D   ED 53 00 51            LD   (vTemp1),de   ; save block*
0A91   5E                     LD   e,(hl)   ; de = arg_list*
0A92   23                     INC   hl   
0A93   56                     LD   d,(hl)   
0A94   23                     INC   hl   
0A95   EB                     EX   de,hl   ; hl = arg_list*
0A96   ED 5B 00 51            LD   de,(vTemp1)   ; restore de = block*
0A9A   7D                     LD   a,l   ; if arg_list* == null a = 0
0A9B   B4                     OR   h   
0A9C   20 03                  JR   nz,goFunc4   
0A9E   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A9F   18 0D                  JR   goFunc8   
0AA1                GOFUNC4:      ; allocate locals
0AA1   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0AA2   18 03                  JR   goFunc6   
0AA4                GOFUNC5:      ; loop
0AA4   3B                     DEC   sp   
0AA5   3B                     DEC   sp   
0AA6   3D                     DEC   a   
0AA7                GOFUNC6:      
0AA7   B7                     OR   a   
0AA8   20 FA                  JR   nz,goFunc5   ; end loop
0AAA                GOFUNC7:      
0AAA   23                     INC   hl   ; a = num_args* x 2
0AAB   7E                     LD   a,(hl)   
0AAC   2B                     DEC   hl   
0AAD   87                     ADD   a,a   ; a *= 2
0AAE                GOFUNC8:      
0AAE   C5                     PUSH   bc   ; push IP
0AAF   44 4D                  LD   bc,hl   
0AB1   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0AB4   85                     ADD   a,l   
0AB5   6F                     LD   l,a   
0AB6   39                     ADD   hl,sp   
0AB7   18 98                  JR   goBlock2   
0AB9                DOLLAR:      
0AB9                HEXNUM:      
0AB9   21 00 00               LD   hl,0   ; Clear hl to accept the number
0ABC                HEXNUM1:      
0ABC   03                     INC   bc   
0ABD   0A                     LD   a,(bc)   ; Get the character which is a numeral
0ABE   CB 77                  BIT   6,a   ; is it uppercase alpha?
0AC0   28 02                  JR   z,hexnum2   ; no a decimal
0AC2   D6 07                  SUB   7   ; sub 7  to make $a - $F
0AC4                HEXNUM2:      
0AC4   D6 30                  SUB   $30   ; form decimal digit
0AC6   DA 56 0B               JP   c,num2   
0AC9   FE 10                  CP   $0F+1   
0ACB   D2 56 0B               JP   nc,num2   
0ACE   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0ACF   29                     ADD   hl,hl   ; 4X
0AD0   29                     ADD   hl,hl   ; 8X
0AD1   29                     ADD   hl,hl   ; 16X
0AD2   85                     ADD   a,l   ; add into bottom of hl
0AD3   6F                     LD   l,a   
0AD4   18 E6                  JR   hexnum1   
0AD6                UPCASE:      
0AD6   0A                     LD   a,(bc)   ; a = identifier char
0AD7   D6 41                  SUB   "A"   ; "A" = 0
0AD9   18 05                  JR   ident1   
0ADB                LOWCASE:      
0ADB   0A                     LD   a,(bc)   
0ADC   D6 61                  SUB   "a"   
0ADE   C6 1A                  ADD   a,26   
0AE0                IDENT1:      
0AE0   87                     ADD   a,a   ; l = a * 2
0AE1   6F                     LD   l,a   
0AE2   26 50                  LD   h,msb(vars)   
0AE4   22 F4 50               LD   (vPointer),hl   ; store address in setter
0AE7   5E                     LD   e,(hl)   
0AE8   23                     INC   hl   
0AE9   56                     LD   d,(hl)   
0AEA   D5                     PUSH   de   
0AEB   DD E9                  JP   (ix)   
0AED                             ; if
0AED                             ; condition then -- value
0AED                QUESTION:      
0AED                IF:          
0AED   03                     INC   bc   
0AEE   0A                     LD   a,(bc)   
0AEF   FE 3F                  CP   "?"   
0AF1   28 06                  JR   z,ifte   
0AF3   0B                     DEC   bc   
0AF4   11 00 00               LD   de,NUL   ; NUL pointer for else
0AF7   18 01                  JR   ifte1   
0AF9                             ; ifte
0AF9                             ; condition then else -- value
0AF9                IFTE:        
0AF9   D1                     POP   de   ; de = else
0AFA                IFTE1:       
0AFA   E1                     POP   hl   ; hl = then
0AFB   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AFC   7C                     LD   a,h   
0AFD   B5                     OR   l   
0AFE   E1                     POP   hl   ; hl = then
0AFF   CA 1B 0A               JP   z,go1   ; if z de = else
0B02   EB                     EX   de,hl   ; condition = false, de = then
0B03   C3 1B 0A               JP   go1   
0B06                KEY:         
0B06   CD 81 00               CALL   getchar   
0B09   26 00                  LD   h,0   
0B0B   6F                     LD   l,a   
0B0C   E5                     PUSH   hl   
0B0D   DD E9                  JP   (ix)   
0B0F                             ; Z80 port output
0B0F                             ; value port --
0B0F                OUTPUT:      
0B0F   E1                     POP   hl   
0B10   59                     LD   e,c   ; save IP
0B11   4D                     LD   c,l   
0B12   E1                     POP   hl   
0B13   ED 69                  OUT   (c),l   
0B15   4B                     LD   c,e   ; restore IP
0B16   DD E9                  JP   (ix)   
0B18                STAR:        
0B18                MUL:         
0B18   D1                     POP   de   ; get first value
0B19   E1                     POP   hl   
0B1A                MUL2:        
0B1A   C5                     PUSH   bc   ; Preserve the IP
0B1B   44 4D                  LD   bc,hl   ; bc = 2nd value
0B1D   21 00 00               LD   hl,0   
0B20   3E 10                  LD   a,16   
0B22                MUL3:        
0B22   29                     ADD   hl,hl   
0B23   CB 13                  RL   e   
0B25   CB 12                  RL   d   
0B27   30 04                  JR   nc,$+6   
0B29   09                     ADD   hl,bc   
0B2A   30 01                  JR   nc,$+3   
0B2C   13                     INC   de   
0B2D   3D                     DEC   a   
0B2E   20 F2                  JR   nz,mul3   
0B30   C1                     POP   bc   ; Restore the IP
0B31   C3 13 02               JP   add3   
0B34                NUM:         
0B34   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B37   0A                     LD   a,(bc)   ; Get numeral or -
0B38   FE 2D                  CP   "-"   
0B3A   20 01                  JR   nz,num0   
0B3C   03                     INC   bc   ; move to next char, no flags affected
0B3D                NUM0:        
0B3D   08                     EX   af,af'   ; save zero flag = 0 for later
0B3E                NUM1:        
0B3E   0A                     LD   a,(bc)   ; read digit
0B3F   D6 30                  SUB   "0"   ; less than 0?
0B41   38 13                  JR   c,num2   ; not a digit, exit loop
0B43   FE 0A                  CP   10   ; greater that 9?
0B45   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B47   03                     INC   bc   ; inc IP
0B48   54 5D                  LD   de,hl   ; multiply hl * 10
0B4A   29                     ADD   hl,hl   
0B4B   29                     ADD   hl,hl   
0B4C   19                     ADD   hl,de   
0B4D   29                     ADD   hl,hl   
0B4E   85                     ADD   a,l   ; add digit in a to hl
0B4F   6F                     LD   l,a   
0B50   3E 00                  LD   a,0   
0B52   8C                     ADC   a,h   
0B53   67                     LD   h,a   
0B54   18 E8                  JR   num1   
0B56                NUM2:        
0B56   0B                     DEC   bc   
0B57   08                     EX   af,af'   ; restore zero flag
0B58   20 07                  JR   nz,num3   
0B5A   EB                     EX   de,hl   ; negate the value of hl
0B5B   21 00 00               LD   hl,0   
0B5E   B7                     OR   a   ; jump to sub2
0B5F   ED 52                  SBC   hl,de   
0B61                NUM3:        
0B61   E5                     PUSH   hl   ; Put the number on the stack
0B62   DD E9                  JP   (ix)   ; and process the next character
0B64                RPAREN:      
0B64   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B67   FD 46 09               LD   b,(iy+9)   
0B6A   DD E9                  JP   (ix)   
0B6C                             ; shiftLeft
0B6C                             ; value count -- value2          shift left count places
0B6C                SHIFTLEFT:      
0B6C   50 59                  LD   de,bc   ; save IP
0B6E   C1                     POP   bc   ; bc = count
0B6F   41                     LD   b,c   ; b = loop counter
0B70   E1                     POP   hl   
0B71   04                     INC   b   ; test for counter=0 case
0B72   18 01                  JR   shiftLeft2   
0B74                SHIFTLEFT1:      
0B74   29                     ADD   hl,hl   ; left shift hl
0B75                SHIFTLEFT2:      
0B75   10 FD                  DJNZ   shiftLeft1   
0B77   E5                     PUSH   hl   
0B78   42 4B                  LD   bc,de   ; restore IP
0B7A   DD E9                  JP   (ix)   
0B7C                             ; shiftRight
0B7C                             ; value count -- value2          shift left count places
0B7C                SHIFTRIGHT:      
0B7C   50 59                  LD   de,bc   ; save IP
0B7E   C1                     POP   bc   ; bc = count
0B7F   41                     LD   b,c   ; b = loop counter
0B80   E1                     POP   hl   
0B81   04                     INC   b   ; test for counter=0 case
0B82   18 04                  JR   shiftRight2   
0B84                SHIFTRIGHT1:      
0B84   CB 3C                  SRL   h   ; right shift hl
0B86   CB 1D                  RR   l   
0B88                SHIFTRIGHT2:      
0B88   10 FA                  DJNZ   shiftRight1   
0B8A   E5                     PUSH   hl   
0B8B   42 4B                  LD   bc,de   ; restore IP
0B8D   DD E9                  JP   (ix)   
0B8F                             ; string
0B8F                             ; -- ptr                        ; points to start of string chars,
0B8F                             ; length is stored at start - 2 bytes
0B8F                DQUOTE:      
0B8F                STRING:      
0B8F   2A F0 50               LD   hl,(vHeapPtr)   ; hl = heap*
0B92   23                     INC   hl   ; skip length field to start
0B93   23                     INC   hl   
0B94   E5                     PUSH   hl   ; save start of string
0B95   03                     INC   bc   ; point to next char
0B96   18 03                  JR   string2   
0B98                STRING1:      
0B98   77                     LD   (hl),a   
0B99   23                     INC   hl   ; increase count
0B9A   03                     INC   bc   ; point to next char
0B9B                STRING2:      
0B9B   0A                     LD   a,(bc)   
0B9C   FE 22                  CP   DQ   ; " is the string terminator
0B9E   28 04                  JR   z,string3   
0BA0   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0BA2   20 F4                  JR   nz,string1   
0BA4                STRING3:      
0BA4   AF                     XOR   a   ; write NUL to terminate string
0BA5   77                     LD   (hl),a   ; hl = end of string
0BA6   23                     INC   hl   
0BA7   22 F0 50               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BAA   2B                     DEC   hl   ; hl = end of string without terminator
0BAB   D1                     POP   de   ; de = start of string
0BAC   D5                     PUSH   de   ; return start of string
0BAD   B7                     OR   a   ; hl = length bytes, de = start of string
0BAE   ED 52                  SBC   hl,de   
0BB0   EB                     EX   de,hl   
0BB1   2B                     DEC   hl   ; write length bytes to length field at start - 2
0BB2   72                     LD   (hl),d   
0BB3   2B                     DEC   hl   
0BB4   73                     LD   (hl),e   
0BB5   DD E9                  JP   (ix)   
0BB7                PRINTCHARS1:      
0BB7   1A                     LD   a,(de)   ; print char at char*
0BB8   CD 85 00               CALL   putchar   
0BBB   13                     INC   de   ; char*++
0BBC   2B                     DEC   hl   ; count--
0BBD                PRINTCHARS2:      
0BBD   7D                     LD   a,l   ; count == 0?
0BBE   B4                     OR   h   
0BBF   C8                     RET   z   
0BC0   18 F5                  JR   printChars1   ; if not loop
0BC2                             ; 
0BC2                FILTER:      
0BC2                SCAN:        
0BC2   DD E9                  JP   (ix)   
0BC4                             ;*******************************************************************
0BC4                             ; general routines
0BC4                             ;*******************************************************************
0BC4                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0BC4                FLUSHBUFFER:      
0BC4   F5                     PUSH   af   
0BC5   D5                     PUSH   de   
0BC6   E5                     PUSH   hl   
0BC7   2A EC 50               LD   hl,(vBufPtr)   
0BCA   11 00 4F               LD   de,BUF   
0BCD   ED 53 EC 50            LD   (vBufPtr),de   
0BD1   B7                     OR   a   
0BD2   ED 52                  SBC   hl,de   
0BD4   CD BD 0B               CALL   printChars2   
0BD7   E1                     POP   hl   
0BD8   D1                     POP   de   
0BD9   F1                     POP   af   
0BDA   C9                     RET      
0BDB                COMMANDTABLE:      
0BDB   03                     INC   bc   
0BDC   0A                     LD   a,(bc)   
0BDD   FE 7B                  CP   "z"+1   
0BDF   30 09                  JR   nc,commandTable2   
0BE1   D6 61                  SUB   "a"   
0BE3   38 05                  JR   c,commandTable2   
0BE5                COMMANDTABLE1:      
0BE5   E1                     POP   hl   
0BE6   85                     ADD   a,l   
0BE7   6F                     LD   l,a   
0BE8   6E                     LD   l,(hl)   ; must have the same msb as the table
0BE9   E9                     JP   (hl)   
0BEA                COMMANDTABLE2:      
0BEA   3E 1A                  LD   a,26   
0BEC   0B                     DEC   bc   
0BED   18 F6                  JR   commandTable1   
0BEF                             ; followed by a table
0BEF                             ; db char
0BEF                             ; db lsb(addr)
0BEF                             ; the final item must have char == NUL
0BEF                JUMPTABLE:      
0BEF   E1                     POP   hl   
0BF0   03                     INC   bc   
0BF1                JUMPTABLE0:      
0BF1   AF                     XOR   a   
0BF2   BE                     CP   (hl)   
0BF3   28 0B                  JR   z,jumpTable2   
0BF5   0A                     LD   a,(bc)   
0BF6   BE                     CP   (hl)   
0BF7   28 04                  JR   z,jumpTable1   
0BF9   23                     INC   hl   
0BFA   23                     INC   hl   
0BFB   18 F4                  JR   jumpTable0   
0BFD                JUMPTABLE1:      
0BFD   23                     INC   hl   
0BFE   6E                     LD   l,(hl)   ; must have the same msb as the table
0BFF   E9                     JP   (hl)   
0C00                JUMPTABLE2:      
0C00   0B                     DEC   bc   
0C01   23                     INC   hl   
0C02   E9                     JP   (hl)   
0C03                PRTSTR0:      
0C03   CD 85 00               CALL   putchar   
0C06   23                     INC   hl   
0C07                PRTSTR:      
0C07   7E                     LD   a,(hl)   
0C08   B7                     OR   a   
0C09   20 F8                  JR   nz,prtstr0   
0C0B   C9                     RET      
0C0C                             ; **************************************************************************
0C0C                             ; calculate nesting value
0C0C                             ; a is char to be tested,
0C0C                             ; e is the nesting value (initially 0)
0C0C                             ; e is increased by ( and [
0C0C                             ; e is decreased by ) and ]
0C0C                             ; e has its bit 7 toggled by `
0C0C                             ; limited to 127 levels
0C0C                             ; **************************************************************************
0C0C                NESTING:      
0C0C   FE 22                  CP   DQ   ; quote char
0C0E   28 06                  JR   z,nesting0   
0C10   FE 60                  CP   "`"   ; quote char
0C12   28 02                  JR   z,nesting0   
0C14   18 0A                  JR   nesting1   
0C16                NESTING0:      
0C16   CB 7B                  BIT   7,e   
0C18   28 03                  JR   z,nesting1a   
0C1A   CB BB                  RES   7,e   
0C1C   C9                     RET      
0C1D                NESTING1A:      
0C1D   CB FB                  SET   7,e   
0C1F   C9                     RET      
0C20                NESTING1:      
0C20   CB 7B                  BIT   7,e   
0C22   C0                     RET   nz   
0C23   FE 7B                  CP   "{"   
0C25   28 08                  JR   z,nesting2   
0C27   FE 5B                  CP   "["   
0C29   28 04                  JR   z,nesting2   
0C2B   FE 28                  CP   "("   
0C2D   20 02                  JR   nz,nesting3   
0C2F                NESTING2:      
0C2F   1C                     INC   e   
0C30   C9                     RET      
0C31                NESTING3:      
0C31   FE 7D                  CP   "}"   
0C33   28 07                  JR   z,nesting4   
0C35   FE 5D                  CP   "]"   
0C37   28 03                  JR   z,nesting4   
0C39   FE 29                  CP   ")"   
0C3B   C0                     RET   nz   
0C3C                NESTING4:      
0C3C   1D                     DEC   e   
0C3D   C9                     RET      
0C3E                PROMPT:      
0C3E   CD 4E 0C               CALL   printStr   
0C41   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0C46   C9                     RET      
0C47                CRLF:        
0C47   CD 4E 0C               CALL   printStr   
0C4A   0D 0A 00               .CSTR   "\r\n"   
0C4D   C9                     RET      
0C4E                             ; prints a null teminated string
0C4E                             ; the string should be immediately following the call
0C4E                PRINTSTR:      
0C4E   E3                     EX   (sp),hl   ; swap			
0C4F   CD 07 0C               CALL   prtstr   
0C52   23                     INC   hl   ; inc past NUL
0C53   E3                     EX   (sp),hl   ; put it back	
0C54   C9                     RET      
0C55                INIT:        
0C55   21 F0 01               LD   hl,titleStr   
0C58   11 0A 51               LD   de,titleBuf   
0C5B   06 14                  LD   b,20   
0C5D                INIT1:       
0C5D   1A                     LD   a,(de)   
0C5E   BE                     CP   (hl)   
0C5F   20 17                  JR   nz,coldBoot0   
0C61   13                     INC   de   
0C62   23                     INC   hl   
0C63   10 F8                  DJNZ   init1   
0C65                WARMINIT:      
0C65   ED 4B F8 50            LD   bc,(vSavedIP)   ; restore IP
0C69   ED 7B FA 50            LD   sp,(vSavedSP)   ; restore SP
0C6D   DD 2A FC 50            LD   ix,(vSavedNext)   ; restore Next
0C71   FD 2A FE 50            LD   iy,(vSavedBP)   ; restore BP
0C75   C3 AF 0C               JP   start1   
0C78                COLDBOOT0:      
0C78   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0C7B   11 0A 51               LD   de,titleBuf   
0C7E   06 14                  LD   b,20   
0C80   ED B0                  LDIR      
0C82                COLDINIT:      
0C82   21 DE 01               LD   hl,isysVars   
0C85   11 E6 50               LD   de,sysVars   
0C88   01 10 00               LD   bc,8 * 2   
0C8B   ED B0                  LDIR      
0C8D   21 00 50               LD   hl,vars   ; 52 vars LO HI
0C90   06 34                  LD   b,26*2   
0C92   AF                     XOR   a   
0C93                COLDBOOT1:      
0C93   77                     LD   (hl),a   
0C94   23                     INC   hl   
0C95   10 FC                  DJNZ   coldBoot1   
0C97   DD 2A EE 50            LD   ix,(vNext)   
0C9B   FD 21 00 4E            LD   iy,STACK   
0C9F   C9                     RET      
0CA0                COLDSTART:      
0CA0   31 00 4E               LD   sp,STACK   
0CA3   CD 78 0C               CALL   coldBoot0   
0CA6   C3 AF 0C               JP   start1   
0CA9                START:       
0CA9   31 00 4E               LD   sp,STACK   ; start Monty
0CAC   CD 55 0C               CALL   init   ; setups
0CAF                START1:      
0CAF   21 0A 51               LD   hl,titleBuf   
0CB2   CD 07 0C               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0CB5                INTERPRET:      
0CB5   CD C4 0B               CALL   flushBuffer   
0CB8   CD 3E 0C               CALL   prompt   
0CBB   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0CBE   21 00 4E               LD   hl,TIB   
0CC1   22 EA 50               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0CC4                INTERPRET2:      ; calculate nesting
0CC4   1E 00                  LD   e,0   ; initilize nesting value
0CC6   C5                     PUSH   bc   ; save offset into TIB,
0CC7                             ; bc is also the count of chars in TIB
0CC7   21 00 4E               LD   hl,TIB   ; hl is start of TIB
0CCA   18 0B                  JR   interpret4   
0CCC                INTERPRET3:      
0CCC   3E 33                  LD   a,"3"   
0CCE   CD 85 00               CALL   putchar   
0CD1   7E                     LD   a,(hl)   ; a = char in TIB
0CD2   23                     INC   hl   ; inc pointer into TIB
0CD3   0B                     DEC   bc   ; dec count of chars in TIB
0CD4   CD 0C 0C               CALL   nesting   ; update nesting value
0CD7                INTERPRET4:      
0CD7   79                     LD   a,c   ; is count zero?
0CD8   B0                     OR   b   
0CD9   20 F1                  JR   nz,interpret3   ; if not loop
0CDB   C1                     POP   bc   ; restore offset into TIB
0CDC                INTERPRET5:      
0CDC   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0CDF   FE 20                  CP   $20   ; compare to space
0CE1   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0CE3   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0CE5                             ; ???? NEEDED?
0CE5   28 36                  JR   z,interpret8   
0CE7   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0CE9   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0CEB   FE 05                  CP   CTRL_E   
0CED   CA 7E 0D               JP   z,edit_   
0CF0   FE 08                  CP   CTRL_H   
0CF2   CA 6E 0D               JP   z,backSpace_   
0CF5   FE 0A                  CP   CTRL_J   
0CF7   CA 96 0D               JP   z,reEdit_   
0CFA                             ; cp CTRL_S
0CFA                             ; jp z,printStack_
0CFA                             ; DB     lsb(edit_)       ; ENQ ^E  5
0CFA                             ; DB     lsb(reedit_)     ; LF  ^J 10
0CFA                             ; DB     lsb(list_)       ; FF  ^L 12
0CFA                             ; DB     lsb(printStack_) ; DLE ^P 16
0CFA                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0CFA                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0CFA                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0CFA                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0CFA                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0CFA                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0CFA                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0CFA                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0CFA                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0CFA                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0CFA                INTERPRET5A:      
0CFA                             ; ld (vTIBPtr),bc
0CFA                             ; ld bc,(vTIBPtr)
0CFA   18 C8                  JR   interpret2   
0CFC                INTERPRET6:      
0CFC   21 00 4E               LD   hl,TIB   
0CFF   09                     ADD   hl,bc   
0D00   77                     LD   (hl),a   ; store the character in textbuf
0D01   03                     INC   bc   
0D02   CD 85 00               CALL   putchar   ; echo character to screen
0D05   CD 0C 0C               CALL   nesting   
0D08   18 D2                  JR   interpret5   ; wait for next character
0D0A                INTERPRET7:      
0D0A   21 00 4E               LD   hl,TIB   
0D0D   09                     ADD   hl,bc   
0D0E   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0D10   23                     INC   hl   
0D11   36 0A                  LD   (hl),"\n"   
0D13   23                     INC   hl   
0D14   03                     INC   bc   
0D15   03                     INC   bc   
0D16   CD 47 0C               CALL   crlf   ; echo character to screen
0D19   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0D1A   B7                     OR   a   
0D1B   20 BF                  JR   nz,interpret5   
0D1D                INTERPRET8:      
0D1D   21 00 4E               LD   hl,TIB   
0D20   09                     ADD   hl,bc   
0D21   22 EA 50               LD   (vTIBPtr),hl   
0D24   01 00 4E               LD   bc,TIB   
0D27   ED 43 F8 50            LD   (vSavedIP),bc   ; save IP
0D2B   ED 73 FA 50            LD   (vSavedSP),sp   ; save SP
0D2F   DD 22 FC 50            LD   (vSavedNext),ix   ; save Next
0D33   FD 22 FE 50            LD   (vSavedBP),iy   ; save BP
0D37   0B                     DEC   bc   
0D38                NEXT:        
0D38   03                     INC   bc   ; Increment the IP
0D39   0A                     LD   a,(bc)   ; Get the next character and dispatch
0D3A   FE 20                  CP   " "   ; whitespace?
0D3C   28 FA                  JR   z,next   ; space? ignore
0D3E   38 08                  JR   c,next1   
0D40   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0D42   6F                     LD   l,a   ; index into table
0D43   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0D45   6E                     LD   l,(hl)   ; get low jump address
0D46   24                     INC   h   ; Load h with page after opcodes
0D47   E9                     JP   (hl)   ; Jump to routine
0D48                NEXT1:       
0D48   FE 00                  CP   NUL   ; end of input string?
0D4A   28 03                  JR   z,exit   
0D4C   C3 B5 0C               JP   interpret   ; no, other whitespace, macros?
0D4F                EXIT:        
0D4F   03                     INC   bc   
0D50   60 69                  LD   hl,bc   
0D52   E9                     JP   (hl)   
0D53                RUN:         
0D53   C1                     POP   bc   
0D54   0B                     DEC   bc   
0D55   DD E9                  JP   (ix)   
0D57                ERROR1:      
0D57   21 01 00               LD   hl,1   ; error 1: unknown command
0D5A   E5                     PUSH   hl   
0D5B                ERROR:       
0D5B   CD 53 0D               CALL   run   
0D5E   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0D6B   C3 B5 0C               JP   interpret   
0D6E                BACKSPACE_:      
0D6E   79                     LD   a,c   
0D6F   B0                     OR   b   
0D70   CA C4 0C               JP   z,interpret2   
0D73   0B                     DEC   bc   
0D74   CD 4E 0C               CALL   printStr   
0D77   08 20 08 00            .CSTR   "\b \b"   
0D7B   C3 C4 0C               JP   interpret2   
0D7E                             ; edit
0D7E                EDIT_:       
0D7E   CD 53 0D               CALL   run   
0D81   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0D93   C3 B5 0C               JP   interpret   
0D96                REEDIT_:      
0D96   C3 B5 0C               JP   interpret   
0D99                PRINTSTACK_:      
0D99   CD 53 0D               CALL   run   
0D9C   2F 70 6B 00            .CSTR   "/pk"   
0DA0   C3 B5 0C               JP   interpret   
0DA3                             ; editDef:
0DA3                             ;     pop hl                      ; pop ret address
0DA3                             ;     ex (sp),hl                  ; swap with TOS
0DA3                             ;     push hl                     ; dup TOS
0DA3                             ;     ld a,l                      ; a = ident
0DA3                             ;     ld de,TIB                   ; de = start of TIB
0DA3                             ;     ld (vTIBPtr),de             ; update TIB*
0DA3                             ;     push ix                     ; save NEXT
0DA3                             ;     ld ix,editDef0              ; NEXT = editDef0
0DA3                             ;     jp lookupRef                ; convert letter into address
0DA3                             ; editDef0:
0DA3                             ;     ld e,(hl)                   ; de = (hl++)
0DA3                             ;     inc hl
0DA3                             ;     ld d,(hl)
0DA3                             ;     ld a,d                      ; de == 0 ?
0DA3                             ;     or e
0DA3                             ;     jr z,editDef4
0DA3                             ;     ld ix,editDef3              ; NEXT = editDef3
0DA3                             ;     ex de,hl
0DA3                             ;     ld a,(hl)
0DA3                             ;     cp "{"
0DA3                             ;     jr nz,editDef1
0DA3                             ;     jp editBlock0               ; convert letter into address
0DA3                             ; editDef1:
0DA3                             ;     cp "("
0DA3                             ;     jr nz,editDef2
0DA3                             ;     jp editBlock0               ; convert letter into address
0DA3                             ; editDef2:
0DA3                             ;     jp editFunc
0DA3                             ; editDef3:
0DA3                             ;     ld a," "                    ; write assign
0DA3                             ;     call writeChar
0DA3                             ;     pop hl                      ; a = ident
0DA3                             ;     ld a,l
0DA3                             ;     call writeChar
0DA3                             ;     ld a,"="                    ; write assign
0DA3                             ;     call writeChar
0DA3                             ;     ld ix,editDef4              ; NEXT = editDef4
0DA3                             ;     jp printTIB
0DA3                             ; editDef4:
0DA3                             ;     pop ix                      ; restore NEXT
0DA3                             ;     jp (ix)
0DA3                             ; writeChar:
0DA3                             ;     ld de,(vTIBPtr)             ; de = TIB*
0DA3                             ;     ld (de),a                   ; write ident
0DA3                             ;     inc de
0DA3                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0DA3                             ;     ret
0DA3                             ; ; printTIB
0DA3                             ; printTIB:
0DA3                             ;     ld hl,(vTIBPtr)
0DA3                             ;     ld de,TIB
0DA3                             ;     or a
0DA3                             ;     sbc hl,de
0DA3                             ;     jp printTIB2
0DA3                             ; printTIB1:
0DA3                             ;     ld a,(de)
0DA3                             ;     call putchar
0DA3                             ; printTIB2:
0DA3                             ;     ld a,l
0DA3                             ;     or h
0DA3                             ;     jr nz,printTIB1
0DA3                             ;     jp (ix)
0DA3                             ; editBlock:
0DA3                             ;     pop hl                      ; hl = block*
0DA3                             ; editBlock0:
0DA3                             ;     push ix                     ; save next
0DA3                             ;     push hl                     ; push block*
0DA3                             ;     push hl                     ; push block*
0DA3                             ;     ld ix,(editBlock2)
0DA3                             ;     jp blockLength
0DA3                             ; editBlock1:
0DA3                             ;     pop hl                      ; bc = length, (sp) = IP
0DA3                             ;     pop de                      ; de = block*
0DA3                             ;     ld a,l
0DA3                             ;     or h
0DA3                             ;     jr z,editBlock2
0DA3                             ;     push bc
0DA3                             ;     ld bc,hl
0DA3                             ;     ex de,hl                    ; hl = block*
0DA3                             ;     ld de,(vTIBPtr)              ; de = TIB*
0DA3                             ;     ldir                        ; copy block to TIB
0DA3                             ;     ld (vTIBPtr),de              ; save TIB*
0DA3                             ;     pop bc
0DA3                             ; editBlock2:
0DA3                             ;     pop ix                      ; restore next
0DA3                             ;     jp (ix)
0DA3                             ; editFunc:
0DA3                             ;     jp (ix)
0DA3                             ; editArray:
0DA3                             ;     jp (ix)
0DA3                             ; editArglist:
0DA3                             ;     jp (ix)
0DA3                             ; ; blockLength
0DA3                             ; ; addr1 -- length
0DA3                             ; blockLength:
0DA3                             ;     pop hl                      ; block*
0DA3                             ;     push hl                     ; save block*
0DA3                             ;     inc hl                      ; skip first char
0DA3                             ;     ld d,1                      ; increase nesting
0DA3                             ; blockLength1:                   ; Skip to end of definition
0DA3                             ;     ld a,(hl)                   ; Get the next character
0DA3                             ;     inc hl                      ; Point to next character
0DA3                             ;     cp " " + 1                  ; ignore whitespace
0DA3                             ;     jr c,blockLength1
0DA3                             ;     cp ")"
0DA3                             ;     jr z,blockLength4
0DA3                             ;     cp "}"
0DA3                             ;     jr z,blockLength4
0DA3                             ;     cp "]"
0DA3                             ;     jr z,blockLength4
0DA3                             ;     cp "("
0DA3                             ;     jr z,blockLength2
0DA3                             ;     cp "{"
0DA3                             ;     jr z,blockLength2
0DA3                             ;     cp "["
0DA3                             ;     jr z,blockLength2
0DA3                             ;     cp "'"
0DA3                             ;     jr z,blockLength3
0DA3                             ;     cp "`"
0DA3                             ;     jr z,blockLength3
0DA3                             ;     cp DQ
0DA3                             ;     jr z,blockLength3
0DA3                             ;     jr blockLength1
0DA3                             ; blockLength2:
0DA3                             ;     inc d
0DA3                             ;     jr blockLength1
0DA3                             ; blockLength4:
0DA3                             ;     dec d
0DA3                             ;     jr nz, blockLength1         ; get the next element
0DA3                             ; blockLength3:
0DA3                             ;     ld a,$80
0DA3                             ;     xor d
0DA3                             ;     ld d,a
0DA3                             ;     jr nz, blockLength1
0DA3                             ;     pop hl                      ; hl = block*
0DA3                             ;     or a
0DA3                             ;     sbc hl,de
0DA3                             ;     push hl
0DA3                             ;     jp (ix)
0DA3                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0DA3                             ; \a start of stack \#3 depth \b base \$ prompt
0DA3                             ; DW dStack               ; a vS0 start of datastack			
0DA3                             ; DW FALSE                ; b vBase16
0DA3                             ; DW 0                    ; c vTIBPtr an offset to the tib
0DA3                             ; DW 0                    ; d
0DA3                             ; DW 65                   ; e vLastDef "A" last command u defined
0DA3                             ; DW 0                    ; f
0DA3                             ; DW page6                ; g 256 bytes limits
0DA3                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0DA3                          ;*Macro unroll: FUNC f1, 1, ""
0DA3                F1:          
0DA3   CD 1A 0A               CALL   go   
0DA6   00 00                  DW   NUL   
0DA8   AE 0D                  DW   f1M_2849S12   
0DAA   AC 0D                  DW   $+2   
0DAC   01                     DB   1   
0DAD   00                     .PSTR   ""   
0DAE                F1M_2849S12:      
0DAE   00                     DB   0   
0DAF                          ;*Macro unroll: FUNC f2, 1, ""
0DAF                F2:          
0DAF   CD 1A 0A               CALL   go   
0DB2   00 00                  DW   NUL   
0DB4   BA 0D                  DW   f2M_2851S15   
0DB6   B8 0D                  DW   $+2   
0DB8   01                     DB   1   
0DB9   00                     .PSTR   ""   
0DBA                F2M_2851S15:      
0DBA   00                     DB   0   
0DBB                          ;*Macro unroll: FUNC f3, 0, ""
0DBB                F3:          
0DBB   CD 1A 0A               CALL   go   
0DBE   00 00                  DW   NUL   
0DC0   C6 0D                  DW   f3M_2853S18   
0DC2   C4 0D                  DW   $+2   
0DC4   00                     DB   0   
0DC5   00                     .PSTR   ""   
0DC6                F3M_2853S18:      
0DC6   00                     DB   0   
0DC7                          ;*Macro unroll: FUNC f4, 1, ""
0DC7                F4:          
0DC7   CD 1A 0A               CALL   go   
0DCA   00 00                  DW   NUL   
0DCC   D2 0D                  DW   f4M_2855S21   
0DCE   D0 0D                  DW   $+2   
0DD0   01                     DB   1   
0DD1   00                     .PSTR   ""   
0DD2                F4M_2855S21:      
0DD2   00                     DB   0   
0DD3                          ALIGN   $100   
0E00                TESTSSTART:      
0E00                             ; ; ; test "[1 2 5]/as",3
0E00                             ; ; ; ; ; test "0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe", 0
0E00                             ; test "$1000 0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe", $1000
0E00                          ;*Macro unroll:  test "5 :a{%a}^", 5
0E00   31 00 4E               LD   SP,STACK   
0E03   CD 82 0C               CALL   coldInit   
0E06   CD 61 4C               CALL   execStr   
0E09   35 20 3A 61 7B 25 61 7D 5E 00 DB   "5 :a{%a}^",0   
0E13   CD C4 0B               CALL   flushBuffer   
0E16   E1                     POP   HL   
0E17   E5                     PUSH   HL   
0E18   11 05 00               LD   DE,5   
0E1B   B7                     OR   A   
0E1C   ED 52                  SBC   HL,DE   
0E1E   7D                     LD   A,L   
0E1F   B4                     OR   H   
0E20   CA 84 0E               JP   Z,expectM_2862S31   
0E23   CD 4E 0C               CALL   printStr   
0E26   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 :a{%a}^"   
0E36   CD 4E 0C               CALL   printStr   
0E39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E48   21 05 00               LD   hl,5   
0E4B   E5                     PUSH   hl   
0E4C   E5                     PUSH   hl   
0E4D   CD 53 0D               CALL   run   
0E50   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E58   CD C4 0B               CALL   flushBuffer   
0E5B   CD 4E 0C               CALL   printStr   
0E5E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E6B   E1                     POP   hl   
0E6C   E5                     PUSH   hl   
0E6D   E5                     PUSH   hl   
0E6E   CD 53 0D               CALL   run   
0E71   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E80   CD C4 0B               CALL   flushBuffer   
0E83   76                     HALT      
0E84                EXPECTM_2862S31:      
0E84   E1                     POP   HL   
0E85   CD 4E 0C               CALL   printStr   
0E88   44 6F 6E 65 21 00      .CSTR   "Done!"   
0E8E   76                     HALT      
0E8F                             ; 
0E8F                          ;*Macro unroll:  test "/f", false
0E8F   31 00 4E               LD   SP,STACK   
0E92   CD 82 0C               CALL   coldInit   
0E95   CD 61 4C               CALL   execStr   
0E98   2F 66 00               DB   "/f",0   
0E9B   CD C4 0B               CALL   flushBuffer   
0E9E   E1                     POP   HL   
0E9F   E5                     PUSH   HL   
0EA0   11 00 00               LD   DE,false   
0EA3   B7                     OR   A   
0EA4   ED 52                  SBC   HL,DE   
0EA6   7D                     LD   A,L   
0EA7   B4                     OR   H   
0EA8   CA 05 0F               JP   Z,expectM_2867S38   
0EAB   CD 4E 0C               CALL   printStr   
0EAE   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0EB7   CD 4E 0C               CALL   printStr   
0EBA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EC9   21 00 00               LD   hl,false   
0ECC   E5                     PUSH   hl   
0ECD   E5                     PUSH   hl   
0ECE   CD 53 0D               CALL   run   
0ED1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0ED9   CD C4 0B               CALL   flushBuffer   
0EDC   CD 4E 0C               CALL   printStr   
0EDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EEC   E1                     POP   hl   
0EED   E5                     PUSH   hl   
0EEE   E5                     PUSH   hl   
0EEF   CD 53 0D               CALL   run   
0EF2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F01   CD C4 0B               CALL   flushBuffer   
0F04   76                     HALT      
0F05                EXPECTM_2867S38:      
0F05   E1                     POP   HL   
0F06                          ;*Macro unroll:  test "/t", true
0F06   31 00 4E               LD   SP,STACK   
0F09   CD 82 0C               CALL   coldInit   
0F0C   CD 61 4C               CALL   execStr   
0F0F   2F 74 00               DB   "/t",0   
0F12   CD C4 0B               CALL   flushBuffer   
0F15   E1                     POP   HL   
0F16   E5                     PUSH   HL   
0F17   11 FF FF               LD   DE,true   
0F1A   B7                     OR   A   
0F1B   ED 52                  SBC   HL,DE   
0F1D   7D                     LD   A,L   
0F1E   B4                     OR   H   
0F1F   CA 7C 0F               JP   Z,expectM_2868S39   
0F22   CD 4E 0C               CALL   printStr   
0F25   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0F2E   CD 4E 0C               CALL   printStr   
0F31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F40   21 FF FF               LD   hl,true   
0F43   E5                     PUSH   hl   
0F44   E5                     PUSH   hl   
0F45   CD 53 0D               CALL   run   
0F48   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F50   CD C4 0B               CALL   flushBuffer   
0F53   CD 4E 0C               CALL   printStr   
0F56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F63   E1                     POP   hl   
0F64   E5                     PUSH   hl   
0F65   E5                     PUSH   hl   
0F66   CD 53 0D               CALL   run   
0F69   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F78   CD C4 0B               CALL   flushBuffer   
0F7B   76                     HALT      
0F7C                EXPECTM_2868S39:      
0F7C   E1                     POP   HL   
0F7D                          ;*Macro unroll:  test "1", 1
0F7D   31 00 4E               LD   SP,STACK   
0F80   CD 82 0C               CALL   coldInit   
0F83   CD 61 4C               CALL   execStr   
0F86   31 00                  DB   "1",0   
0F88   CD C4 0B               CALL   flushBuffer   
0F8B   E1                     POP   HL   
0F8C   E5                     PUSH   HL   
0F8D   11 01 00               LD   DE,1   
0F90   B7                     OR   A   
0F91   ED 52                  SBC   HL,DE   
0F93   7D                     LD   A,L   
0F94   B4                     OR   H   
0F95   CA F1 0F               JP   Z,expectM_2869S40   
0F98   CD 4E 0C               CALL   printStr   
0F9B   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0FA3   CD 4E 0C               CALL   printStr   
0FA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FB5   21 01 00               LD   hl,1   
0FB8   E5                     PUSH   hl   
0FB9   E5                     PUSH   hl   
0FBA   CD 53 0D               CALL   run   
0FBD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FC5   CD C4 0B               CALL   flushBuffer   
0FC8   CD 4E 0C               CALL   printStr   
0FCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FD8   E1                     POP   hl   
0FD9   E5                     PUSH   hl   
0FDA   E5                     PUSH   hl   
0FDB   CD 53 0D               CALL   run   
0FDE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FED   CD C4 0B               CALL   flushBuffer   
0FF0   76                     HALT      
0FF1                EXPECTM_2869S40:      
0FF1   E1                     POP   HL   
0FF2                          ;*Macro unroll:  test "2", 2
0FF2   31 00 4E               LD   SP,STACK   
0FF5   CD 82 0C               CALL   coldInit   
0FF8   CD 61 4C               CALL   execStr   
0FFB   32 00                  DB   "2",0   
0FFD   CD C4 0B               CALL   flushBuffer   
1000   E1                     POP   HL   
1001   E5                     PUSH   HL   
1002   11 02 00               LD   DE,2   
1005   B7                     OR   A   
1006   ED 52                  SBC   HL,DE   
1008   7D                     LD   A,L   
1009   B4                     OR   H   
100A   CA 66 10               JP   Z,expectM_2870S41   
100D   CD 4E 0C               CALL   printStr   
1010   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1018   CD 4E 0C               CALL   printStr   
101B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
102A   21 02 00               LD   hl,2   
102D   E5                     PUSH   hl   
102E   E5                     PUSH   hl   
102F   CD 53 0D               CALL   run   
1032   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
103A   CD C4 0B               CALL   flushBuffer   
103D   CD 4E 0C               CALL   printStr   
1040   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
104D   E1                     POP   hl   
104E   E5                     PUSH   hl   
104F   E5                     PUSH   hl   
1050   CD 53 0D               CALL   run   
1053   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1062   CD C4 0B               CALL   flushBuffer   
1065   76                     HALT      
1066                EXPECTM_2870S41:      
1066   E1                     POP   HL   
1067                          ;*Macro unroll:  test "1", 1
1067   31 00 4E               LD   SP,STACK   
106A   CD 82 0C               CALL   coldInit   
106D   CD 61 4C               CALL   execStr   
1070   31 00                  DB   "1",0   
1072   CD C4 0B               CALL   flushBuffer   
1075   E1                     POP   HL   
1076   E5                     PUSH   HL   
1077   11 01 00               LD   DE,1   
107A   B7                     OR   A   
107B   ED 52                  SBC   HL,DE   
107D   7D                     LD   A,L   
107E   B4                     OR   H   
107F   CA DB 10               JP   Z,expectM_2871S42   
1082   CD 4E 0C               CALL   printStr   
1085   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
108D   CD 4E 0C               CALL   printStr   
1090   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
109F   21 01 00               LD   hl,1   
10A2   E5                     PUSH   hl   
10A3   E5                     PUSH   hl   
10A4   CD 53 0D               CALL   run   
10A7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10AF   CD C4 0B               CALL   flushBuffer   
10B2   CD 4E 0C               CALL   printStr   
10B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10C2   E1                     POP   hl   
10C3   E5                     PUSH   hl   
10C4   E5                     PUSH   hl   
10C5   CD 53 0D               CALL   run   
10C8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10D7   CD C4 0B               CALL   flushBuffer   
10DA   76                     HALT      
10DB                EXPECTM_2871S42:      
10DB   E1                     POP   HL   
10DC                          ;*Macro unroll:  test "0", 0
10DC   31 00 4E               LD   SP,STACK   
10DF   CD 82 0C               CALL   coldInit   
10E2   CD 61 4C               CALL   execStr   
10E5   30 00                  DB   "0",0   
10E7   CD C4 0B               CALL   flushBuffer   
10EA   E1                     POP   HL   
10EB   E5                     PUSH   HL   
10EC   11 00 00               LD   DE,0   
10EF   B7                     OR   A   
10F0   ED 52                  SBC   HL,DE   
10F2   7D                     LD   A,L   
10F3   B4                     OR   H   
10F4   CA 50 11               JP   Z,expectM_2872S43   
10F7   CD 4E 0C               CALL   printStr   
10FA   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1102   CD 4E 0C               CALL   printStr   
1105   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1114   21 00 00               LD   hl,0   
1117   E5                     PUSH   hl   
1118   E5                     PUSH   hl   
1119   CD 53 0D               CALL   run   
111C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1124   CD C4 0B               CALL   flushBuffer   
1127   CD 4E 0C               CALL   printStr   
112A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1137   E1                     POP   hl   
1138   E5                     PUSH   hl   
1139   E5                     PUSH   hl   
113A   CD 53 0D               CALL   run   
113D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
114C   CD C4 0B               CALL   flushBuffer   
114F   76                     HALT      
1150                EXPECTM_2872S43:      
1150   E1                     POP   HL   
1151                          ;*Macro unroll:  test "10", 10
1151   31 00 4E               LD   SP,STACK   
1154   CD 82 0C               CALL   coldInit   
1157   CD 61 4C               CALL   execStr   
115A   31 30 00               DB   "10",0   
115D   CD C4 0B               CALL   flushBuffer   
1160   E1                     POP   HL   
1161   E5                     PUSH   HL   
1162   11 0A 00               LD   DE,10   
1165   B7                     OR   A   
1166   ED 52                  SBC   HL,DE   
1168   7D                     LD   A,L   
1169   B4                     OR   H   
116A   CA C7 11               JP   Z,expectM_2873S44   
116D   CD 4E 0C               CALL   printStr   
1170   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1179   CD 4E 0C               CALL   printStr   
117C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
118B   21 0A 00               LD   hl,10   
118E   E5                     PUSH   hl   
118F   E5                     PUSH   hl   
1190   CD 53 0D               CALL   run   
1193   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
119B   CD C4 0B               CALL   flushBuffer   
119E   CD 4E 0C               CALL   printStr   
11A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11AE   E1                     POP   hl   
11AF   E5                     PUSH   hl   
11B0   E5                     PUSH   hl   
11B1   CD 53 0D               CALL   run   
11B4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11C3   CD C4 0B               CALL   flushBuffer   
11C6   76                     HALT      
11C7                EXPECTM_2873S44:      
11C7   E1                     POP   HL   
11C8                          ;*Macro unroll:  test "123", 123
11C8   31 00 4E               LD   SP,STACK   
11CB   CD 82 0C               CALL   coldInit   
11CE   CD 61 4C               CALL   execStr   
11D1   31 32 33 00            DB   "123",0   
11D5   CD C4 0B               CALL   flushBuffer   
11D8   E1                     POP   HL   
11D9   E5                     PUSH   HL   
11DA   11 7B 00               LD   DE,123   
11DD   B7                     OR   A   
11DE   ED 52                  SBC   HL,DE   
11E0   7D                     LD   A,L   
11E1   B4                     OR   H   
11E2   CA 40 12               JP   Z,expectM_2874S45   
11E5   CD 4E 0C               CALL   printStr   
11E8   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
11F2   CD 4E 0C               CALL   printStr   
11F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1204   21 7B 00               LD   hl,123   
1207   E5                     PUSH   hl   
1208   E5                     PUSH   hl   
1209   CD 53 0D               CALL   run   
120C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1214   CD C4 0B               CALL   flushBuffer   
1217   CD 4E 0C               CALL   printStr   
121A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1227   E1                     POP   hl   
1228   E5                     PUSH   hl   
1229   E5                     PUSH   hl   
122A   CD 53 0D               CALL   run   
122D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
123C   CD C4 0B               CALL   flushBuffer   
123F   76                     HALT      
1240                EXPECTM_2874S45:      
1240   E1                     POP   HL   
1241                          ;*Macro unroll:  test "-1",-1
1241   31 00 4E               LD   SP,STACK   
1244   CD 82 0C               CALL   coldInit   
1247   CD 61 4C               CALL   execStr   
124A   2D 31 00               DB   "-1",0   
124D   CD C4 0B               CALL   flushBuffer   
1250   E1                     POP   HL   
1251   E5                     PUSH   HL   
1252   11 FF FF               LD   DE,-1   
1255   B7                     OR   A   
1256   ED 52                  SBC   HL,DE   
1258   7D                     LD   A,L   
1259   B4                     OR   H   
125A   CA B7 12               JP   Z,expectM_2875S46   
125D   CD 4E 0C               CALL   printStr   
1260   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1269   CD 4E 0C               CALL   printStr   
126C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
127B   21 FF FF               LD   hl,-1   
127E   E5                     PUSH   hl   
127F   E5                     PUSH   hl   
1280   CD 53 0D               CALL   run   
1283   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
128B   CD C4 0B               CALL   flushBuffer   
128E   CD 4E 0C               CALL   printStr   
1291   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
129E   E1                     POP   hl   
129F   E5                     PUSH   hl   
12A0   E5                     PUSH   hl   
12A1   CD 53 0D               CALL   run   
12A4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12B3   CD C4 0B               CALL   flushBuffer   
12B6   76                     HALT      
12B7                EXPECTM_2875S46:      
12B7   E1                     POP   HL   
12B8                          ;*Macro unroll:  test "''", 0
12B8   31 00 4E               LD   SP,STACK   
12BB   CD 82 0C               CALL   coldInit   
12BE   CD 61 4C               CALL   execStr   
12C1   27 27 00               DB   "''",0   
12C4   CD C4 0B               CALL   flushBuffer   
12C7   E1                     POP   HL   
12C8   E5                     PUSH   HL   
12C9   11 00 00               LD   DE,0   
12CC   B7                     OR   A   
12CD   ED 52                  SBC   HL,DE   
12CF   7D                     LD   A,L   
12D0   B4                     OR   H   
12D1   CA 2E 13               JP   Z,expectM_2876S47   
12D4   CD 4E 0C               CALL   printStr   
12D7   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
12E0   CD 4E 0C               CALL   printStr   
12E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12F2   21 00 00               LD   hl,0   
12F5   E5                     PUSH   hl   
12F6   E5                     PUSH   hl   
12F7   CD 53 0D               CALL   run   
12FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1302   CD C4 0B               CALL   flushBuffer   
1305   CD 4E 0C               CALL   printStr   
1308   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1315   E1                     POP   hl   
1316   E5                     PUSH   hl   
1317   E5                     PUSH   hl   
1318   CD 53 0D               CALL   run   
131B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
132A   CD C4 0B               CALL   flushBuffer   
132D   76                     HALT      
132E                EXPECTM_2876S47:      
132E   E1                     POP   HL   
132F                          ;*Macro unroll:  test "'a'", $61
132F   31 00 4E               LD   SP,STACK   
1332   CD 82 0C               CALL   coldInit   
1335   CD 61 4C               CALL   execStr   
1338   27 61 27 00            DB   "'a'",0   
133C   CD C4 0B               CALL   flushBuffer   
133F   E1                     POP   HL   
1340   E5                     PUSH   HL   
1341   11 61 00               LD   DE,$61   
1344   B7                     OR   A   
1345   ED 52                  SBC   HL,DE   
1347   7D                     LD   A,L   
1348   B4                     OR   H   
1349   CA A7 13               JP   Z,expectM_2877S48   
134C   CD 4E 0C               CALL   printStr   
134F   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1359   CD 4E 0C               CALL   printStr   
135C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
136B   21 61 00               LD   hl,$61   
136E   E5                     PUSH   hl   
136F   E5                     PUSH   hl   
1370   CD 53 0D               CALL   run   
1373   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
137B   CD C4 0B               CALL   flushBuffer   
137E   CD 4E 0C               CALL   printStr   
1381   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
138E   E1                     POP   hl   
138F   E5                     PUSH   hl   
1390   E5                     PUSH   hl   
1391   CD 53 0D               CALL   run   
1394   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13A3   CD C4 0B               CALL   flushBuffer   
13A6   76                     HALT      
13A7                EXPECTM_2877S48:      
13A7   E1                     POP   HL   
13A8                          ;*Macro unroll:  test "'\\''", $27
13A8   31 00 4E               LD   SP,STACK   
13AB   CD 82 0C               CALL   coldInit   
13AE   CD 61 4C               CALL   execStr   
13B1   27 5C 27 27 00         DB   "'\\''",0   
13B6   CD C4 0B               CALL   flushBuffer   
13B9   E1                     POP   HL   
13BA   E5                     PUSH   HL   
13BB   11 27 00               LD   DE,$27   
13BE   B7                     OR   A   
13BF   ED 52                  SBC   HL,DE   
13C1   7D                     LD   A,L   
13C2   B4                     OR   H   
13C3   CA 22 14               JP   Z,expectM_2878S49   
13C6   CD 4E 0C               CALL   printStr   
13C9   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
13D4   CD 4E 0C               CALL   printStr   
13D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E6   21 27 00               LD   hl,$27   
13E9   E5                     PUSH   hl   
13EA   E5                     PUSH   hl   
13EB   CD 53 0D               CALL   run   
13EE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13F6   CD C4 0B               CALL   flushBuffer   
13F9   CD 4E 0C               CALL   printStr   
13FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1409   E1                     POP   hl   
140A   E5                     PUSH   hl   
140B   E5                     PUSH   hl   
140C   CD 53 0D               CALL   run   
140F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
141E   CD C4 0B               CALL   flushBuffer   
1421   76                     HALT      
1422                EXPECTM_2878S49:      
1422   E1                     POP   HL   
1423                          ;*Macro unroll:  test "$10", $10
1423   31 00 4E               LD   SP,STACK   
1426   CD 82 0C               CALL   coldInit   
1429   CD 61 4C               CALL   execStr   
142C   24 31 30 00            DB   "$10",0   
1430   CD C4 0B               CALL   flushBuffer   
1433   E1                     POP   HL   
1434   E5                     PUSH   HL   
1435   11 10 00               LD   DE,$10   
1438   B7                     OR   A   
1439   ED 52                  SBC   HL,DE   
143B   7D                     LD   A,L   
143C   B4                     OR   H   
143D   CA 9B 14               JP   Z,expectM_2879S50   
1440   CD 4E 0C               CALL   printStr   
1443   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
144D   CD 4E 0C               CALL   printStr   
1450   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
145F   21 10 00               LD   hl,$10   
1462   E5                     PUSH   hl   
1463   E5                     PUSH   hl   
1464   CD 53 0D               CALL   run   
1467   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
146F   CD C4 0B               CALL   flushBuffer   
1472   CD 4E 0C               CALL   printStr   
1475   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1482   E1                     POP   hl   
1483   E5                     PUSH   hl   
1484   E5                     PUSH   hl   
1485   CD 53 0D               CALL   run   
1488   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1497   CD C4 0B               CALL   flushBuffer   
149A   76                     HALT      
149B                EXPECTM_2879S50:      
149B   E1                     POP   HL   
149C                          ;*Macro unroll:  test "$FF", $FF
149C   31 00 4E               LD   SP,STACK   
149F   CD 82 0C               CALL   coldInit   
14A2   CD 61 4C               CALL   execStr   
14A5   24 46 46 00            DB   "$FF",0   
14A9   CD C4 0B               CALL   flushBuffer   
14AC   E1                     POP   HL   
14AD   E5                     PUSH   HL   
14AE   11 FF 00               LD   DE,$FF   
14B1   B7                     OR   A   
14B2   ED 52                  SBC   HL,DE   
14B4   7D                     LD   A,L   
14B5   B4                     OR   H   
14B6   CA 14 15               JP   Z,expectM_2880S51   
14B9   CD 4E 0C               CALL   printStr   
14BC   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
14C6   CD 4E 0C               CALL   printStr   
14C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14D8   21 FF 00               LD   hl,$FF   
14DB   E5                     PUSH   hl   
14DC   E5                     PUSH   hl   
14DD   CD 53 0D               CALL   run   
14E0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14E8   CD C4 0B               CALL   flushBuffer   
14EB   CD 4E 0C               CALL   printStr   
14EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14FB   E1                     POP   hl   
14FC   E5                     PUSH   hl   
14FD   E5                     PUSH   hl   
14FE   CD 53 0D               CALL   run   
1501   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1510   CD C4 0B               CALL   flushBuffer   
1513   76                     HALT      
1514                EXPECTM_2880S51:      
1514   E1                     POP   HL   
1515                          ;*Macro unroll:  test "-1 2 +",1
1515   31 00 4E               LD   SP,STACK   
1518   CD 82 0C               CALL   coldInit   
151B   CD 61 4C               CALL   execStr   
151E   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1525   CD C4 0B               CALL   flushBuffer   
1528   E1                     POP   HL   
1529   E5                     PUSH   HL   
152A   11 01 00               LD   DE,1   
152D   B7                     OR   A   
152E   ED 52                  SBC   HL,DE   
1530   7D                     LD   A,L   
1531   B4                     OR   H   
1532   CA 93 15               JP   Z,expectM_2881S52   
1535   CD 4E 0C               CALL   printStr   
1538   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1545   CD 4E 0C               CALL   printStr   
1548   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1557   21 01 00               LD   hl,1   
155A   E5                     PUSH   hl   
155B   E5                     PUSH   hl   
155C   CD 53 0D               CALL   run   
155F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1567   CD C4 0B               CALL   flushBuffer   
156A   CD 4E 0C               CALL   printStr   
156D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
157A   E1                     POP   hl   
157B   E5                     PUSH   hl   
157C   E5                     PUSH   hl   
157D   CD 53 0D               CALL   run   
1580   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
158F   CD C4 0B               CALL   flushBuffer   
1592   76                     HALT      
1593                EXPECTM_2881S52:      
1593   E1                     POP   HL   
1594                          ;*Macro unroll:  test "-1 1 +",0
1594   31 00 4E               LD   SP,STACK   
1597   CD 82 0C               CALL   coldInit   
159A   CD 61 4C               CALL   execStr   
159D   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
15A4   CD C4 0B               CALL   flushBuffer   
15A7   E1                     POP   HL   
15A8   E5                     PUSH   HL   
15A9   11 00 00               LD   DE,0   
15AC   B7                     OR   A   
15AD   ED 52                  SBC   HL,DE   
15AF   7D                     LD   A,L   
15B0   B4                     OR   H   
15B1   CA 12 16               JP   Z,expectM_2882S53   
15B4   CD 4E 0C               CALL   printStr   
15B7   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
15C4   CD 4E 0C               CALL   printStr   
15C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15D6   21 00 00               LD   hl,0   
15D9   E5                     PUSH   hl   
15DA   E5                     PUSH   hl   
15DB   CD 53 0D               CALL   run   
15DE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15E6   CD C4 0B               CALL   flushBuffer   
15E9   CD 4E 0C               CALL   printStr   
15EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15F9   E1                     POP   hl   
15FA   E5                     PUSH   hl   
15FB   E5                     PUSH   hl   
15FC   CD 53 0D               CALL   run   
15FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
160E   CD C4 0B               CALL   flushBuffer   
1611   76                     HALT      
1612                EXPECTM_2882S53:      
1612   E1                     POP   HL   
1613                          ;*Macro unroll:  test "1 2 +", 3
1613   31 00 4E               LD   SP,STACK   
1616   CD 82 0C               CALL   coldInit   
1619   CD 61 4C               CALL   execStr   
161C   31 20 32 20 2B 00      DB   "1 2 +",0   
1622   CD C4 0B               CALL   flushBuffer   
1625   E1                     POP   HL   
1626   E5                     PUSH   HL   
1627   11 03 00               LD   DE,3   
162A   B7                     OR   A   
162B   ED 52                  SBC   HL,DE   
162D   7D                     LD   A,L   
162E   B4                     OR   H   
162F   CA 8F 16               JP   Z,expectM_2883S54   
1632   CD 4E 0C               CALL   printStr   
1635   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1641   CD 4E 0C               CALL   printStr   
1644   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1653   21 03 00               LD   hl,3   
1656   E5                     PUSH   hl   
1657   E5                     PUSH   hl   
1658   CD 53 0D               CALL   run   
165B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1663   CD C4 0B               CALL   flushBuffer   
1666   CD 4E 0C               CALL   printStr   
1669   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1676   E1                     POP   hl   
1677   E5                     PUSH   hl   
1678   E5                     PUSH   hl   
1679   CD 53 0D               CALL   run   
167C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
168B   CD C4 0B               CALL   flushBuffer   
168E   76                     HALT      
168F                EXPECTM_2883S54:      
168F   E1                     POP   HL   
1690                          ;*Macro unroll:  test "4 1 2 +", 3
1690   31 00 4E               LD   SP,STACK   
1693   CD 82 0C               CALL   coldInit   
1696   CD 61 4C               CALL   execStr   
1699   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
16A1   CD C4 0B               CALL   flushBuffer   
16A4   E1                     POP   HL   
16A5   E5                     PUSH   HL   
16A6   11 03 00               LD   DE,3   
16A9   B7                     OR   A   
16AA   ED 52                  SBC   HL,DE   
16AC   7D                     LD   A,L   
16AD   B4                     OR   H   
16AE   CA 10 17               JP   Z,expectM_2884S55   
16B1   CD 4E 0C               CALL   printStr   
16B4   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
16C2   CD 4E 0C               CALL   printStr   
16C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16D4   21 03 00               LD   hl,3   
16D7   E5                     PUSH   hl   
16D8   E5                     PUSH   hl   
16D9   CD 53 0D               CALL   run   
16DC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16E4   CD C4 0B               CALL   flushBuffer   
16E7   CD 4E 0C               CALL   printStr   
16EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16F7   E1                     POP   hl   
16F8   E5                     PUSH   hl   
16F9   E5                     PUSH   hl   
16FA   CD 53 0D               CALL   run   
16FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
170C   CD C4 0B               CALL   flushBuffer   
170F   76                     HALT      
1710                EXPECTM_2884S55:      
1710   E1                     POP   HL   
1711                          ;*Macro unroll:  test "123 456 +", 123+456
1711   31 00 4E               LD   SP,STACK   
1714   CD 82 0C               CALL   coldInit   
1717   CD 61 4C               CALL   execStr   
171A   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1724   CD C4 0B               CALL   flushBuffer   
1727   E1                     POP   HL   
1728   E5                     PUSH   HL   
1729   11 43 02               LD   DE,123+456   
172C   B7                     OR   A   
172D   ED 52                  SBC   HL,DE   
172F   7D                     LD   A,L   
1730   B4                     OR   H   
1731   CA 95 17               JP   Z,expectM_2885S56   
1734   CD 4E 0C               CALL   printStr   
1737   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1747   CD 4E 0C               CALL   printStr   
174A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1759   21 43 02               LD   hl,123+456   
175C   E5                     PUSH   hl   
175D   E5                     PUSH   hl   
175E   CD 53 0D               CALL   run   
1761   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1769   CD C4 0B               CALL   flushBuffer   
176C   CD 4E 0C               CALL   printStr   
176F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
177C   E1                     POP   hl   
177D   E5                     PUSH   hl   
177E   E5                     PUSH   hl   
177F   CD 53 0D               CALL   run   
1782   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1791   CD C4 0B               CALL   flushBuffer   
1794   76                     HALT      
1795                EXPECTM_2885S56:      
1795   E1                     POP   HL   
1796                          ;*Macro unroll:  test "64 128 +", 64+128
1796   31 00 4E               LD   SP,STACK   
1799   CD 82 0C               CALL   coldInit   
179C   CD 61 4C               CALL   execStr   
179F   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
17A8   CD C4 0B               CALL   flushBuffer   
17AB   E1                     POP   HL   
17AC   E5                     PUSH   HL   
17AD   11 C0 00               LD   DE,64+128   
17B0   B7                     OR   A   
17B1   ED 52                  SBC   HL,DE   
17B3   7D                     LD   A,L   
17B4   B4                     OR   H   
17B5   CA 18 18               JP   Z,expectM_2886S57   
17B8   CD 4E 0C               CALL   printStr   
17BB   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
17CA   CD 4E 0C               CALL   printStr   
17CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17DC   21 C0 00               LD   hl,64+128   
17DF   E5                     PUSH   hl   
17E0   E5                     PUSH   hl   
17E1   CD 53 0D               CALL   run   
17E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17EC   CD C4 0B               CALL   flushBuffer   
17EF   CD 4E 0C               CALL   printStr   
17F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17FF   E1                     POP   hl   
1800   E5                     PUSH   hl   
1801   E5                     PUSH   hl   
1802   CD 53 0D               CALL   run   
1805   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1814   CD C4 0B               CALL   flushBuffer   
1817   76                     HALT      
1818                EXPECTM_2886S57:      
1818   E1                     POP   HL   
1819                          ;*Macro unroll:  test "1 2 +", 3
1819   31 00 4E               LD   SP,STACK   
181C   CD 82 0C               CALL   coldInit   
181F   CD 61 4C               CALL   execStr   
1822   31 20 32 20 2B 00      DB   "1 2 +",0   
1828   CD C4 0B               CALL   flushBuffer   
182B   E1                     POP   HL   
182C   E5                     PUSH   HL   
182D   11 03 00               LD   DE,3   
1830   B7                     OR   A   
1831   ED 52                  SBC   HL,DE   
1833   7D                     LD   A,L   
1834   B4                     OR   H   
1835   CA 95 18               JP   Z,expectM_2887S58   
1838   CD 4E 0C               CALL   printStr   
183B   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1847   CD 4E 0C               CALL   printStr   
184A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1859   21 03 00               LD   hl,3   
185C   E5                     PUSH   hl   
185D   E5                     PUSH   hl   
185E   CD 53 0D               CALL   run   
1861   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1869   CD C4 0B               CALL   flushBuffer   
186C   CD 4E 0C               CALL   printStr   
186F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
187C   E1                     POP   hl   
187D   E5                     PUSH   hl   
187E   E5                     PUSH   hl   
187F   CD 53 0D               CALL   run   
1882   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1891   CD C4 0B               CALL   flushBuffer   
1894   76                     HALT      
1895                EXPECTM_2887S58:      
1895   E1                     POP   HL   
1896                          ;*Macro unroll:  test "1a= a++ a",2
1896   31 00 4E               LD   SP,STACK   
1899   CD 82 0C               CALL   coldInit   
189C   CD 61 4C               CALL   execStr   
189F   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
18A9   CD C4 0B               CALL   flushBuffer   
18AC   E1                     POP   HL   
18AD   E5                     PUSH   HL   
18AE   11 02 00               LD   DE,2   
18B1   B7                     OR   A   
18B2   ED 52                  SBC   HL,DE   
18B4   7D                     LD   A,L   
18B5   B4                     OR   H   
18B6   CA 1A 19               JP   Z,expectM_2888S59   
18B9   CD 4E 0C               CALL   printStr   
18BC   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
18CC   CD 4E 0C               CALL   printStr   
18CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18DE   21 02 00               LD   hl,2   
18E1   E5                     PUSH   hl   
18E2   E5                     PUSH   hl   
18E3   CD 53 0D               CALL   run   
18E6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18EE   CD C4 0B               CALL   flushBuffer   
18F1   CD 4E 0C               CALL   printStr   
18F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1901   E1                     POP   hl   
1902   E5                     PUSH   hl   
1903   E5                     PUSH   hl   
1904   CD 53 0D               CALL   run   
1907   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1916   CD C4 0B               CALL   flushBuffer   
1919   76                     HALT      
191A                EXPECTM_2888S59:      
191A   E1                     POP   HL   
191B                          ;*Macro unroll:  test "-1 -1 -",0
191B   31 00 4E               LD   SP,STACK   
191E   CD 82 0C               CALL   coldInit   
1921   CD 61 4C               CALL   execStr   
1924   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
192C   CD C4 0B               CALL   flushBuffer   
192F   E1                     POP   HL   
1930   E5                     PUSH   HL   
1931   11 00 00               LD   DE,0   
1934   B7                     OR   A   
1935   ED 52                  SBC   HL,DE   
1937   7D                     LD   A,L   
1938   B4                     OR   H   
1939   CA 9B 19               JP   Z,expectM_2889S60   
193C   CD 4E 0C               CALL   printStr   
193F   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
194D   CD 4E 0C               CALL   printStr   
1950   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
195F   21 00 00               LD   hl,0   
1962   E5                     PUSH   hl   
1963   E5                     PUSH   hl   
1964   CD 53 0D               CALL   run   
1967   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
196F   CD C4 0B               CALL   flushBuffer   
1972   CD 4E 0C               CALL   printStr   
1975   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1982   E1                     POP   hl   
1983   E5                     PUSH   hl   
1984   E5                     PUSH   hl   
1985   CD 53 0D               CALL   run   
1988   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1997   CD C4 0B               CALL   flushBuffer   
199A   76                     HALT      
199B                EXPECTM_2889S60:      
199B   E1                     POP   HL   
199C                          ;*Macro unroll:  test "5 3 -", 2
199C   31 00 4E               LD   SP,STACK   
199F   CD 82 0C               CALL   coldInit   
19A2   CD 61 4C               CALL   execStr   
19A5   35 20 33 20 2D 00      DB   "5 3 -",0   
19AB   CD C4 0B               CALL   flushBuffer   
19AE   E1                     POP   HL   
19AF   E5                     PUSH   HL   
19B0   11 02 00               LD   DE,2   
19B3   B7                     OR   A   
19B4   ED 52                  SBC   HL,DE   
19B6   7D                     LD   A,L   
19B7   B4                     OR   H   
19B8   CA 18 1A               JP   Z,expectM_2890S61   
19BB   CD 4E 0C               CALL   printStr   
19BE   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
19CA   CD 4E 0C               CALL   printStr   
19CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19DC   21 02 00               LD   hl,2   
19DF   E5                     PUSH   hl   
19E0   E5                     PUSH   hl   
19E1   CD 53 0D               CALL   run   
19E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19EC   CD C4 0B               CALL   flushBuffer   
19EF   CD 4E 0C               CALL   printStr   
19F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19FF   E1                     POP   hl   
1A00   E5                     PUSH   hl   
1A01   E5                     PUSH   hl   
1A02   CD 53 0D               CALL   run   
1A05   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A14   CD C4 0B               CALL   flushBuffer   
1A17   76                     HALT      
1A18                EXPECTM_2890S61:      
1A18   E1                     POP   HL   
1A19                          ;*Macro unroll:  test "2 1 -",1
1A19   31 00 4E               LD   SP,STACK   
1A1C   CD 82 0C               CALL   coldInit   
1A1F   CD 61 4C               CALL   execStr   
1A22   32 20 31 20 2D 00      DB   "2 1 -",0   
1A28   CD C4 0B               CALL   flushBuffer   
1A2B   E1                     POP   HL   
1A2C   E5                     PUSH   HL   
1A2D   11 01 00               LD   DE,1   
1A30   B7                     OR   A   
1A31   ED 52                  SBC   HL,DE   
1A33   7D                     LD   A,L   
1A34   B4                     OR   H   
1A35   CA 95 1A               JP   Z,expectM_2891S62   
1A38   CD 4E 0C               CALL   printStr   
1A3B   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1A47   CD 4E 0C               CALL   printStr   
1A4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A59   21 01 00               LD   hl,1   
1A5C   E5                     PUSH   hl   
1A5D   E5                     PUSH   hl   
1A5E   CD 53 0D               CALL   run   
1A61   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A69   CD C4 0B               CALL   flushBuffer   
1A6C   CD 4E 0C               CALL   printStr   
1A6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A7C   E1                     POP   hl   
1A7D   E5                     PUSH   hl   
1A7E   E5                     PUSH   hl   
1A7F   CD 53 0D               CALL   run   
1A82   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A91   CD C4 0B               CALL   flushBuffer   
1A94   76                     HALT      
1A95                EXPECTM_2891S62:      
1A95   E1                     POP   HL   
1A96                          ;*Macro unroll:  test "3a= a-- a",2
1A96   31 00 4E               LD   SP,STACK   
1A99   CD 82 0C               CALL   coldInit   
1A9C   CD 61 4C               CALL   execStr   
1A9F   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1AA9   CD C4 0B               CALL   flushBuffer   
1AAC   E1                     POP   HL   
1AAD   E5                     PUSH   HL   
1AAE   11 02 00               LD   DE,2   
1AB1   B7                     OR   A   
1AB2   ED 52                  SBC   HL,DE   
1AB4   7D                     LD   A,L   
1AB5   B4                     OR   H   
1AB6   CA 1A 1B               JP   Z,expectM_2892S63   
1AB9   CD 4E 0C               CALL   printStr   
1ABC   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1ACC   CD 4E 0C               CALL   printStr   
1ACF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ADE   21 02 00               LD   hl,2   
1AE1   E5                     PUSH   hl   
1AE2   E5                     PUSH   hl   
1AE3   CD 53 0D               CALL   run   
1AE6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AEE   CD C4 0B               CALL   flushBuffer   
1AF1   CD 4E 0C               CALL   printStr   
1AF4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B01   E1                     POP   hl   
1B02   E5                     PUSH   hl   
1B03   E5                     PUSH   hl   
1B04   CD 53 0D               CALL   run   
1B07   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B16   CD C4 0B               CALL   flushBuffer   
1B19   76                     HALT      
1B1A                EXPECTM_2892S63:      
1B1A   E1                     POP   HL   
1B1B                          ;*Macro unroll:  test "3 5 &", 1
1B1B   31 00 4E               LD   SP,STACK   
1B1E   CD 82 0C               CALL   coldInit   
1B21   CD 61 4C               CALL   execStr   
1B24   33 20 35 20 26 00      DB   "3 5 &",0   
1B2A   CD C4 0B               CALL   flushBuffer   
1B2D   E1                     POP   HL   
1B2E   E5                     PUSH   HL   
1B2F   11 01 00               LD   DE,1   
1B32   B7                     OR   A   
1B33   ED 52                  SBC   HL,DE   
1B35   7D                     LD   A,L   
1B36   B4                     OR   H   
1B37   CA 97 1B               JP   Z,expectM_2893S64   
1B3A   CD 4E 0C               CALL   printStr   
1B3D   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1B49   CD 4E 0C               CALL   printStr   
1B4C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B5B   21 01 00               LD   hl,1   
1B5E   E5                     PUSH   hl   
1B5F   E5                     PUSH   hl   
1B60   CD 53 0D               CALL   run   
1B63   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B6B   CD C4 0B               CALL   flushBuffer   
1B6E   CD 4E 0C               CALL   printStr   
1B71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B7E   E1                     POP   hl   
1B7F   E5                     PUSH   hl   
1B80   E5                     PUSH   hl   
1B81   CD 53 0D               CALL   run   
1B84   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B93   CD C4 0B               CALL   flushBuffer   
1B96   76                     HALT      
1B97                EXPECTM_2893S64:      
1B97   E1                     POP   HL   
1B98                          ;*Macro unroll:  test "3 5 |", 7
1B98   31 00 4E               LD   SP,STACK   
1B9B   CD 82 0C               CALL   coldInit   
1B9E   CD 61 4C               CALL   execStr   
1BA1   33 20 35 20 7C 00      DB   "3 5 |",0   
1BA7   CD C4 0B               CALL   flushBuffer   
1BAA   E1                     POP   HL   
1BAB   E5                     PUSH   HL   
1BAC   11 07 00               LD   DE,7   
1BAF   B7                     OR   A   
1BB0   ED 52                  SBC   HL,DE   
1BB2   7D                     LD   A,L   
1BB3   B4                     OR   H   
1BB4   CA 14 1C               JP   Z,expectM_2894S65   
1BB7   CD 4E 0C               CALL   printStr   
1BBA   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1BC6   CD 4E 0C               CALL   printStr   
1BC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BD8   21 07 00               LD   hl,7   
1BDB   E5                     PUSH   hl   
1BDC   E5                     PUSH   hl   
1BDD   CD 53 0D               CALL   run   
1BE0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BE8   CD C4 0B               CALL   flushBuffer   
1BEB   CD 4E 0C               CALL   printStr   
1BEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BFB   E1                     POP   hl   
1BFC   E5                     PUSH   hl   
1BFD   E5                     PUSH   hl   
1BFE   CD 53 0D               CALL   run   
1C01   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C10   CD C4 0B               CALL   flushBuffer   
1C13   76                     HALT      
1C14                EXPECTM_2894S65:      
1C14   E1                     POP   HL   
1C15                          ;*Macro unroll:  test "3 5 /x", 6
1C15   31 00 4E               LD   SP,STACK   
1C18   CD 82 0C               CALL   coldInit   
1C1B   CD 61 4C               CALL   execStr   
1C1E   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1C25   CD C4 0B               CALL   flushBuffer   
1C28   E1                     POP   HL   
1C29   E5                     PUSH   HL   
1C2A   11 06 00               LD   DE,6   
1C2D   B7                     OR   A   
1C2E   ED 52                  SBC   HL,DE   
1C30   7D                     LD   A,L   
1C31   B4                     OR   H   
1C32   CA 93 1C               JP   Z,expectM_2895S66   
1C35   CD 4E 0C               CALL   printStr   
1C38   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1C45   CD 4E 0C               CALL   printStr   
1C48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C57   21 06 00               LD   hl,6   
1C5A   E5                     PUSH   hl   
1C5B   E5                     PUSH   hl   
1C5C   CD 53 0D               CALL   run   
1C5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C67   CD C4 0B               CALL   flushBuffer   
1C6A   CD 4E 0C               CALL   printStr   
1C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7A   E1                     POP   hl   
1C7B   E5                     PUSH   hl   
1C7C   E5                     PUSH   hl   
1C7D   CD 53 0D               CALL   run   
1C80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C8F   CD C4 0B               CALL   flushBuffer   
1C92   76                     HALT      
1C93                EXPECTM_2895S66:      
1C93   E1                     POP   HL   
1C94                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1C94   31 00 4E               LD   SP,STACK   
1C97   CD 82 0C               CALL   coldInit   
1C9A   CD 61 4C               CALL   execStr   
1C9D   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1CAC   CD C4 0B               CALL   flushBuffer   
1CAF   E1                     POP   HL   
1CB0   E5                     PUSH   HL   
1CB1   11 06 00               LD   DE,6   
1CB4   B7                     OR   A   
1CB5   ED 52                  SBC   HL,DE   
1CB7   7D                     LD   A,L   
1CB8   B4                     OR   H   
1CB9   CA 22 1D               JP   Z,expectM_2896S67   
1CBC   CD 4E 0C               CALL   printStr   
1CBF   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1CD4   CD 4E 0C               CALL   printStr   
1CD7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CE6   21 06 00               LD   hl,6   
1CE9   E5                     PUSH   hl   
1CEA   E5                     PUSH   hl   
1CEB   CD 53 0D               CALL   run   
1CEE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CF6   CD C4 0B               CALL   flushBuffer   
1CF9   CD 4E 0C               CALL   printStr   
1CFC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D09   E1                     POP   hl   
1D0A   E5                     PUSH   hl   
1D0B   E5                     PUSH   hl   
1D0C   CD 53 0D               CALL   run   
1D0F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D1E   CD C4 0B               CALL   flushBuffer   
1D21   76                     HALT      
1D22                EXPECTM_2896S67:      
1D22   E1                     POP   HL   
1D23                          ;*Macro unroll:  test "2 3 *", 6
1D23   31 00 4E               LD   SP,STACK   
1D26   CD 82 0C               CALL   coldInit   
1D29   CD 61 4C               CALL   execStr   
1D2C   32 20 33 20 2A 00      DB   "2 3 *",0   
1D32   CD C4 0B               CALL   flushBuffer   
1D35   E1                     POP   HL   
1D36   E5                     PUSH   HL   
1D37   11 06 00               LD   DE,6   
1D3A   B7                     OR   A   
1D3B   ED 52                  SBC   HL,DE   
1D3D   7D                     LD   A,L   
1D3E   B4                     OR   H   
1D3F   CA 9F 1D               JP   Z,expectM_2897S68   
1D42   CD 4E 0C               CALL   printStr   
1D45   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1D51   CD 4E 0C               CALL   printStr   
1D54   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D63   21 06 00               LD   hl,6   
1D66   E5                     PUSH   hl   
1D67   E5                     PUSH   hl   
1D68   CD 53 0D               CALL   run   
1D6B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D73   CD C4 0B               CALL   flushBuffer   
1D76   CD 4E 0C               CALL   printStr   
1D79   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D86   E1                     POP   hl   
1D87   E5                     PUSH   hl   
1D88   E5                     PUSH   hl   
1D89   CD 53 0D               CALL   run   
1D8C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D9B   CD C4 0B               CALL   flushBuffer   
1D9E   76                     HALT      
1D9F                EXPECTM_2897S68:      
1D9F   E1                     POP   HL   
1DA0                          ;*Macro unroll:  test "1 2 3 + *", 5
1DA0   31 00 4E               LD   SP,STACK   
1DA3   CD 82 0C               CALL   coldInit   
1DA6   CD 61 4C               CALL   execStr   
1DA9   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1DB3   CD C4 0B               CALL   flushBuffer   
1DB6   E1                     POP   HL   
1DB7   E5                     PUSH   HL   
1DB8   11 05 00               LD   DE,5   
1DBB   B7                     OR   A   
1DBC   ED 52                  SBC   HL,DE   
1DBE   7D                     LD   A,L   
1DBF   B4                     OR   H   
1DC0   CA 24 1E               JP   Z,expectM_2898S69   
1DC3   CD 4E 0C               CALL   printStr   
1DC6   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1DD6   CD 4E 0C               CALL   printStr   
1DD9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DE8   21 05 00               LD   hl,5   
1DEB   E5                     PUSH   hl   
1DEC   E5                     PUSH   hl   
1DED   CD 53 0D               CALL   run   
1DF0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DF8   CD C4 0B               CALL   flushBuffer   
1DFB   CD 4E 0C               CALL   printStr   
1DFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E0B   E1                     POP   hl   
1E0C   E5                     PUSH   hl   
1E0D   E5                     PUSH   hl   
1E0E   CD 53 0D               CALL   run   
1E11   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E20   CD C4 0B               CALL   flushBuffer   
1E23   76                     HALT      
1E24                EXPECTM_2898S69:      
1E24   E1                     POP   HL   
1E25                          ;*Macro unroll:  test "7 3 /", 2
1E25   31 00 4E               LD   SP,STACK   
1E28   CD 82 0C               CALL   coldInit   
1E2B   CD 61 4C               CALL   execStr   
1E2E   37 20 33 20 2F 00      DB   "7 3 /",0   
1E34   CD C4 0B               CALL   flushBuffer   
1E37   E1                     POP   HL   
1E38   E5                     PUSH   HL   
1E39   11 02 00               LD   DE,2   
1E3C   B7                     OR   A   
1E3D   ED 52                  SBC   HL,DE   
1E3F   7D                     LD   A,L   
1E40   B4                     OR   H   
1E41   CA A1 1E               JP   Z,expectM_2899S70   
1E44   CD 4E 0C               CALL   printStr   
1E47   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1E53   CD 4E 0C               CALL   printStr   
1E56   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E65   21 02 00               LD   hl,2   
1E68   E5                     PUSH   hl   
1E69   E5                     PUSH   hl   
1E6A   CD 53 0D               CALL   run   
1E6D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E75   CD C4 0B               CALL   flushBuffer   
1E78   CD 4E 0C               CALL   printStr   
1E7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E88   E1                     POP   hl   
1E89   E5                     PUSH   hl   
1E8A   E5                     PUSH   hl   
1E8B   CD 53 0D               CALL   run   
1E8E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E9D   CD C4 0B               CALL   flushBuffer   
1EA0   76                     HALT      
1EA1                EXPECTM_2899S70:      
1EA1   E1                     POP   HL   
1EA2                          ;*Macro unroll:  test "100a= 1a+= a", 101
1EA2   31 00 4E               LD   SP,STACK   
1EA5   CD 82 0C               CALL   coldInit   
1EA8   CD 61 4C               CALL   execStr   
1EAB   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
1EB8   CD C4 0B               CALL   flushBuffer   
1EBB   E1                     POP   HL   
1EBC   E5                     PUSH   HL   
1EBD   11 65 00               LD   DE,101   
1EC0   B7                     OR   A   
1EC1   ED 52                  SBC   HL,DE   
1EC3   7D                     LD   A,L   
1EC4   B4                     OR   H   
1EC5   CA 2C 1F               JP   Z,expectM_2900S71   
1EC8   CD 4E 0C               CALL   printStr   
1ECB   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
1EDE   CD 4E 0C               CALL   printStr   
1EE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EF0   21 65 00               LD   hl,101   
1EF3   E5                     PUSH   hl   
1EF4   E5                     PUSH   hl   
1EF5   CD 53 0D               CALL   run   
1EF8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F00   CD C4 0B               CALL   flushBuffer   
1F03   CD 4E 0C               CALL   printStr   
1F06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F13   E1                     POP   hl   
1F14   E5                     PUSH   hl   
1F15   E5                     PUSH   hl   
1F16   CD 53 0D               CALL   run   
1F19   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F28   CD C4 0B               CALL   flushBuffer   
1F2B   76                     HALT      
1F2C                EXPECTM_2900S71:      
1F2C   E1                     POP   HL   
1F2D                          ;*Macro unroll:  test "100a= a1-= a", 99
1F2D   31 00 4E               LD   SP,STACK   
1F30   CD 82 0C               CALL   coldInit   
1F33   CD 61 4C               CALL   execStr   
1F36   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
1F43   CD C4 0B               CALL   flushBuffer   
1F46   E1                     POP   HL   
1F47   E5                     PUSH   HL   
1F48   11 63 00               LD   DE,99   
1F4B   B7                     OR   A   
1F4C   ED 52                  SBC   HL,DE   
1F4E   7D                     LD   A,L   
1F4F   B4                     OR   H   
1F50   CA B7 1F               JP   Z,expectM_2901S72   
1F53   CD 4E 0C               CALL   printStr   
1F56   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
1F69   CD 4E 0C               CALL   printStr   
1F6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F7B   21 63 00               LD   hl,99   
1F7E   E5                     PUSH   hl   
1F7F   E5                     PUSH   hl   
1F80   CD 53 0D               CALL   run   
1F83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F8B   CD C4 0B               CALL   flushBuffer   
1F8E   CD 4E 0C               CALL   printStr   
1F91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F9E   E1                     POP   hl   
1F9F   E5                     PUSH   hl   
1FA0   E5                     PUSH   hl   
1FA1   CD 53 0D               CALL   run   
1FA4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FB3   CD C4 0B               CALL   flushBuffer   
1FB6   76                     HALT      
1FB7                EXPECTM_2901S72:      
1FB7   E1                     POP   HL   
1FB8                          ;*Macro unroll:  test "100a= a2*= a", 200
1FB8   31 00 4E               LD   SP,STACK   
1FBB   CD 82 0C               CALL   coldInit   
1FBE   CD 61 4C               CALL   execStr   
1FC1   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
1FCE   CD C4 0B               CALL   flushBuffer   
1FD1   E1                     POP   HL   
1FD2   E5                     PUSH   HL   
1FD3   11 C8 00               LD   DE,200   
1FD6   B7                     OR   A   
1FD7   ED 52                  SBC   HL,DE   
1FD9   7D                     LD   A,L   
1FDA   B4                     OR   H   
1FDB   CA 42 20               JP   Z,expectM_2902S73   
1FDE   CD 4E 0C               CALL   printStr   
1FE1   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
1FF4   CD 4E 0C               CALL   printStr   
1FF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2006   21 C8 00               LD   hl,200   
2009   E5                     PUSH   hl   
200A   E5                     PUSH   hl   
200B   CD 53 0D               CALL   run   
200E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2016   CD C4 0B               CALL   flushBuffer   
2019   CD 4E 0C               CALL   printStr   
201C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2029   E1                     POP   hl   
202A   E5                     PUSH   hl   
202B   E5                     PUSH   hl   
202C   CD 53 0D               CALL   run   
202F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
203E   CD C4 0B               CALL   flushBuffer   
2041   76                     HALT      
2042                EXPECTM_2902S73:      
2042   E1                     POP   HL   
2043                          ;*Macro unroll:  test "100a= a2/= a", 50
2043   31 00 4E               LD   SP,STACK   
2046   CD 82 0C               CALL   coldInit   
2049   CD 61 4C               CALL   execStr   
204C   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
2059   CD C4 0B               CALL   flushBuffer   
205C   E1                     POP   HL   
205D   E5                     PUSH   HL   
205E   11 32 00               LD   DE,50   
2061   B7                     OR   A   
2062   ED 52                  SBC   HL,DE   
2064   7D                     LD   A,L   
2065   B4                     OR   H   
2066   CA CD 20               JP   Z,expectM_2903S74   
2069   CD 4E 0C               CALL   printStr   
206C   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
207F   CD 4E 0C               CALL   printStr   
2082   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2091   21 32 00               LD   hl,50   
2094   E5                     PUSH   hl   
2095   E5                     PUSH   hl   
2096   CD 53 0D               CALL   run   
2099   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20A1   CD C4 0B               CALL   flushBuffer   
20A4   CD 4E 0C               CALL   printStr   
20A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20B4   E1                     POP   hl   
20B5   E5                     PUSH   hl   
20B6   E5                     PUSH   hl   
20B7   CD 53 0D               CALL   run   
20BA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20C9   CD C4 0B               CALL   flushBuffer   
20CC   76                     HALT      
20CD                EXPECTM_2903S74:      
20CD   E1                     POP   HL   
20CE                          ;*Macro unroll:  test "7 3 / /re", 1
20CE   31 00 4E               LD   SP,STACK   
20D1   CD 82 0C               CALL   coldInit   
20D4   CD 61 4C               CALL   execStr   
20D7   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
20E1   CD C4 0B               CALL   flushBuffer   
20E4   E1                     POP   HL   
20E5   E5                     PUSH   HL   
20E6   11 01 00               LD   DE,1   
20E9   B7                     OR   A   
20EA   ED 52                  SBC   HL,DE   
20EC   7D                     LD   A,L   
20ED   B4                     OR   H   
20EE   CA 52 21               JP   Z,expectM_2904S75   
20F1   CD 4E 0C               CALL   printStr   
20F4   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2104   CD 4E 0C               CALL   printStr   
2107   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2116   21 01 00               LD   hl,1   
2119   E5                     PUSH   hl   
211A   E5                     PUSH   hl   
211B   CD 53 0D               CALL   run   
211E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2126   CD C4 0B               CALL   flushBuffer   
2129   CD 4E 0C               CALL   printStr   
212C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2139   E1                     POP   hl   
213A   E5                     PUSH   hl   
213B   E5                     PUSH   hl   
213C   CD 53 0D               CALL   run   
213F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
214E   CD C4 0B               CALL   flushBuffer   
2151   76                     HALT      
2152                EXPECTM_2904S75:      
2152   E1                     POP   HL   
2153                          ;*Macro unroll:  test "7 3 /", 2
2153   31 00 4E               LD   SP,STACK   
2156   CD 82 0C               CALL   coldInit   
2159   CD 61 4C               CALL   execStr   
215C   37 20 33 20 2F 00      DB   "7 3 /",0   
2162   CD C4 0B               CALL   flushBuffer   
2165   E1                     POP   HL   
2166   E5                     PUSH   HL   
2167   11 02 00               LD   DE,2   
216A   B7                     OR   A   
216B   ED 52                  SBC   HL,DE   
216D   7D                     LD   A,L   
216E   B4                     OR   H   
216F   CA CF 21               JP   Z,expectM_2905S76   
2172   CD 4E 0C               CALL   printStr   
2175   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2181   CD 4E 0C               CALL   printStr   
2184   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2193   21 02 00               LD   hl,2   
2196   E5                     PUSH   hl   
2197   E5                     PUSH   hl   
2198   CD 53 0D               CALL   run   
219B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21A3   CD C4 0B               CALL   flushBuffer   
21A6   CD 4E 0C               CALL   printStr   
21A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21B6   E1                     POP   hl   
21B7   E5                     PUSH   hl   
21B8   E5                     PUSH   hl   
21B9   CD 53 0D               CALL   run   
21BC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21CB   CD C4 0B               CALL   flushBuffer   
21CE   76                     HALT      
21CF                EXPECTM_2905S76:      
21CF   E1                     POP   HL   
21D0                          ;*Macro unroll:  test "2 3 ==", FALSE
21D0   31 00 4E               LD   SP,STACK   
21D3   CD 82 0C               CALL   coldInit   
21D6   CD 61 4C               CALL   execStr   
21D9   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
21E0   CD C4 0B               CALL   flushBuffer   
21E3   E1                     POP   HL   
21E4   E5                     PUSH   HL   
21E5   11 00 00               LD   DE,FALSE   
21E8   B7                     OR   A   
21E9   ED 52                  SBC   HL,DE   
21EB   7D                     LD   A,L   
21EC   B4                     OR   H   
21ED   CA 4E 22               JP   Z,expectM_2906S77   
21F0   CD 4E 0C               CALL   printStr   
21F3   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2200   CD 4E 0C               CALL   printStr   
2203   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2212   21 00 00               LD   hl,FALSE   
2215   E5                     PUSH   hl   
2216   E5                     PUSH   hl   
2217   CD 53 0D               CALL   run   
221A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2222   CD C4 0B               CALL   flushBuffer   
2225   CD 4E 0C               CALL   printStr   
2228   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2235   E1                     POP   hl   
2236   E5                     PUSH   hl   
2237   E5                     PUSH   hl   
2238   CD 53 0D               CALL   run   
223B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
224A   CD C4 0B               CALL   flushBuffer   
224D   76                     HALT      
224E                EXPECTM_2906S77:      
224E   E1                     POP   HL   
224F                          ;*Macro unroll:  test "3 3 ==", TRUE
224F   31 00 4E               LD   SP,STACK   
2252   CD 82 0C               CALL   coldInit   
2255   CD 61 4C               CALL   execStr   
2258   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
225F   CD C4 0B               CALL   flushBuffer   
2262   E1                     POP   HL   
2263   E5                     PUSH   HL   
2264   11 FF FF               LD   DE,TRUE   
2267   B7                     OR   A   
2268   ED 52                  SBC   HL,DE   
226A   7D                     LD   A,L   
226B   B4                     OR   H   
226C   CA CD 22               JP   Z,expectM_2907S78   
226F   CD 4E 0C               CALL   printStr   
2272   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
227F   CD 4E 0C               CALL   printStr   
2282   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2291   21 FF FF               LD   hl,TRUE   
2294   E5                     PUSH   hl   
2295   E5                     PUSH   hl   
2296   CD 53 0D               CALL   run   
2299   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22A1   CD C4 0B               CALL   flushBuffer   
22A4   CD 4E 0C               CALL   printStr   
22A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22B4   E1                     POP   hl   
22B5   E5                     PUSH   hl   
22B6   E5                     PUSH   hl   
22B7   CD 53 0D               CALL   run   
22BA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22C9   CD C4 0B               CALL   flushBuffer   
22CC   76                     HALT      
22CD                EXPECTM_2907S78:      
22CD   E1                     POP   HL   
22CE                          ;*Macro unroll:  test "1 2 <", TRUE
22CE   31 00 4E               LD   SP,STACK   
22D1   CD 82 0C               CALL   coldInit   
22D4   CD 61 4C               CALL   execStr   
22D7   31 20 32 20 3C 00      DB   "1 2 <",0   
22DD   CD C4 0B               CALL   flushBuffer   
22E0   E1                     POP   HL   
22E1   E5                     PUSH   HL   
22E2   11 FF FF               LD   DE,TRUE   
22E5   B7                     OR   A   
22E6   ED 52                  SBC   HL,DE   
22E8   7D                     LD   A,L   
22E9   B4                     OR   H   
22EA   CA 4A 23               JP   Z,expectM_2908S79   
22ED   CD 4E 0C               CALL   printStr   
22F0   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
22FC   CD 4E 0C               CALL   printStr   
22FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
230E   21 FF FF               LD   hl,TRUE   
2311   E5                     PUSH   hl   
2312   E5                     PUSH   hl   
2313   CD 53 0D               CALL   run   
2316   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
231E   CD C4 0B               CALL   flushBuffer   
2321   CD 4E 0C               CALL   printStr   
2324   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2331   E1                     POP   hl   
2332   E5                     PUSH   hl   
2333   E5                     PUSH   hl   
2334   CD 53 0D               CALL   run   
2337   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2346   CD C4 0B               CALL   flushBuffer   
2349   76                     HALT      
234A                EXPECTM_2908S79:      
234A   E1                     POP   HL   
234B                          ;*Macro unroll:  test "2 1 <", FALSE
234B   31 00 4E               LD   SP,STACK   
234E   CD 82 0C               CALL   coldInit   
2351   CD 61 4C               CALL   execStr   
2354   32 20 31 20 3C 00      DB   "2 1 <",0   
235A   CD C4 0B               CALL   flushBuffer   
235D   E1                     POP   HL   
235E   E5                     PUSH   HL   
235F   11 00 00               LD   DE,FALSE   
2362   B7                     OR   A   
2363   ED 52                  SBC   HL,DE   
2365   7D                     LD   A,L   
2366   B4                     OR   H   
2367   CA C7 23               JP   Z,expectM_2909S80   
236A   CD 4E 0C               CALL   printStr   
236D   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2379   CD 4E 0C               CALL   printStr   
237C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
238B   21 00 00               LD   hl,FALSE   
238E   E5                     PUSH   hl   
238F   E5                     PUSH   hl   
2390   CD 53 0D               CALL   run   
2393   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
239B   CD C4 0B               CALL   flushBuffer   
239E   CD 4E 0C               CALL   printStr   
23A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23AE   E1                     POP   hl   
23AF   E5                     PUSH   hl   
23B0   E5                     PUSH   hl   
23B1   CD 53 0D               CALL   run   
23B4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23C3   CD C4 0B               CALL   flushBuffer   
23C6   76                     HALT      
23C7                EXPECTM_2909S80:      
23C7   E1                     POP   HL   
23C8                          ;*Macro unroll:  test "2 3 <", TRUE
23C8   31 00 4E               LD   SP,STACK   
23CB   CD 82 0C               CALL   coldInit   
23CE   CD 61 4C               CALL   execStr   
23D1   32 20 33 20 3C 00      DB   "2 3 <",0   
23D7   CD C4 0B               CALL   flushBuffer   
23DA   E1                     POP   HL   
23DB   E5                     PUSH   HL   
23DC   11 FF FF               LD   DE,TRUE   
23DF   B7                     OR   A   
23E0   ED 52                  SBC   HL,DE   
23E2   7D                     LD   A,L   
23E3   B4                     OR   H   
23E4   CA 44 24               JP   Z,expectM_2910S81   
23E7   CD 4E 0C               CALL   printStr   
23EA   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
23F6   CD 4E 0C               CALL   printStr   
23F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2408   21 FF FF               LD   hl,TRUE   
240B   E5                     PUSH   hl   
240C   E5                     PUSH   hl   
240D   CD 53 0D               CALL   run   
2410   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2418   CD C4 0B               CALL   flushBuffer   
241B   CD 4E 0C               CALL   printStr   
241E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
242B   E1                     POP   hl   
242C   E5                     PUSH   hl   
242D   E5                     PUSH   hl   
242E   CD 53 0D               CALL   run   
2431   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2440   CD C4 0B               CALL   flushBuffer   
2443   76                     HALT      
2444                EXPECTM_2910S81:      
2444   E1                     POP   HL   
2445                          ;*Macro unroll:  test "3 3 <", FALSE
2445   31 00 4E               LD   SP,STACK   
2448   CD 82 0C               CALL   coldInit   
244B   CD 61 4C               CALL   execStr   
244E   33 20 33 20 3C 00      DB   "3 3 <",0   
2454   CD C4 0B               CALL   flushBuffer   
2457   E1                     POP   HL   
2458   E5                     PUSH   HL   
2459   11 00 00               LD   DE,FALSE   
245C   B7                     OR   A   
245D   ED 52                  SBC   HL,DE   
245F   7D                     LD   A,L   
2460   B4                     OR   H   
2461   CA C1 24               JP   Z,expectM_2911S82   
2464   CD 4E 0C               CALL   printStr   
2467   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2473   CD 4E 0C               CALL   printStr   
2476   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2485   21 00 00               LD   hl,FALSE   
2488   E5                     PUSH   hl   
2489   E5                     PUSH   hl   
248A   CD 53 0D               CALL   run   
248D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2495   CD C4 0B               CALL   flushBuffer   
2498   CD 4E 0C               CALL   printStr   
249B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24A8   E1                     POP   hl   
24A9   E5                     PUSH   hl   
24AA   E5                     PUSH   hl   
24AB   CD 53 0D               CALL   run   
24AE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24BD   CD C4 0B               CALL   flushBuffer   
24C0   76                     HALT      
24C1                EXPECTM_2911S82:      
24C1   E1                     POP   HL   
24C2                          ;*Macro unroll:  test "1 2 >", FALSE
24C2   31 00 4E               LD   SP,STACK   
24C5   CD 82 0C               CALL   coldInit   
24C8   CD 61 4C               CALL   execStr   
24CB   31 20 32 20 3E 00      DB   "1 2 >",0   
24D1   CD C4 0B               CALL   flushBuffer   
24D4   E1                     POP   HL   
24D5   E5                     PUSH   HL   
24D6   11 00 00               LD   DE,FALSE   
24D9   B7                     OR   A   
24DA   ED 52                  SBC   HL,DE   
24DC   7D                     LD   A,L   
24DD   B4                     OR   H   
24DE   CA 3E 25               JP   Z,expectM_2912S83   
24E1   CD 4E 0C               CALL   printStr   
24E4   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
24F0   CD 4E 0C               CALL   printStr   
24F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2502   21 00 00               LD   hl,FALSE   
2505   E5                     PUSH   hl   
2506   E5                     PUSH   hl   
2507   CD 53 0D               CALL   run   
250A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2512   CD C4 0B               CALL   flushBuffer   
2515   CD 4E 0C               CALL   printStr   
2518   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2525   E1                     POP   hl   
2526   E5                     PUSH   hl   
2527   E5                     PUSH   hl   
2528   CD 53 0D               CALL   run   
252B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
253A   CD C4 0B               CALL   flushBuffer   
253D   76                     HALT      
253E                EXPECTM_2912S83:      
253E   E1                     POP   HL   
253F                          ;*Macro unroll:  test "2 1 >", TRUE
253F   31 00 4E               LD   SP,STACK   
2542   CD 82 0C               CALL   coldInit   
2545   CD 61 4C               CALL   execStr   
2548   32 20 31 20 3E 00      DB   "2 1 >",0   
254E   CD C4 0B               CALL   flushBuffer   
2551   E1                     POP   HL   
2552   E5                     PUSH   HL   
2553   11 FF FF               LD   DE,TRUE   
2556   B7                     OR   A   
2557   ED 52                  SBC   HL,DE   
2559   7D                     LD   A,L   
255A   B4                     OR   H   
255B   CA BB 25               JP   Z,expectM_2913S84   
255E   CD 4E 0C               CALL   printStr   
2561   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
256D   CD 4E 0C               CALL   printStr   
2570   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
257F   21 FF FF               LD   hl,TRUE   
2582   E5                     PUSH   hl   
2583   E5                     PUSH   hl   
2584   CD 53 0D               CALL   run   
2587   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
258F   CD C4 0B               CALL   flushBuffer   
2592   CD 4E 0C               CALL   printStr   
2595   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25A2   E1                     POP   hl   
25A3   E5                     PUSH   hl   
25A4   E5                     PUSH   hl   
25A5   CD 53 0D               CALL   run   
25A8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25B7   CD C4 0B               CALL   flushBuffer   
25BA   76                     HALT      
25BB                EXPECTM_2913S84:      
25BB   E1                     POP   HL   
25BC                          ;*Macro unroll:  test "3 3 >", FALSE
25BC   31 00 4E               LD   SP,STACK   
25BF   CD 82 0C               CALL   coldInit   
25C2   CD 61 4C               CALL   execStr   
25C5   33 20 33 20 3E 00      DB   "3 3 >",0   
25CB   CD C4 0B               CALL   flushBuffer   
25CE   E1                     POP   HL   
25CF   E5                     PUSH   HL   
25D0   11 00 00               LD   DE,FALSE   
25D3   B7                     OR   A   
25D4   ED 52                  SBC   HL,DE   
25D6   7D                     LD   A,L   
25D7   B4                     OR   H   
25D8   CA 38 26               JP   Z,expectM_2914S85   
25DB   CD 4E 0C               CALL   printStr   
25DE   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
25EA   CD 4E 0C               CALL   printStr   
25ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25FC   21 00 00               LD   hl,FALSE   
25FF   E5                     PUSH   hl   
2600   E5                     PUSH   hl   
2601   CD 53 0D               CALL   run   
2604   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
260C   CD C4 0B               CALL   flushBuffer   
260F   CD 4E 0C               CALL   printStr   
2612   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
261F   E1                     POP   hl   
2620   E5                     PUSH   hl   
2621   E5                     PUSH   hl   
2622   CD 53 0D               CALL   run   
2625   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2634   CD C4 0B               CALL   flushBuffer   
2637   76                     HALT      
2638                EXPECTM_2914S85:      
2638   E1                     POP   HL   
2639                          ;*Macro unroll:  test "4 3 >", TRUE
2639   31 00 4E               LD   SP,STACK   
263C   CD 82 0C               CALL   coldInit   
263F   CD 61 4C               CALL   execStr   
2642   34 20 33 20 3E 00      DB   "4 3 >",0   
2648   CD C4 0B               CALL   flushBuffer   
264B   E1                     POP   HL   
264C   E5                     PUSH   HL   
264D   11 FF FF               LD   DE,TRUE   
2650   B7                     OR   A   
2651   ED 52                  SBC   HL,DE   
2653   7D                     LD   A,L   
2654   B4                     OR   H   
2655   CA B5 26               JP   Z,expectM_2915S86   
2658   CD 4E 0C               CALL   printStr   
265B   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2667   CD 4E 0C               CALL   printStr   
266A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2679   21 FF FF               LD   hl,TRUE   
267C   E5                     PUSH   hl   
267D   E5                     PUSH   hl   
267E   CD 53 0D               CALL   run   
2681   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2689   CD C4 0B               CALL   flushBuffer   
268C   CD 4E 0C               CALL   printStr   
268F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
269C   E1                     POP   hl   
269D   E5                     PUSH   hl   
269E   E5                     PUSH   hl   
269F   CD 53 0D               CALL   run   
26A2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26B1   CD C4 0B               CALL   flushBuffer   
26B4   76                     HALT      
26B5                EXPECTM_2915S86:      
26B5   E1                     POP   HL   
26B6                          ;*Macro unroll:  test "2 2 <=", TRUE
26B6   31 00 4E               LD   SP,STACK   
26B9   CD 82 0C               CALL   coldInit   
26BC   CD 61 4C               CALL   execStr   
26BF   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
26C6   CD C4 0B               CALL   flushBuffer   
26C9   E1                     POP   HL   
26CA   E5                     PUSH   HL   
26CB   11 FF FF               LD   DE,TRUE   
26CE   B7                     OR   A   
26CF   ED 52                  SBC   HL,DE   
26D1   7D                     LD   A,L   
26D2   B4                     OR   H   
26D3   CA 34 27               JP   Z,expectM_2916S87   
26D6   CD 4E 0C               CALL   printStr   
26D9   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
26E6   CD 4E 0C               CALL   printStr   
26E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26F8   21 FF FF               LD   hl,TRUE   
26FB   E5                     PUSH   hl   
26FC   E5                     PUSH   hl   
26FD   CD 53 0D               CALL   run   
2700   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2708   CD C4 0B               CALL   flushBuffer   
270B   CD 4E 0C               CALL   printStr   
270E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
271B   E1                     POP   hl   
271C   E5                     PUSH   hl   
271D   E5                     PUSH   hl   
271E   CD 53 0D               CALL   run   
2721   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2730   CD C4 0B               CALL   flushBuffer   
2733   76                     HALT      
2734                EXPECTM_2916S87:      
2734   E1                     POP   HL   
2735                          ;*Macro unroll:  test "2 2 >=", TRUE
2735   31 00 4E               LD   SP,STACK   
2738   CD 82 0C               CALL   coldInit   
273B   CD 61 4C               CALL   execStr   
273E   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2745   CD C4 0B               CALL   flushBuffer   
2748   E1                     POP   HL   
2749   E5                     PUSH   HL   
274A   11 FF FF               LD   DE,TRUE   
274D   B7                     OR   A   
274E   ED 52                  SBC   HL,DE   
2750   7D                     LD   A,L   
2751   B4                     OR   H   
2752   CA B3 27               JP   Z,expectM_2917S88   
2755   CD 4E 0C               CALL   printStr   
2758   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2765   CD 4E 0C               CALL   printStr   
2768   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2777   21 FF FF               LD   hl,TRUE   
277A   E5                     PUSH   hl   
277B   E5                     PUSH   hl   
277C   CD 53 0D               CALL   run   
277F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2787   CD C4 0B               CALL   flushBuffer   
278A   CD 4E 0C               CALL   printStr   
278D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
279A   E1                     POP   hl   
279B   E5                     PUSH   hl   
279C   E5                     PUSH   hl   
279D   CD 53 0D               CALL   run   
27A0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27AF   CD C4 0B               CALL   flushBuffer   
27B2   76                     HALT      
27B3                EXPECTM_2917S88:      
27B3   E1                     POP   HL   
27B4                          ;*Macro unroll:  test "3 1 <<", 6
27B4   31 00 4E               LD   SP,STACK   
27B7   CD 82 0C               CALL   coldInit   
27BA   CD 61 4C               CALL   execStr   
27BD   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
27C4   CD C4 0B               CALL   flushBuffer   
27C7   E1                     POP   HL   
27C8   E5                     PUSH   HL   
27C9   11 06 00               LD   DE,6   
27CC   B7                     OR   A   
27CD   ED 52                  SBC   HL,DE   
27CF   7D                     LD   A,L   
27D0   B4                     OR   H   
27D1   CA 32 28               JP   Z,expectM_2918S89   
27D4   CD 4E 0C               CALL   printStr   
27D7   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
27E4   CD 4E 0C               CALL   printStr   
27E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27F6   21 06 00               LD   hl,6   
27F9   E5                     PUSH   hl   
27FA   E5                     PUSH   hl   
27FB   CD 53 0D               CALL   run   
27FE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2806   CD C4 0B               CALL   flushBuffer   
2809   CD 4E 0C               CALL   printStr   
280C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2819   E1                     POP   hl   
281A   E5                     PUSH   hl   
281B   E5                     PUSH   hl   
281C   CD 53 0D               CALL   run   
281F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
282E   CD C4 0B               CALL   flushBuffer   
2831   76                     HALT      
2832                EXPECTM_2918S89:      
2832   E1                     POP   HL   
2833                          ;*Macro unroll:  test "10 1 >>", 5
2833   31 00 4E               LD   SP,STACK   
2836   CD 82 0C               CALL   coldInit   
2839   CD 61 4C               CALL   execStr   
283C   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2844   CD C4 0B               CALL   flushBuffer   
2847   E1                     POP   HL   
2848   E5                     PUSH   HL   
2849   11 05 00               LD   DE,5   
284C   B7                     OR   A   
284D   ED 52                  SBC   HL,DE   
284F   7D                     LD   A,L   
2850   B4                     OR   H   
2851   CA B3 28               JP   Z,expectM_2919S90   
2854   CD 4E 0C               CALL   printStr   
2857   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2865   CD 4E 0C               CALL   printStr   
2868   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2877   21 05 00               LD   hl,5   
287A   E5                     PUSH   hl   
287B   E5                     PUSH   hl   
287C   CD 53 0D               CALL   run   
287F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2887   CD C4 0B               CALL   flushBuffer   
288A   CD 4E 0C               CALL   printStr   
288D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
289A   E1                     POP   hl   
289B   E5                     PUSH   hl   
289C   E5                     PUSH   hl   
289D   CD 53 0D               CALL   run   
28A0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28AF   CD C4 0B               CALL   flushBuffer   
28B2   76                     HALT      
28B3                EXPECTM_2919S90:      
28B3   E1                     POP   HL   
28B4                          ;*Macro unroll:  test "1 x = x", 1
28B4   31 00 4E               LD   SP,STACK   
28B7   CD 82 0C               CALL   coldInit   
28BA   CD 61 4C               CALL   execStr   
28BD   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
28C5   CD C4 0B               CALL   flushBuffer   
28C8   E1                     POP   HL   
28C9   E5                     PUSH   HL   
28CA   11 01 00               LD   DE,1   
28CD   B7                     OR   A   
28CE   ED 52                  SBC   HL,DE   
28D0   7D                     LD   A,L   
28D1   B4                     OR   H   
28D2   CA 34 29               JP   Z,expectM_2920S91   
28D5   CD 4E 0C               CALL   printStr   
28D8   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
28E6   CD 4E 0C               CALL   printStr   
28E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28F8   21 01 00               LD   hl,1   
28FB   E5                     PUSH   hl   
28FC   E5                     PUSH   hl   
28FD   CD 53 0D               CALL   run   
2900   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2908   CD C4 0B               CALL   flushBuffer   
290B   CD 4E 0C               CALL   printStr   
290E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
291B   E1                     POP   hl   
291C   E5                     PUSH   hl   
291D   E5                     PUSH   hl   
291E   CD 53 0D               CALL   run   
2921   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2930   CD C4 0B               CALL   flushBuffer   
2933   76                     HALT      
2934                EXPECTM_2920S91:      
2934   E1                     POP   HL   
2935                          ;*Macro unroll:  test "1{}^", 1
2935   31 00 4E               LD   SP,STACK   
2938   CD 82 0C               CALL   coldInit   
293B   CD 61 4C               CALL   execStr   
293E   31 7B 7D 5E 00         DB   "1{}^",0   
2943   CD C4 0B               CALL   flushBuffer   
2946   E1                     POP   HL   
2947   E5                     PUSH   HL   
2948   11 01 00               LD   DE,1   
294B   B7                     OR   A   
294C   ED 52                  SBC   HL,DE   
294E   7D                     LD   A,L   
294F   B4                     OR   H   
2950   CA AF 29               JP   Z,expectM_2921S92   
2953   CD 4E 0C               CALL   printStr   
2956   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2961   CD 4E 0C               CALL   printStr   
2964   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2973   21 01 00               LD   hl,1   
2976   E5                     PUSH   hl   
2977   E5                     PUSH   hl   
2978   CD 53 0D               CALL   run   
297B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2983   CD C4 0B               CALL   flushBuffer   
2986   CD 4E 0C               CALL   printStr   
2989   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2996   E1                     POP   hl   
2997   E5                     PUSH   hl   
2998   E5                     PUSH   hl   
2999   CD 53 0D               CALL   run   
299C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29AB   CD C4 0B               CALL   flushBuffer   
29AE   76                     HALT      
29AF                EXPECTM_2921S92:      
29AF   E1                     POP   HL   
29B0                          ;*Macro unroll:  test "{1}^", 1
29B0   31 00 4E               LD   SP,STACK   
29B3   CD 82 0C               CALL   coldInit   
29B6   CD 61 4C               CALL   execStr   
29B9   7B 31 7D 5E 00         DB   "{1}^",0   
29BE   CD C4 0B               CALL   flushBuffer   
29C1   E1                     POP   HL   
29C2   E5                     PUSH   HL   
29C3   11 01 00               LD   DE,1   
29C6   B7                     OR   A   
29C7   ED 52                  SBC   HL,DE   
29C9   7D                     LD   A,L   
29CA   B4                     OR   H   
29CB   CA 2A 2A               JP   Z,expectM_2922S93   
29CE   CD 4E 0C               CALL   printStr   
29D1   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
29DC   CD 4E 0C               CALL   printStr   
29DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29EE   21 01 00               LD   hl,1   
29F1   E5                     PUSH   hl   
29F2   E5                     PUSH   hl   
29F3   CD 53 0D               CALL   run   
29F6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29FE   CD C4 0B               CALL   flushBuffer   
2A01   CD 4E 0C               CALL   printStr   
2A04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A11   E1                     POP   hl   
2A12   E5                     PUSH   hl   
2A13   E5                     PUSH   hl   
2A14   CD 53 0D               CALL   run   
2A17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A26   CD C4 0B               CALL   flushBuffer   
2A29   76                     HALT      
2A2A                EXPECTM_2922S93:      
2A2A   E1                     POP   HL   
2A2B                          ;*Macro unroll:  test "{{1}^}^", 1
2A2B   31 00 4E               LD   SP,STACK   
2A2E   CD 82 0C               CALL   coldInit   
2A31   CD 61 4C               CALL   execStr   
2A34   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2A3C   CD C4 0B               CALL   flushBuffer   
2A3F   E1                     POP   HL   
2A40   E5                     PUSH   HL   
2A41   11 01 00               LD   DE,1   
2A44   B7                     OR   A   
2A45   ED 52                  SBC   HL,DE   
2A47   7D                     LD   A,L   
2A48   B4                     OR   H   
2A49   CA AB 2A               JP   Z,expectM_2923S94   
2A4C   CD 4E 0C               CALL   printStr   
2A4F   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2A5D   CD 4E 0C               CALL   printStr   
2A60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A6F   21 01 00               LD   hl,1   
2A72   E5                     PUSH   hl   
2A73   E5                     PUSH   hl   
2A74   CD 53 0D               CALL   run   
2A77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A7F   CD C4 0B               CALL   flushBuffer   
2A82   CD 4E 0C               CALL   printStr   
2A85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A92   E1                     POP   hl   
2A93   E5                     PUSH   hl   
2A94   E5                     PUSH   hl   
2A95   CD 53 0D               CALL   run   
2A98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AA7   CD C4 0B               CALL   flushBuffer   
2AAA   76                     HALT      
2AAB                EXPECTM_2923S94:      
2AAB   E1                     POP   HL   
2AAC                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2AAC   31 00 4E               LD   SP,STACK   
2AAF   CD 82 0C               CALL   coldInit   
2AB2   CD 61 4C               CALL   execStr   
2AB5   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2AC0   CD C4 0B               CALL   flushBuffer   
2AC3   E1                     POP   HL   
2AC4   E5                     PUSH   HL   
2AC5   11 01 00               LD   DE,1   
2AC8   B7                     OR   A   
2AC9   ED 52                  SBC   HL,DE   
2ACB   7D                     LD   A,L   
2ACC   B4                     OR   H   
2ACD   CA 32 2B               JP   Z,expectM_2924S95   
2AD0   CD 4E 0C               CALL   printStr   
2AD3   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2AE4   CD 4E 0C               CALL   printStr   
2AE7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AF6   21 01 00               LD   hl,1   
2AF9   E5                     PUSH   hl   
2AFA   E5                     PUSH   hl   
2AFB   CD 53 0D               CALL   run   
2AFE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B06   CD C4 0B               CALL   flushBuffer   
2B09   CD 4E 0C               CALL   printStr   
2B0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B19   E1                     POP   hl   
2B1A   E5                     PUSH   hl   
2B1B   E5                     PUSH   hl   
2B1C   CD 53 0D               CALL   run   
2B1F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B2E   CD C4 0B               CALL   flushBuffer   
2B31   76                     HALT      
2B32                EXPECTM_2924S95:      
2B32   E1                     POP   HL   
2B33                          ;*Macro unroll:  test "5 /f{10} ?", 5
2B33   31 00 4E               LD   SP,STACK   
2B36   CD 82 0C               CALL   coldInit   
2B39   CD 61 4C               CALL   execStr   
2B3C   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2B47   CD C4 0B               CALL   flushBuffer   
2B4A   E1                     POP   HL   
2B4B   E5                     PUSH   HL   
2B4C   11 05 00               LD   DE,5   
2B4F   B7                     OR   A   
2B50   ED 52                  SBC   HL,DE   
2B52   7D                     LD   A,L   
2B53   B4                     OR   H   
2B54   CA B9 2B               JP   Z,expectM_2925S96   
2B57   CD 4E 0C               CALL   printStr   
2B5A   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2B6B   CD 4E 0C               CALL   printStr   
2B6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B7D   21 05 00               LD   hl,5   
2B80   E5                     PUSH   hl   
2B81   E5                     PUSH   hl   
2B82   CD 53 0D               CALL   run   
2B85   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B8D   CD C4 0B               CALL   flushBuffer   
2B90   CD 4E 0C               CALL   printStr   
2B93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BA0   E1                     POP   hl   
2BA1   E5                     PUSH   hl   
2BA2   E5                     PUSH   hl   
2BA3   CD 53 0D               CALL   run   
2BA6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BB5   CD C4 0B               CALL   flushBuffer   
2BB8   76                     HALT      
2BB9                EXPECTM_2925S96:      
2BB9   E1                     POP   HL   
2BBA                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2BBA   31 00 4E               LD   SP,STACK   
2BBD   CD 82 0C               CALL   coldInit   
2BC0   CD 61 4C               CALL   execStr   
2BC3   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2BD0   CD C4 0B               CALL   flushBuffer   
2BD3   E1                     POP   HL   
2BD4   E5                     PUSH   HL   
2BD5   11 0F 00               LD   DE,15   
2BD8   B7                     OR   A   
2BD9   ED 52                  SBC   HL,DE   
2BDB   7D                     LD   A,L   
2BDC   B4                     OR   H   
2BDD   CA 44 2C               JP   Z,expectM_2926S97   
2BE0   CD 4E 0C               CALL   printStr   
2BE3   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2BF6   CD 4E 0C               CALL   printStr   
2BF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C08   21 0F 00               LD   hl,15   
2C0B   E5                     PUSH   hl   
2C0C   E5                     PUSH   hl   
2C0D   CD 53 0D               CALL   run   
2C10   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C18   CD C4 0B               CALL   flushBuffer   
2C1B   CD 4E 0C               CALL   printStr   
2C1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C2B   E1                     POP   hl   
2C2C   E5                     PUSH   hl   
2C2D   E5                     PUSH   hl   
2C2E   CD 53 0D               CALL   run   
2C31   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C40   CD C4 0B               CALL   flushBuffer   
2C43   76                     HALT      
2C44                EXPECTM_2926S97:      
2C44   E1                     POP   HL   
2C45                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2C45   31 00 4E               LD   SP,STACK   
2C48   CD 82 0C               CALL   coldInit   
2C4B   CD 61 4C               CALL   execStr   
2C4E   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2C60   CD C4 0B               CALL   flushBuffer   
2C63   E1                     POP   HL   
2C64   E5                     PUSH   HL   
2C65   11 15 00               LD   DE,21   
2C68   B7                     OR   A   
2C69   ED 52                  SBC   HL,DE   
2C6B   7D                     LD   A,L   
2C6C   B4                     OR   H   
2C6D   CA D9 2C               JP   Z,expectM_2927S98   
2C70   CD 4E 0C               CALL   printStr   
2C73   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2C8B   CD 4E 0C               CALL   printStr   
2C8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C9D   21 15 00               LD   hl,21   
2CA0   E5                     PUSH   hl   
2CA1   E5                     PUSH   hl   
2CA2   CD 53 0D               CALL   run   
2CA5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CAD   CD C4 0B               CALL   flushBuffer   
2CB0   CD 4E 0C               CALL   printStr   
2CB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CC0   E1                     POP   hl   
2CC1   E5                     PUSH   hl   
2CC2   E5                     PUSH   hl   
2CC3   CD 53 0D               CALL   run   
2CC6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CD5   CD C4 0B               CALL   flushBuffer   
2CD8   76                     HALT      
2CD9                EXPECTM_2927S98:      
2CD9   E1                     POP   HL   
2CDA                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2CDA   31 00 4E               LD   SP,STACK   
2CDD   CD 82 0C               CALL   coldInit   
2CE0   CD 61 4C               CALL   execStr   
2CE3   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2CF5   CD C4 0B               CALL   flushBuffer   
2CF8   E1                     POP   HL   
2CF9   E5                     PUSH   HL   
2CFA   11 0B 00               LD   DE,11   
2CFD   B7                     OR   A   
2CFE   ED 52                  SBC   HL,DE   
2D00   7D                     LD   A,L   
2D01   B4                     OR   H   
2D02   CA 6E 2D               JP   Z,expectM_2928S99   
2D05   CD 4E 0C               CALL   printStr   
2D08   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2D20   CD 4E 0C               CALL   printStr   
2D23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D32   21 0B 00               LD   hl,11   
2D35   E5                     PUSH   hl   
2D36   E5                     PUSH   hl   
2D37   CD 53 0D               CALL   run   
2D3A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D42   CD C4 0B               CALL   flushBuffer   
2D45   CD 4E 0C               CALL   printStr   
2D48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D55   E1                     POP   hl   
2D56   E5                     PUSH   hl   
2D57   E5                     PUSH   hl   
2D58   CD 53 0D               CALL   run   
2D5B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D6A   CD C4 0B               CALL   flushBuffer   
2D6D   76                     HALT      
2D6E                EXPECTM_2928S99:      
2D6E   E1                     POP   HL   
2D6F                          ;*Macro unroll:  test ":{2}^", 2
2D6F   31 00 4E               LD   SP,STACK   
2D72   CD 82 0C               CALL   coldInit   
2D75   CD 61 4C               CALL   execStr   
2D78   3A 7B 32 7D 5E 00      DB   ":{2}^",0   
2D7E   CD C4 0B               CALL   flushBuffer   
2D81   E1                     POP   HL   
2D82   E5                     PUSH   HL   
2D83   11 02 00               LD   DE,2   
2D86   B7                     OR   A   
2D87   ED 52                  SBC   HL,DE   
2D89   7D                     LD   A,L   
2D8A   B4                     OR   H   
2D8B   CA EB 2D               JP   Z,expectM_2929S100   
2D8E   CD 4E 0C               CALL   printStr   
2D91   43 6F 64 65 3A 20 3A 7B 32 7D 5E 00 .CSTR   "Code: ",":{2}^"   
2D9D   CD 4E 0C               CALL   printStr   
2DA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DAF   21 02 00               LD   hl,2   
2DB2   E5                     PUSH   hl   
2DB3   E5                     PUSH   hl   
2DB4   CD 53 0D               CALL   run   
2DB7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DBF   CD C4 0B               CALL   flushBuffer   
2DC2   CD 4E 0C               CALL   printStr   
2DC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DD2   E1                     POP   hl   
2DD3   E5                     PUSH   hl   
2DD4   E5                     PUSH   hl   
2DD5   CD 53 0D               CALL   run   
2DD8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DE7   CD C4 0B               CALL   flushBuffer   
2DEA   76                     HALT      
2DEB                EXPECTM_2929S100:      
2DEB   E1                     POP   HL   
2DEC                          ;*Macro unroll:  test ":a{2}^", 2
2DEC   31 00 4E               LD   SP,STACK   
2DEF   CD 82 0C               CALL   coldInit   
2DF2   CD 61 4C               CALL   execStr   
2DF5   3A 61 7B 32 7D 5E 00   DB   ":a{2}^",0   
2DFC   CD C4 0B               CALL   flushBuffer   
2DFF   E1                     POP   HL   
2E00   E5                     PUSH   HL   
2E01   11 02 00               LD   DE,2   
2E04   B7                     OR   A   
2E05   ED 52                  SBC   HL,DE   
2E07   7D                     LD   A,L   
2E08   B4                     OR   H   
2E09   CA 6A 2E               JP   Z,expectM_2930S101   
2E0C   CD 4E 0C               CALL   printStr   
2E0F   43 6F 64 65 3A 20 3A 61 7B 32 7D 5E 00 .CSTR   "Code: ",":a{2}^"   
2E1C   CD 4E 0C               CALL   printStr   
2E1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E2E   21 02 00               LD   hl,2   
2E31   E5                     PUSH   hl   
2E32   E5                     PUSH   hl   
2E33   CD 53 0D               CALL   run   
2E36   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E3E   CD C4 0B               CALL   flushBuffer   
2E41   CD 4E 0C               CALL   printStr   
2E44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E51   E1                     POP   hl   
2E52   E5                     PUSH   hl   
2E53   E5                     PUSH   hl   
2E54   CD 53 0D               CALL   run   
2E57   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E66   CD C4 0B               CALL   flushBuffer   
2E69   76                     HALT      
2E6A                EXPECTM_2930S101:      
2E6A   E1                     POP   HL   
2E6B                          ;*Macro unroll:  test "5 :a{%a}^", 5
2E6B   31 00 4E               LD   SP,STACK   
2E6E   CD 82 0C               CALL   coldInit   
2E71   CD 61 4C               CALL   execStr   
2E74   35 20 3A 61 7B 25 61 7D 5E 00 DB   "5 :a{%a}^",0   
2E7E   CD C4 0B               CALL   flushBuffer   
2E81   E1                     POP   HL   
2E82   E5                     PUSH   HL   
2E83   11 05 00               LD   DE,5   
2E86   B7                     OR   A   
2E87   ED 52                  SBC   HL,DE   
2E89   7D                     LD   A,L   
2E8A   B4                     OR   H   
2E8B   CA EF 2E               JP   Z,expectM_2931S102   
2E8E   CD 4E 0C               CALL   printStr   
2E91   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 :a{%a}^"   
2EA1   CD 4E 0C               CALL   printStr   
2EA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EB3   21 05 00               LD   hl,5   
2EB6   E5                     PUSH   hl   
2EB7   E5                     PUSH   hl   
2EB8   CD 53 0D               CALL   run   
2EBB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EC3   CD C4 0B               CALL   flushBuffer   
2EC6   CD 4E 0C               CALL   printStr   
2EC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ED6   E1                     POP   hl   
2ED7   E5                     PUSH   hl   
2ED8   E5                     PUSH   hl   
2ED9   CD 53 0D               CALL   run   
2EDC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EEB   CD C4 0B               CALL   flushBuffer   
2EEE   76                     HALT      
2EEF                EXPECTM_2931S102:      
2EEF   E1                     POP   HL   
2EF0                          ;*Macro unroll:  test "5 :a:b{%a}^", 5
2EF0   31 00 4E               LD   SP,STACK   
2EF3   CD 82 0C               CALL   coldInit   
2EF6   CD 61 4C               CALL   execStr   
2EF9   35 20 3A 61 3A 62 7B 25 61 7D 5E 00 DB   "5 :a:b{%a}^",0   
2F05   CD C4 0B               CALL   flushBuffer   
2F08   E1                     POP   HL   
2F09   E5                     PUSH   HL   
2F0A   11 05 00               LD   DE,5   
2F0D   B7                     OR   A   
2F0E   ED 52                  SBC   HL,DE   
2F10   7D                     LD   A,L   
2F11   B4                     OR   H   
2F12   CA 78 2F               JP   Z,expectM_2932S103   
2F15   CD 4E 0C               CALL   printStr   
2F18   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 :a:b{%a}^"   
2F2A   CD 4E 0C               CALL   printStr   
2F2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F3C   21 05 00               LD   hl,5   
2F3F   E5                     PUSH   hl   
2F40   E5                     PUSH   hl   
2F41   CD 53 0D               CALL   run   
2F44   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F4C   CD C4 0B               CALL   flushBuffer   
2F4F   CD 4E 0C               CALL   printStr   
2F52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F5F   E1                     POP   hl   
2F60   E5                     PUSH   hl   
2F61   E5                     PUSH   hl   
2F62   CD 53 0D               CALL   run   
2F65   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F74   CD C4 0B               CALL   flushBuffer   
2F77   76                     HALT      
2F78                EXPECTM_2932S103:      
2F78   E1                     POP   HL   
2F79                          ;*Macro unroll:  test ":a{{2}^}^", 2
2F79   31 00 4E               LD   SP,STACK   
2F7C   CD 82 0C               CALL   coldInit   
2F7F   CD 61 4C               CALL   execStr   
2F82   3A 61 7B 7B 32 7D 5E 7D 5E 00 DB   ":a{{2}^}^",0   
2F8C   CD C4 0B               CALL   flushBuffer   
2F8F   E1                     POP   HL   
2F90   E5                     PUSH   HL   
2F91   11 02 00               LD   DE,2   
2F94   B7                     OR   A   
2F95   ED 52                  SBC   HL,DE   
2F97   7D                     LD   A,L   
2F98   B4                     OR   H   
2F99   CA FD 2F               JP   Z,expectM_2933S104   
2F9C   CD 4E 0C               CALL   printStr   
2F9F   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ",":a{{2}^}^"   
2FAF   CD 4E 0C               CALL   printStr   
2FB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FC1   21 02 00               LD   hl,2   
2FC4   E5                     PUSH   hl   
2FC5   E5                     PUSH   hl   
2FC6   CD 53 0D               CALL   run   
2FC9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FD1   CD C4 0B               CALL   flushBuffer   
2FD4   CD 4E 0C               CALL   printStr   
2FD7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FE4   E1                     POP   hl   
2FE5   E5                     PUSH   hl   
2FE6   E5                     PUSH   hl   
2FE7   CD 53 0D               CALL   run   
2FEA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FF9   CD C4 0B               CALL   flushBuffer   
2FFC   76                     HALT      
2FFD                EXPECTM_2933S104:      
2FFD   E1                     POP   HL   
2FFE                          ;*Macro unroll:  test "1 5 :a{{%a}^}^", 5
2FFE   31 00 4E               LD   SP,STACK   
3001   CD 82 0C               CALL   coldInit   
3004   CD 61 4C               CALL   execStr   
3007   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 :a{{%a}^}^",0   
3016   CD C4 0B               CALL   flushBuffer   
3019   E1                     POP   HL   
301A   E5                     PUSH   HL   
301B   11 05 00               LD   DE,5   
301E   B7                     OR   A   
301F   ED 52                  SBC   HL,DE   
3021   7D                     LD   A,L   
3022   B4                     OR   H   
3023   CA 8C 30               JP   Z,expectM_2934S105   
3026   CD 4E 0C               CALL   printStr   
3029   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^}^"   
303E   CD 4E 0C               CALL   printStr   
3041   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3050   21 05 00               LD   hl,5   
3053   E5                     PUSH   hl   
3054   E5                     PUSH   hl   
3055   CD 53 0D               CALL   run   
3058   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3060   CD C4 0B               CALL   flushBuffer   
3063   CD 4E 0C               CALL   printStr   
3066   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3073   E1                     POP   hl   
3074   E5                     PUSH   hl   
3075   E5                     PUSH   hl   
3076   CD 53 0D               CALL   run   
3079   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3088   CD C4 0B               CALL   flushBuffer   
308B   76                     HALT      
308C                EXPECTM_2934S105:      
308C   E1                     POP   HL   
308D                          ;*Macro unroll:  test "1 5 :ab{{%a}^}^", 1
308D   31 00 4E               LD   SP,STACK   
3090   CD 82 0C               CALL   coldInit   
3093   CD 61 4C               CALL   execStr   
3096   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 :ab{{%a}^}^",0   
30A6   CD C4 0B               CALL   flushBuffer   
30A9   E1                     POP   HL   
30AA   E5                     PUSH   HL   
30AB   11 01 00               LD   DE,1   
30AE   B7                     OR   A   
30AF   ED 52                  SBC   HL,DE   
30B1   7D                     LD   A,L   
30B2   B4                     OR   H   
30B3   CA 1D 31               JP   Z,expectM_2935S106   
30B6   CD 4E 0C               CALL   printStr   
30B9   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^}^"   
30CF   CD 4E 0C               CALL   printStr   
30D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E1   21 01 00               LD   hl,1   
30E4   E5                     PUSH   hl   
30E5   E5                     PUSH   hl   
30E6   CD 53 0D               CALL   run   
30E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30F1   CD C4 0B               CALL   flushBuffer   
30F4   CD 4E 0C               CALL   printStr   
30F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3104   E1                     POP   hl   
3105   E5                     PUSH   hl   
3106   E5                     PUSH   hl   
3107   CD 53 0D               CALL   run   
310A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3119   CD C4 0B               CALL   flushBuffer   
311C   76                     HALT      
311D                EXPECTM_2935S106:      
311D   E1                     POP   HL   
311E                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^}^", 7
311E   31 00 4E               LD   SP,STACK   
3121   CD 82 0C               CALL   coldInit   
3124   CD 61 4C               CALL   execStr   
3127   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 :a{{%a 2 +}^}^",0   
313A   CD C4 0B               CALL   flushBuffer   
313D   E1                     POP   HL   
313E   E5                     PUSH   HL   
313F   11 07 00               LD   DE,7   
3142   B7                     OR   A   
3143   ED 52                  SBC   HL,DE   
3145   7D                     LD   A,L   
3146   B4                     OR   H   
3147   CA B4 31               JP   Z,expectM_2936S107   
314A   CD 4E 0C               CALL   printStr   
314D   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^}^"   
3166   CD 4E 0C               CALL   printStr   
3169   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3178   21 07 00               LD   hl,7   
317B   E5                     PUSH   hl   
317C   E5                     PUSH   hl   
317D   CD 53 0D               CALL   run   
3180   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3188   CD C4 0B               CALL   flushBuffer   
318B   CD 4E 0C               CALL   printStr   
318E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
319B   E1                     POP   hl   
319C   E5                     PUSH   hl   
319D   E5                     PUSH   hl   
319E   CD 53 0D               CALL   run   
31A1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31B0   CD C4 0B               CALL   flushBuffer   
31B3   76                     HALT      
31B4                EXPECTM_2936S107:      
31B4   E1                     POP   HL   
31B5                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^}^", 6
31B5   31 00 4E               LD   SP,STACK   
31B8   CD 82 0C               CALL   coldInit   
31BB   CD 61 4C               CALL   execStr   
31BE   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 :ab{{%a %b +}^}^",0   
31D3   CD C4 0B               CALL   flushBuffer   
31D6   E1                     POP   HL   
31D7   E5                     PUSH   HL   
31D8   11 06 00               LD   DE,6   
31DB   B7                     OR   A   
31DC   ED 52                  SBC   HL,DE   
31DE   7D                     LD   A,L   
31DF   B4                     OR   H   
31E0   CA 4F 32               JP   Z,expectM_2937S108   
31E3   CD 4E 0C               CALL   printStr   
31E6   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^}^"   
3201   CD 4E 0C               CALL   printStr   
3204   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3213   21 06 00               LD   hl,6   
3216   E5                     PUSH   hl   
3217   E5                     PUSH   hl   
3218   CD 53 0D               CALL   run   
321B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3223   CD C4 0B               CALL   flushBuffer   
3226   CD 4E 0C               CALL   printStr   
3229   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3236   E1                     POP   hl   
3237   E5                     PUSH   hl   
3238   E5                     PUSH   hl   
3239   CD 53 0D               CALL   run   
323C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
324B   CD C4 0B               CALL   flushBuffer   
324E   76                     HALT      
324F                EXPECTM_2937S108:      
324F   E1                     POP   HL   
3250                          ;*Macro unroll:  test ":a{2} x= 1 x^", 2
3250   31 00 4E               LD   SP,STACK   
3253   CD 82 0C               CALL   coldInit   
3256   CD 61 4C               CALL   execStr   
3259   3A 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   ":a{2} x= 1 x^",0   
3267   CD C4 0B               CALL   flushBuffer   
326A   E1                     POP   HL   
326B   E5                     PUSH   HL   
326C   11 02 00               LD   DE,2   
326F   B7                     OR   A   
3270   ED 52                  SBC   HL,DE   
3272   7D                     LD   A,L   
3273   B4                     OR   H   
3274   CA DC 32               JP   Z,expectM_2938S109   
3277   CD 4E 0C               CALL   printStr   
327A   43 6F 64 65 3A 20 3A 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2} x= 1 x^"   
328E   CD 4E 0C               CALL   printStr   
3291   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32A0   21 02 00               LD   hl,2   
32A3   E5                     PUSH   hl   
32A4   E5                     PUSH   hl   
32A5   CD 53 0D               CALL   run   
32A8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32B0   CD C4 0B               CALL   flushBuffer   
32B3   CD 4E 0C               CALL   printStr   
32B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32C3   E1                     POP   hl   
32C4   E5                     PUSH   hl   
32C5   E5                     PUSH   hl   
32C6   CD 53 0D               CALL   run   
32C9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32D8   CD C4 0B               CALL   flushBuffer   
32DB   76                     HALT      
32DC                EXPECTM_2938S109:      
32DC   E1                     POP   HL   
32DD                          ;*Macro unroll:  test ":a{%a} x= 0 1 x^", 1
32DD   31 00 4E               LD   SP,STACK   
32E0   CD 82 0C               CALL   coldInit   
32E3   CD 61 4C               CALL   execStr   
32E6   3A 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a} x= 0 1 x^",0   
32F7   CD C4 0B               CALL   flushBuffer   
32FA   E1                     POP   HL   
32FB   E5                     PUSH   HL   
32FC   11 01 00               LD   DE,1   
32FF   B7                     OR   A   
3300   ED 52                  SBC   HL,DE   
3302   7D                     LD   A,L   
3303   B4                     OR   H   
3304   CA 6F 33               JP   Z,expectM_2939S110   
3307   CD 4E 0C               CALL   printStr   
330A   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a} x= 0 1 x^"   
3321   CD 4E 0C               CALL   printStr   
3324   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3333   21 01 00               LD   hl,1   
3336   E5                     PUSH   hl   
3337   E5                     PUSH   hl   
3338   CD 53 0D               CALL   run   
333B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3343   CD C4 0B               CALL   flushBuffer   
3346   CD 4E 0C               CALL   printStr   
3349   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3356   E1                     POP   hl   
3357   E5                     PUSH   hl   
3358   E5                     PUSH   hl   
3359   CD 53 0D               CALL   run   
335C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
336B   CD C4 0B               CALL   flushBuffer   
336E   76                     HALT      
336F                EXPECTM_2939S110:      
336F   E1                     POP   HL   
3370                          ;*Macro unroll:  test ":ab{%b} x= 1 2 x^", 2
3370   31 00 4E               LD   SP,STACK   
3373   CD 82 0C               CALL   coldInit   
3376   CD 61 4C               CALL   execStr   
3379   3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b} x= 1 2 x^",0   
338B   CD C4 0B               CALL   flushBuffer   
338E   E1                     POP   HL   
338F   E5                     PUSH   HL   
3390   11 02 00               LD   DE,2   
3393   B7                     OR   A   
3394   ED 52                  SBC   HL,DE   
3396   7D                     LD   A,L   
3397   B4                     OR   H   
3398   CA 04 34               JP   Z,expectM_2940S111   
339B   CD 4E 0C               CALL   printStr   
339E   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b} x= 1 2 x^"   
33B6   CD 4E 0C               CALL   printStr   
33B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33C8   21 02 00               LD   hl,2   
33CB   E5                     PUSH   hl   
33CC   E5                     PUSH   hl   
33CD   CD 53 0D               CALL   run   
33D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33D8   CD C4 0B               CALL   flushBuffer   
33DB   CD 4E 0C               CALL   printStr   
33DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33EB   E1                     POP   hl   
33EC   E5                     PUSH   hl   
33ED   E5                     PUSH   hl   
33EE   CD 53 0D               CALL   run   
33F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3400   CD C4 0B               CALL   flushBuffer   
3403   76                     HALT      
3404                EXPECTM_2940S111:      
3404   E1                     POP   HL   
3405                          ;*Macro unroll:  test ":a:b{%a} x= 1 2 x^", 2
3405   31 00 4E               LD   SP,STACK   
3408   CD 82 0C               CALL   coldInit   
340B   CD 61 4C               CALL   execStr   
340E   3A 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a} x= 1 2 x^",0   
3421   CD C4 0B               CALL   flushBuffer   
3424   E1                     POP   HL   
3425   E5                     PUSH   HL   
3426   11 02 00               LD   DE,2   
3429   B7                     OR   A   
342A   ED 52                  SBC   HL,DE   
342C   7D                     LD   A,L   
342D   B4                     OR   H   
342E   CA 9B 34               JP   Z,expectM_2941S112   
3431   CD 4E 0C               CALL   printStr   
3434   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a} x= 1 2 x^"   
344D   CD 4E 0C               CALL   printStr   
3450   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
345F   21 02 00               LD   hl,2   
3462   E5                     PUSH   hl   
3463   E5                     PUSH   hl   
3464   CD 53 0D               CALL   run   
3467   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
346F   CD C4 0B               CALL   flushBuffer   
3472   CD 4E 0C               CALL   printStr   
3475   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3482   E1                     POP   hl   
3483   E5                     PUSH   hl   
3484   E5                     PUSH   hl   
3485   CD 53 0D               CALL   run   
3488   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3497   CD C4 0B               CALL   flushBuffer   
349A   76                     HALT      
349B                EXPECTM_2941S112:      
349B   E1                     POP   HL   
349C                          ;*Macro unroll:  test ":ab{%b} x= 1 2 x^", 2
349C   31 00 4E               LD   SP,STACK   
349F   CD 82 0C               CALL   coldInit   
34A2   CD 61 4C               CALL   execStr   
34A5   3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b} x= 1 2 x^",0   
34B7   CD C4 0B               CALL   flushBuffer   
34BA   E1                     POP   HL   
34BB   E5                     PUSH   HL   
34BC   11 02 00               LD   DE,2   
34BF   B7                     OR   A   
34C0   ED 52                  SBC   HL,DE   
34C2   7D                     LD   A,L   
34C3   B4                     OR   H   
34C4   CA 30 35               JP   Z,expectM_2942S113   
34C7   CD 4E 0C               CALL   printStr   
34CA   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b} x= 1 2 x^"   
34E2   CD 4E 0C               CALL   printStr   
34E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34F4   21 02 00               LD   hl,2   
34F7   E5                     PUSH   hl   
34F8   E5                     PUSH   hl   
34F9   CD 53 0D               CALL   run   
34FC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3504   CD C4 0B               CALL   flushBuffer   
3507   CD 4E 0C               CALL   printStr   
350A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3517   E1                     POP   hl   
3518   E5                     PUSH   hl   
3519   E5                     PUSH   hl   
351A   CD 53 0D               CALL   run   
351D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
352C   CD C4 0B               CALL   flushBuffer   
352F   76                     HALT      
3530                EXPECTM_2942S113:      
3530   E1                     POP   HL   
3531                          ;*Macro unroll:  test ":ab{%b %a} x= 10 15 x^ -", 5
3531   31 00 4E               LD   SP,STACK   
3534   CD 82 0C               CALL   coldInit   
3537   CD 61 4C               CALL   execStr   
353A   3A 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a} x= 10 15 x^ -",0   
3553   CD C4 0B               CALL   flushBuffer   
3556   E1                     POP   HL   
3557   E5                     PUSH   HL   
3558   11 05 00               LD   DE,5   
355B   B7                     OR   A   
355C   ED 52                  SBC   HL,DE   
355E   7D                     LD   A,L   
355F   B4                     OR   H   
3560   CA D3 35               JP   Z,expectM_2943S114   
3563   CD 4E 0C               CALL   printStr   
3566   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a} x= 10 15 x^ -"   
3585   CD 4E 0C               CALL   printStr   
3588   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3597   21 05 00               LD   hl,5   
359A   E5                     PUSH   hl   
359B   E5                     PUSH   hl   
359C   CD 53 0D               CALL   run   
359F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35A7   CD C4 0B               CALL   flushBuffer   
35AA   CD 4E 0C               CALL   printStr   
35AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35BA   E1                     POP   hl   
35BB   E5                     PUSH   hl   
35BC   E5                     PUSH   hl   
35BD   CD 53 0D               CALL   run   
35C0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35CF   CD C4 0B               CALL   flushBuffer   
35D2   76                     HALT      
35D3                EXPECTM_2943S114:      
35D3   E1                     POP   HL   
35D4                          ;*Macro unroll:  test ":a:b{2} x= 1 x^", 2
35D4   31 00 4E               LD   SP,STACK   
35D7   CD 82 0C               CALL   coldInit   
35DA   CD 61 4C               CALL   execStr   
35DD   3A 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2} x= 1 x^",0   
35ED   CD C4 0B               CALL   flushBuffer   
35F0   E1                     POP   HL   
35F1   E5                     PUSH   HL   
35F2   11 02 00               LD   DE,2   
35F5   B7                     OR   A   
35F6   ED 52                  SBC   HL,DE   
35F8   7D                     LD   A,L   
35F9   B4                     OR   H   
35FA   CA 64 36               JP   Z,expectM_2944S115   
35FD   CD 4E 0C               CALL   printStr   
3600   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2} x= 1 x^"   
3616   CD 4E 0C               CALL   printStr   
3619   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3628   21 02 00               LD   hl,2   
362B   E5                     PUSH   hl   
362C   E5                     PUSH   hl   
362D   CD 53 0D               CALL   run   
3630   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3638   CD C4 0B               CALL   flushBuffer   
363B   CD 4E 0C               CALL   printStr   
363E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
364B   E1                     POP   hl   
364C   E5                     PUSH   hl   
364D   E5                     PUSH   hl   
364E   CD 53 0D               CALL   run   
3651   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3660   CD C4 0B               CALL   flushBuffer   
3663   76                     HALT      
3664                EXPECTM_2944S115:      
3664   E1                     POP   HL   
3665                          ;*Macro unroll:  test "::b{100 %b = %b} x= x^", 100
3665   31 00 4E               LD   SP,STACK   
3668   CD 82 0C               CALL   coldInit   
366B   CD 61 4C               CALL   execStr   
366E   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b} x= x^",0   
3685   CD C4 0B               CALL   flushBuffer   
3688   E1                     POP   HL   
3689   E5                     PUSH   HL   
368A   11 64 00               LD   DE,100   
368D   B7                     OR   A   
368E   ED 52                  SBC   HL,DE   
3690   7D                     LD   A,L   
3691   B4                     OR   H   
3692   CA 03 37               JP   Z,expectM_2945S116   
3695   CD 4E 0C               CALL   printStr   
3698   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b} x= x^"   
36B5   CD 4E 0C               CALL   printStr   
36B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36C7   21 64 00               LD   hl,100   
36CA   E5                     PUSH   hl   
36CB   E5                     PUSH   hl   
36CC   CD 53 0D               CALL   run   
36CF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36D7   CD C4 0B               CALL   flushBuffer   
36DA   CD 4E 0C               CALL   printStr   
36DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36EA   E1                     POP   hl   
36EB   E5                     PUSH   hl   
36EC   E5                     PUSH   hl   
36ED   CD 53 0D               CALL   run   
36F0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36FF   CD C4 0B               CALL   flushBuffer   
3702   76                     HALT      
3703                EXPECTM_2945S116:      
3703   E1                     POP   HL   
3704                          ;*Macro unroll:  test ":a:b{1 %b = %b} x= 2 x^", 1
3704   31 00 4E               LD   SP,STACK   
3707   CD 82 0C               CALL   coldInit   
370A   CD 61 4C               CALL   execStr   
370D   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b} x= 2 x^",0   
3725   CD C4 0B               CALL   flushBuffer   
3728   E1                     POP   HL   
3729   E5                     PUSH   HL   
372A   11 01 00               LD   DE,1   
372D   B7                     OR   A   
372E   ED 52                  SBC   HL,DE   
3730   7D                     LD   A,L   
3731   B4                     OR   H   
3732   CA A4 37               JP   Z,expectM_2946S117   
3735   CD 4E 0C               CALL   printStr   
3738   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b} x= 2 x^"   
3756   CD 4E 0C               CALL   printStr   
3759   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3768   21 01 00               LD   hl,1   
376B   E5                     PUSH   hl   
376C   E5                     PUSH   hl   
376D   CD 53 0D               CALL   run   
3770   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3778   CD C4 0B               CALL   flushBuffer   
377B   CD 4E 0C               CALL   printStr   
377E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
378B   E1                     POP   hl   
378C   E5                     PUSH   hl   
378D   E5                     PUSH   hl   
378E   CD 53 0D               CALL   run   
3791   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37A0   CD C4 0B               CALL   flushBuffer   
37A3   76                     HALT      
37A4                EXPECTM_2946S117:      
37A4   E1                     POP   HL   
37A5                          ;*Macro unroll:  test ":a:b{%a %b = %b} x= 2 x^", 2
37A5   31 00 4E               LD   SP,STACK   
37A8   CD 82 0C               CALL   coldInit   
37AB   CD 61 4C               CALL   execStr   
37AE   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b} x= 2 x^",0   
37C7   CD C4 0B               CALL   flushBuffer   
37CA   E1                     POP   HL   
37CB   E5                     PUSH   HL   
37CC   11 02 00               LD   DE,2   
37CF   B7                     OR   A   
37D0   ED 52                  SBC   HL,DE   
37D2   7D                     LD   A,L   
37D3   B4                     OR   H   
37D4   CA 47 38               JP   Z,expectM_2947S118   
37D7   CD 4E 0C               CALL   printStr   
37DA   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b} x= 2 x^"   
37F9   CD 4E 0C               CALL   printStr   
37FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
380B   21 02 00               LD   hl,2   
380E   E5                     PUSH   hl   
380F   E5                     PUSH   hl   
3810   CD 53 0D               CALL   run   
3813   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
381B   CD C4 0B               CALL   flushBuffer   
381E   CD 4E 0C               CALL   printStr   
3821   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
382E   E1                     POP   hl   
382F   E5                     PUSH   hl   
3830   E5                     PUSH   hl   
3831   CD 53 0D               CALL   run   
3834   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3843   CD C4 0B               CALL   flushBuffer   
3846   76                     HALT      
3847                EXPECTM_2947S118:      
3847   E1                     POP   HL   
3848                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??}^ +", 11
3848   31 00 4E               LD   SP,STACK   
384B   CD 82 0C               CALL   coldInit   
384E   CD 61 4C               CALL   execStr   
3851   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??}^ +",0   
386F   CD C4 0B               CALL   flushBuffer   
3872   E1                     POP   HL   
3873   E5                     PUSH   HL   
3874   11 0B 00               LD   DE,11   
3877   B7                     OR   A   
3878   ED 52                  SBC   HL,DE   
387A   7D                     LD   A,L   
387B   B4                     OR   H   
387C   CA F4 38               JP   Z,expectM_2948S119   
387F   CD 4E 0C               CALL   printStr   
3882   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??}^ +"   
38A6   CD 4E 0C               CALL   printStr   
38A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38B8   21 0B 00               LD   hl,11   
38BB   E5                     PUSH   hl   
38BC   E5                     PUSH   hl   
38BD   CD 53 0D               CALL   run   
38C0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38C8   CD C4 0B               CALL   flushBuffer   
38CB   CD 4E 0C               CALL   printStr   
38CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38DB   E1                     POP   hl   
38DC   E5                     PUSH   hl   
38DD   E5                     PUSH   hl   
38DE   CD 53 0D               CALL   run   
38E1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38F0   CD C4 0B               CALL   flushBuffer   
38F3   76                     HALT      
38F4                EXPECTM_2948S119:      
38F4   E1                     POP   HL   
38F5                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??}^ +", 21
38F5   31 00 4E               LD   SP,STACK   
38F8   CD 82 0C               CALL   coldInit   
38FB   CD 61 4C               CALL   execStr   
38FE   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??}^ +",0   
391C   CD C4 0B               CALL   flushBuffer   
391F   E1                     POP   HL   
3920   E5                     PUSH   HL   
3921   11 15 00               LD   DE,21   
3924   B7                     OR   A   
3925   ED 52                  SBC   HL,DE   
3927   7D                     LD   A,L   
3928   B4                     OR   H   
3929   CA A1 39               JP   Z,expectM_2949S120   
392C   CD 4E 0C               CALL   printStr   
392F   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??}^ +"   
3953   CD 4E 0C               CALL   printStr   
3956   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3965   21 15 00               LD   hl,21   
3968   E5                     PUSH   hl   
3969   E5                     PUSH   hl   
396A   CD 53 0D               CALL   run   
396D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3975   CD C4 0B               CALL   flushBuffer   
3978   CD 4E 0C               CALL   printStr   
397B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3988   E1                     POP   hl   
3989   E5                     PUSH   hl   
398A   E5                     PUSH   hl   
398B   CD 53 0D               CALL   run   
398E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
399D   CD C4 0B               CALL   flushBuffer   
39A0   76                     HALT      
39A1                EXPECTM_2949S120:      
39A1   E1                     POP   HL   
39A2                          ;*Macro unroll:  test "[10 20 30] 1#", 20
39A2   31 00 4E               LD   SP,STACK   
39A5   CD 82 0C               CALL   coldInit   
39A8   CD 61 4C               CALL   execStr   
39AB   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
39B9   CD C4 0B               CALL   flushBuffer   
39BC   E1                     POP   HL   
39BD   E5                     PUSH   HL   
39BE   11 14 00               LD   DE,20   
39C1   B7                     OR   A   
39C2   ED 52                  SBC   HL,DE   
39C4   7D                     LD   A,L   
39C5   B4                     OR   H   
39C6   CA 2E 3A               JP   Z,expectM_2950S121   
39C9   CD 4E 0C               CALL   printStr   
39CC   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
39E0   CD 4E 0C               CALL   printStr   
39E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39F2   21 14 00               LD   hl,20   
39F5   E5                     PUSH   hl   
39F6   E5                     PUSH   hl   
39F7   CD 53 0D               CALL   run   
39FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A02   CD C4 0B               CALL   flushBuffer   
3A05   CD 4E 0C               CALL   printStr   
3A08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A15   E1                     POP   hl   
3A16   E5                     PUSH   hl   
3A17   E5                     PUSH   hl   
3A18   CD 53 0D               CALL   run   
3A1B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A2A   CD C4 0B               CALL   flushBuffer   
3A2D   76                     HALT      
3A2E                EXPECTM_2950S121:      
3A2E   E1                     POP   HL   
3A2F                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
3A2F   31 00 4E               LD   SP,STACK   
3A32   CD 82 0C               CALL   coldInit   
3A35   CD 61 4C               CALL   execStr   
3A38   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
3A4A   CD C4 0B               CALL   flushBuffer   
3A4D   E1                     POP   HL   
3A4E   E5                     PUSH   HL   
3A4F   11 04 00               LD   DE,4   
3A52   B7                     OR   A   
3A53   ED 52                  SBC   HL,DE   
3A55   7D                     LD   A,L   
3A56   B4                     OR   H   
3A57   CA C3 3A               JP   Z,expectM_2951S122   
3A5A   CD 4E 0C               CALL   printStr   
3A5D   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
3A75   CD 4E 0C               CALL   printStr   
3A78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A87   21 04 00               LD   hl,4   
3A8A   E5                     PUSH   hl   
3A8B   E5                     PUSH   hl   
3A8C   CD 53 0D               CALL   run   
3A8F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A97   CD C4 0B               CALL   flushBuffer   
3A9A   CD 4E 0C               CALL   printStr   
3A9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AAA   E1                     POP   hl   
3AAB   E5                     PUSH   hl   
3AAC   E5                     PUSH   hl   
3AAD   CD 53 0D               CALL   run   
3AB0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3ABF   CD C4 0B               CALL   flushBuffer   
3AC2   76                     HALT      
3AC3                EXPECTM_2951S122:      
3AC3   E1                     POP   HL   
3AC4                          ;*Macro unroll:  test "/b [1 2 3] 1#", 2
3AC4   31 00 4E               LD   SP,STACK   
3AC7   CD 82 0C               CALL   coldInit   
3ACA   CD 61 4C               CALL   execStr   
3ACD   2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/b [1 2 3] 1#",0   
3ADB   CD C4 0B               CALL   flushBuffer   
3ADE   E1                     POP   HL   
3ADF   E5                     PUSH   HL   
3AE0   11 02 00               LD   DE,2   
3AE3   B7                     OR   A   
3AE4   ED 52                  SBC   HL,DE   
3AE6   7D                     LD   A,L   
3AE7   B4                     OR   H   
3AE8   CA 50 3B               JP   Z,expectM_2952S123   
3AEB   CD 4E 0C               CALL   printStr   
3AEE   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/b [1 2 3] 1#"   
3B02   CD 4E 0C               CALL   printStr   
3B05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B14   21 02 00               LD   hl,2   
3B17   E5                     PUSH   hl   
3B18   E5                     PUSH   hl   
3B19   CD 53 0D               CALL   run   
3B1C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B24   CD C4 0B               CALL   flushBuffer   
3B27   CD 4E 0C               CALL   printStr   
3B2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B37   E1                     POP   hl   
3B38   E5                     PUSH   hl   
3B39   E5                     PUSH   hl   
3B3A   CD 53 0D               CALL   run   
3B3D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B4C   CD C4 0B               CALL   flushBuffer   
3B4F   76                     HALT      
3B50                EXPECTM_2952S123:      
3B50   E1                     POP   HL   
3B51                          ;*Macro unroll:  test "/b ['A' 'B' 'C'] 1#", 66
3B51   31 00 4E               LD   SP,STACK   
3B54   CD 82 0C               CALL   coldInit   
3B57   CD 61 4C               CALL   execStr   
3B5A   2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/b ['A' 'B' 'C'] 1#",0   
3B6E   CD C4 0B               CALL   flushBuffer   
3B71   E1                     POP   HL   
3B72   E5                     PUSH   HL   
3B73   11 42 00               LD   DE,66   
3B76   B7                     OR   A   
3B77   ED 52                  SBC   HL,DE   
3B79   7D                     LD   A,L   
3B7A   B4                     OR   H   
3B7B   CA E9 3B               JP   Z,expectM_2953S124   
3B7E   CD 4E 0C               CALL   printStr   
3B81   43 6F 64 65 3A 20 2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/b ['A' 'B' 'C'] 1#"   
3B9B   CD 4E 0C               CALL   printStr   
3B9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BAD   21 42 00               LD   hl,66   
3BB0   E5                     PUSH   hl   
3BB1   E5                     PUSH   hl   
3BB2   CD 53 0D               CALL   run   
3BB5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BBD   CD C4 0B               CALL   flushBuffer   
3BC0   CD 4E 0C               CALL   printStr   
3BC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BD0   E1                     POP   hl   
3BD1   E5                     PUSH   hl   
3BD2   E5                     PUSH   hl   
3BD3   CD 53 0D               CALL   run   
3BD6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BE5   CD C4 0B               CALL   flushBuffer   
3BE8   76                     HALT      
3BE9                EXPECTM_2953S124:      
3BE9   E1                     POP   HL   
3BEA                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3BEA   31 00 4E               LD   SP,STACK   
3BED   CD 82 0C               CALL   coldInit   
3BF0   CD 61 4C               CALL   execStr   
3BF3   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3C07   CD C4 0B               CALL   flushBuffer   
3C0A   E1                     POP   HL   
3C0B   E5                     PUSH   HL   
3C0C   11 0A 00               LD   DE,10   
3C0F   B7                     OR   A   
3C10   ED 52                  SBC   HL,DE   
3C12   7D                     LD   A,L   
3C13   B4                     OR   H   
3C14   CA 82 3C               JP   Z,expectM_2954S125   
3C17   CD 4E 0C               CALL   printStr   
3C1A   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3C34   CD 4E 0C               CALL   printStr   
3C37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C46   21 0A 00               LD   hl,10   
3C49   E5                     PUSH   hl   
3C4A   E5                     PUSH   hl   
3C4B   CD 53 0D               CALL   run   
3C4E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C56   CD C4 0B               CALL   flushBuffer   
3C59   CD 4E 0C               CALL   printStr   
3C5C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C69   E1                     POP   hl   
3C6A   E5                     PUSH   hl   
3C6B   E5                     PUSH   hl   
3C6C   CD 53 0D               CALL   run   
3C6F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C7E   CD C4 0B               CALL   flushBuffer   
3C81   76                     HALT      
3C82                EXPECTM_2954S125:      
3C82   E1                     POP   HL   
3C83                          ;*Macro unroll:  test "10 20 :ab{[{%a}{%b}] 0#^}^", 10
3C83   31 00 4E               LD   SP,STACK   
3C86   CD 82 0C               CALL   coldInit   
3C89   CD 61 4C               CALL   execStr   
3C8C   31 30 20 32 30 20 3A 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 :ab{[{%a}{%b}] 0#^}^",0   
3CA7   CD C4 0B               CALL   flushBuffer   
3CAA   E1                     POP   HL   
3CAB   E5                     PUSH   HL   
3CAC   11 0A 00               LD   DE,10   
3CAF   B7                     OR   A   
3CB0   ED 52                  SBC   HL,DE   
3CB2   7D                     LD   A,L   
3CB3   B4                     OR   H   
3CB4   CA 29 3D               JP   Z,expectM_2955S126   
3CB7   CD 4E 0C               CALL   printStr   
3CBA   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 :ab{[{%a}{%b}] 0#^}^"   
3CDB   CD 4E 0C               CALL   printStr   
3CDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CED   21 0A 00               LD   hl,10   
3CF0   E5                     PUSH   hl   
3CF1   E5                     PUSH   hl   
3CF2   CD 53 0D               CALL   run   
3CF5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CFD   CD C4 0B               CALL   flushBuffer   
3D00   CD 4E 0C               CALL   printStr   
3D03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D10   E1                     POP   hl   
3D11   E5                     PUSH   hl   
3D12   E5                     PUSH   hl   
3D13   CD 53 0D               CALL   run   
3D16   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D25   CD C4 0B               CALL   flushBuffer   
3D28   76                     HALT      
3D29                EXPECTM_2955S126:      
3D29   E1                     POP   HL   
3D2A                          ;*Macro unroll:  test "0 10 20 :iab{[{%a}{%b}] %i#^}^", 10
3D2A   31 00 4E               LD   SP,STACK   
3D2D   CD 82 0C               CALL   coldInit   
3D30   CD 61 4C               CALL   execStr   
3D33   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 :iab{[{%a}{%b}] %i#^}^",0   
3D52   CD C4 0B               CALL   flushBuffer   
3D55   E1                     POP   HL   
3D56   E5                     PUSH   HL   
3D57   11 0A 00               LD   DE,10   
3D5A   B7                     OR   A   
3D5B   ED 52                  SBC   HL,DE   
3D5D   7D                     LD   A,L   
3D5E   B4                     OR   H   
3D5F   CA D8 3D               JP   Z,expectM_2956S127   
3D62   CD 4E 0C               CALL   printStr   
3D65   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{%a}{%b}] %i#^}^"   
3D8A   CD 4E 0C               CALL   printStr   
3D8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D9C   21 0A 00               LD   hl,10   
3D9F   E5                     PUSH   hl   
3DA0   E5                     PUSH   hl   
3DA1   CD 53 0D               CALL   run   
3DA4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DAC   CD C4 0B               CALL   flushBuffer   
3DAF   CD 4E 0C               CALL   printStr   
3DB2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DBF   E1                     POP   hl   
3DC0   E5                     PUSH   hl   
3DC1   E5                     PUSH   hl   
3DC2   CD 53 0D               CALL   run   
3DC5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DD4   CD C4 0B               CALL   flushBuffer   
3DD7   76                     HALT      
3DD8                EXPECTM_2956S127:      
3DD8   E1                     POP   HL   
3DD9                          ;*Macro unroll:  test "1 10 20 :iab{[{%a}{%b}] %i#^}^", 20
3DD9   31 00 4E               LD   SP,STACK   
3DDC   CD 82 0C               CALL   coldInit   
3DDF   CD 61 4C               CALL   execStr   
3DE2   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 :iab{[{%a}{%b}] %i#^}^",0   
3E01   CD C4 0B               CALL   flushBuffer   
3E04   E1                     POP   HL   
3E05   E5                     PUSH   HL   
3E06   11 14 00               LD   DE,20   
3E09   B7                     OR   A   
3E0A   ED 52                  SBC   HL,DE   
3E0C   7D                     LD   A,L   
3E0D   B4                     OR   H   
3E0E   CA 87 3E               JP   Z,expectM_2957S128   
3E11   CD 4E 0C               CALL   printStr   
3E14   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{%a}{%b}] %i#^}^"   
3E39   CD 4E 0C               CALL   printStr   
3E3C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E4B   21 14 00               LD   hl,20   
3E4E   E5                     PUSH   hl   
3E4F   E5                     PUSH   hl   
3E50   CD 53 0D               CALL   run   
3E53   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E5B   CD C4 0B               CALL   flushBuffer   
3E5E   CD 4E 0C               CALL   printStr   
3E61   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E6E   E1                     POP   hl   
3E6F   E5                     PUSH   hl   
3E70   E5                     PUSH   hl   
3E71   CD 53 0D               CALL   run   
3E74   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E83   CD C4 0B               CALL   flushBuffer   
3E86   76                     HALT      
3E87                EXPECTM_2957S128:      
3E87   E1                     POP   HL   
3E88                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3E88   31 00 4E               LD   SP,STACK   
3E8B   CD 82 0C               CALL   coldInit   
3E8E   CD 61 4C               CALL   execStr   
3E91   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3EA9   CD C4 0B               CALL   flushBuffer   
3EAC   E1                     POP   HL   
3EAD   E5                     PUSH   HL   
3EAE   11 06 00               LD   DE,6   
3EB1   B7                     OR   A   
3EB2   ED 52                  SBC   HL,DE   
3EB4   7D                     LD   A,L   
3EB5   B4                     OR   H   
3EB6   CA 28 3F               JP   Z,expectM_2958S129   
3EB9   CD 4E 0C               CALL   printStr   
3EBC   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3EDA   CD 4E 0C               CALL   printStr   
3EDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EEC   21 06 00               LD   hl,6   
3EEF   E5                     PUSH   hl   
3EF0   E5                     PUSH   hl   
3EF1   CD 53 0D               CALL   run   
3EF4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3EFC   CD C4 0B               CALL   flushBuffer   
3EFF   CD 4E 0C               CALL   printStr   
3F02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F0F   E1                     POP   hl   
3F10   E5                     PUSH   hl   
3F11   E5                     PUSH   hl   
3F12   CD 53 0D               CALL   run   
3F15   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F24   CD C4 0B               CALL   flushBuffer   
3F27   76                     HALT      
3F28                EXPECTM_2958S129:      
3F28   E1                     POP   HL   
3F29                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3F29   31 00 4E               LD   SP,STACK   
3F2C   CD 82 0C               CALL   coldInit   
3F2F   CD 61 4C               CALL   execStr   
3F32   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
3F4D   CD C4 0B               CALL   flushBuffer   
3F50   E1                     POP   HL   
3F51   E5                     PUSH   HL   
3F52   11 02 00               LD   DE,2   
3F55   B7                     OR   A   
3F56   ED 52                  SBC   HL,DE   
3F58   7D                     LD   A,L   
3F59   B4                     OR   H   
3F5A   CA CF 3F               JP   Z,expectM_2959S130   
3F5D   CD 4E 0C               CALL   printStr   
3F60   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
3F81   CD 4E 0C               CALL   printStr   
3F84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F93   21 02 00               LD   hl,2   
3F96   E5                     PUSH   hl   
3F97   E5                     PUSH   hl   
3F98   CD 53 0D               CALL   run   
3F9B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FA3   CD C4 0B               CALL   flushBuffer   
3FA6   CD 4E 0C               CALL   printStr   
3FA9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FB6   E1                     POP   hl   
3FB7   E5                     PUSH   hl   
3FB8   E5                     PUSH   hl   
3FB9   CD 53 0D               CALL   run   
3FBC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FCB   CD C4 0B               CALL   flushBuffer   
3FCE   76                     HALT      
3FCF                EXPECTM_2959S130:      
3FCF   E1                     POP   HL   
3FD0                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3FD0   31 00 4E               LD   SP,STACK   
3FD3   CD 82 0C               CALL   coldInit   
3FD6   CD 61 4C               CALL   execStr   
3FD9   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
3FFF   CD C4 0B               CALL   flushBuffer   
4002   E1                     POP   HL   
4003   E5                     PUSH   HL   
4004   11 0A 00               LD   DE,10   
4007   B7                     OR   A   
4008   ED 52                  SBC   HL,DE   
400A   7D                     LD   A,L   
400B   B4                     OR   H   
400C   CA 8C 40               JP   Z,expectM_2960S131   
400F   CD 4E 0C               CALL   printStr   
4012   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
403E   CD 4E 0C               CALL   printStr   
4041   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4050   21 0A 00               LD   hl,10   
4053   E5                     PUSH   hl   
4054   E5                     PUSH   hl   
4055   CD 53 0D               CALL   run   
4058   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4060   CD C4 0B               CALL   flushBuffer   
4063   CD 4E 0C               CALL   printStr   
4066   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4073   E1                     POP   hl   
4074   E5                     PUSH   hl   
4075   E5                     PUSH   hl   
4076   CD 53 0D               CALL   run   
4079   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4088   CD C4 0B               CALL   flushBuffer   
408B   76                     HALT      
408C                EXPECTM_2960S131:      
408C   E1                     POP   HL   
408D                          ;*Macro unroll:  test "3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
408D   31 00 4E               LD   SP,STACK   
4090   CD 82 0C               CALL   coldInit   
4093   CD 61 4C               CALL   execStr   
4096   33 20 3A 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
40C1   CD C4 0B               CALL   flushBuffer   
40C4   E1                     POP   HL   
40C5   E5                     PUSH   HL   
40C6   11 06 00               LD   DE,6   
40C9   B7                     OR   A   
40CA   ED 52                  SBC   HL,DE   
40CC   7D                     LD   A,L   
40CD   B4                     OR   H   
40CE   CA 53 41               JP   Z,expectM_2961S132   
40D1   CD 4E 0C               CALL   printStr   
40D4   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
4105   CD 4E 0C               CALL   printStr   
4108   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4117   21 06 00               LD   hl,6   
411A   E5                     PUSH   hl   
411B   E5                     PUSH   hl   
411C   CD 53 0D               CALL   run   
411F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4127   CD C4 0B               CALL   flushBuffer   
412A   CD 4E 0C               CALL   printStr   
412D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
413A   E1                     POP   hl   
413B   E5                     PUSH   hl   
413C   E5                     PUSH   hl   
413D   CD 53 0D               CALL   run   
4140   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
414F   CD C4 0B               CALL   flushBuffer   
4152   76                     HALT      
4153                EXPECTM_2961S132:      
4153   E1                     POP   HL   
4154                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +}^",3
4154   31 00 4E               LD   SP,STACK   
4157   CD 82 0C               CALL   coldInit   
415A   CD 61 4C               CALL   execStr   
415D   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t :f{1 %f/br 2 +}^",0   
4171   CD C4 0B               CALL   flushBuffer   
4174   E1                     POP   HL   
4175   E5                     PUSH   HL   
4176   11 03 00               LD   DE,3   
4179   B7                     OR   A   
417A   ED 52                  SBC   HL,DE   
417C   7D                     LD   A,L   
417D   B4                     OR   H   
417E   CA EC 41               JP   Z,expectM_2962S133   
4181   CD 4E 0C               CALL   printStr   
4184   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +}^"   
419E   CD 4E 0C               CALL   printStr   
41A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41B0   21 03 00               LD   hl,3   
41B3   E5                     PUSH   hl   
41B4   E5                     PUSH   hl   
41B5   CD 53 0D               CALL   run   
41B8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41C0   CD C4 0B               CALL   flushBuffer   
41C3   CD 4E 0C               CALL   printStr   
41C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41D3   E1                     POP   hl   
41D4   E5                     PUSH   hl   
41D5   E5                     PUSH   hl   
41D6   CD 53 0D               CALL   run   
41D9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41E8   CD C4 0B               CALL   flushBuffer   
41EB   76                     HALT      
41EC                EXPECTM_2962S133:      
41EC   E1                     POP   HL   
41ED                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +}^",1
41ED   31 00 4E               LD   SP,STACK   
41F0   CD 82 0C               CALL   coldInit   
41F3   CD 61 4C               CALL   execStr   
41F6   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f :f{1 %f/br 2 +}^",0   
420A   CD C4 0B               CALL   flushBuffer   
420D   E1                     POP   HL   
420E   E5                     PUSH   HL   
420F   11 01 00               LD   DE,1   
4212   B7                     OR   A   
4213   ED 52                  SBC   HL,DE   
4215   7D                     LD   A,L   
4216   B4                     OR   H   
4217   CA 85 42               JP   Z,expectM_2963S134   
421A   CD 4E 0C               CALL   printStr   
421D   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +}^"   
4237   CD 4E 0C               CALL   printStr   
423A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4249   21 01 00               LD   hl,1   
424C   E5                     PUSH   hl   
424D   E5                     PUSH   hl   
424E   CD 53 0D               CALL   run   
4251   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4259   CD C4 0B               CALL   flushBuffer   
425C   CD 4E 0C               CALL   printStr   
425F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
426C   E1                     POP   hl   
426D   E5                     PUSH   hl   
426E   E5                     PUSH   hl   
426F   CD 53 0D               CALL   run   
4272   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4281   CD C4 0B               CALL   flushBuffer   
4284   76                     HALT      
4285                EXPECTM_2963S134:      
4285   E1                     POP   HL   
4286                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
4286   31 00 4E               LD   SP,STACK   
4289   CD 82 0C               CALL   coldInit   
428C   CD 61 4C               CALL   execStr   
428F   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
429B   CD C4 0B               CALL   flushBuffer   
429E   E1                     POP   HL   
429F   E5                     PUSH   HL   
42A0   11 00 00               LD   DE,NUL   
42A3   B7                     OR   A   
42A4   ED 52                  SBC   HL,DE   
42A6   7D                     LD   A,L   
42A7   B4                     OR   H   
42A8   CA 0E 43               JP   Z,expectM_2964S135   
42AB   CD 4E 0C               CALL   printStr   
42AE   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
42C0   CD 4E 0C               CALL   printStr   
42C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42D2   21 00 00               LD   hl,NUL   
42D5   E5                     PUSH   hl   
42D6   E5                     PUSH   hl   
42D7   CD 53 0D               CALL   run   
42DA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42E2   CD C4 0B               CALL   flushBuffer   
42E5   CD 4E 0C               CALL   printStr   
42E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42F5   E1                     POP   hl   
42F6   E5                     PUSH   hl   
42F7   E5                     PUSH   hl   
42F8   CD 53 0D               CALL   run   
42FB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
430A   CD C4 0B               CALL   flushBuffer   
430D   76                     HALT      
430E                EXPECTM_2964S135:      
430E   E1                     POP   HL   
430F                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
430F   31 00 4E               LD   SP,STACK   
4312   CD 82 0C               CALL   coldInit   
4315   CD 61 4C               CALL   execStr   
4318   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
4324   CD C4 0B               CALL   flushBuffer   
4327   E1                     POP   HL   
4328   E5                     PUSH   HL   
4329   11 00 00               LD   DE,NUL   
432C   B7                     OR   A   
432D   ED 52                  SBC   HL,DE   
432F   7D                     LD   A,L   
4330   B4                     OR   H   
4331   CA 97 43               JP   Z,expectM_2965S136   
4334   CD 4E 0C               CALL   printStr   
4337   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
4349   CD 4E 0C               CALL   printStr   
434C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
435B   21 00 00               LD   hl,NUL   
435E   E5                     PUSH   hl   
435F   E5                     PUSH   hl   
4360   CD 53 0D               CALL   run   
4363   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
436B   CD C4 0B               CALL   flushBuffer   
436E   CD 4E 0C               CALL   printStr   
4371   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
437E   E1                     POP   hl   
437F   E5                     PUSH   hl   
4380   E5                     PUSH   hl   
4381   CD 53 0D               CALL   run   
4384   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4393   CD C4 0B               CALL   flushBuffer   
4396   76                     HALT      
4397                EXPECTM_2965S136:      
4397   E1                     POP   HL   
4398                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
4398   31 00 4E               LD   SP,STACK   
439B   CD 82 0C               CALL   coldInit   
439E   CD 61 4C               CALL   execStr   
43A1   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
43AD   CD C4 0B               CALL   flushBuffer   
43B0   E1                     POP   HL   
43B1   E5                     PUSH   HL   
43B2   11 00 00               LD   DE,NUL   
43B5   B7                     OR   A   
43B6   ED 52                  SBC   HL,DE   
43B8   7D                     LD   A,L   
43B9   B4                     OR   H   
43BA   CA 20 44               JP   Z,expectM_2966S137   
43BD   CD 4E 0C               CALL   printStr   
43C0   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
43D2   CD 4E 0C               CALL   printStr   
43D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43E4   21 00 00               LD   hl,NUL   
43E7   E5                     PUSH   hl   
43E8   E5                     PUSH   hl   
43E9   CD 53 0D               CALL   run   
43EC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43F4   CD C4 0B               CALL   flushBuffer   
43F7   CD 4E 0C               CALL   printStr   
43FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4407   E1                     POP   hl   
4408   E5                     PUSH   hl   
4409   E5                     PUSH   hl   
440A   CD 53 0D               CALL   run   
440D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
441C   CD C4 0B               CALL   flushBuffer   
441F   76                     HALT      
4420                EXPECTM_2966S137:      
4420   E1                     POP   HL   
4421                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4421   31 00 4E               LD   SP,STACK   
4424   CD 82 0C               CALL   coldInit   
4427   CD 61 4C               CALL   execStr   
442A   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
4436   CD C4 0B               CALL   flushBuffer   
4439   E1                     POP   HL   
443A   E5                     PUSH   HL   
443B   11 00 00               LD   DE,NUL   
443E   B7                     OR   A   
443F   ED 52                  SBC   HL,DE   
4441   7D                     LD   A,L   
4442   B4                     OR   H   
4443   CA A9 44               JP   Z,expectM_2967S138   
4446   CD 4E 0C               CALL   printStr   
4449   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
445B   CD 4E 0C               CALL   printStr   
445E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
446D   21 00 00               LD   hl,NUL   
4470   E5                     PUSH   hl   
4471   E5                     PUSH   hl   
4472   CD 53 0D               CALL   run   
4475   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
447D   CD C4 0B               CALL   flushBuffer   
4480   CD 4E 0C               CALL   printStr   
4483   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4490   E1                     POP   hl   
4491   E5                     PUSH   hl   
4492   E5                     PUSH   hl   
4493   CD 53 0D               CALL   run   
4496   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44A5   CD C4 0B               CALL   flushBuffer   
44A8   76                     HALT      
44A9                EXPECTM_2967S138:      
44A9   E1                     POP   HL   
44AA                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
44AA   31 00 4E               LD   SP,STACK   
44AD   CD 82 0C               CALL   coldInit   
44B0   CD 61 4C               CALL   execStr   
44B3   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
44BB   CD C4 0B               CALL   flushBuffer   
44BE   E1                     POP   HL   
44BF   E5                     PUSH   HL   
44C0   11 66 50               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
44C3   B7                     OR   A   
44C4   ED 52                  SBC   HL,DE   
44C6   7D                     LD   A,L   
44C7   B4                     OR   H   
44C8   CA 2A 45               JP   Z,expectM_2968S139   
44CB   CD 4E 0C               CALL   printStr   
44CE   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
44DC   CD 4E 0C               CALL   printStr   
44DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44EE   21 66 50               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
44F1   E5                     PUSH   hl   
44F2   E5                     PUSH   hl   
44F3   CD 53 0D               CALL   run   
44F6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44FE   CD C4 0B               CALL   flushBuffer   
4501   CD 4E 0C               CALL   printStr   
4504   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4511   E1                     POP   hl   
4512   E5                     PUSH   hl   
4513   E5                     PUSH   hl   
4514   CD 53 0D               CALL   run   
4517   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4526   CD C4 0B               CALL   flushBuffer   
4529   76                     HALT      
452A                EXPECTM_2968S139:      
452A   E1                     POP   HL   
452B                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
452B   31 00 4E               LD   SP,STACK   
452E   CD 82 0C               CALL   coldInit   
4531   CD 61 4C               CALL   execStr   
4534   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
453C   CD C4 0B               CALL   flushBuffer   
453F   E1                     POP   HL   
4540   E5                     PUSH   HL   
4541   11 34 50               LD   DE,VARS + ("Z"-"A"+1)*2   
4544   B7                     OR   A   
4545   ED 52                  SBC   HL,DE   
4547   7D                     LD   A,L   
4548   B4                     OR   H   
4549   CA AB 45               JP   Z,expectM_2969S140   
454C   CD 4E 0C               CALL   printStr   
454F   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
455D   CD 4E 0C               CALL   printStr   
4560   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
456F   21 34 50               LD   hl,VARS + ("Z"-"A"+1)*2   
4572   E5                     PUSH   hl   
4573   E5                     PUSH   hl   
4574   CD 53 0D               CALL   run   
4577   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
457F   CD C4 0B               CALL   flushBuffer   
4582   CD 4E 0C               CALL   printStr   
4585   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4592   E1                     POP   hl   
4593   E5                     PUSH   hl   
4594   E5                     PUSH   hl   
4595   CD 53 0D               CALL   run   
4598   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45A7   CD C4 0B               CALL   flushBuffer   
45AA   76                     HALT      
45AB                EXPECTM_2969S140:      
45AB   E1                     POP   HL   
45AC                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
45AC   31 00 4E               LD   SP,STACK   
45AF   CD 82 0C               CALL   coldInit   
45B2   CD 61 4C               CALL   execStr   
45B5   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
45BD   CD C4 0B               CALL   flushBuffer   
45C0   E1                     POP   HL   
45C1   E5                     PUSH   HL   
45C2   11 32 50               LD   DE,VARS + ("Z"-"A")*2   
45C5   B7                     OR   A   
45C6   ED 52                  SBC   HL,DE   
45C8   7D                     LD   A,L   
45C9   B4                     OR   H   
45CA   CA 2C 46               JP   Z,expectM_2970S141   
45CD   CD 4E 0C               CALL   printStr   
45D0   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
45DE   CD 4E 0C               CALL   printStr   
45E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45F0   21 32 50               LD   hl,VARS + ("Z"-"A")*2   
45F3   E5                     PUSH   hl   
45F4   E5                     PUSH   hl   
45F5   CD 53 0D               CALL   run   
45F8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4600   CD C4 0B               CALL   flushBuffer   
4603   CD 4E 0C               CALL   printStr   
4606   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4613   E1                     POP   hl   
4614   E5                     PUSH   hl   
4615   E5                     PUSH   hl   
4616   CD 53 0D               CALL   run   
4619   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4628   CD C4 0B               CALL   flushBuffer   
462B   76                     HALT      
462C                EXPECTM_2970S141:      
462C   E1                     POP   HL   
462D                          ;*Macro unroll:  test "'A' /ad", VARS
462D   31 00 4E               LD   SP,STACK   
4630   CD 82 0C               CALL   coldInit   
4633   CD 61 4C               CALL   execStr   
4636   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
463E   CD C4 0B               CALL   flushBuffer   
4641   E1                     POP   HL   
4642   E5                     PUSH   HL   
4643   11 00 50               LD   DE,VARS   
4646   B7                     OR   A   
4647   ED 52                  SBC   HL,DE   
4649   7D                     LD   A,L   
464A   B4                     OR   H   
464B   CA AD 46               JP   Z,expectM_2971S142   
464E   CD 4E 0C               CALL   printStr   
4651   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
465F   CD 4E 0C               CALL   printStr   
4662   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4671   21 00 50               LD   hl,VARS   
4674   E5                     PUSH   hl   
4675   E5                     PUSH   hl   
4676   CD 53 0D               CALL   run   
4679   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4681   CD C4 0B               CALL   flushBuffer   
4684   CD 4E 0C               CALL   printStr   
4687   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4694   E1                     POP   hl   
4695   E5                     PUSH   hl   
4696   E5                     PUSH   hl   
4697   CD 53 0D               CALL   run   
469A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46A9   CD C4 0B               CALL   flushBuffer   
46AC   76                     HALT      
46AD                EXPECTM_2971S142:      
46AD   E1                     POP   HL   
46AE                          ;*Macro unroll:  test "-1. /b/vB 0#", $2D
46AE   31 00 4E               LD   SP,STACK   
46B1   CD 82 0C               CALL   coldInit   
46B4   CD 61 4C               CALL   execStr   
46B7   2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 DB   "-1. /b/vB 0#",0   
46C4   CD C4 0B               CALL   flushBuffer   
46C7   E1                     POP   HL   
46C8   E5                     PUSH   HL   
46C9   11 2D 00               LD   DE,$2D   
46CC   B7                     OR   A   
46CD   ED 52                  SBC   HL,DE   
46CF   7D                     LD   A,L   
46D0   B4                     OR   H   
46D1   CA 38 47               JP   Z,expectM_2972S143   
46D4   CD 4E 0C               CALL   printStr   
46D7   43 6F 64 65 3A 20 2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /b/vB 0#"   
46EA   CD 4E 0C               CALL   printStr   
46ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46FC   21 2D 00               LD   hl,$2D   
46FF   E5                     PUSH   hl   
4700   E5                     PUSH   hl   
4701   CD 53 0D               CALL   run   
4704   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
470C   CD C4 0B               CALL   flushBuffer   
470F   CD 4E 0C               CALL   printStr   
4712   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
471F   E1                     POP   hl   
4720   E5                     PUSH   hl   
4721   E5                     PUSH   hl   
4722   CD 53 0D               CALL   run   
4725   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4734   CD C4 0B               CALL   flushBuffer   
4737   76                     HALT      
4738                EXPECTM_2972S143:      
4738   E1                     POP   HL   
4739                          ;*Macro unroll:  test {DQ,"A",DQ,".s /b/vB 0#"}, 65
4739   31 00 4E               LD   SP,STACK   
473C   CD 82 0C               CALL   coldInit   
473F   CD 61 4C               CALL   execStr   
4742   22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /b/vB 0#",0   
4751   CD C4 0B               CALL   flushBuffer   
4754   E1                     POP   HL   
4755   E5                     PUSH   HL   
4756   11 41 00               LD   DE,65   
4759   B7                     OR   A   
475A   ED 52                  SBC   HL,DE   
475C   7D                     LD   A,L   
475D   B4                     OR   H   
475E   CA C7 47               JP   Z,expectM_2973S144   
4761   CD 4E 0C               CALL   printStr   
4764   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /b/vB 0#"   
4779   CD 4E 0C               CALL   printStr   
477C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
478B   21 41 00               LD   hl,65   
478E   E5                     PUSH   hl   
478F   E5                     PUSH   hl   
4790   CD 53 0D               CALL   run   
4793   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
479B   CD C4 0B               CALL   flushBuffer   
479E   CD 4E 0C               CALL   printStr   
47A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47AE   E1                     POP   hl   
47AF   E5                     PUSH   hl   
47B0   E5                     PUSH   hl   
47B1   CD 53 0D               CALL   run   
47B4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47C3   CD C4 0B               CALL   flushBuffer   
47C6   76                     HALT      
47C7                EXPECTM_2973S144:      
47C7   E1                     POP   HL   
47C8                          ;*Macro unroll:  test "123. /b/vB 1#", $32
47C8   31 00 4E               LD   SP,STACK   
47CB   CD 82 0C               CALL   coldInit   
47CE   CD 61 4C               CALL   execStr   
47D1   31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 DB   "123. /b/vB 1#",0   
47DF   CD C4 0B               CALL   flushBuffer   
47E2   E1                     POP   HL   
47E3   E5                     PUSH   HL   
47E4   11 32 00               LD   DE,$32   
47E7   B7                     OR   A   
47E8   ED 52                  SBC   HL,DE   
47EA   7D                     LD   A,L   
47EB   B4                     OR   H   
47EC   CA 54 48               JP   Z,expectM_2974S145   
47EF   CD 4E 0C               CALL   printStr   
47F2   43 6F 64 65 3A 20 31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /b/vB 1#"   
4806   CD 4E 0C               CALL   printStr   
4809   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4818   21 32 00               LD   hl,$32   
481B   E5                     PUSH   hl   
481C   E5                     PUSH   hl   
481D   CD 53 0D               CALL   run   
4820   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4828   CD C4 0B               CALL   flushBuffer   
482B   CD 4E 0C               CALL   printStr   
482E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
483B   E1                     POP   hl   
483C   E5                     PUSH   hl   
483D   E5                     PUSH   hl   
483E   CD 53 0D               CALL   run   
4841   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4850   CD C4 0B               CALL   flushBuffer   
4853   76                     HALT      
4854                EXPECTM_2974S145:      
4854   E1                     POP   HL   
4855                          ;*Macro unroll:  test ":a{%a} F=1F^", 1
4855   31 00 4E               LD   SP,STACK   
4858   CD 82 0C               CALL   coldInit   
485B   CD 61 4C               CALL   execStr   
485E   3A 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   ":a{%a} F=1F^",0   
486B   CD C4 0B               CALL   flushBuffer   
486E   E1                     POP   HL   
486F   E5                     PUSH   HL   
4870   11 01 00               LD   DE,1   
4873   B7                     OR   A   
4874   ED 52                  SBC   HL,DE   
4876   7D                     LD   A,L   
4877   B4                     OR   H   
4878   CA DF 48               JP   Z,expectM_2975S146   
487B   CD 4E 0C               CALL   printStr   
487E   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a} F=1F^"   
4891   CD 4E 0C               CALL   printStr   
4894   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48A3   21 01 00               LD   hl,1   
48A6   E5                     PUSH   hl   
48A7   E5                     PUSH   hl   
48A8   CD 53 0D               CALL   run   
48AB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48B3   CD C4 0B               CALL   flushBuffer   
48B6   CD 4E 0C               CALL   printStr   
48B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48C6   E1                     POP   hl   
48C7   E5                     PUSH   hl   
48C8   E5                     PUSH   hl   
48C9   CD 53 0D               CALL   run   
48CC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48DB   CD C4 0B               CALL   flushBuffer   
48DE   76                     HALT      
48DF                EXPECTM_2975S146:      
48DF   E1                     POP   HL   
48E0                          ;*Macro unroll:  test "1 :b{:a{%a}}^F= 3F^",3
48E0   31 00 4E               LD   SP,STACK   
48E3   CD 82 0C               CALL   coldInit   
48E6   CD 61 4C               CALL   execStr   
48E9   31 20 3A 62 7B 3A 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a}}^F= 3F^",0   
48FD   CD C4 0B               CALL   flushBuffer   
4900   E1                     POP   HL   
4901   E5                     PUSH   HL   
4902   11 03 00               LD   DE,3   
4905   B7                     OR   A   
4906   ED 52                  SBC   HL,DE   
4908   7D                     LD   A,L   
4909   B4                     OR   H   
490A   CA 78 49               JP   Z,expectM_2976S147   
490D   CD 4E 0C               CALL   printStr   
4910   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a}}^F= 3F^"   
492A   CD 4E 0C               CALL   printStr   
492D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
493C   21 03 00               LD   hl,3   
493F   E5                     PUSH   hl   
4940   E5                     PUSH   hl   
4941   CD 53 0D               CALL   run   
4944   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
494C   CD C4 0B               CALL   flushBuffer   
494F   CD 4E 0C               CALL   printStr   
4952   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
495F   E1                     POP   hl   
4960   E5                     PUSH   hl   
4961   E5                     PUSH   hl   
4962   CD 53 0D               CALL   run   
4965   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4974   CD C4 0B               CALL   flushBuffer   
4977   76                     HALT      
4978                EXPECTM_2976S147:      
4978   E1                     POP   HL   
4979                          ;*Macro unroll:  test "1 :b{:a{%a%b-}}^F= 3F^",2
4979   31 00 4E               LD   SP,STACK   
497C   CD 82 0C               CALL   coldInit   
497F   CD 61 4C               CALL   execStr   
4982   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-}}^F= 3F^",0   
4999   CD C4 0B               CALL   flushBuffer   
499C   E1                     POP   HL   
499D   E5                     PUSH   HL   
499E   11 02 00               LD   DE,2   
49A1   B7                     OR   A   
49A2   ED 52                  SBC   HL,DE   
49A4   7D                     LD   A,L   
49A5   B4                     OR   H   
49A6   CA 17 4A               JP   Z,expectM_2977S148   
49A9   CD 4E 0C               CALL   printStr   
49AC   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-}}^F= 3F^"   
49C9   CD 4E 0C               CALL   printStr   
49CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49DB   21 02 00               LD   hl,2   
49DE   E5                     PUSH   hl   
49DF   E5                     PUSH   hl   
49E0   CD 53 0D               CALL   run   
49E3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49EB   CD C4 0B               CALL   flushBuffer   
49EE   CD 4E 0C               CALL   printStr   
49F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49FE   E1                     POP   hl   
49FF   E5                     PUSH   hl   
4A00   E5                     PUSH   hl   
4A01   CD 53 0D               CALL   run   
4A04   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A13   CD C4 0B               CALL   flushBuffer   
4A16   76                     HALT      
4A17                EXPECTM_2977S148:      
4A17   E1                     POP   HL   
4A18                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4A18   31 00 4E               LD   SP,STACK   
4A1B   CD 82 0C               CALL   coldInit   
4A1E   CD 61 4C               CALL   execStr   
4A21   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
4A44   CD C4 0B               CALL   flushBuffer   
4A47   E1                     POP   HL   
4A48   E5                     PUSH   HL   
4A49   11 01 00               LD   DE,1   
4A4C   B7                     OR   A   
4A4D   ED 52                  SBC   HL,DE   
4A4F   7D                     LD   A,L   
4A50   B4                     OR   H   
4A51   CA CE 4A               JP   Z,expectM_2978S149   
4A54   CD 4E 0C               CALL   printStr   
4A57   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4A80   CD 4E 0C               CALL   printStr   
4A83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A92   21 01 00               LD   hl,1   
4A95   E5                     PUSH   hl   
4A96   E5                     PUSH   hl   
4A97   CD 53 0D               CALL   run   
4A9A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4AA2   CD C4 0B               CALL   flushBuffer   
4AA5   CD 4E 0C               CALL   printStr   
4AA8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AB5   E1                     POP   hl   
4AB6   E5                     PUSH   hl   
4AB7   E5                     PUSH   hl   
4AB8   CD 53 0D               CALL   run   
4ABB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4ACA   CD C4 0B               CALL   flushBuffer   
4ACD   76                     HALT      
4ACE                EXPECTM_2978S149:      
4ACE   E1                     POP   HL   
4ACF                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c}}^F= 3F^",1
4ACF   31 00 4E               LD   SP,STACK   
4AD2   CD 82 0C               CALL   coldInit   
4AD5   CD 61 4C               CALL   execStr   
4AD8   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c}}^F= 3F^",0   
4AFB   CD C4 0B               CALL   flushBuffer   
4AFE   E1                     POP   HL   
4AFF   E5                     PUSH   HL   
4B00   11 01 00               LD   DE,1   
4B03   B7                     OR   A   
4B04   ED 52                  SBC   HL,DE   
4B06   7D                     LD   A,L   
4B07   B4                     OR   H   
4B08   CA 85 4B               JP   Z,expectM_2979S150   
4B0B   CD 4E 0C               CALL   printStr   
4B0E   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c}}^F= 3F^"   
4B37   CD 4E 0C               CALL   printStr   
4B3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B49   21 01 00               LD   hl,1   
4B4C   E5                     PUSH   hl   
4B4D   E5                     PUSH   hl   
4B4E   CD 53 0D               CALL   run   
4B51   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B59   CD C4 0B               CALL   flushBuffer   
4B5C   CD 4E 0C               CALL   printStr   
4B5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B6C   E1                     POP   hl   
4B6D   E5                     PUSH   hl   
4B6E   E5                     PUSH   hl   
4B6F   CD 53 0D               CALL   run   
4B72   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B81   CD C4 0B               CALL   flushBuffer   
4B84   76                     HALT      
4B85                EXPECTM_2979S150:      
4B85   E1                     POP   HL   
4B86                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4B86   31 00 4E               LD   SP,STACK   
4B89   CD 82 0C               CALL   coldInit   
4B8C   CD 61 4C               CALL   execStr   
4B8F   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4BBF   CD C4 0B               CALL   flushBuffer   
4BC2   E1                     POP   HL   
4BC3   E5                     PUSH   HL   
4BC4   11 02 00               LD   DE,2   
4BC7   B7                     OR   A   
4BC8   ED 52                  SBC   HL,DE   
4BCA   7D                     LD   A,L   
4BCB   B4                     OR   H   
4BCC   CA 56 4C               JP   Z,expectM_2980S151   
4BCF   CD 4E 0C               CALL   printStr   
4BD2   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4C08   CD 4E 0C               CALL   printStr   
4C0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C1A   21 02 00               LD   hl,2   
4C1D   E5                     PUSH   hl   
4C1E   E5                     PUSH   hl   
4C1F   CD 53 0D               CALL   run   
4C22   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C2A   CD C4 0B               CALL   flushBuffer   
4C2D   CD 4E 0C               CALL   printStr   
4C30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C3D   E1                     POP   hl   
4C3E   E5                     PUSH   hl   
4C3F   E5                     PUSH   hl   
4C40   CD 53 0D               CALL   run   
4C43   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C52   CD C4 0B               CALL   flushBuffer   
4C55   76                     HALT      
4C56                EXPECTM_2980S151:      
4C56   E1                     POP   HL   
4C57                             ; test "$1000 0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe", $1000
4C57                             ; 
4C57   CD 4E 0C               CALL   printStr   
4C5A   44 6F 6E 65 21 00      .CSTR   "Done!"   
4C60   76                     HALT      
4C61                             ; executes a null teminated string (null executes exit_)
4C61                             ; the string should be immedaitely following the call
4C61                EXECSTR:      ; create a root stack frame
4C61   C1                     POP   bc   ; bc = code*
4C62   0B                     DEC   bc   ; dec to prepare for next routine
4C63   11 00 00               LD   de,0   
4C66   D5                     PUSH   de   ; push fake IP
4C67   D5                     PUSH   de   ; push null arg_list*
4C68   D5                     PUSH   de   ; push null first_arg*
4C69   D5                     PUSH   de   ; push fake BP
4C6A   DD E9                  JP   (ix)   
4C6C                STKSIZE:   EQU   $100   ; Stack size
4C6C                TIBSIZE:   EQU   $100   ; 256 bytes
4C6C                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4C6C                          ALIGN   $100   
4D00                          DS   STKSIZE   
4E00                STACK:       
4E00                          ALIGN   $100   
4E00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4F00                          ALIGN   $100   
4F00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5000                          ALIGN   $100   
5000                VARS:        
5000                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
50D0                RESTARTS:      
50D0                RST08:    DS   2   
50D2                RST10:    DS   2   
50D4                RST18:    DS   2   
50D6                RST20:    DS   2   
50D8                RST28:    DS   2   
50DA                RST30:    DS   2   ; 
50DC                BAUD:     DS   2   ; 
50DE                INTVEC:   DS   2   ; 
50E0                NMIVEC:   DS   2   ; 
50E2                GETCVEC:   DS   2   ; 
50E4                PUTCVEC:   DS   2   ; 
50E6                SYSVARS:      
50E6                             ; initialised sys variables (preserved)
50E6                VDATAWIDTH:   DS   2   ; 
50E8                VNUMBASE:   DS   2   ; 
50EA                VTIBPTR:   DS   2   ; 
50EC                VBUFPTR:   DS   2   ; 
50EE                VNEXT:    DS   2   ; 
50F0                VHEAPPTR:   DS   2   ; 
50F2                VRECUR:   DS   2   ; 
50F4                             ; uninitialised sys variables (preserved)
50F4                VPOINTER:   DS   2   ; 
50F6                VREMAIN:   DS   2   ; 
50F8                VSAVEDIP:   DS   2   ; 
50FA                VSAVEDSP:   DS   2   ; 
50FC                VSAVEDNEXT:   DS   2   ; 
50FE                VSAVEDBP:   DS   2   ; 
5100                             ; uninitialised sys variables (unpreserved)
5100                VTEMP1:   DS   2   ; 
5102                VTEMP2:   DS   2   ; 
5104                VTEMP3:   DS   2   ; 
5106                VLASTDEF:   DS   2   ; 
5108                TBPTR:    DS   2   ; reserved for tests
510A                TITLEBUF:   DS   20   
511E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0BC2 DEFINED AT LINE 1963 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 337 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 2197 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2205 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2207 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
PLUS_:              0204 DEFINED AT LINE 173 IN MAIN.asm
ADD:                0204 DEFINED AT LINE 174 IN MAIN.asm
ADD1:               020F DEFINED AT LINE 182 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ADD3:               0213 DEFINED AT LINE 187 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
ADD4:               021D DEFINED AT LINE 195 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
AMPER_:             0220 DEFINED AT LINE 198 IN MAIN.asm
AND:                0220 DEFINED AT LINE 199 IN MAIN.asm
AND1:               0227 DEFINED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
PIPE_:              022B DEFINED AT LINE 212 IN MAIN.asm
OR:                 022B DEFINED AT LINE 213 IN MAIN.asm
AT_:                0234 DEFINED AT LINE 226 IN MAIN.asm
ADDR:               0234 DEFINED AT LINE 227 IN MAIN.asm
BANG_:              023E DEFINED AT LINE 232 IN MAIN.asm
NOT:                0248 DEFINED AT LINE 240 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
MINUS_:             024E DEFINED AT LINE 245 IN MAIN.asm
SUB:                0259 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SUB1:               0263 DEFINED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
NUM_:               026B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
EQ_:                026E DEFINED AT LINE 271 IN MAIN.asm
EQ0_:               0277 DEFINED AT LINE 278 IN MAIN.asm
EQ1:                0278 DEFINED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 243 IN MAIN.asm
GT_:                027B DEFINED AT LINE 284 IN MAIN.asm
LT_:                0286 DEFINED AT LINE 292 IN MAIN.asm
LT1:                028F DEFINED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
EQUALS:             0296 DEFINED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
NOTEQUALS:          029D DEFINED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
LESSTHANEQ:         02A4 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
LESSTHAN:           02A9 DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 303 IN MAIN.asm
LESSTHAN1:          02AE DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
TRUE1:              02B1 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
NULL1:              02B7 DEFINED AT LINE 340 IN MAIN.asm
FALSE1:             02B7 DEFINED AT LINE 341 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 317 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
NOP_:               02BB DEFINED AT LINE 344 IN MAIN.asm
RPAREN_:            02BD DEFINED AT LINE 346 IN MAIN.asm
DOLLAR_:            02C0 DEFINED AT LINE 348 IN MAIN.asm
LBRACK_:            02C3 DEFINED AT LINE 350 IN MAIN.asm
RBRACK_:            02C6 DEFINED AT LINE 352 IN MAIN.asm
PERCENT_:           02C9 DEFINED AT LINE 354 IN MAIN.asm
LPAREN_:            02CC DEFINED AT LINE 356 IN MAIN.asm
LBRACE_:            02CC DEFINED AT LINE 357 IN MAIN.asm
RBRACE_:            02CF DEFINED AT LINE 359 IN MAIN.asm
TICK_:              02D2 DEFINED AT LINE 361 IN MAIN.asm
SEMICOLON_:         02D5 DEFINED AT LINE 363 IN MAIN.asm
DOT_:               02D8 DEFINED AT LINE 365 IN MAIN.asm
COLON_:             02DB DEFINED AT LINE 367 IN MAIN.asm
UPCASE_:            02DE DEFINED AT LINE 369 IN MAIN.asm
LOWCASE_:           02E1 DEFINED AT LINE 371 IN MAIN.asm
QUESTION_:          02E4 DEFINED AT LINE 373 IN MAIN.asm
STAR_:              02E7 DEFINED AT LINE 375 IN MAIN.asm
HASH_:              02EA DEFINED AT LINE 377 IN MAIN.asm
CARET_:             02ED DEFINED AT LINE 379 IN MAIN.asm
COMMA_:             02F0 DEFINED AT LINE 381 IN MAIN.asm
DQUOTE_:            02F3 DEFINED AT LINE 383 IN MAIN.asm
BACKSLASH_:         02F6 DEFINED AT LINE 385 IN MAIN.asm
UNDERSCORE_:        02F9 DEFINED AT LINE 387 IN MAIN.asm
TILDE_:             02FC DEFINED AT LINE 389 IN MAIN.asm
SLASH_:             02FF DEFINED AT LINE 391 IN MAIN.asm
SLASH:              0301 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
COMMAND:            0301 DEFINED AT LINE 400 IN MAIN.asm
COMMAND_A_:         0327 DEFINED AT LINE 435 IN MAIN.asm
COMMAND_B_:         0334 DEFINED AT LINE 446 IN MAIN.asm
COMMAND_F_:         033F DEFINED AT LINE 455 IN MAIN.asm
COMMAND_I_:         0342 DEFINED AT LINE 458 IN MAIN.asm
COMMAND_M_:         034B DEFINED AT LINE 465 IN MAIN.asm
COMMAND_P_:         034E DEFINED AT LINE 468 IN MAIN.asm
COMMAND_Q_:         0357 DEFINED AT LINE 475 IN MAIN.asm
COMMAND_R_:         0360 DEFINED AT LINE 482 IN MAIN.asm
COMMAND_V_:         0363 DEFINED AT LINE 485 IN MAIN.asm
COMMAND_NOP_:       0366 DEFINED AT LINE 488 IN MAIN.asm
DECIMAL_:           0368 DEFINED AT LINE 491 IN MAIN.asm
DECIMAL1:           036B DEFINED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
DIV_:               0370 DEFINED AT LINE 497 IN MAIN.asm
ERROR1_:            0374 DEFINED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
HEXADECIMAL_:       0377 DEFINED AT LINE 504 IN MAIN.asm
KEY_:               037D DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
OUTPUT_:            0380 DEFINED AT LINE 511 IN MAIN.asm
TRUE_:              0383 DEFINED AT LINE 514 IN MAIN.asm
WORDS_:             0386 DEFINED AT LINE 517 IN MAIN.asm
XOR_:               0389 DEFINED AT LINE 520 IN MAIN.asm
XOR1:               038A DEFINED AT LINE 522 IN MAIN.asm
ABSOLUTE_:          0394 DEFINED AT LINE 535 IN MAIN.asm
ADDROF_:            03A1 DEFINED AT LINE 550 IN MAIN.asm
ADDROF1:            03B5 DEFINED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
ADDROF2:            03C0 DEFINED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
ARRAYSIZE_:         03C2 DEFINED AT LINE 576 IN MAIN.asm
BREAK_:             03CA DEFINED AT LINE 586 IN MAIN.asm
COLDSTART_:         03CD DEFINED AT LINE 590 IN MAIN.asm
BYTES_:             03D0 DEFINED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
BYTES1:             03D3 DEFINED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
INPUT_:             03D8 DEFINED AT LINE 602 IN MAIN.asm
PRINTCHARS_:        03E3 DEFINED AT LINE 615 IN MAIN.asm
QUIT_:              03EA DEFINED AT LINE 622 IN MAIN.asm
QUIT1:              03F1 DEFINED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
WORDS:              03F4 DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
COMMENT:            03FA DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
COMMAND_F:          0403 DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
FOREACH_:           041A DEFINED AT LINE 671 IN MAIN.asm
FLUSH_:             041D DEFINED AT LINE 676 IN MAIN.asm
FUNCSRC_:           0422 DEFINED AT LINE 680 IN MAIN.asm
F1_:                0425 DEFINED AT LINE 683 IN MAIN.asm
F2_:                0428 DEFINED AT LINE 686 IN MAIN.asm
F3_:                042B DEFINED AT LINE 689 IN MAIN.asm
F4_:                042E DEFINED AT LINE 692 IN MAIN.asm
FZ_:                0431 DEFINED AT LINE 695 IN MAIN.asm
FALSE_:             0434 DEFINED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
COMMAND_M:          0437 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
MAP_:               0440 DEFINED AT LINE 708 IN MAIN.asm
COMMAND_R:          0443 DEFINED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 483 IN MAIN.asm
RECUR_:             0450 DEFINED AT LINE 722 IN MAIN.asm
REMAIN_:            0456 DEFINED AT LINE 727 IN MAIN.asm
RANGESRC_:          045C DEFINED AT LINE 732 IN MAIN.asm
COMMAND_V:          045F DEFINED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
CONSTBUFSTART_:     0472 DEFINED AT LINE 752 IN MAIN.asm
CONSTHEAPSTART_:    0477 DEFINED AT LINE 756 IN MAIN.asm
CONSTTIBSTART_:     047C DEFINED AT LINE 760 IN MAIN.asm
VARBUFPTR_:         0481 DEFINED AT LINE 764 IN MAIN.asm
VARHEAPPTR_:        048A DEFINED AT LINE 769 IN MAIN.asm
VARTIBPTR_:         0493 DEFINED AT LINE 774 IN MAIN.asm
VARIABLE:           049C DEFINED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
CONSTANT:           049F DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
DOT:                04A2 DEFINED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
DOTNUMBER_:         04B1 DEFINED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
DOTSTRING_:         04BC DEFINED AT LINE 809 IN MAIN.asm
DOTSTRING0:         04C3 DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
DOTSTRING1:         04C9 DEFINED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 812 IN MAIN.asm
DOTCHAR_:           04D6 DEFINED AT LINE 828 IN MAIN.asm
DOTXCHARS_:         04DB DEFINED AT LINE 834 IN MAIN.asm
DOTXCHARS0:         04DC DEFINED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
DOTXCHARS1:         04E5 DEFINED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
DOTXCHARS2:         04ED DEFINED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
FOREACH:            04F7 DEFINED AT LINE 32
                    > USED AT LINE 672 IN MAIN.asm
FOREACHM_1334S864:  0505 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0543 DEFINED AT LINE 32
                    > USED AT LINE 681 IN MAIN.asm
FUNCSRCM_1349S880:  054F DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           057C DEFINED AT LINE 32
DOTARRAYM_1359S891: 058A DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                05C4 DEFINED AT LINE 32
                    > USED AT LINE 709 IN MAIN.asm
MAPM_1366S899:      05D1 DEFINED AT LINE 39
                    > USED AT LINE 35
RANGESRC:           0606 DEFINED AT LINE 32
                    > USED AT LINE 733 IN MAIN.asm
RANGESRCM_1380S914: 0615 DEFINED AT LINE 39
                    > USED AT LINE 35
BACKSLASH:          0686 DEFINED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
UNDERSCORE:         0686 DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
TILDE:              0686 DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 390 IN MAIN.asm
COMMA:              0686 DEFINED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
SEMICOLON:          0686 DEFINED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
COLON:              0688 DEFINED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
LAMBDA:             0688 DEFINED AT LINE 950 IN MAIN.asm
PERFORMM_1416S954:  0695 DEFINED AT LINE 45
                    > USED AT LINE 43
ARGLIST:            069E DEFINED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
ARGLIST1:           06A8 DEFINED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
ARGLIST1A:          06B0 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
ARGLIST2:           06B8 DEFINED AT LINE 984 IN MAIN.asm
ARGLIST3:           06C0 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
ARGLIST4:           06C3 DEFINED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
ARGLIST5:           06C9 DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 999 IN MAIN.asm
CREATEFUNC:         06D4 DEFINED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
CREATEFUNC0:        06F3 DEFINED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
CREATEFUNC1:        070B DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
CREATEFUNC2:        071E DEFINED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
CREATEFUNC2A:       073D DEFINED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
CREATEFUNC3:        074C DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
CREATEFUNC4:        0757 DEFINED AT LINE 1109 IN MAIN.asm
CREATEFUNC5:        0758 DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
PERCENT:            0776 DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 355 IN MAIN.asm
ARG:                0776 DEFINED AT LINE 1137 IN MAIN.asm
ARG0:               0792 DEFINED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
ARG0A:              079B DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
ARG1:               07A0 DEFINED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
ARG1A:              07A8 DEFINED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
LBRACK:             07AB DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 351 IN MAIN.asm
ARRAYSTART:         07AB DEFINED AT LINE 1179 IN MAIN.asm
RBRACK:             07C7 DEFINED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 353 IN MAIN.asm
ARRAYEND:           07C7 DEFINED AT LINE 1194 IN MAIN.asm
ARRAYEND1:          07E3 DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
ARRAYEND2:          07F3 DEFINED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
ARRAYEND3:          07F8 DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
HASH:               0817 DEFINED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
ARRAYINDEX:         0817 DEFINED AT LINE 1249 IN MAIN.asm
ARRAYINDEX0:        081F DEFINED AT LINE 1255 IN MAIN.asm
ARRAYINDEX1:        0820 DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
ARRAYINDEX2:        082C DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
ASSIGN:             082F DEFINED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
ASSIGN0:            0831 DEFINED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
ASSIGNX:            0832 DEFINED AT LINE 1276 IN MAIN.asm
ASSIGN1:            083E DEFINED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
LBRACE:             0840 DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
BLOCKSTART:         0840 DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 44
BLOCKSTART1:        0844 DEFINED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
BLOCKSTART2:        0870 DEFINED AT LINE 1319 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
                    > USED AT LINE 1310 IN MAIN.asm
BLOCKSTART3:        0873 DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
BLOCKSTART4:        087B DEFINED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 1303 IN MAIN.asm
BLOCKSTART5:        087E DEFINED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
BLOCKSTART6:        08A6 DEFINED AT LINE 1350 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
RBRACE:             08A9 DEFINED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
BLOCKEND:           08A9 DEFINED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
BLOCKEND1:          08DB DEFINED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1370 IN MAIN.asm
BLOCKEND2:          08E7 DEFINED AT LINE 1384 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
BLOCKEND3:          08F9 DEFINED AT LINE 1398 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
BLOCKEND4:          090D DEFINED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1406 IN MAIN.asm
BREAK:              0916 DEFINED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
BREAK1:             091D DEFINED AT LINE 1421 IN MAIN.asm
                    > USED AT LINE 1419 IN MAIN.asm
TICK:               0930 DEFINED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
CHAR:               0930 DEFINED AT LINE 1433 IN MAIN.asm
CHAR1:              0933 DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1446 IN MAIN.asm
CHAR2:              093F DEFINED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
CHAR3:              0942 DEFINED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
DIV:                0945 DEFINED AT LINE 1451 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
BUFFERDEC:          0956 DEFINED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
BUFFERDEC0:         0970 DEFINED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
BUFFERDEC1:         0980 DEFINED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
BUFFERDEC2:         09A0 DEFINED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
BUFFERDEC3:         09A2 DEFINED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
BUFFERDEC4:         09B2 DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
BUFFERDEC5:         09B3 DEFINED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
BUFFERHEX:          09BC DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
BUFFERHEX1:         09DD DEFINED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
BUFFERHEX2:         09E6 DEFINED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
DIVIDE:             09F4 DEFINED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1456 IN MAIN.asm
DIVIDE1:            09F9 DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
DIVIDE2:            0A06 DEFINED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
DIVIDE3:            0A07 DEFINED AT LINE 1589 IN MAIN.asm
                    > USED AT LINE 1586 IN MAIN.asm
FZ:                 0A0D DEFINED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
CARET:              0A1A DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
GO:                 0A1A DEFINED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0A1B DEFINED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1411 IN MAIN.asm
                    > USED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
GO2:                0A21 DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
GOBLOCK:            0A2C DEFINED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
GOBLOCK2:           0A51 DEFINED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
GOBLOCK3:           0A5B DEFINED AT LINE 1646 IN MAIN.asm
GOFUNC:             0A5F DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
GOFUNC1:            0A78 DEFINED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
GOFUNC2:            0A7E DEFINED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1668 IN MAIN.asm
GOFUNC3:            0A89 DEFINED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
GOFUNC4:            0AA1 DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
GOFUNC5:            0AA4 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
GOFUNC6:            0AA7 DEFINED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
GOFUNC7:            0AAA DEFINED AT LINE 1709 IN MAIN.asm
GOFUNC8:            0AAE DEFINED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
DOLLAR:             0AB9 DEFINED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
HEXNUM:             0AB9 DEFINED AT LINE 1724 IN MAIN.asm
HEXNUM1:            0ABC DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
HEXNUM2:            0AC4 DEFINED AT LINE 1732 IN MAIN.asm
                    > USED AT LINE 1730 IN MAIN.asm
UPCASE:             0AD6 DEFINED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
LOWCASE:            0ADB DEFINED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
IDENT1:             0AE0 DEFINED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
QUESTION:           0AED DEFINED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
IF:                 0AED DEFINED AT LINE 1767 IN MAIN.asm
IFTE:               0AF9 DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
IFTE1:              0AFA DEFINED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
KEY:                0B06 DEFINED AT LINE 1789 IN MAIN.asm
OUTPUT:             0B0F DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
STAR:               0B18 DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
MUL:                0B18 DEFINED AT LINE 1808 IN MAIN.asm
MUL2:               0B1A DEFINED AT LINE 1811 IN MAIN.asm
MUL3:               0B22 DEFINED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
NUM:                0B34 DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
NUM0:               0B3D DEFINED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
NUM1:               0B3E DEFINED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
NUM2:               0B56 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
NUM3:               0B61 DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
RPAREN:             0B64 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
SHIFTLEFT:          0B6C DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
SHIFTLEFT1:         0B74 DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
SHIFTLEFT2:         0B75 DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
SHIFTRIGHT:         0B7C DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
SHIFTRIGHT1:        0B84 DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
SHIFTRIGHT2:        0B88 DEFINED AT LINE 1901 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
DQUOTE:             0B8F DEFINED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 384 IN MAIN.asm
STRING:             0B8F DEFINED AT LINE 1911 IN MAIN.asm
STRING1:            0B98 DEFINED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
STRING2:            0B9B DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
STRING3:            0BA4 DEFINED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
PRINTCHARS1:        0BB7 DEFINED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
PRINTCHARS2:        0BBD DEFINED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
FILTER:             0BC2 DEFINED AT LINE 1962 IN MAIN.asm
FLUSHBUFFER:        0BC4 DEFINED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 2161 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
COMMANDTABLE:       0BDB DEFINED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
COMMANDTABLE1:      0BE5 DEFINED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
COMMANDTABLE2:      0BEA DEFINED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
JUMPTABLE:          0BEF DEFINED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
JUMPTABLE0:         0BF1 DEFINED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
JUMPTABLE1:         0BFD DEFINED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
JUMPTABLE2:         0C00 DEFINED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
PRTSTR0:            0C03 DEFINED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
PRTSTR:             0C07 DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2157 IN MAIN.asm
NESTING:            0C0C DEFINED AT LINE 2049 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2241 IN MAIN.asm
NESTING0:           0C16 DEFINED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
NESTING1A:          0C1D DEFINED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
NESTING1:           0C20 DEFINED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
NESTING2:           0C2F DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
NESTING3:           0C31 DEFINED AT LINE 2075 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
NESTING4:           0C3C DEFINED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
PROMPT:             0C3E DEFINED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2162 IN MAIN.asm
CRLF:               0C47 DEFINED AT LINE 2091 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
PRINTSTR:           0C4E DEFINED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 32
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 156
INIT:               0C55 DEFINED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
INIT1:              0C5D DEFINED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
WARMINIT:           0C65 DEFINED AT LINE 2117 IN MAIN.asm
COLDBOOT0:          0C78 DEFINED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
COLDINIT:           0C82 DEFINED AT LINE 2130 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0C93 DEFINED AT LINE 2139 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
COLDSTART:          0CA0 DEFINED AT LINE 2148 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
START:              0CA9 DEFINED AT LINE 2152 IN MAIN.asm
START1:             0CAF DEFINED AT LINE 2155 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2151 IN MAIN.asm
INTERPRET:          0CB5 DEFINED AT LINE 2159 IN MAIN.asm
                    > USED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
INTERPRET2:         0CC4 DEFINED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
                    > USED AT LINE 2313 IN MAIN.asm
INTERPRET3:         0CCC DEFINED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 2189 IN MAIN.asm
INTERPRET4:         0CD7 DEFINED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
INTERPRET5:         0CDC DEFINED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 2257 IN MAIN.asm
INTERPRET5A:        0CFA DEFINED AT LINE 2229 IN MAIN.asm
INTERPRET6:         0CFC DEFINED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
INTERPRET7:         0D0A DEFINED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
INTERPRET8:         0D1D DEFINED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2199 IN MAIN.asm
NEXT:               0D38 DEFINED AT LINE 2272 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2276 IN MAIN.asm
NEXT1:              0D48 DEFINED AT LINE 2284 IN MAIN.asm
                    > USED AT LINE 2277 IN MAIN.asm
EXIT:               0D4F DEFINED AT LINE 2289 IN MAIN.asm
                    > USED AT LINE 2286 IN MAIN.asm
RUN:                0D53 DEFINED AT LINE 2293 IN MAIN.asm
                    > USED AT LINE 2302 IN MAIN.asm
                    > USED AT LINE 2317 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR1:             0D57 DEFINED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 502 IN MAIN.asm
ERROR:              0D5B DEFINED AT LINE 2301 IN MAIN.asm
BACKSPACE_:         0D6E DEFINED AT LINE 2306 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
EDIT_:              0D7E DEFINED AT LINE 2316 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
REEDIT_:            0D96 DEFINED AT LINE 2321 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
PRINTSTACK_:        0D99 DEFINED AT LINE 2324 IN MAIN.asm
F1:                 0DA3 DEFINED AT LINE 32
                    > USED AT LINE 684 IN MAIN.asm
F1M_2849S12:        0DAE DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0DAF DEFINED AT LINE 32
                    > USED AT LINE 687 IN MAIN.asm
F2M_2851S15:        0DBA DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0DBB DEFINED AT LINE 32
                    > USED AT LINE 690 IN MAIN.asm
F3M_2853S18:        0DC6 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0DC7 DEFINED AT LINE 32
                    > USED AT LINE 693 IN MAIN.asm
F4M_2855S21:        0DD2 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         0E00 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_2862S31:    0E84 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2867S38:    0F05 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2868S39:    0F7C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2869S40:    0FF1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2870S41:    1066 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2871S42:    10DB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2872S43:    1150 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S44:    11C7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S45:    1240 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S46:    12B7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S47:    132E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S48:    13A7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S49:    1422 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S50:    149B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S51:    1514 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S52:    1593 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S53:    1612 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S54:    168F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S55:    1710 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S56:    1795 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S57:    1818 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S58:    1895 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S59:    191A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S60:    199B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S61:    1A18 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S62:    1A95 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S63:    1B1A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2893S64:    1B97 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2894S65:    1C14 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2895S66:    1C93 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2896S67:    1D22 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2897S68:    1D9F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2898S69:    1E24 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2899S70:    1EA1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2900S71:    1F2C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2901S72:    1FB7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2902S73:    2042 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2903S74:    20CD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2904S75:    2152 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2905S76:    21CF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2906S77:    224E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2907S78:    22CD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2908S79:    234A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2909S80:    23C7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2910S81:    2444 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2911S82:    24C1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2912S83:    253E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2913S84:    25BB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2914S85:    2638 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2915S86:    26B5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2916S87:    2734 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2917S88:    27B3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2918S89:    2832 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2919S90:    28B3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2920S91:    2934 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2921S92:    29AF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2922S93:    2A2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2923S94:    2AAB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2924S95:    2B32 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2925S96:    2BB9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2926S97:    2C44 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2927S98:    2CD9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2928S99:    2D6E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2929S100:   2DEB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2930S101:   2E6A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2931S102:   2EEF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2932S103:   2F78 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2933S104:   2FFD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2934S105:   308C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2935S106:   311D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2936S107:   31B4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2937S108:   324F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2938S109:   32DC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2939S110:   336F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2940S111:   3404 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2941S112:   349B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2942S113:   3530 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2943S114:   35D3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2944S115:   3664 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2945S116:   3703 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2946S117:   37A4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2947S118:   3847 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2948S119:   38F4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2949S120:   39A1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2950S121:   3A2E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2951S122:   3AC3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2952S123:   3B50 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2953S124:   3BE9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2954S125:   3C82 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2955S126:   3D29 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2956S127:   3DD8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2957S128:   3E87 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2958S129:   3F28 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2959S130:   3FCF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2960S131:   408C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2961S132:   4153 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2962S133:   41EC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2963S134:   4285 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2964S135:   430E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2965S136:   4397 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2966S137:   4420 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2967S138:   44A9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2968S139:   452A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2969S140:   45AB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2970S141:   462C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2971S142:   46AD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2972S143:   4738 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2973S144:   47C7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2974S145:   4854 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2975S146:   48DF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2976S147:   4978 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2977S148:   4A17 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2978S149:   4ACE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2979S150:   4B85 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2980S151:   4C56 DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            4C61 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4E00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4E00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
BUF:                4F00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
VARS:               5000 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           50D0 DEFINED AT LINE 18 IN ram.asm
RST08:              50D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              50D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              50D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              50D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              50D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              50DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               50DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             50DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             50E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            50E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            50E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            50E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2132 IN MAIN.asm
VDATAWIDTH:         50E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
VNUMBASE:           50E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
VTIBPTR:            50EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
VBUFPTR:            50EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
VNEXT:              50EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2144 IN MAIN.asm
VHEAPPTR:           50F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1348 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
VRECUR:             50F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1410 IN MAIN.asm
VPOINTER:           50F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 228 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
VREMAIN:            50F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
VSAVEDIP:           50F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2266 IN MAIN.asm
VSAVEDSP:           50FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
VSAVEDNEXT:         50FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2120 IN MAIN.asm
                    > USED AT LINE 2268 IN MAIN.asm
VSAVEDBP:           50FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2269 IN MAIN.asm
VTEMP1:             5100 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 1017 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
VTEMP2:             5102 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
VTEMP3:             5104 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
VLASTDEF:           5106 DEFINED AT LINE 59 IN ram.asm
TBPTR:              5108 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           510A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
HEAP:               511E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
