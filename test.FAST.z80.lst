0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4F               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4F               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4F               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4F               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4F               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4F               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4F               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4F               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4F               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4F               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4D               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4F               LD   (RST08),HL   
0094   22 D2 4F               LD   (RST10),HL   
0097   22 D4 4F               LD   (RST18),HL   
009A   22 D6 4F               LD   (RST20),HL   
009D   22 D8 4F               LD   (RST28),HL   
00A0   22 DA 4F               LD   (RST30),HL   
00A3   22 DE 4F               LD   (INTVEC),HL   
00A6   22 E0 4F               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4F               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4F               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0E               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   3E                     DB   lsb(bang_)   ; !
0181   F3                     DB   lsb(dquote_)   ; "
0182   EA                     DB   lsb(hash_)   ; #
0183   C0                     DB   lsb(dollar_)   ; $
0184   C9                     DB   lsb(percent_)   ; %
0185   20                     DB   lsb(amper_)   ; &
0186   D2                     DB   lsb(tick_)   ; '
0187   CC                     DB   lsb(lparen_)   ; (
0188   BD                     DB   lsb(rparen_)   ; )
0189   E7                     DB   lsb(star_)   ; *
018A   04                     DB   lsb(plus_)   ; +
018B   F0                     DB   lsb(comma_)   ; ,
018C   4E                     DB   lsb(minus_)   ; -
018D   D8                     DB   lsb(dot_)   ; .
018E   FF                     DB   lsb(slash_)   ; /	
018F   6B                     DB   lsb(num_)   ; 0
0190   6B                     DB   lsb(num_)   ; 1
0191   6B                     DB   lsb(num_)   ; 2
0192   6B                     DB   lsb(num_)   ; 3
0193   6B                     DB   lsb(num_)   ; 4
0194   6B                     DB   lsb(num_)   ; 5
0195   6B                     DB   lsb(num_)   ; 6
0196   6B                     DB   lsb(num_)   ; 7
0197   6B                     DB   lsb(num_)   ; 8
0198   6B                     DB   lsb(num_)   ; 9
0199   DB                     DB   lsb(colon_)   ; :
019A   D5                     DB   lsb(semicolon_)   ; ;
019B   86                     DB   lsb(lt_)   ; <
019C   6E                     DB   lsb(eq_)   ; =
019D   7B                     DB   lsb(gt_)   ; >
019E   E4                     DB   lsb(question_)   ; ?
019F   34                     DB   lsb(at_)   ; @
01A0   DE                     DB   lsb(upcase_)   ; A
01A1   DE                     DB   lsb(upcase_)   ; B
01A2   DE                     DB   lsb(upcase_)   ; C
01A3   DE                     DB   lsb(upcase_)   ; D
01A4   DE                     DB   lsb(upcase_)   ; E
01A5   DE                     DB   lsb(upcase_)   ; F
01A6   DE                     DB   lsb(upcase_)   ; G
01A7   DE                     DB   lsb(upcase_)   ; h
01A8   DE                     DB   lsb(upcase_)   ; I
01A9   DE                     DB   lsb(upcase_)   ; J
01AA   DE                     DB   lsb(upcase_)   ; K
01AB   DE                     DB   lsb(upcase_)   ; L
01AC   DE                     DB   lsb(upcase_)   ; M
01AD   DE                     DB   lsb(upcase_)   ; N
01AE   DE                     DB   lsb(upcase_)   ; O
01AF   DE                     DB   lsb(upcase_)   ; p
01B0   DE                     DB   lsb(upcase_)   ; Q
01B1   DE                     DB   lsb(upcase_)   ; R
01B2   DE                     DB   lsb(upcase_)   ; S
01B3   DE                     DB   lsb(upcase_)   ; T
01B4   DE                     DB   lsb(upcase_)   ; U
01B5   DE                     DB   lsb(upcase_)   ; V
01B6   DE                     DB   lsb(upcase_)   ; W
01B7   DE                     DB   lsb(upcase_)   ; X
01B8   DE                     DB   lsb(upcase_)   ; Y
01B9   DE                     DB   lsb(upcase_)   ; Z
01BA   C3                     DB   lsb(lbrack_)   ; [
01BB   F6                     DB   lsb(backslash_)   ; \
01BC   C6                     DB   lsb(rbrack_)   ; ]
01BD   ED                     DB   lsb(caret_)   ; ^
01BE   F9                     DB   lsb(underscore_)   ; _
01BF   F3                     DB   lsb(dquote_)   ; `     used for testing string   	
01C0   E1                     DB   lsb(lowcase_)   ; a
01C1   E1                     DB   lsb(lowcase_)   ; b
01C2   E1                     DB   lsb(lowcase_)   ; c
01C3   E1                     DB   lsb(lowcase_)   ; d
01C4   E1                     DB   lsb(lowcase_)   ; e
01C5   E1                     DB   lsb(lowcase_)   ; f
01C6   E1                     DB   lsb(lowcase_)   ; g
01C7   E1                     DB   lsb(lowcase_)   ; h
01C8   E1                     DB   lsb(lowcase_)   ; i
01C9   E1                     DB   lsb(lowcase_)   ; j
01CA   E1                     DB   lsb(lowcase_)   ; k
01CB   E1                     DB   lsb(lowcase_)   ; l
01CC   E1                     DB   lsb(lowcase_)   ; m
01CD   E1                     DB   lsb(lowcase_)   ; n
01CE   E1                     DB   lsb(lowcase_)   ; o
01CF   E1                     DB   lsb(lowcase_)   ; p
01D0   E1                     DB   lsb(lowcase_)   ; q
01D1   E1                     DB   lsb(lowcase_)   ; r
01D2   E1                     DB   lsb(lowcase_)   ; s
01D3   E1                     DB   lsb(lowcase_)   ; t
01D4   E1                     DB   lsb(lowcase_)   ; u
01D5   E1                     DB   lsb(lowcase_)   ; v
01D6   E1                     DB   lsb(lowcase_)   ; w
01D7   E1                     DB   lsb(lowcase_)   ; x
01D8   E1                     DB   lsb(lowcase_)   ; y
01D9   E1                     DB   lsb(lowcase_)   ; z
01DA   CC                     DB   lsb(lbrace_)   ; {
01DB   2B                     DB   lsb(pipe_)   ; |
01DC   CF                     DB   lsb(rbrace_)   ; }
01DD   FC                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4D                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 4E                  DW   BUF   ; vBUFPtr pointer into BUF
01E6   3A 0D                  DW   next   ; nNext
01E8   1E 50                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; unused
01EE   00 00                  DW   0   ; unused
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN *********************************************
0204                PLUS_:       ; add the top 2 members of the stack
0204                ADD:         
0204   03                     INC   bc   
0205   0A                     LD   a,(bc)   
0206   FE 2B                  CP   "+"   ; ++ increment variable
0208   20 05                  JR   nz,add1   
020A   E1                     POP   hl   
020B   23                     INC   hl   
020C   C3 55 07               JP   assign0   
020F                ADD1:        
020F   0B                     DEC   bc   
0210   D1                     POP   de   ; second term
0211   E1                     POP   hl   ; first term
0212   19                     ADD   hl,de   
0213                ADD3:        
0213   03                     INC   bc   
0214   0A                     LD   a,(bc)   
0215   FE 3D                  CP   "="   
0217   28 04                  JR   z,add4   
0219   0B                     DEC   bc   
021A   E5                     PUSH   hl   
021B   DD E9                  JP   (ix)   
021D                ADD4:        
021D   C3 55 07               JP   assign0   
0220                AMPER_:      
0220                AND:         
0220   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0221   E1                     POP   hl   
0222   7B                     LD   a,e   
0223   A5                     AND   l   
0224   6F                     LD   l,a   
0225   7A                     LD   a,d   
0226   A4                     AND   h   
0227                AND1:        
0227   67                     LD   h,a   
0228   E5                     PUSH   hl   
0229   DD E9                  JP   (ix)   
022B                PIPE_:       
022B                OR:          
022B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
022C   E1                     POP   hl   
022D   7B                     LD   a,e   
022E   B5                     OR   l   
022F   6F                     LD   l,a   
0230   7A                     LD   a,d   
0231   B4                     OR   h   
0232   18 F3                  JR   and1   
0234                             ; @ addr
0234                             ; -- ptr
0234                AT_:         
0234                ADDR:        
0234   ED 5B F4 4F            LD   de,(vPointer)   
0238   21 F4 4F               LD   hl,vPointer   
023B   C3 9C 04               JP   variable   
023E                BANG_:       ; logical invert, any non zero value
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3D                  CP   "="   
0242   20 04                  JR   nz,not   
0244   E1                     POP   hl   
0245   D1                     POP   de   
0246   18 55                  JR   notequals   
0248                NOT:         
0248   0B                     DEC   bc   
0249   21 00 00               LD   hl,0   ; is considered true
024C   18 2A                  JR   eq1   
024E                MINUS_:      
024E   03                     INC   bc   ; check if sign of a number
024F   0A                     LD   a,(bc)   
0250   0B                     DEC   bc   
0251   FE 30                  CP   "0"   
0253   38 04                  JR   c,sub   
0255   FE 3A                  CP   "9"+1   
0257   38 12                  JR   c,num_   
0259                SUB:         ; Subtract the value 2nd on stack from top of stack
0259   03                     INC   bc   
025A   FE 2D                  CP   "-"   
025C   20 05                  JR   nz,sub1   
025E   E1                     POP   hl   
025F   2B                     DEC   hl   
0260   C3 55 07               JP   assign0   
0263                SUB1:        
0263   0B                     DEC   bc   
0264   D1                     POP   de   
0265   E1                     POP   hl   
0266   B7                     OR   a   
0267   ED 52                  SBC   hl,de   
0269   18 A8                  JR   add3   
026B                NUM_:        
026B   C3 F4 09               JP   num   
026E                EQ_:         
026E   CD F1 0B               CALL   jumpTable   
0271   3D                     DB   "="   
0272   77                     DB   lsb(eq0_)   
0273   00                     DB   NUL   
0274   C3 53 07               JP   assign   
0277                EQ0_:        
0277   E1                     POP   hl   
0278                EQ1:         
0278   D1                     POP   de   
0279   18 1B                  JR   equals   
027B                GT_:         
027B   03                     INC   bc   
027C   0A                     LD   a,(bc)   
027D   FE 3E                  CP   ">"   
027F   CA 3C 0A               JP   z,shiftRight   
0282   D1                     POP   de   
0283   E1                     POP   hl   
0284   18 09                  JR   lt1   
0286                LT_:         
0286   03                     INC   bc   
0287   0A                     LD   a,(bc)   
0288   FE 3C                  CP   "<"   
028A   CA 2C 0A               JP   z,shiftLeft   
028D   E1                     POP   hl   
028E   D1                     POP   de   
028F                LT1:         
028F   FE 3D                  CP   "="   
0291   28 11                  JR   z,lessthaneq   
0293   0B                     DEC   bc   
0294   18 13                  JR   lessthan   
0296                             ; hl = value1, de = value2
0296                             ; hl = result
0296                EQUALS:      
0296   B7                     OR   a   ; reset the carry flag
0297   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0299   28 16                  JR   z,true1   
029B   18 1A                  JR   false1   
029D                NOTEQUALS:      
029D   B7                     OR   a   ; reset the carry flag
029E   ED 52                  SBC   hl,de   
02A0   20 0F                  JR   nz,true1   
02A2   18 13                  JR   false1   
02A4                             ; hl = value1 de = value2
02A4                             ; hl = result
02A4                LESSTHANEQ:      
02A4   B7                     OR   a   
02A5   ED 52                  SBC   hl,de   
02A7   18 05                  JR   lessthan1   
02A9                             ; hl = value1 de = value2
02A9                             ; hl = result
02A9                LESSTHAN:      
02A9   B7                     OR   a   
02AA   ED 52                  SBC   hl,de   
02AC   28 09                  JR   z,false1   
02AE                LESSTHAN1:      
02AE   FA B7 02               JP   m,false1   
02B1                TRUE1:       
02B1   21 FF FF               LD   hl,TRUE   
02B4   E5                     PUSH   hl   
02B5   DD E9                  JP   (ix)   
02B7                NULL1:       
02B7                FALSE1:      
02B7   21 00 00               LD   hl,FALSE   
02BA   E5                     PUSH   hl   
02BB                NOP_:        
02BB   DD E9                  JP   (ix)   
02BD                RPAREN_:      
02BD   C3 24 0A               JP   rparen   
02C0                DOLLAR_:      
02C0   C3 79 09               JP   dollar   
02C3                LBRACK_:      
02C3   C3 CF 06               JP   lbrack   
02C6                RBRACK_:      
02C6   C3 EB 06               JP   rbrack   
02C9                PERCENT_:      
02C9   C3 9A 06               JP   percent   
02CC                LPAREN_:      
02CC                LBRACE_:      
02CC   C3 64 07               JP   lbrace   
02CF                RBRACE_:      
02CF   C3 69 07               JP   rbrace   
02D2                TICK_:       
02D2   C3 F0 07               JP   tick   
02D5                SEMICOLON_:      
02D5   C3 86 06               JP   semicolon   
02D8                DOT_:        
02D8   C3 A2 04               JP   dot   
02DB                COLON_:      
02DB   C3 88 06               JP   colon   
02DE                UPCASE_:      
02DE   C3 96 09               JP   upcase   
02E1                LOWCASE_:      
02E1   C3 9B 09               JP   lowcase   
02E4                QUESTION_:      
02E4   C3 AD 09               JP   question   
02E7                STAR_:       
02E7   C3 D8 09               JP   star   
02EA                HASH_:       
02EA   C3 3B 07               JP   hash   
02ED                CARET_:      
02ED   C3 DA 08               JP   caret   
02F0                COMMA_:      
02F0   C3 86 06               JP   comma   
02F3                DQUOTE_:      
02F3   C3 4F 0A               JP   dquote   
02F6                BACKSLASH_:      
02F6   C3 86 06               JP   backslash   
02F9                UNDERSCORE_:      
02F9   C3 86 06               JP   underscore   
02FC                TILDE_:      
02FC   C3 86 06               JP   tilde   
02FF                SLASH_:      
02FF   18 00                  JR   slash   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3 BEGIN *********************************************
0301                SLASH:       
0301                COMMAND:      
0301   03                     INC   bc   
0302   0A                     LD   a,(bc)   
0303   FE 2F                  CP   "/"   ; // comment
0305   CA FA 03               JP   z,comment   
0308   0B                     DEC   bc   
0309   CD DD 0B               CALL   commandTable   
030C   27                     DB   lsb(command_a_)   
030D   34                     DB   lsb(command_b_)   
030E   66                     DB   lsb(command_nop_)   
030F   68                     DB   lsb(decimal_)   
0310   66                     DB   lsb(command_nop_)   
0311   3F                     DB   lsb(command_f_)   
0312   66                     DB   lsb(command_nop_)   
0313   77                     DB   lsb(hexadecimal_)   
0314   42                     DB   lsb(command_i_)   
0315   66                     DB   lsb(command_nop_)   
0316   7D                     DB   lsb(key_)   
0317   66                     DB   lsb(command_nop_)   
0318   4B                     DB   lsb(command_m_)   
0319   66                     DB   lsb(command_nop_)   
031A   80                     DB   lsb(output_)   
031B   4E                     DB   lsb(command_p_)   
031C   57                     DB   lsb(command_q_)   
031D   60                     DB   lsb(command_r_)   
031E   66                     DB   lsb(command_nop_)   
031F   83                     DB   lsb(true_)   
0320   66                     DB   lsb(command_nop_)   
0321   63                     DB   lsb(command_v_)   
0322   86                     DB   lsb(words_)   
0323   89                     DB   lsb(xor_)   
0324   66                     DB   lsb(command_nop_)   
0325   66                     DB   lsb(command_nop_)   
0326   70                     DB   lsb(div_)   
0327                COMMAND_A_:      
0327   CD F1 0B               CALL   jumpTable   
032A   62                     DB   "b"   ; /ab absolute
032B   94                     DB   lsb(absolute_)   
032C   64                     DB   "d"   ; /ad address of
032D   A1                     DB   lsb(addrOf_)   
032E   73                     DB   "s"   ; /as array size
032F   C2                     DB   lsb(arraySize_)   
0330   00                     DB   NUL   
0331   C3 74 03               JP   error1_   
0334                COMMAND_B_:      
0334   CD F1 0B               CALL   jumpTable   
0337   72                     DB   "r"   ; /br break
0338   CA                     DB   lsb(break_)   
0339   79                     DB   "y"   ; /by cold boot
033A   CD                     DB   lsb(coldStart_)   
033B   00                     DB   NUL   
033C   C3 D0 03               JP   bytes_   ; /b bytes
033F                COMMAND_F_:      
033F   C3 03 04               JP   command_f   
0342                COMMAND_I_:      
0342   CD F1 0B               CALL   jumpTable   
0345   6E                     DB   "n"   ; /in input
0346   D8                     DB   lsb(input_)   
0347   00                     DB   NUL   
0348   C3 74 03               JP   error1_   
034B                COMMAND_M_:      
034B   C3 37 04               JP   command_m   
034E                COMMAND_P_:      
034E   CD F1 0B               CALL   jumpTable   
0351   63                     DB   "c"   ; /pc print chars
0352   E3                     DB   lsb(printChars_)   
0353   00                     DB   NUL   
0354   C3 74 03               JP   error1_   
0357                COMMAND_Q_:      
0357   CD F1 0B               CALL   jumpTable   
035A   74                     DB   "t"   ; /qt quit
035B   EA                     DB   lsb(quit_)   
035C   00                     DB   NUL   
035D   C3 74 03               JP   error1_   
0360                COMMAND_R_:      
0360   C3 43 04               JP   command_r   
0363                COMMAND_V_:      
0363   C3 5F 04               JP   command_v   
0366                COMMAND_NOP_:      
0366   DD E9                  JP   (ix)   
0368                DECIMAL_:      
0368   21 0A 00               LD   hl,10   
036B                DECIMAL1:      
036B   22 E8 4F               LD   (vNumBase),hl   
036E   DD E9                  JP   (ix)   
0370                DIV_:        
0370   00                     DB   NUL   
0371   C3 05 08               JP   div   
0374                ERROR1_:      
0374   C3 59 0D               JP   error1   
0377                HEXADECIMAL_:      
0377   21 10 00               LD   hl,16   
037A   C3 6B 03               JP   decimal1   
037D                KEY_:        
037D   C3 7D 03               JP   key_   
0380                OUTPUT_:      
0380   C3 CF 09               JP   output   
0383                TRUE_:       
0383   C3 B1 02               JP   true1   
0386                WORDS_:      
0386   C3 F4 03               JP   words   
0389                XOR_:        
0389   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
038A                XOR1:        
038A   E1                     POP   hl   
038B   7B                     LD   a,e   
038C   AD                     XOR   l   
038D   6F                     LD   l,a   
038E   7A                     LD   a,d   
038F   AC                     XOR   h   
0390   67                     LD   h,a   
0391   E5                     PUSH   hl   
0392   DD E9                  JP   (ix)   
0394                             ; /ab absolute
0394                             ; num -- num
0394                ABSOLUTE_:      
0394   E1                     POP   hl   
0395   CB 7C                  BIT   7,h   
0397   C8                     RET   z   
0398   AF                     XOR   a   
0399   95                     SUB   l   
039A   6F                     LD   l,a   
039B   9F                     SBC   a,a   
039C   94                     SUB   h   
039D   67                     LD   h,a   
039E   E5                     PUSH   hl   
039F   DD E9                  JP   (ix)   
03A1                             ; /ad addrOf
03A1                             ; char -- addr
03A1                ADDROF_:      
03A1   E1                     POP   hl   ; a = char
03A2   7D                     LD   a,l   
03A3   FE 7B                  CP   "z"+1   ; if a > z then exit
03A5   30 19                  JR   nc,addrOf2   
03A7   D6 41                  SUB   "A"   ; a - 65
03A9   38 15                  JR   c,addrOf2   ; if < A then exit
03AB   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
03AD   38 06                  JR   c,addrOf1   
03AF   D6 06                  SUB   "a"-("Z"+1)   
03B1   FE 1A                  CP   "Z"-"A"+1   
03B3   38 0B                  JR   c,addrOf2   ; if < a then exit
03B5                ADDROF1:      
03B5   87                     ADD   a,a   ; double a
03B6   21 00 4F               LD   hl,VARS   ; hl = VARS + a
03B9   85                     ADD   a,l   
03BA   6F                     LD   l,a   
03BB   3E 00                  LD   a,0   
03BD   8C                     ADC   a,h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0                ADDROF2:      
03C0   DD E9                  JP   (ix)   
03C2                             ; /as size of an array, num elements, ignores vDataWidth :-/
03C2                             ; array* -- num
03C2                ARRAYSIZE_:      
03C2   E1                     POP   hl   
03C3   2B                     DEC   hl   ; msb size
03C4   56                     LD   d,(hl)   
03C5   2B                     DEC   hl   ; lsb size
03C6   5E                     LD   e,(hl)   
03C7   D5                     PUSH   de   
03C8   DD E9                  JP   (ix)   
03CA                             ; /br
03CA                BREAK_:      
03CA   C3 D6 07               JP   break   
03CD                             ; /by
03CD                COLDSTART_:      
03CD   C3 A2 0C               JP   coldStart   
03D0                             ; /b
03D0                BYTES_:      
03D0   21 01 00               LD   hl,1   
03D3                BYTES1:      
03D3   22 E6 4F               LD   (vDataWidth),hl   
03D6   DD E9                  JP   (ix)   
03D8                             ; Z80 port input
03D8                             ; port -- value
03D8                INPUT_:      
03D8   E1                     POP   hl   
03D9   59                     LD   e,c   ; save IP
03DA   4D                     LD   c,l   
03DB   ED 68                  IN   l,(c)   
03DD   26 00                  LD   h,0   
03DF   4B                     LD   c,e   ; restore IP
03E0   E5                     PUSH   hl   
03E1   DD E9                  JP   (ix)   
03E3                             ; /pc printChars
03E3                             ; char* len --
03E3                PRINTCHARS_:      
03E3   E1                     POP   hl   ; hl = count
03E4   D1                     POP   de   ; de = char*
03E5   CD 7D 0A               CALL   printChars2   
03E8   DD E9                  JP   (ix)   
03EA                             ; /qt
03EA                QUIT_:       
03EA   E1                     POP   hl   ; hl = condition, exit if true
03EB   7D                     LD   a,l   
03EC   B4                     OR   h   
03ED   20 02                  JR   nz,quit1   
03EF   DD E9                  JP   (ix)   
03F1                QUIT1:       
03F1   C3 69 07               JP   blockEnd   
03F4                             ; /w
03F4                WORDS:       
03F4   21 02 00               LD   hl,2   
03F7   C3 D3 03               JP   bytes1   
03FA                             ; //
03FA                COMMENT:      
03FA   03                     INC   bc   ; point to next char
03FB   0A                     LD   a,(bc)   
03FC   FE 20                  CP   " "   ; terminate on any char less than SP
03FE   30 FA                  JR   nc,comment   
0400   0B                     DEC   bc   
0401   DD E9                  JP   (ix)   
0403                             ;********************** PAGE 3 END *********************************************
0403                             ;********************** PAGE 4 BEGIN *********************************************
0403                COMMAND_F:      
0403   CD F1 0B               CALL   jumpTable   
0406   65                     DB   "e"   ; /fe forEach
0407   1A                     DB   lsb(forEach_)   
0408   6C                     DB   "l"   ; /fl flush output buffer
0409   1D                     DB   lsb(flush_)   
040A   73                     DB   "s"   ; /fs funcSrc
040B   22                     DB   lsb(funcSrc_)   
040C   31                     DB   "1"   
040D   25                     DB   lsb(f1_)   
040E   32                     DB   "2"   
040F   28                     DB   lsb(f2_)   
0410   33                     DB   "3"   
0411   2B                     DB   lsb(f3_)   
0412   34                     DB   "4"   
0413   2E                     DB   lsb(f4_)   
0414   7A                     DB   "z"   
0415   31                     DB   lsb(fz_)   
0416   00                     DB   NUL   
0417   C3 34 04               JP   false_   
041A                FOREACH_:      
041A   C3 F7 04               JP   forEach   
041D                             ; /fl flush
041D                             ; --
041D                FLUSH_:      
041D   CD C6 0B               CALL   flushBuffer   
0420   DD E9                  JP   (ix)   
0422                FUNCSRC_:      
0422   C3 43 05               JP   funcSrc   
0425                F1_:         
0425   C3 A5 0D               JP   f1   
0428                F2_:         
0428   C3 B1 0D               JP   f2   
042B                F3_:         
042B   C3 BD 0D               JP   f3   
042E                F4_:         
042E   C3 C9 0D               JP   f4   
0431                FZ_:         
0431   C3 CD 08               JP   fz   
0434                FALSE_:      
0434   C3 B7 02               JP   false1   
0437                COMMAND_M:      
0437   CD F1 0B               CALL   jumpTable   
043A   70                     DB   "p"   ; /mp map
043B   40                     DB   lsb(map_)   
043C   00                     DB   NUL   
043D   C3 74 03               JP   error1_   
0440                MAP_:        
0440   C3 C4 05               JP   map   
0443                COMMAND_R:      
0443   CD F1 0B               CALL   jumpTable   
0446   63                     DB   "c"   ; /rc tail call optimisation
0447   50                     DB   lsb(recur_)   
0448   65                     DB   "e"   ; /re remainder
0449   56                     DB   lsb(remain_)   
044A   67                     DB   "g"   ; /rg range src
044B   5C                     DB   lsb(rangeSrc_)   
044C   00                     DB   NUL   
044D   C3 74 03               JP   error1_   
0450                RECUR_:      
0450   E1                     POP   hl   
0451   22 F2 4F               LD   (vRecur),hl   
0454   DD E9                  JP   (ix)   
0456                REMAIN_:      
0456   2A F6 4F               LD   hl,(vRemain)   
0459   E5                     PUSH   hl   
045A   DD E9                  JP   (ix)   
045C                RANGESRC_:      
045C   C3 06 06               JP   rangeSrc   
045F                COMMAND_V:      
045F   CD F1 0B               CALL   jumpTable   
0462   62                     DB   "b"   
0463   81                     DB   lsb(varBufPtr_)   
0464   68                     DB   "h"   
0465   8A                     DB   lsb(varHeapPtr_)   
0466   74                     DB   "t"   
0467   93                     DB   lsb(varTIBPtr_)   
0468   42                     DB   "B"   
0469   72                     DB   lsb(constBufStart_)   
046A   48                     DB   "H"   
046B   77                     DB   lsb(constHeapStart_)   
046C   54                     DB   "T"   
046D   7C                     DB   lsb(constTIBStart_)   
046E   00                     DB   NUL   
046F   C3 74 03               JP   error1_   
0472                CONSTBUFSTART_:      
0472   11 00 4E               LD   de,BUF   
0475   18 28                  JR   constant   
0477                CONSTHEAPSTART_:      
0477   11 1E 50               LD   de,HEAP   
047A   18 23                  JR   constant   
047C                CONSTTIBSTART_:      
047C   11 00 4D               LD   de,TIB   
047F   18 1E                  JR   constant   
0481                VARBUFPTR_:      
0481   ED 5B EC 4F            LD   de,(vBufPtr)   
0485   21 EC 4F               LD   hl,vBufPtr   
0488   18 12                  JR   variable   
048A                VARHEAPPTR_:      
048A   ED 5B F0 4F            LD   de,(vHeapPtr)   
048E   21 F0 4F               LD   hl,vHeapPtr   
0491   18 09                  JR   variable   
0493                VARTIBPTR_:      
0493   ED 5B EA 4F            LD   de,(vTIBPtr)   
0497   21 EA 4F               LD   hl,vTIBPtr   
049A   18 00                  JR   variable   
049C                VARIABLE:      
049C   22 F4 4F               LD   (vPointer),hl   
049F                CONSTANT:      
049F   D5                     PUSH   de   
04A0   DD E9                  JP   (ix)   
04A2                DOT:         
04A2   CD F1 0B               CALL   jumpTable   
04A5   61                     DB   "a"   ; .a print array
04A6   7C                     DB   lsb(dotArray)   
04A7   63                     DB   "c"   ; .c print char
04A8   D6                     DB   lsb(dotChar_)   
04A9   73                     DB   "s"   ; .s print string
04AA   BC                     DB   lsb(dotString_)   
04AB   78                     DB   "x"   ; .x print x chars
04AC   DB                     DB   lsb(dotXChars_)   
04AD   00                     DB   NUL   ; .  print number
04AE   C3 B1 04               JP   dotNumber_   
04B1                             ; /bd buffer decimal
04B1                             ; value --
04B1                DOTNUMBER_:      
04B1   3A E8 4F               LD   a,(vNumBase)   
04B4   FE 10                  CP   16   
04B6   CA 7C 08               JP   z,bufferHex   ; else falls through
04B9   C3 16 08               JP   bufferDec   
04BC                             ; /bs buffered string
04BC                             ; string* --
04BC                DOTSTRING_:      
04BC   E1                     POP   hl   ; hl = string*
04BD   ED 5B EC 4F            LD   de,(vBufPtr)   ; de = buffer*
04C1   18 06                  JR   dotString1   
04C3                DOTSTRING0:      
04C3   12                     LD   (de),a   ; a -> buffer*
04C4   1C                     INC   e   ; buffer*++, wraparound
04C5   CC C6 0B               CALL   z,flushBuffer   
04C8   23                     INC   hl   
04C9                DOTSTRING1:      
04C9   7E                     LD   a,(hl)   ; a <- string*
04CA   B7                     OR   a   ; if NUL exit loop
04CB   20 F6                  JR   nz,dotString0   
04CD   2A EC 4F               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
04D0   ED 53 EC 4F            LD   (vBufPtr),de   ; save buffer*' in pointer
04D4   DD E9                  JP   (ix)   
04D6                             ; /bc buffer char
04D6                             ; char --
04D6                DOTCHAR_:      
04D6   21 01 00               LD   hl,1   
04D9   18 01                  JR   dotXChars0   
04DB                             ; /bx buffered x chars
04DB                             ; char length --
04DB                DOTXCHARS_:      
04DB   E1                     POP   hl   ; hl = length
04DC                DOTXCHARS0:      
04DC   D1                     POP   de   ; a' = char
04DD   7B                     LD   a,e   
04DE   08                     EX   af,af'   
04DF   ED 5B EC 4F            LD   de,(vBufPtr)   ; de = buffer*
04E3   18 08                  JR   dotXChars2   
04E5                DOTXCHARS1:      
04E5   08                     EX   af,af'   
04E6   12                     LD   (de),a   
04E7   08                     EX   af,af'   
04E8   1C                     INC   e   ; buffer*++, wraparound
04E9   CC C6 0B               CALL   z,flushBuffer   
04EC   2B                     DEC   hl   
04ED                DOTXCHARS2:      
04ED   7D                     LD   a,l   
04EE   B4                     OR   h   
04EF   20 F4                  JR   nz,dotXChars1   
04F1   ED 53 EC 4F            LD   (vBufPtr),de   ; save buffer*'
04F5   DD E9                  JP   (ix)   
04F7                             ;********************** PAGE 4 END *********************************************
04F7                             ;*******************************************************************
04F7                             ; Monty implementations
04F7                             ;*******************************************************************
04F7                             ; /fe forEach
04F7                             ; src proc --
04F7                          ;*Macro unroll: FUNC forEach, 1, "spT"
04F7                FOREACH:      
04F7   CD DA 08               CALL   go   
04FA   00 00                  DW   NUL   
04FC   05 05                  DW   forEachM_1334S864   
04FE   00 05                  DW   $+2   
0500   01                     DB   1   
0501   03 73 70 54            .PSTR   "spT"   
0505                FOREACHM_1334S864:      
0505   7B                     DB   "{"   
0506   5B 30 5D 25 54 3D      DB   "[0]%T="   
050C   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data ; $56AA
0510   32 25 74 21 3D 7B      DB   "2%t!={"   ; if type == 2 skip
0516   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
051B   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
052D   3F 3F                  DB   "??"   ; ifte:
052F   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0538   7D 3F                  DB   "}?"   
053A   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0541   7D                     DB   "}"   
0542   00                     DB   0   
0543                             ; ; /fs funcSrc
0543                             ; ; func -- src
0543                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0543                FUNCSRC:      ; :f func or block
0543   CD DA 08               CALL   go   
0546   00 00                  DW   NUL   
0548   4F 05                  DW   funcSrcM_1349S880   
054A   4C 05                  DW   $+2   
054C   00                     DB   0   
054D   01 66                  .PSTR   "f"   
054F                FUNCSRCM_1349S880:      
054F   7B                     DB   "{"   
0550   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0554   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
055C   3A 64 74 7B            DB   ":dt{"   
0560   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0572   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0579   7D                     DB   "}"   
057A   7D                     DB   "}"   
057B   00                     DB   0   
057C                          ;*Macro unroll: FUNC dotArray, 2, "abc"
057C                DOTARRAY:      
057C   CD DA 08               CALL   go   
057F   00 00                  DW   NUL   
0581   8A 05                  DW   dotArrayM_1359S891   
0583   85 05                  DW   $+2   
0585   02                     DB   2   
0586   03 61 62 63            .PSTR   "abc"   
058A                DOTARRAYM_1359S891:      
058A   7B                     DB   "{"   
058B   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
05C2   7D                     DB   "}"   
05C3   00                     DB   0   
05C4                             ; /mp map
05C4                             ; src func -- src1
05C4                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map
05C4                MAP:         ; map
05C4   CD DA 08               CALL   go   
05C7   00 00                  DW   NUL   
05C9   D1 05                  DW   mapM_1366S899   
05CB   CD 05                  DW   $+2   
05CD   00                     DB   0   
05CE   02 73 66               .PSTR   "sf"   
05D1                MAPM_1366S899:      
05D1   7B                     DB   "{"   
05D2   3A 6B 74 7B            DB   ":kt{"   
05D6   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
05DE   3A 64 74 7B            DB   ":dt{"   ; call source with tb
05E2   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
05E7   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
05F3   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
05FC   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0603   7D                     DB   "}"   
0604   7D                     DB   "}"   
0605   00                     DB   0   
0606                             ; /rg rangeSrc
0606                             ; begin end step -- src
0606                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
0606                RANGESRC:      ; range source (begin end step)
0606   CD DA 08               CALL   go   
0609   00 00                  DW   NUL   
060B   15 06                  DW   rangeSrcM_1380S914   
060D   0F 06                  DW   $+2   
060F   01                     DB   1   
0610   04 62 65 73 4C         .PSTR   "besL"   
0615                RANGESRCM_1380S914:      
0615   7B                     DB   "{"   
0616   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0621   3A 6B 74 7B            DB   ":kt{"   
0625   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
062D   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0633   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
063A   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0642   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0651   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
0659   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0660   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0674   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
067C   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0683   7D                     DB   "}"   
0684   7D                     DB   "}"   
0685   00                     DB   0   
0686                             ;*******************************************************************
0686                             ; unused opcodes (reserved)
0686                             ;*******************************************************************
0686                BACKSLASH:      
0686                UNDERSCORE:      
0686                TILDE:       
0686                COMMA:       
0686                SEMICOLON:      
0686   DD E9                  JP   (ix)   
0688                             ;*******************************************************************
0688                             ; implementations
0688                             ;*******************************************************************
0688                             ; _ func
0688                             ; -- func*
0688                COLON:       
0688                LAMBDA:      
0688   DD E5                  PUSH   ix   
068A   CD 84 0A               CALL   parseArgs   
068D   03                     INC   bc   
068E   CD BA 0A               CALL   parseBlock   
0691   CD 24 0B               CALL   createFunc   
0694   E1                     POP   hl   
0695   DD E1                  POP   ix   
0697   E5                     PUSH   hl   
0698   DD E9                  JP   (ix)   
069A                             ; %a .. %z
069A                             ; -- value
069A                             ; returns value of arg
069A                PERCENT:      
069A                ARG:         
069A   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
069D   FD 56 05               LD   d,(iy+5)   
06A0   EB                     EX   de,hl   
06A1   7D                     LD   a,l   ; arg_list* == null, skip
06A2   B4                     OR   h   
06A3   28 1A                  JR   z,arg0a   
06A5   23                     INC   hl   ; a = num_args, hl = arg_list*
06A6   7E                     LD   a,(hl)   
06A7   23                     INC   hl   
06A8   B7                     OR   a   
06A9   28 14                  JR   z,arg0a   ; num_args == 0, skip
06AB   5F                     LD   e,a   ; e = a = num_args
06AC   03                     INC   bc   ; a = next char = dollar_name
06AD   0A                     LD   a,(bc)   
06AE   C5                     PUSH   bc   ; save IP
06AF   43                     LD   b,e   ; b = e = num_args
06B0   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
06B3   FD 56 03               LD   d,(iy+3)   
06B6                ARG0:        
06B6   1B                     DEC   de   ; a = dollar_name, de = next arg*
06B7   1B                     DEC   de   
06B8   BE                     CP   (hl)   
06B9   28 09                  JR   z,arg1   
06BB   23                     INC   hl   ; hl = next arg_list*
06BC   10 F8                  DJNZ   arg0   
06BE   C1                     POP   bc   ; no match, restore IP
06BF                ARG0A:       
06BF   11 00 00               LD   de,0   ; return 0
06C2   18 08                  JR   arg1a   
06C4                ARG1:        
06C4   C1                     POP   bc   ; restore IP
06C5   EB                     EX   de,hl   ; hl = arg*
06C6   22 F4 4F               LD   (vPointer),hl   ; store arg* in setter
06C9   5E                     LD   e,(hl)   
06CA   23                     INC   hl   
06CB   56                     LD   d,(hl)   ; de = arg
06CC                ARG1A:       
06CC   D5                     PUSH   de   ; push arg
06CD   DD E9                  JP   (ix)   
06CF                LBRACK:      
06CF                ARRAYSTART:      
06CF   11 00 00               LD   de,0   ; create stack frame
06D2   D5                     PUSH   de   ; push null for IP
06D3   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
06D6   FD 56 05               LD   d,(iy+5)   ; 
06D9   D5                     PUSH   de   ; 
06DA   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
06DD   FD 56 03               LD   d,(iy+3)   ; 
06E0   D5                     PUSH   de   ; 
06E1   FD E5                  PUSH   iy   ; push BP
06E3   FD 21 00 00            LD   iy,0   ; BP = SP
06E7   FD 39                  ADD   iy,sp   
06E9   DD E9                  JP   (ix)   
06EB                RBRACK:      
06EB                ARRAYEND:      
06EB   FD 54                  LD   d,iyh   ; de = BP
06ED   FD 5D                  LD   e,iyl   
06EF   ED 43 00 50            LD   (vTemp1),bc   ; save IP
06F3   62 6B                  LD   hl,de   ; hl = de = BP
06F5   B7                     OR   a   
06F6   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
06F8   CB 3C                  SRL   h   ; 
06FA   CB 1D                  RR   l   
06FC   44 4D                  LD   bc,hl   ; bc = count
06FE   2A F0 4F               LD   hl,(vHeapPtr)   ; hl = array[-4]
0701   71                     LD   (hl),c   ; write num items in length word
0702   23                     INC   hl   
0703   70                     LD   (hl),b   
0704   23                     INC   hl   ; hl = array[0], bc = count
0705                             ; de = BP, hl = array[0], bc = count
0705   18 15                  JR   arrayEnd3   
0707                ARRAYEND1:      
0707   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
070A   77                     LD   (hl),a   ; write lsb of array item
070B   23                     INC   hl   ; move to msb of array item
070C   3A E6 4F               LD   a,(vDataWidth)   ; vDataWidth=1?
070F   3D                     DEC   a   
0710   28 05                  JR   z,arrayEnd2   
0712   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0715   77                     LD   (hl),a   ; write msb of array item
0716   23                     INC   hl   ; move to next word in array
0717                ARRAYEND2:      
0717   FD 2B                  DEC   iy   ; move to next word on stack
0719   FD 2B                  DEC   iy   
071B   0B                     DEC   bc   ; dec items count
071C                ARRAYEND3:      
071C   79                     LD   a,c   ; if not zero loop
071D   B0                     OR   b   
071E   20 E7                  JR   nz,arrayEnd1   
0720   EB                     EX   de,hl   ; de = end of array, hl = BP
0721   F9                     LD   sp,hl   ; sp = BP
0722   E1                     POP   hl   ; de = end of array, hl = old BP
0723   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0724   FD 62                  LD   iyh,d   
0726   FD 6B                  LD   iyl,e   
0728   D1                     POP   de   ; pop arg_list (discard)
0729   D1                     POP   de   ; pop first_arg* (discard)
072A   D1                     POP   de   ; pop IP (discard)
072B   ED 5B F0 4F            LD   de,(vHeapPtr)   ; de = array[-2]
072F   13                     INC   de   
0730   13                     INC   de   
0731   D5                     PUSH   de   ; return array[0]
0732   22 F0 4F               LD   (vHeapPtr),hl   ; move heap* to end of array
0735   ED 4B 00 50            LD   bc,(vTemp1)   ; restore IP
0739   DD E9                  JP   (ix)   
073B                             ; index of an array, based on vDataWidth
073B                             ; array* num -- value    ; also sets vPointer to address
073B                HASH:        
073B                ARRAYINDEX:      
073B   E1                     POP   hl   ; hl = index
073C   D1                     POP   de   ; de = array
073D   3A E6 4F               LD   a,(vDataWidth)   ; a = data width
0740   3D                     DEC   a   
0741   28 01                  JR   z,arrayIndex1   
0743                ARRAYINDEX0:      
0743   29                     ADD   hl,hl   ; if data width = 2 then double
0744                ARRAYINDEX1:      
0744   19                     ADD   hl,de   ; add addr
0745   22 F4 4F               LD   (vPointer),hl   ; store address in setter
0748   16 00                  LD   d,0   
074A   5E                     LD   e,(hl)   
074B   B7                     OR   a   ; check data width again
074C   28 02                  JR   z,arrayIndex2   
074E   23                     INC   hl   
074F   56                     LD   d,(hl)   
0750                ARRAYINDEX2:      
0750   D5                     PUSH   de   
0751   DD E9                  JP   (ix)   
0753                             ; value _oldValue --            ; uses address in vPointer
0753                ASSIGN:      
0753   E1                     POP   hl   ; discard last accessed value
0754   E1                     POP   hl   ; hl = new value
0755                ASSIGN0:      
0755   EB                     EX   de,hl   ; de = new value
0756                ASSIGNX:      
0756   2A F4 4F               LD   hl,(vPointer)   
0759   73                     LD   (hl),e   
075A   3A E6 4F               LD   a,(vDataWidth)   
075D   3D                     DEC   a   ; is it byte?
075E   28 02                  JR   z,assign1   
0760   23                     INC   hl   
0761   72                     LD   (hl),d   
0762                ASSIGN1:      
0762   DD E9                  JP   (ix)   
0764                             ; { block start
0764                             ; -- block*
0764                LBRACE:      
0764   CD BA 0A               CALL   parseBlock   
0767   DD E9                  JP   (ix)   
0769                RBRACE:      
0769                BLOCKEND:      
0769   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
076C   FD 56 01               LD   d,(iy+1)   
076F   ED 53 00 50            LD   (vTemp1),de   
0773   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0776   FD 56 07               LD   d,(iy+7)   
0779   ED 53 02 50            LD   (vTemp2),de   
077D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0780   FD 56 03               LD   d,(iy+3)   
0783   EB                     EX   de,hl   
0784   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0787   FD 56 01               LD   d,(iy+1)   
078A   13                     INC   de   ; for carry flag <=
078B   B7                     OR   a   
078C   ED 52                  SBC   hl,de   
078E   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0790   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0792   FD 5D                  LD   e,iyl   
0794   21 08 00               LD   hl,8   
0797   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0798   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0799   18 0C                  JR   blockEnd2   
079B                BLOCKEND1:      ; same scope
079B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
079E   FD 56 03               LD   d,(iy+3)   
07A1   EB                     EX   de,hl   
07A2   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
07A4   FD 5D                  LD   e,iyl   
07A6   EB                     EX   de,hl   
07A7                BLOCKEND2:      
07A7   44 4D                  LD   bc,hl   ; bc = hl = BP
07A9   B7                     OR   a   ; hl = BP - SP = count
07AA   ED 72                  SBC   hl,sp   
07AC   7D                     LD   a,l   
07AD   B4                     OR   h   
07AE   28 09                  JR   z,blockEnd3   
07B0   C5                     PUSH   bc   ; bc = count, hl = BP
07B1   44 4D                  LD   bc,hl   
07B3   E1                     POP   hl   
07B4   2B                     DEC   hl   ; hl = BP-1
07B5   1B                     DEC   de   ; de = args*-1
07B6   ED B8                  LDDR      
07B8   13                     INC   de   
07B9                BLOCKEND3:      
07B9   EB                     EX   de,hl   ; sp = de = new tos*
07BA   F9                     LD   sp,hl   
07BB   ED 4B 02 50            LD   bc,(vTemp2)   
07BF   FD 2A 00 50            LD   iy,(vTemp1)   
07C3   ED 5B F2 4F            LD   de,(vRecur)   ; de = recur vector
07C7   7B                     LD   a,e   ; check for NUL
07C8   B2                     OR   d   
07C9   20 02                  JR   nz,blockEnd4   
07CB   DD E9                  JP   (ix)   
07CD                BLOCKEND4:      
07CD   21 00 00               LD   hl,0   ; clear recur vector
07D0   22 F2 4F               LD   (vRecur),hl   
07D3   C3 DB 08               JP   go1   ; execute de
07D6                             ; /br break from loop
07D6                             ; --
07D6                BREAK:       
07D6   E1                     POP   hl   ; hl = condition, break if false
07D7   7D                     LD   a,l   
07D8   B4                     OR   h   
07D9   28 02                  JR   z,break1   
07DB   DD E9                  JP   (ix)   
07DD                BREAK1:      
07DD   FD 5D                  LD   e,iyl   ; get block* just under stack frame
07DF   FD 54                  LD   d,iyh   
07E1   21 08 00               LD   hl,8   
07E4   19                     ADD   hl,de   
07E5   23                     INC   hl   
07E6   23                     INC   hl   
07E7   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
07EA   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
07ED   C3 69 07               JP   blockEnd   
07F0                TICK:        
07F0                CHAR:        
07F0   21 00 00               LD   hl,0   ; if "" is empty or null
07F3                CHAR1:       
07F3   03                     INC   bc   ; point to next char
07F4   0A                     LD   a,(bc)   
07F5   FE 27                  CP   "'"   ; ' is the terminator
07F7   28 09                  JR   z,char3   
07F9   FE 5C                  CP   $5c   ; \ is the escape
07FB   20 02                  JR   nz,char2   
07FD   03                     INC   bc   
07FE   0A                     LD   a,(bc)   
07FF                CHAR2:       
07FF   6F                     LD   l,a   
0800   18 F1                  JR   char1   
0802                CHAR3:       
0802   E5                     PUSH   hl   
0803   DD E9                  JP   (ix)   
0805                DIV:         
0805   D1                     POP   de   
0806   E1                     POP   hl   
0807   C5                     PUSH   bc   ; preserve the IP
0808   44 4D                  LD   bc,hl   
080A   CD B4 08               CALL   divide   
080D   EB                     EX   de,hl   
080E   ED 53 F6 4F            LD   (vRemain),de   
0812   C1                     POP   bc   
0813   C3 13 02               JP   add3   
0816                             ; /bd buffer decimal
0816                             ; value --
0816                BUFFERDEC:      
0816   ED 5B EC 4F            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
081A   D9                     EXX      
081B   E1                     POP   hl   ; hl = value
081C   CD 30 08               CALL   bufferDec0   
081F   D9                     EXX      ; de = buffer*' bc = IP
0820   3E 20                  LD   a," "   ; append space to buffer
0822   12                     LD   (de),a   
0823   1C                     INC   e   ; buffer*++, wraparound
0824   CC C6 0B               CALL   z,flushBuffer   
0827   2A EC 4F               LD   hl,(vBufPtr)   ; hl = buffer*
082A   ED 53 EC 4F            LD   (vBufPtr),de   ; update buffer* with buffer*'
082E   DD E9                  JP   (ix)   
0830                             ; hl = value
0830                             ; de' = buffer*
0830                             ; a, bc, de, hl destroyed
0830                BUFFERDEC0:      
0830   CB 7C                  BIT   7,h   
0832   28 0C                  JR   z,bufferDec1   
0834   D9                     EXX      
0835   3E 2D                  LD   a,"-"   
0837   12                     LD   (de),a   
0838   13                     INC   de   
0839   D9                     EXX      
083A   AF                     XOR   a   
083B   95                     SUB   l   
083C   6F                     LD   l,a   
083D   9F                     SBC   a,a   
083E   94                     SUB   h   
083F   67                     LD   h,a   
0840                BUFFERDEC1:      
0840   0E 00                  LD   c,0   ; leading zeros flag = false
0842   11 F0 D8               LD   de,-10000   
0845   CD 60 08               CALL   bufferDec2   
0848   11 18 FC               LD   de,-1000   
084B   CD 60 08               CALL   bufferDec2   
084E   11 9C FF               LD   de,-100   
0851   CD 60 08               CALL   bufferDec2   
0854   1E F6                  LD   e,-10   
0856   CD 60 08               CALL   bufferDec2   
0859   0C                     INC   c   ; flag = true for at least digit
085A   1E FF                  LD   e,-1   
085C   CD 60 08               CALL   bufferDec2   
085F   C9                     RET      
0860                BUFFERDEC2:      
0860   06 2F                  LD   b,"0"-1   
0862                BUFFERDEC3:      
0862   04                     INC   b   
0863   19                     ADD   hl,de   
0864   38 FC                  JR   c,bufferDec3   
0866   ED 52                  SBC   hl,de   
0868   3E 30                  LD   a,"0"   
086A   B8                     CP   b   
086B   20 05                  JR   nz,bufferDec4   
086D   AF                     XOR   a   
086E   B1                     OR   c   
086F   C8                     RET   z   
0870   18 01                  JR   bufferDec5   
0872                BUFFERDEC4:      
0872   0C                     INC   c   
0873                BUFFERDEC5:      
0873   78                     LD   a,b   
0874   D9                     EXX      
0875   12                     LD   (de),a   
0876   1C                     INC   e   
0877   CC C6 0B               CALL   z,flushBuffer   
087A   D9                     EXX      
087B   C9                     RET      
087C                             ; /bh buffer hex
087C                             ; value --
087C                BUFFERHEX:      
087C   E1                     POP   hl   ; hl = value
087D   ED 5B EC 4F            LD   de,(vBufPtr)   
0881   3E 24                  LD   a,"$"   ; # prefix
0883   12                     LD   (de),a   
0884   1C                     INC   e   ; buffer*++, wraparound
0885   CC C6 0B               CALL   z,flushBuffer   
0888   7C                     LD   a,h   
0889   CD 9D 08               CALL   bufferHex1   
088C   7D                     LD   a,l   
088D   CD 9D 08               CALL   bufferHex1   
0890   3E 20                  LD   a," "   ; append space to buffer
0892   12                     LD   (de),a   
0893   1C                     INC   e   ; buffer*++, wraparound
0894   CC C6 0B               CALL   z,flushBuffer   
0897   ED 53 EC 4F            LD   (vBufPtr),de   
089B   DD E9                  JP   (ix)   
089D                BUFFERHEX1:      
089D   F5                     PUSH   af   
089E   1F                     RRA      
089F   1F                     RRA      
08A0   1F                     RRA      
08A1   1F                     RRA      
08A2   CD A6 08               CALL   bufferHex2   
08A5   F1                     POP   af   
08A6                BUFFERHEX2:      
08A6   E6 0F                  AND   0x0F   
08A8   C6 90                  ADD   a,0x90   
08AA   27                     DAA      
08AB   CE 40                  ADC   a,0x40   
08AD   27                     DAA      
08AE   12                     LD   (de),a   
08AF   1C                     INC   e   ; buffer*++, wraparound
08B0   CC C6 0B               CALL   z,flushBuffer   
08B3   C9                     RET      
08B4                             ; division subroutine.
08B4                             ; bc: divisor, de: dividend, hl: remainder
08B4                DIVIDE:      
08B4   21 00 00               LD   hl,0   ; zero the remainder
08B7   3E 10                  LD   a,16   ; loop counter
08B9                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
08B9   CB 21                  SLA   c   
08BB   CB 10                  RL   b   
08BD   ED 6A                  ADC   hl,hl   
08BF   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
08C1   38 03                  JR   c,divide2   
08C3   0C                     INC   c   
08C4   18 01                  JR   divide3   
08C6                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
08C6   19                     ADD   hl,de   
08C7                DIVIDE3:      
08C7   3D                     DEC   a   
08C8   20 EF                  JR   nz,divide1   
08CA   50 59                  LD   de,bc   ; result from bc to de
08CC   C9                     RET      
08CD                FZ:          
08CD   21 00 4D               LD   hl,STACK   
08D0   ED 72                  SBC   hl,sp   
08D2   CB 3C                  SRL   h   
08D4   CB 1D                  RR   l   
08D6   E5                     PUSH   hl   
08D7   C3 B1 04               JP   dotNumber_   
08DA                             ; execute a block of code which ends with }
08DA                             ; creates a root scope if BP == stack
08DA                             ; else uses outer scope
08DA                CARET:       
08DA                GO:          
08DA   D1                     POP   de   ; de = block*
08DB                GO1:         
08DB   7B                     LD   a,e   ; if block* == null, exit
08DC   B2                     OR   d   
08DD   20 02                  JR   nz,go2   
08DF   DD E9                  JP   (ix)   
08E1                GO2:         
08E1   1A                     LD   a,(de)   
08E2   FE 7B                  CP   "{"   
08E4   28 06                  JR   z,goBlock   
08E6   FE 28                  CP   "("   
08E8   C2 1F 09               JP   nz,goFunc   
08EB   D5                     PUSH   de   ; push de just before stack frame
08EC                GOBLOCK:      
08EC   ED 53 00 50            LD   (vTemp1),de   ; save de
08F0   21 00 4D               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
08F3   FD 54                  LD   d,iyh   
08F5   FD 5D                  LD   e,iyl   
08F7   B7                     OR   a   ; if stack* == BP then this is the root_scope
08F8   ED 52                  SBC   hl,de   
08FA   ED 5B 00 50            LD   de,(vTemp1)   ; restore de
08FE   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
08FF   B4                     OR   h   
0900   3E 00                  LD   a,0   
0902   28 6A                  JR   z,goFunc8   
0904   C5                     PUSH   bc   ; push IP
0905   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0908   FD 46 05               LD   b,(iy+5)   
090B   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
090E   FD 66 03               LD   h,(iy+3)   
0911                GOBLOCK2:      
0911   C5                     PUSH   bc   ; arg_list*
0912   E5                     PUSH   hl   ; first_arg*
0913   FD E5                  PUSH   iy   ; push BP
0915   FD 21 00 00            LD   iy,0   ; BP = SP
0919   FD 39                  ADD   iy,sp   
091B                GOBLOCK3:      
091B   42 4B                  LD   bc,de   ; bc = de = block*-1
091D   DD E9                  JP   (ix)   
091F                GOFUNC:      ; execute func
091F   EB                     EX   de,hl   ; hl = func*
0920   5E                     LD   e,(hl)   ; de = partial_array*
0921   23                     INC   hl   
0922   56                     LD   d,(hl)   
0923   23                     INC   hl   
0924   7B                     LD   a,e   ; if partial_array* == null skip
0925   B2                     OR   d   
0926   28 21                  JR   z,goFunc3   
0928   ED 43 00 50            LD   (vTemp1),bc   
092C   22 02 50               LD   (vTemp2),hl   ; save bc,hl
092F   EB                     EX   de,hl   ; hl = partial_array*
0930   2B                     DEC   hl   ; bc = count
0931   46                     LD   b,(hl)   
0932   2B                     DEC   hl   
0933   4E                     LD   c,(hl)   
0934   23                     INC   hl   ; hl = array data*
0935   23                     INC   hl   
0936   18 06                  JR   goFunc2   ; push each item on stack
0938                GOFUNC1:      
0938   5E                     LD   e,(hl)   ; de = partial item
0939   23                     INC   hl   
093A   56                     LD   d,(hl)   
093B   23                     INC   hl   
093C   D5                     PUSH   de   ; push on stack
093D   0B                     DEC   bc   
093E                GOFUNC2:      
093E   79                     LD   a,c   ; if count != 0 then loop
093F   B0                     OR   b   
0940   20 F6                  JR   nz,goFunc1   
0942   ED 4B 00 50            LD   bc,(vTemp1)   ; restore bc
0946   2A 02 50               LD   hl,(vTemp2)   ; restore hl
0949                GOFUNC3:      
0949   5E                     LD   e,(hl)   ; de = block*
094A   23                     INC   hl   
094B   56                     LD   d,(hl)   
094C   23                     INC   hl   
094D   ED 53 00 50            LD   (vTemp1),de   ; save block*
0951   5E                     LD   e,(hl)   ; de = arg_list*
0952   23                     INC   hl   
0953   56                     LD   d,(hl)   
0954   23                     INC   hl   
0955   EB                     EX   de,hl   ; hl = arg_list*
0956   ED 5B 00 50            LD   de,(vTemp1)   ; restore de = block*
095A   7D                     LD   a,l   ; if arg_list* == null a = 0
095B   B4                     OR   h   
095C   20 03                  JR   nz,goFunc4   
095E   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
095F   18 0D                  JR   goFunc8   
0961                GOFUNC4:      ; allocate locals
0961   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0962   18 03                  JR   goFunc6   
0964                GOFUNC5:      ; loop
0964   3B                     DEC   sp   
0965   3B                     DEC   sp   
0966   3D                     DEC   a   
0967                GOFUNC6:      
0967   B7                     OR   a   
0968   20 FA                  JR   nz,goFunc5   ; end loop
096A                GOFUNC7:      
096A   23                     INC   hl   ; a = num_args* x 2
096B   7E                     LD   a,(hl)   
096C   2B                     DEC   hl   
096D   87                     ADD   a,a   ; a *= 2
096E                GOFUNC8:      
096E   C5                     PUSH   bc   ; push IP
096F   44 4D                  LD   bc,hl   
0971   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0974   85                     ADD   a,l   
0975   6F                     LD   l,a   
0976   39                     ADD   hl,sp   
0977   18 98                  JR   goBlock2   
0979                DOLLAR:      
0979                HEXNUM:      
0979   21 00 00               LD   hl,0   ; Clear hl to accept the number
097C                HEXNUM1:      
097C   03                     INC   bc   
097D   0A                     LD   a,(bc)   ; Get the character which is a numeral
097E   CB 77                  BIT   6,a   ; is it uppercase alpha?
0980   28 02                  JR   z,hexnum2   ; no a decimal
0982   D6 07                  SUB   7   ; sub 7  to make $a - $F
0984                HEXNUM2:      
0984   D6 30                  SUB   $30   ; form decimal digit
0986   DA 16 0A               JP   c,num2   
0989   FE 10                  CP   $0F+1   
098B   D2 16 0A               JP   nc,num2   
098E   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
098F   29                     ADD   hl,hl   ; 4X
0990   29                     ADD   hl,hl   ; 8X
0991   29                     ADD   hl,hl   ; 16X
0992   85                     ADD   a,l   ; add into bottom of hl
0993   6F                     LD   l,a   
0994   18 E6                  JR   hexnum1   
0996                UPCASE:      
0996   0A                     LD   a,(bc)   ; a = identifier char
0997   D6 41                  SUB   "A"   ; "A" = 0
0999   18 05                  JR   ident1   
099B                LOWCASE:      
099B   0A                     LD   a,(bc)   
099C   D6 61                  SUB   "a"   
099E   C6 1A                  ADD   a,26   
09A0                IDENT1:      
09A0   87                     ADD   a,a   ; l = a * 2
09A1   6F                     LD   l,a   
09A2   26 4F                  LD   h,msb(vars)   
09A4   22 F4 4F               LD   (vPointer),hl   ; store address in setter
09A7   5E                     LD   e,(hl)   
09A8   23                     INC   hl   
09A9   56                     LD   d,(hl)   
09AA   D5                     PUSH   de   
09AB   DD E9                  JP   (ix)   
09AD                             ; if
09AD                             ; condition then -- value
09AD                QUESTION:      
09AD                IF:          
09AD   03                     INC   bc   
09AE   0A                     LD   a,(bc)   
09AF   FE 3F                  CP   "?"   
09B1   28 06                  JR   z,ifte   
09B3   0B                     DEC   bc   
09B4   11 00 00               LD   de,NUL   ; NUL pointer for else
09B7   18 01                  JR   ifte1   
09B9                             ; ifte
09B9                             ; condition then else -- value
09B9                IFTE:        
09B9   D1                     POP   de   ; de = else
09BA                IFTE1:       
09BA   E1                     POP   hl   ; hl = then
09BB   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
09BC   7C                     LD   a,h   
09BD   B5                     OR   l   
09BE   E1                     POP   hl   ; hl = then
09BF   CA DB 08               JP   z,go1   ; if z de = else
09C2   EB                     EX   de,hl   ; condition = false, de = then
09C3   C3 DB 08               JP   go1   
09C6                KEY:         
09C6   CD 81 00               CALL   getchar   
09C9   26 00                  LD   h,0   
09CB   6F                     LD   l,a   
09CC   E5                     PUSH   hl   
09CD   DD E9                  JP   (ix)   
09CF                             ; Z80 port output
09CF                             ; value port --
09CF                OUTPUT:      
09CF   E1                     POP   hl   
09D0   59                     LD   e,c   ; save IP
09D1   4D                     LD   c,l   
09D2   E1                     POP   hl   
09D3   ED 69                  OUT   (c),l   
09D5   4B                     LD   c,e   ; restore IP
09D6   DD E9                  JP   (ix)   
09D8                STAR:        
09D8                MUL:         
09D8   D1                     POP   de   ; get first value
09D9   E1                     POP   hl   
09DA                MUL2:        
09DA   C5                     PUSH   bc   ; Preserve the IP
09DB   44 4D                  LD   bc,hl   ; bc = 2nd value
09DD   21 00 00               LD   hl,0   
09E0   3E 10                  LD   a,16   
09E2                MUL3:        
09E2   29                     ADD   hl,hl   
09E3   CB 13                  RL   e   
09E5   CB 12                  RL   d   
09E7   30 04                  JR   nc,$+6   
09E9   09                     ADD   hl,bc   
09EA   30 01                  JR   nc,$+3   
09EC   13                     INC   de   
09ED   3D                     DEC   a   
09EE   20 F2                  JR   nz,mul3   
09F0   C1                     POP   bc   ; Restore the IP
09F1   C3 13 02               JP   add3   
09F4                NUM:         
09F4   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
09F7   0A                     LD   a,(bc)   ; Get numeral or -
09F8   FE 2D                  CP   "-"   
09FA   20 01                  JR   nz,num0   
09FC   03                     INC   bc   ; move to next char, no flags affected
09FD                NUM0:        
09FD   08                     EX   af,af'   ; save zero flag = 0 for later
09FE                NUM1:        
09FE   0A                     LD   a,(bc)   ; read digit
09FF   D6 30                  SUB   "0"   ; less than 0?
0A01   38 13                  JR   c,num2   ; not a digit, exit loop
0A03   FE 0A                  CP   10   ; greater that 9?
0A05   30 0F                  JR   nc,num2   ; not a digit, exit loop
0A07   03                     INC   bc   ; inc IP
0A08   54 5D                  LD   de,hl   ; multiply hl * 10
0A0A   29                     ADD   hl,hl   
0A0B   29                     ADD   hl,hl   
0A0C   19                     ADD   hl,de   
0A0D   29                     ADD   hl,hl   
0A0E   85                     ADD   a,l   ; add digit in a to hl
0A0F   6F                     LD   l,a   
0A10   3E 00                  LD   a,0   
0A12   8C                     ADC   a,h   
0A13   67                     LD   h,a   
0A14   18 E8                  JR   num1   
0A16                NUM2:        
0A16   0B                     DEC   bc   
0A17   08                     EX   af,af'   ; restore zero flag
0A18   20 07                  JR   nz,num3   
0A1A   EB                     EX   de,hl   ; negate the value of hl
0A1B   21 00 00               LD   hl,0   
0A1E   B7                     OR   a   ; jump to sub2
0A1F   ED 52                  SBC   hl,de   
0A21                NUM3:        
0A21   E5                     PUSH   hl   ; Put the number on the stack
0A22   DD E9                  JP   (ix)   ; and process the next character
0A24                RPAREN:      
0A24   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0A27   FD 46 09               LD   b,(iy+9)   
0A2A   DD E9                  JP   (ix)   
0A2C                             ; shiftLeft
0A2C                             ; value count -- value2          shift left count places
0A2C                SHIFTLEFT:      
0A2C   50 59                  LD   de,bc   ; save IP
0A2E   C1                     POP   bc   ; bc = count
0A2F   41                     LD   b,c   ; b = loop counter
0A30   E1                     POP   hl   
0A31   04                     INC   b   ; test for counter=0 case
0A32   18 01                  JR   shiftLeft2   
0A34                SHIFTLEFT1:      
0A34   29                     ADD   hl,hl   ; left shift hl
0A35                SHIFTLEFT2:      
0A35   10 FD                  DJNZ   shiftLeft1   
0A37   E5                     PUSH   hl   
0A38   42 4B                  LD   bc,de   ; restore IP
0A3A   DD E9                  JP   (ix)   
0A3C                             ; shiftRight
0A3C                             ; value count -- value2          shift left count places
0A3C                SHIFTRIGHT:      
0A3C   50 59                  LD   de,bc   ; save IP
0A3E   C1                     POP   bc   ; bc = count
0A3F   41                     LD   b,c   ; b = loop counter
0A40   E1                     POP   hl   
0A41   04                     INC   b   ; test for counter=0 case
0A42   18 04                  JR   shiftRight2   
0A44                SHIFTRIGHT1:      
0A44   CB 3C                  SRL   h   ; right shift hl
0A46   CB 1D                  RR   l   
0A48                SHIFTRIGHT2:      
0A48   10 FA                  DJNZ   shiftRight1   
0A4A   E5                     PUSH   hl   
0A4B   42 4B                  LD   bc,de   ; restore IP
0A4D   DD E9                  JP   (ix)   
0A4F                             ; string
0A4F                             ; -- ptr                        ; points to start of string chars,
0A4F                             ; length is stored at start - 2 bytes
0A4F                DQUOTE:      
0A4F                STRING:      
0A4F   2A F0 4F               LD   hl,(vHeapPtr)   ; hl = heap*
0A52   23                     INC   hl   ; skip length field to start
0A53   23                     INC   hl   
0A54   E5                     PUSH   hl   ; save start of string
0A55   03                     INC   bc   ; point to next char
0A56   18 03                  JR   string2   
0A58                STRING1:      
0A58   77                     LD   (hl),a   
0A59   23                     INC   hl   ; increase count
0A5A   03                     INC   bc   ; point to next char
0A5B                STRING2:      
0A5B   0A                     LD   a,(bc)   
0A5C   FE 22                  CP   DQ   ; " is the string terminator
0A5E   28 04                  JR   z,string3   
0A60   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0A62   20 F4                  JR   nz,string1   
0A64                STRING3:      
0A64   AF                     XOR   a   ; write NUL to terminate string
0A65   77                     LD   (hl),a   ; hl = end of string
0A66   23                     INC   hl   
0A67   22 F0 4F               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0A6A   2B                     DEC   hl   ; hl = end of string without terminator
0A6B   D1                     POP   de   ; de = start of string
0A6C   D5                     PUSH   de   ; return start of string
0A6D   B7                     OR   a   ; hl = length bytes, de = start of string
0A6E   ED 52                  SBC   hl,de   
0A70   EB                     EX   de,hl   
0A71   2B                     DEC   hl   ; write length bytes to length field at start - 2
0A72   72                     LD   (hl),d   
0A73   2B                     DEC   hl   
0A74   73                     LD   (hl),e   
0A75   DD E9                  JP   (ix)   
0A77                PRINTCHARS1:      
0A77   1A                     LD   a,(de)   ; print char at char*
0A78   CD 85 00               CALL   putchar   
0A7B   13                     INC   de   ; char*++
0A7C   2B                     DEC   hl   ; count--
0A7D                PRINTCHARS2:      
0A7D   7D                     LD   a,l   ; count == 0?
0A7E   B4                     OR   h   
0A7F   C8                     RET   z   
0A80   18 F5                  JR   printChars1   ; if not loop
0A82                             ; 
0A82                FILTER:      
0A82                SCAN:        
0A82   DD E9                  JP   (ix)   
0A84                             ;*******************************************************************
0A84                             ; general routines
0A84                             ;*******************************************************************
0A84                             ; arg_list - parses arg_list e.g. ab:c
0A84                             ; -- arg_list*
0A84                PARSEARGS:      
0A84   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0A87   2A F0 4F               LD   hl,(vHeapPtr)   ; hl = heap*
0A8A   E5                     PUSH   hl   ; save start of arg_list
0A8B   23                     INC   hl   ; skip length fields to start of string
0A8C   23                     INC   hl   
0A8D   03                     INC   bc   ; point to next char
0A8E                PARSEARGS1:      
0A8E   0A                     LD   a,(bc)   
0A8F   FE 3A                  CP   ":"   ; ":" switches from args to locals
0A91   20 03                  JR   nz,parseArgs1a   
0A93   14                     INC   d   ; non zero value local count acts as flag
0A94   18 10                  JR   parseArgs3   
0A96                PARSEARGS1A:      
0A96   FE 61                  CP   "a"   ; < "a" terminates arg_list
0A98   38 0F                  JR   c,parseArgs4   
0A9A   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0A9C   30 0B                  JR   nc,parseArgs4   
0A9E                PARSEARGS2:      
0A9E   77                     LD   (hl),a   
0A9F   23                     INC   hl   
0AA0   1C                     INC   e   ; increase arg count
0AA1   AF                     XOR   a   
0AA2   B2                     OR   d   
0AA3   28 01                  JR   z,parseArgs3   
0AA5   14                     INC   d   ; if d > 0 increase local count
0AA6                PARSEARGS3:      
0AA6   03                     INC   bc   ; point to next char
0AA7   18 E5                  JR   parseArgs1   
0AA9                PARSEARGS4:      
0AA9   0B                     DEC   bc   
0AAA   AF                     XOR   a   
0AAB   B2                     OR   d   
0AAC   28 01                  JR   z,parseArgs5   
0AAE   15                     DEC   d   ; remove initial inc
0AAF                PARSEARGS5:      
0AAF   23                     INC   hl   
0AB0   22 F0 4F               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0AB3   E1                     POP   hl   ; hl = start of arg_list
0AB4   72                     LD   (hl),d   ; write number of locals at start - 1
0AB5   23                     INC   hl   
0AB6   73                     LD   (hl),e   ; write number of args + locals at start - 2
0AB7   2B                     DEC   hl   
0AB8   E3                     EX   (sp),hl   
0AB9   E9                     JP   (hl)   
0ABA                             ; create block: parses block e.g. 00bbIC4uLi4g
0ABA                             ; -- block*
0ABA                PARSEBLOCK:      
0ABA   C5                     PUSH   bc   ; return pointer to first { of block
0ABB   03                     INC   bc   
0ABC   16 01                  LD   d,1   ; nesting: count first parenthesis
0ABE                PARSEBLOCK1:      ; Skip to end of definition
0ABE   0A                     LD   a,(bc)   ; Get the next character
0ABF   03                     INC   bc   ; Point to next character
0AC0   FE 21                  CP   " " + 1   ; ignore whitespace
0AC2   38 FA                  JR   c,parseBlock1   
0AC4   FE 29                  CP   ")"   
0AC6   28 2D                  JR   z,parseBlock4   
0AC8   FE 7D                  CP   "}"   
0ACA   28 29                  JR   z,parseBlock4   
0ACC   FE 5D                  CP   "]"   
0ACE   28 25                  JR   z,parseBlock4   
0AD0   FE 28                  CP   "("   
0AD2   28 16                  JR   z,parseBlock2   
0AD4   FE 7B                  CP   "{"   
0AD6   28 12                  JR   z,parseBlock2   
0AD8   FE 5B                  CP   "["   
0ADA   28 0E                  JR   z,parseBlock2   
0ADC   FE 27                  CP   "'"   
0ADE   28 0D                  JR   z,parseBlock3   
0AE0   FE 60                  CP   "`"   
0AE2   28 09                  JR   z,parseBlock3   
0AE4   FE 22                  CP   DQ   
0AE6   28 05                  JR   z,parseBlock3   
0AE8   18 D4                  JR   parseBlock1   
0AEA                PARSEBLOCK2:      
0AEA   14                     INC   d   
0AEB   18 D1                  JR   parseBlock1   
0AED                PARSEBLOCK3:      
0AED   3E 80                  LD   a,$80   
0AEF   AA                     XOR   d   
0AF0   57                     LD   d,a   
0AF1   20 CB                  JR   nz,parseBlock1   
0AF3   18 03                  JR   parseBlock5   
0AF5                PARSEBLOCK4:      
0AF5   15                     DEC   d   
0AF6   20 C6                  JR   nz,parseBlock1   ; get the next element
0AF8                PARSEBLOCK5:      
0AF8   60 69                  LD   hl,bc   ; hl = IP
0AFA   11 1E 50               LD   de,HEAP   ; is IP pointing to object in heap
0AFD   B7                     OR   a   ; IP - HEAP
0AFE   ED 52                  SBC   hl,de   
0B00   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0B02   28 1C                  JR   z,parseBlock6   
0B04   60 69                  LD   hl,bc   ; hl = IP
0B06   D1                     POP   de   ; de = block*
0B07   ED 43 00 50            LD   (vTemp1),bc   ; save IP
0B0B   B7                     OR   a   ; bc = size
0B0C   ED 52                  SBC   hl,de   
0B0E   44 4D                  LD   bc,hl   
0B10   EB                     EX   de,hl   ; hl = block* de = heap*
0B11   ED 5B F0 4F            LD   de,(vHeapPtr)   
0B15   D5                     PUSH   de   ; return hblock*
0B16   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0B18   ED 53 F0 4F            LD   (vHeapPtr),de   ; heap* += size
0B1C   ED 4B 00 50            LD   bc,(vTemp1)   ; restore IP
0B20                PARSEBLOCK6:      
0B20   0B                     DEC   bc   ; balanced, exit
0B21   E1                     POP   hl   ; hl = block*
0B22   E3                     EX   (sp),hl   ; return to caller
0B23   E9                     JP   (hl)   
0B24                             ; create function
0B24                             ; arg_list* block* -- func*
0B24                CREATEFUNC:      
0B24   E1                     POP   hl   ; save retrn address
0B25   22 04 50               LD   (vTemp3),hl   
0B28   ED 43 00 50            LD   (vTemp1),bc   ; save IP
0B2C   E1                     POP   hl   ; hl = block*
0B2D   22 02 50               LD   (vTemp2),hl   ; save block*
0B30   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0B33   FD 56 05               LD   d,(iy+5)   
0B36   7B                     LD   a,e   ; if arg_list == null then make a func
0B37   B2                     OR   d   
0B38   20 09                  JR   nz,createFunc0   
0B3A   21 00 00               LD   hl,0   ; partial_array = null
0B3D   ED 5B F0 4F            LD   de,(vHeapPtr)   ; de = compile*
0B41   18 65                  JR   createFunc5   
0B43                CREATEFUNC0:      
0B43   E1                     POP   hl   ; hl = inner_arg_list*
0B44   E5                     PUSH   hl   ; save inner_arg_list
0B45   ED 5B F0 4F            LD   de,(vHeapPtr)   ; de = compile*
0B49   7E                     LD   a,(hl)   ; compile inner_num_locals
0B4A   4F                     LD   c,a   ; b = inner_num_locals
0B4B   12                     LD   (de),a   
0B4C   23                     INC   hl   
0B4D   13                     INC   de   
0B4E   7E                     LD   a,(hl)   ; compile inner_length
0B4F   12                     LD   (de),a   
0B50   91                     SUB   c   ; a = inner_num args
0B51   23                     INC   hl   
0B52   13                     INC   de   
0B53   B7                     OR   a   ; compile args if inner_length > 0
0B54   28 05                  JR   z,createFunc1   
0B56   4F                     LD   c,a   ; bc = a
0B57   06 00                  LD   b,0   
0B59   ED B0                  LDIR      
0B5B                CREATEFUNC1:      
0B5B   EB                     EX   de,hl   ; hl = outer_arg_list
0B5C   FD 5E 04               LD   e,(iy+4)   
0B5F   FD 56 05               LD   d,(iy+5)   
0B62   EB                     EX   de,hl   
0B63   23                     INC   hl   ; a = outer_length
0B64   7E                     LD   a,(hl)   
0B65   23                     INC   hl   
0B66   B7                     OR   a   
0B67   28 05                  JR   z,createFunc2   
0B69   4F                     LD   c,a   
0B6A   06 00                  LD   b,0   
0B6C   ED B0                  LDIR      ; append outer_args
0B6E                CREATEFUNC2:      ; a = outer_length
0B6E   47                     LD   b,a   ; b = a = outer_length
0B6F   2A F0 4F               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0B72   23                     INC   hl   
0B73   7E                     LD   a,(hl)   ; add outer_length to new length
0B74   80                     ADD   a,b   
0B75   77                     LD   (hl),a   
0B76   2B                     DEC   hl   
0B77   78                     LD   a,b   ; save outer_length in a'
0B78   08                     EX   af,af'   
0B79   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0B7A   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0B7B   B7                     OR   a   
0B7C   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0B7E   4F                     LD   c,a   ; c = inner_num_locals
0B7F   06 00                  LD   b,0   ; bc = inner_num_locals
0B81   23                     INC   hl   ; a = inner_length
0B82   7E                     LD   a,(hl)   
0B83   91                     SUB   c   ; a = inner_num_args
0B84   23                     INC   hl   ; hl = inner_arg_chars
0B85   85                     ADD   a,l   ; hl += a
0B86   6F                     LD   l,a   
0B87   3E 00                  LD   a,0   
0B89   84                     ADD   a,h   
0B8A   67                     LD   h,a   
0B8B   ED B0                  LDIR      ; append inner_locals
0B8D                CREATEFUNC2A:      
0B8D   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0B8E   12                     LD   (de),a   ; compile partial_array length field
0B8F   13                     INC   de   
0B90   AF                     XOR   a   
0B91   12                     LD   (de),a   
0B92   13                     INC   de   
0B93   D5                     PUSH   de   ; push partial_array*
0B94   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0B95   FD 5E 02               LD   e,(iy+2)   
0B98   FD 56 03               LD   d,(iy+3)   
0B9B   EB                     EX   de,hl   
0B9C                CREATEFUNC3:      
0B9C   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0B9D   4E                     LD   c,(hl)   
0B9E   2B                     DEC   hl   
0B9F   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0BA0   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0BA1   13                     INC   de   
0BA2   79                     LD   a,c   
0BA3   12                     LD   (de),a   
0BA4   13                     INC   de   
0BA5   10 F5                  DJNZ   createFunc3   ; b = outer_length
0BA7                CREATEFUNC4:      
0BA7   E1                     POP   hl   ; hl = partial_array*
0BA8                CREATEFUNC5:      
0BA8   C1                     POP   bc   ; bc = new_arg_list*
0BA9   D5                     PUSH   de   ; return new func*
0BAA   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0BAB   73                     LD   (hl),e   ; compile partial_array* to func
0BAC   23                     INC   hl   
0BAD   72                     LD   (hl),d   
0BAE   23                     INC   hl   
0BAF   ED 5B 02 50            LD   de,(vTemp2)   ; de = block*
0BB3   73                     LD   (hl),e   ; compile block* to func
0BB4   23                     INC   hl   
0BB5   72                     LD   (hl),d   
0BB6   23                     INC   hl   
0BB7   71                     LD   (hl),c   ; compile new_arg_list* to func
0BB8   23                     INC   hl   
0BB9   70                     LD   (hl),b   
0BBA   23                     INC   hl   
0BBB   22 F0 4F               LD   (vHeapPtr),hl   ; bump heap ptr
0BBE   ED 4B 00 50            LD   bc,(vTemp1)   ; restore IP
0BC2   2A 04 50               LD   hl,(vTemp3)   ; jump to return address
0BC5   E9                     JP   (hl)   
0BC6                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0BC6                FLUSHBUFFER:      
0BC6   F5                     PUSH   af   
0BC7   D5                     PUSH   de   
0BC8   E5                     PUSH   hl   
0BC9   2A EC 4F               LD   hl,(vBufPtr)   
0BCC   11 00 4E               LD   de,BUF   
0BCF   ED 53 EC 4F            LD   (vBufPtr),de   
0BD3   B7                     OR   a   
0BD4   ED 52                  SBC   hl,de   
0BD6   CD 7D 0A               CALL   printChars2   
0BD9   E1                     POP   hl   
0BDA   D1                     POP   de   
0BDB   F1                     POP   af   
0BDC   C9                     RET      
0BDD                COMMANDTABLE:      
0BDD   03                     INC   bc   
0BDE   0A                     LD   a,(bc)   
0BDF   FE 7B                  CP   "z"+1   
0BE1   30 09                  JR   nc,commandTable2   
0BE3   D6 61                  SUB   "a"   
0BE5   38 05                  JR   c,commandTable2   
0BE7                COMMANDTABLE1:      
0BE7   E1                     POP   hl   
0BE8   85                     ADD   a,l   
0BE9   6F                     LD   l,a   
0BEA   6E                     LD   l,(hl)   ; must have the same msb as the table
0BEB   E9                     JP   (hl)   
0BEC                COMMANDTABLE2:      
0BEC   3E 1A                  LD   a,26   
0BEE   0B                     DEC   bc   
0BEF   18 F6                  JR   commandTable1   
0BF1                             ; followed by a table
0BF1                             ; db char
0BF1                             ; db lsb(addr)
0BF1                             ; the final item must have char == NUL
0BF1                JUMPTABLE:      
0BF1   E1                     POP   hl   
0BF2   03                     INC   bc   
0BF3                JUMPTABLE0:      
0BF3   AF                     XOR   a   
0BF4   BE                     CP   (hl)   
0BF5   28 0B                  JR   z,jumpTable2   
0BF7   0A                     LD   a,(bc)   
0BF8   BE                     CP   (hl)   
0BF9   28 04                  JR   z,jumpTable1   
0BFB   23                     INC   hl   
0BFC   23                     INC   hl   
0BFD   18 F4                  JR   jumpTable0   
0BFF                JUMPTABLE1:      
0BFF   23                     INC   hl   
0C00   6E                     LD   l,(hl)   ; must have the same msb as the table
0C01   E9                     JP   (hl)   
0C02                JUMPTABLE2:      
0C02   0B                     DEC   bc   
0C03   23                     INC   hl   
0C04   E9                     JP   (hl)   
0C05                PRTSTR0:      
0C05   CD 85 00               CALL   putchar   
0C08   23                     INC   hl   
0C09                PRTSTR:      
0C09   7E                     LD   a,(hl)   
0C0A   B7                     OR   a   
0C0B   20 F8                  JR   nz,prtstr0   
0C0D   C9                     RET      
0C0E                             ; **************************************************************************
0C0E                             ; calculate nesting value
0C0E                             ; a is char to be tested,
0C0E                             ; e is the nesting value (initially 0)
0C0E                             ; e is increased by ( and [
0C0E                             ; e is decreased by ) and ]
0C0E                             ; e has its bit 7 toggled by `
0C0E                             ; limited to 127 levels
0C0E                             ; **************************************************************************
0C0E                NESTING:      
0C0E   FE 22                  CP   DQ   ; quote char
0C10   28 06                  JR   z,nesting0   
0C12   FE 60                  CP   "`"   ; quote char
0C14   28 02                  JR   z,nesting0   
0C16   18 0A                  JR   nesting1   
0C18                NESTING0:      
0C18   CB 7B                  BIT   7,e   
0C1A   28 03                  JR   z,nesting1a   
0C1C   CB BB                  RES   7,e   
0C1E   C9                     RET      
0C1F                NESTING1A:      
0C1F   CB FB                  SET   7,e   
0C21   C9                     RET      
0C22                NESTING1:      
0C22   CB 7B                  BIT   7,e   
0C24   C0                     RET   nz   
0C25   FE 7B                  CP   "{"   
0C27   28 08                  JR   z,nesting2   
0C29   FE 5B                  CP   "["   
0C2B   28 04                  JR   z,nesting2   
0C2D   FE 28                  CP   "("   
0C2F   20 02                  JR   nz,nesting3   
0C31                NESTING2:      
0C31   1C                     INC   e   
0C32   C9                     RET      
0C33                NESTING3:      
0C33   FE 7D                  CP   "}"   
0C35   28 07                  JR   z,nesting4   
0C37   FE 5D                  CP   "]"   
0C39   28 03                  JR   z,nesting4   
0C3B   FE 29                  CP   ")"   
0C3D   C0                     RET   nz   
0C3E                NESTING4:      
0C3E   1D                     DEC   e   
0C3F   C9                     RET      
0C40                PROMPT:      
0C40   CD 50 0C               CALL   printStr   
0C43   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0C48   C9                     RET      
0C49                CRLF:        
0C49   CD 50 0C               CALL   printStr   
0C4C   0D 0A 00               .CSTR   "\r\n"   
0C4F   C9                     RET      
0C50                             ; prints a null teminated string
0C50                             ; the string should be immediately following the call
0C50                PRINTSTR:      
0C50   E3                     EX   (sp),hl   ; swap			
0C51   CD 09 0C               CALL   prtstr   
0C54   23                     INC   hl   ; inc past NUL
0C55   E3                     EX   (sp),hl   ; put it back	
0C56   C9                     RET      
0C57                INIT:        
0C57   21 F0 01               LD   hl,titleStr   
0C5A   11 0A 50               LD   de,titleBuf   
0C5D   06 14                  LD   b,20   
0C5F                INIT1:       
0C5F   1A                     LD   a,(de)   
0C60   BE                     CP   (hl)   
0C61   20 17                  JR   nz,coldBoot0   
0C63   13                     INC   de   
0C64   23                     INC   hl   
0C65   10 F8                  DJNZ   init1   
0C67                WARMINIT:      
0C67   ED 4B F8 4F            LD   bc,(vSavedIP)   ; restore IP
0C6B   ED 7B FA 4F            LD   sp,(vSavedSP)   ; restore SP
0C6F   DD 2A FC 4F            LD   ix,(vSavedNext)   ; restore Next
0C73   FD 2A FE 4F            LD   iy,(vSavedBP)   ; restore BP
0C77   C3 B1 0C               JP   start1   
0C7A                COLDBOOT0:      
0C7A   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0C7D   11 0A 50               LD   de,titleBuf   
0C80   06 14                  LD   b,20   
0C82   ED B0                  LDIR      
0C84                COLDINIT:      
0C84   21 DE 01               LD   hl,isysVars   
0C87   11 E6 4F               LD   de,sysVars   
0C8A   01 10 00               LD   bc,8 * 2   
0C8D   ED B0                  LDIR      
0C8F   21 00 4F               LD   hl,vars   ; 52 vars LO HI
0C92   06 34                  LD   b,26*2   
0C94   AF                     XOR   a   
0C95                COLDBOOT1:      
0C95   77                     LD   (hl),a   
0C96   23                     INC   hl   
0C97   10 FC                  DJNZ   coldBoot1   
0C99   DD 2A EE 4F            LD   ix,(vNext)   
0C9D   FD 21 00 4D            LD   iy,STACK   
0CA1   C9                     RET      
0CA2                COLDSTART:      
0CA2   31 00 4D               LD   sp,STACK   
0CA5   CD 7A 0C               CALL   coldBoot0   
0CA8   C3 B1 0C               JP   start1   
0CAB                START:       
0CAB   31 00 4D               LD   sp,STACK   ; start Monty
0CAE   CD 57 0C               CALL   init   ; setups
0CB1                START1:      
0CB1   21 0A 50               LD   hl,titleBuf   
0CB4   CD 09 0C               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0CB7                INTERPRET:      
0CB7   CD C6 0B               CALL   flushBuffer   
0CBA   CD 40 0C               CALL   prompt   
0CBD   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0CC0   21 00 4D               LD   hl,TIB   
0CC3   22 EA 4F               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0CC6                INTERPRET2:      ; calculate nesting
0CC6   1E 00                  LD   e,0   ; initilize nesting value
0CC8   C5                     PUSH   bc   ; save offset into TIB,
0CC9                             ; bc is also the count of chars in TIB
0CC9   21 00 4D               LD   hl,TIB   ; hl is start of TIB
0CCC   18 0B                  JR   interpret4   
0CCE                INTERPRET3:      
0CCE   3E 33                  LD   a,"3"   
0CD0   CD 85 00               CALL   putchar   
0CD3   7E                     LD   a,(hl)   ; a = char in TIB
0CD4   23                     INC   hl   ; inc pointer into TIB
0CD5   0B                     DEC   bc   ; dec count of chars in TIB
0CD6   CD 0E 0C               CALL   nesting   ; update nesting value
0CD9                INTERPRET4:      
0CD9   79                     LD   a,c   ; is count zero?
0CDA   B0                     OR   b   
0CDB   20 F1                  JR   nz,interpret3   ; if not loop
0CDD   C1                     POP   bc   ; restore offset into TIB
0CDE                INTERPRET5:      
0CDE   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0CE1   FE 20                  CP   $20   ; compare to space
0CE3   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0CE5   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0CE7                             ; ???? NEEDED?
0CE7   28 36                  JR   z,interpret8   
0CE9   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0CEB   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0CED   FE 05                  CP   CTRL_E   
0CEF   CA 80 0D               JP   z,edit_   
0CF2   FE 08                  CP   CTRL_H   
0CF4   CA 70 0D               JP   z,backSpace_   
0CF7   FE 0A                  CP   CTRL_J   
0CF9   CA 98 0D               JP   z,reEdit_   
0CFC                             ; cp CTRL_S
0CFC                             ; jp z,printStack_
0CFC                             ; DB     lsb(edit_)       ; ENQ ^E  5
0CFC                             ; DB     lsb(reedit_)     ; LF  ^J 10
0CFC                             ; DB     lsb(list_)       ; FF  ^L 12
0CFC                             ; DB     lsb(printStack_) ; DLE ^P 16
0CFC                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0CFC                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0CFC                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0CFC                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0CFC                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0CFC                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0CFC                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0CFC                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0CFC                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0CFC                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0CFC                INTERPRET5A:      
0CFC                             ; ld (vTIBPtr),bc
0CFC                             ; ld bc,(vTIBPtr)
0CFC   18 C8                  JR   interpret2   
0CFE                INTERPRET6:      
0CFE   21 00 4D               LD   hl,TIB   
0D01   09                     ADD   hl,bc   
0D02   77                     LD   (hl),a   ; store the character in textbuf
0D03   03                     INC   bc   
0D04   CD 85 00               CALL   putchar   ; echo character to screen
0D07   CD 0E 0C               CALL   nesting   
0D0A   18 D2                  JR   interpret5   ; wait for next character
0D0C                INTERPRET7:      
0D0C   21 00 4D               LD   hl,TIB   
0D0F   09                     ADD   hl,bc   
0D10   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0D12   23                     INC   hl   
0D13   36 0A                  LD   (hl),"\n"   
0D15   23                     INC   hl   
0D16   03                     INC   bc   
0D17   03                     INC   bc   
0D18   CD 49 0C               CALL   crlf   ; echo character to screen
0D1B   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0D1C   B7                     OR   a   
0D1D   20 BF                  JR   nz,interpret5   
0D1F                INTERPRET8:      
0D1F   21 00 4D               LD   hl,TIB   
0D22   09                     ADD   hl,bc   
0D23   22 EA 4F               LD   (vTIBPtr),hl   
0D26   01 00 4D               LD   bc,TIB   
0D29   ED 43 F8 4F            LD   (vSavedIP),bc   ; save IP
0D2D   ED 73 FA 4F            LD   (vSavedSP),sp   ; save SP
0D31   DD 22 FC 4F            LD   (vSavedNext),ix   ; save Next
0D35   FD 22 FE 4F            LD   (vSavedBP),iy   ; save BP
0D39   0B                     DEC   bc   
0D3A                NEXT:        
0D3A   03                     INC   bc   ; Increment the IP
0D3B   0A                     LD   a,(bc)   ; Get the next character and dispatch
0D3C   FE 20                  CP   " "   ; whitespace?
0D3E   28 FA                  JR   z,next   ; space? ignore
0D40   38 08                  JR   c,next1   
0D42   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0D44   6F                     LD   l,a   ; index into table
0D45   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0D47   6E                     LD   l,(hl)   ; get low jump address
0D48   24                     INC   h   ; Load h with page after opcodes
0D49   E9                     JP   (hl)   ; Jump to routine
0D4A                NEXT1:       
0D4A   FE 00                  CP   NUL   ; end of input string?
0D4C   28 03                  JR   z,exit   
0D4E   C3 B7 0C               JP   interpret   ; no, other whitespace, macros?
0D51                EXIT:        
0D51   03                     INC   bc   
0D52   60 69                  LD   hl,bc   
0D54   E9                     JP   (hl)   
0D55                RUN:         
0D55   C1                     POP   bc   
0D56   0B                     DEC   bc   
0D57   DD E9                  JP   (ix)   
0D59                ERROR1:      
0D59   21 01 00               LD   hl,1   ; error 1: unknown command
0D5C   E5                     PUSH   hl   
0D5D                ERROR:       
0D5D   CD 55 0D               CALL   run   
0D60   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0D6D   C3 B7 0C               JP   interpret   
0D70                BACKSPACE_:      
0D70   79                     LD   a,c   
0D71   B0                     OR   b   
0D72   CA C6 0C               JP   z,interpret2   
0D75   0B                     DEC   bc   
0D76   CD 50 0C               CALL   printStr   
0D79   08 20 08 00            .CSTR   "\b \b"   
0D7D   C3 C6 0C               JP   interpret2   
0D80                             ; edit
0D80                EDIT_:       
0D80   CD 55 0D               CALL   run   
0D83   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0D95   C3 B7 0C               JP   interpret   
0D98                REEDIT_:      
0D98   C3 B7 0C               JP   interpret   
0D9B                PRINTSTACK_:      
0D9B   CD 55 0D               CALL   run   
0D9E   2F 70 6B 00            .CSTR   "/pk"   
0DA2   C3 B7 0C               JP   interpret   
0DA5                             ; editDef:
0DA5                             ;     pop hl                      ; pop ret address
0DA5                             ;     ex (sp),hl                  ; swap with TOS
0DA5                             ;     push hl                     ; dup TOS
0DA5                             ;     ld a,l                      ; a = ident
0DA5                             ;     ld de,TIB                   ; de = start of TIB
0DA5                             ;     ld (vTIBPtr),de             ; update TIB*
0DA5                             ;     push ix                     ; save NEXT
0DA5                             ;     ld ix,editDef0              ; NEXT = editDef0
0DA5                             ;     jp lookupRef                ; convert letter into address
0DA5                             ; editDef0:
0DA5                             ;     ld e,(hl)                   ; de = (hl++)
0DA5                             ;     inc hl
0DA5                             ;     ld d,(hl)
0DA5                             ;     ld a,d                      ; de == 0 ?
0DA5                             ;     or e
0DA5                             ;     jr z,editDef4
0DA5                             ;     ld ix,editDef3              ; NEXT = editDef3
0DA5                             ;     ex de,hl
0DA5                             ;     ld a,(hl)
0DA5                             ;     cp "{"
0DA5                             ;     jr nz,editDef1
0DA5                             ;     jp editBlock0               ; convert letter into address
0DA5                             ; editDef1:
0DA5                             ;     cp "("
0DA5                             ;     jr nz,editDef2
0DA5                             ;     jp editBlock0               ; convert letter into address
0DA5                             ; editDef2:
0DA5                             ;     jp editFunc
0DA5                             ; editDef3:
0DA5                             ;     ld a," "                    ; write assign
0DA5                             ;     call writeChar
0DA5                             ;     pop hl                      ; a = ident
0DA5                             ;     ld a,l
0DA5                             ;     call writeChar
0DA5                             ;     ld a,"="                    ; write assign
0DA5                             ;     call writeChar
0DA5                             ;     ld ix,editDef4              ; NEXT = editDef4
0DA5                             ;     jp printTIB
0DA5                             ; editDef4:
0DA5                             ;     pop ix                      ; restore NEXT
0DA5                             ;     jp (ix)
0DA5                             ; writeChar:
0DA5                             ;     ld de,(vTIBPtr)             ; de = TIB*
0DA5                             ;     ld (de),a                   ; write ident
0DA5                             ;     inc de
0DA5                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0DA5                             ;     ret
0DA5                             ; ; printTIB
0DA5                             ; printTIB:
0DA5                             ;     ld hl,(vTIBPtr)
0DA5                             ;     ld de,TIB
0DA5                             ;     or a
0DA5                             ;     sbc hl,de
0DA5                             ;     jp printTIB2
0DA5                             ; printTIB1:
0DA5                             ;     ld a,(de)
0DA5                             ;     call putchar
0DA5                             ; printTIB2:
0DA5                             ;     ld a,l
0DA5                             ;     or h
0DA5                             ;     jr nz,printTIB1
0DA5                             ;     jp (ix)
0DA5                             ; editBlock:
0DA5                             ;     pop hl                      ; hl = block*
0DA5                             ; editBlock0:
0DA5                             ;     push ix                     ; save next
0DA5                             ;     push hl                     ; push block*
0DA5                             ;     push hl                     ; push block*
0DA5                             ;     ld ix,(editBlock2)
0DA5                             ;     jp blockLength
0DA5                             ; editBlock1:
0DA5                             ;     pop hl                      ; bc = length, (sp) = IP
0DA5                             ;     pop de                      ; de = block*
0DA5                             ;     ld a,l
0DA5                             ;     or h
0DA5                             ;     jr z,editBlock2
0DA5                             ;     push bc
0DA5                             ;     ld bc,hl
0DA5                             ;     ex de,hl                    ; hl = block*
0DA5                             ;     ld de,(vTIBPtr)              ; de = TIB*
0DA5                             ;     ldir                        ; copy block to TIB
0DA5                             ;     ld (vTIBPtr),de              ; save TIB*
0DA5                             ;     pop bc
0DA5                             ; editBlock2:
0DA5                             ;     pop ix                      ; restore next
0DA5                             ;     jp (ix)
0DA5                             ; editFunc:
0DA5                             ;     jp (ix)
0DA5                             ; editArray:
0DA5                             ;     jp (ix)
0DA5                             ; editparseArgs:
0DA5                             ;     jp (ix)
0DA5                             ; ; blockLength
0DA5                             ; ; addr1 -- length
0DA5                             ; blockLength:
0DA5                             ;     pop hl                      ; block*
0DA5                             ;     push hl                     ; save block*
0DA5                             ;     inc hl                      ; skip first char
0DA5                             ;     ld d,1                      ; increase nesting
0DA5                             ; blockLength1:                   ; Skip to end of definition
0DA5                             ;     ld a,(hl)                   ; Get the next character
0DA5                             ;     inc hl                      ; Point to next character
0DA5                             ;     cp " " + 1                  ; ignore whitespace
0DA5                             ;     jr c,blockLength1
0DA5                             ;     cp ")"
0DA5                             ;     jr z,blockLength4
0DA5                             ;     cp "}"
0DA5                             ;     jr z,blockLength4
0DA5                             ;     cp "]"
0DA5                             ;     jr z,blockLength4
0DA5                             ;     cp "("
0DA5                             ;     jr z,blockLength2
0DA5                             ;     cp "{"
0DA5                             ;     jr z,blockLength2
0DA5                             ;     cp "["
0DA5                             ;     jr z,blockLength2
0DA5                             ;     cp "'"
0DA5                             ;     jr z,blockLength3
0DA5                             ;     cp "`"
0DA5                             ;     jr z,blockLength3
0DA5                             ;     cp DQ
0DA5                             ;     jr z,blockLength3
0DA5                             ;     jr blockLength1
0DA5                             ; blockLength2:
0DA5                             ;     inc d
0DA5                             ;     jr blockLength1
0DA5                             ; blockLength4:
0DA5                             ;     dec d
0DA5                             ;     jr nz, blockLength1         ; get the next element
0DA5                             ; blockLength3:
0DA5                             ;     ld a,$80
0DA5                             ;     xor d
0DA5                             ;     ld d,a
0DA5                             ;     jr nz, blockLength1
0DA5                             ;     pop hl                      ; hl = block*
0DA5                             ;     or a
0DA5                             ;     sbc hl,de
0DA5                             ;     push hl
0DA5                             ;     jp (ix)
0DA5                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0DA5                             ; \a start of stack \#3 depth \b base \$ prompt
0DA5                             ; DW dStack               ; a vS0 start of datastack			
0DA5                             ; DW FALSE                ; b vBase16
0DA5                             ; DW 0                    ; c vTIBPtr an offset to the tib
0DA5                             ; DW 0                    ; d
0DA5                             ; DW 65                   ; e vLastDef "A" last command u defined
0DA5                             ; DW 0                    ; f
0DA5                             ; DW page6                ; g 256 bytes limits
0DA5                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0DA5                          ;*Macro unroll: FUNC f1, 1, ""
0DA5                F1:          
0DA5   CD DA 08               CALL   go   
0DA8   00 00                  DW   NUL   
0DAA   B0 0D                  DW   f1M_2854S12   
0DAC   AE 0D                  DW   $+2   
0DAE   01                     DB   1   
0DAF   00                     .PSTR   ""   
0DB0                F1M_2854S12:      
0DB0   00                     DB   0   
0DB1                          ;*Macro unroll: FUNC f2, 1, ""
0DB1                F2:          
0DB1   CD DA 08               CALL   go   
0DB4   00 00                  DW   NUL   
0DB6   BC 0D                  DW   f2M_2856S15   
0DB8   BA 0D                  DW   $+2   
0DBA   01                     DB   1   
0DBB   00                     .PSTR   ""   
0DBC                F2M_2856S15:      
0DBC   00                     DB   0   
0DBD                          ;*Macro unroll: FUNC f3, 0, ""
0DBD                F3:          
0DBD   CD DA 08               CALL   go   
0DC0   00 00                  DW   NUL   
0DC2   C8 0D                  DW   f3M_2858S18   
0DC4   C6 0D                  DW   $+2   
0DC6   00                     DB   0   
0DC7   00                     .PSTR   ""   
0DC8                F3M_2858S18:      
0DC8   00                     DB   0   
0DC9                          ;*Macro unroll: FUNC f4, 1, ""
0DC9                F4:          
0DC9   CD DA 08               CALL   go   
0DCC   00 00                  DW   NUL   
0DCE   D4 0D                  DW   f4M_2860S21   
0DD0   D2 0D                  DW   $+2   
0DD2   01                     DB   1   
0DD3   00                     .PSTR   ""   
0DD4                F4M_2860S21:      
0DD4   00                     DB   0   
0DD5                          ALIGN   $100   
0E00                TESTSSTART:      
0E00                             ; ; ; test "[1 2 5]/as",3
0E00                             ; ; ; ; ; test "0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe", 0
0E00                             ; test "$1000 0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe", $1000
0E00                             ; test "5 :a{%a}^", 5
0E00                             ; call printStr
0E00                             ; .cstr "Done!"
0E00                             ; HALT
0E00                             ; 
0E00                          ;*Macro unroll:  test "/f", false
0E00   31 00 4D               LD   SP,STACK   
0E03   CD 84 0C               CALL   coldInit   
0E06   CD D2 4B               CALL   execStr   
0E09   2F 66 00               DB   "/f",0   
0E0C   CD C6 0B               CALL   flushBuffer   
0E0F   E1                     POP   HL   
0E10   E5                     PUSH   HL   
0E11   11 00 00               LD   DE,false   
0E14   B7                     OR   A   
0E15   ED 52                  SBC   HL,DE   
0E17   7D                     LD   A,L   
0E18   B4                     OR   H   
0E19   CA 76 0E               JP   Z,expectM_2872S38   
0E1C   CD 50 0C               CALL   printStr   
0E1F   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0E28   CD 50 0C               CALL   printStr   
0E2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E3A   21 00 00               LD   hl,false   
0E3D   E5                     PUSH   hl   
0E3E   E5                     PUSH   hl   
0E3F   CD 55 0D               CALL   run   
0E42   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E4A   CD C6 0B               CALL   flushBuffer   
0E4D   CD 50 0C               CALL   printStr   
0E50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E5D   E1                     POP   hl   
0E5E   E5                     PUSH   hl   
0E5F   E5                     PUSH   hl   
0E60   CD 55 0D               CALL   run   
0E63   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E72   CD C6 0B               CALL   flushBuffer   
0E75   76                     HALT      
0E76                EXPECTM_2872S38:      
0E76   E1                     POP   HL   
0E77                          ;*Macro unroll:  test "/t", true
0E77   31 00 4D               LD   SP,STACK   
0E7A   CD 84 0C               CALL   coldInit   
0E7D   CD D2 4B               CALL   execStr   
0E80   2F 74 00               DB   "/t",0   
0E83   CD C6 0B               CALL   flushBuffer   
0E86   E1                     POP   HL   
0E87   E5                     PUSH   HL   
0E88   11 FF FF               LD   DE,true   
0E8B   B7                     OR   A   
0E8C   ED 52                  SBC   HL,DE   
0E8E   7D                     LD   A,L   
0E8F   B4                     OR   H   
0E90   CA ED 0E               JP   Z,expectM_2873S39   
0E93   CD 50 0C               CALL   printStr   
0E96   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0E9F   CD 50 0C               CALL   printStr   
0EA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EB1   21 FF FF               LD   hl,true   
0EB4   E5                     PUSH   hl   
0EB5   E5                     PUSH   hl   
0EB6   CD 55 0D               CALL   run   
0EB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0EC1   CD C6 0B               CALL   flushBuffer   
0EC4   CD 50 0C               CALL   printStr   
0EC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0ED4   E1                     POP   hl   
0ED5   E5                     PUSH   hl   
0ED6   E5                     PUSH   hl   
0ED7   CD 55 0D               CALL   run   
0EDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0EE9   CD C6 0B               CALL   flushBuffer   
0EEC   76                     HALT      
0EED                EXPECTM_2873S39:      
0EED   E1                     POP   HL   
0EEE                          ;*Macro unroll:  test "1", 1
0EEE   31 00 4D               LD   SP,STACK   
0EF1   CD 84 0C               CALL   coldInit   
0EF4   CD D2 4B               CALL   execStr   
0EF7   31 00                  DB   "1",0   
0EF9   CD C6 0B               CALL   flushBuffer   
0EFC   E1                     POP   HL   
0EFD   E5                     PUSH   HL   
0EFE   11 01 00               LD   DE,1   
0F01   B7                     OR   A   
0F02   ED 52                  SBC   HL,DE   
0F04   7D                     LD   A,L   
0F05   B4                     OR   H   
0F06   CA 62 0F               JP   Z,expectM_2874S40   
0F09   CD 50 0C               CALL   printStr   
0F0C   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0F14   CD 50 0C               CALL   printStr   
0F17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F26   21 01 00               LD   hl,1   
0F29   E5                     PUSH   hl   
0F2A   E5                     PUSH   hl   
0F2B   CD 55 0D               CALL   run   
0F2E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F36   CD C6 0B               CALL   flushBuffer   
0F39   CD 50 0C               CALL   printStr   
0F3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F49   E1                     POP   hl   
0F4A   E5                     PUSH   hl   
0F4B   E5                     PUSH   hl   
0F4C   CD 55 0D               CALL   run   
0F4F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F5E   CD C6 0B               CALL   flushBuffer   
0F61   76                     HALT      
0F62                EXPECTM_2874S40:      
0F62   E1                     POP   HL   
0F63                          ;*Macro unroll:  test "2", 2
0F63   31 00 4D               LD   SP,STACK   
0F66   CD 84 0C               CALL   coldInit   
0F69   CD D2 4B               CALL   execStr   
0F6C   32 00                  DB   "2",0   
0F6E   CD C6 0B               CALL   flushBuffer   
0F71   E1                     POP   HL   
0F72   E5                     PUSH   HL   
0F73   11 02 00               LD   DE,2   
0F76   B7                     OR   A   
0F77   ED 52                  SBC   HL,DE   
0F79   7D                     LD   A,L   
0F7A   B4                     OR   H   
0F7B   CA D7 0F               JP   Z,expectM_2875S41   
0F7E   CD 50 0C               CALL   printStr   
0F81   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0F89   CD 50 0C               CALL   printStr   
0F8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F9B   21 02 00               LD   hl,2   
0F9E   E5                     PUSH   hl   
0F9F   E5                     PUSH   hl   
0FA0   CD 55 0D               CALL   run   
0FA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FAB   CD C6 0B               CALL   flushBuffer   
0FAE   CD 50 0C               CALL   printStr   
0FB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FBE   E1                     POP   hl   
0FBF   E5                     PUSH   hl   
0FC0   E5                     PUSH   hl   
0FC1   CD 55 0D               CALL   run   
0FC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FD3   CD C6 0B               CALL   flushBuffer   
0FD6   76                     HALT      
0FD7                EXPECTM_2875S41:      
0FD7   E1                     POP   HL   
0FD8                          ;*Macro unroll:  test "1", 1
0FD8   31 00 4D               LD   SP,STACK   
0FDB   CD 84 0C               CALL   coldInit   
0FDE   CD D2 4B               CALL   execStr   
0FE1   31 00                  DB   "1",0   
0FE3   CD C6 0B               CALL   flushBuffer   
0FE6   E1                     POP   HL   
0FE7   E5                     PUSH   HL   
0FE8   11 01 00               LD   DE,1   
0FEB   B7                     OR   A   
0FEC   ED 52                  SBC   HL,DE   
0FEE   7D                     LD   A,L   
0FEF   B4                     OR   H   
0FF0   CA 4C 10               JP   Z,expectM_2876S42   
0FF3   CD 50 0C               CALL   printStr   
0FF6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0FFE   CD 50 0C               CALL   printStr   
1001   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1010   21 01 00               LD   hl,1   
1013   E5                     PUSH   hl   
1014   E5                     PUSH   hl   
1015   CD 55 0D               CALL   run   
1018   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1020   CD C6 0B               CALL   flushBuffer   
1023   CD 50 0C               CALL   printStr   
1026   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1033   E1                     POP   hl   
1034   E5                     PUSH   hl   
1035   E5                     PUSH   hl   
1036   CD 55 0D               CALL   run   
1039   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1048   CD C6 0B               CALL   flushBuffer   
104B   76                     HALT      
104C                EXPECTM_2876S42:      
104C   E1                     POP   HL   
104D                          ;*Macro unroll:  test "0", 0
104D   31 00 4D               LD   SP,STACK   
1050   CD 84 0C               CALL   coldInit   
1053   CD D2 4B               CALL   execStr   
1056   30 00                  DB   "0",0   
1058   CD C6 0B               CALL   flushBuffer   
105B   E1                     POP   HL   
105C   E5                     PUSH   HL   
105D   11 00 00               LD   DE,0   
1060   B7                     OR   A   
1061   ED 52                  SBC   HL,DE   
1063   7D                     LD   A,L   
1064   B4                     OR   H   
1065   CA C1 10               JP   Z,expectM_2877S43   
1068   CD 50 0C               CALL   printStr   
106B   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1073   CD 50 0C               CALL   printStr   
1076   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1085   21 00 00               LD   hl,0   
1088   E5                     PUSH   hl   
1089   E5                     PUSH   hl   
108A   CD 55 0D               CALL   run   
108D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1095   CD C6 0B               CALL   flushBuffer   
1098   CD 50 0C               CALL   printStr   
109B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10A8   E1                     POP   hl   
10A9   E5                     PUSH   hl   
10AA   E5                     PUSH   hl   
10AB   CD 55 0D               CALL   run   
10AE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10BD   CD C6 0B               CALL   flushBuffer   
10C0   76                     HALT      
10C1                EXPECTM_2877S43:      
10C1   E1                     POP   HL   
10C2                          ;*Macro unroll:  test "10", 10
10C2   31 00 4D               LD   SP,STACK   
10C5   CD 84 0C               CALL   coldInit   
10C8   CD D2 4B               CALL   execStr   
10CB   31 30 00               DB   "10",0   
10CE   CD C6 0B               CALL   flushBuffer   
10D1   E1                     POP   HL   
10D2   E5                     PUSH   HL   
10D3   11 0A 00               LD   DE,10   
10D6   B7                     OR   A   
10D7   ED 52                  SBC   HL,DE   
10D9   7D                     LD   A,L   
10DA   B4                     OR   H   
10DB   CA 38 11               JP   Z,expectM_2878S44   
10DE   CD 50 0C               CALL   printStr   
10E1   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
10EA   CD 50 0C               CALL   printStr   
10ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10FC   21 0A 00               LD   hl,10   
10FF   E5                     PUSH   hl   
1100   E5                     PUSH   hl   
1101   CD 55 0D               CALL   run   
1104   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
110C   CD C6 0B               CALL   flushBuffer   
110F   CD 50 0C               CALL   printStr   
1112   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
111F   E1                     POP   hl   
1120   E5                     PUSH   hl   
1121   E5                     PUSH   hl   
1122   CD 55 0D               CALL   run   
1125   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1134   CD C6 0B               CALL   flushBuffer   
1137   76                     HALT      
1138                EXPECTM_2878S44:      
1138   E1                     POP   HL   
1139                          ;*Macro unroll:  test "123", 123
1139   31 00 4D               LD   SP,STACK   
113C   CD 84 0C               CALL   coldInit   
113F   CD D2 4B               CALL   execStr   
1142   31 32 33 00            DB   "123",0   
1146   CD C6 0B               CALL   flushBuffer   
1149   E1                     POP   HL   
114A   E5                     PUSH   HL   
114B   11 7B 00               LD   DE,123   
114E   B7                     OR   A   
114F   ED 52                  SBC   HL,DE   
1151   7D                     LD   A,L   
1152   B4                     OR   H   
1153   CA B1 11               JP   Z,expectM_2879S45   
1156   CD 50 0C               CALL   printStr   
1159   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1163   CD 50 0C               CALL   printStr   
1166   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1175   21 7B 00               LD   hl,123   
1178   E5                     PUSH   hl   
1179   E5                     PUSH   hl   
117A   CD 55 0D               CALL   run   
117D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1185   CD C6 0B               CALL   flushBuffer   
1188   CD 50 0C               CALL   printStr   
118B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1198   E1                     POP   hl   
1199   E5                     PUSH   hl   
119A   E5                     PUSH   hl   
119B   CD 55 0D               CALL   run   
119E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11AD   CD C6 0B               CALL   flushBuffer   
11B0   76                     HALT      
11B1                EXPECTM_2879S45:      
11B1   E1                     POP   HL   
11B2                          ;*Macro unroll:  test "-1",-1
11B2   31 00 4D               LD   SP,STACK   
11B5   CD 84 0C               CALL   coldInit   
11B8   CD D2 4B               CALL   execStr   
11BB   2D 31 00               DB   "-1",0   
11BE   CD C6 0B               CALL   flushBuffer   
11C1   E1                     POP   HL   
11C2   E5                     PUSH   HL   
11C3   11 FF FF               LD   DE,-1   
11C6   B7                     OR   A   
11C7   ED 52                  SBC   HL,DE   
11C9   7D                     LD   A,L   
11CA   B4                     OR   H   
11CB   CA 28 12               JP   Z,expectM_2880S46   
11CE   CD 50 0C               CALL   printStr   
11D1   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
11DA   CD 50 0C               CALL   printStr   
11DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11EC   21 FF FF               LD   hl,-1   
11EF   E5                     PUSH   hl   
11F0   E5                     PUSH   hl   
11F1   CD 55 0D               CALL   run   
11F4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11FC   CD C6 0B               CALL   flushBuffer   
11FF   CD 50 0C               CALL   printStr   
1202   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
120F   E1                     POP   hl   
1210   E5                     PUSH   hl   
1211   E5                     PUSH   hl   
1212   CD 55 0D               CALL   run   
1215   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1224   CD C6 0B               CALL   flushBuffer   
1227   76                     HALT      
1228                EXPECTM_2880S46:      
1228   E1                     POP   HL   
1229                          ;*Macro unroll:  test "''", 0
1229   31 00 4D               LD   SP,STACK   
122C   CD 84 0C               CALL   coldInit   
122F   CD D2 4B               CALL   execStr   
1232   27 27 00               DB   "''",0   
1235   CD C6 0B               CALL   flushBuffer   
1238   E1                     POP   HL   
1239   E5                     PUSH   HL   
123A   11 00 00               LD   DE,0   
123D   B7                     OR   A   
123E   ED 52                  SBC   HL,DE   
1240   7D                     LD   A,L   
1241   B4                     OR   H   
1242   CA 9F 12               JP   Z,expectM_2881S47   
1245   CD 50 0C               CALL   printStr   
1248   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1251   CD 50 0C               CALL   printStr   
1254   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1263   21 00 00               LD   hl,0   
1266   E5                     PUSH   hl   
1267   E5                     PUSH   hl   
1268   CD 55 0D               CALL   run   
126B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1273   CD C6 0B               CALL   flushBuffer   
1276   CD 50 0C               CALL   printStr   
1279   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1286   E1                     POP   hl   
1287   E5                     PUSH   hl   
1288   E5                     PUSH   hl   
1289   CD 55 0D               CALL   run   
128C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
129B   CD C6 0B               CALL   flushBuffer   
129E   76                     HALT      
129F                EXPECTM_2881S47:      
129F   E1                     POP   HL   
12A0                          ;*Macro unroll:  test "'a'", $61
12A0   31 00 4D               LD   SP,STACK   
12A3   CD 84 0C               CALL   coldInit   
12A6   CD D2 4B               CALL   execStr   
12A9   27 61 27 00            DB   "'a'",0   
12AD   CD C6 0B               CALL   flushBuffer   
12B0   E1                     POP   HL   
12B1   E5                     PUSH   HL   
12B2   11 61 00               LD   DE,$61   
12B5   B7                     OR   A   
12B6   ED 52                  SBC   HL,DE   
12B8   7D                     LD   A,L   
12B9   B4                     OR   H   
12BA   CA 18 13               JP   Z,expectM_2882S48   
12BD   CD 50 0C               CALL   printStr   
12C0   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
12CA   CD 50 0C               CALL   printStr   
12CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12DC   21 61 00               LD   hl,$61   
12DF   E5                     PUSH   hl   
12E0   E5                     PUSH   hl   
12E1   CD 55 0D               CALL   run   
12E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12EC   CD C6 0B               CALL   flushBuffer   
12EF   CD 50 0C               CALL   printStr   
12F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12FF   E1                     POP   hl   
1300   E5                     PUSH   hl   
1301   E5                     PUSH   hl   
1302   CD 55 0D               CALL   run   
1305   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1314   CD C6 0B               CALL   flushBuffer   
1317   76                     HALT      
1318                EXPECTM_2882S48:      
1318   E1                     POP   HL   
1319                          ;*Macro unroll:  test "'\\''", $27
1319   31 00 4D               LD   SP,STACK   
131C   CD 84 0C               CALL   coldInit   
131F   CD D2 4B               CALL   execStr   
1322   27 5C 27 27 00         DB   "'\\''",0   
1327   CD C6 0B               CALL   flushBuffer   
132A   E1                     POP   HL   
132B   E5                     PUSH   HL   
132C   11 27 00               LD   DE,$27   
132F   B7                     OR   A   
1330   ED 52                  SBC   HL,DE   
1332   7D                     LD   A,L   
1333   B4                     OR   H   
1334   CA 93 13               JP   Z,expectM_2883S49   
1337   CD 50 0C               CALL   printStr   
133A   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1345   CD 50 0C               CALL   printStr   
1348   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1357   21 27 00               LD   hl,$27   
135A   E5                     PUSH   hl   
135B   E5                     PUSH   hl   
135C   CD 55 0D               CALL   run   
135F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1367   CD C6 0B               CALL   flushBuffer   
136A   CD 50 0C               CALL   printStr   
136D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
137A   E1                     POP   hl   
137B   E5                     PUSH   hl   
137C   E5                     PUSH   hl   
137D   CD 55 0D               CALL   run   
1380   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
138F   CD C6 0B               CALL   flushBuffer   
1392   76                     HALT      
1393                EXPECTM_2883S49:      
1393   E1                     POP   HL   
1394                          ;*Macro unroll:  test "$10", $10
1394   31 00 4D               LD   SP,STACK   
1397   CD 84 0C               CALL   coldInit   
139A   CD D2 4B               CALL   execStr   
139D   24 31 30 00            DB   "$10",0   
13A1   CD C6 0B               CALL   flushBuffer   
13A4   E1                     POP   HL   
13A5   E5                     PUSH   HL   
13A6   11 10 00               LD   DE,$10   
13A9   B7                     OR   A   
13AA   ED 52                  SBC   HL,DE   
13AC   7D                     LD   A,L   
13AD   B4                     OR   H   
13AE   CA 0C 14               JP   Z,expectM_2884S50   
13B1   CD 50 0C               CALL   printStr   
13B4   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
13BE   CD 50 0C               CALL   printStr   
13C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13D0   21 10 00               LD   hl,$10   
13D3   E5                     PUSH   hl   
13D4   E5                     PUSH   hl   
13D5   CD 55 0D               CALL   run   
13D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13E0   CD C6 0B               CALL   flushBuffer   
13E3   CD 50 0C               CALL   printStr   
13E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13F3   E1                     POP   hl   
13F4   E5                     PUSH   hl   
13F5   E5                     PUSH   hl   
13F6   CD 55 0D               CALL   run   
13F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1408   CD C6 0B               CALL   flushBuffer   
140B   76                     HALT      
140C                EXPECTM_2884S50:      
140C   E1                     POP   HL   
140D                          ;*Macro unroll:  test "$FF", $FF
140D   31 00 4D               LD   SP,STACK   
1410   CD 84 0C               CALL   coldInit   
1413   CD D2 4B               CALL   execStr   
1416   24 46 46 00            DB   "$FF",0   
141A   CD C6 0B               CALL   flushBuffer   
141D   E1                     POP   HL   
141E   E5                     PUSH   HL   
141F   11 FF 00               LD   DE,$FF   
1422   B7                     OR   A   
1423   ED 52                  SBC   HL,DE   
1425   7D                     LD   A,L   
1426   B4                     OR   H   
1427   CA 85 14               JP   Z,expectM_2885S51   
142A   CD 50 0C               CALL   printStr   
142D   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1437   CD 50 0C               CALL   printStr   
143A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1449   21 FF 00               LD   hl,$FF   
144C   E5                     PUSH   hl   
144D   E5                     PUSH   hl   
144E   CD 55 0D               CALL   run   
1451   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1459   CD C6 0B               CALL   flushBuffer   
145C   CD 50 0C               CALL   printStr   
145F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146C   E1                     POP   hl   
146D   E5                     PUSH   hl   
146E   E5                     PUSH   hl   
146F   CD 55 0D               CALL   run   
1472   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1481   CD C6 0B               CALL   flushBuffer   
1484   76                     HALT      
1485                EXPECTM_2885S51:      
1485   E1                     POP   HL   
1486                          ;*Macro unroll:  test "-1 2 +",1
1486   31 00 4D               LD   SP,STACK   
1489   CD 84 0C               CALL   coldInit   
148C   CD D2 4B               CALL   execStr   
148F   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1496   CD C6 0B               CALL   flushBuffer   
1499   E1                     POP   HL   
149A   E5                     PUSH   HL   
149B   11 01 00               LD   DE,1   
149E   B7                     OR   A   
149F   ED 52                  SBC   HL,DE   
14A1   7D                     LD   A,L   
14A2   B4                     OR   H   
14A3   CA 04 15               JP   Z,expectM_2886S52   
14A6   CD 50 0C               CALL   printStr   
14A9   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
14B6   CD 50 0C               CALL   printStr   
14B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C8   21 01 00               LD   hl,1   
14CB   E5                     PUSH   hl   
14CC   E5                     PUSH   hl   
14CD   CD 55 0D               CALL   run   
14D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14D8   CD C6 0B               CALL   flushBuffer   
14DB   CD 50 0C               CALL   printStr   
14DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14EB   E1                     POP   hl   
14EC   E5                     PUSH   hl   
14ED   E5                     PUSH   hl   
14EE   CD 55 0D               CALL   run   
14F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1500   CD C6 0B               CALL   flushBuffer   
1503   76                     HALT      
1504                EXPECTM_2886S52:      
1504   E1                     POP   HL   
1505                          ;*Macro unroll:  test "-1 1 +",0
1505   31 00 4D               LD   SP,STACK   
1508   CD 84 0C               CALL   coldInit   
150B   CD D2 4B               CALL   execStr   
150E   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1515   CD C6 0B               CALL   flushBuffer   
1518   E1                     POP   HL   
1519   E5                     PUSH   HL   
151A   11 00 00               LD   DE,0   
151D   B7                     OR   A   
151E   ED 52                  SBC   HL,DE   
1520   7D                     LD   A,L   
1521   B4                     OR   H   
1522   CA 83 15               JP   Z,expectM_2887S53   
1525   CD 50 0C               CALL   printStr   
1528   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1535   CD 50 0C               CALL   printStr   
1538   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1547   21 00 00               LD   hl,0   
154A   E5                     PUSH   hl   
154B   E5                     PUSH   hl   
154C   CD 55 0D               CALL   run   
154F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1557   CD C6 0B               CALL   flushBuffer   
155A   CD 50 0C               CALL   printStr   
155D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
156A   E1                     POP   hl   
156B   E5                     PUSH   hl   
156C   E5                     PUSH   hl   
156D   CD 55 0D               CALL   run   
1570   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
157F   CD C6 0B               CALL   flushBuffer   
1582   76                     HALT      
1583                EXPECTM_2887S53:      
1583   E1                     POP   HL   
1584                          ;*Macro unroll:  test "1 2 +", 3
1584   31 00 4D               LD   SP,STACK   
1587   CD 84 0C               CALL   coldInit   
158A   CD D2 4B               CALL   execStr   
158D   31 20 32 20 2B 00      DB   "1 2 +",0   
1593   CD C6 0B               CALL   flushBuffer   
1596   E1                     POP   HL   
1597   E5                     PUSH   HL   
1598   11 03 00               LD   DE,3   
159B   B7                     OR   A   
159C   ED 52                  SBC   HL,DE   
159E   7D                     LD   A,L   
159F   B4                     OR   H   
15A0   CA 00 16               JP   Z,expectM_2888S54   
15A3   CD 50 0C               CALL   printStr   
15A6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
15B2   CD 50 0C               CALL   printStr   
15B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15C4   21 03 00               LD   hl,3   
15C7   E5                     PUSH   hl   
15C8   E5                     PUSH   hl   
15C9   CD 55 0D               CALL   run   
15CC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15D4   CD C6 0B               CALL   flushBuffer   
15D7   CD 50 0C               CALL   printStr   
15DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15E7   E1                     POP   hl   
15E8   E5                     PUSH   hl   
15E9   E5                     PUSH   hl   
15EA   CD 55 0D               CALL   run   
15ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15FC   CD C6 0B               CALL   flushBuffer   
15FF   76                     HALT      
1600                EXPECTM_2888S54:      
1600   E1                     POP   HL   
1601                          ;*Macro unroll:  test "4 1 2 +", 3
1601   31 00 4D               LD   SP,STACK   
1604   CD 84 0C               CALL   coldInit   
1607   CD D2 4B               CALL   execStr   
160A   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1612   CD C6 0B               CALL   flushBuffer   
1615   E1                     POP   HL   
1616   E5                     PUSH   HL   
1617   11 03 00               LD   DE,3   
161A   B7                     OR   A   
161B   ED 52                  SBC   HL,DE   
161D   7D                     LD   A,L   
161E   B4                     OR   H   
161F   CA 81 16               JP   Z,expectM_2889S55   
1622   CD 50 0C               CALL   printStr   
1625   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1633   CD 50 0C               CALL   printStr   
1636   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1645   21 03 00               LD   hl,3   
1648   E5                     PUSH   hl   
1649   E5                     PUSH   hl   
164A   CD 55 0D               CALL   run   
164D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1655   CD C6 0B               CALL   flushBuffer   
1658   CD 50 0C               CALL   printStr   
165B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1668   E1                     POP   hl   
1669   E5                     PUSH   hl   
166A   E5                     PUSH   hl   
166B   CD 55 0D               CALL   run   
166E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
167D   CD C6 0B               CALL   flushBuffer   
1680   76                     HALT      
1681                EXPECTM_2889S55:      
1681   E1                     POP   HL   
1682                          ;*Macro unroll:  test "123 456 +", 123+456
1682   31 00 4D               LD   SP,STACK   
1685   CD 84 0C               CALL   coldInit   
1688   CD D2 4B               CALL   execStr   
168B   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1695   CD C6 0B               CALL   flushBuffer   
1698   E1                     POP   HL   
1699   E5                     PUSH   HL   
169A   11 43 02               LD   DE,123+456   
169D   B7                     OR   A   
169E   ED 52                  SBC   HL,DE   
16A0   7D                     LD   A,L   
16A1   B4                     OR   H   
16A2   CA 06 17               JP   Z,expectM_2890S56   
16A5   CD 50 0C               CALL   printStr   
16A8   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
16B8   CD 50 0C               CALL   printStr   
16BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16CA   21 43 02               LD   hl,123+456   
16CD   E5                     PUSH   hl   
16CE   E5                     PUSH   hl   
16CF   CD 55 0D               CALL   run   
16D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16DA   CD C6 0B               CALL   flushBuffer   
16DD   CD 50 0C               CALL   printStr   
16E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16ED   E1                     POP   hl   
16EE   E5                     PUSH   hl   
16EF   E5                     PUSH   hl   
16F0   CD 55 0D               CALL   run   
16F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1702   CD C6 0B               CALL   flushBuffer   
1705   76                     HALT      
1706                EXPECTM_2890S56:      
1706   E1                     POP   HL   
1707                          ;*Macro unroll:  test "64 128 +", 64+128
1707   31 00 4D               LD   SP,STACK   
170A   CD 84 0C               CALL   coldInit   
170D   CD D2 4B               CALL   execStr   
1710   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1719   CD C6 0B               CALL   flushBuffer   
171C   E1                     POP   HL   
171D   E5                     PUSH   HL   
171E   11 C0 00               LD   DE,64+128   
1721   B7                     OR   A   
1722   ED 52                  SBC   HL,DE   
1724   7D                     LD   A,L   
1725   B4                     OR   H   
1726   CA 89 17               JP   Z,expectM_2891S57   
1729   CD 50 0C               CALL   printStr   
172C   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
173B   CD 50 0C               CALL   printStr   
173E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
174D   21 C0 00               LD   hl,64+128   
1750   E5                     PUSH   hl   
1751   E5                     PUSH   hl   
1752   CD 55 0D               CALL   run   
1755   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
175D   CD C6 0B               CALL   flushBuffer   
1760   CD 50 0C               CALL   printStr   
1763   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1770   E1                     POP   hl   
1771   E5                     PUSH   hl   
1772   E5                     PUSH   hl   
1773   CD 55 0D               CALL   run   
1776   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1785   CD C6 0B               CALL   flushBuffer   
1788   76                     HALT      
1789                EXPECTM_2891S57:      
1789   E1                     POP   HL   
178A                          ;*Macro unroll:  test "1 2 +", 3
178A   31 00 4D               LD   SP,STACK   
178D   CD 84 0C               CALL   coldInit   
1790   CD D2 4B               CALL   execStr   
1793   31 20 32 20 2B 00      DB   "1 2 +",0   
1799   CD C6 0B               CALL   flushBuffer   
179C   E1                     POP   HL   
179D   E5                     PUSH   HL   
179E   11 03 00               LD   DE,3   
17A1   B7                     OR   A   
17A2   ED 52                  SBC   HL,DE   
17A4   7D                     LD   A,L   
17A5   B4                     OR   H   
17A6   CA 06 18               JP   Z,expectM_2892S58   
17A9   CD 50 0C               CALL   printStr   
17AC   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
17B8   CD 50 0C               CALL   printStr   
17BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17CA   21 03 00               LD   hl,3   
17CD   E5                     PUSH   hl   
17CE   E5                     PUSH   hl   
17CF   CD 55 0D               CALL   run   
17D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17DA   CD C6 0B               CALL   flushBuffer   
17DD   CD 50 0C               CALL   printStr   
17E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17ED   E1                     POP   hl   
17EE   E5                     PUSH   hl   
17EF   E5                     PUSH   hl   
17F0   CD 55 0D               CALL   run   
17F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1802   CD C6 0B               CALL   flushBuffer   
1805   76                     HALT      
1806                EXPECTM_2892S58:      
1806   E1                     POP   HL   
1807                          ;*Macro unroll:  test "1a= a++ a",2
1807   31 00 4D               LD   SP,STACK   
180A   CD 84 0C               CALL   coldInit   
180D   CD D2 4B               CALL   execStr   
1810   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
181A   CD C6 0B               CALL   flushBuffer   
181D   E1                     POP   HL   
181E   E5                     PUSH   HL   
181F   11 02 00               LD   DE,2   
1822   B7                     OR   A   
1823   ED 52                  SBC   HL,DE   
1825   7D                     LD   A,L   
1826   B4                     OR   H   
1827   CA 8B 18               JP   Z,expectM_2893S59   
182A   CD 50 0C               CALL   printStr   
182D   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
183D   CD 50 0C               CALL   printStr   
1840   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
184F   21 02 00               LD   hl,2   
1852   E5                     PUSH   hl   
1853   E5                     PUSH   hl   
1854   CD 55 0D               CALL   run   
1857   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
185F   CD C6 0B               CALL   flushBuffer   
1862   CD 50 0C               CALL   printStr   
1865   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1872   E1                     POP   hl   
1873   E5                     PUSH   hl   
1874   E5                     PUSH   hl   
1875   CD 55 0D               CALL   run   
1878   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1887   CD C6 0B               CALL   flushBuffer   
188A   76                     HALT      
188B                EXPECTM_2893S59:      
188B   E1                     POP   HL   
188C                          ;*Macro unroll:  test "-1 -1 -",0
188C   31 00 4D               LD   SP,STACK   
188F   CD 84 0C               CALL   coldInit   
1892   CD D2 4B               CALL   execStr   
1895   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
189D   CD C6 0B               CALL   flushBuffer   
18A0   E1                     POP   HL   
18A1   E5                     PUSH   HL   
18A2   11 00 00               LD   DE,0   
18A5   B7                     OR   A   
18A6   ED 52                  SBC   HL,DE   
18A8   7D                     LD   A,L   
18A9   B4                     OR   H   
18AA   CA 0C 19               JP   Z,expectM_2894S60   
18AD   CD 50 0C               CALL   printStr   
18B0   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
18BE   CD 50 0C               CALL   printStr   
18C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18D0   21 00 00               LD   hl,0   
18D3   E5                     PUSH   hl   
18D4   E5                     PUSH   hl   
18D5   CD 55 0D               CALL   run   
18D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18E0   CD C6 0B               CALL   flushBuffer   
18E3   CD 50 0C               CALL   printStr   
18E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18F3   E1                     POP   hl   
18F4   E5                     PUSH   hl   
18F5   E5                     PUSH   hl   
18F6   CD 55 0D               CALL   run   
18F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1908   CD C6 0B               CALL   flushBuffer   
190B   76                     HALT      
190C                EXPECTM_2894S60:      
190C   E1                     POP   HL   
190D                          ;*Macro unroll:  test "5 3 -", 2
190D   31 00 4D               LD   SP,STACK   
1910   CD 84 0C               CALL   coldInit   
1913   CD D2 4B               CALL   execStr   
1916   35 20 33 20 2D 00      DB   "5 3 -",0   
191C   CD C6 0B               CALL   flushBuffer   
191F   E1                     POP   HL   
1920   E5                     PUSH   HL   
1921   11 02 00               LD   DE,2   
1924   B7                     OR   A   
1925   ED 52                  SBC   HL,DE   
1927   7D                     LD   A,L   
1928   B4                     OR   H   
1929   CA 89 19               JP   Z,expectM_2895S61   
192C   CD 50 0C               CALL   printStr   
192F   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
193B   CD 50 0C               CALL   printStr   
193E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
194D   21 02 00               LD   hl,2   
1950   E5                     PUSH   hl   
1951   E5                     PUSH   hl   
1952   CD 55 0D               CALL   run   
1955   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
195D   CD C6 0B               CALL   flushBuffer   
1960   CD 50 0C               CALL   printStr   
1963   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1970   E1                     POP   hl   
1971   E5                     PUSH   hl   
1972   E5                     PUSH   hl   
1973   CD 55 0D               CALL   run   
1976   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1985   CD C6 0B               CALL   flushBuffer   
1988   76                     HALT      
1989                EXPECTM_2895S61:      
1989   E1                     POP   HL   
198A                          ;*Macro unroll:  test "2 1 -",1
198A   31 00 4D               LD   SP,STACK   
198D   CD 84 0C               CALL   coldInit   
1990   CD D2 4B               CALL   execStr   
1993   32 20 31 20 2D 00      DB   "2 1 -",0   
1999   CD C6 0B               CALL   flushBuffer   
199C   E1                     POP   HL   
199D   E5                     PUSH   HL   
199E   11 01 00               LD   DE,1   
19A1   B7                     OR   A   
19A2   ED 52                  SBC   HL,DE   
19A4   7D                     LD   A,L   
19A5   B4                     OR   H   
19A6   CA 06 1A               JP   Z,expectM_2896S62   
19A9   CD 50 0C               CALL   printStr   
19AC   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
19B8   CD 50 0C               CALL   printStr   
19BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CA   21 01 00               LD   hl,1   
19CD   E5                     PUSH   hl   
19CE   E5                     PUSH   hl   
19CF   CD 55 0D               CALL   run   
19D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19DA   CD C6 0B               CALL   flushBuffer   
19DD   CD 50 0C               CALL   printStr   
19E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19ED   E1                     POP   hl   
19EE   E5                     PUSH   hl   
19EF   E5                     PUSH   hl   
19F0   CD 55 0D               CALL   run   
19F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A02   CD C6 0B               CALL   flushBuffer   
1A05   76                     HALT      
1A06                EXPECTM_2896S62:      
1A06   E1                     POP   HL   
1A07                          ;*Macro unroll:  test "3a= a-- a",2
1A07   31 00 4D               LD   SP,STACK   
1A0A   CD 84 0C               CALL   coldInit   
1A0D   CD D2 4B               CALL   execStr   
1A10   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1A1A   CD C6 0B               CALL   flushBuffer   
1A1D   E1                     POP   HL   
1A1E   E5                     PUSH   HL   
1A1F   11 02 00               LD   DE,2   
1A22   B7                     OR   A   
1A23   ED 52                  SBC   HL,DE   
1A25   7D                     LD   A,L   
1A26   B4                     OR   H   
1A27   CA 8B 1A               JP   Z,expectM_2897S63   
1A2A   CD 50 0C               CALL   printStr   
1A2D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1A3D   CD 50 0C               CALL   printStr   
1A40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A4F   21 02 00               LD   hl,2   
1A52   E5                     PUSH   hl   
1A53   E5                     PUSH   hl   
1A54   CD 55 0D               CALL   run   
1A57   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A5F   CD C6 0B               CALL   flushBuffer   
1A62   CD 50 0C               CALL   printStr   
1A65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A72   E1                     POP   hl   
1A73   E5                     PUSH   hl   
1A74   E5                     PUSH   hl   
1A75   CD 55 0D               CALL   run   
1A78   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A87   CD C6 0B               CALL   flushBuffer   
1A8A   76                     HALT      
1A8B                EXPECTM_2897S63:      
1A8B   E1                     POP   HL   
1A8C                          ;*Macro unroll:  test "3 5 &", 1
1A8C   31 00 4D               LD   SP,STACK   
1A8F   CD 84 0C               CALL   coldInit   
1A92   CD D2 4B               CALL   execStr   
1A95   33 20 35 20 26 00      DB   "3 5 &",0   
1A9B   CD C6 0B               CALL   flushBuffer   
1A9E   E1                     POP   HL   
1A9F   E5                     PUSH   HL   
1AA0   11 01 00               LD   DE,1   
1AA3   B7                     OR   A   
1AA4   ED 52                  SBC   HL,DE   
1AA6   7D                     LD   A,L   
1AA7   B4                     OR   H   
1AA8   CA 08 1B               JP   Z,expectM_2898S64   
1AAB   CD 50 0C               CALL   printStr   
1AAE   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1ABA   CD 50 0C               CALL   printStr   
1ABD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ACC   21 01 00               LD   hl,1   
1ACF   E5                     PUSH   hl   
1AD0   E5                     PUSH   hl   
1AD1   CD 55 0D               CALL   run   
1AD4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1ADC   CD C6 0B               CALL   flushBuffer   
1ADF   CD 50 0C               CALL   printStr   
1AE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AEF   E1                     POP   hl   
1AF0   E5                     PUSH   hl   
1AF1   E5                     PUSH   hl   
1AF2   CD 55 0D               CALL   run   
1AF5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B04   CD C6 0B               CALL   flushBuffer   
1B07   76                     HALT      
1B08                EXPECTM_2898S64:      
1B08   E1                     POP   HL   
1B09                          ;*Macro unroll:  test "3 5 |", 7
1B09   31 00 4D               LD   SP,STACK   
1B0C   CD 84 0C               CALL   coldInit   
1B0F   CD D2 4B               CALL   execStr   
1B12   33 20 35 20 7C 00      DB   "3 5 |",0   
1B18   CD C6 0B               CALL   flushBuffer   
1B1B   E1                     POP   HL   
1B1C   E5                     PUSH   HL   
1B1D   11 07 00               LD   DE,7   
1B20   B7                     OR   A   
1B21   ED 52                  SBC   HL,DE   
1B23   7D                     LD   A,L   
1B24   B4                     OR   H   
1B25   CA 85 1B               JP   Z,expectM_2899S65   
1B28   CD 50 0C               CALL   printStr   
1B2B   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1B37   CD 50 0C               CALL   printStr   
1B3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B49   21 07 00               LD   hl,7   
1B4C   E5                     PUSH   hl   
1B4D   E5                     PUSH   hl   
1B4E   CD 55 0D               CALL   run   
1B51   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B59   CD C6 0B               CALL   flushBuffer   
1B5C   CD 50 0C               CALL   printStr   
1B5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B6C   E1                     POP   hl   
1B6D   E5                     PUSH   hl   
1B6E   E5                     PUSH   hl   
1B6F   CD 55 0D               CALL   run   
1B72   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B81   CD C6 0B               CALL   flushBuffer   
1B84   76                     HALT      
1B85                EXPECTM_2899S65:      
1B85   E1                     POP   HL   
1B86                          ;*Macro unroll:  test "3 5 /x", 6
1B86   31 00 4D               LD   SP,STACK   
1B89   CD 84 0C               CALL   coldInit   
1B8C   CD D2 4B               CALL   execStr   
1B8F   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1B96   CD C6 0B               CALL   flushBuffer   
1B99   E1                     POP   HL   
1B9A   E5                     PUSH   HL   
1B9B   11 06 00               LD   DE,6   
1B9E   B7                     OR   A   
1B9F   ED 52                  SBC   HL,DE   
1BA1   7D                     LD   A,L   
1BA2   B4                     OR   H   
1BA3   CA 04 1C               JP   Z,expectM_2900S66   
1BA6   CD 50 0C               CALL   printStr   
1BA9   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1BB6   CD 50 0C               CALL   printStr   
1BB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BC8   21 06 00               LD   hl,6   
1BCB   E5                     PUSH   hl   
1BCC   E5                     PUSH   hl   
1BCD   CD 55 0D               CALL   run   
1BD0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BD8   CD C6 0B               CALL   flushBuffer   
1BDB   CD 50 0C               CALL   printStr   
1BDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BEB   E1                     POP   hl   
1BEC   E5                     PUSH   hl   
1BED   E5                     PUSH   hl   
1BEE   CD 55 0D               CALL   run   
1BF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C00   CD C6 0B               CALL   flushBuffer   
1C03   76                     HALT      
1C04                EXPECTM_2900S66:      
1C04   E1                     POP   HL   
1C05                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1C05   31 00 4D               LD   SP,STACK   
1C08   CD 84 0C               CALL   coldInit   
1C0B   CD D2 4B               CALL   execStr   
1C0E   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1C1D   CD C6 0B               CALL   flushBuffer   
1C20   E1                     POP   HL   
1C21   E5                     PUSH   HL   
1C22   11 06 00               LD   DE,6   
1C25   B7                     OR   A   
1C26   ED 52                  SBC   HL,DE   
1C28   7D                     LD   A,L   
1C29   B4                     OR   H   
1C2A   CA 93 1C               JP   Z,expectM_2901S67   
1C2D   CD 50 0C               CALL   printStr   
1C30   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1C45   CD 50 0C               CALL   printStr   
1C48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C57   21 06 00               LD   hl,6   
1C5A   E5                     PUSH   hl   
1C5B   E5                     PUSH   hl   
1C5C   CD 55 0D               CALL   run   
1C5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C67   CD C6 0B               CALL   flushBuffer   
1C6A   CD 50 0C               CALL   printStr   
1C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7A   E1                     POP   hl   
1C7B   E5                     PUSH   hl   
1C7C   E5                     PUSH   hl   
1C7D   CD 55 0D               CALL   run   
1C80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C8F   CD C6 0B               CALL   flushBuffer   
1C92   76                     HALT      
1C93                EXPECTM_2901S67:      
1C93   E1                     POP   HL   
1C94                          ;*Macro unroll:  test "2 3 *", 6
1C94   31 00 4D               LD   SP,STACK   
1C97   CD 84 0C               CALL   coldInit   
1C9A   CD D2 4B               CALL   execStr   
1C9D   32 20 33 20 2A 00      DB   "2 3 *",0   
1CA3   CD C6 0B               CALL   flushBuffer   
1CA6   E1                     POP   HL   
1CA7   E5                     PUSH   HL   
1CA8   11 06 00               LD   DE,6   
1CAB   B7                     OR   A   
1CAC   ED 52                  SBC   HL,DE   
1CAE   7D                     LD   A,L   
1CAF   B4                     OR   H   
1CB0   CA 10 1D               JP   Z,expectM_2902S68   
1CB3   CD 50 0C               CALL   printStr   
1CB6   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1CC2   CD 50 0C               CALL   printStr   
1CC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD4   21 06 00               LD   hl,6   
1CD7   E5                     PUSH   hl   
1CD8   E5                     PUSH   hl   
1CD9   CD 55 0D               CALL   run   
1CDC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CE4   CD C6 0B               CALL   flushBuffer   
1CE7   CD 50 0C               CALL   printStr   
1CEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CF7   E1                     POP   hl   
1CF8   E5                     PUSH   hl   
1CF9   E5                     PUSH   hl   
1CFA   CD 55 0D               CALL   run   
1CFD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D0C   CD C6 0B               CALL   flushBuffer   
1D0F   76                     HALT      
1D10                EXPECTM_2902S68:      
1D10   E1                     POP   HL   
1D11                          ;*Macro unroll:  test "1 2 3 + *", 5
1D11   31 00 4D               LD   SP,STACK   
1D14   CD 84 0C               CALL   coldInit   
1D17   CD D2 4B               CALL   execStr   
1D1A   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1D24   CD C6 0B               CALL   flushBuffer   
1D27   E1                     POP   HL   
1D28   E5                     PUSH   HL   
1D29   11 05 00               LD   DE,5   
1D2C   B7                     OR   A   
1D2D   ED 52                  SBC   HL,DE   
1D2F   7D                     LD   A,L   
1D30   B4                     OR   H   
1D31   CA 95 1D               JP   Z,expectM_2903S69   
1D34   CD 50 0C               CALL   printStr   
1D37   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1D47   CD 50 0C               CALL   printStr   
1D4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D59   21 05 00               LD   hl,5   
1D5C   E5                     PUSH   hl   
1D5D   E5                     PUSH   hl   
1D5E   CD 55 0D               CALL   run   
1D61   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D69   CD C6 0B               CALL   flushBuffer   
1D6C   CD 50 0C               CALL   printStr   
1D6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7C   E1                     POP   hl   
1D7D   E5                     PUSH   hl   
1D7E   E5                     PUSH   hl   
1D7F   CD 55 0D               CALL   run   
1D82   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D91   CD C6 0B               CALL   flushBuffer   
1D94   76                     HALT      
1D95                EXPECTM_2903S69:      
1D95   E1                     POP   HL   
1D96                          ;*Macro unroll:  test "7 3 /", 2
1D96   31 00 4D               LD   SP,STACK   
1D99   CD 84 0C               CALL   coldInit   
1D9C   CD D2 4B               CALL   execStr   
1D9F   37 20 33 20 2F 00      DB   "7 3 /",0   
1DA5   CD C6 0B               CALL   flushBuffer   
1DA8   E1                     POP   HL   
1DA9   E5                     PUSH   HL   
1DAA   11 02 00               LD   DE,2   
1DAD   B7                     OR   A   
1DAE   ED 52                  SBC   HL,DE   
1DB0   7D                     LD   A,L   
1DB1   B4                     OR   H   
1DB2   CA 12 1E               JP   Z,expectM_2904S70   
1DB5   CD 50 0C               CALL   printStr   
1DB8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1DC4   CD 50 0C               CALL   printStr   
1DC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD6   21 02 00               LD   hl,2   
1DD9   E5                     PUSH   hl   
1DDA   E5                     PUSH   hl   
1DDB   CD 55 0D               CALL   run   
1DDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DE6   CD C6 0B               CALL   flushBuffer   
1DE9   CD 50 0C               CALL   printStr   
1DEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DF9   E1                     POP   hl   
1DFA   E5                     PUSH   hl   
1DFB   E5                     PUSH   hl   
1DFC   CD 55 0D               CALL   run   
1DFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E0E   CD C6 0B               CALL   flushBuffer   
1E11   76                     HALT      
1E12                EXPECTM_2904S70:      
1E12   E1                     POP   HL   
1E13                          ;*Macro unroll:  test "100a= 1a+= a", 101
1E13   31 00 4D               LD   SP,STACK   
1E16   CD 84 0C               CALL   coldInit   
1E19   CD D2 4B               CALL   execStr   
1E1C   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
1E29   CD C6 0B               CALL   flushBuffer   
1E2C   E1                     POP   HL   
1E2D   E5                     PUSH   HL   
1E2E   11 65 00               LD   DE,101   
1E31   B7                     OR   A   
1E32   ED 52                  SBC   HL,DE   
1E34   7D                     LD   A,L   
1E35   B4                     OR   H   
1E36   CA 9D 1E               JP   Z,expectM_2905S71   
1E39   CD 50 0C               CALL   printStr   
1E3C   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
1E4F   CD 50 0C               CALL   printStr   
1E52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E61   21 65 00               LD   hl,101   
1E64   E5                     PUSH   hl   
1E65   E5                     PUSH   hl   
1E66   CD 55 0D               CALL   run   
1E69   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E71   CD C6 0B               CALL   flushBuffer   
1E74   CD 50 0C               CALL   printStr   
1E77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E84   E1                     POP   hl   
1E85   E5                     PUSH   hl   
1E86   E5                     PUSH   hl   
1E87   CD 55 0D               CALL   run   
1E8A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E99   CD C6 0B               CALL   flushBuffer   
1E9C   76                     HALT      
1E9D                EXPECTM_2905S71:      
1E9D   E1                     POP   HL   
1E9E                          ;*Macro unroll:  test "100a= a1-= a", 99
1E9E   31 00 4D               LD   SP,STACK   
1EA1   CD 84 0C               CALL   coldInit   
1EA4   CD D2 4B               CALL   execStr   
1EA7   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
1EB4   CD C6 0B               CALL   flushBuffer   
1EB7   E1                     POP   HL   
1EB8   E5                     PUSH   HL   
1EB9   11 63 00               LD   DE,99   
1EBC   B7                     OR   A   
1EBD   ED 52                  SBC   HL,DE   
1EBF   7D                     LD   A,L   
1EC0   B4                     OR   H   
1EC1   CA 28 1F               JP   Z,expectM_2906S72   
1EC4   CD 50 0C               CALL   printStr   
1EC7   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
1EDA   CD 50 0C               CALL   printStr   
1EDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EEC   21 63 00               LD   hl,99   
1EEF   E5                     PUSH   hl   
1EF0   E5                     PUSH   hl   
1EF1   CD 55 0D               CALL   run   
1EF4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EFC   CD C6 0B               CALL   flushBuffer   
1EFF   CD 50 0C               CALL   printStr   
1F02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F0F   E1                     POP   hl   
1F10   E5                     PUSH   hl   
1F11   E5                     PUSH   hl   
1F12   CD 55 0D               CALL   run   
1F15   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F24   CD C6 0B               CALL   flushBuffer   
1F27   76                     HALT      
1F28                EXPECTM_2906S72:      
1F28   E1                     POP   HL   
1F29                          ;*Macro unroll:  test "100a= a2*= a", 200
1F29   31 00 4D               LD   SP,STACK   
1F2C   CD 84 0C               CALL   coldInit   
1F2F   CD D2 4B               CALL   execStr   
1F32   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
1F3F   CD C6 0B               CALL   flushBuffer   
1F42   E1                     POP   HL   
1F43   E5                     PUSH   HL   
1F44   11 C8 00               LD   DE,200   
1F47   B7                     OR   A   
1F48   ED 52                  SBC   HL,DE   
1F4A   7D                     LD   A,L   
1F4B   B4                     OR   H   
1F4C   CA B3 1F               JP   Z,expectM_2907S73   
1F4F   CD 50 0C               CALL   printStr   
1F52   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
1F65   CD 50 0C               CALL   printStr   
1F68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F77   21 C8 00               LD   hl,200   
1F7A   E5                     PUSH   hl   
1F7B   E5                     PUSH   hl   
1F7C   CD 55 0D               CALL   run   
1F7F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F87   CD C6 0B               CALL   flushBuffer   
1F8A   CD 50 0C               CALL   printStr   
1F8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F9A   E1                     POP   hl   
1F9B   E5                     PUSH   hl   
1F9C   E5                     PUSH   hl   
1F9D   CD 55 0D               CALL   run   
1FA0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FAF   CD C6 0B               CALL   flushBuffer   
1FB2   76                     HALT      
1FB3                EXPECTM_2907S73:      
1FB3   E1                     POP   HL   
1FB4                          ;*Macro unroll:  test "100a= a2/= a", 50
1FB4   31 00 4D               LD   SP,STACK   
1FB7   CD 84 0C               CALL   coldInit   
1FBA   CD D2 4B               CALL   execStr   
1FBD   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
1FCA   CD C6 0B               CALL   flushBuffer   
1FCD   E1                     POP   HL   
1FCE   E5                     PUSH   HL   
1FCF   11 32 00               LD   DE,50   
1FD2   B7                     OR   A   
1FD3   ED 52                  SBC   HL,DE   
1FD5   7D                     LD   A,L   
1FD6   B4                     OR   H   
1FD7   CA 3E 20               JP   Z,expectM_2908S74   
1FDA   CD 50 0C               CALL   printStr   
1FDD   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
1FF0   CD 50 0C               CALL   printStr   
1FF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2002   21 32 00               LD   hl,50   
2005   E5                     PUSH   hl   
2006   E5                     PUSH   hl   
2007   CD 55 0D               CALL   run   
200A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2012   CD C6 0B               CALL   flushBuffer   
2015   CD 50 0C               CALL   printStr   
2018   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2025   E1                     POP   hl   
2026   E5                     PUSH   hl   
2027   E5                     PUSH   hl   
2028   CD 55 0D               CALL   run   
202B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
203A   CD C6 0B               CALL   flushBuffer   
203D   76                     HALT      
203E                EXPECTM_2908S74:      
203E   E1                     POP   HL   
203F                          ;*Macro unroll:  test "7 3 / /re", 1
203F   31 00 4D               LD   SP,STACK   
2042   CD 84 0C               CALL   coldInit   
2045   CD D2 4B               CALL   execStr   
2048   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2052   CD C6 0B               CALL   flushBuffer   
2055   E1                     POP   HL   
2056   E5                     PUSH   HL   
2057   11 01 00               LD   DE,1   
205A   B7                     OR   A   
205B   ED 52                  SBC   HL,DE   
205D   7D                     LD   A,L   
205E   B4                     OR   H   
205F   CA C3 20               JP   Z,expectM_2909S75   
2062   CD 50 0C               CALL   printStr   
2065   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2075   CD 50 0C               CALL   printStr   
2078   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2087   21 01 00               LD   hl,1   
208A   E5                     PUSH   hl   
208B   E5                     PUSH   hl   
208C   CD 55 0D               CALL   run   
208F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2097   CD C6 0B               CALL   flushBuffer   
209A   CD 50 0C               CALL   printStr   
209D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20AA   E1                     POP   hl   
20AB   E5                     PUSH   hl   
20AC   E5                     PUSH   hl   
20AD   CD 55 0D               CALL   run   
20B0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20BF   CD C6 0B               CALL   flushBuffer   
20C2   76                     HALT      
20C3                EXPECTM_2909S75:      
20C3   E1                     POP   HL   
20C4                          ;*Macro unroll:  test "7 3 /", 2
20C4   31 00 4D               LD   SP,STACK   
20C7   CD 84 0C               CALL   coldInit   
20CA   CD D2 4B               CALL   execStr   
20CD   37 20 33 20 2F 00      DB   "7 3 /",0   
20D3   CD C6 0B               CALL   flushBuffer   
20D6   E1                     POP   HL   
20D7   E5                     PUSH   HL   
20D8   11 02 00               LD   DE,2   
20DB   B7                     OR   A   
20DC   ED 52                  SBC   HL,DE   
20DE   7D                     LD   A,L   
20DF   B4                     OR   H   
20E0   CA 40 21               JP   Z,expectM_2910S76   
20E3   CD 50 0C               CALL   printStr   
20E6   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
20F2   CD 50 0C               CALL   printStr   
20F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2104   21 02 00               LD   hl,2   
2107   E5                     PUSH   hl   
2108   E5                     PUSH   hl   
2109   CD 55 0D               CALL   run   
210C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2114   CD C6 0B               CALL   flushBuffer   
2117   CD 50 0C               CALL   printStr   
211A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2127   E1                     POP   hl   
2128   E5                     PUSH   hl   
2129   E5                     PUSH   hl   
212A   CD 55 0D               CALL   run   
212D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
213C   CD C6 0B               CALL   flushBuffer   
213F   76                     HALT      
2140                EXPECTM_2910S76:      
2140   E1                     POP   HL   
2141                          ;*Macro unroll:  test "2 3 ==", FALSE
2141   31 00 4D               LD   SP,STACK   
2144   CD 84 0C               CALL   coldInit   
2147   CD D2 4B               CALL   execStr   
214A   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2151   CD C6 0B               CALL   flushBuffer   
2154   E1                     POP   HL   
2155   E5                     PUSH   HL   
2156   11 00 00               LD   DE,FALSE   
2159   B7                     OR   A   
215A   ED 52                  SBC   HL,DE   
215C   7D                     LD   A,L   
215D   B4                     OR   H   
215E   CA BF 21               JP   Z,expectM_2911S77   
2161   CD 50 0C               CALL   printStr   
2164   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2171   CD 50 0C               CALL   printStr   
2174   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2183   21 00 00               LD   hl,FALSE   
2186   E5                     PUSH   hl   
2187   E5                     PUSH   hl   
2188   CD 55 0D               CALL   run   
218B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2193   CD C6 0B               CALL   flushBuffer   
2196   CD 50 0C               CALL   printStr   
2199   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21A6   E1                     POP   hl   
21A7   E5                     PUSH   hl   
21A8   E5                     PUSH   hl   
21A9   CD 55 0D               CALL   run   
21AC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21BB   CD C6 0B               CALL   flushBuffer   
21BE   76                     HALT      
21BF                EXPECTM_2911S77:      
21BF   E1                     POP   HL   
21C0                          ;*Macro unroll:  test "3 3 ==", TRUE
21C0   31 00 4D               LD   SP,STACK   
21C3   CD 84 0C               CALL   coldInit   
21C6   CD D2 4B               CALL   execStr   
21C9   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
21D0   CD C6 0B               CALL   flushBuffer   
21D3   E1                     POP   HL   
21D4   E5                     PUSH   HL   
21D5   11 FF FF               LD   DE,TRUE   
21D8   B7                     OR   A   
21D9   ED 52                  SBC   HL,DE   
21DB   7D                     LD   A,L   
21DC   B4                     OR   H   
21DD   CA 3E 22               JP   Z,expectM_2912S78   
21E0   CD 50 0C               CALL   printStr   
21E3   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
21F0   CD 50 0C               CALL   printStr   
21F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2202   21 FF FF               LD   hl,TRUE   
2205   E5                     PUSH   hl   
2206   E5                     PUSH   hl   
2207   CD 55 0D               CALL   run   
220A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2212   CD C6 0B               CALL   flushBuffer   
2215   CD 50 0C               CALL   printStr   
2218   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2225   E1                     POP   hl   
2226   E5                     PUSH   hl   
2227   E5                     PUSH   hl   
2228   CD 55 0D               CALL   run   
222B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
223A   CD C6 0B               CALL   flushBuffer   
223D   76                     HALT      
223E                EXPECTM_2912S78:      
223E   E1                     POP   HL   
223F                          ;*Macro unroll:  test "1 2 <", TRUE
223F   31 00 4D               LD   SP,STACK   
2242   CD 84 0C               CALL   coldInit   
2245   CD D2 4B               CALL   execStr   
2248   31 20 32 20 3C 00      DB   "1 2 <",0   
224E   CD C6 0B               CALL   flushBuffer   
2251   E1                     POP   HL   
2252   E5                     PUSH   HL   
2253   11 FF FF               LD   DE,TRUE   
2256   B7                     OR   A   
2257   ED 52                  SBC   HL,DE   
2259   7D                     LD   A,L   
225A   B4                     OR   H   
225B   CA BB 22               JP   Z,expectM_2913S79   
225E   CD 50 0C               CALL   printStr   
2261   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
226D   CD 50 0C               CALL   printStr   
2270   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
227F   21 FF FF               LD   hl,TRUE   
2282   E5                     PUSH   hl   
2283   E5                     PUSH   hl   
2284   CD 55 0D               CALL   run   
2287   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
228F   CD C6 0B               CALL   flushBuffer   
2292   CD 50 0C               CALL   printStr   
2295   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22A2   E1                     POP   hl   
22A3   E5                     PUSH   hl   
22A4   E5                     PUSH   hl   
22A5   CD 55 0D               CALL   run   
22A8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22B7   CD C6 0B               CALL   flushBuffer   
22BA   76                     HALT      
22BB                EXPECTM_2913S79:      
22BB   E1                     POP   HL   
22BC                          ;*Macro unroll:  test "2 1 <", FALSE
22BC   31 00 4D               LD   SP,STACK   
22BF   CD 84 0C               CALL   coldInit   
22C2   CD D2 4B               CALL   execStr   
22C5   32 20 31 20 3C 00      DB   "2 1 <",0   
22CB   CD C6 0B               CALL   flushBuffer   
22CE   E1                     POP   HL   
22CF   E5                     PUSH   HL   
22D0   11 00 00               LD   DE,FALSE   
22D3   B7                     OR   A   
22D4   ED 52                  SBC   HL,DE   
22D6   7D                     LD   A,L   
22D7   B4                     OR   H   
22D8   CA 38 23               JP   Z,expectM_2914S80   
22DB   CD 50 0C               CALL   printStr   
22DE   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
22EA   CD 50 0C               CALL   printStr   
22ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22FC   21 00 00               LD   hl,FALSE   
22FF   E5                     PUSH   hl   
2300   E5                     PUSH   hl   
2301   CD 55 0D               CALL   run   
2304   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
230C   CD C6 0B               CALL   flushBuffer   
230F   CD 50 0C               CALL   printStr   
2312   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
231F   E1                     POP   hl   
2320   E5                     PUSH   hl   
2321   E5                     PUSH   hl   
2322   CD 55 0D               CALL   run   
2325   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2334   CD C6 0B               CALL   flushBuffer   
2337   76                     HALT      
2338                EXPECTM_2914S80:      
2338   E1                     POP   HL   
2339                          ;*Macro unroll:  test "2 3 <", TRUE
2339   31 00 4D               LD   SP,STACK   
233C   CD 84 0C               CALL   coldInit   
233F   CD D2 4B               CALL   execStr   
2342   32 20 33 20 3C 00      DB   "2 3 <",0   
2348   CD C6 0B               CALL   flushBuffer   
234B   E1                     POP   HL   
234C   E5                     PUSH   HL   
234D   11 FF FF               LD   DE,TRUE   
2350   B7                     OR   A   
2351   ED 52                  SBC   HL,DE   
2353   7D                     LD   A,L   
2354   B4                     OR   H   
2355   CA B5 23               JP   Z,expectM_2915S81   
2358   CD 50 0C               CALL   printStr   
235B   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2367   CD 50 0C               CALL   printStr   
236A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2379   21 FF FF               LD   hl,TRUE   
237C   E5                     PUSH   hl   
237D   E5                     PUSH   hl   
237E   CD 55 0D               CALL   run   
2381   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2389   CD C6 0B               CALL   flushBuffer   
238C   CD 50 0C               CALL   printStr   
238F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
239C   E1                     POP   hl   
239D   E5                     PUSH   hl   
239E   E5                     PUSH   hl   
239F   CD 55 0D               CALL   run   
23A2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23B1   CD C6 0B               CALL   flushBuffer   
23B4   76                     HALT      
23B5                EXPECTM_2915S81:      
23B5   E1                     POP   HL   
23B6                          ;*Macro unroll:  test "3 3 <", FALSE
23B6   31 00 4D               LD   SP,STACK   
23B9   CD 84 0C               CALL   coldInit   
23BC   CD D2 4B               CALL   execStr   
23BF   33 20 33 20 3C 00      DB   "3 3 <",0   
23C5   CD C6 0B               CALL   flushBuffer   
23C8   E1                     POP   HL   
23C9   E5                     PUSH   HL   
23CA   11 00 00               LD   DE,FALSE   
23CD   B7                     OR   A   
23CE   ED 52                  SBC   HL,DE   
23D0   7D                     LD   A,L   
23D1   B4                     OR   H   
23D2   CA 32 24               JP   Z,expectM_2916S82   
23D5   CD 50 0C               CALL   printStr   
23D8   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
23E4   CD 50 0C               CALL   printStr   
23E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23F6   21 00 00               LD   hl,FALSE   
23F9   E5                     PUSH   hl   
23FA   E5                     PUSH   hl   
23FB   CD 55 0D               CALL   run   
23FE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2406   CD C6 0B               CALL   flushBuffer   
2409   CD 50 0C               CALL   printStr   
240C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2419   E1                     POP   hl   
241A   E5                     PUSH   hl   
241B   E5                     PUSH   hl   
241C   CD 55 0D               CALL   run   
241F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
242E   CD C6 0B               CALL   flushBuffer   
2431   76                     HALT      
2432                EXPECTM_2916S82:      
2432   E1                     POP   HL   
2433                          ;*Macro unroll:  test "1 2 >", FALSE
2433   31 00 4D               LD   SP,STACK   
2436   CD 84 0C               CALL   coldInit   
2439   CD D2 4B               CALL   execStr   
243C   31 20 32 20 3E 00      DB   "1 2 >",0   
2442   CD C6 0B               CALL   flushBuffer   
2445   E1                     POP   HL   
2446   E5                     PUSH   HL   
2447   11 00 00               LD   DE,FALSE   
244A   B7                     OR   A   
244B   ED 52                  SBC   HL,DE   
244D   7D                     LD   A,L   
244E   B4                     OR   H   
244F   CA AF 24               JP   Z,expectM_2917S83   
2452   CD 50 0C               CALL   printStr   
2455   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2461   CD 50 0C               CALL   printStr   
2464   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2473   21 00 00               LD   hl,FALSE   
2476   E5                     PUSH   hl   
2477   E5                     PUSH   hl   
2478   CD 55 0D               CALL   run   
247B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2483   CD C6 0B               CALL   flushBuffer   
2486   CD 50 0C               CALL   printStr   
2489   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2496   E1                     POP   hl   
2497   E5                     PUSH   hl   
2498   E5                     PUSH   hl   
2499   CD 55 0D               CALL   run   
249C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24AB   CD C6 0B               CALL   flushBuffer   
24AE   76                     HALT      
24AF                EXPECTM_2917S83:      
24AF   E1                     POP   HL   
24B0                          ;*Macro unroll:  test "2 1 >", TRUE
24B0   31 00 4D               LD   SP,STACK   
24B3   CD 84 0C               CALL   coldInit   
24B6   CD D2 4B               CALL   execStr   
24B9   32 20 31 20 3E 00      DB   "2 1 >",0   
24BF   CD C6 0B               CALL   flushBuffer   
24C2   E1                     POP   HL   
24C3   E5                     PUSH   HL   
24C4   11 FF FF               LD   DE,TRUE   
24C7   B7                     OR   A   
24C8   ED 52                  SBC   HL,DE   
24CA   7D                     LD   A,L   
24CB   B4                     OR   H   
24CC   CA 2C 25               JP   Z,expectM_2918S84   
24CF   CD 50 0C               CALL   printStr   
24D2   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
24DE   CD 50 0C               CALL   printStr   
24E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24F0   21 FF FF               LD   hl,TRUE   
24F3   E5                     PUSH   hl   
24F4   E5                     PUSH   hl   
24F5   CD 55 0D               CALL   run   
24F8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2500   CD C6 0B               CALL   flushBuffer   
2503   CD 50 0C               CALL   printStr   
2506   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2513   E1                     POP   hl   
2514   E5                     PUSH   hl   
2515   E5                     PUSH   hl   
2516   CD 55 0D               CALL   run   
2519   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2528   CD C6 0B               CALL   flushBuffer   
252B   76                     HALT      
252C                EXPECTM_2918S84:      
252C   E1                     POP   HL   
252D                          ;*Macro unroll:  test "3 3 >", FALSE
252D   31 00 4D               LD   SP,STACK   
2530   CD 84 0C               CALL   coldInit   
2533   CD D2 4B               CALL   execStr   
2536   33 20 33 20 3E 00      DB   "3 3 >",0   
253C   CD C6 0B               CALL   flushBuffer   
253F   E1                     POP   HL   
2540   E5                     PUSH   HL   
2541   11 00 00               LD   DE,FALSE   
2544   B7                     OR   A   
2545   ED 52                  SBC   HL,DE   
2547   7D                     LD   A,L   
2548   B4                     OR   H   
2549   CA A9 25               JP   Z,expectM_2919S85   
254C   CD 50 0C               CALL   printStr   
254F   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
255B   CD 50 0C               CALL   printStr   
255E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
256D   21 00 00               LD   hl,FALSE   
2570   E5                     PUSH   hl   
2571   E5                     PUSH   hl   
2572   CD 55 0D               CALL   run   
2575   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
257D   CD C6 0B               CALL   flushBuffer   
2580   CD 50 0C               CALL   printStr   
2583   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2590   E1                     POP   hl   
2591   E5                     PUSH   hl   
2592   E5                     PUSH   hl   
2593   CD 55 0D               CALL   run   
2596   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25A5   CD C6 0B               CALL   flushBuffer   
25A8   76                     HALT      
25A9                EXPECTM_2919S85:      
25A9   E1                     POP   HL   
25AA                          ;*Macro unroll:  test "4 3 >", TRUE
25AA   31 00 4D               LD   SP,STACK   
25AD   CD 84 0C               CALL   coldInit   
25B0   CD D2 4B               CALL   execStr   
25B3   34 20 33 20 3E 00      DB   "4 3 >",0   
25B9   CD C6 0B               CALL   flushBuffer   
25BC   E1                     POP   HL   
25BD   E5                     PUSH   HL   
25BE   11 FF FF               LD   DE,TRUE   
25C1   B7                     OR   A   
25C2   ED 52                  SBC   HL,DE   
25C4   7D                     LD   A,L   
25C5   B4                     OR   H   
25C6   CA 26 26               JP   Z,expectM_2920S86   
25C9   CD 50 0C               CALL   printStr   
25CC   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
25D8   CD 50 0C               CALL   printStr   
25DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25EA   21 FF FF               LD   hl,TRUE   
25ED   E5                     PUSH   hl   
25EE   E5                     PUSH   hl   
25EF   CD 55 0D               CALL   run   
25F2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25FA   CD C6 0B               CALL   flushBuffer   
25FD   CD 50 0C               CALL   printStr   
2600   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
260D   E1                     POP   hl   
260E   E5                     PUSH   hl   
260F   E5                     PUSH   hl   
2610   CD 55 0D               CALL   run   
2613   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2622   CD C6 0B               CALL   flushBuffer   
2625   76                     HALT      
2626                EXPECTM_2920S86:      
2626   E1                     POP   HL   
2627                          ;*Macro unroll:  test "2 2 <=", TRUE
2627   31 00 4D               LD   SP,STACK   
262A   CD 84 0C               CALL   coldInit   
262D   CD D2 4B               CALL   execStr   
2630   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2637   CD C6 0B               CALL   flushBuffer   
263A   E1                     POP   HL   
263B   E5                     PUSH   HL   
263C   11 FF FF               LD   DE,TRUE   
263F   B7                     OR   A   
2640   ED 52                  SBC   HL,DE   
2642   7D                     LD   A,L   
2643   B4                     OR   H   
2644   CA A5 26               JP   Z,expectM_2921S87   
2647   CD 50 0C               CALL   printStr   
264A   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2657   CD 50 0C               CALL   printStr   
265A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2669   21 FF FF               LD   hl,TRUE   
266C   E5                     PUSH   hl   
266D   E5                     PUSH   hl   
266E   CD 55 0D               CALL   run   
2671   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2679   CD C6 0B               CALL   flushBuffer   
267C   CD 50 0C               CALL   printStr   
267F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
268C   E1                     POP   hl   
268D   E5                     PUSH   hl   
268E   E5                     PUSH   hl   
268F   CD 55 0D               CALL   run   
2692   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26A1   CD C6 0B               CALL   flushBuffer   
26A4   76                     HALT      
26A5                EXPECTM_2921S87:      
26A5   E1                     POP   HL   
26A6                          ;*Macro unroll:  test "2 2 >=", TRUE
26A6   31 00 4D               LD   SP,STACK   
26A9   CD 84 0C               CALL   coldInit   
26AC   CD D2 4B               CALL   execStr   
26AF   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
26B6   CD C6 0B               CALL   flushBuffer   
26B9   E1                     POP   HL   
26BA   E5                     PUSH   HL   
26BB   11 FF FF               LD   DE,TRUE   
26BE   B7                     OR   A   
26BF   ED 52                  SBC   HL,DE   
26C1   7D                     LD   A,L   
26C2   B4                     OR   H   
26C3   CA 24 27               JP   Z,expectM_2922S88   
26C6   CD 50 0C               CALL   printStr   
26C9   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
26D6   CD 50 0C               CALL   printStr   
26D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26E8   21 FF FF               LD   hl,TRUE   
26EB   E5                     PUSH   hl   
26EC   E5                     PUSH   hl   
26ED   CD 55 0D               CALL   run   
26F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26F8   CD C6 0B               CALL   flushBuffer   
26FB   CD 50 0C               CALL   printStr   
26FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
270B   E1                     POP   hl   
270C   E5                     PUSH   hl   
270D   E5                     PUSH   hl   
270E   CD 55 0D               CALL   run   
2711   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2720   CD C6 0B               CALL   flushBuffer   
2723   76                     HALT      
2724                EXPECTM_2922S88:      
2724   E1                     POP   HL   
2725                          ;*Macro unroll:  test "3 1 <<", 6
2725   31 00 4D               LD   SP,STACK   
2728   CD 84 0C               CALL   coldInit   
272B   CD D2 4B               CALL   execStr   
272E   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2735   CD C6 0B               CALL   flushBuffer   
2738   E1                     POP   HL   
2739   E5                     PUSH   HL   
273A   11 06 00               LD   DE,6   
273D   B7                     OR   A   
273E   ED 52                  SBC   HL,DE   
2740   7D                     LD   A,L   
2741   B4                     OR   H   
2742   CA A3 27               JP   Z,expectM_2923S89   
2745   CD 50 0C               CALL   printStr   
2748   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2755   CD 50 0C               CALL   printStr   
2758   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2767   21 06 00               LD   hl,6   
276A   E5                     PUSH   hl   
276B   E5                     PUSH   hl   
276C   CD 55 0D               CALL   run   
276F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2777   CD C6 0B               CALL   flushBuffer   
277A   CD 50 0C               CALL   printStr   
277D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
278A   E1                     POP   hl   
278B   E5                     PUSH   hl   
278C   E5                     PUSH   hl   
278D   CD 55 0D               CALL   run   
2790   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
279F   CD C6 0B               CALL   flushBuffer   
27A2   76                     HALT      
27A3                EXPECTM_2923S89:      
27A3   E1                     POP   HL   
27A4                          ;*Macro unroll:  test "10 1 >>", 5
27A4   31 00 4D               LD   SP,STACK   
27A7   CD 84 0C               CALL   coldInit   
27AA   CD D2 4B               CALL   execStr   
27AD   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
27B5   CD C6 0B               CALL   flushBuffer   
27B8   E1                     POP   HL   
27B9   E5                     PUSH   HL   
27BA   11 05 00               LD   DE,5   
27BD   B7                     OR   A   
27BE   ED 52                  SBC   HL,DE   
27C0   7D                     LD   A,L   
27C1   B4                     OR   H   
27C2   CA 24 28               JP   Z,expectM_2924S90   
27C5   CD 50 0C               CALL   printStr   
27C8   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
27D6   CD 50 0C               CALL   printStr   
27D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27E8   21 05 00               LD   hl,5   
27EB   E5                     PUSH   hl   
27EC   E5                     PUSH   hl   
27ED   CD 55 0D               CALL   run   
27F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27F8   CD C6 0B               CALL   flushBuffer   
27FB   CD 50 0C               CALL   printStr   
27FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
280B   E1                     POP   hl   
280C   E5                     PUSH   hl   
280D   E5                     PUSH   hl   
280E   CD 55 0D               CALL   run   
2811   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2820   CD C6 0B               CALL   flushBuffer   
2823   76                     HALT      
2824                EXPECTM_2924S90:      
2824   E1                     POP   HL   
2825                          ;*Macro unroll:  test "1 x = x", 1
2825   31 00 4D               LD   SP,STACK   
2828   CD 84 0C               CALL   coldInit   
282B   CD D2 4B               CALL   execStr   
282E   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2836   CD C6 0B               CALL   flushBuffer   
2839   E1                     POP   HL   
283A   E5                     PUSH   HL   
283B   11 01 00               LD   DE,1   
283E   B7                     OR   A   
283F   ED 52                  SBC   HL,DE   
2841   7D                     LD   A,L   
2842   B4                     OR   H   
2843   CA A5 28               JP   Z,expectM_2925S91   
2846   CD 50 0C               CALL   printStr   
2849   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2857   CD 50 0C               CALL   printStr   
285A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2869   21 01 00               LD   hl,1   
286C   E5                     PUSH   hl   
286D   E5                     PUSH   hl   
286E   CD 55 0D               CALL   run   
2871   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2879   CD C6 0B               CALL   flushBuffer   
287C   CD 50 0C               CALL   printStr   
287F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
288C   E1                     POP   hl   
288D   E5                     PUSH   hl   
288E   E5                     PUSH   hl   
288F   CD 55 0D               CALL   run   
2892   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28A1   CD C6 0B               CALL   flushBuffer   
28A4   76                     HALT      
28A5                EXPECTM_2925S91:      
28A5   E1                     POP   HL   
28A6                          ;*Macro unroll:  test "1{}^", 1
28A6   31 00 4D               LD   SP,STACK   
28A9   CD 84 0C               CALL   coldInit   
28AC   CD D2 4B               CALL   execStr   
28AF   31 7B 7D 5E 00         DB   "1{}^",0   
28B4   CD C6 0B               CALL   flushBuffer   
28B7   E1                     POP   HL   
28B8   E5                     PUSH   HL   
28B9   11 01 00               LD   DE,1   
28BC   B7                     OR   A   
28BD   ED 52                  SBC   HL,DE   
28BF   7D                     LD   A,L   
28C0   B4                     OR   H   
28C1   CA 20 29               JP   Z,expectM_2926S92   
28C4   CD 50 0C               CALL   printStr   
28C7   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
28D2   CD 50 0C               CALL   printStr   
28D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28E4   21 01 00               LD   hl,1   
28E7   E5                     PUSH   hl   
28E8   E5                     PUSH   hl   
28E9   CD 55 0D               CALL   run   
28EC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28F4   CD C6 0B               CALL   flushBuffer   
28F7   CD 50 0C               CALL   printStr   
28FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2907   E1                     POP   hl   
2908   E5                     PUSH   hl   
2909   E5                     PUSH   hl   
290A   CD 55 0D               CALL   run   
290D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
291C   CD C6 0B               CALL   flushBuffer   
291F   76                     HALT      
2920                EXPECTM_2926S92:      
2920   E1                     POP   HL   
2921                          ;*Macro unroll:  test "{1}^", 1
2921   31 00 4D               LD   SP,STACK   
2924   CD 84 0C               CALL   coldInit   
2927   CD D2 4B               CALL   execStr   
292A   7B 31 7D 5E 00         DB   "{1}^",0   
292F   CD C6 0B               CALL   flushBuffer   
2932   E1                     POP   HL   
2933   E5                     PUSH   HL   
2934   11 01 00               LD   DE,1   
2937   B7                     OR   A   
2938   ED 52                  SBC   HL,DE   
293A   7D                     LD   A,L   
293B   B4                     OR   H   
293C   CA 9B 29               JP   Z,expectM_2927S93   
293F   CD 50 0C               CALL   printStr   
2942   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
294D   CD 50 0C               CALL   printStr   
2950   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
295F   21 01 00               LD   hl,1   
2962   E5                     PUSH   hl   
2963   E5                     PUSH   hl   
2964   CD 55 0D               CALL   run   
2967   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
296F   CD C6 0B               CALL   flushBuffer   
2972   CD 50 0C               CALL   printStr   
2975   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2982   E1                     POP   hl   
2983   E5                     PUSH   hl   
2984   E5                     PUSH   hl   
2985   CD 55 0D               CALL   run   
2988   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2997   CD C6 0B               CALL   flushBuffer   
299A   76                     HALT      
299B                EXPECTM_2927S93:      
299B   E1                     POP   HL   
299C                          ;*Macro unroll:  test "{{1}^}^", 1
299C   31 00 4D               LD   SP,STACK   
299F   CD 84 0C               CALL   coldInit   
29A2   CD D2 4B               CALL   execStr   
29A5   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
29AD   CD C6 0B               CALL   flushBuffer   
29B0   E1                     POP   HL   
29B1   E5                     PUSH   HL   
29B2   11 01 00               LD   DE,1   
29B5   B7                     OR   A   
29B6   ED 52                  SBC   HL,DE   
29B8   7D                     LD   A,L   
29B9   B4                     OR   H   
29BA   CA 1C 2A               JP   Z,expectM_2928S94   
29BD   CD 50 0C               CALL   printStr   
29C0   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
29CE   CD 50 0C               CALL   printStr   
29D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29E0   21 01 00               LD   hl,1   
29E3   E5                     PUSH   hl   
29E4   E5                     PUSH   hl   
29E5   CD 55 0D               CALL   run   
29E8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29F0   CD C6 0B               CALL   flushBuffer   
29F3   CD 50 0C               CALL   printStr   
29F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A03   E1                     POP   hl   
2A04   E5                     PUSH   hl   
2A05   E5                     PUSH   hl   
2A06   CD 55 0D               CALL   run   
2A09   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A18   CD C6 0B               CALL   flushBuffer   
2A1B   76                     HALT      
2A1C                EXPECTM_2928S94:      
2A1C   E1                     POP   HL   
2A1D                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2A1D   31 00 4D               LD   SP,STACK   
2A20   CD 84 0C               CALL   coldInit   
2A23   CD D2 4B               CALL   execStr   
2A26   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2A31   CD C6 0B               CALL   flushBuffer   
2A34   E1                     POP   HL   
2A35   E5                     PUSH   HL   
2A36   11 01 00               LD   DE,1   
2A39   B7                     OR   A   
2A3A   ED 52                  SBC   HL,DE   
2A3C   7D                     LD   A,L   
2A3D   B4                     OR   H   
2A3E   CA A3 2A               JP   Z,expectM_2929S95   
2A41   CD 50 0C               CALL   printStr   
2A44   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2A55   CD 50 0C               CALL   printStr   
2A58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A67   21 01 00               LD   hl,1   
2A6A   E5                     PUSH   hl   
2A6B   E5                     PUSH   hl   
2A6C   CD 55 0D               CALL   run   
2A6F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A77   CD C6 0B               CALL   flushBuffer   
2A7A   CD 50 0C               CALL   printStr   
2A7D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A8A   E1                     POP   hl   
2A8B   E5                     PUSH   hl   
2A8C   E5                     PUSH   hl   
2A8D   CD 55 0D               CALL   run   
2A90   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A9F   CD C6 0B               CALL   flushBuffer   
2AA2   76                     HALT      
2AA3                EXPECTM_2929S95:      
2AA3   E1                     POP   HL   
2AA4                          ;*Macro unroll:  test "5 /f{10} ?", 5
2AA4   31 00 4D               LD   SP,STACK   
2AA7   CD 84 0C               CALL   coldInit   
2AAA   CD D2 4B               CALL   execStr   
2AAD   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2AB8   CD C6 0B               CALL   flushBuffer   
2ABB   E1                     POP   HL   
2ABC   E5                     PUSH   HL   
2ABD   11 05 00               LD   DE,5   
2AC0   B7                     OR   A   
2AC1   ED 52                  SBC   HL,DE   
2AC3   7D                     LD   A,L   
2AC4   B4                     OR   H   
2AC5   CA 2A 2B               JP   Z,expectM_2930S96   
2AC8   CD 50 0C               CALL   printStr   
2ACB   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2ADC   CD 50 0C               CALL   printStr   
2ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEE   21 05 00               LD   hl,5   
2AF1   E5                     PUSH   hl   
2AF2   E5                     PUSH   hl   
2AF3   CD 55 0D               CALL   run   
2AF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AFE   CD C6 0B               CALL   flushBuffer   
2B01   CD 50 0C               CALL   printStr   
2B04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B11   E1                     POP   hl   
2B12   E5                     PUSH   hl   
2B13   E5                     PUSH   hl   
2B14   CD 55 0D               CALL   run   
2B17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B26   CD C6 0B               CALL   flushBuffer   
2B29   76                     HALT      
2B2A                EXPECTM_2930S96:      
2B2A   E1                     POP   HL   
2B2B                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2B2B   31 00 4D               LD   SP,STACK   
2B2E   CD 84 0C               CALL   coldInit   
2B31   CD D2 4B               CALL   execStr   
2B34   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2B41   CD C6 0B               CALL   flushBuffer   
2B44   E1                     POP   HL   
2B45   E5                     PUSH   HL   
2B46   11 0F 00               LD   DE,15   
2B49   B7                     OR   A   
2B4A   ED 52                  SBC   HL,DE   
2B4C   7D                     LD   A,L   
2B4D   B4                     OR   H   
2B4E   CA B5 2B               JP   Z,expectM_2931S97   
2B51   CD 50 0C               CALL   printStr   
2B54   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2B67   CD 50 0C               CALL   printStr   
2B6A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B79   21 0F 00               LD   hl,15   
2B7C   E5                     PUSH   hl   
2B7D   E5                     PUSH   hl   
2B7E   CD 55 0D               CALL   run   
2B81   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B89   CD C6 0B               CALL   flushBuffer   
2B8C   CD 50 0C               CALL   printStr   
2B8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B9C   E1                     POP   hl   
2B9D   E5                     PUSH   hl   
2B9E   E5                     PUSH   hl   
2B9F   CD 55 0D               CALL   run   
2BA2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BB1   CD C6 0B               CALL   flushBuffer   
2BB4   76                     HALT      
2BB5                EXPECTM_2931S97:      
2BB5   E1                     POP   HL   
2BB6                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2BB6   31 00 4D               LD   SP,STACK   
2BB9   CD 84 0C               CALL   coldInit   
2BBC   CD D2 4B               CALL   execStr   
2BBF   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2BD1   CD C6 0B               CALL   flushBuffer   
2BD4   E1                     POP   HL   
2BD5   E5                     PUSH   HL   
2BD6   11 15 00               LD   DE,21   
2BD9   B7                     OR   A   
2BDA   ED 52                  SBC   HL,DE   
2BDC   7D                     LD   A,L   
2BDD   B4                     OR   H   
2BDE   CA 4A 2C               JP   Z,expectM_2932S98   
2BE1   CD 50 0C               CALL   printStr   
2BE4   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2BFC   CD 50 0C               CALL   printStr   
2BFF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C0E   21 15 00               LD   hl,21   
2C11   E5                     PUSH   hl   
2C12   E5                     PUSH   hl   
2C13   CD 55 0D               CALL   run   
2C16   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C1E   CD C6 0B               CALL   flushBuffer   
2C21   CD 50 0C               CALL   printStr   
2C24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C31   E1                     POP   hl   
2C32   E5                     PUSH   hl   
2C33   E5                     PUSH   hl   
2C34   CD 55 0D               CALL   run   
2C37   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C46   CD C6 0B               CALL   flushBuffer   
2C49   76                     HALT      
2C4A                EXPECTM_2932S98:      
2C4A   E1                     POP   HL   
2C4B                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2C4B   31 00 4D               LD   SP,STACK   
2C4E   CD 84 0C               CALL   coldInit   
2C51   CD D2 4B               CALL   execStr   
2C54   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2C66   CD C6 0B               CALL   flushBuffer   
2C69   E1                     POP   HL   
2C6A   E5                     PUSH   HL   
2C6B   11 0B 00               LD   DE,11   
2C6E   B7                     OR   A   
2C6F   ED 52                  SBC   HL,DE   
2C71   7D                     LD   A,L   
2C72   B4                     OR   H   
2C73   CA DF 2C               JP   Z,expectM_2933S99   
2C76   CD 50 0C               CALL   printStr   
2C79   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2C91   CD 50 0C               CALL   printStr   
2C94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CA3   21 0B 00               LD   hl,11   
2CA6   E5                     PUSH   hl   
2CA7   E5                     PUSH   hl   
2CA8   CD 55 0D               CALL   run   
2CAB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CB3   CD C6 0B               CALL   flushBuffer   
2CB6   CD 50 0C               CALL   printStr   
2CB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CC6   E1                     POP   hl   
2CC7   E5                     PUSH   hl   
2CC8   E5                     PUSH   hl   
2CC9   CD 55 0D               CALL   run   
2CCC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CDB   CD C6 0B               CALL   flushBuffer   
2CDE   76                     HALT      
2CDF                EXPECTM_2933S99:      
2CDF   E1                     POP   HL   
2CE0                          ;*Macro unroll:  test ":{2}^", 2
2CE0   31 00 4D               LD   SP,STACK   
2CE3   CD 84 0C               CALL   coldInit   
2CE6   CD D2 4B               CALL   execStr   
2CE9   3A 7B 32 7D 5E 00      DB   ":{2}^",0   
2CEF   CD C6 0B               CALL   flushBuffer   
2CF2   E1                     POP   HL   
2CF3   E5                     PUSH   HL   
2CF4   11 02 00               LD   DE,2   
2CF7   B7                     OR   A   
2CF8   ED 52                  SBC   HL,DE   
2CFA   7D                     LD   A,L   
2CFB   B4                     OR   H   
2CFC   CA 5C 2D               JP   Z,expectM_2934S100   
2CFF   CD 50 0C               CALL   printStr   
2D02   43 6F 64 65 3A 20 3A 7B 32 7D 5E 00 .CSTR   "Code: ",":{2}^"   
2D0E   CD 50 0C               CALL   printStr   
2D11   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D20   21 02 00               LD   hl,2   
2D23   E5                     PUSH   hl   
2D24   E5                     PUSH   hl   
2D25   CD 55 0D               CALL   run   
2D28   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D30   CD C6 0B               CALL   flushBuffer   
2D33   CD 50 0C               CALL   printStr   
2D36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D43   E1                     POP   hl   
2D44   E5                     PUSH   hl   
2D45   E5                     PUSH   hl   
2D46   CD 55 0D               CALL   run   
2D49   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D58   CD C6 0B               CALL   flushBuffer   
2D5B   76                     HALT      
2D5C                EXPECTM_2934S100:      
2D5C   E1                     POP   HL   
2D5D                          ;*Macro unroll:  test ":a{2}^", 2
2D5D   31 00 4D               LD   SP,STACK   
2D60   CD 84 0C               CALL   coldInit   
2D63   CD D2 4B               CALL   execStr   
2D66   3A 61 7B 32 7D 5E 00   DB   ":a{2}^",0   
2D6D   CD C6 0B               CALL   flushBuffer   
2D70   E1                     POP   HL   
2D71   E5                     PUSH   HL   
2D72   11 02 00               LD   DE,2   
2D75   B7                     OR   A   
2D76   ED 52                  SBC   HL,DE   
2D78   7D                     LD   A,L   
2D79   B4                     OR   H   
2D7A   CA DB 2D               JP   Z,expectM_2935S101   
2D7D   CD 50 0C               CALL   printStr   
2D80   43 6F 64 65 3A 20 3A 61 7B 32 7D 5E 00 .CSTR   "Code: ",":a{2}^"   
2D8D   CD 50 0C               CALL   printStr   
2D90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D9F   21 02 00               LD   hl,2   
2DA2   E5                     PUSH   hl   
2DA3   E5                     PUSH   hl   
2DA4   CD 55 0D               CALL   run   
2DA7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DAF   CD C6 0B               CALL   flushBuffer   
2DB2   CD 50 0C               CALL   printStr   
2DB5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DC2   E1                     POP   hl   
2DC3   E5                     PUSH   hl   
2DC4   E5                     PUSH   hl   
2DC5   CD 55 0D               CALL   run   
2DC8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DD7   CD C6 0B               CALL   flushBuffer   
2DDA   76                     HALT      
2DDB                EXPECTM_2935S101:      
2DDB   E1                     POP   HL   
2DDC                          ;*Macro unroll:  test "5 :a{%a}^", 5
2DDC   31 00 4D               LD   SP,STACK   
2DDF   CD 84 0C               CALL   coldInit   
2DE2   CD D2 4B               CALL   execStr   
2DE5   35 20 3A 61 7B 25 61 7D 5E 00 DB   "5 :a{%a}^",0   
2DEF   CD C6 0B               CALL   flushBuffer   
2DF2   E1                     POP   HL   
2DF3   E5                     PUSH   HL   
2DF4   11 05 00               LD   DE,5   
2DF7   B7                     OR   A   
2DF8   ED 52                  SBC   HL,DE   
2DFA   7D                     LD   A,L   
2DFB   B4                     OR   H   
2DFC   CA 60 2E               JP   Z,expectM_2936S102   
2DFF   CD 50 0C               CALL   printStr   
2E02   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 :a{%a}^"   
2E12   CD 50 0C               CALL   printStr   
2E15   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E24   21 05 00               LD   hl,5   
2E27   E5                     PUSH   hl   
2E28   E5                     PUSH   hl   
2E29   CD 55 0D               CALL   run   
2E2C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E34   CD C6 0B               CALL   flushBuffer   
2E37   CD 50 0C               CALL   printStr   
2E3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E47   E1                     POP   hl   
2E48   E5                     PUSH   hl   
2E49   E5                     PUSH   hl   
2E4A   CD 55 0D               CALL   run   
2E4D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E5C   CD C6 0B               CALL   flushBuffer   
2E5F   76                     HALT      
2E60                EXPECTM_2936S102:      
2E60   E1                     POP   HL   
2E61                          ;*Macro unroll:  test "5 :a:b{%a}^", 5
2E61   31 00 4D               LD   SP,STACK   
2E64   CD 84 0C               CALL   coldInit   
2E67   CD D2 4B               CALL   execStr   
2E6A   35 20 3A 61 3A 62 7B 25 61 7D 5E 00 DB   "5 :a:b{%a}^",0   
2E76   CD C6 0B               CALL   flushBuffer   
2E79   E1                     POP   HL   
2E7A   E5                     PUSH   HL   
2E7B   11 05 00               LD   DE,5   
2E7E   B7                     OR   A   
2E7F   ED 52                  SBC   HL,DE   
2E81   7D                     LD   A,L   
2E82   B4                     OR   H   
2E83   CA E9 2E               JP   Z,expectM_2937S103   
2E86   CD 50 0C               CALL   printStr   
2E89   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 :a:b{%a}^"   
2E9B   CD 50 0C               CALL   printStr   
2E9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EAD   21 05 00               LD   hl,5   
2EB0   E5                     PUSH   hl   
2EB1   E5                     PUSH   hl   
2EB2   CD 55 0D               CALL   run   
2EB5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EBD   CD C6 0B               CALL   flushBuffer   
2EC0   CD 50 0C               CALL   printStr   
2EC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ED0   E1                     POP   hl   
2ED1   E5                     PUSH   hl   
2ED2   E5                     PUSH   hl   
2ED3   CD 55 0D               CALL   run   
2ED6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EE5   CD C6 0B               CALL   flushBuffer   
2EE8   76                     HALT      
2EE9                EXPECTM_2937S103:      
2EE9   E1                     POP   HL   
2EEA                          ;*Macro unroll:  test ":a{{2}^}^", 2
2EEA   31 00 4D               LD   SP,STACK   
2EED   CD 84 0C               CALL   coldInit   
2EF0   CD D2 4B               CALL   execStr   
2EF3   3A 61 7B 7B 32 7D 5E 7D 5E 00 DB   ":a{{2}^}^",0   
2EFD   CD C6 0B               CALL   flushBuffer   
2F00   E1                     POP   HL   
2F01   E5                     PUSH   HL   
2F02   11 02 00               LD   DE,2   
2F05   B7                     OR   A   
2F06   ED 52                  SBC   HL,DE   
2F08   7D                     LD   A,L   
2F09   B4                     OR   H   
2F0A   CA 6E 2F               JP   Z,expectM_2938S104   
2F0D   CD 50 0C               CALL   printStr   
2F10   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ",":a{{2}^}^"   
2F20   CD 50 0C               CALL   printStr   
2F23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F32   21 02 00               LD   hl,2   
2F35   E5                     PUSH   hl   
2F36   E5                     PUSH   hl   
2F37   CD 55 0D               CALL   run   
2F3A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F42   CD C6 0B               CALL   flushBuffer   
2F45   CD 50 0C               CALL   printStr   
2F48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F55   E1                     POP   hl   
2F56   E5                     PUSH   hl   
2F57   E5                     PUSH   hl   
2F58   CD 55 0D               CALL   run   
2F5B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F6A   CD C6 0B               CALL   flushBuffer   
2F6D   76                     HALT      
2F6E                EXPECTM_2938S104:      
2F6E   E1                     POP   HL   
2F6F                          ;*Macro unroll:  test "1 5 :a{{%a}^}^", 5
2F6F   31 00 4D               LD   SP,STACK   
2F72   CD 84 0C               CALL   coldInit   
2F75   CD D2 4B               CALL   execStr   
2F78   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 :a{{%a}^}^",0   
2F87   CD C6 0B               CALL   flushBuffer   
2F8A   E1                     POP   HL   
2F8B   E5                     PUSH   HL   
2F8C   11 05 00               LD   DE,5   
2F8F   B7                     OR   A   
2F90   ED 52                  SBC   HL,DE   
2F92   7D                     LD   A,L   
2F93   B4                     OR   H   
2F94   CA FD 2F               JP   Z,expectM_2939S105   
2F97   CD 50 0C               CALL   printStr   
2F9A   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^}^"   
2FAF   CD 50 0C               CALL   printStr   
2FB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FC1   21 05 00               LD   hl,5   
2FC4   E5                     PUSH   hl   
2FC5   E5                     PUSH   hl   
2FC6   CD 55 0D               CALL   run   
2FC9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FD1   CD C6 0B               CALL   flushBuffer   
2FD4   CD 50 0C               CALL   printStr   
2FD7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FE4   E1                     POP   hl   
2FE5   E5                     PUSH   hl   
2FE6   E5                     PUSH   hl   
2FE7   CD 55 0D               CALL   run   
2FEA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FF9   CD C6 0B               CALL   flushBuffer   
2FFC   76                     HALT      
2FFD                EXPECTM_2939S105:      
2FFD   E1                     POP   HL   
2FFE                          ;*Macro unroll:  test "1 5 :ab{{%a}^}^", 1
2FFE   31 00 4D               LD   SP,STACK   
3001   CD 84 0C               CALL   coldInit   
3004   CD D2 4B               CALL   execStr   
3007   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 :ab{{%a}^}^",0   
3017   CD C6 0B               CALL   flushBuffer   
301A   E1                     POP   HL   
301B   E5                     PUSH   HL   
301C   11 01 00               LD   DE,1   
301F   B7                     OR   A   
3020   ED 52                  SBC   HL,DE   
3022   7D                     LD   A,L   
3023   B4                     OR   H   
3024   CA 8E 30               JP   Z,expectM_2940S106   
3027   CD 50 0C               CALL   printStr   
302A   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^}^"   
3040   CD 50 0C               CALL   printStr   
3043   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3052   21 01 00               LD   hl,1   
3055   E5                     PUSH   hl   
3056   E5                     PUSH   hl   
3057   CD 55 0D               CALL   run   
305A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3062   CD C6 0B               CALL   flushBuffer   
3065   CD 50 0C               CALL   printStr   
3068   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3075   E1                     POP   hl   
3076   E5                     PUSH   hl   
3077   E5                     PUSH   hl   
3078   CD 55 0D               CALL   run   
307B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
308A   CD C6 0B               CALL   flushBuffer   
308D   76                     HALT      
308E                EXPECTM_2940S106:      
308E   E1                     POP   HL   
308F                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^}^", 7
308F   31 00 4D               LD   SP,STACK   
3092   CD 84 0C               CALL   coldInit   
3095   CD D2 4B               CALL   execStr   
3098   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 :a{{%a 2 +}^}^",0   
30AB   CD C6 0B               CALL   flushBuffer   
30AE   E1                     POP   HL   
30AF   E5                     PUSH   HL   
30B0   11 07 00               LD   DE,7   
30B3   B7                     OR   A   
30B4   ED 52                  SBC   HL,DE   
30B6   7D                     LD   A,L   
30B7   B4                     OR   H   
30B8   CA 25 31               JP   Z,expectM_2941S107   
30BB   CD 50 0C               CALL   printStr   
30BE   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^}^"   
30D7   CD 50 0C               CALL   printStr   
30DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E9   21 07 00               LD   hl,7   
30EC   E5                     PUSH   hl   
30ED   E5                     PUSH   hl   
30EE   CD 55 0D               CALL   run   
30F1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30F9   CD C6 0B               CALL   flushBuffer   
30FC   CD 50 0C               CALL   printStr   
30FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
310C   E1                     POP   hl   
310D   E5                     PUSH   hl   
310E   E5                     PUSH   hl   
310F   CD 55 0D               CALL   run   
3112   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3121   CD C6 0B               CALL   flushBuffer   
3124   76                     HALT      
3125                EXPECTM_2941S107:      
3125   E1                     POP   HL   
3126                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^}^", 6
3126   31 00 4D               LD   SP,STACK   
3129   CD 84 0C               CALL   coldInit   
312C   CD D2 4B               CALL   execStr   
312F   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 :ab{{%a %b +}^}^",0   
3144   CD C6 0B               CALL   flushBuffer   
3147   E1                     POP   HL   
3148   E5                     PUSH   HL   
3149   11 06 00               LD   DE,6   
314C   B7                     OR   A   
314D   ED 52                  SBC   HL,DE   
314F   7D                     LD   A,L   
3150   B4                     OR   H   
3151   CA C0 31               JP   Z,expectM_2942S108   
3154   CD 50 0C               CALL   printStr   
3157   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^}^"   
3172   CD 50 0C               CALL   printStr   
3175   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3184   21 06 00               LD   hl,6   
3187   E5                     PUSH   hl   
3188   E5                     PUSH   hl   
3189   CD 55 0D               CALL   run   
318C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3194   CD C6 0B               CALL   flushBuffer   
3197   CD 50 0C               CALL   printStr   
319A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31A7   E1                     POP   hl   
31A8   E5                     PUSH   hl   
31A9   E5                     PUSH   hl   
31AA   CD 55 0D               CALL   run   
31AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31BC   CD C6 0B               CALL   flushBuffer   
31BF   76                     HALT      
31C0                EXPECTM_2942S108:      
31C0   E1                     POP   HL   
31C1                          ;*Macro unroll:  test ":a{2} x= 1 x^", 2
31C1   31 00 4D               LD   SP,STACK   
31C4   CD 84 0C               CALL   coldInit   
31C7   CD D2 4B               CALL   execStr   
31CA   3A 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   ":a{2} x= 1 x^",0   
31D8   CD C6 0B               CALL   flushBuffer   
31DB   E1                     POP   HL   
31DC   E5                     PUSH   HL   
31DD   11 02 00               LD   DE,2   
31E0   B7                     OR   A   
31E1   ED 52                  SBC   HL,DE   
31E3   7D                     LD   A,L   
31E4   B4                     OR   H   
31E5   CA 4D 32               JP   Z,expectM_2943S109   
31E8   CD 50 0C               CALL   printStr   
31EB   43 6F 64 65 3A 20 3A 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2} x= 1 x^"   
31FF   CD 50 0C               CALL   printStr   
3202   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3211   21 02 00               LD   hl,2   
3214   E5                     PUSH   hl   
3215   E5                     PUSH   hl   
3216   CD 55 0D               CALL   run   
3219   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3221   CD C6 0B               CALL   flushBuffer   
3224   CD 50 0C               CALL   printStr   
3227   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3234   E1                     POP   hl   
3235   E5                     PUSH   hl   
3236   E5                     PUSH   hl   
3237   CD 55 0D               CALL   run   
323A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3249   CD C6 0B               CALL   flushBuffer   
324C   76                     HALT      
324D                EXPECTM_2943S109:      
324D   E1                     POP   HL   
324E                          ;*Macro unroll:  test ":a{%a} x= 0 1 x^", 1
324E   31 00 4D               LD   SP,STACK   
3251   CD 84 0C               CALL   coldInit   
3254   CD D2 4B               CALL   execStr   
3257   3A 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a} x= 0 1 x^",0   
3268   CD C6 0B               CALL   flushBuffer   
326B   E1                     POP   HL   
326C   E5                     PUSH   HL   
326D   11 01 00               LD   DE,1   
3270   B7                     OR   A   
3271   ED 52                  SBC   HL,DE   
3273   7D                     LD   A,L   
3274   B4                     OR   H   
3275   CA E0 32               JP   Z,expectM_2944S110   
3278   CD 50 0C               CALL   printStr   
327B   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a} x= 0 1 x^"   
3292   CD 50 0C               CALL   printStr   
3295   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32A4   21 01 00               LD   hl,1   
32A7   E5                     PUSH   hl   
32A8   E5                     PUSH   hl   
32A9   CD 55 0D               CALL   run   
32AC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32B4   CD C6 0B               CALL   flushBuffer   
32B7   CD 50 0C               CALL   printStr   
32BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32C7   E1                     POP   hl   
32C8   E5                     PUSH   hl   
32C9   E5                     PUSH   hl   
32CA   CD 55 0D               CALL   run   
32CD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32DC   CD C6 0B               CALL   flushBuffer   
32DF   76                     HALT      
32E0                EXPECTM_2944S110:      
32E0   E1                     POP   HL   
32E1                          ;*Macro unroll:  test ":ab{%b} x= 1 2 x^", 2
32E1   31 00 4D               LD   SP,STACK   
32E4   CD 84 0C               CALL   coldInit   
32E7   CD D2 4B               CALL   execStr   
32EA   3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b} x= 1 2 x^",0   
32FC   CD C6 0B               CALL   flushBuffer   
32FF   E1                     POP   HL   
3300   E5                     PUSH   HL   
3301   11 02 00               LD   DE,2   
3304   B7                     OR   A   
3305   ED 52                  SBC   HL,DE   
3307   7D                     LD   A,L   
3308   B4                     OR   H   
3309   CA 75 33               JP   Z,expectM_2945S111   
330C   CD 50 0C               CALL   printStr   
330F   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b} x= 1 2 x^"   
3327   CD 50 0C               CALL   printStr   
332A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3339   21 02 00               LD   hl,2   
333C   E5                     PUSH   hl   
333D   E5                     PUSH   hl   
333E   CD 55 0D               CALL   run   
3341   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3349   CD C6 0B               CALL   flushBuffer   
334C   CD 50 0C               CALL   printStr   
334F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
335C   E1                     POP   hl   
335D   E5                     PUSH   hl   
335E   E5                     PUSH   hl   
335F   CD 55 0D               CALL   run   
3362   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3371   CD C6 0B               CALL   flushBuffer   
3374   76                     HALT      
3375                EXPECTM_2945S111:      
3375   E1                     POP   HL   
3376                          ;*Macro unroll:  test ":a:b{%a} x= 1 2 x^", 2
3376   31 00 4D               LD   SP,STACK   
3379   CD 84 0C               CALL   coldInit   
337C   CD D2 4B               CALL   execStr   
337F   3A 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a} x= 1 2 x^",0   
3392   CD C6 0B               CALL   flushBuffer   
3395   E1                     POP   HL   
3396   E5                     PUSH   HL   
3397   11 02 00               LD   DE,2   
339A   B7                     OR   A   
339B   ED 52                  SBC   HL,DE   
339D   7D                     LD   A,L   
339E   B4                     OR   H   
339F   CA 0C 34               JP   Z,expectM_2946S112   
33A2   CD 50 0C               CALL   printStr   
33A5   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a} x= 1 2 x^"   
33BE   CD 50 0C               CALL   printStr   
33C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33D0   21 02 00               LD   hl,2   
33D3   E5                     PUSH   hl   
33D4   E5                     PUSH   hl   
33D5   CD 55 0D               CALL   run   
33D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33E0   CD C6 0B               CALL   flushBuffer   
33E3   CD 50 0C               CALL   printStr   
33E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33F3   E1                     POP   hl   
33F4   E5                     PUSH   hl   
33F5   E5                     PUSH   hl   
33F6   CD 55 0D               CALL   run   
33F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3408   CD C6 0B               CALL   flushBuffer   
340B   76                     HALT      
340C                EXPECTM_2946S112:      
340C   E1                     POP   HL   
340D                          ;*Macro unroll:  test ":ab{%b} x= 1 2 x^", 2
340D   31 00 4D               LD   SP,STACK   
3410   CD 84 0C               CALL   coldInit   
3413   CD D2 4B               CALL   execStr   
3416   3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b} x= 1 2 x^",0   
3428   CD C6 0B               CALL   flushBuffer   
342B   E1                     POP   HL   
342C   E5                     PUSH   HL   
342D   11 02 00               LD   DE,2   
3430   B7                     OR   A   
3431   ED 52                  SBC   HL,DE   
3433   7D                     LD   A,L   
3434   B4                     OR   H   
3435   CA A1 34               JP   Z,expectM_2947S113   
3438   CD 50 0C               CALL   printStr   
343B   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b} x= 1 2 x^"   
3453   CD 50 0C               CALL   printStr   
3456   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3465   21 02 00               LD   hl,2   
3468   E5                     PUSH   hl   
3469   E5                     PUSH   hl   
346A   CD 55 0D               CALL   run   
346D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3475   CD C6 0B               CALL   flushBuffer   
3478   CD 50 0C               CALL   printStr   
347B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3488   E1                     POP   hl   
3489   E5                     PUSH   hl   
348A   E5                     PUSH   hl   
348B   CD 55 0D               CALL   run   
348E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
349D   CD C6 0B               CALL   flushBuffer   
34A0   76                     HALT      
34A1                EXPECTM_2947S113:      
34A1   E1                     POP   HL   
34A2                          ;*Macro unroll:  test ":ab{%b %a} x= 10 15 x^ -", 5
34A2   31 00 4D               LD   SP,STACK   
34A5   CD 84 0C               CALL   coldInit   
34A8   CD D2 4B               CALL   execStr   
34AB   3A 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a} x= 10 15 x^ -",0   
34C4   CD C6 0B               CALL   flushBuffer   
34C7   E1                     POP   HL   
34C8   E5                     PUSH   HL   
34C9   11 05 00               LD   DE,5   
34CC   B7                     OR   A   
34CD   ED 52                  SBC   HL,DE   
34CF   7D                     LD   A,L   
34D0   B4                     OR   H   
34D1   CA 44 35               JP   Z,expectM_2948S114   
34D4   CD 50 0C               CALL   printStr   
34D7   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a} x= 10 15 x^ -"   
34F6   CD 50 0C               CALL   printStr   
34F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3508   21 05 00               LD   hl,5   
350B   E5                     PUSH   hl   
350C   E5                     PUSH   hl   
350D   CD 55 0D               CALL   run   
3510   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3518   CD C6 0B               CALL   flushBuffer   
351B   CD 50 0C               CALL   printStr   
351E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
352B   E1                     POP   hl   
352C   E5                     PUSH   hl   
352D   E5                     PUSH   hl   
352E   CD 55 0D               CALL   run   
3531   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3540   CD C6 0B               CALL   flushBuffer   
3543   76                     HALT      
3544                EXPECTM_2948S114:      
3544   E1                     POP   HL   
3545                          ;*Macro unroll:  test ":a:b{2} x= 1 x^", 2
3545   31 00 4D               LD   SP,STACK   
3548   CD 84 0C               CALL   coldInit   
354B   CD D2 4B               CALL   execStr   
354E   3A 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2} x= 1 x^",0   
355E   CD C6 0B               CALL   flushBuffer   
3561   E1                     POP   HL   
3562   E5                     PUSH   HL   
3563   11 02 00               LD   DE,2   
3566   B7                     OR   A   
3567   ED 52                  SBC   HL,DE   
3569   7D                     LD   A,L   
356A   B4                     OR   H   
356B   CA D5 35               JP   Z,expectM_2949S115   
356E   CD 50 0C               CALL   printStr   
3571   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2} x= 1 x^"   
3587   CD 50 0C               CALL   printStr   
358A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3599   21 02 00               LD   hl,2   
359C   E5                     PUSH   hl   
359D   E5                     PUSH   hl   
359E   CD 55 0D               CALL   run   
35A1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35A9   CD C6 0B               CALL   flushBuffer   
35AC   CD 50 0C               CALL   printStr   
35AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35BC   E1                     POP   hl   
35BD   E5                     PUSH   hl   
35BE   E5                     PUSH   hl   
35BF   CD 55 0D               CALL   run   
35C2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35D1   CD C6 0B               CALL   flushBuffer   
35D4   76                     HALT      
35D5                EXPECTM_2949S115:      
35D5   E1                     POP   HL   
35D6                          ;*Macro unroll:  test "::b{100 %b = %b} x= x^", 100
35D6   31 00 4D               LD   SP,STACK   
35D9   CD 84 0C               CALL   coldInit   
35DC   CD D2 4B               CALL   execStr   
35DF   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b} x= x^",0   
35F6   CD C6 0B               CALL   flushBuffer   
35F9   E1                     POP   HL   
35FA   E5                     PUSH   HL   
35FB   11 64 00               LD   DE,100   
35FE   B7                     OR   A   
35FF   ED 52                  SBC   HL,DE   
3601   7D                     LD   A,L   
3602   B4                     OR   H   
3603   CA 74 36               JP   Z,expectM_2950S116   
3606   CD 50 0C               CALL   printStr   
3609   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b} x= x^"   
3626   CD 50 0C               CALL   printStr   
3629   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3638   21 64 00               LD   hl,100   
363B   E5                     PUSH   hl   
363C   E5                     PUSH   hl   
363D   CD 55 0D               CALL   run   
3640   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3648   CD C6 0B               CALL   flushBuffer   
364B   CD 50 0C               CALL   printStr   
364E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
365B   E1                     POP   hl   
365C   E5                     PUSH   hl   
365D   E5                     PUSH   hl   
365E   CD 55 0D               CALL   run   
3661   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3670   CD C6 0B               CALL   flushBuffer   
3673   76                     HALT      
3674                EXPECTM_2950S116:      
3674   E1                     POP   HL   
3675                          ;*Macro unroll:  test ":a:b{1 %b = %b} x= 2 x^", 1
3675   31 00 4D               LD   SP,STACK   
3678   CD 84 0C               CALL   coldInit   
367B   CD D2 4B               CALL   execStr   
367E   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b} x= 2 x^",0   
3696   CD C6 0B               CALL   flushBuffer   
3699   E1                     POP   HL   
369A   E5                     PUSH   HL   
369B   11 01 00               LD   DE,1   
369E   B7                     OR   A   
369F   ED 52                  SBC   HL,DE   
36A1   7D                     LD   A,L   
36A2   B4                     OR   H   
36A3   CA 15 37               JP   Z,expectM_2951S117   
36A6   CD 50 0C               CALL   printStr   
36A9   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b} x= 2 x^"   
36C7   CD 50 0C               CALL   printStr   
36CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36D9   21 01 00               LD   hl,1   
36DC   E5                     PUSH   hl   
36DD   E5                     PUSH   hl   
36DE   CD 55 0D               CALL   run   
36E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36E9   CD C6 0B               CALL   flushBuffer   
36EC   CD 50 0C               CALL   printStr   
36EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36FC   E1                     POP   hl   
36FD   E5                     PUSH   hl   
36FE   E5                     PUSH   hl   
36FF   CD 55 0D               CALL   run   
3702   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3711   CD C6 0B               CALL   flushBuffer   
3714   76                     HALT      
3715                EXPECTM_2951S117:      
3715   E1                     POP   HL   
3716                          ;*Macro unroll:  test ":a:b{%a %b = %b} x= 2 x^", 2
3716   31 00 4D               LD   SP,STACK   
3719   CD 84 0C               CALL   coldInit   
371C   CD D2 4B               CALL   execStr   
371F   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b} x= 2 x^",0   
3738   CD C6 0B               CALL   flushBuffer   
373B   E1                     POP   HL   
373C   E5                     PUSH   HL   
373D   11 02 00               LD   DE,2   
3740   B7                     OR   A   
3741   ED 52                  SBC   HL,DE   
3743   7D                     LD   A,L   
3744   B4                     OR   H   
3745   CA B8 37               JP   Z,expectM_2952S118   
3748   CD 50 0C               CALL   printStr   
374B   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b} x= 2 x^"   
376A   CD 50 0C               CALL   printStr   
376D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
377C   21 02 00               LD   hl,2   
377F   E5                     PUSH   hl   
3780   E5                     PUSH   hl   
3781   CD 55 0D               CALL   run   
3784   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
378C   CD C6 0B               CALL   flushBuffer   
378F   CD 50 0C               CALL   printStr   
3792   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
379F   E1                     POP   hl   
37A0   E5                     PUSH   hl   
37A1   E5                     PUSH   hl   
37A2   CD 55 0D               CALL   run   
37A5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37B4   CD C6 0B               CALL   flushBuffer   
37B7   76                     HALT      
37B8                EXPECTM_2952S118:      
37B8   E1                     POP   HL   
37B9                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??}^ +", 11
37B9   31 00 4D               LD   SP,STACK   
37BC   CD 84 0C               CALL   coldInit   
37BF   CD D2 4B               CALL   execStr   
37C2   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??}^ +",0   
37E0   CD C6 0B               CALL   flushBuffer   
37E3   E1                     POP   HL   
37E4   E5                     PUSH   HL   
37E5   11 0B 00               LD   DE,11   
37E8   B7                     OR   A   
37E9   ED 52                  SBC   HL,DE   
37EB   7D                     LD   A,L   
37EC   B4                     OR   H   
37ED   CA 65 38               JP   Z,expectM_2953S119   
37F0   CD 50 0C               CALL   printStr   
37F3   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??}^ +"   
3817   CD 50 0C               CALL   printStr   
381A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3829   21 0B 00               LD   hl,11   
382C   E5                     PUSH   hl   
382D   E5                     PUSH   hl   
382E   CD 55 0D               CALL   run   
3831   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3839   CD C6 0B               CALL   flushBuffer   
383C   CD 50 0C               CALL   printStr   
383F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
384C   E1                     POP   hl   
384D   E5                     PUSH   hl   
384E   E5                     PUSH   hl   
384F   CD 55 0D               CALL   run   
3852   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3861   CD C6 0B               CALL   flushBuffer   
3864   76                     HALT      
3865                EXPECTM_2953S119:      
3865   E1                     POP   HL   
3866                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??}^ +", 21
3866   31 00 4D               LD   SP,STACK   
3869   CD 84 0C               CALL   coldInit   
386C   CD D2 4B               CALL   execStr   
386F   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??}^ +",0   
388D   CD C6 0B               CALL   flushBuffer   
3890   E1                     POP   HL   
3891   E5                     PUSH   HL   
3892   11 15 00               LD   DE,21   
3895   B7                     OR   A   
3896   ED 52                  SBC   HL,DE   
3898   7D                     LD   A,L   
3899   B4                     OR   H   
389A   CA 12 39               JP   Z,expectM_2954S120   
389D   CD 50 0C               CALL   printStr   
38A0   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??}^ +"   
38C4   CD 50 0C               CALL   printStr   
38C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38D6   21 15 00               LD   hl,21   
38D9   E5                     PUSH   hl   
38DA   E5                     PUSH   hl   
38DB   CD 55 0D               CALL   run   
38DE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38E6   CD C6 0B               CALL   flushBuffer   
38E9   CD 50 0C               CALL   printStr   
38EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38F9   E1                     POP   hl   
38FA   E5                     PUSH   hl   
38FB   E5                     PUSH   hl   
38FC   CD 55 0D               CALL   run   
38FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
390E   CD C6 0B               CALL   flushBuffer   
3911   76                     HALT      
3912                EXPECTM_2954S120:      
3912   E1                     POP   HL   
3913                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3913   31 00 4D               LD   SP,STACK   
3916   CD 84 0C               CALL   coldInit   
3919   CD D2 4B               CALL   execStr   
391C   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
392A   CD C6 0B               CALL   flushBuffer   
392D   E1                     POP   HL   
392E   E5                     PUSH   HL   
392F   11 14 00               LD   DE,20   
3932   B7                     OR   A   
3933   ED 52                  SBC   HL,DE   
3935   7D                     LD   A,L   
3936   B4                     OR   H   
3937   CA 9F 39               JP   Z,expectM_2955S121   
393A   CD 50 0C               CALL   printStr   
393D   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3951   CD 50 0C               CALL   printStr   
3954   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3963   21 14 00               LD   hl,20   
3966   E5                     PUSH   hl   
3967   E5                     PUSH   hl   
3968   CD 55 0D               CALL   run   
396B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3973   CD C6 0B               CALL   flushBuffer   
3976   CD 50 0C               CALL   printStr   
3979   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3986   E1                     POP   hl   
3987   E5                     PUSH   hl   
3988   E5                     PUSH   hl   
3989   CD 55 0D               CALL   run   
398C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
399B   CD C6 0B               CALL   flushBuffer   
399E   76                     HALT      
399F                EXPECTM_2955S121:      
399F   E1                     POP   HL   
39A0                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
39A0   31 00 4D               LD   SP,STACK   
39A3   CD 84 0C               CALL   coldInit   
39A6   CD D2 4B               CALL   execStr   
39A9   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
39BB   CD C6 0B               CALL   flushBuffer   
39BE   E1                     POP   HL   
39BF   E5                     PUSH   HL   
39C0   11 04 00               LD   DE,4   
39C3   B7                     OR   A   
39C4   ED 52                  SBC   HL,DE   
39C6   7D                     LD   A,L   
39C7   B4                     OR   H   
39C8   CA 34 3A               JP   Z,expectM_2956S122   
39CB   CD 50 0C               CALL   printStr   
39CE   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
39E6   CD 50 0C               CALL   printStr   
39E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39F8   21 04 00               LD   hl,4   
39FB   E5                     PUSH   hl   
39FC   E5                     PUSH   hl   
39FD   CD 55 0D               CALL   run   
3A00   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A08   CD C6 0B               CALL   flushBuffer   
3A0B   CD 50 0C               CALL   printStr   
3A0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A1B   E1                     POP   hl   
3A1C   E5                     PUSH   hl   
3A1D   E5                     PUSH   hl   
3A1E   CD 55 0D               CALL   run   
3A21   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A30   CD C6 0B               CALL   flushBuffer   
3A33   76                     HALT      
3A34                EXPECTM_2956S122:      
3A34   E1                     POP   HL   
3A35                          ;*Macro unroll:  test "/b [1 2 3] 1#", 2
3A35   31 00 4D               LD   SP,STACK   
3A38   CD 84 0C               CALL   coldInit   
3A3B   CD D2 4B               CALL   execStr   
3A3E   2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/b [1 2 3] 1#",0   
3A4C   CD C6 0B               CALL   flushBuffer   
3A4F   E1                     POP   HL   
3A50   E5                     PUSH   HL   
3A51   11 02 00               LD   DE,2   
3A54   B7                     OR   A   
3A55   ED 52                  SBC   HL,DE   
3A57   7D                     LD   A,L   
3A58   B4                     OR   H   
3A59   CA C1 3A               JP   Z,expectM_2957S123   
3A5C   CD 50 0C               CALL   printStr   
3A5F   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/b [1 2 3] 1#"   
3A73   CD 50 0C               CALL   printStr   
3A76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A85   21 02 00               LD   hl,2   
3A88   E5                     PUSH   hl   
3A89   E5                     PUSH   hl   
3A8A   CD 55 0D               CALL   run   
3A8D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A95   CD C6 0B               CALL   flushBuffer   
3A98   CD 50 0C               CALL   printStr   
3A9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AA8   E1                     POP   hl   
3AA9   E5                     PUSH   hl   
3AAA   E5                     PUSH   hl   
3AAB   CD 55 0D               CALL   run   
3AAE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3ABD   CD C6 0B               CALL   flushBuffer   
3AC0   76                     HALT      
3AC1                EXPECTM_2957S123:      
3AC1   E1                     POP   HL   
3AC2                          ;*Macro unroll:  test "/b ['A' 'B' 'C'] 1#", 66
3AC2   31 00 4D               LD   SP,STACK   
3AC5   CD 84 0C               CALL   coldInit   
3AC8   CD D2 4B               CALL   execStr   
3ACB   2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/b ['A' 'B' 'C'] 1#",0   
3ADF   CD C6 0B               CALL   flushBuffer   
3AE2   E1                     POP   HL   
3AE3   E5                     PUSH   HL   
3AE4   11 42 00               LD   DE,66   
3AE7   B7                     OR   A   
3AE8   ED 52                  SBC   HL,DE   
3AEA   7D                     LD   A,L   
3AEB   B4                     OR   H   
3AEC   CA 5A 3B               JP   Z,expectM_2958S124   
3AEF   CD 50 0C               CALL   printStr   
3AF2   43 6F 64 65 3A 20 2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/b ['A' 'B' 'C'] 1#"   
3B0C   CD 50 0C               CALL   printStr   
3B0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B1E   21 42 00               LD   hl,66   
3B21   E5                     PUSH   hl   
3B22   E5                     PUSH   hl   
3B23   CD 55 0D               CALL   run   
3B26   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B2E   CD C6 0B               CALL   flushBuffer   
3B31   CD 50 0C               CALL   printStr   
3B34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B41   E1                     POP   hl   
3B42   E5                     PUSH   hl   
3B43   E5                     PUSH   hl   
3B44   CD 55 0D               CALL   run   
3B47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B56   CD C6 0B               CALL   flushBuffer   
3B59   76                     HALT      
3B5A                EXPECTM_2958S124:      
3B5A   E1                     POP   HL   
3B5B                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3B5B   31 00 4D               LD   SP,STACK   
3B5E   CD 84 0C               CALL   coldInit   
3B61   CD D2 4B               CALL   execStr   
3B64   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3B78   CD C6 0B               CALL   flushBuffer   
3B7B   E1                     POP   HL   
3B7C   E5                     PUSH   HL   
3B7D   11 0A 00               LD   DE,10   
3B80   B7                     OR   A   
3B81   ED 52                  SBC   HL,DE   
3B83   7D                     LD   A,L   
3B84   B4                     OR   H   
3B85   CA F3 3B               JP   Z,expectM_2959S125   
3B88   CD 50 0C               CALL   printStr   
3B8B   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3BA5   CD 50 0C               CALL   printStr   
3BA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BB7   21 0A 00               LD   hl,10   
3BBA   E5                     PUSH   hl   
3BBB   E5                     PUSH   hl   
3BBC   CD 55 0D               CALL   run   
3BBF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BC7   CD C6 0B               CALL   flushBuffer   
3BCA   CD 50 0C               CALL   printStr   
3BCD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BDA   E1                     POP   hl   
3BDB   E5                     PUSH   hl   
3BDC   E5                     PUSH   hl   
3BDD   CD 55 0D               CALL   run   
3BE0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BEF   CD C6 0B               CALL   flushBuffer   
3BF2   76                     HALT      
3BF3                EXPECTM_2959S125:      
3BF3   E1                     POP   HL   
3BF4                          ;*Macro unroll:  test "10 20 :ab{[{%a}{%b}] 0#^}^", 10
3BF4   31 00 4D               LD   SP,STACK   
3BF7   CD 84 0C               CALL   coldInit   
3BFA   CD D2 4B               CALL   execStr   
3BFD   31 30 20 32 30 20 3A 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 :ab{[{%a}{%b}] 0#^}^",0   
3C18   CD C6 0B               CALL   flushBuffer   
3C1B   E1                     POP   HL   
3C1C   E5                     PUSH   HL   
3C1D   11 0A 00               LD   DE,10   
3C20   B7                     OR   A   
3C21   ED 52                  SBC   HL,DE   
3C23   7D                     LD   A,L   
3C24   B4                     OR   H   
3C25   CA 9A 3C               JP   Z,expectM_2960S126   
3C28   CD 50 0C               CALL   printStr   
3C2B   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 :ab{[{%a}{%b}] 0#^}^"   
3C4C   CD 50 0C               CALL   printStr   
3C4F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C5E   21 0A 00               LD   hl,10   
3C61   E5                     PUSH   hl   
3C62   E5                     PUSH   hl   
3C63   CD 55 0D               CALL   run   
3C66   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C6E   CD C6 0B               CALL   flushBuffer   
3C71   CD 50 0C               CALL   printStr   
3C74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C81   E1                     POP   hl   
3C82   E5                     PUSH   hl   
3C83   E5                     PUSH   hl   
3C84   CD 55 0D               CALL   run   
3C87   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C96   CD C6 0B               CALL   flushBuffer   
3C99   76                     HALT      
3C9A                EXPECTM_2960S126:      
3C9A   E1                     POP   HL   
3C9B                          ;*Macro unroll:  test "0 10 20 :iab{[{%a}{%b}] %i#^}^", 10
3C9B   31 00 4D               LD   SP,STACK   
3C9E   CD 84 0C               CALL   coldInit   
3CA1   CD D2 4B               CALL   execStr   
3CA4   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 :iab{[{%a}{%b}] %i#^}^",0   
3CC3   CD C6 0B               CALL   flushBuffer   
3CC6   E1                     POP   HL   
3CC7   E5                     PUSH   HL   
3CC8   11 0A 00               LD   DE,10   
3CCB   B7                     OR   A   
3CCC   ED 52                  SBC   HL,DE   
3CCE   7D                     LD   A,L   
3CCF   B4                     OR   H   
3CD0   CA 49 3D               JP   Z,expectM_2961S127   
3CD3   CD 50 0C               CALL   printStr   
3CD6   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{%a}{%b}] %i#^}^"   
3CFB   CD 50 0C               CALL   printStr   
3CFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D0D   21 0A 00               LD   hl,10   
3D10   E5                     PUSH   hl   
3D11   E5                     PUSH   hl   
3D12   CD 55 0D               CALL   run   
3D15   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D1D   CD C6 0B               CALL   flushBuffer   
3D20   CD 50 0C               CALL   printStr   
3D23   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D30   E1                     POP   hl   
3D31   E5                     PUSH   hl   
3D32   E5                     PUSH   hl   
3D33   CD 55 0D               CALL   run   
3D36   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D45   CD C6 0B               CALL   flushBuffer   
3D48   76                     HALT      
3D49                EXPECTM_2961S127:      
3D49   E1                     POP   HL   
3D4A                          ;*Macro unroll:  test "1 10 20 :iab{[{%a}{%b}] %i#^}^", 20
3D4A   31 00 4D               LD   SP,STACK   
3D4D   CD 84 0C               CALL   coldInit   
3D50   CD D2 4B               CALL   execStr   
3D53   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 :iab{[{%a}{%b}] %i#^}^",0   
3D72   CD C6 0B               CALL   flushBuffer   
3D75   E1                     POP   HL   
3D76   E5                     PUSH   HL   
3D77   11 14 00               LD   DE,20   
3D7A   B7                     OR   A   
3D7B   ED 52                  SBC   HL,DE   
3D7D   7D                     LD   A,L   
3D7E   B4                     OR   H   
3D7F   CA F8 3D               JP   Z,expectM_2962S128   
3D82   CD 50 0C               CALL   printStr   
3D85   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{%a}{%b}] %i#^}^"   
3DAA   CD 50 0C               CALL   printStr   
3DAD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DBC   21 14 00               LD   hl,20   
3DBF   E5                     PUSH   hl   
3DC0   E5                     PUSH   hl   
3DC1   CD 55 0D               CALL   run   
3DC4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DCC   CD C6 0B               CALL   flushBuffer   
3DCF   CD 50 0C               CALL   printStr   
3DD2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DDF   E1                     POP   hl   
3DE0   E5                     PUSH   hl   
3DE1   E5                     PUSH   hl   
3DE2   CD 55 0D               CALL   run   
3DE5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DF4   CD C6 0B               CALL   flushBuffer   
3DF7   76                     HALT      
3DF8                EXPECTM_2962S128:      
3DF8   E1                     POP   HL   
3DF9                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3DF9   31 00 4D               LD   SP,STACK   
3DFC   CD 84 0C               CALL   coldInit   
3DFF   CD D2 4B               CALL   execStr   
3E02   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3E1A   CD C6 0B               CALL   flushBuffer   
3E1D   E1                     POP   HL   
3E1E   E5                     PUSH   HL   
3E1F   11 06 00               LD   DE,6   
3E22   B7                     OR   A   
3E23   ED 52                  SBC   HL,DE   
3E25   7D                     LD   A,L   
3E26   B4                     OR   H   
3E27   CA 99 3E               JP   Z,expectM_2963S129   
3E2A   CD 50 0C               CALL   printStr   
3E2D   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3E4B   CD 50 0C               CALL   printStr   
3E4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E5D   21 06 00               LD   hl,6   
3E60   E5                     PUSH   hl   
3E61   E5                     PUSH   hl   
3E62   CD 55 0D               CALL   run   
3E65   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E6D   CD C6 0B               CALL   flushBuffer   
3E70   CD 50 0C               CALL   printStr   
3E73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E80   E1                     POP   hl   
3E81   E5                     PUSH   hl   
3E82   E5                     PUSH   hl   
3E83   CD 55 0D               CALL   run   
3E86   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E95   CD C6 0B               CALL   flushBuffer   
3E98   76                     HALT      
3E99                EXPECTM_2963S129:      
3E99   E1                     POP   HL   
3E9A                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3E9A   31 00 4D               LD   SP,STACK   
3E9D   CD 84 0C               CALL   coldInit   
3EA0   CD D2 4B               CALL   execStr   
3EA3   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
3EBE   CD C6 0B               CALL   flushBuffer   
3EC1   E1                     POP   HL   
3EC2   E5                     PUSH   HL   
3EC3   11 02 00               LD   DE,2   
3EC6   B7                     OR   A   
3EC7   ED 52                  SBC   HL,DE   
3EC9   7D                     LD   A,L   
3ECA   B4                     OR   H   
3ECB   CA 40 3F               JP   Z,expectM_2964S130   
3ECE   CD 50 0C               CALL   printStr   
3ED1   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
3EF2   CD 50 0C               CALL   printStr   
3EF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F04   21 02 00               LD   hl,2   
3F07   E5                     PUSH   hl   
3F08   E5                     PUSH   hl   
3F09   CD 55 0D               CALL   run   
3F0C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F14   CD C6 0B               CALL   flushBuffer   
3F17   CD 50 0C               CALL   printStr   
3F1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F27   E1                     POP   hl   
3F28   E5                     PUSH   hl   
3F29   E5                     PUSH   hl   
3F2A   CD 55 0D               CALL   run   
3F2D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F3C   CD C6 0B               CALL   flushBuffer   
3F3F   76                     HALT      
3F40                EXPECTM_2964S130:      
3F40   E1                     POP   HL   
3F41                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3F41   31 00 4D               LD   SP,STACK   
3F44   CD 84 0C               CALL   coldInit   
3F47   CD D2 4B               CALL   execStr   
3F4A   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
3F70   CD C6 0B               CALL   flushBuffer   
3F73   E1                     POP   HL   
3F74   E5                     PUSH   HL   
3F75   11 0A 00               LD   DE,10   
3F78   B7                     OR   A   
3F79   ED 52                  SBC   HL,DE   
3F7B   7D                     LD   A,L   
3F7C   B4                     OR   H   
3F7D   CA FD 3F               JP   Z,expectM_2965S131   
3F80   CD 50 0C               CALL   printStr   
3F83   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3FAF   CD 50 0C               CALL   printStr   
3FB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FC1   21 0A 00               LD   hl,10   
3FC4   E5                     PUSH   hl   
3FC5   E5                     PUSH   hl   
3FC6   CD 55 0D               CALL   run   
3FC9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FD1   CD C6 0B               CALL   flushBuffer   
3FD4   CD 50 0C               CALL   printStr   
3FD7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FE4   E1                     POP   hl   
3FE5   E5                     PUSH   hl   
3FE6   E5                     PUSH   hl   
3FE7   CD 55 0D               CALL   run   
3FEA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FF9   CD C6 0B               CALL   flushBuffer   
3FFC   76                     HALT      
3FFD                EXPECTM_2965S131:      
3FFD   E1                     POP   HL   
3FFE                          ;*Macro unroll:  test "3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
3FFE   31 00 4D               LD   SP,STACK   
4001   CD 84 0C               CALL   coldInit   
4004   CD D2 4B               CALL   execStr   
4007   33 20 3A 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
4032   CD C6 0B               CALL   flushBuffer   
4035   E1                     POP   HL   
4036   E5                     PUSH   HL   
4037   11 06 00               LD   DE,6   
403A   B7                     OR   A   
403B   ED 52                  SBC   HL,DE   
403D   7D                     LD   A,L   
403E   B4                     OR   H   
403F   CA C4 40               JP   Z,expectM_2966S132   
4042   CD 50 0C               CALL   printStr   
4045   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
4076   CD 50 0C               CALL   printStr   
4079   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4088   21 06 00               LD   hl,6   
408B   E5                     PUSH   hl   
408C   E5                     PUSH   hl   
408D   CD 55 0D               CALL   run   
4090   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4098   CD C6 0B               CALL   flushBuffer   
409B   CD 50 0C               CALL   printStr   
409E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40AB   E1                     POP   hl   
40AC   E5                     PUSH   hl   
40AD   E5                     PUSH   hl   
40AE   CD 55 0D               CALL   run   
40B1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40C0   CD C6 0B               CALL   flushBuffer   
40C3   76                     HALT      
40C4                EXPECTM_2966S132:      
40C4   E1                     POP   HL   
40C5                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +}^",3
40C5   31 00 4D               LD   SP,STACK   
40C8   CD 84 0C               CALL   coldInit   
40CB   CD D2 4B               CALL   execStr   
40CE   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t :f{1 %f/br 2 +}^",0   
40E2   CD C6 0B               CALL   flushBuffer   
40E5   E1                     POP   HL   
40E6   E5                     PUSH   HL   
40E7   11 03 00               LD   DE,3   
40EA   B7                     OR   A   
40EB   ED 52                  SBC   HL,DE   
40ED   7D                     LD   A,L   
40EE   B4                     OR   H   
40EF   CA 5D 41               JP   Z,expectM_2967S133   
40F2   CD 50 0C               CALL   printStr   
40F5   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +}^"   
410F   CD 50 0C               CALL   printStr   
4112   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4121   21 03 00               LD   hl,3   
4124   E5                     PUSH   hl   
4125   E5                     PUSH   hl   
4126   CD 55 0D               CALL   run   
4129   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4131   CD C6 0B               CALL   flushBuffer   
4134   CD 50 0C               CALL   printStr   
4137   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4144   E1                     POP   hl   
4145   E5                     PUSH   hl   
4146   E5                     PUSH   hl   
4147   CD 55 0D               CALL   run   
414A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4159   CD C6 0B               CALL   flushBuffer   
415C   76                     HALT      
415D                EXPECTM_2967S133:      
415D   E1                     POP   HL   
415E                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +}^",1
415E   31 00 4D               LD   SP,STACK   
4161   CD 84 0C               CALL   coldInit   
4164   CD D2 4B               CALL   execStr   
4167   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f :f{1 %f/br 2 +}^",0   
417B   CD C6 0B               CALL   flushBuffer   
417E   E1                     POP   HL   
417F   E5                     PUSH   HL   
4180   11 01 00               LD   DE,1   
4183   B7                     OR   A   
4184   ED 52                  SBC   HL,DE   
4186   7D                     LD   A,L   
4187   B4                     OR   H   
4188   CA F6 41               JP   Z,expectM_2968S134   
418B   CD 50 0C               CALL   printStr   
418E   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +}^"   
41A8   CD 50 0C               CALL   printStr   
41AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41BA   21 01 00               LD   hl,1   
41BD   E5                     PUSH   hl   
41BE   E5                     PUSH   hl   
41BF   CD 55 0D               CALL   run   
41C2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41CA   CD C6 0B               CALL   flushBuffer   
41CD   CD 50 0C               CALL   printStr   
41D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41DD   E1                     POP   hl   
41DE   E5                     PUSH   hl   
41DF   E5                     PUSH   hl   
41E0   CD 55 0D               CALL   run   
41E3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41F2   CD C6 0B               CALL   flushBuffer   
41F5   76                     HALT      
41F6                EXPECTM_2968S134:      
41F6   E1                     POP   HL   
41F7                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
41F7   31 00 4D               LD   SP,STACK   
41FA   CD 84 0C               CALL   coldInit   
41FD   CD D2 4B               CALL   execStr   
4200   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
420C   CD C6 0B               CALL   flushBuffer   
420F   E1                     POP   HL   
4210   E5                     PUSH   HL   
4211   11 00 00               LD   DE,NUL   
4214   B7                     OR   A   
4215   ED 52                  SBC   HL,DE   
4217   7D                     LD   A,L   
4218   B4                     OR   H   
4219   CA 7F 42               JP   Z,expectM_2969S135   
421C   CD 50 0C               CALL   printStr   
421F   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
4231   CD 50 0C               CALL   printStr   
4234   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4243   21 00 00               LD   hl,NUL   
4246   E5                     PUSH   hl   
4247   E5                     PUSH   hl   
4248   CD 55 0D               CALL   run   
424B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4253   CD C6 0B               CALL   flushBuffer   
4256   CD 50 0C               CALL   printStr   
4259   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4266   E1                     POP   hl   
4267   E5                     PUSH   hl   
4268   E5                     PUSH   hl   
4269   CD 55 0D               CALL   run   
426C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
427B   CD C6 0B               CALL   flushBuffer   
427E   76                     HALT      
427F                EXPECTM_2969S135:      
427F   E1                     POP   HL   
4280                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4280   31 00 4D               LD   SP,STACK   
4283   CD 84 0C               CALL   coldInit   
4286   CD D2 4B               CALL   execStr   
4289   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
4295   CD C6 0B               CALL   flushBuffer   
4298   E1                     POP   HL   
4299   E5                     PUSH   HL   
429A   11 00 00               LD   DE,NUL   
429D   B7                     OR   A   
429E   ED 52                  SBC   HL,DE   
42A0   7D                     LD   A,L   
42A1   B4                     OR   H   
42A2   CA 08 43               JP   Z,expectM_2970S136   
42A5   CD 50 0C               CALL   printStr   
42A8   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
42BA   CD 50 0C               CALL   printStr   
42BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42CC   21 00 00               LD   hl,NUL   
42CF   E5                     PUSH   hl   
42D0   E5                     PUSH   hl   
42D1   CD 55 0D               CALL   run   
42D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42DC   CD C6 0B               CALL   flushBuffer   
42DF   CD 50 0C               CALL   printStr   
42E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42EF   E1                     POP   hl   
42F0   E5                     PUSH   hl   
42F1   E5                     PUSH   hl   
42F2   CD 55 0D               CALL   run   
42F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4304   CD C6 0B               CALL   flushBuffer   
4307   76                     HALT      
4308                EXPECTM_2970S136:      
4308   E1                     POP   HL   
4309                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
4309   31 00 4D               LD   SP,STACK   
430C   CD 84 0C               CALL   coldInit   
430F   CD D2 4B               CALL   execStr   
4312   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
431E   CD C6 0B               CALL   flushBuffer   
4321   E1                     POP   HL   
4322   E5                     PUSH   HL   
4323   11 00 00               LD   DE,NUL   
4326   B7                     OR   A   
4327   ED 52                  SBC   HL,DE   
4329   7D                     LD   A,L   
432A   B4                     OR   H   
432B   CA 91 43               JP   Z,expectM_2971S137   
432E   CD 50 0C               CALL   printStr   
4331   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
4343   CD 50 0C               CALL   printStr   
4346   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4355   21 00 00               LD   hl,NUL   
4358   E5                     PUSH   hl   
4359   E5                     PUSH   hl   
435A   CD 55 0D               CALL   run   
435D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4365   CD C6 0B               CALL   flushBuffer   
4368   CD 50 0C               CALL   printStr   
436B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4378   E1                     POP   hl   
4379   E5                     PUSH   hl   
437A   E5                     PUSH   hl   
437B   CD 55 0D               CALL   run   
437E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
438D   CD C6 0B               CALL   flushBuffer   
4390   76                     HALT      
4391                EXPECTM_2971S137:      
4391   E1                     POP   HL   
4392                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4392   31 00 4D               LD   SP,STACK   
4395   CD 84 0C               CALL   coldInit   
4398   CD D2 4B               CALL   execStr   
439B   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
43A7   CD C6 0B               CALL   flushBuffer   
43AA   E1                     POP   HL   
43AB   E5                     PUSH   HL   
43AC   11 00 00               LD   DE,NUL   
43AF   B7                     OR   A   
43B0   ED 52                  SBC   HL,DE   
43B2   7D                     LD   A,L   
43B3   B4                     OR   H   
43B4   CA 1A 44               JP   Z,expectM_2972S138   
43B7   CD 50 0C               CALL   printStr   
43BA   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
43CC   CD 50 0C               CALL   printStr   
43CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43DE   21 00 00               LD   hl,NUL   
43E1   E5                     PUSH   hl   
43E2   E5                     PUSH   hl   
43E3   CD 55 0D               CALL   run   
43E6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43EE   CD C6 0B               CALL   flushBuffer   
43F1   CD 50 0C               CALL   printStr   
43F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4401   E1                     POP   hl   
4402   E5                     PUSH   hl   
4403   E5                     PUSH   hl   
4404   CD 55 0D               CALL   run   
4407   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4416   CD C6 0B               CALL   flushBuffer   
4419   76                     HALT      
441A                EXPECTM_2972S138:      
441A   E1                     POP   HL   
441B                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
441B   31 00 4D               LD   SP,STACK   
441E   CD 84 0C               CALL   coldInit   
4421   CD D2 4B               CALL   execStr   
4424   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
442C   CD C6 0B               CALL   flushBuffer   
442F   E1                     POP   HL   
4430   E5                     PUSH   HL   
4431   11 66 4F               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4434   B7                     OR   A   
4435   ED 52                  SBC   HL,DE   
4437   7D                     LD   A,L   
4438   B4                     OR   H   
4439   CA 9B 44               JP   Z,expectM_2973S139   
443C   CD 50 0C               CALL   printStr   
443F   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
444D   CD 50 0C               CALL   printStr   
4450   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
445F   21 66 4F               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4462   E5                     PUSH   hl   
4463   E5                     PUSH   hl   
4464   CD 55 0D               CALL   run   
4467   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
446F   CD C6 0B               CALL   flushBuffer   
4472   CD 50 0C               CALL   printStr   
4475   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4482   E1                     POP   hl   
4483   E5                     PUSH   hl   
4484   E5                     PUSH   hl   
4485   CD 55 0D               CALL   run   
4488   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4497   CD C6 0B               CALL   flushBuffer   
449A   76                     HALT      
449B                EXPECTM_2973S139:      
449B   E1                     POP   HL   
449C                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
449C   31 00 4D               LD   SP,STACK   
449F   CD 84 0C               CALL   coldInit   
44A2   CD D2 4B               CALL   execStr   
44A5   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
44AD   CD C6 0B               CALL   flushBuffer   
44B0   E1                     POP   HL   
44B1   E5                     PUSH   HL   
44B2   11 34 4F               LD   DE,VARS + ("Z"-"A"+1)*2   
44B5   B7                     OR   A   
44B6   ED 52                  SBC   HL,DE   
44B8   7D                     LD   A,L   
44B9   B4                     OR   H   
44BA   CA 1C 45               JP   Z,expectM_2974S140   
44BD   CD 50 0C               CALL   printStr   
44C0   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
44CE   CD 50 0C               CALL   printStr   
44D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44E0   21 34 4F               LD   hl,VARS + ("Z"-"A"+1)*2   
44E3   E5                     PUSH   hl   
44E4   E5                     PUSH   hl   
44E5   CD 55 0D               CALL   run   
44E8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44F0   CD C6 0B               CALL   flushBuffer   
44F3   CD 50 0C               CALL   printStr   
44F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4503   E1                     POP   hl   
4504   E5                     PUSH   hl   
4505   E5                     PUSH   hl   
4506   CD 55 0D               CALL   run   
4509   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4518   CD C6 0B               CALL   flushBuffer   
451B   76                     HALT      
451C                EXPECTM_2974S140:      
451C   E1                     POP   HL   
451D                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
451D   31 00 4D               LD   SP,STACK   
4520   CD 84 0C               CALL   coldInit   
4523   CD D2 4B               CALL   execStr   
4526   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
452E   CD C6 0B               CALL   flushBuffer   
4531   E1                     POP   HL   
4532   E5                     PUSH   HL   
4533   11 32 4F               LD   DE,VARS + ("Z"-"A")*2   
4536   B7                     OR   A   
4537   ED 52                  SBC   HL,DE   
4539   7D                     LD   A,L   
453A   B4                     OR   H   
453B   CA 9D 45               JP   Z,expectM_2975S141   
453E   CD 50 0C               CALL   printStr   
4541   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
454F   CD 50 0C               CALL   printStr   
4552   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4561   21 32 4F               LD   hl,VARS + ("Z"-"A")*2   
4564   E5                     PUSH   hl   
4565   E5                     PUSH   hl   
4566   CD 55 0D               CALL   run   
4569   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4571   CD C6 0B               CALL   flushBuffer   
4574   CD 50 0C               CALL   printStr   
4577   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4584   E1                     POP   hl   
4585   E5                     PUSH   hl   
4586   E5                     PUSH   hl   
4587   CD 55 0D               CALL   run   
458A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4599   CD C6 0B               CALL   flushBuffer   
459C   76                     HALT      
459D                EXPECTM_2975S141:      
459D   E1                     POP   HL   
459E                          ;*Macro unroll:  test "'A' /ad", VARS
459E   31 00 4D               LD   SP,STACK   
45A1   CD 84 0C               CALL   coldInit   
45A4   CD D2 4B               CALL   execStr   
45A7   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
45AF   CD C6 0B               CALL   flushBuffer   
45B2   E1                     POP   HL   
45B3   E5                     PUSH   HL   
45B4   11 00 4F               LD   DE,VARS   
45B7   B7                     OR   A   
45B8   ED 52                  SBC   HL,DE   
45BA   7D                     LD   A,L   
45BB   B4                     OR   H   
45BC   CA 1E 46               JP   Z,expectM_2976S142   
45BF   CD 50 0C               CALL   printStr   
45C2   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
45D0   CD 50 0C               CALL   printStr   
45D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45E2   21 00 4F               LD   hl,VARS   
45E5   E5                     PUSH   hl   
45E6   E5                     PUSH   hl   
45E7   CD 55 0D               CALL   run   
45EA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45F2   CD C6 0B               CALL   flushBuffer   
45F5   CD 50 0C               CALL   printStr   
45F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4605   E1                     POP   hl   
4606   E5                     PUSH   hl   
4607   E5                     PUSH   hl   
4608   CD 55 0D               CALL   run   
460B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
461A   CD C6 0B               CALL   flushBuffer   
461D   76                     HALT      
461E                EXPECTM_2976S142:      
461E   E1                     POP   HL   
461F                          ;*Macro unroll:  test "-1. /b/vB 0#", $2D
461F   31 00 4D               LD   SP,STACK   
4622   CD 84 0C               CALL   coldInit   
4625   CD D2 4B               CALL   execStr   
4628   2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 DB   "-1. /b/vB 0#",0   
4635   CD C6 0B               CALL   flushBuffer   
4638   E1                     POP   HL   
4639   E5                     PUSH   HL   
463A   11 2D 00               LD   DE,$2D   
463D   B7                     OR   A   
463E   ED 52                  SBC   HL,DE   
4640   7D                     LD   A,L   
4641   B4                     OR   H   
4642   CA A9 46               JP   Z,expectM_2977S143   
4645   CD 50 0C               CALL   printStr   
4648   43 6F 64 65 3A 20 2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /b/vB 0#"   
465B   CD 50 0C               CALL   printStr   
465E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
466D   21 2D 00               LD   hl,$2D   
4670   E5                     PUSH   hl   
4671   E5                     PUSH   hl   
4672   CD 55 0D               CALL   run   
4675   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
467D   CD C6 0B               CALL   flushBuffer   
4680   CD 50 0C               CALL   printStr   
4683   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4690   E1                     POP   hl   
4691   E5                     PUSH   hl   
4692   E5                     PUSH   hl   
4693   CD 55 0D               CALL   run   
4696   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46A5   CD C6 0B               CALL   flushBuffer   
46A8   76                     HALT      
46A9                EXPECTM_2977S143:      
46A9   E1                     POP   HL   
46AA                          ;*Macro unroll:  test {DQ,"A",DQ,".s /b/vB 0#"}, 65
46AA   31 00 4D               LD   SP,STACK   
46AD   CD 84 0C               CALL   coldInit   
46B0   CD D2 4B               CALL   execStr   
46B3   22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /b/vB 0#",0   
46C2   CD C6 0B               CALL   flushBuffer   
46C5   E1                     POP   HL   
46C6   E5                     PUSH   HL   
46C7   11 41 00               LD   DE,65   
46CA   B7                     OR   A   
46CB   ED 52                  SBC   HL,DE   
46CD   7D                     LD   A,L   
46CE   B4                     OR   H   
46CF   CA 38 47               JP   Z,expectM_2978S144   
46D2   CD 50 0C               CALL   printStr   
46D5   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /b/vB 0#"   
46EA   CD 50 0C               CALL   printStr   
46ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46FC   21 41 00               LD   hl,65   
46FF   E5                     PUSH   hl   
4700   E5                     PUSH   hl   
4701   CD 55 0D               CALL   run   
4704   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
470C   CD C6 0B               CALL   flushBuffer   
470F   CD 50 0C               CALL   printStr   
4712   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
471F   E1                     POP   hl   
4720   E5                     PUSH   hl   
4721   E5                     PUSH   hl   
4722   CD 55 0D               CALL   run   
4725   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4734   CD C6 0B               CALL   flushBuffer   
4737   76                     HALT      
4738                EXPECTM_2978S144:      
4738   E1                     POP   HL   
4739                          ;*Macro unroll:  test "123. /b/vB 1#", $32
4739   31 00 4D               LD   SP,STACK   
473C   CD 84 0C               CALL   coldInit   
473F   CD D2 4B               CALL   execStr   
4742   31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 DB   "123. /b/vB 1#",0   
4750   CD C6 0B               CALL   flushBuffer   
4753   E1                     POP   HL   
4754   E5                     PUSH   HL   
4755   11 32 00               LD   DE,$32   
4758   B7                     OR   A   
4759   ED 52                  SBC   HL,DE   
475B   7D                     LD   A,L   
475C   B4                     OR   H   
475D   CA C5 47               JP   Z,expectM_2979S145   
4760   CD 50 0C               CALL   printStr   
4763   43 6F 64 65 3A 20 31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /b/vB 1#"   
4777   CD 50 0C               CALL   printStr   
477A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4789   21 32 00               LD   hl,$32   
478C   E5                     PUSH   hl   
478D   E5                     PUSH   hl   
478E   CD 55 0D               CALL   run   
4791   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4799   CD C6 0B               CALL   flushBuffer   
479C   CD 50 0C               CALL   printStr   
479F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47AC   E1                     POP   hl   
47AD   E5                     PUSH   hl   
47AE   E5                     PUSH   hl   
47AF   CD 55 0D               CALL   run   
47B2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47C1   CD C6 0B               CALL   flushBuffer   
47C4   76                     HALT      
47C5                EXPECTM_2979S145:      
47C5   E1                     POP   HL   
47C6                          ;*Macro unroll:  test ":a{%a} F=1F^", 1
47C6   31 00 4D               LD   SP,STACK   
47C9   CD 84 0C               CALL   coldInit   
47CC   CD D2 4B               CALL   execStr   
47CF   3A 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   ":a{%a} F=1F^",0   
47DC   CD C6 0B               CALL   flushBuffer   
47DF   E1                     POP   HL   
47E0   E5                     PUSH   HL   
47E1   11 01 00               LD   DE,1   
47E4   B7                     OR   A   
47E5   ED 52                  SBC   HL,DE   
47E7   7D                     LD   A,L   
47E8   B4                     OR   H   
47E9   CA 50 48               JP   Z,expectM_2980S146   
47EC   CD 50 0C               CALL   printStr   
47EF   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a} F=1F^"   
4802   CD 50 0C               CALL   printStr   
4805   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4814   21 01 00               LD   hl,1   
4817   E5                     PUSH   hl   
4818   E5                     PUSH   hl   
4819   CD 55 0D               CALL   run   
481C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4824   CD C6 0B               CALL   flushBuffer   
4827   CD 50 0C               CALL   printStr   
482A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4837   E1                     POP   hl   
4838   E5                     PUSH   hl   
4839   E5                     PUSH   hl   
483A   CD 55 0D               CALL   run   
483D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
484C   CD C6 0B               CALL   flushBuffer   
484F   76                     HALT      
4850                EXPECTM_2980S146:      
4850   E1                     POP   HL   
4851                          ;*Macro unroll:  test "1 :b{:a{%a}}^F= 3F^",3
4851   31 00 4D               LD   SP,STACK   
4854   CD 84 0C               CALL   coldInit   
4857   CD D2 4B               CALL   execStr   
485A   31 20 3A 62 7B 3A 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a}}^F= 3F^",0   
486E   CD C6 0B               CALL   flushBuffer   
4871   E1                     POP   HL   
4872   E5                     PUSH   HL   
4873   11 03 00               LD   DE,3   
4876   B7                     OR   A   
4877   ED 52                  SBC   HL,DE   
4879   7D                     LD   A,L   
487A   B4                     OR   H   
487B   CA E9 48               JP   Z,expectM_2981S147   
487E   CD 50 0C               CALL   printStr   
4881   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a}}^F= 3F^"   
489B   CD 50 0C               CALL   printStr   
489E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48AD   21 03 00               LD   hl,3   
48B0   E5                     PUSH   hl   
48B1   E5                     PUSH   hl   
48B2   CD 55 0D               CALL   run   
48B5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48BD   CD C6 0B               CALL   flushBuffer   
48C0   CD 50 0C               CALL   printStr   
48C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48D0   E1                     POP   hl   
48D1   E5                     PUSH   hl   
48D2   E5                     PUSH   hl   
48D3   CD 55 0D               CALL   run   
48D6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48E5   CD C6 0B               CALL   flushBuffer   
48E8   76                     HALT      
48E9                EXPECTM_2981S147:      
48E9   E1                     POP   HL   
48EA                          ;*Macro unroll:  test "1 :b{:a{%a%b-}}^F= 3F^",2
48EA   31 00 4D               LD   SP,STACK   
48ED   CD 84 0C               CALL   coldInit   
48F0   CD D2 4B               CALL   execStr   
48F3   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-}}^F= 3F^",0   
490A   CD C6 0B               CALL   flushBuffer   
490D   E1                     POP   HL   
490E   E5                     PUSH   HL   
490F   11 02 00               LD   DE,2   
4912   B7                     OR   A   
4913   ED 52                  SBC   HL,DE   
4915   7D                     LD   A,L   
4916   B4                     OR   H   
4917   CA 88 49               JP   Z,expectM_2982S148   
491A   CD 50 0C               CALL   printStr   
491D   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-}}^F= 3F^"   
493A   CD 50 0C               CALL   printStr   
493D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
494C   21 02 00               LD   hl,2   
494F   E5                     PUSH   hl   
4950   E5                     PUSH   hl   
4951   CD 55 0D               CALL   run   
4954   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
495C   CD C6 0B               CALL   flushBuffer   
495F   CD 50 0C               CALL   printStr   
4962   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
496F   E1                     POP   hl   
4970   E5                     PUSH   hl   
4971   E5                     PUSH   hl   
4972   CD 55 0D               CALL   run   
4975   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4984   CD C6 0B               CALL   flushBuffer   
4987   76                     HALT      
4988                EXPECTM_2982S148:      
4988   E1                     POP   HL   
4989                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4989   31 00 4D               LD   SP,STACK   
498C   CD 84 0C               CALL   coldInit   
498F   CD D2 4B               CALL   execStr   
4992   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
49B5   CD C6 0B               CALL   flushBuffer   
49B8   E1                     POP   HL   
49B9   E5                     PUSH   HL   
49BA   11 01 00               LD   DE,1   
49BD   B7                     OR   A   
49BE   ED 52                  SBC   HL,DE   
49C0   7D                     LD   A,L   
49C1   B4                     OR   H   
49C2   CA 3F 4A               JP   Z,expectM_2983S149   
49C5   CD 50 0C               CALL   printStr   
49C8   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c}}^F= 3F^"   
49F1   CD 50 0C               CALL   printStr   
49F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A03   21 01 00               LD   hl,1   
4A06   E5                     PUSH   hl   
4A07   E5                     PUSH   hl   
4A08   CD 55 0D               CALL   run   
4A0B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A13   CD C6 0B               CALL   flushBuffer   
4A16   CD 50 0C               CALL   printStr   
4A19   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A26   E1                     POP   hl   
4A27   E5                     PUSH   hl   
4A28   E5                     PUSH   hl   
4A29   CD 55 0D               CALL   run   
4A2C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A3B   CD C6 0B               CALL   flushBuffer   
4A3E   76                     HALT      
4A3F                EXPECTM_2983S149:      
4A3F   E1                     POP   HL   
4A40                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c}}^F= 3F^",1
4A40   31 00 4D               LD   SP,STACK   
4A43   CD 84 0C               CALL   coldInit   
4A46   CD D2 4B               CALL   execStr   
4A49   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c}}^F= 3F^",0   
4A6C   CD C6 0B               CALL   flushBuffer   
4A6F   E1                     POP   HL   
4A70   E5                     PUSH   HL   
4A71   11 01 00               LD   DE,1   
4A74   B7                     OR   A   
4A75   ED 52                  SBC   HL,DE   
4A77   7D                     LD   A,L   
4A78   B4                     OR   H   
4A79   CA F6 4A               JP   Z,expectM_2984S150   
4A7C   CD 50 0C               CALL   printStr   
4A7F   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c}}^F= 3F^"   
4AA8   CD 50 0C               CALL   printStr   
4AAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4ABA   21 01 00               LD   hl,1   
4ABD   E5                     PUSH   hl   
4ABE   E5                     PUSH   hl   
4ABF   CD 55 0D               CALL   run   
4AC2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4ACA   CD C6 0B               CALL   flushBuffer   
4ACD   CD 50 0C               CALL   printStr   
4AD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ADD   E1                     POP   hl   
4ADE   E5                     PUSH   hl   
4ADF   E5                     PUSH   hl   
4AE0   CD 55 0D               CALL   run   
4AE3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4AF2   CD C6 0B               CALL   flushBuffer   
4AF5   76                     HALT      
4AF6                EXPECTM_2984S150:      
4AF6   E1                     POP   HL   
4AF7                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4AF7   31 00 4D               LD   SP,STACK   
4AFA   CD 84 0C               CALL   coldInit   
4AFD   CD D2 4B               CALL   execStr   
4B00   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4B30   CD C6 0B               CALL   flushBuffer   
4B33   E1                     POP   HL   
4B34   E5                     PUSH   HL   
4B35   11 02 00               LD   DE,2   
4B38   B7                     OR   A   
4B39   ED 52                  SBC   HL,DE   
4B3B   7D                     LD   A,L   
4B3C   B4                     OR   H   
4B3D   CA C7 4B               JP   Z,expectM_2985S151   
4B40   CD 50 0C               CALL   printStr   
4B43   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4B79   CD 50 0C               CALL   printStr   
4B7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B8B   21 02 00               LD   hl,2   
4B8E   E5                     PUSH   hl   
4B8F   E5                     PUSH   hl   
4B90   CD 55 0D               CALL   run   
4B93   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B9B   CD C6 0B               CALL   flushBuffer   
4B9E   CD 50 0C               CALL   printStr   
4BA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BAE   E1                     POP   hl   
4BAF   E5                     PUSH   hl   
4BB0   E5                     PUSH   hl   
4BB1   CD 55 0D               CALL   run   
4BB4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4BC3   CD C6 0B               CALL   flushBuffer   
4BC6   76                     HALT      
4BC7                EXPECTM_2985S151:      
4BC7   E1                     POP   HL   
4BC8                             ; test "$1000 0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe", $1000
4BC8                             ; 
4BC8   CD 50 0C               CALL   printStr   
4BCB   44 6F 6E 65 21 00      .CSTR   "Done!"   
4BD1   76                     HALT      
4BD2                             ; executes a null teminated string (null executes exit_)
4BD2                             ; the string should be immedaitely following the call
4BD2                EXECSTR:      ; create a root stack frame
4BD2   C1                     POP   bc   ; bc = code*
4BD3   0B                     DEC   bc   ; dec to prepare for next routine
4BD4   11 00 00               LD   de,0   
4BD7   D5                     PUSH   de   ; push fake IP
4BD8   D5                     PUSH   de   ; push null arg_list*
4BD9   D5                     PUSH   de   ; push null first_arg*
4BDA   D5                     PUSH   de   ; push fake BP
4BDB   DD E9                  JP   (ix)   
4BDD                STKSIZE:   EQU   $100   ; Stack size
4BDD                TIBSIZE:   EQU   $100   ; 256 bytes
4BDD                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4BDD                          ALIGN   $100   
4C00                          DS   STKSIZE   
4D00                STACK:       
4D00                          ALIGN   $100   
4D00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4E00                          ALIGN   $100   
4E00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4F00                          ALIGN   $100   
4F00                VARS:        
4F00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4FD0                RESTARTS:      
4FD0                RST08:    DS   2   
4FD2                RST10:    DS   2   
4FD4                RST18:    DS   2   
4FD6                RST20:    DS   2   
4FD8                RST28:    DS   2   
4FDA                RST30:    DS   2   ; 
4FDC                BAUD:     DS   2   ; 
4FDE                INTVEC:   DS   2   ; 
4FE0                NMIVEC:   DS   2   ; 
4FE2                GETCVEC:   DS   2   ; 
4FE4                PUTCVEC:   DS   2   ; 
4FE6                SYSVARS:      
4FE6                             ; initialised sys variables (preserved)
4FE6                VDATAWIDTH:   DS   2   ; 
4FE8                VNUMBASE:   DS   2   ; 
4FEA                VTIBPTR:   DS   2   ; 
4FEC                VBUFPTR:   DS   2   ; 
4FEE                VNEXT:    DS   2   ; 
4FF0                VHEAPPTR:   DS   2   ; 
4FF2                VRECUR:   DS   2   ; 
4FF4                             ; uninitialised sys variables (preserved)
4FF4                VPOINTER:   DS   2   ; 
4FF6                VREMAIN:   DS   2   ; 
4FF8                VSAVEDIP:   DS   2   ; 
4FFA                VSAVEDSP:   DS   2   ; 
4FFC                VSAVEDNEXT:   DS   2   ; 
4FFE                VSAVEDBP:   DS   2   ; 
5000                             ; uninitialised sys variables (unpreserved)
5000                VTEMP1:   DS   2   ; 
5002                VTEMP2:   DS   2   ; 
5004                VTEMP3:   DS   2   ; 
5006                VLASTDEF:   DS   2   ; 
5008                TBPTR:    DS   2   ; reserved for tests
500A                TITLEBUF:   DS   20   
501E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0A82 DEFINED AT LINE 1730 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2247 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 337 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
PLUS_:              0204 DEFINED AT LINE 173 IN MAIN.asm
ADD:                0204 DEFINED AT LINE 174 IN MAIN.asm
ADD1:               020F DEFINED AT LINE 182 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ADD3:               0213 DEFINED AT LINE 187 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
ADD4:               021D DEFINED AT LINE 195 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
AMPER_:             0220 DEFINED AT LINE 198 IN MAIN.asm
AND:                0220 DEFINED AT LINE 199 IN MAIN.asm
AND1:               0227 DEFINED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
PIPE_:              022B DEFINED AT LINE 212 IN MAIN.asm
OR:                 022B DEFINED AT LINE 213 IN MAIN.asm
AT_:                0234 DEFINED AT LINE 226 IN MAIN.asm
ADDR:               0234 DEFINED AT LINE 227 IN MAIN.asm
BANG_:              023E DEFINED AT LINE 232 IN MAIN.asm
NOT:                0248 DEFINED AT LINE 240 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
MINUS_:             024E DEFINED AT LINE 245 IN MAIN.asm
SUB:                0259 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SUB1:               0263 DEFINED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
NUM_:               026B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
EQ_:                026E DEFINED AT LINE 271 IN MAIN.asm
EQ0_:               0277 DEFINED AT LINE 278 IN MAIN.asm
EQ1:                0278 DEFINED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 243 IN MAIN.asm
GT_:                027B DEFINED AT LINE 284 IN MAIN.asm
LT_:                0286 DEFINED AT LINE 292 IN MAIN.asm
LT1:                028F DEFINED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
EQUALS:             0296 DEFINED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
NOTEQUALS:          029D DEFINED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
LESSTHANEQ:         02A4 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
LESSTHAN:           02A9 DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 303 IN MAIN.asm
LESSTHAN1:          02AE DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
TRUE1:              02B1 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
NULL1:              02B7 DEFINED AT LINE 340 IN MAIN.asm
FALSE1:             02B7 DEFINED AT LINE 341 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 317 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
NOP_:               02BB DEFINED AT LINE 344 IN MAIN.asm
RPAREN_:            02BD DEFINED AT LINE 346 IN MAIN.asm
DOLLAR_:            02C0 DEFINED AT LINE 348 IN MAIN.asm
LBRACK_:            02C3 DEFINED AT LINE 350 IN MAIN.asm
RBRACK_:            02C6 DEFINED AT LINE 352 IN MAIN.asm
PERCENT_:           02C9 DEFINED AT LINE 354 IN MAIN.asm
LPAREN_:            02CC DEFINED AT LINE 356 IN MAIN.asm
LBRACE_:            02CC DEFINED AT LINE 357 IN MAIN.asm
RBRACE_:            02CF DEFINED AT LINE 359 IN MAIN.asm
TICK_:              02D2 DEFINED AT LINE 361 IN MAIN.asm
SEMICOLON_:         02D5 DEFINED AT LINE 363 IN MAIN.asm
DOT_:               02D8 DEFINED AT LINE 365 IN MAIN.asm
COLON_:             02DB DEFINED AT LINE 367 IN MAIN.asm
UPCASE_:            02DE DEFINED AT LINE 369 IN MAIN.asm
LOWCASE_:           02E1 DEFINED AT LINE 371 IN MAIN.asm
QUESTION_:          02E4 DEFINED AT LINE 373 IN MAIN.asm
STAR_:              02E7 DEFINED AT LINE 375 IN MAIN.asm
HASH_:              02EA DEFINED AT LINE 377 IN MAIN.asm
CARET_:             02ED DEFINED AT LINE 379 IN MAIN.asm
COMMA_:             02F0 DEFINED AT LINE 381 IN MAIN.asm
DQUOTE_:            02F3 DEFINED AT LINE 383 IN MAIN.asm
BACKSLASH_:         02F6 DEFINED AT LINE 385 IN MAIN.asm
UNDERSCORE_:        02F9 DEFINED AT LINE 387 IN MAIN.asm
TILDE_:             02FC DEFINED AT LINE 389 IN MAIN.asm
SLASH_:             02FF DEFINED AT LINE 391 IN MAIN.asm
SLASH:              0301 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
COMMAND:            0301 DEFINED AT LINE 400 IN MAIN.asm
COMMAND_A_:         0327 DEFINED AT LINE 435 IN MAIN.asm
COMMAND_B_:         0334 DEFINED AT LINE 446 IN MAIN.asm
COMMAND_F_:         033F DEFINED AT LINE 455 IN MAIN.asm
COMMAND_I_:         0342 DEFINED AT LINE 458 IN MAIN.asm
COMMAND_M_:         034B DEFINED AT LINE 465 IN MAIN.asm
COMMAND_P_:         034E DEFINED AT LINE 468 IN MAIN.asm
COMMAND_Q_:         0357 DEFINED AT LINE 475 IN MAIN.asm
COMMAND_R_:         0360 DEFINED AT LINE 482 IN MAIN.asm
COMMAND_V_:         0363 DEFINED AT LINE 485 IN MAIN.asm
COMMAND_NOP_:       0366 DEFINED AT LINE 488 IN MAIN.asm
DECIMAL_:           0368 DEFINED AT LINE 491 IN MAIN.asm
DECIMAL1:           036B DEFINED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
DIV_:               0370 DEFINED AT LINE 497 IN MAIN.asm
ERROR1_:            0374 DEFINED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
HEXADECIMAL_:       0377 DEFINED AT LINE 504 IN MAIN.asm
KEY_:               037D DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
OUTPUT_:            0380 DEFINED AT LINE 511 IN MAIN.asm
TRUE_:              0383 DEFINED AT LINE 514 IN MAIN.asm
WORDS_:             0386 DEFINED AT LINE 517 IN MAIN.asm
XOR_:               0389 DEFINED AT LINE 520 IN MAIN.asm
XOR1:               038A DEFINED AT LINE 522 IN MAIN.asm
ABSOLUTE_:          0394 DEFINED AT LINE 535 IN MAIN.asm
ADDROF_:            03A1 DEFINED AT LINE 550 IN MAIN.asm
ADDROF1:            03B5 DEFINED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
ADDROF2:            03C0 DEFINED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
ARRAYSIZE_:         03C2 DEFINED AT LINE 576 IN MAIN.asm
BREAK_:             03CA DEFINED AT LINE 586 IN MAIN.asm
COLDSTART_:         03CD DEFINED AT LINE 590 IN MAIN.asm
BYTES_:             03D0 DEFINED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
BYTES1:             03D3 DEFINED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
INPUT_:             03D8 DEFINED AT LINE 602 IN MAIN.asm
PRINTCHARS_:        03E3 DEFINED AT LINE 615 IN MAIN.asm
QUIT_:              03EA DEFINED AT LINE 622 IN MAIN.asm
QUIT1:              03F1 DEFINED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
WORDS:              03F4 DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
COMMENT:            03FA DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
COMMAND_F:          0403 DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
FOREACH_:           041A DEFINED AT LINE 671 IN MAIN.asm
FLUSH_:             041D DEFINED AT LINE 676 IN MAIN.asm
FUNCSRC_:           0422 DEFINED AT LINE 680 IN MAIN.asm
F1_:                0425 DEFINED AT LINE 683 IN MAIN.asm
F2_:                0428 DEFINED AT LINE 686 IN MAIN.asm
F3_:                042B DEFINED AT LINE 689 IN MAIN.asm
F4_:                042E DEFINED AT LINE 692 IN MAIN.asm
FZ_:                0431 DEFINED AT LINE 695 IN MAIN.asm
FALSE_:             0434 DEFINED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
COMMAND_M:          0437 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
MAP_:               0440 DEFINED AT LINE 708 IN MAIN.asm
COMMAND_R:          0443 DEFINED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 483 IN MAIN.asm
RECUR_:             0450 DEFINED AT LINE 722 IN MAIN.asm
REMAIN_:            0456 DEFINED AT LINE 727 IN MAIN.asm
RANGESRC_:          045C DEFINED AT LINE 732 IN MAIN.asm
COMMAND_V:          045F DEFINED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
CONSTBUFSTART_:     0472 DEFINED AT LINE 752 IN MAIN.asm
CONSTHEAPSTART_:    0477 DEFINED AT LINE 756 IN MAIN.asm
CONSTTIBSTART_:     047C DEFINED AT LINE 760 IN MAIN.asm
VARBUFPTR_:         0481 DEFINED AT LINE 764 IN MAIN.asm
VARHEAPPTR_:        048A DEFINED AT LINE 769 IN MAIN.asm
VARTIBPTR_:         0493 DEFINED AT LINE 774 IN MAIN.asm
VARIABLE:           049C DEFINED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
CONSTANT:           049F DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
DOT:                04A2 DEFINED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
DOTNUMBER_:         04B1 DEFINED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 1369 IN MAIN.asm
DOTSTRING_:         04BC DEFINED AT LINE 809 IN MAIN.asm
DOTSTRING0:         04C3 DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
DOTSTRING1:         04C9 DEFINED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 812 IN MAIN.asm
DOTCHAR_:           04D6 DEFINED AT LINE 828 IN MAIN.asm
DOTXCHARS_:         04DB DEFINED AT LINE 834 IN MAIN.asm
DOTXCHARS0:         04DC DEFINED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
DOTXCHARS1:         04E5 DEFINED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
DOTXCHARS2:         04ED DEFINED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
FOREACH:            04F7 DEFINED AT LINE 32
                    > USED AT LINE 672 IN MAIN.asm
FOREACHM_1334S864:  0505 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0543 DEFINED AT LINE 32
                    > USED AT LINE 681 IN MAIN.asm
FUNCSRCM_1349S880:  054F DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           057C DEFINED AT LINE 32
DOTARRAYM_1359S891: 058A DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                05C4 DEFINED AT LINE 32
                    > USED AT LINE 709 IN MAIN.asm
MAPM_1366S899:      05D1 DEFINED AT LINE 39
                    > USED AT LINE 35
RANGESRC:           0606 DEFINED AT LINE 32
                    > USED AT LINE 733 IN MAIN.asm
RANGESRCM_1380S914: 0615 DEFINED AT LINE 39
                    > USED AT LINE 35
BACKSLASH:          0686 DEFINED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
UNDERSCORE:         0686 DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
TILDE:              0686 DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 390 IN MAIN.asm
COMMA:              0686 DEFINED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
SEMICOLON:          0686 DEFINED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
COLON:              0688 DEFINED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
LAMBDA:             0688 DEFINED AT LINE 950 IN MAIN.asm
PERCENT:            069A DEFINED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 355 IN MAIN.asm
ARG:                069A DEFINED AT LINE 965 IN MAIN.asm
ARG0:               06B6 DEFINED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
ARG0A:              06BF DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
ARG1:               06C4 DEFINED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
ARG1A:              06CC DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
LBRACK:             06CF DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 351 IN MAIN.asm
ARRAYSTART:         06CF DEFINED AT LINE 1007 IN MAIN.asm
RBRACK:             06EB DEFINED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 353 IN MAIN.asm
ARRAYEND:           06EB DEFINED AT LINE 1022 IN MAIN.asm
ARRAYEND1:          0707 DEFINED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
ARRAYEND2:          0717 DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
ARRAYEND3:          071C DEFINED AT LINE 1053 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
HASH:               073B DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
ARRAYINDEX:         073B DEFINED AT LINE 1077 IN MAIN.asm
ARRAYINDEX0:        0743 DEFINED AT LINE 1083 IN MAIN.asm
ARRAYINDEX1:        0744 DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
ARRAYINDEX2:        0750 DEFINED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
ASSIGN:             0753 DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
ASSIGN0:            0755 DEFINED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
ASSIGNX:            0756 DEFINED AT LINE 1104 IN MAIN.asm
ASSIGN1:            0762 DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
LBRACE:             0764 DEFINED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
RBRACE:             0769 DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
BLOCKEND:           0769 DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
BLOCKEND1:          079B DEFINED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
BLOCKEND2:          07A7 DEFINED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
BLOCKEND3:          07B9 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1157 IN MAIN.asm
BLOCKEND4:          07CD DEFINED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
BREAK:              07D6 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
BREAK1:             07DD DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
TICK:               07F0 DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
CHAR:               07F0 DEFINED AT LINE 1200 IN MAIN.asm
CHAR1:              07F3 DEFINED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
CHAR2:              07FF DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
CHAR3:              0802 DEFINED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
DIV:                0805 DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
BUFFERDEC:          0816 DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
BUFFERDEC0:         0830 DEFINED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
BUFFERDEC1:         0840 DEFINED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
BUFFERDEC2:         0860 DEFINED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
BUFFERDEC3:         0862 DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
BUFFERDEC4:         0872 DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
BUFFERDEC5:         0873 DEFINED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
BUFFERHEX:          087C DEFINED AT LINE 1303 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
BUFFERHEX1:         089D DEFINED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
BUFFERHEX2:         08A6 DEFINED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
DIVIDE:             08B4 DEFINED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
DIVIDE1:            08B9 DEFINED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
DIVIDE2:            08C6 DEFINED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
DIVIDE3:            08C7 DEFINED AT LINE 1356 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
FZ:                 08CD DEFINED AT LINE 1363 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
CARET:              08DA DEFINED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
GO:                 08DA DEFINED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                08DB DEFINED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
GO2:                08E1 DEFINED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1380 IN MAIN.asm
GOBLOCK:            08EC DEFINED AT LINE 1390 IN MAIN.asm
                    > USED AT LINE 1385 IN MAIN.asm
GOBLOCK2:           0911 DEFINED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
GOBLOCK3:           091B DEFINED AT LINE 1413 IN MAIN.asm
GOFUNC:             091F DEFINED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
GOFUNC1:            0938 DEFINED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1446 IN MAIN.asm
GOFUNC2:            093E DEFINED AT LINE 1443 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
GOFUNC3:            0949 DEFINED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1425 IN MAIN.asm
GOFUNC4:            0961 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
GOFUNC5:            0964 DEFINED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
GOFUNC6:            0967 DEFINED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
GOFUNC7:            096A DEFINED AT LINE 1476 IN MAIN.asm
GOFUNC8:            096E DEFINED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
DOLLAR:             0979 DEFINED AT LINE 1490 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
HEXNUM:             0979 DEFINED AT LINE 1491 IN MAIN.asm
HEXNUM1:            097C DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
HEXNUM2:            0984 DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
UPCASE:             0996 DEFINED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
LOWCASE:            099B DEFINED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
IDENT1:             09A0 DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 1515 IN MAIN.asm
QUESTION:           09AD DEFINED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
IF:                 09AD DEFINED AT LINE 1534 IN MAIN.asm
IFTE:               09B9 DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
IFTE1:              09BA DEFINED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
KEY:                09C6 DEFINED AT LINE 1556 IN MAIN.asm
OUTPUT:             09CF DEFINED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
STAR:               09D8 DEFINED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
MUL:                09D8 DEFINED AT LINE 1575 IN MAIN.asm
MUL2:               09DA DEFINED AT LINE 1578 IN MAIN.asm
MUL3:               09E2 DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
NUM:                09F4 DEFINED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
NUM0:               09FD DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1600 IN MAIN.asm
NUM1:               09FE DEFINED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
NUM2:               0A16 DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
NUM3:               0A21 DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
RPAREN:             0A24 DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
SHIFTLEFT:          0A2C DEFINED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
SHIFTLEFT1:         0A34 DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
SHIFTLEFT2:         0A35 DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
SHIFTRIGHT:         0A3C DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
SHIFTRIGHT1:        0A44 DEFINED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
SHIFTRIGHT2:        0A48 DEFINED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1664 IN MAIN.asm
DQUOTE:             0A4F DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 384 IN MAIN.asm
STRING:             0A4F DEFINED AT LINE 1678 IN MAIN.asm
STRING1:            0A58 DEFINED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 1694 IN MAIN.asm
STRING2:            0A5B DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
STRING3:            0A64 DEFINED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1692 IN MAIN.asm
PRINTCHARS1:        0A77 DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
PRINTCHARS2:        0A7D DEFINED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
FILTER:             0A82 DEFINED AT LINE 1729 IN MAIN.asm
PARSEARGS:          0A84 DEFINED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
PARSEARGS1:         0A8E DEFINED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
PARSEARGS1A:        0A96 DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
PARSEARGS2:         0A9E DEFINED AT LINE 1757 IN MAIN.asm
PARSEARGS3:         0AA6 DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
PARSEARGS4:         0AA9 DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
PARSEARGS5:         0AAF DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
PARSEBLOCK:         0ABA DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
PARSEBLOCK1:        0ABE DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
PARSEBLOCK2:        0AEA DEFINED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
PARSEBLOCK3:        0AED DEFINED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
PARSEBLOCK4:        0AF5 DEFINED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
PARSEBLOCK5:        0AF8 DEFINED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
PARSEBLOCK6:        0B20 DEFINED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
CREATEFUNC:         0B24 DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
CREATEFUNC0:        0B43 DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
CREATEFUNC1:        0B5B DEFINED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
CREATEFUNC2:        0B6E DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
CREATEFUNC2A:       0B8D DEFINED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
CREATEFUNC3:        0B9C DEFINED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
CREATEFUNC4:        0BA7 DEFINED AT LINE 1952 IN MAIN.asm
CREATEFUNC5:        0BA8 DEFINED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
FLUSHBUFFER:        0BC6 DEFINED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
COMMANDTABLE:       0BDD DEFINED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
COMMANDTABLE1:      0BE7 DEFINED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
COMMANDTABLE2:      0BEC DEFINED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
JUMPTABLE:          0BF1 DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
JUMPTABLE0:         0BF3 DEFINED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
JUMPTABLE1:         0BFF DEFINED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
JUMPTABLE2:         0C02 DEFINED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
PRTSTR0:            0C05 DEFINED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
PRTSTR:             0C09 DEFINED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
NESTING:            0C0E DEFINED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2190 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
NESTING0:           0C18 DEFINED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
NESTING1A:          0C1F DEFINED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
NESTING1:           0C22 DEFINED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
NESTING2:           0C31 DEFINED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
NESTING3:           0C33 DEFINED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
NESTING4:           0C3E DEFINED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
PROMPT:             0C40 DEFINED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
CRLF:               0C49 DEFINED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
PRINTSTR:           0C50 DEFINED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 156
INIT:               0C57 DEFINED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 2161 IN MAIN.asm
INIT1:              0C5F DEFINED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
WARMINIT:           0C67 DEFINED AT LINE 2124 IN MAIN.asm
COLDBOOT0:          0C7A DEFINED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 2157 IN MAIN.asm
COLDINIT:           0C84 DEFINED AT LINE 2137 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0C95 DEFINED AT LINE 2146 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
COLDSTART:          0CA2 DEFINED AT LINE 2155 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
START:              0CAB DEFINED AT LINE 2159 IN MAIN.asm
START1:             0CB1 DEFINED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2158 IN MAIN.asm
INTERPRET:          0CB7 DEFINED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2294 IN MAIN.asm
                    > USED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 2326 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
                    > USED AT LINE 2334 IN MAIN.asm
INTERPRET2:         0CC6 DEFINED AT LINE 2175 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
INTERPRET3:         0CCE DEFINED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
INTERPRET4:         0CD9 DEFINED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2181 IN MAIN.asm
INTERPRET5:         0CDE DEFINED AT LINE 2199 IN MAIN.asm
                    > USED AT LINE 2249 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
INTERPRET5A:        0CFC DEFINED AT LINE 2236 IN MAIN.asm
INTERPRET6:         0CFE DEFINED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
INTERPRET7:         0D0C DEFINED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
INTERPRET8:         0D1F DEFINED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
NEXT:               0D3A DEFINED AT LINE 2279 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
NEXT1:              0D4A DEFINED AT LINE 2291 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
EXIT:               0D51 DEFINED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
RUN:                0D55 DEFINED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR1:             0D59 DEFINED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 502 IN MAIN.asm
ERROR:              0D5D DEFINED AT LINE 2308 IN MAIN.asm
BACKSPACE_:         0D70 DEFINED AT LINE 2313 IN MAIN.asm
                    > USED AT LINE 2213 IN MAIN.asm
EDIT_:              0D80 DEFINED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
REEDIT_:            0D98 DEFINED AT LINE 2328 IN MAIN.asm
                    > USED AT LINE 2215 IN MAIN.asm
PRINTSTACK_:        0D9B DEFINED AT LINE 2331 IN MAIN.asm
F1:                 0DA5 DEFINED AT LINE 32
                    > USED AT LINE 684 IN MAIN.asm
F1M_2854S12:        0DB0 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0DB1 DEFINED AT LINE 32
                    > USED AT LINE 687 IN MAIN.asm
F2M_2856S15:        0DBC DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0DBD DEFINED AT LINE 32
                    > USED AT LINE 690 IN MAIN.asm
F3M_2858S18:        0DC8 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0DC9 DEFINED AT LINE 32
                    > USED AT LINE 693 IN MAIN.asm
F4M_2860S21:        0DD4 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         0E00 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_2872S38:    0E76 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S39:    0EED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S40:    0F62 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S41:    0FD7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S42:    104C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S43:    10C1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S44:    1138 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S45:    11B1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S46:    1228 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S47:    129F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S48:    1318 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S49:    1393 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S50:    140C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S51:    1485 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S52:    1504 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S53:    1583 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S54:    1600 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S55:    1681 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S56:    1706 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S57:    1789 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S58:    1806 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2893S59:    188B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2894S60:    190C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2895S61:    1989 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2896S62:    1A06 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2897S63:    1A8B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2898S64:    1B08 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2899S65:    1B85 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2900S66:    1C04 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2901S67:    1C93 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2902S68:    1D10 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2903S69:    1D95 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2904S70:    1E12 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2905S71:    1E9D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2906S72:    1F28 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2907S73:    1FB3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2908S74:    203E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2909S75:    20C3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2910S76:    2140 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2911S77:    21BF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2912S78:    223E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2913S79:    22BB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2914S80:    2338 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2915S81:    23B5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2916S82:    2432 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2917S83:    24AF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2918S84:    252C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2919S85:    25A9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2920S86:    2626 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2921S87:    26A5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2922S88:    2724 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2923S89:    27A3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2924S90:    2824 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2925S91:    28A5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2926S92:    2920 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2927S93:    299B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2928S94:    2A1C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2929S95:    2AA3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2930S96:    2B2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2931S97:    2BB5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2932S98:    2C4A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2933S99:    2CDF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2934S100:   2D5C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2935S101:   2DDB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2936S102:   2E60 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2937S103:   2EE9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2938S104:   2F6E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2939S105:   2FFD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2940S106:   308E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2941S107:   3125 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2942S108:   31C0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2943S109:   324D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2944S110:   32E0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2945S111:   3375 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2946S112:   340C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2947S113:   34A1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2948S114:   3544 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2949S115:   35D5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2950S116:   3674 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2951S117:   3715 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2952S118:   37B8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2953S119:   3865 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2954S120:   3912 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2955S121:   399F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2956S122:   3A34 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2957S123:   3AC1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2958S124:   3B5A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2959S125:   3BF3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2960S126:   3C9A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2961S127:   3D49 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2962S128:   3DF8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2963S129:   3E99 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2964S130:   3F40 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2965S131:   3FFD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2966S132:   40C4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2967S133:   415D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2968S134:   41F6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2969S135:   427F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2970S136:   4308 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2971S137:   4391 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2972S138:   441A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2973S139:   449B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2974S140:   451C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2975S141:   459D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2976S142:   461E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2977S143:   46A9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2978S144:   4738 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2979S145:   47C5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2980S146:   4850 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2981S147:   48E9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2982S148:   4988 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2983S149:   4A3F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2984S150:   4AF6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2985S151:   4BC7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            4BD2 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4D00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1392 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2160 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4D00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2271 IN MAIN.asm
BUF:                4E00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
VARS:               4F00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 2143 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           4FD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4FD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4FD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4FD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4FD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4FD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4FDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4FDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4FDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4FE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4FE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4FE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4FE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2139 IN MAIN.asm
VDATAWIDTH:         4FE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
VNUMBASE:           4FE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
VTIBPTR:            4FEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
                    > USED AT LINE 2270 IN MAIN.asm
VBUFPTR:            4FEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
VNEXT:              4FEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2151 IN MAIN.asm
VHEAPPTR:           4FF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
VRECUR:             4FF2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
VPOINTER:           4FF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 228 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
VREMAIN:            4FF6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
VSAVEDIP:           4FF8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2273 IN MAIN.asm
VSAVEDSP:           4FFA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 2274 IN MAIN.asm
VSAVEDNEXT:         4FFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 2275 IN MAIN.asm
VSAVEDBP:           4FFE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2128 IN MAIN.asm
                    > USED AT LINE 2276 IN MAIN.asm
VTEMP1:             5000 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
VTEMP2:             5002 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
VTEMP3:             5004 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
VLASTDEF:           5006 DEFINED AT LINE 59 IN ram.asm
TBPTR:              5008 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           500A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 2114 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2163 IN MAIN.asm
HEAP:               501E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
