0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 3D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 3D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 3D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 3D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 3D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 3D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 3D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 3D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 3D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 3D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 3C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 3D               LD   (RST08),HL   
0094   22 D2 3D               LD   (RST10),HL   
0097   22 D4 3D               LD   (RST18),HL   
009A   22 D6 3D               LD   (RST20),HL   
009D   22 D8 3D               LD   (RST28),HL   
00A0   22 DA 3D               LD   (RST30),HL   
00A3   22 DE 3D               LD   (INTVEC),HL   
00A6   22 E0 3D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 3D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 3D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 3C               LD   SP,STACK   
00C6   CD 95 09               CALL   init   
00C9   C3 00 0B               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   20 0A                  DW   next   ; g nNext
0186   00 40                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   88                     DB   lsb(nop_)   ; SP
0221   42                     DB   lsb(not_)   ; !
0222   53                     DB   lsb(string_)   ; "
0223   4A                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   15                     DB   lsb(arrIndex_)   ; %
0226   06                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   88                     DB   lsb(nop_)   ; )
022A   3F                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   88                     DB   lsb(nop_)   ; ,
022D   56                     DB   lsb(sub_)   ; -
022E   27                     DB   lsb(dot_)   ; .
022F   85                     DB   lsb(div_)   ; /	
0230   47                     DB   lsb(num_)   ; 0
0231   47                     DB   lsb(num_)   ; 1
0232   47                     DB   lsb(num_)   ; 2
0233   47                     DB   lsb(num_)   ; 3
0234   47                     DB   lsb(num_)   ; 4
0235   47                     DB   lsb(num_)   ; 5
0236   47                     DB   lsb(num_)   ; 6
0237   47                     DB   lsb(num_)   ; 7
0238   47                     DB   lsb(num_)   ; 8
0239   47                     DB   lsb(num_)   ; 9
023A   2D                     DB   lsb(go_)   ; :
023B   24                     DB   lsb(discard_)   ; ;
023C   73                     DB   lsb(lt_)   ; <
023D   59                     DB   lsb(eq_)   ; =
023E   68                     DB   lsb(gt_)   ; >
023F   36                     DB   lsb(if_)   ; ?
0240   03                     DB   lsb(addr_)   ; @
0241   30                     DB   lsb(identU_)   ; A
0242   30                     DB   lsb(identU_)   ; B
0243   30                     DB   lsb(identU_)   ; C
0244   30                     DB   lsb(identU_)   ; D
0245   30                     DB   lsb(identU_)   ; E
0246   30                     DB   lsb(identU_)   ; F
0247   30                     DB   lsb(identU_)   ; G
0248   30                     DB   lsb(identU_)   ; h
0249   30                     DB   lsb(identU_)   ; I
024A   30                     DB   lsb(identU_)   ; J
024B   30                     DB   lsb(identU_)   ; K
024C   30                     DB   lsb(identU_)   ; L
024D   30                     DB   lsb(identU_)   ; M
024E   30                     DB   lsb(identU_)   ; N
024F   30                     DB   lsb(identU_)   ; O
0250   30                     DB   lsb(identU_)   ; p
0251   30                     DB   lsb(identU_)   ; Q
0252   30                     DB   lsb(identU_)   ; R
0253   30                     DB   lsb(identU_)   ; S
0254   30                     DB   lsb(identU_)   ; T
0255   30                     DB   lsb(identU_)   ; U
0256   30                     DB   lsb(identU_)   ; V
0257   30                     DB   lsb(identU_)   ; W
0258   30                     DB   lsb(identU_)   ; X
0259   30                     DB   lsb(identU_)   ; Y
025A   30                     DB   lsb(identU_)   ; Z
025B   0F                     DB   lsb(arrBegin_)   ; [
025C   88                     DB   lsb(nop_)   ; \
025D   12                     DB   lsb(arrEnd_)   ; ]
025E   50                     DB   lsb(xor_)   ; ^
025F   2A                     DB   lsb(remain_)   ; _
0260   53                     DB   lsb(string_)   ; `     used for testing string   	
0261   33                     DB   lsb(identL_)   ; a
0262   33                     DB   lsb(identL_)   ; b
0263   33                     DB   lsb(identL_)   ; c
0264   33                     DB   lsb(identL_)   ; d
0265   33                     DB   lsb(identL_)   ; e
0266   33                     DB   lsb(identL_)   ; f
0267   33                     DB   lsb(identL_)   ; g
0268   33                     DB   lsb(identL_)   ; h
0269   33                     DB   lsb(identL_)   ; i
026A   33                     DB   lsb(identL_)   ; j
026B   33                     DB   lsb(identL_)   ; k
026C   33                     DB   lsb(identL_)   ; l
026D   33                     DB   lsb(identL_)   ; m
026E   33                     DB   lsb(identL_)   ; n
026F   33                     DB   lsb(identL_)   ; o
0270   33                     DB   lsb(identL_)   ; p
0271   33                     DB   lsb(identL_)   ; q
0272   33                     DB   lsb(identL_)   ; r
0273   33                     DB   lsb(identL_)   ; s
0274   33                     DB   lsb(identL_)   ; t
0275   33                     DB   lsb(identL_)   ; u
0276   33                     DB   lsb(identL_)   ; v
0277   33                     DB   lsb(identL_)   ; w
0278   33                     DB   lsb(identL_)   ; x
0279   33                     DB   lsb(identL_)   ; y
027A   33                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   4D                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   39                     DB   lsb(inv_)   ; ~
027F   88                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   C3 8A 03               JP   add   
0303                ADDR_:       
0303   C3 A4 03               JP   addr   
0306                AND_:        
0306   C3 B0 03               JP   and   
0309                ARG_:        
0309   C3 CD 03               JP   arg   
030C                ARG_LIST_:      
030C   C3 04 04               JP   arg_list   
030F                ARRBEGIN_:      
030F   C3 36 04               JP   arrBegin   
0312                ARREND_:      
0312   C3 52 04               JP   arrEnd   
0315                ARRINDEX_:      
0315   C3 A0 04               JP   arrIndex   
0318                BLOCK_:      
0318   C3 C9 04               JP   block   
031B                BLOCKEND_:      
031B   C3 32 05               JP   blockEnd   
031E                CHAR_:       
031E   C3 87 05               JP   char   
0321                COMMAND_:      
0321   C3 C3 07               JP   command   
0324                DISCARD_:      
0324   E1                     POP   hl   
0325   DD E9                  JP   (ix)   
0327                DOT_:        
0327   C3 BA 05               JP   dot   
032A                REMAIN_:      
032A   C3 53 07               JP   remain   
032D                GO_:         
032D   C3 1E 06               JP   go   
0330                IDENTU_:      
0330   C3 D7 06               JP   identU   
0333                IDENTL_:      
0333   C3 DC 06               JP   identL   
0336                IF_:         
0336   C3 EE 06               JP   if   
0339                INV_:        ; Bitwise INVert the top member of the stack
0339   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
033C   C3 C5 03               JP   xor1   
033F                MUL_:        
033F   C3 07 07               JP   mul   
0342                NOT_:        ; logical invert, any non zero value
0342   21 00 00               LD   hl,0   ; is considered true
0345   18 1D                  JR   eq1   
0347                NUM_:        
0347   C3 23 07               JP   num   
034A                HEXNUM_:      
034A   C3 BA 06               JP   hexnum   
034D                OR_:         
034D   C3 BB 03               JP   or   
0350                XOR_:        
0350   C3 C4 03               JP   xor   
0353                STRING_:      
0353   C3 7C 07               JP   string   
0356                SUB_:        
0356   C3 A4 07               JP   sub   
0359                EQ_:         
0359   03                     INC   bc   
035A   0A                     LD   a,(bc)   ; is it == ?
035B   FE 3D                  CP   "="   
035D   28 04                  JR   z,eq0   ; no its equality
035F   0B                     DEC   bc   
0360   C3 B8 04               JP   assign   ; no its assignment
0363                EQ0:         
0363   E1                     POP   hl   
0364                EQ1:         
0364   D1                     POP   de   
0365   C3 FD 05               JP   equals   
0368                GT_:         
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   CA 69 07               JP   z,shiftRight   
036F   D1                     POP   de   
0370   E1                     POP   hl   
0371   18 09                  JR   lt1   
0373                LT_:         
0373   03                     INC   bc   
0374   0A                     LD   a,(bc)   
0375   FE 3C                  CP   "<"   
0377   CA 59 07               JP   z,shiftLeft   
037A   E1                     POP   hl   
037B   D1                     POP   de   
037C                LT1:         
037C   FE 3D                  CP   "="   
037E   CA 05 06               JP   z,lessthaneq   
0381   0B                     DEC   bc   
0382   C3 0A 06               JP   lessthan   
0385                DIV_:        
0385   C3 9C 05               JP   div   
0388                NOP_:        
0388   DD E9                  JP   (ix)   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 BA 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399   03                     INC   bc   
039A   0A                     LD   a,(bc)   
039B   FE 3D                  CP   "="   ; += add to variable
039D   CA BA 04               JP   z,assign0   
03A0   E5                     PUSH   hl   
03A1   0B                     DEC   bc   
03A2   DD E9                  JP   (ix)   
03A4                             ; -- ptr
03A4                ADDR:        
03A4   2A F0 3D               LD   hl,(vPointer)   
03A7   E5                     PUSH   hl   
03A8   21 F0 3D               LD   hl,vPointer   
03AB   22 F0 3D               LD   (vPointer),hl   
03AE   DD E9                  JP   (ix)   
03B0                AND:         
03B0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B1   E1                     POP   hl   
03B2   7B                     LD   a,e   
03B3   A5                     AND   l   
03B4   6F                     LD   l,a   
03B5   7A                     LD   a,d   
03B6   A4                     AND   h   
03B7                AND1:        
03B7   67                     LD   h,a   
03B8   C3 99 03               JP   add3   
03BB                OR:          
03BB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BC   E1                     POP   hl   
03BD   7B                     LD   a,e   
03BE   B5                     OR   l   
03BF   6F                     LD   l,a   
03C0   7A                     LD   a,d   
03C1   B4                     OR   h   
03C2   18 F3                  JR   and1   
03C4                XOR:         
03C4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C5                XOR1:        
03C5   E1                     POP   hl   
03C6   7B                     LD   a,e   
03C7   AD                     XOR   l   
03C8   6F                     LD   l,a   
03C9   7A                     LD   a,d   
03CA   AC                     XOR   h   
03CB   18 EA                  JR   and1   
03CD                             ; $a .. $z
03CD                             ; -- value
03CD                             ; returns value of arg
03CD                ARG:         
03CD   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D0   FD 56 05               LD   d,(iy+5)   
03D3   EB                     EX   de,hl   
03D4   7D                     LD   a,l   ; arg_list* == null, skip
03D5   B4                     OR   h   
03D6   28 1C                  JR   z,arg0a   
03D8   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D9   2B                     DEC   hl   
03DA   7E                     LD   a,(hl)   
03DB   23                     INC   hl   
03DC   23                     INC   hl   
03DD   B7                     OR   a   
03DE   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E0   5F                     LD   e,a   ; e = a = num_args
03E1   03                     INC   bc   ; a = next char = arg_name
03E2   0A                     LD   a,(bc)   
03E3   C5                     PUSH   bc   ; save IP
03E4   43                     LD   b,e   ; b = e = num_args
03E5   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E8   FD 56 03               LD   d,(iy+3)   
03EB                ARG0:        
03EB   1B                     DEC   de   ; a = arg_name, de = next arg*
03EC   1B                     DEC   de   
03ED   BE                     CP   (hl)   
03EE   28 09                  JR   z,arg1   
03F0   23                     INC   hl   ; hl = next arg_list*
03F1   10 F8                  DJNZ   arg0   
03F3   C1                     POP   bc   ; no match, restore IP
03F4                ARG0A:       
03F4   11 00 00               LD   de,0   ; return 0
03F7   18 08                  JR   arg1a   
03F9                ARG1:        
03F9   C1                     POP   bc   ; restore IP
03FA   EB                     EX   de,hl   ; hl = arg*
03FB   22 F0 3D               LD   (vPointer),hl   ; store arg* in setter
03FE   5E                     LD   e,(hl)   
03FF   23                     INC   hl   
0400   56                     LD   d,(hl)   ; de = arg
0401                ARG1A:       
0401   D5                     PUSH   de   ; push arg
0402   DD E9                  JP   (ix)   
0404                             ; arg_list - parses input (ab:c)
0404                             ; names after the : represent uninitialised locals
0404                             ; return values are the state of the stack after the block ends
0404                ARG_LIST:      
0404   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0407   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
040A   23                     INC   hl   ; skip length field to start
040B   23                     INC   hl   
040C   E5                     PUSH   hl   ; save start of arg_list
040D   03                     INC   bc   ; point to next char
040E                ARG_LIST1:      
040E   0A                     LD   a,(bc)   
040F   FE 29                  CP   ")"   ; ) is the arg_list terminator
0411   28 12                  JR   z,arg_list4   
0413   FE 3A                  CP   ":"   
0415   20 03                  JR   nz,arg_list2   
0417   14                     INC   d   ; non zero value local count acts as flag
0418   20 08                  JR   nz,arg_list3   
041A                ARG_LIST2:      
041A   77                     LD   (hl),a   
041B   23                     INC   hl   
041C   1C                     INC   e   ; increase arg count
041D   AF                     XOR   a   
041E   B2                     OR   d   
041F   28 01                  JR   z,arg_list3   
0421   14                     INC   d   ; if d > 0 increase local count
0422                ARG_LIST3:      
0422   03                     INC   bc   ; point to next char
0423   18 E9                  JR   arg_list1   
0425                ARG_LIST4:      
0425   AF                     XOR   a   
0426   B2                     OR   d   
0427   28 01                  JR   z,arg_list5   
0429   15                     DEC   d   ; remove initial inc
042A                ARG_LIST5:      
042A   23                     INC   hl   
042B   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
042E   E1                     POP   hl   ; hl = start of arg_list
042F   E5                     PUSH   hl   ; return start of string
0430   2B                     DEC   hl   ; write length bytes to length field at start - 2
0431   72                     LD   (hl),d   
0432   2B                     DEC   hl   
0433   73                     LD   (hl),e   
0434   DD E9                  JP   (ix)   
0436                ARRBEGIN:      
0436   11 00 00               LD   de,0   ; create stack frame
0439   D5                     PUSH   de   ; push null for IP
043A   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
043D   FD 56 05               LD   d,(iy+5)   ; 
0440   D5                     PUSH   de   ; 
0441   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0444   FD 56 03               LD   d,(iy+3)   ; 
0447   D5                     PUSH   de   ; 
0448   FD E5                  PUSH   iy   ; push BP
044A   FD 21 00 00            LD   iy,0   ; BP = SP
044E   FD 39                  ADD   iy,sp   
0450   DD E9                  JP   (ix)   
0452                ARREND:      
0452   FD 54                  LD   d,iyh   ; de = BP
0454   FD 5D                  LD   e,iyl   
0456   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
045A   62 6B                  LD   hl,de   ; hl = de = BP
045C   B7                     OR   a   
045D   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
045F   CB 3C                  SRL   h   ; 
0461   CB 1D                  RR   l   
0463   44 4D                  LD   bc,hl   ; bc = count
0465   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = array[-2]
0468   71                     LD   (hl),c   ; write num items in length word
0469   23                     INC   hl   
046A   70                     LD   (hl),b   
046B   23                     INC   hl   ; hl = array[0], bc = count
046C                             ; de = BP, hl = array[0], bc = count
046C                ARREND1:      
046C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
046F   77                     LD   (hl),a   ; write lsb of array item
0470   23                     INC   hl   ; move to msb of array item
0471   3A E6 3D               LD   a,(vDataWidth)   ; vDataWidth=1?
0474   3D                     DEC   a   
0475   28 05                  JR   z,arrEnd2   
0477   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
047A   77                     LD   (hl),a   ; write msb of array item
047B   23                     INC   hl   ; move to next word in array
047C                ARREND2:      
047C   FD 2B                  DEC   iy   ; move to next word on stack
047E   FD 2B                  DEC   iy   
0480   0B                     DEC   bc   ; dec items count
0481   79                     LD   a,c   ; if not zero loop
0482   B0                     OR   b   
0483   20 E7                  JR   nz,arrEnd1   
0485   EB                     EX   de,hl   ; de = end of array, hl = BP
0486   F9                     LD   sp,hl   ; sp = BP
0487   E1                     POP   hl   ; de = end of array, hl = old BP
0488   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0489   FD 62                  LD   iyh,d   
048B   FD 6B                  LD   iyl,e   
048D   D1                     POP   de   ; pop arg_list (discard)
048E   D1                     POP   de   ; pop first_arg* (discard)
048F   D1                     POP   de   ; pop IP (discard)
0490   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = array[-2]
0494   22 EC 3D               LD   (vHeapPtr),hl   ; move heap* to end of array
0497   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
049B   13                     INC   de   ; de = array[0]
049C   13                     INC   de   
049D   D5                     PUSH   de   ; return array[0]
049E   DD E9                  JP   (ix)   
04A0                             ; index of an array, based on vDataWidth
04A0                             ; array num -- value    ; also sets vPointer to address
04A0                ARRINDEX:      
04A0   E1                     POP   hl   ; hl = index
04A1   D1                     POP   de   ; de = array
04A2   3A E6 3D               LD   a,(vDataWidth)   ; a = data width
04A5   3D                     DEC   a   
04A6   28 01                  JR   z,arrIndex1   
04A8                ARRINDEX0:      
04A8   29                     ADD   hl,hl   ; if data width = 2 then double
04A9                ARRINDEX1:      
04A9   19                     ADD   hl,de   ; add addr
04AA   22 F0 3D               LD   (vPointer),hl   ; store address in setter
04AD   16 00                  LD   d,0   
04AF   5E                     LD   e,(hl)   
04B0   B7                     OR   a   ; check data width again
04B1   28 02                  JR   z,arrIndex2   
04B3   23                     INC   hl   
04B4   56                     LD   d,(hl)   
04B5                ARRINDEX2:      
04B5   D5                     PUSH   de   
04B6   DD E9                  JP   (ix)   
04B8                             ; value _oldValue --            ; uses address in vPointer
04B8                ASSIGN:      
04B8   E1                     POP   hl   ; discard last accessed value
04B9   E1                     POP   hl   ; hl = new value
04BA                ASSIGN0:      
04BA   EB                     EX   de,hl   ; de = new value
04BB                ASSIGNX:      
04BB   2A F0 3D               LD   hl,(vPointer)   
04BE   73                     LD   (hl),e   
04BF   3A E6 3D               LD   a,(vDataWidth)   
04C2   3D                     DEC   a   ; is it byte?
04C3   28 02                  JR   z,assign1   
04C5   23                     INC   hl   
04C6   72                     LD   (hl),d   
04C7                ASSIGN1:      
04C7   DD E9                  JP   (ix)   
04C9                BLOCK:       
04C9   C5                     PUSH   bc   ; return pointer to first { of block
04CA   03                     INC   bc   
04CB   16 01                  LD   d,1   ; nesting: count first parenthesis
04CD                BLOCK1:      ; Skip to end of definition
04CD   0A                     LD   a,(bc)   ; Get the next character
04CE   03                     INC   bc   ; Point to next character
04CF   FE 21                  CP   " " + 1   ; ignore whitespace
04D1   38 FA                  JR   c,block1   
04D3   FE 29                  CP   ")"   
04D5   28 2D                  JR   z,block4   
04D7   FE 7D                  CP   "}"   
04D9   28 29                  JR   z,block4   
04DB   FE 5D                  CP   "]"   
04DD   28 25                  JR   z,block4   
04DF   FE 28                  CP   "("   
04E1   28 16                  JR   z,block2   
04E3   FE 7B                  CP   "{"   
04E5   28 12                  JR   z,block2   
04E7   FE 5B                  CP   "["   
04E9   28 0E                  JR   z,block2   
04EB   FE 27                  CP   "'"   
04ED   28 0D                  JR   z,block3   
04EF   FE 60                  CP   "`"   
04F1   28 09                  JR   z,block3   
04F3   FE 22                  CP   $22   
04F5   28 05                  JR   z,block3   
04F7   18 D4                  JR   block1   
04F9                BLOCK2:      
04F9   14                     INC   d   
04FA   18 D1                  JR   block1   
04FC                BLOCK3:      
04FC   3E 80                  LD   a,$80   
04FE   AA                     XOR   d   
04FF   47                     LD   b,a   
0500   20 CB                  JR   nz,block1   
0502   18 03                  JR   block5   
0504                BLOCK4:      
0504   15                     DEC   d   
0505   20 C6                  JR   nz,block1   ; get the next element
0507                BLOCK5:      
0507   60 69                  LD   hl,bc   ; hl = IP
0509   11 00 40               LD   de,HEAP   ; is IP pointing to object in heap
050C   B7                     OR   a   ; IP - HEAP
050D   ED 52                  SBC   hl,de   
050F   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0511   28 1C                  JR   z,block6   
0513   60 69                  LD   hl,bc   ; hl = IP
0515   D1                     POP   de   ; de = block*
0516   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
051A   B7                     OR   a   ; bc = size
051B   ED 52                  SBC   hl,de   
051D   44 4D                  LD   bc,hl   
051F   EB                     EX   de,hl   ; hl = block* de = heap*
0520   ED 5B EC 3D            LD   de,(vHeapPtr)   
0524   D5                     PUSH   de   ; return hblock*
0525   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0527   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += size
052B   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
052F                BLOCK6:      
052F   0B                     DEC   bc   ; balanced, exit
0530   DD E9                  JP   (ix)   
0532                BLOCKEND:      
0532   D9                     EXX      ; de" = oldBP bc" = oldIP
0533   FD 5E 00               LD   e,(iy+0)   
0536   FD 56 01               LD   d,(iy+1)   
0539   FD 4E 06               LD   c,(iy+6)   
053C   FD 46 07               LD   b,(iy+7)   
053F   D9                     EXX      
0540   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0543   FD 56 03               LD   d,(iy+3)   
0546   EB                     EX   de,hl   
0547   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054A   FD 56 01               LD   d,(iy+1)   
054D   13                     INC   de   ; for carry flag <=
054E   B7                     OR   a   
054F   ED 52                  SBC   hl,de   
0551   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0553   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0555   FD 5D                  LD   e,iyl   
0557   21 08 00               LD   hl,8   
055A   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055B   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055C   18 0C                  JR   blockEnd2   
055E                BLOCKEND1:      ; same scope
055E   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0561   FD 56 03               LD   d,(iy+3)   
0564   EB                     EX   de,hl   
0565   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0567   FD 5D                  LD   e,iyl   
0569   EB                     EX   de,hl   
056A                BLOCKEND2:      
056A   44 4D                  LD   bc,hl   ; bc = hl = BP
056C   B7                     OR   a   ; hl = BP - SP = count
056D   ED 72                  SBC   hl,sp   
056F   7D                     LD   a,l   
0570   B4                     OR   h   
0571   28 09                  JR   z,blockEnd3   
0573   C5                     PUSH   bc   ; bc = count, hl = BP
0574   44 4D                  LD   bc,hl   
0576   E1                     POP   hl   
0577   2B                     DEC   hl   ; hl = BP-1
0578   1B                     DEC   de   ; de = args*-1
0579   ED B8                  LDDR      
057B   13                     INC   de   
057C                BLOCKEND3:      
057C   EB                     EX   de,hl   ; hl = new tos
057D   F9                     LD   sp,hl   ; sp = new tos
057E   D9                     EXX      ; bc = IP, iy = oldBP
057F   D5                     PUSH   de   
0580   C5                     PUSH   bc   
0581   D9                     EXX      
0582   C1                     POP   bc   
0583   FD E1                  POP   iy   
0585   DD E9                  JP   (ix)   
0587                CHAR:        
0587   21 00 00               LD   hl,0   ; if "" is empty or null
058A                CHAR1:       
058A   03                     INC   bc   ; point to next char
058B   0A                     LD   a,(bc)   
058C   FE 27                  CP   "'"   ; ' is the terminator
058E   28 09                  JR   z,char3   
0590   FE 5C                  CP   $5c   ; \ is the escape
0592   20 02                  JR   nz,char2   
0594   03                     INC   bc   
0595   0A                     LD   a,(bc)   
0596                CHAR2:       
0596   6F                     LD   l,a   
0597   18 F1                  JR   char1   
0599                CHAR3:       
0599   E5                     PUSH   hl   
059A   DD E9                  JP   (ix)   
059C                DIV:         
059C   03                     INC   bc   
059D   0A                     LD   a,(bc)   
059E   FE 5C                  CP   $5C   
05A0   CA 3C 08               JP   z,comment   
05A3   FE 41                  CP   "A"   
05A5   D2 C3 07               JP   nc,command   
05A8   0B                     DEC   bc   
05A9   D1                     POP   de   
05AA   E1                     POP   hl   
05AB   C5                     PUSH   bc   ; preserve the IP
05AC   44 4D                  LD   bc,hl   
05AE   CD E4 05               CALL   divide   
05B1   EB                     EX   de,hl   
05B2   ED 53 F6 3D            LD   (vRemain),de   
05B6   C1                     POP   bc   
05B7   C3 99 03               JP   add3   
05BA                DOT:         
05BA   E1                     POP   hl   
05BB   03                     INC   bc   
05BC   0A                     LD   a,(bc)   
05BD   FE 68                  CP   "h"   
05BF   20 05                  JR   nz,dot1   
05C1   CD 24 09               CALL   prthex   
05C4   18 17                  JR   dot4   
05C6                DOT1:        
05C6   FE 73                  CP   "s"   
05C8   20 05                  JR   nz,dot2   
05CA   CD 47 09               CALL   prtstr   
05CD   18 0E                  JR   dot4   
05CF                DOT2:        
05CF   FE 63                  CP   "c"   
05D1   20 06                  JR   nz,dot3   
05D3   7D                     LD   a,l   
05D4   CD 85 00               CALL   putchar   
05D7   18 04                  JR   dot4   
05D9                DOT3:        
05D9   0B                     DEC   bc   
05DA   CD DC 08               CALL   prtdec   
05DD                DOT4:        
05DD   3E 20                  LD   a," "   
05DF   CD 85 00               CALL   putchar   
05E2   DD E9                  JP   (ix)   
05E4                             ; division subroutine.
05E4                             ; bc: divisor, de: dividend, hl: remainder
05E4                DIVIDE:      
05E4   21 00 00               LD   hl,0   ; zero the remainder
05E7   3E 10                  LD   a,16   ; loop counter
05E9                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05E9   CB 21                  SLA   c   
05EB   CB 10                  RL   b   
05ED   ED 6A                  ADC   hl,hl   
05EF   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05F1   38 03                  JR   c,divide2   
05F3   0C                     INC   c   
05F4   18 01                  JR   divide3   
05F6                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05F6   19                     ADD   hl,de   
05F7                DIVIDE3:      
05F7   3D                     DEC   a   
05F8   20 EF                  JR   nz,divide1   
05FA   50 59                  LD   de,bc   ; result from bc to de
05FC   C9                     RET      
05FD                             ; hl = value1, de = value2
05FD                             ; hl = result
05FD                EQUALS:      
05FD   B7                     OR   a   ; reset the carry flag
05FE   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0600   28 10                  JR   z,true1   
0602   C3 18 06               JP   false1   
0605                             ; hl = value1 de = value2
0605                             ; hl = result
0605                LESSTHANEQ:      
0605   B7                     OR   a   
0606   ED 52                  SBC   hl,de   
0608   18 05                  JR   lessthan1   
060A                             ; hl = value1 de = value2
060A                             ; hl = result
060A                LESSTHAN:      
060A   B7                     OR   a   
060B   ED 52                  SBC   hl,de   
060D   28 09                  JR   z,false1   
060F                LESSTHAN1:      
060F   FA 18 06               JP   m,false1   
0612                TRUE1:       
0612   21 FF FF               LD   hl,TRUE   
0615   E5                     PUSH   hl   
0616   DD E9                  JP   (ix)   
0618                NULL1:       
0618                FALSE1:      
0618   21 00 00               LD   hl,FALSE   
061B   E5                     PUSH   hl   
061C   DD E9                  JP   (ix)   
061E                             ; execute a block of code which ends with }
061E                             ; creates a root scope if BP == stack
061E                             ; else uses outer scope
061E                GO:          
061E   D1                     POP   de   ; de = block*
061F                GO1:         
061F   7B                     LD   a,e   ; if block* == null, exit
0620   B2                     OR   d   
0621   20 02                  JR   nz,go2   
0623   DD E9                  JP   (ix)   
0625                GO2:         
0625   1A                     LD   a,(de)   
0626   FE 7B                  CP   "{"   
0628   C2 5E 06               JP   nz,goFunc   
062B                GOBLOCK:      
062B   ED 53 F8 3D            LD   (vTemp1),de   ; save de
062F   21 80 3C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0632   FD 54                  LD   d,iyh   
0634   FD 5D                  LD   e,iyl   
0636   B7                     OR   a   ; if stack* == BP then this is the root_scope
0637   ED 52                  SBC   hl,de   
0639   ED 5B F8 3D            LD   de,(vTemp1)   ; restore de
063D   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
063E   B4                     OR   h   
063F   3E 00                  LD   a,0   
0641   28 6C                  JR   z,goFunc8   
0643   C5                     PUSH   bc   ; push IP
0644   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0647   FD 46 05               LD   b,(iy+5)   
064A   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
064D   FD 66 03               LD   h,(iy+3)   
0650                GOBLOCK1:      
0650   C5                     PUSH   bc   ; arg_list*
0651   E5                     PUSH   hl   ; first_arg*
0652   FD E5                  PUSH   iy   ; push BP
0654   FD 21 00 00            LD   iy,0   ; BP = SP
0658   FD 39                  ADD   iy,sp   
065A   42 4B                  LD   bc,de   ; bc = de = block*-1
065C   DD E9                  JP   (ix)   
065E                GOFUNC:      ; execute function
065E   EB                     EX   de,hl   ; hl = func*
065F   5E                     LD   e,(hl)   ; de = partial_array*
0660   23                     INC   hl   
0661   56                     LD   d,(hl)   
0662   23                     INC   hl   
0663   7B                     LD   a,e   ; if partial_array* == null skip
0664   B2                     OR   d   
0665   28 21                  JR   z,goFunc3   
0667   ED 43 F8 3D            LD   (vTemp1),bc   
066B   22 FA 3D               LD   (vTemp2),hl   ; save bc,hl
066E   EB                     EX   de,hl   ; hl = partial_array*
066F   2B                     DEC   hl   ; bc = count
0670   46                     LD   b,(hl)   
0671   2B                     DEC   hl   
0672   4E                     LD   c,(hl)   
0673   23                     INC   hl   ; push each item on stack
0674   23                     INC   hl   
0675   18 06                  JR   goFunc2   
0677                GOFUNC1:      
0677   5E                     LD   e,(hl)   ; de = partial item
0678   23                     INC   hl   
0679   56                     LD   d,(hl)   
067A   23                     INC   hl   
067B   D5                     PUSH   de   ; push on stack
067C   0B                     DEC   bc   
067D                GOFUNC2:      
067D   79                     LD   a,c   ; if count != 0 then loop
067E   B0                     OR   b   
067F   20 F6                  JR   nz,goFunc1   
0681   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore bc
0685   2A FA 3D               LD   hl,(vTemp2)   ; restore hl
0688                GOFUNC3:      
0688   5E                     LD   e,(hl)   ; de = block*
0689   23                     INC   hl   
068A   56                     LD   d,(hl)   
068B   23                     INC   hl   
068C   ED 53 F8 3D            LD   (vTemp1),de   ; save block*
0690   5E                     LD   e,(hl)   ; de = arg_list*
0691   23                     INC   hl   
0692   56                     LD   d,(hl)   
0693   23                     INC   hl   
0694   EB                     EX   de,hl   ; hl = arg_list*
0695   ED 5B F8 3D            LD   de,(vTemp1)   ; restore de = block*
0699   7D                     LD   a,l   ; if arg_list* == null a = 0
069A   B4                     OR   h   
069B   20 03                  JR   nz,goFunc4   
069D   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
069E   18 0F                  JR   goFunc8   
06A0                GOFUNC4:      ; allocate locals
06A0   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06A1   7E                     LD   a,(hl)   
06A2   18 03                  JR   goFunc6   
06A4                GOFUNC5:      ; loop
06A4   3B                     DEC   sp   
06A5   3B                     DEC   sp   
06A6   3D                     DEC   a   
06A7                GOFUNC6:      
06A7   B7                     OR   a   
06A8   20 FA                  JR   nz,goFunc5   ; end loop
06AA                GOFUNC7:      
06AA   2B                     DEC   hl   ; a = num_args* x 2
06AB   7E                     LD   a,(hl)   
06AC   23                     INC   hl   
06AD   23                     INC   hl   
06AE   87                     ADD   a,a   ; a *= 2
06AF                GOFUNC8:      
06AF   C5                     PUSH   bc   ; push IP
06B0   44 4D                  LD   bc,hl   
06B2   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06B5   85                     ADD   a,l   
06B6   6F                     LD   l,a   
06B7   39                     ADD   hl,sp   
06B8   18 96                  JR   goBlock1   
06BA                HEXNUM:      
06BA   21 00 00               LD   hl,0   ; Clear hl to accept the number
06BD                HEXNUM1:      
06BD   03                     INC   bc   
06BE   0A                     LD   a,(bc)   ; Get the character which is a numeral
06BF   CB 77                  BIT   6,a   ; is it uppercase alpha?
06C1   28 02                  JR   z,hexnum2   ; no a decimal
06C3   D6 07                  SUB   7   ; sub 7  to make $a - $F
06C5                HEXNUM2:      
06C5   D6 30                  SUB   $30   ; form decimal digit
06C7   DA 45 07               JP   c,num2   
06CA   FE 10                  CP   $0F+1   
06CC   D2 45 07               JP   nc,num2   
06CF   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06D0   29                     ADD   hl,hl   ; 4X
06D1   29                     ADD   hl,hl   ; 8X
06D2   29                     ADD   hl,hl   ; 16X
06D3   85                     ADD   a,l   ; add into bottom of hl
06D4   6F                     LD   l,a   
06D5   18 E6                  JR   hexnum1   
06D7                IDENTU:      
06D7   0A                     LD   a,(bc)   ; a = identifier char
06D8   D6 41                  SUB   "A"   ; "A" = 0
06DA   18 05                  JR   ident1   
06DC                IDENTL:      
06DC   0A                     LD   a,(bc)   
06DD   D6 61                  SUB   "a"   
06DF   C6 1A                  ADD   a,26   
06E1                IDENT1:      
06E1   87                     ADD   a,a   ; l = a * 2
06E2   6F                     LD   l,a   
06E3   26 3D                  LD   h,msb(vars)   
06E5   22 F0 3D               LD   (vPointer),hl   ; store address in setter
06E8   5E                     LD   e,(hl)   
06E9   23                     INC   hl   
06EA   56                     LD   d,(hl)   
06EB   D5                     PUSH   de   
06EC   DD E9                  JP   (ix)   
06EE                             ; if
06EE                             ; condition then -- value
06EE                IF:          
06EE   03                     INC   bc   
06EF   0A                     LD   a,(bc)   
06F0   FE 3F                  CP   "?"   
06F2   28 06                  JR   z,ifte   
06F4   0B                     DEC   bc   
06F5   11 00 00               LD   de,0   ; NUL pointer for else
06F8   18 01                  JR   ifte1   
06FA                             ; ifte
06FA                             ; condition then else -- value
06FA                IFTE:        
06FA   D1                     POP   de   ; de = else
06FB                IFTE1:       
06FB   E1                     POP   hl   ; hl = then
06FC   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06FD   7C                     LD   a,h   
06FE   B5                     OR   l   
06FF   E1                     POP   hl   ; hl = then
0700   CA 1F 06               JP   z,go1   ; if z de = else
0703   EB                     EX   de,hl   ; condition = false, de = then
0704   C3 1F 06               JP   go1   
0707                MUL:         
0707   D1                     POP   de   ; get first value
0708   E1                     POP   hl   
0709                MUL2:        
0709   C5                     PUSH   bc   ; Preserve the IP
070A   44 4D                  LD   bc,hl   ; bc = 2nd value
070C   21 00 00               LD   hl,0   
070F   3E 10                  LD   a,16   
0711                MUL3:        
0711   29                     ADD   hl,hl   
0712   CB 13                  RL   e   
0714   CB 12                  RL   d   
0716   30 04                  JR   nc,$+6   
0718   09                     ADD   hl,bc   
0719   30 01                  JR   nc,$+3   
071B   13                     INC   de   
071C   3D                     DEC   a   
071D   20 F2                  JR   nz,mul3   
071F   C1                     POP   bc   ; Restore the IP
0720   C3 99 03               JP   add3   
0723                NUM:         
0723   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0726   0A                     LD   a,(bc)   ; Get numeral or -
0727   FE 2D                  CP   "-"   
0729   20 01                  JR   nz,num0   
072B   03                     INC   bc   ; move to next char, no flags affected
072C                NUM0:        
072C   08                     EX   af,af'   ; save zero flag = 0 for later
072D                NUM1:        
072D   0A                     LD   a,(bc)   ; read digit
072E   D6 30                  SUB   "0"   ; less than 0?
0730   38 13                  JR   c,num2   ; not a digit, exit loop
0732   FE 0A                  CP   10   ; greater that 9?
0734   30 0F                  JR   nc,num2   ; not a digit, exit loop
0736   03                     INC   bc   ; inc IP
0737   54 5D                  LD   de,hl   ; multiply hl * 10
0739   29                     ADD   hl,hl   
073A   29                     ADD   hl,hl   
073B   19                     ADD   hl,de   
073C   29                     ADD   hl,hl   
073D   85                     ADD   a,l   ; add digit in a to hl
073E   6F                     LD   l,a   
073F   3E 00                  LD   a,0   
0741   8C                     ADC   a,h   
0742   67                     LD   h,a   
0743   18 E8                  JR   num1   
0745                NUM2:        
0745   0B                     DEC   bc   
0746   08                     EX   af,af'   ; restore zero flag
0747   20 07                  JR   nz,num3   
0749   EB                     EX   de,hl   ; negate the value of hl
074A   21 00 00               LD   hl,0   
074D   B7                     OR   a   ; jump to sub2
074E   ED 52                  SBC   hl,de   
0750                NUM3:        
0750   E5                     PUSH   hl   ; Put the number on the stack
0751   DD E9                  JP   (ix)   ; and process the next character
0753                REMAIN:      
0753   2A F6 3D               LD   hl,(vRemain)   
0756   E5                     PUSH   hl   
0757   DD E9                  JP   (ix)   
0759                             ; shiftLeft
0759                             ; value count -- value2          shift left count places
0759                SHIFTLEFT:      
0759   50 59                  LD   de,bc   ; save IP
075B   C1                     POP   bc   ; bc = count
075C   41                     LD   b,c   ; b = loop counter
075D   E1                     POP   hl   
075E   04                     INC   b   ; test for counter=0 case
075F   18 01                  JR   shiftLeft2   
0761                SHIFTLEFT1:      
0761   29                     ADD   hl,hl   ; left shift hl
0762                SHIFTLEFT2:      
0762   10 FD                  DJNZ   shiftLeft1   
0764   E5                     PUSH   hl   
0765   42 4B                  LD   bc,de   ; restore IP
0767   DD E9                  JP   (ix)   
0769                             ; shiftRight
0769                             ; value count -- value2          shift left count places
0769                SHIFTRIGHT:      
0769   50 59                  LD   de,bc   ; save IP
076B   C1                     POP   bc   ; bc = count
076C   41                     LD   b,c   ; b = loop counter
076D   E1                     POP   hl   
076E   04                     INC   b   ; test for counter=0 case
076F   18 04                  JR   shiftRight2   
0771                SHIFTRIGHT1:      
0771   CB 3C                  SRL   h   ; right shift hl
0773   CB 1D                  RR   l   
0775                SHIFTRIGHT2:      
0775   10 FA                  DJNZ   shiftRight1   
0777   E5                     PUSH   hl   
0778   42 4B                  LD   bc,de   ; restore IP
077A   DD E9                  JP   (ix)   
077C                             ; string
077C                             ; -- ptr                        ; points to start of string chars,
077C                             ; length is stored at start - 2 bytes
077C                STRING:      
077C   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
077F   23                     INC   hl   ; skip length field to start
0780   23                     INC   hl   
0781   E5                     PUSH   hl   ; save start of string
0782   03                     INC   bc   ; point to next char
0783   18 03                  JR   string2   
0785                STRING1:      
0785   77                     LD   (hl),a   
0786   23                     INC   hl   ; increase count
0787   03                     INC   bc   ; point to next char
0788                STRING2:      
0788   0A                     LD   a,(bc)   
0789   FE 22                  CP   DQUOTE   ; " is the string terminator
078B   20 F8                  JR   nz,string1   
078D   FE 60                  CP   "`"   ; ` is the string terminator used in testing
078F   20 F4                  JR   nz,string1   
0791   AF                     XOR   a   ; write NUL to terminate string
0792   77                     LD   (hl),a   ; hl = end of string
0793   23                     INC   hl   
0794   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0797   2B                     DEC   hl   ; hl = end of string without terminator
0798   D1                     POP   de   ; de = start of string
0799   D5                     PUSH   de   ; return start of string
079A   B7                     OR   a   ; hl = length bytes, de = start of string
079B   ED 52                  SBC   hl,de   
079D   EB                     EX   de,hl   
079E   2B                     DEC   hl   ; write length bytes to length field at start - 2
079F   72                     LD   (hl),d   
07A0   2B                     DEC   hl   
07A1   73                     LD   (hl),e   
07A2   DD E9                  JP   (ix)   
07A4                SUB:         ; negative sign or subtract
07A4   03                     INC   bc   ; check if sign of a number
07A5   0A                     LD   a,(bc)   
07A6   0B                     DEC   bc   
07A7   FE 30                  CP   "0"   
07A9   38 05                  JR   c,sub0   
07AB   FE 3A                  CP   "9"+1   
07AD   DA 47 03               JP   c,num_   
07B0                SUB0:        ; Subtract the value 2nd on stack from top of stack
07B0   03                     INC   bc   
07B1   FE 2D                  CP   "-"   
07B3   20 05                  JR   nz,sub1   
07B5   E1                     POP   hl   
07B6   2B                     DEC   hl   
07B7   C3 BA 04               JP   assign0   
07BA                SUB1:        
07BA   0B                     DEC   bc   
07BB   D1                     POP   de   
07BC   E1                     POP   hl   
07BD   B7                     OR   a   
07BE   ED 52                  SBC   hl,de   
07C0   C3 99 03               JP   add3   
07C3                             ;*******************************************************************
07C3                             ; commands
07C3                             ; a contains command letter
07C3                             ; bc points to command letter
07C3                             ;*******************************************************************
07C3                COMMAND:      
07C3   FE 61                  CP   "a"   ; \a absolute
07C5   CA 0F 08               JP   z,abs1   
07C8   FE 62                  CP   "b"   ; \b bytes
07CA   CA 89 08               JP   z,bytes   
07CD   FE 70                  CP   "p"   ; \p partial
07CF   CA 1C 08               JP   z,partial   
07D2   FE 66                  CP   "f"   ; \f func
07D4   CA 91 08               JP   z,func   
07D7   FE 46                  CP   "F"   ; \F false
07D9   CA 18 06               JP   z,false1   
07DC   FE 69                  CP   "i"   ; \i input
07DE   CA AD 08               JP   z,input   
07E1   FE 6B                  CP   "k"   ; \k key
07E3   CA B8 08               JP   z,key   
07E6   FE 6F                  CP   "o"   ; \o output
07E8   CA C1 08               JP   z,output   
07EB   FE 72                  CP   "r"   ; \r repeat
07ED   CA 83 08               JP   z,repeat   
07F0   FE 73                  CP   "s"   ; \s select
07F2   CA CA 08               JP   z,select   
07F5   FE 54                  CP   "T"   ; \T true
07F7   CA 12 06               JP   z,true1   
07FA   FE 77                  CP   "w"   ; \w words
07FC   CA D4 08               JP   z,words   
07FF   FE 78                  CP   "x"   ; \x exit loop
0801   CA 69 08               JP   z,break   
0804   FE 7A                  CP   "z"   ; \z end loop
0806   CA 45 08               JP   z,loopEnd   
0809   21 01 00               LD   hl,1   ; error 1: unknown command
080C   C3 39 0A               JP   error   
080F                ABS1:        
080F   E1                     POP   hl   
0810   CB 7C                  BIT   7,h   
0812   C8                     RET   z   
0813   AF                     XOR   a   
0814   95                     SUB   l   
0815   6F                     LD   l,a   
0816   9F                     SBC   a,a   
0817   94                     SUB   h   
0818   67                     LD   h,a   
0819   E5                     PUSH   hl   
081A   DD E9                  JP   (ix)   
081C                             ; partial
081C                             ; array* func* -- func1*
081C                PARTIAL:      
081C   E1                     POP   hl   ; h1 = func*
081D   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0821   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
0825   01 06 00               LD   bc,6   ; bc = count
0828   ED B0                  LDIR      ; clone func
082A   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
082E   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0831   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += 6
0835   D1                     POP   de   ; de = array*
0836   E5                     PUSH   hl   ; return partial_array*
0837   73                     LD   (hl),e   ; compile array*
0838   23                     INC   hl   
0839   72                     LD   (hl),d   
083A   DD E9                  JP   (ix)   
083C                COMMENT:      
083C   03                     INC   bc   ; point to next char
083D   0A                     LD   a,(bc)   
083E   FE 20                  CP   " "   ; terminate on any char less than SP
0840   30 FA                  JR   nc,comment   
0842   0B                     DEC   bc   
0843   DD E9                  JP   (ix)   
0845                LOOPEND:      
0845   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0847   FD 54                  LD   d,iyh   
0849   21 08 00               LD   hl,8   
084C   19                     ADD   hl,de   
084D   5E                     LD   e,(hl)   ; return block* after other returns
084E   23                     INC   hl   
084F   56                     LD   d,(hl)   
0850   23                     INC   hl   
0851   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0854   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0857   D5                     PUSH   de   
0858   FD 6E 06               LD   l,(iy+6)   ; hl = oldIP
085B   FD 66 07               LD   h,(iy+7)   
085E   2B                     DEC   hl   ; rewind return IP to jus before \r
085F   2B                     DEC   hl   
0860   FD 75 06               LD   (iy+6),l   
0863   FD 74 07               LD   (iy+7),h   
0866   C3 32 05               JP   blockEnd   
0869                BREAK:       
0869   E1                     POP   hl   
086A   7D                     LD   a,l   
086B   B4                     OR   h   
086C   28 02                  JR   z,break1   
086E   DD E9                  JP   (ix)   
0870                BREAK1:      
0870                             ; ld l,(iy+6)                 ; hl = oldIP
0870                             ; ld h,(iy+7)
0870                             ; inc hl                      ; forward IP on stack to after \r
0870                             ; inc hl
0870                             ; ld (iy+6),l
0870                             ; ld (iy+7),h
0870                             ; ld e,(iy+2)                 ; dec first_arg*
0870                             ; ld d,(iy+3)
0870                             ; inc de
0870                             ; inc de
0870                             ; ld (iy+2),e
0870                             ; ld (iy+3),d
0870   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0872   FD 54                  LD   d,iyh   
0874   21 08 00               LD   hl,8   
0877   19                     ADD   hl,de   
0878   23                     INC   hl   
0879   23                     INC   hl   
087A   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
087D   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0880   C3 32 05               JP   blockEnd   
0883                             ; repeat
0883                             ; block* --
0883                REPEAT:      
0883                             ; dec bc                      ; rewind IP to before \r
0883                             ; dec bc
0883   E1                     POP   hl   
0884   E5                     PUSH   hl   
0885   E5                     PUSH   hl   
0886   C3 1E 06               JP   go   
0889                BYTES:       
0889   21 01 00               LD   hl,1   
088C                BYTES1:      
088C   22 E6 3D               LD   (vDataWidth),hl   
088F   DD E9                  JP   (ix)   
0891                             ; arg_list* block* -- ptr
0891                FUNC:        
0891   D1                     POP   de   ; de = block* hl = heap*
0892   2A EC 3D               LD   hl,(vHeapPtr)   
0895   AF                     XOR   a   
0896   77                     LD   (hl),a   ; compile null partial_array*
0897   23                     INC   hl   
0898   77                     LD   (hl),a   
0899   23                     INC   hl   
089A   73                     LD   (hl),e   ; compile block*
089B   23                     INC   hl   
089C   72                     LD   (hl),d   
089D   23                     INC   hl   
089E   D1                     POP   de   ; de = block*
089F   73                     LD   (hl),e   ; compile arg_list*
08A0   23                     INC   hl   
08A1   72                     LD   (hl),d   
08A2   23                     INC   hl   
08A3   ED 5B EC 3D            LD   de,(vHeapPtr)   ; return func*
08A7   D5                     PUSH   de   
08A8   22 EC 3D               LD   (vHeapPtr),hl   ; heap* += 4
08AB   DD E9                  JP   (ix)   
08AD                             ; Z80 port input
08AD                             ; port -- value
08AD                INPUT:       
08AD   E1                     POP   hl   
08AE   59                     LD   e,c   ; save IP
08AF   4D                     LD   c,l   
08B0   ED 68                  IN   l,(c)   
08B2   26 00                  LD   h,0   
08B4   4B                     LD   c,e   ; restore IP
08B5   E5                     PUSH   hl   
08B6   DD E9                  JP   (ix)   
08B8                KEY:         
08B8   CD 81 00               CALL   getchar   
08BB   26 00                  LD   h,0   
08BD   6F                     LD   l,a   
08BE   E5                     PUSH   hl   
08BF   DD E9                  JP   (ix)   
08C1                             ; Z80 port output
08C1                             ; value port --
08C1                OUTPUT:      
08C1   E1                     POP   hl   
08C2   59                     LD   e,c   ; save IP
08C3   4D                     LD   c,l   
08C4   E1                     POP   hl   
08C5   ED 69                  OUT   (c),l   
08C7   4B                     LD   c,e   ; restore IP
08C8   DD E9                  JP   (ix)   
08CA                             ; select
08CA                             ; index array -- value
08CA                SELECT:      
08CA   D1                     POP   de   ; de = array
08CB   E1                     POP   hl   ; hl = index
08CC   29                     ADD   hl,hl   ; if data width = 2 then double
08CD   19                     ADD   hl,de   ; add addr
08CE   5E                     LD   e,(hl)   
08CF   23                     INC   hl   
08D0   56                     LD   d,(hl)   
08D1   C3 1F 06               JP   go1   
08D4                WORDS:       
08D4   21 02 00               LD   hl,2   
08D7   C3 8C 08               JP   bytes1   
08DA                             ; 
08DA                             ; 
08DA                             ; 
08DA                             ; 
08DA                FILTER:      
08DA                MAP:         
08DA                SCAN:        
08DA   DD E9                  JP   (ix)   
08DC                             ; print decimal
08DC                             ; hl = value
08DC                PRTDEC:      
08DC   CB 7C                  BIT   7,h   
08DE   28 0B                  JR   z,prtdec0   
08E0   3E 2D                  LD   a,"-"   
08E2   CD 85 00               CALL   putchar   
08E5   AF                     XOR   a   
08E6   95                     SUB   l   
08E7   6F                     LD   l,a   
08E8   9F                     SBC   a,a   
08E9   94                     SUB   h   
08EA   67                     LD   h,a   
08EB                PRTDEC0:      
08EB   C5                     PUSH   bc   
08EC   0E 00                  LD   c,0   ; leading zeros flag = false
08EE   11 F0 D8               LD   de,-10000   
08F1   CD 0D 09               CALL   prtdec1   
08F4   11 18 FC               LD   de,-1000   
08F7   CD 0D 09               CALL   prtdec1   
08FA   11 9C FF               LD   de,-100   
08FD   CD 0D 09               CALL   prtdec1   
0900   1E F6                  LD   e,-10   
0902   CD 0D 09               CALL   prtdec1   
0905   0C                     INC   c   ; flag = true for at least digit
0906   1E FF                  LD   e,-1   
0908   CD 0D 09               CALL   prtdec1   
090B   C1                     POP   bc   
090C   C9                     RET      
090D                PRTDEC1:      
090D   06 2F                  LD   b,"0"-1   
090F                PRTDEC2:      
090F   04                     INC   b   
0910   19                     ADD   hl,de   
0911   38 FC                  JR   c,prtdec2   
0913   ED 52                  SBC   hl,de   
0915   3E 30                  LD   a,"0"   
0917   B8                     CP   b   
0918   20 05                  JR   nz,prtdec3   
091A   AF                     XOR   a   
091B   B1                     OR   c   
091C   C8                     RET   z   
091D   18 01                  JR   prtdec4   
091F                PRTDEC3:      
091F   0C                     INC   c   
0920                PRTDEC4:      
0920   78                     LD   a,b   
0921   C3 85 00               JP   putchar   
0924                PRTHEX:      ; display hl as a 16-bit number in hex.
0924   C5                     PUSH   bc   ; preserve the IP
0925   7C                     LD   a,h   
0926   CD 2F 09               CALL   prthex2   
0929   7D                     LD   a,l   
092A   CD 2F 09               CALL   prthex2   
092D   C1                     POP   bc   
092E   C9                     RET      
092F                PRTHEX2:      
092F   4F                     LD   c,a   
0930   1F                     RRA      
0931   1F                     RRA      
0932   1F                     RRA      
0933   1F                     RRA      
0934   CD 38 09               CALL   prthex3   
0937   79                     LD   a,c   
0938                PRTHEX3:      
0938   E6 0F                  AND   0x0F   
093A   C6 90                  ADD   a,0x90   
093C   27                     DAA      
093D   CE 40                  ADC   a,0x40   
093F   27                     DAA      
0940   C3 85 00               JP   putchar   
0943                PRTSTR0:      
0943   CD 85 00               CALL   putchar   
0946   23                     INC   hl   
0947                PRTSTR:      
0947   7E                     LD   a,(hl)   
0948   B7                     OR   a   
0949   20 F8                  JR   nz,prtstr0   
094B   C9                     RET      
094C                             ; **************************************************************************
094C                             ; calculate nesting value
094C                             ; a is char to be tested,
094C                             ; e is the nesting value (initially 0)
094C                             ; e is increased by ( and [
094C                             ; e is decreased by ) and ]
094C                             ; e has its bit 7 toggled by `
094C                             ; limited to 127 levels
094C                             ; **************************************************************************
094C                NESTING:      
094C   FE 22                  CP   DQUOTE   ; quote char
094E   28 06                  JR   z,nesting0   
0950   FE 60                  CP   "`"   ; quote char
0952   28 02                  JR   z,nesting0   
0954   18 0A                  JR   nesting1   
0956                NESTING0:      
0956   CB 7B                  BIT   7,e   
0958   28 03                  JR   z,nesting1a   
095A   CB BB                  RES   7,e   
095C   C9                     RET      
095D                NESTING1A:      
095D   CB FB                  SET   7,e   
095F   C9                     RET      
0960                NESTING1:      
0960   CB 7B                  BIT   7,e   
0962   C0                     RET   nz   
0963   FE 7B                  CP   "{"   
0965   28 08                  JR   z,nesting2   
0967   FE 5B                  CP   "["   
0969   28 04                  JR   z,nesting2   
096B   FE 28                  CP   "("   
096D   20 02                  JR   nz,nesting3   
096F                NESTING2:      
096F   1C                     INC   e   
0970   C9                     RET      
0971                NESTING3:      
0971   FE 7D                  CP   "}"   
0973   28 07                  JR   z,nesting4   
0975   FE 5D                  CP   "]"   
0977   28 03                  JR   z,nesting4   
0979   FE 29                  CP   ")"   
097B   C0                     RET   nz   
097C                NESTING4:      
097C   1D                     DEC   e   
097D   C9                     RET      
097E                PROMPT:      
097E   CD 8E 09               CALL   printStr   
0981   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0986   C9                     RET      
0987                CRLF:        
0987   CD 8E 09               CALL   printStr   
098A   0D 0A 00               .CSTR   "\r\n"   
098D   C9                     RET      
098E                             ; prints a null teminated string
098E                             ; the string should be immedaitely following the call
098E                PRINTSTR:      
098E   E3                     EX   (sp),hl   ; swap			
098F   CD 47 09               CALL   prtstr   
0992   23                     INC   hl   ; inc past NUL
0993   E3                     EX   (sp),hl   ; put it back	
0994   C9                     RET      
0995                INIT:        
0995   DD 2A EA 3D            LD   ix,(vNext)   
0999   FD 21 80 3C            LD   iy,STACK   
099D   21 80 01               LD   hl,isysVars   
09A0   11 E6 3D               LD   de,sysVars   
09A3   01 10 00               LD   bc,8 * 2   
09A6   ED B0                  LDIR      
09A8   21 00 3D               LD   hl,vars   ; 52 vars LO HI
09AB   06 34                  LD   b,26*2   
09AD   AF                     XOR   a   
09AE                INIT0:       
09AE   77                     LD   (hl),a   
09AF   23                     INC   hl   
09B0   10 FC                  DJNZ   init0   
09B2   C9                     RET      
09B3                START:       
09B3   31 80 3C               LD   sp,STACK   ; start of monty
09B6   CD 95 09               CALL   init   ; setups
09B9   CD 8E 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09BC   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09C9                INTERPRET:      
09C9   CD 7E 09               CALL   prompt   
09CC   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09CF   ED 43 E8 3D            LD   (vTIBPtr),bc   
09D3                INTERPRET2:      ; calc nesting (a macro might have changed it)
09D3   1E 00                  LD   e,0   ; initilize nesting value
09D5   C5                     PUSH   bc   ; save offset into TIB,
09D6                             ; bc is also the count of chars in TIB
09D6   21 00 3E               LD   hl,TIB   ; hl is start of TIB
09D9   18 06                  JR   interpret4   
09DB                INTERPRET3:      
09DB   7E                     LD   a,(hl)   ; a = char in TIB
09DC   23                     INC   hl   ; inc pointer into TIB
09DD   0B                     DEC   bc   ; dec count of chars in TIB
09DE   CD 4C 09               CALL   nesting   ; update nesting value
09E1                INTERPRET4:      
09E1   79                     LD   a,c   ; is count zero?
09E2   B0                     OR   b   
09E3   20 F6                  JR   nz,interpret3   ; if not loop
09E5   C1                     POP   bc   ; restore offset into TIB
09E6                INTERPRET5:      
09E6   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09E9   FE 20                  CP   $20   ; compare to space
09EB   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09ED   FE 00                  CP   $0   ; is it end of string? NUL end of string
09EF                             ; ???? NEEDED?
09EF   28 27                  JR   z,interpret8   
09F1   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09F3   28 10                  JR   z,interpret7   ; if anything else its macro/control
09F5                             ; macro
09F5                             ;  ld (vTIBPtr),bc
09F5                             ;  ld hl,ctrlCodes
09F5                             ;  add a,l			            ; look up key of macros
09F5                             ;  ld l,a
09F5                             ;  ld e,(hl)
09F5                             ;  ld a,e
09F5                             ;  or a
09F5                             ;  jr z,macro1
09F5                             ;  ld d,msb(macros)
09F5                             ;  push de
09F5                             ;  call call		            ; monty exec_ operation and jump to it
09F5                             ;  db DC1,0
09F5                             ; macro1:
09F5                             ;  ld bc,(vTIBPtr)
09F5   18 DC                  JR   interpret2   
09F7                INTERPRET6:      
09F7   21 00 3E               LD   hl,TIB   
09FA   09                     ADD   hl,bc   
09FB   77                     LD   (hl),a   ; store the character in textbuf
09FC   03                     INC   bc   
09FD   CD 85 00               CALL   putchar   ; echo character to screen
0A00   CD 4C 09               CALL   nesting   
0A03   18 E1                  JR   interpret5   ; wait for next character
0A05                INTERPRET7:      
0A05   21 00 3E               LD   hl,TIB   
0A08   09                     ADD   hl,bc   
0A09   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A0B   23                     INC   hl   
0A0C   36 0A                  LD   (hl),"\n"   
0A0E   23                     INC   hl   
0A0F   03                     INC   bc   
0A10   03                     INC   bc   
0A11   CD 87 09               CALL   crlf   ; echo character to screen
0A14   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A15   B7                     OR   a   
0A16   20 CE                  JR   nz,interpret5   
0A18                INTERPRET8:      
0A18   ED 43 E8 3D            LD   (vTIBPtr),bc   
0A1C   01 00 3E               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A1F                             ; we pressed enter
0A1F   0B                     DEC   bc   
0A20                NEXT:        
0A20   03                     INC   bc   ; Increment the IP
0A21   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A22   FE 20                  CP   " "   ; whitespace?
0A24   28 FA                  JR   z,next   ; space? ignore
0A26   38 07                  JR   c,next1   
0A28   6F                     LD   l,a   ; index into table
0A29   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A2B   6E                     LD   l,(hl)   ; get low jump address
0A2C   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A2E   E9                     JP   (hl)   ; Jump to routine
0A2F                NEXT1:       
0A2F   FE 00                  CP   NUL   ; end of input string?
0A31   28 03                  JR   z,exit_   
0A33   C3 C9 09               JP   interpret   ; no, other whitespace, macros?
0A36                EXIT_:       
0A36   60 69                  LD   hl,bc   
0A38   E9                     JP   (hl)   
0A39                ERROR:       
0A39   CD 8E 09               CALL   printStr   
0A3C   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A43   CD DC 08               CALL   prtdec   
0A46   C3 C9 09               JP   interpret   
0A49                          ALIGN   $100   
0B00                TESTSSTART:      
0B00                             ; call printStr
0B00                             ; .cstr "Done!"
0B00                             ; HALT
0B00                             ; 
0B00                          ;*Macro unroll:  test "/F", false
0B00   31 80 3C               LD   SP,STACK   
0B03   CD 95 09               CALL   init   
0B06   CD D0 3B               CALL   execStr   
0B09   2F 46 00               .CSTR   "/F"   
0B0C                          ;*Macro unroll:  expect "/F",false
0B0C   E1                     POP   HL   
0B0D   E5                     PUSH   HL   
0B0E   11 00 00               LD   DE,false   
0B11   B7                     OR   A   
0B12   ED 52                  SBC   HL,DE   
0B14   7D                     LD   A,L   
0B15   B4                     OR   H   
0B16   28 4D                  JR   Z,expectM_0_2134S43   
0B18   CD 8E 09               CALL   printStr   
0B1B   43 6F 64 65 3A 20 2F 46 00 .CSTR   "Code: ","/F"   
0B24   CD 8E 09               CALL   printStr   
0B27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B36   21 00 00               LD   HL,false   
0B39   CD DC 08               CALL   prtdec   
0B3C   CD 8E 09               CALL   printStr   
0B3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B4C   E1                     POP   hl   
0B4D   E5                     PUSH   hl   
0B4E   CD DC 08               CALL   prtdec   
0B51   E1                     POP   hl   
0B52   CD 8E 09               CALL   printStr   
0B55   20 28 23 00            .CSTR   " (#"   
0B59   CD 24 09               CALL   prthex   
0B5C   CD 8E 09               CALL   printStr   
0B5F   29 0D 0A 00            .CSTR   ")\r\n"   
0B63   76                     HALT      
0B64   00                     .CSTR      
0B65                EXPECTM_0_2134S43:      
0B65   E1                     POP   HL   
0B66                          ;*Macro unroll:  test "/T", true
0B66   31 80 3C               LD   SP,STACK   
0B69   CD 95 09               CALL   init   
0B6C   CD D0 3B               CALL   execStr   
0B6F   2F 54 00               .CSTR   "/T"   
0B72                          ;*Macro unroll:  expect "/T",true
0B72   E1                     POP   HL   
0B73   E5                     PUSH   HL   
0B74   11 FF FF               LD   DE,true   
0B77   B7                     OR   A   
0B78   ED 52                  SBC   HL,DE   
0B7A   7D                     LD   A,L   
0B7B   B4                     OR   H   
0B7C   28 4D                  JR   Z,expectM_0_2135S43   
0B7E   CD 8E 09               CALL   printStr   
0B81   43 6F 64 65 3A 20 2F 54 00 .CSTR   "Code: ","/T"   
0B8A   CD 8E 09               CALL   printStr   
0B8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B9C   21 FF FF               LD   HL,true   
0B9F   CD DC 08               CALL   prtdec   
0BA2   CD 8E 09               CALL   printStr   
0BA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BB2   E1                     POP   hl   
0BB3   E5                     PUSH   hl   
0BB4   CD DC 08               CALL   prtdec   
0BB7   E1                     POP   hl   
0BB8   CD 8E 09               CALL   printStr   
0BBB   20 28 23 00            .CSTR   " (#"   
0BBF   CD 24 09               CALL   prthex   
0BC2   CD 8E 09               CALL   printStr   
0BC5   29 0D 0A 00            .CSTR   ")\r\n"   
0BC9   76                     HALT      
0BCA   00                     .CSTR      
0BCB                EXPECTM_0_2135S43:      
0BCB   E1                     POP   HL   
0BCC                          ;*Macro unroll:  test "1", 1
0BCC   31 80 3C               LD   SP,STACK   
0BCF   CD 95 09               CALL   init   
0BD2   CD D0 3B               CALL   execStr   
0BD5   31 00                  .CSTR   "1"   
0BD7                          ;*Macro unroll:  expect "1",1
0BD7   E1                     POP   HL   
0BD8   E5                     PUSH   HL   
0BD9   11 01 00               LD   DE,1   
0BDC   B7                     OR   A   
0BDD   ED 52                  SBC   HL,DE   
0BDF   7D                     LD   A,L   
0BE0   B4                     OR   H   
0BE1   28 4C                  JR   Z,expectM_0_2136S43   
0BE3   CD 8E 09               CALL   printStr   
0BE6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0BEE   CD 8E 09               CALL   printStr   
0BF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C00   21 01 00               LD   HL,1   
0C03   CD DC 08               CALL   prtdec   
0C06   CD 8E 09               CALL   printStr   
0C09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C16   E1                     POP   hl   
0C17   E5                     PUSH   hl   
0C18   CD DC 08               CALL   prtdec   
0C1B   E1                     POP   hl   
0C1C   CD 8E 09               CALL   printStr   
0C1F   20 28 23 00            .CSTR   " (#"   
0C23   CD 24 09               CALL   prthex   
0C26   CD 8E 09               CALL   printStr   
0C29   29 0D 0A 00            .CSTR   ")\r\n"   
0C2D   76                     HALT      
0C2E   00                     .CSTR      
0C2F                EXPECTM_0_2136S43:      
0C2F   E1                     POP   HL   
0C30                          ;*Macro unroll:  test "2", 2
0C30   31 80 3C               LD   SP,STACK   
0C33   CD 95 09               CALL   init   
0C36   CD D0 3B               CALL   execStr   
0C39   32 00                  .CSTR   "2"   
0C3B                          ;*Macro unroll:  expect "2",2
0C3B   E1                     POP   HL   
0C3C   E5                     PUSH   HL   
0C3D   11 02 00               LD   DE,2   
0C40   B7                     OR   A   
0C41   ED 52                  SBC   HL,DE   
0C43   7D                     LD   A,L   
0C44   B4                     OR   H   
0C45   28 4C                  JR   Z,expectM_0_2137S43   
0C47   CD 8E 09               CALL   printStr   
0C4A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0C52   CD 8E 09               CALL   printStr   
0C55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C64   21 02 00               LD   HL,2   
0C67   CD DC 08               CALL   prtdec   
0C6A   CD 8E 09               CALL   printStr   
0C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C7A   E1                     POP   hl   
0C7B   E5                     PUSH   hl   
0C7C   CD DC 08               CALL   prtdec   
0C7F   E1                     POP   hl   
0C80   CD 8E 09               CALL   printStr   
0C83   20 28 23 00            .CSTR   " (#"   
0C87   CD 24 09               CALL   prthex   
0C8A   CD 8E 09               CALL   printStr   
0C8D   29 0D 0A 00            .CSTR   ")\r\n"   
0C91   76                     HALT      
0C92   00                     .CSTR      
0C93                EXPECTM_0_2137S43:      
0C93   E1                     POP   HL   
0C94                          ;*Macro unroll:  test "1", 1
0C94   31 80 3C               LD   SP,STACK   
0C97   CD 95 09               CALL   init   
0C9A   CD D0 3B               CALL   execStr   
0C9D   31 00                  .CSTR   "1"   
0C9F                          ;*Macro unroll:  expect "1",1
0C9F   E1                     POP   HL   
0CA0   E5                     PUSH   HL   
0CA1   11 01 00               LD   DE,1   
0CA4   B7                     OR   A   
0CA5   ED 52                  SBC   HL,DE   
0CA7   7D                     LD   A,L   
0CA8   B4                     OR   H   
0CA9   28 4C                  JR   Z,expectM_0_2138S43   
0CAB   CD 8E 09               CALL   printStr   
0CAE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0CB6   CD 8E 09               CALL   printStr   
0CB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CC8   21 01 00               LD   HL,1   
0CCB   CD DC 08               CALL   prtdec   
0CCE   CD 8E 09               CALL   printStr   
0CD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CDE   E1                     POP   hl   
0CDF   E5                     PUSH   hl   
0CE0   CD DC 08               CALL   prtdec   
0CE3   E1                     POP   hl   
0CE4   CD 8E 09               CALL   printStr   
0CE7   20 28 23 00            .CSTR   " (#"   
0CEB   CD 24 09               CALL   prthex   
0CEE   CD 8E 09               CALL   printStr   
0CF1   29 0D 0A 00            .CSTR   ")\r\n"   
0CF5   76                     HALT      
0CF6   00                     .CSTR      
0CF7                EXPECTM_0_2138S43:      
0CF7   E1                     POP   HL   
0CF8                          ;*Macro unroll:  test "0", 0
0CF8   31 80 3C               LD   SP,STACK   
0CFB   CD 95 09               CALL   init   
0CFE   CD D0 3B               CALL   execStr   
0D01   30 00                  .CSTR   "0"   
0D03                          ;*Macro unroll:  expect "0",0
0D03   E1                     POP   HL   
0D04   E5                     PUSH   HL   
0D05   11 00 00               LD   DE,0   
0D08   B7                     OR   A   
0D09   ED 52                  SBC   HL,DE   
0D0B   7D                     LD   A,L   
0D0C   B4                     OR   H   
0D0D   28 4C                  JR   Z,expectM_0_2139S43   
0D0F   CD 8E 09               CALL   printStr   
0D12   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0D1A   CD 8E 09               CALL   printStr   
0D1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D2C   21 00 00               LD   HL,0   
0D2F   CD DC 08               CALL   prtdec   
0D32   CD 8E 09               CALL   printStr   
0D35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D42   E1                     POP   hl   
0D43   E5                     PUSH   hl   
0D44   CD DC 08               CALL   prtdec   
0D47   E1                     POP   hl   
0D48   CD 8E 09               CALL   printStr   
0D4B   20 28 23 00            .CSTR   " (#"   
0D4F   CD 24 09               CALL   prthex   
0D52   CD 8E 09               CALL   printStr   
0D55   29 0D 0A 00            .CSTR   ")\r\n"   
0D59   76                     HALT      
0D5A   00                     .CSTR      
0D5B                EXPECTM_0_2139S43:      
0D5B   E1                     POP   HL   
0D5C                          ;*Macro unroll:  test "10", 10
0D5C   31 80 3C               LD   SP,STACK   
0D5F   CD 95 09               CALL   init   
0D62   CD D0 3B               CALL   execStr   
0D65   31 30 00               .CSTR   "10"   
0D68                          ;*Macro unroll:  expect "10",10
0D68   E1                     POP   HL   
0D69   E5                     PUSH   HL   
0D6A   11 0A 00               LD   DE,10   
0D6D   B7                     OR   A   
0D6E   ED 52                  SBC   HL,DE   
0D70   7D                     LD   A,L   
0D71   B4                     OR   H   
0D72   28 4D                  JR   Z,expectM_0_2140S43   
0D74   CD 8E 09               CALL   printStr   
0D77   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0D80   CD 8E 09               CALL   printStr   
0D83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D92   21 0A 00               LD   HL,10   
0D95   CD DC 08               CALL   prtdec   
0D98   CD 8E 09               CALL   printStr   
0D9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DA8   E1                     POP   hl   
0DA9   E5                     PUSH   hl   
0DAA   CD DC 08               CALL   prtdec   
0DAD   E1                     POP   hl   
0DAE   CD 8E 09               CALL   printStr   
0DB1   20 28 23 00            .CSTR   " (#"   
0DB5   CD 24 09               CALL   prthex   
0DB8   CD 8E 09               CALL   printStr   
0DBB   29 0D 0A 00            .CSTR   ")\r\n"   
0DBF   76                     HALT      
0DC0   00                     .CSTR      
0DC1                EXPECTM_0_2140S43:      
0DC1   E1                     POP   HL   
0DC2                          ;*Macro unroll:  test "123", 123
0DC2   31 80 3C               LD   SP,STACK   
0DC5   CD 95 09               CALL   init   
0DC8   CD D0 3B               CALL   execStr   
0DCB   31 32 33 00            .CSTR   "123"   
0DCF                          ;*Macro unroll:  expect "123",123
0DCF   E1                     POP   HL   
0DD0   E5                     PUSH   HL   
0DD1   11 7B 00               LD   DE,123   
0DD4   B7                     OR   A   
0DD5   ED 52                  SBC   HL,DE   
0DD7   7D                     LD   A,L   
0DD8   B4                     OR   H   
0DD9   28 4E                  JR   Z,expectM_0_2141S43   
0DDB   CD 8E 09               CALL   printStr   
0DDE   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0DE8   CD 8E 09               CALL   printStr   
0DEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DFA   21 7B 00               LD   HL,123   
0DFD   CD DC 08               CALL   prtdec   
0E00   CD 8E 09               CALL   printStr   
0E03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E10   E1                     POP   hl   
0E11   E5                     PUSH   hl   
0E12   CD DC 08               CALL   prtdec   
0E15   E1                     POP   hl   
0E16   CD 8E 09               CALL   printStr   
0E19   20 28 23 00            .CSTR   " (#"   
0E1D   CD 24 09               CALL   prthex   
0E20   CD 8E 09               CALL   printStr   
0E23   29 0D 0A 00            .CSTR   ")\r\n"   
0E27   76                     HALT      
0E28   00                     .CSTR      
0E29                EXPECTM_0_2141S43:      
0E29   E1                     POP   HL   
0E2A                          ;*Macro unroll:  test "-1",-1
0E2A   31 80 3C               LD   SP,STACK   
0E2D   CD 95 09               CALL   init   
0E30   CD D0 3B               CALL   execStr   
0E33   2D 31 00               .CSTR   "-1"   
0E36                          ;*Macro unroll:  expect "-1",-1
0E36   E1                     POP   HL   
0E37   E5                     PUSH   HL   
0E38   11 FF FF               LD   DE,-1   
0E3B   B7                     OR   A   
0E3C   ED 52                  SBC   HL,DE   
0E3E   7D                     LD   A,L   
0E3F   B4                     OR   H   
0E40   28 4D                  JR   Z,expectM_0_2142S43   
0E42   CD 8E 09               CALL   printStr   
0E45   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0E4E   CD 8E 09               CALL   printStr   
0E51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E60   21 FF FF               LD   HL,-1   
0E63   CD DC 08               CALL   prtdec   
0E66   CD 8E 09               CALL   printStr   
0E69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E76   E1                     POP   hl   
0E77   E5                     PUSH   hl   
0E78   CD DC 08               CALL   prtdec   
0E7B   E1                     POP   hl   
0E7C   CD 8E 09               CALL   printStr   
0E7F   20 28 23 00            .CSTR   " (#"   
0E83   CD 24 09               CALL   prthex   
0E86   CD 8E 09               CALL   printStr   
0E89   29 0D 0A 00            .CSTR   ")\r\n"   
0E8D   76                     HALT      
0E8E   00                     .CSTR      
0E8F                EXPECTM_0_2142S43:      
0E8F   E1                     POP   HL   
0E90                          ;*Macro unroll:  test "''", 0
0E90   31 80 3C               LD   SP,STACK   
0E93   CD 95 09               CALL   init   
0E96   CD D0 3B               CALL   execStr   
0E99   27 27 00               .CSTR   "''"   
0E9C                          ;*Macro unroll:  expect "''",0
0E9C   E1                     POP   HL   
0E9D   E5                     PUSH   HL   
0E9E   11 00 00               LD   DE,0   
0EA1   B7                     OR   A   
0EA2   ED 52                  SBC   HL,DE   
0EA4   7D                     LD   A,L   
0EA5   B4                     OR   H   
0EA6   28 4D                  JR   Z,expectM_0_2143S43   
0EA8   CD 8E 09               CALL   printStr   
0EAB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0EB4   CD 8E 09               CALL   printStr   
0EB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EC6   21 00 00               LD   HL,0   
0EC9   CD DC 08               CALL   prtdec   
0ECC   CD 8E 09               CALL   printStr   
0ECF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EDC   E1                     POP   hl   
0EDD   E5                     PUSH   hl   
0EDE   CD DC 08               CALL   prtdec   
0EE1   E1                     POP   hl   
0EE2   CD 8E 09               CALL   printStr   
0EE5   20 28 23 00            .CSTR   " (#"   
0EE9   CD 24 09               CALL   prthex   
0EEC   CD 8E 09               CALL   printStr   
0EEF   29 0D 0A 00            .CSTR   ")\r\n"   
0EF3   76                     HALT      
0EF4   00                     .CSTR      
0EF5                EXPECTM_0_2143S43:      
0EF5   E1                     POP   HL   
0EF6                          ;*Macro unroll:  test "'a'", $61
0EF6   31 80 3C               LD   SP,STACK   
0EF9   CD 95 09               CALL   init   
0EFC   CD D0 3B               CALL   execStr   
0EFF   27 61 27 00            .CSTR   "'a'"   
0F03                          ;*Macro unroll:  expect "'a'",$61
0F03   E1                     POP   HL   
0F04   E5                     PUSH   HL   
0F05   11 61 00               LD   DE,$61   
0F08   B7                     OR   A   
0F09   ED 52                  SBC   HL,DE   
0F0B   7D                     LD   A,L   
0F0C   B4                     OR   H   
0F0D   28 4E                  JR   Z,expectM_0_2144S43   
0F0F   CD 8E 09               CALL   printStr   
0F12   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0F1C   CD 8E 09               CALL   printStr   
0F1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F2E   21 61 00               LD   HL,$61   
0F31   CD DC 08               CALL   prtdec   
0F34   CD 8E 09               CALL   printStr   
0F37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F44   E1                     POP   hl   
0F45   E5                     PUSH   hl   
0F46   CD DC 08               CALL   prtdec   
0F49   E1                     POP   hl   
0F4A   CD 8E 09               CALL   printStr   
0F4D   20 28 23 00            .CSTR   " (#"   
0F51   CD 24 09               CALL   prthex   
0F54   CD 8E 09               CALL   printStr   
0F57   29 0D 0A 00            .CSTR   ")\r\n"   
0F5B   76                     HALT      
0F5C   00                     .CSTR      
0F5D                EXPECTM_0_2144S43:      
0F5D   E1                     POP   HL   
0F5E                          ;*Macro unroll:  test "'\\''", $27
0F5E   31 80 3C               LD   SP,STACK   
0F61   CD 95 09               CALL   init   
0F64   CD D0 3B               CALL   execStr   
0F67   27 5C 27 27 00         .CSTR   "'\\''"   
0F6C                          ;*Macro unroll:  expect "'\\''",$27
0F6C   E1                     POP   HL   
0F6D   E5                     PUSH   HL   
0F6E   11 27 00               LD   DE,$27   
0F71   B7                     OR   A   
0F72   ED 52                  SBC   HL,DE   
0F74   7D                     LD   A,L   
0F75   B4                     OR   H   
0F76   28 4F                  JR   Z,expectM_0_2145S43   
0F78   CD 8E 09               CALL   printStr   
0F7B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
0F86   CD 8E 09               CALL   printStr   
0F89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F98   21 27 00               LD   HL,$27   
0F9B   CD DC 08               CALL   prtdec   
0F9E   CD 8E 09               CALL   printStr   
0FA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FAE   E1                     POP   hl   
0FAF   E5                     PUSH   hl   
0FB0   CD DC 08               CALL   prtdec   
0FB3   E1                     POP   hl   
0FB4   CD 8E 09               CALL   printStr   
0FB7   20 28 23 00            .CSTR   " (#"   
0FBB   CD 24 09               CALL   prthex   
0FBE   CD 8E 09               CALL   printStr   
0FC1   29 0D 0A 00            .CSTR   ")\r\n"   
0FC5   76                     HALT      
0FC6   00                     .CSTR      
0FC7                EXPECTM_0_2145S43:      
0FC7   E1                     POP   HL   
0FC8                          ;*Macro unroll:  test "#10", $10
0FC8   31 80 3C               LD   SP,STACK   
0FCB   CD 95 09               CALL   init   
0FCE   CD D0 3B               CALL   execStr   
0FD1   23 31 30 00            .CSTR   "#10"   
0FD5                          ;*Macro unroll:  expect "#10",$10
0FD5   E1                     POP   HL   
0FD6   E5                     PUSH   HL   
0FD7   11 10 00               LD   DE,$10   
0FDA   B7                     OR   A   
0FDB   ED 52                  SBC   HL,DE   
0FDD   7D                     LD   A,L   
0FDE   B4                     OR   H   
0FDF   28 4E                  JR   Z,expectM_0_2146S43   
0FE1   CD 8E 09               CALL   printStr   
0FE4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
0FEE   CD 8E 09               CALL   printStr   
0FF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1000   21 10 00               LD   HL,$10   
1003   CD DC 08               CALL   prtdec   
1006   CD 8E 09               CALL   printStr   
1009   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1016   E1                     POP   hl   
1017   E5                     PUSH   hl   
1018   CD DC 08               CALL   prtdec   
101B   E1                     POP   hl   
101C   CD 8E 09               CALL   printStr   
101F   20 28 23 00            .CSTR   " (#"   
1023   CD 24 09               CALL   prthex   
1026   CD 8E 09               CALL   printStr   
1029   29 0D 0A 00            .CSTR   ")\r\n"   
102D   76                     HALT      
102E   00                     .CSTR      
102F                EXPECTM_0_2146S43:      
102F   E1                     POP   HL   
1030                          ;*Macro unroll:  test "#FF", $FF
1030   31 80 3C               LD   SP,STACK   
1033   CD 95 09               CALL   init   
1036   CD D0 3B               CALL   execStr   
1039   23 46 46 00            .CSTR   "#FF"   
103D                          ;*Macro unroll:  expect "#FF",$FF
103D   E1                     POP   HL   
103E   E5                     PUSH   HL   
103F   11 FF 00               LD   DE,$FF   
1042   B7                     OR   A   
1043   ED 52                  SBC   HL,DE   
1045   7D                     LD   A,L   
1046   B4                     OR   H   
1047   28 4E                  JR   Z,expectM_0_2147S43   
1049   CD 8E 09               CALL   printStr   
104C   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
1056   CD 8E 09               CALL   printStr   
1059   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1068   21 FF 00               LD   HL,$FF   
106B   CD DC 08               CALL   prtdec   
106E   CD 8E 09               CALL   printStr   
1071   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
107E   E1                     POP   hl   
107F   E5                     PUSH   hl   
1080   CD DC 08               CALL   prtdec   
1083   E1                     POP   hl   
1084   CD 8E 09               CALL   printStr   
1087   20 28 23 00            .CSTR   " (#"   
108B   CD 24 09               CALL   prthex   
108E   CD 8E 09               CALL   printStr   
1091   29 0D 0A 00            .CSTR   ")\r\n"   
1095   76                     HALT      
1096   00                     .CSTR      
1097                EXPECTM_0_2147S43:      
1097   E1                     POP   HL   
1098                          ;*Macro unroll:  test "-1 2 +",1
1098   31 80 3C               LD   SP,STACK   
109B   CD 95 09               CALL   init   
109E   CD D0 3B               CALL   execStr   
10A1   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
10A8                          ;*Macro unroll:  expect "-1 2 +",1
10A8   E1                     POP   HL   
10A9   E5                     PUSH   HL   
10AA   11 01 00               LD   DE,1   
10AD   B7                     OR   A   
10AE   ED 52                  SBC   HL,DE   
10B0   7D                     LD   A,L   
10B1   B4                     OR   H   
10B2   28 51                  JR   Z,expectM_0_2148S43   
10B4   CD 8E 09               CALL   printStr   
10B7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
10C4   CD 8E 09               CALL   printStr   
10C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10D6   21 01 00               LD   HL,1   
10D9   CD DC 08               CALL   prtdec   
10DC   CD 8E 09               CALL   printStr   
10DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10EC   E1                     POP   hl   
10ED   E5                     PUSH   hl   
10EE   CD DC 08               CALL   prtdec   
10F1   E1                     POP   hl   
10F2   CD 8E 09               CALL   printStr   
10F5   20 28 23 00            .CSTR   " (#"   
10F9   CD 24 09               CALL   prthex   
10FC   CD 8E 09               CALL   printStr   
10FF   29 0D 0A 00            .CSTR   ")\r\n"   
1103   76                     HALT      
1104   00                     .CSTR      
1105                EXPECTM_0_2148S43:      
1105   E1                     POP   HL   
1106                          ;*Macro unroll:  test "-1 1 +",0
1106   31 80 3C               LD   SP,STACK   
1109   CD 95 09               CALL   init   
110C   CD D0 3B               CALL   execStr   
110F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1116                          ;*Macro unroll:  expect "-1 1 +",0
1116   E1                     POP   HL   
1117   E5                     PUSH   HL   
1118   11 00 00               LD   DE,0   
111B   B7                     OR   A   
111C   ED 52                  SBC   HL,DE   
111E   7D                     LD   A,L   
111F   B4                     OR   H   
1120   28 51                  JR   Z,expectM_0_2149S43   
1122   CD 8E 09               CALL   printStr   
1125   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1132   CD 8E 09               CALL   printStr   
1135   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1144   21 00 00               LD   HL,0   
1147   CD DC 08               CALL   prtdec   
114A   CD 8E 09               CALL   printStr   
114D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
115A   E1                     POP   hl   
115B   E5                     PUSH   hl   
115C   CD DC 08               CALL   prtdec   
115F   E1                     POP   hl   
1160   CD 8E 09               CALL   printStr   
1163   20 28 23 00            .CSTR   " (#"   
1167   CD 24 09               CALL   prthex   
116A   CD 8E 09               CALL   printStr   
116D   29 0D 0A 00            .CSTR   ")\r\n"   
1171   76                     HALT      
1172   00                     .CSTR      
1173                EXPECTM_0_2149S43:      
1173   E1                     POP   HL   
1174                          ;*Macro unroll:  test "1 2 +", 3
1174   31 80 3C               LD   SP,STACK   
1177   CD 95 09               CALL   init   
117A   CD D0 3B               CALL   execStr   
117D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1183                          ;*Macro unroll:  expect "1 2 +",3
1183   E1                     POP   HL   
1184   E5                     PUSH   HL   
1185   11 03 00               LD   DE,3   
1188   B7                     OR   A   
1189   ED 52                  SBC   HL,DE   
118B   7D                     LD   A,L   
118C   B4                     OR   H   
118D   28 50                  JR   Z,expectM_0_2150S43   
118F   CD 8E 09               CALL   printStr   
1192   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
119E   CD 8E 09               CALL   printStr   
11A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11B0   21 03 00               LD   HL,3   
11B3   CD DC 08               CALL   prtdec   
11B6   CD 8E 09               CALL   printStr   
11B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11C6   E1                     POP   hl   
11C7   E5                     PUSH   hl   
11C8   CD DC 08               CALL   prtdec   
11CB   E1                     POP   hl   
11CC   CD 8E 09               CALL   printStr   
11CF   20 28 23 00            .CSTR   " (#"   
11D3   CD 24 09               CALL   prthex   
11D6   CD 8E 09               CALL   printStr   
11D9   29 0D 0A 00            .CSTR   ")\r\n"   
11DD   76                     HALT      
11DE   00                     .CSTR      
11DF                EXPECTM_0_2150S43:      
11DF   E1                     POP   HL   
11E0                          ;*Macro unroll:  test "4 1 2 +", 3
11E0   31 80 3C               LD   SP,STACK   
11E3   CD 95 09               CALL   init   
11E6   CD D0 3B               CALL   execStr   
11E9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
11F1                          ;*Macro unroll:  expect "4 1 2 +",3
11F1   E1                     POP   HL   
11F2   E5                     PUSH   HL   
11F3   11 03 00               LD   DE,3   
11F6   B7                     OR   A   
11F7   ED 52                  SBC   HL,DE   
11F9   7D                     LD   A,L   
11FA   B4                     OR   H   
11FB   28 52                  JR   Z,expectM_0_2151S43   
11FD   CD 8E 09               CALL   printStr   
1200   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
120E   CD 8E 09               CALL   printStr   
1211   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1220   21 03 00               LD   HL,3   
1223   CD DC 08               CALL   prtdec   
1226   CD 8E 09               CALL   printStr   
1229   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1236   E1                     POP   hl   
1237   E5                     PUSH   hl   
1238   CD DC 08               CALL   prtdec   
123B   E1                     POP   hl   
123C   CD 8E 09               CALL   printStr   
123F   20 28 23 00            .CSTR   " (#"   
1243   CD 24 09               CALL   prthex   
1246   CD 8E 09               CALL   printStr   
1249   29 0D 0A 00            .CSTR   ")\r\n"   
124D   76                     HALT      
124E   00                     .CSTR      
124F                EXPECTM_0_2151S43:      
124F   E1                     POP   HL   
1250                          ;*Macro unroll:  test "123 456 +", 123+456
1250   31 80 3C               LD   SP,STACK   
1253   CD 95 09               CALL   init   
1256   CD D0 3B               CALL   execStr   
1259   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1263                          ;*Macro unroll:  expect "123 456 +",123+456
1263   E1                     POP   HL   
1264   E5                     PUSH   HL   
1265   11 43 02               LD   DE,123+456   
1268   B7                     OR   A   
1269   ED 52                  SBC   HL,DE   
126B   7D                     LD   A,L   
126C   B4                     OR   H   
126D   28 54                  JR   Z,expectM_0_2152S43   
126F   CD 8E 09               CALL   printStr   
1272   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1282   CD 8E 09               CALL   printStr   
1285   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1294   21 43 02               LD   HL,123+456   
1297   CD DC 08               CALL   prtdec   
129A   CD 8E 09               CALL   printStr   
129D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12AA   E1                     POP   hl   
12AB   E5                     PUSH   hl   
12AC   CD DC 08               CALL   prtdec   
12AF   E1                     POP   hl   
12B0   CD 8E 09               CALL   printStr   
12B3   20 28 23 00            .CSTR   " (#"   
12B7   CD 24 09               CALL   prthex   
12BA   CD 8E 09               CALL   printStr   
12BD   29 0D 0A 00            .CSTR   ")\r\n"   
12C1   76                     HALT      
12C2   00                     .CSTR      
12C3                EXPECTM_0_2152S43:      
12C3   E1                     POP   HL   
12C4                          ;*Macro unroll:  test "64 128 +", 64+128
12C4   31 80 3C               LD   SP,STACK   
12C7   CD 95 09               CALL   init   
12CA   CD D0 3B               CALL   execStr   
12CD   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
12D6                          ;*Macro unroll:  expect "64 128 +",64+128
12D6   E1                     POP   HL   
12D7   E5                     PUSH   HL   
12D8   11 C0 00               LD   DE,64+128   
12DB   B7                     OR   A   
12DC   ED 52                  SBC   HL,DE   
12DE   7D                     LD   A,L   
12DF   B4                     OR   H   
12E0   28 53                  JR   Z,expectM_0_2153S43   
12E2   CD 8E 09               CALL   printStr   
12E5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
12F4   CD 8E 09               CALL   printStr   
12F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1306   21 C0 00               LD   HL,64+128   
1309   CD DC 08               CALL   prtdec   
130C   CD 8E 09               CALL   printStr   
130F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
131C   E1                     POP   hl   
131D   E5                     PUSH   hl   
131E   CD DC 08               CALL   prtdec   
1321   E1                     POP   hl   
1322   CD 8E 09               CALL   printStr   
1325   20 28 23 00            .CSTR   " (#"   
1329   CD 24 09               CALL   prthex   
132C   CD 8E 09               CALL   printStr   
132F   29 0D 0A 00            .CSTR   ")\r\n"   
1333   76                     HALT      
1334   00                     .CSTR      
1335                EXPECTM_0_2153S43:      
1335   E1                     POP   HL   
1336                          ;*Macro unroll:  test "1 2 +", 3
1336   31 80 3C               LD   SP,STACK   
1339   CD 95 09               CALL   init   
133C   CD D0 3B               CALL   execStr   
133F   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1345                          ;*Macro unroll:  expect "1 2 +",3
1345   E1                     POP   HL   
1346   E5                     PUSH   HL   
1347   11 03 00               LD   DE,3   
134A   B7                     OR   A   
134B   ED 52                  SBC   HL,DE   
134D   7D                     LD   A,L   
134E   B4                     OR   H   
134F   28 50                  JR   Z,expectM_0_2154S43   
1351   CD 8E 09               CALL   printStr   
1354   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1360   CD 8E 09               CALL   printStr   
1363   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1372   21 03 00               LD   HL,3   
1375   CD DC 08               CALL   prtdec   
1378   CD 8E 09               CALL   printStr   
137B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1388   E1                     POP   hl   
1389   E5                     PUSH   hl   
138A   CD DC 08               CALL   prtdec   
138D   E1                     POP   hl   
138E   CD 8E 09               CALL   printStr   
1391   20 28 23 00            .CSTR   " (#"   
1395   CD 24 09               CALL   prthex   
1398   CD 8E 09               CALL   printStr   
139B   29 0D 0A 00            .CSTR   ")\r\n"   
139F   76                     HALT      
13A0   00                     .CSTR      
13A1                EXPECTM_0_2154S43:      
13A1   E1                     POP   HL   
13A2                          ;*Macro unroll:  test "1 a= a++ a",2
13A2   31 80 3C               LD   SP,STACK   
13A5   CD 95 09               CALL   init   
13A8   CD D0 3B               CALL   execStr   
13AB   31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1 a= a++ a"   
13B6                          ;*Macro unroll:  expect "1 a= a++ a",2
13B6   E1                     POP   HL   
13B7   E5                     PUSH   HL   
13B8   11 02 00               LD   DE,2   
13BB   B7                     OR   A   
13BC   ED 52                  SBC   HL,DE   
13BE   7D                     LD   A,L   
13BF   B4                     OR   H   
13C0   28 55                  JR   Z,expectM_0_2155S43   
13C2   CD 8E 09               CALL   printStr   
13C5   43 6F 64 65 3A 20 31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1 a= a++ a"   
13D6   CD 8E 09               CALL   printStr   
13D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E8   21 02 00               LD   HL,2   
13EB   CD DC 08               CALL   prtdec   
13EE   CD 8E 09               CALL   printStr   
13F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13FE   E1                     POP   hl   
13FF   E5                     PUSH   hl   
1400   CD DC 08               CALL   prtdec   
1403   E1                     POP   hl   
1404   CD 8E 09               CALL   printStr   
1407   20 28 23 00            .CSTR   " (#"   
140B   CD 24 09               CALL   prthex   
140E   CD 8E 09               CALL   printStr   
1411   29 0D 0A 00            .CSTR   ")\r\n"   
1415   76                     HALT      
1416   00                     .CSTR      
1417                EXPECTM_0_2155S43:      
1417   E1                     POP   HL   
1418                          ;*Macro unroll:  test "1 a= 2 a += a",3
1418   31 80 3C               LD   SP,STACK   
141B   CD 95 09               CALL   init   
141E   CD D0 3B               CALL   execStr   
1421   31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "1 a= 2 a += a"   
142F                          ;*Macro unroll:  expect "1 a= 2 a += a",3
142F   E1                     POP   HL   
1430   E5                     PUSH   HL   
1431   11 03 00               LD   DE,3   
1434   B7                     OR   A   
1435   ED 52                  SBC   HL,DE   
1437   7D                     LD   A,L   
1438   B4                     OR   H   
1439   28 58                  JR   Z,expectM_0_2156S43   
143B   CD 8E 09               CALL   printStr   
143E   43 6F 64 65 3A 20 31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "Code: ","1 a= 2 a += a"   
1452   CD 8E 09               CALL   printStr   
1455   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1464   21 03 00               LD   HL,3   
1467   CD DC 08               CALL   prtdec   
146A   CD 8E 09               CALL   printStr   
146D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
147A   E1                     POP   hl   
147B   E5                     PUSH   hl   
147C   CD DC 08               CALL   prtdec   
147F   E1                     POP   hl   
1480   CD 8E 09               CALL   printStr   
1483   20 28 23 00            .CSTR   " (#"   
1487   CD 24 09               CALL   prthex   
148A   CD 8E 09               CALL   printStr   
148D   29 0D 0A 00            .CSTR   ")\r\n"   
1491   76                     HALT      
1492   00                     .CSTR      
1493                EXPECTM_0_2156S43:      
1493   E1                     POP   HL   
1494                          ;*Macro unroll:  test "-1 -1 -",0
1494   31 80 3C               LD   SP,STACK   
1497   CD 95 09               CALL   init   
149A   CD D0 3B               CALL   execStr   
149D   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
14A5                          ;*Macro unroll:  expect "-1 -1 -",0
14A5   E1                     POP   HL   
14A6   E5                     PUSH   HL   
14A7   11 00 00               LD   DE,0   
14AA   B7                     OR   A   
14AB   ED 52                  SBC   HL,DE   
14AD   7D                     LD   A,L   
14AE   B4                     OR   H   
14AF   28 52                  JR   Z,expectM_0_2157S43   
14B1   CD 8E 09               CALL   printStr   
14B4   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
14C2   CD 8E 09               CALL   printStr   
14C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14D4   21 00 00               LD   HL,0   
14D7   CD DC 08               CALL   prtdec   
14DA   CD 8E 09               CALL   printStr   
14DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14EA   E1                     POP   hl   
14EB   E5                     PUSH   hl   
14EC   CD DC 08               CALL   prtdec   
14EF   E1                     POP   hl   
14F0   CD 8E 09               CALL   printStr   
14F3   20 28 23 00            .CSTR   " (#"   
14F7   CD 24 09               CALL   prthex   
14FA   CD 8E 09               CALL   printStr   
14FD   29 0D 0A 00            .CSTR   ")\r\n"   
1501   76                     HALT      
1502   00                     .CSTR      
1503                EXPECTM_0_2157S43:      
1503   E1                     POP   HL   
1504                          ;*Macro unroll:  test "5 3 -", 2
1504   31 80 3C               LD   SP,STACK   
1507   CD 95 09               CALL   init   
150A   CD D0 3B               CALL   execStr   
150D   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1513                          ;*Macro unroll:  expect "5 3 -",2
1513   E1                     POP   HL   
1514   E5                     PUSH   HL   
1515   11 02 00               LD   DE,2   
1518   B7                     OR   A   
1519   ED 52                  SBC   HL,DE   
151B   7D                     LD   A,L   
151C   B4                     OR   H   
151D   28 50                  JR   Z,expectM_0_2158S43   
151F   CD 8E 09               CALL   printStr   
1522   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
152E   CD 8E 09               CALL   printStr   
1531   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1540   21 02 00               LD   HL,2   
1543   CD DC 08               CALL   prtdec   
1546   CD 8E 09               CALL   printStr   
1549   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1556   E1                     POP   hl   
1557   E5                     PUSH   hl   
1558   CD DC 08               CALL   prtdec   
155B   E1                     POP   hl   
155C   CD 8E 09               CALL   printStr   
155F   20 28 23 00            .CSTR   " (#"   
1563   CD 24 09               CALL   prthex   
1566   CD 8E 09               CALL   printStr   
1569   29 0D 0A 00            .CSTR   ")\r\n"   
156D   76                     HALT      
156E   00                     .CSTR      
156F                EXPECTM_0_2158S43:      
156F   E1                     POP   HL   
1570                          ;*Macro unroll:  test "2 1 -",1
1570   31 80 3C               LD   SP,STACK   
1573   CD 95 09               CALL   init   
1576   CD D0 3B               CALL   execStr   
1579   32 20 31 20 2D 00      .CSTR   "2 1 -"   
157F                          ;*Macro unroll:  expect "2 1 -",1
157F   E1                     POP   HL   
1580   E5                     PUSH   HL   
1581   11 01 00               LD   DE,1   
1584   B7                     OR   A   
1585   ED 52                  SBC   HL,DE   
1587   7D                     LD   A,L   
1588   B4                     OR   H   
1589   28 50                  JR   Z,expectM_0_2159S43   
158B   CD 8E 09               CALL   printStr   
158E   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
159A   CD 8E 09               CALL   printStr   
159D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15AC   21 01 00               LD   HL,1   
15AF   CD DC 08               CALL   prtdec   
15B2   CD 8E 09               CALL   printStr   
15B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15C2   E1                     POP   hl   
15C3   E5                     PUSH   hl   
15C4   CD DC 08               CALL   prtdec   
15C7   E1                     POP   hl   
15C8   CD 8E 09               CALL   printStr   
15CB   20 28 23 00            .CSTR   " (#"   
15CF   CD 24 09               CALL   prthex   
15D2   CD 8E 09               CALL   printStr   
15D5   29 0D 0A 00            .CSTR   ")\r\n"   
15D9   76                     HALT      
15DA   00                     .CSTR      
15DB                EXPECTM_0_2159S43:      
15DB   E1                     POP   HL   
15DC                          ;*Macro unroll:  test "3 a= a-- a",2
15DC   31 80 3C               LD   SP,STACK   
15DF   CD 95 09               CALL   init   
15E2   CD D0 3B               CALL   execStr   
15E5   33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3 a= a-- a"   
15F0                          ;*Macro unroll:  expect "3 a= a-- a",2
15F0   E1                     POP   HL   
15F1   E5                     PUSH   HL   
15F2   11 02 00               LD   DE,2   
15F5   B7                     OR   A   
15F6   ED 52                  SBC   HL,DE   
15F8   7D                     LD   A,L   
15F9   B4                     OR   H   
15FA   28 55                  JR   Z,expectM_0_2160S43   
15FC   CD 8E 09               CALL   printStr   
15FF   43 6F 64 65 3A 20 33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3 a= a-- a"   
1610   CD 8E 09               CALL   printStr   
1613   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1622   21 02 00               LD   HL,2   
1625   CD DC 08               CALL   prtdec   
1628   CD 8E 09               CALL   printStr   
162B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1638   E1                     POP   hl   
1639   E5                     PUSH   hl   
163A   CD DC 08               CALL   prtdec   
163D   E1                     POP   hl   
163E   CD 8E 09               CALL   printStr   
1641   20 28 23 00            .CSTR   " (#"   
1645   CD 24 09               CALL   prthex   
1648   CD 8E 09               CALL   printStr   
164B   29 0D 0A 00            .CSTR   ")\r\n"   
164F   76                     HALT      
1650   00                     .CSTR      
1651                EXPECTM_0_2160S43:      
1651   E1                     POP   HL   
1652                          ;*Macro unroll:  test "4 a= a 2 -= a",2
1652   31 80 3C               LD   SP,STACK   
1655   CD 95 09               CALL   init   
1658   CD D0 3B               CALL   execStr   
165B   34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "4 a= a 2 -= a"   
1669                          ;*Macro unroll:  expect "4 a= a 2 -= a",2
1669   E1                     POP   HL   
166A   E5                     PUSH   HL   
166B   11 02 00               LD   DE,2   
166E   B7                     OR   A   
166F   ED 52                  SBC   HL,DE   
1671   7D                     LD   A,L   
1672   B4                     OR   H   
1673   28 58                  JR   Z,expectM_0_2161S43   
1675   CD 8E 09               CALL   printStr   
1678   43 6F 64 65 3A 20 34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "Code: ","4 a= a 2 -= a"   
168C   CD 8E 09               CALL   printStr   
168F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
169E   21 02 00               LD   HL,2   
16A1   CD DC 08               CALL   prtdec   
16A4   CD 8E 09               CALL   printStr   
16A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16B4   E1                     POP   hl   
16B5   E5                     PUSH   hl   
16B6   CD DC 08               CALL   prtdec   
16B9   E1                     POP   hl   
16BA   CD 8E 09               CALL   printStr   
16BD   20 28 23 00            .CSTR   " (#"   
16C1   CD 24 09               CALL   prthex   
16C4   CD 8E 09               CALL   printStr   
16C7   29 0D 0A 00            .CSTR   ")\r\n"   
16CB   76                     HALT      
16CC   00                     .CSTR      
16CD                EXPECTM_0_2161S43:      
16CD   E1                     POP   HL   
16CE                          ;*Macro unroll:  test "3 5 &", 1
16CE   31 80 3C               LD   SP,STACK   
16D1   CD 95 09               CALL   init   
16D4   CD D0 3B               CALL   execStr   
16D7   33 20 35 20 26 00      .CSTR   "3 5 &"   
16DD                          ;*Macro unroll:  expect "3 5 &",1
16DD   E1                     POP   HL   
16DE   E5                     PUSH   HL   
16DF   11 01 00               LD   DE,1   
16E2   B7                     OR   A   
16E3   ED 52                  SBC   HL,DE   
16E5   7D                     LD   A,L   
16E6   B4                     OR   H   
16E7   28 50                  JR   Z,expectM_0_2162S43   
16E9   CD 8E 09               CALL   printStr   
16EC   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
16F8   CD 8E 09               CALL   printStr   
16FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
170A   21 01 00               LD   HL,1   
170D   CD DC 08               CALL   prtdec   
1710   CD 8E 09               CALL   printStr   
1713   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1720   E1                     POP   hl   
1721   E5                     PUSH   hl   
1722   CD DC 08               CALL   prtdec   
1725   E1                     POP   hl   
1726   CD 8E 09               CALL   printStr   
1729   20 28 23 00            .CSTR   " (#"   
172D   CD 24 09               CALL   prthex   
1730   CD 8E 09               CALL   printStr   
1733   29 0D 0A 00            .CSTR   ")\r\n"   
1737   76                     HALT      
1738   00                     .CSTR      
1739                EXPECTM_0_2162S43:      
1739   E1                     POP   HL   
173A                          ;*Macro unroll:  test "3 a= 5 a &= a",1
173A   31 80 3C               LD   SP,STACK   
173D   CD 95 09               CALL   init   
1740   CD D0 3B               CALL   execStr   
1743   33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "3 a= 5 a &= a"   
1751                          ;*Macro unroll:  expect "3 a= 5 a &= a",1
1751   E1                     POP   HL   
1752   E5                     PUSH   HL   
1753   11 01 00               LD   DE,1   
1756   B7                     OR   A   
1757   ED 52                  SBC   HL,DE   
1759   7D                     LD   A,L   
175A   B4                     OR   H   
175B   28 58                  JR   Z,expectM_0_2163S43   
175D   CD 8E 09               CALL   printStr   
1760   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a &= a"   
1774   CD 8E 09               CALL   printStr   
1777   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1786   21 01 00               LD   HL,1   
1789   CD DC 08               CALL   prtdec   
178C   CD 8E 09               CALL   printStr   
178F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
179C   E1                     POP   hl   
179D   E5                     PUSH   hl   
179E   CD DC 08               CALL   prtdec   
17A1   E1                     POP   hl   
17A2   CD 8E 09               CALL   printStr   
17A5   20 28 23 00            .CSTR   " (#"   
17A9   CD 24 09               CALL   prthex   
17AC   CD 8E 09               CALL   printStr   
17AF   29 0D 0A 00            .CSTR   ")\r\n"   
17B3   76                     HALT      
17B4   00                     .CSTR      
17B5                EXPECTM_0_2163S43:      
17B5   E1                     POP   HL   
17B6                          ;*Macro unroll:  test "3 5 |", 7
17B6   31 80 3C               LD   SP,STACK   
17B9   CD 95 09               CALL   init   
17BC   CD D0 3B               CALL   execStr   
17BF   33 20 35 20 7C 00      .CSTR   "3 5 |"   
17C5                          ;*Macro unroll:  expect "3 5 |",7
17C5   E1                     POP   HL   
17C6   E5                     PUSH   HL   
17C7   11 07 00               LD   DE,7   
17CA   B7                     OR   A   
17CB   ED 52                  SBC   HL,DE   
17CD   7D                     LD   A,L   
17CE   B4                     OR   H   
17CF   28 50                  JR   Z,expectM_0_2164S43   
17D1   CD 8E 09               CALL   printStr   
17D4   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
17E0   CD 8E 09               CALL   printStr   
17E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17F2   21 07 00               LD   HL,7   
17F5   CD DC 08               CALL   prtdec   
17F8   CD 8E 09               CALL   printStr   
17FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1808   E1                     POP   hl   
1809   E5                     PUSH   hl   
180A   CD DC 08               CALL   prtdec   
180D   E1                     POP   hl   
180E   CD 8E 09               CALL   printStr   
1811   20 28 23 00            .CSTR   " (#"   
1815   CD 24 09               CALL   prthex   
1818   CD 8E 09               CALL   printStr   
181B   29 0D 0A 00            .CSTR   ")\r\n"   
181F   76                     HALT      
1820   00                     .CSTR      
1821                EXPECTM_0_2164S43:      
1821   E1                     POP   HL   
1822                          ;*Macro unroll:  test "3 a= 5 a |= a",7
1822   31 80 3C               LD   SP,STACK   
1825   CD 95 09               CALL   init   
1828   CD D0 3B               CALL   execStr   
182B   33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "3 a= 5 a |= a"   
1839                          ;*Macro unroll:  expect "3 a= 5 a |= a",7
1839   E1                     POP   HL   
183A   E5                     PUSH   HL   
183B   11 07 00               LD   DE,7   
183E   B7                     OR   A   
183F   ED 52                  SBC   HL,DE   
1841   7D                     LD   A,L   
1842   B4                     OR   H   
1843   28 58                  JR   Z,expectM_0_2165S43   
1845   CD 8E 09               CALL   printStr   
1848   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a |= a"   
185C   CD 8E 09               CALL   printStr   
185F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
186E   21 07 00               LD   HL,7   
1871   CD DC 08               CALL   prtdec   
1874   CD 8E 09               CALL   printStr   
1877   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1884   E1                     POP   hl   
1885   E5                     PUSH   hl   
1886   CD DC 08               CALL   prtdec   
1889   E1                     POP   hl   
188A   CD 8E 09               CALL   printStr   
188D   20 28 23 00            .CSTR   " (#"   
1891   CD 24 09               CALL   prthex   
1894   CD 8E 09               CALL   printStr   
1897   29 0D 0A 00            .CSTR   ")\r\n"   
189B   76                     HALT      
189C   00                     .CSTR      
189D                EXPECTM_0_2165S43:      
189D   E1                     POP   HL   
189E                          ;*Macro unroll:  test "3 5 ^", 6
189E   31 80 3C               LD   SP,STACK   
18A1   CD 95 09               CALL   init   
18A4   CD D0 3B               CALL   execStr   
18A7   33 20 35 20 5E 00      .CSTR   "3 5 ^"   
18AD                          ;*Macro unroll:  expect "3 5 ^",6
18AD   E1                     POP   HL   
18AE   E5                     PUSH   HL   
18AF   11 06 00               LD   DE,6   
18B2   B7                     OR   A   
18B3   ED 52                  SBC   HL,DE   
18B5   7D                     LD   A,L   
18B6   B4                     OR   H   
18B7   28 50                  JR   Z,expectM_0_2166S43   
18B9   CD 8E 09               CALL   printStr   
18BC   43 6F 64 65 3A 20 33 20 35 20 5E 00 .CSTR   "Code: ","3 5 ^"   
18C8   CD 8E 09               CALL   printStr   
18CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18DA   21 06 00               LD   HL,6   
18DD   CD DC 08               CALL   prtdec   
18E0   CD 8E 09               CALL   printStr   
18E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18F0   E1                     POP   hl   
18F1   E5                     PUSH   hl   
18F2   CD DC 08               CALL   prtdec   
18F5   E1                     POP   hl   
18F6   CD 8E 09               CALL   printStr   
18F9   20 28 23 00            .CSTR   " (#"   
18FD   CD 24 09               CALL   prthex   
1900   CD 8E 09               CALL   printStr   
1903   29 0D 0A 00            .CSTR   ")\r\n"   
1907   76                     HALT      
1908   00                     .CSTR      
1909                EXPECTM_0_2166S43:      
1909   E1                     POP   HL   
190A                          ;*Macro unroll:  test "3 a= 5 a ^= a",6
190A   31 80 3C               LD   SP,STACK   
190D   CD 95 09               CALL   init   
1910   CD D0 3B               CALL   execStr   
1913   33 20 61 3D 20 35 20 61 20 5E 3D 20 61 00 .CSTR   "3 a= 5 a ^= a"   
1921                          ;*Macro unroll:  expect "3 a= 5 a ^= a",6
1921   E1                     POP   HL   
1922   E5                     PUSH   HL   
1923   11 06 00               LD   DE,6   
1926   B7                     OR   A   
1927   ED 52                  SBC   HL,DE   
1929   7D                     LD   A,L   
192A   B4                     OR   H   
192B   28 58                  JR   Z,expectM_0_2167S43   
192D   CD 8E 09               CALL   printStr   
1930   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 5E 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a ^= a"   
1944   CD 8E 09               CALL   printStr   
1947   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1956   21 06 00               LD   HL,6   
1959   CD DC 08               CALL   prtdec   
195C   CD 8E 09               CALL   printStr   
195F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
196C   E1                     POP   hl   
196D   E5                     PUSH   hl   
196E   CD DC 08               CALL   prtdec   
1971   E1                     POP   hl   
1972   CD 8E 09               CALL   printStr   
1975   20 28 23 00            .CSTR   " (#"   
1979   CD 24 09               CALL   prthex   
197C   CD 8E 09               CALL   printStr   
197F   29 0D 0A 00            .CSTR   ")\r\n"   
1983   76                     HALT      
1984   00                     .CSTR      
1985                EXPECTM_0_2167S43:      
1985   E1                     POP   HL   
1986                          ;*Macro unroll:  test "2 3 *", 6
1986   31 80 3C               LD   SP,STACK   
1989   CD 95 09               CALL   init   
198C   CD D0 3B               CALL   execStr   
198F   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1995                          ;*Macro unroll:  expect "2 3 *",6
1995   E1                     POP   HL   
1996   E5                     PUSH   HL   
1997   11 06 00               LD   DE,6   
199A   B7                     OR   A   
199B   ED 52                  SBC   HL,DE   
199D   7D                     LD   A,L   
199E   B4                     OR   H   
199F   28 50                  JR   Z,expectM_0_2168S43   
19A1   CD 8E 09               CALL   printStr   
19A4   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
19B0   CD 8E 09               CALL   printStr   
19B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19C2   21 06 00               LD   HL,6   
19C5   CD DC 08               CALL   prtdec   
19C8   CD 8E 09               CALL   printStr   
19CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19D8   E1                     POP   hl   
19D9   E5                     PUSH   hl   
19DA   CD DC 08               CALL   prtdec   
19DD   E1                     POP   hl   
19DE   CD 8E 09               CALL   printStr   
19E1   20 28 23 00            .CSTR   " (#"   
19E5   CD 24 09               CALL   prthex   
19E8   CD 8E 09               CALL   printStr   
19EB   29 0D 0A 00            .CSTR   ")\r\n"   
19EF   76                     HALT      
19F0   00                     .CSTR      
19F1                EXPECTM_0_2168S43:      
19F1   E1                     POP   HL   
19F2                          ;*Macro unroll:  test "3 x= 2 x *= x",6
19F2   31 80 3C               LD   SP,STACK   
19F5   CD 95 09               CALL   init   
19F8   CD D0 3B               CALL   execStr   
19FB   33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "3 x= 2 x *= x"   
1A09                          ;*Macro unroll:  expect "3 x= 2 x *= x",6
1A09   E1                     POP   HL   
1A0A   E5                     PUSH   HL   
1A0B   11 06 00               LD   DE,6   
1A0E   B7                     OR   A   
1A0F   ED 52                  SBC   HL,DE   
1A11   7D                     LD   A,L   
1A12   B4                     OR   H   
1A13   28 58                  JR   Z,expectM_0_2169S43   
1A15   CD 8E 09               CALL   printStr   
1A18   43 6F 64 65 3A 20 33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "Code: ","3 x= 2 x *= x"   
1A2C   CD 8E 09               CALL   printStr   
1A2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A3E   21 06 00               LD   HL,6   
1A41   CD DC 08               CALL   prtdec   
1A44   CD 8E 09               CALL   printStr   
1A47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A54   E1                     POP   hl   
1A55   E5                     PUSH   hl   
1A56   CD DC 08               CALL   prtdec   
1A59   E1                     POP   hl   
1A5A   CD 8E 09               CALL   printStr   
1A5D   20 28 23 00            .CSTR   " (#"   
1A61   CD 24 09               CALL   prthex   
1A64   CD 8E 09               CALL   printStr   
1A67   29 0D 0A 00            .CSTR   ")\r\n"   
1A6B   76                     HALT      
1A6C   00                     .CSTR      
1A6D                EXPECTM_0_2169S43:      
1A6D   E1                     POP   HL   
1A6E                          ;*Macro unroll:  test "1 2 3 + *", 5
1A6E   31 80 3C               LD   SP,STACK   
1A71   CD 95 09               CALL   init   
1A74   CD D0 3B               CALL   execStr   
1A77   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1A81                          ;*Macro unroll:  expect "1 2 3 + *",5
1A81   E1                     POP   HL   
1A82   E5                     PUSH   HL   
1A83   11 05 00               LD   DE,5   
1A86   B7                     OR   A   
1A87   ED 52                  SBC   HL,DE   
1A89   7D                     LD   A,L   
1A8A   B4                     OR   H   
1A8B   28 54                  JR   Z,expectM_0_2170S43   
1A8D   CD 8E 09               CALL   printStr   
1A90   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1AA0   CD 8E 09               CALL   printStr   
1AA3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AB2   21 05 00               LD   HL,5   
1AB5   CD DC 08               CALL   prtdec   
1AB8   CD 8E 09               CALL   printStr   
1ABB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AC8   E1                     POP   hl   
1AC9   E5                     PUSH   hl   
1ACA   CD DC 08               CALL   prtdec   
1ACD   E1                     POP   hl   
1ACE   CD 8E 09               CALL   printStr   
1AD1   20 28 23 00            .CSTR   " (#"   
1AD5   CD 24 09               CALL   prthex   
1AD8   CD 8E 09               CALL   printStr   
1ADB   29 0D 0A 00            .CSTR   ")\r\n"   
1ADF   76                     HALT      
1AE0   00                     .CSTR      
1AE1                EXPECTM_0_2170S43:      
1AE1   E1                     POP   HL   
1AE2                          ;*Macro unroll:  test "7 3 /", 2
1AE2   31 80 3C               LD   SP,STACK   
1AE5   CD 95 09               CALL   init   
1AE8   CD D0 3B               CALL   execStr   
1AEB   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1AF1                          ;*Macro unroll:  expect "7 3 /",2
1AF1   E1                     POP   HL   
1AF2   E5                     PUSH   HL   
1AF3   11 02 00               LD   DE,2   
1AF6   B7                     OR   A   
1AF7   ED 52                  SBC   HL,DE   
1AF9   7D                     LD   A,L   
1AFA   B4                     OR   H   
1AFB   28 50                  JR   Z,expectM_0_2171S43   
1AFD   CD 8E 09               CALL   printStr   
1B00   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1B0C   CD 8E 09               CALL   printStr   
1B0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B1E   21 02 00               LD   HL,2   
1B21   CD DC 08               CALL   prtdec   
1B24   CD 8E 09               CALL   printStr   
1B27   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B34   E1                     POP   hl   
1B35   E5                     PUSH   hl   
1B36   CD DC 08               CALL   prtdec   
1B39   E1                     POP   hl   
1B3A   CD 8E 09               CALL   printStr   
1B3D   20 28 23 00            .CSTR   " (#"   
1B41   CD 24 09               CALL   prthex   
1B44   CD 8E 09               CALL   printStr   
1B47   29 0D 0A 00            .CSTR   ")\r\n"   
1B4B   76                     HALT      
1B4C   00                     .CSTR      
1B4D                EXPECTM_0_2171S43:      
1B4D   E1                     POP   HL   
1B4E                          ;*Macro unroll:  test "7 x= x 3 /= x", 2
1B4E   31 80 3C               LD   SP,STACK   
1B51   CD 95 09               CALL   init   
1B54   CD D0 3B               CALL   execStr   
1B57   37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "7 x= x 3 /= x"   
1B65                          ;*Macro unroll:  expect "7 x= x 3 /= x",2
1B65   E1                     POP   HL   
1B66   E5                     PUSH   HL   
1B67   11 02 00               LD   DE,2   
1B6A   B7                     OR   A   
1B6B   ED 52                  SBC   HL,DE   
1B6D   7D                     LD   A,L   
1B6E   B4                     OR   H   
1B6F   28 58                  JR   Z,expectM_0_2172S43   
1B71   CD 8E 09               CALL   printStr   
1B74   43 6F 64 65 3A 20 37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "Code: ","7 x= x 3 /= x"   
1B88   CD 8E 09               CALL   printStr   
1B8B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B9A   21 02 00               LD   HL,2   
1B9D   CD DC 08               CALL   prtdec   
1BA0   CD 8E 09               CALL   printStr   
1BA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BB0   E1                     POP   hl   
1BB1   E5                     PUSH   hl   
1BB2   CD DC 08               CALL   prtdec   
1BB5   E1                     POP   hl   
1BB6   CD 8E 09               CALL   printStr   
1BB9   20 28 23 00            .CSTR   " (#"   
1BBD   CD 24 09               CALL   prthex   
1BC0   CD 8E 09               CALL   printStr   
1BC3   29 0D 0A 00            .CSTR   ")\r\n"   
1BC7   76                     HALT      
1BC8   00                     .CSTR      
1BC9                EXPECTM_0_2172S43:      
1BC9   E1                     POP   HL   
1BCA                          ;*Macro unroll:  test "7 3 / _", 1
1BCA   31 80 3C               LD   SP,STACK   
1BCD   CD 95 09               CALL   init   
1BD0   CD D0 3B               CALL   execStr   
1BD3   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1BDB                          ;*Macro unroll:  expect "7 3 / _",1
1BDB   E1                     POP   HL   
1BDC   E5                     PUSH   HL   
1BDD   11 01 00               LD   DE,1   
1BE0   B7                     OR   A   
1BE1   ED 52                  SBC   HL,DE   
1BE3   7D                     LD   A,L   
1BE4   B4                     OR   H   
1BE5   28 52                  JR   Z,expectM_0_2173S43   
1BE7   CD 8E 09               CALL   printStr   
1BEA   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1BF8   CD 8E 09               CALL   printStr   
1BFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C0A   21 01 00               LD   HL,1   
1C0D   CD DC 08               CALL   prtdec   
1C10   CD 8E 09               CALL   printStr   
1C13   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C20   E1                     POP   hl   
1C21   E5                     PUSH   hl   
1C22   CD DC 08               CALL   prtdec   
1C25   E1                     POP   hl   
1C26   CD 8E 09               CALL   printStr   
1C29   20 28 23 00            .CSTR   " (#"   
1C2D   CD 24 09               CALL   prthex   
1C30   CD 8E 09               CALL   printStr   
1C33   29 0D 0A 00            .CSTR   ")\r\n"   
1C37   76                     HALT      
1C38   00                     .CSTR      
1C39                EXPECTM_0_2173S43:      
1C39   E1                     POP   HL   
1C3A                          ;*Macro unroll:  test "7 3 /", 2
1C3A   31 80 3C               LD   SP,STACK   
1C3D   CD 95 09               CALL   init   
1C40   CD D0 3B               CALL   execStr   
1C43   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1C49                          ;*Macro unroll:  expect "7 3 /",2
1C49   E1                     POP   HL   
1C4A   E5                     PUSH   HL   
1C4B   11 02 00               LD   DE,2   
1C4E   B7                     OR   A   
1C4F   ED 52                  SBC   HL,DE   
1C51   7D                     LD   A,L   
1C52   B4                     OR   H   
1C53   28 50                  JR   Z,expectM_0_2174S43   
1C55   CD 8E 09               CALL   printStr   
1C58   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1C64   CD 8E 09               CALL   printStr   
1C67   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C76   21 02 00               LD   HL,2   
1C79   CD DC 08               CALL   prtdec   
1C7C   CD 8E 09               CALL   printStr   
1C7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C8C   E1                     POP   hl   
1C8D   E5                     PUSH   hl   
1C8E   CD DC 08               CALL   prtdec   
1C91   E1                     POP   hl   
1C92   CD 8E 09               CALL   printStr   
1C95   20 28 23 00            .CSTR   " (#"   
1C99   CD 24 09               CALL   prthex   
1C9C   CD 8E 09               CALL   printStr   
1C9F   29 0D 0A 00            .CSTR   ")\r\n"   
1CA3   76                     HALT      
1CA4   00                     .CSTR      
1CA5                EXPECTM_0_2174S43:      
1CA5   E1                     POP   HL   
1CA6                          ;*Macro unroll:  test "2 3 ==", FALSE
1CA6   31 80 3C               LD   SP,STACK   
1CA9   CD 95 09               CALL   init   
1CAC   CD D0 3B               CALL   execStr   
1CAF   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1CB6                          ;*Macro unroll:  expect "2 3 ==",FALSE
1CB6   E1                     POP   HL   
1CB7   E5                     PUSH   HL   
1CB8   11 00 00               LD   DE,FALSE   
1CBB   B7                     OR   A   
1CBC   ED 52                  SBC   HL,DE   
1CBE   7D                     LD   A,L   
1CBF   B4                     OR   H   
1CC0   28 51                  JR   Z,expectM_0_2175S43   
1CC2   CD 8E 09               CALL   printStr   
1CC5   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1CD2   CD 8E 09               CALL   printStr   
1CD5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CE4   21 00 00               LD   HL,FALSE   
1CE7   CD DC 08               CALL   prtdec   
1CEA   CD 8E 09               CALL   printStr   
1CED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CFA   E1                     POP   hl   
1CFB   E5                     PUSH   hl   
1CFC   CD DC 08               CALL   prtdec   
1CFF   E1                     POP   hl   
1D00   CD 8E 09               CALL   printStr   
1D03   20 28 23 00            .CSTR   " (#"   
1D07   CD 24 09               CALL   prthex   
1D0A   CD 8E 09               CALL   printStr   
1D0D   29 0D 0A 00            .CSTR   ")\r\n"   
1D11   76                     HALT      
1D12   00                     .CSTR      
1D13                EXPECTM_0_2175S43:      
1D13   E1                     POP   HL   
1D14                          ;*Macro unroll:  test "3 3 ==", TRUE
1D14   31 80 3C               LD   SP,STACK   
1D17   CD 95 09               CALL   init   
1D1A   CD D0 3B               CALL   execStr   
1D1D   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1D24                          ;*Macro unroll:  expect "3 3 ==",TRUE
1D24   E1                     POP   HL   
1D25   E5                     PUSH   HL   
1D26   11 FF FF               LD   DE,TRUE   
1D29   B7                     OR   A   
1D2A   ED 52                  SBC   HL,DE   
1D2C   7D                     LD   A,L   
1D2D   B4                     OR   H   
1D2E   28 51                  JR   Z,expectM_0_2176S43   
1D30   CD 8E 09               CALL   printStr   
1D33   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1D40   CD 8E 09               CALL   printStr   
1D43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D52   21 FF FF               LD   HL,TRUE   
1D55   CD DC 08               CALL   prtdec   
1D58   CD 8E 09               CALL   printStr   
1D5B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D68   E1                     POP   hl   
1D69   E5                     PUSH   hl   
1D6A   CD DC 08               CALL   prtdec   
1D6D   E1                     POP   hl   
1D6E   CD 8E 09               CALL   printStr   
1D71   20 28 23 00            .CSTR   " (#"   
1D75   CD 24 09               CALL   prthex   
1D78   CD 8E 09               CALL   printStr   
1D7B   29 0D 0A 00            .CSTR   ")\r\n"   
1D7F   76                     HALT      
1D80   00                     .CSTR      
1D81                EXPECTM_0_2176S43:      
1D81   E1                     POP   HL   
1D82                          ;*Macro unroll:  test "1 2 <", TRUE
1D82   31 80 3C               LD   SP,STACK   
1D85   CD 95 09               CALL   init   
1D88   CD D0 3B               CALL   execStr   
1D8B   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1D91                          ;*Macro unroll:  expect "1 2 <",TRUE
1D91   E1                     POP   HL   
1D92   E5                     PUSH   HL   
1D93   11 FF FF               LD   DE,TRUE   
1D96   B7                     OR   A   
1D97   ED 52                  SBC   HL,DE   
1D99   7D                     LD   A,L   
1D9A   B4                     OR   H   
1D9B   28 50                  JR   Z,expectM_0_2177S43   
1D9D   CD 8E 09               CALL   printStr   
1DA0   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1DAC   CD 8E 09               CALL   printStr   
1DAF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DBE   21 FF FF               LD   HL,TRUE   
1DC1   CD DC 08               CALL   prtdec   
1DC4   CD 8E 09               CALL   printStr   
1DC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DD4   E1                     POP   hl   
1DD5   E5                     PUSH   hl   
1DD6   CD DC 08               CALL   prtdec   
1DD9   E1                     POP   hl   
1DDA   CD 8E 09               CALL   printStr   
1DDD   20 28 23 00            .CSTR   " (#"   
1DE1   CD 24 09               CALL   prthex   
1DE4   CD 8E 09               CALL   printStr   
1DE7   29 0D 0A 00            .CSTR   ")\r\n"   
1DEB   76                     HALT      
1DEC   00                     .CSTR      
1DED                EXPECTM_0_2177S43:      
1DED   E1                     POP   HL   
1DEE                          ;*Macro unroll:  test "2 1 <", FALSE
1DEE   31 80 3C               LD   SP,STACK   
1DF1   CD 95 09               CALL   init   
1DF4   CD D0 3B               CALL   execStr   
1DF7   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1DFD                          ;*Macro unroll:  expect "2 1 <",FALSE
1DFD   E1                     POP   HL   
1DFE   E5                     PUSH   HL   
1DFF   11 00 00               LD   DE,FALSE   
1E02   B7                     OR   A   
1E03   ED 52                  SBC   HL,DE   
1E05   7D                     LD   A,L   
1E06   B4                     OR   H   
1E07   28 50                  JR   Z,expectM_0_2178S43   
1E09   CD 8E 09               CALL   printStr   
1E0C   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1E18   CD 8E 09               CALL   printStr   
1E1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E2A   21 00 00               LD   HL,FALSE   
1E2D   CD DC 08               CALL   prtdec   
1E30   CD 8E 09               CALL   printStr   
1E33   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E40   E1                     POP   hl   
1E41   E5                     PUSH   hl   
1E42   CD DC 08               CALL   prtdec   
1E45   E1                     POP   hl   
1E46   CD 8E 09               CALL   printStr   
1E49   20 28 23 00            .CSTR   " (#"   
1E4D   CD 24 09               CALL   prthex   
1E50   CD 8E 09               CALL   printStr   
1E53   29 0D 0A 00            .CSTR   ")\r\n"   
1E57   76                     HALT      
1E58   00                     .CSTR      
1E59                EXPECTM_0_2178S43:      
1E59   E1                     POP   HL   
1E5A                          ;*Macro unroll:  test "2 3 <", TRUE
1E5A   31 80 3C               LD   SP,STACK   
1E5D   CD 95 09               CALL   init   
1E60   CD D0 3B               CALL   execStr   
1E63   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1E69                          ;*Macro unroll:  expect "2 3 <",TRUE
1E69   E1                     POP   HL   
1E6A   E5                     PUSH   HL   
1E6B   11 FF FF               LD   DE,TRUE   
1E6E   B7                     OR   A   
1E6F   ED 52                  SBC   HL,DE   
1E71   7D                     LD   A,L   
1E72   B4                     OR   H   
1E73   28 50                  JR   Z,expectM_0_2179S43   
1E75   CD 8E 09               CALL   printStr   
1E78   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1E84   CD 8E 09               CALL   printStr   
1E87   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E96   21 FF FF               LD   HL,TRUE   
1E99   CD DC 08               CALL   prtdec   
1E9C   CD 8E 09               CALL   printStr   
1E9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EAC   E1                     POP   hl   
1EAD   E5                     PUSH   hl   
1EAE   CD DC 08               CALL   prtdec   
1EB1   E1                     POP   hl   
1EB2   CD 8E 09               CALL   printStr   
1EB5   20 28 23 00            .CSTR   " (#"   
1EB9   CD 24 09               CALL   prthex   
1EBC   CD 8E 09               CALL   printStr   
1EBF   29 0D 0A 00            .CSTR   ")\r\n"   
1EC3   76                     HALT      
1EC4   00                     .CSTR      
1EC5                EXPECTM_0_2179S43:      
1EC5   E1                     POP   HL   
1EC6                          ;*Macro unroll:  test "3 3 <", FALSE
1EC6   31 80 3C               LD   SP,STACK   
1EC9   CD 95 09               CALL   init   
1ECC   CD D0 3B               CALL   execStr   
1ECF   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1ED5                          ;*Macro unroll:  expect "3 3 <",FALSE
1ED5   E1                     POP   HL   
1ED6   E5                     PUSH   HL   
1ED7   11 00 00               LD   DE,FALSE   
1EDA   B7                     OR   A   
1EDB   ED 52                  SBC   HL,DE   
1EDD   7D                     LD   A,L   
1EDE   B4                     OR   H   
1EDF   28 50                  JR   Z,expectM_0_2180S43   
1EE1   CD 8E 09               CALL   printStr   
1EE4   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1EF0   CD 8E 09               CALL   printStr   
1EF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F02   21 00 00               LD   HL,FALSE   
1F05   CD DC 08               CALL   prtdec   
1F08   CD 8E 09               CALL   printStr   
1F0B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F18   E1                     POP   hl   
1F19   E5                     PUSH   hl   
1F1A   CD DC 08               CALL   prtdec   
1F1D   E1                     POP   hl   
1F1E   CD 8E 09               CALL   printStr   
1F21   20 28 23 00            .CSTR   " (#"   
1F25   CD 24 09               CALL   prthex   
1F28   CD 8E 09               CALL   printStr   
1F2B   29 0D 0A 00            .CSTR   ")\r\n"   
1F2F   76                     HALT      
1F30   00                     .CSTR      
1F31                EXPECTM_0_2180S43:      
1F31   E1                     POP   HL   
1F32                          ;*Macro unroll:  test "1 2 >", FALSE
1F32   31 80 3C               LD   SP,STACK   
1F35   CD 95 09               CALL   init   
1F38   CD D0 3B               CALL   execStr   
1F3B   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1F41                          ;*Macro unroll:  expect "1 2 >",FALSE
1F41   E1                     POP   HL   
1F42   E5                     PUSH   HL   
1F43   11 00 00               LD   DE,FALSE   
1F46   B7                     OR   A   
1F47   ED 52                  SBC   HL,DE   
1F49   7D                     LD   A,L   
1F4A   B4                     OR   H   
1F4B   28 50                  JR   Z,expectM_0_2181S43   
1F4D   CD 8E 09               CALL   printStr   
1F50   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1F5C   CD 8E 09               CALL   printStr   
1F5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F6E   21 00 00               LD   HL,FALSE   
1F71   CD DC 08               CALL   prtdec   
1F74   CD 8E 09               CALL   printStr   
1F77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F84   E1                     POP   hl   
1F85   E5                     PUSH   hl   
1F86   CD DC 08               CALL   prtdec   
1F89   E1                     POP   hl   
1F8A   CD 8E 09               CALL   printStr   
1F8D   20 28 23 00            .CSTR   " (#"   
1F91   CD 24 09               CALL   prthex   
1F94   CD 8E 09               CALL   printStr   
1F97   29 0D 0A 00            .CSTR   ")\r\n"   
1F9B   76                     HALT      
1F9C   00                     .CSTR      
1F9D                EXPECTM_0_2181S43:      
1F9D   E1                     POP   HL   
1F9E                          ;*Macro unroll:  test "2 1 >", TRUE
1F9E   31 80 3C               LD   SP,STACK   
1FA1   CD 95 09               CALL   init   
1FA4   CD D0 3B               CALL   execStr   
1FA7   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1FAD                          ;*Macro unroll:  expect "2 1 >",TRUE
1FAD   E1                     POP   HL   
1FAE   E5                     PUSH   HL   
1FAF   11 FF FF               LD   DE,TRUE   
1FB2   B7                     OR   A   
1FB3   ED 52                  SBC   HL,DE   
1FB5   7D                     LD   A,L   
1FB6   B4                     OR   H   
1FB7   28 50                  JR   Z,expectM_0_2182S43   
1FB9   CD 8E 09               CALL   printStr   
1FBC   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1FC8   CD 8E 09               CALL   printStr   
1FCB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FDA   21 FF FF               LD   HL,TRUE   
1FDD   CD DC 08               CALL   prtdec   
1FE0   CD 8E 09               CALL   printStr   
1FE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FF0   E1                     POP   hl   
1FF1   E5                     PUSH   hl   
1FF2   CD DC 08               CALL   prtdec   
1FF5   E1                     POP   hl   
1FF6   CD 8E 09               CALL   printStr   
1FF9   20 28 23 00            .CSTR   " (#"   
1FFD   CD 24 09               CALL   prthex   
2000   CD 8E 09               CALL   printStr   
2003   29 0D 0A 00            .CSTR   ")\r\n"   
2007   76                     HALT      
2008   00                     .CSTR      
2009                EXPECTM_0_2182S43:      
2009   E1                     POP   HL   
200A                          ;*Macro unroll:  test "3 3 >", FALSE
200A   31 80 3C               LD   SP,STACK   
200D   CD 95 09               CALL   init   
2010   CD D0 3B               CALL   execStr   
2013   33 20 33 20 3E 00      .CSTR   "3 3 >"   
2019                          ;*Macro unroll:  expect "3 3 >",FALSE
2019   E1                     POP   HL   
201A   E5                     PUSH   HL   
201B   11 00 00               LD   DE,FALSE   
201E   B7                     OR   A   
201F   ED 52                  SBC   HL,DE   
2021   7D                     LD   A,L   
2022   B4                     OR   H   
2023   28 50                  JR   Z,expectM_0_2183S43   
2025   CD 8E 09               CALL   printStr   
2028   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2034   CD 8E 09               CALL   printStr   
2037   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2046   21 00 00               LD   HL,FALSE   
2049   CD DC 08               CALL   prtdec   
204C   CD 8E 09               CALL   printStr   
204F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
205C   E1                     POP   hl   
205D   E5                     PUSH   hl   
205E   CD DC 08               CALL   prtdec   
2061   E1                     POP   hl   
2062   CD 8E 09               CALL   printStr   
2065   20 28 23 00            .CSTR   " (#"   
2069   CD 24 09               CALL   prthex   
206C   CD 8E 09               CALL   printStr   
206F   29 0D 0A 00            .CSTR   ")\r\n"   
2073   76                     HALT      
2074   00                     .CSTR      
2075                EXPECTM_0_2183S43:      
2075   E1                     POP   HL   
2076                          ;*Macro unroll:  test "4 3 >", TRUE
2076   31 80 3C               LD   SP,STACK   
2079   CD 95 09               CALL   init   
207C   CD D0 3B               CALL   execStr   
207F   34 20 33 20 3E 00      .CSTR   "4 3 >"   
2085                          ;*Macro unroll:  expect "4 3 >",TRUE
2085   E1                     POP   HL   
2086   E5                     PUSH   HL   
2087   11 FF FF               LD   DE,TRUE   
208A   B7                     OR   A   
208B   ED 52                  SBC   HL,DE   
208D   7D                     LD   A,L   
208E   B4                     OR   H   
208F   28 50                  JR   Z,expectM_0_2184S43   
2091   CD 8E 09               CALL   printStr   
2094   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
20A0   CD 8E 09               CALL   printStr   
20A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20B2   21 FF FF               LD   HL,TRUE   
20B5   CD DC 08               CALL   prtdec   
20B8   CD 8E 09               CALL   printStr   
20BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20C8   E1                     POP   hl   
20C9   E5                     PUSH   hl   
20CA   CD DC 08               CALL   prtdec   
20CD   E1                     POP   hl   
20CE   CD 8E 09               CALL   printStr   
20D1   20 28 23 00            .CSTR   " (#"   
20D5   CD 24 09               CALL   prthex   
20D8   CD 8E 09               CALL   printStr   
20DB   29 0D 0A 00            .CSTR   ")\r\n"   
20DF   76                     HALT      
20E0   00                     .CSTR      
20E1                EXPECTM_0_2184S43:      
20E1   E1                     POP   HL   
20E2                          ;*Macro unroll:  test "2 2 <=", TRUE
20E2   31 80 3C               LD   SP,STACK   
20E5   CD 95 09               CALL   init   
20E8   CD D0 3B               CALL   execStr   
20EB   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
20F2                          ;*Macro unroll:  expect "2 2 <=",TRUE
20F2   E1                     POP   HL   
20F3   E5                     PUSH   HL   
20F4   11 FF FF               LD   DE,TRUE   
20F7   B7                     OR   A   
20F8   ED 52                  SBC   HL,DE   
20FA   7D                     LD   A,L   
20FB   B4                     OR   H   
20FC   28 51                  JR   Z,expectM_0_2185S43   
20FE   CD 8E 09               CALL   printStr   
2101   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
210E   CD 8E 09               CALL   printStr   
2111   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2120   21 FF FF               LD   HL,TRUE   
2123   CD DC 08               CALL   prtdec   
2126   CD 8E 09               CALL   printStr   
2129   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2136   E1                     POP   hl   
2137   E5                     PUSH   hl   
2138   CD DC 08               CALL   prtdec   
213B   E1                     POP   hl   
213C   CD 8E 09               CALL   printStr   
213F   20 28 23 00            .CSTR   " (#"   
2143   CD 24 09               CALL   prthex   
2146   CD 8E 09               CALL   printStr   
2149   29 0D 0A 00            .CSTR   ")\r\n"   
214D   76                     HALT      
214E   00                     .CSTR      
214F                EXPECTM_0_2185S43:      
214F   E1                     POP   HL   
2150                          ;*Macro unroll:  test "2 2 >=", TRUE
2150   31 80 3C               LD   SP,STACK   
2153   CD 95 09               CALL   init   
2156   CD D0 3B               CALL   execStr   
2159   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2160                          ;*Macro unroll:  expect "2 2 >=",TRUE
2160   E1                     POP   HL   
2161   E5                     PUSH   HL   
2162   11 FF FF               LD   DE,TRUE   
2165   B7                     OR   A   
2166   ED 52                  SBC   HL,DE   
2168   7D                     LD   A,L   
2169   B4                     OR   H   
216A   28 51                  JR   Z,expectM_0_2186S43   
216C   CD 8E 09               CALL   printStr   
216F   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
217C   CD 8E 09               CALL   printStr   
217F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
218E   21 FF FF               LD   HL,TRUE   
2191   CD DC 08               CALL   prtdec   
2194   CD 8E 09               CALL   printStr   
2197   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21A4   E1                     POP   hl   
21A5   E5                     PUSH   hl   
21A6   CD DC 08               CALL   prtdec   
21A9   E1                     POP   hl   
21AA   CD 8E 09               CALL   printStr   
21AD   20 28 23 00            .CSTR   " (#"   
21B1   CD 24 09               CALL   prthex   
21B4   CD 8E 09               CALL   printStr   
21B7   29 0D 0A 00            .CSTR   ")\r\n"   
21BB   76                     HALT      
21BC   00                     .CSTR      
21BD                EXPECTM_0_2186S43:      
21BD   E1                     POP   HL   
21BE                          ;*Macro unroll:  test "3 1 <<", 6
21BE   31 80 3C               LD   SP,STACK   
21C1   CD 95 09               CALL   init   
21C4   CD D0 3B               CALL   execStr   
21C7   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
21CE                          ;*Macro unroll:  expect "3 1 <<",6
21CE   E1                     POP   HL   
21CF   E5                     PUSH   HL   
21D0   11 06 00               LD   DE,6   
21D3   B7                     OR   A   
21D4   ED 52                  SBC   HL,DE   
21D6   7D                     LD   A,L   
21D7   B4                     OR   H   
21D8   28 51                  JR   Z,expectM_0_2187S43   
21DA   CD 8E 09               CALL   printStr   
21DD   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
21EA   CD 8E 09               CALL   printStr   
21ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21FC   21 06 00               LD   HL,6   
21FF   CD DC 08               CALL   prtdec   
2202   CD 8E 09               CALL   printStr   
2205   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2212   E1                     POP   hl   
2213   E5                     PUSH   hl   
2214   CD DC 08               CALL   prtdec   
2217   E1                     POP   hl   
2218   CD 8E 09               CALL   printStr   
221B   20 28 23 00            .CSTR   " (#"   
221F   CD 24 09               CALL   prthex   
2222   CD 8E 09               CALL   printStr   
2225   29 0D 0A 00            .CSTR   ")\r\n"   
2229   76                     HALT      
222A   00                     .CSTR      
222B                EXPECTM_0_2187S43:      
222B   E1                     POP   HL   
222C                          ;*Macro unroll:  test "10 1 >>", 5
222C   31 80 3C               LD   SP,STACK   
222F   CD 95 09               CALL   init   
2232   CD D0 3B               CALL   execStr   
2235   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
223D                          ;*Macro unroll:  expect "10 1 >>",5
223D   E1                     POP   HL   
223E   E5                     PUSH   HL   
223F   11 05 00               LD   DE,5   
2242   B7                     OR   A   
2243   ED 52                  SBC   HL,DE   
2245   7D                     LD   A,L   
2246   B4                     OR   H   
2247   28 52                  JR   Z,expectM_0_2188S43   
2249   CD 8E 09               CALL   printStr   
224C   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
225A   CD 8E 09               CALL   printStr   
225D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
226C   21 05 00               LD   HL,5   
226F   CD DC 08               CALL   prtdec   
2272   CD 8E 09               CALL   printStr   
2275   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2282   E1                     POP   hl   
2283   E5                     PUSH   hl   
2284   CD DC 08               CALL   prtdec   
2287   E1                     POP   hl   
2288   CD 8E 09               CALL   printStr   
228B   20 28 23 00            .CSTR   " (#"   
228F   CD 24 09               CALL   prthex   
2292   CD 8E 09               CALL   printStr   
2295   29 0D 0A 00            .CSTR   ")\r\n"   
2299   76                     HALT      
229A   00                     .CSTR      
229B                EXPECTM_0_2188S43:      
229B   E1                     POP   HL   
229C                          ;*Macro unroll:  test "1 x = x", 1
229C   31 80 3C               LD   SP,STACK   
229F   CD 95 09               CALL   init   
22A2   CD D0 3B               CALL   execStr   
22A5   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
22AD                          ;*Macro unroll:  expect "1 x = x",1
22AD   E1                     POP   HL   
22AE   E5                     PUSH   HL   
22AF   11 01 00               LD   DE,1   
22B2   B7                     OR   A   
22B3   ED 52                  SBC   HL,DE   
22B5   7D                     LD   A,L   
22B6   B4                     OR   H   
22B7   28 52                  JR   Z,expectM_0_2189S43   
22B9   CD 8E 09               CALL   printStr   
22BC   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
22CA   CD 8E 09               CALL   printStr   
22CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22DC   21 01 00               LD   HL,1   
22DF   CD DC 08               CALL   prtdec   
22E2   CD 8E 09               CALL   printStr   
22E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22F2   E1                     POP   hl   
22F3   E5                     PUSH   hl   
22F4   CD DC 08               CALL   prtdec   
22F7   E1                     POP   hl   
22F8   CD 8E 09               CALL   printStr   
22FB   20 28 23 00            .CSTR   " (#"   
22FF   CD 24 09               CALL   prthex   
2302   CD 8E 09               CALL   printStr   
2305   29 0D 0A 00            .CSTR   ")\r\n"   
2309   76                     HALT      
230A   00                     .CSTR      
230B                EXPECTM_0_2189S43:      
230B   E1                     POP   HL   
230C                          ;*Macro unroll:  test "1{}:", 1
230C   31 80 3C               LD   SP,STACK   
230F   CD 95 09               CALL   init   
2312   CD D0 3B               CALL   execStr   
2315   31 7B 7D 3A 00         .CSTR   "1{}:"   
231A                          ;*Macro unroll:  expect "1{}:",1
231A   E1                     POP   HL   
231B   E5                     PUSH   HL   
231C   11 01 00               LD   DE,1   
231F   B7                     OR   A   
2320   ED 52                  SBC   HL,DE   
2322   7D                     LD   A,L   
2323   B4                     OR   H   
2324   28 4F                  JR   Z,expectM_0_2190S43   
2326   CD 8E 09               CALL   printStr   
2329   43 6F 64 65 3A 20 31 7B 7D 3A 00 .CSTR   "Code: ","1{}:"   
2334   CD 8E 09               CALL   printStr   
2337   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2346   21 01 00               LD   HL,1   
2349   CD DC 08               CALL   prtdec   
234C   CD 8E 09               CALL   printStr   
234F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
235C   E1                     POP   hl   
235D   E5                     PUSH   hl   
235E   CD DC 08               CALL   prtdec   
2361   E1                     POP   hl   
2362   CD 8E 09               CALL   printStr   
2365   20 28 23 00            .CSTR   " (#"   
2369   CD 24 09               CALL   prthex   
236C   CD 8E 09               CALL   printStr   
236F   29 0D 0A 00            .CSTR   ")\r\n"   
2373   76                     HALT      
2374   00                     .CSTR      
2375                EXPECTM_0_2190S43:      
2375   E1                     POP   HL   
2376                          ;*Macro unroll:  test "{1}:", 1
2376   31 80 3C               LD   SP,STACK   
2379   CD 95 09               CALL   init   
237C   CD D0 3B               CALL   execStr   
237F   7B 31 7D 3A 00         .CSTR   "{1}:"   
2384                          ;*Macro unroll:  expect "{1}:",1
2384   E1                     POP   HL   
2385   E5                     PUSH   HL   
2386   11 01 00               LD   DE,1   
2389   B7                     OR   A   
238A   ED 52                  SBC   HL,DE   
238C   7D                     LD   A,L   
238D   B4                     OR   H   
238E   28 4F                  JR   Z,expectM_0_2191S43   
2390   CD 8E 09               CALL   printStr   
2393   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
239E   CD 8E 09               CALL   printStr   
23A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23B0   21 01 00               LD   HL,1   
23B3   CD DC 08               CALL   prtdec   
23B6   CD 8E 09               CALL   printStr   
23B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23C6   E1                     POP   hl   
23C7   E5                     PUSH   hl   
23C8   CD DC 08               CALL   prtdec   
23CB   E1                     POP   hl   
23CC   CD 8E 09               CALL   printStr   
23CF   20 28 23 00            .CSTR   " (#"   
23D3   CD 24 09               CALL   prthex   
23D6   CD 8E 09               CALL   printStr   
23D9   29 0D 0A 00            .CSTR   ")\r\n"   
23DD   76                     HALT      
23DE   00                     .CSTR      
23DF                EXPECTM_0_2191S43:      
23DF   E1                     POP   HL   
23E0                          ;*Macro unroll:  test "{{1}:}:", 1
23E0   31 80 3C               LD   SP,STACK   
23E3   CD 95 09               CALL   init   
23E6   CD D0 3B               CALL   execStr   
23E9   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
23F1                          ;*Macro unroll:  expect "{{1}:}:",1
23F1   E1                     POP   HL   
23F2   E5                     PUSH   HL   
23F3   11 01 00               LD   DE,1   
23F6   B7                     OR   A   
23F7   ED 52                  SBC   HL,DE   
23F9   7D                     LD   A,L   
23FA   B4                     OR   H   
23FB   28 52                  JR   Z,expectM_0_2192S43   
23FD   CD 8E 09               CALL   printStr   
2400   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
240E   CD 8E 09               CALL   printStr   
2411   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2420   21 01 00               LD   HL,1   
2423   CD DC 08               CALL   prtdec   
2426   CD 8E 09               CALL   printStr   
2429   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2436   E1                     POP   hl   
2437   E5                     PUSH   hl   
2438   CD DC 08               CALL   prtdec   
243B   E1                     POP   hl   
243C   CD 8E 09               CALL   printStr   
243F   20 28 23 00            .CSTR   " (#"   
2443   CD 24 09               CALL   prthex   
2446   CD 8E 09               CALL   printStr   
2449   29 0D 0A 00            .CSTR   ")\r\n"   
244D   76                     HALT      
244E   00                     .CSTR      
244F                EXPECTM_0_2192S43:      
244F   E1                     POP   HL   
2450                          ;*Macro unroll:  test "{{{1}:}:}:", 1
2450   31 80 3C               LD   SP,STACK   
2453   CD 95 09               CALL   init   
2456   CD D0 3B               CALL   execStr   
2459   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
2464                          ;*Macro unroll:  expect "{{{1}:}:}:",1
2464   E1                     POP   HL   
2465   E5                     PUSH   HL   
2466   11 01 00               LD   DE,1   
2469   B7                     OR   A   
246A   ED 52                  SBC   HL,DE   
246C   7D                     LD   A,L   
246D   B4                     OR   H   
246E   28 55                  JR   Z,expectM_0_2193S43   
2470   CD 8E 09               CALL   printStr   
2473   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
2484   CD 8E 09               CALL   printStr   
2487   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2496   21 01 00               LD   HL,1   
2499   CD DC 08               CALL   prtdec   
249C   CD 8E 09               CALL   printStr   
249F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24AC   E1                     POP   hl   
24AD   E5                     PUSH   hl   
24AE   CD DC 08               CALL   prtdec   
24B1   E1                     POP   hl   
24B2   CD 8E 09               CALL   printStr   
24B5   20 28 23 00            .CSTR   " (#"   
24B9   CD 24 09               CALL   prthex   
24BC   CD 8E 09               CALL   printStr   
24BF   29 0D 0A 00            .CSTR   ")\r\n"   
24C3   76                     HALT      
24C4   00                     .CSTR      
24C5                EXPECTM_0_2193S43:      
24C5   E1                     POP   HL   
24C6                          ;*Macro unroll:  test "5 /F {10} ?", 5
24C6   31 80 3C               LD   SP,STACK   
24C9   CD 95 09               CALL   init   
24CC   CD D0 3B               CALL   execStr   
24CF   35 20 2F 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 /F {10} ?"   
24DB                          ;*Macro unroll:  expect "5 /F {10} ?",5
24DB   E1                     POP   HL   
24DC   E5                     PUSH   HL   
24DD   11 05 00               LD   DE,5   
24E0   B7                     OR   A   
24E1   ED 52                  SBC   HL,DE   
24E3   7D                     LD   A,L   
24E4   B4                     OR   H   
24E5   28 56                  JR   Z,expectM_0_2194S43   
24E7   CD 8E 09               CALL   printStr   
24EA   43 6F 64 65 3A 20 35 20 2F 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /F {10} ?"   
24FC   CD 8E 09               CALL   printStr   
24FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
250E   21 05 00               LD   HL,5   
2511   CD DC 08               CALL   prtdec   
2514   CD 8E 09               CALL   printStr   
2517   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2524   E1                     POP   hl   
2525   E5                     PUSH   hl   
2526   CD DC 08               CALL   prtdec   
2529   E1                     POP   hl   
252A   CD 8E 09               CALL   printStr   
252D   20 28 23 00            .CSTR   " (#"   
2531   CD 24 09               CALL   prthex   
2534   CD 8E 09               CALL   printStr   
2537   29 0D 0A 00            .CSTR   ")\r\n"   
253B   76                     HALT      
253C   00                     .CSTR      
253D                EXPECTM_0_2194S43:      
253D   E1                     POP   HL   
253E                          ;*Macro unroll:  test "5 /T {10} ? +", 15
253E   31 80 3C               LD   SP,STACK   
2541   CD 95 09               CALL   init   
2544   CD D0 3B               CALL   execStr   
2547   35 20 2F 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /T {10} ? +"   
2555                          ;*Macro unroll:  expect "5 /T {10} ? +",15
2555   E1                     POP   HL   
2556   E5                     PUSH   HL   
2557   11 0F 00               LD   DE,15   
255A   B7                     OR   A   
255B   ED 52                  SBC   HL,DE   
255D   7D                     LD   A,L   
255E   B4                     OR   H   
255F   28 58                  JR   Z,expectM_0_2195S43   
2561   CD 8E 09               CALL   printStr   
2564   43 6F 64 65 3A 20 35 20 2F 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /T {10} ? +"   
2578   CD 8E 09               CALL   printStr   
257B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
258A   21 0F 00               LD   HL,15   
258D   CD DC 08               CALL   prtdec   
2590   CD 8E 09               CALL   printStr   
2593   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25A0   E1                     POP   hl   
25A1   E5                     PUSH   hl   
25A2   CD DC 08               CALL   prtdec   
25A5   E1                     POP   hl   
25A6   CD 8E 09               CALL   printStr   
25A9   20 28 23 00            .CSTR   " (#"   
25AD   CD 24 09               CALL   prthex   
25B0   CD 8E 09               CALL   printStr   
25B3   29 0D 0A 00            .CSTR   ")\r\n"   
25B7   76                     HALT      
25B8   00                     .CSTR      
25B9                EXPECTM_0_2195S43:      
25B9   E1                     POP   HL   
25BA                          ;*Macro unroll:  test "1 /F {10} {20} ?? +", 21
25BA   31 80 3C               LD   SP,STACK   
25BD   CD 95 09               CALL   init   
25C0   CD D0 3B               CALL   execStr   
25C3   31 20 2F 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /F {10} {20} ?? +"   
25D7                          ;*Macro unroll:  expect "1 /F {10} {20} ?? +",21
25D7   E1                     POP   HL   
25D8   E5                     PUSH   HL   
25D9   11 15 00               LD   DE,21   
25DC   B7                     OR   A   
25DD   ED 52                  SBC   HL,DE   
25DF   7D                     LD   A,L   
25E0   B4                     OR   H   
25E1   28 5E                  JR   Z,expectM_0_2196S43   
25E3   CD 8E 09               CALL   printStr   
25E6   43 6F 64 65 3A 20 31 20 2F 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /F {10} {20} ?? +"   
2600   CD 8E 09               CALL   printStr   
2603   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2612   21 15 00               LD   HL,21   
2615   CD DC 08               CALL   prtdec   
2618   CD 8E 09               CALL   printStr   
261B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2628   E1                     POP   hl   
2629   E5                     PUSH   hl   
262A   CD DC 08               CALL   prtdec   
262D   E1                     POP   hl   
262E   CD 8E 09               CALL   printStr   
2631   20 28 23 00            .CSTR   " (#"   
2635   CD 24 09               CALL   prthex   
2638   CD 8E 09               CALL   printStr   
263B   29 0D 0A 00            .CSTR   ")\r\n"   
263F   76                     HALT      
2640   00                     .CSTR      
2641                EXPECTM_0_2196S43:      
2641   E1                     POP   HL   
2642                          ;*Macro unroll:  test "1 /T {10} {20} ?? +", 11
2642   31 80 3C               LD   SP,STACK   
2645   CD 95 09               CALL   init   
2648   CD D0 3B               CALL   execStr   
264B   31 20 2F 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /T {10} {20} ?? +"   
265F                          ;*Macro unroll:  expect "1 /T {10} {20} ?? +",11
265F   E1                     POP   HL   
2660   E5                     PUSH   HL   
2661   11 0B 00               LD   DE,11   
2664   B7                     OR   A   
2665   ED 52                  SBC   HL,DE   
2667   7D                     LD   A,L   
2668   B4                     OR   H   
2669   28 5E                  JR   Z,expectM_0_2197S43   
266B   CD 8E 09               CALL   printStr   
266E   43 6F 64 65 3A 20 31 20 2F 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /T {10} {20} ?? +"   
2688   CD 8E 09               CALL   printStr   
268B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
269A   21 0B 00               LD   HL,11   
269D   CD DC 08               CALL   prtdec   
26A0   CD 8E 09               CALL   printStr   
26A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26B0   E1                     POP   hl   
26B1   E5                     PUSH   hl   
26B2   CD DC 08               CALL   prtdec   
26B5   E1                     POP   hl   
26B6   CD 8E 09               CALL   printStr   
26B9   20 28 23 00            .CSTR   " (#"   
26BD   CD 24 09               CALL   prthex   
26C0   CD 8E 09               CALL   printStr   
26C3   29 0D 0A 00            .CSTR   ")\r\n"   
26C7   76                     HALT      
26C8   00                     .CSTR      
26C9                EXPECTM_0_2197S43:      
26C9   E1                     POP   HL   
26CA                          ;*Macro unroll:  test "() -2%", $0000
26CA   31 80 3C               LD   SP,STACK   
26CD   CD 95 09               CALL   init   
26D0   CD D0 3B               CALL   execStr   
26D3   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
26DA                          ;*Macro unroll:  expect "() -2%",$0000
26DA   E1                     POP   HL   
26DB   E5                     PUSH   HL   
26DC   11 00 00               LD   DE,$0000   
26DF   B7                     OR   A   
26E0   ED 52                  SBC   HL,DE   
26E2   7D                     LD   A,L   
26E3   B4                     OR   H   
26E4   28 51                  JR   Z,expectM_0_2198S43   
26E6   CD 8E 09               CALL   printStr   
26E9   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
26F6   CD 8E 09               CALL   printStr   
26F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2708   21 00 00               LD   HL,$0000   
270B   CD DC 08               CALL   prtdec   
270E   CD 8E 09               CALL   printStr   
2711   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
271E   E1                     POP   hl   
271F   E5                     PUSH   hl   
2720   CD DC 08               CALL   prtdec   
2723   E1                     POP   hl   
2724   CD 8E 09               CALL   printStr   
2727   20 28 23 00            .CSTR   " (#"   
272B   CD 24 09               CALL   prthex   
272E   CD 8E 09               CALL   printStr   
2731   29 0D 0A 00            .CSTR   ")\r\n"   
2735   76                     HALT      
2736   00                     .CSTR      
2737                EXPECTM_0_2198S43:      
2737   E1                     POP   HL   
2738                          ;*Macro unroll:  test "(a) -1%", $0001
2738   31 80 3C               LD   SP,STACK   
273B   CD 95 09               CALL   init   
273E   CD D0 3B               CALL   execStr   
2741   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
2749                          ;*Macro unroll:  expect "(a) -1%",$0001
2749   E1                     POP   HL   
274A   E5                     PUSH   HL   
274B   11 01 00               LD   DE,$0001   
274E   B7                     OR   A   
274F   ED 52                  SBC   HL,DE   
2751   7D                     LD   A,L   
2752   B4                     OR   H   
2753   28 52                  JR   Z,expectM_0_2199S43   
2755   CD 8E 09               CALL   printStr   
2758   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
2766   CD 8E 09               CALL   printStr   
2769   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2778   21 01 00               LD   HL,$0001   
277B   CD DC 08               CALL   prtdec   
277E   CD 8E 09               CALL   printStr   
2781   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
278E   E1                     POP   hl   
278F   E5                     PUSH   hl   
2790   CD DC 08               CALL   prtdec   
2793   E1                     POP   hl   
2794   CD 8E 09               CALL   printStr   
2797   20 28 23 00            .CSTR   " (#"   
279B   CD 24 09               CALL   prthex   
279E   CD 8E 09               CALL   printStr   
27A1   29 0D 0A 00            .CSTR   ")\r\n"   
27A5   76                     HALT      
27A6   00                     .CSTR      
27A7                EXPECTM_0_2199S43:      
27A7   E1                     POP   HL   
27A8                          ;*Macro unroll:  test "(a:) -1%", $0001
27A8   31 80 3C               LD   SP,STACK   
27AB   CD 95 09               CALL   init   
27AE   CD D0 3B               CALL   execStr   
27B1   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
27BA                          ;*Macro unroll:  expect "(a:) -1%",$0001
27BA   E1                     POP   HL   
27BB   E5                     PUSH   HL   
27BC   11 01 00               LD   DE,$0001   
27BF   B7                     OR   A   
27C0   ED 52                  SBC   HL,DE   
27C2   7D                     LD   A,L   
27C3   B4                     OR   H   
27C4   28 53                  JR   Z,expectM_0_2200S43   
27C6   CD 8E 09               CALL   printStr   
27C9   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
27D8   CD 8E 09               CALL   printStr   
27DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27EA   21 01 00               LD   HL,$0001   
27ED   CD DC 08               CALL   prtdec   
27F0   CD 8E 09               CALL   printStr   
27F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2800   E1                     POP   hl   
2801   E5                     PUSH   hl   
2802   CD DC 08               CALL   prtdec   
2805   E1                     POP   hl   
2806   CD 8E 09               CALL   printStr   
2809   20 28 23 00            .CSTR   " (#"   
280D   CD 24 09               CALL   prthex   
2810   CD 8E 09               CALL   printStr   
2813   29 0D 0A 00            .CSTR   ")\r\n"   
2817   76                     HALT      
2818   00                     .CSTR      
2819                EXPECTM_0_2200S43:      
2819   E1                     POP   HL   
281A                          ;*Macro unroll:  test "(a:b) -1%", $0102
281A   31 80 3C               LD   SP,STACK   
281D   CD 95 09               CALL   init   
2820   CD D0 3B               CALL   execStr   
2823   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
282D                          ;*Macro unroll:  expect "(a:b) -1%",$0102
282D   E1                     POP   HL   
282E   E5                     PUSH   HL   
282F   11 02 01               LD   DE,$0102   
2832   B7                     OR   A   
2833   ED 52                  SBC   HL,DE   
2835   7D                     LD   A,L   
2836   B4                     OR   H   
2837   28 54                  JR   Z,expectM_0_2201S43   
2839   CD 8E 09               CALL   printStr   
283C   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
284C   CD 8E 09               CALL   printStr   
284F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
285E   21 02 01               LD   HL,$0102   
2861   CD DC 08               CALL   prtdec   
2864   CD 8E 09               CALL   printStr   
2867   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2874   E1                     POP   hl   
2875   E5                     PUSH   hl   
2876   CD DC 08               CALL   prtdec   
2879   E1                     POP   hl   
287A   CD 8E 09               CALL   printStr   
287D   20 28 23 00            .CSTR   " (#"   
2881   CD 24 09               CALL   prthex   
2884   CD 8E 09               CALL   printStr   
2887   29 0D 0A 00            .CSTR   ")\r\n"   
288B   76                     HALT      
288C   00                     .CSTR      
288D                EXPECTM_0_2201S43:      
288D   E1                     POP   HL   
288E                          ;*Macro unroll:  test "(:b) -1%", $0101
288E   31 80 3C               LD   SP,STACK   
2891   CD 95 09               CALL   init   
2894   CD D0 3B               CALL   execStr   
2897   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
28A0                          ;*Macro unroll:  expect "(:b) -1%",$0101
28A0   E1                     POP   HL   
28A1   E5                     PUSH   HL   
28A2   11 01 01               LD   DE,$0101   
28A5   B7                     OR   A   
28A6   ED 52                  SBC   HL,DE   
28A8   7D                     LD   A,L   
28A9   B4                     OR   H   
28AA   28 53                  JR   Z,expectM_0_2202S43   
28AC   CD 8E 09               CALL   printStr   
28AF   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
28BE   CD 8E 09               CALL   printStr   
28C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28D0   21 01 01               LD   HL,$0101   
28D3   CD DC 08               CALL   prtdec   
28D6   CD 8E 09               CALL   printStr   
28D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28E6   E1                     POP   hl   
28E7   E5                     PUSH   hl   
28E8   CD DC 08               CALL   prtdec   
28EB   E1                     POP   hl   
28EC   CD 8E 09               CALL   printStr   
28EF   20 28 23 00            .CSTR   " (#"   
28F3   CD 24 09               CALL   prthex   
28F6   CD 8E 09               CALL   printStr   
28F9   29 0D 0A 00            .CSTR   ")\r\n"   
28FD   76                     HALT      
28FE   00                     .CSTR      
28FF                EXPECTM_0_2202S43:      
28FF   E1                     POP   HL   
2900                          ;*Macro unroll:  test "() {2} /f:", 2
2900   31 80 3C               LD   SP,STACK   
2903   CD 95 09               CALL   init   
2906   CD D0 3B               CALL   execStr   
2909   28 29 20 7B 32 7D 20 2F 66 3A 00 .CSTR   "() {2} /f:"   
2914                          ;*Macro unroll:  expect "() {2} /f:",2
2914   E1                     POP   HL   
2915   E5                     PUSH   HL   
2916   11 02 00               LD   DE,2   
2919   B7                     OR   A   
291A   ED 52                  SBC   HL,DE   
291C   7D                     LD   A,L   
291D   B4                     OR   H   
291E   28 55                  JR   Z,expectM_0_2203S43   
2920   CD 8E 09               CALL   printStr   
2923   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 2F 66 3A 00 .CSTR   "Code: ","() {2} /f:"   
2934   CD 8E 09               CALL   printStr   
2937   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2946   21 02 00               LD   HL,2   
2949   CD DC 08               CALL   prtdec   
294C   CD 8E 09               CALL   printStr   
294F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
295C   E1                     POP   hl   
295D   E5                     PUSH   hl   
295E   CD DC 08               CALL   prtdec   
2961   E1                     POP   hl   
2962   CD 8E 09               CALL   printStr   
2965   20 28 23 00            .CSTR   " (#"   
2969   CD 24 09               CALL   prthex   
296C   CD 8E 09               CALL   printStr   
296F   29 0D 0A 00            .CSTR   ")\r\n"   
2973   76                     HALT      
2974   00                     .CSTR      
2975                EXPECTM_0_2203S43:      
2975   E1                     POP   HL   
2976                          ;*Macro unroll:  test "(a) {2} /f:", 2
2976   31 80 3C               LD   SP,STACK   
2979   CD 95 09               CALL   init   
297C   CD D0 3B               CALL   execStr   
297F   28 61 29 20 7B 32 7D 20 2F 66 3A 00 .CSTR   "(a) {2} /f:"   
298B                          ;*Macro unroll:  expect "(a) {2} /f:",2
298B   E1                     POP   HL   
298C   E5                     PUSH   HL   
298D   11 02 00               LD   DE,2   
2990   B7                     OR   A   
2991   ED 52                  SBC   HL,DE   
2993   7D                     LD   A,L   
2994   B4                     OR   H   
2995   28 56                  JR   Z,expectM_0_2204S43   
2997   CD 8E 09               CALL   printStr   
299A   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 2F 66 3A 00 .CSTR   "Code: ","(a) {2} /f:"   
29AC   CD 8E 09               CALL   printStr   
29AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29BE   21 02 00               LD   HL,2   
29C1   CD DC 08               CALL   prtdec   
29C4   CD 8E 09               CALL   printStr   
29C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29D4   E1                     POP   hl   
29D5   E5                     PUSH   hl   
29D6   CD DC 08               CALL   prtdec   
29D9   E1                     POP   hl   
29DA   CD 8E 09               CALL   printStr   
29DD   20 28 23 00            .CSTR   " (#"   
29E1   CD 24 09               CALL   prthex   
29E4   CD 8E 09               CALL   printStr   
29E7   29 0D 0A 00            .CSTR   ")\r\n"   
29EB   76                     HALT      
29EC   00                     .CSTR      
29ED                EXPECTM_0_2204S43:      
29ED   E1                     POP   HL   
29EE                          ;*Macro unroll:  test "5 (a) {$a} /f:", 5
29EE   31 80 3C               LD   SP,STACK   
29F1   CD 95 09               CALL   init   
29F4   CD D0 3B               CALL   execStr   
29F7   35 20 28 61 29 20 7B 24 61 7D 20 2F 66 3A 00 .CSTR   "5 (a) {$a} /f:"   
2A06                          ;*Macro unroll:  expect "5 (a) {$a} /f:",5
2A06   E1                     POP   HL   
2A07   E5                     PUSH   HL   
2A08   11 05 00               LD   DE,5   
2A0B   B7                     OR   A   
2A0C   ED 52                  SBC   HL,DE   
2A0E   7D                     LD   A,L   
2A0F   B4                     OR   H   
2A10   28 59                  JR   Z,expectM_0_2205S43   
2A12   CD 8E 09               CALL   printStr   
2A15   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 2F 66 3A 00 .CSTR   "Code: ","5 (a) {$a} /f:"   
2A2A   CD 8E 09               CALL   printStr   
2A2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A3C   21 05 00               LD   HL,5   
2A3F   CD DC 08               CALL   prtdec   
2A42   CD 8E 09               CALL   printStr   
2A45   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A52   E1                     POP   hl   
2A53   E5                     PUSH   hl   
2A54   CD DC 08               CALL   prtdec   
2A57   E1                     POP   hl   
2A58   CD 8E 09               CALL   printStr   
2A5B   20 28 23 00            .CSTR   " (#"   
2A5F   CD 24 09               CALL   prthex   
2A62   CD 8E 09               CALL   printStr   
2A65   29 0D 0A 00            .CSTR   ")\r\n"   
2A69   76                     HALT      
2A6A   00                     .CSTR      
2A6B                EXPECTM_0_2205S43:      
2A6B   E1                     POP   HL   
2A6C                          ;*Macro unroll:  test "5 (a:b) {$a} /f:", 5
2A6C   31 80 3C               LD   SP,STACK   
2A6F   CD 95 09               CALL   init   
2A72   CD D0 3B               CALL   execStr   
2A75   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 2F 66 3A 00 .CSTR   "5 (a:b) {$a} /f:"   
2A86                          ;*Macro unroll:  expect "5 (a:b) {$a} /f:",5
2A86   E1                     POP   HL   
2A87   E5                     PUSH   HL   
2A88   11 05 00               LD   DE,5   
2A8B   B7                     OR   A   
2A8C   ED 52                  SBC   HL,DE   
2A8E   7D                     LD   A,L   
2A8F   B4                     OR   H   
2A90   28 5B                  JR   Z,expectM_0_2206S43   
2A92   CD 8E 09               CALL   printStr   
2A95   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 2F 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} /f:"   
2AAC   CD 8E 09               CALL   printStr   
2AAF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ABE   21 05 00               LD   HL,5   
2AC1   CD DC 08               CALL   prtdec   
2AC4   CD 8E 09               CALL   printStr   
2AC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AD4   E1                     POP   hl   
2AD5   E5                     PUSH   hl   
2AD6   CD DC 08               CALL   prtdec   
2AD9   E1                     POP   hl   
2ADA   CD 8E 09               CALL   printStr   
2ADD   20 28 23 00            .CSTR   " (#"   
2AE1   CD 24 09               CALL   prthex   
2AE4   CD 8E 09               CALL   printStr   
2AE7   29 0D 0A 00            .CSTR   ")\r\n"   
2AEB   76                     HALT      
2AEC   00                     .CSTR      
2AED                EXPECTM_0_2206S43:      
2AED   E1                     POP   HL   
2AEE                          ;*Macro unroll:  test "(a) {{2}:} /f:", 2
2AEE   31 80 3C               LD   SP,STACK   
2AF1   CD 95 09               CALL   init   
2AF4   CD D0 3B               CALL   execStr   
2AF7   28 61 29 20 7B 7B 32 7D 3A 7D 20 2F 66 3A 00 .CSTR   "(a) {{2}:} /f:"   
2B06                          ;*Macro unroll:  expect "(a) {{2}:} /f:",2
2B06   E1                     POP   HL   
2B07   E5                     PUSH   HL   
2B08   11 02 00               LD   DE,2   
2B0B   B7                     OR   A   
2B0C   ED 52                  SBC   HL,DE   
2B0E   7D                     LD   A,L   
2B0F   B4                     OR   H   
2B10   28 59                  JR   Z,expectM_0_2207S43   
2B12   CD 8E 09               CALL   printStr   
2B15   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 2F 66 3A 00 .CSTR   "Code: ","(a) {{2}:} /f:"   
2B2A   CD 8E 09               CALL   printStr   
2B2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B3C   21 02 00               LD   HL,2   
2B3F   CD DC 08               CALL   prtdec   
2B42   CD 8E 09               CALL   printStr   
2B45   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B52   E1                     POP   hl   
2B53   E5                     PUSH   hl   
2B54   CD DC 08               CALL   prtdec   
2B57   E1                     POP   hl   
2B58   CD 8E 09               CALL   printStr   
2B5B   20 28 23 00            .CSTR   " (#"   
2B5F   CD 24 09               CALL   prthex   
2B62   CD 8E 09               CALL   printStr   
2B65   29 0D 0A 00            .CSTR   ")\r\n"   
2B69   76                     HALT      
2B6A   00                     .CSTR      
2B6B                EXPECTM_0_2207S43:      
2B6B   E1                     POP   HL   
2B6C                          ;*Macro unroll:  test "1 5 (a) {{$a}:} /f:", 5
2B6C   31 80 3C               LD   SP,STACK   
2B6F   CD 95 09               CALL   init   
2B72   CD D0 3B               CALL   execStr   
2B75   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 2F 66 3A 00 .CSTR   "1 5 (a) {{$a}:} /f:"   
2B89                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} /f:",5
2B89   E1                     POP   HL   
2B8A   E5                     PUSH   HL   
2B8B   11 05 00               LD   DE,5   
2B8E   B7                     OR   A   
2B8F   ED 52                  SBC   HL,DE   
2B91   7D                     LD   A,L   
2B92   B4                     OR   H   
2B93   28 5E                  JR   Z,expectM_0_2208S43   
2B95   CD 8E 09               CALL   printStr   
2B98   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 2F 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} /f:"   
2BB2   CD 8E 09               CALL   printStr   
2BB5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BC4   21 05 00               LD   HL,5   
2BC7   CD DC 08               CALL   prtdec   
2BCA   CD 8E 09               CALL   printStr   
2BCD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BDA   E1                     POP   hl   
2BDB   E5                     PUSH   hl   
2BDC   CD DC 08               CALL   prtdec   
2BDF   E1                     POP   hl   
2BE0   CD 8E 09               CALL   printStr   
2BE3   20 28 23 00            .CSTR   " (#"   
2BE7   CD 24 09               CALL   prthex   
2BEA   CD 8E 09               CALL   printStr   
2BED   29 0D 0A 00            .CSTR   ")\r\n"   
2BF1   76                     HALT      
2BF2   00                     .CSTR      
2BF3                EXPECTM_0_2208S43:      
2BF3   E1                     POP   HL   
2BF4                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} /f:", 1
2BF4   31 80 3C               LD   SP,STACK   
2BF7   CD 95 09               CALL   init   
2BFA   CD D0 3B               CALL   execStr   
2BFD   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 2F 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} /f:"   
2C12                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} /f:",1
2C12   E1                     POP   HL   
2C13   E5                     PUSH   HL   
2C14   11 01 00               LD   DE,1   
2C17   B7                     OR   A   
2C18   ED 52                  SBC   HL,DE   
2C1A   7D                     LD   A,L   
2C1B   B4                     OR   H   
2C1C   28 5F                  JR   Z,expectM_0_2209S43   
2C1E   CD 8E 09               CALL   printStr   
2C21   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 2F 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} /f:"   
2C3C   CD 8E 09               CALL   printStr   
2C3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C4E   21 01 00               LD   HL,1   
2C51   CD DC 08               CALL   prtdec   
2C54   CD 8E 09               CALL   printStr   
2C57   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C64   E1                     POP   hl   
2C65   E5                     PUSH   hl   
2C66   CD DC 08               CALL   prtdec   
2C69   E1                     POP   hl   
2C6A   CD 8E 09               CALL   printStr   
2C6D   20 28 23 00            .CSTR   " (#"   
2C71   CD 24 09               CALL   prthex   
2C74   CD 8E 09               CALL   printStr   
2C77   29 0D 0A 00            .CSTR   ")\r\n"   
2C7B   76                     HALT      
2C7C   00                     .CSTR      
2C7D                EXPECTM_0_2209S43:      
2C7D   E1                     POP   HL   
2C7E                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} /f:", 7
2C7E   31 80 3C               LD   SP,STACK   
2C81   CD 95 09               CALL   init   
2C84   CD D0 3B               CALL   execStr   
2C87   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 2F 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} /f:"   
2C9F                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} /f:",7
2C9F   E1                     POP   HL   
2CA0   E5                     PUSH   HL   
2CA1   11 07 00               LD   DE,7   
2CA4   B7                     OR   A   
2CA5   ED 52                  SBC   HL,DE   
2CA7   7D                     LD   A,L   
2CA8   B4                     OR   H   
2CA9   28 62                  JR   Z,expectM_0_2210S43   
2CAB   CD 8E 09               CALL   printStr   
2CAE   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 2F 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} /f:"   
2CCC   CD 8E 09               CALL   printStr   
2CCF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CDE   21 07 00               LD   HL,7   
2CE1   CD DC 08               CALL   prtdec   
2CE4   CD 8E 09               CALL   printStr   
2CE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CF4   E1                     POP   hl   
2CF5   E5                     PUSH   hl   
2CF6   CD DC 08               CALL   prtdec   
2CF9   E1                     POP   hl   
2CFA   CD 8E 09               CALL   printStr   
2CFD   20 28 23 00            .CSTR   " (#"   
2D01   CD 24 09               CALL   prthex   
2D04   CD 8E 09               CALL   printStr   
2D07   29 0D 0A 00            .CSTR   ")\r\n"   
2D0B   76                     HALT      
2D0C   00                     .CSTR      
2D0D                EXPECTM_0_2210S43:      
2D0D   E1                     POP   HL   
2D0E                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} /f:", 6
2D0E   31 80 3C               LD   SP,STACK   
2D11   CD 95 09               CALL   init   
2D14   CD D0 3B               CALL   execStr   
2D17   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 2F 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} /f:"   
2D31                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} /f:",6
2D31   E1                     POP   HL   
2D32   E5                     PUSH   HL   
2D33   11 06 00               LD   DE,6   
2D36   B7                     OR   A   
2D37   ED 52                  SBC   HL,DE   
2D39   7D                     LD   A,L   
2D3A   B4                     OR   H   
2D3B   28 64                  JR   Z,expectM_0_2211S43   
2D3D   CD 8E 09               CALL   printStr   
2D40   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 2F 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} /f:"   
2D60   CD 8E 09               CALL   printStr   
2D63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D72   21 06 00               LD   HL,6   
2D75   CD DC 08               CALL   prtdec   
2D78   CD 8E 09               CALL   printStr   
2D7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D88   E1                     POP   hl   
2D89   E5                     PUSH   hl   
2D8A   CD DC 08               CALL   prtdec   
2D8D   E1                     POP   hl   
2D8E   CD 8E 09               CALL   printStr   
2D91   20 28 23 00            .CSTR   " (#"   
2D95   CD 24 09               CALL   prthex   
2D98   CD 8E 09               CALL   printStr   
2D9B   29 0D 0A 00            .CSTR   ")\r\n"   
2D9F   76                     HALT      
2DA0   00                     .CSTR      
2DA1                EXPECTM_0_2211S43:      
2DA1   E1                     POP   HL   
2DA2                          ;*Macro unroll:  test "(a) {2} /f x= 1 x:", 2
2DA2   31 80 3C               LD   SP,STACK   
2DA5   CD 95 09               CALL   init   
2DA8   CD D0 3B               CALL   execStr   
2DAB   28 61 29 20 7B 32 7D 20 2F 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} /f x= 1 x:"   
2DBE                          ;*Macro unroll:  expect "(a) {2} /f x= 1 x:",2
2DBE   E1                     POP   HL   
2DBF   E5                     PUSH   HL   
2DC0   11 02 00               LD   DE,2   
2DC3   B7                     OR   A   
2DC4   ED 52                  SBC   HL,DE   
2DC6   7D                     LD   A,L   
2DC7   B4                     OR   H   
2DC8   28 5D                  JR   Z,expectM_0_2212S43   
2DCA   CD 8E 09               CALL   printStr   
2DCD   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 2F 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} /f x= 1 x:"   
2DE6   CD 8E 09               CALL   printStr   
2DE9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DF8   21 02 00               LD   HL,2   
2DFB   CD DC 08               CALL   prtdec   
2DFE   CD 8E 09               CALL   printStr   
2E01   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E0E   E1                     POP   hl   
2E0F   E5                     PUSH   hl   
2E10   CD DC 08               CALL   prtdec   
2E13   E1                     POP   hl   
2E14   CD 8E 09               CALL   printStr   
2E17   20 28 23 00            .CSTR   " (#"   
2E1B   CD 24 09               CALL   prthex   
2E1E   CD 8E 09               CALL   printStr   
2E21   29 0D 0A 00            .CSTR   ")\r\n"   
2E25   76                     HALT      
2E26   00                     .CSTR      
2E27                EXPECTM_0_2212S43:      
2E27   E1                     POP   HL   
2E28                          ;*Macro unroll:  test "(a) {$a} /f x= 0 1 x:", 1
2E28   31 80 3C               LD   SP,STACK   
2E2B   CD 95 09               CALL   init   
2E2E   CD D0 3B               CALL   execStr   
2E31   28 61 29 20 7B 24 61 7D 20 2F 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} /f x= 0 1 x:"   
2E47                          ;*Macro unroll:  expect "(a) {$a} /f x= 0 1 x:",1
2E47   E1                     POP   HL   
2E48   E5                     PUSH   HL   
2E49   11 01 00               LD   DE,1   
2E4C   B7                     OR   A   
2E4D   ED 52                  SBC   HL,DE   
2E4F   7D                     LD   A,L   
2E50   B4                     OR   H   
2E51   28 60                  JR   Z,expectM_0_2213S43   
2E53   CD 8E 09               CALL   printStr   
2E56   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 2F 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} /f x= 0 1 x:"   
2E72   CD 8E 09               CALL   printStr   
2E75   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E84   21 01 00               LD   HL,1   
2E87   CD DC 08               CALL   prtdec   
2E8A   CD 8E 09               CALL   printStr   
2E8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E9A   E1                     POP   hl   
2E9B   E5                     PUSH   hl   
2E9C   CD DC 08               CALL   prtdec   
2E9F   E1                     POP   hl   
2EA0   CD 8E 09               CALL   printStr   
2EA3   20 28 23 00            .CSTR   " (#"   
2EA7   CD 24 09               CALL   prthex   
2EAA   CD 8E 09               CALL   printStr   
2EAD   29 0D 0A 00            .CSTR   ")\r\n"   
2EB1   76                     HALT      
2EB2   00                     .CSTR      
2EB3                EXPECTM_0_2213S43:      
2EB3   E1                     POP   HL   
2EB4                          ;*Macro unroll:  test "(ab) {$b} /f x= 1 2 x:", 2
2EB4   31 80 3C               LD   SP,STACK   
2EB7   CD 95 09               CALL   init   
2EBA   CD D0 3B               CALL   execStr   
2EBD   28 61 62 29 20 7B 24 62 7D 20 2F 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} /f x= 1 2 x:"   
2ED4                          ;*Macro unroll:  expect "(ab) {$b} /f x= 1 2 x:",2
2ED4   E1                     POP   HL   
2ED5   E5                     PUSH   HL   
2ED6   11 02 00               LD   DE,2   
2ED9   B7                     OR   A   
2EDA   ED 52                  SBC   HL,DE   
2EDC   7D                     LD   A,L   
2EDD   B4                     OR   H   
2EDE   28 61                  JR   Z,expectM_0_2214S43   
2EE0   CD 8E 09               CALL   printStr   
2EE3   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 2F 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} /f x= 1 2 x:"   
2F00   CD 8E 09               CALL   printStr   
2F03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F12   21 02 00               LD   HL,2   
2F15   CD DC 08               CALL   prtdec   
2F18   CD 8E 09               CALL   printStr   
2F1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F28   E1                     POP   hl   
2F29   E5                     PUSH   hl   
2F2A   CD DC 08               CALL   prtdec   
2F2D   E1                     POP   hl   
2F2E   CD 8E 09               CALL   printStr   
2F31   20 28 23 00            .CSTR   " (#"   
2F35   CD 24 09               CALL   prthex   
2F38   CD 8E 09               CALL   printStr   
2F3B   29 0D 0A 00            .CSTR   ")\r\n"   
2F3F   76                     HALT      
2F40   00                     .CSTR      
2F41                EXPECTM_0_2214S43:      
2F41   E1                     POP   HL   
2F42                          ;*Macro unroll:  test "(a:b) {$a} /f x= 1 2 x:", 2
2F42   31 80 3C               LD   SP,STACK   
2F45   CD 95 09               CALL   init   
2F48   CD D0 3B               CALL   execStr   
2F4B   28 61 3A 62 29 20 7B 24 61 7D 20 2F 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} /f x= 1 2 x:"   
2F63                          ;*Macro unroll:  expect "(a:b) {$a} /f x= 1 2 x:",2
2F63   E1                     POP   HL   
2F64   E5                     PUSH   HL   
2F65   11 02 00               LD   DE,2   
2F68   B7                     OR   A   
2F69   ED 52                  SBC   HL,DE   
2F6B   7D                     LD   A,L   
2F6C   B4                     OR   H   
2F6D   28 62                  JR   Z,expectM_0_2215S43   
2F6F   CD 8E 09               CALL   printStr   
2F72   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 2F 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} /f x= 1 2 x:"   
2F90   CD 8E 09               CALL   printStr   
2F93   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FA2   21 02 00               LD   HL,2   
2FA5   CD DC 08               CALL   prtdec   
2FA8   CD 8E 09               CALL   printStr   
2FAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FB8   E1                     POP   hl   
2FB9   E5                     PUSH   hl   
2FBA   CD DC 08               CALL   prtdec   
2FBD   E1                     POP   hl   
2FBE   CD 8E 09               CALL   printStr   
2FC1   20 28 23 00            .CSTR   " (#"   
2FC5   CD 24 09               CALL   prthex   
2FC8   CD 8E 09               CALL   printStr   
2FCB   29 0D 0A 00            .CSTR   ")\r\n"   
2FCF   76                     HALT      
2FD0   00                     .CSTR      
2FD1                EXPECTM_0_2215S43:      
2FD1   E1                     POP   HL   
2FD2                          ;*Macro unroll:  test "(ab) {$b} /f x= 1 2 x:", 2
2FD2   31 80 3C               LD   SP,STACK   
2FD5   CD 95 09               CALL   init   
2FD8   CD D0 3B               CALL   execStr   
2FDB   28 61 62 29 20 7B 24 62 7D 20 2F 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} /f x= 1 2 x:"   
2FF2                          ;*Macro unroll:  expect "(ab) {$b} /f x= 1 2 x:",2
2FF2   E1                     POP   HL   
2FF3   E5                     PUSH   HL   
2FF4   11 02 00               LD   DE,2   
2FF7   B7                     OR   A   
2FF8   ED 52                  SBC   HL,DE   
2FFA   7D                     LD   A,L   
2FFB   B4                     OR   H   
2FFC   28 61                  JR   Z,expectM_0_2216S43   
2FFE   CD 8E 09               CALL   printStr   
3001   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 2F 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} /f x= 1 2 x:"   
301E   CD 8E 09               CALL   printStr   
3021   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3030   21 02 00               LD   HL,2   
3033   CD DC 08               CALL   prtdec   
3036   CD 8E 09               CALL   printStr   
3039   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3046   E1                     POP   hl   
3047   E5                     PUSH   hl   
3048   CD DC 08               CALL   prtdec   
304B   E1                     POP   hl   
304C   CD 8E 09               CALL   printStr   
304F   20 28 23 00            .CSTR   " (#"   
3053   CD 24 09               CALL   prthex   
3056   CD 8E 09               CALL   printStr   
3059   29 0D 0A 00            .CSTR   ")\r\n"   
305D   76                     HALT      
305E   00                     .CSTR      
305F                EXPECTM_0_2216S43:      
305F   E1                     POP   HL   
3060                          ;*Macro unroll:  test "(ab) {$b $a} /f x= 10 15 x: -", 5
3060   31 80 3C               LD   SP,STACK   
3063   CD 95 09               CALL   init   
3066   CD D0 3B               CALL   execStr   
3069   28 61 62 29 20 7B 24 62 20 24 61 7D 20 2F 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} /f x= 10 15 x: -"   
3087                          ;*Macro unroll:  expect "(ab) {$b $a} /f x= 10 15 x: -",5
3087   E1                     POP   HL   
3088   E5                     PUSH   HL   
3089   11 05 00               LD   DE,5   
308C   B7                     OR   A   
308D   ED 52                  SBC   HL,DE   
308F   7D                     LD   A,L   
3090   B4                     OR   H   
3091   28 68                  JR   Z,expectM_0_2217S43   
3093   CD 8E 09               CALL   printStr   
3096   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 2F 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} /f x= 10 15 x: -"   
30BA   CD 8E 09               CALL   printStr   
30BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30CC   21 05 00               LD   HL,5   
30CF   CD DC 08               CALL   prtdec   
30D2   CD 8E 09               CALL   printStr   
30D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30E2   E1                     POP   hl   
30E3   E5                     PUSH   hl   
30E4   CD DC 08               CALL   prtdec   
30E7   E1                     POP   hl   
30E8   CD 8E 09               CALL   printStr   
30EB   20 28 23 00            .CSTR   " (#"   
30EF   CD 24 09               CALL   prthex   
30F2   CD 8E 09               CALL   printStr   
30F5   29 0D 0A 00            .CSTR   ")\r\n"   
30F9   76                     HALT      
30FA   00                     .CSTR      
30FB                EXPECTM_0_2217S43:      
30FB   E1                     POP   HL   
30FC                          ;*Macro unroll:  test "(a:b) {2} /f x= 1 x:", 2
30FC   31 80 3C               LD   SP,STACK   
30FF   CD 95 09               CALL   init   
3102   CD D0 3B               CALL   execStr   
3105   28 61 3A 62 29 20 7B 32 7D 20 2F 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} /f x= 1 x:"   
311A                          ;*Macro unroll:  expect "(a:b) {2} /f x= 1 x:",2
311A   E1                     POP   HL   
311B   E5                     PUSH   HL   
311C   11 02 00               LD   DE,2   
311F   B7                     OR   A   
3120   ED 52                  SBC   HL,DE   
3122   7D                     LD   A,L   
3123   B4                     OR   H   
3124   28 5F                  JR   Z,expectM_0_2218S43   
3126   CD 8E 09               CALL   printStr   
3129   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 2F 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} /f x= 1 x:"   
3144   CD 8E 09               CALL   printStr   
3147   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3156   21 02 00               LD   HL,2   
3159   CD DC 08               CALL   prtdec   
315C   CD 8E 09               CALL   printStr   
315F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
316C   E1                     POP   hl   
316D   E5                     PUSH   hl   
316E   CD DC 08               CALL   prtdec   
3171   E1                     POP   hl   
3172   CD 8E 09               CALL   printStr   
3175   20 28 23 00            .CSTR   " (#"   
3179   CD 24 09               CALL   prthex   
317C   CD 8E 09               CALL   printStr   
317F   29 0D 0A 00            .CSTR   ")\r\n"   
3183   76                     HALT      
3184   00                     .CSTR      
3185                EXPECTM_0_2218S43:      
3185   E1                     POP   HL   
3186                          ;*Macro unroll:  test "(:b) {100 $b= $b} /f x= x:", 100
3186   31 80 3C               LD   SP,STACK   
3189   CD 95 09               CALL   init   
318C   CD D0 3B               CALL   execStr   
318F   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 2F 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} /f x= x:"   
31AA                          ;*Macro unroll:  expect "(:b) {100 $b= $b} /f x= x:",100
31AA   E1                     POP   HL   
31AB   E5                     PUSH   HL   
31AC   11 64 00               LD   DE,100   
31AF   B7                     OR   A   
31B0   ED 52                  SBC   HL,DE   
31B2   7D                     LD   A,L   
31B3   B4                     OR   H   
31B4   28 65                  JR   Z,expectM_0_2219S43   
31B6   CD 8E 09               CALL   printStr   
31B9   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 2F 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} /f x= x:"   
31DA   CD 8E 09               CALL   printStr   
31DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31EC   21 64 00               LD   HL,100   
31EF   CD DC 08               CALL   prtdec   
31F2   CD 8E 09               CALL   printStr   
31F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3202   E1                     POP   hl   
3203   E5                     PUSH   hl   
3204   CD DC 08               CALL   prtdec   
3207   E1                     POP   hl   
3208   CD 8E 09               CALL   printStr   
320B   20 28 23 00            .CSTR   " (#"   
320F   CD 24 09               CALL   prthex   
3212   CD 8E 09               CALL   printStr   
3215   29 0D 0A 00            .CSTR   ")\r\n"   
3219   76                     HALT      
321A   00                     .CSTR      
321B                EXPECTM_0_2219S43:      
321B   E1                     POP   HL   
321C                          ;*Macro unroll:  test "(a:b) {1 $b= $b} /f x= 2 x:", 1
321C   31 80 3C               LD   SP,STACK   
321F   CD 95 09               CALL   init   
3222   CD D0 3B               CALL   execStr   
3225   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 2F 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} /f x= 2 x:"   
3241                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} /f x= 2 x:",1
3241   E1                     POP   HL   
3242   E5                     PUSH   HL   
3243   11 01 00               LD   DE,1   
3246   B7                     OR   A   
3247   ED 52                  SBC   HL,DE   
3249   7D                     LD   A,L   
324A   B4                     OR   H   
324B   28 66                  JR   Z,expectM_0_2220S43   
324D   CD 8E 09               CALL   printStr   
3250   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 2F 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} /f x= 2 x:"   
3272   CD 8E 09               CALL   printStr   
3275   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3284   21 01 00               LD   HL,1   
3287   CD DC 08               CALL   prtdec   
328A   CD 8E 09               CALL   printStr   
328D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
329A   E1                     POP   hl   
329B   E5                     PUSH   hl   
329C   CD DC 08               CALL   prtdec   
329F   E1                     POP   hl   
32A0   CD 8E 09               CALL   printStr   
32A3   20 28 23 00            .CSTR   " (#"   
32A7   CD 24 09               CALL   prthex   
32AA   CD 8E 09               CALL   printStr   
32AD   29 0D 0A 00            .CSTR   ")\r\n"   
32B1   76                     HALT      
32B2   00                     .CSTR      
32B3                EXPECTM_0_2220S43:      
32B3   E1                     POP   HL   
32B4                          ;*Macro unroll:  test "(a:b) {$a $b= $b} /f x= 2 x:", 2
32B4   31 80 3C               LD   SP,STACK   
32B7   CD 95 09               CALL   init   
32BA   CD D0 3B               CALL   execStr   
32BD   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 2F 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} /f x= 2 x:"   
32DA                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} /f x= 2 x:",2
32DA   E1                     POP   HL   
32DB   E5                     PUSH   HL   
32DC   11 02 00               LD   DE,2   
32DF   B7                     OR   A   
32E0   ED 52                  SBC   HL,DE   
32E2   7D                     LD   A,L   
32E3   B4                     OR   H   
32E4   28 67                  JR   Z,expectM_0_2221S43   
32E6   CD 8E 09               CALL   printStr   
32E9   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 2F 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} /f x= 2 x:"   
330C   CD 8E 09               CALL   printStr   
330F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
331E   21 02 00               LD   HL,2   
3321   CD DC 08               CALL   prtdec   
3324   CD 8E 09               CALL   printStr   
3327   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3334   E1                     POP   hl   
3335   E5                     PUSH   hl   
3336   CD DC 08               CALL   prtdec   
3339   E1                     POP   hl   
333A   CD 8E 09               CALL   printStr   
333D   20 28 23 00            .CSTR   " (#"   
3341   CD 24 09               CALL   prthex   
3344   CD 8E 09               CALL   printStr   
3347   29 0D 0A 00            .CSTR   ")\r\n"   
334B   76                     HALT      
334C   00                     .CSTR      
334D                EXPECTM_0_2221S43:      
334D   E1                     POP   HL   
334E                          ;*Macro unroll:  test "1 10 20 (ab) {/T {$a} {$b} ??} /f: +", 11
334E   31 80 3C               LD   SP,STACK   
3351   CD 95 09               CALL   init   
3354   CD D0 3B               CALL   execStr   
3357   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2F 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 2F 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {/T {$a} {$b} ??} /f: +"   
337C                          ;*Macro unroll:  expect "1 10 20 (ab) {/T {$a} {$b} ??} /f: +",11
337C   E1                     POP   HL   
337D   E5                     PUSH   HL   
337E   11 0B 00               LD   DE,11   
3381   B7                     OR   A   
3382   ED 52                  SBC   HL,DE   
3384   7D                     LD   A,L   
3385   B4                     OR   H   
3386   28 6F                  JR   Z,expectM_0_2222S43   
3388   CD 8E 09               CALL   printStr   
338B   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2F 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 2F 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {/T {$a} {$b} ??} /f: +"   
33B6   CD 8E 09               CALL   printStr   
33B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33C8   21 0B 00               LD   HL,11   
33CB   CD DC 08               CALL   prtdec   
33CE   CD 8E 09               CALL   printStr   
33D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33DE   E1                     POP   hl   
33DF   E5                     PUSH   hl   
33E0   CD DC 08               CALL   prtdec   
33E3   E1                     POP   hl   
33E4   CD 8E 09               CALL   printStr   
33E7   20 28 23 00            .CSTR   " (#"   
33EB   CD 24 09               CALL   prthex   
33EE   CD 8E 09               CALL   printStr   
33F1   29 0D 0A 00            .CSTR   ")\r\n"   
33F5   76                     HALT      
33F6   00                     .CSTR      
33F7                EXPECTM_0_2222S43:      
33F7   E1                     POP   HL   
33F8                          ;*Macro unroll:  test "1 10 20 (ab) {/F {$a} {$b} ??} /f: +", 21
33F8   31 80 3C               LD   SP,STACK   
33FB   CD 95 09               CALL   init   
33FE   CD D0 3B               CALL   execStr   
3401   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2F 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 2F 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {/F {$a} {$b} ??} /f: +"   
3426                          ;*Macro unroll:  expect "1 10 20 (ab) {/F {$a} {$b} ??} /f: +",21
3426   E1                     POP   HL   
3427   E5                     PUSH   HL   
3428   11 15 00               LD   DE,21   
342B   B7                     OR   A   
342C   ED 52                  SBC   HL,DE   
342E   7D                     LD   A,L   
342F   B4                     OR   H   
3430   28 6F                  JR   Z,expectM_0_2223S43   
3432   CD 8E 09               CALL   printStr   
3435   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2F 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 2F 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {/F {$a} {$b} ??} /f: +"   
3460   CD 8E 09               CALL   printStr   
3463   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3472   21 15 00               LD   HL,21   
3475   CD DC 08               CALL   prtdec   
3478   CD 8E 09               CALL   printStr   
347B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3488   E1                     POP   hl   
3489   E5                     PUSH   hl   
348A   CD DC 08               CALL   prtdec   
348D   E1                     POP   hl   
348E   CD 8E 09               CALL   printStr   
3491   20 28 23 00            .CSTR   " (#"   
3495   CD 24 09               CALL   prthex   
3498   CD 8E 09               CALL   printStr   
349B   29 0D 0A 00            .CSTR   ")\r\n"   
349F   76                     HALT      
34A0   00                     .CSTR      
34A1                EXPECTM_0_2223S43:      
34A1   E1                     POP   HL   
34A2                          ;*Macro unroll:  test "[10 20 30] 1%", 20
34A2   31 80 3C               LD   SP,STACK   
34A5   CD 95 09               CALL   init   
34A8   CD D0 3B               CALL   execStr   
34AB   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
34B9                          ;*Macro unroll:  expect "[10 20 30] 1%",20
34B9   E1                     POP   HL   
34BA   E5                     PUSH   HL   
34BB   11 14 00               LD   DE,20   
34BE   B7                     OR   A   
34BF   ED 52                  SBC   HL,DE   
34C1   7D                     LD   A,L   
34C2   B4                     OR   H   
34C3   28 58                  JR   Z,expectM_0_2224S43   
34C5   CD 8E 09               CALL   printStr   
34C8   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
34DC   CD 8E 09               CALL   printStr   
34DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34EE   21 14 00               LD   HL,20   
34F1   CD DC 08               CALL   prtdec   
34F4   CD 8E 09               CALL   printStr   
34F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3504   E1                     POP   hl   
3505   E5                     PUSH   hl   
3506   CD DC 08               CALL   prtdec   
3509   E1                     POP   hl   
350A   CD 8E 09               CALL   printStr   
350D   20 28 23 00            .CSTR   " (#"   
3511   CD 24 09               CALL   prthex   
3514   CD 8E 09               CALL   printStr   
3517   29 0D 0A 00            .CSTR   ")\r\n"   
351B   76                     HALT      
351C   00                     .CSTR      
351D                EXPECTM_0_2224S43:      
351D   E1                     POP   HL   
351E                          ;*Macro unroll:  test "/b [1 2 3] 1%", 2
351E   31 80 3C               LD   SP,STACK   
3521   CD 95 09               CALL   init   
3524   CD D0 3B               CALL   execStr   
3527   2F 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/b [1 2 3] 1%"   
3535                          ;*Macro unroll:  expect "/b [1 2 3] 1%",2
3535   E1                     POP   HL   
3536   E5                     PUSH   HL   
3537   11 02 00               LD   DE,2   
353A   B7                     OR   A   
353B   ED 52                  SBC   HL,DE   
353D   7D                     LD   A,L   
353E   B4                     OR   H   
353F   28 58                  JR   Z,expectM_0_2225S43   
3541   CD 8E 09               CALL   printStr   
3544   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/b [1 2 3] 1%"   
3558   CD 8E 09               CALL   printStr   
355B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
356A   21 02 00               LD   HL,2   
356D   CD DC 08               CALL   prtdec   
3570   CD 8E 09               CALL   printStr   
3573   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3580   E1                     POP   hl   
3581   E5                     PUSH   hl   
3582   CD DC 08               CALL   prtdec   
3585   E1                     POP   hl   
3586   CD 8E 09               CALL   printStr   
3589   20 28 23 00            .CSTR   " (#"   
358D   CD 24 09               CALL   prthex   
3590   CD 8E 09               CALL   printStr   
3593   29 0D 0A 00            .CSTR   ")\r\n"   
3597   76                     HALT      
3598   00                     .CSTR      
3599                EXPECTM_0_2225S43:      
3599   E1                     POP   HL   
359A                          ;*Macro unroll:  test "/b ['A' 'B' 'C'] 1%", 66
359A   31 80 3C               LD   SP,STACK   
359D   CD 95 09               CALL   init   
35A0   CD D0 3B               CALL   execStr   
35A3   2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/b ['A' 'B' 'C'] 1%"   
35B7                          ;*Macro unroll:  expect "/b ['A' 'B' 'C'] 1%",66
35B7   E1                     POP   HL   
35B8   E5                     PUSH   HL   
35B9   11 42 00               LD   DE,66   
35BC   B7                     OR   A   
35BD   ED 52                  SBC   HL,DE   
35BF   7D                     LD   A,L   
35C0   B4                     OR   H   
35C1   28 5E                  JR   Z,expectM_0_2226S43   
35C3   CD 8E 09               CALL   printStr   
35C6   43 6F 64 65 3A 20 2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/b ['A' 'B' 'C'] 1%"   
35E0   CD 8E 09               CALL   printStr   
35E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35F2   21 42 00               LD   HL,66   
35F5   CD DC 08               CALL   prtdec   
35F8   CD 8E 09               CALL   printStr   
35FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3608   E1                     POP   hl   
3609   E5                     PUSH   hl   
360A   CD DC 08               CALL   prtdec   
360D   E1                     POP   hl   
360E   CD 8E 09               CALL   printStr   
3611   20 28 23 00            .CSTR   " (#"   
3615   CD 24 09               CALL   prthex   
3618   CD 8E 09               CALL   printStr   
361B   29 0D 0A 00            .CSTR   ")\r\n"   
361F   76                     HALT      
3620   00                     .CSTR      
3621                EXPECTM_0_2226S43:      
3621   E1                     POP   HL   
3622                          ;*Macro unroll:  test "0 [{10} {20} {30}] /s", 10
3622   31 80 3C               LD   SP,STACK   
3625   CD 95 09               CALL   init   
3628   CD D0 3B               CALL   execStr   
362B   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 2F 73 00 .CSTR   "0 [{10} {20} {30}] /s"   
3641                          ;*Macro unroll:  expect "0 [{10} {20} {30}] /s",10
3641   E1                     POP   HL   
3642   E5                     PUSH   HL   
3643   11 0A 00               LD   DE,10   
3646   B7                     OR   A   
3647   ED 52                  SBC   HL,DE   
3649   7D                     LD   A,L   
364A   B4                     OR   H   
364B   28 60                  JR   Z,expectM_0_2227S43   
364D   CD 8E 09               CALL   printStr   
3650   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 2F 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] /s"   
366C   CD 8E 09               CALL   printStr   
366F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
367E   21 0A 00               LD   HL,10   
3681   CD DC 08               CALL   prtdec   
3684   CD 8E 09               CALL   printStr   
3687   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3694   E1                     POP   hl   
3695   E5                     PUSH   hl   
3696   CD DC 08               CALL   prtdec   
3699   E1                     POP   hl   
369A   CD 8E 09               CALL   printStr   
369D   20 28 23 00            .CSTR   " (#"   
36A1   CD 24 09               CALL   prthex   
36A4   CD 8E 09               CALL   printStr   
36A7   29 0D 0A 00            .CSTR   ")\r\n"   
36AB   76                     HALT      
36AC   00                     .CSTR      
36AD                EXPECTM_0_2227S43:      
36AD   E1                     POP   HL   
36AE                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] /s} /f:", 10
36AE   31 80 3C               LD   SP,STACK   
36B1   CD 95 09               CALL   init   
36B4   CD D0 3B               CALL   execStr   
36B7   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 2F 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] /s} /f:"   
36DB                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] /s} /f:",10
36DB   E1                     POP   HL   
36DC   E5                     PUSH   HL   
36DD   11 0A 00               LD   DE,10   
36E0   B7                     OR   A   
36E1   ED 52                  SBC   HL,DE   
36E3   7D                     LD   A,L   
36E4   B4                     OR   H   
36E5   28 6E                  JR   Z,expectM_0_2228S43   
36E7   CD 8E 09               CALL   printStr   
36EA   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 2F 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] /s} /f:"   
3714   CD 8E 09               CALL   printStr   
3717   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3726   21 0A 00               LD   HL,10   
3729   CD DC 08               CALL   prtdec   
372C   CD 8E 09               CALL   printStr   
372F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
373C   E1                     POP   hl   
373D   E5                     PUSH   hl   
373E   CD DC 08               CALL   prtdec   
3741   E1                     POP   hl   
3742   CD 8E 09               CALL   printStr   
3745   20 28 23 00            .CSTR   " (#"   
3749   CD 24 09               CALL   prthex   
374C   CD 8E 09               CALL   printStr   
374F   29 0D 0A 00            .CSTR   ")\r\n"   
3753   76                     HALT      
3754   00                     .CSTR      
3755                EXPECTM_0_2228S43:      
3755   E1                     POP   HL   
3756                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] /s} /f:", 10
3756   31 80 3C               LD   SP,STACK   
3759   CD 95 09               CALL   init   
375C   CD D0 3B               CALL   execStr   
375F   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 2F 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] /s} /f:"   
3785                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] /s} /f:",10
3785   E1                     POP   HL   
3786   E5                     PUSH   HL   
3787   11 0A 00               LD   DE,10   
378A   B7                     OR   A   
378B   ED 52                  SBC   HL,DE   
378D   7D                     LD   A,L   
378E   B4                     OR   H   
378F   28 70                  JR   Z,expectM_0_2229S43   
3791   CD 8E 09               CALL   printStr   
3794   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 2F 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] /s} /f:"   
37C0   CD 8E 09               CALL   printStr   
37C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37D2   21 0A 00               LD   HL,10   
37D5   CD DC 08               CALL   prtdec   
37D8   CD 8E 09               CALL   printStr   
37DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37E8   E1                     POP   hl   
37E9   E5                     PUSH   hl   
37EA   CD DC 08               CALL   prtdec   
37ED   E1                     POP   hl   
37EE   CD 8E 09               CALL   printStr   
37F1   20 28 23 00            .CSTR   " (#"   
37F5   CD 24 09               CALL   prthex   
37F8   CD 8E 09               CALL   printStr   
37FB   29 0D 0A 00            .CSTR   ")\r\n"   
37FF   76                     HALT      
3800   00                     .CSTR      
3801                EXPECTM_0_2229S43:      
3801   E1                     POP   HL   
3802                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] /s} /f:", 20
3802   31 80 3C               LD   SP,STACK   
3805   CD 95 09               CALL   init   
3808   CD D0 3B               CALL   execStr   
380B   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 2F 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] /s} /f:"   
3831                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] /s} /f:",20
3831   E1                     POP   HL   
3832   E5                     PUSH   HL   
3833   11 14 00               LD   DE,20   
3836   B7                     OR   A   
3837   ED 52                  SBC   HL,DE   
3839   7D                     LD   A,L   
383A   B4                     OR   H   
383B   28 70                  JR   Z,expectM_0_2230S43   
383D   CD 8E 09               CALL   printStr   
3840   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 2F 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] /s} /f:"   
386C   CD 8E 09               CALL   printStr   
386F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
387E   21 14 00               LD   HL,20   
3881   CD DC 08               CALL   prtdec   
3884   CD 8E 09               CALL   printStr   
3887   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3894   E1                     POP   hl   
3895   E5                     PUSH   hl   
3896   CD DC 08               CALL   prtdec   
3899   E1                     POP   hl   
389A   CD 8E 09               CALL   printStr   
389D   20 28 23 00            .CSTR   " (#"   
38A1   CD 24 09               CALL   prthex   
38A4   CD 8E 09               CALL   printStr   
38A7   29 0D 0A 00            .CSTR   ")\r\n"   
38AB   76                     HALT      
38AC   00                     .CSTR      
38AD                EXPECTM_0_2230S43:      
38AD   E1                     POP   HL   
38AE                          ;*Macro unroll:  test "5 [4] (a) {$a} /f /p :", 4
38AE   31 80 3C               LD   SP,STACK   
38B1   CD 95 09               CALL   init   
38B4   CD D0 3B               CALL   execStr   
38B7   35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 2F 66 20 2F 70 20 3A 00 .CSTR   "5 [4] (a) {$a} /f /p :"   
38CE                          ;*Macro unroll:  expect "5 [4] (a) {$a} /f /p :",4
38CE   E1                     POP   HL   
38CF   E5                     PUSH   HL   
38D0   11 04 00               LD   DE,4   
38D3   B7                     OR   A   
38D4   ED 52                  SBC   HL,DE   
38D6   7D                     LD   A,L   
38D7   B4                     OR   H   
38D8   28 61                  JR   Z,expectM_0_2231S43   
38DA   CD 8E 09               CALL   printStr   
38DD   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 2F 66 20 2F 70 20 3A 00 .CSTR   "Code: ","5 [4] (a) {$a} /f /p :"   
38FA   CD 8E 09               CALL   printStr   
38FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
390C   21 04 00               LD   HL,4   
390F   CD DC 08               CALL   prtdec   
3912   CD 8E 09               CALL   printStr   
3915   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3922   E1                     POP   hl   
3923   E5                     PUSH   hl   
3924   CD DC 08               CALL   prtdec   
3927   E1                     POP   hl   
3928   CD 8E 09               CALL   printStr   
392B   20 28 23 00            .CSTR   " (#"   
392F   CD 24 09               CALL   prthex   
3932   CD 8E 09               CALL   printStr   
3935   29 0D 0A 00            .CSTR   ")\r\n"   
3939   76                     HALT      
393A   00                     .CSTR      
393B                EXPECTM_0_2231S43:      
393B   E1                     POP   HL   
393C                          ;*Macro unroll:  test "5 [4] (ab) {$a $b +} /f /p :", 9
393C   31 80 3C               LD   SP,STACK   
393F   CD 95 09               CALL   init   
3942   CD D0 3B               CALL   execStr   
3945   35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 2F 66 20 2F 70 20 3A 00 .CSTR   "5 [4] (ab) {$a $b +} /f /p :"   
3962                          ;*Macro unroll:  expect "5 [4] (ab) {$a $b +} /f /p :",9
3962   E1                     POP   HL   
3963   E5                     PUSH   HL   
3964   11 09 00               LD   DE,9   
3967   B7                     OR   A   
3968   ED 52                  SBC   HL,DE   
396A   7D                     LD   A,L   
396B   B4                     OR   H   
396C   28 67                  JR   Z,expectM_0_2232S43   
396E   CD 8E 09               CALL   printStr   
3971   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 2F 66 20 2F 70 20 3A 00 .CSTR   "Code: ","5 [4] (ab) {$a $b +} /f /p :"   
3994   CD 8E 09               CALL   printStr   
3997   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39A6   21 09 00               LD   HL,9   
39A9   CD DC 08               CALL   prtdec   
39AC   CD 8E 09               CALL   printStr   
39AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39BC   E1                     POP   hl   
39BD   E5                     PUSH   hl   
39BE   CD DC 08               CALL   prtdec   
39C1   E1                     POP   hl   
39C2   CD 8E 09               CALL   printStr   
39C5   20 28 23 00            .CSTR   " (#"   
39C9   CD 24 09               CALL   prthex   
39CC   CD 8E 09               CALL   printStr   
39CF   29 0D 0A 00            .CSTR   ")\r\n"   
39D3   76                     HALT      
39D4   00                     .CSTR      
39D5                EXPECTM_0_2232S43:      
39D5   E1                     POP   HL   
39D6                          ;*Macro unroll:  test "3i= { i i--  i/x /z} /r + +", 6
39D6   31 80 3C               LD   SP,STACK   
39D9   CD 95 09               CALL   init   
39DC   CD D0 3B               CALL   execStr   
39DF   33 69 3D 20 7B 20 69 20 69 2D 2D 20 20 69 2F 78 20 2F 7A 7D 20 2F 72 20 2B 20 2B 00 .CSTR   "3i= { i i--  i/x /z} /r + +"   
39FB                          ;*Macro unroll:  expect "3i= { i i--  i/x /z} /r + +",6
39FB   E1                     POP   HL   
39FC   E5                     PUSH   HL   
39FD   11 06 00               LD   DE,6   
3A00   B7                     OR   A   
3A01   ED 52                  SBC   HL,DE   
3A03   7D                     LD   A,L   
3A04   B4                     OR   H   
3A05   28 66                  JR   Z,expectM_0_2233S43   
3A07   CD 8E 09               CALL   printStr   
3A0A   43 6F 64 65 3A 20 33 69 3D 20 7B 20 69 20 69 2D 2D 20 20 69 2F 78 20 2F 7A 7D 20 2F 72 20 2B 20 2B 00 .CSTR   "Code: ","3i= { i i--  i/x /z} /r + +"   
3A2C   CD 8E 09               CALL   printStr   
3A2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A3E   21 06 00               LD   HL,6   
3A41   CD DC 08               CALL   prtdec   
3A44   CD 8E 09               CALL   printStr   
3A47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A54   E1                     POP   hl   
3A55   E5                     PUSH   hl   
3A56   CD DC 08               CALL   prtdec   
3A59   E1                     POP   hl   
3A5A   CD 8E 09               CALL   printStr   
3A5D   20 28 23 00            .CSTR   " (#"   
3A61   CD 24 09               CALL   prthex   
3A64   CD 8E 09               CALL   printStr   
3A67   29 0D 0A 00            .CSTR   ")\r\n"   
3A6B   76                     HALT      
3A6C   00                     .CSTR      
3A6D                EXPECTM_0_2233S43:      
3A6D   E1                     POP   HL   
3A6E                          ;*Macro unroll:  test "0 j= 4 i= { j i+ j= i /x i 1 -= /z} /r j ", 10
3A6E   31 80 3C               LD   SP,STACK   
3A71   CD 95 09               CALL   init   
3A74   CD D0 3B               CALL   execStr   
3A77   30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 2F 78 20 69 20 31 20 2D 3D 20 2F 7A 7D 20 2F 72 20 6A 20 00 .CSTR   "0 j= 4 i= { j i+ j= i /x i 1 -= /z} /r j "   
3AA1                          ;*Macro unroll:  expect "0 j= 4 i= { j i+ j= i /x i 1 -= /z} /r j ",10
3AA1   E1                     POP   HL   
3AA2   E5                     PUSH   HL   
3AA3   11 0A 00               LD   DE,10   
3AA6   B7                     OR   A   
3AA7   ED 52                  SBC   HL,DE   
3AA9   7D                     LD   A,L   
3AAA   B4                     OR   H   
3AAB   28 74                  JR   Z,expectM_0_2234S43   
3AAD   CD 8E 09               CALL   printStr   
3AB0   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 2F 78 20 69 20 31 20 2D 3D 20 2F 7A 7D 20 2F 72 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= { j i+ j= i /x i 1 -= /z} /r j "   
3AE0   CD 8E 09               CALL   printStr   
3AE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AF2   21 0A 00               LD   HL,10   
3AF5   CD DC 08               CALL   prtdec   
3AF8   CD 8E 09               CALL   printStr   
3AFB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B08   E1                     POP   hl   
3B09   E5                     PUSH   hl   
3B0A   CD DC 08               CALL   prtdec   
3B0D   E1                     POP   hl   
3B0E   CD 8E 09               CALL   printStr   
3B11   20 28 23 00            .CSTR   " (#"   
3B15   CD 24 09               CALL   prthex   
3B18   CD 8E 09               CALL   printStr   
3B1B   29 0D 0A 00            .CSTR   ")\r\n"   
3B1F   76                     HALT      
3B20   00                     .CSTR      
3B21                EXPECTM_0_2234S43:      
3B21   E1                     POP   HL   
3B22                          ;*Macro unroll:  test "3i= [ { i i--  i/x /z} /r ] 1%", 2
3B22   31 80 3C               LD   SP,STACK   
3B25   CD 95 09               CALL   init   
3B28   CD D0 3B               CALL   execStr   
3B2B   33 69 3D 20 5B 20 7B 20 69 20 69 2D 2D 20 20 69 2F 78 20 2F 7A 7D 20 2F 72 20 5D 20 31 25 00 .CSTR   "3i= [ { i i--  i/x /z} /r ] 1%"   
3B4A                          ;*Macro unroll:  expect "3i= [ { i i--  i/x /z} /r ] 1%",2
3B4A   E1                     POP   HL   
3B4B   E5                     PUSH   HL   
3B4C   11 02 00               LD   DE,2   
3B4F   B7                     OR   A   
3B50   ED 52                  SBC   HL,DE   
3B52   7D                     LD   A,L   
3B53   B4                     OR   H   
3B54   28 69                  JR   Z,expectM_0_2235S43   
3B56   CD 8E 09               CALL   printStr   
3B59   43 6F 64 65 3A 20 33 69 3D 20 5B 20 7B 20 69 20 69 2D 2D 20 20 69 2F 78 20 2F 7A 7D 20 2F 72 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ { i i--  i/x /z} /r ] 1%"   
3B7E   CD 8E 09               CALL   printStr   
3B81   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B90   21 02 00               LD   HL,2   
3B93   CD DC 08               CALL   prtdec   
3B96   CD 8E 09               CALL   printStr   
3B99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BA6   E1                     POP   hl   
3BA7   E5                     PUSH   hl   
3BA8   CD DC 08               CALL   prtdec   
3BAB   E1                     POP   hl   
3BAC   CD 8E 09               CALL   printStr   
3BAF   20 28 23 00            .CSTR   " (#"   
3BB3   CD 24 09               CALL   prthex   
3BB6   CD 8E 09               CALL   printStr   
3BB9   29 0D 0A 00            .CSTR   ")\r\n"   
3BBD   76                     HALT      
3BBE   00                     .CSTR      
3BBF                EXPECTM_0_2235S43:      
3BBF   E1                     POP   HL   
3BC0                             ; 
3BC0   CD 8E 09               CALL   printStr   
3BC3   44 6F 6E 65 21 00      .CSTR   "Done!"   
3BC9   76                     HALT      
3BCA                          ALIGN   2   
3BCA                PRINTER:      
3BCA   E1                     POP   hl   
3BCB   CD DC 08               CALL   prtdec   
3BCE   DD E9                  JP   (ix)   
3BD0                             ; executes a null teminated string (null executes exit_)
3BD0                             ; the string should be immedaitely following the call
3BD0                EXECSTR:      ; create a root stack frame
3BD0   C1                     POP   bc   ; bc = code*
3BD1   0B                     DEC   bc   ; dec to prepare for next routine
3BD2   11 00 00               LD   de,0   
3BD5   D5                     PUSH   de   ; push fake IP
3BD6   D5                     PUSH   de   ; push null arg_list*
3BD7   D5                     PUSH   de   ; push null first_arg*
3BD8   D5                     PUSH   de   ; push fake BP
3BD9   DD E9                  JP   (ix)   
3BDB                          ALIGN   $100   
3C00                             ; .org RAMSTART
3C00                          DS   DSIZE   
3C80                STACK:       
3C80                          ALIGN   $100   
3D00                VARS:        
3D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
3DD0                RESTARTS:      
3DD0                RST08:    DS   2   
3DD2                RST10:    DS   2   
3DD4                RST18:    DS   2   
3DD6                RST20:    DS   2   
3DD8                RST28:    DS   2   
3DDA                RST30:    DS   2   ; 
3DDC                BAUD:     DS   2   ; 
3DDE                INTVEC:   DS   2   ; 
3DE0                NMIVEC:   DS   2   ; 
3DE2                GETCVEC:   DS   2   ; 
3DE4                PUTCVEC:   DS   2   ; 
3DE6                SYSVARS:      
3DE6                             ; initialised sys variables
3DE6                VDATAWIDTH:   DS   2   ; 
3DE8                VTIBPTR:   DS   2   ; 
3DEA                VNEXT:    DS   2   ; 
3DEC                VHEAPPTR:   DS   2   ; 
3DEE                             ; uninitialised sys variables
3DEE                VBLOCKEND:   DS   2   ; 
3DF0                VPOINTER:   DS   2   ; 
3DF2                VHASHSTR:   DS   2   ; 
3DF4                VLASTDEF:   DS   2   ; 
3DF6                VREMAIN:   DS   2   ; 
3DF8                VTEMP1:   DS   2   ; 
3DFA                VTEMP2:   DS   2   ; 
3DFC                TBPTR:    DS   2   ; reserved for tests
3DFE                          ALIGN   $100   
3E00                TIB:      DS   TIBSIZE   
3F00                          ALIGN   $100   
3F00                PAD:      DS   $100   
4000                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08DA DEFINED AT LINE 1374 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1334 IN monty.asm
                    > USED AT LINE 1575 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 750 IN monty.asm
                    > USED AT LINE 757 IN monty.asm
                    > USED AT LINE 1385 IN monty.asm
                    > USED AT LINE 1426 IN monty.asm
                    > USED AT LINE 1450 IN monty.asm
                    > USED AT LINE 1453 IN monty.asm
                    > USED AT LINE 1606 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 808 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 813 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1642 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1110 IN monty.asm
                    > USED AT LINE 1472 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1530 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0303 DEFINED AT LINE 217 IN monty.asm
AND_:               0306 DEFINED AT LINE 219 IN monty.asm
ARG_:               0309 DEFINED AT LINE 221 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 223 IN monty.asm
ARRBEGIN_:          030F DEFINED AT LINE 225 IN monty.asm
ARREND_:            0312 DEFINED AT LINE 227 IN monty.asm
ARRINDEX_:          0315 DEFINED AT LINE 229 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 231 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 233 IN monty.asm
CHAR_:              031E DEFINED AT LINE 235 IN monty.asm
COMMAND_:           0321 DEFINED AT LINE 237 IN monty.asm
DISCARD_:           0324 DEFINED AT LINE 239 IN monty.asm
DOT_:               0327 DEFINED AT LINE 242 IN monty.asm
REMAIN_:            032A DEFINED AT LINE 244 IN monty.asm
GO_:                032D DEFINED AT LINE 246 IN monty.asm
IDENTU_:            0330 DEFINED AT LINE 248 IN monty.asm
IDENTL_:            0333 DEFINED AT LINE 250 IN monty.asm
IF_:                0336 DEFINED AT LINE 252 IN monty.asm
INV_:               0339 DEFINED AT LINE 254 IN monty.asm
MUL_:               033F DEFINED AT LINE 257 IN monty.asm
NOT_:               0342 DEFINED AT LINE 259 IN monty.asm
NUM_:               0347 DEFINED AT LINE 262 IN monty.asm
                    > USED AT LINE 1137 IN monty.asm
HEXNUM_:            034A DEFINED AT LINE 264 IN monty.asm
OR_:                034D DEFINED AT LINE 266 IN monty.asm
XOR_:               0350 DEFINED AT LINE 268 IN monty.asm
STRING_:            0353 DEFINED AT LINE 270 IN monty.asm
SUB_:               0356 DEFINED AT LINE 272 IN monty.asm
EQ_:                0359 DEFINED AT LINE 274 IN monty.asm
EQ0:                0363 DEFINED AT LINE 281 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
EQ1:                0364 DEFINED AT LINE 283 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
GT_:                0368 DEFINED AT LINE 287 IN monty.asm
LT_:                0373 DEFINED AT LINE 296 IN monty.asm
LT1:                037C DEFINED AT LINE 303 IN monty.asm
                    > USED AT LINE 294 IN monty.asm
DIV_:               0385 DEFINED AT LINE 309 IN monty.asm
NOP_:               0388 DEFINED AT LINE 311 IN monty.asm
ADD:                038A DEFINED AT LINE 318 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               0395 DEFINED AT LINE 326 IN monty.asm
                    > USED AT LINE 322 IN monty.asm
ADD3:               0399 DEFINED AT LINE 331 IN monty.asm
                    > USED AT LINE 357 IN monty.asm
                    > USED AT LINE 731 IN monty.asm
                    > USED AT LINE 1014 IN monty.asm
                    > USED AT LINE 1151 IN monty.asm
ADDR:               03A4 DEFINED AT LINE 341 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AND:                03B0 DEFINED AT LINE 347 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03B7 DEFINED AT LINE 355 IN monty.asm
                    > USED AT LINE 367 IN monty.asm
                    > USED AT LINE 377 IN monty.asm
OR:                 03BB DEFINED AT LINE 359 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
XOR:                03C4 DEFINED AT LINE 368 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
XOR1:               03C5 DEFINED AT LINE 370 IN monty.asm
                    > USED AT LINE 256 IN monty.asm
ARG:                03CD DEFINED AT LINE 382 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03EB DEFINED AT LINE 403 IN monty.asm
                    > USED AT LINE 409 IN monty.asm
ARG0A:              03F4 DEFINED AT LINE 411 IN monty.asm
                    > USED AT LINE 388 IN monty.asm
                    > USED AT LINE 395 IN monty.asm
ARG1:               03F9 DEFINED AT LINE 414 IN monty.asm
                    > USED AT LINE 407 IN monty.asm
ARG1A:              0401 DEFINED AT LINE 421 IN monty.asm
                    > USED AT LINE 413 IN monty.asm
ARG_LIST:           0404 DEFINED AT LINE 430 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG_LIST1:          040E DEFINED AT LINE 437 IN monty.asm
                    > USED AT LINE 455 IN monty.asm
ARG_LIST2:          041A DEFINED AT LINE 445 IN monty.asm
                    > USED AT LINE 442 IN monty.asm
ARG_LIST3:          0422 DEFINED AT LINE 453 IN monty.asm
                    > USED AT LINE 444 IN monty.asm
                    > USED AT LINE 451 IN monty.asm
ARG_LIST4:          0425 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 440 IN monty.asm
ARG_LIST5:          042A DEFINED AT LINE 461 IN monty.asm
                    > USED AT LINE 459 IN monty.asm
ARRBEGIN:           0436 DEFINED AT LINE 472 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             0452 DEFINED AT LINE 486 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARREND1:            046C DEFINED AT LINE 502 IN monty.asm
                    > USED AT LINE 518 IN monty.asm
ARREND2:            047C DEFINED AT LINE 512 IN monty.asm
                    > USED AT LINE 508 IN monty.asm
ARRINDEX:           04A0 DEFINED AT LINE 539 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARRINDEX0:          04A8 DEFINED AT LINE 545 IN monty.asm
ARRINDEX1:          04A9 DEFINED AT LINE 547 IN monty.asm
                    > USED AT LINE 544 IN monty.asm
ARRINDEX2:          04B5 DEFINED AT LINE 556 IN monty.asm
                    > USED AT LINE 553 IN monty.asm
ASSIGN:             04B8 DEFINED AT LINE 561 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
ASSIGN0:            04BA DEFINED AT LINE 564 IN monty.asm
                    > USED AT LINE 325 IN monty.asm
                    > USED AT LINE 335 IN monty.asm
                    > USED AT LINE 1144 IN monty.asm
ASSIGNX:            04BB DEFINED AT LINE 566 IN monty.asm
ASSIGN1:            04C7 DEFINED AT LINE 574 IN monty.asm
                    > USED AT LINE 571 IN monty.asm
BLOCK:              04C9 DEFINED AT LINE 577 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK1:             04CD DEFINED AT LINE 581 IN monty.asm
                    > USED AT LINE 585 IN monty.asm
                    > USED AT LINE 607 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
                    > USED AT LINE 615 IN monty.asm
                    > USED AT LINE 619 IN monty.asm
BLOCK2:             04F9 DEFINED AT LINE 608 IN monty.asm
                    > USED AT LINE 595 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
BLOCK3:             04FC DEFINED AT LINE 611 IN monty.asm
                    > USED AT LINE 602 IN monty.asm
                    > USED AT LINE 604 IN monty.asm
                    > USED AT LINE 606 IN monty.asm
BLOCK4:             0504 DEFINED AT LINE 617 IN monty.asm
                    > USED AT LINE 588 IN monty.asm
                    > USED AT LINE 590 IN monty.asm
                    > USED AT LINE 592 IN monty.asm
BLOCK5:             0507 DEFINED AT LINE 620 IN monty.asm
                    > USED AT LINE 616 IN monty.asm
BLOCK6:             052F DEFINED AT LINE 639 IN monty.asm
                    > USED AT LINE 626 IN monty.asm
BLOCKEND:           0532 DEFINED AT LINE 643 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 1248 IN monty.asm
                    > USED AT LINE 1280 IN monty.asm
BLOCKEND1:          055E DEFINED AT LINE 665 IN monty.asm
                    > USED AT LINE 658 IN monty.asm
BLOCKEND2:          056A DEFINED AT LINE 672 IN monty.asm
                    > USED AT LINE 664 IN monty.asm
BLOCKEND3:          057C DEFINED AT LINE 686 IN monty.asm
                    > USED AT LINE 678 IN monty.asm
CHAR:               0587 DEFINED AT LINE 697 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR1:              058A DEFINED AT LINE 699 IN monty.asm
                    > USED AT LINE 710 IN monty.asm
CHAR2:              0596 DEFINED AT LINE 708 IN monty.asm
                    > USED AT LINE 705 IN monty.asm
CHAR3:              0599 DEFINED AT LINE 711 IN monty.asm
                    > USED AT LINE 703 IN monty.asm
DIV:                059C DEFINED AT LINE 715 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
DOT:                05BA DEFINED AT LINE 733 IN monty.asm
                    > USED AT LINE 243 IN monty.asm
DOT1:               05C6 DEFINED AT LINE 741 IN monty.asm
                    > USED AT LINE 738 IN monty.asm
DOT2:               05CF DEFINED AT LINE 746 IN monty.asm
                    > USED AT LINE 743 IN monty.asm
DOT3:               05D9 DEFINED AT LINE 752 IN monty.asm
                    > USED AT LINE 748 IN monty.asm
DOT4:               05DD DEFINED AT LINE 755 IN monty.asm
                    > USED AT LINE 740 IN monty.asm
                    > USED AT LINE 745 IN monty.asm
                    > USED AT LINE 751 IN monty.asm
DIVIDE:             05E4 DEFINED AT LINE 763 IN monty.asm
                    > USED AT LINE 727 IN monty.asm
DIVIDE1:            05E9 DEFINED AT LINE 766 IN monty.asm
                    > USED AT LINE 778 IN monty.asm
DIVIDE2:            05F6 DEFINED AT LINE 774 IN monty.asm
                    > USED AT LINE 771 IN monty.asm
DIVIDE3:            05F7 DEFINED AT LINE 776 IN monty.asm
                    > USED AT LINE 773 IN monty.asm
EQUALS:             05FD DEFINED AT LINE 784 IN monty.asm
                    > USED AT LINE 285 IN monty.asm
LESSTHANEQ:         0605 DEFINED AT LINE 792 IN monty.asm
                    > USED AT LINE 305 IN monty.asm
LESSTHAN:           060A DEFINED AT LINE 799 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
LESSTHAN1:          060F DEFINED AT LINE 804 IN monty.asm
                    > USED AT LINE 795 IN monty.asm
TRUE1:              0612 DEFINED AT LINE 807 IN monty.asm
                    > USED AT LINE 787 IN monty.asm
                    > USED AT LINE 1180 IN monty.asm
NULL1:              0618 DEFINED AT LINE 811 IN monty.asm
FALSE1:             0618 DEFINED AT LINE 812 IN monty.asm
                    > USED AT LINE 788 IN monty.asm
                    > USED AT LINE 802 IN monty.asm
                    > USED AT LINE 805 IN monty.asm
                    > USED AT LINE 1168 IN monty.asm
GO:                 061E DEFINED AT LINE 820 IN monty.asm
                    > USED AT LINE 247 IN monty.asm
                    > USED AT LINE 1290 IN monty.asm
GO1:                061F DEFINED AT LINE 822 IN monty.asm
                    > USED AT LINE 991 IN monty.asm
                    > USED AT LINE 993 IN monty.asm
                    > USED AT LINE 1361 IN monty.asm
GO2:                0625 DEFINED AT LINE 827 IN monty.asm
                    > USED AT LINE 825 IN monty.asm
GOBLOCK:            062B DEFINED AT LINE 831 IN monty.asm
GOBLOCK1:           0650 DEFINED AT LINE 848 IN monty.asm
                    > USED AT LINE 930 IN monty.asm
GOFUNC:             065E DEFINED AT LINE 857 IN monty.asm
                    > USED AT LINE 830 IN monty.asm
GOFUNC1:            0677 DEFINED AT LINE 876 IN monty.asm
                    > USED AT LINE 886 IN monty.asm
GOFUNC2:            067D DEFINED AT LINE 883 IN monty.asm
                    > USED AT LINE 875 IN monty.asm
GOFUNC3:            0688 DEFINED AT LINE 889 IN monty.asm
                    > USED AT LINE 865 IN monty.asm
GOFUNC4:            06A0 DEFINED AT LINE 906 IN monty.asm
                    > USED AT LINE 903 IN monty.asm
GOFUNC5:            06A4 DEFINED AT LINE 910 IN monty.asm
                    > USED AT LINE 916 IN monty.asm
GOFUNC6:            06A7 DEFINED AT LINE 914 IN monty.asm
                    > USED AT LINE 909 IN monty.asm
GOFUNC7:            06AA DEFINED AT LINE 917 IN monty.asm
GOFUNC8:            06AF DEFINED AT LINE 923 IN monty.asm
                    > USED AT LINE 842 IN monty.asm
                    > USED AT LINE 905 IN monty.asm
HEXNUM:             06BA DEFINED AT LINE 932 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
HEXNUM1:            06BD DEFINED AT LINE 934 IN monty.asm
                    > USED AT LINE 951 IN monty.asm
HEXNUM2:            06C5 DEFINED AT LINE 940 IN monty.asm
                    > USED AT LINE 938 IN monty.asm
IDENTU:             06D7 DEFINED AT LINE 952 IN monty.asm
                    > USED AT LINE 249 IN monty.asm
IDENTL:             06DC DEFINED AT LINE 956 IN monty.asm
                    > USED AT LINE 251 IN monty.asm
IDENT1:             06E1 DEFINED AT LINE 960 IN monty.asm
                    > USED AT LINE 955 IN monty.asm
IF:                 06EE DEFINED AT LINE 973 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
IFTE:               06FA DEFINED AT LINE 983 IN monty.asm
                    > USED AT LINE 977 IN monty.asm
IFTE1:              06FB DEFINED AT LINE 985 IN monty.asm
                    > USED AT LINE 980 IN monty.asm
MUL:                0707 DEFINED AT LINE 995 IN monty.asm
                    > USED AT LINE 258 IN monty.asm
MUL2:               0709 DEFINED AT LINE 998 IN monty.asm
MUL3:               0711 DEFINED AT LINE 1003 IN monty.asm
                    > USED AT LINE 1012 IN monty.asm
NUM:                0723 DEFINED AT LINE 1016 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
NUM0:               072C DEFINED AT LINE 1022 IN monty.asm
                    > USED AT LINE 1020 IN monty.asm
NUM1:               072D DEFINED AT LINE 1024 IN monty.asm
                    > USED AT LINE 1041 IN monty.asm
NUM2:               0745 DEFINED AT LINE 1042 IN monty.asm
                    > USED AT LINE 942 IN monty.asm
                    > USED AT LINE 944 IN monty.asm
                    > USED AT LINE 1027 IN monty.asm
                    > USED AT LINE 1029 IN monty.asm
NUM3:               0750 DEFINED AT LINE 1050 IN monty.asm
                    > USED AT LINE 1045 IN monty.asm
REMAIN:             0753 DEFINED AT LINE 1054 IN monty.asm
                    > USED AT LINE 245 IN monty.asm
SHIFTLEFT:          0759 DEFINED AT LINE 1061 IN monty.asm
                    > USED AT LINE 300 IN monty.asm
SHIFTLEFT1:         0761 DEFINED AT LINE 1068 IN monty.asm
                    > USED AT LINE 1071 IN monty.asm
SHIFTLEFT2:         0762 DEFINED AT LINE 1070 IN monty.asm
                    > USED AT LINE 1067 IN monty.asm
SHIFTRIGHT:         0769 DEFINED AT LINE 1078 IN monty.asm
                    > USED AT LINE 291 IN monty.asm
SHIFTRIGHT1:        0771 DEFINED AT LINE 1085 IN monty.asm
                    > USED AT LINE 1089 IN monty.asm
SHIFTRIGHT2:        0775 DEFINED AT LINE 1088 IN monty.asm
                    > USED AT LINE 1084 IN monty.asm
STRING:             077C DEFINED AT LINE 1097 IN monty.asm
                    > USED AT LINE 271 IN monty.asm
STRING1:            0785 DEFINED AT LINE 1104 IN monty.asm
                    > USED AT LINE 1111 IN monty.asm
                    > USED AT LINE 1113 IN monty.asm
STRING2:            0788 DEFINED AT LINE 1108 IN monty.asm
                    > USED AT LINE 1103 IN monty.asm
SUB:                07A4 DEFINED AT LINE 1130 IN monty.asm
                    > USED AT LINE 273 IN monty.asm
SUB0:               07B0 DEFINED AT LINE 1138 IN monty.asm
                    > USED AT LINE 1135 IN monty.asm
SUB1:               07BA DEFINED AT LINE 1145 IN monty.asm
                    > USED AT LINE 1141 IN monty.asm
COMMAND:            07C3 DEFINED AT LINE 1158 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
                    > USED AT LINE 721 IN monty.asm
ABS1:               080F DEFINED AT LINE 1191 IN monty.asm
                    > USED AT LINE 1160 IN monty.asm
PARTIAL:            081C DEFINED AT LINE 1206 IN monty.asm
                    > USED AT LINE 1164 IN monty.asm
COMMENT:            083C DEFINED AT LINE 1222 IN monty.asm
                    > USED AT LINE 719 IN monty.asm
                    > USED AT LINE 1226 IN monty.asm
LOOPEND:            0845 DEFINED AT LINE 1230 IN monty.asm
                    > USED AT LINE 1186 IN monty.asm
BREAK:              0869 DEFINED AT LINE 1250 IN monty.asm
                    > USED AT LINE 1184 IN monty.asm
BREAK1:             0870 DEFINED AT LINE 1256 IN monty.asm
                    > USED AT LINE 1254 IN monty.asm
REPEAT:             0883 DEFINED AT LINE 1284 IN monty.asm
                    > USED AT LINE 1176 IN monty.asm
BYTES:              0889 DEFINED AT LINE 1292 IN monty.asm
                    > USED AT LINE 1162 IN monty.asm
BYTES1:             088C DEFINED AT LINE 1294 IN monty.asm
                    > USED AT LINE 1365 IN monty.asm
FUNC:               0891 DEFINED AT LINE 1299 IN monty.asm
                    > USED AT LINE 1166 IN monty.asm
INPUT:              08AD DEFINED AT LINE 1323 IN monty.asm
                    > USED AT LINE 1170 IN monty.asm
KEY:                08B8 DEFINED AT LINE 1333 IN monty.asm
                    > USED AT LINE 1172 IN monty.asm
OUTPUT:             08C1 DEFINED AT LINE 1342 IN monty.asm
                    > USED AT LINE 1174 IN monty.asm
SELECT:             08CA DEFINED AT LINE 1353 IN monty.asm
                    > USED AT LINE 1178 IN monty.asm
WORDS:              08D4 DEFINED AT LINE 1363 IN monty.asm
                    > USED AT LINE 1182 IN monty.asm
FILTER:             08DA DEFINED AT LINE 1372 IN monty.asm
MAP:                08DA DEFINED AT LINE 1373 IN monty.asm
PRTDEC:             08DC DEFINED AT LINE 1381 IN monty.asm
                    > USED AT LINE 754 IN monty.asm
                    > USED AT LINE 1652 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 136
PRTDEC0:            08EB DEFINED AT LINE 1392 IN monty.asm
                    > USED AT LINE 1383 IN monty.asm
PRTDEC1:            090D DEFINED AT LINE 1408 IN monty.asm
                    > USED AT LINE 1396 IN monty.asm
                    > USED AT LINE 1398 IN monty.asm
                    > USED AT LINE 1400 IN monty.asm
                    > USED AT LINE 1402 IN monty.asm
                    > USED AT LINE 1405 IN monty.asm
PRTDEC2:            090F DEFINED AT LINE 1410 IN monty.asm
                    > USED AT LINE 1413 IN monty.asm
PRTDEC3:            091F DEFINED AT LINE 1422 IN monty.asm
                    > USED AT LINE 1417 IN monty.asm
PRTDEC4:            0920 DEFINED AT LINE 1424 IN monty.asm
                    > USED AT LINE 1421 IN monty.asm
PRTHEX:             0924 DEFINED AT LINE 1428 IN monty.asm
                    > USED AT LINE 739 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            092F DEFINED AT LINE 1436 IN monty.asm
                    > USED AT LINE 1431 IN monty.asm
                    > USED AT LINE 1433 IN monty.asm
PRTHEX3:            0938 DEFINED AT LINE 1444 IN monty.asm
                    > USED AT LINE 1442 IN monty.asm
PRTSTR0:            0943 DEFINED AT LINE 1452 IN monty.asm
                    > USED AT LINE 1458 IN monty.asm
PRTSTR:             0947 DEFINED AT LINE 1455 IN monty.asm
                    > USED AT LINE 744 IN monty.asm
                    > USED AT LINE 1522 IN monty.asm
NESTING:            094C DEFINED AT LINE 1471 IN monty.asm
                    > USED AT LINE 1566 IN monty.asm
                    > USED AT LINE 1607 IN monty.asm
NESTING0:           0956 DEFINED AT LINE 1477 IN monty.asm
                    > USED AT LINE 1473 IN monty.asm
                    > USED AT LINE 1475 IN monty.asm
NESTING1A:          095D DEFINED AT LINE 1482 IN monty.asm
                    > USED AT LINE 1479 IN monty.asm
NESTING1:           0960 DEFINED AT LINE 1485 IN monty.asm
                    > USED AT LINE 1476 IN monty.asm
NESTING2:           096F DEFINED AT LINE 1494 IN monty.asm
                    > USED AT LINE 1489 IN monty.asm
                    > USED AT LINE 1491 IN monty.asm
NESTING3:           0971 DEFINED AT LINE 1497 IN monty.asm
                    > USED AT LINE 1493 IN monty.asm
NESTING4:           097C DEFINED AT LINE 1504 IN monty.asm
                    > USED AT LINE 1499 IN monty.asm
                    > USED AT LINE 1501 IN monty.asm
PROMPT:             097E DEFINED AT LINE 1508 IN monty.asm
                    > USED AT LINE 1550 IN monty.asm
CRLF:               0987 DEFINED AT LINE 1513 IN monty.asm
                    > USED AT LINE 1619 IN monty.asm
PRINTSTR:           098E DEFINED AT LINE 1520 IN monty.asm
                    > USED AT LINE 1509 IN monty.asm
                    > USED AT LINE 1514 IN monty.asm
                    > USED AT LINE 1546 IN monty.asm
                    > USED AT LINE 1650 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 129
INIT:               0995 DEFINED AT LINE 1527 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1545 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              09AE DEFINED AT LINE 1537 IN monty.asm
                    > USED AT LINE 1540 IN monty.asm
START:              09B3 DEFINED AT LINE 1543 IN monty.asm
INTERPRET:          09C9 DEFINED AT LINE 1549 IN monty.asm
                    > USED AT LINE 1644 IN monty.asm
                    > USED AT LINE 1653 IN monty.asm
INTERPRET2:         09D3 DEFINED AT LINE 1555 IN monty.asm
                    > USED AT LINE 1599 IN monty.asm
INTERPRET3:         09DB DEFINED AT LINE 1562 IN monty.asm
                    > USED AT LINE 1571 IN monty.asm
INTERPRET4:         09E1 DEFINED AT LINE 1568 IN monty.asm
                    > USED AT LINE 1560 IN monty.asm
INTERPRET5:         09E6 DEFINED AT LINE 1574 IN monty.asm
                    > USED AT LINE 1608 IN monty.asm
                    > USED AT LINE 1622 IN monty.asm
INTERPRET6:         09F7 DEFINED AT LINE 1601 IN monty.asm
                    > USED AT LINE 1577 IN monty.asm
INTERPRET7:         0A05 DEFINED AT LINE 1610 IN monty.asm
                    > USED AT LINE 1582 IN monty.asm
INTERPRET8:         0A18 DEFINED AT LINE 1624 IN monty.asm
                    > USED AT LINE 1580 IN monty.asm
NEXT:               0A20 DEFINED AT LINE 1630 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1634 IN monty.asm
NEXT1:              0A2F DEFINED AT LINE 1641 IN monty.asm
                    > USED AT LINE 1635 IN monty.asm
EXIT_:              0A36 DEFINED AT LINE 1645 IN monty.asm
                    > USED AT LINE 1643 IN monty.asm
ERROR:              0A39 DEFINED AT LINE 1649 IN monty.asm
                    > USED AT LINE 1189 IN monty.asm
TESTSSTART:         0B00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2134S43:  0B65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2135S43:  0BCB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2136S43:  0C2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2137S43:  0C93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2138S43:  0CF7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2139S43:  0D5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2140S43:  0DC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2141S43:  0E29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2142S43:  0E8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2143S43:  0EF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2144S43:  0F5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2145S43:  0FC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2146S43:  102F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2147S43:  1097 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2148S43:  1105 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2149S43:  1173 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2150S43:  11DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2151S43:  124F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2152S43:  12C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2153S43:  1335 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2154S43:  13A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2155S43:  1417 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2156S43:  1493 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2157S43:  1503 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2158S43:  156F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2159S43:  15DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2160S43:  1651 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2161S43:  16CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2162S43:  1739 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2163S43:  17B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2164S43:  1821 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2165S43:  189D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2166S43:  1909 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2167S43:  1985 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2168S43:  19F1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2169S43:  1A6D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2170S43:  1AE1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2171S43:  1B4D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2172S43:  1BC9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2173S43:  1C39 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2174S43:  1CA5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2175S43:  1D13 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2176S43:  1D81 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2177S43:  1DED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2178S43:  1E59 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2179S43:  1EC5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2180S43:  1F31 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2181S43:  1F9D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2182S43:  2009 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2183S43:  2075 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2184S43:  20E1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2185S43:  214F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2186S43:  21BD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2187S43:  222B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2188S43:  229B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2189S43:  230B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2190S43:  2375 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2191S43:  23DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2192S43:  244F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2193S43:  24C5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2194S43:  253D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2195S43:  25B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2196S43:  2641 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2197S43:  26C9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2198S43:  2737 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2199S43:  27A7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2200S43:  2819 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2201S43:  288D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2202S43:  28FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2203S43:  2975 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2204S43:  29ED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2205S43:  2A6B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2206S43:  2AED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2207S43:  2B6B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2208S43:  2BF3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2209S43:  2C7D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2210S43:  2D0D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2211S43:  2DA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2212S43:  2E27 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2213S43:  2EB3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2214S43:  2F41 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2215S43:  2FD1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2216S43:  305F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2217S43:  30FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2218S43:  3185 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2219S43:  321B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2220S43:  32B3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2221S43:  334D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2222S43:  33F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2223S43:  34A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2224S43:  351D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2225S43:  3599 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2226S43:  3621 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2227S43:  36AD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2228S43:  3755 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2229S43:  3801 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2230S43:  38AD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2231S43:  393B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2232S43:  39D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2233S43:  3A6D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2234S43:  3B21 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2235S43:  3BBF DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3BCA DEFINED AT LINE 134
EXECSTR:            3BD0 DEFINED AT LINE 141
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3C80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 833 IN monty.asm
                    > USED AT LINE 1529 IN monty.asm
                    > USED AT LINE 1544 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3D00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1534 IN monty.asm
RESTARTS:           3DD0 DEFINED AT LINE 11 IN ram.asm
RST08:              3DD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              3DD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              3DD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              3DD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              3DD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              3DDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               3DDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             3DDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             3DE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            3DE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            3DE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            3DE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1531 IN monty.asm
VDATAWIDTH:         3DE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 506 IN monty.asm
                    > USED AT LINE 542 IN monty.asm
                    > USED AT LINE 569 IN monty.asm
                    > USED AT LINE 1295 IN monty.asm
VTIBPTR:            3DE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1553 IN monty.asm
                    > USED AT LINE 1625 IN monty.asm
VNEXT:              3DEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1528 IN monty.asm
VHEAPPTR:           3DEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 432 IN monty.asm
                    > USED AT LINE 463 IN monty.asm
                    > USED AT LINE 496 IN monty.asm
                    > USED AT LINE 528 IN monty.asm
                    > USED AT LINE 529 IN monty.asm
                    > USED AT LINE 634 IN monty.asm
                    > USED AT LINE 637 IN monty.asm
                    > USED AT LINE 1098 IN monty.asm
                    > USED AT LINE 1117 IN monty.asm
                    > USED AT LINE 1208 IN monty.asm
                    > USED AT LINE 1213 IN monty.asm
                    > USED AT LINE 1214 IN monty.asm
                    > USED AT LINE 1301 IN monty.asm
                    > USED AT LINE 1316 IN monty.asm
                    > USED AT LINE 1318 IN monty.asm
VBLOCKEND:          3DEE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           3DF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 342 IN monty.asm
                    > USED AT LINE 344 IN monty.asm
                    > USED AT LINE 345 IN monty.asm
                    > USED AT LINE 417 IN monty.asm
                    > USED AT LINE 549 IN monty.asm
                    > USED AT LINE 567 IN monty.asm
                    > USED AT LINE 964 IN monty.asm
VHASHSTR:           3DF2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           3DF4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            3DF6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 729 IN monty.asm
                    > USED AT LINE 1055 IN monty.asm
VTEMP1:             3DF8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 489 IN monty.asm
                    > USED AT LINE 530 IN monty.asm
                    > USED AT LINE 629 IN monty.asm
                    > USED AT LINE 638 IN monty.asm
                    > USED AT LINE 832 IN monty.asm
                    > USED AT LINE 838 IN monty.asm
                    > USED AT LINE 866 IN monty.asm
                    > USED AT LINE 887 IN monty.asm
                    > USED AT LINE 894 IN monty.asm
                    > USED AT LINE 900 IN monty.asm
                    > USED AT LINE 1209 IN monty.asm
                    > USED AT LINE 1212 IN monty.asm
VTEMP2:             3DFA DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 867 IN monty.asm
                    > USED AT LINE 888 IN monty.asm
TBPTR:              3DFC DEFINED AT LINE 43 IN ram.asm
TIB:                3E00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1559 IN monty.asm
                    > USED AT LINE 1602 IN monty.asm
                    > USED AT LINE 1611 IN monty.asm
                    > USED AT LINE 1626 IN monty.asm
PAD:                3F00 DEFINED AT LINE 49 IN ram.asm
HEAP:               4000 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 622 IN monty.asm
