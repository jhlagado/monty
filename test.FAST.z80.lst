0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 50               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 50               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 50               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 50               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 50               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 50               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 50               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 50               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 50               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 50               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4E               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 50               LD   (RST08),HL   
0094   22 D2 50               LD   (RST10),HL   
0097   22 D4 50               LD   (RST18),HL   
009A   22 D6 50               LD   (RST20),HL   
009D   22 D8 50               LD   (RST28),HL   
00A0   22 DA 50               LD   (RST30),HL   
00A3   22 DE 50               LD   (INTVEC),HL   
00A6   22 E0 50               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 50               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 50               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0E               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4E                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4F                  DW   BUF   ; vBUFPtr pointer into BUF
0188   C9 0C                  DW   next   ; nNext
018A   1E 51                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ ` _
0200   7F                     DB   lsb(nop_)   ; SP
0201   36                     DB   lsb(bang_)   ; !
0202   4A                     DB   lsb(dquote_)   ; "
0203   3E                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   81                     DB   lsb(rparen_)   ; )
020A   33                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   47                     DB   lsb(comma_)   ; ,
020D   4D                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7C                     DB   lsb(slash_)   ; /	
0210   3B                     DB   lsb(num_)   ; 0
0211   3B                     DB   lsb(num_)   ; 1
0212   3B                     DB   lsb(num_)   ; 2
0213   3B                     DB   lsb(num_)   ; 3
0214   3B                     DB   lsb(num_)   ; 4
0215   3B                     DB   lsb(num_)   ; 5
0216   3B                     DB   lsb(num_)   ; 6
0217   3B                     DB   lsb(num_)   ; 7
0218   3B                     DB   lsb(num_)   ; 8
0219   3B                     DB   lsb(num_)   ; 9
021A   27                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6A                     DB   lsb(lt_)   ; <
021D   50                     DB   lsb(eq_)   ; =
021E   5F                     DB   lsb(gt_)   ; >
021F   30                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2A                     DB   lsb(upcase_)   ; A
0222   2A                     DB   lsb(upcase_)   ; B
0223   2A                     DB   lsb(upcase_)   ; C
0224   2A                     DB   lsb(upcase_)   ; D
0225   2A                     DB   lsb(upcase_)   ; E
0226   2A                     DB   lsb(upcase_)   ; F
0227   2A                     DB   lsb(upcase_)   ; G
0228   2A                     DB   lsb(upcase_)   ; h
0229   2A                     DB   lsb(upcase_)   ; I
022A   2A                     DB   lsb(upcase_)   ; J
022B   2A                     DB   lsb(upcase_)   ; K
022C   2A                     DB   lsb(upcase_)   ; L
022D   2A                     DB   lsb(upcase_)   ; M
022E   2A                     DB   lsb(upcase_)   ; N
022F   2A                     DB   lsb(upcase_)   ; O
0230   2A                     DB   lsb(upcase_)   ; p
0231   2A                     DB   lsb(upcase_)   ; Q
0232   2A                     DB   lsb(upcase_)   ; R
0233   2A                     DB   lsb(upcase_)   ; S
0234   2A                     DB   lsb(upcase_)   ; T
0235   2A                     DB   lsb(upcase_)   ; U
0236   2A                     DB   lsb(upcase_)   ; V
0237   2A                     DB   lsb(upcase_)   ; W
0238   2A                     DB   lsb(upcase_)   ; X
0239   2A                     DB   lsb(upcase_)   ; Y
023A   2A                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   44                     DB   lsb(caret_)   ; ^
023F   7F                     DB   lsb(nop_)   ; _
0240   4A                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2D                     DB   lsb(lowcase_)   ; a
0242   2D                     DB   lsb(lowcase_)   ; b
0243   2D                     DB   lsb(lowcase_)   ; c
0244   2D                     DB   lsb(lowcase_)   ; d
0245   2D                     DB   lsb(lowcase_)   ; e
0246   2D                     DB   lsb(lowcase_)   ; f
0247   2D                     DB   lsb(lowcase_)   ; g
0248   2D                     DB   lsb(lowcase_)   ; h
0249   2D                     DB   lsb(lowcase_)   ; i
024A   2D                     DB   lsb(lowcase_)   ; j
024B   2D                     DB   lsb(lowcase_)   ; k
024C   2D                     DB   lsb(lowcase_)   ; l
024D   2D                     DB   lsb(lowcase_)   ; m
024E   2D                     DB   lsb(lowcase_)   ; n
024F   2D                     DB   lsb(lowcase_)   ; o
0250   2D                     DB   lsb(lowcase_)   ; p
0251   2D                     DB   lsb(lowcase_)   ; q
0252   2D                     DB   lsb(lowcase_)   ; r
0253   2D                     DB   lsb(lowcase_)   ; s
0254   2D                     DB   lsb(lowcase_)   ; t
0255   2D                     DB   lsb(lowcase_)   ; u
0256   2D                     DB   lsb(lowcase_)   ; v
0257   2D                     DB   lsb(lowcase_)   ; w
0258   2D                     DB   lsb(lowcase_)   ; x
0259   2D                     DB   lsb(lowcase_)   ; y
025A   2D                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   41                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   7F                     DB   lsb(nop_)   ; ~
025F   7F                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 84 03               JP   plus   
0303                AT_:         
0303   C3 96 03               JP   at   
0306                AMPER_:      
0306   C3 A0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 E4 06               JP   dollar   
030C                LBRACK_:      
030C   C3 F9 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 15 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 C4 03               JP   percent   
0315                BACKSLASH_:      
0315   C3 9E 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 C4 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 2D 05               JP   rbrace   
031E                TICK_:       
031E   C3 89 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 85 07               JP   semicolon   
0324                DOT_:        
0324   C3 F9 05               JP   dot   
0327                COLON_:      
0327   C3 8E 04               JP   colon   
032A                UPCASE_:      
032A   C3 01 07               JP   upcase   
032D                LOWCASE_:      
032D   C3 06 07               JP   lowcase   
0330                QUESTION_:      
0330   C3 18 07               JP   question   
0333                STAR_:       
0333   C3 31 07               JP   star   
0336                BANG_:       ; logical invert, any non zero value
0336   21 00 00               LD   hl,0   ; is considered true
0339   18 20                  JR   eq1   
033B                NUM_:        
033B   C3 4D 07               JP   num   
033E                HASH_:       
033E   C3 65 04               JP   hash   
0341                PIPE_:       
0341   C3 AB 03               JP   pipe   
0344                CARET_:      
0344   C3 45 06               JP   caret   
0347                COMMA_:      
0347   C3 A0 05               JP   comma   
034A                DQUOTE_:      
034A   C3 44 08               JP   dquote   
034D                MINUS_:      
034D   C3 6C 08               JP   minus   
0350                EQ_:         
0350   03                     INC   bc   
0351   0A                     LD   a,(bc)   ; is it == ?
0352   FE 3D                  CP   "="   
0354   28 04                  JR   z,eq0   ; no its equality
0356   0B                     DEC   bc   
0357   C3 7D 04               JP   assign   ; no its assignment
035A                EQ0:         
035A   E1                     POP   hl   
035B                EQ1:         
035B   D1                     POP   de   
035C   C3 24 06               JP   equals   
035F                GT_:         
035F   03                     INC   bc   
0360   0A                     LD   a,(bc)   
0361   FE 3E                  CP   ">"   
0363   CA 31 08               JP   z,shiftRight   
0366   D1                     POP   de   
0367   E1                     POP   hl   
0368   18 09                  JR   lt1   
036A                LT_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   
036C   FE 3C                  CP   "<"   
036E   CA 21 08               JP   z,shiftLeft   
0371   E1                     POP   hl   
0372   D1                     POP   de   
0373                LT1:         
0373   FE 3D                  CP   "="   
0375   CA 2C 06               JP   z,lessthaneq   
0378   0B                     DEC   bc   
0379   C3 31 06               JP   lessthan   
037C                SLASH_:      
037C   C3 AF 05               JP   slash   
037F                NOP_:        
037F   DD E9                  JP   (ix)   
0381                RPAREN_:      
0381   C3 7D 07               JP   rparen   
0384                             ;*******************************************************************
0384                             ; implementations
0384                             ;*******************************************************************
0384                PLUS:        
0384                ADD:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 2B                  CP   "+"   ; ++ increment variable
0388   20 05                  JR   nz,add1   
038A   E1                     POP   hl   
038B   23                     INC   hl   
038C   C3 7F 04               JP   assign0   
038F                ADD1:        
038F   0B                     DEC   bc   
0390   D1                     POP   de   ; second term
0391   E1                     POP   hl   ; first term
0392   19                     ADD   hl,de   
0393                ADD3:        
0393   E5                     PUSH   hl   
0394   DD E9                  JP   (ix)   
0396                             ; @ addr
0396                             ; -- ptr
0396                AT:          
0396                ADDR:        
0396   ED 5B F2 50            LD   de,(vPointer)   
039A   21 F2 50               LD   hl,vPointer   
039D   C3 CF 0A               JP   variable   
03A0                AMPER:       
03A0                AND:         
03A0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A1   E1                     POP   hl   
03A2   7B                     LD   a,e   
03A3   A5                     AND   l   
03A4   6F                     LD   l,a   
03A5   7A                     LD   a,d   
03A6   A4                     AND   h   
03A7                AND1:        
03A7   67                     LD   h,a   
03A8   E5                     PUSH   hl   
03A9   DD E9                  JP   (ix)   
03AB                PIPE:        
03AB                OR:          
03AB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AC   E1                     POP   hl   
03AD   7B                     LD   a,e   
03AE   B5                     OR   l   
03AF   6F                     LD   l,a   
03B0   7A                     LD   a,d   
03B1   B4                     OR   h   
03B2   18 F3                  JR   and1   
03B4                XOR:         
03B4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B5                XOR1:        
03B5   E1                     POP   hl   
03B6   7B                     LD   a,e   
03B7   AD                     XOR   l   
03B8   6F                     LD   l,a   
03B9   7A                     LD   a,d   
03BA   AC                     XOR   h   
03BB   67                     LD   h,a   
03BC   E5                     PUSH   hl   
03BD   DD E9                  JP   (ix)   
03BF                INVERT:      ; Bitwise INVert the top member of the stack
03BF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C2   18 F1                  JR   xor1   
03C4                             ; %a .. %z
03C4                             ; -- value
03C4                             ; returns value of arg
03C4                PERCENT:      
03C4                ARG:         
03C4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03C7   FD 56 05               LD   d,(iy+5)   
03CA   EB                     EX   de,hl   
03CB   7D                     LD   a,l   ; arg_list* == null, skip
03CC   B4                     OR   h   
03CD   28 1A                  JR   z,arg0a   
03CF   23                     INC   hl   ; a = num_args, hl = arg_list*
03D0   7E                     LD   a,(hl)   
03D1   23                     INC   hl   
03D2   B7                     OR   a   
03D3   28 14                  JR   z,arg0a   ; num_args == 0, skip
03D5   5F                     LD   e,a   ; e = a = num_args
03D6   03                     INC   bc   ; a = next char = dollar_name
03D7   0A                     LD   a,(bc)   
03D8   C5                     PUSH   bc   ; save IP
03D9   43                     LD   b,e   ; b = e = num_args
03DA   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03DD   FD 56 03               LD   d,(iy+3)   
03E0                ARG0:        
03E0   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E1   1B                     DEC   de   
03E2   BE                     CP   (hl)   
03E3   28 09                  JR   z,arg1   
03E5   23                     INC   hl   ; hl = next arg_list*
03E6   10 F8                  DJNZ   arg0   
03E8   C1                     POP   bc   ; no match, restore IP
03E9                ARG0A:       
03E9   11 00 00               LD   de,0   ; return 0
03EC   18 08                  JR   arg1a   
03EE                ARG1:        
03EE   C1                     POP   bc   ; restore IP
03EF   EB                     EX   de,hl   ; hl = arg*
03F0   22 F2 50               LD   (vPointer),hl   ; store arg* in setter
03F3   5E                     LD   e,(hl)   
03F4   23                     INC   hl   
03F5   56                     LD   d,(hl)   ; de = arg
03F6                ARG1A:       
03F6   D5                     PUSH   de   ; push arg
03F7   DD E9                  JP   (ix)   
03F9                LBRACK:      
03F9                ARRAYSTART:      
03F9   11 00 00               LD   de,0   ; create stack frame
03FC   D5                     PUSH   de   ; push null for IP
03FD   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0400   FD 56 05               LD   d,(iy+5)   ; 
0403   D5                     PUSH   de   ; 
0404   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0407   FD 56 03               LD   d,(iy+3)   ; 
040A   D5                     PUSH   de   ; 
040B   FD E5                  PUSH   iy   ; push BP
040D   FD 21 00 00            LD   iy,0   ; BP = SP
0411   FD 39                  ADD   iy,sp   
0413   DD E9                  JP   (ix)   
0415                RBRACK:      
0415                ARRAYEND:      
0415   FD 54                  LD   d,iyh   ; de = BP
0417   FD 5D                  LD   e,iyl   
0419   ED 43 00 51            LD   (vTemp1),bc   ; save IP
041D   62 6B                  LD   hl,de   ; hl = de = BP
041F   B7                     OR   a   
0420   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0422   CB 3C                  SRL   h   ; 
0424   CB 1D                  RR   l   
0426   44 4D                  LD   bc,hl   ; bc = count
0428   2A F0 50               LD   hl,(vHeapPtr)   ; hl = array[-4]
042B   71                     LD   (hl),c   ; write num items in length word
042C   23                     INC   hl   
042D   70                     LD   (hl),b   
042E   23                     INC   hl   ; hl = array[0], bc = count
042F                             ; de = BP, hl = array[0], bc = count
042F   18 15                  JR   arrayEnd3   
0431                ARRAYEND1:      
0431   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0434   77                     LD   (hl),a   ; write lsb of array item
0435   23                     INC   hl   ; move to msb of array item
0436   3A E6 50               LD   a,(vDataWidth)   ; vDataWidth=1?
0439   3D                     DEC   a   
043A   28 05                  JR   z,arrayEnd2   
043C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
043F   77                     LD   (hl),a   ; write msb of array item
0440   23                     INC   hl   ; move to next word in array
0441                ARRAYEND2:      
0441   FD 2B                  DEC   iy   ; move to next word on stack
0443   FD 2B                  DEC   iy   
0445   0B                     DEC   bc   ; dec items count
0446                ARRAYEND3:      
0446   79                     LD   a,c   ; if not zero loop
0447   B0                     OR   b   
0448   20 E7                  JR   nz,arrayEnd1   
044A   EB                     EX   de,hl   ; de = end of array, hl = BP
044B   F9                     LD   sp,hl   ; sp = BP
044C   E1                     POP   hl   ; de = end of array, hl = old BP
044D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
044E   FD 62                  LD   iyh,d   
0450   FD 6B                  LD   iyl,e   
0452   D1                     POP   de   ; pop arg_list (discard)
0453   D1                     POP   de   ; pop first_arg* (discard)
0454   D1                     POP   de   ; pop IP (discard)
0455   ED 5B F0 50            LD   de,(vHeapPtr)   ; de = array[-2]
0459   13                     INC   de   
045A   13                     INC   de   
045B   D5                     PUSH   de   ; return array[0]
045C   22 F0 50               LD   (vHeapPtr),hl   ; move heap* to end of array
045F   ED 4B 00 51            LD   bc,(vTemp1)   ; restore IP
0463   DD E9                  JP   (ix)   
0465                             ; index of an array, based on vDataWidth
0465                             ; array num -- value    ; also sets vPointer to address
0465                HASH:        
0465                ARRAYINDEX:      
0465   E1                     POP   hl   ; hl = index
0466   D1                     POP   de   ; de = array
0467   3A E6 50               LD   a,(vDataWidth)   ; a = data width
046A   3D                     DEC   a   
046B   28 01                  JR   z,arrayIndex1   
046D                ARRAYINDEX0:      
046D   29                     ADD   hl,hl   ; if data width = 2 then double
046E                ARRAYINDEX1:      
046E   19                     ADD   hl,de   ; add addr
046F   22 F2 50               LD   (vPointer),hl   ; store address in setter
0472   16 00                  LD   d,0   
0474   5E                     LD   e,(hl)   
0475   B7                     OR   a   ; check data width again
0476   28 02                  JR   z,arrayIndex2   
0478   23                     INC   hl   
0479   56                     LD   d,(hl)   
047A                ARRAYINDEX2:      
047A   D5                     PUSH   de   
047B   DD E9                  JP   (ix)   
047D                             ; value _oldValue --            ; uses address in vPointer
047D                ASSIGN:      
047D   E1                     POP   hl   ; discard last accessed value
047E   E1                     POP   hl   ; hl = new value
047F                ASSIGN0:      
047F   EB                     EX   de,hl   ; de = new value
0480                ASSIGNX:      
0480   2A F2 50               LD   hl,(vPointer)   
0483   73                     LD   (hl),e   
0484   3A E6 50               LD   a,(vDataWidth)   
0487   3D                     DEC   a   ; is it byte?
0488   28 02                  JR   z,assign1   
048A   23                     INC   hl   
048B   72                     LD   (hl),d   
048C                ASSIGN1:      
048C   DD E9                  JP   (ix)   
048E                             ; arg_list - parses input (ab:c)
048E                             ; names after the : represent uninitialised locals
048E                             ; return values are the state of the stack after the block ends
048E                             ; format: numLocals totNumArgs argChars...
048E                COLON:       
048E                ARGLIST:      
048E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0491   2A F0 50               LD   hl,(vHeapPtr)   ; hl = heap*
0494   E5                     PUSH   hl   ; save start of arg_list
0495   23                     INC   hl   ; skip length fields to start of string
0496   23                     INC   hl   
0497   03                     INC   bc   ; point to next char
0498                ARGLIST1:      
0498   0A                     LD   a,(bc)   
0499   FE 3A                  CP   ":"   ; ":" switches from args to locals
049B   20 03                  JR   nz,arglist1a   
049D   14                     INC   d   ; non zero value local count acts as flag
049E   18 10                  JR   arglist3   
04A0                ARGLIST1A:      
04A0   FE 61                  CP   "a"   ; < "a" terminates arg_list
04A2   38 0F                  JR   c,arglist4   
04A4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04A6   30 0B                  JR   nc,arglist4   
04A8                ARGLIST2:      
04A8   77                     LD   (hl),a   
04A9   23                     INC   hl   
04AA   1C                     INC   e   ; increase arg count
04AB   AF                     XOR   a   
04AC   B2                     OR   d   
04AD   28 01                  JR   z,arglist3   
04AF   14                     INC   d   ; if d > 0 increase local count
04B0                ARGLIST3:      
04B0   03                     INC   bc   ; point to next char
04B1   18 E5                  JR   arglist1   
04B3                ARGLIST4:      
04B3   0B                     DEC   bc   
04B4   AF                     XOR   a   
04B5   B2                     OR   d   
04B6   28 01                  JR   z,arglist5   
04B8   15                     DEC   d   ; remove initial inc
04B9                ARGLIST5:      
04B9   23                     INC   hl   
04BA   22 F0 50               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04BD   E1                     POP   hl   ; hl = start of arg_list
04BE   E5                     PUSH   hl   ; return start of arg_list
04BF   72                     LD   (hl),d   ; write number of locals at start - 1
04C0   23                     INC   hl   
04C1   73                     LD   (hl),e   ; write number of args + locals at start - 2
04C2   DD E9                  JP   (ix)   
04C4                LBRACE:      
04C4                BLOCKSTART:      
04C4   C5                     PUSH   bc   ; return pointer to first { of block
04C5   03                     INC   bc   
04C6   16 01                  LD   d,1   ; nesting: count first parenthesis
04C8                BLOCKSTART1:      ; Skip to end of definition
04C8   0A                     LD   a,(bc)   ; Get the next character
04C9   03                     INC   bc   ; Point to next character
04CA   FE 21                  CP   " " + 1   ; ignore whitespace
04CC   38 FA                  JR   c,blockStart1   
04CE   FE 29                  CP   ")"   
04D0   28 2D                  JR   z,blockStart4   
04D2   FE 7D                  CP   "}"   
04D4   28 29                  JR   z,blockStart4   
04D6   FE 5D                  CP   "]"   
04D8   28 25                  JR   z,blockStart4   
04DA   FE 28                  CP   "("   
04DC   28 16                  JR   z,blockStart2   
04DE   FE 7B                  CP   "{"   
04E0   28 12                  JR   z,blockStart2   
04E2   FE 5B                  CP   "["   
04E4   28 0E                  JR   z,blockStart2   
04E6   FE 27                  CP   "'"   
04E8   28 0D                  JR   z,blockStart3   
04EA   FE 60                  CP   "`"   
04EC   28 09                  JR   z,blockStart3   
04EE   FE 22                  CP   DQ   
04F0   28 05                  JR   z,blockStart3   
04F2   18 D4                  JR   blockStart1   
04F4                BLOCKSTART2:      
04F4   14                     INC   d   
04F5   18 D1                  JR   blockStart1   
04F7                BLOCKSTART3:      
04F7   3E 80                  LD   a,$80   
04F9   AA                     XOR   d   
04FA   57                     LD   d,a   
04FB   20 CB                  JR   nz,blockStart1   
04FD   18 03                  JR   blockStart5   
04FF                BLOCKSTART4:      
04FF   15                     DEC   d   
0500   20 C6                  JR   nz,blockStart1   ; get the next element
0502                BLOCKSTART5:      
0502   60 69                  LD   hl,bc   ; hl = IP
0504   11 1E 51               LD   de,HEAP   ; is IP pointing to object in heap
0507   B7                     OR   a   ; IP - HEAP
0508   ED 52                  SBC   hl,de   
050A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
050C   28 1C                  JR   z,blockStart6   
050E   60 69                  LD   hl,bc   ; hl = IP
0510   D1                     POP   de   ; de = block*
0511   ED 43 00 51            LD   (vTemp1),bc   ; save IP
0515   B7                     OR   a   ; bc = size
0516   ED 52                  SBC   hl,de   
0518   44 4D                  LD   bc,hl   
051A   EB                     EX   de,hl   ; hl = block* de = heap*
051B   ED 5B F0 50            LD   de,(vHeapPtr)   
051F   D5                     PUSH   de   ; return hblock*
0520   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0522   ED 53 F0 50            LD   (vHeapPtr),de   ; heap* += size
0526   ED 4B 00 51            LD   bc,(vTemp1)   ; restore IP
052A                BLOCKSTART6:      
052A   0B                     DEC   bc   ; balanced, exit
052B   DD E9                  JP   (ix)   
052D                RBRACE:      
052D                BLOCKEND:      
052D   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0530   FD 56 01               LD   d,(iy+1)   
0533   ED 53 00 51            LD   (vTemp1),de   
0537   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
053A   FD 56 07               LD   d,(iy+7)   
053D   ED 53 02 51            LD   (vTemp2),de   
0541   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0544   FD 56 03               LD   d,(iy+3)   
0547   EB                     EX   de,hl   
0548   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054B   FD 56 01               LD   d,(iy+1)   
054E   13                     INC   de   ; for carry flag <=
054F   B7                     OR   a   
0550   ED 52                  SBC   hl,de   
0552   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0554   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0556   FD 5D                  LD   e,iyl   
0558   21 08 00               LD   hl,8   
055B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055D   18 0C                  JR   blockEnd2   
055F                BLOCKEND1:      ; same scope
055F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0562   FD 56 03               LD   d,(iy+3)   
0565   EB                     EX   de,hl   
0566   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0568   FD 5D                  LD   e,iyl   
056A   EB                     EX   de,hl   
056B                BLOCKEND2:      
056B   44 4D                  LD   bc,hl   ; bc = hl = BP
056D   B7                     OR   a   ; hl = BP - SP = count
056E   ED 72                  SBC   hl,sp   
0570   7D                     LD   a,l   
0571   B4                     OR   h   
0572   28 09                  JR   z,blockEnd3   
0574   C5                     PUSH   bc   ; bc = count, hl = BP
0575   44 4D                  LD   bc,hl   
0577   E1                     POP   hl   
0578   2B                     DEC   hl   ; hl = BP-1
0579   1B                     DEC   de   ; de = args*-1
057A   ED B8                  LDDR      
057C   13                     INC   de   
057D                BLOCKEND3:      
057D   EB                     EX   de,hl   ; sp = de = new tos*
057E   F9                     LD   sp,hl   
057F   ED 4B 02 51            LD   bc,(vTemp2)   
0583   FD 2A 00 51            LD   iy,(vTemp1)   
0587   DD E9                  JP   (ix)   
0589                TICK:        
0589                CHAR:        
0589   21 00 00               LD   hl,0   ; if "" is empty or null
058C                CHAR1:       
058C   03                     INC   bc   ; point to next char
058D   0A                     LD   a,(bc)   
058E   FE 27                  CP   "'"   ; ' is the terminator
0590   28 09                  JR   z,char3   
0592   FE 5C                  CP   $5c   ; \ is the escape
0594   20 02                  JR   nz,char2   
0596   03                     INC   bc   
0597   0A                     LD   a,(bc)   
0598                CHAR2:       
0598   6F                     LD   l,a   
0599   18 F1                  JR   char1   
059B                CHAR3:       
059B   E5                     PUSH   hl   
059C   DD E9                  JP   (ix)   
059E                BACKSLASH:      
059E   DD E9                  JP   (ix)   
05A0                             ; , discard stack item
05A0                             ; x y -- x
05A0                COMMA:       
05A0                DISCARD:      
05A0   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A2   FD 5D                  LD   e,iyl   
05A4   EB                     EX   de,hl   
05A5   B7                     OR   a   
05A6   ED 72                  SBC   hl,sp   
05A8   CB 7C                  BIT   7,h   
05AA   20 01                  JR   nz,discard1   
05AC   E1                     POP   hl   
05AD                DISCARD1:      
05AD   DD E9                  JP   (ix)   
05AF                SLASH:       
05AF                COMMAND:      
05AF   CD 65 0B               CALL   jumpTable   
05B2   2F                     DB   "/"   ; // comment
05B3   92 08                  DW   comment   
05B5   61                     DB   "a"   
05B6   9B 08                  DW   command_a   
05B8   62                     DB   "b"   
05B9   D5 08                  DW   command_b   
05BB   63                     DB   "c"   ; /c chars
05BC   D5 0A                  DW   chars   
05BE   64                     DB   "d"   ; /d decimal
05BF   DD 0A                  DW   decimal   
05C1   66                     DB   "f"   ; /f false
05C2   3F 06                  DW   false1   
05C4   68                     DB   "h"   ; /h hexadecimal
05C5   E5 0A                  DW   hexadecimal   
05C7   69                     DB   "i"   
05C8   24 0A                  DW   command_i   
05CA   6B                     DB   "k"   ; /k key
05CB   F6 0A                  DW   key   
05CD   6E                     DB   "n"   ; /n numbers
05CE   08 0B                  DW   numbers   
05D0   6F                     DB   "o"   ; /o output
05D1   FF 0A                  DW   output   
05D3   70                     DB   "p"   
05D4   30 0A                  DW   command_p   
05D6   72                     DB   "r"   
05D7   79 0A                  DW   command_r   
05D9   73                     DB   "s"   ; /s size
05DA   88 0A                  DW   size   
05DC   74                     DB   "t"   ; /t true
05DD   39 06                  DW   true1   
05DF   76                     DB   "v"   
05E0   90 0A                  DW   command_v   
05E2   78                     DB   "x"   ; /x xor
05E3   B4 03                  DW   xor   
05E5   00                     DB   NUL   
05E6   E8 05                  DW   div   
05E8                DIV:         
05E8   D1                     POP   de   
05E9   E1                     POP   hl   
05EA   C5                     PUSH   bc   ; preserve the IP
05EB   44 4D                  LD   bc,hl   
05ED   CD 0B 06               CALL   divide   
05F0   EB                     EX   de,hl   
05F1   ED 53 F4 50            LD   (vRemain),de   
05F5   C1                     POP   bc   
05F6   C3 93 03               JP   add3   
05F9                DOT:         
05F9   CD 65 0B               CALL   jumpTable   
05FC   61                     DB   "a"   ; .a print array
05FD   E1 08                  DW   bufferArray   
05FF   63                     DB   "c"   ; .c print char
0600   03 0A                  DW   bufferChar   
0602   73                     DB   "s"   ; .s print string
0603   E9 09                  DW   bufferString   
0605   78                     DB   "x"   ; .x print x chars
0606   08 0A                  DW   bufferXChars   
0608   00                     DB   NUL   ; .  print number
0609   2A 09                  DW   bufferNumber   
060B                             ; division subroutine.
060B                             ; bc: divisor, de: dividend, hl: remainder
060B                DIVIDE:      
060B   21 00 00               LD   hl,0   ; zero the remainder
060E   3E 10                  LD   a,16   ; loop counter
0610                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0610   CB 21                  SLA   c   
0612   CB 10                  RL   b   
0614   ED 6A                  ADC   hl,hl   
0616   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0618   38 03                  JR   c,divide2   
061A   0C                     INC   c   
061B   18 01                  JR   divide3   
061D                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
061D   19                     ADD   hl,de   
061E                DIVIDE3:      
061E   3D                     DEC   a   
061F   20 EF                  JR   nz,divide1   
0621   50 59                  LD   de,bc   ; result from bc to de
0623   C9                     RET      
0624                             ; hl = value1, de = value2
0624                             ; hl = result
0624                EQUALS:      
0624   B7                     OR   a   ; reset the carry flag
0625   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0627   28 10                  JR   z,true1   
0629   C3 3F 06               JP   false1   
062C                             ; hl = value1 de = value2
062C                             ; hl = result
062C                LESSTHANEQ:      
062C   B7                     OR   a   
062D   ED 52                  SBC   hl,de   
062F   18 05                  JR   lessthan1   
0631                             ; hl = value1 de = value2
0631                             ; hl = result
0631                LESSTHAN:      
0631   B7                     OR   a   
0632   ED 52                  SBC   hl,de   
0634   28 09                  JR   z,false1   
0636                LESSTHAN1:      
0636   FA 3F 06               JP   m,false1   
0639                TRUE1:       
0639   21 FF FF               LD   hl,TRUE   
063C   E5                     PUSH   hl   
063D   DD E9                  JP   (ix)   
063F                NULL1:       
063F                FALSE1:      
063F   21 00 00               LD   hl,FALSE   
0642   E5                     PUSH   hl   
0643   DD E9                  JP   (ix)   
0645                             ; execute a block of code which ends with }
0645                             ; creates a root scope if BP == stack
0645                             ; else uses outer scope
0645                CARET:       
0645                GO:          
0645   D1                     POP   de   ; de = block*
0646                GO1:         
0646   7B                     LD   a,e   ; if block* == null, exit
0647   B2                     OR   d   
0648   20 02                  JR   nz,go2   
064A   DD E9                  JP   (ix)   
064C                GO2:         
064C   1A                     LD   a,(de)   
064D   FE 7B                  CP   "{"   
064F   28 06                  JR   z,goBlock1   
0651   FE 28                  CP   "("   
0653   C2 8A 06               JP   nz,goFunc   
0656                             ; inc de                      ; de is the address to jump back to
0656   D5                     PUSH   de   ; push de just before stack frame
0657                GOBLOCK:      
0657                GOBLOCK1:      
0657   ED 53 00 51            LD   (vTemp1),de   ; save de
065B   21 00 4E               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
065E   FD 54                  LD   d,iyh   
0660   FD 5D                  LD   e,iyl   
0662   B7                     OR   a   ; if stack* == BP then this is the root_scope
0663   ED 52                  SBC   hl,de   
0665   ED 5B 00 51            LD   de,(vTemp1)   ; restore de
0669   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
066A   B4                     OR   h   
066B   3E 00                  LD   a,0   
066D   28 6A                  JR   z,goFunc8   
066F   C5                     PUSH   bc   ; push IP
0670   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0673   FD 46 05               LD   b,(iy+5)   
0676   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0679   FD 66 03               LD   h,(iy+3)   
067C                GOBLOCK2:      
067C   C5                     PUSH   bc   ; arg_list*
067D   E5                     PUSH   hl   ; first_arg*
067E   FD E5                  PUSH   iy   ; push BP
0680   FD 21 00 00            LD   iy,0   ; BP = SP
0684   FD 39                  ADD   iy,sp   
0686   42 4B                  LD   bc,de   ; bc = de = block*-1
0688   DD E9                  JP   (ix)   
068A                GOFUNC:      ; execute func
068A   EB                     EX   de,hl   ; hl = func*
068B   5E                     LD   e,(hl)   ; de = partial_array*
068C   23                     INC   hl   
068D   56                     LD   d,(hl)   
068E   23                     INC   hl   
068F   7B                     LD   a,e   ; if partial_array* == null skip
0690   B2                     OR   d   
0691   28 21                  JR   z,goFunc3   
0693   ED 43 00 51            LD   (vTemp1),bc   
0697   22 02 51               LD   (vTemp2),hl   ; save bc,hl
069A   EB                     EX   de,hl   ; hl = partial_array*
069B   2B                     DEC   hl   ; bc = count
069C   46                     LD   b,(hl)   
069D   2B                     DEC   hl   
069E   4E                     LD   c,(hl)   
069F   23                     INC   hl   ; hl = array data*
06A0   23                     INC   hl   
06A1   18 06                  JR   goFunc2   ; push each item on stack
06A3                GOFUNC1:      
06A3   5E                     LD   e,(hl)   ; de = partial item
06A4   23                     INC   hl   
06A5   56                     LD   d,(hl)   
06A6   23                     INC   hl   
06A7   D5                     PUSH   de   ; push on stack
06A8   0B                     DEC   bc   
06A9                GOFUNC2:      
06A9   79                     LD   a,c   ; if count != 0 then loop
06AA   B0                     OR   b   
06AB   20 F6                  JR   nz,goFunc1   
06AD   ED 4B 00 51            LD   bc,(vTemp1)   ; restore bc
06B1   2A 02 51               LD   hl,(vTemp2)   ; restore hl
06B4                GOFUNC3:      
06B4   5E                     LD   e,(hl)   ; de = block*
06B5   23                     INC   hl   
06B6   56                     LD   d,(hl)   
06B7   23                     INC   hl   
06B8   ED 53 00 51            LD   (vTemp1),de   ; save block*
06BC   5E                     LD   e,(hl)   ; de = arg_list*
06BD   23                     INC   hl   
06BE   56                     LD   d,(hl)   
06BF   23                     INC   hl   
06C0   EB                     EX   de,hl   ; hl = arg_list*
06C1   ED 5B 00 51            LD   de,(vTemp1)   ; restore de = block*
06C5   7D                     LD   a,l   ; if arg_list* == null a = 0
06C6   B4                     OR   h   
06C7   20 03                  JR   nz,goFunc4   
06C9   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
06CA   18 0D                  JR   goFunc8   
06CC                GOFUNC4:      ; allocate locals
06CC   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
06CD   18 03                  JR   goFunc6   
06CF                GOFUNC5:      ; loop
06CF   3B                     DEC   sp   
06D0   3B                     DEC   sp   
06D1   3D                     DEC   a   
06D2                GOFUNC6:      
06D2   B7                     OR   a   
06D3   20 FA                  JR   nz,goFunc5   ; end loop
06D5                GOFUNC7:      
06D5   23                     INC   hl   ; a = num_args* x 2
06D6   7E                     LD   a,(hl)   
06D7   2B                     DEC   hl   
06D8   87                     ADD   a,a   ; a *= 2
06D9                GOFUNC8:      
06D9   C5                     PUSH   bc   ; push IP
06DA   44 4D                  LD   bc,hl   
06DC   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DF   85                     ADD   a,l   
06E0   6F                     LD   l,a   
06E1   39                     ADD   hl,sp   
06E2   18 98                  JR   goBlock2   
06E4                DOLLAR:      
06E4                HEXNUM:      
06E4   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E7                HEXNUM1:      
06E7   03                     INC   bc   
06E8   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E9   CB 77                  BIT   6,a   ; is it uppercase alpha?
06EB   28 02                  JR   z,hexnum2   ; no a decimal
06ED   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EF                HEXNUM2:      
06EF   D6 30                  SUB   $30   ; form decimal digit
06F1   DA 6F 07               JP   c,num2   
06F4   FE 10                  CP   $0F+1   
06F6   D2 6F 07               JP   nc,num2   
06F9   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06FA   29                     ADD   hl,hl   ; 4X
06FB   29                     ADD   hl,hl   ; 8X
06FC   29                     ADD   hl,hl   ; 16X
06FD   85                     ADD   a,l   ; add into bottom of hl
06FE   6F                     LD   l,a   
06FF   18 E6                  JR   hexnum1   
0701                UPCASE:      
0701   0A                     LD   a,(bc)   ; a = identifier char
0702   D6 41                  SUB   "A"   ; "A" = 0
0704   18 05                  JR   ident1   
0706                LOWCASE:      
0706   0A                     LD   a,(bc)   
0707   D6 61                  SUB   "a"   
0709   C6 1A                  ADD   a,26   
070B                IDENT1:      
070B   87                     ADD   a,a   ; l = a * 2
070C   6F                     LD   l,a   
070D   26 50                  LD   h,msb(vars)   
070F   22 F2 50               LD   (vPointer),hl   ; store address in setter
0712   5E                     LD   e,(hl)   
0713   23                     INC   hl   
0714   56                     LD   d,(hl)   
0715   D5                     PUSH   de   
0716   DD E9                  JP   (ix)   
0718                             ; if
0718                             ; condition then -- value
0718                QUESTION:      
0718                IF:          
0718   03                     INC   bc   
0719   0A                     LD   a,(bc)   
071A   FE 3F                  CP   "?"   
071C   28 06                  JR   z,ifte   
071E   0B                     DEC   bc   
071F   11 00 00               LD   de,NUL   ; NUL pointer for else
0722   18 01                  JR   ifte1   
0724                             ; ifte
0724                             ; condition then else -- value
0724                IFTE:        
0724   D1                     POP   de   ; de = else
0725                IFTE1:       
0725   E1                     POP   hl   ; hl = then
0726   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0727   7C                     LD   a,h   
0728   B5                     OR   l   
0729   E1                     POP   hl   ; hl = then
072A   CA 46 06               JP   z,go1   ; if z de = else
072D   EB                     EX   de,hl   ; condition = false, de = then
072E   C3 46 06               JP   go1   
0731                STAR:        
0731                MUL:         
0731   D1                     POP   de   ; get first value
0732   E1                     POP   hl   
0733                MUL2:        
0733   C5                     PUSH   bc   ; Preserve the IP
0734   44 4D                  LD   bc,hl   ; bc = 2nd value
0736   21 00 00               LD   hl,0   
0739   3E 10                  LD   a,16   
073B                MUL3:        
073B   29                     ADD   hl,hl   
073C   CB 13                  RL   e   
073E   CB 12                  RL   d   
0740   30 04                  JR   nc,$+6   
0742   09                     ADD   hl,bc   
0743   30 01                  JR   nc,$+3   
0745   13                     INC   de   
0746   3D                     DEC   a   
0747   20 F2                  JR   nz,mul3   
0749   C1                     POP   bc   ; Restore the IP
074A   C3 93 03               JP   add3   
074D                NUM:         
074D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0750   0A                     LD   a,(bc)   ; Get numeral or -
0751   FE 2D                  CP   "-"   
0753   20 01                  JR   nz,num0   
0755   03                     INC   bc   ; move to next char, no flags affected
0756                NUM0:        
0756   08                     EX   af,af'   ; save zero flag = 0 for later
0757                NUM1:        
0757   0A                     LD   a,(bc)   ; read digit
0758   D6 30                  SUB   "0"   ; less than 0?
075A   38 13                  JR   c,num2   ; not a digit, exit loop
075C   FE 0A                  CP   10   ; greater that 9?
075E   30 0F                  JR   nc,num2   ; not a digit, exit loop
0760   03                     INC   bc   ; inc IP
0761   54 5D                  LD   de,hl   ; multiply hl * 10
0763   29                     ADD   hl,hl   
0764   29                     ADD   hl,hl   
0765   19                     ADD   hl,de   
0766   29                     ADD   hl,hl   
0767   85                     ADD   a,l   ; add digit in a to hl
0768   6F                     LD   l,a   
0769   3E 00                  LD   a,0   
076B   8C                     ADC   a,h   
076C   67                     LD   h,a   
076D   18 E8                  JR   num1   
076F                NUM2:        
076F   0B                     DEC   bc   
0770   08                     EX   af,af'   ; restore zero flag
0771   20 07                  JR   nz,num3   
0773   EB                     EX   de,hl   ; negate the value of hl
0774   21 00 00               LD   hl,0   
0777   B7                     OR   a   ; jump to sub2
0778   ED 52                  SBC   hl,de   
077A                NUM3:        
077A   E5                     PUSH   hl   ; Put the number on the stack
077B   DD E9                  JP   (ix)   ; and process the next character
077D                RPAREN:      
077D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0780   FD 46 09               LD   b,(iy+9)   
0783   DD E9                  JP   (ix)   
0785                             ; ";" createFunc
0785                             ; arg_list* block* -- func*
0785                SEMICOLON:      
0785                CREATEFUNC:      
0785   ED 43 00 51            LD   (vTemp1),bc   ; save IP
0789   E1                     POP   hl   ; hl = block*
078A   22 02 51               LD   (vTemp2),hl   ; save block*
078D   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0790   FD 56 05               LD   d,(iy+5)   
0793   7B                     LD   a,e   ; if arg_list == null then make a func
0794   B2                     OR   d   
0795   20 09                  JR   nz,createFunc0   
0797   21 00 00               LD   hl,0   ; partial_array = null
079A   ED 5B F0 50            LD   de,(vHeapPtr)   ; de = compile*
079E   18 65                  JR   createFunc5   
07A0                CREATEFUNC0:      
07A0   E1                     POP   hl   ; hl = inner_arg_list*
07A1   E5                     PUSH   hl   ; save inner_arg_list
07A2   ED 5B F0 50            LD   de,(vHeapPtr)   ; de = compile*
07A6   7E                     LD   a,(hl)   ; compile inner_num_locals
07A7   4F                     LD   c,a   ; b = inner_num_locals
07A8   12                     LD   (de),a   
07A9   23                     INC   hl   
07AA   13                     INC   de   
07AB   7E                     LD   a,(hl)   ; compile inner_length
07AC   12                     LD   (de),a   
07AD   91                     SUB   c   ; a = inner_num args
07AE   23                     INC   hl   
07AF   13                     INC   de   
07B0   B7                     OR   a   ; compile args if inner_length > 0
07B1   28 05                  JR   z,createFunc1   
07B3   4F                     LD   c,a   ; bc = a
07B4   06 00                  LD   b,0   
07B6   ED B0                  LDIR      
07B8                CREATEFUNC1:      
07B8   EB                     EX   de,hl   ; hl = outer_arg_list
07B9   FD 5E 04               LD   e,(iy+4)   
07BC   FD 56 05               LD   d,(iy+5)   
07BF   EB                     EX   de,hl   
07C0   23                     INC   hl   ; a = outer_length
07C1   7E                     LD   a,(hl)   
07C2   23                     INC   hl   
07C3   B7                     OR   a   
07C4   28 05                  JR   z,createFunc2   
07C6   4F                     LD   c,a   
07C7   06 00                  LD   b,0   
07C9   ED B0                  LDIR      ; append outer_args
07CB                CREATEFUNC2:      ; a = outer_length
07CB   47                     LD   b,a   ; b = a = outer_length
07CC   2A F0 50               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
07CF   23                     INC   hl   
07D0   7E                     LD   a,(hl)   ; add outer_length to new length
07D1   80                     ADD   a,b   
07D2   77                     LD   (hl),a   
07D3   2B                     DEC   hl   
07D4   78                     LD   a,b   ; save outer_length in a'
07D5   08                     EX   af,af'   
07D6   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
07D7   7E                     LD   a,(hl)   ; c = a = inner_num_locals
07D8   B7                     OR   a   
07D9   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
07DB   4F                     LD   c,a   ; c = inner_num_locals
07DC   06 00                  LD   b,0   ; bc = inner_num_locals
07DE   23                     INC   hl   ; a = inner_length
07DF   7E                     LD   a,(hl)   
07E0   91                     SUB   c   ; a = inner_num_args
07E1   23                     INC   hl   ; hl = inner_arg_chars
07E2   85                     ADD   a,l   ; hl += a
07E3   6F                     LD   l,a   
07E4   3E 00                  LD   a,0   
07E6   84                     ADD   a,h   
07E7   67                     LD   h,a   
07E8   ED B0                  LDIR      ; append inner_locals
07EA                CREATEFUNC2A:      
07EA   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
07EB   12                     LD   (de),a   ; compile partial_array length field
07EC   13                     INC   de   
07ED   AF                     XOR   a   
07EE   12                     LD   (de),a   
07EF   13                     INC   de   
07F0   D5                     PUSH   de   ; push partial_array*
07F1   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
07F2   FD 5E 02               LD   e,(iy+2)   
07F5   FD 56 03               LD   d,(iy+3)   
07F8   EB                     EX   de,hl   
07F9                CREATEFUNC3:      
07F9   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
07FA   4E                     LD   c,(hl)   
07FB   2B                     DEC   hl   
07FC   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
07FD   12                     LD   (de),a   ; write LSB and MSB to partial_array*
07FE   13                     INC   de   
07FF   79                     LD   a,c   
0800   12                     LD   (de),a   
0801   13                     INC   de   
0802   10 F5                  DJNZ   createFunc3   ; b = outer_length
0804                CREATEFUNC4:      
0804   E1                     POP   hl   ; hl = partial_array*
0805                CREATEFUNC5:      
0805   C1                     POP   bc   ; bc = new_arg_list*
0806   D5                     PUSH   de   ; return new func*
0807   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0808   73                     LD   (hl),e   ; compile partial_array* to func
0809   23                     INC   hl   
080A   72                     LD   (hl),d   
080B   23                     INC   hl   
080C   ED 5B 02 51            LD   de,(vTemp2)   ; de = block*
0810   73                     LD   (hl),e   ; compile block* to func
0811   23                     INC   hl   
0812   72                     LD   (hl),d   
0813   23                     INC   hl   
0814   71                     LD   (hl),c   ; compile new_arg_list* to func
0815   23                     INC   hl   
0816   70                     LD   (hl),b   
0817   23                     INC   hl   
0818   22 F0 50               LD   (vHeapPtr),hl   ; bump heap ptr
081B   ED 4B 00 51            LD   bc,(vTemp1)   ; restore IP
081F   DD E9                  JP   (ix)   
0821                             ; shiftLeft
0821                             ; value count -- value2          shift left count places
0821                SHIFTLEFT:      
0821   50 59                  LD   de,bc   ; save IP
0823   C1                     POP   bc   ; bc = count
0824   41                     LD   b,c   ; b = loop counter
0825   E1                     POP   hl   
0826   04                     INC   b   ; test for counter=0 case
0827   18 01                  JR   shiftLeft2   
0829                SHIFTLEFT1:      
0829   29                     ADD   hl,hl   ; left shift hl
082A                SHIFTLEFT2:      
082A   10 FD                  DJNZ   shiftLeft1   
082C   E5                     PUSH   hl   
082D   42 4B                  LD   bc,de   ; restore IP
082F   DD E9                  JP   (ix)   
0831                             ; shiftRight
0831                             ; value count -- value2          shift left count places
0831                SHIFTRIGHT:      
0831   50 59                  LD   de,bc   ; save IP
0833   C1                     POP   bc   ; bc = count
0834   41                     LD   b,c   ; b = loop counter
0835   E1                     POP   hl   
0836   04                     INC   b   ; test for counter=0 case
0837   18 04                  JR   shiftRight2   
0839                SHIFTRIGHT1:      
0839   CB 3C                  SRL   h   ; right shift hl
083B   CB 1D                  RR   l   
083D                SHIFTRIGHT2:      
083D   10 FA                  DJNZ   shiftRight1   
083F   E5                     PUSH   hl   
0840   42 4B                  LD   bc,de   ; restore IP
0842   DD E9                  JP   (ix)   
0844                             ; string
0844                             ; -- ptr                        ; points to start of string chars,
0844                             ; length is stored at start - 2 bytes
0844                DQUOTE:      
0844                STRING:      
0844   2A F0 50               LD   hl,(vHeapPtr)   ; hl = heap*
0847   23                     INC   hl   ; skip length field to start
0848   23                     INC   hl   
0849   E5                     PUSH   hl   ; save start of string
084A   03                     INC   bc   ; point to next char
084B   18 03                  JR   string2   
084D                STRING1:      
084D   77                     LD   (hl),a   
084E   23                     INC   hl   ; increase count
084F   03                     INC   bc   ; point to next char
0850                STRING2:      
0850   0A                     LD   a,(bc)   
0851   FE 22                  CP   DQ   ; " is the string terminator
0853   28 04                  JR   z,string3   
0855   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0857   20 F4                  JR   nz,string1   
0859                STRING3:      
0859   AF                     XOR   a   ; write NUL to terminate string
085A   77                     LD   (hl),a   ; hl = end of string
085B   23                     INC   hl   
085C   22 F0 50               LD   (vHeapPtr),hl   ; bump heap* to after end of string
085F   2B                     DEC   hl   ; hl = end of string without terminator
0860   D1                     POP   de   ; de = start of string
0861   D5                     PUSH   de   ; return start of string
0862   B7                     OR   a   ; hl = length bytes, de = start of string
0863   ED 52                  SBC   hl,de   
0865   EB                     EX   de,hl   
0866   2B                     DEC   hl   ; write length bytes to length field at start - 2
0867   72                     LD   (hl),d   
0868   2B                     DEC   hl   
0869   73                     LD   (hl),e   
086A   DD E9                  JP   (ix)   
086C                MINUS:       ; negative sign or subtract
086C   03                     INC   bc   ; check if sign of a number
086D   0A                     LD   a,(bc)   
086E   0B                     DEC   bc   
086F   FE 30                  CP   "0"   
0871   38 05                  JR   c,sub   
0873   FE 3A                  CP   "9"+1   
0875   DA 3B 03               JP   c,num_   
0878                SUB:         ; Subtract the value 2nd on stack from top of stack
0878   03                     INC   bc   
0879   FE 2D                  CP   "-"   
087B   20 05                  JR   nz,sub1   
087D   E1                     POP   hl   
087E   2B                     DEC   hl   
087F   C3 7F 04               JP   assign0   
0882                SUB1:        
0882   0B                     DEC   bc   
0883   D1                     POP   de   
0884   E1                     POP   hl   
0885   B7                     OR   a   
0886   ED 52                  SBC   hl,de   
0888   C3 93 03               JP   add3   
088B                ERROR1:      
088B   21 01 00               LD   hl,1   ; error 1: unknown command
088E   E5                     PUSH   hl   
088F   C3 E9 0C               JP   error   
0892                COMMENT:      
0892   03                     INC   bc   ; point to next char
0893   0A                     LD   a,(bc)   
0894   FE 20                  CP   " "   ; terminate on any char less than SP
0896   30 FA                  JR   nc,comment   
0898   0B                     DEC   bc   
0899   DD E9                  JP   (ix)   
089B                COMMAND_A:      
089B   CD 65 0B               CALL   jumpTable   
089E   62                     DB   "b"   ; /ab absolute
089F   A7 08                  DW   absolute   
08A1   64                     DB   "d"   ; /ad address of
08A2   B4 08                  DW   addrOf   
08A4   00                     DB   NUL   
08A5   8B 08                  DW   error1   
08A7                             ; /ab absolute
08A7                             ; num -- num
08A7                ABSOLUTE:      
08A7   E1                     POP   hl   
08A8   CB 7C                  BIT   7,h   
08AA   C8                     RET   z   
08AB   AF                     XOR   a   
08AC   95                     SUB   l   
08AD   6F                     LD   l,a   
08AE   9F                     SBC   a,a   
08AF   94                     SUB   h   
08B0   67                     LD   h,a   
08B1   E5                     PUSH   hl   
08B2   DD E9                  JP   (ix)   
08B4                             ; /ad addrOf
08B4                             ; char -- addr
08B4                ADDROF:      
08B4   E1                     POP   hl   ; a = char
08B5   7D                     LD   a,l   
08B6   FE 7B                  CP   "z"+1   ; if a > z then exit
08B8   30 19                  JR   nc,addrOf2   
08BA   D6 41                  SUB   "A"   ; a - 65
08BC   38 15                  JR   c,addrOf2   ; if < A then exit
08BE   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08C0   38 06                  JR   c,addrOf1   
08C2   D6 06                  SUB   "a"-("Z"+1)   
08C4   FE 1A                  CP   "Z"-"A"+1   
08C6   38 0B                  JR   c,addrOf2   ; if < a then exit
08C8                ADDROF1:      
08C8   87                     ADD   a,a   ; double a
08C9   21 00 50               LD   hl,VARS   ; hl = VARS + a
08CC   85                     ADD   a,l   
08CD   6F                     LD   l,a   
08CE   3E 00                  LD   a,0   
08D0   8C                     ADC   a,h   
08D1   67                     LD   h,a   
08D2   E5                     PUSH   hl   
08D3                ADDROF2:      
08D3   DD E9                  JP   (ix)   
08D5                COMMAND_B:      
08D5   CD 65 0B               CALL   jumpTable   
08D8   72                     DB   "r"   ; /br break
08D9   CF 09                  DW   break   
08DB   79                     DB   "y"   ; /by cold boot
08DC   2C 0C                  DW   coldStart   
08DE   00                     DB   NUL   
08DF   8B 08                  DW   error1   
08E1                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
08E1                BUFFERARRAY:      
08E1   CD 45 06               CALL   go   
08E4   00 00                  DW   NUL   
08E6   EF 08                  DW   bufferArrayM_1859S1354   
08E8   EA 08                  DW   $+2   
08EA   02                     DB   2   
08EB   03 61 62 63            .PSTR   "abc"   
08EF                BUFFERARRAYM_1859S1354:      
08EF   7B 22 5B 20 22 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 22 5D 22 2E 73 7D 00 00 .CSTR   "{",DQ,"[ ",DQ,".s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ",DQ,"]",DQ,".s}",0   
092A                             ; .cstr "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}" ; block
092A                             ; /bd buffer decimal
092A                             ; value --
092A                BUFFERNUMBER:      
092A   3A E8 50               LD   a,(vNumBase)   
092D   FE 10                  CP   16   
092F   28 66                  JR   z,bufferHex   ; else falls through
0931                             ; /bd buffer decimal
0931                             ; value --
0931                BUFFERDEC:      
0931   ED 5B EC 50            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0935   D9                     EXX      
0936   E1                     POP   hl   ; hl = value
0937   CD 4B 09               CALL   bufferDec0   
093A   D9                     EXX      ; de = buffer*' bc = IP
093B   3E 20                  LD   a," "   ; append space to buffer
093D   12                     LD   (de),a   
093E   1C                     INC   e   ; buffer*++, wraparound
093F   CC 4E 0B               CALL   z,flushBuffer   
0942   2A EC 50               LD   hl,(vBufPtr)   ; hl = buffer*
0945   ED 53 EC 50            LD   (vBufPtr),de   ; update buffer* with buffer*'
0949   DD E9                  JP   (ix)   
094B                             ; hl = value
094B                             ; de' = buffer*
094B                             ; a, bc, de, hl destroyed
094B                BUFFERDEC0:      
094B   CB 7C                  BIT   7,h   
094D   28 0C                  JR   z,bufferDec1   
094F   D9                     EXX      
0950   3E 2D                  LD   a,"-"   
0952   12                     LD   (de),a   
0953   13                     INC   de   
0954   D9                     EXX      
0955   AF                     XOR   a   
0956   95                     SUB   l   
0957   6F                     LD   l,a   
0958   9F                     SBC   a,a   
0959   94                     SUB   h   
095A   67                     LD   h,a   
095B                BUFFERDEC1:      
095B   0E 00                  LD   c,0   ; leading zeros flag = false
095D   11 F0 D8               LD   de,-10000   
0960   CD 7B 09               CALL   bufferDec2   
0963   11 18 FC               LD   de,-1000   
0966   CD 7B 09               CALL   bufferDec2   
0969   11 9C FF               LD   de,-100   
096C   CD 7B 09               CALL   bufferDec2   
096F   1E F6                  LD   e,-10   
0971   CD 7B 09               CALL   bufferDec2   
0974   0C                     INC   c   ; flag = true for at least digit
0975   1E FF                  LD   e,-1   
0977   CD 7B 09               CALL   bufferDec2   
097A   C9                     RET      
097B                BUFFERDEC2:      
097B   06 2F                  LD   b,"0"-1   
097D                BUFFERDEC3:      
097D   04                     INC   b   
097E   19                     ADD   hl,de   
097F   38 FC                  JR   c,bufferDec3   
0981   ED 52                  SBC   hl,de   
0983   3E 30                  LD   a,"0"   
0985   B8                     CP   b   
0986   20 05                  JR   nz,bufferDec4   
0988   AF                     XOR   a   
0989   B1                     OR   c   
098A   C8                     RET   z   
098B   18 01                  JR   bufferDec5   
098D                BUFFERDEC4:      
098D   0C                     INC   c   
098E                BUFFERDEC5:      
098E   78                     LD   a,b   
098F   D9                     EXX      
0990   12                     LD   (de),a   
0991   1C                     INC   e   
0992   CC 4E 0B               CALL   z,flushBuffer   
0995   D9                     EXX      
0996   C9                     RET      
0997                             ; /bh buffer hex
0997                             ; value --
0997                BUFFERHEX:      
0997   E1                     POP   hl   ; hl = value
0998   ED 5B EC 50            LD   de,(vBufPtr)   
099C   3E 24                  LD   a,"$"   ; # prefix
099E   12                     LD   (de),a   
099F   1C                     INC   e   ; buffer*++, wraparound
09A0   CC 4E 0B               CALL   z,flushBuffer   
09A3   7C                     LD   a,h   
09A4   CD B8 09               CALL   bufferHex1   
09A7   7D                     LD   a,l   
09A8   CD B8 09               CALL   bufferHex1   
09AB   3E 20                  LD   a," "   ; append space to buffer
09AD   12                     LD   (de),a   
09AE   1C                     INC   e   ; buffer*++, wraparound
09AF   CC 4E 0B               CALL   z,flushBuffer   
09B2   ED 53 EC 50            LD   (vBufPtr),de   
09B6   DD E9                  JP   (ix)   
09B8                BUFFERHEX1:      
09B8   F5                     PUSH   af   
09B9   1F                     RRA      
09BA   1F                     RRA      
09BB   1F                     RRA      
09BC   1F                     RRA      
09BD   CD C1 09               CALL   bufferHex2   
09C0   F1                     POP   af   
09C1                BUFFERHEX2:      
09C1   E6 0F                  AND   0x0F   
09C3   C6 90                  ADD   a,0x90   
09C5   27                     DAA      
09C6   CE 40                  ADC   a,0x40   
09C8   27                     DAA      
09C9   12                     LD   (de),a   
09CA   1C                     INC   e   ; buffer*++, wraparound
09CB   CC 4E 0B               CALL   z,flushBuffer   
09CE   C9                     RET      
09CF                             ; /br break from loop
09CF                             ; --
09CF                BREAK:       
09CF   E1                     POP   hl   
09D0   7D                     LD   a,l   
09D1   B4                     OR   h   
09D2   28 02                  JR   z,break1   
09D4   DD E9                  JP   (ix)   
09D6                BREAK1:      
09D6   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09D8   FD 54                  LD   d,iyh   
09DA   21 08 00               LD   hl,8   
09DD   19                     ADD   hl,de   
09DE   23                     INC   hl   
09DF   23                     INC   hl   
09E0   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
09E3   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
09E6   C3 2D 05               JP   blockEnd   
09E9                             ; /bs buffered string
09E9                             ; string* --
09E9                BUFFERSTRING:      
09E9   E1                     POP   hl   ; hl = string*
09EA   ED 5B EC 50            LD   de,(vBufPtr)   ; de = buffer*
09EE   18 06                  JR   bufferString1   
09F0                BUFFERSTRING0:      
09F0   12                     LD   (de),a   ; a -> buffer*
09F1   1C                     INC   e   ; buffer*++, wraparound
09F2   CC 4E 0B               CALL   z,flushBuffer   
09F5   23                     INC   hl   
09F6                BUFFERSTRING1:      
09F6   7E                     LD   a,(hl)   ; a <- string*
09F7   B7                     OR   a   ; if NUL exit loop
09F8   20 F6                  JR   nz,bufferString0   
09FA   2A EC 50               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
09FD   ED 53 EC 50            LD   (vBufPtr),de   ; save buffer*' in pointer
0A01   DD E9                  JP   (ix)   
0A03                             ; /bc buffer char
0A03                             ; char --
0A03                BUFFERCHAR:      
0A03   21 01 00               LD   hl,1   
0A06   18 01                  JR   bufferXChars0   
0A08                             ; /bx buffered x chars
0A08                             ; char length --
0A08                BUFFERXCHARS:      
0A08   E1                     POP   hl   ; hl = length
0A09                BUFFERXCHARS0:      
0A09   D1                     POP   de   ; a' = char
0A0A   7B                     LD   a,e   
0A0B   08                     EX   af,af'   
0A0C   ED 5B EC 50            LD   de,(vBufPtr)   ; de = buffer*
0A10   18 08                  JR   bufferXChars2   
0A12                BUFFERXCHARS1:      
0A12   08                     EX   af,af'   
0A13   12                     LD   (de),a   
0A14   08                     EX   af,af'   
0A15   1C                     INC   e   ; buffer*++, wraparound
0A16   CC 4E 0B               CALL   z,flushBuffer   
0A19   2B                     DEC   hl   
0A1A                BUFFERXCHARS2:      
0A1A   7D                     LD   a,l   
0A1B   B4                     OR   h   
0A1C   20 F4                  JR   nz,bufferXChars1   
0A1E   ED 53 EC 50            LD   (vBufPtr),de   ; save buffer*'
0A22   DD E9                  JP   (ix)   
0A24                COMMAND_I:      
0A24   CD 65 0B               CALL   jumpTable   
0A27   6E                     DB   "n"   ; /in input
0A28   EB 0A                  DW   input   
0A2A   76                     DB   "v"   ; /iv invert
0A2B   BF 03                  DW   invert   
0A2D   00                     DB   NUL   
0A2E   8B 08                  DW   error1   
0A30                COMMAND_P:      
0A30   CD 65 0B               CALL   jumpTable   
0A33   62                     DB   "b"   ; /pb print buffer
0A34   3F 0A                  DW   printBuffer   
0A36   63                     DB   "c"   ; /pc print chars
0A37   65 0A                  DW   printChars   
0A39   6B                     DB   "k"   ; /pk print stack
0A3A   77 0A                  DW   printStack   
0A3C   00                     DB   NUL   
0A3D   8B 08                  DW   error1   
0A3F                             ; /pb printBuffer
0A3F                             ; --
0A3F                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0A3F                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0A3F                PRINTBUFFER:      
0A3F   CD 45 06               CALL   go   
0A42   00 00                  DW   NUL   
0A44   4B 0A                  DW   printBufferM_2060S1568   
0A46   48 0A                  DW   $+2   
0A48   00                     DB   0   
0A49   01 61                  .PSTR   "a"   
0A4B                PRINTBUFFERM_2060S1568:      
0A4B   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A65                             ; printChars
0A65                             ; char* len --
0A65                PRINTCHARS:      
0A65   E1                     POP   hl   ; hl = count
0A66   D1                     POP   de   ; de = char*
0A67   CD 72 0A               CALL   printChars2   
0A6A   DD E9                  JP   (ix)   
0A6C                PRINTCHARS1:      
0A6C   1A                     LD   a,(de)   ; print char at char*
0A6D   CD 85 00               CALL   putchar   
0A70   13                     INC   de   ; char*++
0A71   2B                     DEC   hl   ; count--
0A72                PRINTCHARS2:      
0A72   7D                     LD   a,l   ; count == 0?
0A73   B4                     OR   h   
0A74   C8                     RET   z   
0A75   18 F5                  JR   printChars1   ; if not loop
0A77                             ; /pk print stack
0A77                             ; --
0A77                PRINTSTACK:      
0A77                             ;     ld (vTemp1),bc
0A77                             ;     call printStr
0A77                             ;     .cstr "=> "
0A77                             ;     ld hl,STACK
0A77                             ;     sbc hl,sp
0A77                             ;     srl h
0A77                             ;     rr l
0A77                             ;     ld bc,hl
0A77                             ;     ld hl,STACK
0A77                             ;     jr printStack2
0A77                             ; printStack1:
0A77                             ;     dec bc
0A77                             ;     dec hl
0A77                             ;     ld d,(hl)
0A77                             ;     dec hl
0A77                             ;     ld e,(hl)
0A77                             ;     ex de,hl
0A77                             ;     call prthex
0A77                             ;     ex de,hl
0A77                             ;     ld a," "
0A77                             ;     call putchar
0A77                             ; printStack2:
0A77                             ;     ld a,c
0A77                             ;     or b
0A77                             ;     jr nz,printStack1
0A77                             ;     call prompt
0A77                             ;     ld bc,(vTemp1)
0A77   DD E9                  JP   (ix)   
0A79                COMMAND_R:      
0A79   CD 65 0B               CALL   jumpTable   
0A7C   65                     DB   "e"   ; /re remainder
0A7D   82 0A                  DW   remain   
0A7F   00                     DB   NUL   
0A80   8B 08                  DW   error1   
0A82                REMAIN:      
0A82   2A F4 50               LD   hl,(vRemain)   
0A85   E5                     PUSH   hl   
0A86   DD E9                  JP   (ix)   
0A88                SIZE:        
0A88   E1                     POP   hl   
0A89   2B                     DEC   hl   ; msb size
0A8A   56                     LD   d,(hl)   
0A8B   2B                     DEC   hl   ; lsb size
0A8C   5E                     LD   e,(hl)   
0A8D   D5                     PUSH   de   
0A8E   DD E9                  JP   (ix)   
0A90                COMMAND_V:      
0A90   CD 65 0B               CALL   jumpTable   
0A93   62                     DB   "b"   
0A94   B4 0A                  DW   varBufPtr   
0A96   68                     DB   "h"   
0A97   BD 0A                  DW   varHeapPtr   
0A99   74                     DB   "t"   
0A9A   C6 0A                  DW   varTIBPtr   
0A9C   42                     DB   "B"   
0A9D   A5 0A                  DW   constBufStart   
0A9F   54                     DB   "T"   
0AA0   AF 0A                  DW   constTIBStart   
0AA2   00                     DB   NUL   
0AA3   8B 08                  DW   error1   
0AA5                CONSTBUFSTART:      
0AA5   11 00 4F               LD   de,BUF   
0AA8   18 28                  JR   constant   
0AAA                CONSTHEAPSTART:      
0AAA   11 1E 51               LD   de,HEAP   
0AAD   18 23                  JR   constant   
0AAF                CONSTTIBSTART:      
0AAF   11 00 4E               LD   de,TIB   
0AB2   18 1E                  JR   constant   
0AB4                VARBUFPTR:      
0AB4   ED 5B EC 50            LD   de,(vBufPtr)   
0AB8   21 EC 50               LD   hl,vBufPtr   
0ABB   18 12                  JR   variable   
0ABD                VARHEAPPTR:      
0ABD   ED 5B F0 50            LD   de,(vHeapPtr)   
0AC1   21 F0 50               LD   hl,vHeapPtr   
0AC4   18 09                  JR   variable   
0AC6                VARTIBPTR:      
0AC6   ED 5B EA 50            LD   de,(vTIBPtr)   
0ACA   21 EA 50               LD   hl,vTIBPtr   
0ACD   18 00                  JR   variable   
0ACF                VARIABLE:      
0ACF   22 F2 50               LD   (vPointer),hl   
0AD2                CONSTANT:      
0AD2   D5                     PUSH   de   
0AD3   DD E9                  JP   (ix)   
0AD5                CHARS:       
0AD5   21 01 00               LD   hl,1   
0AD8                CHARS1:      
0AD8   22 E6 50               LD   (vDataWidth),hl   
0ADB   DD E9                  JP   (ix)   
0ADD                DECIMAL:      
0ADD   21 0A 00               LD   hl,10   
0AE0                DECIMAL1:      
0AE0   22 E8 50               LD   (vNumBase),hl   
0AE3   DD E9                  JP   (ix)   
0AE5                HEXADECIMAL:      
0AE5   21 10 00               LD   hl,16   
0AE8   C3 E0 0A               JP   decimal1   
0AEB                             ; Z80 port input
0AEB                             ; port -- value
0AEB                INPUT:       
0AEB   E1                     POP   hl   
0AEC   59                     LD   e,c   ; save IP
0AED   4D                     LD   c,l   
0AEE   ED 68                  IN   l,(c)   
0AF0   26 00                  LD   h,0   
0AF2   4B                     LD   c,e   ; restore IP
0AF3   E5                     PUSH   hl   
0AF4   DD E9                  JP   (ix)   
0AF6                KEY:         
0AF6   CD 81 00               CALL   getchar   
0AF9   26 00                  LD   h,0   
0AFB   6F                     LD   l,a   
0AFC   E5                     PUSH   hl   
0AFD   DD E9                  JP   (ix)   
0AFF                             ; Z80 port output
0AFF                             ; value port --
0AFF                OUTPUT:      
0AFF   E1                     POP   hl   
0B00   59                     LD   e,c   ; save IP
0B01   4D                     LD   c,l   
0B02   E1                     POP   hl   
0B03   ED 69                  OUT   (c),l   
0B05   4B                     LD   c,e   ; restore IP
0B06   DD E9                  JP   (ix)   
0B08                NUMBERS:      
0B08   21 02 00               LD   hl,2   
0B0B   C3 D8 0A               JP   chars1   
0B0E                             ; 
0B0E                KEYITER:      
0B0E   CD 45 06               CALL   go   
0B11   7B 2F 6B 20 2F 74 7D 00 .CSTR   "{/k /t}"   ; block
0B19                             ; FUNC fromIter, 1, "os"          ; :o:s origin / state
0B19                             ; ; :mk:l args: method sink / Loop
0B19                             ; ; state: 0:inloop 1:got1 2:completed 3:result 4:done
0B19                             ; .cstr "{[/f/f/f 0/f]$s= :mk:L{
0B19                             ;     0 :t:r00bbW3s=00bbKC9rJXI9ICVyMz09L2JyIDEgJXJ0XileIDIgMHRe00bb]$t#} %k^
0B19                             ; }}
0B19                             ; "
0B19   CD 45 06               CALL   go   
0B1C   00 00                  DW   NUL   ; NUL closure
0B1E   22 0B                  DW   $+4   
0B20   46 0B                  DW   args1A0L   
0B22   7B 5B 24 61 20 5B 2F 66 20 2F 66 20 2F 66 20 30 5D 5D 20 66 72 6F 6D 49 74 65 72 31 20 2F 70 61 7D 00 .CSTR   "{[$a [/f /f /f 0]] fromIter1 /pa}"   ; block
0B44                             ; fromIter1:
0B44                             ;     call go
0B44                             ;     dw NUL                      ; NUL closure
0B44                             ;     dw $+4
0B44                             ;     dw args2A0L
0B44                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0B44                FILTER:      
0B44                MAP:         
0B44                SCAN:        
0B44   DD E9                  JP   (ix)   
0B46                             ;*******************************************************************
0B46                             ; reusable arglists
0B46                             ;*******************************************************************
0B46                ARGS1A0L:      ; one arg zero locals
0B46   00                     DB   0   
0B47   01 61                  .PSTR   "a"   
0B49                ARGS1A2L:      ; one arg two locals
0B49   02                     DB   2   
0B4A   03 61 62 63            .PSTR   "abc"   
0B4E                             ;*******************************************************************
0B4E                             ; general routines
0B4E                             ;*******************************************************************
0B4E                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0B4E                FLUSHBUFFER:      
0B4E   F5                     PUSH   af   
0B4F   D5                     PUSH   de   
0B50   E5                     PUSH   hl   
0B51   2A EC 50               LD   hl,(vBufPtr)   
0B54   11 00 4F               LD   de,BUF   
0B57   ED 53 EC 50            LD   (vBufPtr),de   
0B5B   B7                     OR   a   
0B5C   ED 52                  SBC   hl,de   
0B5E   CD 72 0A               CALL   printChars2   
0B61   E1                     POP   hl   
0B62   D1                     POP   de   
0B63   F1                     POP   af   
0B64   C9                     RET      
0B65                             ; followed by a table
0B65                             ; db char
0B65                             ; dw addr
0B65                             ; the final item must have char == NUL
0B65                JUMPTABLE:      
0B65   03                     INC   bc   
0B66   E1                     POP   hl   
0B67                JUMPTABLE0:      
0B67   AF                     XOR   a   
0B68   BE                     CP   (hl)   
0B69   28 09                  JR   z,jumpTable1   
0B6B   0A                     LD   a,(bc)   
0B6C   BE                     CP   (hl)   
0B6D   28 06                  JR   z,jumpTable2   
0B6F   23                     INC   hl   
0B70   23                     INC   hl   
0B71   23                     INC   hl   
0B72   18 F3                  JR   jumpTable0   
0B74                JUMPTABLE1:      
0B74   0B                     DEC   bc   
0B75                JUMPTABLE2:      
0B75   23                     INC   hl   
0B76   5E                     LD   e,(hl)   
0B77   23                     INC   hl   
0B78   56                     LD   d,(hl)   
0B79   EB                     EX   de,hl   
0B7A   E9                     JP   (hl)   
0B7B                PRTSTR0:      
0B7B   CD 85 00               CALL   putchar   
0B7E   23                     INC   hl   
0B7F                PRTSTR:      
0B7F   7E                     LD   a,(hl)   
0B80   B7                     OR   a   
0B81   20 F8                  JR   nz,prtstr0   
0B83   C9                     RET      
0B84                             ; **************************************************************************
0B84                             ; calculate nesting value
0B84                             ; a is char to be tested,
0B84                             ; e is the nesting value (initially 0)
0B84                             ; e is increased by ( and [
0B84                             ; e is decreased by ) and ]
0B84                             ; e has its bit 7 toggled by `
0B84                             ; limited to 127 levels
0B84                             ; **************************************************************************
0B84                NESTING:      
0B84   FE 22                  CP   DQ   ; quote char
0B86   28 06                  JR   z,nesting0   
0B88   FE 60                  CP   "`"   ; quote char
0B8A   28 02                  JR   z,nesting0   
0B8C   18 0A                  JR   nesting1   
0B8E                NESTING0:      
0B8E   CB 7B                  BIT   7,e   
0B90   28 03                  JR   z,nesting1a   
0B92   CB BB                  RES   7,e   
0B94   C9                     RET      
0B95                NESTING1A:      
0B95   CB FB                  SET   7,e   
0B97   C9                     RET      
0B98                NESTING1:      
0B98   CB 7B                  BIT   7,e   
0B9A   C0                     RET   nz   
0B9B   FE 7B                  CP   "{"   
0B9D   28 08                  JR   z,nesting2   
0B9F   FE 5B                  CP   "["   
0BA1   28 04                  JR   z,nesting2   
0BA3   FE 28                  CP   "("   
0BA5   20 02                  JR   nz,nesting3   
0BA7                NESTING2:      
0BA7   1C                     INC   e   
0BA8   C9                     RET      
0BA9                NESTING3:      
0BA9   FE 7D                  CP   "}"   
0BAB   28 07                  JR   z,nesting4   
0BAD   FE 5D                  CP   "]"   
0BAF   28 03                  JR   z,nesting4   
0BB1   FE 29                  CP   ")"   
0BB3   C0                     RET   nz   
0BB4                NESTING4:      
0BB4   1D                     DEC   e   
0BB5   C9                     RET      
0BB6                PROMPT:      
0BB6   CD C6 0B               CALL   printStr   
0BB9   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0BBE   C9                     RET      
0BBF                CRLF:        
0BBF   CD C6 0B               CALL   printStr   
0BC2   0D 0A 00               .CSTR   "\r\n"   
0BC5   C9                     RET      
0BC6                             ; prints a null teminated string
0BC6                             ; the string should be immediately following the call
0BC6                PRINTSTR:      
0BC6   E3                     EX   (sp),hl   ; swap			
0BC7   CD 7F 0B               CALL   prtstr   
0BCA   23                     INC   hl   ; inc past NUL
0BCB   E3                     EX   (sp),hl   ; put it back	
0BCC   C9                     RET      
0BCD                TITLESTR:      
0BCD   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0BE1                INIT:        
0BE1   21 CD 0B               LD   hl,titleStr   
0BE4   11 0A 51               LD   de,titleBuf   
0BE7   06 14                  LD   b,20   
0BE9                INIT1:       
0BE9   1A                     LD   a,(de)   
0BEA   BE                     CP   (hl)   
0BEB   20 17                  JR   nz,coldBoot0   
0BED   13                     INC   de   
0BEE   23                     INC   hl   
0BEF   10 F8                  DJNZ   init1   
0BF1                WARMINIT:      
0BF1   ED 4B F6 50            LD   bc,(vSavedIP)   ; restore IP
0BF5   ED 7B F8 50            LD   sp,(vSavedSP)   ; restore SP
0BF9   DD 2A FA 50            LD   ix,(vSavedNext)   ; restore Next
0BFD   FD 2A FC 50            LD   iy,(vSavedBP)   ; restore BP
0C01   C3 3B 0C               JP   start1   
0C04                COLDBOOT0:      
0C04   21 CD 0B               LD   hl,titleStr   ; copy titleStr to titleBuf
0C07   11 0A 51               LD   de,titleBuf   
0C0A   06 14                  LD   b,20   
0C0C   ED B0                  LDIR      
0C0E                COLDINIT:      
0C0E   21 80 01               LD   hl,isysVars   
0C11   11 E6 50               LD   de,sysVars   
0C14   01 10 00               LD   bc,8 * 2   
0C17   ED B0                  LDIR      
0C19   21 00 50               LD   hl,vars   ; 52 vars LO HI
0C1C   06 34                  LD   b,26*2   
0C1E   AF                     XOR   a   
0C1F                COLDBOOT1:      
0C1F   77                     LD   (hl),a   
0C20   23                     INC   hl   
0C21   10 FC                  DJNZ   coldBoot1   
0C23   DD 2A EE 50            LD   ix,(vNext)   
0C27   FD 21 00 4E            LD   iy,STACK   
0C2B   C9                     RET      
0C2C                COLDSTART:      
0C2C   31 00 4E               LD   sp,STACK   
0C2F   CD 04 0C               CALL   coldBoot0   
0C32   C3 3B 0C               JP   start1   
0C35                START:       
0C35   31 00 4E               LD   sp,STACK   ; start Monty
0C38   CD E1 0B               CALL   init   ; setups
0C3B                START1:      
0C3B   21 0A 51               LD   hl,titleBuf   
0C3E   CD 7F 0B               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0C41                INTERPRET:      
0C41   CD 4E 0B               CALL   flushBuffer   
0C44   CD B6 0B               CALL   prompt   
0C47   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0C4A   21 00 4E               LD   hl,TIB   
0C4D   22 EA 50               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C50                INTERPRET2:      ; calculate nesting
0C50   1E 00                  LD   e,0   ; initilize nesting value
0C52   C5                     PUSH   bc   ; save offset into TIB,
0C53                             ; bc is also the count of chars in TIB
0C53   21 00 4E               LD   hl,TIB   ; hl is start of TIB
0C56   18 0B                  JR   interpret4   
0C58                INTERPRET3:      
0C58   3E 33                  LD   a,"3"   
0C5A   CD 85 00               CALL   putchar   
0C5D   7E                     LD   a,(hl)   ; a = char in TIB
0C5E   23                     INC   hl   ; inc pointer into TIB
0C5F   0B                     DEC   bc   ; dec count of chars in TIB
0C60   CD 84 0B               CALL   nesting   ; update nesting value
0C63                INTERPRET4:      
0C63   79                     LD   a,c   ; is count zero?
0C64   B0                     OR   b   
0C65   20 F1                  JR   nz,interpret3   ; if not loop
0C67   C1                     POP   bc   ; restore offset into TIB
0C68                INTERPRET5:      
0C68   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C6B   FE 20                  CP   $20   ; compare to space
0C6D   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C6F   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C71                             ; ???? NEEDED?
0C71   28 3B                  JR   z,interpret8   
0C73   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C75   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C77   FE 05                  CP   CTRL_E   
0C79   CA 0C 0D               JP   z,edit_   
0C7C   FE 08                  CP   CTRL_H   
0C7E   CA FC 0C               JP   z,backSpace_   
0C81   FE 0A                  CP   CTRL_J   
0C83   CA 24 0D               JP   z,reEdit_   
0C86   FE 13                  CP   CTRL_S   
0C88   CA 27 0D               JP   z,printStack_   
0C8B                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C8B                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C8B                             ; DB     lsb(list_)       ; FF  ^L 12
0C8B                             ; DB     lsb(printStack_) ; DLE ^P 16
0C8B                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C8B                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C8B                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C8B                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C8B                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C8B                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C8B                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C8B                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C8B                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C8B                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C8B                INTERPRET5A:      
0C8B                             ; ld (vTIBPtr),bc
0C8B                             ; ld bc,(vTIBPtr)
0C8B   18 C3                  JR   interpret2   
0C8D                INTERPRET6:      
0C8D   21 00 4E               LD   hl,TIB   
0C90   09                     ADD   hl,bc   
0C91   77                     LD   (hl),a   ; store the character in textbuf
0C92   03                     INC   bc   
0C93   CD 85 00               CALL   putchar   ; echo character to screen
0C96   CD 84 0B               CALL   nesting   
0C99   18 CD                  JR   interpret5   ; wait for next character
0C9B                INTERPRET7:      
0C9B   21 00 4E               LD   hl,TIB   
0C9E   09                     ADD   hl,bc   
0C9F   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0CA1   23                     INC   hl   
0CA2   36 0A                  LD   (hl),"\n"   
0CA4   23                     INC   hl   
0CA5   03                     INC   bc   
0CA6   03                     INC   bc   
0CA7   CD BF 0B               CALL   crlf   ; echo character to screen
0CAA   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0CAB   B7                     OR   a   
0CAC   20 BA                  JR   nz,interpret5   
0CAE                INTERPRET8:      
0CAE   21 00 4E               LD   hl,TIB   
0CB1   09                     ADD   hl,bc   
0CB2   22 EA 50               LD   (vTIBPtr),hl   
0CB5   01 00 4E               LD   bc,TIB   
0CB8   ED 43 F6 50            LD   (vSavedIP),bc   ; save IP
0CBC   ED 73 F8 50            LD   (vSavedSP),sp   ; save SP
0CC0   DD 22 FA 50            LD   (vSavedNext),ix   ; save Next
0CC4   FD 22 FC 50            LD   (vSavedBP),iy   ; save BP
0CC8   0B                     DEC   bc   
0CC9                NEXT:        
0CC9   03                     INC   bc   ; Increment the IP
0CCA   0A                     LD   a,(bc)   ; Get the next character and dispatch
0CCB   FE 20                  CP   " "   ; whitespace?
0CCD   28 FA                  JR   z,next   ; space? ignore
0CCF   38 09                  JR   c,next1   
0CD1   D6 20                  SUB   " "   
0CD3   6F                     LD   l,a   ; index into table
0CD4   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0CD6   6E                     LD   l,(hl)   ; get low jump address
0CD7   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0CD9   E9                     JP   (hl)   ; Jump to routine
0CDA                NEXT1:       
0CDA   FE 00                  CP   NUL   ; end of input string?
0CDC   28 03                  JR   z,exit   
0CDE   C3 41 0C               JP   interpret   ; no, other whitespace, macros?
0CE1                EXIT:        
0CE1   03                     INC   bc   
0CE2   60 69                  LD   hl,bc   
0CE4   E9                     JP   (hl)   
0CE5                RUN:         
0CE5   C1                     POP   bc   
0CE6   0B                     DEC   bc   
0CE7   DD E9                  JP   (ix)   
0CE9                ERROR:       
0CE9   CD E5 0C               CALL   run   
0CEC   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQ,"Error ",DQ,".s .",0   
0CF9   C3 41 0C               JP   interpret   
0CFC                BACKSPACE_:      
0CFC   79                     LD   a,c   
0CFD   B0                     OR   b   
0CFE   CA 50 0C               JP   z,interpret2   
0D01   0B                     DEC   bc   
0D02   CD C6 0B               CALL   printStr   
0D05   08 20 08 00            .CSTR   "\b \b"   
0D09   C3 50 0C               JP   interpret2   
0D0C                             ; edit
0D0C                EDIT_:       
0D0C   CD E5 0C               CALL   run   
0D0F   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQ,"var?",DQ,".s /k/ad .h",0   
0D21   C3 41 0C               JP   interpret   
0D24                REEDIT_:      
0D24   C3 41 0C               JP   interpret   
0D27                PRINTSTACK_:      
0D27   CD E5 0C               CALL   run   
0D2A   2F 70 6B 00            .CSTR   "/pk"   
0D2E   C3 41 0C               JP   interpret   
0D31                             ; editDef:
0D31                             ;     pop hl                      ; pop ret address
0D31                             ;     ex (sp),hl                  ; swap with TOS
0D31                             ;     push hl                     ; dup TOS
0D31                             ;     ld a,l                      ; a = ident
0D31                             ;     ld de,TIB                   ; de = start of TIB
0D31                             ;     ld (vTIBPtr),de             ; update TIB*
0D31                             ;     push ix                     ; save NEXT
0D31                             ;     ld ix,editDef0              ; NEXT = editDef0
0D31                             ;     jp lookupRef                ; convert letter into address
0D31                             ; editDef0:
0D31                             ;     ld e,(hl)                   ; de = (hl++)
0D31                             ;     inc hl
0D31                             ;     ld d,(hl)
0D31                             ;     ld a,d                      ; de == 0 ?
0D31                             ;     or e
0D31                             ;     jr z,editDef4
0D31                             ;     ld ix,editDef3              ; NEXT = editDef3
0D31                             ;     ex de,hl
0D31                             ;     ld a,(hl)
0D31                             ;     cp "{"
0D31                             ;     jr nz,editDef1
0D31                             ;     jp editBlock0               ; convert letter into address
0D31                             ; editDef1:
0D31                             ;     cp "("
0D31                             ;     jr nz,editDef2
0D31                             ;     jp editBlock0               ; convert letter into address
0D31                             ; editDef2:
0D31                             ;     jp editFunc
0D31                             ; editDef3:
0D31                             ;     ld a," "                    ; write assign
0D31                             ;     call writeChar
0D31                             ;     pop hl                      ; a = ident
0D31                             ;     ld a,l
0D31                             ;     call writeChar
0D31                             ;     ld a,"="                    ; write assign
0D31                             ;     call writeChar
0D31                             ;     ld ix,editDef4              ; NEXT = editDef4
0D31                             ;     jp printTIB
0D31                             ; editDef4:
0D31                             ;     pop ix                      ; restore NEXT
0D31                             ;     jp (ix)
0D31                             ; writeChar:
0D31                             ;     ld de,(vTIBPtr)             ; de = TIB*
0D31                             ;     ld (de),a                   ; write ident
0D31                             ;     inc de
0D31                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0D31                             ;     ret
0D31                             ; ; printTIB
0D31                             ; printTIB:
0D31                             ;     ld hl,(vTIBPtr)
0D31                             ;     ld de,TIB
0D31                             ;     or a
0D31                             ;     sbc hl,de
0D31                             ;     jp printTIB2
0D31                             ; printTIB1:
0D31                             ;     ld a,(de)
0D31                             ;     call putchar
0D31                             ; printTIB2:
0D31                             ;     ld a,l
0D31                             ;     or h
0D31                             ;     jr nz,printTIB1
0D31                             ;     jp (ix)
0D31                             ; editBlock:
0D31                             ;     pop hl                      ; hl = block*
0D31                             ; editBlock0:
0D31                             ;     push ix                     ; save next
0D31                             ;     push hl                     ; push block*
0D31                             ;     push hl                     ; push block*
0D31                             ;     ld ix,(editBlock2)
0D31                             ;     jp blockLength
0D31                             ; editBlock1:
0D31                             ;     pop hl                      ; bc = length, (sp) = IP
0D31                             ;     pop de                      ; de = block*
0D31                             ;     ld a,l
0D31                             ;     or h
0D31                             ;     jr z,editBlock2
0D31                             ;     push bc
0D31                             ;     ld bc,hl
0D31                             ;     ex de,hl                    ; hl = block*
0D31                             ;     ld de,(vTIBPtr)              ; de = TIB*
0D31                             ;     ldir                        ; copy block to TIB
0D31                             ;     ld (vTIBPtr),de              ; save TIB*
0D31                             ;     pop bc
0D31                             ; editBlock2:
0D31                             ;     pop ix                      ; restore next
0D31                             ;     jp (ix)
0D31                             ; editFunc:
0D31                             ;     jp (ix)
0D31                             ; editArray:
0D31                             ;     jp (ix)
0D31                             ; editArglist:
0D31                             ;     jp (ix)
0D31                             ; ; blockLength
0D31                             ; ; addr1 -- length
0D31                             ; blockLength:
0D31                             ;     pop hl                      ; block*
0D31                             ;     push hl                     ; save block*
0D31                             ;     inc hl                      ; skip first char
0D31                             ;     ld d,1                      ; increase nesting
0D31                             ; blockLength1:                   ; Skip to end of definition
0D31                             ;     ld a,(hl)                   ; Get the next character
0D31                             ;     inc hl                      ; Point to next character
0D31                             ;     cp " " + 1                  ; ignore whitespace
0D31                             ;     jr c,blockLength1
0D31                             ;     cp ")"
0D31                             ;     jr z,blockLength4
0D31                             ;     cp "}"
0D31                             ;     jr z,blockLength4
0D31                             ;     cp "]"
0D31                             ;     jr z,blockLength4
0D31                             ;     cp "("
0D31                             ;     jr z,blockLength2
0D31                             ;     cp "{"
0D31                             ;     jr z,blockLength2
0D31                             ;     cp "["
0D31                             ;     jr z,blockLength2
0D31                             ;     cp "'"
0D31                             ;     jr z,blockLength3
0D31                             ;     cp "`"
0D31                             ;     jr z,blockLength3
0D31                             ;     cp DQ
0D31                             ;     jr z,blockLength3
0D31                             ;     jr blockLength1
0D31                             ; blockLength2:
0D31                             ;     inc d
0D31                             ;     jr blockLength1
0D31                             ; blockLength4:
0D31                             ;     dec d
0D31                             ;     jr nz, blockLength1         ; get the next element
0D31                             ; blockLength3:
0D31                             ;     ld a,$80
0D31                             ;     xor d
0D31                             ;     ld d,a
0D31                             ;     jr nz, blockLength1
0D31                             ;     pop hl                      ; hl = block*
0D31                             ;     or a
0D31                             ;     sbc hl,de
0D31                             ;     push hl
0D31                             ;     jp (ix)
0D31                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0D31                             ; \a start of stack \#3 depth \b base \$ prompt
0D31                             ; DW dStack               ; a vS0 start of datastack			
0D31                             ; DW FALSE                ; b vBase16
0D31                             ; DW 0                    ; c vTIBPtr an offset to the tib
0D31                             ; DW 0                    ; d
0D31                             ; DW 65                   ; e vLastDef "A" last command u defined
0D31                             ; DW 0                    ; f
0D31                             ; DW page6                ; g 256 bytes limits
0D31                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0D31                          ALIGN   $100   
0E00                TESTSSTART:      
0E00                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +};^",3
0E00   31 00 4E               LD   SP,STACK   
0E03   CD 0E 0C               CALL   coldInit   
0E06   CD 79 4C               CALL   execStr   
0E09   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/t :f{1 %f/br 2 +};^",0   
0E1E   CD 4E 0B               CALL   flushBuffer   
0E21   E1                     POP   HL   
0E22   E5                     PUSH   HL   
0E23   11 03 00               LD   DE,3   
0E26   B7                     OR   A   
0E27   ED 52                  SBC   HL,DE   
0E29   7D                     LD   A,L   
0E2A   B4                     OR   H   
0E2B   CA 9A 0E               JP   Z,expectM_2698S15   
0E2E   CD C6 0B               CALL   printStr   
0E31   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +};^"   
0E4C   CD C6 0B               CALL   printStr   
0E4F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E5E   21 03 00               LD   hl,3   
0E61   E5                     PUSH   hl   
0E62   E5                     PUSH   hl   
0E63   CD E5 0C               CALL   run   
0E66   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E6E   CD 4E 0B               CALL   flushBuffer   
0E71   CD C6 0B               CALL   printStr   
0E74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E81   E1                     POP   hl   
0E82   E5                     PUSH   hl   
0E83   E5                     PUSH   hl   
0E84   CD E5 0C               CALL   run   
0E87   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E96   CD 4E 0B               CALL   flushBuffer   
0E99   76                     HALT      
0E9A                EXPECTM_2698S15:      
0E9A   E1                     POP   HL   
0E9B                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +};^",1
0E9B   31 00 4E               LD   SP,STACK   
0E9E   CD 0E 0C               CALL   coldInit   
0EA1   CD 79 4C               CALL   execStr   
0EA4   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/f :f{1 %f/br 2 +};^",0   
0EB9   CD 4E 0B               CALL   flushBuffer   
0EBC   E1                     POP   HL   
0EBD   E5                     PUSH   HL   
0EBE   11 01 00               LD   DE,1   
0EC1   B7                     OR   A   
0EC2   ED 52                  SBC   HL,DE   
0EC4   7D                     LD   A,L   
0EC5   B4                     OR   H   
0EC6   CA 35 0F               JP   Z,expectM_2699S16   
0EC9   CD C6 0B               CALL   printStr   
0ECC   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +};^"   
0EE7   CD C6 0B               CALL   printStr   
0EEA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EF9   21 01 00               LD   hl,1   
0EFC   E5                     PUSH   hl   
0EFD   E5                     PUSH   hl   
0EFE   CD E5 0C               CALL   run   
0F01   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F09   CD 4E 0B               CALL   flushBuffer   
0F0C   CD C6 0B               CALL   printStr   
0F0F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F1C   E1                     POP   hl   
0F1D   E5                     PUSH   hl   
0F1E   E5                     PUSH   hl   
0F1F   CD E5 0C               CALL   run   
0F22   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F31   CD 4E 0B               CALL   flushBuffer   
0F34   76                     HALT      
0F35                EXPECTM_2699S16:      
0F35   E1                     POP   HL   
0F36   CD C6 0B               CALL   printStr   
0F39   44 6F 6E 65 21 00      .CSTR   "Done!"   
0F3F   76                     HALT      
0F40                             ; 
0F40                          ;*Macro unroll:  test "/f", false
0F40   31 00 4E               LD   SP,STACK   
0F43   CD 0E 0C               CALL   coldInit   
0F46   CD 79 4C               CALL   execStr   
0F49   2F 66 00               DB   "/f",0   
0F4C   CD 4E 0B               CALL   flushBuffer   
0F4F   E1                     POP   HL   
0F50   E5                     PUSH   HL   
0F51   11 00 00               LD   DE,false   
0F54   B7                     OR   A   
0F55   ED 52                  SBC   HL,DE   
0F57   7D                     LD   A,L   
0F58   B4                     OR   H   
0F59   CA B6 0F               JP   Z,expectM_2704S23   
0F5C   CD C6 0B               CALL   printStr   
0F5F   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0F68   CD C6 0B               CALL   printStr   
0F6B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F7A   21 00 00               LD   hl,false   
0F7D   E5                     PUSH   hl   
0F7E   E5                     PUSH   hl   
0F7F   CD E5 0C               CALL   run   
0F82   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F8A   CD 4E 0B               CALL   flushBuffer   
0F8D   CD C6 0B               CALL   printStr   
0F90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F9D   E1                     POP   hl   
0F9E   E5                     PUSH   hl   
0F9F   E5                     PUSH   hl   
0FA0   CD E5 0C               CALL   run   
0FA3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FB2   CD 4E 0B               CALL   flushBuffer   
0FB5   76                     HALT      
0FB6                EXPECTM_2704S23:      
0FB6   E1                     POP   HL   
0FB7                          ;*Macro unroll:  test "/t", true
0FB7   31 00 4E               LD   SP,STACK   
0FBA   CD 0E 0C               CALL   coldInit   
0FBD   CD 79 4C               CALL   execStr   
0FC0   2F 74 00               DB   "/t",0   
0FC3   CD 4E 0B               CALL   flushBuffer   
0FC6   E1                     POP   HL   
0FC7   E5                     PUSH   HL   
0FC8   11 FF FF               LD   DE,true   
0FCB   B7                     OR   A   
0FCC   ED 52                  SBC   HL,DE   
0FCE   7D                     LD   A,L   
0FCF   B4                     OR   H   
0FD0   CA 2D 10               JP   Z,expectM_2705S24   
0FD3   CD C6 0B               CALL   printStr   
0FD6   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0FDF   CD C6 0B               CALL   printStr   
0FE2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FF1   21 FF FF               LD   hl,true   
0FF4   E5                     PUSH   hl   
0FF5   E5                     PUSH   hl   
0FF6   CD E5 0C               CALL   run   
0FF9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1001   CD 4E 0B               CALL   flushBuffer   
1004   CD C6 0B               CALL   printStr   
1007   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1014   E1                     POP   hl   
1015   E5                     PUSH   hl   
1016   E5                     PUSH   hl   
1017   CD E5 0C               CALL   run   
101A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1029   CD 4E 0B               CALL   flushBuffer   
102C   76                     HALT      
102D                EXPECTM_2705S24:      
102D   E1                     POP   HL   
102E                          ;*Macro unroll:  test "1", 1
102E   31 00 4E               LD   SP,STACK   
1031   CD 0E 0C               CALL   coldInit   
1034   CD 79 4C               CALL   execStr   
1037   31 00                  DB   "1",0   
1039   CD 4E 0B               CALL   flushBuffer   
103C   E1                     POP   HL   
103D   E5                     PUSH   HL   
103E   11 01 00               LD   DE,1   
1041   B7                     OR   A   
1042   ED 52                  SBC   HL,DE   
1044   7D                     LD   A,L   
1045   B4                     OR   H   
1046   CA A2 10               JP   Z,expectM_2706S25   
1049   CD C6 0B               CALL   printStr   
104C   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1054   CD C6 0B               CALL   printStr   
1057   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1066   21 01 00               LD   hl,1   
1069   E5                     PUSH   hl   
106A   E5                     PUSH   hl   
106B   CD E5 0C               CALL   run   
106E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1076   CD 4E 0B               CALL   flushBuffer   
1079   CD C6 0B               CALL   printStr   
107C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1089   E1                     POP   hl   
108A   E5                     PUSH   hl   
108B   E5                     PUSH   hl   
108C   CD E5 0C               CALL   run   
108F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
109E   CD 4E 0B               CALL   flushBuffer   
10A1   76                     HALT      
10A2                EXPECTM_2706S25:      
10A2   E1                     POP   HL   
10A3                          ;*Macro unroll:  test "2", 2
10A3   31 00 4E               LD   SP,STACK   
10A6   CD 0E 0C               CALL   coldInit   
10A9   CD 79 4C               CALL   execStr   
10AC   32 00                  DB   "2",0   
10AE   CD 4E 0B               CALL   flushBuffer   
10B1   E1                     POP   HL   
10B2   E5                     PUSH   HL   
10B3   11 02 00               LD   DE,2   
10B6   B7                     OR   A   
10B7   ED 52                  SBC   HL,DE   
10B9   7D                     LD   A,L   
10BA   B4                     OR   H   
10BB   CA 17 11               JP   Z,expectM_2707S26   
10BE   CD C6 0B               CALL   printStr   
10C1   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
10C9   CD C6 0B               CALL   printStr   
10CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10DB   21 02 00               LD   hl,2   
10DE   E5                     PUSH   hl   
10DF   E5                     PUSH   hl   
10E0   CD E5 0C               CALL   run   
10E3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10EB   CD 4E 0B               CALL   flushBuffer   
10EE   CD C6 0B               CALL   printStr   
10F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10FE   E1                     POP   hl   
10FF   E5                     PUSH   hl   
1100   E5                     PUSH   hl   
1101   CD E5 0C               CALL   run   
1104   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1113   CD 4E 0B               CALL   flushBuffer   
1116   76                     HALT      
1117                EXPECTM_2707S26:      
1117   E1                     POP   HL   
1118                          ;*Macro unroll:  test "1", 1
1118   31 00 4E               LD   SP,STACK   
111B   CD 0E 0C               CALL   coldInit   
111E   CD 79 4C               CALL   execStr   
1121   31 00                  DB   "1",0   
1123   CD 4E 0B               CALL   flushBuffer   
1126   E1                     POP   HL   
1127   E5                     PUSH   HL   
1128   11 01 00               LD   DE,1   
112B   B7                     OR   A   
112C   ED 52                  SBC   HL,DE   
112E   7D                     LD   A,L   
112F   B4                     OR   H   
1130   CA 8C 11               JP   Z,expectM_2708S27   
1133   CD C6 0B               CALL   printStr   
1136   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
113E   CD C6 0B               CALL   printStr   
1141   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1150   21 01 00               LD   hl,1   
1153   E5                     PUSH   hl   
1154   E5                     PUSH   hl   
1155   CD E5 0C               CALL   run   
1158   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1160   CD 4E 0B               CALL   flushBuffer   
1163   CD C6 0B               CALL   printStr   
1166   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1173   E1                     POP   hl   
1174   E5                     PUSH   hl   
1175   E5                     PUSH   hl   
1176   CD E5 0C               CALL   run   
1179   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1188   CD 4E 0B               CALL   flushBuffer   
118B   76                     HALT      
118C                EXPECTM_2708S27:      
118C   E1                     POP   HL   
118D                          ;*Macro unroll:  test "0", 0
118D   31 00 4E               LD   SP,STACK   
1190   CD 0E 0C               CALL   coldInit   
1193   CD 79 4C               CALL   execStr   
1196   30 00                  DB   "0",0   
1198   CD 4E 0B               CALL   flushBuffer   
119B   E1                     POP   HL   
119C   E5                     PUSH   HL   
119D   11 00 00               LD   DE,0   
11A0   B7                     OR   A   
11A1   ED 52                  SBC   HL,DE   
11A3   7D                     LD   A,L   
11A4   B4                     OR   H   
11A5   CA 01 12               JP   Z,expectM_2709S28   
11A8   CD C6 0B               CALL   printStr   
11AB   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
11B3   CD C6 0B               CALL   printStr   
11B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11C5   21 00 00               LD   hl,0   
11C8   E5                     PUSH   hl   
11C9   E5                     PUSH   hl   
11CA   CD E5 0C               CALL   run   
11CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11D5   CD 4E 0B               CALL   flushBuffer   
11D8   CD C6 0B               CALL   printStr   
11DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11E8   E1                     POP   hl   
11E9   E5                     PUSH   hl   
11EA   E5                     PUSH   hl   
11EB   CD E5 0C               CALL   run   
11EE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11FD   CD 4E 0B               CALL   flushBuffer   
1200   76                     HALT      
1201                EXPECTM_2709S28:      
1201   E1                     POP   HL   
1202                          ;*Macro unroll:  test "10", 10
1202   31 00 4E               LD   SP,STACK   
1205   CD 0E 0C               CALL   coldInit   
1208   CD 79 4C               CALL   execStr   
120B   31 30 00               DB   "10",0   
120E   CD 4E 0B               CALL   flushBuffer   
1211   E1                     POP   HL   
1212   E5                     PUSH   HL   
1213   11 0A 00               LD   DE,10   
1216   B7                     OR   A   
1217   ED 52                  SBC   HL,DE   
1219   7D                     LD   A,L   
121A   B4                     OR   H   
121B   CA 78 12               JP   Z,expectM_2710S29   
121E   CD C6 0B               CALL   printStr   
1221   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
122A   CD C6 0B               CALL   printStr   
122D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
123C   21 0A 00               LD   hl,10   
123F   E5                     PUSH   hl   
1240   E5                     PUSH   hl   
1241   CD E5 0C               CALL   run   
1244   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
124C   CD 4E 0B               CALL   flushBuffer   
124F   CD C6 0B               CALL   printStr   
1252   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
125F   E1                     POP   hl   
1260   E5                     PUSH   hl   
1261   E5                     PUSH   hl   
1262   CD E5 0C               CALL   run   
1265   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1274   CD 4E 0B               CALL   flushBuffer   
1277   76                     HALT      
1278                EXPECTM_2710S29:      
1278   E1                     POP   HL   
1279                          ;*Macro unroll:  test "123", 123
1279   31 00 4E               LD   SP,STACK   
127C   CD 0E 0C               CALL   coldInit   
127F   CD 79 4C               CALL   execStr   
1282   31 32 33 00            DB   "123",0   
1286   CD 4E 0B               CALL   flushBuffer   
1289   E1                     POP   HL   
128A   E5                     PUSH   HL   
128B   11 7B 00               LD   DE,123   
128E   B7                     OR   A   
128F   ED 52                  SBC   HL,DE   
1291   7D                     LD   A,L   
1292   B4                     OR   H   
1293   CA F1 12               JP   Z,expectM_2711S30   
1296   CD C6 0B               CALL   printStr   
1299   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
12A3   CD C6 0B               CALL   printStr   
12A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12B5   21 7B 00               LD   hl,123   
12B8   E5                     PUSH   hl   
12B9   E5                     PUSH   hl   
12BA   CD E5 0C               CALL   run   
12BD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12C5   CD 4E 0B               CALL   flushBuffer   
12C8   CD C6 0B               CALL   printStr   
12CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12D8   E1                     POP   hl   
12D9   E5                     PUSH   hl   
12DA   E5                     PUSH   hl   
12DB   CD E5 0C               CALL   run   
12DE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12ED   CD 4E 0B               CALL   flushBuffer   
12F0   76                     HALT      
12F1                EXPECTM_2711S30:      
12F1   E1                     POP   HL   
12F2                          ;*Macro unroll:  test "-1",-1
12F2   31 00 4E               LD   SP,STACK   
12F5   CD 0E 0C               CALL   coldInit   
12F8   CD 79 4C               CALL   execStr   
12FB   2D 31 00               DB   "-1",0   
12FE   CD 4E 0B               CALL   flushBuffer   
1301   E1                     POP   HL   
1302   E5                     PUSH   HL   
1303   11 FF FF               LD   DE,-1   
1306   B7                     OR   A   
1307   ED 52                  SBC   HL,DE   
1309   7D                     LD   A,L   
130A   B4                     OR   H   
130B   CA 68 13               JP   Z,expectM_2712S31   
130E   CD C6 0B               CALL   printStr   
1311   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
131A   CD C6 0B               CALL   printStr   
131D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
132C   21 FF FF               LD   hl,-1   
132F   E5                     PUSH   hl   
1330   E5                     PUSH   hl   
1331   CD E5 0C               CALL   run   
1334   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
133C   CD 4E 0B               CALL   flushBuffer   
133F   CD C6 0B               CALL   printStr   
1342   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
134F   E1                     POP   hl   
1350   E5                     PUSH   hl   
1351   E5                     PUSH   hl   
1352   CD E5 0C               CALL   run   
1355   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1364   CD 4E 0B               CALL   flushBuffer   
1367   76                     HALT      
1368                EXPECTM_2712S31:      
1368   E1                     POP   HL   
1369                          ;*Macro unroll:  test "''", 0
1369   31 00 4E               LD   SP,STACK   
136C   CD 0E 0C               CALL   coldInit   
136F   CD 79 4C               CALL   execStr   
1372   27 27 00               DB   "''",0   
1375   CD 4E 0B               CALL   flushBuffer   
1378   E1                     POP   HL   
1379   E5                     PUSH   HL   
137A   11 00 00               LD   DE,0   
137D   B7                     OR   A   
137E   ED 52                  SBC   HL,DE   
1380   7D                     LD   A,L   
1381   B4                     OR   H   
1382   CA DF 13               JP   Z,expectM_2713S32   
1385   CD C6 0B               CALL   printStr   
1388   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1391   CD C6 0B               CALL   printStr   
1394   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13A3   21 00 00               LD   hl,0   
13A6   E5                     PUSH   hl   
13A7   E5                     PUSH   hl   
13A8   CD E5 0C               CALL   run   
13AB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13B3   CD 4E 0B               CALL   flushBuffer   
13B6   CD C6 0B               CALL   printStr   
13B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13C6   E1                     POP   hl   
13C7   E5                     PUSH   hl   
13C8   E5                     PUSH   hl   
13C9   CD E5 0C               CALL   run   
13CC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13DB   CD 4E 0B               CALL   flushBuffer   
13DE   76                     HALT      
13DF                EXPECTM_2713S32:      
13DF   E1                     POP   HL   
13E0                          ;*Macro unroll:  test "'a'", $61
13E0   31 00 4E               LD   SP,STACK   
13E3   CD 0E 0C               CALL   coldInit   
13E6   CD 79 4C               CALL   execStr   
13E9   27 61 27 00            DB   "'a'",0   
13ED   CD 4E 0B               CALL   flushBuffer   
13F0   E1                     POP   HL   
13F1   E5                     PUSH   HL   
13F2   11 61 00               LD   DE,$61   
13F5   B7                     OR   A   
13F6   ED 52                  SBC   HL,DE   
13F8   7D                     LD   A,L   
13F9   B4                     OR   H   
13FA   CA 58 14               JP   Z,expectM_2714S33   
13FD   CD C6 0B               CALL   printStr   
1400   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
140A   CD C6 0B               CALL   printStr   
140D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
141C   21 61 00               LD   hl,$61   
141F   E5                     PUSH   hl   
1420   E5                     PUSH   hl   
1421   CD E5 0C               CALL   run   
1424   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
142C   CD 4E 0B               CALL   flushBuffer   
142F   CD C6 0B               CALL   printStr   
1432   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
143F   E1                     POP   hl   
1440   E5                     PUSH   hl   
1441   E5                     PUSH   hl   
1442   CD E5 0C               CALL   run   
1445   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1454   CD 4E 0B               CALL   flushBuffer   
1457   76                     HALT      
1458                EXPECTM_2714S33:      
1458   E1                     POP   HL   
1459                          ;*Macro unroll:  test "'\\''", $27
1459   31 00 4E               LD   SP,STACK   
145C   CD 0E 0C               CALL   coldInit   
145F   CD 79 4C               CALL   execStr   
1462   27 5C 27 27 00         DB   "'\\''",0   
1467   CD 4E 0B               CALL   flushBuffer   
146A   E1                     POP   HL   
146B   E5                     PUSH   HL   
146C   11 27 00               LD   DE,$27   
146F   B7                     OR   A   
1470   ED 52                  SBC   HL,DE   
1472   7D                     LD   A,L   
1473   B4                     OR   H   
1474   CA D3 14               JP   Z,expectM_2715S34   
1477   CD C6 0B               CALL   printStr   
147A   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1485   CD C6 0B               CALL   printStr   
1488   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1497   21 27 00               LD   hl,$27   
149A   E5                     PUSH   hl   
149B   E5                     PUSH   hl   
149C   CD E5 0C               CALL   run   
149F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14A7   CD 4E 0B               CALL   flushBuffer   
14AA   CD C6 0B               CALL   printStr   
14AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14BA   E1                     POP   hl   
14BB   E5                     PUSH   hl   
14BC   E5                     PUSH   hl   
14BD   CD E5 0C               CALL   run   
14C0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14CF   CD 4E 0B               CALL   flushBuffer   
14D2   76                     HALT      
14D3                EXPECTM_2715S34:      
14D3   E1                     POP   HL   
14D4                          ;*Macro unroll:  test "$10", $10
14D4   31 00 4E               LD   SP,STACK   
14D7   CD 0E 0C               CALL   coldInit   
14DA   CD 79 4C               CALL   execStr   
14DD   24 31 30 00            DB   "$10",0   
14E1   CD 4E 0B               CALL   flushBuffer   
14E4   E1                     POP   HL   
14E5   E5                     PUSH   HL   
14E6   11 10 00               LD   DE,$10   
14E9   B7                     OR   A   
14EA   ED 52                  SBC   HL,DE   
14EC   7D                     LD   A,L   
14ED   B4                     OR   H   
14EE   CA 4C 15               JP   Z,expectM_2716S35   
14F1   CD C6 0B               CALL   printStr   
14F4   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
14FE   CD C6 0B               CALL   printStr   
1501   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1510   21 10 00               LD   hl,$10   
1513   E5                     PUSH   hl   
1514   E5                     PUSH   hl   
1515   CD E5 0C               CALL   run   
1518   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1520   CD 4E 0B               CALL   flushBuffer   
1523   CD C6 0B               CALL   printStr   
1526   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1533   E1                     POP   hl   
1534   E5                     PUSH   hl   
1535   E5                     PUSH   hl   
1536   CD E5 0C               CALL   run   
1539   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1548   CD 4E 0B               CALL   flushBuffer   
154B   76                     HALT      
154C                EXPECTM_2716S35:      
154C   E1                     POP   HL   
154D                          ;*Macro unroll:  test "$FF", $FF
154D   31 00 4E               LD   SP,STACK   
1550   CD 0E 0C               CALL   coldInit   
1553   CD 79 4C               CALL   execStr   
1556   24 46 46 00            DB   "$FF",0   
155A   CD 4E 0B               CALL   flushBuffer   
155D   E1                     POP   HL   
155E   E5                     PUSH   HL   
155F   11 FF 00               LD   DE,$FF   
1562   B7                     OR   A   
1563   ED 52                  SBC   HL,DE   
1565   7D                     LD   A,L   
1566   B4                     OR   H   
1567   CA C5 15               JP   Z,expectM_2717S36   
156A   CD C6 0B               CALL   printStr   
156D   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1577   CD C6 0B               CALL   printStr   
157A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1589   21 FF 00               LD   hl,$FF   
158C   E5                     PUSH   hl   
158D   E5                     PUSH   hl   
158E   CD E5 0C               CALL   run   
1591   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1599   CD 4E 0B               CALL   flushBuffer   
159C   CD C6 0B               CALL   printStr   
159F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15AC   E1                     POP   hl   
15AD   E5                     PUSH   hl   
15AE   E5                     PUSH   hl   
15AF   CD E5 0C               CALL   run   
15B2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15C1   CD 4E 0B               CALL   flushBuffer   
15C4   76                     HALT      
15C5                EXPECTM_2717S36:      
15C5   E1                     POP   HL   
15C6                          ;*Macro unroll:  test "-1 2 +",1
15C6   31 00 4E               LD   SP,STACK   
15C9   CD 0E 0C               CALL   coldInit   
15CC   CD 79 4C               CALL   execStr   
15CF   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
15D6   CD 4E 0B               CALL   flushBuffer   
15D9   E1                     POP   HL   
15DA   E5                     PUSH   HL   
15DB   11 01 00               LD   DE,1   
15DE   B7                     OR   A   
15DF   ED 52                  SBC   HL,DE   
15E1   7D                     LD   A,L   
15E2   B4                     OR   H   
15E3   CA 44 16               JP   Z,expectM_2718S37   
15E6   CD C6 0B               CALL   printStr   
15E9   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
15F6   CD C6 0B               CALL   printStr   
15F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1608   21 01 00               LD   hl,1   
160B   E5                     PUSH   hl   
160C   E5                     PUSH   hl   
160D   CD E5 0C               CALL   run   
1610   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1618   CD 4E 0B               CALL   flushBuffer   
161B   CD C6 0B               CALL   printStr   
161E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
162B   E1                     POP   hl   
162C   E5                     PUSH   hl   
162D   E5                     PUSH   hl   
162E   CD E5 0C               CALL   run   
1631   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1640   CD 4E 0B               CALL   flushBuffer   
1643   76                     HALT      
1644                EXPECTM_2718S37:      
1644   E1                     POP   HL   
1645                          ;*Macro unroll:  test "-1 1 +",0
1645   31 00 4E               LD   SP,STACK   
1648   CD 0E 0C               CALL   coldInit   
164B   CD 79 4C               CALL   execStr   
164E   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1655   CD 4E 0B               CALL   flushBuffer   
1658   E1                     POP   HL   
1659   E5                     PUSH   HL   
165A   11 00 00               LD   DE,0   
165D   B7                     OR   A   
165E   ED 52                  SBC   HL,DE   
1660   7D                     LD   A,L   
1661   B4                     OR   H   
1662   CA C3 16               JP   Z,expectM_2719S38   
1665   CD C6 0B               CALL   printStr   
1668   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1675   CD C6 0B               CALL   printStr   
1678   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1687   21 00 00               LD   hl,0   
168A   E5                     PUSH   hl   
168B   E5                     PUSH   hl   
168C   CD E5 0C               CALL   run   
168F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1697   CD 4E 0B               CALL   flushBuffer   
169A   CD C6 0B               CALL   printStr   
169D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16AA   E1                     POP   hl   
16AB   E5                     PUSH   hl   
16AC   E5                     PUSH   hl   
16AD   CD E5 0C               CALL   run   
16B0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16BF   CD 4E 0B               CALL   flushBuffer   
16C2   76                     HALT      
16C3                EXPECTM_2719S38:      
16C3   E1                     POP   HL   
16C4                          ;*Macro unroll:  test "1 2 +", 3
16C4   31 00 4E               LD   SP,STACK   
16C7   CD 0E 0C               CALL   coldInit   
16CA   CD 79 4C               CALL   execStr   
16CD   31 20 32 20 2B 00      DB   "1 2 +",0   
16D3   CD 4E 0B               CALL   flushBuffer   
16D6   E1                     POP   HL   
16D7   E5                     PUSH   HL   
16D8   11 03 00               LD   DE,3   
16DB   B7                     OR   A   
16DC   ED 52                  SBC   HL,DE   
16DE   7D                     LD   A,L   
16DF   B4                     OR   H   
16E0   CA 40 17               JP   Z,expectM_2720S39   
16E3   CD C6 0B               CALL   printStr   
16E6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
16F2   CD C6 0B               CALL   printStr   
16F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1704   21 03 00               LD   hl,3   
1707   E5                     PUSH   hl   
1708   E5                     PUSH   hl   
1709   CD E5 0C               CALL   run   
170C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1714   CD 4E 0B               CALL   flushBuffer   
1717   CD C6 0B               CALL   printStr   
171A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1727   E1                     POP   hl   
1728   E5                     PUSH   hl   
1729   E5                     PUSH   hl   
172A   CD E5 0C               CALL   run   
172D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
173C   CD 4E 0B               CALL   flushBuffer   
173F   76                     HALT      
1740                EXPECTM_2720S39:      
1740   E1                     POP   HL   
1741                          ;*Macro unroll:  test "4 1 2 +", 3
1741   31 00 4E               LD   SP,STACK   
1744   CD 0E 0C               CALL   coldInit   
1747   CD 79 4C               CALL   execStr   
174A   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1752   CD 4E 0B               CALL   flushBuffer   
1755   E1                     POP   HL   
1756   E5                     PUSH   HL   
1757   11 03 00               LD   DE,3   
175A   B7                     OR   A   
175B   ED 52                  SBC   HL,DE   
175D   7D                     LD   A,L   
175E   B4                     OR   H   
175F   CA C1 17               JP   Z,expectM_2721S40   
1762   CD C6 0B               CALL   printStr   
1765   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1773   CD C6 0B               CALL   printStr   
1776   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1785   21 03 00               LD   hl,3   
1788   E5                     PUSH   hl   
1789   E5                     PUSH   hl   
178A   CD E5 0C               CALL   run   
178D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1795   CD 4E 0B               CALL   flushBuffer   
1798   CD C6 0B               CALL   printStr   
179B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17A8   E1                     POP   hl   
17A9   E5                     PUSH   hl   
17AA   E5                     PUSH   hl   
17AB   CD E5 0C               CALL   run   
17AE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17BD   CD 4E 0B               CALL   flushBuffer   
17C0   76                     HALT      
17C1                EXPECTM_2721S40:      
17C1   E1                     POP   HL   
17C2                          ;*Macro unroll:  test "123 456 +", 123+456
17C2   31 00 4E               LD   SP,STACK   
17C5   CD 0E 0C               CALL   coldInit   
17C8   CD 79 4C               CALL   execStr   
17CB   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
17D5   CD 4E 0B               CALL   flushBuffer   
17D8   E1                     POP   HL   
17D9   E5                     PUSH   HL   
17DA   11 43 02               LD   DE,123+456   
17DD   B7                     OR   A   
17DE   ED 52                  SBC   HL,DE   
17E0   7D                     LD   A,L   
17E1   B4                     OR   H   
17E2   CA 46 18               JP   Z,expectM_2722S41   
17E5   CD C6 0B               CALL   printStr   
17E8   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
17F8   CD C6 0B               CALL   printStr   
17FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
180A   21 43 02               LD   hl,123+456   
180D   E5                     PUSH   hl   
180E   E5                     PUSH   hl   
180F   CD E5 0C               CALL   run   
1812   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
181A   CD 4E 0B               CALL   flushBuffer   
181D   CD C6 0B               CALL   printStr   
1820   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
182D   E1                     POP   hl   
182E   E5                     PUSH   hl   
182F   E5                     PUSH   hl   
1830   CD E5 0C               CALL   run   
1833   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1842   CD 4E 0B               CALL   flushBuffer   
1845   76                     HALT      
1846                EXPECTM_2722S41:      
1846   E1                     POP   HL   
1847                          ;*Macro unroll:  test "64 128 +", 64+128
1847   31 00 4E               LD   SP,STACK   
184A   CD 0E 0C               CALL   coldInit   
184D   CD 79 4C               CALL   execStr   
1850   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1859   CD 4E 0B               CALL   flushBuffer   
185C   E1                     POP   HL   
185D   E5                     PUSH   HL   
185E   11 C0 00               LD   DE,64+128   
1861   B7                     OR   A   
1862   ED 52                  SBC   HL,DE   
1864   7D                     LD   A,L   
1865   B4                     OR   H   
1866   CA C9 18               JP   Z,expectM_2723S42   
1869   CD C6 0B               CALL   printStr   
186C   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
187B   CD C6 0B               CALL   printStr   
187E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
188D   21 C0 00               LD   hl,64+128   
1890   E5                     PUSH   hl   
1891   E5                     PUSH   hl   
1892   CD E5 0C               CALL   run   
1895   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
189D   CD 4E 0B               CALL   flushBuffer   
18A0   CD C6 0B               CALL   printStr   
18A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18B0   E1                     POP   hl   
18B1   E5                     PUSH   hl   
18B2   E5                     PUSH   hl   
18B3   CD E5 0C               CALL   run   
18B6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18C5   CD 4E 0B               CALL   flushBuffer   
18C8   76                     HALT      
18C9                EXPECTM_2723S42:      
18C9   E1                     POP   HL   
18CA                          ;*Macro unroll:  test "1 2 +", 3
18CA   31 00 4E               LD   SP,STACK   
18CD   CD 0E 0C               CALL   coldInit   
18D0   CD 79 4C               CALL   execStr   
18D3   31 20 32 20 2B 00      DB   "1 2 +",0   
18D9   CD 4E 0B               CALL   flushBuffer   
18DC   E1                     POP   HL   
18DD   E5                     PUSH   HL   
18DE   11 03 00               LD   DE,3   
18E1   B7                     OR   A   
18E2   ED 52                  SBC   HL,DE   
18E4   7D                     LD   A,L   
18E5   B4                     OR   H   
18E6   CA 46 19               JP   Z,expectM_2724S43   
18E9   CD C6 0B               CALL   printStr   
18EC   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
18F8   CD C6 0B               CALL   printStr   
18FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
190A   21 03 00               LD   hl,3   
190D   E5                     PUSH   hl   
190E   E5                     PUSH   hl   
190F   CD E5 0C               CALL   run   
1912   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
191A   CD 4E 0B               CALL   flushBuffer   
191D   CD C6 0B               CALL   printStr   
1920   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
192D   E1                     POP   hl   
192E   E5                     PUSH   hl   
192F   E5                     PUSH   hl   
1930   CD E5 0C               CALL   run   
1933   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1942   CD 4E 0B               CALL   flushBuffer   
1945   76                     HALT      
1946                EXPECTM_2724S43:      
1946   E1                     POP   HL   
1947                          ;*Macro unroll:  test "1a= a++ a",2
1947   31 00 4E               LD   SP,STACK   
194A   CD 0E 0C               CALL   coldInit   
194D   CD 79 4C               CALL   execStr   
1950   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
195A   CD 4E 0B               CALL   flushBuffer   
195D   E1                     POP   HL   
195E   E5                     PUSH   HL   
195F   11 02 00               LD   DE,2   
1962   B7                     OR   A   
1963   ED 52                  SBC   HL,DE   
1965   7D                     LD   A,L   
1966   B4                     OR   H   
1967   CA CB 19               JP   Z,expectM_2725S44   
196A   CD C6 0B               CALL   printStr   
196D   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
197D   CD C6 0B               CALL   printStr   
1980   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
198F   21 02 00               LD   hl,2   
1992   E5                     PUSH   hl   
1993   E5                     PUSH   hl   
1994   CD E5 0C               CALL   run   
1997   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
199F   CD 4E 0B               CALL   flushBuffer   
19A2   CD C6 0B               CALL   printStr   
19A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19B2   E1                     POP   hl   
19B3   E5                     PUSH   hl   
19B4   E5                     PUSH   hl   
19B5   CD E5 0C               CALL   run   
19B8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19C7   CD 4E 0B               CALL   flushBuffer   
19CA   76                     HALT      
19CB                EXPECTM_2725S44:      
19CB   E1                     POP   HL   
19CC                          ;*Macro unroll:  test "-1 -1 -",0
19CC   31 00 4E               LD   SP,STACK   
19CF   CD 0E 0C               CALL   coldInit   
19D2   CD 79 4C               CALL   execStr   
19D5   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
19DD   CD 4E 0B               CALL   flushBuffer   
19E0   E1                     POP   HL   
19E1   E5                     PUSH   HL   
19E2   11 00 00               LD   DE,0   
19E5   B7                     OR   A   
19E6   ED 52                  SBC   HL,DE   
19E8   7D                     LD   A,L   
19E9   B4                     OR   H   
19EA   CA 4C 1A               JP   Z,expectM_2726S45   
19ED   CD C6 0B               CALL   printStr   
19F0   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
19FE   CD C6 0B               CALL   printStr   
1A01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A10   21 00 00               LD   hl,0   
1A13   E5                     PUSH   hl   
1A14   E5                     PUSH   hl   
1A15   CD E5 0C               CALL   run   
1A18   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A20   CD 4E 0B               CALL   flushBuffer   
1A23   CD C6 0B               CALL   printStr   
1A26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A33   E1                     POP   hl   
1A34   E5                     PUSH   hl   
1A35   E5                     PUSH   hl   
1A36   CD E5 0C               CALL   run   
1A39   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A48   CD 4E 0B               CALL   flushBuffer   
1A4B   76                     HALT      
1A4C                EXPECTM_2726S45:      
1A4C   E1                     POP   HL   
1A4D                          ;*Macro unroll:  test "5 3 -", 2
1A4D   31 00 4E               LD   SP,STACK   
1A50   CD 0E 0C               CALL   coldInit   
1A53   CD 79 4C               CALL   execStr   
1A56   35 20 33 20 2D 00      DB   "5 3 -",0   
1A5C   CD 4E 0B               CALL   flushBuffer   
1A5F   E1                     POP   HL   
1A60   E5                     PUSH   HL   
1A61   11 02 00               LD   DE,2   
1A64   B7                     OR   A   
1A65   ED 52                  SBC   HL,DE   
1A67   7D                     LD   A,L   
1A68   B4                     OR   H   
1A69   CA C9 1A               JP   Z,expectM_2727S46   
1A6C   CD C6 0B               CALL   printStr   
1A6F   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1A7B   CD C6 0B               CALL   printStr   
1A7E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A8D   21 02 00               LD   hl,2   
1A90   E5                     PUSH   hl   
1A91   E5                     PUSH   hl   
1A92   CD E5 0C               CALL   run   
1A95   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A9D   CD 4E 0B               CALL   flushBuffer   
1AA0   CD C6 0B               CALL   printStr   
1AA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AB0   E1                     POP   hl   
1AB1   E5                     PUSH   hl   
1AB2   E5                     PUSH   hl   
1AB3   CD E5 0C               CALL   run   
1AB6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1AC5   CD 4E 0B               CALL   flushBuffer   
1AC8   76                     HALT      
1AC9                EXPECTM_2727S46:      
1AC9   E1                     POP   HL   
1ACA                          ;*Macro unroll:  test "2 1 -",1
1ACA   31 00 4E               LD   SP,STACK   
1ACD   CD 0E 0C               CALL   coldInit   
1AD0   CD 79 4C               CALL   execStr   
1AD3   32 20 31 20 2D 00      DB   "2 1 -",0   
1AD9   CD 4E 0B               CALL   flushBuffer   
1ADC   E1                     POP   HL   
1ADD   E5                     PUSH   HL   
1ADE   11 01 00               LD   DE,1   
1AE1   B7                     OR   A   
1AE2   ED 52                  SBC   HL,DE   
1AE4   7D                     LD   A,L   
1AE5   B4                     OR   H   
1AE6   CA 46 1B               JP   Z,expectM_2728S47   
1AE9   CD C6 0B               CALL   printStr   
1AEC   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1AF8   CD C6 0B               CALL   printStr   
1AFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B0A   21 01 00               LD   hl,1   
1B0D   E5                     PUSH   hl   
1B0E   E5                     PUSH   hl   
1B0F   CD E5 0C               CALL   run   
1B12   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B1A   CD 4E 0B               CALL   flushBuffer   
1B1D   CD C6 0B               CALL   printStr   
1B20   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B2D   E1                     POP   hl   
1B2E   E5                     PUSH   hl   
1B2F   E5                     PUSH   hl   
1B30   CD E5 0C               CALL   run   
1B33   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B42   CD 4E 0B               CALL   flushBuffer   
1B45   76                     HALT      
1B46                EXPECTM_2728S47:      
1B46   E1                     POP   HL   
1B47                          ;*Macro unroll:  test "3a= a-- a",2
1B47   31 00 4E               LD   SP,STACK   
1B4A   CD 0E 0C               CALL   coldInit   
1B4D   CD 79 4C               CALL   execStr   
1B50   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1B5A   CD 4E 0B               CALL   flushBuffer   
1B5D   E1                     POP   HL   
1B5E   E5                     PUSH   HL   
1B5F   11 02 00               LD   DE,2   
1B62   B7                     OR   A   
1B63   ED 52                  SBC   HL,DE   
1B65   7D                     LD   A,L   
1B66   B4                     OR   H   
1B67   CA CB 1B               JP   Z,expectM_2729S48   
1B6A   CD C6 0B               CALL   printStr   
1B6D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1B7D   CD C6 0B               CALL   printStr   
1B80   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B8F   21 02 00               LD   hl,2   
1B92   E5                     PUSH   hl   
1B93   E5                     PUSH   hl   
1B94   CD E5 0C               CALL   run   
1B97   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B9F   CD 4E 0B               CALL   flushBuffer   
1BA2   CD C6 0B               CALL   printStr   
1BA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BB2   E1                     POP   hl   
1BB3   E5                     PUSH   hl   
1BB4   E5                     PUSH   hl   
1BB5   CD E5 0C               CALL   run   
1BB8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BC7   CD 4E 0B               CALL   flushBuffer   
1BCA   76                     HALT      
1BCB                EXPECTM_2729S48:      
1BCB   E1                     POP   HL   
1BCC                          ;*Macro unroll:  test "3 5 &", 1
1BCC   31 00 4E               LD   SP,STACK   
1BCF   CD 0E 0C               CALL   coldInit   
1BD2   CD 79 4C               CALL   execStr   
1BD5   33 20 35 20 26 00      DB   "3 5 &",0   
1BDB   CD 4E 0B               CALL   flushBuffer   
1BDE   E1                     POP   HL   
1BDF   E5                     PUSH   HL   
1BE0   11 01 00               LD   DE,1   
1BE3   B7                     OR   A   
1BE4   ED 52                  SBC   HL,DE   
1BE6   7D                     LD   A,L   
1BE7   B4                     OR   H   
1BE8   CA 48 1C               JP   Z,expectM_2730S49   
1BEB   CD C6 0B               CALL   printStr   
1BEE   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1BFA   CD C6 0B               CALL   printStr   
1BFD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C0C   21 01 00               LD   hl,1   
1C0F   E5                     PUSH   hl   
1C10   E5                     PUSH   hl   
1C11   CD E5 0C               CALL   run   
1C14   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C1C   CD 4E 0B               CALL   flushBuffer   
1C1F   CD C6 0B               CALL   printStr   
1C22   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C2F   E1                     POP   hl   
1C30   E5                     PUSH   hl   
1C31   E5                     PUSH   hl   
1C32   CD E5 0C               CALL   run   
1C35   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C44   CD 4E 0B               CALL   flushBuffer   
1C47   76                     HALT      
1C48                EXPECTM_2730S49:      
1C48   E1                     POP   HL   
1C49                          ;*Macro unroll:  test "3 5 |", 7
1C49   31 00 4E               LD   SP,STACK   
1C4C   CD 0E 0C               CALL   coldInit   
1C4F   CD 79 4C               CALL   execStr   
1C52   33 20 35 20 7C 00      DB   "3 5 |",0   
1C58   CD 4E 0B               CALL   flushBuffer   
1C5B   E1                     POP   HL   
1C5C   E5                     PUSH   HL   
1C5D   11 07 00               LD   DE,7   
1C60   B7                     OR   A   
1C61   ED 52                  SBC   HL,DE   
1C63   7D                     LD   A,L   
1C64   B4                     OR   H   
1C65   CA C5 1C               JP   Z,expectM_2731S50   
1C68   CD C6 0B               CALL   printStr   
1C6B   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1C77   CD C6 0B               CALL   printStr   
1C7A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C89   21 07 00               LD   hl,7   
1C8C   E5                     PUSH   hl   
1C8D   E5                     PUSH   hl   
1C8E   CD E5 0C               CALL   run   
1C91   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C99   CD 4E 0B               CALL   flushBuffer   
1C9C   CD C6 0B               CALL   printStr   
1C9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CAC   E1                     POP   hl   
1CAD   E5                     PUSH   hl   
1CAE   E5                     PUSH   hl   
1CAF   CD E5 0C               CALL   run   
1CB2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CC1   CD 4E 0B               CALL   flushBuffer   
1CC4   76                     HALT      
1CC5                EXPECTM_2731S50:      
1CC5   E1                     POP   HL   
1CC6                          ;*Macro unroll:  test "3 5 /x", 6
1CC6   31 00 4E               LD   SP,STACK   
1CC9   CD 0E 0C               CALL   coldInit   
1CCC   CD 79 4C               CALL   execStr   
1CCF   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1CD6   CD 4E 0B               CALL   flushBuffer   
1CD9   E1                     POP   HL   
1CDA   E5                     PUSH   HL   
1CDB   11 06 00               LD   DE,6   
1CDE   B7                     OR   A   
1CDF   ED 52                  SBC   HL,DE   
1CE1   7D                     LD   A,L   
1CE2   B4                     OR   H   
1CE3   CA 44 1D               JP   Z,expectM_2732S51   
1CE6   CD C6 0B               CALL   printStr   
1CE9   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1CF6   CD C6 0B               CALL   printStr   
1CF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D08   21 06 00               LD   hl,6   
1D0B   E5                     PUSH   hl   
1D0C   E5                     PUSH   hl   
1D0D   CD E5 0C               CALL   run   
1D10   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D18   CD 4E 0B               CALL   flushBuffer   
1D1B   CD C6 0B               CALL   printStr   
1D1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D2B   E1                     POP   hl   
1D2C   E5                     PUSH   hl   
1D2D   E5                     PUSH   hl   
1D2E   CD E5 0C               CALL   run   
1D31   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D40   CD 4E 0B               CALL   flushBuffer   
1D43   76                     HALT      
1D44                EXPECTM_2732S51:      
1D44   E1                     POP   HL   
1D45                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1D45   31 00 4E               LD   SP,STACK   
1D48   CD 0E 0C               CALL   coldInit   
1D4B   CD 79 4C               CALL   execStr   
1D4E   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1D5D   CD 4E 0B               CALL   flushBuffer   
1D60   E1                     POP   HL   
1D61   E5                     PUSH   HL   
1D62   11 06 00               LD   DE,6   
1D65   B7                     OR   A   
1D66   ED 52                  SBC   HL,DE   
1D68   7D                     LD   A,L   
1D69   B4                     OR   H   
1D6A   CA D3 1D               JP   Z,expectM_2733S52   
1D6D   CD C6 0B               CALL   printStr   
1D70   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1D85   CD C6 0B               CALL   printStr   
1D88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D97   21 06 00               LD   hl,6   
1D9A   E5                     PUSH   hl   
1D9B   E5                     PUSH   hl   
1D9C   CD E5 0C               CALL   run   
1D9F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DA7   CD 4E 0B               CALL   flushBuffer   
1DAA   CD C6 0B               CALL   printStr   
1DAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DBA   E1                     POP   hl   
1DBB   E5                     PUSH   hl   
1DBC   E5                     PUSH   hl   
1DBD   CD E5 0C               CALL   run   
1DC0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DCF   CD 4E 0B               CALL   flushBuffer   
1DD2   76                     HALT      
1DD3                EXPECTM_2733S52:      
1DD3   E1                     POP   HL   
1DD4                          ;*Macro unroll:  test "2 3 *", 6
1DD4   31 00 4E               LD   SP,STACK   
1DD7   CD 0E 0C               CALL   coldInit   
1DDA   CD 79 4C               CALL   execStr   
1DDD   32 20 33 20 2A 00      DB   "2 3 *",0   
1DE3   CD 4E 0B               CALL   flushBuffer   
1DE6   E1                     POP   HL   
1DE7   E5                     PUSH   HL   
1DE8   11 06 00               LD   DE,6   
1DEB   B7                     OR   A   
1DEC   ED 52                  SBC   HL,DE   
1DEE   7D                     LD   A,L   
1DEF   B4                     OR   H   
1DF0   CA 50 1E               JP   Z,expectM_2734S53   
1DF3   CD C6 0B               CALL   printStr   
1DF6   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1E02   CD C6 0B               CALL   printStr   
1E05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E14   21 06 00               LD   hl,6   
1E17   E5                     PUSH   hl   
1E18   E5                     PUSH   hl   
1E19   CD E5 0C               CALL   run   
1E1C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E24   CD 4E 0B               CALL   flushBuffer   
1E27   CD C6 0B               CALL   printStr   
1E2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E37   E1                     POP   hl   
1E38   E5                     PUSH   hl   
1E39   E5                     PUSH   hl   
1E3A   CD E5 0C               CALL   run   
1E3D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E4C   CD 4E 0B               CALL   flushBuffer   
1E4F   76                     HALT      
1E50                EXPECTM_2734S53:      
1E50   E1                     POP   HL   
1E51                          ;*Macro unroll:  test "1 2 3 + *", 5
1E51   31 00 4E               LD   SP,STACK   
1E54   CD 0E 0C               CALL   coldInit   
1E57   CD 79 4C               CALL   execStr   
1E5A   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1E64   CD 4E 0B               CALL   flushBuffer   
1E67   E1                     POP   HL   
1E68   E5                     PUSH   HL   
1E69   11 05 00               LD   DE,5   
1E6C   B7                     OR   A   
1E6D   ED 52                  SBC   HL,DE   
1E6F   7D                     LD   A,L   
1E70   B4                     OR   H   
1E71   CA D5 1E               JP   Z,expectM_2735S54   
1E74   CD C6 0B               CALL   printStr   
1E77   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1E87   CD C6 0B               CALL   printStr   
1E8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E99   21 05 00               LD   hl,5   
1E9C   E5                     PUSH   hl   
1E9D   E5                     PUSH   hl   
1E9E   CD E5 0C               CALL   run   
1EA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EA9   CD 4E 0B               CALL   flushBuffer   
1EAC   CD C6 0B               CALL   printStr   
1EAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EBC   E1                     POP   hl   
1EBD   E5                     PUSH   hl   
1EBE   E5                     PUSH   hl   
1EBF   CD E5 0C               CALL   run   
1EC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1ED1   CD 4E 0B               CALL   flushBuffer   
1ED4   76                     HALT      
1ED5                EXPECTM_2735S54:      
1ED5   E1                     POP   HL   
1ED6                          ;*Macro unroll:  test "7 3 /", 2
1ED6   31 00 4E               LD   SP,STACK   
1ED9   CD 0E 0C               CALL   coldInit   
1EDC   CD 79 4C               CALL   execStr   
1EDF   37 20 33 20 2F 00      DB   "7 3 /",0   
1EE5   CD 4E 0B               CALL   flushBuffer   
1EE8   E1                     POP   HL   
1EE9   E5                     PUSH   HL   
1EEA   11 02 00               LD   DE,2   
1EED   B7                     OR   A   
1EEE   ED 52                  SBC   HL,DE   
1EF0   7D                     LD   A,L   
1EF1   B4                     OR   H   
1EF2   CA 52 1F               JP   Z,expectM_2736S55   
1EF5   CD C6 0B               CALL   printStr   
1EF8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1F04   CD C6 0B               CALL   printStr   
1F07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F16   21 02 00               LD   hl,2   
1F19   E5                     PUSH   hl   
1F1A   E5                     PUSH   hl   
1F1B   CD E5 0C               CALL   run   
1F1E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F26   CD 4E 0B               CALL   flushBuffer   
1F29   CD C6 0B               CALL   printStr   
1F2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F39   E1                     POP   hl   
1F3A   E5                     PUSH   hl   
1F3B   E5                     PUSH   hl   
1F3C   CD E5 0C               CALL   run   
1F3F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F4E   CD 4E 0B               CALL   flushBuffer   
1F51   76                     HALT      
1F52                EXPECTM_2736S55:      
1F52   E1                     POP   HL   
1F53                          ;*Macro unroll:  test "7 3 / /re", 1
1F53   31 00 4E               LD   SP,STACK   
1F56   CD 0E 0C               CALL   coldInit   
1F59   CD 79 4C               CALL   execStr   
1F5C   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
1F66   CD 4E 0B               CALL   flushBuffer   
1F69   E1                     POP   HL   
1F6A   E5                     PUSH   HL   
1F6B   11 01 00               LD   DE,1   
1F6E   B7                     OR   A   
1F6F   ED 52                  SBC   HL,DE   
1F71   7D                     LD   A,L   
1F72   B4                     OR   H   
1F73   CA D7 1F               JP   Z,expectM_2737S56   
1F76   CD C6 0B               CALL   printStr   
1F79   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
1F89   CD C6 0B               CALL   printStr   
1F8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F9B   21 01 00               LD   hl,1   
1F9E   E5                     PUSH   hl   
1F9F   E5                     PUSH   hl   
1FA0   CD E5 0C               CALL   run   
1FA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FAB   CD 4E 0B               CALL   flushBuffer   
1FAE   CD C6 0B               CALL   printStr   
1FB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FBE   E1                     POP   hl   
1FBF   E5                     PUSH   hl   
1FC0   E5                     PUSH   hl   
1FC1   CD E5 0C               CALL   run   
1FC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FD3   CD 4E 0B               CALL   flushBuffer   
1FD6   76                     HALT      
1FD7                EXPECTM_2737S56:      
1FD7   E1                     POP   HL   
1FD8                          ;*Macro unroll:  test "7 3 /", 2
1FD8   31 00 4E               LD   SP,STACK   
1FDB   CD 0E 0C               CALL   coldInit   
1FDE   CD 79 4C               CALL   execStr   
1FE1   37 20 33 20 2F 00      DB   "7 3 /",0   
1FE7   CD 4E 0B               CALL   flushBuffer   
1FEA   E1                     POP   HL   
1FEB   E5                     PUSH   HL   
1FEC   11 02 00               LD   DE,2   
1FEF   B7                     OR   A   
1FF0   ED 52                  SBC   HL,DE   
1FF2   7D                     LD   A,L   
1FF3   B4                     OR   H   
1FF4   CA 54 20               JP   Z,expectM_2738S57   
1FF7   CD C6 0B               CALL   printStr   
1FFA   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2006   CD C6 0B               CALL   printStr   
2009   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2018   21 02 00               LD   hl,2   
201B   E5                     PUSH   hl   
201C   E5                     PUSH   hl   
201D   CD E5 0C               CALL   run   
2020   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2028   CD 4E 0B               CALL   flushBuffer   
202B   CD C6 0B               CALL   printStr   
202E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
203B   E1                     POP   hl   
203C   E5                     PUSH   hl   
203D   E5                     PUSH   hl   
203E   CD E5 0C               CALL   run   
2041   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2050   CD 4E 0B               CALL   flushBuffer   
2053   76                     HALT      
2054                EXPECTM_2738S57:      
2054   E1                     POP   HL   
2055                          ;*Macro unroll:  test "2 3 ==", FALSE
2055   31 00 4E               LD   SP,STACK   
2058   CD 0E 0C               CALL   coldInit   
205B   CD 79 4C               CALL   execStr   
205E   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2065   CD 4E 0B               CALL   flushBuffer   
2068   E1                     POP   HL   
2069   E5                     PUSH   HL   
206A   11 00 00               LD   DE,FALSE   
206D   B7                     OR   A   
206E   ED 52                  SBC   HL,DE   
2070   7D                     LD   A,L   
2071   B4                     OR   H   
2072   CA D3 20               JP   Z,expectM_2739S58   
2075   CD C6 0B               CALL   printStr   
2078   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2085   CD C6 0B               CALL   printStr   
2088   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2097   21 00 00               LD   hl,FALSE   
209A   E5                     PUSH   hl   
209B   E5                     PUSH   hl   
209C   CD E5 0C               CALL   run   
209F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20A7   CD 4E 0B               CALL   flushBuffer   
20AA   CD C6 0B               CALL   printStr   
20AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20BA   E1                     POP   hl   
20BB   E5                     PUSH   hl   
20BC   E5                     PUSH   hl   
20BD   CD E5 0C               CALL   run   
20C0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20CF   CD 4E 0B               CALL   flushBuffer   
20D2   76                     HALT      
20D3                EXPECTM_2739S58:      
20D3   E1                     POP   HL   
20D4                          ;*Macro unroll:  test "3 3 ==", TRUE
20D4   31 00 4E               LD   SP,STACK   
20D7   CD 0E 0C               CALL   coldInit   
20DA   CD 79 4C               CALL   execStr   
20DD   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
20E4   CD 4E 0B               CALL   flushBuffer   
20E7   E1                     POP   HL   
20E8   E5                     PUSH   HL   
20E9   11 FF FF               LD   DE,TRUE   
20EC   B7                     OR   A   
20ED   ED 52                  SBC   HL,DE   
20EF   7D                     LD   A,L   
20F0   B4                     OR   H   
20F1   CA 52 21               JP   Z,expectM_2740S59   
20F4   CD C6 0B               CALL   printStr   
20F7   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2104   CD C6 0B               CALL   printStr   
2107   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2116   21 FF FF               LD   hl,TRUE   
2119   E5                     PUSH   hl   
211A   E5                     PUSH   hl   
211B   CD E5 0C               CALL   run   
211E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2126   CD 4E 0B               CALL   flushBuffer   
2129   CD C6 0B               CALL   printStr   
212C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2139   E1                     POP   hl   
213A   E5                     PUSH   hl   
213B   E5                     PUSH   hl   
213C   CD E5 0C               CALL   run   
213F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
214E   CD 4E 0B               CALL   flushBuffer   
2151   76                     HALT      
2152                EXPECTM_2740S59:      
2152   E1                     POP   HL   
2153                          ;*Macro unroll:  test "1 2 <", TRUE
2153   31 00 4E               LD   SP,STACK   
2156   CD 0E 0C               CALL   coldInit   
2159   CD 79 4C               CALL   execStr   
215C   31 20 32 20 3C 00      DB   "1 2 <",0   
2162   CD 4E 0B               CALL   flushBuffer   
2165   E1                     POP   HL   
2166   E5                     PUSH   HL   
2167   11 FF FF               LD   DE,TRUE   
216A   B7                     OR   A   
216B   ED 52                  SBC   HL,DE   
216D   7D                     LD   A,L   
216E   B4                     OR   H   
216F   CA CF 21               JP   Z,expectM_2741S60   
2172   CD C6 0B               CALL   printStr   
2175   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2181   CD C6 0B               CALL   printStr   
2184   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2193   21 FF FF               LD   hl,TRUE   
2196   E5                     PUSH   hl   
2197   E5                     PUSH   hl   
2198   CD E5 0C               CALL   run   
219B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21A3   CD 4E 0B               CALL   flushBuffer   
21A6   CD C6 0B               CALL   printStr   
21A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21B6   E1                     POP   hl   
21B7   E5                     PUSH   hl   
21B8   E5                     PUSH   hl   
21B9   CD E5 0C               CALL   run   
21BC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21CB   CD 4E 0B               CALL   flushBuffer   
21CE   76                     HALT      
21CF                EXPECTM_2741S60:      
21CF   E1                     POP   HL   
21D0                          ;*Macro unroll:  test "2 1 <", FALSE
21D0   31 00 4E               LD   SP,STACK   
21D3   CD 0E 0C               CALL   coldInit   
21D6   CD 79 4C               CALL   execStr   
21D9   32 20 31 20 3C 00      DB   "2 1 <",0   
21DF   CD 4E 0B               CALL   flushBuffer   
21E2   E1                     POP   HL   
21E3   E5                     PUSH   HL   
21E4   11 00 00               LD   DE,FALSE   
21E7   B7                     OR   A   
21E8   ED 52                  SBC   HL,DE   
21EA   7D                     LD   A,L   
21EB   B4                     OR   H   
21EC   CA 4C 22               JP   Z,expectM_2742S61   
21EF   CD C6 0B               CALL   printStr   
21F2   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
21FE   CD C6 0B               CALL   printStr   
2201   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2210   21 00 00               LD   hl,FALSE   
2213   E5                     PUSH   hl   
2214   E5                     PUSH   hl   
2215   CD E5 0C               CALL   run   
2218   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2220   CD 4E 0B               CALL   flushBuffer   
2223   CD C6 0B               CALL   printStr   
2226   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2233   E1                     POP   hl   
2234   E5                     PUSH   hl   
2235   E5                     PUSH   hl   
2236   CD E5 0C               CALL   run   
2239   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2248   CD 4E 0B               CALL   flushBuffer   
224B   76                     HALT      
224C                EXPECTM_2742S61:      
224C   E1                     POP   HL   
224D                          ;*Macro unroll:  test "2 3 <", TRUE
224D   31 00 4E               LD   SP,STACK   
2250   CD 0E 0C               CALL   coldInit   
2253   CD 79 4C               CALL   execStr   
2256   32 20 33 20 3C 00      DB   "2 3 <",0   
225C   CD 4E 0B               CALL   flushBuffer   
225F   E1                     POP   HL   
2260   E5                     PUSH   HL   
2261   11 FF FF               LD   DE,TRUE   
2264   B7                     OR   A   
2265   ED 52                  SBC   HL,DE   
2267   7D                     LD   A,L   
2268   B4                     OR   H   
2269   CA C9 22               JP   Z,expectM_2743S62   
226C   CD C6 0B               CALL   printStr   
226F   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
227B   CD C6 0B               CALL   printStr   
227E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
228D   21 FF FF               LD   hl,TRUE   
2290   E5                     PUSH   hl   
2291   E5                     PUSH   hl   
2292   CD E5 0C               CALL   run   
2295   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
229D   CD 4E 0B               CALL   flushBuffer   
22A0   CD C6 0B               CALL   printStr   
22A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22B0   E1                     POP   hl   
22B1   E5                     PUSH   hl   
22B2   E5                     PUSH   hl   
22B3   CD E5 0C               CALL   run   
22B6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22C5   CD 4E 0B               CALL   flushBuffer   
22C8   76                     HALT      
22C9                EXPECTM_2743S62:      
22C9   E1                     POP   HL   
22CA                          ;*Macro unroll:  test "3 3 <", FALSE
22CA   31 00 4E               LD   SP,STACK   
22CD   CD 0E 0C               CALL   coldInit   
22D0   CD 79 4C               CALL   execStr   
22D3   33 20 33 20 3C 00      DB   "3 3 <",0   
22D9   CD 4E 0B               CALL   flushBuffer   
22DC   E1                     POP   HL   
22DD   E5                     PUSH   HL   
22DE   11 00 00               LD   DE,FALSE   
22E1   B7                     OR   A   
22E2   ED 52                  SBC   HL,DE   
22E4   7D                     LD   A,L   
22E5   B4                     OR   H   
22E6   CA 46 23               JP   Z,expectM_2744S63   
22E9   CD C6 0B               CALL   printStr   
22EC   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
22F8   CD C6 0B               CALL   printStr   
22FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
230A   21 00 00               LD   hl,FALSE   
230D   E5                     PUSH   hl   
230E   E5                     PUSH   hl   
230F   CD E5 0C               CALL   run   
2312   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
231A   CD 4E 0B               CALL   flushBuffer   
231D   CD C6 0B               CALL   printStr   
2320   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
232D   E1                     POP   hl   
232E   E5                     PUSH   hl   
232F   E5                     PUSH   hl   
2330   CD E5 0C               CALL   run   
2333   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2342   CD 4E 0B               CALL   flushBuffer   
2345   76                     HALT      
2346                EXPECTM_2744S63:      
2346   E1                     POP   HL   
2347                          ;*Macro unroll:  test "1 2 >", FALSE
2347   31 00 4E               LD   SP,STACK   
234A   CD 0E 0C               CALL   coldInit   
234D   CD 79 4C               CALL   execStr   
2350   31 20 32 20 3E 00      DB   "1 2 >",0   
2356   CD 4E 0B               CALL   flushBuffer   
2359   E1                     POP   HL   
235A   E5                     PUSH   HL   
235B   11 00 00               LD   DE,FALSE   
235E   B7                     OR   A   
235F   ED 52                  SBC   HL,DE   
2361   7D                     LD   A,L   
2362   B4                     OR   H   
2363   CA C3 23               JP   Z,expectM_2745S64   
2366   CD C6 0B               CALL   printStr   
2369   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2375   CD C6 0B               CALL   printStr   
2378   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2387   21 00 00               LD   hl,FALSE   
238A   E5                     PUSH   hl   
238B   E5                     PUSH   hl   
238C   CD E5 0C               CALL   run   
238F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2397   CD 4E 0B               CALL   flushBuffer   
239A   CD C6 0B               CALL   printStr   
239D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23AA   E1                     POP   hl   
23AB   E5                     PUSH   hl   
23AC   E5                     PUSH   hl   
23AD   CD E5 0C               CALL   run   
23B0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23BF   CD 4E 0B               CALL   flushBuffer   
23C2   76                     HALT      
23C3                EXPECTM_2745S64:      
23C3   E1                     POP   HL   
23C4                          ;*Macro unroll:  test "2 1 >", TRUE
23C4   31 00 4E               LD   SP,STACK   
23C7   CD 0E 0C               CALL   coldInit   
23CA   CD 79 4C               CALL   execStr   
23CD   32 20 31 20 3E 00      DB   "2 1 >",0   
23D3   CD 4E 0B               CALL   flushBuffer   
23D6   E1                     POP   HL   
23D7   E5                     PUSH   HL   
23D8   11 FF FF               LD   DE,TRUE   
23DB   B7                     OR   A   
23DC   ED 52                  SBC   HL,DE   
23DE   7D                     LD   A,L   
23DF   B4                     OR   H   
23E0   CA 40 24               JP   Z,expectM_2746S65   
23E3   CD C6 0B               CALL   printStr   
23E6   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
23F2   CD C6 0B               CALL   printStr   
23F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2404   21 FF FF               LD   hl,TRUE   
2407   E5                     PUSH   hl   
2408   E5                     PUSH   hl   
2409   CD E5 0C               CALL   run   
240C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2414   CD 4E 0B               CALL   flushBuffer   
2417   CD C6 0B               CALL   printStr   
241A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2427   E1                     POP   hl   
2428   E5                     PUSH   hl   
2429   E5                     PUSH   hl   
242A   CD E5 0C               CALL   run   
242D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
243C   CD 4E 0B               CALL   flushBuffer   
243F   76                     HALT      
2440                EXPECTM_2746S65:      
2440   E1                     POP   HL   
2441                          ;*Macro unroll:  test "3 3 >", FALSE
2441   31 00 4E               LD   SP,STACK   
2444   CD 0E 0C               CALL   coldInit   
2447   CD 79 4C               CALL   execStr   
244A   33 20 33 20 3E 00      DB   "3 3 >",0   
2450   CD 4E 0B               CALL   flushBuffer   
2453   E1                     POP   HL   
2454   E5                     PUSH   HL   
2455   11 00 00               LD   DE,FALSE   
2458   B7                     OR   A   
2459   ED 52                  SBC   HL,DE   
245B   7D                     LD   A,L   
245C   B4                     OR   H   
245D   CA BD 24               JP   Z,expectM_2747S66   
2460   CD C6 0B               CALL   printStr   
2463   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
246F   CD C6 0B               CALL   printStr   
2472   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2481   21 00 00               LD   hl,FALSE   
2484   E5                     PUSH   hl   
2485   E5                     PUSH   hl   
2486   CD E5 0C               CALL   run   
2489   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2491   CD 4E 0B               CALL   flushBuffer   
2494   CD C6 0B               CALL   printStr   
2497   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24A4   E1                     POP   hl   
24A5   E5                     PUSH   hl   
24A6   E5                     PUSH   hl   
24A7   CD E5 0C               CALL   run   
24AA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24B9   CD 4E 0B               CALL   flushBuffer   
24BC   76                     HALT      
24BD                EXPECTM_2747S66:      
24BD   E1                     POP   HL   
24BE                          ;*Macro unroll:  test "4 3 >", TRUE
24BE   31 00 4E               LD   SP,STACK   
24C1   CD 0E 0C               CALL   coldInit   
24C4   CD 79 4C               CALL   execStr   
24C7   34 20 33 20 3E 00      DB   "4 3 >",0   
24CD   CD 4E 0B               CALL   flushBuffer   
24D0   E1                     POP   HL   
24D1   E5                     PUSH   HL   
24D2   11 FF FF               LD   DE,TRUE   
24D5   B7                     OR   A   
24D6   ED 52                  SBC   HL,DE   
24D8   7D                     LD   A,L   
24D9   B4                     OR   H   
24DA   CA 3A 25               JP   Z,expectM_2748S67   
24DD   CD C6 0B               CALL   printStr   
24E0   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
24EC   CD C6 0B               CALL   printStr   
24EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24FE   21 FF FF               LD   hl,TRUE   
2501   E5                     PUSH   hl   
2502   E5                     PUSH   hl   
2503   CD E5 0C               CALL   run   
2506   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
250E   CD 4E 0B               CALL   flushBuffer   
2511   CD C6 0B               CALL   printStr   
2514   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2521   E1                     POP   hl   
2522   E5                     PUSH   hl   
2523   E5                     PUSH   hl   
2524   CD E5 0C               CALL   run   
2527   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2536   CD 4E 0B               CALL   flushBuffer   
2539   76                     HALT      
253A                EXPECTM_2748S67:      
253A   E1                     POP   HL   
253B                          ;*Macro unroll:  test "2 2 <=", TRUE
253B   31 00 4E               LD   SP,STACK   
253E   CD 0E 0C               CALL   coldInit   
2541   CD 79 4C               CALL   execStr   
2544   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
254B   CD 4E 0B               CALL   flushBuffer   
254E   E1                     POP   HL   
254F   E5                     PUSH   HL   
2550   11 FF FF               LD   DE,TRUE   
2553   B7                     OR   A   
2554   ED 52                  SBC   HL,DE   
2556   7D                     LD   A,L   
2557   B4                     OR   H   
2558   CA B9 25               JP   Z,expectM_2749S68   
255B   CD C6 0B               CALL   printStr   
255E   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
256B   CD C6 0B               CALL   printStr   
256E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
257D   21 FF FF               LD   hl,TRUE   
2580   E5                     PUSH   hl   
2581   E5                     PUSH   hl   
2582   CD E5 0C               CALL   run   
2585   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
258D   CD 4E 0B               CALL   flushBuffer   
2590   CD C6 0B               CALL   printStr   
2593   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25A0   E1                     POP   hl   
25A1   E5                     PUSH   hl   
25A2   E5                     PUSH   hl   
25A3   CD E5 0C               CALL   run   
25A6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25B5   CD 4E 0B               CALL   flushBuffer   
25B8   76                     HALT      
25B9                EXPECTM_2749S68:      
25B9   E1                     POP   HL   
25BA                          ;*Macro unroll:  test "2 2 >=", TRUE
25BA   31 00 4E               LD   SP,STACK   
25BD   CD 0E 0C               CALL   coldInit   
25C0   CD 79 4C               CALL   execStr   
25C3   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
25CA   CD 4E 0B               CALL   flushBuffer   
25CD   E1                     POP   HL   
25CE   E5                     PUSH   HL   
25CF   11 FF FF               LD   DE,TRUE   
25D2   B7                     OR   A   
25D3   ED 52                  SBC   HL,DE   
25D5   7D                     LD   A,L   
25D6   B4                     OR   H   
25D7   CA 38 26               JP   Z,expectM_2750S69   
25DA   CD C6 0B               CALL   printStr   
25DD   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
25EA   CD C6 0B               CALL   printStr   
25ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25FC   21 FF FF               LD   hl,TRUE   
25FF   E5                     PUSH   hl   
2600   E5                     PUSH   hl   
2601   CD E5 0C               CALL   run   
2604   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
260C   CD 4E 0B               CALL   flushBuffer   
260F   CD C6 0B               CALL   printStr   
2612   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
261F   E1                     POP   hl   
2620   E5                     PUSH   hl   
2621   E5                     PUSH   hl   
2622   CD E5 0C               CALL   run   
2625   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2634   CD 4E 0B               CALL   flushBuffer   
2637   76                     HALT      
2638                EXPECTM_2750S69:      
2638   E1                     POP   HL   
2639                          ;*Macro unroll:  test "3 1 <<", 6
2639   31 00 4E               LD   SP,STACK   
263C   CD 0E 0C               CALL   coldInit   
263F   CD 79 4C               CALL   execStr   
2642   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2649   CD 4E 0B               CALL   flushBuffer   
264C   E1                     POP   HL   
264D   E5                     PUSH   HL   
264E   11 06 00               LD   DE,6   
2651   B7                     OR   A   
2652   ED 52                  SBC   HL,DE   
2654   7D                     LD   A,L   
2655   B4                     OR   H   
2656   CA B7 26               JP   Z,expectM_2751S70   
2659   CD C6 0B               CALL   printStr   
265C   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2669   CD C6 0B               CALL   printStr   
266C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
267B   21 06 00               LD   hl,6   
267E   E5                     PUSH   hl   
267F   E5                     PUSH   hl   
2680   CD E5 0C               CALL   run   
2683   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
268B   CD 4E 0B               CALL   flushBuffer   
268E   CD C6 0B               CALL   printStr   
2691   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
269E   E1                     POP   hl   
269F   E5                     PUSH   hl   
26A0   E5                     PUSH   hl   
26A1   CD E5 0C               CALL   run   
26A4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26B3   CD 4E 0B               CALL   flushBuffer   
26B6   76                     HALT      
26B7                EXPECTM_2751S70:      
26B7   E1                     POP   HL   
26B8                          ;*Macro unroll:  test "10 1 >>", 5
26B8   31 00 4E               LD   SP,STACK   
26BB   CD 0E 0C               CALL   coldInit   
26BE   CD 79 4C               CALL   execStr   
26C1   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
26C9   CD 4E 0B               CALL   flushBuffer   
26CC   E1                     POP   HL   
26CD   E5                     PUSH   HL   
26CE   11 05 00               LD   DE,5   
26D1   B7                     OR   A   
26D2   ED 52                  SBC   HL,DE   
26D4   7D                     LD   A,L   
26D5   B4                     OR   H   
26D6   CA 38 27               JP   Z,expectM_2752S71   
26D9   CD C6 0B               CALL   printStr   
26DC   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
26EA   CD C6 0B               CALL   printStr   
26ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26FC   21 05 00               LD   hl,5   
26FF   E5                     PUSH   hl   
2700   E5                     PUSH   hl   
2701   CD E5 0C               CALL   run   
2704   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
270C   CD 4E 0B               CALL   flushBuffer   
270F   CD C6 0B               CALL   printStr   
2712   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
271F   E1                     POP   hl   
2720   E5                     PUSH   hl   
2721   E5                     PUSH   hl   
2722   CD E5 0C               CALL   run   
2725   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2734   CD 4E 0B               CALL   flushBuffer   
2737   76                     HALT      
2738                EXPECTM_2752S71:      
2738   E1                     POP   HL   
2739                          ;*Macro unroll:  test "1 x = x", 1
2739   31 00 4E               LD   SP,STACK   
273C   CD 0E 0C               CALL   coldInit   
273F   CD 79 4C               CALL   execStr   
2742   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
274A   CD 4E 0B               CALL   flushBuffer   
274D   E1                     POP   HL   
274E   E5                     PUSH   HL   
274F   11 01 00               LD   DE,1   
2752   B7                     OR   A   
2753   ED 52                  SBC   HL,DE   
2755   7D                     LD   A,L   
2756   B4                     OR   H   
2757   CA B9 27               JP   Z,expectM_2753S72   
275A   CD C6 0B               CALL   printStr   
275D   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
276B   CD C6 0B               CALL   printStr   
276E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
277D   21 01 00               LD   hl,1   
2780   E5                     PUSH   hl   
2781   E5                     PUSH   hl   
2782   CD E5 0C               CALL   run   
2785   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
278D   CD 4E 0B               CALL   flushBuffer   
2790   CD C6 0B               CALL   printStr   
2793   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27A0   E1                     POP   hl   
27A1   E5                     PUSH   hl   
27A2   E5                     PUSH   hl   
27A3   CD E5 0C               CALL   run   
27A6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27B5   CD 4E 0B               CALL   flushBuffer   
27B8   76                     HALT      
27B9                EXPECTM_2753S72:      
27B9   E1                     POP   HL   
27BA                          ;*Macro unroll:  test "1{}^", 1
27BA   31 00 4E               LD   SP,STACK   
27BD   CD 0E 0C               CALL   coldInit   
27C0   CD 79 4C               CALL   execStr   
27C3   31 7B 7D 5E 00         DB   "1{}^",0   
27C8   CD 4E 0B               CALL   flushBuffer   
27CB   E1                     POP   HL   
27CC   E5                     PUSH   HL   
27CD   11 01 00               LD   DE,1   
27D0   B7                     OR   A   
27D1   ED 52                  SBC   HL,DE   
27D3   7D                     LD   A,L   
27D4   B4                     OR   H   
27D5   CA 34 28               JP   Z,expectM_2754S73   
27D8   CD C6 0B               CALL   printStr   
27DB   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
27E6   CD C6 0B               CALL   printStr   
27E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27F8   21 01 00               LD   hl,1   
27FB   E5                     PUSH   hl   
27FC   E5                     PUSH   hl   
27FD   CD E5 0C               CALL   run   
2800   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2808   CD 4E 0B               CALL   flushBuffer   
280B   CD C6 0B               CALL   printStr   
280E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
281B   E1                     POP   hl   
281C   E5                     PUSH   hl   
281D   E5                     PUSH   hl   
281E   CD E5 0C               CALL   run   
2821   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2830   CD 4E 0B               CALL   flushBuffer   
2833   76                     HALT      
2834                EXPECTM_2754S73:      
2834   E1                     POP   HL   
2835                          ;*Macro unroll:  test "{1}^", 1
2835   31 00 4E               LD   SP,STACK   
2838   CD 0E 0C               CALL   coldInit   
283B   CD 79 4C               CALL   execStr   
283E   7B 31 7D 5E 00         DB   "{1}^",0   
2843   CD 4E 0B               CALL   flushBuffer   
2846   E1                     POP   HL   
2847   E5                     PUSH   HL   
2848   11 01 00               LD   DE,1   
284B   B7                     OR   A   
284C   ED 52                  SBC   HL,DE   
284E   7D                     LD   A,L   
284F   B4                     OR   H   
2850   CA AF 28               JP   Z,expectM_2755S74   
2853   CD C6 0B               CALL   printStr   
2856   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2861   CD C6 0B               CALL   printStr   
2864   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2873   21 01 00               LD   hl,1   
2876   E5                     PUSH   hl   
2877   E5                     PUSH   hl   
2878   CD E5 0C               CALL   run   
287B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2883   CD 4E 0B               CALL   flushBuffer   
2886   CD C6 0B               CALL   printStr   
2889   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2896   E1                     POP   hl   
2897   E5                     PUSH   hl   
2898   E5                     PUSH   hl   
2899   CD E5 0C               CALL   run   
289C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28AB   CD 4E 0B               CALL   flushBuffer   
28AE   76                     HALT      
28AF                EXPECTM_2755S74:      
28AF   E1                     POP   HL   
28B0                          ;*Macro unroll:  test "{{1}^}^", 1
28B0   31 00 4E               LD   SP,STACK   
28B3   CD 0E 0C               CALL   coldInit   
28B6   CD 79 4C               CALL   execStr   
28B9   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
28C1   CD 4E 0B               CALL   flushBuffer   
28C4   E1                     POP   HL   
28C5   E5                     PUSH   HL   
28C6   11 01 00               LD   DE,1   
28C9   B7                     OR   A   
28CA   ED 52                  SBC   HL,DE   
28CC   7D                     LD   A,L   
28CD   B4                     OR   H   
28CE   CA 30 29               JP   Z,expectM_2756S75   
28D1   CD C6 0B               CALL   printStr   
28D4   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
28E2   CD C6 0B               CALL   printStr   
28E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28F4   21 01 00               LD   hl,1   
28F7   E5                     PUSH   hl   
28F8   E5                     PUSH   hl   
28F9   CD E5 0C               CALL   run   
28FC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2904   CD 4E 0B               CALL   flushBuffer   
2907   CD C6 0B               CALL   printStr   
290A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2917   E1                     POP   hl   
2918   E5                     PUSH   hl   
2919   E5                     PUSH   hl   
291A   CD E5 0C               CALL   run   
291D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
292C   CD 4E 0B               CALL   flushBuffer   
292F   76                     HALT      
2930                EXPECTM_2756S75:      
2930   E1                     POP   HL   
2931                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2931   31 00 4E               LD   SP,STACK   
2934   CD 0E 0C               CALL   coldInit   
2937   CD 79 4C               CALL   execStr   
293A   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2945   CD 4E 0B               CALL   flushBuffer   
2948   E1                     POP   HL   
2949   E5                     PUSH   HL   
294A   11 01 00               LD   DE,1   
294D   B7                     OR   A   
294E   ED 52                  SBC   HL,DE   
2950   7D                     LD   A,L   
2951   B4                     OR   H   
2952   CA B7 29               JP   Z,expectM_2757S76   
2955   CD C6 0B               CALL   printStr   
2958   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2969   CD C6 0B               CALL   printStr   
296C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
297B   21 01 00               LD   hl,1   
297E   E5                     PUSH   hl   
297F   E5                     PUSH   hl   
2980   CD E5 0C               CALL   run   
2983   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
298B   CD 4E 0B               CALL   flushBuffer   
298E   CD C6 0B               CALL   printStr   
2991   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
299E   E1                     POP   hl   
299F   E5                     PUSH   hl   
29A0   E5                     PUSH   hl   
29A1   CD E5 0C               CALL   run   
29A4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29B3   CD 4E 0B               CALL   flushBuffer   
29B6   76                     HALT      
29B7                EXPECTM_2757S76:      
29B7   E1                     POP   HL   
29B8                          ;*Macro unroll:  test "5 /f{10} ?", 5
29B8   31 00 4E               LD   SP,STACK   
29BB   CD 0E 0C               CALL   coldInit   
29BE   CD 79 4C               CALL   execStr   
29C1   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
29CC   CD 4E 0B               CALL   flushBuffer   
29CF   E1                     POP   HL   
29D0   E5                     PUSH   HL   
29D1   11 05 00               LD   DE,5   
29D4   B7                     OR   A   
29D5   ED 52                  SBC   HL,DE   
29D7   7D                     LD   A,L   
29D8   B4                     OR   H   
29D9   CA 3E 2A               JP   Z,expectM_2758S77   
29DC   CD C6 0B               CALL   printStr   
29DF   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
29F0   CD C6 0B               CALL   printStr   
29F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A02   21 05 00               LD   hl,5   
2A05   E5                     PUSH   hl   
2A06   E5                     PUSH   hl   
2A07   CD E5 0C               CALL   run   
2A0A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A12   CD 4E 0B               CALL   flushBuffer   
2A15   CD C6 0B               CALL   printStr   
2A18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A25   E1                     POP   hl   
2A26   E5                     PUSH   hl   
2A27   E5                     PUSH   hl   
2A28   CD E5 0C               CALL   run   
2A2B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A3A   CD 4E 0B               CALL   flushBuffer   
2A3D   76                     HALT      
2A3E                EXPECTM_2758S77:      
2A3E   E1                     POP   HL   
2A3F                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2A3F   31 00 4E               LD   SP,STACK   
2A42   CD 0E 0C               CALL   coldInit   
2A45   CD 79 4C               CALL   execStr   
2A48   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2A55   CD 4E 0B               CALL   flushBuffer   
2A58   E1                     POP   HL   
2A59   E5                     PUSH   HL   
2A5A   11 0F 00               LD   DE,15   
2A5D   B7                     OR   A   
2A5E   ED 52                  SBC   HL,DE   
2A60   7D                     LD   A,L   
2A61   B4                     OR   H   
2A62   CA C9 2A               JP   Z,expectM_2759S78   
2A65   CD C6 0B               CALL   printStr   
2A68   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2A7B   CD C6 0B               CALL   printStr   
2A7E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A8D   21 0F 00               LD   hl,15   
2A90   E5                     PUSH   hl   
2A91   E5                     PUSH   hl   
2A92   CD E5 0C               CALL   run   
2A95   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A9D   CD 4E 0B               CALL   flushBuffer   
2AA0   CD C6 0B               CALL   printStr   
2AA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AB0   E1                     POP   hl   
2AB1   E5                     PUSH   hl   
2AB2   E5                     PUSH   hl   
2AB3   CD E5 0C               CALL   run   
2AB6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AC5   CD 4E 0B               CALL   flushBuffer   
2AC8   76                     HALT      
2AC9                EXPECTM_2759S78:      
2AC9   E1                     POP   HL   
2ACA                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2ACA   31 00 4E               LD   SP,STACK   
2ACD   CD 0E 0C               CALL   coldInit   
2AD0   CD 79 4C               CALL   execStr   
2AD3   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2AE5   CD 4E 0B               CALL   flushBuffer   
2AE8   E1                     POP   HL   
2AE9   E5                     PUSH   HL   
2AEA   11 15 00               LD   DE,21   
2AED   B7                     OR   A   
2AEE   ED 52                  SBC   HL,DE   
2AF0   7D                     LD   A,L   
2AF1   B4                     OR   H   
2AF2   CA 5E 2B               JP   Z,expectM_2760S79   
2AF5   CD C6 0B               CALL   printStr   
2AF8   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2B10   CD C6 0B               CALL   printStr   
2B13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B22   21 15 00               LD   hl,21   
2B25   E5                     PUSH   hl   
2B26   E5                     PUSH   hl   
2B27   CD E5 0C               CALL   run   
2B2A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B32   CD 4E 0B               CALL   flushBuffer   
2B35   CD C6 0B               CALL   printStr   
2B38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B45   E1                     POP   hl   
2B46   E5                     PUSH   hl   
2B47   E5                     PUSH   hl   
2B48   CD E5 0C               CALL   run   
2B4B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B5A   CD 4E 0B               CALL   flushBuffer   
2B5D   76                     HALT      
2B5E                EXPECTM_2760S79:      
2B5E   E1                     POP   HL   
2B5F                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2B5F   31 00 4E               LD   SP,STACK   
2B62   CD 0E 0C               CALL   coldInit   
2B65   CD 79 4C               CALL   execStr   
2B68   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2B7A   CD 4E 0B               CALL   flushBuffer   
2B7D   E1                     POP   HL   
2B7E   E5                     PUSH   HL   
2B7F   11 0B 00               LD   DE,11   
2B82   B7                     OR   A   
2B83   ED 52                  SBC   HL,DE   
2B85   7D                     LD   A,L   
2B86   B4                     OR   H   
2B87   CA F3 2B               JP   Z,expectM_2761S80   
2B8A   CD C6 0B               CALL   printStr   
2B8D   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2BA5   CD C6 0B               CALL   printStr   
2BA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BB7   21 0B 00               LD   hl,11   
2BBA   E5                     PUSH   hl   
2BBB   E5                     PUSH   hl   
2BBC   CD E5 0C               CALL   run   
2BBF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BC7   CD 4E 0B               CALL   flushBuffer   
2BCA   CD C6 0B               CALL   printStr   
2BCD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BDA   E1                     POP   hl   
2BDB   E5                     PUSH   hl   
2BDC   E5                     PUSH   hl   
2BDD   CD E5 0C               CALL   run   
2BE0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BEF   CD 4E 0B               CALL   flushBuffer   
2BF2   76                     HALT      
2BF3                EXPECTM_2761S80:      
2BF3   E1                     POP   HL   
2BF4                          ;*Macro unroll:  test ": 0#", $0000
2BF4   31 00 4E               LD   SP,STACK   
2BF7   CD 0E 0C               CALL   coldInit   
2BFA   CD 79 4C               CALL   execStr   
2BFD   3A 20 30 23 00         DB   ": 0#",0   
2C02   CD 4E 0B               CALL   flushBuffer   
2C05   E1                     POP   HL   
2C06   E5                     PUSH   HL   
2C07   11 00 00               LD   DE,$0000   
2C0A   B7                     OR   A   
2C0B   ED 52                  SBC   HL,DE   
2C0D   7D                     LD   A,L   
2C0E   B4                     OR   H   
2C0F   CA 6E 2C               JP   Z,expectM_2762S81   
2C12   CD C6 0B               CALL   printStr   
2C15   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
2C20   CD C6 0B               CALL   printStr   
2C23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C32   21 00 00               LD   hl,$0000   
2C35   E5                     PUSH   hl   
2C36   E5                     PUSH   hl   
2C37   CD E5 0C               CALL   run   
2C3A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C42   CD 4E 0B               CALL   flushBuffer   
2C45   CD C6 0B               CALL   printStr   
2C48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C55   E1                     POP   hl   
2C56   E5                     PUSH   hl   
2C57   E5                     PUSH   hl   
2C58   CD E5 0C               CALL   run   
2C5B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C6A   CD 4E 0B               CALL   flushBuffer   
2C6D   76                     HALT      
2C6E                EXPECTM_2762S81:      
2C6E   E1                     POP   HL   
2C6F                          ;*Macro unroll:  test ":a 0#", $0100
2C6F   31 00 4E               LD   SP,STACK   
2C72   CD 0E 0C               CALL   coldInit   
2C75   CD 79 4C               CALL   execStr   
2C78   3A 61 20 30 23 00      DB   ":a 0#",0   
2C7E   CD 4E 0B               CALL   flushBuffer   
2C81   E1                     POP   HL   
2C82   E5                     PUSH   HL   
2C83   11 00 01               LD   DE,$0100   
2C86   B7                     OR   A   
2C87   ED 52                  SBC   HL,DE   
2C89   7D                     LD   A,L   
2C8A   B4                     OR   H   
2C8B   CA EB 2C               JP   Z,expectM_2763S82   
2C8E   CD C6 0B               CALL   printStr   
2C91   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
2C9D   CD C6 0B               CALL   printStr   
2CA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CAF   21 00 01               LD   hl,$0100   
2CB2   E5                     PUSH   hl   
2CB3   E5                     PUSH   hl   
2CB4   CD E5 0C               CALL   run   
2CB7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CBF   CD 4E 0B               CALL   flushBuffer   
2CC2   CD C6 0B               CALL   printStr   
2CC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CD2   E1                     POP   hl   
2CD3   E5                     PUSH   hl   
2CD4   E5                     PUSH   hl   
2CD5   CD E5 0C               CALL   run   
2CD8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CE7   CD 4E 0B               CALL   flushBuffer   
2CEA   76                     HALT      
2CEB                EXPECTM_2763S82:      
2CEB   E1                     POP   HL   
2CEC                          ;*Macro unroll:  test ":a: 0#", $0100
2CEC   31 00 4E               LD   SP,STACK   
2CEF   CD 0E 0C               CALL   coldInit   
2CF2   CD 79 4C               CALL   execStr   
2CF5   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
2CFC   CD 4E 0B               CALL   flushBuffer   
2CFF   E1                     POP   HL   
2D00   E5                     PUSH   HL   
2D01   11 00 01               LD   DE,$0100   
2D04   B7                     OR   A   
2D05   ED 52                  SBC   HL,DE   
2D07   7D                     LD   A,L   
2D08   B4                     OR   H   
2D09   CA 6A 2D               JP   Z,expectM_2764S83   
2D0C   CD C6 0B               CALL   printStr   
2D0F   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
2D1C   CD C6 0B               CALL   printStr   
2D1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D2E   21 00 01               LD   hl,$0100   
2D31   E5                     PUSH   hl   
2D32   E5                     PUSH   hl   
2D33   CD E5 0C               CALL   run   
2D36   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D3E   CD 4E 0B               CALL   flushBuffer   
2D41   CD C6 0B               CALL   printStr   
2D44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D51   E1                     POP   hl   
2D52   E5                     PUSH   hl   
2D53   E5                     PUSH   hl   
2D54   CD E5 0C               CALL   run   
2D57   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D66   CD 4E 0B               CALL   flushBuffer   
2D69   76                     HALT      
2D6A                EXPECTM_2764S83:      
2D6A   E1                     POP   HL   
2D6B                          ;*Macro unroll:  test ":a:b 0#", $0201
2D6B   31 00 4E               LD   SP,STACK   
2D6E   CD 0E 0C               CALL   coldInit   
2D71   CD 79 4C               CALL   execStr   
2D74   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
2D7C   CD 4E 0B               CALL   flushBuffer   
2D7F   E1                     POP   HL   
2D80   E5                     PUSH   HL   
2D81   11 01 02               LD   DE,$0201   
2D84   B7                     OR   A   
2D85   ED 52                  SBC   HL,DE   
2D87   7D                     LD   A,L   
2D88   B4                     OR   H   
2D89   CA EB 2D               JP   Z,expectM_2765S84   
2D8C   CD C6 0B               CALL   printStr   
2D8F   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
2D9D   CD C6 0B               CALL   printStr   
2DA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DAF   21 01 02               LD   hl,$0201   
2DB2   E5                     PUSH   hl   
2DB3   E5                     PUSH   hl   
2DB4   CD E5 0C               CALL   run   
2DB7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DBF   CD 4E 0B               CALL   flushBuffer   
2DC2   CD C6 0B               CALL   printStr   
2DC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DD2   E1                     POP   hl   
2DD3   E5                     PUSH   hl   
2DD4   E5                     PUSH   hl   
2DD5   CD E5 0C               CALL   run   
2DD8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DE7   CD 4E 0B               CALL   flushBuffer   
2DEA   76                     HALT      
2DEB                EXPECTM_2765S84:      
2DEB   E1                     POP   HL   
2DEC                          ;*Macro unroll:  test "::b 0#", $0101
2DEC   31 00 4E               LD   SP,STACK   
2DEF   CD 0E 0C               CALL   coldInit   
2DF2   CD 79 4C               CALL   execStr   
2DF5   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
2DFC   CD 4E 0B               CALL   flushBuffer   
2DFF   E1                     POP   HL   
2E00   E5                     PUSH   HL   
2E01   11 01 01               LD   DE,$0101   
2E04   B7                     OR   A   
2E05   ED 52                  SBC   HL,DE   
2E07   7D                     LD   A,L   
2E08   B4                     OR   H   
2E09   CA 6A 2E               JP   Z,expectM_2766S85   
2E0C   CD C6 0B               CALL   printStr   
2E0F   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
2E1C   CD C6 0B               CALL   printStr   
2E1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E2E   21 01 01               LD   hl,$0101   
2E31   E5                     PUSH   hl   
2E32   E5                     PUSH   hl   
2E33   CD E5 0C               CALL   run   
2E36   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E3E   CD 4E 0B               CALL   flushBuffer   
2E41   CD C6 0B               CALL   printStr   
2E44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E51   E1                     POP   hl   
2E52   E5                     PUSH   hl   
2E53   E5                     PUSH   hl   
2E54   CD E5 0C               CALL   run   
2E57   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E66   CD 4E 0B               CALL   flushBuffer   
2E69   76                     HALT      
2E6A                EXPECTM_2766S85:      
2E6A   E1                     POP   HL   
2E6B                          ;*Macro unroll:  test ":{2};^", 2
2E6B   31 00 4E               LD   SP,STACK   
2E6E   CD 0E 0C               CALL   coldInit   
2E71   CD 79 4C               CALL   execStr   
2E74   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
2E7B   CD 4E 0B               CALL   flushBuffer   
2E7E   E1                     POP   HL   
2E7F   E5                     PUSH   HL   
2E80   11 02 00               LD   DE,2   
2E83   B7                     OR   A   
2E84   ED 52                  SBC   HL,DE   
2E86   7D                     LD   A,L   
2E87   B4                     OR   H   
2E88   CA E9 2E               JP   Z,expectM_2767S86   
2E8B   CD C6 0B               CALL   printStr   
2E8E   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2E9B   CD C6 0B               CALL   printStr   
2E9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EAD   21 02 00               LD   hl,2   
2EB0   E5                     PUSH   hl   
2EB1   E5                     PUSH   hl   
2EB2   CD E5 0C               CALL   run   
2EB5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EBD   CD 4E 0B               CALL   flushBuffer   
2EC0   CD C6 0B               CALL   printStr   
2EC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ED0   E1                     POP   hl   
2ED1   E5                     PUSH   hl   
2ED2   E5                     PUSH   hl   
2ED3   CD E5 0C               CALL   run   
2ED6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EE5   CD 4E 0B               CALL   flushBuffer   
2EE8   76                     HALT      
2EE9                EXPECTM_2767S86:      
2EE9   E1                     POP   HL   
2EEA                          ;*Macro unroll:  test ":a{2};^", 2
2EEA   31 00 4E               LD   SP,STACK   
2EED   CD 0E 0C               CALL   coldInit   
2EF0   CD 79 4C               CALL   execStr   
2EF3   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
2EFB   CD 4E 0B               CALL   flushBuffer   
2EFE   E1                     POP   HL   
2EFF   E5                     PUSH   HL   
2F00   11 02 00               LD   DE,2   
2F03   B7                     OR   A   
2F04   ED 52                  SBC   HL,DE   
2F06   7D                     LD   A,L   
2F07   B4                     OR   H   
2F08   CA 6A 2F               JP   Z,expectM_2768S87   
2F0B   CD C6 0B               CALL   printStr   
2F0E   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2F1C   CD C6 0B               CALL   printStr   
2F1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F2E   21 02 00               LD   hl,2   
2F31   E5                     PUSH   hl   
2F32   E5                     PUSH   hl   
2F33   CD E5 0C               CALL   run   
2F36   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F3E   CD 4E 0B               CALL   flushBuffer   
2F41   CD C6 0B               CALL   printStr   
2F44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F51   E1                     POP   hl   
2F52   E5                     PUSH   hl   
2F53   E5                     PUSH   hl   
2F54   CD E5 0C               CALL   run   
2F57   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F66   CD 4E 0B               CALL   flushBuffer   
2F69   76                     HALT      
2F6A                EXPECTM_2768S87:      
2F6A   E1                     POP   HL   
2F6B                          ;*Macro unroll:  test "5 :a{%a};^", 5
2F6B   31 00 4E               LD   SP,STACK   
2F6E   CD 0E 0C               CALL   coldInit   
2F71   CD 79 4C               CALL   execStr   
2F74   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
2F7F   CD 4E 0B               CALL   flushBuffer   
2F82   E1                     POP   HL   
2F83   E5                     PUSH   HL   
2F84   11 05 00               LD   DE,5   
2F87   B7                     OR   A   
2F88   ED 52                  SBC   HL,DE   
2F8A   7D                     LD   A,L   
2F8B   B4                     OR   H   
2F8C   CA F1 2F               JP   Z,expectM_2769S88   
2F8F   CD C6 0B               CALL   printStr   
2F92   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
2FA3   CD C6 0B               CALL   printStr   
2FA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FB5   21 05 00               LD   hl,5   
2FB8   E5                     PUSH   hl   
2FB9   E5                     PUSH   hl   
2FBA   CD E5 0C               CALL   run   
2FBD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FC5   CD 4E 0B               CALL   flushBuffer   
2FC8   CD C6 0B               CALL   printStr   
2FCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FD8   E1                     POP   hl   
2FD9   E5                     PUSH   hl   
2FDA   E5                     PUSH   hl   
2FDB   CD E5 0C               CALL   run   
2FDE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FED   CD 4E 0B               CALL   flushBuffer   
2FF0   76                     HALT      
2FF1                EXPECTM_2769S88:      
2FF1   E1                     POP   HL   
2FF2                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
2FF2   31 00 4E               LD   SP,STACK   
2FF5   CD 0E 0C               CALL   coldInit   
2FF8   CD 79 4C               CALL   execStr   
2FFB   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
3008   CD 4E 0B               CALL   flushBuffer   
300B   E1                     POP   HL   
300C   E5                     PUSH   HL   
300D   11 05 00               LD   DE,5   
3010   B7                     OR   A   
3011   ED 52                  SBC   HL,DE   
3013   7D                     LD   A,L   
3014   B4                     OR   H   
3015   CA 7C 30               JP   Z,expectM_2770S89   
3018   CD C6 0B               CALL   printStr   
301B   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
302E   CD C6 0B               CALL   printStr   
3031   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3040   21 05 00               LD   hl,5   
3043   E5                     PUSH   hl   
3044   E5                     PUSH   hl   
3045   CD E5 0C               CALL   run   
3048   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3050   CD 4E 0B               CALL   flushBuffer   
3053   CD C6 0B               CALL   printStr   
3056   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3063   E1                     POP   hl   
3064   E5                     PUSH   hl   
3065   E5                     PUSH   hl   
3066   CD E5 0C               CALL   run   
3069   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3078   CD 4E 0B               CALL   flushBuffer   
307B   76                     HALT      
307C                EXPECTM_2770S89:      
307C   E1                     POP   HL   
307D                          ;*Macro unroll:  test ":a{{2}^};^", 2
307D   31 00 4E               LD   SP,STACK   
3080   CD 0E 0C               CALL   coldInit   
3083   CD 79 4C               CALL   execStr   
3086   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
3091   CD 4E 0B               CALL   flushBuffer   
3094   E1                     POP   HL   
3095   E5                     PUSH   HL   
3096   11 02 00               LD   DE,2   
3099   B7                     OR   A   
309A   ED 52                  SBC   HL,DE   
309C   7D                     LD   A,L   
309D   B4                     OR   H   
309E   CA 03 31               JP   Z,expectM_2771S90   
30A1   CD C6 0B               CALL   printStr   
30A4   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
30B5   CD C6 0B               CALL   printStr   
30B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30C7   21 02 00               LD   hl,2   
30CA   E5                     PUSH   hl   
30CB   E5                     PUSH   hl   
30CC   CD E5 0C               CALL   run   
30CF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30D7   CD 4E 0B               CALL   flushBuffer   
30DA   CD C6 0B               CALL   printStr   
30DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30EA   E1                     POP   hl   
30EB   E5                     PUSH   hl   
30EC   E5                     PUSH   hl   
30ED   CD E5 0C               CALL   run   
30F0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30FF   CD 4E 0B               CALL   flushBuffer   
3102   76                     HALT      
3103                EXPECTM_2771S90:      
3103   E1                     POP   HL   
3104                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
3104   31 00 4E               LD   SP,STACK   
3107   CD 0E 0C               CALL   coldInit   
310A   CD 79 4C               CALL   execStr   
310D   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
311D   CD 4E 0B               CALL   flushBuffer   
3120   E1                     POP   HL   
3121   E5                     PUSH   HL   
3122   11 05 00               LD   DE,5   
3125   B7                     OR   A   
3126   ED 52                  SBC   HL,DE   
3128   7D                     LD   A,L   
3129   B4                     OR   H   
312A   CA 94 31               JP   Z,expectM_2772S91   
312D   CD C6 0B               CALL   printStr   
3130   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
3146   CD C6 0B               CALL   printStr   
3149   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3158   21 05 00               LD   hl,5   
315B   E5                     PUSH   hl   
315C   E5                     PUSH   hl   
315D   CD E5 0C               CALL   run   
3160   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3168   CD 4E 0B               CALL   flushBuffer   
316B   CD C6 0B               CALL   printStr   
316E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
317B   E1                     POP   hl   
317C   E5                     PUSH   hl   
317D   E5                     PUSH   hl   
317E   CD E5 0C               CALL   run   
3181   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3190   CD 4E 0B               CALL   flushBuffer   
3193   76                     HALT      
3194                EXPECTM_2772S91:      
3194   E1                     POP   HL   
3195                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
3195   31 00 4E               LD   SP,STACK   
3198   CD 0E 0C               CALL   coldInit   
319B   CD 79 4C               CALL   execStr   
319E   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
31AF   CD 4E 0B               CALL   flushBuffer   
31B2   E1                     POP   HL   
31B3   E5                     PUSH   HL   
31B4   11 01 00               LD   DE,1   
31B7   B7                     OR   A   
31B8   ED 52                  SBC   HL,DE   
31BA   7D                     LD   A,L   
31BB   B4                     OR   H   
31BC   CA 27 32               JP   Z,expectM_2773S92   
31BF   CD C6 0B               CALL   printStr   
31C2   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
31D9   CD C6 0B               CALL   printStr   
31DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31EB   21 01 00               LD   hl,1   
31EE   E5                     PUSH   hl   
31EF   E5                     PUSH   hl   
31F0   CD E5 0C               CALL   run   
31F3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31FB   CD 4E 0B               CALL   flushBuffer   
31FE   CD C6 0B               CALL   printStr   
3201   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
320E   E1                     POP   hl   
320F   E5                     PUSH   hl   
3210   E5                     PUSH   hl   
3211   CD E5 0C               CALL   run   
3214   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3223   CD 4E 0B               CALL   flushBuffer   
3226   76                     HALT      
3227                EXPECTM_2773S92:      
3227   E1                     POP   HL   
3228                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
3228   31 00 4E               LD   SP,STACK   
322B   CD 0E 0C               CALL   coldInit   
322E   CD 79 4C               CALL   execStr   
3231   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
3245   CD 4E 0B               CALL   flushBuffer   
3248   E1                     POP   HL   
3249   E5                     PUSH   HL   
324A   11 07 00               LD   DE,7   
324D   B7                     OR   A   
324E   ED 52                  SBC   HL,DE   
3250   7D                     LD   A,L   
3251   B4                     OR   H   
3252   CA C0 32               JP   Z,expectM_2774S93   
3255   CD C6 0B               CALL   printStr   
3258   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
3272   CD C6 0B               CALL   printStr   
3275   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3284   21 07 00               LD   hl,7   
3287   E5                     PUSH   hl   
3288   E5                     PUSH   hl   
3289   CD E5 0C               CALL   run   
328C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3294   CD 4E 0B               CALL   flushBuffer   
3297   CD C6 0B               CALL   printStr   
329A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32A7   E1                     POP   hl   
32A8   E5                     PUSH   hl   
32A9   E5                     PUSH   hl   
32AA   CD E5 0C               CALL   run   
32AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32BC   CD 4E 0B               CALL   flushBuffer   
32BF   76                     HALT      
32C0                EXPECTM_2774S93:      
32C0   E1                     POP   HL   
32C1                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
32C1   31 00 4E               LD   SP,STACK   
32C4   CD 0E 0C               CALL   coldInit   
32C7   CD 79 4C               CALL   execStr   
32CA   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
32E0   CD 4E 0B               CALL   flushBuffer   
32E3   E1                     POP   HL   
32E4   E5                     PUSH   HL   
32E5   11 06 00               LD   DE,6   
32E8   B7                     OR   A   
32E9   ED 52                  SBC   HL,DE   
32EB   7D                     LD   A,L   
32EC   B4                     OR   H   
32ED   CA 5D 33               JP   Z,expectM_2775S94   
32F0   CD C6 0B               CALL   printStr   
32F3   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
330F   CD C6 0B               CALL   printStr   
3312   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3321   21 06 00               LD   hl,6   
3324   E5                     PUSH   hl   
3325   E5                     PUSH   hl   
3326   CD E5 0C               CALL   run   
3329   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3331   CD 4E 0B               CALL   flushBuffer   
3334   CD C6 0B               CALL   printStr   
3337   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3344   E1                     POP   hl   
3345   E5                     PUSH   hl   
3346   E5                     PUSH   hl   
3347   CD E5 0C               CALL   run   
334A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3359   CD 4E 0B               CALL   flushBuffer   
335C   76                     HALT      
335D                EXPECTM_2775S94:      
335D   E1                     POP   HL   
335E                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
335E   31 00 4E               LD   SP,STACK   
3361   CD 0E 0C               CALL   coldInit   
3364   CD 79 4C               CALL   execStr   
3367   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
3376   CD 4E 0B               CALL   flushBuffer   
3379   E1                     POP   HL   
337A   E5                     PUSH   HL   
337B   11 02 00               LD   DE,2   
337E   B7                     OR   A   
337F   ED 52                  SBC   HL,DE   
3381   7D                     LD   A,L   
3382   B4                     OR   H   
3383   CA EC 33               JP   Z,expectM_2776S95   
3386   CD C6 0B               CALL   printStr   
3389   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
339E   CD C6 0B               CALL   printStr   
33A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33B0   21 02 00               LD   hl,2   
33B3   E5                     PUSH   hl   
33B4   E5                     PUSH   hl   
33B5   CD E5 0C               CALL   run   
33B8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33C0   CD 4E 0B               CALL   flushBuffer   
33C3   CD C6 0B               CALL   printStr   
33C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33D3   E1                     POP   hl   
33D4   E5                     PUSH   hl   
33D5   E5                     PUSH   hl   
33D6   CD E5 0C               CALL   run   
33D9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33E8   CD 4E 0B               CALL   flushBuffer   
33EB   76                     HALT      
33EC                EXPECTM_2776S95:      
33EC   E1                     POP   HL   
33ED                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
33ED   31 00 4E               LD   SP,STACK   
33F0   CD 0E 0C               CALL   coldInit   
33F3   CD 79 4C               CALL   execStr   
33F6   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
3408   CD 4E 0B               CALL   flushBuffer   
340B   E1                     POP   HL   
340C   E5                     PUSH   HL   
340D   11 01 00               LD   DE,1   
3410   B7                     OR   A   
3411   ED 52                  SBC   HL,DE   
3413   7D                     LD   A,L   
3414   B4                     OR   H   
3415   CA 81 34               JP   Z,expectM_2777S96   
3418   CD C6 0B               CALL   printStr   
341B   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
3433   CD C6 0B               CALL   printStr   
3436   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3445   21 01 00               LD   hl,1   
3448   E5                     PUSH   hl   
3449   E5                     PUSH   hl   
344A   CD E5 0C               CALL   run   
344D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3455   CD 4E 0B               CALL   flushBuffer   
3458   CD C6 0B               CALL   printStr   
345B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3468   E1                     POP   hl   
3469   E5                     PUSH   hl   
346A   E5                     PUSH   hl   
346B   CD E5 0C               CALL   run   
346E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
347D   CD 4E 0B               CALL   flushBuffer   
3480   76                     HALT      
3481                EXPECTM_2777S96:      
3481   E1                     POP   HL   
3482                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3482   31 00 4E               LD   SP,STACK   
3485   CD 0E 0C               CALL   coldInit   
3488   CD 79 4C               CALL   execStr   
348B   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
349E   CD 4E 0B               CALL   flushBuffer   
34A1   E1                     POP   HL   
34A2   E5                     PUSH   HL   
34A3   11 02 00               LD   DE,2   
34A6   B7                     OR   A   
34A7   ED 52                  SBC   HL,DE   
34A9   7D                     LD   A,L   
34AA   B4                     OR   H   
34AB   CA 18 35               JP   Z,expectM_2778S97   
34AE   CD C6 0B               CALL   printStr   
34B1   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
34CA   CD C6 0B               CALL   printStr   
34CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34DC   21 02 00               LD   hl,2   
34DF   E5                     PUSH   hl   
34E0   E5                     PUSH   hl   
34E1   CD E5 0C               CALL   run   
34E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34EC   CD 4E 0B               CALL   flushBuffer   
34EF   CD C6 0B               CALL   printStr   
34F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34FF   E1                     POP   hl   
3500   E5                     PUSH   hl   
3501   E5                     PUSH   hl   
3502   CD E5 0C               CALL   run   
3505   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3514   CD 4E 0B               CALL   flushBuffer   
3517   76                     HALT      
3518                EXPECTM_2778S97:      
3518   E1                     POP   HL   
3519                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
3519   31 00 4E               LD   SP,STACK   
351C   CD 0E 0C               CALL   coldInit   
351F   CD 79 4C               CALL   execStr   
3522   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
3536   CD 4E 0B               CALL   flushBuffer   
3539   E1                     POP   HL   
353A   E5                     PUSH   HL   
353B   11 02 00               LD   DE,2   
353E   B7                     OR   A   
353F   ED 52                  SBC   HL,DE   
3541   7D                     LD   A,L   
3542   B4                     OR   H   
3543   CA B1 35               JP   Z,expectM_2779S98   
3546   CD C6 0B               CALL   printStr   
3549   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
3563   CD C6 0B               CALL   printStr   
3566   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3575   21 02 00               LD   hl,2   
3578   E5                     PUSH   hl   
3579   E5                     PUSH   hl   
357A   CD E5 0C               CALL   run   
357D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3585   CD 4E 0B               CALL   flushBuffer   
3588   CD C6 0B               CALL   printStr   
358B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3598   E1                     POP   hl   
3599   E5                     PUSH   hl   
359A   E5                     PUSH   hl   
359B   CD E5 0C               CALL   run   
359E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35AD   CD 4E 0B               CALL   flushBuffer   
35B0   76                     HALT      
35B1                EXPECTM_2779S98:      
35B1   E1                     POP   HL   
35B2                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
35B2   31 00 4E               LD   SP,STACK   
35B5   CD 0E 0C               CALL   coldInit   
35B8   CD 79 4C               CALL   execStr   
35BB   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
35CE   CD 4E 0B               CALL   flushBuffer   
35D1   E1                     POP   HL   
35D2   E5                     PUSH   HL   
35D3   11 02 00               LD   DE,2   
35D6   B7                     OR   A   
35D7   ED 52                  SBC   HL,DE   
35D9   7D                     LD   A,L   
35DA   B4                     OR   H   
35DB   CA 48 36               JP   Z,expectM_2780S99   
35DE   CD C6 0B               CALL   printStr   
35E1   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
35FA   CD C6 0B               CALL   printStr   
35FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
360C   21 02 00               LD   hl,2   
360F   E5                     PUSH   hl   
3610   E5                     PUSH   hl   
3611   CD E5 0C               CALL   run   
3614   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
361C   CD 4E 0B               CALL   flushBuffer   
361F   CD C6 0B               CALL   printStr   
3622   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
362F   E1                     POP   hl   
3630   E5                     PUSH   hl   
3631   E5                     PUSH   hl   
3632   CD E5 0C               CALL   run   
3635   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3644   CD 4E 0B               CALL   flushBuffer   
3647   76                     HALT      
3648                EXPECTM_2780S99:      
3648   E1                     POP   HL   
3649                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
3649   31 00 4E               LD   SP,STACK   
364C   CD 0E 0C               CALL   coldInit   
364F   CD 79 4C               CALL   execStr   
3652   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
366C   CD 4E 0B               CALL   flushBuffer   
366F   E1                     POP   HL   
3670   E5                     PUSH   HL   
3671   11 05 00               LD   DE,5   
3674   B7                     OR   A   
3675   ED 52                  SBC   HL,DE   
3677   7D                     LD   A,L   
3678   B4                     OR   H   
3679   CA ED 36               JP   Z,expectM_2781S100   
367C   CD C6 0B               CALL   printStr   
367F   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
369F   CD C6 0B               CALL   printStr   
36A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36B1   21 05 00               LD   hl,5   
36B4   E5                     PUSH   hl   
36B5   E5                     PUSH   hl   
36B6   CD E5 0C               CALL   run   
36B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36C1   CD 4E 0B               CALL   flushBuffer   
36C4   CD C6 0B               CALL   printStr   
36C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36D4   E1                     POP   hl   
36D5   E5                     PUSH   hl   
36D6   E5                     PUSH   hl   
36D7   CD E5 0C               CALL   run   
36DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36E9   CD 4E 0B               CALL   flushBuffer   
36EC   76                     HALT      
36ED                EXPECTM_2781S100:      
36ED   E1                     POP   HL   
36EE                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
36EE   31 00 4E               LD   SP,STACK   
36F1   CD 0E 0C               CALL   coldInit   
36F4   CD 79 4C               CALL   execStr   
36F7   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
3708   CD 4E 0B               CALL   flushBuffer   
370B   E1                     POP   HL   
370C   E5                     PUSH   HL   
370D   11 02 00               LD   DE,2   
3710   B7                     OR   A   
3711   ED 52                  SBC   HL,DE   
3713   7D                     LD   A,L   
3714   B4                     OR   H   
3715   CA 80 37               JP   Z,expectM_2782S101   
3718   CD C6 0B               CALL   printStr   
371B   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
3732   CD C6 0B               CALL   printStr   
3735   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3744   21 02 00               LD   hl,2   
3747   E5                     PUSH   hl   
3748   E5                     PUSH   hl   
3749   CD E5 0C               CALL   run   
374C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3754   CD 4E 0B               CALL   flushBuffer   
3757   CD C6 0B               CALL   printStr   
375A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3767   E1                     POP   hl   
3768   E5                     PUSH   hl   
3769   E5                     PUSH   hl   
376A   CD E5 0C               CALL   run   
376D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
377C   CD 4E 0B               CALL   flushBuffer   
377F   76                     HALT      
3780                EXPECTM_2782S101:      
3780   E1                     POP   HL   
3781                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
3781   31 00 4E               LD   SP,STACK   
3784   CD 0E 0C               CALL   coldInit   
3787   CD 79 4C               CALL   execStr   
378A   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
37A2   CD 4E 0B               CALL   flushBuffer   
37A5   E1                     POP   HL   
37A6   E5                     PUSH   HL   
37A7   11 64 00               LD   DE,100   
37AA   B7                     OR   A   
37AB   ED 52                  SBC   HL,DE   
37AD   7D                     LD   A,L   
37AE   B4                     OR   H   
37AF   CA 21 38               JP   Z,expectM_2783S102   
37B2   CD C6 0B               CALL   printStr   
37B5   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
37D3   CD C6 0B               CALL   printStr   
37D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37E5   21 64 00               LD   hl,100   
37E8   E5                     PUSH   hl   
37E9   E5                     PUSH   hl   
37EA   CD E5 0C               CALL   run   
37ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37F5   CD 4E 0B               CALL   flushBuffer   
37F8   CD C6 0B               CALL   printStr   
37FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3808   E1                     POP   hl   
3809   E5                     PUSH   hl   
380A   E5                     PUSH   hl   
380B   CD E5 0C               CALL   run   
380E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
381D   CD 4E 0B               CALL   flushBuffer   
3820   76                     HALT      
3821                EXPECTM_2783S102:      
3821   E1                     POP   HL   
3822                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
3822   31 00 4E               LD   SP,STACK   
3825   CD 0E 0C               CALL   coldInit   
3828   CD 79 4C               CALL   execStr   
382B   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
3844   CD 4E 0B               CALL   flushBuffer   
3847   E1                     POP   HL   
3848   E5                     PUSH   HL   
3849   11 01 00               LD   DE,1   
384C   B7                     OR   A   
384D   ED 52                  SBC   HL,DE   
384F   7D                     LD   A,L   
3850   B4                     OR   H   
3851   CA C4 38               JP   Z,expectM_2784S103   
3854   CD C6 0B               CALL   printStr   
3857   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
3876   CD C6 0B               CALL   printStr   
3879   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3888   21 01 00               LD   hl,1   
388B   E5                     PUSH   hl   
388C   E5                     PUSH   hl   
388D   CD E5 0C               CALL   run   
3890   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3898   CD 4E 0B               CALL   flushBuffer   
389B   CD C6 0B               CALL   printStr   
389E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38AB   E1                     POP   hl   
38AC   E5                     PUSH   hl   
38AD   E5                     PUSH   hl   
38AE   CD E5 0C               CALL   run   
38B1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38C0   CD 4E 0B               CALL   flushBuffer   
38C3   76                     HALT      
38C4                EXPECTM_2784S103:      
38C4   E1                     POP   HL   
38C5                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
38C5   31 00 4E               LD   SP,STACK   
38C8   CD 0E 0C               CALL   coldInit   
38CB   CD 79 4C               CALL   execStr   
38CE   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
38E8   CD 4E 0B               CALL   flushBuffer   
38EB   E1                     POP   HL   
38EC   E5                     PUSH   HL   
38ED   11 02 00               LD   DE,2   
38F0   B7                     OR   A   
38F1   ED 52                  SBC   HL,DE   
38F3   7D                     LD   A,L   
38F4   B4                     OR   H   
38F5   CA 69 39               JP   Z,expectM_2785S104   
38F8   CD C6 0B               CALL   printStr   
38FB   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
391B   CD C6 0B               CALL   printStr   
391E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
392D   21 02 00               LD   hl,2   
3930   E5                     PUSH   hl   
3931   E5                     PUSH   hl   
3932   CD E5 0C               CALL   run   
3935   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
393D   CD 4E 0B               CALL   flushBuffer   
3940   CD C6 0B               CALL   printStr   
3943   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3950   E1                     POP   hl   
3951   E5                     PUSH   hl   
3952   E5                     PUSH   hl   
3953   CD E5 0C               CALL   run   
3956   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3965   CD 4E 0B               CALL   flushBuffer   
3968   76                     HALT      
3969                EXPECTM_2785S104:      
3969   E1                     POP   HL   
396A                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
396A   31 00 4E               LD   SP,STACK   
396D   CD 0E 0C               CALL   coldInit   
3970   CD 79 4C               CALL   execStr   
3973   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
3992   CD 4E 0B               CALL   flushBuffer   
3995   E1                     POP   HL   
3996   E5                     PUSH   HL   
3997   11 0B 00               LD   DE,11   
399A   B7                     OR   A   
399B   ED 52                  SBC   HL,DE   
399D   7D                     LD   A,L   
399E   B4                     OR   H   
399F   CA 18 3A               JP   Z,expectM_2786S105   
39A2   CD C6 0B               CALL   printStr   
39A5   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
39CA   CD C6 0B               CALL   printStr   
39CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39DC   21 0B 00               LD   hl,11   
39DF   E5                     PUSH   hl   
39E0   E5                     PUSH   hl   
39E1   CD E5 0C               CALL   run   
39E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
39EC   CD 4E 0B               CALL   flushBuffer   
39EF   CD C6 0B               CALL   printStr   
39F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39FF   E1                     POP   hl   
3A00   E5                     PUSH   hl   
3A01   E5                     PUSH   hl   
3A02   CD E5 0C               CALL   run   
3A05   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A14   CD 4E 0B               CALL   flushBuffer   
3A17   76                     HALT      
3A18                EXPECTM_2786S105:      
3A18   E1                     POP   HL   
3A19                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
3A19   31 00 4E               LD   SP,STACK   
3A1C   CD 0E 0C               CALL   coldInit   
3A1F   CD 79 4C               CALL   execStr   
3A22   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
3A41   CD 4E 0B               CALL   flushBuffer   
3A44   E1                     POP   HL   
3A45   E5                     PUSH   HL   
3A46   11 15 00               LD   DE,21   
3A49   B7                     OR   A   
3A4A   ED 52                  SBC   HL,DE   
3A4C   7D                     LD   A,L   
3A4D   B4                     OR   H   
3A4E   CA C7 3A               JP   Z,expectM_2787S106   
3A51   CD C6 0B               CALL   printStr   
3A54   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3A79   CD C6 0B               CALL   printStr   
3A7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A8B   21 15 00               LD   hl,21   
3A8E   E5                     PUSH   hl   
3A8F   E5                     PUSH   hl   
3A90   CD E5 0C               CALL   run   
3A93   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A9B   CD 4E 0B               CALL   flushBuffer   
3A9E   CD C6 0B               CALL   printStr   
3AA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AAE   E1                     POP   hl   
3AAF   E5                     PUSH   hl   
3AB0   E5                     PUSH   hl   
3AB1   CD E5 0C               CALL   run   
3AB4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AC3   CD 4E 0B               CALL   flushBuffer   
3AC6   76                     HALT      
3AC7                EXPECTM_2787S106:      
3AC7   E1                     POP   HL   
3AC8                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3AC8   31 00 4E               LD   SP,STACK   
3ACB   CD 0E 0C               CALL   coldInit   
3ACE   CD 79 4C               CALL   execStr   
3AD1   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3ADF   CD 4E 0B               CALL   flushBuffer   
3AE2   E1                     POP   HL   
3AE3   E5                     PUSH   HL   
3AE4   11 14 00               LD   DE,20   
3AE7   B7                     OR   A   
3AE8   ED 52                  SBC   HL,DE   
3AEA   7D                     LD   A,L   
3AEB   B4                     OR   H   
3AEC   CA 54 3B               JP   Z,expectM_2788S107   
3AEF   CD C6 0B               CALL   printStr   
3AF2   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3B06   CD C6 0B               CALL   printStr   
3B09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B18   21 14 00               LD   hl,20   
3B1B   E5                     PUSH   hl   
3B1C   E5                     PUSH   hl   
3B1D   CD E5 0C               CALL   run   
3B20   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B28   CD 4E 0B               CALL   flushBuffer   
3B2B   CD C6 0B               CALL   printStr   
3B2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B3B   E1                     POP   hl   
3B3C   E5                     PUSH   hl   
3B3D   E5                     PUSH   hl   
3B3E   CD E5 0C               CALL   run   
3B41   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B50   CD 4E 0B               CALL   flushBuffer   
3B53   76                     HALT      
3B54                EXPECTM_2788S107:      
3B54   E1                     POP   HL   
3B55                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
3B55   31 00 4E               LD   SP,STACK   
3B58   CD 0E 0C               CALL   coldInit   
3B5B   CD 79 4C               CALL   execStr   
3B5E   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 DB   "[10 20 30 40] /s",0   
3B6F   CD 4E 0B               CALL   flushBuffer   
3B72   E1                     POP   HL   
3B73   E5                     PUSH   HL   
3B74   11 04 00               LD   DE,4   
3B77   B7                     OR   A   
3B78   ED 52                  SBC   HL,DE   
3B7A   7D                     LD   A,L   
3B7B   B4                     OR   H   
3B7C   CA E7 3B               JP   Z,expectM_2789S108   
3B7F   CD C6 0B               CALL   printStr   
3B82   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3B99   CD C6 0B               CALL   printStr   
3B9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BAB   21 04 00               LD   hl,4   
3BAE   E5                     PUSH   hl   
3BAF   E5                     PUSH   hl   
3BB0   CD E5 0C               CALL   run   
3BB3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BBB   CD 4E 0B               CALL   flushBuffer   
3BBE   CD C6 0B               CALL   printStr   
3BC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BCE   E1                     POP   hl   
3BCF   E5                     PUSH   hl   
3BD0   E5                     PUSH   hl   
3BD1   CD E5 0C               CALL   run   
3BD4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BE3   CD 4E 0B               CALL   flushBuffer   
3BE6   76                     HALT      
3BE7                EXPECTM_2789S108:      
3BE7   E1                     POP   HL   
3BE8                          ;*Macro unroll:  test "/c [1 2 3] 1#", 2
3BE8   31 00 4E               LD   SP,STACK   
3BEB   CD 0E 0C               CALL   coldInit   
3BEE   CD 79 4C               CALL   execStr   
3BF1   2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/c [1 2 3] 1#",0   
3BFF   CD 4E 0B               CALL   flushBuffer   
3C02   E1                     POP   HL   
3C03   E5                     PUSH   HL   
3C04   11 02 00               LD   DE,2   
3C07   B7                     OR   A   
3C08   ED 52                  SBC   HL,DE   
3C0A   7D                     LD   A,L   
3C0B   B4                     OR   H   
3C0C   CA 74 3C               JP   Z,expectM_2790S109   
3C0F   CD C6 0B               CALL   printStr   
3C12   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/c [1 2 3] 1#"   
3C26   CD C6 0B               CALL   printStr   
3C29   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C38   21 02 00               LD   hl,2   
3C3B   E5                     PUSH   hl   
3C3C   E5                     PUSH   hl   
3C3D   CD E5 0C               CALL   run   
3C40   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C48   CD 4E 0B               CALL   flushBuffer   
3C4B   CD C6 0B               CALL   printStr   
3C4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C5B   E1                     POP   hl   
3C5C   E5                     PUSH   hl   
3C5D   E5                     PUSH   hl   
3C5E   CD E5 0C               CALL   run   
3C61   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C70   CD 4E 0B               CALL   flushBuffer   
3C73   76                     HALT      
3C74                EXPECTM_2790S109:      
3C74   E1                     POP   HL   
3C75                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1#", 66
3C75   31 00 4E               LD   SP,STACK   
3C78   CD 0E 0C               CALL   coldInit   
3C7B   CD 79 4C               CALL   execStr   
3C7E   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/c ['A' 'B' 'C'] 1#",0   
3C92   CD 4E 0B               CALL   flushBuffer   
3C95   E1                     POP   HL   
3C96   E5                     PUSH   HL   
3C97   11 42 00               LD   DE,66   
3C9A   B7                     OR   A   
3C9B   ED 52                  SBC   HL,DE   
3C9D   7D                     LD   A,L   
3C9E   B4                     OR   H   
3C9F   CA 0D 3D               JP   Z,expectM_2791S110   
3CA2   CD C6 0B               CALL   printStr   
3CA5   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1#"   
3CBF   CD C6 0B               CALL   printStr   
3CC2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CD1   21 42 00               LD   hl,66   
3CD4   E5                     PUSH   hl   
3CD5   E5                     PUSH   hl   
3CD6   CD E5 0C               CALL   run   
3CD9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CE1   CD 4E 0B               CALL   flushBuffer   
3CE4   CD C6 0B               CALL   printStr   
3CE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CF4   E1                     POP   hl   
3CF5   E5                     PUSH   hl   
3CF6   E5                     PUSH   hl   
3CF7   CD E5 0C               CALL   run   
3CFA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D09   CD 4E 0B               CALL   flushBuffer   
3D0C   76                     HALT      
3D0D                EXPECTM_2791S110:      
3D0D   E1                     POP   HL   
3D0E                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3D0E   31 00 4E               LD   SP,STACK   
3D11   CD 0E 0C               CALL   coldInit   
3D14   CD 79 4C               CALL   execStr   
3D17   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3D2B   CD 4E 0B               CALL   flushBuffer   
3D2E   E1                     POP   HL   
3D2F   E5                     PUSH   HL   
3D30   11 0A 00               LD   DE,10   
3D33   B7                     OR   A   
3D34   ED 52                  SBC   HL,DE   
3D36   7D                     LD   A,L   
3D37   B4                     OR   H   
3D38   CA A6 3D               JP   Z,expectM_2792S111   
3D3B   CD C6 0B               CALL   printStr   
3D3E   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3D58   CD C6 0B               CALL   printStr   
3D5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D6A   21 0A 00               LD   hl,10   
3D6D   E5                     PUSH   hl   
3D6E   E5                     PUSH   hl   
3D6F   CD E5 0C               CALL   run   
3D72   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D7A   CD 4E 0B               CALL   flushBuffer   
3D7D   CD C6 0B               CALL   printStr   
3D80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D8D   E1                     POP   hl   
3D8E   E5                     PUSH   hl   
3D8F   E5                     PUSH   hl   
3D90   CD E5 0C               CALL   run   
3D93   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DA2   CD 4E 0B               CALL   flushBuffer   
3DA5   76                     HALT      
3DA6                EXPECTM_2792S111:      
3DA6   E1                     POP   HL   
3DA7                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
3DA7   31 00 4E               LD   SP,STACK   
3DAA   CD 0E 0C               CALL   coldInit   
3DAD   CD 79 4C               CALL   execStr   
3DB0   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
3DCD   CD 4E 0B               CALL   flushBuffer   
3DD0   E1                     POP   HL   
3DD1   E5                     PUSH   HL   
3DD2   11 0A 00               LD   DE,10   
3DD5   B7                     OR   A   
3DD6   ED 52                  SBC   HL,DE   
3DD8   7D                     LD   A,L   
3DD9   B4                     OR   H   
3DDA   CA 51 3E               JP   Z,expectM_2793S112   
3DDD   CD C6 0B               CALL   printStr   
3DE0   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
3E03   CD C6 0B               CALL   printStr   
3E06   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E15   21 0A 00               LD   hl,10   
3E18   E5                     PUSH   hl   
3E19   E5                     PUSH   hl   
3E1A   CD E5 0C               CALL   run   
3E1D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E25   CD 4E 0B               CALL   flushBuffer   
3E28   CD C6 0B               CALL   printStr   
3E2B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E38   E1                     POP   hl   
3E39   E5                     PUSH   hl   
3E3A   E5                     PUSH   hl   
3E3B   CD E5 0C               CALL   run   
3E3E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E4D   CD 4E 0B               CALL   flushBuffer   
3E50   76                     HALT      
3E51                EXPECTM_2793S112:      
3E51   E1                     POP   HL   
3E52                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
3E52   31 00 4E               LD   SP,STACK   
3E55   CD 0E 0C               CALL   coldInit   
3E58   CD 79 4C               CALL   execStr   
3E5B   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3E7C   CD 4E 0B               CALL   flushBuffer   
3E7F   E1                     POP   HL   
3E80   E5                     PUSH   HL   
3E81   11 0A 00               LD   DE,10   
3E84   B7                     OR   A   
3E85   ED 52                  SBC   HL,DE   
3E87   7D                     LD   A,L   
3E88   B4                     OR   H   
3E89   CA 04 3F               JP   Z,expectM_2794S113   
3E8C   CD C6 0B               CALL   printStr   
3E8F   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
3EB6   CD C6 0B               CALL   printStr   
3EB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EC8   21 0A 00               LD   hl,10   
3ECB   E5                     PUSH   hl   
3ECC   E5                     PUSH   hl   
3ECD   CD E5 0C               CALL   run   
3ED0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3ED8   CD 4E 0B               CALL   flushBuffer   
3EDB   CD C6 0B               CALL   printStr   
3EDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EEB   E1                     POP   hl   
3EEC   E5                     PUSH   hl   
3EED   E5                     PUSH   hl   
3EEE   CD E5 0C               CALL   run   
3EF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F00   CD 4E 0B               CALL   flushBuffer   
3F03   76                     HALT      
3F04                EXPECTM_2794S113:      
3F04   E1                     POP   HL   
3F05                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
3F05   31 00 4E               LD   SP,STACK   
3F08   CD 0E 0C               CALL   coldInit   
3F0B   CD 79 4C               CALL   execStr   
3F0E   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3F2F   CD 4E 0B               CALL   flushBuffer   
3F32   E1                     POP   HL   
3F33   E5                     PUSH   HL   
3F34   11 14 00               LD   DE,20   
3F37   B7                     OR   A   
3F38   ED 52                  SBC   HL,DE   
3F3A   7D                     LD   A,L   
3F3B   B4                     OR   H   
3F3C   CA B7 3F               JP   Z,expectM_2795S114   
3F3F   CD C6 0B               CALL   printStr   
3F42   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
3F69   CD C6 0B               CALL   printStr   
3F6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F7B   21 14 00               LD   hl,20   
3F7E   E5                     PUSH   hl   
3F7F   E5                     PUSH   hl   
3F80   CD E5 0C               CALL   run   
3F83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F8B   CD 4E 0B               CALL   flushBuffer   
3F8E   CD C6 0B               CALL   printStr   
3F91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F9E   E1                     POP   hl   
3F9F   E5                     PUSH   hl   
3FA0   E5                     PUSH   hl   
3FA1   CD E5 0C               CALL   run   
3FA4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FB3   CD 4E 0B               CALL   flushBuffer   
3FB6   76                     HALT      
3FB7                EXPECTM_2795S114:      
3FB7   E1                     POP   HL   
3FB8                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3FB8   31 00 4E               LD   SP,STACK   
3FBB   CD 0E 0C               CALL   coldInit   
3FBE   CD 79 4C               CALL   execStr   
3FC1   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3FD9   CD 4E 0B               CALL   flushBuffer   
3FDC   E1                     POP   HL   
3FDD   E5                     PUSH   HL   
3FDE   11 06 00               LD   DE,6   
3FE1   B7                     OR   A   
3FE2   ED 52                  SBC   HL,DE   
3FE4   7D                     LD   A,L   
3FE5   B4                     OR   H   
3FE6   CA 58 40               JP   Z,expectM_2796S115   
3FE9   CD C6 0B               CALL   printStr   
3FEC   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
400A   CD C6 0B               CALL   printStr   
400D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
401C   21 06 00               LD   hl,6   
401F   E5                     PUSH   hl   
4020   E5                     PUSH   hl   
4021   CD E5 0C               CALL   run   
4024   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
402C   CD 4E 0B               CALL   flushBuffer   
402F   CD C6 0B               CALL   printStr   
4032   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
403F   E1                     POP   hl   
4040   E5                     PUSH   hl   
4041   E5                     PUSH   hl   
4042   CD E5 0C               CALL   run   
4045   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4054   CD 4E 0B               CALL   flushBuffer   
4057   76                     HALT      
4058                EXPECTM_2796S115:      
4058   E1                     POP   HL   
4059                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
4059   31 00 4E               LD   SP,STACK   
405C   CD 0E 0C               CALL   coldInit   
405F   CD 79 4C               CALL   execStr   
4062   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
407D   CD 4E 0B               CALL   flushBuffer   
4080   E1                     POP   HL   
4081   E5                     PUSH   HL   
4082   11 02 00               LD   DE,2   
4085   B7                     OR   A   
4086   ED 52                  SBC   HL,DE   
4088   7D                     LD   A,L   
4089   B4                     OR   H   
408A   CA FF 40               JP   Z,expectM_2797S116   
408D   CD C6 0B               CALL   printStr   
4090   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
40B1   CD C6 0B               CALL   printStr   
40B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40C3   21 02 00               LD   hl,2   
40C6   E5                     PUSH   hl   
40C7   E5                     PUSH   hl   
40C8   CD E5 0C               CALL   run   
40CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40D3   CD 4E 0B               CALL   flushBuffer   
40D6   CD C6 0B               CALL   printStr   
40D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40E6   E1                     POP   hl   
40E7   E5                     PUSH   hl   
40E8   E5                     PUSH   hl   
40E9   CD E5 0C               CALL   run   
40EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40FB   CD 4E 0B               CALL   flushBuffer   
40FE   76                     HALT      
40FF                EXPECTM_2797S116:      
40FF   E1                     POP   HL   
4100                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
4100   31 00 4E               LD   SP,STACK   
4103   CD 0E 0C               CALL   coldInit   
4106   CD 79 4C               CALL   execStr   
4109   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
412F   CD 4E 0B               CALL   flushBuffer   
4132   E1                     POP   HL   
4133   E5                     PUSH   HL   
4134   11 0A 00               LD   DE,10   
4137   B7                     OR   A   
4138   ED 52                  SBC   HL,DE   
413A   7D                     LD   A,L   
413B   B4                     OR   H   
413C   CA BC 41               JP   Z,expectM_2798S117   
413F   CD C6 0B               CALL   printStr   
4142   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
416E   CD C6 0B               CALL   printStr   
4171   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4180   21 0A 00               LD   hl,10   
4183   E5                     PUSH   hl   
4184   E5                     PUSH   hl   
4185   CD E5 0C               CALL   run   
4188   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4190   CD 4E 0B               CALL   flushBuffer   
4193   CD C6 0B               CALL   printStr   
4196   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41A3   E1                     POP   hl   
41A4   E5                     PUSH   hl   
41A5   E5                     PUSH   hl   
41A6   CD E5 0C               CALL   run   
41A9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41B8   CD 4E 0B               CALL   flushBuffer   
41BB   76                     HALT      
41BC                EXPECTM_2798S117:      
41BC   E1                     POP   HL   
41BD                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
41BD   31 00 4E               LD   SP,STACK   
41C0   CD 0E 0C               CALL   coldInit   
41C3   CD 79 4C               CALL   execStr   
41C6   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
41F3   CD 4E 0B               CALL   flushBuffer   
41F6   E1                     POP   HL   
41F7   E5                     PUSH   HL   
41F8   11 06 00               LD   DE,6   
41FB   B7                     OR   A   
41FC   ED 52                  SBC   HL,DE   
41FE   7D                     LD   A,L   
41FF   B4                     OR   H   
4200   CA 87 42               JP   Z,expectM_2799S118   
4203   CD C6 0B               CALL   printStr   
4206   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
4239   CD C6 0B               CALL   printStr   
423C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
424B   21 06 00               LD   hl,6   
424E   E5                     PUSH   hl   
424F   E5                     PUSH   hl   
4250   CD E5 0C               CALL   run   
4253   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
425B   CD 4E 0B               CALL   flushBuffer   
425E   CD C6 0B               CALL   printStr   
4261   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
426E   E1                     POP   hl   
426F   E5                     PUSH   hl   
4270   E5                     PUSH   hl   
4271   CD E5 0C               CALL   run   
4274   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4283   CD 4E 0B               CALL   flushBuffer   
4286   76                     HALT      
4287                EXPECTM_2799S118:      
4287   E1                     POP   HL   
4288                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
4288   31 00 4E               LD   SP,STACK   
428B   CD 0E 0C               CALL   coldInit   
428E   CD 79 4C               CALL   execStr   
4291   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
429D   CD 4E 0B               CALL   flushBuffer   
42A0   E1                     POP   HL   
42A1   E5                     PUSH   HL   
42A2   11 00 00               LD   DE,NUL   
42A5   B7                     OR   A   
42A6   ED 52                  SBC   HL,DE   
42A8   7D                     LD   A,L   
42A9   B4                     OR   H   
42AA   CA 10 43               JP   Z,expectM_2800S119   
42AD   CD C6 0B               CALL   printStr   
42B0   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
42C2   CD C6 0B               CALL   printStr   
42C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42D4   21 00 00               LD   hl,NUL   
42D7   E5                     PUSH   hl   
42D8   E5                     PUSH   hl   
42D9   CD E5 0C               CALL   run   
42DC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42E4   CD 4E 0B               CALL   flushBuffer   
42E7   CD C6 0B               CALL   printStr   
42EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42F7   E1                     POP   hl   
42F8   E5                     PUSH   hl   
42F9   E5                     PUSH   hl   
42FA   CD E5 0C               CALL   run   
42FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
430C   CD 4E 0B               CALL   flushBuffer   
430F   76                     HALT      
4310                EXPECTM_2800S119:      
4310   E1                     POP   HL   
4311                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4311   31 00 4E               LD   SP,STACK   
4314   CD 0E 0C               CALL   coldInit   
4317   CD 79 4C               CALL   execStr   
431A   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
4326   CD 4E 0B               CALL   flushBuffer   
4329   E1                     POP   HL   
432A   E5                     PUSH   HL   
432B   11 00 00               LD   DE,NUL   
432E   B7                     OR   A   
432F   ED 52                  SBC   HL,DE   
4331   7D                     LD   A,L   
4332   B4                     OR   H   
4333   CA 99 43               JP   Z,expectM_2801S120   
4336   CD C6 0B               CALL   printStr   
4339   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
434B   CD C6 0B               CALL   printStr   
434E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
435D   21 00 00               LD   hl,NUL   
4360   E5                     PUSH   hl   
4361   E5                     PUSH   hl   
4362   CD E5 0C               CALL   run   
4365   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
436D   CD 4E 0B               CALL   flushBuffer   
4370   CD C6 0B               CALL   printStr   
4373   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4380   E1                     POP   hl   
4381   E5                     PUSH   hl   
4382   E5                     PUSH   hl   
4383   CD E5 0C               CALL   run   
4386   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4395   CD 4E 0B               CALL   flushBuffer   
4398   76                     HALT      
4399                EXPECTM_2801S120:      
4399   E1                     POP   HL   
439A                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
439A   31 00 4E               LD   SP,STACK   
439D   CD 0E 0C               CALL   coldInit   
43A0   CD 79 4C               CALL   execStr   
43A3   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
43AF   CD 4E 0B               CALL   flushBuffer   
43B2   E1                     POP   HL   
43B3   E5                     PUSH   HL   
43B4   11 00 00               LD   DE,NUL   
43B7   B7                     OR   A   
43B8   ED 52                  SBC   HL,DE   
43BA   7D                     LD   A,L   
43BB   B4                     OR   H   
43BC   CA 22 44               JP   Z,expectM_2802S121   
43BF   CD C6 0B               CALL   printStr   
43C2   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
43D4   CD C6 0B               CALL   printStr   
43D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43E6   21 00 00               LD   hl,NUL   
43E9   E5                     PUSH   hl   
43EA   E5                     PUSH   hl   
43EB   CD E5 0C               CALL   run   
43EE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43F6   CD 4E 0B               CALL   flushBuffer   
43F9   CD C6 0B               CALL   printStr   
43FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4409   E1                     POP   hl   
440A   E5                     PUSH   hl   
440B   E5                     PUSH   hl   
440C   CD E5 0C               CALL   run   
440F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
441E   CD 4E 0B               CALL   flushBuffer   
4421   76                     HALT      
4422                EXPECTM_2802S121:      
4422   E1                     POP   HL   
4423                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4423   31 00 4E               LD   SP,STACK   
4426   CD 0E 0C               CALL   coldInit   
4429   CD 79 4C               CALL   execStr   
442C   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
4438   CD 4E 0B               CALL   flushBuffer   
443B   E1                     POP   HL   
443C   E5                     PUSH   HL   
443D   11 00 00               LD   DE,NUL   
4440   B7                     OR   A   
4441   ED 52                  SBC   HL,DE   
4443   7D                     LD   A,L   
4444   B4                     OR   H   
4445   CA AB 44               JP   Z,expectM_2803S122   
4448   CD C6 0B               CALL   printStr   
444B   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
445D   CD C6 0B               CALL   printStr   
4460   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
446F   21 00 00               LD   hl,NUL   
4472   E5                     PUSH   hl   
4473   E5                     PUSH   hl   
4474   CD E5 0C               CALL   run   
4477   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
447F   CD 4E 0B               CALL   flushBuffer   
4482   CD C6 0B               CALL   printStr   
4485   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4492   E1                     POP   hl   
4493   E5                     PUSH   hl   
4494   E5                     PUSH   hl   
4495   CD E5 0C               CALL   run   
4498   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44A7   CD 4E 0B               CALL   flushBuffer   
44AA   76                     HALT      
44AB                EXPECTM_2803S122:      
44AB   E1                     POP   HL   
44AC                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
44AC   31 00 4E               LD   SP,STACK   
44AF   CD 0E 0C               CALL   coldInit   
44B2   CD 79 4C               CALL   execStr   
44B5   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
44BD   CD 4E 0B               CALL   flushBuffer   
44C0   E1                     POP   HL   
44C1   E5                     PUSH   HL   
44C2   11 66 50               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
44C5   B7                     OR   A   
44C6   ED 52                  SBC   HL,DE   
44C8   7D                     LD   A,L   
44C9   B4                     OR   H   
44CA   CA 2C 45               JP   Z,expectM_2804S123   
44CD   CD C6 0B               CALL   printStr   
44D0   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
44DE   CD C6 0B               CALL   printStr   
44E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44F0   21 66 50               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
44F3   E5                     PUSH   hl   
44F4   E5                     PUSH   hl   
44F5   CD E5 0C               CALL   run   
44F8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4500   CD 4E 0B               CALL   flushBuffer   
4503   CD C6 0B               CALL   printStr   
4506   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4513   E1                     POP   hl   
4514   E5                     PUSH   hl   
4515   E5                     PUSH   hl   
4516   CD E5 0C               CALL   run   
4519   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4528   CD 4E 0B               CALL   flushBuffer   
452B   76                     HALT      
452C                EXPECTM_2804S123:      
452C   E1                     POP   HL   
452D                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
452D   31 00 4E               LD   SP,STACK   
4530   CD 0E 0C               CALL   coldInit   
4533   CD 79 4C               CALL   execStr   
4536   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
453E   CD 4E 0B               CALL   flushBuffer   
4541   E1                     POP   HL   
4542   E5                     PUSH   HL   
4543   11 34 50               LD   DE,VARS + ("Z"-"A"+1)*2   
4546   B7                     OR   A   
4547   ED 52                  SBC   HL,DE   
4549   7D                     LD   A,L   
454A   B4                     OR   H   
454B   CA AD 45               JP   Z,expectM_2805S124   
454E   CD C6 0B               CALL   printStr   
4551   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
455F   CD C6 0B               CALL   printStr   
4562   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4571   21 34 50               LD   hl,VARS + ("Z"-"A"+1)*2   
4574   E5                     PUSH   hl   
4575   E5                     PUSH   hl   
4576   CD E5 0C               CALL   run   
4579   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4581   CD 4E 0B               CALL   flushBuffer   
4584   CD C6 0B               CALL   printStr   
4587   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4594   E1                     POP   hl   
4595   E5                     PUSH   hl   
4596   E5                     PUSH   hl   
4597   CD E5 0C               CALL   run   
459A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45A9   CD 4E 0B               CALL   flushBuffer   
45AC   76                     HALT      
45AD                EXPECTM_2805S124:      
45AD   E1                     POP   HL   
45AE                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
45AE   31 00 4E               LD   SP,STACK   
45B1   CD 0E 0C               CALL   coldInit   
45B4   CD 79 4C               CALL   execStr   
45B7   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
45BF   CD 4E 0B               CALL   flushBuffer   
45C2   E1                     POP   HL   
45C3   E5                     PUSH   HL   
45C4   11 32 50               LD   DE,VARS + ("Z"-"A")*2   
45C7   B7                     OR   A   
45C8   ED 52                  SBC   HL,DE   
45CA   7D                     LD   A,L   
45CB   B4                     OR   H   
45CC   CA 2E 46               JP   Z,expectM_2806S125   
45CF   CD C6 0B               CALL   printStr   
45D2   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
45E0   CD C6 0B               CALL   printStr   
45E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45F2   21 32 50               LD   hl,VARS + ("Z"-"A")*2   
45F5   E5                     PUSH   hl   
45F6   E5                     PUSH   hl   
45F7   CD E5 0C               CALL   run   
45FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4602   CD 4E 0B               CALL   flushBuffer   
4605   CD C6 0B               CALL   printStr   
4608   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4615   E1                     POP   hl   
4616   E5                     PUSH   hl   
4617   E5                     PUSH   hl   
4618   CD E5 0C               CALL   run   
461B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
462A   CD 4E 0B               CALL   flushBuffer   
462D   76                     HALT      
462E                EXPECTM_2806S125:      
462E   E1                     POP   HL   
462F                          ;*Macro unroll:  test "'A' /ad", VARS
462F   31 00 4E               LD   SP,STACK   
4632   CD 0E 0C               CALL   coldInit   
4635   CD 79 4C               CALL   execStr   
4638   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
4640   CD 4E 0B               CALL   flushBuffer   
4643   E1                     POP   HL   
4644   E5                     PUSH   HL   
4645   11 00 50               LD   DE,VARS   
4648   B7                     OR   A   
4649   ED 52                  SBC   HL,DE   
464B   7D                     LD   A,L   
464C   B4                     OR   H   
464D   CA AF 46               JP   Z,expectM_2807S126   
4650   CD C6 0B               CALL   printStr   
4653   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4661   CD C6 0B               CALL   printStr   
4664   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4673   21 00 50               LD   hl,VARS   
4676   E5                     PUSH   hl   
4677   E5                     PUSH   hl   
4678   CD E5 0C               CALL   run   
467B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4683   CD 4E 0B               CALL   flushBuffer   
4686   CD C6 0B               CALL   printStr   
4689   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4696   E1                     POP   hl   
4697   E5                     PUSH   hl   
4698   E5                     PUSH   hl   
4699   CD E5 0C               CALL   run   
469C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46AB   CD 4E 0B               CALL   flushBuffer   
46AE   76                     HALT      
46AF                EXPECTM_2807S126:      
46AF   E1                     POP   HL   
46B0                          ;*Macro unroll:  test "-1. /c/vB 0#", $2D
46B0   31 00 4E               LD   SP,STACK   
46B3   CD 0E 0C               CALL   coldInit   
46B6   CD 79 4C               CALL   execStr   
46B9   2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 DB   "-1. /c/vB 0#",0   
46C6   CD 4E 0B               CALL   flushBuffer   
46C9   E1                     POP   HL   
46CA   E5                     PUSH   HL   
46CB   11 2D 00               LD   DE,$2D   
46CE   B7                     OR   A   
46CF   ED 52                  SBC   HL,DE   
46D1   7D                     LD   A,L   
46D2   B4                     OR   H   
46D3   CA 3A 47               JP   Z,expectM_2808S127   
46D6   CD C6 0B               CALL   printStr   
46D9   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /c/vB 0#"   
46EC   CD C6 0B               CALL   printStr   
46EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46FE   21 2D 00               LD   hl,$2D   
4701   E5                     PUSH   hl   
4702   E5                     PUSH   hl   
4703   CD E5 0C               CALL   run   
4706   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
470E   CD 4E 0B               CALL   flushBuffer   
4711   CD C6 0B               CALL   printStr   
4714   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4721   E1                     POP   hl   
4722   E5                     PUSH   hl   
4723   E5                     PUSH   hl   
4724   CD E5 0C               CALL   run   
4727   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4736   CD 4E 0B               CALL   flushBuffer   
4739   76                     HALT      
473A                EXPECTM_2808S127:      
473A   E1                     POP   HL   
473B                          ;*Macro unroll:  test {DQ,"A",DQ,".s /c/vB 0#"}, 65
473B   31 00 4E               LD   SP,STACK   
473E   CD 0E 0C               CALL   coldInit   
4741   CD 79 4C               CALL   execStr   
4744   22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /c/vB 0#",0   
4753   CD 4E 0B               CALL   flushBuffer   
4756   E1                     POP   HL   
4757   E5                     PUSH   HL   
4758   11 41 00               LD   DE,65   
475B   B7                     OR   A   
475C   ED 52                  SBC   HL,DE   
475E   7D                     LD   A,L   
475F   B4                     OR   H   
4760   CA C9 47               JP   Z,expectM_2809S128   
4763   CD C6 0B               CALL   printStr   
4766   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /c/vB 0#"   
477B   CD C6 0B               CALL   printStr   
477E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
478D   21 41 00               LD   hl,65   
4790   E5                     PUSH   hl   
4791   E5                     PUSH   hl   
4792   CD E5 0C               CALL   run   
4795   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
479D   CD 4E 0B               CALL   flushBuffer   
47A0   CD C6 0B               CALL   printStr   
47A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47B0   E1                     POP   hl   
47B1   E5                     PUSH   hl   
47B2   E5                     PUSH   hl   
47B3   CD E5 0C               CALL   run   
47B6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47C5   CD 4E 0B               CALL   flushBuffer   
47C8   76                     HALT      
47C9                EXPECTM_2809S128:      
47C9   E1                     POP   HL   
47CA                          ;*Macro unroll:  test "123. /c/vB 1#", $32
47CA   31 00 4E               LD   SP,STACK   
47CD   CD 0E 0C               CALL   coldInit   
47D0   CD 79 4C               CALL   execStr   
47D3   31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 DB   "123. /c/vB 1#",0   
47E1   CD 4E 0B               CALL   flushBuffer   
47E4   E1                     POP   HL   
47E5   E5                     PUSH   HL   
47E6   11 32 00               LD   DE,$32   
47E9   B7                     OR   A   
47EA   ED 52                  SBC   HL,DE   
47EC   7D                     LD   A,L   
47ED   B4                     OR   H   
47EE   CA 56 48               JP   Z,expectM_2810S129   
47F1   CD C6 0B               CALL   printStr   
47F4   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /c/vB 1#"   
4808   CD C6 0B               CALL   printStr   
480B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
481A   21 32 00               LD   hl,$32   
481D   E5                     PUSH   hl   
481E   E5                     PUSH   hl   
481F   CD E5 0C               CALL   run   
4822   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
482A   CD 4E 0B               CALL   flushBuffer   
482D   CD C6 0B               CALL   printStr   
4830   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
483D   E1                     POP   hl   
483E   E5                     PUSH   hl   
483F   E5                     PUSH   hl   
4840   CD E5 0C               CALL   run   
4843   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4852   CD 4E 0B               CALL   flushBuffer   
4855   76                     HALT      
4856                EXPECTM_2810S129:      
4856   E1                     POP   HL   
4857                          ;*Macro unroll:  test ":a{%a}; F=1F^", 1
4857   31 00 4E               LD   SP,STACK   
485A   CD 0E 0C               CALL   coldInit   
485D   CD 79 4C               CALL   execStr   
4860   3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 DB   ":a{%a}; F=1F^",0   
486E   CD 4E 0B               CALL   flushBuffer   
4871   E1                     POP   HL   
4872   E5                     PUSH   HL   
4873   11 01 00               LD   DE,1   
4876   B7                     OR   A   
4877   ED 52                  SBC   HL,DE   
4879   7D                     LD   A,L   
487A   B4                     OR   H   
487B   CA E3 48               JP   Z,expectM_2811S130   
487E   CD C6 0B               CALL   printStr   
4881   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a}; F=1F^"   
4895   CD C6 0B               CALL   printStr   
4898   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48A7   21 01 00               LD   hl,1   
48AA   E5                     PUSH   hl   
48AB   E5                     PUSH   hl   
48AC   CD E5 0C               CALL   run   
48AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48B7   CD 4E 0B               CALL   flushBuffer   
48BA   CD C6 0B               CALL   printStr   
48BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48CA   E1                     POP   hl   
48CB   E5                     PUSH   hl   
48CC   E5                     PUSH   hl   
48CD   CD E5 0C               CALL   run   
48D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48DF   CD 4E 0B               CALL   flushBuffer   
48E2   76                     HALT      
48E3                EXPECTM_2811S130:      
48E3   E1                     POP   HL   
48E4                          ;*Macro unroll:  test "1 :b{:a{%a};};^F= 3F^",3
48E4   31 00 4E               LD   SP,STACK   
48E7   CD 0E 0C               CALL   coldInit   
48EA   CD 79 4C               CALL   execStr   
48ED   31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a};};^F= 3F^",0   
4903   CD 4E 0B               CALL   flushBuffer   
4906   E1                     POP   HL   
4907   E5                     PUSH   HL   
4908   11 03 00               LD   DE,3   
490B   B7                     OR   A   
490C   ED 52                  SBC   HL,DE   
490E   7D                     LD   A,L   
490F   B4                     OR   H   
4910   CA 80 49               JP   Z,expectM_2812S131   
4913   CD C6 0B               CALL   printStr   
4916   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a};};^F= 3F^"   
4932   CD C6 0B               CALL   printStr   
4935   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4944   21 03 00               LD   hl,3   
4947   E5                     PUSH   hl   
4948   E5                     PUSH   hl   
4949   CD E5 0C               CALL   run   
494C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4954   CD 4E 0B               CALL   flushBuffer   
4957   CD C6 0B               CALL   printStr   
495A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4967   E1                     POP   hl   
4968   E5                     PUSH   hl   
4969   E5                     PUSH   hl   
496A   CD E5 0C               CALL   run   
496D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
497C   CD 4E 0B               CALL   flushBuffer   
497F   76                     HALT      
4980                EXPECTM_2812S131:      
4980   E1                     POP   HL   
4981                          ;*Macro unroll:  test "1 :b{:a{%a%b-};};^F= 3F^",2
4981   31 00 4E               LD   SP,STACK   
4984   CD 0E 0C               CALL   coldInit   
4987   CD 79 4C               CALL   execStr   
498A   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-};};^F= 3F^",0   
49A3   CD 4E 0B               CALL   flushBuffer   
49A6   E1                     POP   HL   
49A7   E5                     PUSH   HL   
49A8   11 02 00               LD   DE,2   
49AB   B7                     OR   A   
49AC   ED 52                  SBC   HL,DE   
49AE   7D                     LD   A,L   
49AF   B4                     OR   H   
49B0   CA 23 4A               JP   Z,expectM_2813S132   
49B3   CD C6 0B               CALL   printStr   
49B6   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-};};^F= 3F^"   
49D5   CD C6 0B               CALL   printStr   
49D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49E7   21 02 00               LD   hl,2   
49EA   E5                     PUSH   hl   
49EB   E5                     PUSH   hl   
49EC   CD E5 0C               CALL   run   
49EF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49F7   CD 4E 0B               CALL   flushBuffer   
49FA   CD C6 0B               CALL   printStr   
49FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A0A   E1                     POP   hl   
4A0B   E5                     PUSH   hl   
4A0C   E5                     PUSH   hl   
4A0D   CD E5 0C               CALL   run   
4A10   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A1F   CD 4E 0B               CALL   flushBuffer   
4A22   76                     HALT      
4A23                EXPECTM_2813S132:      
4A23   E1                     POP   HL   
4A24                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",1
4A24   31 00 4E               LD   SP,STACK   
4A27   CD 0E 0C               CALL   coldInit   
4A2A   CD 79 4C               CALL   execStr   
4A2D   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",0   
4A52   CD 4E 0B               CALL   flushBuffer   
4A55   E1                     POP   HL   
4A56   E5                     PUSH   HL   
4A57   11 01 00               LD   DE,1   
4A5A   B7                     OR   A   
4A5B   ED 52                  SBC   HL,DE   
4A5D   7D                     LD   A,L   
4A5E   B4                     OR   H   
4A5F   CA DE 4A               JP   Z,expectM_2814S133   
4A62   CD C6 0B               CALL   printStr   
4A65   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^"   
4A90   CD C6 0B               CALL   printStr   
4A93   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AA2   21 01 00               LD   hl,1   
4AA5   E5                     PUSH   hl   
4AA6   E5                     PUSH   hl   
4AA7   CD E5 0C               CALL   run   
4AAA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4AB2   CD 4E 0B               CALL   flushBuffer   
4AB5   CD C6 0B               CALL   printStr   
4AB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AC5   E1                     POP   hl   
4AC6   E5                     PUSH   hl   
4AC7   E5                     PUSH   hl   
4AC8   CD E5 0C               CALL   run   
4ACB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4ADA   CD 4E 0B               CALL   flushBuffer   
4ADD   76                     HALT      
4ADE                EXPECTM_2814S133:      
4ADE   E1                     POP   HL   
4ADF                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",1
4ADF   31 00 4E               LD   SP,STACK   
4AE2   CD 0E 0C               CALL   coldInit   
4AE5   CD 79 4C               CALL   execStr   
4AE8   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",0   
4B0D   CD 4E 0B               CALL   flushBuffer   
4B10   E1                     POP   HL   
4B11   E5                     PUSH   HL   
4B12   11 01 00               LD   DE,1   
4B15   B7                     OR   A   
4B16   ED 52                  SBC   HL,DE   
4B18   7D                     LD   A,L   
4B19   B4                     OR   H   
4B1A   CA 99 4B               JP   Z,expectM_2815S134   
4B1D   CD C6 0B               CALL   printStr   
4B20   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^"   
4B4B   CD C6 0B               CALL   printStr   
4B4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B5D   21 01 00               LD   hl,1   
4B60   E5                     PUSH   hl   
4B61   E5                     PUSH   hl   
4B62   CD E5 0C               CALL   run   
4B65   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B6D   CD 4E 0B               CALL   flushBuffer   
4B70   CD C6 0B               CALL   printStr   
4B73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B80   E1                     POP   hl   
4B81   E5                     PUSH   hl   
4B82   E5                     PUSH   hl   
4B83   CD E5 0C               CALL   run   
4B86   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B95   CD 4E 0B               CALL   flushBuffer   
4B98   76                     HALT      
4B99                EXPECTM_2815S134:      
4B99   E1                     POP   HL   
4B9A                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",2
4B9A   31 00 4E               LD   SP,STACK   
4B9D   CD 0E 0C               CALL   coldInit   
4BA0   CD 79 4C               CALL   execStr   
4BA3   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",0   
4BD5   CD 4E 0B               CALL   flushBuffer   
4BD8   E1                     POP   HL   
4BD9   E5                     PUSH   HL   
4BDA   11 02 00               LD   DE,2   
4BDD   B7                     OR   A   
4BDE   ED 52                  SBC   HL,DE   
4BE0   7D                     LD   A,L   
4BE1   B4                     OR   H   
4BE2   CA 6E 4C               JP   Z,expectM_2816S135   
4BE5   CD C6 0B               CALL   printStr   
4BE8   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^"   
4C20   CD C6 0B               CALL   printStr   
4C23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C32   21 02 00               LD   hl,2   
4C35   E5                     PUSH   hl   
4C36   E5                     PUSH   hl   
4C37   CD E5 0C               CALL   run   
4C3A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C42   CD 4E 0B               CALL   flushBuffer   
4C45   CD C6 0B               CALL   printStr   
4C48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C55   E1                     POP   hl   
4C56   E5                     PUSH   hl   
4C57   E5                     PUSH   hl   
4C58   CD E5 0C               CALL   run   
4C5B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C6A   CD 4E 0B               CALL   flushBuffer   
4C6D   76                     HALT      
4C6E                EXPECTM_2816S135:      
4C6E   E1                     POP   HL   
4C6F                             ; 
4C6F   CD C6 0B               CALL   printStr   
4C72   44 6F 6E 65 21 00      .CSTR   "Done!"   
4C78   76                     HALT      
4C79                             ; executes a null teminated string (null executes exit_)
4C79                             ; the string should be immedaitely following the call
4C79                EXECSTR:      ; create a root stack frame
4C79   C1                     POP   bc   ; bc = code*
4C7A   0B                     DEC   bc   ; dec to prepare for next routine
4C7B   11 00 00               LD   de,0   
4C7E   D5                     PUSH   de   ; push fake IP
4C7F   D5                     PUSH   de   ; push null arg_list*
4C80   D5                     PUSH   de   ; push null first_arg*
4C81   D5                     PUSH   de   ; push fake BP
4C82   DD E9                  JP   (ix)   
4C84                STKSIZE:   EQU   $100   ; Stack size
4C84                TIBSIZE:   EQU   $100   ; 256 bytes
4C84                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4C84                          ALIGN   $100   
4D00                          DS   STKSIZE   
4E00                STACK:       
4E00                          ALIGN   $100   
4E00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4F00                          ALIGN   $100   
4F00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5000                          ALIGN   $100   
5000                VARS:        
5000                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
50D0                RESTARTS:      
50D0                RST08:    DS   2   
50D2                RST10:    DS   2   
50D4                RST18:    DS   2   
50D6                RST20:    DS   2   
50D8                RST28:    DS   2   
50DA                RST30:    DS   2   ; 
50DC                BAUD:     DS   2   ; 
50DE                INTVEC:   DS   2   ; 
50E0                NMIVEC:   DS   2   ; 
50E2                GETCVEC:   DS   2   ; 
50E4                PUTCVEC:   DS   2   ; 
50E6                SYSVARS:      
50E6                             ; initialised sys variables (preserved)
50E6                VDATAWIDTH:   DS   2   ; 
50E8                VNUMBASE:   DS   2   ; 
50EA                VTIBPTR:   DS   2   ; 
50EC                VBUFPTR:   DS   2   ; 
50EE                VNEXT:    DS   2   ; 
50F0                VHEAPPTR:   DS   2   ; 
50F2                             ; uninitialised sys variables (preserved)
50F2                VPOINTER:   DS   2   ; 
50F4                VREMAIN:   DS   2   ; 
50F6                VSAVEDIP:   DS   2   ; 
50F8                VSAVEDSP:   DS   2   ; 
50FA                VSAVEDNEXT:   DS   2   ; 
50FC                VSAVEDBP:   DS   2   ; 
50FE                VCHECKSUM:   DS   2   ; 
5100                             ; uninitialised sys variables (unpreserved)
5100                VTEMP1:   DS   2   ; 
5102                VTEMP2:   DS   2   ; 
5104                VLASTDEF:   DS   2   ; 
5106                VHASHSTR:   DS   2   ; 
5108                TBPTR:    DS   2   ; reserved for tests
510A                TITLEBUF:   DS   20   
511E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0B44 DEFINED AT LINE 1774 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 68 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 171 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 173 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 175 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 177 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 179 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 181 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 183 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 185 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 187 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 189 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 190 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 192 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 194 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             0327 DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032A DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           032D DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0330 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0333 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0336 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033B DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
HASH_:              033E DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0341 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0344 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             0347 DEFINED AT LINE 221 IN MAIN.asm
DQUOTE_:            034A DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             034D DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0350 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035A DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035B DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                035F DEFINED AT LINE 240 IN MAIN.asm
LT_:                036A DEFINED AT LINE 248 IN MAIN.asm
LT1:                0373 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037C DEFINED AT LINE 260 IN MAIN.asm
NOP_:               037F DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0381 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0384 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADD:                0384 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               038F DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0393 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
AT:                 0396 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
ADDR:               0396 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A0 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
AND:                03A0 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03A7 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AB DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AB DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B4 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
XOR1:               03B5 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03BF DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
PERCENT:            03C4 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
ARG:                03C4 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E0 DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG0A:              03E9 DEFINED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
ARG1:               03EE DEFINED AT LINE 371 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
ARG1A:              03F6 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
LBRACK:             03F9 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYSTART:         03F9 DEFINED AT LINE 383 IN MAIN.asm
RBRACK:             0415 DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRAYEND:           0415 DEFINED AT LINE 398 IN MAIN.asm
ARRAYEND1:          0431 DEFINED AT LINE 415 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
ARRAYEND2:          0441 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
ARRAYEND3:          0446 DEFINED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 414 IN MAIN.asm
HASH:               0465 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
ARRAYINDEX:         0465 DEFINED AT LINE 454 IN MAIN.asm
ARRAYINDEX0:        046D DEFINED AT LINE 460 IN MAIN.asm
ARRAYINDEX1:        046E DEFINED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
ARRAYINDEX2:        047A DEFINED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
ASSIGN:             047D DEFINED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            047F DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
ASSIGNX:            0480 DEFINED AT LINE 481 IN MAIN.asm
ASSIGN1:            048C DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
COLON:              048E DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            048E DEFINED AT LINE 497 IN MAIN.asm
ARGLIST1:           0498 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
ARGLIST1A:          04A0 DEFINED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
ARGLIST2:           04A8 DEFINED AT LINE 515 IN MAIN.asm
ARGLIST3:           04B0 DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ARGLIST4:           04B3 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST5:           04B9 DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
LBRACE:             04C4 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKSTART:         04C4 DEFINED AT LINE 543 IN MAIN.asm
BLOCKSTART1:        04C8 DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
BLOCKSTART2:        04F4 DEFINED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
BLOCKSTART3:        04F7 DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
BLOCKSTART4:        04FF DEFINED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
BLOCKSTART5:        0502 DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKSTART6:        052A DEFINED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
RBRACE:             052D DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
BLOCKEND:           052D DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
BLOCKEND1:          055F DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
BLOCKEND2:          056B DEFINED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
BLOCKEND3:          057D DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
TICK:               0589 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
CHAR:               0589 DEFINED AT LINE 661 IN MAIN.asm
CHAR1:              058C DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
CHAR2:              0598 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CHAR3:              059B DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
BACKSLASH:          059E DEFINED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
COMMA:              05A0 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05A0 DEFINED AT LINE 685 IN MAIN.asm
DISCARD1:           05AD DEFINED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
SLASH:              05AF DEFINED AT LINE 697 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
COMMAND:            05AF DEFINED AT LINE 698 IN MAIN.asm
DIV:                05E8 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
DOT:                05F9 DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DIVIDE:             060B DEFINED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
DIVIDE1:            0610 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DIVIDE2:            061D DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
DIVIDE3:            061E DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
EQUALS:             0624 DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         062C DEFINED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           0631 DEFINED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0636 DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
TRUE1:              0639 DEFINED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
NULL1:              063F DEFINED AT LINE 812 IN MAIN.asm
FALSE1:             063F DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
CARET:              0645 DEFINED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 0645 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
GO1:                0646 DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
GO2:                064C DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
GOBLOCK:            0657 DEFINED AT LINE 837 IN MAIN.asm
GOBLOCK1:           0657 DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
GOBLOCK2:           067C DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
GOFUNC:             068A DEFINED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
GOFUNC1:            06A3 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
GOFUNC2:            06A9 DEFINED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOFUNC3:            06B4 DEFINED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
GOFUNC4:            06CC DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
GOFUNC5:            06CF DEFINED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
GOFUNC6:            06D2 DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
GOFUNC7:            06D5 DEFINED AT LINE 923 IN MAIN.asm
GOFUNC8:            06D9 DEFINED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
DOLLAR:             06E4 DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
HEXNUM:             06E4 DEFINED AT LINE 938 IN MAIN.asm
HEXNUM1:            06E7 DEFINED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
HEXNUM2:            06EF DEFINED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
UPCASE:             0701 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            0706 DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             070B DEFINED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
QUESTION:           0718 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 0718 DEFINED AT LINE 980 IN MAIN.asm
IFTE:               0724 DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
IFTE1:              0725 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
STAR:               0731 DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                0731 DEFINED AT LINE 1003 IN MAIN.asm
MUL2:               0733 DEFINED AT LINE 1006 IN MAIN.asm
MUL3:               073B DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
NUM:                074D DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               0756 DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
NUM1:               0757 DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
NUM2:               076F DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
NUM3:               077A DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
RPAREN:             077D DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          0785 DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
CREATEFUNC:         0785 DEFINED AT LINE 1070 IN MAIN.asm
CREATEFUNC0:        07A0 DEFINED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 1078 IN MAIN.asm
CREATEFUNC1:        07B8 DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
CREATEFUNC2:        07CB DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
CREATEFUNC2A:       07EA DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
CREATEFUNC3:        07F9 DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
CREATEFUNC4:        0804 DEFINED AT LINE 1163 IN MAIN.asm
CREATEFUNC5:        0805 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1081 IN MAIN.asm
SHIFTLEFT:          0821 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         0829 DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
SHIFTLEFT2:         082A DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
SHIFTRIGHT:         0831 DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        0839 DEFINED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
SHIFTRIGHT2:        083D DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
DQUOTE:             0844 DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             0844 DEFINED AT LINE 1225 IN MAIN.asm
STRING1:            084D DEFINED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
STRING2:            0850 DEFINED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
STRING3:            0859 DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
MINUS:              086C DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                0878 DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
SUB1:               0882 DEFINED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
ERROR1:             088B DEFINED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1352 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
COMMENT:            0892 DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
COMMAND_A:          089B DEFINED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
ABSOLUTE:           08A7 DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
ADDROF:             08B4 DEFINED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
ADDROF1:            08C8 DEFINED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
ADDROF2:            08D3 DEFINED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
COMMAND_B:          08D5 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
BUFFERARRAY:        08E1 DEFINED AT LINE 32
                    > USED AT LINE 751 IN MAIN.asm
BUFFERARRAYM_1859S1354: 08EF DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       092A DEFINED AT LINE 1360 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
BUFFERDEC:          0931 DEFINED AT LINE 1367 IN MAIN.asm
BUFFERDEC0:         094B DEFINED AT LINE 1384 IN MAIN.asm
                    > USED AT LINE 1371 IN MAIN.asm
BUFFERDEC1:         095B DEFINED AT LINE 1398 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
BUFFERDEC2:         097B DEFINED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1405 IN MAIN.asm
                    > USED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1410 IN MAIN.asm
BUFFERDEC3:         097D DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
BUFFERDEC4:         098D DEFINED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 1421 IN MAIN.asm
BUFFERDEC5:         098E DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1425 IN MAIN.asm
BUFFERHEX:          0997 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
BUFFERHEX1:         09B8 DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
BUFFERHEX2:         09C1 DEFINED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
BREAK:              09CF DEFINED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1348 IN MAIN.asm
BREAK1:             09D6 DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
BUFFERSTRING:       09E9 DEFINED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
BUFFERSTRING0:      09F0 DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
BUFFERSTRING1:      09F6 DEFINED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
BUFFERCHAR:         0A03 DEFINED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
BUFFERXCHARS:       0A08 DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
BUFFERXCHARS0:      0A09 DEFINED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
BUFFERXCHARS1:      0A12 DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
BUFFERXCHARS2:      0A1A DEFINED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
COMMAND_I:          0A24 DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
COMMAND_P:          0A30 DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
PRINTBUFFER:        0A3F DEFINED AT LINE 32
                    > USED AT LINE 1556 IN MAIN.asm
PRINTBUFFERM_2060S1568: 0A4B DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0A65 DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1558 IN MAIN.asm
PRINTCHARS1:        0A6C DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1588 IN MAIN.asm
PRINTCHARS2:        0A72 DEFINED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
PRINTSTACK:         0A77 DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
COMMAND_R:          0A79 DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
REMAIN:             0A82 DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
SIZE:               0A88 DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
COMMAND_V:          0A90 DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
CONSTBUFSTART:      0AA5 DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
CONSTHEAPSTART:     0AAA DEFINED AT LINE 1662 IN MAIN.asm
CONSTTIBSTART:      0AAF DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
VARBUFPTR:          0AB4 DEFINED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
VARHEAPPTR:         0ABD DEFINED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
VARTIBPTR:          0AC6 DEFINED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 1650 IN MAIN.asm
VARIABLE:           0ACF DEFINED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
CONSTANT:           0AD2 DEFINED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 1668 IN MAIN.asm
CHARS:              0AD5 DEFINED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
CHARS1:             0AD8 DEFINED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
DECIMAL:            0ADD DEFINED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
DECIMAL1:           0AE0 DEFINED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
HEXADECIMAL:        0AE5 DEFINED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
INPUT:              0AEB DEFINED AT LINE 1709 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
KEY:                0AF6 DEFINED AT LINE 1719 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
OUTPUT:             0AFF DEFINED AT LINE 1728 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
NUMBERS:            0B08 DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
KEYITER:            0B0E DEFINED AT LINE 1743 IN MAIN.asm
FILTER:             0B44 DEFINED AT LINE 1772 IN MAIN.asm
MAP:                0B44 DEFINED AT LINE 1773 IN MAIN.asm
ARGS1A0L:           0B46 DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
ARGS1A2L:           0B49 DEFINED AT LINE 1785 IN MAIN.asm
FLUSHBUFFER:        0B4E DEFINED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
JUMPTABLE:          0B65 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
JUMPTABLE0:         0B67 DEFINED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
JUMPTABLE1:         0B74 DEFINED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
JUMPTABLE2:         0B75 DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
PRTSTR0:            0B7B DEFINED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
PRTSTR:             0B7F DEFINED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
NESTING:            0B84 DEFINED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
NESTING0:           0B8E DEFINED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
NESTING1A:          0B95 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
NESTING1:           0B98 DEFINED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
NESTING2:           0BA7 DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
NESTING3:           0BA9 DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
NESTING4:           0BB4 DEFINED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
PROMPT:             0BB6 DEFINED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
CRLF:               0BBF DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
PRINTSTR:           0BC6 DEFINED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 2117 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 17
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 140
TITLESTR:           0BCD DEFINED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
INIT:               0BE1 DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
INIT1:              0BE9 DEFINED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
WARMINIT:           0BF1 DEFINED AT LINE 1927 IN MAIN.asm
COLDBOOT0:          0C04 DEFINED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
COLDINIT:           0C0E DEFINED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0C1F DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
COLDSTART:          0C2C DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1350 IN MAIN.asm
START:              0C35 DEFINED AT LINE 1962 IN MAIN.asm
START1:             0C3B DEFINED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
INTERPRET:          0C41 DEFINED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
INTERPRET2:         0C50 DEFINED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
INTERPRET3:         0C58 DEFINED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
INTERPRET4:         0C63 DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
INTERPRET5:         0C68 DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
INTERPRET5A:        0C8B DEFINED AT LINE 2039 IN MAIN.asm
INTERPRET6:         0C8D DEFINED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
INTERPRET7:         0C9B DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
INTERPRET8:         0CAE DEFINED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
NEXT:               0CC9 DEFINED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
NEXT1:              0CDA DEFINED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
EXIT:               0CE1 DEFINED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
RUN:                0CE5 DEFINED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0CE9 DEFINED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
BACKSPACE_:         0CFC DEFINED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
EDIT_:              0D0C DEFINED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
REEDIT_:            0D24 DEFINED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
PRINTSTACK_:        0D27 DEFINED AT LINE 2130 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
TESTSSTART:         0E00 DEFINED AT LINE 13
                    > USED AT LINE 8
EXPECTM_2698S15:    0E9A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2699S16:    0F35 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2704S23:    0FB6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2705S24:    102D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2706S25:    10A2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2707S26:    1117 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2708S27:    118C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2709S28:    1201 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2710S29:    1278 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2711S30:    12F1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2712S31:    1368 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2713S32:    13DF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2714S33:    1458 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2715S34:    14D3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2716S35:    154C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2717S36:    15C5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2718S37:    1644 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2719S38:    16C3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2720S39:    1740 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2721S40:    17C1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2722S41:    1846 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2723S42:    18C9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2724S43:    1946 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2725S44:    19CB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2726S45:    1A4C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2727S46:    1AC9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2728S47:    1B46 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2729S48:    1BCB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2730S49:    1C48 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2731S50:    1CC5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2732S51:    1D44 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2733S52:    1DD3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2734S53:    1E50 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2735S54:    1ED5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2736S55:    1F52 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2737S56:    1FD7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2738S57:    2054 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2739S58:    20D3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2740S59:    2152 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2741S60:    21CF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2742S61:    224C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2743S62:    22C9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2744S63:    2346 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2745S64:    23C3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2746S65:    2440 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2747S66:    24BD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2748S67:    253A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2749S68:    25B9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2750S69:    2638 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2751S70:    26B7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2752S71:    2738 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2753S72:    27B9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2754S73:    2834 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2755S74:    28AF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2756S75:    2930 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2757S76:    29B7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2758S77:    2A3E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2759S78:    2AC9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2760S79:    2B5E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2761S80:    2BF3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2762S81:    2C6E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2763S82:    2CEB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2764S83:    2D6A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2765S84:    2DEB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2766S85:    2E6A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2767S86:    2EE9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2768S87:    2F6A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2769S88:    2FF1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2770S89:    307C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2771S90:    3103 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2772S91:    3194 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2773S92:    3227 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2774S93:    32C0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2775S94:    335D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2776S95:    33EC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2777S96:    3481 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2778S97:    3518 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2779S98:    35B1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2780S99:    3648 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2781S100:   36ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2782S101:   3780 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2783S102:   3821 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2784S103:   38C4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2785S104:   3969 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2786S105:   3A18 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2787S106:   3AC7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2788S107:   3B54 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2789S108:   3BE7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2790S109:   3C74 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2791S110:   3D0D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2792S111:   3DA6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2793S112:   3E51 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2794S113:   3F04 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2795S114:   3FB7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2796S115:   4058 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2797S116:   40FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2798S117:   41BC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2799S118:   4287 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2800S119:   4310 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2801S120:   4399 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2802S121:   4422 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2803S122:   44AB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2804S123:   452C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2805S124:   45AD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2806S125:   462E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2807S126:   46AF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2808S127:   473A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2809S128:   47C9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2810S129:   4856 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2811S130:   48E3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2812S131:   4980 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2813S132:   4A23 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2814S133:   4ADE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2815S134:   4B99 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2816S135:   4C6E DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            4C79 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4E00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4E00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
BUF:                4F00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
VARS:               5000 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           50D0 DEFINED AT LINE 18 IN ram.asm
RST08:              50D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              50D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              50D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              50D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              50D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              50DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               50DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             50DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             50E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            50E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            50E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            50E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1942 IN MAIN.asm
VDATAWIDTH:         50E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
VNUMBASE:           50E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
VTIBPTR:            50EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
VBUFPTR:            50EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
VNEXT:              50EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1954 IN MAIN.asm
VHEAPPTR:           50F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
VPOINTER:           50F2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
VREMAIN:            50F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
VSAVEDIP:           50F6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
VSAVEDSP:           50F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
VSAVEDNEXT:         50FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
VSAVEDBP:           50FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
VCHECKSUM:          50FE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             5100 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
VTEMP2:             5102 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
VLASTDEF:           5104 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           5106 DEFINED AT LINE 59 IN ram.asm
TBPTR:              5108 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           510A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
HEAP:               511E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
