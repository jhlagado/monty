0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 34               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 34               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 34               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 34               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 34               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 34               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 34               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 34               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 34               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 34               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 33               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 34               LD   (RST08),HL   
0094   22 D2 34               LD   (RST10),HL   
0097   22 D4 34               LD   (RST18),HL   
009A   22 D6 34               LD   (RST20),HL   
009D   22 D8 34               LD   (RST28),HL   
00A0   22 DA 34               LD   (RST30),HL   
00A3   22 DE 34               LD   (INTVEC),HL   
00A6   22 E0 34               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 34               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 34               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 33               LD   SP,STACK   
00C6   CD EF 08               CALL   init   
00C9   C3 00 0A               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   7A 09                  DW   next   ; g nNext
0186   00 37                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   A5                     DB   lsb(nop_)   ; SP
0221   42                     DB   lsb(not_)   ; !
0222   53                     DB   lsb(string_)   ; "
0223   4A                     DB   lsb(hexnum_)   ; #
0224   0C                     DB   lsb(arg_)   ; $
0225   18                     DB   lsb(arrIndex_)   ; %
0226   09                     DB   lsb(and_)   ; &
0227   21                     DB   lsb(char_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   A5                     DB   lsb(nop_)   ; )
022A   3F                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   A5                     DB   lsb(nop_)   ; ,
022D   56                     DB   lsb(sub_)   ; -
022E   27                     DB   lsb(dot_)   ; .
022F   96                     DB   lsb(div_)   ; /	
0230   47                     DB   lsb(num_)   ; 0
0231   47                     DB   lsb(num_)   ; 1
0232   47                     DB   lsb(num_)   ; 2
0233   47                     DB   lsb(num_)   ; 3
0234   47                     DB   lsb(num_)   ; 4
0235   47                     DB   lsb(num_)   ; 5
0236   47                     DB   lsb(num_)   ; 6
0237   47                     DB   lsb(num_)   ; 7
0238   47                     DB   lsb(num_)   ; 8
0239   47                     DB   lsb(num_)   ; 9
023A   2D                     DB   lsb(go_)   ; :
023B   A5                     DB   lsb(nop_)   ; ;
023C   84                     DB   lsb(lt_)   ; <
023D   6A                     DB   lsb(eq_)   ; =
023E   79                     DB   lsb(gt_)   ; >
023F   36                     DB   lsb(if_)   ; ?
0240   06                     DB   lsb(addr_)   ; @
0241   30                     DB   lsb(identU_)   ; A
0242   30                     DB   lsb(identU_)   ; B
0243   30                     DB   lsb(identU_)   ; C
0244   30                     DB   lsb(identU_)   ; D
0245   30                     DB   lsb(identU_)   ; E
0246   30                     DB   lsb(identU_)   ; F
0247   30                     DB   lsb(identU_)   ; G
0248   30                     DB   lsb(identU_)   ; h
0249   30                     DB   lsb(identU_)   ; I
024A   30                     DB   lsb(identU_)   ; J
024B   30                     DB   lsb(identU_)   ; K
024C   30                     DB   lsb(identU_)   ; L
024D   30                     DB   lsb(identU_)   ; M
024E   30                     DB   lsb(identU_)   ; N
024F   30                     DB   lsb(identU_)   ; O
0250   30                     DB   lsb(identU_)   ; p
0251   30                     DB   lsb(identU_)   ; Q
0252   30                     DB   lsb(identU_)   ; R
0253   30                     DB   lsb(identU_)   ; S
0254   30                     DB   lsb(identU_)   ; T
0255   30                     DB   lsb(identU_)   ; U
0256   30                     DB   lsb(identU_)   ; V
0257   30                     DB   lsb(identU_)   ; W
0258   30                     DB   lsb(identU_)   ; X
0259   30                     DB   lsb(identU_)   ; Y
025A   30                     DB   lsb(identU_)   ; Z
025B   12                     DB   lsb(arrBegin_)   ; [
025C   24                     DB   lsb(command_)   ; \
025D   15                     DB   lsb(arrEnd_)   ; ]
025E   50                     DB   lsb(xor_)   ; ^
025F   2A                     DB   lsb(remain_)   ; _
0260   53                     DB   lsb(string_)   ; `     used for testing string   	
0261   33                     DB   lsb(identL_)   ; a
0262   33                     DB   lsb(identL_)   ; b
0263   33                     DB   lsb(identL_)   ; c
0264   33                     DB   lsb(identL_)   ; d
0265   33                     DB   lsb(identL_)   ; e
0266   33                     DB   lsb(identL_)   ; f
0267   33                     DB   lsb(identL_)   ; g
0268   33                     DB   lsb(identL_)   ; h
0269   33                     DB   lsb(identL_)   ; i
026A   33                     DB   lsb(identL_)   ; j
026B   33                     DB   lsb(identL_)   ; k
026C   33                     DB   lsb(identL_)   ; l
026D   33                     DB   lsb(identL_)   ; m
026E   33                     DB   lsb(identL_)   ; n
026F   33                     DB   lsb(identL_)   ; o
0270   33                     DB   lsb(identL_)   ; p
0271   33                     DB   lsb(identL_)   ; q
0272   33                     DB   lsb(identL_)   ; r
0273   33                     DB   lsb(identL_)   ; s
0274   33                     DB   lsb(identL_)   ; t
0275   33                     DB   lsb(identL_)   ; u
0276   33                     DB   lsb(identL_)   ; v
0277   33                     DB   lsb(identL_)   ; w
0278   33                     DB   lsb(identL_)   ; x
0279   33                     DB   lsb(identL_)   ; y
027A   33                     DB   lsb(identL_)   ; z
027B   1B                     DB   lsb(block_)   ; {
027C   4D                     DB   lsb(or_)   ; |
027D   1E                     DB   lsb(blockEnd_)   ; }
027E   39                     DB   lsb(inv_)   ; ~
027F   A5                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   D1                     POP   de   
0301   E1                     POP   hl   
0302   19                     ADD   hl,de   
0303   E5                     PUSH   hl   
0304   DD E9                  JP   (ix)   
0306                ADDR_:       
0306   C3 A7 03               JP   addr   
0309                AND_:        
0309   C3 B3 03               JP   and   
030C                ARG_:        
030C   C3 D0 03               JP   arg   
030F                ARG_LIST_:      
030F   C3 07 04               JP   arg_list   
0312                ARRBEGIN_:      
0312   C3 39 04               JP   arrBegin   
0315                ARREND_:      
0315   C3 55 04               JP   arrEnd   
0318                ARRINDEX_:      
0318   C3 A3 04               JP   arrIndex   
031B                BLOCK_:      
031B   C3 CB 04               JP   block   
031E                BLOCKEND_:      
031E   C3 34 05               JP   blockend   
0321                CHAR_:       
0321   C3 89 05               JP   char   
0324                COMMAND_:      
0324   C3 59 07               JP   command   
0327                DOT_:        
0327   C3 9E 05               JP   dot   
032A                REMAIN_:      
032A   C3 08 07               JP   remain   
032D                GO_:         
032D   C3 02 06               JP   go   
0330                IDENTU_:      
0330   C3 8C 06               JP   identU   
0333                IDENTL_:      
0333   C3 91 06               JP   identL   
0336                IF_:         
0336   C3 A3 06               JP   if   
0339                INV_:        ; Bitwise INVert the top member of the stack
0339   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
033C   C3 C8 03               JP   xor1   
033F                MUL_:        
033F   C3 BC 06               JP   mul   
0342                NOT_:        ; logical invert, any non zero value
0342   21 00 00               LD   hl,0   ; is considered true
0345   18 2E                  JR   eq1   
0347                NUM_:        
0347   C3 D8 06               JP   num   
034A                HEXNUM_:      
034A   C3 6F 06               JP   hexnum   
034D                OR_:         
034D   C3 BE 03               JP   or   
0350                XOR_:        
0350   C3 C7 03               JP   xor   
0353                STRING_:      
0353   C3 31 07               JP   string   
0356                SUB_:        ; negative sign or subtract
0356   03                     INC   bc   ; check if sign of a number
0357   0A                     LD   a,(bc)   
0358   0B                     DEC   bc   
0359   FE 30                  CP   "0"   
035B   38 05                  JR   c,sub1   
035D   FE 3A                  CP   "9"+1   
035F   DA 47 03               JP   c,num_   
0362                SUB1:        ; Subtract the value 2nd on stack from top of stack
0362   D1                     POP   de   
0363   E1                     POP   hl   ; Entry point for INVert
0364                SUB2:        
0364   B7                     OR   a   ; Entry point for NEGate
0365   ED 52                  SBC   hl,de   
0367   E5                     PUSH   hl   
0368   DD E9                  JP   (ix)   
036A                EQ_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   ; is it == ?
036C   FE 3D                  CP   "="   
036E   28 04                  JR   z,eq0   ; no its equality
0370   0B                     DEC   bc   
0371   C3 BB 04               JP   assign   ; no its assignment
0374                EQ0:         
0374   E1                     POP   hl   
0375                EQ1:         
0375   D1                     POP   de   
0376   C3 E1 05               JP   equals   
0379                GT_:         
0379   03                     INC   bc   
037A   0A                     LD   a,(bc)   
037B   FE 3E                  CP   ">"   
037D   CA 1E 07               JP   z,shiftRight   
0380   D1                     POP   de   
0381   E1                     POP   hl   
0382   18 09                  JR   lt1   
0384                LT_:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 3C                  CP   "<"   
0388   CA 0E 07               JP   z,shiftLeft   
038B   E1                     POP   hl   
038C   D1                     POP   de   
038D                LT1:         
038D   FE 3D                  CP   "="   
038F   CA E9 05               JP   z,lessthaneq   
0392   0B                     DEC   bc   
0393   C3 EE 05               JP   lessthan   
0396                DIV_:        
0396   D1                     POP   de   ; get first value
0397   E1                     POP   hl   ; get 2nd value
0398   C5                     PUSH   bc   ; preserve the IP
0399   44 4D                  LD   bc,hl   
039B   CD C8 05               CALL   divide   
039E   22 F6 34               LD   (vRemain),hl   
03A1   C1                     POP   bc   
03A2   D5                     PUSH   de   ; push result
03A3   DD E9                  JP   (ix)   
03A5                NOP_:        
03A5   DD E9                  JP   (ix)   
03A7                             ;*******************************************************************
03A7                             ; word operators
03A7                             ;*******************************************************************
03A7                             ; -- ptr
03A7                ADDR:        
03A7   2A F0 34               LD   hl,(vPointer)   
03AA   E5                     PUSH   hl   
03AB   21 F0 34               LD   hl,vPointer   
03AE   22 F0 34               LD   (vPointer),hl   
03B1   DD E9                  JP   (ix)   
03B3                AND:         
03B3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B4   E1                     POP   hl   
03B5   7B                     LD   a,e   
03B6   A5                     AND   l   
03B7   6F                     LD   l,a   
03B8   7A                     LD   a,d   
03B9   A4                     AND   h   
03BA                AND1:        
03BA   67                     LD   h,a   
03BB   E5                     PUSH   hl   
03BC   DD E9                  JP   (ix)   
03BE                OR:          
03BE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BF   E1                     POP   hl   
03C0   7B                     LD   a,e   
03C1   B5                     OR   l   
03C2   6F                     LD   l,a   
03C3   7A                     LD   a,d   
03C4   B4                     OR   h   
03C5   18 F3                  JR   and1   
03C7                XOR:         
03C7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C8                XOR1:        
03C8   E1                     POP   hl   
03C9   7B                     LD   a,e   
03CA   AD                     XOR   l   
03CB   6F                     LD   l,a   
03CC   7A                     LD   a,d   
03CD   AC                     XOR   h   
03CE   18 EA                  JR   and1   
03D0                             ; $a .. $z
03D0                             ; -- value
03D0                             ; returns value of arg
03D0                ARG:         
03D0   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D3   FD 56 05               LD   d,(iy+5)   
03D6   EB                     EX   de,hl   
03D7   7D                     LD   a,l   ; arg_list* == null, skip
03D8   B4                     OR   h   
03D9   28 1C                  JR   z,arg0a   
03DB   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03DC   2B                     DEC   hl   
03DD   7E                     LD   a,(hl)   
03DE   23                     INC   hl   
03DF   23                     INC   hl   
03E0   B7                     OR   a   
03E1   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E3   5F                     LD   e,a   ; e = a = num_args
03E4   03                     INC   bc   ; a = next char = arg_name
03E5   0A                     LD   a,(bc)   
03E6   C5                     PUSH   bc   ; save IP
03E7   43                     LD   b,e   ; b = e = num_args
03E8   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EB   FD 56 03               LD   d,(iy+3)   
03EE                ARG0:        
03EE   1B                     DEC   de   ; a = arg_name, de = next arg*
03EF   1B                     DEC   de   
03F0   BE                     CP   (hl)   
03F1   28 09                  JR   z,arg1   
03F3   23                     INC   hl   ; hl = next arg_list*
03F4   10 F8                  DJNZ   arg0   
03F6   C1                     POP   bc   ; no match, restore IP
03F7                ARG0A:       
03F7   11 00 00               LD   de,0   ; return 0
03FA   18 08                  JR   arg1a   
03FC                ARG1:        
03FC   C1                     POP   bc   ; restore IP
03FD   EB                     EX   de,hl   ; hl = arg*
03FE   22 F0 34               LD   (vPointer),hl   ; store arg* in setter
0401   5E                     LD   e,(hl)   
0402   23                     INC   hl   
0403   56                     LD   d,(hl)   ; de = arg
0404                ARG1A:       
0404   D5                     PUSH   de   ; push arg
0405   DD E9                  JP   (ix)   
0407                             ; arg_list - parses input (ab:c)
0407                             ; names after the : represent uninitialised locals
0407                             ; return values are the state of the stack after the block ends
0407                ARG_LIST:      
0407   11 00 00               LD   de,0   ; d = count locals, e = count args ()
040A   2A EC 34               LD   hl,(vHeapPtr)   ; hl = heap*
040D   23                     INC   hl   ; skip length field to start
040E   23                     INC   hl   
040F   E5                     PUSH   hl   ; save start of arg_list
0410   03                     INC   bc   ; point to next char
0411                ARG_LIST1:      
0411   0A                     LD   a,(bc)   
0412   FE 29                  CP   ")"   ; ) is the arg_list terminator
0414   28 12                  JR   z,arg_list4   
0416   FE 3A                  CP   ":"   
0418   20 03                  JR   nz,arg_list2   
041A   14                     INC   d   ; non zero value local count acts as flag
041B   20 08                  JR   nz,arg_list3   
041D                ARG_LIST2:      
041D   77                     LD   (hl),a   
041E   23                     INC   hl   
041F   1C                     INC   e   ; increase arg count
0420   AF                     XOR   a   
0421   B2                     OR   d   
0422   28 01                  JR   z,arg_list3   
0424   14                     INC   d   ; if d > 0 increase local count
0425                ARG_LIST3:      
0425   03                     INC   bc   ; point to next char
0426   18 E9                  JR   arg_list1   
0428                ARG_LIST4:      
0428   AF                     XOR   a   
0429   B2                     OR   d   
042A   28 01                  JR   z,arg_list5   
042C   15                     DEC   d   ; remove initial inc
042D                ARG_LIST5:      
042D   23                     INC   hl   
042E   22 EC 34               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0431   E1                     POP   hl   ; hl = start of arg_list
0432   E5                     PUSH   hl   ; return start of string
0433   2B                     DEC   hl   ; write length bytes to length field at start - 2
0434   72                     LD   (hl),d   
0435   2B                     DEC   hl   
0436   73                     LD   (hl),e   
0437   DD E9                  JP   (ix)   
0439                ARRBEGIN:      
0439   11 00 00               LD   de,0   ; create stack frame
043C   D5                     PUSH   de   ; push null for IP
043D   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0440   FD 56 05               LD   d,(iy+5)   ; 
0443   D5                     PUSH   de   ; 
0444   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0447   FD 56 03               LD   d,(iy+3)   ; 
044A   D5                     PUSH   de   ; 
044B   FD E5                  PUSH   iy   ; push BP
044D   FD 21 00 00            LD   iy,0   ; BP = SP
0451   FD 39                  ADD   iy,sp   
0453   DD E9                  JP   (ix)   
0455                ARREND:      
0455   FD 54                  LD   d,iyh   ; de = BP
0457   FD 5D                  LD   e,iyl   
0459   ED 43 F8 34            LD   (vTemp1),bc   ; save IP
045D   62 6B                  LD   hl,de   ; hl = de = BP
045F   B7                     OR   a   
0460   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0462   CB 3C                  SRL   h   ; 
0464   CB 1D                  RR   l   
0466   44 4D                  LD   bc,hl   ; bc = count
0468   2A EC 34               LD   hl,(vHeapPtr)   ; hl = array[-2]
046B   71                     LD   (hl),c   ; write num items in length word
046C   23                     INC   hl   
046D   70                     LD   (hl),b   
046E   23                     INC   hl   ; hl = array[0], bc = count
046F                             ; de = BP, hl = array[0], bc = count
046F                ARREND1:      
046F   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0472   77                     LD   (hl),a   ; write lsb of array item
0473   23                     INC   hl   ; move to msb of array item
0474   3A E6 34               LD   a,(vDataWidth)   ; vDataWidth=1?
0477   3D                     DEC   a   
0478   28 05                  JR   z,arrEnd2   
047A   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
047D   77                     LD   (hl),a   ; write msb of array item
047E   23                     INC   hl   ; move to next word in array
047F                ARREND2:      
047F   FD 2B                  DEC   iy   ; move to next word on stack
0481   FD 2B                  DEC   iy   
0483   0B                     DEC   bc   ; dec items count
0484   79                     LD   a,c   ; if not zero loop
0485   B0                     OR   b   
0486   20 E7                  JR   nz,arrEnd1   
0488   EB                     EX   de,hl   ; de = end of array, hl = BP
0489   F9                     LD   sp,hl   ; sp = BP
048A   E1                     POP   hl   ; de = end of array, hl = old BP
048B   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
048C   FD 62                  LD   iyh,d   
048E   FD 6B                  LD   iyl,e   
0490   D1                     POP   de   ; pop arg_list (discard)
0491   D1                     POP   de   ; pop first_arg* (discard)
0492   D1                     POP   de   ; pop IP (discard)
0493   ED 5B EC 34            LD   de,(vHeapPtr)   ; de = array[-2]
0497   22 EC 34               LD   (vHeapPtr),hl   ; move heap* to end of array
049A   ED 4B F8 34            LD   bc,(vTemp1)   ; restore IP
049E   13                     INC   de   ; de = array[0]
049F   13                     INC   de   
04A0   D5                     PUSH   de   ; return array[0]
04A1   DD E9                  JP   (ix)   
04A3                             ; index of an array, based on vDataWidth
04A3                             ; array num -- value    ; also sets vPointer to address
04A3                ARRINDEX:      
04A3   E1                     POP   hl   ; hl = index
04A4   D1                     POP   de   ; de = array
04A5   3A E6 34               LD   a,(vDataWidth)   ; a = data width
04A8   3D                     DEC   a   
04A9   28 01                  JR   z,arrIndex1   
04AB                ARRINDEX0:      
04AB   29                     ADD   hl,hl   ; if data width = 2 then double
04AC                ARRINDEX1:      
04AC   19                     ADD   hl,de   ; add addr
04AD   22 F0 34               LD   (vPointer),hl   ; store address in setter
04B0   16 00                  LD   d,0   
04B2   5E                     LD   e,(hl)   
04B3   B7                     OR   a   ; check data width again
04B4   28 02                  JR   z,arrIndex2   
04B6   23                     INC   hl   
04B7   56                     LD   d,(hl)   
04B8                ARRINDEX2:      
04B8   D5                     PUSH   de   
04B9   DD E9                  JP   (ix)   
04BB                             ; value _oldValue --            ; uses address in vPointer
04BB                ASSIGN:      
04BB   E1                     POP   hl   ; discard last accessed value
04BC   D1                     POP   de   ; new value
04BD   2A F0 34               LD   hl,(vPointer)   
04C0   73                     LD   (hl),e   
04C1   3A E6 34               LD   a,(vDataWidth)   
04C4   3D                     DEC   a   ; is it byte?
04C5   28 02                  JR   z,assign1   
04C7   23                     INC   hl   
04C8   72                     LD   (hl),d   
04C9                ASSIGN1:      
04C9   DD E9                  JP   (ix)   
04CB                BLOCK:       
04CB   C5                     PUSH   bc   ; return pointer to first { of block
04CC   03                     INC   bc   
04CD   16 01                  LD   d,1   ; nesting: count first parenthesis
04CF                BLOCK1:      ; Skip to end of definition
04CF   0A                     LD   a,(bc)   ; Get the next character
04D0   03                     INC   bc   ; Point to next character
04D1   FE 21                  CP   " " + 1   ; ignore whitespace
04D3   38 FA                  JR   c,block1   
04D5   FE 29                  CP   ")"   
04D7   28 2D                  JR   z,block4   
04D9   FE 7D                  CP   "}"   
04DB   28 29                  JR   z,block4   
04DD   FE 5D                  CP   "]"   
04DF   28 25                  JR   z,block4   
04E1   FE 28                  CP   "("   
04E3   28 16                  JR   z,block2   
04E5   FE 7B                  CP   "{"   
04E7   28 12                  JR   z,block2   
04E9   FE 5B                  CP   "["   
04EB   28 0E                  JR   z,block2   
04ED   FE 27                  CP   "'"   
04EF   28 0D                  JR   z,block3   
04F1   FE 60                  CP   "`"   
04F3   28 09                  JR   z,block3   
04F5   FE 22                  CP   $22   
04F7   28 05                  JR   z,block3   
04F9   18 D4                  JR   block1   
04FB                BLOCK2:      
04FB   14                     INC   d   
04FC   18 D1                  JR   block1   
04FE                BLOCK3:      
04FE   3E 80                  LD   a,$80   
0500   AA                     XOR   d   
0501   47                     LD   b,a   
0502   20 CB                  JR   nz,block1   
0504   18 03                  JR   block5   
0506                BLOCK4:      
0506   15                     DEC   d   
0507   20 C6                  JR   nz,block1   ; get the next element
0509                BLOCK5:      
0509   60 69                  LD   hl,bc   ; hl = IP
050B   11 00 37               LD   de,HEAP   ; is IP pointing to object in heap
050E   B7                     OR   a   ; IP - HEAP
050F   ED 52                  SBC   hl,de   
0511   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0513   28 1C                  JR   z,block6   
0515   60 69                  LD   hl,bc   ; hl = IP
0517   D1                     POP   de   ; de = block*
0518   ED 43 F8 34            LD   (vTemp1),bc   ; save IP
051C   B7                     OR   a   ; bc = size
051D   ED 52                  SBC   hl,de   
051F   44 4D                  LD   bc,hl   
0521   EB                     EX   de,hl   ; hl = block* de = heap*
0522   ED 5B EC 34            LD   de,(vHeapPtr)   
0526   D5                     PUSH   de   ; return hblock*
0527   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0529   ED 53 EC 34            LD   (vHeapPtr),de   ; heap* += size
052D   ED 4B F8 34            LD   bc,(vTemp1)   ; restore IP
0531                BLOCK6:      
0531   0B                     DEC   bc   ; balanced, exit
0532   DD E9                  JP   (ix)   
0534                BLOCKEND:      
0534   D9                     EXX      ; de" = oldBP bc" = oldIP
0535   FD 5E 00               LD   e,(iy+0)   
0538   FD 56 01               LD   d,(iy+1)   
053B   FD 4E 06               LD   c,(iy+6)   
053E   FD 46 07               LD   b,(iy+7)   
0541   D9                     EXX      
0542   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0545   FD 56 03               LD   d,(iy+3)   
0548   EB                     EX   de,hl   
0549   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054C   FD 56 01               LD   d,(iy+1)   
054F   13                     INC   de   ; for carry flag <=
0550   B7                     OR   a   
0551   ED 52                  SBC   hl,de   
0553   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0555   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0557   FD 5D                  LD   e,iyl   
0559   21 08 00               LD   hl,8   
055C   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055D   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055E   18 0C                  JR   blockend2   
0560                BLOCKEND1:      ; same scope
0560   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0563   FD 56 03               LD   d,(iy+3)   
0566   EB                     EX   de,hl   
0567   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0569   FD 5D                  LD   e,iyl   
056B   EB                     EX   de,hl   
056C                BLOCKEND2:      
056C   44 4D                  LD   bc,hl   ; bc = hl = BP
056E   B7                     OR   a   ; hl = BP - SP = count
056F   ED 72                  SBC   hl,sp   
0571   7D                     LD   a,l   
0572   B4                     OR   h   
0573   28 09                  JR   z,blockend3   
0575   C5                     PUSH   bc   ; bc = count, hl = BP
0576   44 4D                  LD   bc,hl   
0578   E1                     POP   hl   
0579   2B                     DEC   hl   ; hl = BP-1
057A   1B                     DEC   de   ; de = args*-1
057B   ED B8                  LDDR      
057D   13                     INC   de   
057E                BLOCKEND3:      
057E   EB                     EX   de,hl   ; hl = new tos
057F   F9                     LD   sp,hl   ; sp = new tos
0580   D9                     EXX      ; bc = IP, iy = oldBP
0581   D5                     PUSH   de   
0582   C5                     PUSH   bc   
0583   D9                     EXX      
0584   C1                     POP   bc   
0585   FD E1                  POP   iy   
0587   DD E9                  JP   (ix)   
0589                CHAR:        
0589   21 00 00               LD   hl,0   ; if "" is empty or null
058C                CHAR1:       
058C   03                     INC   bc   ; point to next char
058D   0A                     LD   a,(bc)   
058E   FE 27                  CP   "'"   ; ' is the terminator
0590   28 09                  JR   z,char3   
0592   FE 5C                  CP   $5c   ; \ is the escape
0594   20 02                  JR   nz,char2   
0596   03                     INC   bc   
0597   0A                     LD   a,(bc)   
0598                CHAR2:       
0598   6F                     LD   l,a   
0599   18 F1                  JR   char1   
059B                CHAR3:       
059B   E5                     PUSH   hl   
059C   DD E9                  JP   (ix)   
059E                             ; ; ;
059E                             ; ; block* -- hblock*
059E                             ; ; copies bytes from TOS to IP to the heap
059E                             ; compile:
059E                             ;   ld (vTemp1),bc              ; save IP
059E                             ; pop de                      ; de = block*
059E                             ; ld hl,bc                    ; hl = IP
059E                             ; or a                        ; bc = size
059E                             ; sbc hl,de
059E                             ; ld bc,hl
059E                             ; ex de,hl                    ; hl = block*
059E                             ; ld de,(vHeapPtr)            ; de = heap*
059E                             ; push de                     ; return hblock*
059E                             ; ldir                        ; copy size bytes from block* to hblock*
059E                             ; ld (vHeapPtr),de
059E                             ; ld bc,(vTemp1)              ; restore IP
059E                             ; jp (ix)
059E                DOT:         
059E   E1                     POP   hl   
059F   03                     INC   bc   
05A0   0A                     LD   a,(bc)   
05A1   FE 68                  CP   "h"   
05A3   20 05                  JR   nz,dot1   
05A5   CD 7E 08               CALL   prthex   
05A8   18 17                  JR   dot4   
05AA                DOT1:        
05AA   FE 73                  CP   "s"   
05AC   20 05                  JR   nz,dot2   
05AE   CD A1 08               CALL   prtstr   
05B1   18 0E                  JR   dot4   
05B3                DOT2:        
05B3   FE 63                  CP   "c"   
05B5   20 06                  JR   nz,dot3   
05B7   7D                     LD   a,l   
05B8   CD 85 00               CALL   putchar   
05BB   18 04                  JR   dot4   
05BD                DOT3:        
05BD   0B                     DEC   bc   
05BE   CD 36 08               CALL   prtdec   
05C1                DOT4:        
05C1   3E 20                  LD   a," "   
05C3   CD 85 00               CALL   putchar   
05C6   DD E9                  JP   (ix)   
05C8                             ; division subroutine.
05C8                             ; bc: divisor, de: dividend, hl: remainder
05C8                DIVIDE:      
05C8   21 00 00               LD   hl,0   ; zero the remainder
05CB   3E 10                  LD   a,16   ; loop counter
05CD                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05CD   CB 21                  SLA   c   
05CF   CB 10                  RL   b   
05D1   ED 6A                  ADC   hl,hl   
05D3   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05D5   38 03                  JR   c,divide2   
05D7   0C                     INC   c   
05D8   18 01                  JR   divide3   
05DA                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05DA   19                     ADD   hl,de   
05DB                DIVIDE3:      
05DB   3D                     DEC   a   
05DC   20 EF                  JR   nz,divide1   
05DE   50 59                  LD   de,bc   ; result from bc to de
05E0   C9                     RET      
05E1                             ; hl = value1, de = value2
05E1                             ; hl = result
05E1                EQUALS:      
05E1   B7                     OR   a   ; reset the carry flag
05E2   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05E4   28 10                  JR   z,true1   
05E6   C3 FC 05               JP   false1   
05E9                             ; hl = value1 de = value2
05E9                             ; hl = result
05E9                LESSTHANEQ:      
05E9   B7                     OR   a   
05EA   ED 52                  SBC   hl,de   
05EC   18 05                  JR   lessthan1   
05EE                             ; hl = value1 de = value2
05EE                             ; hl = result
05EE                LESSTHAN:      
05EE   B7                     OR   a   
05EF   ED 52                  SBC   hl,de   
05F1   28 09                  JR   z,false1   
05F3                LESSTHAN1:      
05F3   FA FC 05               JP   m,false1   
05F6                TRUE1:       
05F6   21 FF FF               LD   hl,TRUE   
05F9   E5                     PUSH   hl   
05FA   DD E9                  JP   (ix)   
05FC                NULL1:       
05FC                FALSE1:      
05FC   21 00 00               LD   hl,FALSE   
05FF   E5                     PUSH   hl   
0600   DD E9                  JP   (ix)   
0602                             ; execute a block of code which ends with }
0602                             ; creates a root scope if BP == stack
0602                             ; else uses outer scope
0602                GO:          
0602   D1                     POP   de   ; de = block*
0603                GO1:         
0603   7B                     LD   a,e   ; if block* == null, exit
0604   B2                     OR   d   
0605   20 02                  JR   nz,go2   
0607   DD E9                  JP   (ix)   
0609                GO2:         
0609   1A                     LD   a,(de)   
060A   FE 7B                  CP   "{"   
060C   CA 3B 06               JP   z,goBlock   
060F                GOFUNC:      ; execute code at pointer
060F   EB                     EX   de,hl   ; hl = func*
0610   5E                     LD   e,(hl)   ; de = hblock*
0611   23                     INC   hl   
0612   56                     LD   d,(hl)   
0613   23                     INC   hl   
0614   D5                     PUSH   de   ; save hblock*
0615   5E                     LD   e,(hl)   ; de = arg_list*
0616   23                     INC   hl   
0617   56                     LD   d,(hl)   
0618   23                     INC   hl   
0619   EB                     EX   de,hl   ; hl = arg_list*
061A   D1                     POP   de   ; restore hblock*
061B   7D                     LD   a,l   ; if arg_list* != null skip
061C   B4                     OR   h   
061D   20 03                  JR   nz,goFunc1   
061F   C5                     PUSH   bc   ; push IP
0620   18 3A                  JR   goBlock2   
0622                GOFUNC1:      
0622   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0623   7E                     LD   a,(hl)   
0624   23                     INC   hl   
0625   B7                     OR   a   
0626   28 05                  JR   z,goFunc3   
0628                GOFUNC2:      
0628   3B                     DEC   sp   
0629   3B                     DEC   sp   
062A   3D                     DEC   a   
062B   20 FB                  JR   nz,goFunc2   
062D                GOFUNC3:      
062D   C5                     PUSH   bc   ; push IP
062E   E5                     PUSH   hl   ; push arg_list*
062F   2B                     DEC   hl   ; hl = num_args*
0630   2B                     DEC   hl   
0631   7E                     LD   a,(hl)   ; hl = num_args * 2
0632   87                     ADD   a,a   
0633   C6 04                  ADD   a,4   ; offset for IP and arg_list
0635   6F                     LD   l,a   
0636   26 00                  LD   h,$0   
0638   39                     ADD   hl,sp   ; hl = first_arg*
0639   18 27                  JR   goBlock4   
063B                GOBLOCK:      
063B   13                     INC   de   
063C   C5                     PUSH   bc   ; push IP
063D   21 80 33               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0640   FD 44                  LD   b,iyh   
0642   FD 4D                  LD   c,iyl   
0644   B7                     OR   a   ; hl = stack - BP = root_scope
0645   ED 42                  SBC   hl,bc   
0647   7D                     LD   a,l   ; if root_scope, skip
0648   B4                     OR   h   
0649   28 11                  JR   z,goBlock2   
064B   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
064E   FD 46 05               LD   b,(iy+5)   
0651   C5                     PUSH   bc   
0652   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0655   FD 46 03               LD   b,(iy+3)   
0658   60 69                  LD   hl,bc   
065A   18 05                  JR   goBlock3   
065C                GOBLOCK2:      
065C   E5                     PUSH   hl   ; push arg_list (null)
065D   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0660   39                     ADD   hl,sp   
0661                GOBLOCK3:      
0661   1B                     DEC   de   
0662                GOBLOCK4:      
0662   E5                     PUSH   hl   ; push first_arg
0663   FD E5                  PUSH   iy   ; push BP
0665   FD 21 00 00            LD   iy,0   ; BP = SP
0669   FD 39                  ADD   iy,sp   
066B   42 4B                  LD   bc,de   ; bc = de = block*-1
066D   DD E9                  JP   (ix)   
066F                HEXNUM:      
066F   21 00 00               LD   hl,0   ; Clear hl to accept the number
0672                HEXNUM1:      
0672   03                     INC   bc   
0673   0A                     LD   a,(bc)   ; Get the character which is a numeral
0674   CB 77                  BIT   6,a   ; is it uppercase alpha?
0676   28 02                  JR   z,hexnum2   ; no a decimal
0678   D6 07                  SUB   7   ; sub 7  to make $a - $F
067A                HEXNUM2:      
067A   D6 30                  SUB   $30   ; form decimal digit
067C   DA FA 06               JP   c,num2   
067F   FE 10                  CP   $0F+1   
0681   D2 FA 06               JP   nc,num2   
0684   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0685   29                     ADD   hl,hl   ; 4X
0686   29                     ADD   hl,hl   ; 8X
0687   29                     ADD   hl,hl   ; 16X
0688   85                     ADD   a,l   ; add into bottom of hl
0689   6F                     LD   l,a   
068A   18 E6                  JR   hexnum1   
068C                IDENTU:      
068C   0A                     LD   a,(bc)   ; a = identifier char
068D   D6 41                  SUB   "A"   ; "A" = 0
068F   18 05                  JR   ident1   
0691                IDENTL:      
0691   0A                     LD   a,(bc)   
0692   D6 61                  SUB   "a"   
0694   C6 1A                  ADD   a,26   
0696                IDENT1:      
0696   87                     ADD   a,a   ; l = a * 2
0697   6F                     LD   l,a   
0698   26 34                  LD   h,msb(vars)   
069A   22 F0 34               LD   (vPointer),hl   ; store address in setter
069D   5E                     LD   e,(hl)   
069E   23                     INC   hl   
069F   56                     LD   d,(hl)   
06A0   D5                     PUSH   de   
06A1   DD E9                  JP   (ix)   
06A3                             ; if
06A3                             ; condition then -- value
06A3                IF:          
06A3   03                     INC   bc   
06A4   0A                     LD   a,(bc)   
06A5   FE 3F                  CP   "?"   
06A7   28 06                  JR   z,ifte   
06A9   0B                     DEC   bc   
06AA   11 00 00               LD   de,0   ; NUL pointer for else
06AD   18 01                  JR   ifte1   
06AF                             ; ifte
06AF                             ; condition then else -- value
06AF                IFTE:        
06AF   D1                     POP   de   ; de = else
06B0                IFTE1:       
06B0   E1                     POP   hl   ; hl = then
06B1   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06B2   7C                     LD   a,h   
06B3   B5                     OR   l   
06B4   E1                     POP   hl   ; hl = then
06B5   CA 03 06               JP   z,go1   ; if z de = else
06B8   EB                     EX   de,hl   ; condition = false, de = then
06B9   C3 03 06               JP   go1   
06BC                MUL:         
06BC   D1                     POP   de   ; get first value
06BD   E1                     POP   hl   
06BE   C5                     PUSH   bc   ; Preserve the IP
06BF   44                     LD   b,h   ; bc = 2nd value
06C0   4D                     LD   c,l   
06C1   21 00 00               LD   hl,0   
06C4   3E 10                  LD   a,16   
06C6                MUL2:        
06C6   29                     ADD   hl,hl   
06C7   CB 13                  RL   e   
06C9   CB 12                  RL   d   
06CB   30 04                  JR   nc,$+6   
06CD   09                     ADD   hl,bc   
06CE   30 01                  JR   nc,$+3   
06D0   13                     INC   de   
06D1   3D                     DEC   a   
06D2   20 F2                  JR   nz,mul2   
06D4   C1                     POP   bc   ; Restore the IP
06D5   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
06D6   DD E9                  JP   (ix)   
06D8                NUM:         
06D8   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06DB   0A                     LD   a,(bc)   ; Get numeral or -
06DC   FE 2D                  CP   "-"   
06DE   20 01                  JR   nz,num0   
06E0   03                     INC   bc   ; move to next char, no flags affected
06E1                NUM0:        
06E1   08                     EX   af,af'   ; save zero flag = 0 for later
06E2                NUM1:        
06E2   0A                     LD   a,(bc)   ; read digit
06E3   D6 30                  SUB   "0"   ; less than 0?
06E5   38 13                  JR   c,num2   ; not a digit, exit loop
06E7   FE 0A                  CP   10   ; greater that 9?
06E9   30 0F                  JR   nc,num2   ; not a digit, exit loop
06EB   03                     INC   bc   ; inc IP
06EC   54 5D                  LD   de,hl   ; multiply hl * 10
06EE   29                     ADD   hl,hl   
06EF   29                     ADD   hl,hl   
06F0   19                     ADD   hl,de   
06F1   29                     ADD   hl,hl   
06F2   85                     ADD   a,l   ; add digit in a to hl
06F3   6F                     LD   l,a   
06F4   3E 00                  LD   a,0   
06F6   8C                     ADC   a,h   
06F7   67                     LD   h,a   
06F8   18 E8                  JR   num1   
06FA                NUM2:        
06FA   0B                     DEC   bc   
06FB   08                     EX   af,af'   ; restore zero flag
06FC   20 07                  JR   nz,num3   
06FE   EB                     EX   de,hl   ; negate the value of hl
06FF   21 00 00               LD   hl,0   
0702   B7                     OR   a   ; jump to sub2
0703   ED 52                  SBC   hl,de   
0705                NUM3:        
0705   E5                     PUSH   hl   ; Put the number on the stack
0706   DD E9                  JP   (ix)   ; and process the next character
0708                REMAIN:      
0708   2A F6 34               LD   hl,(vRemain)   
070B   E5                     PUSH   hl   
070C   DD E9                  JP   (ix)   
070E                             ; shiftLeft
070E                             ; value count -- value2          shift left count places
070E                SHIFTLEFT:      
070E   50 59                  LD   de,bc   ; save IP
0710   C1                     POP   bc   ; bc = count
0711   41                     LD   b,c   ; b = loop counter
0712   E1                     POP   hl   
0713   04                     INC   b   ; test for counter=0 case
0714   18 01                  JR   shiftLeft2   
0716                SHIFTLEFT1:      
0716   29                     ADD   hl,hl   ; left shift hl
0717                SHIFTLEFT2:      
0717   10 FD                  DJNZ   shiftLeft1   
0719   E5                     PUSH   hl   
071A   42 4B                  LD   bc,de   ; restore IP
071C   DD E9                  JP   (ix)   
071E                             ; shiftRight
071E                             ; value count -- value2          shift left count places
071E                SHIFTRIGHT:      
071E   50 59                  LD   de,bc   ; save IP
0720   C1                     POP   bc   ; bc = count
0721   41                     LD   b,c   ; b = loop counter
0722   E1                     POP   hl   
0723   04                     INC   b   ; test for counter=0 case
0724   18 04                  JR   shiftRight2   
0726                SHIFTRIGHT1:      
0726   CB 3C                  SRL   h   ; right shift hl
0728   CB 1D                  RR   l   
072A                SHIFTRIGHT2:      
072A   10 FA                  DJNZ   shiftRight1   
072C   E5                     PUSH   hl   
072D   42 4B                  LD   bc,de   ; restore IP
072F   DD E9                  JP   (ix)   
0731                             ; string
0731                             ; -- ptr                        ; points to start of string chars,
0731                             ; length is stored at start - 2 bytes
0731                STRING:      
0731   2A EC 34               LD   hl,(vHeapPtr)   ; hl = heap*
0734   23                     INC   hl   ; skip length field to start
0735   23                     INC   hl   
0736   E5                     PUSH   hl   ; save start of string
0737   03                     INC   bc   ; point to next char
0738   18 03                  JR   string2   
073A                STRING1:      
073A   77                     LD   (hl),a   
073B   23                     INC   hl   ; increase count
073C   03                     INC   bc   ; point to next char
073D                STRING2:      
073D   0A                     LD   a,(bc)   
073E   FE 22                  CP   DQUOTE   ; " is the string terminator
0740   20 F8                  JR   nz,string1   
0742   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0744   20 F4                  JR   nz,string1   
0746   AF                     XOR   a   ; write NUL to terminate string
0747   77                     LD   (hl),a   ; hl = end of string
0748   23                     INC   hl   
0749   22 EC 34               LD   (vHeapPtr),hl   ; bump heap* to after end of string
074C   2B                     DEC   hl   ; hl = end of string without terminator
074D   D1                     POP   de   ; de = start of string
074E   D5                     PUSH   de   ; return start of string
074F   B7                     OR   a   ; hl = length bytes, de = start of string
0750   ED 52                  SBC   hl,de   
0752   EB                     EX   de,hl   
0753   2B                     DEC   hl   ; write length bytes to length field at start - 2
0754   72                     LD   (hl),d   
0755   2B                     DEC   hl   
0756   73                     LD   (hl),e   
0757   DD E9                  JP   (ix)   
0759                             ;*******************************************************************
0759                             ; commands
0759                             ;*******************************************************************
0759                COMMAND:      
0759   03                     INC   bc   
075A   0A                     LD   a,(bc)   
075B   FE 5C                  CP   $5C   ; \\ comment
075D   CA AF 07               JP   z,comment   
0760   FE 61                  CP   "a"   ; \a absolute
0762   CA A2 07               JP   z,abs1   
0765   FE 62                  CP   "b"   ; \b bytes
0767   CA B8 07               JP   z,bytes   
076A   FE 66                  CP   "f"   ; \f func
076C   CA C0 07               JP   z,func   
076F   FE 46                  CP   "F"   ; \F false
0771   CA FC 05               JP   z,false1   
0774   FE 69                  CP   "i"   ; \i input
0776   CA D7 07               JP   z,input   
0779   FE 6B                  CP   "k"   ; \k key
077B   CA E2 07               JP   z,key   
077E   FE 6F                  CP   "o"   ; \o output
0780   CA EB 07               JP   z,output   
0783   FE 72                  CP   "r"   ; \r repeat
0785   CA F4 07               JP   z,repeat   
0788   FE 73                  CP   "s"   ; \s select
078A   CA FC 07               JP   z,select   
078D   FE 54                  CP   "T"   ; \T true
078F   CA F6 05               JP   z,true1   
0792   FE 77                  CP   "w"   ; \w words
0794   CA 06 08               JP   z,words   
0797   FE 78                  CP   "x"   ; \x exit loop or block
0799   CA 0C 08               JP   z,blockExit   
079C   21 01 00               LD   hl,1   ; error 1: unknown command
079F   C3 93 09               JP   error   
07A2                ABS1:        
07A2   E1                     POP   hl   
07A3   CB 7C                  BIT   7,h   
07A5   C8                     RET   z   
07A6   AF                     XOR   a   
07A7   95                     SUB   l   
07A8   6F                     LD   l,a   
07A9   9F                     SBC   a,a   
07AA   94                     SUB   h   
07AB   67                     LD   h,a   
07AC   E5                     PUSH   hl   
07AD   DD E9                  JP   (ix)   
07AF                COMMENT:      
07AF   03                     INC   bc   ; point to next char
07B0   0A                     LD   a,(bc)   
07B1   FE 20                  CP   " "   ; terminate on any char less than SP
07B3   30 FA                  JR   nc,comment   
07B5   0B                     DEC   bc   
07B6   DD E9                  JP   (ix)   
07B8                BYTES:       
07B8   21 01 00               LD   hl,1   
07BB                BYTES1:      
07BB   22 E6 34               LD   (vDataWidth),hl   
07BE   DD E9                  JP   (ix)   
07C0                             ; arg_list* block* -- ptr
07C0                FUNC:        
07C0   D1                     POP   de   ; de = block* hl = heap*
07C1   2A EC 34               LD   hl,(vHeapPtr)   
07C4   73                     LD   (hl),e   ; compile block*
07C5   23                     INC   hl   
07C6   72                     LD   (hl),d   
07C7   23                     INC   hl   
07C8   D1                     POP   de   ; de = block*
07C9   73                     LD   (hl),e   ; compile arg_list*
07CA   23                     INC   hl   
07CB   72                     LD   (hl),d   
07CC   23                     INC   hl   
07CD   ED 5B EC 34            LD   de,(vHeapPtr)   ; return func*
07D1   D5                     PUSH   de   
07D2   22 EC 34               LD   (vHeapPtr),hl   ; heap* += 4
07D5   DD E9                  JP   (ix)   
07D7                             ; Z80 port input
07D7                             ; port -- value
07D7                INPUT:       
07D7   E1                     POP   hl   
07D8   59                     LD   e,c   ; save IP
07D9   4D                     LD   c,l   
07DA   ED 68                  IN   l,(c)   
07DC   26 00                  LD   h,0   
07DE   4B                     LD   c,e   ; restore IP
07DF   E5                     PUSH   hl   
07E0   DD E9                  JP   (ix)   
07E2                KEY:         
07E2   CD 81 00               CALL   getchar   
07E5   26 00                  LD   h,0   
07E7   6F                     LD   l,a   
07E8   E5                     PUSH   hl   
07E9   DD E9                  JP   (ix)   
07EB                             ; Z80 port output
07EB                             ; value port --
07EB                OUTPUT:      
07EB   E1                     POP   hl   
07EC   59                     LD   e,c   ; save IP
07ED   4D                     LD   c,l   
07EE   E1                     POP   hl   
07EF   ED 69                  OUT   (c),l   
07F1   4B                     LD   c,e   ; restore IP
07F2   DD E9                  JP   (ix)   
07F4                             ; repeat
07F4                             ; block* --
07F4                REPEAT:      
07F4   0B                     DEC   bc   ; rewind IP to before \r
07F5   0B                     DEC   bc   
07F6   E1                     POP   hl   
07F7   E5                     PUSH   hl   
07F8   E5                     PUSH   hl   
07F9   C3 02 06               JP   go   
07FC                             ; select
07FC                             ; index array -- value
07FC                SELECT:      
07FC   D1                     POP   de   ; de = array
07FD   E1                     POP   hl   ; hl = index
07FE   29                     ADD   hl,hl   ; if data width = 2 then double
07FF   19                     ADD   hl,de   ; add addr
0800   5E                     LD   e,(hl)   
0801   23                     INC   hl   
0802   56                     LD   d,(hl)   
0803   C3 03 06               JP   go1   
0806                WORDS:       
0806   21 02 00               LD   hl,2   
0809   C3 BB 07               JP   bytes1   
080C                BLOCKEXIT:      
080C   E1                     POP   hl   
080D   7D                     LD   a,l   
080E   B4                     OR   h   
080F   28 02                  JR   z,blockExit1   
0811   DD E9                  JP   (ix)   
0813                BLOCKEXIT1:      
0813   FD 6E 06               LD   l,(iy+6)   ; hl = oldIP
0816   FD 66 07               LD   h,(iy+7)   
0819   23                     INC   hl   ; forward IP on stack to after \r
081A   23                     INC   hl   
081B   FD 75 06               LD   (iy+6),l   
081E   FD 74 07               LD   (iy+7),h   
0821   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0824   FD 56 03               LD   d,(iy+3)   
0827   13                     INC   de   
0828   13                     INC   de   
0829   FD 73 02               LD   (iy+2),e   ; hl = first_arg*, is it in this scope?
082C   FD 72 03               LD   (iy+3),d   
082F   C3 34 05               JP   blockEnd   
0832                             ; 
0832                             ; 
0832                             ; 
0832                             ; 
0832                             ; c b --
0832                             ; loops until c = 0
0832                LOOP:        
0832   DD E9                  JP   (ix)   
0834                             ;     pop de                      ; de = block                    c
0834                             ;     pop hl                      ; hl = condition
0834                             ;     push de
0834                             ;     push bc                     ; push IP
0834                             ;     ld bc,de                    ; bc = block
0834                             ;     ld e,(iy+2)                 ; get first_arg* from parent stack frame
0834                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0834                             ;     push de                     ; push first_arg*
0834                             ;     push iy                     ; push BP
0834                             ;     ld iy,0                     ; iy = sp
0834                             ;     add iy,sp
0834                             ; loop1:
0834                             ;     ld a,l                      ; bc = block, hl = condition = zero?
0834                             ;     or h
0834                             ;     jr z,loop3
0834                             ;     ld de,loop2-1               ; IP return address
0834                             ;     push de
0834                             ;     ld e,(iy+2)                 ; push parent first_arg*
0834                             ;     ld d,(iy+3)
0834                             ;     push de                     ;
0834                             ;     push iy                     ; push BP
0834                             ;     ld iy,0                     ; iy = sp
0834                             ;     add iy,sp
0834                             ;     push hl                     ; push condition
0834                             ;     dec bc
0834                             ;     jp (ix)
0834                             ; loop2:
0834                             ;     db ESC                      ; escape from interpreter
0834                             ;     ld c,(iy+6)                 ; bc = block
0834                             ;     ld b,(iy+7)
0834                             ;     pop hl                      ; hl = condition
0834                             ;     jr loop1
0834                             ; loop3:
0834                             ;     ld d,iyh                    ; de = BP
0834                             ;     ld e,iyl
0834                             ;     ex de,hl                    ; hl = BP, de = result
0834                             ;     ld sp,hl                    ; sp = BP
0834                             ;     pop hl                      ; hl = old BP
0834                             ;     pop bc                      ; pop first_arg* (discard)
0834                             ;     pop bc                      ; bc = IP
0834                             ;     ld sp,hl                    ; sp = old BP
0834                             ;     ld iy,0                     ; iy = sp
0834                             ;     add iy,sp
0834                             ;     ld ix,(vNext)                  ; needed?
0834                             ;     jp (ix)
0834                             ; str -- num
0834                             ; hash:
0834                             ; pop hl
0834                             ; push bc
0834                             ; ld bc,hl
0834                             ; call hashStr
0834                             ; pop bc
0834                             ; push hl
0834                             ; jp (ix)
0834                             ; sqrt1:
0834                             ;     pop hl
0834                             ;     push bc
0834                             ;     call squareRoot
0834                             ;     ld (vRemain),bc
0834                             ;     pop bc
0834                             ;     push de
0834                             ;     jp (ix)
0834                FILTER:      
0834                MAP:         
0834                SCAN:        
0834   DD E9                  JP   (ix)   
0836                             ; -------------------------------------------------------------------------------
0836                             ; ; hash C-string
0836                             ; ; BC = str
0836                             ; ; HL = hash
0836                             ; hashStr:
0836                             ;     ld (vHashStr),bc                    ; store source string
0836                             ;     ld hl,0
0836                             ; hashStr1:
0836                             ;     ld a,(bc)                           ; load next char
0836                             ;     inc bc
0836                             ;     cp 0                                ; NUL?
0836                             ;     ret z
0836                             ; hashStr2:
0836                             ;     ld d,0
0836                             ;     ld e,a
0836                             ;     add hl,de
0836                             ;     ld de,hl                            ; hl *= 193 (11000001)
0836                             ;     add hl,hl                           ; shift left
0836                             ;     add hl,de                           ; add
0836                             ;     add hl,hl                           ; shift left
0836                             ;     add hl,hl                           ; shift left
0836                             ;     add hl,hl                           ; shift left
0836                             ;     add hl,hl                           ; shift left
0836                             ;     add hl,hl                           ; shift left
0836                             ;     add hl,hl                           ; shift left
0836                             ;     add hl,de                           ; add
0836                             ;     jr hashStr1
0836                             ; ; squareroot
0836                             ; ; Input: HL = value
0836                             ; ; Result: DE = square root BC = remainder
0836                             ; squareRoot:
0836                             ;     ld bc,0800h
0836                             ;     ld e,c
0836                             ;     xor a
0836                             ; squareRoot1:
0836                             ;     add hl,hl
0836                             ;     rl c
0836                             ;     adc hl,hl
0836                             ;     rl c
0836                             ;     jr nc,$+4
0836                             ;     set 0,l
0836                             ;     ld a,e
0836                             ;     add a,a
0836                             ;     ld e,a
0836                             ;     add a,a
0836                             ;     bit 0,l
0836                             ;     jr nz,$+5
0836                             ;     sub c
0836                             ;     jr nc,squareRoot4
0836                             ;     ld a,c
0836                             ;     sub e
0836                             ;     inc e
0836                             ;     sub e
0836                             ;     ld c,a
0836                             ; squareRoot4:
0836                             ;     djnz squareRoot1
0836                             ;     bit 0,l
0836                             ;     jr z,squareRoot5
0836                             ;     inc b
0836                             ; squareRoot5:
0836                             ;     ld d,0
0836                             ;     ret
0836                             ; print decimal
0836                             ; hl = value
0836                PRTDEC:      
0836   CB 7C                  BIT   7,h   
0838   28 0B                  JR   z,prtdec0   
083A   3E 2D                  LD   a,"-"   
083C   CD 85 00               CALL   putchar   
083F   AF                     XOR   a   
0840   95                     SUB   l   
0841   6F                     LD   l,a   
0842   9F                     SBC   a,a   
0843   94                     SUB   h   
0844   67                     LD   h,a   
0845                PRTDEC0:      
0845   C5                     PUSH   bc   
0846   0E 00                  LD   c,0   ; leading zeros flag = false
0848   11 F0 D8               LD   de,-10000   
084B   CD 67 08               CALL   prtdec1   
084E   11 18 FC               LD   de,-1000   
0851   CD 67 08               CALL   prtdec1   
0854   11 9C FF               LD   de,-100   
0857   CD 67 08               CALL   prtdec1   
085A   1E F6                  LD   e,-10   
085C   CD 67 08               CALL   prtdec1   
085F   0C                     INC   c   ; flag = true for at least digit
0860   1E FF                  LD   e,-1   
0862   CD 67 08               CALL   prtdec1   
0865   C1                     POP   bc   
0866   C9                     RET      
0867                PRTDEC1:      
0867   06 2F                  LD   b,"0"-1   
0869                PRTDEC2:      
0869   04                     INC   b   
086A   19                     ADD   hl,de   
086B   38 FC                  JR   c,prtdec2   
086D   ED 52                  SBC   hl,de   
086F   3E 30                  LD   a,"0"   
0871   B8                     CP   b   
0872   20 05                  JR   nz,prtdec3   
0874   AF                     XOR   a   
0875   B1                     OR   c   
0876   C8                     RET   z   
0877   18 01                  JR   prtdec4   
0879                PRTDEC3:      
0879   0C                     INC   c   
087A                PRTDEC4:      
087A   78                     LD   a,b   
087B   C3 85 00               JP   putchar   
087E                PRTHEX:      ; display hl as a 16-bit number in hex.
087E   C5                     PUSH   bc   ; preserve the IP
087F   7C                     LD   a,h   
0880   CD 89 08               CALL   prthex2   
0883   7D                     LD   a,l   
0884   CD 89 08               CALL   prthex2   
0887   C1                     POP   bc   
0888   C9                     RET      
0889                PRTHEX2:      
0889   4F                     LD   c,a   
088A   1F                     RRA      
088B   1F                     RRA      
088C   1F                     RRA      
088D   1F                     RRA      
088E   CD 92 08               CALL   prthex3   
0891   79                     LD   a,c   
0892                PRTHEX3:      
0892   E6 0F                  AND   0x0F   
0894   C6 90                  ADD   a,0x90   
0896   27                     DAA      
0897   CE 40                  ADC   a,0x40   
0899   27                     DAA      
089A   C3 85 00               JP   putchar   
089D                PRTSTR0:      
089D   CD 85 00               CALL   putchar   
08A0   23                     INC   hl   
08A1                PRTSTR:      
08A1   7E                     LD   a,(hl)   
08A2   B7                     OR   a   
08A3   20 F8                  JR   nz,prtstr0   
08A5   C9                     RET      
08A6                             ; **************************************************************************
08A6                             ; calculate nesting value
08A6                             ; a is char to be tested,
08A6                             ; e is the nesting value (initially 0)
08A6                             ; e is increased by ( and [
08A6                             ; e is decreased by ) and ]
08A6                             ; e has its bit 7 toggled by `
08A6                             ; limited to 127 levels
08A6                             ; **************************************************************************
08A6                NESTING:      
08A6   FE 22                  CP   DQUOTE   ; quote char
08A8   28 06                  JR   z,nesting0   
08AA   FE 60                  CP   "`"   ; quote char
08AC   28 02                  JR   z,nesting0   
08AE   18 0A                  JR   nesting1   
08B0                NESTING0:      
08B0   CB 7B                  BIT   7,e   
08B2   28 03                  JR   z,nesting1a   
08B4   CB BB                  RES   7,e   
08B6   C9                     RET      
08B7                NESTING1A:      
08B7   CB FB                  SET   7,e   
08B9   C9                     RET      
08BA                NESTING1:      
08BA   CB 7B                  BIT   7,e   
08BC   C0                     RET   nz   
08BD   FE 7B                  CP   "{"   
08BF   28 08                  JR   z,nesting2   
08C1   FE 5B                  CP   "["   
08C3   28 04                  JR   z,nesting2   
08C5   FE 28                  CP   "("   
08C7   20 02                  JR   nz,nesting3   
08C9                NESTING2:      
08C9   1C                     INC   e   
08CA   C9                     RET      
08CB                NESTING3:      
08CB   FE 7D                  CP   "}"   
08CD   28 07                  JR   z,nesting4   
08CF   FE 5D                  CP   "]"   
08D1   28 03                  JR   z,nesting4   
08D3   FE 29                  CP   ")"   
08D5   C0                     RET   nz   
08D6                NESTING4:      
08D6   1D                     DEC   e   
08D7   C9                     RET      
08D8                PROMPT:      
08D8   CD E8 08               CALL   printStr   
08DB   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08E0   C9                     RET      
08E1                CRLF:        
08E1   CD E8 08               CALL   printStr   
08E4   0D 0A 00               .CSTR   "\r\n"   
08E7   C9                     RET      
08E8                             ; prints a null teminated string
08E8                             ; the string should be immedaitely following the call
08E8                PRINTSTR:      
08E8   E3                     EX   (sp),hl   ; swap			
08E9   CD A1 08               CALL   prtstr   
08EC   23                     INC   hl   ; inc past NUL
08ED   E3                     EX   (sp),hl   ; put it back	
08EE   C9                     RET      
08EF                INIT:        
08EF   DD 2A EA 34            LD   ix,(vNext)   
08F3   FD 21 80 33            LD   iy,STACK   
08F7   21 80 01               LD   hl,isysVars   
08FA   11 E6 34               LD   de,sysVars   
08FD   01 10 00               LD   bc,8 * 2   
0900   ED B0                  LDIR      
0902   21 00 34               LD   hl,vars   ; 52 vars LO HI
0905   06 34                  LD   b,26*2   
0907   AF                     XOR   a   
0908                INIT0:       
0908   77                     LD   (hl),a   
0909   23                     INC   hl   
090A   10 FC                  DJNZ   init0   
090C   C9                     RET      
090D                START:       
090D   31 80 33               LD   sp,STACK   ; start of monty
0910   CD EF 08               CALL   init   ; setups
0913   CD E8 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0916   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0923                INTERPRET:      
0923   CD D8 08               CALL   prompt   
0926   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0929   ED 43 E8 34            LD   (vTIBPtr),bc   
092D                INTERPRET2:      ; calc nesting (a macro might have changed it)
092D   1E 00                  LD   e,0   ; initilize nesting value
092F   C5                     PUSH   bc   ; save offset into TIB,
0930                             ; bc is also the count of chars in TIB
0930   21 00 35               LD   hl,TIB   ; hl is start of TIB
0933   18 06                  JR   interpret4   
0935                INTERPRET3:      
0935   7E                     LD   a,(hl)   ; a = char in TIB
0936   23                     INC   hl   ; inc pointer into TIB
0937   0B                     DEC   bc   ; dec count of chars in TIB
0938   CD A6 08               CALL   nesting   ; update nesting value
093B                INTERPRET4:      
093B   79                     LD   a,c   ; is count zero?
093C   B0                     OR   b   
093D   20 F6                  JR   nz,interpret3   ; if not loop
093F   C1                     POP   bc   ; restore offset into TIB
0940                INTERPRET5:      
0940   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0943   FE 20                  CP   $20   ; compare to space
0945   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0947   FE 00                  CP   $0   ; is it end of string? NUL end of string
0949                             ; ???? NEEDED?
0949   28 27                  JR   z,interpret8   
094B   FE 0D                  CP   "\r"   ; carriage return? ascii 13
094D   28 10                  JR   z,interpret7   ; if anything else its macro/control
094F                             ; macro
094F                             ;  ld (vTIBPtr),bc
094F                             ;  ld hl,ctrlCodes
094F                             ;  add a,l			            ; look up key of macros
094F                             ;  ld l,a
094F                             ;  ld e,(hl)
094F                             ;  ld a,e
094F                             ;  or a
094F                             ;  jr z,macro1
094F                             ;  ld d,msb(macros)
094F                             ;  push de
094F                             ;  call call		            ; monty exec_ operation and jump to it
094F                             ;  db DC1,0
094F                             ; macro1:
094F                             ;  ld bc,(vTIBPtr)
094F   18 DC                  JR   interpret2   
0951                INTERPRET6:      
0951   21 00 35               LD   hl,TIB   
0954   09                     ADD   hl,bc   
0955   77                     LD   (hl),a   ; store the character in textbuf
0956   03                     INC   bc   
0957   CD 85 00               CALL   putchar   ; echo character to screen
095A   CD A6 08               CALL   nesting   
095D   18 E1                  JR   interpret5   ; wait for next character
095F                INTERPRET7:      
095F   21 00 35               LD   hl,TIB   
0962   09                     ADD   hl,bc   
0963   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0965   23                     INC   hl   
0966   36 0A                  LD   (hl),"\n"   
0968   23                     INC   hl   
0969   03                     INC   bc   
096A   03                     INC   bc   
096B   CD E1 08               CALL   crlf   ; echo character to screen
096E   7B                     LD   a,e   ; if zero nesting append and ETX after \r
096F   B7                     OR   a   
0970   20 CE                  JR   nz,interpret5   
0972                INTERPRET8:      
0972   ED 43 E8 34            LD   (vTIBPtr),bc   
0976   01 00 35               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0979                             ; we pressed enter
0979   0B                     DEC   bc   
097A                NEXT:        
097A   03                     INC   bc   ; Increment the IP
097B   0A                     LD   a,(bc)   ; Get the next character and dispatch
097C   FE 20                  CP   " "   ; whitespace?
097E   28 FA                  JR   z,next   ; space? ignore
0980   38 07                  JR   c,next1   
0982   6F                     LD   l,a   ; index into table
0983   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0985   6E                     LD   l,(hl)   ; get low jump address
0986   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0988   E9                     JP   (hl)   ; Jump to routine
0989                NEXT1:       
0989   FE 00                  CP   NUL   ; end of input string?
098B   28 03                  JR   z,exit_   
098D   C3 23 09               JP   interpret   ; no, other whitespace, macros?
0990                EXIT_:       
0990   60 69                  LD   hl,bc   
0992   E9                     JP   (hl)   
0993                ERROR:       
0993   CD E8 08               CALL   printStr   
0996   45 72 72 6F 72 20 00   .CSTR   "Error "   
099D   CD 36 08               CALL   prtdec   
09A0   C3 23 09               JP   interpret   
09A3                          ALIGN   $100   
0A00                TESTSSTART:      
0A00                          ;*Macro unroll:  test "10 4 i= { i \\x i. i 1 - i= } \\r  ", 10
0A00   31 80 33               LD   SP,STACK   
0A03   CD EF 08               CALL   init   
0A06   CD CE 32               CALL   execStr   
0A09   31 30 20 34 20 69 3D 20 7B 20 69 20 5C 78 20 69 2E 20 69 20 31 20 2D 20 69 3D 20 7D 20 5C 72 20 20 00 .CSTR   "10 4 i= { i \\x i. i 1 - i= } \\r  "   
0A2B                          ;*Macro unroll:  expect "10 4 i= { i \\x i. i 1 - i= } \\r  ",10
0A2B   E1                     POP   HL   
0A2C   E5                     PUSH   HL   
0A2D   11 0A 00               LD   DE,10   
0A30   B7                     OR   A   
0A31   ED 52                  SBC   HL,DE   
0A33   7D                     LD   A,L   
0A34   B4                     OR   H   
0A35   28 6C                  JR   Z,expectM_0_2159S43   
0A37   CD E8 08               CALL   printStr   
0A3A   43 6F 64 65 3A 20 31 30 20 34 20 69 3D 20 7B 20 69 20 5C 78 20 69 2E 20 69 20 31 20 2D 20 69 3D 20 7D 20 5C 72 20 20 00 .CSTR   "Code: ","10 4 i= { i \\x i. i 1 - i= } \\r  "   
0A62   CD E8 08               CALL   printStr   
0A65   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0A74   21 0A 00               LD   HL,10   
0A77   CD 36 08               CALL   prtdec   
0A7A   CD E8 08               CALL   printStr   
0A7D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0A8A   E1                     POP   hl   
0A8B   E5                     PUSH   hl   
0A8C   CD 36 08               CALL   prtdec   
0A8F   E1                     POP   hl   
0A90   CD E8 08               CALL   printStr   
0A93   20 28 23 00            .CSTR   " (#"   
0A97   CD 7E 08               CALL   prthex   
0A9A   CD E8 08               CALL   printStr   
0A9D   29 0D 0A 00            .CSTR   ")\r\n"   
0AA1   76                     HALT      
0AA2   00                     .CSTR      
0AA3                EXPECTM_0_2159S43:      
0AA3   E1                     POP   HL   
0AA4                             ; 
0AA4                          ;*Macro unroll:  test "\\F", false
0AA4   31 80 33               LD   SP,STACK   
0AA7   CD EF 08               CALL   init   
0AAA   CD CE 32               CALL   execStr   
0AAD   5C 46 00               .CSTR   "\\F"   
0AB0                          ;*Macro unroll:  expect "\\F",false
0AB0   E1                     POP   HL   
0AB1   E5                     PUSH   HL   
0AB2   11 00 00               LD   DE,false   
0AB5   B7                     OR   A   
0AB6   ED 52                  SBC   HL,DE   
0AB8   7D                     LD   A,L   
0AB9   B4                     OR   H   
0ABA   28 4D                  JR   Z,expectM_0_2161S43   
0ABC   CD E8 08               CALL   printStr   
0ABF   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
0AC8   CD E8 08               CALL   printStr   
0ACB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0ADA   21 00 00               LD   HL,false   
0ADD   CD 36 08               CALL   prtdec   
0AE0   CD E8 08               CALL   printStr   
0AE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0AF0   E1                     POP   hl   
0AF1   E5                     PUSH   hl   
0AF2   CD 36 08               CALL   prtdec   
0AF5   E1                     POP   hl   
0AF6   CD E8 08               CALL   printStr   
0AF9   20 28 23 00            .CSTR   " (#"   
0AFD   CD 7E 08               CALL   prthex   
0B00   CD E8 08               CALL   printStr   
0B03   29 0D 0A 00            .CSTR   ")\r\n"   
0B07   76                     HALT      
0B08   00                     .CSTR      
0B09                EXPECTM_0_2161S43:      
0B09   E1                     POP   HL   
0B0A                          ;*Macro unroll:  test "\\T", true
0B0A   31 80 33               LD   SP,STACK   
0B0D   CD EF 08               CALL   init   
0B10   CD CE 32               CALL   execStr   
0B13   5C 54 00               .CSTR   "\\T"   
0B16                          ;*Macro unroll:  expect "\\T",true
0B16   E1                     POP   HL   
0B17   E5                     PUSH   HL   
0B18   11 FF FF               LD   DE,true   
0B1B   B7                     OR   A   
0B1C   ED 52                  SBC   HL,DE   
0B1E   7D                     LD   A,L   
0B1F   B4                     OR   H   
0B20   28 4D                  JR   Z,expectM_0_2162S43   
0B22   CD E8 08               CALL   printStr   
0B25   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
0B2E   CD E8 08               CALL   printStr   
0B31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B40   21 FF FF               LD   HL,true   
0B43   CD 36 08               CALL   prtdec   
0B46   CD E8 08               CALL   printStr   
0B49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B56   E1                     POP   hl   
0B57   E5                     PUSH   hl   
0B58   CD 36 08               CALL   prtdec   
0B5B   E1                     POP   hl   
0B5C   CD E8 08               CALL   printStr   
0B5F   20 28 23 00            .CSTR   " (#"   
0B63   CD 7E 08               CALL   prthex   
0B66   CD E8 08               CALL   printStr   
0B69   29 0D 0A 00            .CSTR   ")\r\n"   
0B6D   76                     HALT      
0B6E   00                     .CSTR      
0B6F                EXPECTM_0_2162S43:      
0B6F   E1                     POP   HL   
0B70                          ;*Macro unroll:  test "1", 1
0B70   31 80 33               LD   SP,STACK   
0B73   CD EF 08               CALL   init   
0B76   CD CE 32               CALL   execStr   
0B79   31 00                  .CSTR   "1"   
0B7B                          ;*Macro unroll:  expect "1",1
0B7B   E1                     POP   HL   
0B7C   E5                     PUSH   HL   
0B7D   11 01 00               LD   DE,1   
0B80   B7                     OR   A   
0B81   ED 52                  SBC   HL,DE   
0B83   7D                     LD   A,L   
0B84   B4                     OR   H   
0B85   28 4C                  JR   Z,expectM_0_2163S43   
0B87   CD E8 08               CALL   printStr   
0B8A   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0B92   CD E8 08               CALL   printStr   
0B95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0BA4   21 01 00               LD   HL,1   
0BA7   CD 36 08               CALL   prtdec   
0BAA   CD E8 08               CALL   printStr   
0BAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BBA   E1                     POP   hl   
0BBB   E5                     PUSH   hl   
0BBC   CD 36 08               CALL   prtdec   
0BBF   E1                     POP   hl   
0BC0   CD E8 08               CALL   printStr   
0BC3   20 28 23 00            .CSTR   " (#"   
0BC7   CD 7E 08               CALL   prthex   
0BCA   CD E8 08               CALL   printStr   
0BCD   29 0D 0A 00            .CSTR   ")\r\n"   
0BD1   76                     HALT      
0BD2   00                     .CSTR      
0BD3                EXPECTM_0_2163S43:      
0BD3   E1                     POP   HL   
0BD4                          ;*Macro unroll:  test "2", 2
0BD4   31 80 33               LD   SP,STACK   
0BD7   CD EF 08               CALL   init   
0BDA   CD CE 32               CALL   execStr   
0BDD   32 00                  .CSTR   "2"   
0BDF                          ;*Macro unroll:  expect "2",2
0BDF   E1                     POP   HL   
0BE0   E5                     PUSH   HL   
0BE1   11 02 00               LD   DE,2   
0BE4   B7                     OR   A   
0BE5   ED 52                  SBC   HL,DE   
0BE7   7D                     LD   A,L   
0BE8   B4                     OR   H   
0BE9   28 4C                  JR   Z,expectM_0_2164S43   
0BEB   CD E8 08               CALL   printStr   
0BEE   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0BF6   CD E8 08               CALL   printStr   
0BF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C08   21 02 00               LD   HL,2   
0C0B   CD 36 08               CALL   prtdec   
0C0E   CD E8 08               CALL   printStr   
0C11   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C1E   E1                     POP   hl   
0C1F   E5                     PUSH   hl   
0C20   CD 36 08               CALL   prtdec   
0C23   E1                     POP   hl   
0C24   CD E8 08               CALL   printStr   
0C27   20 28 23 00            .CSTR   " (#"   
0C2B   CD 7E 08               CALL   prthex   
0C2E   CD E8 08               CALL   printStr   
0C31   29 0D 0A 00            .CSTR   ")\r\n"   
0C35   76                     HALT      
0C36   00                     .CSTR      
0C37                EXPECTM_0_2164S43:      
0C37   E1                     POP   HL   
0C38                          ;*Macro unroll:  test "1", 1
0C38   31 80 33               LD   SP,STACK   
0C3B   CD EF 08               CALL   init   
0C3E   CD CE 32               CALL   execStr   
0C41   31 00                  .CSTR   "1"   
0C43                          ;*Macro unroll:  expect "1",1
0C43   E1                     POP   HL   
0C44   E5                     PUSH   HL   
0C45   11 01 00               LD   DE,1   
0C48   B7                     OR   A   
0C49   ED 52                  SBC   HL,DE   
0C4B   7D                     LD   A,L   
0C4C   B4                     OR   H   
0C4D   28 4C                  JR   Z,expectM_0_2165S43   
0C4F   CD E8 08               CALL   printStr   
0C52   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0C5A   CD E8 08               CALL   printStr   
0C5D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C6C   21 01 00               LD   HL,1   
0C6F   CD 36 08               CALL   prtdec   
0C72   CD E8 08               CALL   printStr   
0C75   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C82   E1                     POP   hl   
0C83   E5                     PUSH   hl   
0C84   CD 36 08               CALL   prtdec   
0C87   E1                     POP   hl   
0C88   CD E8 08               CALL   printStr   
0C8B   20 28 23 00            .CSTR   " (#"   
0C8F   CD 7E 08               CALL   prthex   
0C92   CD E8 08               CALL   printStr   
0C95   29 0D 0A 00            .CSTR   ")\r\n"   
0C99   76                     HALT      
0C9A   00                     .CSTR      
0C9B                EXPECTM_0_2165S43:      
0C9B   E1                     POP   HL   
0C9C                          ;*Macro unroll:  test "0", 0
0C9C   31 80 33               LD   SP,STACK   
0C9F   CD EF 08               CALL   init   
0CA2   CD CE 32               CALL   execStr   
0CA5   30 00                  .CSTR   "0"   
0CA7                          ;*Macro unroll:  expect "0",0
0CA7   E1                     POP   HL   
0CA8   E5                     PUSH   HL   
0CA9   11 00 00               LD   DE,0   
0CAC   B7                     OR   A   
0CAD   ED 52                  SBC   HL,DE   
0CAF   7D                     LD   A,L   
0CB0   B4                     OR   H   
0CB1   28 4C                  JR   Z,expectM_0_2166S43   
0CB3   CD E8 08               CALL   printStr   
0CB6   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0CBE   CD E8 08               CALL   printStr   
0CC1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CD0   21 00 00               LD   HL,0   
0CD3   CD 36 08               CALL   prtdec   
0CD6   CD E8 08               CALL   printStr   
0CD9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CE6   E1                     POP   hl   
0CE7   E5                     PUSH   hl   
0CE8   CD 36 08               CALL   prtdec   
0CEB   E1                     POP   hl   
0CEC   CD E8 08               CALL   printStr   
0CEF   20 28 23 00            .CSTR   " (#"   
0CF3   CD 7E 08               CALL   prthex   
0CF6   CD E8 08               CALL   printStr   
0CF9   29 0D 0A 00            .CSTR   ")\r\n"   
0CFD   76                     HALT      
0CFE   00                     .CSTR      
0CFF                EXPECTM_0_2166S43:      
0CFF   E1                     POP   HL   
0D00                          ;*Macro unroll:  test "10", 10
0D00   31 80 33               LD   SP,STACK   
0D03   CD EF 08               CALL   init   
0D06   CD CE 32               CALL   execStr   
0D09   31 30 00               .CSTR   "10"   
0D0C                          ;*Macro unroll:  expect "10",10
0D0C   E1                     POP   HL   
0D0D   E5                     PUSH   HL   
0D0E   11 0A 00               LD   DE,10   
0D11   B7                     OR   A   
0D12   ED 52                  SBC   HL,DE   
0D14   7D                     LD   A,L   
0D15   B4                     OR   H   
0D16   28 4D                  JR   Z,expectM_0_2167S43   
0D18   CD E8 08               CALL   printStr   
0D1B   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0D24   CD E8 08               CALL   printStr   
0D27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D36   21 0A 00               LD   HL,10   
0D39   CD 36 08               CALL   prtdec   
0D3C   CD E8 08               CALL   printStr   
0D3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D4C   E1                     POP   hl   
0D4D   E5                     PUSH   hl   
0D4E   CD 36 08               CALL   prtdec   
0D51   E1                     POP   hl   
0D52   CD E8 08               CALL   printStr   
0D55   20 28 23 00            .CSTR   " (#"   
0D59   CD 7E 08               CALL   prthex   
0D5C   CD E8 08               CALL   printStr   
0D5F   29 0D 0A 00            .CSTR   ")\r\n"   
0D63   76                     HALT      
0D64   00                     .CSTR      
0D65                EXPECTM_0_2167S43:      
0D65   E1                     POP   HL   
0D66                          ;*Macro unroll:  test "123", 123
0D66   31 80 33               LD   SP,STACK   
0D69   CD EF 08               CALL   init   
0D6C   CD CE 32               CALL   execStr   
0D6F   31 32 33 00            .CSTR   "123"   
0D73                          ;*Macro unroll:  expect "123",123
0D73   E1                     POP   HL   
0D74   E5                     PUSH   HL   
0D75   11 7B 00               LD   DE,123   
0D78   B7                     OR   A   
0D79   ED 52                  SBC   HL,DE   
0D7B   7D                     LD   A,L   
0D7C   B4                     OR   H   
0D7D   28 4E                  JR   Z,expectM_0_2168S43   
0D7F   CD E8 08               CALL   printStr   
0D82   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0D8C   CD E8 08               CALL   printStr   
0D8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D9E   21 7B 00               LD   HL,123   
0DA1   CD 36 08               CALL   prtdec   
0DA4   CD E8 08               CALL   printStr   
0DA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DB4   E1                     POP   hl   
0DB5   E5                     PUSH   hl   
0DB6   CD 36 08               CALL   prtdec   
0DB9   E1                     POP   hl   
0DBA   CD E8 08               CALL   printStr   
0DBD   20 28 23 00            .CSTR   " (#"   
0DC1   CD 7E 08               CALL   prthex   
0DC4   CD E8 08               CALL   printStr   
0DC7   29 0D 0A 00            .CSTR   ")\r\n"   
0DCB   76                     HALT      
0DCC   00                     .CSTR      
0DCD                EXPECTM_0_2168S43:      
0DCD   E1                     POP   HL   
0DCE                          ;*Macro unroll:  test "-1",-1
0DCE   31 80 33               LD   SP,STACK   
0DD1   CD EF 08               CALL   init   
0DD4   CD CE 32               CALL   execStr   
0DD7   2D 31 00               .CSTR   "-1"   
0DDA                          ;*Macro unroll:  expect "-1",-1
0DDA   E1                     POP   HL   
0DDB   E5                     PUSH   HL   
0DDC   11 FF FF               LD   DE,-1   
0DDF   B7                     OR   A   
0DE0   ED 52                  SBC   HL,DE   
0DE2   7D                     LD   A,L   
0DE3   B4                     OR   H   
0DE4   28 4D                  JR   Z,expectM_0_2169S43   
0DE6   CD E8 08               CALL   printStr   
0DE9   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0DF2   CD E8 08               CALL   printStr   
0DF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E04   21 FF FF               LD   HL,-1   
0E07   CD 36 08               CALL   prtdec   
0E0A   CD E8 08               CALL   printStr   
0E0D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E1A   E1                     POP   hl   
0E1B   E5                     PUSH   hl   
0E1C   CD 36 08               CALL   prtdec   
0E1F   E1                     POP   hl   
0E20   CD E8 08               CALL   printStr   
0E23   20 28 23 00            .CSTR   " (#"   
0E27   CD 7E 08               CALL   prthex   
0E2A   CD E8 08               CALL   printStr   
0E2D   29 0D 0A 00            .CSTR   ")\r\n"   
0E31   76                     HALT      
0E32   00                     .CSTR      
0E33                EXPECTM_0_2169S43:      
0E33   E1                     POP   HL   
0E34                          ;*Macro unroll:  test "''", 0
0E34   31 80 33               LD   SP,STACK   
0E37   CD EF 08               CALL   init   
0E3A   CD CE 32               CALL   execStr   
0E3D   27 27 00               .CSTR   "''"   
0E40                          ;*Macro unroll:  expect "''",0
0E40   E1                     POP   HL   
0E41   E5                     PUSH   HL   
0E42   11 00 00               LD   DE,0   
0E45   B7                     OR   A   
0E46   ED 52                  SBC   HL,DE   
0E48   7D                     LD   A,L   
0E49   B4                     OR   H   
0E4A   28 4D                  JR   Z,expectM_0_2170S43   
0E4C   CD E8 08               CALL   printStr   
0E4F   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0E58   CD E8 08               CALL   printStr   
0E5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E6A   21 00 00               LD   HL,0   
0E6D   CD 36 08               CALL   prtdec   
0E70   CD E8 08               CALL   printStr   
0E73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E80   E1                     POP   hl   
0E81   E5                     PUSH   hl   
0E82   CD 36 08               CALL   prtdec   
0E85   E1                     POP   hl   
0E86   CD E8 08               CALL   printStr   
0E89   20 28 23 00            .CSTR   " (#"   
0E8D   CD 7E 08               CALL   prthex   
0E90   CD E8 08               CALL   printStr   
0E93   29 0D 0A 00            .CSTR   ")\r\n"   
0E97   76                     HALT      
0E98   00                     .CSTR      
0E99                EXPECTM_0_2170S43:      
0E99   E1                     POP   HL   
0E9A                          ;*Macro unroll:  test "'a'", $61
0E9A   31 80 33               LD   SP,STACK   
0E9D   CD EF 08               CALL   init   
0EA0   CD CE 32               CALL   execStr   
0EA3   27 61 27 00            .CSTR   "'a'"   
0EA7                          ;*Macro unroll:  expect "'a'",$61
0EA7   E1                     POP   HL   
0EA8   E5                     PUSH   HL   
0EA9   11 61 00               LD   DE,$61   
0EAC   B7                     OR   A   
0EAD   ED 52                  SBC   HL,DE   
0EAF   7D                     LD   A,L   
0EB0   B4                     OR   H   
0EB1   28 4E                  JR   Z,expectM_0_2171S43   
0EB3   CD E8 08               CALL   printStr   
0EB6   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0EC0   CD E8 08               CALL   printStr   
0EC3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0ED2   21 61 00               LD   HL,$61   
0ED5   CD 36 08               CALL   prtdec   
0ED8   CD E8 08               CALL   printStr   
0EDB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EE8   E1                     POP   hl   
0EE9   E5                     PUSH   hl   
0EEA   CD 36 08               CALL   prtdec   
0EED   E1                     POP   hl   
0EEE   CD E8 08               CALL   printStr   
0EF1   20 28 23 00            .CSTR   " (#"   
0EF5   CD 7E 08               CALL   prthex   
0EF8   CD E8 08               CALL   printStr   
0EFB   29 0D 0A 00            .CSTR   ")\r\n"   
0EFF   76                     HALT      
0F00   00                     .CSTR      
0F01                EXPECTM_0_2171S43:      
0F01   E1                     POP   HL   
0F02                          ;*Macro unroll:  test "'\\''", $27
0F02   31 80 33               LD   SP,STACK   
0F05   CD EF 08               CALL   init   
0F08   CD CE 32               CALL   execStr   
0F0B   27 5C 27 27 00         .CSTR   "'\\''"   
0F10                          ;*Macro unroll:  expect "'\\''",$27
0F10   E1                     POP   HL   
0F11   E5                     PUSH   HL   
0F12   11 27 00               LD   DE,$27   
0F15   B7                     OR   A   
0F16   ED 52                  SBC   HL,DE   
0F18   7D                     LD   A,L   
0F19   B4                     OR   H   
0F1A   28 4F                  JR   Z,expectM_0_2172S43   
0F1C   CD E8 08               CALL   printStr   
0F1F   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
0F2A   CD E8 08               CALL   printStr   
0F2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F3C   21 27 00               LD   HL,$27   
0F3F   CD 36 08               CALL   prtdec   
0F42   CD E8 08               CALL   printStr   
0F45   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F52   E1                     POP   hl   
0F53   E5                     PUSH   hl   
0F54   CD 36 08               CALL   prtdec   
0F57   E1                     POP   hl   
0F58   CD E8 08               CALL   printStr   
0F5B   20 28 23 00            .CSTR   " (#"   
0F5F   CD 7E 08               CALL   prthex   
0F62   CD E8 08               CALL   printStr   
0F65   29 0D 0A 00            .CSTR   ")\r\n"   
0F69   76                     HALT      
0F6A   00                     .CSTR      
0F6B                EXPECTM_0_2172S43:      
0F6B   E1                     POP   HL   
0F6C                          ;*Macro unroll:  test "#10", $10
0F6C   31 80 33               LD   SP,STACK   
0F6F   CD EF 08               CALL   init   
0F72   CD CE 32               CALL   execStr   
0F75   23 31 30 00            .CSTR   "#10"   
0F79                          ;*Macro unroll:  expect "#10",$10
0F79   E1                     POP   HL   
0F7A   E5                     PUSH   HL   
0F7B   11 10 00               LD   DE,$10   
0F7E   B7                     OR   A   
0F7F   ED 52                  SBC   HL,DE   
0F81   7D                     LD   A,L   
0F82   B4                     OR   H   
0F83   28 4E                  JR   Z,expectM_0_2173S43   
0F85   CD E8 08               CALL   printStr   
0F88   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
0F92   CD E8 08               CALL   printStr   
0F95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FA4   21 10 00               LD   HL,$10   
0FA7   CD 36 08               CALL   prtdec   
0FAA   CD E8 08               CALL   printStr   
0FAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FBA   E1                     POP   hl   
0FBB   E5                     PUSH   hl   
0FBC   CD 36 08               CALL   prtdec   
0FBF   E1                     POP   hl   
0FC0   CD E8 08               CALL   printStr   
0FC3   20 28 23 00            .CSTR   " (#"   
0FC7   CD 7E 08               CALL   prthex   
0FCA   CD E8 08               CALL   printStr   
0FCD   29 0D 0A 00            .CSTR   ")\r\n"   
0FD1   76                     HALT      
0FD2   00                     .CSTR      
0FD3                EXPECTM_0_2173S43:      
0FD3   E1                     POP   HL   
0FD4                          ;*Macro unroll:  test "#FF", $FF
0FD4   31 80 33               LD   SP,STACK   
0FD7   CD EF 08               CALL   init   
0FDA   CD CE 32               CALL   execStr   
0FDD   23 46 46 00            .CSTR   "#FF"   
0FE1                          ;*Macro unroll:  expect "#FF",$FF
0FE1   E1                     POP   HL   
0FE2   E5                     PUSH   HL   
0FE3   11 FF 00               LD   DE,$FF   
0FE6   B7                     OR   A   
0FE7   ED 52                  SBC   HL,DE   
0FE9   7D                     LD   A,L   
0FEA   B4                     OR   H   
0FEB   28 4E                  JR   Z,expectM_0_2174S43   
0FED   CD E8 08               CALL   printStr   
0FF0   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
0FFA   CD E8 08               CALL   printStr   
0FFD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
100C   21 FF 00               LD   HL,$FF   
100F   CD 36 08               CALL   prtdec   
1012   CD E8 08               CALL   printStr   
1015   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1022   E1                     POP   hl   
1023   E5                     PUSH   hl   
1024   CD 36 08               CALL   prtdec   
1027   E1                     POP   hl   
1028   CD E8 08               CALL   printStr   
102B   20 28 23 00            .CSTR   " (#"   
102F   CD 7E 08               CALL   prthex   
1032   CD E8 08               CALL   printStr   
1035   29 0D 0A 00            .CSTR   ")\r\n"   
1039   76                     HALT      
103A   00                     .CSTR      
103B                EXPECTM_0_2174S43:      
103B   E1                     POP   HL   
103C                          ;*Macro unroll:  test "-1 2 +",1
103C   31 80 33               LD   SP,STACK   
103F   CD EF 08               CALL   init   
1042   CD CE 32               CALL   execStr   
1045   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
104C                          ;*Macro unroll:  expect "-1 2 +",1
104C   E1                     POP   HL   
104D   E5                     PUSH   HL   
104E   11 01 00               LD   DE,1   
1051   B7                     OR   A   
1052   ED 52                  SBC   HL,DE   
1054   7D                     LD   A,L   
1055   B4                     OR   H   
1056   28 51                  JR   Z,expectM_0_2175S43   
1058   CD E8 08               CALL   printStr   
105B   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1068   CD E8 08               CALL   printStr   
106B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
107A   21 01 00               LD   HL,1   
107D   CD 36 08               CALL   prtdec   
1080   CD E8 08               CALL   printStr   
1083   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1090   E1                     POP   hl   
1091   E5                     PUSH   hl   
1092   CD 36 08               CALL   prtdec   
1095   E1                     POP   hl   
1096   CD E8 08               CALL   printStr   
1099   20 28 23 00            .CSTR   " (#"   
109D   CD 7E 08               CALL   prthex   
10A0   CD E8 08               CALL   printStr   
10A3   29 0D 0A 00            .CSTR   ")\r\n"   
10A7   76                     HALT      
10A8   00                     .CSTR      
10A9                EXPECTM_0_2175S43:      
10A9   E1                     POP   HL   
10AA                          ;*Macro unroll:  test "-1 1 +",0
10AA   31 80 33               LD   SP,STACK   
10AD   CD EF 08               CALL   init   
10B0   CD CE 32               CALL   execStr   
10B3   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
10BA                          ;*Macro unroll:  expect "-1 1 +",0
10BA   E1                     POP   HL   
10BB   E5                     PUSH   HL   
10BC   11 00 00               LD   DE,0   
10BF   B7                     OR   A   
10C0   ED 52                  SBC   HL,DE   
10C2   7D                     LD   A,L   
10C3   B4                     OR   H   
10C4   28 51                  JR   Z,expectM_0_2176S43   
10C6   CD E8 08               CALL   printStr   
10C9   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
10D6   CD E8 08               CALL   printStr   
10D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10E8   21 00 00               LD   HL,0   
10EB   CD 36 08               CALL   prtdec   
10EE   CD E8 08               CALL   printStr   
10F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10FE   E1                     POP   hl   
10FF   E5                     PUSH   hl   
1100   CD 36 08               CALL   prtdec   
1103   E1                     POP   hl   
1104   CD E8 08               CALL   printStr   
1107   20 28 23 00            .CSTR   " (#"   
110B   CD 7E 08               CALL   prthex   
110E   CD E8 08               CALL   printStr   
1111   29 0D 0A 00            .CSTR   ")\r\n"   
1115   76                     HALT      
1116   00                     .CSTR      
1117                EXPECTM_0_2176S43:      
1117   E1                     POP   HL   
1118                          ;*Macro unroll:  test "1 2 +", 3
1118   31 80 33               LD   SP,STACK   
111B   CD EF 08               CALL   init   
111E   CD CE 32               CALL   execStr   
1121   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1127                          ;*Macro unroll:  expect "1 2 +",3
1127   E1                     POP   HL   
1128   E5                     PUSH   HL   
1129   11 03 00               LD   DE,3   
112C   B7                     OR   A   
112D   ED 52                  SBC   HL,DE   
112F   7D                     LD   A,L   
1130   B4                     OR   H   
1131   28 50                  JR   Z,expectM_0_2177S43   
1133   CD E8 08               CALL   printStr   
1136   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1142   CD E8 08               CALL   printStr   
1145   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1154   21 03 00               LD   HL,3   
1157   CD 36 08               CALL   prtdec   
115A   CD E8 08               CALL   printStr   
115D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
116A   E1                     POP   hl   
116B   E5                     PUSH   hl   
116C   CD 36 08               CALL   prtdec   
116F   E1                     POP   hl   
1170   CD E8 08               CALL   printStr   
1173   20 28 23 00            .CSTR   " (#"   
1177   CD 7E 08               CALL   prthex   
117A   CD E8 08               CALL   printStr   
117D   29 0D 0A 00            .CSTR   ")\r\n"   
1181   76                     HALT      
1182   00                     .CSTR      
1183                EXPECTM_0_2177S43:      
1183   E1                     POP   HL   
1184                          ;*Macro unroll:  test "4 1 2 +", 3
1184   31 80 33               LD   SP,STACK   
1187   CD EF 08               CALL   init   
118A   CD CE 32               CALL   execStr   
118D   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1195                          ;*Macro unroll:  expect "4 1 2 +",3
1195   E1                     POP   HL   
1196   E5                     PUSH   HL   
1197   11 03 00               LD   DE,3   
119A   B7                     OR   A   
119B   ED 52                  SBC   HL,DE   
119D   7D                     LD   A,L   
119E   B4                     OR   H   
119F   28 52                  JR   Z,expectM_0_2178S43   
11A1   CD E8 08               CALL   printStr   
11A4   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
11B2   CD E8 08               CALL   printStr   
11B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11C4   21 03 00               LD   HL,3   
11C7   CD 36 08               CALL   prtdec   
11CA   CD E8 08               CALL   printStr   
11CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11DA   E1                     POP   hl   
11DB   E5                     PUSH   hl   
11DC   CD 36 08               CALL   prtdec   
11DF   E1                     POP   hl   
11E0   CD E8 08               CALL   printStr   
11E3   20 28 23 00            .CSTR   " (#"   
11E7   CD 7E 08               CALL   prthex   
11EA   CD E8 08               CALL   printStr   
11ED   29 0D 0A 00            .CSTR   ")\r\n"   
11F1   76                     HALT      
11F2   00                     .CSTR      
11F3                EXPECTM_0_2178S43:      
11F3   E1                     POP   HL   
11F4                          ;*Macro unroll:  test "1 2 +", 3
11F4   31 80 33               LD   SP,STACK   
11F7   CD EF 08               CALL   init   
11FA   CD CE 32               CALL   execStr   
11FD   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1203                          ;*Macro unroll:  expect "1 2 +",3
1203   E1                     POP   HL   
1204   E5                     PUSH   HL   
1205   11 03 00               LD   DE,3   
1208   B7                     OR   A   
1209   ED 52                  SBC   HL,DE   
120B   7D                     LD   A,L   
120C   B4                     OR   H   
120D   28 50                  JR   Z,expectM_0_2179S43   
120F   CD E8 08               CALL   printStr   
1212   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
121E   CD E8 08               CALL   printStr   
1221   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1230   21 03 00               LD   HL,3   
1233   CD 36 08               CALL   prtdec   
1236   CD E8 08               CALL   printStr   
1239   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1246   E1                     POP   hl   
1247   E5                     PUSH   hl   
1248   CD 36 08               CALL   prtdec   
124B   E1                     POP   hl   
124C   CD E8 08               CALL   printStr   
124F   20 28 23 00            .CSTR   " (#"   
1253   CD 7E 08               CALL   prthex   
1256   CD E8 08               CALL   printStr   
1259   29 0D 0A 00            .CSTR   ")\r\n"   
125D   76                     HALT      
125E   00                     .CSTR      
125F                EXPECTM_0_2179S43:      
125F   E1                     POP   HL   
1260                          ;*Macro unroll:  test "123 456 +", 123+456
1260   31 80 33               LD   SP,STACK   
1263   CD EF 08               CALL   init   
1266   CD CE 32               CALL   execStr   
1269   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1273                          ;*Macro unroll:  expect "123 456 +",123+456
1273   E1                     POP   HL   
1274   E5                     PUSH   HL   
1275   11 43 02               LD   DE,123+456   
1278   B7                     OR   A   
1279   ED 52                  SBC   HL,DE   
127B   7D                     LD   A,L   
127C   B4                     OR   H   
127D   28 54                  JR   Z,expectM_0_2180S43   
127F   CD E8 08               CALL   printStr   
1282   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1292   CD E8 08               CALL   printStr   
1295   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12A4   21 43 02               LD   HL,123+456   
12A7   CD 36 08               CALL   prtdec   
12AA   CD E8 08               CALL   printStr   
12AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12BA   E1                     POP   hl   
12BB   E5                     PUSH   hl   
12BC   CD 36 08               CALL   prtdec   
12BF   E1                     POP   hl   
12C0   CD E8 08               CALL   printStr   
12C3   20 28 23 00            .CSTR   " (#"   
12C7   CD 7E 08               CALL   prthex   
12CA   CD E8 08               CALL   printStr   
12CD   29 0D 0A 00            .CSTR   ")\r\n"   
12D1   76                     HALT      
12D2   00                     .CSTR      
12D3                EXPECTM_0_2180S43:      
12D3   E1                     POP   HL   
12D4                          ;*Macro unroll:  test "64 128 +", 64+128
12D4   31 80 33               LD   SP,STACK   
12D7   CD EF 08               CALL   init   
12DA   CD CE 32               CALL   execStr   
12DD   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
12E6                          ;*Macro unroll:  expect "64 128 +",64+128
12E6   E1                     POP   HL   
12E7   E5                     PUSH   HL   
12E8   11 C0 00               LD   DE,64+128   
12EB   B7                     OR   A   
12EC   ED 52                  SBC   HL,DE   
12EE   7D                     LD   A,L   
12EF   B4                     OR   H   
12F0   28 53                  JR   Z,expectM_0_2181S43   
12F2   CD E8 08               CALL   printStr   
12F5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1304   CD E8 08               CALL   printStr   
1307   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1316   21 C0 00               LD   HL,64+128   
1319   CD 36 08               CALL   prtdec   
131C   CD E8 08               CALL   printStr   
131F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
132C   E1                     POP   hl   
132D   E5                     PUSH   hl   
132E   CD 36 08               CALL   prtdec   
1331   E1                     POP   hl   
1332   CD E8 08               CALL   printStr   
1335   20 28 23 00            .CSTR   " (#"   
1339   CD 7E 08               CALL   prthex   
133C   CD E8 08               CALL   printStr   
133F   29 0D 0A 00            .CSTR   ")\r\n"   
1343   76                     HALT      
1344   00                     .CSTR      
1345                EXPECTM_0_2181S43:      
1345   E1                     POP   HL   
1346                          ;*Macro unroll:  test "-1 -1 -",0
1346   31 80 33               LD   SP,STACK   
1349   CD EF 08               CALL   init   
134C   CD CE 32               CALL   execStr   
134F   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
1357                          ;*Macro unroll:  expect "-1 -1 -",0
1357   E1                     POP   HL   
1358   E5                     PUSH   HL   
1359   11 00 00               LD   DE,0   
135C   B7                     OR   A   
135D   ED 52                  SBC   HL,DE   
135F   7D                     LD   A,L   
1360   B4                     OR   H   
1361   28 52                  JR   Z,expectM_0_2182S43   
1363   CD E8 08               CALL   printStr   
1366   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1374   CD E8 08               CALL   printStr   
1377   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1386   21 00 00               LD   HL,0   
1389   CD 36 08               CALL   prtdec   
138C   CD E8 08               CALL   printStr   
138F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
139C   E1                     POP   hl   
139D   E5                     PUSH   hl   
139E   CD 36 08               CALL   prtdec   
13A1   E1                     POP   hl   
13A2   CD E8 08               CALL   printStr   
13A5   20 28 23 00            .CSTR   " (#"   
13A9   CD 7E 08               CALL   prthex   
13AC   CD E8 08               CALL   printStr   
13AF   29 0D 0A 00            .CSTR   ")\r\n"   
13B3   76                     HALT      
13B4   00                     .CSTR      
13B5                EXPECTM_0_2182S43:      
13B5   E1                     POP   HL   
13B6                          ;*Macro unroll:  test "5 3 -", 2
13B6   31 80 33               LD   SP,STACK   
13B9   CD EF 08               CALL   init   
13BC   CD CE 32               CALL   execStr   
13BF   35 20 33 20 2D 00      .CSTR   "5 3 -"   
13C5                          ;*Macro unroll:  expect "5 3 -",2
13C5   E1                     POP   HL   
13C6   E5                     PUSH   HL   
13C7   11 02 00               LD   DE,2   
13CA   B7                     OR   A   
13CB   ED 52                  SBC   HL,DE   
13CD   7D                     LD   A,L   
13CE   B4                     OR   H   
13CF   28 50                  JR   Z,expectM_0_2183S43   
13D1   CD E8 08               CALL   printStr   
13D4   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
13E0   CD E8 08               CALL   printStr   
13E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13F2   21 02 00               LD   HL,2   
13F5   CD 36 08               CALL   prtdec   
13F8   CD E8 08               CALL   printStr   
13FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1408   E1                     POP   hl   
1409   E5                     PUSH   hl   
140A   CD 36 08               CALL   prtdec   
140D   E1                     POP   hl   
140E   CD E8 08               CALL   printStr   
1411   20 28 23 00            .CSTR   " (#"   
1415   CD 7E 08               CALL   prthex   
1418   CD E8 08               CALL   printStr   
141B   29 0D 0A 00            .CSTR   ")\r\n"   
141F   76                     HALT      
1420   00                     .CSTR      
1421                EXPECTM_0_2183S43:      
1421   E1                     POP   HL   
1422                          ;*Macro unroll:  test "3 5 &", 1
1422   31 80 33               LD   SP,STACK   
1425   CD EF 08               CALL   init   
1428   CD CE 32               CALL   execStr   
142B   33 20 35 20 26 00      .CSTR   "3 5 &"   
1431                          ;*Macro unroll:  expect "3 5 &",1
1431   E1                     POP   HL   
1432   E5                     PUSH   HL   
1433   11 01 00               LD   DE,1   
1436   B7                     OR   A   
1437   ED 52                  SBC   HL,DE   
1439   7D                     LD   A,L   
143A   B4                     OR   H   
143B   28 50                  JR   Z,expectM_0_2184S43   
143D   CD E8 08               CALL   printStr   
1440   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
144C   CD E8 08               CALL   printStr   
144F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
145E   21 01 00               LD   HL,1   
1461   CD 36 08               CALL   prtdec   
1464   CD E8 08               CALL   printStr   
1467   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1474   E1                     POP   hl   
1475   E5                     PUSH   hl   
1476   CD 36 08               CALL   prtdec   
1479   E1                     POP   hl   
147A   CD E8 08               CALL   printStr   
147D   20 28 23 00            .CSTR   " (#"   
1481   CD 7E 08               CALL   prthex   
1484   CD E8 08               CALL   printStr   
1487   29 0D 0A 00            .CSTR   ")\r\n"   
148B   76                     HALT      
148C   00                     .CSTR      
148D                EXPECTM_0_2184S43:      
148D   E1                     POP   HL   
148E                          ;*Macro unroll:  test "3 5 |", 7
148E   31 80 33               LD   SP,STACK   
1491   CD EF 08               CALL   init   
1494   CD CE 32               CALL   execStr   
1497   33 20 35 20 7C 00      .CSTR   "3 5 |"   
149D                          ;*Macro unroll:  expect "3 5 |",7
149D   E1                     POP   HL   
149E   E5                     PUSH   HL   
149F   11 07 00               LD   DE,7   
14A2   B7                     OR   A   
14A3   ED 52                  SBC   HL,DE   
14A5   7D                     LD   A,L   
14A6   B4                     OR   H   
14A7   28 50                  JR   Z,expectM_0_2185S43   
14A9   CD E8 08               CALL   printStr   
14AC   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
14B8   CD E8 08               CALL   printStr   
14BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14CA   21 07 00               LD   HL,7   
14CD   CD 36 08               CALL   prtdec   
14D0   CD E8 08               CALL   printStr   
14D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14E0   E1                     POP   hl   
14E1   E5                     PUSH   hl   
14E2   CD 36 08               CALL   prtdec   
14E5   E1                     POP   hl   
14E6   CD E8 08               CALL   printStr   
14E9   20 28 23 00            .CSTR   " (#"   
14ED   CD 7E 08               CALL   prthex   
14F0   CD E8 08               CALL   printStr   
14F3   29 0D 0A 00            .CSTR   ")\r\n"   
14F7   76                     HALT      
14F8   00                     .CSTR      
14F9                EXPECTM_0_2185S43:      
14F9   E1                     POP   HL   
14FA                          ;*Macro unroll:  test "2 3 *", 6
14FA   31 80 33               LD   SP,STACK   
14FD   CD EF 08               CALL   init   
1500   CD CE 32               CALL   execStr   
1503   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1509                          ;*Macro unroll:  expect "2 3 *",6
1509   E1                     POP   HL   
150A   E5                     PUSH   HL   
150B   11 06 00               LD   DE,6   
150E   B7                     OR   A   
150F   ED 52                  SBC   HL,DE   
1511   7D                     LD   A,L   
1512   B4                     OR   H   
1513   28 50                  JR   Z,expectM_0_2186S43   
1515   CD E8 08               CALL   printStr   
1518   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1524   CD E8 08               CALL   printStr   
1527   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1536   21 06 00               LD   HL,6   
1539   CD 36 08               CALL   prtdec   
153C   CD E8 08               CALL   printStr   
153F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
154C   E1                     POP   hl   
154D   E5                     PUSH   hl   
154E   CD 36 08               CALL   prtdec   
1551   E1                     POP   hl   
1552   CD E8 08               CALL   printStr   
1555   20 28 23 00            .CSTR   " (#"   
1559   CD 7E 08               CALL   prthex   
155C   CD E8 08               CALL   printStr   
155F   29 0D 0A 00            .CSTR   ")\r\n"   
1563   76                     HALT      
1564   00                     .CSTR      
1565                EXPECTM_0_2186S43:      
1565   E1                     POP   HL   
1566                          ;*Macro unroll:  test "1 2 3 + *", 5
1566   31 80 33               LD   SP,STACK   
1569   CD EF 08               CALL   init   
156C   CD CE 32               CALL   execStr   
156F   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1579                          ;*Macro unroll:  expect "1 2 3 + *",5
1579   E1                     POP   HL   
157A   E5                     PUSH   HL   
157B   11 05 00               LD   DE,5   
157E   B7                     OR   A   
157F   ED 52                  SBC   HL,DE   
1581   7D                     LD   A,L   
1582   B4                     OR   H   
1583   28 54                  JR   Z,expectM_0_2187S43   
1585   CD E8 08               CALL   printStr   
1588   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1598   CD E8 08               CALL   printStr   
159B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15AA   21 05 00               LD   HL,5   
15AD   CD 36 08               CALL   prtdec   
15B0   CD E8 08               CALL   printStr   
15B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15C0   E1                     POP   hl   
15C1   E5                     PUSH   hl   
15C2   CD 36 08               CALL   prtdec   
15C5   E1                     POP   hl   
15C6   CD E8 08               CALL   printStr   
15C9   20 28 23 00            .CSTR   " (#"   
15CD   CD 7E 08               CALL   prthex   
15D0   CD E8 08               CALL   printStr   
15D3   29 0D 0A 00            .CSTR   ")\r\n"   
15D7   76                     HALT      
15D8   00                     .CSTR      
15D9                EXPECTM_0_2187S43:      
15D9   E1                     POP   HL   
15DA                          ;*Macro unroll:  test "7 3 /", 2
15DA   31 80 33               LD   SP,STACK   
15DD   CD EF 08               CALL   init   
15E0   CD CE 32               CALL   execStr   
15E3   37 20 33 20 2F 00      .CSTR   "7 3 /"   
15E9                          ;*Macro unroll:  expect "7 3 /",2
15E9   E1                     POP   HL   
15EA   E5                     PUSH   HL   
15EB   11 02 00               LD   DE,2   
15EE   B7                     OR   A   
15EF   ED 52                  SBC   HL,DE   
15F1   7D                     LD   A,L   
15F2   B4                     OR   H   
15F3   28 50                  JR   Z,expectM_0_2188S43   
15F5   CD E8 08               CALL   printStr   
15F8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1604   CD E8 08               CALL   printStr   
1607   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1616   21 02 00               LD   HL,2   
1619   CD 36 08               CALL   prtdec   
161C   CD E8 08               CALL   printStr   
161F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
162C   E1                     POP   hl   
162D   E5                     PUSH   hl   
162E   CD 36 08               CALL   prtdec   
1631   E1                     POP   hl   
1632   CD E8 08               CALL   printStr   
1635   20 28 23 00            .CSTR   " (#"   
1639   CD 7E 08               CALL   prthex   
163C   CD E8 08               CALL   printStr   
163F   29 0D 0A 00            .CSTR   ")\r\n"   
1643   76                     HALT      
1644   00                     .CSTR      
1645                EXPECTM_0_2188S43:      
1645   E1                     POP   HL   
1646                          ;*Macro unroll:  test "7 3 / _", 1
1646   31 80 33               LD   SP,STACK   
1649   CD EF 08               CALL   init   
164C   CD CE 32               CALL   execStr   
164F   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1657                          ;*Macro unroll:  expect "7 3 / _",1
1657   E1                     POP   HL   
1658   E5                     PUSH   HL   
1659   11 01 00               LD   DE,1   
165C   B7                     OR   A   
165D   ED 52                  SBC   HL,DE   
165F   7D                     LD   A,L   
1660   B4                     OR   H   
1661   28 52                  JR   Z,expectM_0_2189S43   
1663   CD E8 08               CALL   printStr   
1666   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1674   CD E8 08               CALL   printStr   
1677   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1686   21 01 00               LD   HL,1   
1689   CD 36 08               CALL   prtdec   
168C   CD E8 08               CALL   printStr   
168F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
169C   E1                     POP   hl   
169D   E5                     PUSH   hl   
169E   CD 36 08               CALL   prtdec   
16A1   E1                     POP   hl   
16A2   CD E8 08               CALL   printStr   
16A5   20 28 23 00            .CSTR   " (#"   
16A9   CD 7E 08               CALL   prthex   
16AC   CD E8 08               CALL   printStr   
16AF   29 0D 0A 00            .CSTR   ")\r\n"   
16B3   76                     HALT      
16B4   00                     .CSTR      
16B5                EXPECTM_0_2189S43:      
16B5   E1                     POP   HL   
16B6                          ;*Macro unroll:  test "2 3 ==", FALSE
16B6   31 80 33               LD   SP,STACK   
16B9   CD EF 08               CALL   init   
16BC   CD CE 32               CALL   execStr   
16BF   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
16C6                          ;*Macro unroll:  expect "2 3 ==",FALSE
16C6   E1                     POP   HL   
16C7   E5                     PUSH   HL   
16C8   11 00 00               LD   DE,FALSE   
16CB   B7                     OR   A   
16CC   ED 52                  SBC   HL,DE   
16CE   7D                     LD   A,L   
16CF   B4                     OR   H   
16D0   28 51                  JR   Z,expectM_0_2190S43   
16D2   CD E8 08               CALL   printStr   
16D5   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
16E2   CD E8 08               CALL   printStr   
16E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16F4   21 00 00               LD   HL,FALSE   
16F7   CD 36 08               CALL   prtdec   
16FA   CD E8 08               CALL   printStr   
16FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
170A   E1                     POP   hl   
170B   E5                     PUSH   hl   
170C   CD 36 08               CALL   prtdec   
170F   E1                     POP   hl   
1710   CD E8 08               CALL   printStr   
1713   20 28 23 00            .CSTR   " (#"   
1717   CD 7E 08               CALL   prthex   
171A   CD E8 08               CALL   printStr   
171D   29 0D 0A 00            .CSTR   ")\r\n"   
1721   76                     HALT      
1722   00                     .CSTR      
1723                EXPECTM_0_2190S43:      
1723   E1                     POP   HL   
1724                          ;*Macro unroll:  test "3 3 ==", TRUE
1724   31 80 33               LD   SP,STACK   
1727   CD EF 08               CALL   init   
172A   CD CE 32               CALL   execStr   
172D   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1734                          ;*Macro unroll:  expect "3 3 ==",TRUE
1734   E1                     POP   HL   
1735   E5                     PUSH   HL   
1736   11 FF FF               LD   DE,TRUE   
1739   B7                     OR   A   
173A   ED 52                  SBC   HL,DE   
173C   7D                     LD   A,L   
173D   B4                     OR   H   
173E   28 51                  JR   Z,expectM_0_2191S43   
1740   CD E8 08               CALL   printStr   
1743   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1750   CD E8 08               CALL   printStr   
1753   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1762   21 FF FF               LD   HL,TRUE   
1765   CD 36 08               CALL   prtdec   
1768   CD E8 08               CALL   printStr   
176B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1778   E1                     POP   hl   
1779   E5                     PUSH   hl   
177A   CD 36 08               CALL   prtdec   
177D   E1                     POP   hl   
177E   CD E8 08               CALL   printStr   
1781   20 28 23 00            .CSTR   " (#"   
1785   CD 7E 08               CALL   prthex   
1788   CD E8 08               CALL   printStr   
178B   29 0D 0A 00            .CSTR   ")\r\n"   
178F   76                     HALT      
1790   00                     .CSTR      
1791                EXPECTM_0_2191S43:      
1791   E1                     POP   HL   
1792                          ;*Macro unroll:  test "1 2 <", TRUE
1792   31 80 33               LD   SP,STACK   
1795   CD EF 08               CALL   init   
1798   CD CE 32               CALL   execStr   
179B   31 20 32 20 3C 00      .CSTR   "1 2 <"   
17A1                          ;*Macro unroll:  expect "1 2 <",TRUE
17A1   E1                     POP   HL   
17A2   E5                     PUSH   HL   
17A3   11 FF FF               LD   DE,TRUE   
17A6   B7                     OR   A   
17A7   ED 52                  SBC   HL,DE   
17A9   7D                     LD   A,L   
17AA   B4                     OR   H   
17AB   28 50                  JR   Z,expectM_0_2192S43   
17AD   CD E8 08               CALL   printStr   
17B0   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
17BC   CD E8 08               CALL   printStr   
17BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17CE   21 FF FF               LD   HL,TRUE   
17D1   CD 36 08               CALL   prtdec   
17D4   CD E8 08               CALL   printStr   
17D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17E4   E1                     POP   hl   
17E5   E5                     PUSH   hl   
17E6   CD 36 08               CALL   prtdec   
17E9   E1                     POP   hl   
17EA   CD E8 08               CALL   printStr   
17ED   20 28 23 00            .CSTR   " (#"   
17F1   CD 7E 08               CALL   prthex   
17F4   CD E8 08               CALL   printStr   
17F7   29 0D 0A 00            .CSTR   ")\r\n"   
17FB   76                     HALT      
17FC   00                     .CSTR      
17FD                EXPECTM_0_2192S43:      
17FD   E1                     POP   HL   
17FE                          ;*Macro unroll:  test "2 1 <", FALSE
17FE   31 80 33               LD   SP,STACK   
1801   CD EF 08               CALL   init   
1804   CD CE 32               CALL   execStr   
1807   32 20 31 20 3C 00      .CSTR   "2 1 <"   
180D                          ;*Macro unroll:  expect "2 1 <",FALSE
180D   E1                     POP   HL   
180E   E5                     PUSH   HL   
180F   11 00 00               LD   DE,FALSE   
1812   B7                     OR   A   
1813   ED 52                  SBC   HL,DE   
1815   7D                     LD   A,L   
1816   B4                     OR   H   
1817   28 50                  JR   Z,expectM_0_2193S43   
1819   CD E8 08               CALL   printStr   
181C   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1828   CD E8 08               CALL   printStr   
182B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
183A   21 00 00               LD   HL,FALSE   
183D   CD 36 08               CALL   prtdec   
1840   CD E8 08               CALL   printStr   
1843   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1850   E1                     POP   hl   
1851   E5                     PUSH   hl   
1852   CD 36 08               CALL   prtdec   
1855   E1                     POP   hl   
1856   CD E8 08               CALL   printStr   
1859   20 28 23 00            .CSTR   " (#"   
185D   CD 7E 08               CALL   prthex   
1860   CD E8 08               CALL   printStr   
1863   29 0D 0A 00            .CSTR   ")\r\n"   
1867   76                     HALT      
1868   00                     .CSTR      
1869                EXPECTM_0_2193S43:      
1869   E1                     POP   HL   
186A                          ;*Macro unroll:  test "2 3 <", TRUE
186A   31 80 33               LD   SP,STACK   
186D   CD EF 08               CALL   init   
1870   CD CE 32               CALL   execStr   
1873   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1879                          ;*Macro unroll:  expect "2 3 <",TRUE
1879   E1                     POP   HL   
187A   E5                     PUSH   HL   
187B   11 FF FF               LD   DE,TRUE   
187E   B7                     OR   A   
187F   ED 52                  SBC   HL,DE   
1881   7D                     LD   A,L   
1882   B4                     OR   H   
1883   28 50                  JR   Z,expectM_0_2194S43   
1885   CD E8 08               CALL   printStr   
1888   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1894   CD E8 08               CALL   printStr   
1897   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18A6   21 FF FF               LD   HL,TRUE   
18A9   CD 36 08               CALL   prtdec   
18AC   CD E8 08               CALL   printStr   
18AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18BC   E1                     POP   hl   
18BD   E5                     PUSH   hl   
18BE   CD 36 08               CALL   prtdec   
18C1   E1                     POP   hl   
18C2   CD E8 08               CALL   printStr   
18C5   20 28 23 00            .CSTR   " (#"   
18C9   CD 7E 08               CALL   prthex   
18CC   CD E8 08               CALL   printStr   
18CF   29 0D 0A 00            .CSTR   ")\r\n"   
18D3   76                     HALT      
18D4   00                     .CSTR      
18D5                EXPECTM_0_2194S43:      
18D5   E1                     POP   HL   
18D6                          ;*Macro unroll:  test "3 3 <", FALSE
18D6   31 80 33               LD   SP,STACK   
18D9   CD EF 08               CALL   init   
18DC   CD CE 32               CALL   execStr   
18DF   33 20 33 20 3C 00      .CSTR   "3 3 <"   
18E5                          ;*Macro unroll:  expect "3 3 <",FALSE
18E5   E1                     POP   HL   
18E6   E5                     PUSH   HL   
18E7   11 00 00               LD   DE,FALSE   
18EA   B7                     OR   A   
18EB   ED 52                  SBC   HL,DE   
18ED   7D                     LD   A,L   
18EE   B4                     OR   H   
18EF   28 50                  JR   Z,expectM_0_2195S43   
18F1   CD E8 08               CALL   printStr   
18F4   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1900   CD E8 08               CALL   printStr   
1903   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1912   21 00 00               LD   HL,FALSE   
1915   CD 36 08               CALL   prtdec   
1918   CD E8 08               CALL   printStr   
191B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1928   E1                     POP   hl   
1929   E5                     PUSH   hl   
192A   CD 36 08               CALL   prtdec   
192D   E1                     POP   hl   
192E   CD E8 08               CALL   printStr   
1931   20 28 23 00            .CSTR   " (#"   
1935   CD 7E 08               CALL   prthex   
1938   CD E8 08               CALL   printStr   
193B   29 0D 0A 00            .CSTR   ")\r\n"   
193F   76                     HALT      
1940   00                     .CSTR      
1941                EXPECTM_0_2195S43:      
1941   E1                     POP   HL   
1942                          ;*Macro unroll:  test "1 2 >", FALSE
1942   31 80 33               LD   SP,STACK   
1945   CD EF 08               CALL   init   
1948   CD CE 32               CALL   execStr   
194B   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1951                          ;*Macro unroll:  expect "1 2 >",FALSE
1951   E1                     POP   HL   
1952   E5                     PUSH   HL   
1953   11 00 00               LD   DE,FALSE   
1956   B7                     OR   A   
1957   ED 52                  SBC   HL,DE   
1959   7D                     LD   A,L   
195A   B4                     OR   H   
195B   28 50                  JR   Z,expectM_0_2196S43   
195D   CD E8 08               CALL   printStr   
1960   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
196C   CD E8 08               CALL   printStr   
196F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
197E   21 00 00               LD   HL,FALSE   
1981   CD 36 08               CALL   prtdec   
1984   CD E8 08               CALL   printStr   
1987   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1994   E1                     POP   hl   
1995   E5                     PUSH   hl   
1996   CD 36 08               CALL   prtdec   
1999   E1                     POP   hl   
199A   CD E8 08               CALL   printStr   
199D   20 28 23 00            .CSTR   " (#"   
19A1   CD 7E 08               CALL   prthex   
19A4   CD E8 08               CALL   printStr   
19A7   29 0D 0A 00            .CSTR   ")\r\n"   
19AB   76                     HALT      
19AC   00                     .CSTR      
19AD                EXPECTM_0_2196S43:      
19AD   E1                     POP   HL   
19AE                          ;*Macro unroll:  test "2 1 >", TRUE
19AE   31 80 33               LD   SP,STACK   
19B1   CD EF 08               CALL   init   
19B4   CD CE 32               CALL   execStr   
19B7   32 20 31 20 3E 00      .CSTR   "2 1 >"   
19BD                          ;*Macro unroll:  expect "2 1 >",TRUE
19BD   E1                     POP   HL   
19BE   E5                     PUSH   HL   
19BF   11 FF FF               LD   DE,TRUE   
19C2   B7                     OR   A   
19C3   ED 52                  SBC   HL,DE   
19C5   7D                     LD   A,L   
19C6   B4                     OR   H   
19C7   28 50                  JR   Z,expectM_0_2197S43   
19C9   CD E8 08               CALL   printStr   
19CC   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
19D8   CD E8 08               CALL   printStr   
19DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19EA   21 FF FF               LD   HL,TRUE   
19ED   CD 36 08               CALL   prtdec   
19F0   CD E8 08               CALL   printStr   
19F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A00   E1                     POP   hl   
1A01   E5                     PUSH   hl   
1A02   CD 36 08               CALL   prtdec   
1A05   E1                     POP   hl   
1A06   CD E8 08               CALL   printStr   
1A09   20 28 23 00            .CSTR   " (#"   
1A0D   CD 7E 08               CALL   prthex   
1A10   CD E8 08               CALL   printStr   
1A13   29 0D 0A 00            .CSTR   ")\r\n"   
1A17   76                     HALT      
1A18   00                     .CSTR      
1A19                EXPECTM_0_2197S43:      
1A19   E1                     POP   HL   
1A1A                          ;*Macro unroll:  test "3 3 >", FALSE
1A1A   31 80 33               LD   SP,STACK   
1A1D   CD EF 08               CALL   init   
1A20   CD CE 32               CALL   execStr   
1A23   33 20 33 20 3E 00      .CSTR   "3 3 >"   
1A29                          ;*Macro unroll:  expect "3 3 >",FALSE
1A29   E1                     POP   HL   
1A2A   E5                     PUSH   HL   
1A2B   11 00 00               LD   DE,FALSE   
1A2E   B7                     OR   A   
1A2F   ED 52                  SBC   HL,DE   
1A31   7D                     LD   A,L   
1A32   B4                     OR   H   
1A33   28 50                  JR   Z,expectM_0_2198S43   
1A35   CD E8 08               CALL   printStr   
1A38   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
1A44   CD E8 08               CALL   printStr   
1A47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A56   21 00 00               LD   HL,FALSE   
1A59   CD 36 08               CALL   prtdec   
1A5C   CD E8 08               CALL   printStr   
1A5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A6C   E1                     POP   hl   
1A6D   E5                     PUSH   hl   
1A6E   CD 36 08               CALL   prtdec   
1A71   E1                     POP   hl   
1A72   CD E8 08               CALL   printStr   
1A75   20 28 23 00            .CSTR   " (#"   
1A79   CD 7E 08               CALL   prthex   
1A7C   CD E8 08               CALL   printStr   
1A7F   29 0D 0A 00            .CSTR   ")\r\n"   
1A83   76                     HALT      
1A84   00                     .CSTR      
1A85                EXPECTM_0_2198S43:      
1A85   E1                     POP   HL   
1A86                          ;*Macro unroll:  test "4 3 >", TRUE
1A86   31 80 33               LD   SP,STACK   
1A89   CD EF 08               CALL   init   
1A8C   CD CE 32               CALL   execStr   
1A8F   34 20 33 20 3E 00      .CSTR   "4 3 >"   
1A95                          ;*Macro unroll:  expect "4 3 >",TRUE
1A95   E1                     POP   HL   
1A96   E5                     PUSH   HL   
1A97   11 FF FF               LD   DE,TRUE   
1A9A   B7                     OR   A   
1A9B   ED 52                  SBC   HL,DE   
1A9D   7D                     LD   A,L   
1A9E   B4                     OR   H   
1A9F   28 50                  JR   Z,expectM_0_2199S43   
1AA1   CD E8 08               CALL   printStr   
1AA4   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
1AB0   CD E8 08               CALL   printStr   
1AB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AC2   21 FF FF               LD   HL,TRUE   
1AC5   CD 36 08               CALL   prtdec   
1AC8   CD E8 08               CALL   printStr   
1ACB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AD8   E1                     POP   hl   
1AD9   E5                     PUSH   hl   
1ADA   CD 36 08               CALL   prtdec   
1ADD   E1                     POP   hl   
1ADE   CD E8 08               CALL   printStr   
1AE1   20 28 23 00            .CSTR   " (#"   
1AE5   CD 7E 08               CALL   prthex   
1AE8   CD E8 08               CALL   printStr   
1AEB   29 0D 0A 00            .CSTR   ")\r\n"   
1AEF   76                     HALT      
1AF0   00                     .CSTR      
1AF1                EXPECTM_0_2199S43:      
1AF1   E1                     POP   HL   
1AF2                          ;*Macro unroll:  test "2 2 <=", TRUE
1AF2   31 80 33               LD   SP,STACK   
1AF5   CD EF 08               CALL   init   
1AF8   CD CE 32               CALL   execStr   
1AFB   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
1B02                          ;*Macro unroll:  expect "2 2 <=",TRUE
1B02   E1                     POP   HL   
1B03   E5                     PUSH   HL   
1B04   11 FF FF               LD   DE,TRUE   
1B07   B7                     OR   A   
1B08   ED 52                  SBC   HL,DE   
1B0A   7D                     LD   A,L   
1B0B   B4                     OR   H   
1B0C   28 51                  JR   Z,expectM_0_2200S43   
1B0E   CD E8 08               CALL   printStr   
1B11   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
1B1E   CD E8 08               CALL   printStr   
1B21   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B30   21 FF FF               LD   HL,TRUE   
1B33   CD 36 08               CALL   prtdec   
1B36   CD E8 08               CALL   printStr   
1B39   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B46   E1                     POP   hl   
1B47   E5                     PUSH   hl   
1B48   CD 36 08               CALL   prtdec   
1B4B   E1                     POP   hl   
1B4C   CD E8 08               CALL   printStr   
1B4F   20 28 23 00            .CSTR   " (#"   
1B53   CD 7E 08               CALL   prthex   
1B56   CD E8 08               CALL   printStr   
1B59   29 0D 0A 00            .CSTR   ")\r\n"   
1B5D   76                     HALT      
1B5E   00                     .CSTR      
1B5F                EXPECTM_0_2200S43:      
1B5F   E1                     POP   HL   
1B60                          ;*Macro unroll:  test "2 2 >=", TRUE
1B60   31 80 33               LD   SP,STACK   
1B63   CD EF 08               CALL   init   
1B66   CD CE 32               CALL   execStr   
1B69   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
1B70                          ;*Macro unroll:  expect "2 2 >=",TRUE
1B70   E1                     POP   HL   
1B71   E5                     PUSH   HL   
1B72   11 FF FF               LD   DE,TRUE   
1B75   B7                     OR   A   
1B76   ED 52                  SBC   HL,DE   
1B78   7D                     LD   A,L   
1B79   B4                     OR   H   
1B7A   28 51                  JR   Z,expectM_0_2201S43   
1B7C   CD E8 08               CALL   printStr   
1B7F   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
1B8C   CD E8 08               CALL   printStr   
1B8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B9E   21 FF FF               LD   HL,TRUE   
1BA1   CD 36 08               CALL   prtdec   
1BA4   CD E8 08               CALL   printStr   
1BA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BB4   E1                     POP   hl   
1BB5   E5                     PUSH   hl   
1BB6   CD 36 08               CALL   prtdec   
1BB9   E1                     POP   hl   
1BBA   CD E8 08               CALL   printStr   
1BBD   20 28 23 00            .CSTR   " (#"   
1BC1   CD 7E 08               CALL   prthex   
1BC4   CD E8 08               CALL   printStr   
1BC7   29 0D 0A 00            .CSTR   ")\r\n"   
1BCB   76                     HALT      
1BCC   00                     .CSTR      
1BCD                EXPECTM_0_2201S43:      
1BCD   E1                     POP   HL   
1BCE                          ;*Macro unroll:  test "3 1 <<", 6
1BCE   31 80 33               LD   SP,STACK   
1BD1   CD EF 08               CALL   init   
1BD4   CD CE 32               CALL   execStr   
1BD7   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
1BDE                          ;*Macro unroll:  expect "3 1 <<",6
1BDE   E1                     POP   HL   
1BDF   E5                     PUSH   HL   
1BE0   11 06 00               LD   DE,6   
1BE3   B7                     OR   A   
1BE4   ED 52                  SBC   HL,DE   
1BE6   7D                     LD   A,L   
1BE7   B4                     OR   H   
1BE8   28 51                  JR   Z,expectM_0_2202S43   
1BEA   CD E8 08               CALL   printStr   
1BED   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
1BFA   CD E8 08               CALL   printStr   
1BFD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C0C   21 06 00               LD   HL,6   
1C0F   CD 36 08               CALL   prtdec   
1C12   CD E8 08               CALL   printStr   
1C15   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C22   E1                     POP   hl   
1C23   E5                     PUSH   hl   
1C24   CD 36 08               CALL   prtdec   
1C27   E1                     POP   hl   
1C28   CD E8 08               CALL   printStr   
1C2B   20 28 23 00            .CSTR   " (#"   
1C2F   CD 7E 08               CALL   prthex   
1C32   CD E8 08               CALL   printStr   
1C35   29 0D 0A 00            .CSTR   ")\r\n"   
1C39   76                     HALT      
1C3A   00                     .CSTR      
1C3B                EXPECTM_0_2202S43:      
1C3B   E1                     POP   HL   
1C3C                          ;*Macro unroll:  test "10 1 >>", 5
1C3C   31 80 33               LD   SP,STACK   
1C3F   CD EF 08               CALL   init   
1C42   CD CE 32               CALL   execStr   
1C45   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
1C4D                          ;*Macro unroll:  expect "10 1 >>",5
1C4D   E1                     POP   HL   
1C4E   E5                     PUSH   HL   
1C4F   11 05 00               LD   DE,5   
1C52   B7                     OR   A   
1C53   ED 52                  SBC   HL,DE   
1C55   7D                     LD   A,L   
1C56   B4                     OR   H   
1C57   28 52                  JR   Z,expectM_0_2203S43   
1C59   CD E8 08               CALL   printStr   
1C5C   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
1C6A   CD E8 08               CALL   printStr   
1C6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C7C   21 05 00               LD   HL,5   
1C7F   CD 36 08               CALL   prtdec   
1C82   CD E8 08               CALL   printStr   
1C85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C92   E1                     POP   hl   
1C93   E5                     PUSH   hl   
1C94   CD 36 08               CALL   prtdec   
1C97   E1                     POP   hl   
1C98   CD E8 08               CALL   printStr   
1C9B   20 28 23 00            .CSTR   " (#"   
1C9F   CD 7E 08               CALL   prthex   
1CA2   CD E8 08               CALL   printStr   
1CA5   29 0D 0A 00            .CSTR   ")\r\n"   
1CA9   76                     HALT      
1CAA   00                     .CSTR      
1CAB                EXPECTM_0_2203S43:      
1CAB   E1                     POP   HL   
1CAC                          ;*Macro unroll:  test "1 x = x", 1
1CAC   31 80 33               LD   SP,STACK   
1CAF   CD EF 08               CALL   init   
1CB2   CD CE 32               CALL   execStr   
1CB5   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
1CBD                          ;*Macro unroll:  expect "1 x = x",1
1CBD   E1                     POP   HL   
1CBE   E5                     PUSH   HL   
1CBF   11 01 00               LD   DE,1   
1CC2   B7                     OR   A   
1CC3   ED 52                  SBC   HL,DE   
1CC5   7D                     LD   A,L   
1CC6   B4                     OR   H   
1CC7   28 52                  JR   Z,expectM_0_2204S43   
1CC9   CD E8 08               CALL   printStr   
1CCC   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
1CDA   CD E8 08               CALL   printStr   
1CDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CEC   21 01 00               LD   HL,1   
1CEF   CD 36 08               CALL   prtdec   
1CF2   CD E8 08               CALL   printStr   
1CF5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D02   E1                     POP   hl   
1D03   E5                     PUSH   hl   
1D04   CD 36 08               CALL   prtdec   
1D07   E1                     POP   hl   
1D08   CD E8 08               CALL   printStr   
1D0B   20 28 23 00            .CSTR   " (#"   
1D0F   CD 7E 08               CALL   prthex   
1D12   CD E8 08               CALL   printStr   
1D15   29 0D 0A 00            .CSTR   ")\r\n"   
1D19   76                     HALT      
1D1A   00                     .CSTR      
1D1B                EXPECTM_0_2204S43:      
1D1B   E1                     POP   HL   
1D1C                          ;*Macro unroll:  test "1{}:", 1
1D1C   31 80 33               LD   SP,STACK   
1D1F   CD EF 08               CALL   init   
1D22   CD CE 32               CALL   execStr   
1D25   31 7B 7D 3A 00         .CSTR   "1{}:"   
1D2A                          ;*Macro unroll:  expect "1{}:",1
1D2A   E1                     POP   HL   
1D2B   E5                     PUSH   HL   
1D2C   11 01 00               LD   DE,1   
1D2F   B7                     OR   A   
1D30   ED 52                  SBC   HL,DE   
1D32   7D                     LD   A,L   
1D33   B4                     OR   H   
1D34   28 4F                  JR   Z,expectM_0_2205S43   
1D36   CD E8 08               CALL   printStr   
1D39   43 6F 64 65 3A 20 31 7B 7D 3A 00 .CSTR   "Code: ","1{}:"   
1D44   CD E8 08               CALL   printStr   
1D47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D56   21 01 00               LD   HL,1   
1D59   CD 36 08               CALL   prtdec   
1D5C   CD E8 08               CALL   printStr   
1D5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D6C   E1                     POP   hl   
1D6D   E5                     PUSH   hl   
1D6E   CD 36 08               CALL   prtdec   
1D71   E1                     POP   hl   
1D72   CD E8 08               CALL   printStr   
1D75   20 28 23 00            .CSTR   " (#"   
1D79   CD 7E 08               CALL   prthex   
1D7C   CD E8 08               CALL   printStr   
1D7F   29 0D 0A 00            .CSTR   ")\r\n"   
1D83   76                     HALT      
1D84   00                     .CSTR      
1D85                EXPECTM_0_2205S43:      
1D85   E1                     POP   HL   
1D86                          ;*Macro unroll:  test "{1}:", 1
1D86   31 80 33               LD   SP,STACK   
1D89   CD EF 08               CALL   init   
1D8C   CD CE 32               CALL   execStr   
1D8F   7B 31 7D 3A 00         .CSTR   "{1}:"   
1D94                          ;*Macro unroll:  expect "{1}:",1
1D94   E1                     POP   HL   
1D95   E5                     PUSH   HL   
1D96   11 01 00               LD   DE,1   
1D99   B7                     OR   A   
1D9A   ED 52                  SBC   HL,DE   
1D9C   7D                     LD   A,L   
1D9D   B4                     OR   H   
1D9E   28 4F                  JR   Z,expectM_0_2206S43   
1DA0   CD E8 08               CALL   printStr   
1DA3   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
1DAE   CD E8 08               CALL   printStr   
1DB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DC0   21 01 00               LD   HL,1   
1DC3   CD 36 08               CALL   prtdec   
1DC6   CD E8 08               CALL   printStr   
1DC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DD6   E1                     POP   hl   
1DD7   E5                     PUSH   hl   
1DD8   CD 36 08               CALL   prtdec   
1DDB   E1                     POP   hl   
1DDC   CD E8 08               CALL   printStr   
1DDF   20 28 23 00            .CSTR   " (#"   
1DE3   CD 7E 08               CALL   prthex   
1DE6   CD E8 08               CALL   printStr   
1DE9   29 0D 0A 00            .CSTR   ")\r\n"   
1DED   76                     HALT      
1DEE   00                     .CSTR      
1DEF                EXPECTM_0_2206S43:      
1DEF   E1                     POP   HL   
1DF0                          ;*Macro unroll:  test "{{1}:}:", 1
1DF0   31 80 33               LD   SP,STACK   
1DF3   CD EF 08               CALL   init   
1DF6   CD CE 32               CALL   execStr   
1DF9   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
1E01                          ;*Macro unroll:  expect "{{1}:}:",1
1E01   E1                     POP   HL   
1E02   E5                     PUSH   HL   
1E03   11 01 00               LD   DE,1   
1E06   B7                     OR   A   
1E07   ED 52                  SBC   HL,DE   
1E09   7D                     LD   A,L   
1E0A   B4                     OR   H   
1E0B   28 52                  JR   Z,expectM_0_2207S43   
1E0D   CD E8 08               CALL   printStr   
1E10   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
1E1E   CD E8 08               CALL   printStr   
1E21   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E30   21 01 00               LD   HL,1   
1E33   CD 36 08               CALL   prtdec   
1E36   CD E8 08               CALL   printStr   
1E39   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E46   E1                     POP   hl   
1E47   E5                     PUSH   hl   
1E48   CD 36 08               CALL   prtdec   
1E4B   E1                     POP   hl   
1E4C   CD E8 08               CALL   printStr   
1E4F   20 28 23 00            .CSTR   " (#"   
1E53   CD 7E 08               CALL   prthex   
1E56   CD E8 08               CALL   printStr   
1E59   29 0D 0A 00            .CSTR   ")\r\n"   
1E5D   76                     HALT      
1E5E   00                     .CSTR      
1E5F                EXPECTM_0_2207S43:      
1E5F   E1                     POP   HL   
1E60                          ;*Macro unroll:  test "{{{1}:}:}:", 1
1E60   31 80 33               LD   SP,STACK   
1E63   CD EF 08               CALL   init   
1E66   CD CE 32               CALL   execStr   
1E69   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
1E74                          ;*Macro unroll:  expect "{{{1}:}:}:",1
1E74   E1                     POP   HL   
1E75   E5                     PUSH   HL   
1E76   11 01 00               LD   DE,1   
1E79   B7                     OR   A   
1E7A   ED 52                  SBC   HL,DE   
1E7C   7D                     LD   A,L   
1E7D   B4                     OR   H   
1E7E   28 55                  JR   Z,expectM_0_2208S43   
1E80   CD E8 08               CALL   printStr   
1E83   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
1E94   CD E8 08               CALL   printStr   
1E97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EA6   21 01 00               LD   HL,1   
1EA9   CD 36 08               CALL   prtdec   
1EAC   CD E8 08               CALL   printStr   
1EAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EBC   E1                     POP   hl   
1EBD   E5                     PUSH   hl   
1EBE   CD 36 08               CALL   prtdec   
1EC1   E1                     POP   hl   
1EC2   CD E8 08               CALL   printStr   
1EC5   20 28 23 00            .CSTR   " (#"   
1EC9   CD 7E 08               CALL   prthex   
1ECC   CD E8 08               CALL   printStr   
1ECF   29 0D 0A 00            .CSTR   ")\r\n"   
1ED3   76                     HALT      
1ED4   00                     .CSTR      
1ED5                EXPECTM_0_2208S43:      
1ED5   E1                     POP   HL   
1ED6                          ;*Macro unroll:  test "5 \\F {10} ?", 5
1ED6   31 80 33               LD   SP,STACK   
1ED9   CD EF 08               CALL   init   
1EDC   CD CE 32               CALL   execStr   
1EDF   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
1EEB                          ;*Macro unroll:  expect "5 \\F {10} ?",5
1EEB   E1                     POP   HL   
1EEC   E5                     PUSH   HL   
1EED   11 05 00               LD   DE,5   
1EF0   B7                     OR   A   
1EF1   ED 52                  SBC   HL,DE   
1EF3   7D                     LD   A,L   
1EF4   B4                     OR   H   
1EF5   28 56                  JR   Z,expectM_0_2209S43   
1EF7   CD E8 08               CALL   printStr   
1EFA   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
1F0C   CD E8 08               CALL   printStr   
1F0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F1E   21 05 00               LD   HL,5   
1F21   CD 36 08               CALL   prtdec   
1F24   CD E8 08               CALL   printStr   
1F27   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F34   E1                     POP   hl   
1F35   E5                     PUSH   hl   
1F36   CD 36 08               CALL   prtdec   
1F39   E1                     POP   hl   
1F3A   CD E8 08               CALL   printStr   
1F3D   20 28 23 00            .CSTR   " (#"   
1F41   CD 7E 08               CALL   prthex   
1F44   CD E8 08               CALL   printStr   
1F47   29 0D 0A 00            .CSTR   ")\r\n"   
1F4B   76                     HALT      
1F4C   00                     .CSTR      
1F4D                EXPECTM_0_2209S43:      
1F4D   E1                     POP   HL   
1F4E                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
1F4E   31 80 33               LD   SP,STACK   
1F51   CD EF 08               CALL   init   
1F54   CD CE 32               CALL   execStr   
1F57   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
1F65                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
1F65   E1                     POP   HL   
1F66   E5                     PUSH   HL   
1F67   11 0F 00               LD   DE,15   
1F6A   B7                     OR   A   
1F6B   ED 52                  SBC   HL,DE   
1F6D   7D                     LD   A,L   
1F6E   B4                     OR   H   
1F6F   28 58                  JR   Z,expectM_0_2210S43   
1F71   CD E8 08               CALL   printStr   
1F74   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
1F88   CD E8 08               CALL   printStr   
1F8B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F9A   21 0F 00               LD   HL,15   
1F9D   CD 36 08               CALL   prtdec   
1FA0   CD E8 08               CALL   printStr   
1FA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FB0   E1                     POP   hl   
1FB1   E5                     PUSH   hl   
1FB2   CD 36 08               CALL   prtdec   
1FB5   E1                     POP   hl   
1FB6   CD E8 08               CALL   printStr   
1FB9   20 28 23 00            .CSTR   " (#"   
1FBD   CD 7E 08               CALL   prthex   
1FC0   CD E8 08               CALL   printStr   
1FC3   29 0D 0A 00            .CSTR   ")\r\n"   
1FC7   76                     HALT      
1FC8   00                     .CSTR      
1FC9                EXPECTM_0_2210S43:      
1FC9   E1                     POP   HL   
1FCA                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
1FCA   31 80 33               LD   SP,STACK   
1FCD   CD EF 08               CALL   init   
1FD0   CD CE 32               CALL   execStr   
1FD3   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
1FE7                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
1FE7   E1                     POP   HL   
1FE8   E5                     PUSH   HL   
1FE9   11 15 00               LD   DE,21   
1FEC   B7                     OR   A   
1FED   ED 52                  SBC   HL,DE   
1FEF   7D                     LD   A,L   
1FF0   B4                     OR   H   
1FF1   28 5E                  JR   Z,expectM_0_2211S43   
1FF3   CD E8 08               CALL   printStr   
1FF6   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
2010   CD E8 08               CALL   printStr   
2013   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2022   21 15 00               LD   HL,21   
2025   CD 36 08               CALL   prtdec   
2028   CD E8 08               CALL   printStr   
202B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2038   E1                     POP   hl   
2039   E5                     PUSH   hl   
203A   CD 36 08               CALL   prtdec   
203D   E1                     POP   hl   
203E   CD E8 08               CALL   printStr   
2041   20 28 23 00            .CSTR   " (#"   
2045   CD 7E 08               CALL   prthex   
2048   CD E8 08               CALL   printStr   
204B   29 0D 0A 00            .CSTR   ")\r\n"   
204F   76                     HALT      
2050   00                     .CSTR      
2051                EXPECTM_0_2211S43:      
2051   E1                     POP   HL   
2052                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
2052   31 80 33               LD   SP,STACK   
2055   CD EF 08               CALL   init   
2058   CD CE 32               CALL   execStr   
205B   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
206F                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
206F   E1                     POP   HL   
2070   E5                     PUSH   HL   
2071   11 0B 00               LD   DE,11   
2074   B7                     OR   A   
2075   ED 52                  SBC   HL,DE   
2077   7D                     LD   A,L   
2078   B4                     OR   H   
2079   28 5E                  JR   Z,expectM_0_2212S43   
207B   CD E8 08               CALL   printStr   
207E   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
2098   CD E8 08               CALL   printStr   
209B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20AA   21 0B 00               LD   HL,11   
20AD   CD 36 08               CALL   prtdec   
20B0   CD E8 08               CALL   printStr   
20B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20C0   E1                     POP   hl   
20C1   E5                     PUSH   hl   
20C2   CD 36 08               CALL   prtdec   
20C5   E1                     POP   hl   
20C6   CD E8 08               CALL   printStr   
20C9   20 28 23 00            .CSTR   " (#"   
20CD   CD 7E 08               CALL   prthex   
20D0   CD E8 08               CALL   printStr   
20D3   29 0D 0A 00            .CSTR   ")\r\n"   
20D7   76                     HALT      
20D8   00                     .CSTR      
20D9                EXPECTM_0_2212S43:      
20D9   E1                     POP   HL   
20DA                          ;*Macro unroll:  test "() -2%", $0000
20DA   31 80 33               LD   SP,STACK   
20DD   CD EF 08               CALL   init   
20E0   CD CE 32               CALL   execStr   
20E3   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
20EA                          ;*Macro unroll:  expect "() -2%",$0000
20EA   E1                     POP   HL   
20EB   E5                     PUSH   HL   
20EC   11 00 00               LD   DE,$0000   
20EF   B7                     OR   A   
20F0   ED 52                  SBC   HL,DE   
20F2   7D                     LD   A,L   
20F3   B4                     OR   H   
20F4   28 51                  JR   Z,expectM_0_2213S43   
20F6   CD E8 08               CALL   printStr   
20F9   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
2106   CD E8 08               CALL   printStr   
2109   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2118   21 00 00               LD   HL,$0000   
211B   CD 36 08               CALL   prtdec   
211E   CD E8 08               CALL   printStr   
2121   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
212E   E1                     POP   hl   
212F   E5                     PUSH   hl   
2130   CD 36 08               CALL   prtdec   
2133   E1                     POP   hl   
2134   CD E8 08               CALL   printStr   
2137   20 28 23 00            .CSTR   " (#"   
213B   CD 7E 08               CALL   prthex   
213E   CD E8 08               CALL   printStr   
2141   29 0D 0A 00            .CSTR   ")\r\n"   
2145   76                     HALT      
2146   00                     .CSTR      
2147                EXPECTM_0_2213S43:      
2147   E1                     POP   HL   
2148                          ;*Macro unroll:  test "(a) -1%", $0001
2148   31 80 33               LD   SP,STACK   
214B   CD EF 08               CALL   init   
214E   CD CE 32               CALL   execStr   
2151   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
2159                          ;*Macro unroll:  expect "(a) -1%",$0001
2159   E1                     POP   HL   
215A   E5                     PUSH   HL   
215B   11 01 00               LD   DE,$0001   
215E   B7                     OR   A   
215F   ED 52                  SBC   HL,DE   
2161   7D                     LD   A,L   
2162   B4                     OR   H   
2163   28 52                  JR   Z,expectM_0_2214S43   
2165   CD E8 08               CALL   printStr   
2168   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
2176   CD E8 08               CALL   printStr   
2179   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2188   21 01 00               LD   HL,$0001   
218B   CD 36 08               CALL   prtdec   
218E   CD E8 08               CALL   printStr   
2191   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
219E   E1                     POP   hl   
219F   E5                     PUSH   hl   
21A0   CD 36 08               CALL   prtdec   
21A3   E1                     POP   hl   
21A4   CD E8 08               CALL   printStr   
21A7   20 28 23 00            .CSTR   " (#"   
21AB   CD 7E 08               CALL   prthex   
21AE   CD E8 08               CALL   printStr   
21B1   29 0D 0A 00            .CSTR   ")\r\n"   
21B5   76                     HALT      
21B6   00                     .CSTR      
21B7                EXPECTM_0_2214S43:      
21B7   E1                     POP   HL   
21B8                          ;*Macro unroll:  test "(a:) -1%", $0001
21B8   31 80 33               LD   SP,STACK   
21BB   CD EF 08               CALL   init   
21BE   CD CE 32               CALL   execStr   
21C1   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
21CA                          ;*Macro unroll:  expect "(a:) -1%",$0001
21CA   E1                     POP   HL   
21CB   E5                     PUSH   HL   
21CC   11 01 00               LD   DE,$0001   
21CF   B7                     OR   A   
21D0   ED 52                  SBC   HL,DE   
21D2   7D                     LD   A,L   
21D3   B4                     OR   H   
21D4   28 53                  JR   Z,expectM_0_2215S43   
21D6   CD E8 08               CALL   printStr   
21D9   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
21E8   CD E8 08               CALL   printStr   
21EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21FA   21 01 00               LD   HL,$0001   
21FD   CD 36 08               CALL   prtdec   
2200   CD E8 08               CALL   printStr   
2203   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2210   E1                     POP   hl   
2211   E5                     PUSH   hl   
2212   CD 36 08               CALL   prtdec   
2215   E1                     POP   hl   
2216   CD E8 08               CALL   printStr   
2219   20 28 23 00            .CSTR   " (#"   
221D   CD 7E 08               CALL   prthex   
2220   CD E8 08               CALL   printStr   
2223   29 0D 0A 00            .CSTR   ")\r\n"   
2227   76                     HALT      
2228   00                     .CSTR      
2229                EXPECTM_0_2215S43:      
2229   E1                     POP   HL   
222A                          ;*Macro unroll:  test "(a:b) -1%", $0102
222A   31 80 33               LD   SP,STACK   
222D   CD EF 08               CALL   init   
2230   CD CE 32               CALL   execStr   
2233   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
223D                          ;*Macro unroll:  expect "(a:b) -1%",$0102
223D   E1                     POP   HL   
223E   E5                     PUSH   HL   
223F   11 02 01               LD   DE,$0102   
2242   B7                     OR   A   
2243   ED 52                  SBC   HL,DE   
2245   7D                     LD   A,L   
2246   B4                     OR   H   
2247   28 54                  JR   Z,expectM_0_2216S43   
2249   CD E8 08               CALL   printStr   
224C   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
225C   CD E8 08               CALL   printStr   
225F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
226E   21 02 01               LD   HL,$0102   
2271   CD 36 08               CALL   prtdec   
2274   CD E8 08               CALL   printStr   
2277   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2284   E1                     POP   hl   
2285   E5                     PUSH   hl   
2286   CD 36 08               CALL   prtdec   
2289   E1                     POP   hl   
228A   CD E8 08               CALL   printStr   
228D   20 28 23 00            .CSTR   " (#"   
2291   CD 7E 08               CALL   prthex   
2294   CD E8 08               CALL   printStr   
2297   29 0D 0A 00            .CSTR   ")\r\n"   
229B   76                     HALT      
229C   00                     .CSTR      
229D                EXPECTM_0_2216S43:      
229D   E1                     POP   HL   
229E                          ;*Macro unroll:  test "(:b) -1%", $0101
229E   31 80 33               LD   SP,STACK   
22A1   CD EF 08               CALL   init   
22A4   CD CE 32               CALL   execStr   
22A7   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
22B0                          ;*Macro unroll:  expect "(:b) -1%",$0101
22B0   E1                     POP   HL   
22B1   E5                     PUSH   HL   
22B2   11 01 01               LD   DE,$0101   
22B5   B7                     OR   A   
22B6   ED 52                  SBC   HL,DE   
22B8   7D                     LD   A,L   
22B9   B4                     OR   H   
22BA   28 53                  JR   Z,expectM_0_2217S43   
22BC   CD E8 08               CALL   printStr   
22BF   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
22CE   CD E8 08               CALL   printStr   
22D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22E0   21 01 01               LD   HL,$0101   
22E3   CD 36 08               CALL   prtdec   
22E6   CD E8 08               CALL   printStr   
22E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22F6   E1                     POP   hl   
22F7   E5                     PUSH   hl   
22F8   CD 36 08               CALL   prtdec   
22FB   E1                     POP   hl   
22FC   CD E8 08               CALL   printStr   
22FF   20 28 23 00            .CSTR   " (#"   
2303   CD 7E 08               CALL   prthex   
2306   CD E8 08               CALL   printStr   
2309   29 0D 0A 00            .CSTR   ")\r\n"   
230D   76                     HALT      
230E   00                     .CSTR      
230F                EXPECTM_0_2217S43:      
230F   E1                     POP   HL   
2310                          ;*Macro unroll:  test "() {2} \\f:", 2
2310   31 80 33               LD   SP,STACK   
2313   CD EF 08               CALL   init   
2316   CD CE 32               CALL   execStr   
2319   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
2324                          ;*Macro unroll:  expect "() {2} \\f:",2
2324   E1                     POP   HL   
2325   E5                     PUSH   HL   
2326   11 02 00               LD   DE,2   
2329   B7                     OR   A   
232A   ED 52                  SBC   HL,DE   
232C   7D                     LD   A,L   
232D   B4                     OR   H   
232E   28 55                  JR   Z,expectM_0_2218S43   
2330   CD E8 08               CALL   printStr   
2333   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
2344   CD E8 08               CALL   printStr   
2347   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2356   21 02 00               LD   HL,2   
2359   CD 36 08               CALL   prtdec   
235C   CD E8 08               CALL   printStr   
235F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
236C   E1                     POP   hl   
236D   E5                     PUSH   hl   
236E   CD 36 08               CALL   prtdec   
2371   E1                     POP   hl   
2372   CD E8 08               CALL   printStr   
2375   20 28 23 00            .CSTR   " (#"   
2379   CD 7E 08               CALL   prthex   
237C   CD E8 08               CALL   printStr   
237F   29 0D 0A 00            .CSTR   ")\r\n"   
2383   76                     HALT      
2384   00                     .CSTR      
2385                EXPECTM_0_2218S43:      
2385   E1                     POP   HL   
2386                          ;*Macro unroll:  test "(a) {2} \\f:", 2
2386   31 80 33               LD   SP,STACK   
2389   CD EF 08               CALL   init   
238C   CD CE 32               CALL   execStr   
238F   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
239B                          ;*Macro unroll:  expect "(a) {2} \\f:",2
239B   E1                     POP   HL   
239C   E5                     PUSH   HL   
239D   11 02 00               LD   DE,2   
23A0   B7                     OR   A   
23A1   ED 52                  SBC   HL,DE   
23A3   7D                     LD   A,L   
23A4   B4                     OR   H   
23A5   28 56                  JR   Z,expectM_0_2219S43   
23A7   CD E8 08               CALL   printStr   
23AA   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
23BC   CD E8 08               CALL   printStr   
23BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23CE   21 02 00               LD   HL,2   
23D1   CD 36 08               CALL   prtdec   
23D4   CD E8 08               CALL   printStr   
23D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23E4   E1                     POP   hl   
23E5   E5                     PUSH   hl   
23E6   CD 36 08               CALL   prtdec   
23E9   E1                     POP   hl   
23EA   CD E8 08               CALL   printStr   
23ED   20 28 23 00            .CSTR   " (#"   
23F1   CD 7E 08               CALL   prthex   
23F4   CD E8 08               CALL   printStr   
23F7   29 0D 0A 00            .CSTR   ")\r\n"   
23FB   76                     HALT      
23FC   00                     .CSTR      
23FD                EXPECTM_0_2219S43:      
23FD   E1                     POP   HL   
23FE                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
23FE   31 80 33               LD   SP,STACK   
2401   CD EF 08               CALL   init   
2404   CD CE 32               CALL   execStr   
2407   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
2416                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
2416   E1                     POP   HL   
2417   E5                     PUSH   HL   
2418   11 05 00               LD   DE,5   
241B   B7                     OR   A   
241C   ED 52                  SBC   HL,DE   
241E   7D                     LD   A,L   
241F   B4                     OR   H   
2420   28 59                  JR   Z,expectM_0_2220S43   
2422   CD E8 08               CALL   printStr   
2425   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
243A   CD E8 08               CALL   printStr   
243D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
244C   21 05 00               LD   HL,5   
244F   CD 36 08               CALL   prtdec   
2452   CD E8 08               CALL   printStr   
2455   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2462   E1                     POP   hl   
2463   E5                     PUSH   hl   
2464   CD 36 08               CALL   prtdec   
2467   E1                     POP   hl   
2468   CD E8 08               CALL   printStr   
246B   20 28 23 00            .CSTR   " (#"   
246F   CD 7E 08               CALL   prthex   
2472   CD E8 08               CALL   printStr   
2475   29 0D 0A 00            .CSTR   ")\r\n"   
2479   76                     HALT      
247A   00                     .CSTR      
247B                EXPECTM_0_2220S43:      
247B   E1                     POP   HL   
247C                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
247C   31 80 33               LD   SP,STACK   
247F   CD EF 08               CALL   init   
2482   CD CE 32               CALL   execStr   
2485   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
2496                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
2496   E1                     POP   HL   
2497   E5                     PUSH   HL   
2498   11 05 00               LD   DE,5   
249B   B7                     OR   A   
249C   ED 52                  SBC   HL,DE   
249E   7D                     LD   A,L   
249F   B4                     OR   H   
24A0   28 5B                  JR   Z,expectM_0_2221S43   
24A2   CD E8 08               CALL   printStr   
24A5   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
24BC   CD E8 08               CALL   printStr   
24BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24CE   21 05 00               LD   HL,5   
24D1   CD 36 08               CALL   prtdec   
24D4   CD E8 08               CALL   printStr   
24D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24E4   E1                     POP   hl   
24E5   E5                     PUSH   hl   
24E6   CD 36 08               CALL   prtdec   
24E9   E1                     POP   hl   
24EA   CD E8 08               CALL   printStr   
24ED   20 28 23 00            .CSTR   " (#"   
24F1   CD 7E 08               CALL   prthex   
24F4   CD E8 08               CALL   printStr   
24F7   29 0D 0A 00            .CSTR   ")\r\n"   
24FB   76                     HALT      
24FC   00                     .CSTR      
24FD                EXPECTM_0_2221S43:      
24FD   E1                     POP   HL   
24FE                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
24FE   31 80 33               LD   SP,STACK   
2501   CD EF 08               CALL   init   
2504   CD CE 32               CALL   execStr   
2507   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
2516                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
2516   E1                     POP   HL   
2517   E5                     PUSH   HL   
2518   11 02 00               LD   DE,2   
251B   B7                     OR   A   
251C   ED 52                  SBC   HL,DE   
251E   7D                     LD   A,L   
251F   B4                     OR   H   
2520   28 59                  JR   Z,expectM_0_2222S43   
2522   CD E8 08               CALL   printStr   
2525   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
253A   CD E8 08               CALL   printStr   
253D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
254C   21 02 00               LD   HL,2   
254F   CD 36 08               CALL   prtdec   
2552   CD E8 08               CALL   printStr   
2555   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2562   E1                     POP   hl   
2563   E5                     PUSH   hl   
2564   CD 36 08               CALL   prtdec   
2567   E1                     POP   hl   
2568   CD E8 08               CALL   printStr   
256B   20 28 23 00            .CSTR   " (#"   
256F   CD 7E 08               CALL   prthex   
2572   CD E8 08               CALL   printStr   
2575   29 0D 0A 00            .CSTR   ")\r\n"   
2579   76                     HALT      
257A   00                     .CSTR      
257B                EXPECTM_0_2222S43:      
257B   E1                     POP   HL   
257C                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
257C   31 80 33               LD   SP,STACK   
257F   CD EF 08               CALL   init   
2582   CD CE 32               CALL   execStr   
2585   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
2599                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
2599   E1                     POP   HL   
259A   E5                     PUSH   HL   
259B   11 05 00               LD   DE,5   
259E   B7                     OR   A   
259F   ED 52                  SBC   HL,DE   
25A1   7D                     LD   A,L   
25A2   B4                     OR   H   
25A3   28 5E                  JR   Z,expectM_0_2223S43   
25A5   CD E8 08               CALL   printStr   
25A8   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
25C2   CD E8 08               CALL   printStr   
25C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25D4   21 05 00               LD   HL,5   
25D7   CD 36 08               CALL   prtdec   
25DA   CD E8 08               CALL   printStr   
25DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25EA   E1                     POP   hl   
25EB   E5                     PUSH   hl   
25EC   CD 36 08               CALL   prtdec   
25EF   E1                     POP   hl   
25F0   CD E8 08               CALL   printStr   
25F3   20 28 23 00            .CSTR   " (#"   
25F7   CD 7E 08               CALL   prthex   
25FA   CD E8 08               CALL   printStr   
25FD   29 0D 0A 00            .CSTR   ")\r\n"   
2601   76                     HALT      
2602   00                     .CSTR      
2603                EXPECTM_0_2223S43:      
2603   E1                     POP   HL   
2604                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
2604   31 80 33               LD   SP,STACK   
2607   CD EF 08               CALL   init   
260A   CD CE 32               CALL   execStr   
260D   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
2622                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
2622   E1                     POP   HL   
2623   E5                     PUSH   HL   
2624   11 01 00               LD   DE,1   
2627   B7                     OR   A   
2628   ED 52                  SBC   HL,DE   
262A   7D                     LD   A,L   
262B   B4                     OR   H   
262C   28 5F                  JR   Z,expectM_0_2224S43   
262E   CD E8 08               CALL   printStr   
2631   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
264C   CD E8 08               CALL   printStr   
264F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
265E   21 01 00               LD   HL,1   
2661   CD 36 08               CALL   prtdec   
2664   CD E8 08               CALL   printStr   
2667   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2674   E1                     POP   hl   
2675   E5                     PUSH   hl   
2676   CD 36 08               CALL   prtdec   
2679   E1                     POP   hl   
267A   CD E8 08               CALL   printStr   
267D   20 28 23 00            .CSTR   " (#"   
2681   CD 7E 08               CALL   prthex   
2684   CD E8 08               CALL   printStr   
2687   29 0D 0A 00            .CSTR   ")\r\n"   
268B   76                     HALT      
268C   00                     .CSTR      
268D                EXPECTM_0_2224S43:      
268D   E1                     POP   HL   
268E                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
268E   31 80 33               LD   SP,STACK   
2691   CD EF 08               CALL   init   
2694   CD CE 32               CALL   execStr   
2697   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
26AF                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
26AF   E1                     POP   HL   
26B0   E5                     PUSH   HL   
26B1   11 07 00               LD   DE,7   
26B4   B7                     OR   A   
26B5   ED 52                  SBC   HL,DE   
26B7   7D                     LD   A,L   
26B8   B4                     OR   H   
26B9   28 62                  JR   Z,expectM_0_2225S43   
26BB   CD E8 08               CALL   printStr   
26BE   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
26DC   CD E8 08               CALL   printStr   
26DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26EE   21 07 00               LD   HL,7   
26F1   CD 36 08               CALL   prtdec   
26F4   CD E8 08               CALL   printStr   
26F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2704   E1                     POP   hl   
2705   E5                     PUSH   hl   
2706   CD 36 08               CALL   prtdec   
2709   E1                     POP   hl   
270A   CD E8 08               CALL   printStr   
270D   20 28 23 00            .CSTR   " (#"   
2711   CD 7E 08               CALL   prthex   
2714   CD E8 08               CALL   printStr   
2717   29 0D 0A 00            .CSTR   ")\r\n"   
271B   76                     HALT      
271C   00                     .CSTR      
271D                EXPECTM_0_2225S43:      
271D   E1                     POP   HL   
271E                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
271E   31 80 33               LD   SP,STACK   
2721   CD EF 08               CALL   init   
2724   CD CE 32               CALL   execStr   
2727   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
2741                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
2741   E1                     POP   HL   
2742   E5                     PUSH   HL   
2743   11 06 00               LD   DE,6   
2746   B7                     OR   A   
2747   ED 52                  SBC   HL,DE   
2749   7D                     LD   A,L   
274A   B4                     OR   H   
274B   28 64                  JR   Z,expectM_0_2226S43   
274D   CD E8 08               CALL   printStr   
2750   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
2770   CD E8 08               CALL   printStr   
2773   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2782   21 06 00               LD   HL,6   
2785   CD 36 08               CALL   prtdec   
2788   CD E8 08               CALL   printStr   
278B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2798   E1                     POP   hl   
2799   E5                     PUSH   hl   
279A   CD 36 08               CALL   prtdec   
279D   E1                     POP   hl   
279E   CD E8 08               CALL   printStr   
27A1   20 28 23 00            .CSTR   " (#"   
27A5   CD 7E 08               CALL   prthex   
27A8   CD E8 08               CALL   printStr   
27AB   29 0D 0A 00            .CSTR   ")\r\n"   
27AF   76                     HALT      
27B0   00                     .CSTR      
27B1                EXPECTM_0_2226S43:      
27B1   E1                     POP   HL   
27B2                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
27B2   31 80 33               LD   SP,STACK   
27B5   CD EF 08               CALL   init   
27B8   CD CE 32               CALL   execStr   
27BB   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
27CE                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
27CE   E1                     POP   HL   
27CF   E5                     PUSH   HL   
27D0   11 02 00               LD   DE,2   
27D3   B7                     OR   A   
27D4   ED 52                  SBC   HL,DE   
27D6   7D                     LD   A,L   
27D7   B4                     OR   H   
27D8   28 5D                  JR   Z,expectM_0_2227S43   
27DA   CD E8 08               CALL   printStr   
27DD   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
27F6   CD E8 08               CALL   printStr   
27F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2808   21 02 00               LD   HL,2   
280B   CD 36 08               CALL   prtdec   
280E   CD E8 08               CALL   printStr   
2811   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
281E   E1                     POP   hl   
281F   E5                     PUSH   hl   
2820   CD 36 08               CALL   prtdec   
2823   E1                     POP   hl   
2824   CD E8 08               CALL   printStr   
2827   20 28 23 00            .CSTR   " (#"   
282B   CD 7E 08               CALL   prthex   
282E   CD E8 08               CALL   printStr   
2831   29 0D 0A 00            .CSTR   ")\r\n"   
2835   76                     HALT      
2836   00                     .CSTR      
2837                EXPECTM_0_2227S43:      
2837   E1                     POP   HL   
2838                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
2838   31 80 33               LD   SP,STACK   
283B   CD EF 08               CALL   init   
283E   CD CE 32               CALL   execStr   
2841   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
2857                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
2857   E1                     POP   HL   
2858   E5                     PUSH   HL   
2859   11 01 00               LD   DE,1   
285C   B7                     OR   A   
285D   ED 52                  SBC   HL,DE   
285F   7D                     LD   A,L   
2860   B4                     OR   H   
2861   28 60                  JR   Z,expectM_0_2228S43   
2863   CD E8 08               CALL   printStr   
2866   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
2882   CD E8 08               CALL   printStr   
2885   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2894   21 01 00               LD   HL,1   
2897   CD 36 08               CALL   prtdec   
289A   CD E8 08               CALL   printStr   
289D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28AA   E1                     POP   hl   
28AB   E5                     PUSH   hl   
28AC   CD 36 08               CALL   prtdec   
28AF   E1                     POP   hl   
28B0   CD E8 08               CALL   printStr   
28B3   20 28 23 00            .CSTR   " (#"   
28B7   CD 7E 08               CALL   prthex   
28BA   CD E8 08               CALL   printStr   
28BD   29 0D 0A 00            .CSTR   ")\r\n"   
28C1   76                     HALT      
28C2   00                     .CSTR      
28C3                EXPECTM_0_2228S43:      
28C3   E1                     POP   HL   
28C4                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
28C4   31 80 33               LD   SP,STACK   
28C7   CD EF 08               CALL   init   
28CA   CD CE 32               CALL   execStr   
28CD   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
28E4                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
28E4   E1                     POP   HL   
28E5   E5                     PUSH   HL   
28E6   11 02 00               LD   DE,2   
28E9   B7                     OR   A   
28EA   ED 52                  SBC   HL,DE   
28EC   7D                     LD   A,L   
28ED   B4                     OR   H   
28EE   28 61                  JR   Z,expectM_0_2229S43   
28F0   CD E8 08               CALL   printStr   
28F3   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2910   CD E8 08               CALL   printStr   
2913   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2922   21 02 00               LD   HL,2   
2925   CD 36 08               CALL   prtdec   
2928   CD E8 08               CALL   printStr   
292B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2938   E1                     POP   hl   
2939   E5                     PUSH   hl   
293A   CD 36 08               CALL   prtdec   
293D   E1                     POP   hl   
293E   CD E8 08               CALL   printStr   
2941   20 28 23 00            .CSTR   " (#"   
2945   CD 7E 08               CALL   prthex   
2948   CD E8 08               CALL   printStr   
294B   29 0D 0A 00            .CSTR   ")\r\n"   
294F   76                     HALT      
2950   00                     .CSTR      
2951                EXPECTM_0_2229S43:      
2951   E1                     POP   HL   
2952                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
2952   31 80 33               LD   SP,STACK   
2955   CD EF 08               CALL   init   
2958   CD CE 32               CALL   execStr   
295B   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
2973                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
2973   E1                     POP   HL   
2974   E5                     PUSH   HL   
2975   11 02 00               LD   DE,2   
2978   B7                     OR   A   
2979   ED 52                  SBC   HL,DE   
297B   7D                     LD   A,L   
297C   B4                     OR   H   
297D   28 62                  JR   Z,expectM_0_2230S43   
297F   CD E8 08               CALL   printStr   
2982   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
29A0   CD E8 08               CALL   printStr   
29A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29B2   21 02 00               LD   HL,2   
29B5   CD 36 08               CALL   prtdec   
29B8   CD E8 08               CALL   printStr   
29BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29C8   E1                     POP   hl   
29C9   E5                     PUSH   hl   
29CA   CD 36 08               CALL   prtdec   
29CD   E1                     POP   hl   
29CE   CD E8 08               CALL   printStr   
29D1   20 28 23 00            .CSTR   " (#"   
29D5   CD 7E 08               CALL   prthex   
29D8   CD E8 08               CALL   printStr   
29DB   29 0D 0A 00            .CSTR   ")\r\n"   
29DF   76                     HALT      
29E0   00                     .CSTR      
29E1                EXPECTM_0_2230S43:      
29E1   E1                     POP   HL   
29E2                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
29E2   31 80 33               LD   SP,STACK   
29E5   CD EF 08               CALL   init   
29E8   CD CE 32               CALL   execStr   
29EB   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2A02                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2A02   E1                     POP   HL   
2A03   E5                     PUSH   HL   
2A04   11 02 00               LD   DE,2   
2A07   B7                     OR   A   
2A08   ED 52                  SBC   HL,DE   
2A0A   7D                     LD   A,L   
2A0B   B4                     OR   H   
2A0C   28 61                  JR   Z,expectM_0_2231S43   
2A0E   CD E8 08               CALL   printStr   
2A11   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2A2E   CD E8 08               CALL   printStr   
2A31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A40   21 02 00               LD   HL,2   
2A43   CD 36 08               CALL   prtdec   
2A46   CD E8 08               CALL   printStr   
2A49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A56   E1                     POP   hl   
2A57   E5                     PUSH   hl   
2A58   CD 36 08               CALL   prtdec   
2A5B   E1                     POP   hl   
2A5C   CD E8 08               CALL   printStr   
2A5F   20 28 23 00            .CSTR   " (#"   
2A63   CD 7E 08               CALL   prthex   
2A66   CD E8 08               CALL   printStr   
2A69   29 0D 0A 00            .CSTR   ")\r\n"   
2A6D   76                     HALT      
2A6E   00                     .CSTR      
2A6F                EXPECTM_0_2231S43:      
2A6F   E1                     POP   HL   
2A70                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
2A70   31 80 33               LD   SP,STACK   
2A73   CD EF 08               CALL   init   
2A76   CD CE 32               CALL   execStr   
2A79   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
2A97                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
2A97   E1                     POP   HL   
2A98   E5                     PUSH   HL   
2A99   11 05 00               LD   DE,5   
2A9C   B7                     OR   A   
2A9D   ED 52                  SBC   HL,DE   
2A9F   7D                     LD   A,L   
2AA0   B4                     OR   H   
2AA1   28 68                  JR   Z,expectM_0_2232S43   
2AA3   CD E8 08               CALL   printStr   
2AA6   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
2ACA   CD E8 08               CALL   printStr   
2ACD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ADC   21 05 00               LD   HL,5   
2ADF   CD 36 08               CALL   prtdec   
2AE2   CD E8 08               CALL   printStr   
2AE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AF2   E1                     POP   hl   
2AF3   E5                     PUSH   hl   
2AF4   CD 36 08               CALL   prtdec   
2AF7   E1                     POP   hl   
2AF8   CD E8 08               CALL   printStr   
2AFB   20 28 23 00            .CSTR   " (#"   
2AFF   CD 7E 08               CALL   prthex   
2B02   CD E8 08               CALL   printStr   
2B05   29 0D 0A 00            .CSTR   ")\r\n"   
2B09   76                     HALT      
2B0A   00                     .CSTR      
2B0B                EXPECTM_0_2232S43:      
2B0B   E1                     POP   HL   
2B0C                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
2B0C   31 80 33               LD   SP,STACK   
2B0F   CD EF 08               CALL   init   
2B12   CD CE 32               CALL   execStr   
2B15   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
2B2A                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
2B2A   E1                     POP   HL   
2B2B   E5                     PUSH   HL   
2B2C   11 02 00               LD   DE,2   
2B2F   B7                     OR   A   
2B30   ED 52                  SBC   HL,DE   
2B32   7D                     LD   A,L   
2B33   B4                     OR   H   
2B34   28 5F                  JR   Z,expectM_0_2233S43   
2B36   CD E8 08               CALL   printStr   
2B39   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
2B54   CD E8 08               CALL   printStr   
2B57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B66   21 02 00               LD   HL,2   
2B69   CD 36 08               CALL   prtdec   
2B6C   CD E8 08               CALL   printStr   
2B6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B7C   E1                     POP   hl   
2B7D   E5                     PUSH   hl   
2B7E   CD 36 08               CALL   prtdec   
2B81   E1                     POP   hl   
2B82   CD E8 08               CALL   printStr   
2B85   20 28 23 00            .CSTR   " (#"   
2B89   CD 7E 08               CALL   prthex   
2B8C   CD E8 08               CALL   printStr   
2B8F   29 0D 0A 00            .CSTR   ")\r\n"   
2B93   76                     HALT      
2B94   00                     .CSTR      
2B95                EXPECTM_0_2233S43:      
2B95   E1                     POP   HL   
2B96                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
2B96   31 80 33               LD   SP,STACK   
2B99   CD EF 08               CALL   init   
2B9C   CD CE 32               CALL   execStr   
2B9F   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
2BBA                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
2BBA   E1                     POP   HL   
2BBB   E5                     PUSH   HL   
2BBC   11 64 00               LD   DE,100   
2BBF   B7                     OR   A   
2BC0   ED 52                  SBC   HL,DE   
2BC2   7D                     LD   A,L   
2BC3   B4                     OR   H   
2BC4   28 65                  JR   Z,expectM_0_2234S43   
2BC6   CD E8 08               CALL   printStr   
2BC9   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
2BEA   CD E8 08               CALL   printStr   
2BED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BFC   21 64 00               LD   HL,100   
2BFF   CD 36 08               CALL   prtdec   
2C02   CD E8 08               CALL   printStr   
2C05   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C12   E1                     POP   hl   
2C13   E5                     PUSH   hl   
2C14   CD 36 08               CALL   prtdec   
2C17   E1                     POP   hl   
2C18   CD E8 08               CALL   printStr   
2C1B   20 28 23 00            .CSTR   " (#"   
2C1F   CD 7E 08               CALL   prthex   
2C22   CD E8 08               CALL   printStr   
2C25   29 0D 0A 00            .CSTR   ")\r\n"   
2C29   76                     HALT      
2C2A   00                     .CSTR      
2C2B                EXPECTM_0_2234S43:      
2C2B   E1                     POP   HL   
2C2C                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
2C2C   31 80 33               LD   SP,STACK   
2C2F   CD EF 08               CALL   init   
2C32   CD CE 32               CALL   execStr   
2C35   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
2C51                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
2C51   E1                     POP   HL   
2C52   E5                     PUSH   HL   
2C53   11 01 00               LD   DE,1   
2C56   B7                     OR   A   
2C57   ED 52                  SBC   HL,DE   
2C59   7D                     LD   A,L   
2C5A   B4                     OR   H   
2C5B   28 66                  JR   Z,expectM_0_2235S43   
2C5D   CD E8 08               CALL   printStr   
2C60   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
2C82   CD E8 08               CALL   printStr   
2C85   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C94   21 01 00               LD   HL,1   
2C97   CD 36 08               CALL   prtdec   
2C9A   CD E8 08               CALL   printStr   
2C9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CAA   E1                     POP   hl   
2CAB   E5                     PUSH   hl   
2CAC   CD 36 08               CALL   prtdec   
2CAF   E1                     POP   hl   
2CB0   CD E8 08               CALL   printStr   
2CB3   20 28 23 00            .CSTR   " (#"   
2CB7   CD 7E 08               CALL   prthex   
2CBA   CD E8 08               CALL   printStr   
2CBD   29 0D 0A 00            .CSTR   ")\r\n"   
2CC1   76                     HALT      
2CC2   00                     .CSTR      
2CC3                EXPECTM_0_2235S43:      
2CC3   E1                     POP   HL   
2CC4                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
2CC4   31 80 33               LD   SP,STACK   
2CC7   CD EF 08               CALL   init   
2CCA   CD CE 32               CALL   execStr   
2CCD   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
2CEA                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
2CEA   E1                     POP   HL   
2CEB   E5                     PUSH   HL   
2CEC   11 02 00               LD   DE,2   
2CEF   B7                     OR   A   
2CF0   ED 52                  SBC   HL,DE   
2CF2   7D                     LD   A,L   
2CF3   B4                     OR   H   
2CF4   28 67                  JR   Z,expectM_0_2236S43   
2CF6   CD E8 08               CALL   printStr   
2CF9   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
2D1C   CD E8 08               CALL   printStr   
2D1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D2E   21 02 00               LD   HL,2   
2D31   CD 36 08               CALL   prtdec   
2D34   CD E8 08               CALL   printStr   
2D37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D44   E1                     POP   hl   
2D45   E5                     PUSH   hl   
2D46   CD 36 08               CALL   prtdec   
2D49   E1                     POP   hl   
2D4A   CD E8 08               CALL   printStr   
2D4D   20 28 23 00            .CSTR   " (#"   
2D51   CD 7E 08               CALL   prthex   
2D54   CD E8 08               CALL   printStr   
2D57   29 0D 0A 00            .CSTR   ")\r\n"   
2D5B   76                     HALT      
2D5C   00                     .CSTR      
2D5D                EXPECTM_0_2236S43:      
2D5D   E1                     POP   HL   
2D5E                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
2D5E   31 80 33               LD   SP,STACK   
2D61   CD EF 08               CALL   init   
2D64   CD CE 32               CALL   execStr   
2D67   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
2D8C                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
2D8C   E1                     POP   HL   
2D8D   E5                     PUSH   HL   
2D8E   11 0B 00               LD   DE,11   
2D91   B7                     OR   A   
2D92   ED 52                  SBC   HL,DE   
2D94   7D                     LD   A,L   
2D95   B4                     OR   H   
2D96   28 6F                  JR   Z,expectM_0_2237S43   
2D98   CD E8 08               CALL   printStr   
2D9B   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
2DC6   CD E8 08               CALL   printStr   
2DC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DD8   21 0B 00               LD   HL,11   
2DDB   CD 36 08               CALL   prtdec   
2DDE   CD E8 08               CALL   printStr   
2DE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DEE   E1                     POP   hl   
2DEF   E5                     PUSH   hl   
2DF0   CD 36 08               CALL   prtdec   
2DF3   E1                     POP   hl   
2DF4   CD E8 08               CALL   printStr   
2DF7   20 28 23 00            .CSTR   " (#"   
2DFB   CD 7E 08               CALL   prthex   
2DFE   CD E8 08               CALL   printStr   
2E01   29 0D 0A 00            .CSTR   ")\r\n"   
2E05   76                     HALT      
2E06   00                     .CSTR      
2E07                EXPECTM_0_2237S43:      
2E07   E1                     POP   HL   
2E08                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
2E08   31 80 33               LD   SP,STACK   
2E0B   CD EF 08               CALL   init   
2E0E   CD CE 32               CALL   execStr   
2E11   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
2E36                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
2E36   E1                     POP   HL   
2E37   E5                     PUSH   HL   
2E38   11 15 00               LD   DE,21   
2E3B   B7                     OR   A   
2E3C   ED 52                  SBC   HL,DE   
2E3E   7D                     LD   A,L   
2E3F   B4                     OR   H   
2E40   28 6F                  JR   Z,expectM_0_2238S43   
2E42   CD E8 08               CALL   printStr   
2E45   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
2E70   CD E8 08               CALL   printStr   
2E73   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E82   21 15 00               LD   HL,21   
2E85   CD 36 08               CALL   prtdec   
2E88   CD E8 08               CALL   printStr   
2E8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E98   E1                     POP   hl   
2E99   E5                     PUSH   hl   
2E9A   CD 36 08               CALL   prtdec   
2E9D   E1                     POP   hl   
2E9E   CD E8 08               CALL   printStr   
2EA1   20 28 23 00            .CSTR   " (#"   
2EA5   CD 7E 08               CALL   prthex   
2EA8   CD E8 08               CALL   printStr   
2EAB   29 0D 0A 00            .CSTR   ")\r\n"   
2EAF   76                     HALT      
2EB0   00                     .CSTR      
2EB1                EXPECTM_0_2238S43:      
2EB1   E1                     POP   HL   
2EB2                          ;*Macro unroll:  test "[10 20 30] 1%", 20
2EB2   31 80 33               LD   SP,STACK   
2EB5   CD EF 08               CALL   init   
2EB8   CD CE 32               CALL   execStr   
2EBB   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
2EC9                          ;*Macro unroll:  expect "[10 20 30] 1%",20
2EC9   E1                     POP   HL   
2ECA   E5                     PUSH   HL   
2ECB   11 14 00               LD   DE,20   
2ECE   B7                     OR   A   
2ECF   ED 52                  SBC   HL,DE   
2ED1   7D                     LD   A,L   
2ED2   B4                     OR   H   
2ED3   28 58                  JR   Z,expectM_0_2239S43   
2ED5   CD E8 08               CALL   printStr   
2ED8   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
2EEC   CD E8 08               CALL   printStr   
2EEF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EFE   21 14 00               LD   HL,20   
2F01   CD 36 08               CALL   prtdec   
2F04   CD E8 08               CALL   printStr   
2F07   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F14   E1                     POP   hl   
2F15   E5                     PUSH   hl   
2F16   CD 36 08               CALL   prtdec   
2F19   E1                     POP   hl   
2F1A   CD E8 08               CALL   printStr   
2F1D   20 28 23 00            .CSTR   " (#"   
2F21   CD 7E 08               CALL   prthex   
2F24   CD E8 08               CALL   printStr   
2F27   29 0D 0A 00            .CSTR   ")\r\n"   
2F2B   76                     HALT      
2F2C   00                     .CSTR      
2F2D                EXPECTM_0_2239S43:      
2F2D   E1                     POP   HL   
2F2E                          ;*Macro unroll:  test "\\b [1 2 3] 1%", 2
2F2E   31 80 33               LD   SP,STACK   
2F31   CD EF 08               CALL   init   
2F34   CD CE 32               CALL   execStr   
2F37   5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "\\b [1 2 3] 1%"   
2F45                          ;*Macro unroll:  expect "\\b [1 2 3] 1%",2
2F45   E1                     POP   HL   
2F46   E5                     PUSH   HL   
2F47   11 02 00               LD   DE,2   
2F4A   B7                     OR   A   
2F4B   ED 52                  SBC   HL,DE   
2F4D   7D                     LD   A,L   
2F4E   B4                     OR   H   
2F4F   28 58                  JR   Z,expectM_0_2240S43   
2F51   CD E8 08               CALL   printStr   
2F54   43 6F 64 65 3A 20 5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","\\b [1 2 3] 1%"   
2F68   CD E8 08               CALL   printStr   
2F6B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F7A   21 02 00               LD   HL,2   
2F7D   CD 36 08               CALL   prtdec   
2F80   CD E8 08               CALL   printStr   
2F83   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F90   E1                     POP   hl   
2F91   E5                     PUSH   hl   
2F92   CD 36 08               CALL   prtdec   
2F95   E1                     POP   hl   
2F96   CD E8 08               CALL   printStr   
2F99   20 28 23 00            .CSTR   " (#"   
2F9D   CD 7E 08               CALL   prthex   
2FA0   CD E8 08               CALL   printStr   
2FA3   29 0D 0A 00            .CSTR   ")\r\n"   
2FA7   76                     HALT      
2FA8   00                     .CSTR      
2FA9                EXPECTM_0_2240S43:      
2FA9   E1                     POP   HL   
2FAA                          ;*Macro unroll:  test "\\b ['A' 'B' 'C'] 1%", 66
2FAA   31 80 33               LD   SP,STACK   
2FAD   CD EF 08               CALL   init   
2FB0   CD CE 32               CALL   execStr   
2FB3   5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "\\b ['A' 'B' 'C'] 1%"   
2FC7                          ;*Macro unroll:  expect "\\b ['A' 'B' 'C'] 1%",66
2FC7   E1                     POP   HL   
2FC8   E5                     PUSH   HL   
2FC9   11 42 00               LD   DE,66   
2FCC   B7                     OR   A   
2FCD   ED 52                  SBC   HL,DE   
2FCF   7D                     LD   A,L   
2FD0   B4                     OR   H   
2FD1   28 5E                  JR   Z,expectM_0_2241S43   
2FD3   CD E8 08               CALL   printStr   
2FD6   43 6F 64 65 3A 20 5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","\\b ['A' 'B' 'C'] 1%"   
2FF0   CD E8 08               CALL   printStr   
2FF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3002   21 42 00               LD   HL,66   
3005   CD 36 08               CALL   prtdec   
3008   CD E8 08               CALL   printStr   
300B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3018   E1                     POP   hl   
3019   E5                     PUSH   hl   
301A   CD 36 08               CALL   prtdec   
301D   E1                     POP   hl   
301E   CD E8 08               CALL   printStr   
3021   20 28 23 00            .CSTR   " (#"   
3025   CD 7E 08               CALL   prthex   
3028   CD E8 08               CALL   printStr   
302B   29 0D 0A 00            .CSTR   ")\r\n"   
302F   76                     HALT      
3030   00                     .CSTR      
3031                EXPECTM_0_2241S43:      
3031   E1                     POP   HL   
3032                          ;*Macro unroll:  test "0 [{10} {20} {30}] \\s", 10
3032   31 80 33               LD   SP,STACK   
3035   CD EF 08               CALL   init   
3038   CD CE 32               CALL   execStr   
303B   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "0 [{10} {20} {30}] \\s"   
3051                          ;*Macro unroll:  expect "0 [{10} {20} {30}] \\s",10
3051   E1                     POP   HL   
3052   E5                     PUSH   HL   
3053   11 0A 00               LD   DE,10   
3056   B7                     OR   A   
3057   ED 52                  SBC   HL,DE   
3059   7D                     LD   A,L   
305A   B4                     OR   H   
305B   28 60                  JR   Z,expectM_0_2242S43   
305D   CD E8 08               CALL   printStr   
3060   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] \\s"   
307C   CD E8 08               CALL   printStr   
307F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
308E   21 0A 00               LD   HL,10   
3091   CD 36 08               CALL   prtdec   
3094   CD E8 08               CALL   printStr   
3097   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30A4   E1                     POP   hl   
30A5   E5                     PUSH   hl   
30A6   CD 36 08               CALL   prtdec   
30A9   E1                     POP   hl   
30AA   CD E8 08               CALL   printStr   
30AD   20 28 23 00            .CSTR   " (#"   
30B1   CD 7E 08               CALL   prthex   
30B4   CD E8 08               CALL   printStr   
30B7   29 0D 0A 00            .CSTR   ")\r\n"   
30BB   76                     HALT      
30BC   00                     .CSTR      
30BD                EXPECTM_0_2242S43:      
30BD   E1                     POP   HL   
30BE                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:", 10
30BE   31 80 33               LD   SP,STACK   
30C1   CD EF 08               CALL   init   
30C4   CD CE 32               CALL   execStr   
30C7   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
30EB                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:",10
30EB   E1                     POP   HL   
30EC   E5                     PUSH   HL   
30ED   11 0A 00               LD   DE,10   
30F0   B7                     OR   A   
30F1   ED 52                  SBC   HL,DE   
30F3   7D                     LD   A,L   
30F4   B4                     OR   H   
30F5   28 6E                  JR   Z,expectM_0_2243S43   
30F7   CD E8 08               CALL   printStr   
30FA   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
3124   CD E8 08               CALL   printStr   
3127   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3136   21 0A 00               LD   HL,10   
3139   CD 36 08               CALL   prtdec   
313C   CD E8 08               CALL   printStr   
313F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
314C   E1                     POP   hl   
314D   E5                     PUSH   hl   
314E   CD 36 08               CALL   prtdec   
3151   E1                     POP   hl   
3152   CD E8 08               CALL   printStr   
3155   20 28 23 00            .CSTR   " (#"   
3159   CD 7E 08               CALL   prthex   
315C   CD E8 08               CALL   printStr   
315F   29 0D 0A 00            .CSTR   ")\r\n"   
3163   76                     HALT      
3164   00                     .CSTR      
3165                EXPECTM_0_2243S43:      
3165   E1                     POP   HL   
3166                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 10
3166   31 80 33               LD   SP,STACK   
3169   CD EF 08               CALL   init   
316C   CD CE 32               CALL   execStr   
316F   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
3195                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",10
3195   E1                     POP   HL   
3196   E5                     PUSH   HL   
3197   11 0A 00               LD   DE,10   
319A   B7                     OR   A   
319B   ED 52                  SBC   HL,DE   
319D   7D                     LD   A,L   
319E   B4                     OR   H   
319F   28 70                  JR   Z,expectM_0_2244S43   
31A1   CD E8 08               CALL   printStr   
31A4   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
31D0   CD E8 08               CALL   printStr   
31D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31E2   21 0A 00               LD   HL,10   
31E5   CD 36 08               CALL   prtdec   
31E8   CD E8 08               CALL   printStr   
31EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31F8   E1                     POP   hl   
31F9   E5                     PUSH   hl   
31FA   CD 36 08               CALL   prtdec   
31FD   E1                     POP   hl   
31FE   CD E8 08               CALL   printStr   
3201   20 28 23 00            .CSTR   " (#"   
3205   CD 7E 08               CALL   prthex   
3208   CD E8 08               CALL   printStr   
320B   29 0D 0A 00            .CSTR   ")\r\n"   
320F   76                     HALT      
3210   00                     .CSTR      
3211                EXPECTM_0_2244S43:      
3211   E1                     POP   HL   
3212                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 20
3212   31 80 33               LD   SP,STACK   
3215   CD EF 08               CALL   init   
3218   CD CE 32               CALL   execStr   
321B   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
3241                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",20
3241   E1                     POP   HL   
3242   E5                     PUSH   HL   
3243   11 14 00               LD   DE,20   
3246   B7                     OR   A   
3247   ED 52                  SBC   HL,DE   
3249   7D                     LD   A,L   
324A   B4                     OR   H   
324B   28 70                  JR   Z,expectM_0_2245S43   
324D   CD E8 08               CALL   printStr   
3250   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
327C   CD E8 08               CALL   printStr   
327F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
328E   21 14 00               LD   HL,20   
3291   CD 36 08               CALL   prtdec   
3294   CD E8 08               CALL   printStr   
3297   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32A4   E1                     POP   hl   
32A5   E5                     PUSH   hl   
32A6   CD 36 08               CALL   prtdec   
32A9   E1                     POP   hl   
32AA   CD E8 08               CALL   printStr   
32AD   20 28 23 00            .CSTR   " (#"   
32B1   CD 7E 08               CALL   prthex   
32B4   CD E8 08               CALL   printStr   
32B7   29 0D 0A 00            .CSTR   ")\r\n"   
32BB   76                     HALT      
32BC   00                     .CSTR      
32BD                EXPECTM_0_2245S43:      
32BD   E1                     POP   HL   
32BE                             ; 
32BE                             ; 
32BE                             ; 
32BE                             ; 
32BE                             ; 
32BE                             ; 
32BE                             ; 
32BE                             ; test "10 sqrt", 3
32BE                             ; test "10 sqrt %", 1
32BE                             ; test "[ 1 ] closure call", 1
32BE                             ; test "[ [ 2 ] ] closure call 0%", 2
32BE   CD E8 08               CALL   printStr   
32C1   44 6F 6E 65 21 00      .CSTR   "Done!"   
32C7   76                     HALT      
32C8                          ALIGN   2   
32C8                PRINTER:      
32C8   E1                     POP   hl   
32C9   CD 36 08               CALL   prtdec   
32CC   DD E9                  JP   (ix)   
32CE                             ; executes a null teminated string (null executes exit_)
32CE                             ; the string should be immedaitely following the call
32CE                EXECSTR:      ; create a root stack frame
32CE   C1                     POP   bc   ; bc = code*
32CF   0B                     DEC   bc   ; dec to prepare for next routine
32D0   11 00 00               LD   de,0   
32D3   D5                     PUSH   de   ; push fake IP
32D4   D5                     PUSH   de   ; push null arg_list*
32D5   D5                     PUSH   de   ; push null first_arg*
32D6   D5                     PUSH   de   ; push fake BP
32D7   DD E9                  JP   (ix)   
32D9                          ALIGN   $100   
3300                             ; .org RAMSTART
3300                          DS   DSIZE   
3380                STACK:       
3380                          ALIGN   $100   
3400                VARS:        
3400                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
34D0                RESTARTS:      
34D0                RST08:    DS   2   
34D2                RST10:    DS   2   
34D4                RST18:    DS   2   
34D6                RST20:    DS   2   
34D8                RST28:    DS   2   
34DA                RST30:    DS   2   ; 
34DC                BAUD:     DS   2   ; 
34DE                INTVEC:   DS   2   ; 
34E0                NMIVEC:   DS   2   ; 
34E2                GETCVEC:   DS   2   ; 
34E4                PUTCVEC:   DS   2   ; 
34E6                SYSVARS:      
34E6                             ; initialised sys variables
34E6                VDATAWIDTH:   DS   2   ; 
34E8                VTIBPTR:   DS   2   ; 
34EA                VNEXT:    DS   2   ; 
34EC                VHEAPPTR:   DS   2   ; 
34EE                             ; uninitialised sys variables
34EE                VBLOCKEND:   DS   2   ; 
34F0                VPOINTER:   DS   2   ; 
34F2                VHASHSTR:   DS   2   ; 
34F4                VLASTDEF:   DS   2   ; 
34F6                VREMAIN:   DS   2   ; 
34F8                VTEMP1:   DS   2   ; 
34FA                VTEMP2:   DS   2   ; 
34FC                TBPTR:    DS   2   ; reserved for tests
34FE                          ALIGN   $100   
3500                TIB:      DS   TIBSIZE   
3600                          ALIGN   $100   
3600                PAD:      DS   $100   
3700                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0834 DEFINED AT LINE 1347 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1202 IN monty.asm
                    > USED AT LINE 1614 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 751 IN monty.asm
                    > USED AT LINE 758 IN monty.asm
                    > USED AT LINE 1424 IN monty.asm
                    > USED AT LINE 1465 IN monty.asm
                    > USED AT LINE 1489 IN monty.asm
                    > USED AT LINE 1492 IN monty.asm
                    > USED AT LINE 1645 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 809 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 814 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1681 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1088 IN monty.asm
                    > USED AT LINE 1511 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1569 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0306 DEFINED AT LINE 221 IN monty.asm
AND_:               0309 DEFINED AT LINE 223 IN monty.asm
ARG_:               030C DEFINED AT LINE 225 IN monty.asm
ARG_LIST_:          030F DEFINED AT LINE 227 IN monty.asm
ARRBEGIN_:          0312 DEFINED AT LINE 229 IN monty.asm
ARREND_:            0315 DEFINED AT LINE 231 IN monty.asm
ARRINDEX_:          0318 DEFINED AT LINE 233 IN monty.asm
BLOCK_:             031B DEFINED AT LINE 235 IN monty.asm
BLOCKEND_:          031E DEFINED AT LINE 237 IN monty.asm
CHAR_:              0321 DEFINED AT LINE 239 IN monty.asm
COMMAND_:           0324 DEFINED AT LINE 241 IN monty.asm
DOT_:               0327 DEFINED AT LINE 243 IN monty.asm
REMAIN_:            032A DEFINED AT LINE 245 IN monty.asm
GO_:                032D DEFINED AT LINE 247 IN monty.asm
IDENTU_:            0330 DEFINED AT LINE 249 IN monty.asm
IDENTL_:            0333 DEFINED AT LINE 251 IN monty.asm
IF_:                0336 DEFINED AT LINE 253 IN monty.asm
INV_:               0339 DEFINED AT LINE 255 IN monty.asm
MUL_:               033F DEFINED AT LINE 258 IN monty.asm
NOT_:               0342 DEFINED AT LINE 260 IN monty.asm
NUM_:               0347 DEFINED AT LINE 263 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
HEXNUM_:            034A DEFINED AT LINE 265 IN monty.asm
OR_:                034D DEFINED AT LINE 267 IN monty.asm
XOR_:               0350 DEFINED AT LINE 269 IN monty.asm
STRING_:            0353 DEFINED AT LINE 271 IN monty.asm
SUB_:               0356 DEFINED AT LINE 273 IN monty.asm
SUB1:               0362 DEFINED AT LINE 281 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
SUB2:               0364 DEFINED AT LINE 284 IN monty.asm
EQ_:                036A DEFINED AT LINE 290 IN monty.asm
EQ0:                0374 DEFINED AT LINE 297 IN monty.asm
                    > USED AT LINE 294 IN monty.asm
EQ1:                0375 DEFINED AT LINE 299 IN monty.asm
                    > USED AT LINE 262 IN monty.asm
GT_:                0379 DEFINED AT LINE 303 IN monty.asm
LT_:                0384 DEFINED AT LINE 312 IN monty.asm
LT1:                038D DEFINED AT LINE 319 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
DIV_:               0396 DEFINED AT LINE 325 IN monty.asm
NOP_:               03A5 DEFINED AT LINE 336 IN monty.asm
ADDR:               03A7 DEFINED AT LINE 344 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
AND:                03B3 DEFINED AT LINE 350 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
AND1:               03BA DEFINED AT LINE 358 IN monty.asm
                    > USED AT LINE 370 IN monty.asm
                    > USED AT LINE 380 IN monty.asm
OR:                 03BE DEFINED AT LINE 362 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
XOR:                03C7 DEFINED AT LINE 371 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
XOR1:               03C8 DEFINED AT LINE 373 IN monty.asm
                    > USED AT LINE 257 IN monty.asm
ARG:                03D0 DEFINED AT LINE 385 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARG0:               03EE DEFINED AT LINE 406 IN monty.asm
                    > USED AT LINE 412 IN monty.asm
ARG0A:              03F7 DEFINED AT LINE 414 IN monty.asm
                    > USED AT LINE 391 IN monty.asm
                    > USED AT LINE 398 IN monty.asm
ARG1:               03FC DEFINED AT LINE 417 IN monty.asm
                    > USED AT LINE 410 IN monty.asm
ARG1A:              0404 DEFINED AT LINE 424 IN monty.asm
                    > USED AT LINE 416 IN monty.asm
ARG_LIST:           0407 DEFINED AT LINE 433 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARG_LIST1:          0411 DEFINED AT LINE 440 IN monty.asm
                    > USED AT LINE 458 IN monty.asm
ARG_LIST2:          041D DEFINED AT LINE 448 IN monty.asm
                    > USED AT LINE 445 IN monty.asm
ARG_LIST3:          0425 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 447 IN monty.asm
                    > USED AT LINE 454 IN monty.asm
ARG_LIST4:          0428 DEFINED AT LINE 459 IN monty.asm
                    > USED AT LINE 443 IN monty.asm
ARG_LIST5:          042D DEFINED AT LINE 464 IN monty.asm
                    > USED AT LINE 462 IN monty.asm
ARRBEGIN:           0439 DEFINED AT LINE 475 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARREND:             0455 DEFINED AT LINE 489 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
ARREND1:            046F DEFINED AT LINE 505 IN monty.asm
                    > USED AT LINE 521 IN monty.asm
ARREND2:            047F DEFINED AT LINE 515 IN monty.asm
                    > USED AT LINE 511 IN monty.asm
ARRINDEX:           04A3 DEFINED AT LINE 542 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
ARRINDEX0:          04AB DEFINED AT LINE 548 IN monty.asm
ARRINDEX1:          04AC DEFINED AT LINE 550 IN monty.asm
                    > USED AT LINE 547 IN monty.asm
ARRINDEX2:          04B8 DEFINED AT LINE 559 IN monty.asm
                    > USED AT LINE 556 IN monty.asm
ASSIGN:             04BB DEFINED AT LINE 565 IN monty.asm
                    > USED AT LINE 296 IN monty.asm
ASSIGN1:            04C9 DEFINED AT LINE 575 IN monty.asm
                    > USED AT LINE 572 IN monty.asm
BLOCK:              04CB DEFINED AT LINE 578 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
BLOCK1:             04CF DEFINED AT LINE 582 IN monty.asm
                    > USED AT LINE 586 IN monty.asm
                    > USED AT LINE 608 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
                    > USED AT LINE 616 IN monty.asm
                    > USED AT LINE 620 IN monty.asm
BLOCK2:             04FB DEFINED AT LINE 609 IN monty.asm
                    > USED AT LINE 596 IN monty.asm
                    > USED AT LINE 598 IN monty.asm
                    > USED AT LINE 600 IN monty.asm
BLOCK3:             04FE DEFINED AT LINE 612 IN monty.asm
                    > USED AT LINE 603 IN monty.asm
                    > USED AT LINE 605 IN monty.asm
                    > USED AT LINE 607 IN monty.asm
BLOCK4:             0506 DEFINED AT LINE 618 IN monty.asm
                    > USED AT LINE 589 IN monty.asm
                    > USED AT LINE 591 IN monty.asm
                    > USED AT LINE 593 IN monty.asm
BLOCK5:             0509 DEFINED AT LINE 621 IN monty.asm
                    > USED AT LINE 617 IN monty.asm
BLOCK6:             0531 DEFINED AT LINE 640 IN monty.asm
                    > USED AT LINE 627 IN monty.asm
BLOCKEND:           0534 DEFINED AT LINE 644 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
                    > USED AT LINE 1264 IN monty.asm
BLOCKEND1:          0560 DEFINED AT LINE 666 IN monty.asm
                    > USED AT LINE 659 IN monty.asm
BLOCKEND2:          056C DEFINED AT LINE 673 IN monty.asm
                    > USED AT LINE 665 IN monty.asm
BLOCKEND3:          057E DEFINED AT LINE 687 IN monty.asm
                    > USED AT LINE 679 IN monty.asm
CHAR:               0589 DEFINED AT LINE 698 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
CHAR1:              058C DEFINED AT LINE 700 IN monty.asm
                    > USED AT LINE 711 IN monty.asm
CHAR2:              0598 DEFINED AT LINE 709 IN monty.asm
                    > USED AT LINE 706 IN monty.asm
CHAR3:              059B DEFINED AT LINE 712 IN monty.asm
                    > USED AT LINE 704 IN monty.asm
DOT:                059E DEFINED AT LINE 734 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
DOT1:               05AA DEFINED AT LINE 742 IN monty.asm
                    > USED AT LINE 739 IN monty.asm
DOT2:               05B3 DEFINED AT LINE 747 IN monty.asm
                    > USED AT LINE 744 IN monty.asm
DOT3:               05BD DEFINED AT LINE 753 IN monty.asm
                    > USED AT LINE 749 IN monty.asm
DOT4:               05C1 DEFINED AT LINE 756 IN monty.asm
                    > USED AT LINE 741 IN monty.asm
                    > USED AT LINE 746 IN monty.asm
                    > USED AT LINE 752 IN monty.asm
DIVIDE:             05C8 DEFINED AT LINE 764 IN monty.asm
                    > USED AT LINE 330 IN monty.asm
DIVIDE1:            05CD DEFINED AT LINE 767 IN monty.asm
                    > USED AT LINE 779 IN monty.asm
DIVIDE2:            05DA DEFINED AT LINE 775 IN monty.asm
                    > USED AT LINE 772 IN monty.asm
DIVIDE3:            05DB DEFINED AT LINE 777 IN monty.asm
                    > USED AT LINE 774 IN monty.asm
EQUALS:             05E1 DEFINED AT LINE 785 IN monty.asm
                    > USED AT LINE 301 IN monty.asm
LESSTHANEQ:         05E9 DEFINED AT LINE 793 IN monty.asm
                    > USED AT LINE 321 IN monty.asm
LESSTHAN:           05EE DEFINED AT LINE 800 IN monty.asm
                    > USED AT LINE 323 IN monty.asm
LESSTHAN1:          05F3 DEFINED AT LINE 805 IN monty.asm
                    > USED AT LINE 796 IN monty.asm
TRUE1:              05F6 DEFINED AT LINE 808 IN monty.asm
                    > USED AT LINE 788 IN monty.asm
                    > USED AT LINE 1135 IN monty.asm
NULL1:              05FC DEFINED AT LINE 812 IN monty.asm
FALSE1:             05FC DEFINED AT LINE 813 IN monty.asm
                    > USED AT LINE 789 IN monty.asm
                    > USED AT LINE 803 IN monty.asm
                    > USED AT LINE 806 IN monty.asm
                    > USED AT LINE 1123 IN monty.asm
GO:                 0602 DEFINED AT LINE 822 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
                    > USED AT LINE 1227 IN monty.asm
GO1:                0603 DEFINED AT LINE 824 IN monty.asm
                    > USED AT LINE 967 IN monty.asm
                    > USED AT LINE 969 IN monty.asm
                    > USED AT LINE 1239 IN monty.asm
GO2:                0609 DEFINED AT LINE 829 IN monty.asm
                    > USED AT LINE 827 IN monty.asm
GOFUNC:             060F DEFINED AT LINE 834 IN monty.asm
GOFUNC1:            0622 DEFINED AT LINE 852 IN monty.asm
                    > USED AT LINE 849 IN monty.asm
GOFUNC2:            0628 DEFINED AT LINE 858 IN monty.asm
                    > USED AT LINE 862 IN monty.asm
GOFUNC3:            062D DEFINED AT LINE 863 IN monty.asm
                    > USED AT LINE 857 IN monty.asm
GOBLOCK:            063B DEFINED AT LINE 876 IN monty.asm
                    > USED AT LINE 832 IN monty.asm
GOBLOCK2:           065C DEFINED AT LINE 894 IN monty.asm
                    > USED AT LINE 851 IN monty.asm
                    > USED AT LINE 886 IN monty.asm
GOBLOCK3:           0661 DEFINED AT LINE 898 IN monty.asm
                    > USED AT LINE 893 IN monty.asm
GOBLOCK4:           0662 DEFINED AT LINE 900 IN monty.asm
                    > USED AT LINE 874 IN monty.asm
HEXNUM:             066F DEFINED AT LINE 908 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
HEXNUM1:            0672 DEFINED AT LINE 910 IN monty.asm
                    > USED AT LINE 927 IN monty.asm
HEXNUM2:            067A DEFINED AT LINE 916 IN monty.asm
                    > USED AT LINE 914 IN monty.asm
IDENTU:             068C DEFINED AT LINE 928 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IDENTL:             0691 DEFINED AT LINE 932 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
IDENT1:             0696 DEFINED AT LINE 936 IN monty.asm
                    > USED AT LINE 931 IN monty.asm
IF:                 06A3 DEFINED AT LINE 949 IN monty.asm
                    > USED AT LINE 254 IN monty.asm
IFTE:               06AF DEFINED AT LINE 959 IN monty.asm
                    > USED AT LINE 953 IN monty.asm
IFTE1:              06B0 DEFINED AT LINE 961 IN monty.asm
                    > USED AT LINE 956 IN monty.asm
MUL:                06BC DEFINED AT LINE 971 IN monty.asm
                    > USED AT LINE 259 IN monty.asm
MUL2:               06C6 DEFINED AT LINE 980 IN monty.asm
                    > USED AT LINE 989 IN monty.asm
NUM:                06D8 DEFINED AT LINE 994 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
NUM0:               06E1 DEFINED AT LINE 1000 IN monty.asm
                    > USED AT LINE 998 IN monty.asm
NUM1:               06E2 DEFINED AT LINE 1002 IN monty.asm
                    > USED AT LINE 1019 IN monty.asm
NUM2:               06FA DEFINED AT LINE 1020 IN monty.asm
                    > USED AT LINE 918 IN monty.asm
                    > USED AT LINE 920 IN monty.asm
                    > USED AT LINE 1005 IN monty.asm
                    > USED AT LINE 1007 IN monty.asm
NUM3:               0705 DEFINED AT LINE 1028 IN monty.asm
                    > USED AT LINE 1023 IN monty.asm
REMAIN:             0708 DEFINED AT LINE 1032 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
SHIFTLEFT:          070E DEFINED AT LINE 1039 IN monty.asm
                    > USED AT LINE 316 IN monty.asm
SHIFTLEFT1:         0716 DEFINED AT LINE 1046 IN monty.asm
                    > USED AT LINE 1049 IN monty.asm
SHIFTLEFT2:         0717 DEFINED AT LINE 1048 IN monty.asm
                    > USED AT LINE 1045 IN monty.asm
SHIFTRIGHT:         071E DEFINED AT LINE 1056 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
SHIFTRIGHT1:        0726 DEFINED AT LINE 1063 IN monty.asm
                    > USED AT LINE 1067 IN monty.asm
SHIFTRIGHT2:        072A DEFINED AT LINE 1066 IN monty.asm
                    > USED AT LINE 1062 IN monty.asm
STRING:             0731 DEFINED AT LINE 1075 IN monty.asm
                    > USED AT LINE 272 IN monty.asm
STRING1:            073A DEFINED AT LINE 1082 IN monty.asm
                    > USED AT LINE 1089 IN monty.asm
                    > USED AT LINE 1091 IN monty.asm
STRING2:            073D DEFINED AT LINE 1086 IN monty.asm
                    > USED AT LINE 1081 IN monty.asm
COMMAND:            0759 DEFINED AT LINE 1111 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
ABS1:               07A2 DEFINED AT LINE 1144 IN monty.asm
                    > USED AT LINE 1117 IN monty.asm
COMMENT:            07AF DEFINED AT LINE 1157 IN monty.asm
                    > USED AT LINE 1115 IN monty.asm
                    > USED AT LINE 1161 IN monty.asm
BYTES:              07B8 DEFINED AT LINE 1165 IN monty.asm
                    > USED AT LINE 1119 IN monty.asm
BYTES1:             07BB DEFINED AT LINE 1167 IN monty.asm
                    > USED AT LINE 1243 IN monty.asm
FUNC:               07C0 DEFINED AT LINE 1172 IN monty.asm
                    > USED AT LINE 1121 IN monty.asm
INPUT:              07D7 DEFINED AT LINE 1191 IN monty.asm
                    > USED AT LINE 1125 IN monty.asm
KEY:                07E2 DEFINED AT LINE 1201 IN monty.asm
                    > USED AT LINE 1127 IN monty.asm
OUTPUT:             07EB DEFINED AT LINE 1210 IN monty.asm
                    > USED AT LINE 1129 IN monty.asm
REPEAT:             07F4 DEFINED AT LINE 1221 IN monty.asm
                    > USED AT LINE 1131 IN monty.asm
SELECT:             07FC DEFINED AT LINE 1231 IN monty.asm
                    > USED AT LINE 1133 IN monty.asm
WORDS:              0806 DEFINED AT LINE 1241 IN monty.asm
                    > USED AT LINE 1137 IN monty.asm
BLOCKEXIT:          080C DEFINED AT LINE 1245 IN monty.asm
                    > USED AT LINE 1139 IN monty.asm
BLOCKEXIT1:         0813 DEFINED AT LINE 1251 IN monty.asm
                    > USED AT LINE 1249 IN monty.asm
LOOP:               0832 DEFINED AT LINE 1274 IN monty.asm
FILTER:             0834 DEFINED AT LINE 1345 IN monty.asm
MAP:                0834 DEFINED AT LINE 1346 IN monty.asm
PRTDEC:             0836 DEFINED AT LINE 1420 IN monty.asm
                    > USED AT LINE 755 IN monty.asm
                    > USED AT LINE 1691 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 128
PRTDEC0:            0845 DEFINED AT LINE 1431 IN monty.asm
                    > USED AT LINE 1422 IN monty.asm
PRTDEC1:            0867 DEFINED AT LINE 1447 IN monty.asm
                    > USED AT LINE 1435 IN monty.asm
                    > USED AT LINE 1437 IN monty.asm
                    > USED AT LINE 1439 IN monty.asm
                    > USED AT LINE 1441 IN monty.asm
                    > USED AT LINE 1444 IN monty.asm
PRTDEC2:            0869 DEFINED AT LINE 1449 IN monty.asm
                    > USED AT LINE 1452 IN monty.asm
PRTDEC3:            0879 DEFINED AT LINE 1461 IN monty.asm
                    > USED AT LINE 1456 IN monty.asm
PRTDEC4:            087A DEFINED AT LINE 1463 IN monty.asm
                    > USED AT LINE 1460 IN monty.asm
PRTHEX:             087E DEFINED AT LINE 1467 IN monty.asm
                    > USED AT LINE 740 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0889 DEFINED AT LINE 1475 IN monty.asm
                    > USED AT LINE 1470 IN monty.asm
                    > USED AT LINE 1472 IN monty.asm
PRTHEX3:            0892 DEFINED AT LINE 1483 IN monty.asm
                    > USED AT LINE 1481 IN monty.asm
PRTSTR0:            089D DEFINED AT LINE 1491 IN monty.asm
                    > USED AT LINE 1497 IN monty.asm
PRTSTR:             08A1 DEFINED AT LINE 1494 IN monty.asm
                    > USED AT LINE 745 IN monty.asm
                    > USED AT LINE 1561 IN monty.asm
NESTING:            08A6 DEFINED AT LINE 1510 IN monty.asm
                    > USED AT LINE 1605 IN monty.asm
                    > USED AT LINE 1646 IN monty.asm
NESTING0:           08B0 DEFINED AT LINE 1516 IN monty.asm
                    > USED AT LINE 1512 IN monty.asm
                    > USED AT LINE 1514 IN monty.asm
NESTING1A:          08B7 DEFINED AT LINE 1521 IN monty.asm
                    > USED AT LINE 1518 IN monty.asm
NESTING1:           08BA DEFINED AT LINE 1524 IN monty.asm
                    > USED AT LINE 1515 IN monty.asm
NESTING2:           08C9 DEFINED AT LINE 1533 IN monty.asm
                    > USED AT LINE 1528 IN monty.asm
                    > USED AT LINE 1530 IN monty.asm
NESTING3:           08CB DEFINED AT LINE 1536 IN monty.asm
                    > USED AT LINE 1532 IN monty.asm
NESTING4:           08D6 DEFINED AT LINE 1543 IN monty.asm
                    > USED AT LINE 1538 IN monty.asm
                    > USED AT LINE 1540 IN monty.asm
PROMPT:             08D8 DEFINED AT LINE 1547 IN monty.asm
                    > USED AT LINE 1589 IN monty.asm
CRLF:               08E1 DEFINED AT LINE 1552 IN monty.asm
                    > USED AT LINE 1658 IN monty.asm
PRINTSTR:           08E8 DEFINED AT LINE 1559 IN monty.asm
                    > USED AT LINE 1548 IN monty.asm
                    > USED AT LINE 1553 IN monty.asm
                    > USED AT LINE 1585 IN monty.asm
                    > USED AT LINE 1689 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 121
INIT:               08EF DEFINED AT LINE 1566 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1584 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              0908 DEFINED AT LINE 1576 IN monty.asm
                    > USED AT LINE 1579 IN monty.asm
START:              090D DEFINED AT LINE 1582 IN monty.asm
INTERPRET:          0923 DEFINED AT LINE 1588 IN monty.asm
                    > USED AT LINE 1683 IN monty.asm
                    > USED AT LINE 1692 IN monty.asm
INTERPRET2:         092D DEFINED AT LINE 1594 IN monty.asm
                    > USED AT LINE 1638 IN monty.asm
INTERPRET3:         0935 DEFINED AT LINE 1601 IN monty.asm
                    > USED AT LINE 1610 IN monty.asm
INTERPRET4:         093B DEFINED AT LINE 1607 IN monty.asm
                    > USED AT LINE 1599 IN monty.asm
INTERPRET5:         0940 DEFINED AT LINE 1613 IN monty.asm
                    > USED AT LINE 1647 IN monty.asm
                    > USED AT LINE 1661 IN monty.asm
INTERPRET6:         0951 DEFINED AT LINE 1640 IN monty.asm
                    > USED AT LINE 1616 IN monty.asm
INTERPRET7:         095F DEFINED AT LINE 1649 IN monty.asm
                    > USED AT LINE 1621 IN monty.asm
INTERPRET8:         0972 DEFINED AT LINE 1663 IN monty.asm
                    > USED AT LINE 1619 IN monty.asm
NEXT:               097A DEFINED AT LINE 1669 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1673 IN monty.asm
NEXT1:              0989 DEFINED AT LINE 1680 IN monty.asm
                    > USED AT LINE 1674 IN monty.asm
EXIT_:              0990 DEFINED AT LINE 1684 IN monty.asm
                    > USED AT LINE 1682 IN monty.asm
ERROR:              0993 DEFINED AT LINE 1688 IN monty.asm
                    > USED AT LINE 1142 IN monty.asm
TESTSSTART:         0A00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2159S43:  0AA3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2161S43:  0B09 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2162S43:  0B6F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2163S43:  0BD3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2164S43:  0C37 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2165S43:  0C9B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2166S43:  0CFF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2167S43:  0D65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2168S43:  0DCD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2169S43:  0E33 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2170S43:  0E99 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2171S43:  0F01 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2172S43:  0F6B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2173S43:  0FD3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2174S43:  103B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2175S43:  10A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2176S43:  1117 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2177S43:  1183 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2178S43:  11F3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2179S43:  125F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2180S43:  12D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2181S43:  1345 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2182S43:  13B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2183S43:  1421 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2184S43:  148D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2185S43:  14F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2186S43:  1565 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2187S43:  15D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2188S43:  1645 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2189S43:  16B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2190S43:  1723 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2191S43:  1791 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2192S43:  17FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2193S43:  1869 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2194S43:  18D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2195S43:  1941 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2196S43:  19AD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2197S43:  1A19 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2198S43:  1A85 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2199S43:  1AF1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2200S43:  1B5F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2201S43:  1BCD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2202S43:  1C3B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2203S43:  1CAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2204S43:  1D1B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2205S43:  1D85 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2206S43:  1DEF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2207S43:  1E5F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2208S43:  1ED5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2209S43:  1F4D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2210S43:  1FC9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2211S43:  2051 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2212S43:  20D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2213S43:  2147 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2214S43:  21B7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2215S43:  2229 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2216S43:  229D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2217S43:  230F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2218S43:  2385 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2219S43:  23FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2220S43:  247B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2221S43:  24FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2222S43:  257B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2223S43:  2603 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2224S43:  268D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2225S43:  271D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2226S43:  27B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2227S43:  2837 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2228S43:  28C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2229S43:  2951 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2230S43:  29E1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2231S43:  2A6F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2232S43:  2B0B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2233S43:  2B95 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2234S43:  2C2B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2235S43:  2CC3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2236S43:  2D5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2237S43:  2E07 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2238S43:  2EB1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2239S43:  2F2D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2240S43:  2FA9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2241S43:  3031 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2242S43:  30BD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2243S43:  3165 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2244S43:  3211 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2245S43:  32BD DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            32C8 DEFINED AT LINE 126
EXECSTR:            32CE DEFINED AT LINE 133
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3380 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 879 IN monty.asm
                    > USED AT LINE 1568 IN monty.asm
                    > USED AT LINE 1583 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3400 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1573 IN monty.asm
RESTARTS:           34D0 DEFINED AT LINE 11 IN ram.asm
RST08:              34D0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              34D2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              34D4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              34D6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              34D8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              34DA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               34DC DEFINED AT LINE 19 IN ram.asm
INTVEC:             34DE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             34E0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            34E2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            34E4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            34E6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1570 IN monty.asm
VDATAWIDTH:         34E6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 509 IN monty.asm
                    > USED AT LINE 545 IN monty.asm
                    > USED AT LINE 570 IN monty.asm
                    > USED AT LINE 1168 IN monty.asm
VTIBPTR:            34E8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1592 IN monty.asm
                    > USED AT LINE 1664 IN monty.asm
VNEXT:              34EA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1567 IN monty.asm
VHEAPPTR:           34EC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 435 IN monty.asm
                    > USED AT LINE 466 IN monty.asm
                    > USED AT LINE 499 IN monty.asm
                    > USED AT LINE 531 IN monty.asm
                    > USED AT LINE 532 IN monty.asm
                    > USED AT LINE 635 IN monty.asm
                    > USED AT LINE 638 IN monty.asm
                    > USED AT LINE 1076 IN monty.asm
                    > USED AT LINE 1095 IN monty.asm
                    > USED AT LINE 1174 IN monty.asm
                    > USED AT LINE 1184 IN monty.asm
                    > USED AT LINE 1186 IN monty.asm
VBLOCKEND:          34EE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           34F0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 345 IN monty.asm
                    > USED AT LINE 347 IN monty.asm
                    > USED AT LINE 348 IN monty.asm
                    > USED AT LINE 420 IN monty.asm
                    > USED AT LINE 552 IN monty.asm
                    > USED AT LINE 568 IN monty.asm
                    > USED AT LINE 940 IN monty.asm
VHASHSTR:           34F2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           34F4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            34F6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 331 IN monty.asm
                    > USED AT LINE 1033 IN monty.asm
VTEMP1:             34F8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 492 IN monty.asm
                    > USED AT LINE 533 IN monty.asm
                    > USED AT LINE 630 IN monty.asm
                    > USED AT LINE 639 IN monty.asm
VTEMP2:             34FA DEFINED AT LINE 42 IN ram.asm
TBPTR:              34FC DEFINED AT LINE 43 IN ram.asm
TIB:                3500 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1598 IN monty.asm
                    > USED AT LINE 1641 IN monty.asm
                    > USED AT LINE 1650 IN monty.asm
                    > USED AT LINE 1665 IN monty.asm
PAD:                3600 DEFINED AT LINE 49 IN ram.asm
HEAP:               3700 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 623 IN monty.asm
