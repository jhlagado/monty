0000                             ; .engine mycomputer
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 3D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 3D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 3D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 3D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 3D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 3D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 3D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 3D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 3D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 3D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 3C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 3D               LD   (RST08),HL   
0094   22 D2 3D               LD   (RST10),HL   
0097   22 D4 3D               LD   (RST18),HL   
009A   22 D6 3D               LD   (RST20),HL   
009D   22 D8 3D               LD   (RST28),HL   
00A0   22 DA 3D               LD   (RST30),HL   
00A3   22 DE 3D               LD   (INTVEC),HL   
00A6   22 E0 3D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 3D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 3D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 3C               LD   SP,STACK   
00C6   CD 66 09               CALL   init   
00C9   C3 00 0B               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   F1 09                  DW   next   ; g nNext
0186   00 40                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   88                     DB   lsb(nop_)   ; SP
0221   42                     DB   lsb(not_)   ; !
0222   53                     DB   lsb(string_)   ; "
0223   4A                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   15                     DB   lsb(arrIndex_)   ; %
0226   06                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   88                     DB   lsb(nop_)   ; )
022A   3F                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   88                     DB   lsb(nop_)   ; ,
022D   56                     DB   lsb(sub_)   ; -
022E   27                     DB   lsb(dot_)   ; .
022F   85                     DB   lsb(div_)   ; /	
0230   47                     DB   lsb(num_)   ; 0
0231   47                     DB   lsb(num_)   ; 1
0232   47                     DB   lsb(num_)   ; 2
0233   47                     DB   lsb(num_)   ; 3
0234   47                     DB   lsb(num_)   ; 4
0235   47                     DB   lsb(num_)   ; 5
0236   47                     DB   lsb(num_)   ; 6
0237   47                     DB   lsb(num_)   ; 7
0238   47                     DB   lsb(num_)   ; 8
0239   47                     DB   lsb(num_)   ; 9
023A   2D                     DB   lsb(go_)   ; :
023B   24                     DB   lsb(discard_)   ; ;
023C   73                     DB   lsb(lt_)   ; <
023D   59                     DB   lsb(eq_)   ; =
023E   68                     DB   lsb(gt_)   ; >
023F   36                     DB   lsb(if_)   ; ?
0240   03                     DB   lsb(addr_)   ; @
0241   30                     DB   lsb(identU_)   ; A
0242   30                     DB   lsb(identU_)   ; B
0243   30                     DB   lsb(identU_)   ; C
0244   30                     DB   lsb(identU_)   ; D
0245   30                     DB   lsb(identU_)   ; E
0246   30                     DB   lsb(identU_)   ; F
0247   30                     DB   lsb(identU_)   ; G
0248   30                     DB   lsb(identU_)   ; h
0249   30                     DB   lsb(identU_)   ; I
024A   30                     DB   lsb(identU_)   ; J
024B   30                     DB   lsb(identU_)   ; K
024C   30                     DB   lsb(identU_)   ; L
024D   30                     DB   lsb(identU_)   ; M
024E   30                     DB   lsb(identU_)   ; N
024F   30                     DB   lsb(identU_)   ; O
0250   30                     DB   lsb(identU_)   ; p
0251   30                     DB   lsb(identU_)   ; Q
0252   30                     DB   lsb(identU_)   ; R
0253   30                     DB   lsb(identU_)   ; S
0254   30                     DB   lsb(identU_)   ; T
0255   30                     DB   lsb(identU_)   ; U
0256   30                     DB   lsb(identU_)   ; V
0257   30                     DB   lsb(identU_)   ; W
0258   30                     DB   lsb(identU_)   ; X
0259   30                     DB   lsb(identU_)   ; Y
025A   30                     DB   lsb(identU_)   ; Z
025B   0F                     DB   lsb(arrBegin_)   ; [
025C   21                     DB   lsb(command_)   ; \
025D   12                     DB   lsb(arrEnd_)   ; ]
025E   50                     DB   lsb(xor_)   ; ^
025F   2A                     DB   lsb(remain_)   ; _
0260   53                     DB   lsb(string_)   ; `     used for testing string   	
0261   33                     DB   lsb(identL_)   ; a
0262   33                     DB   lsb(identL_)   ; b
0263   33                     DB   lsb(identL_)   ; c
0264   33                     DB   lsb(identL_)   ; d
0265   33                     DB   lsb(identL_)   ; e
0266   33                     DB   lsb(identL_)   ; f
0267   33                     DB   lsb(identL_)   ; g
0268   33                     DB   lsb(identL_)   ; h
0269   33                     DB   lsb(identL_)   ; i
026A   33                     DB   lsb(identL_)   ; j
026B   33                     DB   lsb(identL_)   ; k
026C   33                     DB   lsb(identL_)   ; l
026D   33                     DB   lsb(identL_)   ; m
026E   33                     DB   lsb(identL_)   ; n
026F   33                     DB   lsb(identL_)   ; o
0270   33                     DB   lsb(identL_)   ; p
0271   33                     DB   lsb(identL_)   ; q
0272   33                     DB   lsb(identL_)   ; r
0273   33                     DB   lsb(identL_)   ; s
0274   33                     DB   lsb(identL_)   ; t
0275   33                     DB   lsb(identL_)   ; u
0276   33                     DB   lsb(identL_)   ; v
0277   33                     DB   lsb(identL_)   ; w
0278   33                     DB   lsb(identL_)   ; x
0279   33                     DB   lsb(identL_)   ; y
027A   33                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   4D                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   39                     DB   lsb(inv_)   ; ~
027F   88                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   C3 8A 03               JP   add   
0303                ADDR_:       
0303   C3 A4 03               JP   addr   
0306                AND_:        
0306   C3 B0 03               JP   and   
0309                ARG_:        
0309   C3 CD 03               JP   arg   
030C                ARG_LIST_:      
030C   C3 04 04               JP   arg_list   
030F                ARRBEGIN_:      
030F   C3 36 04               JP   arrBegin   
0312                ARREND_:      
0312   C3 52 04               JP   arrEnd   
0315                ARRINDEX_:      
0315   C3 A0 04               JP   arrIndex   
0318                BLOCK_:      
0318   C3 C9 04               JP   block   
031B                BLOCKEND_:      
031B   C3 32 05               JP   blockend   
031E                CHAR_:       
031E   C3 87 05               JP   char   
0321                COMMAND_:      
0321   C3 B6 07               JP   command   
0324                DISCARD_:      
0324   E1                     POP   hl   
0325   DD E9                  JP   (ix)   
0327                DOT_:        
0327   C3 AD 05               JP   dot   
032A                REMAIN_:      
032A   C3 46 07               JP   remain   
032D                GO_:         
032D   C3 11 06               JP   go   
0330                IDENTU_:      
0330   C3 CA 06               JP   identU   
0333                IDENTL_:      
0333   C3 CF 06               JP   identL   
0336                IF_:         
0336   C3 E1 06               JP   if   
0339                INV_:        ; Bitwise INVert the top member of the stack
0339   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
033C   C3 C5 03               JP   xor1   
033F                MUL_:        
033F   C3 FA 06               JP   mul   
0342                NOT_:        ; logical invert, any non zero value
0342   21 00 00               LD   hl,0   ; is considered true
0345   18 1D                  JR   eq1   
0347                NUM_:        
0347   C3 16 07               JP   num   
034A                HEXNUM_:      
034A   C3 AD 06               JP   hexnum   
034D                OR_:         
034D   C3 BB 03               JP   or   
0350                XOR_:        
0350   C3 C4 03               JP   xor   
0353                STRING_:      
0353   C3 6F 07               JP   string   
0356                SUB_:        
0356   C3 97 07               JP   sub   
0359                EQ_:         
0359   03                     INC   bc   
035A   0A                     LD   a,(bc)   ; is it == ?
035B   FE 3D                  CP   "="   
035D   28 04                  JR   z,eq0   ; no its equality
035F   0B                     DEC   bc   
0360   C3 B8 04               JP   assign   ; no its assignment
0363                EQ0:         
0363   E1                     POP   hl   
0364                EQ1:         
0364   D1                     POP   de   
0365   C3 F0 05               JP   equals   
0368                GT_:         
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   CA 5C 07               JP   z,shiftRight   
036F   D1                     POP   de   
0370   E1                     POP   hl   
0371   18 09                  JR   lt1   
0373                LT_:         
0373   03                     INC   bc   
0374   0A                     LD   a,(bc)   
0375   FE 3C                  CP   "<"   
0377   CA 4C 07               JP   z,shiftLeft   
037A   E1                     POP   hl   
037B   D1                     POP   de   
037C                LT1:         
037C   FE 3D                  CP   "="   
037E   CA F8 05               JP   z,lessthaneq   
0381   0B                     DEC   bc   
0382   C3 FD 05               JP   lessthan   
0385                DIV_:        
0385   C3 9C 05               JP   div   
0388                NOP_:        
0388   DD E9                  JP   (ix)   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 BA 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399   03                     INC   bc   
039A   0A                     LD   a,(bc)   
039B   FE 3D                  CP   "="   ; += add to variable
039D   CA BA 04               JP   z,assign0   
03A0   E5                     PUSH   hl   
03A1   0B                     DEC   bc   
03A2   DD E9                  JP   (ix)   
03A4                             ; -- ptr
03A4                ADDR:        
03A4   2A F0 3D               LD   hl,(vPointer)   
03A7   E5                     PUSH   hl   
03A8   21 F0 3D               LD   hl,vPointer   
03AB   22 F0 3D               LD   (vPointer),hl   
03AE   DD E9                  JP   (ix)   
03B0                AND:         
03B0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B1   E1                     POP   hl   
03B2   7B                     LD   a,e   
03B3   A5                     AND   l   
03B4   6F                     LD   l,a   
03B5   7A                     LD   a,d   
03B6   A4                     AND   h   
03B7                AND1:        
03B7   67                     LD   h,a   
03B8   C3 99 03               JP   add3   
03BB                OR:          
03BB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BC   E1                     POP   hl   
03BD   7B                     LD   a,e   
03BE   B5                     OR   l   
03BF   6F                     LD   l,a   
03C0   7A                     LD   a,d   
03C1   B4                     OR   h   
03C2   18 F3                  JR   and1   
03C4                XOR:         
03C4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C5                XOR1:        
03C5   E1                     POP   hl   
03C6   7B                     LD   a,e   
03C7   AD                     XOR   l   
03C8   6F                     LD   l,a   
03C9   7A                     LD   a,d   
03CA   AC                     XOR   h   
03CB   18 EA                  JR   and1   
03CD                             ; $a .. $z
03CD                             ; -- value
03CD                             ; returns value of arg
03CD                ARG:         
03CD   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D0   FD 56 05               LD   d,(iy+5)   
03D3   EB                     EX   de,hl   
03D4   7D                     LD   a,l   ; arg_list* == null, skip
03D5   B4                     OR   h   
03D6   28 1C                  JR   z,arg0a   
03D8   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D9   2B                     DEC   hl   
03DA   7E                     LD   a,(hl)   
03DB   23                     INC   hl   
03DC   23                     INC   hl   
03DD   B7                     OR   a   
03DE   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E0   5F                     LD   e,a   ; e = a = num_args
03E1   03                     INC   bc   ; a = next char = arg_name
03E2   0A                     LD   a,(bc)   
03E3   C5                     PUSH   bc   ; save IP
03E4   43                     LD   b,e   ; b = e = num_args
03E5   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E8   FD 56 03               LD   d,(iy+3)   
03EB                ARG0:        
03EB   1B                     DEC   de   ; a = arg_name, de = next arg*
03EC   1B                     DEC   de   
03ED   BE                     CP   (hl)   
03EE   28 09                  JR   z,arg1   
03F0   23                     INC   hl   ; hl = next arg_list*
03F1   10 F8                  DJNZ   arg0   
03F3   C1                     POP   bc   ; no match, restore IP
03F4                ARG0A:       
03F4   11 00 00               LD   de,0   ; return 0
03F7   18 08                  JR   arg1a   
03F9                ARG1:        
03F9   C1                     POP   bc   ; restore IP
03FA   EB                     EX   de,hl   ; hl = arg*
03FB   22 F0 3D               LD   (vPointer),hl   ; store arg* in setter
03FE   5E                     LD   e,(hl)   
03FF   23                     INC   hl   
0400   56                     LD   d,(hl)   ; de = arg
0401                ARG1A:       
0401   D5                     PUSH   de   ; push arg
0402   DD E9                  JP   (ix)   
0404                             ; arg_list - parses input (ab:c)
0404                             ; names after the : represent uninitialised locals
0404                             ; return values are the state of the stack after the block ends
0404                ARG_LIST:      
0404   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0407   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
040A   23                     INC   hl   ; skip length field to start
040B   23                     INC   hl   
040C   E5                     PUSH   hl   ; save start of arg_list
040D   03                     INC   bc   ; point to next char
040E                ARG_LIST1:      
040E   0A                     LD   a,(bc)   
040F   FE 29                  CP   ")"   ; ) is the arg_list terminator
0411   28 12                  JR   z,arg_list4   
0413   FE 3A                  CP   ":"   
0415   20 03                  JR   nz,arg_list2   
0417   14                     INC   d   ; non zero value local count acts as flag
0418   20 08                  JR   nz,arg_list3   
041A                ARG_LIST2:      
041A   77                     LD   (hl),a   
041B   23                     INC   hl   
041C   1C                     INC   e   ; increase arg count
041D   AF                     XOR   a   
041E   B2                     OR   d   
041F   28 01                  JR   z,arg_list3   
0421   14                     INC   d   ; if d > 0 increase local count
0422                ARG_LIST3:      
0422   03                     INC   bc   ; point to next char
0423   18 E9                  JR   arg_list1   
0425                ARG_LIST4:      
0425   AF                     XOR   a   
0426   B2                     OR   d   
0427   28 01                  JR   z,arg_list5   
0429   15                     DEC   d   ; remove initial inc
042A                ARG_LIST5:      
042A   23                     INC   hl   
042B   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
042E   E1                     POP   hl   ; hl = start of arg_list
042F   E5                     PUSH   hl   ; return start of string
0430   2B                     DEC   hl   ; write length bytes to length field at start - 2
0431   72                     LD   (hl),d   
0432   2B                     DEC   hl   
0433   73                     LD   (hl),e   
0434   DD E9                  JP   (ix)   
0436                ARRBEGIN:      
0436   11 00 00               LD   de,0   ; create stack frame
0439   D5                     PUSH   de   ; push null for IP
043A   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
043D   FD 56 05               LD   d,(iy+5)   ; 
0440   D5                     PUSH   de   ; 
0441   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0444   FD 56 03               LD   d,(iy+3)   ; 
0447   D5                     PUSH   de   ; 
0448   FD E5                  PUSH   iy   ; push BP
044A   FD 21 00 00            LD   iy,0   ; BP = SP
044E   FD 39                  ADD   iy,sp   
0450   DD E9                  JP   (ix)   
0452                ARREND:      
0452   FD 54                  LD   d,iyh   ; de = BP
0454   FD 5D                  LD   e,iyl   
0456   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
045A   62 6B                  LD   hl,de   ; hl = de = BP
045C   B7                     OR   a   
045D   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
045F   CB 3C                  SRL   h   ; 
0461   CB 1D                  RR   l   
0463   44 4D                  LD   bc,hl   ; bc = count
0465   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = array[-2]
0468   71                     LD   (hl),c   ; write num items in length word
0469   23                     INC   hl   
046A   70                     LD   (hl),b   
046B   23                     INC   hl   ; hl = array[0], bc = count
046C                             ; de = BP, hl = array[0], bc = count
046C                ARREND1:      
046C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
046F   77                     LD   (hl),a   ; write lsb of array item
0470   23                     INC   hl   ; move to msb of array item
0471   3A E6 3D               LD   a,(vDataWidth)   ; vDataWidth=1?
0474   3D                     DEC   a   
0475   28 05                  JR   z,arrEnd2   
0477   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
047A   77                     LD   (hl),a   ; write msb of array item
047B   23                     INC   hl   ; move to next word in array
047C                ARREND2:      
047C   FD 2B                  DEC   iy   ; move to next word on stack
047E   FD 2B                  DEC   iy   
0480   0B                     DEC   bc   ; dec items count
0481   79                     LD   a,c   ; if not zero loop
0482   B0                     OR   b   
0483   20 E7                  JR   nz,arrEnd1   
0485   EB                     EX   de,hl   ; de = end of array, hl = BP
0486   F9                     LD   sp,hl   ; sp = BP
0487   E1                     POP   hl   ; de = end of array, hl = old BP
0488   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0489   FD 62                  LD   iyh,d   
048B   FD 6B                  LD   iyl,e   
048D   D1                     POP   de   ; pop arg_list (discard)
048E   D1                     POP   de   ; pop first_arg* (discard)
048F   D1                     POP   de   ; pop IP (discard)
0490   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = array[-2]
0494   22 EC 3D               LD   (vHeapPtr),hl   ; move heap* to end of array
0497   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
049B   13                     INC   de   ; de = array[0]
049C   13                     INC   de   
049D   D5                     PUSH   de   ; return array[0]
049E   DD E9                  JP   (ix)   
04A0                             ; index of an array, based on vDataWidth
04A0                             ; array num -- value    ; also sets vPointer to address
04A0                ARRINDEX:      
04A0   E1                     POP   hl   ; hl = index
04A1   D1                     POP   de   ; de = array
04A2   3A E6 3D               LD   a,(vDataWidth)   ; a = data width
04A5   3D                     DEC   a   
04A6   28 01                  JR   z,arrIndex1   
04A8                ARRINDEX0:      
04A8   29                     ADD   hl,hl   ; if data width = 2 then double
04A9                ARRINDEX1:      
04A9   19                     ADD   hl,de   ; add addr
04AA   22 F0 3D               LD   (vPointer),hl   ; store address in setter
04AD   16 00                  LD   d,0   
04AF   5E                     LD   e,(hl)   
04B0   B7                     OR   a   ; check data width again
04B1   28 02                  JR   z,arrIndex2   
04B3   23                     INC   hl   
04B4   56                     LD   d,(hl)   
04B5                ARRINDEX2:      
04B5   D5                     PUSH   de   
04B6   DD E9                  JP   (ix)   
04B8                             ; value _oldValue --            ; uses address in vPointer
04B8                ASSIGN:      
04B8   E1                     POP   hl   ; discard last accessed value
04B9   E1                     POP   hl   ; hl = new value
04BA                ASSIGN0:      
04BA   EB                     EX   de,hl   ; de = new value
04BB                ASSIGNX:      
04BB   2A F0 3D               LD   hl,(vPointer)   
04BE   73                     LD   (hl),e   
04BF   3A E6 3D               LD   a,(vDataWidth)   
04C2   3D                     DEC   a   ; is it byte?
04C3   28 02                  JR   z,assign1   
04C5   23                     INC   hl   
04C6   72                     LD   (hl),d   
04C7                ASSIGN1:      
04C7   DD E9                  JP   (ix)   
04C9                BLOCK:       
04C9   C5                     PUSH   bc   ; return pointer to first { of block
04CA   03                     INC   bc   
04CB   16 01                  LD   d,1   ; nesting: count first parenthesis
04CD                BLOCK1:      ; Skip to end of definition
04CD   0A                     LD   a,(bc)   ; Get the next character
04CE   03                     INC   bc   ; Point to next character
04CF   FE 21                  CP   " " + 1   ; ignore whitespace
04D1   38 FA                  JR   c,block1   
04D3   FE 29                  CP   ")"   
04D5   28 2D                  JR   z,block4   
04D7   FE 7D                  CP   "}"   
04D9   28 29                  JR   z,block4   
04DB   FE 5D                  CP   "]"   
04DD   28 25                  JR   z,block4   
04DF   FE 28                  CP   "("   
04E1   28 16                  JR   z,block2   
04E3   FE 7B                  CP   "{"   
04E5   28 12                  JR   z,block2   
04E7   FE 5B                  CP   "["   
04E9   28 0E                  JR   z,block2   
04EB   FE 27                  CP   "'"   
04ED   28 0D                  JR   z,block3   
04EF   FE 60                  CP   "`"   
04F1   28 09                  JR   z,block3   
04F3   FE 22                  CP   $22   
04F5   28 05                  JR   z,block3   
04F7   18 D4                  JR   block1   
04F9                BLOCK2:      
04F9   14                     INC   d   
04FA   18 D1                  JR   block1   
04FC                BLOCK3:      
04FC   3E 80                  LD   a,$80   
04FE   AA                     XOR   d   
04FF   47                     LD   b,a   
0500   20 CB                  JR   nz,block1   
0502   18 03                  JR   block5   
0504                BLOCK4:      
0504   15                     DEC   d   
0505   20 C6                  JR   nz,block1   ; get the next element
0507                BLOCK5:      
0507   60 69                  LD   hl,bc   ; hl = IP
0509   11 00 40               LD   de,HEAP   ; is IP pointing to object in heap
050C   B7                     OR   a   ; IP - HEAP
050D   ED 52                  SBC   hl,de   
050F   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0511   28 1C                  JR   z,block6   
0513   60 69                  LD   hl,bc   ; hl = IP
0515   D1                     POP   de   ; de = block*
0516   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
051A   B7                     OR   a   ; bc = size
051B   ED 52                  SBC   hl,de   
051D   44 4D                  LD   bc,hl   
051F   EB                     EX   de,hl   ; hl = block* de = heap*
0520   ED 5B EC 3D            LD   de,(vHeapPtr)   
0524   D5                     PUSH   de   ; return hblock*
0525   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0527   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += size
052B   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
052F                BLOCK6:      
052F   0B                     DEC   bc   ; balanced, exit
0530   DD E9                  JP   (ix)   
0532                BLOCKEND:      
0532   D9                     EXX      ; de" = oldBP bc" = oldIP
0533   FD 5E 00               LD   e,(iy+0)   
0536   FD 56 01               LD   d,(iy+1)   
0539   FD 4E 06               LD   c,(iy+6)   
053C   FD 46 07               LD   b,(iy+7)   
053F   D9                     EXX      
0540   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0543   FD 56 03               LD   d,(iy+3)   
0546   EB                     EX   de,hl   
0547   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054A   FD 56 01               LD   d,(iy+1)   
054D   13                     INC   de   ; for carry flag <=
054E   B7                     OR   a   
054F   ED 52                  SBC   hl,de   
0551   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0553   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0555   FD 5D                  LD   e,iyl   
0557   21 08 00               LD   hl,8   
055A   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055B   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055C   18 0C                  JR   blockend2   
055E                BLOCKEND1:      ; same scope
055E   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0561   FD 56 03               LD   d,(iy+3)   
0564   EB                     EX   de,hl   
0565   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0567   FD 5D                  LD   e,iyl   
0569   EB                     EX   de,hl   
056A                BLOCKEND2:      
056A   44 4D                  LD   bc,hl   ; bc = hl = BP
056C   B7                     OR   a   ; hl = BP - SP = count
056D   ED 72                  SBC   hl,sp   
056F   7D                     LD   a,l   
0570   B4                     OR   h   
0571   28 09                  JR   z,blockend3   
0573   C5                     PUSH   bc   ; bc = count, hl = BP
0574   44 4D                  LD   bc,hl   
0576   E1                     POP   hl   
0577   2B                     DEC   hl   ; hl = BP-1
0578   1B                     DEC   de   ; de = args*-1
0579   ED B8                  LDDR      
057B   13                     INC   de   
057C                BLOCKEND3:      
057C   EB                     EX   de,hl   ; hl = new tos
057D   F9                     LD   sp,hl   ; sp = new tos
057E   D9                     EXX      ; bc = IP, iy = oldBP
057F   D5                     PUSH   de   
0580   C5                     PUSH   bc   
0581   D9                     EXX      
0582   C1                     POP   bc   
0583   FD E1                  POP   iy   
0585   DD E9                  JP   (ix)   
0587                CHAR:        
0587   21 00 00               LD   hl,0   ; if "" is empty or null
058A                CHAR1:       
058A   03                     INC   bc   ; point to next char
058B   0A                     LD   a,(bc)   
058C   FE 27                  CP   "'"   ; ' is the terminator
058E   28 09                  JR   z,char3   
0590   FE 5C                  CP   $5c   ; \ is the escape
0592   20 02                  JR   nz,char2   
0594   03                     INC   bc   
0595   0A                     LD   a,(bc)   
0596                CHAR2:       
0596   6F                     LD   l,a   
0597   18 F1                  JR   char1   
0599                CHAR3:       
0599   E5                     PUSH   hl   
059A   DD E9                  JP   (ix)   
059C                DIV:         
059C   D1                     POP   de   
059D   E1                     POP   hl   
059E   C5                     PUSH   bc   ; preserve the IP
059F   44 4D                  LD   bc,hl   
05A1   CD D7 05               CALL   divide   
05A4   EB                     EX   de,hl   
05A5   ED 53 F6 3D            LD   (vRemain),de   
05A9   C1                     POP   bc   
05AA   C3 99 03               JP   add3   
05AD                DOT:         
05AD   E1                     POP   hl   
05AE   03                     INC   bc   
05AF   0A                     LD   a,(bc)   
05B0   FE 68                  CP   "h"   
05B2   20 05                  JR   nz,dot1   
05B4   CD F5 08               CALL   prthex   
05B7   18 17                  JR   dot4   
05B9                DOT1:        
05B9   FE 73                  CP   "s"   
05BB   20 05                  JR   nz,dot2   
05BD   CD 18 09               CALL   prtstr   
05C0   18 0E                  JR   dot4   
05C2                DOT2:        
05C2   FE 63                  CP   "c"   
05C4   20 06                  JR   nz,dot3   
05C6   7D                     LD   a,l   
05C7   CD 85 00               CALL   putchar   
05CA   18 04                  JR   dot4   
05CC                DOT3:        
05CC   0B                     DEC   bc   
05CD   CD AD 08               CALL   prtdec   
05D0                DOT4:        
05D0   3E 20                  LD   a," "   
05D2   CD 85 00               CALL   putchar   
05D5   DD E9                  JP   (ix)   
05D7                             ; division subroutine.
05D7                             ; bc: divisor, de: dividend, hl: remainder
05D7                DIVIDE:      
05D7   21 00 00               LD   hl,0   ; zero the remainder
05DA   3E 10                  LD   a,16   ; loop counter
05DC                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05DC   CB 21                  SLA   c   
05DE   CB 10                  RL   b   
05E0   ED 6A                  ADC   hl,hl   
05E2   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05E4   38 03                  JR   c,divide2   
05E6   0C                     INC   c   
05E7   18 01                  JR   divide3   
05E9                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05E9   19                     ADD   hl,de   
05EA                DIVIDE3:      
05EA   3D                     DEC   a   
05EB   20 EF                  JR   nz,divide1   
05ED   50 59                  LD   de,bc   ; result from bc to de
05EF   C9                     RET      
05F0                             ; hl = value1, de = value2
05F0                             ; hl = result
05F0                EQUALS:      
05F0   B7                     OR   a   ; reset the carry flag
05F1   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05F3   28 10                  JR   z,true1   
05F5   C3 0B 06               JP   false1   
05F8                             ; hl = value1 de = value2
05F8                             ; hl = result
05F8                LESSTHANEQ:      
05F8   B7                     OR   a   
05F9   ED 52                  SBC   hl,de   
05FB   18 05                  JR   lessthan1   
05FD                             ; hl = value1 de = value2
05FD                             ; hl = result
05FD                LESSTHAN:      
05FD   B7                     OR   a   
05FE   ED 52                  SBC   hl,de   
0600   28 09                  JR   z,false1   
0602                LESSTHAN1:      
0602   FA 0B 06               JP   m,false1   
0605                TRUE1:       
0605   21 FF FF               LD   hl,TRUE   
0608   E5                     PUSH   hl   
0609   DD E9                  JP   (ix)   
060B                NULL1:       
060B                FALSE1:      
060B   21 00 00               LD   hl,FALSE   
060E   E5                     PUSH   hl   
060F   DD E9                  JP   (ix)   
0611                             ; execute a block of code which ends with }
0611                             ; creates a root scope if BP == stack
0611                             ; else uses outer scope
0611                GO:          
0611   D1                     POP   de   ; de = block*
0612                GO1:         
0612   7B                     LD   a,e   ; if block* == null, exit
0613   B2                     OR   d   
0614   20 02                  JR   nz,go2   
0616   DD E9                  JP   (ix)   
0618                GO2:         
0618   1A                     LD   a,(de)   
0619   FE 7B                  CP   "{"   
061B   C2 51 06               JP   nz,goFunc   
061E                GOBLOCK:      
061E   ED 53 F8 3D            LD   (vTemp1),de   ; save de
0622   21 80 3C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0625   FD 54                  LD   d,iyh   
0627   FD 5D                  LD   e,iyl   
0629   B7                     OR   a   ; if stack* == BP then this is the root_scope
062A   ED 52                  SBC   hl,de   
062C   ED 5B F8 3D            LD   de,(vTemp1)   ; restore de
0630   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0631   B4                     OR   h   
0632   3E 00                  LD   a,0   
0634   28 6C                  JR   z,goFunc8   
0636   C5                     PUSH   bc   ; push IP
0637   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
063A   FD 46 05               LD   b,(iy+5)   
063D   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0640   FD 66 03               LD   h,(iy+3)   
0643                GOBLOCK1:      
0643   C5                     PUSH   bc   ; arg_list*
0644   E5                     PUSH   hl   ; first_arg*
0645   FD E5                  PUSH   iy   ; push BP
0647   FD 21 00 00            LD   iy,0   ; BP = SP
064B   FD 39                  ADD   iy,sp   
064D   42 4B                  LD   bc,de   ; bc = de = block*-1
064F   DD E9                  JP   (ix)   
0651                GOFUNC:      ; execute function
0651   EB                     EX   de,hl   ; hl = func*
0652   5E                     LD   e,(hl)   ; de = closure*
0653   23                     INC   hl   
0654   56                     LD   d,(hl)   
0655   23                     INC   hl   
0656   7B                     LD   a,e   ; if closure* == null skip
0657   B2                     OR   d   
0658   28 21                  JR   z,goFunc3   
065A   ED 43 F8 3D            LD   (vTemp1),bc   
065E   22 FA 3D               LD   (vTemp2),hl   ; save bc,hl
0661   EB                     EX   de,hl   ; hl = closure*
0662   2B                     DEC   hl   ; bc = count
0663   46                     LD   b,(hl)   
0664   2B                     DEC   hl   
0665   4E                     LD   c,(hl)   
0666   23                     INC   hl   ; push each item on stack
0667   23                     INC   hl   
0668   18 06                  JR   goFunc2   
066A                GOFUNC1:      
066A   5E                     LD   e,(hl)   ; de = closure item
066B   23                     INC   hl   
066C   56                     LD   d,(hl)   
066D   23                     INC   hl   
066E   D5                     PUSH   de   ; push on stack
066F   0B                     DEC   bc   
0670                GOFUNC2:      
0670   79                     LD   a,c   ; if count != 0 then loop
0671   B0                     OR   b   
0672   20 F6                  JR   nz,goFunc1   
0674   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore bc
0678   2A FA 3D               LD   hl,(vTemp2)   ; restore hl
067B                GOFUNC3:      
067B   5E                     LD   e,(hl)   ; de = block*
067C   23                     INC   hl   
067D   56                     LD   d,(hl)   
067E   23                     INC   hl   
067F   ED 53 F8 3D            LD   (vTemp1),de   ; save block*
0683   5E                     LD   e,(hl)   ; de = arg_list*
0684   23                     INC   hl   
0685   56                     LD   d,(hl)   
0686   23                     INC   hl   
0687   EB                     EX   de,hl   ; hl = arg_list*
0688   ED 5B F8 3D            LD   de,(vTemp1)   ; restore de = block*
068C   7D                     LD   a,l   ; if arg_list* == null a = 0
068D   B4                     OR   h   
068E   20 03                  JR   nz,goFunc4   
0690   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
0691   18 0F                  JR   goFunc8   
0693                GOFUNC4:      ; allocate locals
0693   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0694   7E                     LD   a,(hl)   
0695   18 03                  JR   goFunc6   
0697                GOFUNC5:      ; loop
0697   3B                     DEC   sp   
0698   3B                     DEC   sp   
0699   3D                     DEC   a   
069A                GOFUNC6:      
069A   B7                     OR   a   
069B   20 FA                  JR   nz,goFunc5   ; end loop
069D                GOFUNC7:      
069D   2B                     DEC   hl   ; a = num_args* x 2
069E   7E                     LD   a,(hl)   
069F   23                     INC   hl   
06A0   23                     INC   hl   
06A1   87                     ADD   a,a   ; a *= 2
06A2                GOFUNC8:      
06A2   C5                     PUSH   bc   ; push IP
06A3   44 4D                  LD   bc,hl   
06A5   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06A8   85                     ADD   a,l   
06A9   6F                     LD   l,a   
06AA   39                     ADD   hl,sp   
06AB   18 96                  JR   goBlock1   
06AD                HEXNUM:      
06AD   21 00 00               LD   hl,0   ; Clear hl to accept the number
06B0                HEXNUM1:      
06B0   03                     INC   bc   
06B1   0A                     LD   a,(bc)   ; Get the character which is a numeral
06B2   CB 77                  BIT   6,a   ; is it uppercase alpha?
06B4   28 02                  JR   z,hexnum2   ; no a decimal
06B6   D6 07                  SUB   7   ; sub 7  to make $a - $F
06B8                HEXNUM2:      
06B8   D6 30                  SUB   $30   ; form decimal digit
06BA   DA 38 07               JP   c,num2   
06BD   FE 10                  CP   $0F+1   
06BF   D2 38 07               JP   nc,num2   
06C2   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06C3   29                     ADD   hl,hl   ; 4X
06C4   29                     ADD   hl,hl   ; 8X
06C5   29                     ADD   hl,hl   ; 16X
06C6   85                     ADD   a,l   ; add into bottom of hl
06C7   6F                     LD   l,a   
06C8   18 E6                  JR   hexnum1   
06CA                IDENTU:      
06CA   0A                     LD   a,(bc)   ; a = identifier char
06CB   D6 41                  SUB   "A"   ; "A" = 0
06CD   18 05                  JR   ident1   
06CF                IDENTL:      
06CF   0A                     LD   a,(bc)   
06D0   D6 61                  SUB   "a"   
06D2   C6 1A                  ADD   a,26   
06D4                IDENT1:      
06D4   87                     ADD   a,a   ; l = a * 2
06D5   6F                     LD   l,a   
06D6   26 3D                  LD   h,msb(vars)   
06D8   22 F0 3D               LD   (vPointer),hl   ; store address in setter
06DB   5E                     LD   e,(hl)   
06DC   23                     INC   hl   
06DD   56                     LD   d,(hl)   
06DE   D5                     PUSH   de   
06DF   DD E9                  JP   (ix)   
06E1                             ; if
06E1                             ; condition then -- value
06E1                IF:          
06E1   03                     INC   bc   
06E2   0A                     LD   a,(bc)   
06E3   FE 3F                  CP   "?"   
06E5   28 06                  JR   z,ifte   
06E7   0B                     DEC   bc   
06E8   11 00 00               LD   de,0   ; NUL pointer for else
06EB   18 01                  JR   ifte1   
06ED                             ; ifte
06ED                             ; condition then else -- value
06ED                IFTE:        
06ED   D1                     POP   de   ; de = else
06EE                IFTE1:       
06EE   E1                     POP   hl   ; hl = then
06EF   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06F0   7C                     LD   a,h   
06F1   B5                     OR   l   
06F2   E1                     POP   hl   ; hl = then
06F3   CA 12 06               JP   z,go1   ; if z de = else
06F6   EB                     EX   de,hl   ; condition = false, de = then
06F7   C3 12 06               JP   go1   
06FA                MUL:         
06FA   D1                     POP   de   ; get first value
06FB   E1                     POP   hl   
06FC                MUL2:        
06FC   C5                     PUSH   bc   ; Preserve the IP
06FD   44 4D                  LD   bc,hl   ; bc = 2nd value
06FF   21 00 00               LD   hl,0   
0702   3E 10                  LD   a,16   
0704                MUL3:        
0704   29                     ADD   hl,hl   
0705   CB 13                  RL   e   
0707   CB 12                  RL   d   
0709   30 04                  JR   nc,$+6   
070B   09                     ADD   hl,bc   
070C   30 01                  JR   nc,$+3   
070E   13                     INC   de   
070F   3D                     DEC   a   
0710   20 F2                  JR   nz,mul3   
0712   C1                     POP   bc   ; Restore the IP
0713   C3 99 03               JP   add3   
0716                NUM:         
0716   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0719   0A                     LD   a,(bc)   ; Get numeral or -
071A   FE 2D                  CP   "-"   
071C   20 01                  JR   nz,num0   
071E   03                     INC   bc   ; move to next char, no flags affected
071F                NUM0:        
071F   08                     EX   af,af'   ; save zero flag = 0 for later
0720                NUM1:        
0720   0A                     LD   a,(bc)   ; read digit
0721   D6 30                  SUB   "0"   ; less than 0?
0723   38 13                  JR   c,num2   ; not a digit, exit loop
0725   FE 0A                  CP   10   ; greater that 9?
0727   30 0F                  JR   nc,num2   ; not a digit, exit loop
0729   03                     INC   bc   ; inc IP
072A   54 5D                  LD   de,hl   ; multiply hl * 10
072C   29                     ADD   hl,hl   
072D   29                     ADD   hl,hl   
072E   19                     ADD   hl,de   
072F   29                     ADD   hl,hl   
0730   85                     ADD   a,l   ; add digit in a to hl
0731   6F                     LD   l,a   
0732   3E 00                  LD   a,0   
0734   8C                     ADC   a,h   
0735   67                     LD   h,a   
0736   18 E8                  JR   num1   
0738                NUM2:        
0738   0B                     DEC   bc   
0739   08                     EX   af,af'   ; restore zero flag
073A   20 07                  JR   nz,num3   
073C   EB                     EX   de,hl   ; negate the value of hl
073D   21 00 00               LD   hl,0   
0740   B7                     OR   a   ; jump to sub2
0741   ED 52                  SBC   hl,de   
0743                NUM3:        
0743   E5                     PUSH   hl   ; Put the number on the stack
0744   DD E9                  JP   (ix)   ; and process the next character
0746                REMAIN:      
0746   2A F6 3D               LD   hl,(vRemain)   
0749   E5                     PUSH   hl   
074A   DD E9                  JP   (ix)   
074C                             ; shiftLeft
074C                             ; value count -- value2          shift left count places
074C                SHIFTLEFT:      
074C   50 59                  LD   de,bc   ; save IP
074E   C1                     POP   bc   ; bc = count
074F   41                     LD   b,c   ; b = loop counter
0750   E1                     POP   hl   
0751   04                     INC   b   ; test for counter=0 case
0752   18 01                  JR   shiftLeft2   
0754                SHIFTLEFT1:      
0754   29                     ADD   hl,hl   ; left shift hl
0755                SHIFTLEFT2:      
0755   10 FD                  DJNZ   shiftLeft1   
0757   E5                     PUSH   hl   
0758   42 4B                  LD   bc,de   ; restore IP
075A   DD E9                  JP   (ix)   
075C                             ; shiftRight
075C                             ; value count -- value2          shift left count places
075C                SHIFTRIGHT:      
075C   50 59                  LD   de,bc   ; save IP
075E   C1                     POP   bc   ; bc = count
075F   41                     LD   b,c   ; b = loop counter
0760   E1                     POP   hl   
0761   04                     INC   b   ; test for counter=0 case
0762   18 04                  JR   shiftRight2   
0764                SHIFTRIGHT1:      
0764   CB 3C                  SRL   h   ; right shift hl
0766   CB 1D                  RR   l   
0768                SHIFTRIGHT2:      
0768   10 FA                  DJNZ   shiftRight1   
076A   E5                     PUSH   hl   
076B   42 4B                  LD   bc,de   ; restore IP
076D   DD E9                  JP   (ix)   
076F                             ; string
076F                             ; -- ptr                        ; points to start of string chars,
076F                             ; length is stored at start - 2 bytes
076F                STRING:      
076F   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
0772   23                     INC   hl   ; skip length field to start
0773   23                     INC   hl   
0774   E5                     PUSH   hl   ; save start of string
0775   03                     INC   bc   ; point to next char
0776   18 03                  JR   string2   
0778                STRING1:      
0778   77                     LD   (hl),a   
0779   23                     INC   hl   ; increase count
077A   03                     INC   bc   ; point to next char
077B                STRING2:      
077B   0A                     LD   a,(bc)   
077C   FE 22                  CP   DQUOTE   ; " is the string terminator
077E   20 F8                  JR   nz,string1   
0780   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0782   20 F4                  JR   nz,string1   
0784   AF                     XOR   a   ; write NUL to terminate string
0785   77                     LD   (hl),a   ; hl = end of string
0786   23                     INC   hl   
0787   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
078A   2B                     DEC   hl   ; hl = end of string without terminator
078B   D1                     POP   de   ; de = start of string
078C   D5                     PUSH   de   ; return start of string
078D   B7                     OR   a   ; hl = length bytes, de = start of string
078E   ED 52                  SBC   hl,de   
0790   EB                     EX   de,hl   
0791   2B                     DEC   hl   ; write length bytes to length field at start - 2
0792   72                     LD   (hl),d   
0793   2B                     DEC   hl   
0794   73                     LD   (hl),e   
0795   DD E9                  JP   (ix)   
0797                SUB:         ; negative sign or subtract
0797   03                     INC   bc   ; check if sign of a number
0798   0A                     LD   a,(bc)   
0799   0B                     DEC   bc   
079A   FE 30                  CP   "0"   
079C   38 05                  JR   c,sub0   
079E   FE 3A                  CP   "9"+1   
07A0   DA 47 03               JP   c,num_   
07A3                SUB0:        ; Subtract the value 2nd on stack from top of stack
07A3   03                     INC   bc   
07A4   FE 2D                  CP   "-"   
07A6   20 05                  JR   nz,sub1   
07A8   E1                     POP   hl   
07A9   2B                     DEC   hl   
07AA   C3 BA 04               JP   assign0   
07AD                SUB1:        
07AD   0B                     DEC   bc   
07AE   D1                     POP   de   
07AF   E1                     POP   hl   
07B0   B7                     OR   a   
07B1   ED 52                  SBC   hl,de   
07B3   C3 99 03               JP   add3   
07B6                             ;*******************************************************************
07B6                             ; commands
07B6                             ;*******************************************************************
07B6                COMMAND:      
07B6   03                     INC   bc   
07B7   0A                     LD   a,(bc)   
07B8   FE 5C                  CP   $5C   ; \\ comment
07BA   CA 31 08               JP   z,comment   
07BD   FE 61                  CP   "a"   ; \a absolute
07BF   CA 04 08               JP   z,abs1   
07C2   FE 62                  CP   "b"   ; \b bytes
07C4   CA 5A 08               JP   z,bytes   
07C7   FE 63                  CP   "c"   ; \c closure
07C9   CA 11 08               JP   z,closure   
07CC   FE 66                  CP   "f"   ; \f func
07CE   CA 62 08               JP   z,func   
07D1   FE 46                  CP   "F"   ; \F false
07D3   CA 0B 06               JP   z,false1   
07D6   FE 69                  CP   "i"   ; \i input
07D8   CA 7E 08               JP   z,input   
07DB   FE 6B                  CP   "k"   ; \k key
07DD   CA 89 08               JP   z,key   
07E0   FE 6F                  CP   "o"   ; \o output
07E2   CA 92 08               JP   z,output   
07E5   FE 72                  CP   "r"   ; \r repeat
07E7   CA 52 08               JP   z,repeat   
07EA   FE 73                  CP   "s"   ; \s select
07EC   CA 9B 08               JP   z,select   
07EF   FE 54                  CP   "T"   ; \T true
07F1   CA 05 06               JP   z,true1   
07F4   FE 77                  CP   "w"   ; \w words
07F6   CA A5 08               JP   z,words   
07F9   FE 78                  CP   "x"   ; \x exit loop or block
07FB   CA 3A 08               JP   z,break   
07FE   21 01 00               LD   hl,1   ; error 1: unknown command
0801   C3 0A 0A               JP   error   
0804                ABS1:        
0804   E1                     POP   hl   
0805   CB 7C                  BIT   7,h   
0807   C8                     RET   z   
0808   AF                     XOR   a   
0809   95                     SUB   l   
080A   6F                     LD   l,a   
080B   9F                     SBC   a,a   
080C   94                     SUB   h   
080D   67                     LD   h,a   
080E   E5                     PUSH   hl   
080F   DD E9                  JP   (ix)   
0811                             ; closure
0811                             ; array* func* -- func1*
0811                CLOSURE:      
0811   E1                     POP   hl   ; h1 = func*
0812   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = heap* = closure*
0816   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
081A   01 06 00               LD   bc,6   ; bc = count
081D   ED B0                  LDIR      ; clone func
081F   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
0823   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap* = closure*
0826   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += 6
082A   D1                     POP   de   ; de = array*
082B   E5                     PUSH   hl   ; return closure*
082C   73                     LD   (hl),e   ; compile array*
082D   23                     INC   hl   
082E   72                     LD   (hl),d   
082F   DD E9                  JP   (ix)   
0831                COMMENT:      
0831   03                     INC   bc   ; point to next char
0832   0A                     LD   a,(bc)   
0833   FE 20                  CP   " "   ; terminate on any char less than SP
0835   30 FA                  JR   nc,comment   
0837   0B                     DEC   bc   
0838   DD E9                  JP   (ix)   
083A                BREAK:       
083A   E1                     POP   hl   
083B   7D                     LD   a,l   
083C   B4                     OR   h   
083D   28 02                  JR   z,break1   
083F   DD E9                  JP   (ix)   
0841                BREAK1:      
0841   FD 6E 06               LD   l,(iy+6)   ; hl = oldIP
0844   FD 66 07               LD   h,(iy+7)   
0847   23                     INC   hl   ; forward IP on stack to after \r
0848   23                     INC   hl   
0849   FD 75 06               LD   (iy+6),l   
084C   FD 74 07               LD   (iy+7),h   
084F                             ; ld e,(iy+2)                 ; dec first_arg*
084F                             ; ld d,(iy+3)
084F                             ; inc de
084F                             ; inc de
084F                             ; ld (iy+2),e
084F                             ; ld (iy+3),d
084F   C3 32 05               JP   blockEnd   
0852                             ; repeat
0852                             ; block* --
0852                REPEAT:      
0852   0B                     DEC   bc   ; rewind IP to before \r
0853   0B                     DEC   bc   
0854   E1                     POP   hl   
0855   E5                     PUSH   hl   
0856   E5                     PUSH   hl   
0857   C3 11 06               JP   go   
085A                BYTES:       
085A   21 01 00               LD   hl,1   
085D                BYTES1:      
085D   22 E6 3D               LD   (vDataWidth),hl   
0860   DD E9                  JP   (ix)   
0862                             ; arg_list* block* -- ptr
0862                FUNC:        
0862   D1                     POP   de   ; de = block* hl = heap*
0863   2A EC 3D               LD   hl,(vHeapPtr)   
0866   AF                     XOR   a   
0867   77                     LD   (hl),a   ; compile null closure*
0868   23                     INC   hl   
0869   77                     LD   (hl),a   
086A   23                     INC   hl   
086B   73                     LD   (hl),e   ; compile block*
086C   23                     INC   hl   
086D   72                     LD   (hl),d   
086E   23                     INC   hl   
086F   D1                     POP   de   ; de = block*
0870   73                     LD   (hl),e   ; compile arg_list*
0871   23                     INC   hl   
0872   72                     LD   (hl),d   
0873   23                     INC   hl   
0874   ED 5B EC 3D            LD   de,(vHeapPtr)   ; return func*
0878   D5                     PUSH   de   
0879   22 EC 3D               LD   (vHeapPtr),hl   ; heap* += 4
087C   DD E9                  JP   (ix)   
087E                             ; Z80 port input
087E                             ; port -- value
087E                INPUT:       
087E   E1                     POP   hl   
087F   59                     LD   e,c   ; save IP
0880   4D                     LD   c,l   
0881   ED 68                  IN   l,(c)   
0883   26 00                  LD   h,0   
0885   4B                     LD   c,e   ; restore IP
0886   E5                     PUSH   hl   
0887   DD E9                  JP   (ix)   
0889                KEY:         
0889   CD 81 00               CALL   getchar   
088C   26 00                  LD   h,0   
088E   6F                     LD   l,a   
088F   E5                     PUSH   hl   
0890   DD E9                  JP   (ix)   
0892                             ; Z80 port output
0892                             ; value port --
0892                OUTPUT:      
0892   E1                     POP   hl   
0893   59                     LD   e,c   ; save IP
0894   4D                     LD   c,l   
0895   E1                     POP   hl   
0896   ED 69                  OUT   (c),l   
0898   4B                     LD   c,e   ; restore IP
0899   DD E9                  JP   (ix)   
089B                             ; select
089B                             ; index array -- value
089B                SELECT:      
089B   D1                     POP   de   ; de = array
089C   E1                     POP   hl   ; hl = index
089D   29                     ADD   hl,hl   ; if data width = 2 then double
089E   19                     ADD   hl,de   ; add addr
089F   5E                     LD   e,(hl)   
08A0   23                     INC   hl   
08A1   56                     LD   d,(hl)   
08A2   C3 12 06               JP   go1   
08A5                WORDS:       
08A5   21 02 00               LD   hl,2   
08A8   C3 5D 08               JP   bytes1   
08AB                             ; 
08AB                             ; 
08AB                             ; 
08AB                             ; 
08AB                FILTER:      
08AB                MAP:         
08AB                SCAN:        
08AB   DD E9                  JP   (ix)   
08AD                             ; print decimal
08AD                             ; hl = value
08AD                PRTDEC:      
08AD   CB 7C                  BIT   7,h   
08AF   28 0B                  JR   z,prtdec0   
08B1   3E 2D                  LD   a,"-"   
08B3   CD 85 00               CALL   putchar   
08B6   AF                     XOR   a   
08B7   95                     SUB   l   
08B8   6F                     LD   l,a   
08B9   9F                     SBC   a,a   
08BA   94                     SUB   h   
08BB   67                     LD   h,a   
08BC                PRTDEC0:      
08BC   C5                     PUSH   bc   
08BD   0E 00                  LD   c,0   ; leading zeros flag = false
08BF   11 F0 D8               LD   de,-10000   
08C2   CD DE 08               CALL   prtdec1   
08C5   11 18 FC               LD   de,-1000   
08C8   CD DE 08               CALL   prtdec1   
08CB   11 9C FF               LD   de,-100   
08CE   CD DE 08               CALL   prtdec1   
08D1   1E F6                  LD   e,-10   
08D3   CD DE 08               CALL   prtdec1   
08D6   0C                     INC   c   ; flag = true for at least digit
08D7   1E FF                  LD   e,-1   
08D9   CD DE 08               CALL   prtdec1   
08DC   C1                     POP   bc   
08DD   C9                     RET      
08DE                PRTDEC1:      
08DE   06 2F                  LD   b,"0"-1   
08E0                PRTDEC2:      
08E0   04                     INC   b   
08E1   19                     ADD   hl,de   
08E2   38 FC                  JR   c,prtdec2   
08E4   ED 52                  SBC   hl,de   
08E6   3E 30                  LD   a,"0"   
08E8   B8                     CP   b   
08E9   20 05                  JR   nz,prtdec3   
08EB   AF                     XOR   a   
08EC   B1                     OR   c   
08ED   C8                     RET   z   
08EE   18 01                  JR   prtdec4   
08F0                PRTDEC3:      
08F0   0C                     INC   c   
08F1                PRTDEC4:      
08F1   78                     LD   a,b   
08F2   C3 85 00               JP   putchar   
08F5                PRTHEX:      ; display hl as a 16-bit number in hex.
08F5   C5                     PUSH   bc   ; preserve the IP
08F6   7C                     LD   a,h   
08F7   CD 00 09               CALL   prthex2   
08FA   7D                     LD   a,l   
08FB   CD 00 09               CALL   prthex2   
08FE   C1                     POP   bc   
08FF   C9                     RET      
0900                PRTHEX2:      
0900   4F                     LD   c,a   
0901   1F                     RRA      
0902   1F                     RRA      
0903   1F                     RRA      
0904   1F                     RRA      
0905   CD 09 09               CALL   prthex3   
0908   79                     LD   a,c   
0909                PRTHEX3:      
0909   E6 0F                  AND   0x0F   
090B   C6 90                  ADD   a,0x90   
090D   27                     DAA      
090E   CE 40                  ADC   a,0x40   
0910   27                     DAA      
0911   C3 85 00               JP   putchar   
0914                PRTSTR0:      
0914   CD 85 00               CALL   putchar   
0917   23                     INC   hl   
0918                PRTSTR:      
0918   7E                     LD   a,(hl)   
0919   B7                     OR   a   
091A   20 F8                  JR   nz,prtstr0   
091C   C9                     RET      
091D                             ; **************************************************************************
091D                             ; calculate nesting value
091D                             ; a is char to be tested,
091D                             ; e is the nesting value (initially 0)
091D                             ; e is increased by ( and [
091D                             ; e is decreased by ) and ]
091D                             ; e has its bit 7 toggled by `
091D                             ; limited to 127 levels
091D                             ; **************************************************************************
091D                NESTING:      
091D   FE 22                  CP   DQUOTE   ; quote char
091F   28 06                  JR   z,nesting0   
0921   FE 60                  CP   "`"   ; quote char
0923   28 02                  JR   z,nesting0   
0925   18 0A                  JR   nesting1   
0927                NESTING0:      
0927   CB 7B                  BIT   7,e   
0929   28 03                  JR   z,nesting1a   
092B   CB BB                  RES   7,e   
092D   C9                     RET      
092E                NESTING1A:      
092E   CB FB                  SET   7,e   
0930   C9                     RET      
0931                NESTING1:      
0931   CB 7B                  BIT   7,e   
0933   C0                     RET   nz   
0934   FE 7B                  CP   "{"   
0936   28 08                  JR   z,nesting2   
0938   FE 5B                  CP   "["   
093A   28 04                  JR   z,nesting2   
093C   FE 28                  CP   "("   
093E   20 02                  JR   nz,nesting3   
0940                NESTING2:      
0940   1C                     INC   e   
0941   C9                     RET      
0942                NESTING3:      
0942   FE 7D                  CP   "}"   
0944   28 07                  JR   z,nesting4   
0946   FE 5D                  CP   "]"   
0948   28 03                  JR   z,nesting4   
094A   FE 29                  CP   ")"   
094C   C0                     RET   nz   
094D                NESTING4:      
094D   1D                     DEC   e   
094E   C9                     RET      
094F                PROMPT:      
094F   CD 5F 09               CALL   printStr   
0952   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0957   C9                     RET      
0958                CRLF:        
0958   CD 5F 09               CALL   printStr   
095B   0D 0A 00               .CSTR   "\r\n"   
095E   C9                     RET      
095F                             ; prints a null teminated string
095F                             ; the string should be immedaitely following the call
095F                PRINTSTR:      
095F   E3                     EX   (sp),hl   ; swap			
0960   CD 18 09               CALL   prtstr   
0963   23                     INC   hl   ; inc past NUL
0964   E3                     EX   (sp),hl   ; put it back	
0965   C9                     RET      
0966                INIT:        
0966   DD 2A EA 3D            LD   ix,(vNext)   
096A   FD 21 80 3C            LD   iy,STACK   
096E   21 80 01               LD   hl,isysVars   
0971   11 E6 3D               LD   de,sysVars   
0974   01 10 00               LD   bc,8 * 2   
0977   ED B0                  LDIR      
0979   21 00 3D               LD   hl,vars   ; 52 vars LO HI
097C   06 34                  LD   b,26*2   
097E   AF                     XOR   a   
097F                INIT0:       
097F   77                     LD   (hl),a   
0980   23                     INC   hl   
0981   10 FC                  DJNZ   init0   
0983   C9                     RET      
0984                START:       
0984   31 80 3C               LD   sp,STACK   ; start of monty
0987   CD 66 09               CALL   init   ; setups
098A   CD 5F 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
098D   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
099A                INTERPRET:      
099A   CD 4F 09               CALL   prompt   
099D   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09A0   ED 43 E8 3D            LD   (vTIBPtr),bc   
09A4                INTERPRET2:      ; calc nesting (a macro might have changed it)
09A4   1E 00                  LD   e,0   ; initilize nesting value
09A6   C5                     PUSH   bc   ; save offset into TIB,
09A7                             ; bc is also the count of chars in TIB
09A7   21 00 3E               LD   hl,TIB   ; hl is start of TIB
09AA   18 06                  JR   interpret4   
09AC                INTERPRET3:      
09AC   7E                     LD   a,(hl)   ; a = char in TIB
09AD   23                     INC   hl   ; inc pointer into TIB
09AE   0B                     DEC   bc   ; dec count of chars in TIB
09AF   CD 1D 09               CALL   nesting   ; update nesting value
09B2                INTERPRET4:      
09B2   79                     LD   a,c   ; is count zero?
09B3   B0                     OR   b   
09B4   20 F6                  JR   nz,interpret3   ; if not loop
09B6   C1                     POP   bc   ; restore offset into TIB
09B7                INTERPRET5:      
09B7   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09BA   FE 20                  CP   $20   ; compare to space
09BC   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09BE   FE 00                  CP   $0   ; is it end of string? NUL end of string
09C0                             ; ???? NEEDED?
09C0   28 27                  JR   z,interpret8   
09C2   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09C4   28 10                  JR   z,interpret7   ; if anything else its macro/control
09C6                             ; macro
09C6                             ;  ld (vTIBPtr),bc
09C6                             ;  ld hl,ctrlCodes
09C6                             ;  add a,l			            ; look up key of macros
09C6                             ;  ld l,a
09C6                             ;  ld e,(hl)
09C6                             ;  ld a,e
09C6                             ;  or a
09C6                             ;  jr z,macro1
09C6                             ;  ld d,msb(macros)
09C6                             ;  push de
09C6                             ;  call call		            ; monty exec_ operation and jump to it
09C6                             ;  db DC1,0
09C6                             ; macro1:
09C6                             ;  ld bc,(vTIBPtr)
09C6   18 DC                  JR   interpret2   
09C8                INTERPRET6:      
09C8   21 00 3E               LD   hl,TIB   
09CB   09                     ADD   hl,bc   
09CC   77                     LD   (hl),a   ; store the character in textbuf
09CD   03                     INC   bc   
09CE   CD 85 00               CALL   putchar   ; echo character to screen
09D1   CD 1D 09               CALL   nesting   
09D4   18 E1                  JR   interpret5   ; wait for next character
09D6                INTERPRET7:      
09D6   21 00 3E               LD   hl,TIB   
09D9   09                     ADD   hl,bc   
09DA   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
09DC   23                     INC   hl   
09DD   36 0A                  LD   (hl),"\n"   
09DF   23                     INC   hl   
09E0   03                     INC   bc   
09E1   03                     INC   bc   
09E2   CD 58 09               CALL   crlf   ; echo character to screen
09E5   7B                     LD   a,e   ; if zero nesting append and ETX after \r
09E6   B7                     OR   a   
09E7   20 CE                  JR   nz,interpret5   
09E9                INTERPRET8:      
09E9   ED 43 E8 3D            LD   (vTIBPtr),bc   
09ED   01 00 3E               LD   bc,TIB   ; Instructions stored on heap at address HERE,
09F0                             ; we pressed enter
09F0   0B                     DEC   bc   
09F1                NEXT:        
09F1   03                     INC   bc   ; Increment the IP
09F2   0A                     LD   a,(bc)   ; Get the next character and dispatch
09F3   FE 20                  CP   " "   ; whitespace?
09F5   28 FA                  JR   z,next   ; space? ignore
09F7   38 07                  JR   c,next1   
09F9   6F                     LD   l,a   ; index into table
09FA   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
09FC   6E                     LD   l,(hl)   ; get low jump address
09FD   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
09FF   E9                     JP   (hl)   ; Jump to routine
0A00                NEXT1:       
0A00   FE 00                  CP   NUL   ; end of input string?
0A02   28 03                  JR   z,exit_   
0A04   C3 9A 09               JP   interpret   ; no, other whitespace, macros?
0A07                EXIT_:       
0A07   60 69                  LD   hl,bc   
0A09   E9                     JP   (hl)   
0A0A                ERROR:       
0A0A   CD 5F 09               CALL   printStr   
0A0D   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A14   CD AD 08               CALL   prtdec   
0A17   C3 9A 09               JP   interpret   
0A1A                          ALIGN   $100   
0B00                TESTSSTART:      
0B00                          ;*Macro unroll:  test "(b) {1 0\\x $b} \\f \\r", 4
0B00   31 80 3C               LD   SP,STACK   
0B03   CD 66 09               CALL   init   
0B06   CD 20 3B               CALL   execStr   
0B09   28 62 29 20 7B 31 20 30 5C 78 20 24 62 7D 20 5C 66 20 5C 72 00 .CSTR   "(b) {1 0\\x $b} \\f \\r"   
0B1E                          ;*Macro unroll:  expect "(b) {1 0\\x $b} \\f \\r",4
0B1E   E1                     POP   HL   
0B1F   E5                     PUSH   HL   
0B20   11 04 00               LD   DE,4   
0B23   B7                     OR   A   
0B24   ED 52                  SBC   HL,DE   
0B26   7D                     LD   A,L   
0B27   B4                     OR   H   
0B28   28 5F                  JR   Z,expectM_0_2096S43   
0B2A   CD 5F 09               CALL   printStr   
0B2D   43 6F 64 65 3A 20 28 62 29 20 7B 31 20 30 5C 78 20 24 62 7D 20 5C 66 20 5C 72 00 .CSTR   "Code: ","(b) {1 0\\x $b} \\f \\r"   
0B48   CD 5F 09               CALL   printStr   
0B4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B5A   21 04 00               LD   HL,4   
0B5D   CD AD 08               CALL   prtdec   
0B60   CD 5F 09               CALL   printStr   
0B63   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B70   E1                     POP   hl   
0B71   E5                     PUSH   hl   
0B72   CD AD 08               CALL   prtdec   
0B75   E1                     POP   hl   
0B76   CD 5F 09               CALL   printStr   
0B79   20 28 23 00            .CSTR   " (#"   
0B7D   CD F5 08               CALL   prthex   
0B80   CD 5F 09               CALL   printStr   
0B83   29 0D 0A 00            .CSTR   ")\r\n"   
0B87   76                     HALT      
0B88   00                     .CSTR      
0B89                EXPECTM_0_2096S43:      
0B89   E1                     POP   HL   
0B8A                             ; test "5 (i){ $i } \\f :", 5
0B8A                             ; test "1 x= { x \\x x-- } \\r + ", $4002
0B8A                             ; test "1 i= { i i \\x i-- } \\r", $4002
0B8A                             ; call printStr
0B8A                             ; .cstr "Done!"
0B8A                             ; HALT
0B8A                             ; 
0B8A                          ;*Macro unroll:  test "\\F", false
0B8A   31 80 3C               LD   SP,STACK   
0B8D   CD 66 09               CALL   init   
0B90   CD 20 3B               CALL   execStr   
0B93   5C 46 00               .CSTR   "\\F"   
0B96                          ;*Macro unroll:  expect "\\F",false
0B96   E1                     POP   HL   
0B97   E5                     PUSH   HL   
0B98   11 00 00               LD   DE,false   
0B9B   B7                     OR   A   
0B9C   ED 52                  SBC   HL,DE   
0B9E   7D                     LD   A,L   
0B9F   B4                     OR   H   
0BA0   28 4D                  JR   Z,expectM_0_2104S43   
0BA2   CD 5F 09               CALL   printStr   
0BA5   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
0BAE   CD 5F 09               CALL   printStr   
0BB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0BC0   21 00 00               LD   HL,false   
0BC3   CD AD 08               CALL   prtdec   
0BC6   CD 5F 09               CALL   printStr   
0BC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BD6   E1                     POP   hl   
0BD7   E5                     PUSH   hl   
0BD8   CD AD 08               CALL   prtdec   
0BDB   E1                     POP   hl   
0BDC   CD 5F 09               CALL   printStr   
0BDF   20 28 23 00            .CSTR   " (#"   
0BE3   CD F5 08               CALL   prthex   
0BE6   CD 5F 09               CALL   printStr   
0BE9   29 0D 0A 00            .CSTR   ")\r\n"   
0BED   76                     HALT      
0BEE   00                     .CSTR      
0BEF                EXPECTM_0_2104S43:      
0BEF   E1                     POP   HL   
0BF0                          ;*Macro unroll:  test "\\T", true
0BF0   31 80 3C               LD   SP,STACK   
0BF3   CD 66 09               CALL   init   
0BF6   CD 20 3B               CALL   execStr   
0BF9   5C 54 00               .CSTR   "\\T"   
0BFC                          ;*Macro unroll:  expect "\\T",true
0BFC   E1                     POP   HL   
0BFD   E5                     PUSH   HL   
0BFE   11 FF FF               LD   DE,true   
0C01   B7                     OR   A   
0C02   ED 52                  SBC   HL,DE   
0C04   7D                     LD   A,L   
0C05   B4                     OR   H   
0C06   28 4D                  JR   Z,expectM_0_2105S43   
0C08   CD 5F 09               CALL   printStr   
0C0B   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
0C14   CD 5F 09               CALL   printStr   
0C17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C26   21 FF FF               LD   HL,true   
0C29   CD AD 08               CALL   prtdec   
0C2C   CD 5F 09               CALL   printStr   
0C2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C3C   E1                     POP   hl   
0C3D   E5                     PUSH   hl   
0C3E   CD AD 08               CALL   prtdec   
0C41   E1                     POP   hl   
0C42   CD 5F 09               CALL   printStr   
0C45   20 28 23 00            .CSTR   " (#"   
0C49   CD F5 08               CALL   prthex   
0C4C   CD 5F 09               CALL   printStr   
0C4F   29 0D 0A 00            .CSTR   ")\r\n"   
0C53   76                     HALT      
0C54   00                     .CSTR      
0C55                EXPECTM_0_2105S43:      
0C55   E1                     POP   HL   
0C56                          ;*Macro unroll:  test "1", 1
0C56   31 80 3C               LD   SP,STACK   
0C59   CD 66 09               CALL   init   
0C5C   CD 20 3B               CALL   execStr   
0C5F   31 00                  .CSTR   "1"   
0C61                          ;*Macro unroll:  expect "1",1
0C61   E1                     POP   HL   
0C62   E5                     PUSH   HL   
0C63   11 01 00               LD   DE,1   
0C66   B7                     OR   A   
0C67   ED 52                  SBC   HL,DE   
0C69   7D                     LD   A,L   
0C6A   B4                     OR   H   
0C6B   28 4C                  JR   Z,expectM_0_2106S43   
0C6D   CD 5F 09               CALL   printStr   
0C70   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0C78   CD 5F 09               CALL   printStr   
0C7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C8A   21 01 00               LD   HL,1   
0C8D   CD AD 08               CALL   prtdec   
0C90   CD 5F 09               CALL   printStr   
0C93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CA0   E1                     POP   hl   
0CA1   E5                     PUSH   hl   
0CA2   CD AD 08               CALL   prtdec   
0CA5   E1                     POP   hl   
0CA6   CD 5F 09               CALL   printStr   
0CA9   20 28 23 00            .CSTR   " (#"   
0CAD   CD F5 08               CALL   prthex   
0CB0   CD 5F 09               CALL   printStr   
0CB3   29 0D 0A 00            .CSTR   ")\r\n"   
0CB7   76                     HALT      
0CB8   00                     .CSTR      
0CB9                EXPECTM_0_2106S43:      
0CB9   E1                     POP   HL   
0CBA                          ;*Macro unroll:  test "2", 2
0CBA   31 80 3C               LD   SP,STACK   
0CBD   CD 66 09               CALL   init   
0CC0   CD 20 3B               CALL   execStr   
0CC3   32 00                  .CSTR   "2"   
0CC5                          ;*Macro unroll:  expect "2",2
0CC5   E1                     POP   HL   
0CC6   E5                     PUSH   HL   
0CC7   11 02 00               LD   DE,2   
0CCA   B7                     OR   A   
0CCB   ED 52                  SBC   HL,DE   
0CCD   7D                     LD   A,L   
0CCE   B4                     OR   H   
0CCF   28 4C                  JR   Z,expectM_0_2107S43   
0CD1   CD 5F 09               CALL   printStr   
0CD4   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0CDC   CD 5F 09               CALL   printStr   
0CDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CEE   21 02 00               LD   HL,2   
0CF1   CD AD 08               CALL   prtdec   
0CF4   CD 5F 09               CALL   printStr   
0CF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D04   E1                     POP   hl   
0D05   E5                     PUSH   hl   
0D06   CD AD 08               CALL   prtdec   
0D09   E1                     POP   hl   
0D0A   CD 5F 09               CALL   printStr   
0D0D   20 28 23 00            .CSTR   " (#"   
0D11   CD F5 08               CALL   prthex   
0D14   CD 5F 09               CALL   printStr   
0D17   29 0D 0A 00            .CSTR   ")\r\n"   
0D1B   76                     HALT      
0D1C   00                     .CSTR      
0D1D                EXPECTM_0_2107S43:      
0D1D   E1                     POP   HL   
0D1E                          ;*Macro unroll:  test "1", 1
0D1E   31 80 3C               LD   SP,STACK   
0D21   CD 66 09               CALL   init   
0D24   CD 20 3B               CALL   execStr   
0D27   31 00                  .CSTR   "1"   
0D29                          ;*Macro unroll:  expect "1",1
0D29   E1                     POP   HL   
0D2A   E5                     PUSH   HL   
0D2B   11 01 00               LD   DE,1   
0D2E   B7                     OR   A   
0D2F   ED 52                  SBC   HL,DE   
0D31   7D                     LD   A,L   
0D32   B4                     OR   H   
0D33   28 4C                  JR   Z,expectM_0_2108S43   
0D35   CD 5F 09               CALL   printStr   
0D38   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0D40   CD 5F 09               CALL   printStr   
0D43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D52   21 01 00               LD   HL,1   
0D55   CD AD 08               CALL   prtdec   
0D58   CD 5F 09               CALL   printStr   
0D5B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D68   E1                     POP   hl   
0D69   E5                     PUSH   hl   
0D6A   CD AD 08               CALL   prtdec   
0D6D   E1                     POP   hl   
0D6E   CD 5F 09               CALL   printStr   
0D71   20 28 23 00            .CSTR   " (#"   
0D75   CD F5 08               CALL   prthex   
0D78   CD 5F 09               CALL   printStr   
0D7B   29 0D 0A 00            .CSTR   ")\r\n"   
0D7F   76                     HALT      
0D80   00                     .CSTR      
0D81                EXPECTM_0_2108S43:      
0D81   E1                     POP   HL   
0D82                          ;*Macro unroll:  test "0", 0
0D82   31 80 3C               LD   SP,STACK   
0D85   CD 66 09               CALL   init   
0D88   CD 20 3B               CALL   execStr   
0D8B   30 00                  .CSTR   "0"   
0D8D                          ;*Macro unroll:  expect "0",0
0D8D   E1                     POP   HL   
0D8E   E5                     PUSH   HL   
0D8F   11 00 00               LD   DE,0   
0D92   B7                     OR   A   
0D93   ED 52                  SBC   HL,DE   
0D95   7D                     LD   A,L   
0D96   B4                     OR   H   
0D97   28 4C                  JR   Z,expectM_0_2109S43   
0D99   CD 5F 09               CALL   printStr   
0D9C   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0DA4   CD 5F 09               CALL   printStr   
0DA7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DB6   21 00 00               LD   HL,0   
0DB9   CD AD 08               CALL   prtdec   
0DBC   CD 5F 09               CALL   printStr   
0DBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DCC   E1                     POP   hl   
0DCD   E5                     PUSH   hl   
0DCE   CD AD 08               CALL   prtdec   
0DD1   E1                     POP   hl   
0DD2   CD 5F 09               CALL   printStr   
0DD5   20 28 23 00            .CSTR   " (#"   
0DD9   CD F5 08               CALL   prthex   
0DDC   CD 5F 09               CALL   printStr   
0DDF   29 0D 0A 00            .CSTR   ")\r\n"   
0DE3   76                     HALT      
0DE4   00                     .CSTR      
0DE5                EXPECTM_0_2109S43:      
0DE5   E1                     POP   HL   
0DE6                          ;*Macro unroll:  test "10", 10
0DE6   31 80 3C               LD   SP,STACK   
0DE9   CD 66 09               CALL   init   
0DEC   CD 20 3B               CALL   execStr   
0DEF   31 30 00               .CSTR   "10"   
0DF2                          ;*Macro unroll:  expect "10",10
0DF2   E1                     POP   HL   
0DF3   E5                     PUSH   HL   
0DF4   11 0A 00               LD   DE,10   
0DF7   B7                     OR   A   
0DF8   ED 52                  SBC   HL,DE   
0DFA   7D                     LD   A,L   
0DFB   B4                     OR   H   
0DFC   28 4D                  JR   Z,expectM_0_2110S43   
0DFE   CD 5F 09               CALL   printStr   
0E01   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0E0A   CD 5F 09               CALL   printStr   
0E0D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E1C   21 0A 00               LD   HL,10   
0E1F   CD AD 08               CALL   prtdec   
0E22   CD 5F 09               CALL   printStr   
0E25   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E32   E1                     POP   hl   
0E33   E5                     PUSH   hl   
0E34   CD AD 08               CALL   prtdec   
0E37   E1                     POP   hl   
0E38   CD 5F 09               CALL   printStr   
0E3B   20 28 23 00            .CSTR   " (#"   
0E3F   CD F5 08               CALL   prthex   
0E42   CD 5F 09               CALL   printStr   
0E45   29 0D 0A 00            .CSTR   ")\r\n"   
0E49   76                     HALT      
0E4A   00                     .CSTR      
0E4B                EXPECTM_0_2110S43:      
0E4B   E1                     POP   HL   
0E4C                          ;*Macro unroll:  test "123", 123
0E4C   31 80 3C               LD   SP,STACK   
0E4F   CD 66 09               CALL   init   
0E52   CD 20 3B               CALL   execStr   
0E55   31 32 33 00            .CSTR   "123"   
0E59                          ;*Macro unroll:  expect "123",123
0E59   E1                     POP   HL   
0E5A   E5                     PUSH   HL   
0E5B   11 7B 00               LD   DE,123   
0E5E   B7                     OR   A   
0E5F   ED 52                  SBC   HL,DE   
0E61   7D                     LD   A,L   
0E62   B4                     OR   H   
0E63   28 4E                  JR   Z,expectM_0_2111S43   
0E65   CD 5F 09               CALL   printStr   
0E68   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0E72   CD 5F 09               CALL   printStr   
0E75   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E84   21 7B 00               LD   HL,123   
0E87   CD AD 08               CALL   prtdec   
0E8A   CD 5F 09               CALL   printStr   
0E8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E9A   E1                     POP   hl   
0E9B   E5                     PUSH   hl   
0E9C   CD AD 08               CALL   prtdec   
0E9F   E1                     POP   hl   
0EA0   CD 5F 09               CALL   printStr   
0EA3   20 28 23 00            .CSTR   " (#"   
0EA7   CD F5 08               CALL   prthex   
0EAA   CD 5F 09               CALL   printStr   
0EAD   29 0D 0A 00            .CSTR   ")\r\n"   
0EB1   76                     HALT      
0EB2   00                     .CSTR      
0EB3                EXPECTM_0_2111S43:      
0EB3   E1                     POP   HL   
0EB4                          ;*Macro unroll:  test "-1",-1
0EB4   31 80 3C               LD   SP,STACK   
0EB7   CD 66 09               CALL   init   
0EBA   CD 20 3B               CALL   execStr   
0EBD   2D 31 00               .CSTR   "-1"   
0EC0                          ;*Macro unroll:  expect "-1",-1
0EC0   E1                     POP   HL   
0EC1   E5                     PUSH   HL   
0EC2   11 FF FF               LD   DE,-1   
0EC5   B7                     OR   A   
0EC6   ED 52                  SBC   HL,DE   
0EC8   7D                     LD   A,L   
0EC9   B4                     OR   H   
0ECA   28 4D                  JR   Z,expectM_0_2112S43   
0ECC   CD 5F 09               CALL   printStr   
0ECF   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0ED8   CD 5F 09               CALL   printStr   
0EDB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EEA   21 FF FF               LD   HL,-1   
0EED   CD AD 08               CALL   prtdec   
0EF0   CD 5F 09               CALL   printStr   
0EF3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F00   E1                     POP   hl   
0F01   E5                     PUSH   hl   
0F02   CD AD 08               CALL   prtdec   
0F05   E1                     POP   hl   
0F06   CD 5F 09               CALL   printStr   
0F09   20 28 23 00            .CSTR   " (#"   
0F0D   CD F5 08               CALL   prthex   
0F10   CD 5F 09               CALL   printStr   
0F13   29 0D 0A 00            .CSTR   ")\r\n"   
0F17   76                     HALT      
0F18   00                     .CSTR      
0F19                EXPECTM_0_2112S43:      
0F19   E1                     POP   HL   
0F1A                          ;*Macro unroll:  test "''", 0
0F1A   31 80 3C               LD   SP,STACK   
0F1D   CD 66 09               CALL   init   
0F20   CD 20 3B               CALL   execStr   
0F23   27 27 00               .CSTR   "''"   
0F26                          ;*Macro unroll:  expect "''",0
0F26   E1                     POP   HL   
0F27   E5                     PUSH   HL   
0F28   11 00 00               LD   DE,0   
0F2B   B7                     OR   A   
0F2C   ED 52                  SBC   HL,DE   
0F2E   7D                     LD   A,L   
0F2F   B4                     OR   H   
0F30   28 4D                  JR   Z,expectM_0_2113S43   
0F32   CD 5F 09               CALL   printStr   
0F35   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0F3E   CD 5F 09               CALL   printStr   
0F41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F50   21 00 00               LD   HL,0   
0F53   CD AD 08               CALL   prtdec   
0F56   CD 5F 09               CALL   printStr   
0F59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F66   E1                     POP   hl   
0F67   E5                     PUSH   hl   
0F68   CD AD 08               CALL   prtdec   
0F6B   E1                     POP   hl   
0F6C   CD 5F 09               CALL   printStr   
0F6F   20 28 23 00            .CSTR   " (#"   
0F73   CD F5 08               CALL   prthex   
0F76   CD 5F 09               CALL   printStr   
0F79   29 0D 0A 00            .CSTR   ")\r\n"   
0F7D   76                     HALT      
0F7E   00                     .CSTR      
0F7F                EXPECTM_0_2113S43:      
0F7F   E1                     POP   HL   
0F80                          ;*Macro unroll:  test "'a'", $61
0F80   31 80 3C               LD   SP,STACK   
0F83   CD 66 09               CALL   init   
0F86   CD 20 3B               CALL   execStr   
0F89   27 61 27 00            .CSTR   "'a'"   
0F8D                          ;*Macro unroll:  expect "'a'",$61
0F8D   E1                     POP   HL   
0F8E   E5                     PUSH   HL   
0F8F   11 61 00               LD   DE,$61   
0F92   B7                     OR   A   
0F93   ED 52                  SBC   HL,DE   
0F95   7D                     LD   A,L   
0F96   B4                     OR   H   
0F97   28 4E                  JR   Z,expectM_0_2114S43   
0F99   CD 5F 09               CALL   printStr   
0F9C   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0FA6   CD 5F 09               CALL   printStr   
0FA9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FB8   21 61 00               LD   HL,$61   
0FBB   CD AD 08               CALL   prtdec   
0FBE   CD 5F 09               CALL   printStr   
0FC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FCE   E1                     POP   hl   
0FCF   E5                     PUSH   hl   
0FD0   CD AD 08               CALL   prtdec   
0FD3   E1                     POP   hl   
0FD4   CD 5F 09               CALL   printStr   
0FD7   20 28 23 00            .CSTR   " (#"   
0FDB   CD F5 08               CALL   prthex   
0FDE   CD 5F 09               CALL   printStr   
0FE1   29 0D 0A 00            .CSTR   ")\r\n"   
0FE5   76                     HALT      
0FE6   00                     .CSTR      
0FE7                EXPECTM_0_2114S43:      
0FE7   E1                     POP   HL   
0FE8                          ;*Macro unroll:  test "'\\''", $27
0FE8   31 80 3C               LD   SP,STACK   
0FEB   CD 66 09               CALL   init   
0FEE   CD 20 3B               CALL   execStr   
0FF1   27 5C 27 27 00         .CSTR   "'\\''"   
0FF6                          ;*Macro unroll:  expect "'\\''",$27
0FF6   E1                     POP   HL   
0FF7   E5                     PUSH   HL   
0FF8   11 27 00               LD   DE,$27   
0FFB   B7                     OR   A   
0FFC   ED 52                  SBC   HL,DE   
0FFE   7D                     LD   A,L   
0FFF   B4                     OR   H   
1000   28 4F                  JR   Z,expectM_0_2115S43   
1002   CD 5F 09               CALL   printStr   
1005   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1010   CD 5F 09               CALL   printStr   
1013   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1022   21 27 00               LD   HL,$27   
1025   CD AD 08               CALL   prtdec   
1028   CD 5F 09               CALL   printStr   
102B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1038   E1                     POP   hl   
1039   E5                     PUSH   hl   
103A   CD AD 08               CALL   prtdec   
103D   E1                     POP   hl   
103E   CD 5F 09               CALL   printStr   
1041   20 28 23 00            .CSTR   " (#"   
1045   CD F5 08               CALL   prthex   
1048   CD 5F 09               CALL   printStr   
104B   29 0D 0A 00            .CSTR   ")\r\n"   
104F   76                     HALT      
1050   00                     .CSTR      
1051                EXPECTM_0_2115S43:      
1051   E1                     POP   HL   
1052                          ;*Macro unroll:  test "#10", $10
1052   31 80 3C               LD   SP,STACK   
1055   CD 66 09               CALL   init   
1058   CD 20 3B               CALL   execStr   
105B   23 31 30 00            .CSTR   "#10"   
105F                          ;*Macro unroll:  expect "#10",$10
105F   E1                     POP   HL   
1060   E5                     PUSH   HL   
1061   11 10 00               LD   DE,$10   
1064   B7                     OR   A   
1065   ED 52                  SBC   HL,DE   
1067   7D                     LD   A,L   
1068   B4                     OR   H   
1069   28 4E                  JR   Z,expectM_0_2116S43   
106B   CD 5F 09               CALL   printStr   
106E   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
1078   CD 5F 09               CALL   printStr   
107B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
108A   21 10 00               LD   HL,$10   
108D   CD AD 08               CALL   prtdec   
1090   CD 5F 09               CALL   printStr   
1093   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10A0   E1                     POP   hl   
10A1   E5                     PUSH   hl   
10A2   CD AD 08               CALL   prtdec   
10A5   E1                     POP   hl   
10A6   CD 5F 09               CALL   printStr   
10A9   20 28 23 00            .CSTR   " (#"   
10AD   CD F5 08               CALL   prthex   
10B0   CD 5F 09               CALL   printStr   
10B3   29 0D 0A 00            .CSTR   ")\r\n"   
10B7   76                     HALT      
10B8   00                     .CSTR      
10B9                EXPECTM_0_2116S43:      
10B9   E1                     POP   HL   
10BA                          ;*Macro unroll:  test "#FF", $FF
10BA   31 80 3C               LD   SP,STACK   
10BD   CD 66 09               CALL   init   
10C0   CD 20 3B               CALL   execStr   
10C3   23 46 46 00            .CSTR   "#FF"   
10C7                          ;*Macro unroll:  expect "#FF",$FF
10C7   E1                     POP   HL   
10C8   E5                     PUSH   HL   
10C9   11 FF 00               LD   DE,$FF   
10CC   B7                     OR   A   
10CD   ED 52                  SBC   HL,DE   
10CF   7D                     LD   A,L   
10D0   B4                     OR   H   
10D1   28 4E                  JR   Z,expectM_0_2117S43   
10D3   CD 5F 09               CALL   printStr   
10D6   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
10E0   CD 5F 09               CALL   printStr   
10E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10F2   21 FF 00               LD   HL,$FF   
10F5   CD AD 08               CALL   prtdec   
10F8   CD 5F 09               CALL   printStr   
10FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1108   E1                     POP   hl   
1109   E5                     PUSH   hl   
110A   CD AD 08               CALL   prtdec   
110D   E1                     POP   hl   
110E   CD 5F 09               CALL   printStr   
1111   20 28 23 00            .CSTR   " (#"   
1115   CD F5 08               CALL   prthex   
1118   CD 5F 09               CALL   printStr   
111B   29 0D 0A 00            .CSTR   ")\r\n"   
111F   76                     HALT      
1120   00                     .CSTR      
1121                EXPECTM_0_2117S43:      
1121   E1                     POP   HL   
1122                          ;*Macro unroll:  test "-1 2 +",1
1122   31 80 3C               LD   SP,STACK   
1125   CD 66 09               CALL   init   
1128   CD 20 3B               CALL   execStr   
112B   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
1132                          ;*Macro unroll:  expect "-1 2 +",1
1132   E1                     POP   HL   
1133   E5                     PUSH   HL   
1134   11 01 00               LD   DE,1   
1137   B7                     OR   A   
1138   ED 52                  SBC   HL,DE   
113A   7D                     LD   A,L   
113B   B4                     OR   H   
113C   28 51                  JR   Z,expectM_0_2118S43   
113E   CD 5F 09               CALL   printStr   
1141   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
114E   CD 5F 09               CALL   printStr   
1151   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1160   21 01 00               LD   HL,1   
1163   CD AD 08               CALL   prtdec   
1166   CD 5F 09               CALL   printStr   
1169   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1176   E1                     POP   hl   
1177   E5                     PUSH   hl   
1178   CD AD 08               CALL   prtdec   
117B   E1                     POP   hl   
117C   CD 5F 09               CALL   printStr   
117F   20 28 23 00            .CSTR   " (#"   
1183   CD F5 08               CALL   prthex   
1186   CD 5F 09               CALL   printStr   
1189   29 0D 0A 00            .CSTR   ")\r\n"   
118D   76                     HALT      
118E   00                     .CSTR      
118F                EXPECTM_0_2118S43:      
118F   E1                     POP   HL   
1190                          ;*Macro unroll:  test "-1 1 +",0
1190   31 80 3C               LD   SP,STACK   
1193   CD 66 09               CALL   init   
1196   CD 20 3B               CALL   execStr   
1199   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
11A0                          ;*Macro unroll:  expect "-1 1 +",0
11A0   E1                     POP   HL   
11A1   E5                     PUSH   HL   
11A2   11 00 00               LD   DE,0   
11A5   B7                     OR   A   
11A6   ED 52                  SBC   HL,DE   
11A8   7D                     LD   A,L   
11A9   B4                     OR   H   
11AA   28 51                  JR   Z,expectM_0_2119S43   
11AC   CD 5F 09               CALL   printStr   
11AF   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
11BC   CD 5F 09               CALL   printStr   
11BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11CE   21 00 00               LD   HL,0   
11D1   CD AD 08               CALL   prtdec   
11D4   CD 5F 09               CALL   printStr   
11D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11E4   E1                     POP   hl   
11E5   E5                     PUSH   hl   
11E6   CD AD 08               CALL   prtdec   
11E9   E1                     POP   hl   
11EA   CD 5F 09               CALL   printStr   
11ED   20 28 23 00            .CSTR   " (#"   
11F1   CD F5 08               CALL   prthex   
11F4   CD 5F 09               CALL   printStr   
11F7   29 0D 0A 00            .CSTR   ")\r\n"   
11FB   76                     HALT      
11FC   00                     .CSTR      
11FD                EXPECTM_0_2119S43:      
11FD   E1                     POP   HL   
11FE                          ;*Macro unroll:  test "1 2 +", 3
11FE   31 80 3C               LD   SP,STACK   
1201   CD 66 09               CALL   init   
1204   CD 20 3B               CALL   execStr   
1207   31 20 32 20 2B 00      .CSTR   "1 2 +"   
120D                          ;*Macro unroll:  expect "1 2 +",3
120D   E1                     POP   HL   
120E   E5                     PUSH   HL   
120F   11 03 00               LD   DE,3   
1212   B7                     OR   A   
1213   ED 52                  SBC   HL,DE   
1215   7D                     LD   A,L   
1216   B4                     OR   H   
1217   28 50                  JR   Z,expectM_0_2120S43   
1219   CD 5F 09               CALL   printStr   
121C   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1228   CD 5F 09               CALL   printStr   
122B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
123A   21 03 00               LD   HL,3   
123D   CD AD 08               CALL   prtdec   
1240   CD 5F 09               CALL   printStr   
1243   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1250   E1                     POP   hl   
1251   E5                     PUSH   hl   
1252   CD AD 08               CALL   prtdec   
1255   E1                     POP   hl   
1256   CD 5F 09               CALL   printStr   
1259   20 28 23 00            .CSTR   " (#"   
125D   CD F5 08               CALL   prthex   
1260   CD 5F 09               CALL   printStr   
1263   29 0D 0A 00            .CSTR   ")\r\n"   
1267   76                     HALT      
1268   00                     .CSTR      
1269                EXPECTM_0_2120S43:      
1269   E1                     POP   HL   
126A                          ;*Macro unroll:  test "4 1 2 +", 3
126A   31 80 3C               LD   SP,STACK   
126D   CD 66 09               CALL   init   
1270   CD 20 3B               CALL   execStr   
1273   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
127B                          ;*Macro unroll:  expect "4 1 2 +",3
127B   E1                     POP   HL   
127C   E5                     PUSH   HL   
127D   11 03 00               LD   DE,3   
1280   B7                     OR   A   
1281   ED 52                  SBC   HL,DE   
1283   7D                     LD   A,L   
1284   B4                     OR   H   
1285   28 52                  JR   Z,expectM_0_2121S43   
1287   CD 5F 09               CALL   printStr   
128A   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1298   CD 5F 09               CALL   printStr   
129B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12AA   21 03 00               LD   HL,3   
12AD   CD AD 08               CALL   prtdec   
12B0   CD 5F 09               CALL   printStr   
12B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12C0   E1                     POP   hl   
12C1   E5                     PUSH   hl   
12C2   CD AD 08               CALL   prtdec   
12C5   E1                     POP   hl   
12C6   CD 5F 09               CALL   printStr   
12C9   20 28 23 00            .CSTR   " (#"   
12CD   CD F5 08               CALL   prthex   
12D0   CD 5F 09               CALL   printStr   
12D3   29 0D 0A 00            .CSTR   ")\r\n"   
12D7   76                     HALT      
12D8   00                     .CSTR      
12D9                EXPECTM_0_2121S43:      
12D9   E1                     POP   HL   
12DA                          ;*Macro unroll:  test "123 456 +", 123+456
12DA   31 80 3C               LD   SP,STACK   
12DD   CD 66 09               CALL   init   
12E0   CD 20 3B               CALL   execStr   
12E3   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
12ED                          ;*Macro unroll:  expect "123 456 +",123+456
12ED   E1                     POP   HL   
12EE   E5                     PUSH   HL   
12EF   11 43 02               LD   DE,123+456   
12F2   B7                     OR   A   
12F3   ED 52                  SBC   HL,DE   
12F5   7D                     LD   A,L   
12F6   B4                     OR   H   
12F7   28 54                  JR   Z,expectM_0_2122S43   
12F9   CD 5F 09               CALL   printStr   
12FC   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
130C   CD 5F 09               CALL   printStr   
130F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
131E   21 43 02               LD   HL,123+456   
1321   CD AD 08               CALL   prtdec   
1324   CD 5F 09               CALL   printStr   
1327   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1334   E1                     POP   hl   
1335   E5                     PUSH   hl   
1336   CD AD 08               CALL   prtdec   
1339   E1                     POP   hl   
133A   CD 5F 09               CALL   printStr   
133D   20 28 23 00            .CSTR   " (#"   
1341   CD F5 08               CALL   prthex   
1344   CD 5F 09               CALL   printStr   
1347   29 0D 0A 00            .CSTR   ")\r\n"   
134B   76                     HALT      
134C   00                     .CSTR      
134D                EXPECTM_0_2122S43:      
134D   E1                     POP   HL   
134E                          ;*Macro unroll:  test "64 128 +", 64+128
134E   31 80 3C               LD   SP,STACK   
1351   CD 66 09               CALL   init   
1354   CD 20 3B               CALL   execStr   
1357   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
1360                          ;*Macro unroll:  expect "64 128 +",64+128
1360   E1                     POP   HL   
1361   E5                     PUSH   HL   
1362   11 C0 00               LD   DE,64+128   
1365   B7                     OR   A   
1366   ED 52                  SBC   HL,DE   
1368   7D                     LD   A,L   
1369   B4                     OR   H   
136A   28 53                  JR   Z,expectM_0_2123S43   
136C   CD 5F 09               CALL   printStr   
136F   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
137E   CD 5F 09               CALL   printStr   
1381   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1390   21 C0 00               LD   HL,64+128   
1393   CD AD 08               CALL   prtdec   
1396   CD 5F 09               CALL   printStr   
1399   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13A6   E1                     POP   hl   
13A7   E5                     PUSH   hl   
13A8   CD AD 08               CALL   prtdec   
13AB   E1                     POP   hl   
13AC   CD 5F 09               CALL   printStr   
13AF   20 28 23 00            .CSTR   " (#"   
13B3   CD F5 08               CALL   prthex   
13B6   CD 5F 09               CALL   printStr   
13B9   29 0D 0A 00            .CSTR   ")\r\n"   
13BD   76                     HALT      
13BE   00                     .CSTR      
13BF                EXPECTM_0_2123S43:      
13BF   E1                     POP   HL   
13C0                          ;*Macro unroll:  test "1 2 +", 3
13C0   31 80 3C               LD   SP,STACK   
13C3   CD 66 09               CALL   init   
13C6   CD 20 3B               CALL   execStr   
13C9   31 20 32 20 2B 00      .CSTR   "1 2 +"   
13CF                          ;*Macro unroll:  expect "1 2 +",3
13CF   E1                     POP   HL   
13D0   E5                     PUSH   HL   
13D1   11 03 00               LD   DE,3   
13D4   B7                     OR   A   
13D5   ED 52                  SBC   HL,DE   
13D7   7D                     LD   A,L   
13D8   B4                     OR   H   
13D9   28 50                  JR   Z,expectM_0_2124S43   
13DB   CD 5F 09               CALL   printStr   
13DE   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
13EA   CD 5F 09               CALL   printStr   
13ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13FC   21 03 00               LD   HL,3   
13FF   CD AD 08               CALL   prtdec   
1402   CD 5F 09               CALL   printStr   
1405   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1412   E1                     POP   hl   
1413   E5                     PUSH   hl   
1414   CD AD 08               CALL   prtdec   
1417   E1                     POP   hl   
1418   CD 5F 09               CALL   printStr   
141B   20 28 23 00            .CSTR   " (#"   
141F   CD F5 08               CALL   prthex   
1422   CD 5F 09               CALL   printStr   
1425   29 0D 0A 00            .CSTR   ")\r\n"   
1429   76                     HALT      
142A   00                     .CSTR      
142B                EXPECTM_0_2124S43:      
142B   E1                     POP   HL   
142C                          ;*Macro unroll:  test "1 a= a++ a",2
142C   31 80 3C               LD   SP,STACK   
142F   CD 66 09               CALL   init   
1432   CD 20 3B               CALL   execStr   
1435   31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1 a= a++ a"   
1440                          ;*Macro unroll:  expect "1 a= a++ a",2
1440   E1                     POP   HL   
1441   E5                     PUSH   HL   
1442   11 02 00               LD   DE,2   
1445   B7                     OR   A   
1446   ED 52                  SBC   HL,DE   
1448   7D                     LD   A,L   
1449   B4                     OR   H   
144A   28 55                  JR   Z,expectM_0_2125S43   
144C   CD 5F 09               CALL   printStr   
144F   43 6F 64 65 3A 20 31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1 a= a++ a"   
1460   CD 5F 09               CALL   printStr   
1463   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1472   21 02 00               LD   HL,2   
1475   CD AD 08               CALL   prtdec   
1478   CD 5F 09               CALL   printStr   
147B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1488   E1                     POP   hl   
1489   E5                     PUSH   hl   
148A   CD AD 08               CALL   prtdec   
148D   E1                     POP   hl   
148E   CD 5F 09               CALL   printStr   
1491   20 28 23 00            .CSTR   " (#"   
1495   CD F5 08               CALL   prthex   
1498   CD 5F 09               CALL   printStr   
149B   29 0D 0A 00            .CSTR   ")\r\n"   
149F   76                     HALT      
14A0   00                     .CSTR      
14A1                EXPECTM_0_2125S43:      
14A1   E1                     POP   HL   
14A2                          ;*Macro unroll:  test "1 a= 2 a += a",3
14A2   31 80 3C               LD   SP,STACK   
14A5   CD 66 09               CALL   init   
14A8   CD 20 3B               CALL   execStr   
14AB   31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "1 a= 2 a += a"   
14B9                          ;*Macro unroll:  expect "1 a= 2 a += a",3
14B9   E1                     POP   HL   
14BA   E5                     PUSH   HL   
14BB   11 03 00               LD   DE,3   
14BE   B7                     OR   A   
14BF   ED 52                  SBC   HL,DE   
14C1   7D                     LD   A,L   
14C2   B4                     OR   H   
14C3   28 58                  JR   Z,expectM_0_2126S43   
14C5   CD 5F 09               CALL   printStr   
14C8   43 6F 64 65 3A 20 31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "Code: ","1 a= 2 a += a"   
14DC   CD 5F 09               CALL   printStr   
14DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14EE   21 03 00               LD   HL,3   
14F1   CD AD 08               CALL   prtdec   
14F4   CD 5F 09               CALL   printStr   
14F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1504   E1                     POP   hl   
1505   E5                     PUSH   hl   
1506   CD AD 08               CALL   prtdec   
1509   E1                     POP   hl   
150A   CD 5F 09               CALL   printStr   
150D   20 28 23 00            .CSTR   " (#"   
1511   CD F5 08               CALL   prthex   
1514   CD 5F 09               CALL   printStr   
1517   29 0D 0A 00            .CSTR   ")\r\n"   
151B   76                     HALT      
151C   00                     .CSTR      
151D                EXPECTM_0_2126S43:      
151D   E1                     POP   HL   
151E                          ;*Macro unroll:  test "-1 -1 -",0
151E   31 80 3C               LD   SP,STACK   
1521   CD 66 09               CALL   init   
1524   CD 20 3B               CALL   execStr   
1527   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
152F                          ;*Macro unroll:  expect "-1 -1 -",0
152F   E1                     POP   HL   
1530   E5                     PUSH   HL   
1531   11 00 00               LD   DE,0   
1534   B7                     OR   A   
1535   ED 52                  SBC   HL,DE   
1537   7D                     LD   A,L   
1538   B4                     OR   H   
1539   28 52                  JR   Z,expectM_0_2127S43   
153B   CD 5F 09               CALL   printStr   
153E   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
154C   CD 5F 09               CALL   printStr   
154F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
155E   21 00 00               LD   HL,0   
1561   CD AD 08               CALL   prtdec   
1564   CD 5F 09               CALL   printStr   
1567   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1574   E1                     POP   hl   
1575   E5                     PUSH   hl   
1576   CD AD 08               CALL   prtdec   
1579   E1                     POP   hl   
157A   CD 5F 09               CALL   printStr   
157D   20 28 23 00            .CSTR   " (#"   
1581   CD F5 08               CALL   prthex   
1584   CD 5F 09               CALL   printStr   
1587   29 0D 0A 00            .CSTR   ")\r\n"   
158B   76                     HALT      
158C   00                     .CSTR      
158D                EXPECTM_0_2127S43:      
158D   E1                     POP   HL   
158E                          ;*Macro unroll:  test "5 3 -", 2
158E   31 80 3C               LD   SP,STACK   
1591   CD 66 09               CALL   init   
1594   CD 20 3B               CALL   execStr   
1597   35 20 33 20 2D 00      .CSTR   "5 3 -"   
159D                          ;*Macro unroll:  expect "5 3 -",2
159D   E1                     POP   HL   
159E   E5                     PUSH   HL   
159F   11 02 00               LD   DE,2   
15A2   B7                     OR   A   
15A3   ED 52                  SBC   HL,DE   
15A5   7D                     LD   A,L   
15A6   B4                     OR   H   
15A7   28 50                  JR   Z,expectM_0_2128S43   
15A9   CD 5F 09               CALL   printStr   
15AC   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
15B8   CD 5F 09               CALL   printStr   
15BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15CA   21 02 00               LD   HL,2   
15CD   CD AD 08               CALL   prtdec   
15D0   CD 5F 09               CALL   printStr   
15D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15E0   E1                     POP   hl   
15E1   E5                     PUSH   hl   
15E2   CD AD 08               CALL   prtdec   
15E5   E1                     POP   hl   
15E6   CD 5F 09               CALL   printStr   
15E9   20 28 23 00            .CSTR   " (#"   
15ED   CD F5 08               CALL   prthex   
15F0   CD 5F 09               CALL   printStr   
15F3   29 0D 0A 00            .CSTR   ")\r\n"   
15F7   76                     HALT      
15F8   00                     .CSTR      
15F9                EXPECTM_0_2128S43:      
15F9   E1                     POP   HL   
15FA                          ;*Macro unroll:  test "2 1 -",1
15FA   31 80 3C               LD   SP,STACK   
15FD   CD 66 09               CALL   init   
1600   CD 20 3B               CALL   execStr   
1603   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1609                          ;*Macro unroll:  expect "2 1 -",1
1609   E1                     POP   HL   
160A   E5                     PUSH   HL   
160B   11 01 00               LD   DE,1   
160E   B7                     OR   A   
160F   ED 52                  SBC   HL,DE   
1611   7D                     LD   A,L   
1612   B4                     OR   H   
1613   28 50                  JR   Z,expectM_0_2129S43   
1615   CD 5F 09               CALL   printStr   
1618   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1624   CD 5F 09               CALL   printStr   
1627   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1636   21 01 00               LD   HL,1   
1639   CD AD 08               CALL   prtdec   
163C   CD 5F 09               CALL   printStr   
163F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
164C   E1                     POP   hl   
164D   E5                     PUSH   hl   
164E   CD AD 08               CALL   prtdec   
1651   E1                     POP   hl   
1652   CD 5F 09               CALL   printStr   
1655   20 28 23 00            .CSTR   " (#"   
1659   CD F5 08               CALL   prthex   
165C   CD 5F 09               CALL   printStr   
165F   29 0D 0A 00            .CSTR   ")\r\n"   
1663   76                     HALT      
1664   00                     .CSTR      
1665                EXPECTM_0_2129S43:      
1665   E1                     POP   HL   
1666                          ;*Macro unroll:  test "3 a= a-- a",2
1666   31 80 3C               LD   SP,STACK   
1669   CD 66 09               CALL   init   
166C   CD 20 3B               CALL   execStr   
166F   33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3 a= a-- a"   
167A                          ;*Macro unroll:  expect "3 a= a-- a",2
167A   E1                     POP   HL   
167B   E5                     PUSH   HL   
167C   11 02 00               LD   DE,2   
167F   B7                     OR   A   
1680   ED 52                  SBC   HL,DE   
1682   7D                     LD   A,L   
1683   B4                     OR   H   
1684   28 55                  JR   Z,expectM_0_2130S43   
1686   CD 5F 09               CALL   printStr   
1689   43 6F 64 65 3A 20 33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3 a= a-- a"   
169A   CD 5F 09               CALL   printStr   
169D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16AC   21 02 00               LD   HL,2   
16AF   CD AD 08               CALL   prtdec   
16B2   CD 5F 09               CALL   printStr   
16B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16C2   E1                     POP   hl   
16C3   E5                     PUSH   hl   
16C4   CD AD 08               CALL   prtdec   
16C7   E1                     POP   hl   
16C8   CD 5F 09               CALL   printStr   
16CB   20 28 23 00            .CSTR   " (#"   
16CF   CD F5 08               CALL   prthex   
16D2   CD 5F 09               CALL   printStr   
16D5   29 0D 0A 00            .CSTR   ")\r\n"   
16D9   76                     HALT      
16DA   00                     .CSTR      
16DB                EXPECTM_0_2130S43:      
16DB   E1                     POP   HL   
16DC                          ;*Macro unroll:  test "4 a= a 2 -= a",2
16DC   31 80 3C               LD   SP,STACK   
16DF   CD 66 09               CALL   init   
16E2   CD 20 3B               CALL   execStr   
16E5   34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "4 a= a 2 -= a"   
16F3                          ;*Macro unroll:  expect "4 a= a 2 -= a",2
16F3   E1                     POP   HL   
16F4   E5                     PUSH   HL   
16F5   11 02 00               LD   DE,2   
16F8   B7                     OR   A   
16F9   ED 52                  SBC   HL,DE   
16FB   7D                     LD   A,L   
16FC   B4                     OR   H   
16FD   28 58                  JR   Z,expectM_0_2131S43   
16FF   CD 5F 09               CALL   printStr   
1702   43 6F 64 65 3A 20 34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "Code: ","4 a= a 2 -= a"   
1716   CD 5F 09               CALL   printStr   
1719   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1728   21 02 00               LD   HL,2   
172B   CD AD 08               CALL   prtdec   
172E   CD 5F 09               CALL   printStr   
1731   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
173E   E1                     POP   hl   
173F   E5                     PUSH   hl   
1740   CD AD 08               CALL   prtdec   
1743   E1                     POP   hl   
1744   CD 5F 09               CALL   printStr   
1747   20 28 23 00            .CSTR   " (#"   
174B   CD F5 08               CALL   prthex   
174E   CD 5F 09               CALL   printStr   
1751   29 0D 0A 00            .CSTR   ")\r\n"   
1755   76                     HALT      
1756   00                     .CSTR      
1757                EXPECTM_0_2131S43:      
1757   E1                     POP   HL   
1758                          ;*Macro unroll:  test "3 5 &", 1
1758   31 80 3C               LD   SP,STACK   
175B   CD 66 09               CALL   init   
175E   CD 20 3B               CALL   execStr   
1761   33 20 35 20 26 00      .CSTR   "3 5 &"   
1767                          ;*Macro unroll:  expect "3 5 &",1
1767   E1                     POP   HL   
1768   E5                     PUSH   HL   
1769   11 01 00               LD   DE,1   
176C   B7                     OR   A   
176D   ED 52                  SBC   HL,DE   
176F   7D                     LD   A,L   
1770   B4                     OR   H   
1771   28 50                  JR   Z,expectM_0_2132S43   
1773   CD 5F 09               CALL   printStr   
1776   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1782   CD 5F 09               CALL   printStr   
1785   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1794   21 01 00               LD   HL,1   
1797   CD AD 08               CALL   prtdec   
179A   CD 5F 09               CALL   printStr   
179D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17AA   E1                     POP   hl   
17AB   E5                     PUSH   hl   
17AC   CD AD 08               CALL   prtdec   
17AF   E1                     POP   hl   
17B0   CD 5F 09               CALL   printStr   
17B3   20 28 23 00            .CSTR   " (#"   
17B7   CD F5 08               CALL   prthex   
17BA   CD 5F 09               CALL   printStr   
17BD   29 0D 0A 00            .CSTR   ")\r\n"   
17C1   76                     HALT      
17C2   00                     .CSTR      
17C3                EXPECTM_0_2132S43:      
17C3   E1                     POP   HL   
17C4                          ;*Macro unroll:  test "3 a= 5 a &= a",1
17C4   31 80 3C               LD   SP,STACK   
17C7   CD 66 09               CALL   init   
17CA   CD 20 3B               CALL   execStr   
17CD   33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "3 a= 5 a &= a"   
17DB                          ;*Macro unroll:  expect "3 a= 5 a &= a",1
17DB   E1                     POP   HL   
17DC   E5                     PUSH   HL   
17DD   11 01 00               LD   DE,1   
17E0   B7                     OR   A   
17E1   ED 52                  SBC   HL,DE   
17E3   7D                     LD   A,L   
17E4   B4                     OR   H   
17E5   28 58                  JR   Z,expectM_0_2133S43   
17E7   CD 5F 09               CALL   printStr   
17EA   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a &= a"   
17FE   CD 5F 09               CALL   printStr   
1801   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1810   21 01 00               LD   HL,1   
1813   CD AD 08               CALL   prtdec   
1816   CD 5F 09               CALL   printStr   
1819   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1826   E1                     POP   hl   
1827   E5                     PUSH   hl   
1828   CD AD 08               CALL   prtdec   
182B   E1                     POP   hl   
182C   CD 5F 09               CALL   printStr   
182F   20 28 23 00            .CSTR   " (#"   
1833   CD F5 08               CALL   prthex   
1836   CD 5F 09               CALL   printStr   
1839   29 0D 0A 00            .CSTR   ")\r\n"   
183D   76                     HALT      
183E   00                     .CSTR      
183F                EXPECTM_0_2133S43:      
183F   E1                     POP   HL   
1840                          ;*Macro unroll:  test "3 5 |", 7
1840   31 80 3C               LD   SP,STACK   
1843   CD 66 09               CALL   init   
1846   CD 20 3B               CALL   execStr   
1849   33 20 35 20 7C 00      .CSTR   "3 5 |"   
184F                          ;*Macro unroll:  expect "3 5 |",7
184F   E1                     POP   HL   
1850   E5                     PUSH   HL   
1851   11 07 00               LD   DE,7   
1854   B7                     OR   A   
1855   ED 52                  SBC   HL,DE   
1857   7D                     LD   A,L   
1858   B4                     OR   H   
1859   28 50                  JR   Z,expectM_0_2134S43   
185B   CD 5F 09               CALL   printStr   
185E   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
186A   CD 5F 09               CALL   printStr   
186D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
187C   21 07 00               LD   HL,7   
187F   CD AD 08               CALL   prtdec   
1882   CD 5F 09               CALL   printStr   
1885   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1892   E1                     POP   hl   
1893   E5                     PUSH   hl   
1894   CD AD 08               CALL   prtdec   
1897   E1                     POP   hl   
1898   CD 5F 09               CALL   printStr   
189B   20 28 23 00            .CSTR   " (#"   
189F   CD F5 08               CALL   prthex   
18A2   CD 5F 09               CALL   printStr   
18A5   29 0D 0A 00            .CSTR   ")\r\n"   
18A9   76                     HALT      
18AA   00                     .CSTR      
18AB                EXPECTM_0_2134S43:      
18AB   E1                     POP   HL   
18AC                          ;*Macro unroll:  test "3 a= 5 a |= a",7
18AC   31 80 3C               LD   SP,STACK   
18AF   CD 66 09               CALL   init   
18B2   CD 20 3B               CALL   execStr   
18B5   33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "3 a= 5 a |= a"   
18C3                          ;*Macro unroll:  expect "3 a= 5 a |= a",7
18C3   E1                     POP   HL   
18C4   E5                     PUSH   HL   
18C5   11 07 00               LD   DE,7   
18C8   B7                     OR   A   
18C9   ED 52                  SBC   HL,DE   
18CB   7D                     LD   A,L   
18CC   B4                     OR   H   
18CD   28 58                  JR   Z,expectM_0_2135S43   
18CF   CD 5F 09               CALL   printStr   
18D2   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a |= a"   
18E6   CD 5F 09               CALL   printStr   
18E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18F8   21 07 00               LD   HL,7   
18FB   CD AD 08               CALL   prtdec   
18FE   CD 5F 09               CALL   printStr   
1901   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
190E   E1                     POP   hl   
190F   E5                     PUSH   hl   
1910   CD AD 08               CALL   prtdec   
1913   E1                     POP   hl   
1914   CD 5F 09               CALL   printStr   
1917   20 28 23 00            .CSTR   " (#"   
191B   CD F5 08               CALL   prthex   
191E   CD 5F 09               CALL   printStr   
1921   29 0D 0A 00            .CSTR   ")\r\n"   
1925   76                     HALT      
1926   00                     .CSTR      
1927                EXPECTM_0_2135S43:      
1927   E1                     POP   HL   
1928                          ;*Macro unroll:  test "3 5 ^", 6
1928   31 80 3C               LD   SP,STACK   
192B   CD 66 09               CALL   init   
192E   CD 20 3B               CALL   execStr   
1931   33 20 35 20 5E 00      .CSTR   "3 5 ^"   
1937                          ;*Macro unroll:  expect "3 5 ^",6
1937   E1                     POP   HL   
1938   E5                     PUSH   HL   
1939   11 06 00               LD   DE,6   
193C   B7                     OR   A   
193D   ED 52                  SBC   HL,DE   
193F   7D                     LD   A,L   
1940   B4                     OR   H   
1941   28 50                  JR   Z,expectM_0_2136S43   
1943   CD 5F 09               CALL   printStr   
1946   43 6F 64 65 3A 20 33 20 35 20 5E 00 .CSTR   "Code: ","3 5 ^"   
1952   CD 5F 09               CALL   printStr   
1955   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1964   21 06 00               LD   HL,6   
1967   CD AD 08               CALL   prtdec   
196A   CD 5F 09               CALL   printStr   
196D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
197A   E1                     POP   hl   
197B   E5                     PUSH   hl   
197C   CD AD 08               CALL   prtdec   
197F   E1                     POP   hl   
1980   CD 5F 09               CALL   printStr   
1983   20 28 23 00            .CSTR   " (#"   
1987   CD F5 08               CALL   prthex   
198A   CD 5F 09               CALL   printStr   
198D   29 0D 0A 00            .CSTR   ")\r\n"   
1991   76                     HALT      
1992   00                     .CSTR      
1993                EXPECTM_0_2136S43:      
1993   E1                     POP   HL   
1994                          ;*Macro unroll:  test "3 a= 5 a ^= a",6
1994   31 80 3C               LD   SP,STACK   
1997   CD 66 09               CALL   init   
199A   CD 20 3B               CALL   execStr   
199D   33 20 61 3D 20 35 20 61 20 5E 3D 20 61 00 .CSTR   "3 a= 5 a ^= a"   
19AB                          ;*Macro unroll:  expect "3 a= 5 a ^= a",6
19AB   E1                     POP   HL   
19AC   E5                     PUSH   HL   
19AD   11 06 00               LD   DE,6   
19B0   B7                     OR   A   
19B1   ED 52                  SBC   HL,DE   
19B3   7D                     LD   A,L   
19B4   B4                     OR   H   
19B5   28 58                  JR   Z,expectM_0_2137S43   
19B7   CD 5F 09               CALL   printStr   
19BA   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 5E 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a ^= a"   
19CE   CD 5F 09               CALL   printStr   
19D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19E0   21 06 00               LD   HL,6   
19E3   CD AD 08               CALL   prtdec   
19E6   CD 5F 09               CALL   printStr   
19E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19F6   E1                     POP   hl   
19F7   E5                     PUSH   hl   
19F8   CD AD 08               CALL   prtdec   
19FB   E1                     POP   hl   
19FC   CD 5F 09               CALL   printStr   
19FF   20 28 23 00            .CSTR   " (#"   
1A03   CD F5 08               CALL   prthex   
1A06   CD 5F 09               CALL   printStr   
1A09   29 0D 0A 00            .CSTR   ")\r\n"   
1A0D   76                     HALT      
1A0E   00                     .CSTR      
1A0F                EXPECTM_0_2137S43:      
1A0F   E1                     POP   HL   
1A10                          ;*Macro unroll:  test "2 3 *", 6
1A10   31 80 3C               LD   SP,STACK   
1A13   CD 66 09               CALL   init   
1A16   CD 20 3B               CALL   execStr   
1A19   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1A1F                          ;*Macro unroll:  expect "2 3 *",6
1A1F   E1                     POP   HL   
1A20   E5                     PUSH   HL   
1A21   11 06 00               LD   DE,6   
1A24   B7                     OR   A   
1A25   ED 52                  SBC   HL,DE   
1A27   7D                     LD   A,L   
1A28   B4                     OR   H   
1A29   28 50                  JR   Z,expectM_0_2138S43   
1A2B   CD 5F 09               CALL   printStr   
1A2E   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1A3A   CD 5F 09               CALL   printStr   
1A3D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A4C   21 06 00               LD   HL,6   
1A4F   CD AD 08               CALL   prtdec   
1A52   CD 5F 09               CALL   printStr   
1A55   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A62   E1                     POP   hl   
1A63   E5                     PUSH   hl   
1A64   CD AD 08               CALL   prtdec   
1A67   E1                     POP   hl   
1A68   CD 5F 09               CALL   printStr   
1A6B   20 28 23 00            .CSTR   " (#"   
1A6F   CD F5 08               CALL   prthex   
1A72   CD 5F 09               CALL   printStr   
1A75   29 0D 0A 00            .CSTR   ")\r\n"   
1A79   76                     HALT      
1A7A   00                     .CSTR      
1A7B                EXPECTM_0_2138S43:      
1A7B   E1                     POP   HL   
1A7C                          ;*Macro unroll:  test "3 x= 2 x *= x",6
1A7C   31 80 3C               LD   SP,STACK   
1A7F   CD 66 09               CALL   init   
1A82   CD 20 3B               CALL   execStr   
1A85   33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "3 x= 2 x *= x"   
1A93                          ;*Macro unroll:  expect "3 x= 2 x *= x",6
1A93   E1                     POP   HL   
1A94   E5                     PUSH   HL   
1A95   11 06 00               LD   DE,6   
1A98   B7                     OR   A   
1A99   ED 52                  SBC   HL,DE   
1A9B   7D                     LD   A,L   
1A9C   B4                     OR   H   
1A9D   28 58                  JR   Z,expectM_0_2139S43   
1A9F   CD 5F 09               CALL   printStr   
1AA2   43 6F 64 65 3A 20 33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "Code: ","3 x= 2 x *= x"   
1AB6   CD 5F 09               CALL   printStr   
1AB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AC8   21 06 00               LD   HL,6   
1ACB   CD AD 08               CALL   prtdec   
1ACE   CD 5F 09               CALL   printStr   
1AD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ADE   E1                     POP   hl   
1ADF   E5                     PUSH   hl   
1AE0   CD AD 08               CALL   prtdec   
1AE3   E1                     POP   hl   
1AE4   CD 5F 09               CALL   printStr   
1AE7   20 28 23 00            .CSTR   " (#"   
1AEB   CD F5 08               CALL   prthex   
1AEE   CD 5F 09               CALL   printStr   
1AF1   29 0D 0A 00            .CSTR   ")\r\n"   
1AF5   76                     HALT      
1AF6   00                     .CSTR      
1AF7                EXPECTM_0_2139S43:      
1AF7   E1                     POP   HL   
1AF8                          ;*Macro unroll:  test "1 2 3 + *", 5
1AF8   31 80 3C               LD   SP,STACK   
1AFB   CD 66 09               CALL   init   
1AFE   CD 20 3B               CALL   execStr   
1B01   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1B0B                          ;*Macro unroll:  expect "1 2 3 + *",5
1B0B   E1                     POP   HL   
1B0C   E5                     PUSH   HL   
1B0D   11 05 00               LD   DE,5   
1B10   B7                     OR   A   
1B11   ED 52                  SBC   HL,DE   
1B13   7D                     LD   A,L   
1B14   B4                     OR   H   
1B15   28 54                  JR   Z,expectM_0_2140S43   
1B17   CD 5F 09               CALL   printStr   
1B1A   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1B2A   CD 5F 09               CALL   printStr   
1B2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B3C   21 05 00               LD   HL,5   
1B3F   CD AD 08               CALL   prtdec   
1B42   CD 5F 09               CALL   printStr   
1B45   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B52   E1                     POP   hl   
1B53   E5                     PUSH   hl   
1B54   CD AD 08               CALL   prtdec   
1B57   E1                     POP   hl   
1B58   CD 5F 09               CALL   printStr   
1B5B   20 28 23 00            .CSTR   " (#"   
1B5F   CD F5 08               CALL   prthex   
1B62   CD 5F 09               CALL   printStr   
1B65   29 0D 0A 00            .CSTR   ")\r\n"   
1B69   76                     HALT      
1B6A   00                     .CSTR      
1B6B                EXPECTM_0_2140S43:      
1B6B   E1                     POP   HL   
1B6C                          ;*Macro unroll:  test "7 3 /", 2
1B6C   31 80 3C               LD   SP,STACK   
1B6F   CD 66 09               CALL   init   
1B72   CD 20 3B               CALL   execStr   
1B75   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1B7B                          ;*Macro unroll:  expect "7 3 /",2
1B7B   E1                     POP   HL   
1B7C   E5                     PUSH   HL   
1B7D   11 02 00               LD   DE,2   
1B80   B7                     OR   A   
1B81   ED 52                  SBC   HL,DE   
1B83   7D                     LD   A,L   
1B84   B4                     OR   H   
1B85   28 50                  JR   Z,expectM_0_2141S43   
1B87   CD 5F 09               CALL   printStr   
1B8A   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1B96   CD 5F 09               CALL   printStr   
1B99   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BA8   21 02 00               LD   HL,2   
1BAB   CD AD 08               CALL   prtdec   
1BAE   CD 5F 09               CALL   printStr   
1BB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BBE   E1                     POP   hl   
1BBF   E5                     PUSH   hl   
1BC0   CD AD 08               CALL   prtdec   
1BC3   E1                     POP   hl   
1BC4   CD 5F 09               CALL   printStr   
1BC7   20 28 23 00            .CSTR   " (#"   
1BCB   CD F5 08               CALL   prthex   
1BCE   CD 5F 09               CALL   printStr   
1BD1   29 0D 0A 00            .CSTR   ")\r\n"   
1BD5   76                     HALT      
1BD6   00                     .CSTR      
1BD7                EXPECTM_0_2141S43:      
1BD7   E1                     POP   HL   
1BD8                          ;*Macro unroll:  test "7 x= x 3 /= x", 2
1BD8   31 80 3C               LD   SP,STACK   
1BDB   CD 66 09               CALL   init   
1BDE   CD 20 3B               CALL   execStr   
1BE1   37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "7 x= x 3 /= x"   
1BEF                          ;*Macro unroll:  expect "7 x= x 3 /= x",2
1BEF   E1                     POP   HL   
1BF0   E5                     PUSH   HL   
1BF1   11 02 00               LD   DE,2   
1BF4   B7                     OR   A   
1BF5   ED 52                  SBC   HL,DE   
1BF7   7D                     LD   A,L   
1BF8   B4                     OR   H   
1BF9   28 58                  JR   Z,expectM_0_2142S43   
1BFB   CD 5F 09               CALL   printStr   
1BFE   43 6F 64 65 3A 20 37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "Code: ","7 x= x 3 /= x"   
1C12   CD 5F 09               CALL   printStr   
1C15   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C24   21 02 00               LD   HL,2   
1C27   CD AD 08               CALL   prtdec   
1C2A   CD 5F 09               CALL   printStr   
1C2D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C3A   E1                     POP   hl   
1C3B   E5                     PUSH   hl   
1C3C   CD AD 08               CALL   prtdec   
1C3F   E1                     POP   hl   
1C40   CD 5F 09               CALL   printStr   
1C43   20 28 23 00            .CSTR   " (#"   
1C47   CD F5 08               CALL   prthex   
1C4A   CD 5F 09               CALL   printStr   
1C4D   29 0D 0A 00            .CSTR   ")\r\n"   
1C51   76                     HALT      
1C52   00                     .CSTR      
1C53                EXPECTM_0_2142S43:      
1C53   E1                     POP   HL   
1C54                          ;*Macro unroll:  test "7 3 / _", 1
1C54   31 80 3C               LD   SP,STACK   
1C57   CD 66 09               CALL   init   
1C5A   CD 20 3B               CALL   execStr   
1C5D   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1C65                          ;*Macro unroll:  expect "7 3 / _",1
1C65   E1                     POP   HL   
1C66   E5                     PUSH   HL   
1C67   11 01 00               LD   DE,1   
1C6A   B7                     OR   A   
1C6B   ED 52                  SBC   HL,DE   
1C6D   7D                     LD   A,L   
1C6E   B4                     OR   H   
1C6F   28 52                  JR   Z,expectM_0_2143S43   
1C71   CD 5F 09               CALL   printStr   
1C74   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1C82   CD 5F 09               CALL   printStr   
1C85   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C94   21 01 00               LD   HL,1   
1C97   CD AD 08               CALL   prtdec   
1C9A   CD 5F 09               CALL   printStr   
1C9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CAA   E1                     POP   hl   
1CAB   E5                     PUSH   hl   
1CAC   CD AD 08               CALL   prtdec   
1CAF   E1                     POP   hl   
1CB0   CD 5F 09               CALL   printStr   
1CB3   20 28 23 00            .CSTR   " (#"   
1CB7   CD F5 08               CALL   prthex   
1CBA   CD 5F 09               CALL   printStr   
1CBD   29 0D 0A 00            .CSTR   ")\r\n"   
1CC1   76                     HALT      
1CC2   00                     .CSTR      
1CC3                EXPECTM_0_2143S43:      
1CC3   E1                     POP   HL   
1CC4                          ;*Macro unroll:  test "7 3 /", 2
1CC4   31 80 3C               LD   SP,STACK   
1CC7   CD 66 09               CALL   init   
1CCA   CD 20 3B               CALL   execStr   
1CCD   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1CD3                          ;*Macro unroll:  expect "7 3 /",2
1CD3   E1                     POP   HL   
1CD4   E5                     PUSH   HL   
1CD5   11 02 00               LD   DE,2   
1CD8   B7                     OR   A   
1CD9   ED 52                  SBC   HL,DE   
1CDB   7D                     LD   A,L   
1CDC   B4                     OR   H   
1CDD   28 50                  JR   Z,expectM_0_2144S43   
1CDF   CD 5F 09               CALL   printStr   
1CE2   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1CEE   CD 5F 09               CALL   printStr   
1CF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D00   21 02 00               LD   HL,2   
1D03   CD AD 08               CALL   prtdec   
1D06   CD 5F 09               CALL   printStr   
1D09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D16   E1                     POP   hl   
1D17   E5                     PUSH   hl   
1D18   CD AD 08               CALL   prtdec   
1D1B   E1                     POP   hl   
1D1C   CD 5F 09               CALL   printStr   
1D1F   20 28 23 00            .CSTR   " (#"   
1D23   CD F5 08               CALL   prthex   
1D26   CD 5F 09               CALL   printStr   
1D29   29 0D 0A 00            .CSTR   ")\r\n"   
1D2D   76                     HALT      
1D2E   00                     .CSTR      
1D2F                EXPECTM_0_2144S43:      
1D2F   E1                     POP   HL   
1D30                          ;*Macro unroll:  test "2 3 ==", FALSE
1D30   31 80 3C               LD   SP,STACK   
1D33   CD 66 09               CALL   init   
1D36   CD 20 3B               CALL   execStr   
1D39   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1D40                          ;*Macro unroll:  expect "2 3 ==",FALSE
1D40   E1                     POP   HL   
1D41   E5                     PUSH   HL   
1D42   11 00 00               LD   DE,FALSE   
1D45   B7                     OR   A   
1D46   ED 52                  SBC   HL,DE   
1D48   7D                     LD   A,L   
1D49   B4                     OR   H   
1D4A   28 51                  JR   Z,expectM_0_2145S43   
1D4C   CD 5F 09               CALL   printStr   
1D4F   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1D5C   CD 5F 09               CALL   printStr   
1D5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D6E   21 00 00               LD   HL,FALSE   
1D71   CD AD 08               CALL   prtdec   
1D74   CD 5F 09               CALL   printStr   
1D77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D84   E1                     POP   hl   
1D85   E5                     PUSH   hl   
1D86   CD AD 08               CALL   prtdec   
1D89   E1                     POP   hl   
1D8A   CD 5F 09               CALL   printStr   
1D8D   20 28 23 00            .CSTR   " (#"   
1D91   CD F5 08               CALL   prthex   
1D94   CD 5F 09               CALL   printStr   
1D97   29 0D 0A 00            .CSTR   ")\r\n"   
1D9B   76                     HALT      
1D9C   00                     .CSTR      
1D9D                EXPECTM_0_2145S43:      
1D9D   E1                     POP   HL   
1D9E                          ;*Macro unroll:  test "3 3 ==", TRUE
1D9E   31 80 3C               LD   SP,STACK   
1DA1   CD 66 09               CALL   init   
1DA4   CD 20 3B               CALL   execStr   
1DA7   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1DAE                          ;*Macro unroll:  expect "3 3 ==",TRUE
1DAE   E1                     POP   HL   
1DAF   E5                     PUSH   HL   
1DB0   11 FF FF               LD   DE,TRUE   
1DB3   B7                     OR   A   
1DB4   ED 52                  SBC   HL,DE   
1DB6   7D                     LD   A,L   
1DB7   B4                     OR   H   
1DB8   28 51                  JR   Z,expectM_0_2146S43   
1DBA   CD 5F 09               CALL   printStr   
1DBD   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1DCA   CD 5F 09               CALL   printStr   
1DCD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DDC   21 FF FF               LD   HL,TRUE   
1DDF   CD AD 08               CALL   prtdec   
1DE2   CD 5F 09               CALL   printStr   
1DE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DF2   E1                     POP   hl   
1DF3   E5                     PUSH   hl   
1DF4   CD AD 08               CALL   prtdec   
1DF7   E1                     POP   hl   
1DF8   CD 5F 09               CALL   printStr   
1DFB   20 28 23 00            .CSTR   " (#"   
1DFF   CD F5 08               CALL   prthex   
1E02   CD 5F 09               CALL   printStr   
1E05   29 0D 0A 00            .CSTR   ")\r\n"   
1E09   76                     HALT      
1E0A   00                     .CSTR      
1E0B                EXPECTM_0_2146S43:      
1E0B   E1                     POP   HL   
1E0C                          ;*Macro unroll:  test "1 2 <", TRUE
1E0C   31 80 3C               LD   SP,STACK   
1E0F   CD 66 09               CALL   init   
1E12   CD 20 3B               CALL   execStr   
1E15   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1E1B                          ;*Macro unroll:  expect "1 2 <",TRUE
1E1B   E1                     POP   HL   
1E1C   E5                     PUSH   HL   
1E1D   11 FF FF               LD   DE,TRUE   
1E20   B7                     OR   A   
1E21   ED 52                  SBC   HL,DE   
1E23   7D                     LD   A,L   
1E24   B4                     OR   H   
1E25   28 50                  JR   Z,expectM_0_2147S43   
1E27   CD 5F 09               CALL   printStr   
1E2A   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1E36   CD 5F 09               CALL   printStr   
1E39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E48   21 FF FF               LD   HL,TRUE   
1E4B   CD AD 08               CALL   prtdec   
1E4E   CD 5F 09               CALL   printStr   
1E51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E5E   E1                     POP   hl   
1E5F   E5                     PUSH   hl   
1E60   CD AD 08               CALL   prtdec   
1E63   E1                     POP   hl   
1E64   CD 5F 09               CALL   printStr   
1E67   20 28 23 00            .CSTR   " (#"   
1E6B   CD F5 08               CALL   prthex   
1E6E   CD 5F 09               CALL   printStr   
1E71   29 0D 0A 00            .CSTR   ")\r\n"   
1E75   76                     HALT      
1E76   00                     .CSTR      
1E77                EXPECTM_0_2147S43:      
1E77   E1                     POP   HL   
1E78                          ;*Macro unroll:  test "2 1 <", FALSE
1E78   31 80 3C               LD   SP,STACK   
1E7B   CD 66 09               CALL   init   
1E7E   CD 20 3B               CALL   execStr   
1E81   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1E87                          ;*Macro unroll:  expect "2 1 <",FALSE
1E87   E1                     POP   HL   
1E88   E5                     PUSH   HL   
1E89   11 00 00               LD   DE,FALSE   
1E8C   B7                     OR   A   
1E8D   ED 52                  SBC   HL,DE   
1E8F   7D                     LD   A,L   
1E90   B4                     OR   H   
1E91   28 50                  JR   Z,expectM_0_2148S43   
1E93   CD 5F 09               CALL   printStr   
1E96   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1EA2   CD 5F 09               CALL   printStr   
1EA5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EB4   21 00 00               LD   HL,FALSE   
1EB7   CD AD 08               CALL   prtdec   
1EBA   CD 5F 09               CALL   printStr   
1EBD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ECA   E1                     POP   hl   
1ECB   E5                     PUSH   hl   
1ECC   CD AD 08               CALL   prtdec   
1ECF   E1                     POP   hl   
1ED0   CD 5F 09               CALL   printStr   
1ED3   20 28 23 00            .CSTR   " (#"   
1ED7   CD F5 08               CALL   prthex   
1EDA   CD 5F 09               CALL   printStr   
1EDD   29 0D 0A 00            .CSTR   ")\r\n"   
1EE1   76                     HALT      
1EE2   00                     .CSTR      
1EE3                EXPECTM_0_2148S43:      
1EE3   E1                     POP   HL   
1EE4                          ;*Macro unroll:  test "2 3 <", TRUE
1EE4   31 80 3C               LD   SP,STACK   
1EE7   CD 66 09               CALL   init   
1EEA   CD 20 3B               CALL   execStr   
1EED   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1EF3                          ;*Macro unroll:  expect "2 3 <",TRUE
1EF3   E1                     POP   HL   
1EF4   E5                     PUSH   HL   
1EF5   11 FF FF               LD   DE,TRUE   
1EF8   B7                     OR   A   
1EF9   ED 52                  SBC   HL,DE   
1EFB   7D                     LD   A,L   
1EFC   B4                     OR   H   
1EFD   28 50                  JR   Z,expectM_0_2149S43   
1EFF   CD 5F 09               CALL   printStr   
1F02   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1F0E   CD 5F 09               CALL   printStr   
1F11   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F20   21 FF FF               LD   HL,TRUE   
1F23   CD AD 08               CALL   prtdec   
1F26   CD 5F 09               CALL   printStr   
1F29   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F36   E1                     POP   hl   
1F37   E5                     PUSH   hl   
1F38   CD AD 08               CALL   prtdec   
1F3B   E1                     POP   hl   
1F3C   CD 5F 09               CALL   printStr   
1F3F   20 28 23 00            .CSTR   " (#"   
1F43   CD F5 08               CALL   prthex   
1F46   CD 5F 09               CALL   printStr   
1F49   29 0D 0A 00            .CSTR   ")\r\n"   
1F4D   76                     HALT      
1F4E   00                     .CSTR      
1F4F                EXPECTM_0_2149S43:      
1F4F   E1                     POP   HL   
1F50                          ;*Macro unroll:  test "3 3 <", FALSE
1F50   31 80 3C               LD   SP,STACK   
1F53   CD 66 09               CALL   init   
1F56   CD 20 3B               CALL   execStr   
1F59   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1F5F                          ;*Macro unroll:  expect "3 3 <",FALSE
1F5F   E1                     POP   HL   
1F60   E5                     PUSH   HL   
1F61   11 00 00               LD   DE,FALSE   
1F64   B7                     OR   A   
1F65   ED 52                  SBC   HL,DE   
1F67   7D                     LD   A,L   
1F68   B4                     OR   H   
1F69   28 50                  JR   Z,expectM_0_2150S43   
1F6B   CD 5F 09               CALL   printStr   
1F6E   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1F7A   CD 5F 09               CALL   printStr   
1F7D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F8C   21 00 00               LD   HL,FALSE   
1F8F   CD AD 08               CALL   prtdec   
1F92   CD 5F 09               CALL   printStr   
1F95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FA2   E1                     POP   hl   
1FA3   E5                     PUSH   hl   
1FA4   CD AD 08               CALL   prtdec   
1FA7   E1                     POP   hl   
1FA8   CD 5F 09               CALL   printStr   
1FAB   20 28 23 00            .CSTR   " (#"   
1FAF   CD F5 08               CALL   prthex   
1FB2   CD 5F 09               CALL   printStr   
1FB5   29 0D 0A 00            .CSTR   ")\r\n"   
1FB9   76                     HALT      
1FBA   00                     .CSTR      
1FBB                EXPECTM_0_2150S43:      
1FBB   E1                     POP   HL   
1FBC                          ;*Macro unroll:  test "1 2 >", FALSE
1FBC   31 80 3C               LD   SP,STACK   
1FBF   CD 66 09               CALL   init   
1FC2   CD 20 3B               CALL   execStr   
1FC5   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1FCB                          ;*Macro unroll:  expect "1 2 >",FALSE
1FCB   E1                     POP   HL   
1FCC   E5                     PUSH   HL   
1FCD   11 00 00               LD   DE,FALSE   
1FD0   B7                     OR   A   
1FD1   ED 52                  SBC   HL,DE   
1FD3   7D                     LD   A,L   
1FD4   B4                     OR   H   
1FD5   28 50                  JR   Z,expectM_0_2151S43   
1FD7   CD 5F 09               CALL   printStr   
1FDA   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1FE6   CD 5F 09               CALL   printStr   
1FE9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FF8   21 00 00               LD   HL,FALSE   
1FFB   CD AD 08               CALL   prtdec   
1FFE   CD 5F 09               CALL   printStr   
2001   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
200E   E1                     POP   hl   
200F   E5                     PUSH   hl   
2010   CD AD 08               CALL   prtdec   
2013   E1                     POP   hl   
2014   CD 5F 09               CALL   printStr   
2017   20 28 23 00            .CSTR   " (#"   
201B   CD F5 08               CALL   prthex   
201E   CD 5F 09               CALL   printStr   
2021   29 0D 0A 00            .CSTR   ")\r\n"   
2025   76                     HALT      
2026   00                     .CSTR      
2027                EXPECTM_0_2151S43:      
2027   E1                     POP   HL   
2028                          ;*Macro unroll:  test "2 1 >", TRUE
2028   31 80 3C               LD   SP,STACK   
202B   CD 66 09               CALL   init   
202E   CD 20 3B               CALL   execStr   
2031   32 20 31 20 3E 00      .CSTR   "2 1 >"   
2037                          ;*Macro unroll:  expect "2 1 >",TRUE
2037   E1                     POP   HL   
2038   E5                     PUSH   HL   
2039   11 FF FF               LD   DE,TRUE   
203C   B7                     OR   A   
203D   ED 52                  SBC   HL,DE   
203F   7D                     LD   A,L   
2040   B4                     OR   H   
2041   28 50                  JR   Z,expectM_0_2152S43   
2043   CD 5F 09               CALL   printStr   
2046   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2052   CD 5F 09               CALL   printStr   
2055   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2064   21 FF FF               LD   HL,TRUE   
2067   CD AD 08               CALL   prtdec   
206A   CD 5F 09               CALL   printStr   
206D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
207A   E1                     POP   hl   
207B   E5                     PUSH   hl   
207C   CD AD 08               CALL   prtdec   
207F   E1                     POP   hl   
2080   CD 5F 09               CALL   printStr   
2083   20 28 23 00            .CSTR   " (#"   
2087   CD F5 08               CALL   prthex   
208A   CD 5F 09               CALL   printStr   
208D   29 0D 0A 00            .CSTR   ")\r\n"   
2091   76                     HALT      
2092   00                     .CSTR      
2093                EXPECTM_0_2152S43:      
2093   E1                     POP   HL   
2094                          ;*Macro unroll:  test "3 3 >", FALSE
2094   31 80 3C               LD   SP,STACK   
2097   CD 66 09               CALL   init   
209A   CD 20 3B               CALL   execStr   
209D   33 20 33 20 3E 00      .CSTR   "3 3 >"   
20A3                          ;*Macro unroll:  expect "3 3 >",FALSE
20A3   E1                     POP   HL   
20A4   E5                     PUSH   HL   
20A5   11 00 00               LD   DE,FALSE   
20A8   B7                     OR   A   
20A9   ED 52                  SBC   HL,DE   
20AB   7D                     LD   A,L   
20AC   B4                     OR   H   
20AD   28 50                  JR   Z,expectM_0_2153S43   
20AF   CD 5F 09               CALL   printStr   
20B2   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
20BE   CD 5F 09               CALL   printStr   
20C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20D0   21 00 00               LD   HL,FALSE   
20D3   CD AD 08               CALL   prtdec   
20D6   CD 5F 09               CALL   printStr   
20D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20E6   E1                     POP   hl   
20E7   E5                     PUSH   hl   
20E8   CD AD 08               CALL   prtdec   
20EB   E1                     POP   hl   
20EC   CD 5F 09               CALL   printStr   
20EF   20 28 23 00            .CSTR   " (#"   
20F3   CD F5 08               CALL   prthex   
20F6   CD 5F 09               CALL   printStr   
20F9   29 0D 0A 00            .CSTR   ")\r\n"   
20FD   76                     HALT      
20FE   00                     .CSTR      
20FF                EXPECTM_0_2153S43:      
20FF   E1                     POP   HL   
2100                          ;*Macro unroll:  test "4 3 >", TRUE
2100   31 80 3C               LD   SP,STACK   
2103   CD 66 09               CALL   init   
2106   CD 20 3B               CALL   execStr   
2109   34 20 33 20 3E 00      .CSTR   "4 3 >"   
210F                          ;*Macro unroll:  expect "4 3 >",TRUE
210F   E1                     POP   HL   
2110   E5                     PUSH   HL   
2111   11 FF FF               LD   DE,TRUE   
2114   B7                     OR   A   
2115   ED 52                  SBC   HL,DE   
2117   7D                     LD   A,L   
2118   B4                     OR   H   
2119   28 50                  JR   Z,expectM_0_2154S43   
211B   CD 5F 09               CALL   printStr   
211E   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
212A   CD 5F 09               CALL   printStr   
212D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
213C   21 FF FF               LD   HL,TRUE   
213F   CD AD 08               CALL   prtdec   
2142   CD 5F 09               CALL   printStr   
2145   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2152   E1                     POP   hl   
2153   E5                     PUSH   hl   
2154   CD AD 08               CALL   prtdec   
2157   E1                     POP   hl   
2158   CD 5F 09               CALL   printStr   
215B   20 28 23 00            .CSTR   " (#"   
215F   CD F5 08               CALL   prthex   
2162   CD 5F 09               CALL   printStr   
2165   29 0D 0A 00            .CSTR   ")\r\n"   
2169   76                     HALT      
216A   00                     .CSTR      
216B                EXPECTM_0_2154S43:      
216B   E1                     POP   HL   
216C                          ;*Macro unroll:  test "2 2 <=", TRUE
216C   31 80 3C               LD   SP,STACK   
216F   CD 66 09               CALL   init   
2172   CD 20 3B               CALL   execStr   
2175   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
217C                          ;*Macro unroll:  expect "2 2 <=",TRUE
217C   E1                     POP   HL   
217D   E5                     PUSH   HL   
217E   11 FF FF               LD   DE,TRUE   
2181   B7                     OR   A   
2182   ED 52                  SBC   HL,DE   
2184   7D                     LD   A,L   
2185   B4                     OR   H   
2186   28 51                  JR   Z,expectM_0_2155S43   
2188   CD 5F 09               CALL   printStr   
218B   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2198   CD 5F 09               CALL   printStr   
219B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21AA   21 FF FF               LD   HL,TRUE   
21AD   CD AD 08               CALL   prtdec   
21B0   CD 5F 09               CALL   printStr   
21B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21C0   E1                     POP   hl   
21C1   E5                     PUSH   hl   
21C2   CD AD 08               CALL   prtdec   
21C5   E1                     POP   hl   
21C6   CD 5F 09               CALL   printStr   
21C9   20 28 23 00            .CSTR   " (#"   
21CD   CD F5 08               CALL   prthex   
21D0   CD 5F 09               CALL   printStr   
21D3   29 0D 0A 00            .CSTR   ")\r\n"   
21D7   76                     HALT      
21D8   00                     .CSTR      
21D9                EXPECTM_0_2155S43:      
21D9   E1                     POP   HL   
21DA                          ;*Macro unroll:  test "2 2 >=", TRUE
21DA   31 80 3C               LD   SP,STACK   
21DD   CD 66 09               CALL   init   
21E0   CD 20 3B               CALL   execStr   
21E3   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
21EA                          ;*Macro unroll:  expect "2 2 >=",TRUE
21EA   E1                     POP   HL   
21EB   E5                     PUSH   HL   
21EC   11 FF FF               LD   DE,TRUE   
21EF   B7                     OR   A   
21F0   ED 52                  SBC   HL,DE   
21F2   7D                     LD   A,L   
21F3   B4                     OR   H   
21F4   28 51                  JR   Z,expectM_0_2156S43   
21F6   CD 5F 09               CALL   printStr   
21F9   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2206   CD 5F 09               CALL   printStr   
2209   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2218   21 FF FF               LD   HL,TRUE   
221B   CD AD 08               CALL   prtdec   
221E   CD 5F 09               CALL   printStr   
2221   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
222E   E1                     POP   hl   
222F   E5                     PUSH   hl   
2230   CD AD 08               CALL   prtdec   
2233   E1                     POP   hl   
2234   CD 5F 09               CALL   printStr   
2237   20 28 23 00            .CSTR   " (#"   
223B   CD F5 08               CALL   prthex   
223E   CD 5F 09               CALL   printStr   
2241   29 0D 0A 00            .CSTR   ")\r\n"   
2245   76                     HALT      
2246   00                     .CSTR      
2247                EXPECTM_0_2156S43:      
2247   E1                     POP   HL   
2248                          ;*Macro unroll:  test "3 1 <<", 6
2248   31 80 3C               LD   SP,STACK   
224B   CD 66 09               CALL   init   
224E   CD 20 3B               CALL   execStr   
2251   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
2258                          ;*Macro unroll:  expect "3 1 <<",6
2258   E1                     POP   HL   
2259   E5                     PUSH   HL   
225A   11 06 00               LD   DE,6   
225D   B7                     OR   A   
225E   ED 52                  SBC   HL,DE   
2260   7D                     LD   A,L   
2261   B4                     OR   H   
2262   28 51                  JR   Z,expectM_0_2157S43   
2264   CD 5F 09               CALL   printStr   
2267   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2274   CD 5F 09               CALL   printStr   
2277   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2286   21 06 00               LD   HL,6   
2289   CD AD 08               CALL   prtdec   
228C   CD 5F 09               CALL   printStr   
228F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
229C   E1                     POP   hl   
229D   E5                     PUSH   hl   
229E   CD AD 08               CALL   prtdec   
22A1   E1                     POP   hl   
22A2   CD 5F 09               CALL   printStr   
22A5   20 28 23 00            .CSTR   " (#"   
22A9   CD F5 08               CALL   prthex   
22AC   CD 5F 09               CALL   printStr   
22AF   29 0D 0A 00            .CSTR   ")\r\n"   
22B3   76                     HALT      
22B4   00                     .CSTR      
22B5                EXPECTM_0_2157S43:      
22B5   E1                     POP   HL   
22B6                          ;*Macro unroll:  test "10 1 >>", 5
22B6   31 80 3C               LD   SP,STACK   
22B9   CD 66 09               CALL   init   
22BC   CD 20 3B               CALL   execStr   
22BF   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
22C7                          ;*Macro unroll:  expect "10 1 >>",5
22C7   E1                     POP   HL   
22C8   E5                     PUSH   HL   
22C9   11 05 00               LD   DE,5   
22CC   B7                     OR   A   
22CD   ED 52                  SBC   HL,DE   
22CF   7D                     LD   A,L   
22D0   B4                     OR   H   
22D1   28 52                  JR   Z,expectM_0_2158S43   
22D3   CD 5F 09               CALL   printStr   
22D6   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
22E4   CD 5F 09               CALL   printStr   
22E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22F6   21 05 00               LD   HL,5   
22F9   CD AD 08               CALL   prtdec   
22FC   CD 5F 09               CALL   printStr   
22FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
230C   E1                     POP   hl   
230D   E5                     PUSH   hl   
230E   CD AD 08               CALL   prtdec   
2311   E1                     POP   hl   
2312   CD 5F 09               CALL   printStr   
2315   20 28 23 00            .CSTR   " (#"   
2319   CD F5 08               CALL   prthex   
231C   CD 5F 09               CALL   printStr   
231F   29 0D 0A 00            .CSTR   ")\r\n"   
2323   76                     HALT      
2324   00                     .CSTR      
2325                EXPECTM_0_2158S43:      
2325   E1                     POP   HL   
2326                          ;*Macro unroll:  test "1 x = x", 1
2326   31 80 3C               LD   SP,STACK   
2329   CD 66 09               CALL   init   
232C   CD 20 3B               CALL   execStr   
232F   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
2337                          ;*Macro unroll:  expect "1 x = x",1
2337   E1                     POP   HL   
2338   E5                     PUSH   HL   
2339   11 01 00               LD   DE,1   
233C   B7                     OR   A   
233D   ED 52                  SBC   HL,DE   
233F   7D                     LD   A,L   
2340   B4                     OR   H   
2341   28 52                  JR   Z,expectM_0_2159S43   
2343   CD 5F 09               CALL   printStr   
2346   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2354   CD 5F 09               CALL   printStr   
2357   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2366   21 01 00               LD   HL,1   
2369   CD AD 08               CALL   prtdec   
236C   CD 5F 09               CALL   printStr   
236F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
237C   E1                     POP   hl   
237D   E5                     PUSH   hl   
237E   CD AD 08               CALL   prtdec   
2381   E1                     POP   hl   
2382   CD 5F 09               CALL   printStr   
2385   20 28 23 00            .CSTR   " (#"   
2389   CD F5 08               CALL   prthex   
238C   CD 5F 09               CALL   printStr   
238F   29 0D 0A 00            .CSTR   ")\r\n"   
2393   76                     HALT      
2394   00                     .CSTR      
2395                EXPECTM_0_2159S43:      
2395   E1                     POP   HL   
2396                          ;*Macro unroll:  test "1{}:", 1
2396   31 80 3C               LD   SP,STACK   
2399   CD 66 09               CALL   init   
239C   CD 20 3B               CALL   execStr   
239F   31 7B 7D 3A 00         .CSTR   "1{}:"   
23A4                          ;*Macro unroll:  expect "1{}:",1
23A4   E1                     POP   HL   
23A5   E5                     PUSH   HL   
23A6   11 01 00               LD   DE,1   
23A9   B7                     OR   A   
23AA   ED 52                  SBC   HL,DE   
23AC   7D                     LD   A,L   
23AD   B4                     OR   H   
23AE   28 4F                  JR   Z,expectM_0_2160S43   
23B0   CD 5F 09               CALL   printStr   
23B3   43 6F 64 65 3A 20 31 7B 7D 3A 00 .CSTR   "Code: ","1{}:"   
23BE   CD 5F 09               CALL   printStr   
23C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D0   21 01 00               LD   HL,1   
23D3   CD AD 08               CALL   prtdec   
23D6   CD 5F 09               CALL   printStr   
23D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23E6   E1                     POP   hl   
23E7   E5                     PUSH   hl   
23E8   CD AD 08               CALL   prtdec   
23EB   E1                     POP   hl   
23EC   CD 5F 09               CALL   printStr   
23EF   20 28 23 00            .CSTR   " (#"   
23F3   CD F5 08               CALL   prthex   
23F6   CD 5F 09               CALL   printStr   
23F9   29 0D 0A 00            .CSTR   ")\r\n"   
23FD   76                     HALT      
23FE   00                     .CSTR      
23FF                EXPECTM_0_2160S43:      
23FF   E1                     POP   HL   
2400                          ;*Macro unroll:  test "{1}:", 1
2400   31 80 3C               LD   SP,STACK   
2403   CD 66 09               CALL   init   
2406   CD 20 3B               CALL   execStr   
2409   7B 31 7D 3A 00         .CSTR   "{1}:"   
240E                          ;*Macro unroll:  expect "{1}:",1
240E   E1                     POP   HL   
240F   E5                     PUSH   HL   
2410   11 01 00               LD   DE,1   
2413   B7                     OR   A   
2414   ED 52                  SBC   HL,DE   
2416   7D                     LD   A,L   
2417   B4                     OR   H   
2418   28 4F                  JR   Z,expectM_0_2161S43   
241A   CD 5F 09               CALL   printStr   
241D   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
2428   CD 5F 09               CALL   printStr   
242B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
243A   21 01 00               LD   HL,1   
243D   CD AD 08               CALL   prtdec   
2440   CD 5F 09               CALL   printStr   
2443   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2450   E1                     POP   hl   
2451   E5                     PUSH   hl   
2452   CD AD 08               CALL   prtdec   
2455   E1                     POP   hl   
2456   CD 5F 09               CALL   printStr   
2459   20 28 23 00            .CSTR   " (#"   
245D   CD F5 08               CALL   prthex   
2460   CD 5F 09               CALL   printStr   
2463   29 0D 0A 00            .CSTR   ")\r\n"   
2467   76                     HALT      
2468   00                     .CSTR      
2469                EXPECTM_0_2161S43:      
2469   E1                     POP   HL   
246A                          ;*Macro unroll:  test "{{1}:}:", 1
246A   31 80 3C               LD   SP,STACK   
246D   CD 66 09               CALL   init   
2470   CD 20 3B               CALL   execStr   
2473   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
247B                          ;*Macro unroll:  expect "{{1}:}:",1
247B   E1                     POP   HL   
247C   E5                     PUSH   HL   
247D   11 01 00               LD   DE,1   
2480   B7                     OR   A   
2481   ED 52                  SBC   HL,DE   
2483   7D                     LD   A,L   
2484   B4                     OR   H   
2485   28 52                  JR   Z,expectM_0_2162S43   
2487   CD 5F 09               CALL   printStr   
248A   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
2498   CD 5F 09               CALL   printStr   
249B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24AA   21 01 00               LD   HL,1   
24AD   CD AD 08               CALL   prtdec   
24B0   CD 5F 09               CALL   printStr   
24B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24C0   E1                     POP   hl   
24C1   E5                     PUSH   hl   
24C2   CD AD 08               CALL   prtdec   
24C5   E1                     POP   hl   
24C6   CD 5F 09               CALL   printStr   
24C9   20 28 23 00            .CSTR   " (#"   
24CD   CD F5 08               CALL   prthex   
24D0   CD 5F 09               CALL   printStr   
24D3   29 0D 0A 00            .CSTR   ")\r\n"   
24D7   76                     HALT      
24D8   00                     .CSTR      
24D9                EXPECTM_0_2162S43:      
24D9   E1                     POP   HL   
24DA                          ;*Macro unroll:  test "{{{1}:}:}:", 1
24DA   31 80 3C               LD   SP,STACK   
24DD   CD 66 09               CALL   init   
24E0   CD 20 3B               CALL   execStr   
24E3   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
24EE                          ;*Macro unroll:  expect "{{{1}:}:}:",1
24EE   E1                     POP   HL   
24EF   E5                     PUSH   HL   
24F0   11 01 00               LD   DE,1   
24F3   B7                     OR   A   
24F4   ED 52                  SBC   HL,DE   
24F6   7D                     LD   A,L   
24F7   B4                     OR   H   
24F8   28 55                  JR   Z,expectM_0_2163S43   
24FA   CD 5F 09               CALL   printStr   
24FD   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
250E   CD 5F 09               CALL   printStr   
2511   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2520   21 01 00               LD   HL,1   
2523   CD AD 08               CALL   prtdec   
2526   CD 5F 09               CALL   printStr   
2529   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2536   E1                     POP   hl   
2537   E5                     PUSH   hl   
2538   CD AD 08               CALL   prtdec   
253B   E1                     POP   hl   
253C   CD 5F 09               CALL   printStr   
253F   20 28 23 00            .CSTR   " (#"   
2543   CD F5 08               CALL   prthex   
2546   CD 5F 09               CALL   printStr   
2549   29 0D 0A 00            .CSTR   ")\r\n"   
254D   76                     HALT      
254E   00                     .CSTR      
254F                EXPECTM_0_2163S43:      
254F   E1                     POP   HL   
2550                          ;*Macro unroll:  test "5 \\F {10} ?", 5
2550   31 80 3C               LD   SP,STACK   
2553   CD 66 09               CALL   init   
2556   CD 20 3B               CALL   execStr   
2559   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
2565                          ;*Macro unroll:  expect "5 \\F {10} ?",5
2565   E1                     POP   HL   
2566   E5                     PUSH   HL   
2567   11 05 00               LD   DE,5   
256A   B7                     OR   A   
256B   ED 52                  SBC   HL,DE   
256D   7D                     LD   A,L   
256E   B4                     OR   H   
256F   28 56                  JR   Z,expectM_0_2164S43   
2571   CD 5F 09               CALL   printStr   
2574   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
2586   CD 5F 09               CALL   printStr   
2589   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2598   21 05 00               LD   HL,5   
259B   CD AD 08               CALL   prtdec   
259E   CD 5F 09               CALL   printStr   
25A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25AE   E1                     POP   hl   
25AF   E5                     PUSH   hl   
25B0   CD AD 08               CALL   prtdec   
25B3   E1                     POP   hl   
25B4   CD 5F 09               CALL   printStr   
25B7   20 28 23 00            .CSTR   " (#"   
25BB   CD F5 08               CALL   prthex   
25BE   CD 5F 09               CALL   printStr   
25C1   29 0D 0A 00            .CSTR   ")\r\n"   
25C5   76                     HALT      
25C6   00                     .CSTR      
25C7                EXPECTM_0_2164S43:      
25C7   E1                     POP   HL   
25C8                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
25C8   31 80 3C               LD   SP,STACK   
25CB   CD 66 09               CALL   init   
25CE   CD 20 3B               CALL   execStr   
25D1   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
25DF                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
25DF   E1                     POP   HL   
25E0   E5                     PUSH   HL   
25E1   11 0F 00               LD   DE,15   
25E4   B7                     OR   A   
25E5   ED 52                  SBC   HL,DE   
25E7   7D                     LD   A,L   
25E8   B4                     OR   H   
25E9   28 58                  JR   Z,expectM_0_2165S43   
25EB   CD 5F 09               CALL   printStr   
25EE   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
2602   CD 5F 09               CALL   printStr   
2605   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2614   21 0F 00               LD   HL,15   
2617   CD AD 08               CALL   prtdec   
261A   CD 5F 09               CALL   printStr   
261D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
262A   E1                     POP   hl   
262B   E5                     PUSH   hl   
262C   CD AD 08               CALL   prtdec   
262F   E1                     POP   hl   
2630   CD 5F 09               CALL   printStr   
2633   20 28 23 00            .CSTR   " (#"   
2637   CD F5 08               CALL   prthex   
263A   CD 5F 09               CALL   printStr   
263D   29 0D 0A 00            .CSTR   ")\r\n"   
2641   76                     HALT      
2642   00                     .CSTR      
2643                EXPECTM_0_2165S43:      
2643   E1                     POP   HL   
2644                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
2644   31 80 3C               LD   SP,STACK   
2647   CD 66 09               CALL   init   
264A   CD 20 3B               CALL   execStr   
264D   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
2661                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
2661   E1                     POP   HL   
2662   E5                     PUSH   HL   
2663   11 15 00               LD   DE,21   
2666   B7                     OR   A   
2667   ED 52                  SBC   HL,DE   
2669   7D                     LD   A,L   
266A   B4                     OR   H   
266B   28 5E                  JR   Z,expectM_0_2166S43   
266D   CD 5F 09               CALL   printStr   
2670   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
268A   CD 5F 09               CALL   printStr   
268D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
269C   21 15 00               LD   HL,21   
269F   CD AD 08               CALL   prtdec   
26A2   CD 5F 09               CALL   printStr   
26A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26B2   E1                     POP   hl   
26B3   E5                     PUSH   hl   
26B4   CD AD 08               CALL   prtdec   
26B7   E1                     POP   hl   
26B8   CD 5F 09               CALL   printStr   
26BB   20 28 23 00            .CSTR   " (#"   
26BF   CD F5 08               CALL   prthex   
26C2   CD 5F 09               CALL   printStr   
26C5   29 0D 0A 00            .CSTR   ")\r\n"   
26C9   76                     HALT      
26CA   00                     .CSTR      
26CB                EXPECTM_0_2166S43:      
26CB   E1                     POP   HL   
26CC                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
26CC   31 80 3C               LD   SP,STACK   
26CF   CD 66 09               CALL   init   
26D2   CD 20 3B               CALL   execStr   
26D5   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
26E9                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
26E9   E1                     POP   HL   
26EA   E5                     PUSH   HL   
26EB   11 0B 00               LD   DE,11   
26EE   B7                     OR   A   
26EF   ED 52                  SBC   HL,DE   
26F1   7D                     LD   A,L   
26F2   B4                     OR   H   
26F3   28 5E                  JR   Z,expectM_0_2167S43   
26F5   CD 5F 09               CALL   printStr   
26F8   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
2712   CD 5F 09               CALL   printStr   
2715   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2724   21 0B 00               LD   HL,11   
2727   CD AD 08               CALL   prtdec   
272A   CD 5F 09               CALL   printStr   
272D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
273A   E1                     POP   hl   
273B   E5                     PUSH   hl   
273C   CD AD 08               CALL   prtdec   
273F   E1                     POP   hl   
2740   CD 5F 09               CALL   printStr   
2743   20 28 23 00            .CSTR   " (#"   
2747   CD F5 08               CALL   prthex   
274A   CD 5F 09               CALL   printStr   
274D   29 0D 0A 00            .CSTR   ")\r\n"   
2751   76                     HALT      
2752   00                     .CSTR      
2753                EXPECTM_0_2167S43:      
2753   E1                     POP   HL   
2754                          ;*Macro unroll:  test "() -2%", $0000
2754   31 80 3C               LD   SP,STACK   
2757   CD 66 09               CALL   init   
275A   CD 20 3B               CALL   execStr   
275D   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
2764                          ;*Macro unroll:  expect "() -2%",$0000
2764   E1                     POP   HL   
2765   E5                     PUSH   HL   
2766   11 00 00               LD   DE,$0000   
2769   B7                     OR   A   
276A   ED 52                  SBC   HL,DE   
276C   7D                     LD   A,L   
276D   B4                     OR   H   
276E   28 51                  JR   Z,expectM_0_2168S43   
2770   CD 5F 09               CALL   printStr   
2773   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
2780   CD 5F 09               CALL   printStr   
2783   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2792   21 00 00               LD   HL,$0000   
2795   CD AD 08               CALL   prtdec   
2798   CD 5F 09               CALL   printStr   
279B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27A8   E1                     POP   hl   
27A9   E5                     PUSH   hl   
27AA   CD AD 08               CALL   prtdec   
27AD   E1                     POP   hl   
27AE   CD 5F 09               CALL   printStr   
27B1   20 28 23 00            .CSTR   " (#"   
27B5   CD F5 08               CALL   prthex   
27B8   CD 5F 09               CALL   printStr   
27BB   29 0D 0A 00            .CSTR   ")\r\n"   
27BF   76                     HALT      
27C0   00                     .CSTR      
27C1                EXPECTM_0_2168S43:      
27C1   E1                     POP   HL   
27C2                          ;*Macro unroll:  test "(a) -1%", $0001
27C2   31 80 3C               LD   SP,STACK   
27C5   CD 66 09               CALL   init   
27C8   CD 20 3B               CALL   execStr   
27CB   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
27D3                          ;*Macro unroll:  expect "(a) -1%",$0001
27D3   E1                     POP   HL   
27D4   E5                     PUSH   HL   
27D5   11 01 00               LD   DE,$0001   
27D8   B7                     OR   A   
27D9   ED 52                  SBC   HL,DE   
27DB   7D                     LD   A,L   
27DC   B4                     OR   H   
27DD   28 52                  JR   Z,expectM_0_2169S43   
27DF   CD 5F 09               CALL   printStr   
27E2   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
27F0   CD 5F 09               CALL   printStr   
27F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2802   21 01 00               LD   HL,$0001   
2805   CD AD 08               CALL   prtdec   
2808   CD 5F 09               CALL   printStr   
280B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2818   E1                     POP   hl   
2819   E5                     PUSH   hl   
281A   CD AD 08               CALL   prtdec   
281D   E1                     POP   hl   
281E   CD 5F 09               CALL   printStr   
2821   20 28 23 00            .CSTR   " (#"   
2825   CD F5 08               CALL   prthex   
2828   CD 5F 09               CALL   printStr   
282B   29 0D 0A 00            .CSTR   ")\r\n"   
282F   76                     HALT      
2830   00                     .CSTR      
2831                EXPECTM_0_2169S43:      
2831   E1                     POP   HL   
2832                          ;*Macro unroll:  test "(a:) -1%", $0001
2832   31 80 3C               LD   SP,STACK   
2835   CD 66 09               CALL   init   
2838   CD 20 3B               CALL   execStr   
283B   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
2844                          ;*Macro unroll:  expect "(a:) -1%",$0001
2844   E1                     POP   HL   
2845   E5                     PUSH   HL   
2846   11 01 00               LD   DE,$0001   
2849   B7                     OR   A   
284A   ED 52                  SBC   HL,DE   
284C   7D                     LD   A,L   
284D   B4                     OR   H   
284E   28 53                  JR   Z,expectM_0_2170S43   
2850   CD 5F 09               CALL   printStr   
2853   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
2862   CD 5F 09               CALL   printStr   
2865   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2874   21 01 00               LD   HL,$0001   
2877   CD AD 08               CALL   prtdec   
287A   CD 5F 09               CALL   printStr   
287D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
288A   E1                     POP   hl   
288B   E5                     PUSH   hl   
288C   CD AD 08               CALL   prtdec   
288F   E1                     POP   hl   
2890   CD 5F 09               CALL   printStr   
2893   20 28 23 00            .CSTR   " (#"   
2897   CD F5 08               CALL   prthex   
289A   CD 5F 09               CALL   printStr   
289D   29 0D 0A 00            .CSTR   ")\r\n"   
28A1   76                     HALT      
28A2   00                     .CSTR      
28A3                EXPECTM_0_2170S43:      
28A3   E1                     POP   HL   
28A4                          ;*Macro unroll:  test "(a:b) -1%", $0102
28A4   31 80 3C               LD   SP,STACK   
28A7   CD 66 09               CALL   init   
28AA   CD 20 3B               CALL   execStr   
28AD   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
28B7                          ;*Macro unroll:  expect "(a:b) -1%",$0102
28B7   E1                     POP   HL   
28B8   E5                     PUSH   HL   
28B9   11 02 01               LD   DE,$0102   
28BC   B7                     OR   A   
28BD   ED 52                  SBC   HL,DE   
28BF   7D                     LD   A,L   
28C0   B4                     OR   H   
28C1   28 54                  JR   Z,expectM_0_2171S43   
28C3   CD 5F 09               CALL   printStr   
28C6   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
28D6   CD 5F 09               CALL   printStr   
28D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28E8   21 02 01               LD   HL,$0102   
28EB   CD AD 08               CALL   prtdec   
28EE   CD 5F 09               CALL   printStr   
28F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28FE   E1                     POP   hl   
28FF   E5                     PUSH   hl   
2900   CD AD 08               CALL   prtdec   
2903   E1                     POP   hl   
2904   CD 5F 09               CALL   printStr   
2907   20 28 23 00            .CSTR   " (#"   
290B   CD F5 08               CALL   prthex   
290E   CD 5F 09               CALL   printStr   
2911   29 0D 0A 00            .CSTR   ")\r\n"   
2915   76                     HALT      
2916   00                     .CSTR      
2917                EXPECTM_0_2171S43:      
2917   E1                     POP   HL   
2918                          ;*Macro unroll:  test "(:b) -1%", $0101
2918   31 80 3C               LD   SP,STACK   
291B   CD 66 09               CALL   init   
291E   CD 20 3B               CALL   execStr   
2921   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
292A                          ;*Macro unroll:  expect "(:b) -1%",$0101
292A   E1                     POP   HL   
292B   E5                     PUSH   HL   
292C   11 01 01               LD   DE,$0101   
292F   B7                     OR   A   
2930   ED 52                  SBC   HL,DE   
2932   7D                     LD   A,L   
2933   B4                     OR   H   
2934   28 53                  JR   Z,expectM_0_2172S43   
2936   CD 5F 09               CALL   printStr   
2939   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
2948   CD 5F 09               CALL   printStr   
294B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
295A   21 01 01               LD   HL,$0101   
295D   CD AD 08               CALL   prtdec   
2960   CD 5F 09               CALL   printStr   
2963   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2970   E1                     POP   hl   
2971   E5                     PUSH   hl   
2972   CD AD 08               CALL   prtdec   
2975   E1                     POP   hl   
2976   CD 5F 09               CALL   printStr   
2979   20 28 23 00            .CSTR   " (#"   
297D   CD F5 08               CALL   prthex   
2980   CD 5F 09               CALL   printStr   
2983   29 0D 0A 00            .CSTR   ")\r\n"   
2987   76                     HALT      
2988   00                     .CSTR      
2989                EXPECTM_0_2172S43:      
2989   E1                     POP   HL   
298A                          ;*Macro unroll:  test "() {2} \\f:", 2
298A   31 80 3C               LD   SP,STACK   
298D   CD 66 09               CALL   init   
2990   CD 20 3B               CALL   execStr   
2993   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
299E                          ;*Macro unroll:  expect "() {2} \\f:",2
299E   E1                     POP   HL   
299F   E5                     PUSH   HL   
29A0   11 02 00               LD   DE,2   
29A3   B7                     OR   A   
29A4   ED 52                  SBC   HL,DE   
29A6   7D                     LD   A,L   
29A7   B4                     OR   H   
29A8   28 55                  JR   Z,expectM_0_2173S43   
29AA   CD 5F 09               CALL   printStr   
29AD   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
29BE   CD 5F 09               CALL   printStr   
29C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29D0   21 02 00               LD   HL,2   
29D3   CD AD 08               CALL   prtdec   
29D6   CD 5F 09               CALL   printStr   
29D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29E6   E1                     POP   hl   
29E7   E5                     PUSH   hl   
29E8   CD AD 08               CALL   prtdec   
29EB   E1                     POP   hl   
29EC   CD 5F 09               CALL   printStr   
29EF   20 28 23 00            .CSTR   " (#"   
29F3   CD F5 08               CALL   prthex   
29F6   CD 5F 09               CALL   printStr   
29F9   29 0D 0A 00            .CSTR   ")\r\n"   
29FD   76                     HALT      
29FE   00                     .CSTR      
29FF                EXPECTM_0_2173S43:      
29FF   E1                     POP   HL   
2A00                          ;*Macro unroll:  test "(a) {2} \\f:", 2
2A00   31 80 3C               LD   SP,STACK   
2A03   CD 66 09               CALL   init   
2A06   CD 20 3B               CALL   execStr   
2A09   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
2A15                          ;*Macro unroll:  expect "(a) {2} \\f:",2
2A15   E1                     POP   HL   
2A16   E5                     PUSH   HL   
2A17   11 02 00               LD   DE,2   
2A1A   B7                     OR   A   
2A1B   ED 52                  SBC   HL,DE   
2A1D   7D                     LD   A,L   
2A1E   B4                     OR   H   
2A1F   28 56                  JR   Z,expectM_0_2174S43   
2A21   CD 5F 09               CALL   printStr   
2A24   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
2A36   CD 5F 09               CALL   printStr   
2A39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A48   21 02 00               LD   HL,2   
2A4B   CD AD 08               CALL   prtdec   
2A4E   CD 5F 09               CALL   printStr   
2A51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A5E   E1                     POP   hl   
2A5F   E5                     PUSH   hl   
2A60   CD AD 08               CALL   prtdec   
2A63   E1                     POP   hl   
2A64   CD 5F 09               CALL   printStr   
2A67   20 28 23 00            .CSTR   " (#"   
2A6B   CD F5 08               CALL   prthex   
2A6E   CD 5F 09               CALL   printStr   
2A71   29 0D 0A 00            .CSTR   ")\r\n"   
2A75   76                     HALT      
2A76   00                     .CSTR      
2A77                EXPECTM_0_2174S43:      
2A77   E1                     POP   HL   
2A78                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
2A78   31 80 3C               LD   SP,STACK   
2A7B   CD 66 09               CALL   init   
2A7E   CD 20 3B               CALL   execStr   
2A81   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
2A90                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
2A90   E1                     POP   HL   
2A91   E5                     PUSH   HL   
2A92   11 05 00               LD   DE,5   
2A95   B7                     OR   A   
2A96   ED 52                  SBC   HL,DE   
2A98   7D                     LD   A,L   
2A99   B4                     OR   H   
2A9A   28 59                  JR   Z,expectM_0_2175S43   
2A9C   CD 5F 09               CALL   printStr   
2A9F   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
2AB4   CD 5F 09               CALL   printStr   
2AB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AC6   21 05 00               LD   HL,5   
2AC9   CD AD 08               CALL   prtdec   
2ACC   CD 5F 09               CALL   printStr   
2ACF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ADC   E1                     POP   hl   
2ADD   E5                     PUSH   hl   
2ADE   CD AD 08               CALL   prtdec   
2AE1   E1                     POP   hl   
2AE2   CD 5F 09               CALL   printStr   
2AE5   20 28 23 00            .CSTR   " (#"   
2AE9   CD F5 08               CALL   prthex   
2AEC   CD 5F 09               CALL   printStr   
2AEF   29 0D 0A 00            .CSTR   ")\r\n"   
2AF3   76                     HALT      
2AF4   00                     .CSTR      
2AF5                EXPECTM_0_2175S43:      
2AF5   E1                     POP   HL   
2AF6                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
2AF6   31 80 3C               LD   SP,STACK   
2AF9   CD 66 09               CALL   init   
2AFC   CD 20 3B               CALL   execStr   
2AFF   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
2B10                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
2B10   E1                     POP   HL   
2B11   E5                     PUSH   HL   
2B12   11 05 00               LD   DE,5   
2B15   B7                     OR   A   
2B16   ED 52                  SBC   HL,DE   
2B18   7D                     LD   A,L   
2B19   B4                     OR   H   
2B1A   28 5B                  JR   Z,expectM_0_2176S43   
2B1C   CD 5F 09               CALL   printStr   
2B1F   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
2B36   CD 5F 09               CALL   printStr   
2B39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B48   21 05 00               LD   HL,5   
2B4B   CD AD 08               CALL   prtdec   
2B4E   CD 5F 09               CALL   printStr   
2B51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B5E   E1                     POP   hl   
2B5F   E5                     PUSH   hl   
2B60   CD AD 08               CALL   prtdec   
2B63   E1                     POP   hl   
2B64   CD 5F 09               CALL   printStr   
2B67   20 28 23 00            .CSTR   " (#"   
2B6B   CD F5 08               CALL   prthex   
2B6E   CD 5F 09               CALL   printStr   
2B71   29 0D 0A 00            .CSTR   ")\r\n"   
2B75   76                     HALT      
2B76   00                     .CSTR      
2B77                EXPECTM_0_2176S43:      
2B77   E1                     POP   HL   
2B78                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
2B78   31 80 3C               LD   SP,STACK   
2B7B   CD 66 09               CALL   init   
2B7E   CD 20 3B               CALL   execStr   
2B81   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
2B90                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
2B90   E1                     POP   HL   
2B91   E5                     PUSH   HL   
2B92   11 02 00               LD   DE,2   
2B95   B7                     OR   A   
2B96   ED 52                  SBC   HL,DE   
2B98   7D                     LD   A,L   
2B99   B4                     OR   H   
2B9A   28 59                  JR   Z,expectM_0_2177S43   
2B9C   CD 5F 09               CALL   printStr   
2B9F   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
2BB4   CD 5F 09               CALL   printStr   
2BB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BC6   21 02 00               LD   HL,2   
2BC9   CD AD 08               CALL   prtdec   
2BCC   CD 5F 09               CALL   printStr   
2BCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BDC   E1                     POP   hl   
2BDD   E5                     PUSH   hl   
2BDE   CD AD 08               CALL   prtdec   
2BE1   E1                     POP   hl   
2BE2   CD 5F 09               CALL   printStr   
2BE5   20 28 23 00            .CSTR   " (#"   
2BE9   CD F5 08               CALL   prthex   
2BEC   CD 5F 09               CALL   printStr   
2BEF   29 0D 0A 00            .CSTR   ")\r\n"   
2BF3   76                     HALT      
2BF4   00                     .CSTR      
2BF5                EXPECTM_0_2177S43:      
2BF5   E1                     POP   HL   
2BF6                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
2BF6   31 80 3C               LD   SP,STACK   
2BF9   CD 66 09               CALL   init   
2BFC   CD 20 3B               CALL   execStr   
2BFF   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
2C13                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
2C13   E1                     POP   HL   
2C14   E5                     PUSH   HL   
2C15   11 05 00               LD   DE,5   
2C18   B7                     OR   A   
2C19   ED 52                  SBC   HL,DE   
2C1B   7D                     LD   A,L   
2C1C   B4                     OR   H   
2C1D   28 5E                  JR   Z,expectM_0_2178S43   
2C1F   CD 5F 09               CALL   printStr   
2C22   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
2C3C   CD 5F 09               CALL   printStr   
2C3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C4E   21 05 00               LD   HL,5   
2C51   CD AD 08               CALL   prtdec   
2C54   CD 5F 09               CALL   printStr   
2C57   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C64   E1                     POP   hl   
2C65   E5                     PUSH   hl   
2C66   CD AD 08               CALL   prtdec   
2C69   E1                     POP   hl   
2C6A   CD 5F 09               CALL   printStr   
2C6D   20 28 23 00            .CSTR   " (#"   
2C71   CD F5 08               CALL   prthex   
2C74   CD 5F 09               CALL   printStr   
2C77   29 0D 0A 00            .CSTR   ")\r\n"   
2C7B   76                     HALT      
2C7C   00                     .CSTR      
2C7D                EXPECTM_0_2178S43:      
2C7D   E1                     POP   HL   
2C7E                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
2C7E   31 80 3C               LD   SP,STACK   
2C81   CD 66 09               CALL   init   
2C84   CD 20 3B               CALL   execStr   
2C87   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
2C9C                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
2C9C   E1                     POP   HL   
2C9D   E5                     PUSH   HL   
2C9E   11 01 00               LD   DE,1   
2CA1   B7                     OR   A   
2CA2   ED 52                  SBC   HL,DE   
2CA4   7D                     LD   A,L   
2CA5   B4                     OR   H   
2CA6   28 5F                  JR   Z,expectM_0_2179S43   
2CA8   CD 5F 09               CALL   printStr   
2CAB   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
2CC6   CD 5F 09               CALL   printStr   
2CC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CD8   21 01 00               LD   HL,1   
2CDB   CD AD 08               CALL   prtdec   
2CDE   CD 5F 09               CALL   printStr   
2CE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CEE   E1                     POP   hl   
2CEF   E5                     PUSH   hl   
2CF0   CD AD 08               CALL   prtdec   
2CF3   E1                     POP   hl   
2CF4   CD 5F 09               CALL   printStr   
2CF7   20 28 23 00            .CSTR   " (#"   
2CFB   CD F5 08               CALL   prthex   
2CFE   CD 5F 09               CALL   printStr   
2D01   29 0D 0A 00            .CSTR   ")\r\n"   
2D05   76                     HALT      
2D06   00                     .CSTR      
2D07                EXPECTM_0_2179S43:      
2D07   E1                     POP   HL   
2D08                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
2D08   31 80 3C               LD   SP,STACK   
2D0B   CD 66 09               CALL   init   
2D0E   CD 20 3B               CALL   execStr   
2D11   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
2D29                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
2D29   E1                     POP   HL   
2D2A   E5                     PUSH   HL   
2D2B   11 07 00               LD   DE,7   
2D2E   B7                     OR   A   
2D2F   ED 52                  SBC   HL,DE   
2D31   7D                     LD   A,L   
2D32   B4                     OR   H   
2D33   28 62                  JR   Z,expectM_0_2180S43   
2D35   CD 5F 09               CALL   printStr   
2D38   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
2D56   CD 5F 09               CALL   printStr   
2D59   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D68   21 07 00               LD   HL,7   
2D6B   CD AD 08               CALL   prtdec   
2D6E   CD 5F 09               CALL   printStr   
2D71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D7E   E1                     POP   hl   
2D7F   E5                     PUSH   hl   
2D80   CD AD 08               CALL   prtdec   
2D83   E1                     POP   hl   
2D84   CD 5F 09               CALL   printStr   
2D87   20 28 23 00            .CSTR   " (#"   
2D8B   CD F5 08               CALL   prthex   
2D8E   CD 5F 09               CALL   printStr   
2D91   29 0D 0A 00            .CSTR   ")\r\n"   
2D95   76                     HALT      
2D96   00                     .CSTR      
2D97                EXPECTM_0_2180S43:      
2D97   E1                     POP   HL   
2D98                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
2D98   31 80 3C               LD   SP,STACK   
2D9B   CD 66 09               CALL   init   
2D9E   CD 20 3B               CALL   execStr   
2DA1   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
2DBB                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
2DBB   E1                     POP   HL   
2DBC   E5                     PUSH   HL   
2DBD   11 06 00               LD   DE,6   
2DC0   B7                     OR   A   
2DC1   ED 52                  SBC   HL,DE   
2DC3   7D                     LD   A,L   
2DC4   B4                     OR   H   
2DC5   28 64                  JR   Z,expectM_0_2181S43   
2DC7   CD 5F 09               CALL   printStr   
2DCA   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
2DEA   CD 5F 09               CALL   printStr   
2DED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DFC   21 06 00               LD   HL,6   
2DFF   CD AD 08               CALL   prtdec   
2E02   CD 5F 09               CALL   printStr   
2E05   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E12   E1                     POP   hl   
2E13   E5                     PUSH   hl   
2E14   CD AD 08               CALL   prtdec   
2E17   E1                     POP   hl   
2E18   CD 5F 09               CALL   printStr   
2E1B   20 28 23 00            .CSTR   " (#"   
2E1F   CD F5 08               CALL   prthex   
2E22   CD 5F 09               CALL   printStr   
2E25   29 0D 0A 00            .CSTR   ")\r\n"   
2E29   76                     HALT      
2E2A   00                     .CSTR      
2E2B                EXPECTM_0_2181S43:      
2E2B   E1                     POP   HL   
2E2C                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
2E2C   31 80 3C               LD   SP,STACK   
2E2F   CD 66 09               CALL   init   
2E32   CD 20 3B               CALL   execStr   
2E35   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
2E48                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
2E48   E1                     POP   HL   
2E49   E5                     PUSH   HL   
2E4A   11 02 00               LD   DE,2   
2E4D   B7                     OR   A   
2E4E   ED 52                  SBC   HL,DE   
2E50   7D                     LD   A,L   
2E51   B4                     OR   H   
2E52   28 5D                  JR   Z,expectM_0_2182S43   
2E54   CD 5F 09               CALL   printStr   
2E57   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
2E70   CD 5F 09               CALL   printStr   
2E73   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E82   21 02 00               LD   HL,2   
2E85   CD AD 08               CALL   prtdec   
2E88   CD 5F 09               CALL   printStr   
2E8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E98   E1                     POP   hl   
2E99   E5                     PUSH   hl   
2E9A   CD AD 08               CALL   prtdec   
2E9D   E1                     POP   hl   
2E9E   CD 5F 09               CALL   printStr   
2EA1   20 28 23 00            .CSTR   " (#"   
2EA5   CD F5 08               CALL   prthex   
2EA8   CD 5F 09               CALL   printStr   
2EAB   29 0D 0A 00            .CSTR   ")\r\n"   
2EAF   76                     HALT      
2EB0   00                     .CSTR      
2EB1                EXPECTM_0_2182S43:      
2EB1   E1                     POP   HL   
2EB2                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
2EB2   31 80 3C               LD   SP,STACK   
2EB5   CD 66 09               CALL   init   
2EB8   CD 20 3B               CALL   execStr   
2EBB   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
2ED1                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
2ED1   E1                     POP   HL   
2ED2   E5                     PUSH   HL   
2ED3   11 01 00               LD   DE,1   
2ED6   B7                     OR   A   
2ED7   ED 52                  SBC   HL,DE   
2ED9   7D                     LD   A,L   
2EDA   B4                     OR   H   
2EDB   28 60                  JR   Z,expectM_0_2183S43   
2EDD   CD 5F 09               CALL   printStr   
2EE0   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
2EFC   CD 5F 09               CALL   printStr   
2EFF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F0E   21 01 00               LD   HL,1   
2F11   CD AD 08               CALL   prtdec   
2F14   CD 5F 09               CALL   printStr   
2F17   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F24   E1                     POP   hl   
2F25   E5                     PUSH   hl   
2F26   CD AD 08               CALL   prtdec   
2F29   E1                     POP   hl   
2F2A   CD 5F 09               CALL   printStr   
2F2D   20 28 23 00            .CSTR   " (#"   
2F31   CD F5 08               CALL   prthex   
2F34   CD 5F 09               CALL   printStr   
2F37   29 0D 0A 00            .CSTR   ")\r\n"   
2F3B   76                     HALT      
2F3C   00                     .CSTR      
2F3D                EXPECTM_0_2183S43:      
2F3D   E1                     POP   HL   
2F3E                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
2F3E   31 80 3C               LD   SP,STACK   
2F41   CD 66 09               CALL   init   
2F44   CD 20 3B               CALL   execStr   
2F47   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2F5E                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2F5E   E1                     POP   HL   
2F5F   E5                     PUSH   HL   
2F60   11 02 00               LD   DE,2   
2F63   B7                     OR   A   
2F64   ED 52                  SBC   HL,DE   
2F66   7D                     LD   A,L   
2F67   B4                     OR   H   
2F68   28 61                  JR   Z,expectM_0_2184S43   
2F6A   CD 5F 09               CALL   printStr   
2F6D   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2F8A   CD 5F 09               CALL   printStr   
2F8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F9C   21 02 00               LD   HL,2   
2F9F   CD AD 08               CALL   prtdec   
2FA2   CD 5F 09               CALL   printStr   
2FA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FB2   E1                     POP   hl   
2FB3   E5                     PUSH   hl   
2FB4   CD AD 08               CALL   prtdec   
2FB7   E1                     POP   hl   
2FB8   CD 5F 09               CALL   printStr   
2FBB   20 28 23 00            .CSTR   " (#"   
2FBF   CD F5 08               CALL   prthex   
2FC2   CD 5F 09               CALL   printStr   
2FC5   29 0D 0A 00            .CSTR   ")\r\n"   
2FC9   76                     HALT      
2FCA   00                     .CSTR      
2FCB                EXPECTM_0_2184S43:      
2FCB   E1                     POP   HL   
2FCC                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
2FCC   31 80 3C               LD   SP,STACK   
2FCF   CD 66 09               CALL   init   
2FD2   CD 20 3B               CALL   execStr   
2FD5   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
2FED                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
2FED   E1                     POP   HL   
2FEE   E5                     PUSH   HL   
2FEF   11 02 00               LD   DE,2   
2FF2   B7                     OR   A   
2FF3   ED 52                  SBC   HL,DE   
2FF5   7D                     LD   A,L   
2FF6   B4                     OR   H   
2FF7   28 62                  JR   Z,expectM_0_2185S43   
2FF9   CD 5F 09               CALL   printStr   
2FFC   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
301A   CD 5F 09               CALL   printStr   
301D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
302C   21 02 00               LD   HL,2   
302F   CD AD 08               CALL   prtdec   
3032   CD 5F 09               CALL   printStr   
3035   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3042   E1                     POP   hl   
3043   E5                     PUSH   hl   
3044   CD AD 08               CALL   prtdec   
3047   E1                     POP   hl   
3048   CD 5F 09               CALL   printStr   
304B   20 28 23 00            .CSTR   " (#"   
304F   CD F5 08               CALL   prthex   
3052   CD 5F 09               CALL   printStr   
3055   29 0D 0A 00            .CSTR   ")\r\n"   
3059   76                     HALT      
305A   00                     .CSTR      
305B                EXPECTM_0_2185S43:      
305B   E1                     POP   HL   
305C                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
305C   31 80 3C               LD   SP,STACK   
305F   CD 66 09               CALL   init   
3062   CD 20 3B               CALL   execStr   
3065   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
307C                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
307C   E1                     POP   HL   
307D   E5                     PUSH   HL   
307E   11 02 00               LD   DE,2   
3081   B7                     OR   A   
3082   ED 52                  SBC   HL,DE   
3084   7D                     LD   A,L   
3085   B4                     OR   H   
3086   28 61                  JR   Z,expectM_0_2186S43   
3088   CD 5F 09               CALL   printStr   
308B   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
30A8   CD 5F 09               CALL   printStr   
30AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30BA   21 02 00               LD   HL,2   
30BD   CD AD 08               CALL   prtdec   
30C0   CD 5F 09               CALL   printStr   
30C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30D0   E1                     POP   hl   
30D1   E5                     PUSH   hl   
30D2   CD AD 08               CALL   prtdec   
30D5   E1                     POP   hl   
30D6   CD 5F 09               CALL   printStr   
30D9   20 28 23 00            .CSTR   " (#"   
30DD   CD F5 08               CALL   prthex   
30E0   CD 5F 09               CALL   printStr   
30E3   29 0D 0A 00            .CSTR   ")\r\n"   
30E7   76                     HALT      
30E8   00                     .CSTR      
30E9                EXPECTM_0_2186S43:      
30E9   E1                     POP   HL   
30EA                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
30EA   31 80 3C               LD   SP,STACK   
30ED   CD 66 09               CALL   init   
30F0   CD 20 3B               CALL   execStr   
30F3   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
3111                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
3111   E1                     POP   HL   
3112   E5                     PUSH   HL   
3113   11 05 00               LD   DE,5   
3116   B7                     OR   A   
3117   ED 52                  SBC   HL,DE   
3119   7D                     LD   A,L   
311A   B4                     OR   H   
311B   28 68                  JR   Z,expectM_0_2187S43   
311D   CD 5F 09               CALL   printStr   
3120   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
3144   CD 5F 09               CALL   printStr   
3147   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3156   21 05 00               LD   HL,5   
3159   CD AD 08               CALL   prtdec   
315C   CD 5F 09               CALL   printStr   
315F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
316C   E1                     POP   hl   
316D   E5                     PUSH   hl   
316E   CD AD 08               CALL   prtdec   
3171   E1                     POP   hl   
3172   CD 5F 09               CALL   printStr   
3175   20 28 23 00            .CSTR   " (#"   
3179   CD F5 08               CALL   prthex   
317C   CD 5F 09               CALL   printStr   
317F   29 0D 0A 00            .CSTR   ")\r\n"   
3183   76                     HALT      
3184   00                     .CSTR      
3185                EXPECTM_0_2187S43:      
3185   E1                     POP   HL   
3186                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
3186   31 80 3C               LD   SP,STACK   
3189   CD 66 09               CALL   init   
318C   CD 20 3B               CALL   execStr   
318F   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
31A4                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
31A4   E1                     POP   HL   
31A5   E5                     PUSH   HL   
31A6   11 02 00               LD   DE,2   
31A9   B7                     OR   A   
31AA   ED 52                  SBC   HL,DE   
31AC   7D                     LD   A,L   
31AD   B4                     OR   H   
31AE   28 5F                  JR   Z,expectM_0_2188S43   
31B0   CD 5F 09               CALL   printStr   
31B3   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
31CE   CD 5F 09               CALL   printStr   
31D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31E0   21 02 00               LD   HL,2   
31E3   CD AD 08               CALL   prtdec   
31E6   CD 5F 09               CALL   printStr   
31E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31F6   E1                     POP   hl   
31F7   E5                     PUSH   hl   
31F8   CD AD 08               CALL   prtdec   
31FB   E1                     POP   hl   
31FC   CD 5F 09               CALL   printStr   
31FF   20 28 23 00            .CSTR   " (#"   
3203   CD F5 08               CALL   prthex   
3206   CD 5F 09               CALL   printStr   
3209   29 0D 0A 00            .CSTR   ")\r\n"   
320D   76                     HALT      
320E   00                     .CSTR      
320F                EXPECTM_0_2188S43:      
320F   E1                     POP   HL   
3210                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
3210   31 80 3C               LD   SP,STACK   
3213   CD 66 09               CALL   init   
3216   CD 20 3B               CALL   execStr   
3219   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
3234                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
3234   E1                     POP   HL   
3235   E5                     PUSH   HL   
3236   11 64 00               LD   DE,100   
3239   B7                     OR   A   
323A   ED 52                  SBC   HL,DE   
323C   7D                     LD   A,L   
323D   B4                     OR   H   
323E   28 65                  JR   Z,expectM_0_2189S43   
3240   CD 5F 09               CALL   printStr   
3243   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
3264   CD 5F 09               CALL   printStr   
3267   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3276   21 64 00               LD   HL,100   
3279   CD AD 08               CALL   prtdec   
327C   CD 5F 09               CALL   printStr   
327F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
328C   E1                     POP   hl   
328D   E5                     PUSH   hl   
328E   CD AD 08               CALL   prtdec   
3291   E1                     POP   hl   
3292   CD 5F 09               CALL   printStr   
3295   20 28 23 00            .CSTR   " (#"   
3299   CD F5 08               CALL   prthex   
329C   CD 5F 09               CALL   printStr   
329F   29 0D 0A 00            .CSTR   ")\r\n"   
32A3   76                     HALT      
32A4   00                     .CSTR      
32A5                EXPECTM_0_2189S43:      
32A5   E1                     POP   HL   
32A6                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
32A6   31 80 3C               LD   SP,STACK   
32A9   CD 66 09               CALL   init   
32AC   CD 20 3B               CALL   execStr   
32AF   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
32CB                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
32CB   E1                     POP   HL   
32CC   E5                     PUSH   HL   
32CD   11 01 00               LD   DE,1   
32D0   B7                     OR   A   
32D1   ED 52                  SBC   HL,DE   
32D3   7D                     LD   A,L   
32D4   B4                     OR   H   
32D5   28 66                  JR   Z,expectM_0_2190S43   
32D7   CD 5F 09               CALL   printStr   
32DA   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
32FC   CD 5F 09               CALL   printStr   
32FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
330E   21 01 00               LD   HL,1   
3311   CD AD 08               CALL   prtdec   
3314   CD 5F 09               CALL   printStr   
3317   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3324   E1                     POP   hl   
3325   E5                     PUSH   hl   
3326   CD AD 08               CALL   prtdec   
3329   E1                     POP   hl   
332A   CD 5F 09               CALL   printStr   
332D   20 28 23 00            .CSTR   " (#"   
3331   CD F5 08               CALL   prthex   
3334   CD 5F 09               CALL   printStr   
3337   29 0D 0A 00            .CSTR   ")\r\n"   
333B   76                     HALT      
333C   00                     .CSTR      
333D                EXPECTM_0_2190S43:      
333D   E1                     POP   HL   
333E                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
333E   31 80 3C               LD   SP,STACK   
3341   CD 66 09               CALL   init   
3344   CD 20 3B               CALL   execStr   
3347   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
3364                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
3364   E1                     POP   HL   
3365   E5                     PUSH   HL   
3366   11 02 00               LD   DE,2   
3369   B7                     OR   A   
336A   ED 52                  SBC   HL,DE   
336C   7D                     LD   A,L   
336D   B4                     OR   H   
336E   28 67                  JR   Z,expectM_0_2191S43   
3370   CD 5F 09               CALL   printStr   
3373   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
3396   CD 5F 09               CALL   printStr   
3399   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33A8   21 02 00               LD   HL,2   
33AB   CD AD 08               CALL   prtdec   
33AE   CD 5F 09               CALL   printStr   
33B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33BE   E1                     POP   hl   
33BF   E5                     PUSH   hl   
33C0   CD AD 08               CALL   prtdec   
33C3   E1                     POP   hl   
33C4   CD 5F 09               CALL   printStr   
33C7   20 28 23 00            .CSTR   " (#"   
33CB   CD F5 08               CALL   prthex   
33CE   CD 5F 09               CALL   printStr   
33D1   29 0D 0A 00            .CSTR   ")\r\n"   
33D5   76                     HALT      
33D6   00                     .CSTR      
33D7                EXPECTM_0_2191S43:      
33D7   E1                     POP   HL   
33D8                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
33D8   31 80 3C               LD   SP,STACK   
33DB   CD 66 09               CALL   init   
33DE   CD 20 3B               CALL   execStr   
33E1   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
3406                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
3406   E1                     POP   HL   
3407   E5                     PUSH   HL   
3408   11 0B 00               LD   DE,11   
340B   B7                     OR   A   
340C   ED 52                  SBC   HL,DE   
340E   7D                     LD   A,L   
340F   B4                     OR   H   
3410   28 6F                  JR   Z,expectM_0_2192S43   
3412   CD 5F 09               CALL   printStr   
3415   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
3440   CD 5F 09               CALL   printStr   
3443   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3452   21 0B 00               LD   HL,11   
3455   CD AD 08               CALL   prtdec   
3458   CD 5F 09               CALL   printStr   
345B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3468   E1                     POP   hl   
3469   E5                     PUSH   hl   
346A   CD AD 08               CALL   prtdec   
346D   E1                     POP   hl   
346E   CD 5F 09               CALL   printStr   
3471   20 28 23 00            .CSTR   " (#"   
3475   CD F5 08               CALL   prthex   
3478   CD 5F 09               CALL   printStr   
347B   29 0D 0A 00            .CSTR   ")\r\n"   
347F   76                     HALT      
3480   00                     .CSTR      
3481                EXPECTM_0_2192S43:      
3481   E1                     POP   HL   
3482                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
3482   31 80 3C               LD   SP,STACK   
3485   CD 66 09               CALL   init   
3488   CD 20 3B               CALL   execStr   
348B   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
34B0                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
34B0   E1                     POP   HL   
34B1   E5                     PUSH   HL   
34B2   11 15 00               LD   DE,21   
34B5   B7                     OR   A   
34B6   ED 52                  SBC   HL,DE   
34B8   7D                     LD   A,L   
34B9   B4                     OR   H   
34BA   28 6F                  JR   Z,expectM_0_2193S43   
34BC   CD 5F 09               CALL   printStr   
34BF   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
34EA   CD 5F 09               CALL   printStr   
34ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34FC   21 15 00               LD   HL,21   
34FF   CD AD 08               CALL   prtdec   
3502   CD 5F 09               CALL   printStr   
3505   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3512   E1                     POP   hl   
3513   E5                     PUSH   hl   
3514   CD AD 08               CALL   prtdec   
3517   E1                     POP   hl   
3518   CD 5F 09               CALL   printStr   
351B   20 28 23 00            .CSTR   " (#"   
351F   CD F5 08               CALL   prthex   
3522   CD 5F 09               CALL   printStr   
3525   29 0D 0A 00            .CSTR   ")\r\n"   
3529   76                     HALT      
352A   00                     .CSTR      
352B                EXPECTM_0_2193S43:      
352B   E1                     POP   HL   
352C                          ;*Macro unroll:  test "[10 20 30] 1%", 20
352C   31 80 3C               LD   SP,STACK   
352F   CD 66 09               CALL   init   
3532   CD 20 3B               CALL   execStr   
3535   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3543                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3543   E1                     POP   HL   
3544   E5                     PUSH   HL   
3545   11 14 00               LD   DE,20   
3548   B7                     OR   A   
3549   ED 52                  SBC   HL,DE   
354B   7D                     LD   A,L   
354C   B4                     OR   H   
354D   28 58                  JR   Z,expectM_0_2194S43   
354F   CD 5F 09               CALL   printStr   
3552   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
3566   CD 5F 09               CALL   printStr   
3569   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3578   21 14 00               LD   HL,20   
357B   CD AD 08               CALL   prtdec   
357E   CD 5F 09               CALL   printStr   
3581   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
358E   E1                     POP   hl   
358F   E5                     PUSH   hl   
3590   CD AD 08               CALL   prtdec   
3593   E1                     POP   hl   
3594   CD 5F 09               CALL   printStr   
3597   20 28 23 00            .CSTR   " (#"   
359B   CD F5 08               CALL   prthex   
359E   CD 5F 09               CALL   printStr   
35A1   29 0D 0A 00            .CSTR   ")\r\n"   
35A5   76                     HALT      
35A6   00                     .CSTR      
35A7                EXPECTM_0_2194S43:      
35A7   E1                     POP   HL   
35A8                          ;*Macro unroll:  test "\\b [1 2 3] 1%", 2
35A8   31 80 3C               LD   SP,STACK   
35AB   CD 66 09               CALL   init   
35AE   CD 20 3B               CALL   execStr   
35B1   5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "\\b [1 2 3] 1%"   
35BF                          ;*Macro unroll:  expect "\\b [1 2 3] 1%",2
35BF   E1                     POP   HL   
35C0   E5                     PUSH   HL   
35C1   11 02 00               LD   DE,2   
35C4   B7                     OR   A   
35C5   ED 52                  SBC   HL,DE   
35C7   7D                     LD   A,L   
35C8   B4                     OR   H   
35C9   28 58                  JR   Z,expectM_0_2195S43   
35CB   CD 5F 09               CALL   printStr   
35CE   43 6F 64 65 3A 20 5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","\\b [1 2 3] 1%"   
35E2   CD 5F 09               CALL   printStr   
35E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35F4   21 02 00               LD   HL,2   
35F7   CD AD 08               CALL   prtdec   
35FA   CD 5F 09               CALL   printStr   
35FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
360A   E1                     POP   hl   
360B   E5                     PUSH   hl   
360C   CD AD 08               CALL   prtdec   
360F   E1                     POP   hl   
3610   CD 5F 09               CALL   printStr   
3613   20 28 23 00            .CSTR   " (#"   
3617   CD F5 08               CALL   prthex   
361A   CD 5F 09               CALL   printStr   
361D   29 0D 0A 00            .CSTR   ")\r\n"   
3621   76                     HALT      
3622   00                     .CSTR      
3623                EXPECTM_0_2195S43:      
3623   E1                     POP   HL   
3624                          ;*Macro unroll:  test "\\b ['A' 'B' 'C'] 1%", 66
3624   31 80 3C               LD   SP,STACK   
3627   CD 66 09               CALL   init   
362A   CD 20 3B               CALL   execStr   
362D   5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "\\b ['A' 'B' 'C'] 1%"   
3641                          ;*Macro unroll:  expect "\\b ['A' 'B' 'C'] 1%",66
3641   E1                     POP   HL   
3642   E5                     PUSH   HL   
3643   11 42 00               LD   DE,66   
3646   B7                     OR   A   
3647   ED 52                  SBC   HL,DE   
3649   7D                     LD   A,L   
364A   B4                     OR   H   
364B   28 5E                  JR   Z,expectM_0_2196S43   
364D   CD 5F 09               CALL   printStr   
3650   43 6F 64 65 3A 20 5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","\\b ['A' 'B' 'C'] 1%"   
366A   CD 5F 09               CALL   printStr   
366D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
367C   21 42 00               LD   HL,66   
367F   CD AD 08               CALL   prtdec   
3682   CD 5F 09               CALL   printStr   
3685   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3692   E1                     POP   hl   
3693   E5                     PUSH   hl   
3694   CD AD 08               CALL   prtdec   
3697   E1                     POP   hl   
3698   CD 5F 09               CALL   printStr   
369B   20 28 23 00            .CSTR   " (#"   
369F   CD F5 08               CALL   prthex   
36A2   CD 5F 09               CALL   printStr   
36A5   29 0D 0A 00            .CSTR   ")\r\n"   
36A9   76                     HALT      
36AA   00                     .CSTR      
36AB                EXPECTM_0_2196S43:      
36AB   E1                     POP   HL   
36AC                          ;*Macro unroll:  test "0 [{10} {20} {30}] \\s", 10
36AC   31 80 3C               LD   SP,STACK   
36AF   CD 66 09               CALL   init   
36B2   CD 20 3B               CALL   execStr   
36B5   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "0 [{10} {20} {30}] \\s"   
36CB                          ;*Macro unroll:  expect "0 [{10} {20} {30}] \\s",10
36CB   E1                     POP   HL   
36CC   E5                     PUSH   HL   
36CD   11 0A 00               LD   DE,10   
36D0   B7                     OR   A   
36D1   ED 52                  SBC   HL,DE   
36D3   7D                     LD   A,L   
36D4   B4                     OR   H   
36D5   28 60                  JR   Z,expectM_0_2197S43   
36D7   CD 5F 09               CALL   printStr   
36DA   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] \\s"   
36F6   CD 5F 09               CALL   printStr   
36F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3708   21 0A 00               LD   HL,10   
370B   CD AD 08               CALL   prtdec   
370E   CD 5F 09               CALL   printStr   
3711   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
371E   E1                     POP   hl   
371F   E5                     PUSH   hl   
3720   CD AD 08               CALL   prtdec   
3723   E1                     POP   hl   
3724   CD 5F 09               CALL   printStr   
3727   20 28 23 00            .CSTR   " (#"   
372B   CD F5 08               CALL   prthex   
372E   CD 5F 09               CALL   printStr   
3731   29 0D 0A 00            .CSTR   ")\r\n"   
3735   76                     HALT      
3736   00                     .CSTR      
3737                EXPECTM_0_2197S43:      
3737   E1                     POP   HL   
3738                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:", 10
3738   31 80 3C               LD   SP,STACK   
373B   CD 66 09               CALL   init   
373E   CD 20 3B               CALL   execStr   
3741   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
3765                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:",10
3765   E1                     POP   HL   
3766   E5                     PUSH   HL   
3767   11 0A 00               LD   DE,10   
376A   B7                     OR   A   
376B   ED 52                  SBC   HL,DE   
376D   7D                     LD   A,L   
376E   B4                     OR   H   
376F   28 6E                  JR   Z,expectM_0_2198S43   
3771   CD 5F 09               CALL   printStr   
3774   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
379E   CD 5F 09               CALL   printStr   
37A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37B0   21 0A 00               LD   HL,10   
37B3   CD AD 08               CALL   prtdec   
37B6   CD 5F 09               CALL   printStr   
37B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37C6   E1                     POP   hl   
37C7   E5                     PUSH   hl   
37C8   CD AD 08               CALL   prtdec   
37CB   E1                     POP   hl   
37CC   CD 5F 09               CALL   printStr   
37CF   20 28 23 00            .CSTR   " (#"   
37D3   CD F5 08               CALL   prthex   
37D6   CD 5F 09               CALL   printStr   
37D9   29 0D 0A 00            .CSTR   ")\r\n"   
37DD   76                     HALT      
37DE   00                     .CSTR      
37DF                EXPECTM_0_2198S43:      
37DF   E1                     POP   HL   
37E0                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 10
37E0   31 80 3C               LD   SP,STACK   
37E3   CD 66 09               CALL   init   
37E6   CD 20 3B               CALL   execStr   
37E9   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
380F                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",10
380F   E1                     POP   HL   
3810   E5                     PUSH   HL   
3811   11 0A 00               LD   DE,10   
3814   B7                     OR   A   
3815   ED 52                  SBC   HL,DE   
3817   7D                     LD   A,L   
3818   B4                     OR   H   
3819   28 70                  JR   Z,expectM_0_2199S43   
381B   CD 5F 09               CALL   printStr   
381E   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
384A   CD 5F 09               CALL   printStr   
384D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
385C   21 0A 00               LD   HL,10   
385F   CD AD 08               CALL   prtdec   
3862   CD 5F 09               CALL   printStr   
3865   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3872   E1                     POP   hl   
3873   E5                     PUSH   hl   
3874   CD AD 08               CALL   prtdec   
3877   E1                     POP   hl   
3878   CD 5F 09               CALL   printStr   
387B   20 28 23 00            .CSTR   " (#"   
387F   CD F5 08               CALL   prthex   
3882   CD 5F 09               CALL   printStr   
3885   29 0D 0A 00            .CSTR   ")\r\n"   
3889   76                     HALT      
388A   00                     .CSTR      
388B                EXPECTM_0_2199S43:      
388B   E1                     POP   HL   
388C                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 20
388C   31 80 3C               LD   SP,STACK   
388F   CD 66 09               CALL   init   
3892   CD 20 3B               CALL   execStr   
3895   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
38BB                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",20
38BB   E1                     POP   HL   
38BC   E5                     PUSH   HL   
38BD   11 14 00               LD   DE,20   
38C0   B7                     OR   A   
38C1   ED 52                  SBC   HL,DE   
38C3   7D                     LD   A,L   
38C4   B4                     OR   H   
38C5   28 70                  JR   Z,expectM_0_2200S43   
38C7   CD 5F 09               CALL   printStr   
38CA   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
38F6   CD 5F 09               CALL   printStr   
38F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3908   21 14 00               LD   HL,20   
390B   CD AD 08               CALL   prtdec   
390E   CD 5F 09               CALL   printStr   
3911   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
391E   E1                     POP   hl   
391F   E5                     PUSH   hl   
3920   CD AD 08               CALL   prtdec   
3923   E1                     POP   hl   
3924   CD 5F 09               CALL   printStr   
3927   20 28 23 00            .CSTR   " (#"   
392B   CD F5 08               CALL   prthex   
392E   CD 5F 09               CALL   printStr   
3931   29 0D 0A 00            .CSTR   ")\r\n"   
3935   76                     HALT      
3936   00                     .CSTR      
3937                EXPECTM_0_2200S43:      
3937   E1                     POP   HL   
3938                          ;*Macro unroll:  test "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j ", 10
3938   31 80 3C               LD   SP,STACK   
393B   CD 66 09               CALL   init   
393E   CD 20 3B               CALL   execStr   
3941   30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 5C 78 20 69 20 31 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j "   
3969                          ;*Macro unroll:  expect "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j ",10
3969   E1                     POP   HL   
396A   E5                     PUSH   HL   
396B   11 0A 00               LD   DE,10   
396E   B7                     OR   A   
396F   ED 52                  SBC   HL,DE   
3971   7D                     LD   A,L   
3972   B4                     OR   H   
3973   28 72                  JR   Z,expectM_0_2201S43   
3975   CD 5F 09               CALL   printStr   
3978   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 5C 78 20 69 20 31 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j "   
39A6   CD 5F 09               CALL   printStr   
39A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39B8   21 0A 00               LD   HL,10   
39BB   CD AD 08               CALL   prtdec   
39BE   CD 5F 09               CALL   printStr   
39C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39CE   E1                     POP   hl   
39CF   E5                     PUSH   hl   
39D0   CD AD 08               CALL   prtdec   
39D3   E1                     POP   hl   
39D4   CD 5F 09               CALL   printStr   
39D7   20 28 23 00            .CSTR   " (#"   
39DB   CD F5 08               CALL   prthex   
39DE   CD 5F 09               CALL   printStr   
39E1   29 0D 0A 00            .CSTR   ")\r\n"   
39E5   76                     HALT      
39E6   00                     .CSTR      
39E7                EXPECTM_0_2201S43:      
39E7   E1                     POP   HL   
39E8                          ;*Macro unroll:  test "5 [4] (a) {$a} \\f \\c :", 4
39E8   31 80 3C               LD   SP,STACK   
39EB   CD 66 09               CALL   init   
39EE   CD 20 3B               CALL   execStr   
39F1   35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "5 [4] (a) {$a} \\f \\c :"   
3A08                          ;*Macro unroll:  expect "5 [4] (a) {$a} \\f \\c :",4
3A08   E1                     POP   HL   
3A09   E5                     PUSH   HL   
3A0A   11 04 00               LD   DE,4   
3A0D   B7                     OR   A   
3A0E   ED 52                  SBC   HL,DE   
3A10   7D                     LD   A,L   
3A11   B4                     OR   H   
3A12   28 61                  JR   Z,expectM_0_2202S43   
3A14   CD 5F 09               CALL   printStr   
3A17   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "Code: ","5 [4] (a) {$a} \\f \\c :"   
3A34   CD 5F 09               CALL   printStr   
3A37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A46   21 04 00               LD   HL,4   
3A49   CD AD 08               CALL   prtdec   
3A4C   CD 5F 09               CALL   printStr   
3A4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A5C   E1                     POP   hl   
3A5D   E5                     PUSH   hl   
3A5E   CD AD 08               CALL   prtdec   
3A61   E1                     POP   hl   
3A62   CD 5F 09               CALL   printStr   
3A65   20 28 23 00            .CSTR   " (#"   
3A69   CD F5 08               CALL   prthex   
3A6C   CD 5F 09               CALL   printStr   
3A6F   29 0D 0A 00            .CSTR   ")\r\n"   
3A73   76                     HALT      
3A74   00                     .CSTR      
3A75                EXPECTM_0_2202S43:      
3A75   E1                     POP   HL   
3A76                          ;*Macro unroll:  test "5 [4] (ab) {$a $b +} \\f \\c :", 9
3A76   31 80 3C               LD   SP,STACK   
3A79   CD 66 09               CALL   init   
3A7C   CD 20 3B               CALL   execStr   
3A7F   35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "5 [4] (ab) {$a $b +} \\f \\c :"   
3A9C                          ;*Macro unroll:  expect "5 [4] (ab) {$a $b +} \\f \\c :",9
3A9C   E1                     POP   HL   
3A9D   E5                     PUSH   HL   
3A9E   11 09 00               LD   DE,9   
3AA1   B7                     OR   A   
3AA2   ED 52                  SBC   HL,DE   
3AA4   7D                     LD   A,L   
3AA5   B4                     OR   H   
3AA6   28 67                  JR   Z,expectM_0_2203S43   
3AA8   CD 5F 09               CALL   printStr   
3AAB   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "Code: ","5 [4] (ab) {$a $b +} \\f \\c :"   
3ACE   CD 5F 09               CALL   printStr   
3AD1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AE0   21 09 00               LD   HL,9   
3AE3   CD AD 08               CALL   prtdec   
3AE6   CD 5F 09               CALL   printStr   
3AE9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AF6   E1                     POP   hl   
3AF7   E5                     PUSH   hl   
3AF8   CD AD 08               CALL   prtdec   
3AFB   E1                     POP   hl   
3AFC   CD 5F 09               CALL   printStr   
3AFF   20 28 23 00            .CSTR   " (#"   
3B03   CD F5 08               CALL   prthex   
3B06   CD 5F 09               CALL   printStr   
3B09   29 0D 0A 00            .CSTR   ")\r\n"   
3B0D   76                     HALT      
3B0E   00                     .CSTR      
3B0F                EXPECTM_0_2203S43:      
3B0F   E1                     POP   HL   
3B10                             ; 
3B10                             ; 
3B10                             ; 
3B10                             ; 
3B10                             ; 
3B10                             ; 
3B10                             ; 
3B10   CD 5F 09               CALL   printStr   
3B13   44 6F 6E 65 21 00      .CSTR   "Done!"   
3B19   76                     HALT      
3B1A                          ALIGN   2   
3B1A                PRINTER:      
3B1A   E1                     POP   hl   
3B1B   CD AD 08               CALL   prtdec   
3B1E   DD E9                  JP   (ix)   
3B20                             ; executes a null teminated string (null executes exit_)
3B20                             ; the string should be immedaitely following the call
3B20                EXECSTR:      ; create a root stack frame
3B20   C1                     POP   bc   ; bc = code*
3B21   0B                     DEC   bc   ; dec to prepare for next routine
3B22   11 00 00               LD   de,0   
3B25   D5                     PUSH   de   ; push fake IP
3B26   D5                     PUSH   de   ; push null arg_list*
3B27   D5                     PUSH   de   ; push null first_arg*
3B28   D5                     PUSH   de   ; push fake BP
3B29   DD E9                  JP   (ix)   
3B2B                          ALIGN   $100   
3C00                             ; .org RAMSTART
3C00                          DS   DSIZE   
3C80                STACK:       
3C80                          ALIGN   $100   
3D00                VARS:        
3D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
3DD0                RESTARTS:      
3DD0                RST08:    DS   2   
3DD2                RST10:    DS   2   
3DD4                RST18:    DS   2   
3DD6                RST20:    DS   2   
3DD8                RST28:    DS   2   
3DDA                RST30:    DS   2   ; 
3DDC                BAUD:     DS   2   ; 
3DDE                INTVEC:   DS   2   ; 
3DE0                NMIVEC:   DS   2   ; 
3DE2                GETCVEC:   DS   2   ; 
3DE4                PUTCVEC:   DS   2   ; 
3DE6                SYSVARS:      
3DE6                             ; initialised sys variables
3DE6                VDATAWIDTH:   DS   2   ; 
3DE8                VTIBPTR:   DS   2   ; 
3DEA                VNEXT:    DS   2   ; 
3DEC                VHEAPPTR:   DS   2   ; 
3DEE                             ; uninitialised sys variables
3DEE                VBLOCKEND:   DS   2   ; 
3DF0                VPOINTER:   DS   2   ; 
3DF2                VHASHSTR:   DS   2   ; 
3DF4                VLASTDEF:   DS   2   ; 
3DF6                VREMAIN:   DS   2   ; 
3DF8                VTEMP1:   DS   2   ; 
3DFA                VTEMP2:   DS   2   ; 
3DFC                TBPTR:    DS   2   ; reserved for tests
3DFE                          ALIGN   $100   
3E00                TIB:      DS   TIBSIZE   
3F00                          ALIGN   $100   
3F00                PAD:      DS   $100   
4000                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08AB DEFINED AT LINE 1336 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1296 IN monty.asm
                    > USED AT LINE 1537 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 743 IN monty.asm
                    > USED AT LINE 750 IN monty.asm
                    > USED AT LINE 1347 IN monty.asm
                    > USED AT LINE 1388 IN monty.asm
                    > USED AT LINE 1412 IN monty.asm
                    > USED AT LINE 1415 IN monty.asm
                    > USED AT LINE 1568 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 801 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 806 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1604 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1103 IN monty.asm
                    > USED AT LINE 1434 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1492 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0303 DEFINED AT LINE 217 IN monty.asm
AND_:               0306 DEFINED AT LINE 219 IN monty.asm
ARG_:               0309 DEFINED AT LINE 221 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 223 IN monty.asm
ARRBEGIN_:          030F DEFINED AT LINE 225 IN monty.asm
ARREND_:            0312 DEFINED AT LINE 227 IN monty.asm
ARRINDEX_:          0315 DEFINED AT LINE 229 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 231 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 233 IN monty.asm
CHAR_:              031E DEFINED AT LINE 235 IN monty.asm
COMMAND_:           0321 DEFINED AT LINE 237 IN monty.asm
DISCARD_:           0324 DEFINED AT LINE 239 IN monty.asm
DOT_:               0327 DEFINED AT LINE 242 IN monty.asm
REMAIN_:            032A DEFINED AT LINE 244 IN monty.asm
GO_:                032D DEFINED AT LINE 246 IN monty.asm
IDENTU_:            0330 DEFINED AT LINE 248 IN monty.asm
IDENTL_:            0333 DEFINED AT LINE 250 IN monty.asm
IF_:                0336 DEFINED AT LINE 252 IN monty.asm
INV_:               0339 DEFINED AT LINE 254 IN monty.asm
MUL_:               033F DEFINED AT LINE 257 IN monty.asm
NOT_:               0342 DEFINED AT LINE 259 IN monty.asm
NUM_:               0347 DEFINED AT LINE 262 IN monty.asm
                    > USED AT LINE 1130 IN monty.asm
HEXNUM_:            034A DEFINED AT LINE 264 IN monty.asm
OR_:                034D DEFINED AT LINE 266 IN monty.asm
XOR_:               0350 DEFINED AT LINE 268 IN monty.asm
STRING_:            0353 DEFINED AT LINE 270 IN monty.asm
SUB_:               0356 DEFINED AT LINE 272 IN monty.asm
EQ_:                0359 DEFINED AT LINE 274 IN monty.asm
EQ0:                0363 DEFINED AT LINE 281 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
EQ1:                0364 DEFINED AT LINE 283 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
GT_:                0368 DEFINED AT LINE 287 IN monty.asm
LT_:                0373 DEFINED AT LINE 296 IN monty.asm
LT1:                037C DEFINED AT LINE 303 IN monty.asm
                    > USED AT LINE 294 IN monty.asm
DIV_:               0385 DEFINED AT LINE 309 IN monty.asm
NOP_:               0388 DEFINED AT LINE 311 IN monty.asm
ADD:                038A DEFINED AT LINE 318 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               0395 DEFINED AT LINE 326 IN monty.asm
                    > USED AT LINE 322 IN monty.asm
ADD3:               0399 DEFINED AT LINE 331 IN monty.asm
                    > USED AT LINE 357 IN monty.asm
                    > USED AT LINE 724 IN monty.asm
                    > USED AT LINE 1007 IN monty.asm
                    > USED AT LINE 1144 IN monty.asm
ADDR:               03A4 DEFINED AT LINE 341 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AND:                03B0 DEFINED AT LINE 347 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03B7 DEFINED AT LINE 355 IN monty.asm
                    > USED AT LINE 367 IN monty.asm
                    > USED AT LINE 377 IN monty.asm
OR:                 03BB DEFINED AT LINE 359 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
XOR:                03C4 DEFINED AT LINE 368 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
XOR1:               03C5 DEFINED AT LINE 370 IN monty.asm
                    > USED AT LINE 256 IN monty.asm
ARG:                03CD DEFINED AT LINE 382 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03EB DEFINED AT LINE 403 IN monty.asm
                    > USED AT LINE 409 IN monty.asm
ARG0A:              03F4 DEFINED AT LINE 411 IN monty.asm
                    > USED AT LINE 388 IN monty.asm
                    > USED AT LINE 395 IN monty.asm
ARG1:               03F9 DEFINED AT LINE 414 IN monty.asm
                    > USED AT LINE 407 IN monty.asm
ARG1A:              0401 DEFINED AT LINE 421 IN monty.asm
                    > USED AT LINE 413 IN monty.asm
ARG_LIST:           0404 DEFINED AT LINE 430 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG_LIST1:          040E DEFINED AT LINE 437 IN monty.asm
                    > USED AT LINE 455 IN monty.asm
ARG_LIST2:          041A DEFINED AT LINE 445 IN monty.asm
                    > USED AT LINE 442 IN monty.asm
ARG_LIST3:          0422 DEFINED AT LINE 453 IN monty.asm
                    > USED AT LINE 444 IN monty.asm
                    > USED AT LINE 451 IN monty.asm
ARG_LIST4:          0425 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 440 IN monty.asm
ARG_LIST5:          042A DEFINED AT LINE 461 IN monty.asm
                    > USED AT LINE 459 IN monty.asm
ARRBEGIN:           0436 DEFINED AT LINE 472 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             0452 DEFINED AT LINE 486 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARREND1:            046C DEFINED AT LINE 502 IN monty.asm
                    > USED AT LINE 518 IN monty.asm
ARREND2:            047C DEFINED AT LINE 512 IN monty.asm
                    > USED AT LINE 508 IN monty.asm
ARRINDEX:           04A0 DEFINED AT LINE 539 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARRINDEX0:          04A8 DEFINED AT LINE 545 IN monty.asm
ARRINDEX1:          04A9 DEFINED AT LINE 547 IN monty.asm
                    > USED AT LINE 544 IN monty.asm
ARRINDEX2:          04B5 DEFINED AT LINE 556 IN monty.asm
                    > USED AT LINE 553 IN monty.asm
ASSIGN:             04B8 DEFINED AT LINE 561 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
ASSIGN0:            04BA DEFINED AT LINE 564 IN monty.asm
                    > USED AT LINE 325 IN monty.asm
                    > USED AT LINE 335 IN monty.asm
                    > USED AT LINE 1137 IN monty.asm
ASSIGNX:            04BB DEFINED AT LINE 566 IN monty.asm
ASSIGN1:            04C7 DEFINED AT LINE 574 IN monty.asm
                    > USED AT LINE 571 IN monty.asm
BLOCK:              04C9 DEFINED AT LINE 577 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK1:             04CD DEFINED AT LINE 581 IN monty.asm
                    > USED AT LINE 585 IN monty.asm
                    > USED AT LINE 607 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
                    > USED AT LINE 615 IN monty.asm
                    > USED AT LINE 619 IN monty.asm
BLOCK2:             04F9 DEFINED AT LINE 608 IN monty.asm
                    > USED AT LINE 595 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
BLOCK3:             04FC DEFINED AT LINE 611 IN monty.asm
                    > USED AT LINE 602 IN monty.asm
                    > USED AT LINE 604 IN monty.asm
                    > USED AT LINE 606 IN monty.asm
BLOCK4:             0504 DEFINED AT LINE 617 IN monty.asm
                    > USED AT LINE 588 IN monty.asm
                    > USED AT LINE 590 IN monty.asm
                    > USED AT LINE 592 IN monty.asm
BLOCK5:             0507 DEFINED AT LINE 620 IN monty.asm
                    > USED AT LINE 616 IN monty.asm
BLOCK6:             052F DEFINED AT LINE 639 IN monty.asm
                    > USED AT LINE 626 IN monty.asm
BLOCKEND:           0532 DEFINED AT LINE 643 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 1242 IN monty.asm
BLOCKEND1:          055E DEFINED AT LINE 665 IN monty.asm
                    > USED AT LINE 658 IN monty.asm
BLOCKEND2:          056A DEFINED AT LINE 672 IN monty.asm
                    > USED AT LINE 664 IN monty.asm
BLOCKEND3:          057C DEFINED AT LINE 686 IN monty.asm
                    > USED AT LINE 678 IN monty.asm
CHAR:               0587 DEFINED AT LINE 697 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR1:              058A DEFINED AT LINE 699 IN monty.asm
                    > USED AT LINE 710 IN monty.asm
CHAR2:              0596 DEFINED AT LINE 708 IN monty.asm
                    > USED AT LINE 705 IN monty.asm
CHAR3:              0599 DEFINED AT LINE 711 IN monty.asm
                    > USED AT LINE 703 IN monty.asm
DIV:                059C DEFINED AT LINE 715 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
DOT:                05AD DEFINED AT LINE 726 IN monty.asm
                    > USED AT LINE 243 IN monty.asm
DOT1:               05B9 DEFINED AT LINE 734 IN monty.asm
                    > USED AT LINE 731 IN monty.asm
DOT2:               05C2 DEFINED AT LINE 739 IN monty.asm
                    > USED AT LINE 736 IN monty.asm
DOT3:               05CC DEFINED AT LINE 745 IN monty.asm
                    > USED AT LINE 741 IN monty.asm
DOT4:               05D0 DEFINED AT LINE 748 IN monty.asm
                    > USED AT LINE 733 IN monty.asm
                    > USED AT LINE 738 IN monty.asm
                    > USED AT LINE 744 IN monty.asm
DIVIDE:             05D7 DEFINED AT LINE 756 IN monty.asm
                    > USED AT LINE 720 IN monty.asm
DIVIDE1:            05DC DEFINED AT LINE 759 IN monty.asm
                    > USED AT LINE 771 IN monty.asm
DIVIDE2:            05E9 DEFINED AT LINE 767 IN monty.asm
                    > USED AT LINE 764 IN monty.asm
DIVIDE3:            05EA DEFINED AT LINE 769 IN monty.asm
                    > USED AT LINE 766 IN monty.asm
EQUALS:             05F0 DEFINED AT LINE 777 IN monty.asm
                    > USED AT LINE 285 IN monty.asm
LESSTHANEQ:         05F8 DEFINED AT LINE 785 IN monty.asm
                    > USED AT LINE 305 IN monty.asm
LESSTHAN:           05FD DEFINED AT LINE 792 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
LESSTHAN1:          0602 DEFINED AT LINE 797 IN monty.asm
                    > USED AT LINE 788 IN monty.asm
TRUE1:              0605 DEFINED AT LINE 800 IN monty.asm
                    > USED AT LINE 780 IN monty.asm
                    > USED AT LINE 1175 IN monty.asm
NULL1:              060B DEFINED AT LINE 804 IN monty.asm
FALSE1:             060B DEFINED AT LINE 805 IN monty.asm
                    > USED AT LINE 781 IN monty.asm
                    > USED AT LINE 795 IN monty.asm
                    > USED AT LINE 798 IN monty.asm
                    > USED AT LINE 1163 IN monty.asm
GO:                 0611 DEFINED AT LINE 813 IN monty.asm
                    > USED AT LINE 247 IN monty.asm
                    > USED AT LINE 1252 IN monty.asm
GO1:                0612 DEFINED AT LINE 815 IN monty.asm
                    > USED AT LINE 984 IN monty.asm
                    > USED AT LINE 986 IN monty.asm
                    > USED AT LINE 1323 IN monty.asm
GO2:                0618 DEFINED AT LINE 820 IN monty.asm
                    > USED AT LINE 818 IN monty.asm
GOBLOCK:            061E DEFINED AT LINE 824 IN monty.asm
GOBLOCK1:           0643 DEFINED AT LINE 841 IN monty.asm
                    > USED AT LINE 923 IN monty.asm
GOFUNC:             0651 DEFINED AT LINE 850 IN monty.asm
                    > USED AT LINE 823 IN monty.asm
GOFUNC1:            066A DEFINED AT LINE 869 IN monty.asm
                    > USED AT LINE 879 IN monty.asm
GOFUNC2:            0670 DEFINED AT LINE 876 IN monty.asm
                    > USED AT LINE 868 IN monty.asm
GOFUNC3:            067B DEFINED AT LINE 882 IN monty.asm
                    > USED AT LINE 858 IN monty.asm
GOFUNC4:            0693 DEFINED AT LINE 899 IN monty.asm
                    > USED AT LINE 896 IN monty.asm
GOFUNC5:            0697 DEFINED AT LINE 903 IN monty.asm
                    > USED AT LINE 909 IN monty.asm
GOFUNC6:            069A DEFINED AT LINE 907 IN monty.asm
                    > USED AT LINE 902 IN monty.asm
GOFUNC7:            069D DEFINED AT LINE 910 IN monty.asm
GOFUNC8:            06A2 DEFINED AT LINE 916 IN monty.asm
                    > USED AT LINE 835 IN monty.asm
                    > USED AT LINE 898 IN monty.asm
HEXNUM:             06AD DEFINED AT LINE 925 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
HEXNUM1:            06B0 DEFINED AT LINE 927 IN monty.asm
                    > USED AT LINE 944 IN monty.asm
HEXNUM2:            06B8 DEFINED AT LINE 933 IN monty.asm
                    > USED AT LINE 931 IN monty.asm
IDENTU:             06CA DEFINED AT LINE 945 IN monty.asm
                    > USED AT LINE 249 IN monty.asm
IDENTL:             06CF DEFINED AT LINE 949 IN monty.asm
                    > USED AT LINE 251 IN monty.asm
IDENT1:             06D4 DEFINED AT LINE 953 IN monty.asm
                    > USED AT LINE 948 IN monty.asm
IF:                 06E1 DEFINED AT LINE 966 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
IFTE:               06ED DEFINED AT LINE 976 IN monty.asm
                    > USED AT LINE 970 IN monty.asm
IFTE1:              06EE DEFINED AT LINE 978 IN monty.asm
                    > USED AT LINE 973 IN monty.asm
MUL:                06FA DEFINED AT LINE 988 IN monty.asm
                    > USED AT LINE 258 IN monty.asm
MUL2:               06FC DEFINED AT LINE 991 IN monty.asm
MUL3:               0704 DEFINED AT LINE 996 IN monty.asm
                    > USED AT LINE 1005 IN monty.asm
NUM:                0716 DEFINED AT LINE 1009 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
NUM0:               071F DEFINED AT LINE 1015 IN monty.asm
                    > USED AT LINE 1013 IN monty.asm
NUM1:               0720 DEFINED AT LINE 1017 IN monty.asm
                    > USED AT LINE 1034 IN monty.asm
NUM2:               0738 DEFINED AT LINE 1035 IN monty.asm
                    > USED AT LINE 935 IN monty.asm
                    > USED AT LINE 937 IN monty.asm
                    > USED AT LINE 1020 IN monty.asm
                    > USED AT LINE 1022 IN monty.asm
NUM3:               0743 DEFINED AT LINE 1043 IN monty.asm
                    > USED AT LINE 1038 IN monty.asm
REMAIN:             0746 DEFINED AT LINE 1047 IN monty.asm
                    > USED AT LINE 245 IN monty.asm
SHIFTLEFT:          074C DEFINED AT LINE 1054 IN monty.asm
                    > USED AT LINE 300 IN monty.asm
SHIFTLEFT1:         0754 DEFINED AT LINE 1061 IN monty.asm
                    > USED AT LINE 1064 IN monty.asm
SHIFTLEFT2:         0755 DEFINED AT LINE 1063 IN monty.asm
                    > USED AT LINE 1060 IN monty.asm
SHIFTRIGHT:         075C DEFINED AT LINE 1071 IN monty.asm
                    > USED AT LINE 291 IN monty.asm
SHIFTRIGHT1:        0764 DEFINED AT LINE 1078 IN monty.asm
                    > USED AT LINE 1082 IN monty.asm
SHIFTRIGHT2:        0768 DEFINED AT LINE 1081 IN monty.asm
                    > USED AT LINE 1077 IN monty.asm
STRING:             076F DEFINED AT LINE 1090 IN monty.asm
                    > USED AT LINE 271 IN monty.asm
STRING1:            0778 DEFINED AT LINE 1097 IN monty.asm
                    > USED AT LINE 1104 IN monty.asm
                    > USED AT LINE 1106 IN monty.asm
STRING2:            077B DEFINED AT LINE 1101 IN monty.asm
                    > USED AT LINE 1096 IN monty.asm
SUB:                0797 DEFINED AT LINE 1123 IN monty.asm
                    > USED AT LINE 273 IN monty.asm
SUB0:               07A3 DEFINED AT LINE 1131 IN monty.asm
                    > USED AT LINE 1128 IN monty.asm
SUB1:               07AD DEFINED AT LINE 1138 IN monty.asm
                    > USED AT LINE 1134 IN monty.asm
COMMAND:            07B6 DEFINED AT LINE 1149 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
ABS1:               0804 DEFINED AT LINE 1184 IN monty.asm
                    > USED AT LINE 1155 IN monty.asm
CLOSURE:            0811 DEFINED AT LINE 1199 IN monty.asm
                    > USED AT LINE 1159 IN monty.asm
COMMENT:            0831 DEFINED AT LINE 1215 IN monty.asm
                    > USED AT LINE 1153 IN monty.asm
                    > USED AT LINE 1219 IN monty.asm
BREAK:              083A DEFINED AT LINE 1223 IN monty.asm
                    > USED AT LINE 1179 IN monty.asm
BREAK1:             0841 DEFINED AT LINE 1229 IN monty.asm
                    > USED AT LINE 1227 IN monty.asm
REPEAT:             0852 DEFINED AT LINE 1246 IN monty.asm
                    > USED AT LINE 1171 IN monty.asm
BYTES:              085A DEFINED AT LINE 1254 IN monty.asm
                    > USED AT LINE 1157 IN monty.asm
BYTES1:             085D DEFINED AT LINE 1256 IN monty.asm
                    > USED AT LINE 1327 IN monty.asm
FUNC:               0862 DEFINED AT LINE 1261 IN monty.asm
                    > USED AT LINE 1161 IN monty.asm
INPUT:              087E DEFINED AT LINE 1285 IN monty.asm
                    > USED AT LINE 1165 IN monty.asm
KEY:                0889 DEFINED AT LINE 1295 IN monty.asm
                    > USED AT LINE 1167 IN monty.asm
OUTPUT:             0892 DEFINED AT LINE 1304 IN monty.asm
                    > USED AT LINE 1169 IN monty.asm
SELECT:             089B DEFINED AT LINE 1315 IN monty.asm
                    > USED AT LINE 1173 IN monty.asm
WORDS:              08A5 DEFINED AT LINE 1325 IN monty.asm
                    > USED AT LINE 1177 IN monty.asm
FILTER:             08AB DEFINED AT LINE 1334 IN monty.asm
MAP:                08AB DEFINED AT LINE 1335 IN monty.asm
PRTDEC:             08AD DEFINED AT LINE 1343 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
                    > USED AT LINE 1614 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 145
PRTDEC0:            08BC DEFINED AT LINE 1354 IN monty.asm
                    > USED AT LINE 1345 IN monty.asm
PRTDEC1:            08DE DEFINED AT LINE 1370 IN monty.asm
                    > USED AT LINE 1358 IN monty.asm
                    > USED AT LINE 1360 IN monty.asm
                    > USED AT LINE 1362 IN monty.asm
                    > USED AT LINE 1364 IN monty.asm
                    > USED AT LINE 1367 IN monty.asm
PRTDEC2:            08E0 DEFINED AT LINE 1372 IN monty.asm
                    > USED AT LINE 1375 IN monty.asm
PRTDEC3:            08F0 DEFINED AT LINE 1384 IN monty.asm
                    > USED AT LINE 1379 IN monty.asm
PRTDEC4:            08F1 DEFINED AT LINE 1386 IN monty.asm
                    > USED AT LINE 1383 IN monty.asm
PRTHEX:             08F5 DEFINED AT LINE 1390 IN monty.asm
                    > USED AT LINE 732 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0900 DEFINED AT LINE 1398 IN monty.asm
                    > USED AT LINE 1393 IN monty.asm
                    > USED AT LINE 1395 IN monty.asm
PRTHEX3:            0909 DEFINED AT LINE 1406 IN monty.asm
                    > USED AT LINE 1404 IN monty.asm
PRTSTR0:            0914 DEFINED AT LINE 1414 IN monty.asm
                    > USED AT LINE 1420 IN monty.asm
PRTSTR:             0918 DEFINED AT LINE 1417 IN monty.asm
                    > USED AT LINE 737 IN monty.asm
                    > USED AT LINE 1484 IN monty.asm
NESTING:            091D DEFINED AT LINE 1433 IN monty.asm
                    > USED AT LINE 1528 IN monty.asm
                    > USED AT LINE 1569 IN monty.asm
NESTING0:           0927 DEFINED AT LINE 1439 IN monty.asm
                    > USED AT LINE 1435 IN monty.asm
                    > USED AT LINE 1437 IN monty.asm
NESTING1A:          092E DEFINED AT LINE 1444 IN monty.asm
                    > USED AT LINE 1441 IN monty.asm
NESTING1:           0931 DEFINED AT LINE 1447 IN monty.asm
                    > USED AT LINE 1438 IN monty.asm
NESTING2:           0940 DEFINED AT LINE 1456 IN monty.asm
                    > USED AT LINE 1451 IN monty.asm
                    > USED AT LINE 1453 IN monty.asm
NESTING3:           0942 DEFINED AT LINE 1459 IN monty.asm
                    > USED AT LINE 1455 IN monty.asm
NESTING4:           094D DEFINED AT LINE 1466 IN monty.asm
                    > USED AT LINE 1461 IN monty.asm
                    > USED AT LINE 1463 IN monty.asm
PROMPT:             094F DEFINED AT LINE 1470 IN monty.asm
                    > USED AT LINE 1512 IN monty.asm
CRLF:               0958 DEFINED AT LINE 1475 IN monty.asm
                    > USED AT LINE 1581 IN monty.asm
PRINTSTR:           095F DEFINED AT LINE 1482 IN monty.asm
                    > USED AT LINE 1471 IN monty.asm
                    > USED AT LINE 1476 IN monty.asm
                    > USED AT LINE 1508 IN monty.asm
                    > USED AT LINE 1612 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 138
INIT:               0966 DEFINED AT LINE 1489 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1507 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              097F DEFINED AT LINE 1499 IN monty.asm
                    > USED AT LINE 1502 IN monty.asm
START:              0984 DEFINED AT LINE 1505 IN monty.asm
INTERPRET:          099A DEFINED AT LINE 1511 IN monty.asm
                    > USED AT LINE 1606 IN monty.asm
                    > USED AT LINE 1615 IN monty.asm
INTERPRET2:         09A4 DEFINED AT LINE 1517 IN monty.asm
                    > USED AT LINE 1561 IN monty.asm
INTERPRET3:         09AC DEFINED AT LINE 1524 IN monty.asm
                    > USED AT LINE 1533 IN monty.asm
INTERPRET4:         09B2 DEFINED AT LINE 1530 IN monty.asm
                    > USED AT LINE 1522 IN monty.asm
INTERPRET5:         09B7 DEFINED AT LINE 1536 IN monty.asm
                    > USED AT LINE 1570 IN monty.asm
                    > USED AT LINE 1584 IN monty.asm
INTERPRET6:         09C8 DEFINED AT LINE 1563 IN monty.asm
                    > USED AT LINE 1539 IN monty.asm
INTERPRET7:         09D6 DEFINED AT LINE 1572 IN monty.asm
                    > USED AT LINE 1544 IN monty.asm
INTERPRET8:         09E9 DEFINED AT LINE 1586 IN monty.asm
                    > USED AT LINE 1542 IN monty.asm
NEXT:               09F1 DEFINED AT LINE 1592 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1596 IN monty.asm
NEXT1:              0A00 DEFINED AT LINE 1603 IN monty.asm
                    > USED AT LINE 1597 IN monty.asm
EXIT_:              0A07 DEFINED AT LINE 1607 IN monty.asm
                    > USED AT LINE 1605 IN monty.asm
ERROR:              0A0A DEFINED AT LINE 1611 IN monty.asm
                    > USED AT LINE 1182 IN monty.asm
TESTSSTART:         0B00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2096S43:  0B89 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2104S43:  0BEF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2105S43:  0C55 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2106S43:  0CB9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2107S43:  0D1D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2108S43:  0D81 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2109S43:  0DE5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2110S43:  0E4B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2111S43:  0EB3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2112S43:  0F19 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2113S43:  0F7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2114S43:  0FE7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2115S43:  1051 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2116S43:  10B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2117S43:  1121 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2118S43:  118F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2119S43:  11FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2120S43:  1269 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2121S43:  12D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2122S43:  134D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2123S43:  13BF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2124S43:  142B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2125S43:  14A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2126S43:  151D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2127S43:  158D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2128S43:  15F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2129S43:  1665 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2130S43:  16DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2131S43:  1757 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2132S43:  17C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2133S43:  183F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2134S43:  18AB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2135S43:  1927 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2136S43:  1993 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2137S43:  1A0F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2138S43:  1A7B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2139S43:  1AF7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2140S43:  1B6B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2141S43:  1BD7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2142S43:  1C53 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2143S43:  1CC3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2144S43:  1D2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2145S43:  1D9D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2146S43:  1E0B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2147S43:  1E77 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2148S43:  1EE3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2149S43:  1F4F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2150S43:  1FBB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2151S43:  2027 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2152S43:  2093 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2153S43:  20FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2154S43:  216B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2155S43:  21D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2156S43:  2247 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2157S43:  22B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2158S43:  2325 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2159S43:  2395 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2160S43:  23FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2161S43:  2469 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2162S43:  24D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2163S43:  254F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2164S43:  25C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2165S43:  2643 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2166S43:  26CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2167S43:  2753 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2168S43:  27C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2169S43:  2831 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2170S43:  28A3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2171S43:  2917 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2172S43:  2989 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2173S43:  29FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2174S43:  2A77 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2175S43:  2AF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2176S43:  2B77 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2177S43:  2BF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2178S43:  2C7D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2179S43:  2D07 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2180S43:  2D97 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2181S43:  2E2B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2182S43:  2EB1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2183S43:  2F3D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2184S43:  2FCB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2185S43:  305B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2186S43:  30E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2187S43:  3185 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2188S43:  320F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2189S43:  32A5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2190S43:  333D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2191S43:  33D7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2192S43:  3481 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2193S43:  352B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2194S43:  35A7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2195S43:  3623 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2196S43:  36AB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2197S43:  3737 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2198S43:  37DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2199S43:  388B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2200S43:  3937 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2201S43:  39E7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2202S43:  3A75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2203S43:  3B0F DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3B1A DEFINED AT LINE 143
EXECSTR:            3B20 DEFINED AT LINE 150
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3C80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 826 IN monty.asm
                    > USED AT LINE 1491 IN monty.asm
                    > USED AT LINE 1506 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3D00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1496 IN monty.asm
RESTARTS:           3DD0 DEFINED AT LINE 11 IN ram.asm
RST08:              3DD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              3DD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              3DD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              3DD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              3DD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              3DDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               3DDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             3DDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             3DE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            3DE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            3DE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            3DE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1493 IN monty.asm
VDATAWIDTH:         3DE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 506 IN monty.asm
                    > USED AT LINE 542 IN monty.asm
                    > USED AT LINE 569 IN monty.asm
                    > USED AT LINE 1257 IN monty.asm
VTIBPTR:            3DE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1515 IN monty.asm
                    > USED AT LINE 1587 IN monty.asm
VNEXT:              3DEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1490 IN monty.asm
VHEAPPTR:           3DEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 432 IN monty.asm
                    > USED AT LINE 463 IN monty.asm
                    > USED AT LINE 496 IN monty.asm
                    > USED AT LINE 528 IN monty.asm
                    > USED AT LINE 529 IN monty.asm
                    > USED AT LINE 634 IN monty.asm
                    > USED AT LINE 637 IN monty.asm
                    > USED AT LINE 1091 IN monty.asm
                    > USED AT LINE 1110 IN monty.asm
                    > USED AT LINE 1201 IN monty.asm
                    > USED AT LINE 1206 IN monty.asm
                    > USED AT LINE 1207 IN monty.asm
                    > USED AT LINE 1263 IN monty.asm
                    > USED AT LINE 1278 IN monty.asm
                    > USED AT LINE 1280 IN monty.asm
VBLOCKEND:          3DEE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           3DF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 342 IN monty.asm
                    > USED AT LINE 344 IN monty.asm
                    > USED AT LINE 345 IN monty.asm
                    > USED AT LINE 417 IN monty.asm
                    > USED AT LINE 549 IN monty.asm
                    > USED AT LINE 567 IN monty.asm
                    > USED AT LINE 957 IN monty.asm
VHASHSTR:           3DF2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           3DF4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            3DF6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 722 IN monty.asm
                    > USED AT LINE 1048 IN monty.asm
VTEMP1:             3DF8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 489 IN monty.asm
                    > USED AT LINE 530 IN monty.asm
                    > USED AT LINE 629 IN monty.asm
                    > USED AT LINE 638 IN monty.asm
                    > USED AT LINE 825 IN monty.asm
                    > USED AT LINE 831 IN monty.asm
                    > USED AT LINE 859 IN monty.asm
                    > USED AT LINE 880 IN monty.asm
                    > USED AT LINE 887 IN monty.asm
                    > USED AT LINE 893 IN monty.asm
                    > USED AT LINE 1202 IN monty.asm
                    > USED AT LINE 1205 IN monty.asm
VTEMP2:             3DFA DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 860 IN monty.asm
                    > USED AT LINE 881 IN monty.asm
TBPTR:              3DFC DEFINED AT LINE 43 IN ram.asm
TIB:                3E00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1521 IN monty.asm
                    > USED AT LINE 1564 IN monty.asm
                    > USED AT LINE 1573 IN monty.asm
                    > USED AT LINE 1588 IN monty.asm
PAD:                3F00 DEFINED AT LINE 49 IN ram.asm
HEAP:               4000 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 622 IN monty.asm
