0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 .cstr code1
0000                 call flushBuffer
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4D               LD   (RST08),HL   
0094   22 D2 4D               LD   (RST10),HL   
0097   22 D4 4D               LD   (RST18),HL   
009A   22 D6 4D               LD   (RST20),HL   
009D   22 D8 4D               LD   (RST28),HL   
00A0   22 DA 4D               LD   (RST30),HL   
00A3   22 DE 4D               LD   (INTVEC),HL   
00A6   22 E0 4D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0D               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQUOTE:   EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                TMAGIC:   EQU   $AA   ; magic number
00C6                TRESERV:   EQU   $A0   ; reserved
00C6                TNUMBER:   EQU   $A1   ; number
00C6                TSTRING:   EQU   $A2   ; string
00C6                TPOINTER:   EQU   $A3   ; pointer
00C6                TARRAY:   EQU   $A4   ; array
00C6                TBLOCK:   EQU   $A5   ; block
00C6                TLAMBDA:   EQU   $A6   ; lambda
00C6                TARGLST:   EQU   $A7   ; arglist
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4B                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4C                  DW   BUF   ; vBUFPtr pointer into BUF
0188   35 0C                  DW   next   ; nNext
018A   1E 4E                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ ` _
0200   7F                     DB   lsb(nop_)   ; SP
0201   36                     DB   lsb(bang_)   ; !
0202   4A                     DB   lsb(dblquote_)   ; "
0203   3E                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   81                     DB   lsb(rparen_)   ; )
020A   33                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   47                     DB   lsb(comma_)   ; ,
020D   4D                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7C                     DB   lsb(slash_)   ; /	
0210   3B                     DB   lsb(num_)   ; 0
0211   3B                     DB   lsb(num_)   ; 1
0212   3B                     DB   lsb(num_)   ; 2
0213   3B                     DB   lsb(num_)   ; 3
0214   3B                     DB   lsb(num_)   ; 4
0215   3B                     DB   lsb(num_)   ; 5
0216   3B                     DB   lsb(num_)   ; 6
0217   3B                     DB   lsb(num_)   ; 7
0218   3B                     DB   lsb(num_)   ; 8
0219   3B                     DB   lsb(num_)   ; 9
021A   27                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6A                     DB   lsb(lt_)   ; <
021D   50                     DB   lsb(eq_)   ; =
021E   5F                     DB   lsb(gt_)   ; >
021F   30                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2A                     DB   lsb(upcase_)   ; A
0222   2A                     DB   lsb(upcase_)   ; B
0223   2A                     DB   lsb(upcase_)   ; C
0224   2A                     DB   lsb(upcase_)   ; D
0225   2A                     DB   lsb(upcase_)   ; E
0226   2A                     DB   lsb(upcase_)   ; F
0227   2A                     DB   lsb(upcase_)   ; G
0228   2A                     DB   lsb(upcase_)   ; h
0229   2A                     DB   lsb(upcase_)   ; I
022A   2A                     DB   lsb(upcase_)   ; J
022B   2A                     DB   lsb(upcase_)   ; K
022C   2A                     DB   lsb(upcase_)   ; L
022D   2A                     DB   lsb(upcase_)   ; M
022E   2A                     DB   lsb(upcase_)   ; N
022F   2A                     DB   lsb(upcase_)   ; O
0230   2A                     DB   lsb(upcase_)   ; p
0231   2A                     DB   lsb(upcase_)   ; Q
0232   2A                     DB   lsb(upcase_)   ; R
0233   2A                     DB   lsb(upcase_)   ; S
0234   2A                     DB   lsb(upcase_)   ; T
0235   2A                     DB   lsb(upcase_)   ; U
0236   2A                     DB   lsb(upcase_)   ; V
0237   2A                     DB   lsb(upcase_)   ; W
0238   2A                     DB   lsb(upcase_)   ; X
0239   2A                     DB   lsb(upcase_)   ; Y
023A   2A                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   44                     DB   lsb(caret_)   ; ^
023F   7F                     DB   lsb(nop_)   ; _
0240   4A                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   2D                     DB   lsb(lowcase_)   ; a
0242   2D                     DB   lsb(lowcase_)   ; b
0243   2D                     DB   lsb(lowcase_)   ; c
0244   2D                     DB   lsb(lowcase_)   ; d
0245   2D                     DB   lsb(lowcase_)   ; e
0246   2D                     DB   lsb(lowcase_)   ; f
0247   2D                     DB   lsb(lowcase_)   ; g
0248   2D                     DB   lsb(lowcase_)   ; h
0249   2D                     DB   lsb(lowcase_)   ; i
024A   2D                     DB   lsb(lowcase_)   ; j
024B   2D                     DB   lsb(lowcase_)   ; k
024C   2D                     DB   lsb(lowcase_)   ; l
024D   2D                     DB   lsb(lowcase_)   ; m
024E   2D                     DB   lsb(lowcase_)   ; n
024F   2D                     DB   lsb(lowcase_)   ; o
0250   2D                     DB   lsb(lowcase_)   ; p
0251   2D                     DB   lsb(lowcase_)   ; q
0252   2D                     DB   lsb(lowcase_)   ; r
0253   2D                     DB   lsb(lowcase_)   ; s
0254   2D                     DB   lsb(lowcase_)   ; t
0255   2D                     DB   lsb(lowcase_)   ; u
0256   2D                     DB   lsb(lowcase_)   ; v
0257   2D                     DB   lsb(lowcase_)   ; w
0258   2D                     DB   lsb(lowcase_)   ; x
0259   2D                     DB   lsb(lowcase_)   ; y
025A   2D                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   41                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   7F                     DB   lsb(nop_)   ; ~
025F   7F                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 84 03               JP   plus   
0303                AT_:         
0303   C3 96 03               JP   at   
0306                AMPER_:      
0306   C3 A0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 E4 06               JP   dollar   
030C                LBRACK_:      
030C   C3 F9 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 15 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 C4 03               JP   percent   
0315                BACKSLASH_:      
0315   C3 9E 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 C4 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 2D 05               JP   rbrace   
031E                TICK_:       
031E   C3 89 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 85 07               JP   semicolon   
0324                DOT_:        
0324   C3 F9 05               JP   dot   
0327                COLON_:      
0327   C3 8E 04               JP   colon   
032A                UPCASE_:      
032A   C3 01 07               JP   upcase   
032D                LOWCASE_:      
032D   C3 06 07               JP   lowcase   
0330                QUESTION_:      
0330   C3 18 07               JP   question   
0333                STAR_:       
0333   C3 31 07               JP   star   
0336                BANG_:       ; logical invert, any non zero value
0336   21 00 00               LD   hl,0   ; is considered true
0339   18 20                  JR   eq1   
033B                NUM_:        
033B   C3 4D 07               JP   num   
033E                HASH_:       
033E   C3 65 04               JP   hash   
0341                PIPE_:       
0341   C3 AB 03               JP   pipe   
0344                CARET_:      
0344   C3 45 06               JP   caret   
0347                COMMA_:      
0347   C3 A0 05               JP   comma   
034A                DBLQUOTE_:      
034A   C3 C4 07               JP   dblquote   
034D                MINUS_:      
034D   C3 EC 07               JP   minus   
0350                EQ_:         
0350   03                     INC   bc   
0351   0A                     LD   a,(bc)   ; is it == ?
0352   FE 3D                  CP   "="   
0354   28 04                  JR   z,eq0   ; no its equality
0356   0B                     DEC   bc   
0357   C3 7D 04               JP   assign   ; no its assignment
035A                EQ0:         
035A   E1                     POP   hl   
035B                EQ1:         
035B   D1                     POP   de   
035C   C3 24 06               JP   equals   
035F                GT_:         
035F   03                     INC   bc   
0360   0A                     LD   a,(bc)   
0361   FE 3E                  CP   ">"   
0363   CA B1 07               JP   z,shiftRight   
0366   D1                     POP   de   
0367   E1                     POP   hl   
0368   18 09                  JR   lt1   
036A                LT_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   
036C   FE 3C                  CP   "<"   
036E   CA A1 07               JP   z,shiftLeft   
0371   E1                     POP   hl   
0372   D1                     POP   de   
0373                LT1:         
0373   FE 3D                  CP   "="   
0375   CA 2C 06               JP   z,lessthaneq   
0378   0B                     DEC   bc   
0379   C3 31 06               JP   lessthan   
037C                SLASH_:      
037C   C3 AF 05               JP   slash   
037F                NOP_:        
037F   DD E9                  JP   (ix)   
0381                RPAREN_:      
0381   C3 7D 07               JP   rparen   
0384                             ;*******************************************************************
0384                             ; implementations
0384                             ;*******************************************************************
0384                PLUS:        
0384                ADD:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 2B                  CP   "+"   ; ++ increment variable
0388   20 05                  JR   nz,add1   
038A   E1                     POP   hl   
038B   23                     INC   hl   
038C   C3 7F 04               JP   assign0   
038F                ADD1:        
038F   0B                     DEC   bc   
0390   D1                     POP   de   ; second term
0391   E1                     POP   hl   ; first term
0392   19                     ADD   hl,de   
0393                ADD3:        
0393   E5                     PUSH   hl   
0394   DD E9                  JP   (ix)   
0396                             ; @ addr
0396                             ; -- ptr
0396                AT:          
0396                ADDR:        
0396   ED 5B F2 4D            LD   de,(vPointer)   
039A   21 F2 4D               LD   hl,vPointer   
039D   C3 71 0A               JP   variable   
03A0                AMPER:       
03A0                AND:         
03A0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A1   E1                     POP   hl   
03A2   7B                     LD   a,e   
03A3   A5                     AND   l   
03A4   6F                     LD   l,a   
03A5   7A                     LD   a,d   
03A6   A4                     AND   h   
03A7                AND1:        
03A7   67                     LD   h,a   
03A8   E5                     PUSH   hl   
03A9   DD E9                  JP   (ix)   
03AB                PIPE:        
03AB                OR:          
03AB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AC   E1                     POP   hl   
03AD   7B                     LD   a,e   
03AE   B5                     OR   l   
03AF   6F                     LD   l,a   
03B0   7A                     LD   a,d   
03B1   B4                     OR   h   
03B2   18 F3                  JR   and1   
03B4                XOR:         
03B4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B5                XOR1:        
03B5   E1                     POP   hl   
03B6   7B                     LD   a,e   
03B7   AD                     XOR   l   
03B8   6F                     LD   l,a   
03B9   7A                     LD   a,d   
03BA   AC                     XOR   h   
03BB   67                     LD   h,a   
03BC   E5                     PUSH   hl   
03BD   DD E9                  JP   (ix)   
03BF                INVERT:      ; Bitwise INVert the top member of the stack
03BF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C2   18 F1                  JR   xor1   
03C4                             ; %a .. %z
03C4                             ; -- value
03C4                             ; returns value of arg
03C4                PERCENT:      
03C4                ARG:         
03C4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03C7   FD 56 05               LD   d,(iy+5)   
03CA   EB                     EX   de,hl   
03CB   7D                     LD   a,l   ; arg_list* == null, skip
03CC   B4                     OR   h   
03CD   28 1A                  JR   z,arg0a   
03CF   23                     INC   hl   ; a = num_args, hl = arg_list*
03D0   7E                     LD   a,(hl)   
03D1   23                     INC   hl   
03D2   B7                     OR   a   
03D3   28 14                  JR   z,arg0a   ; num_args == 0, skip
03D5   5F                     LD   e,a   ; e = a = num_args
03D6   03                     INC   bc   ; a = next char = dollar_name
03D7   0A                     LD   a,(bc)   
03D8   C5                     PUSH   bc   ; save IP
03D9   43                     LD   b,e   ; b = e = num_args
03DA   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03DD   FD 56 03               LD   d,(iy+3)   
03E0                ARG0:        
03E0   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E1   1B                     DEC   de   
03E2   BE                     CP   (hl)   
03E3   28 09                  JR   z,arg1   
03E5   23                     INC   hl   ; hl = next arg_list*
03E6   10 F8                  DJNZ   arg0   
03E8   C1                     POP   bc   ; no match, restore IP
03E9                ARG0A:       
03E9   11 00 00               LD   de,0   ; return 0
03EC   18 08                  JR   arg1a   
03EE                ARG1:        
03EE   C1                     POP   bc   ; restore IP
03EF   EB                     EX   de,hl   ; hl = arg*
03F0   22 F2 4D               LD   (vPointer),hl   ; store arg* in setter
03F3   5E                     LD   e,(hl)   
03F4   23                     INC   hl   
03F5   56                     LD   d,(hl)   ; de = arg
03F6                ARG1A:       
03F6   D5                     PUSH   de   ; push arg
03F7   DD E9                  JP   (ix)   
03F9                LBRACK:      
03F9                ARRAYSTART:      
03F9   11 00 00               LD   de,0   ; create stack frame
03FC   D5                     PUSH   de   ; push null for IP
03FD   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0400   FD 56 05               LD   d,(iy+5)   ; 
0403   D5                     PUSH   de   ; 
0404   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0407   FD 56 03               LD   d,(iy+3)   ; 
040A   D5                     PUSH   de   ; 
040B   FD E5                  PUSH   iy   ; push BP
040D   FD 21 00 00            LD   iy,0   ; BP = SP
0411   FD 39                  ADD   iy,sp   
0413   DD E9                  JP   (ix)   
0415                RBRACK:      
0415                ARRAYEND:      
0415   FD 54                  LD   d,iyh   ; de = BP
0417   FD 5D                  LD   e,iyl   
0419   ED 43 00 4E            LD   (vTemp1),bc   ; save IP
041D   62 6B                  LD   hl,de   ; hl = de = BP
041F   B7                     OR   a   
0420   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0422   CB 3C                  SRL   h   ; 
0424   CB 1D                  RR   l   
0426   44 4D                  LD   bc,hl   ; bc = count
0428   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = array[-4]
042B   71                     LD   (hl),c   ; write num items in length word
042C   23                     INC   hl   
042D   70                     LD   (hl),b   
042E   23                     INC   hl   ; hl = array[0], bc = count
042F                             ; de = BP, hl = array[0], bc = count
042F   18 15                  JR   arrayEnd3   
0431                ARRAYEND1:      
0431   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0434   77                     LD   (hl),a   ; write lsb of array item
0435   23                     INC   hl   ; move to msb of array item
0436   3A E6 4D               LD   a,(vDataWidth)   ; vDataWidth=1?
0439   3D                     DEC   a   
043A   28 05                  JR   z,arrayEnd2   
043C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
043F   77                     LD   (hl),a   ; write msb of array item
0440   23                     INC   hl   ; move to next word in array
0441                ARRAYEND2:      
0441   FD 2B                  DEC   iy   ; move to next word on stack
0443   FD 2B                  DEC   iy   
0445   0B                     DEC   bc   ; dec items count
0446                ARRAYEND3:      
0446   79                     LD   a,c   ; if not zero loop
0447   B0                     OR   b   
0448   20 E7                  JR   nz,arrayEnd1   
044A   EB                     EX   de,hl   ; de = end of array, hl = BP
044B   F9                     LD   sp,hl   ; sp = BP
044C   E1                     POP   hl   ; de = end of array, hl = old BP
044D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
044E   FD 62                  LD   iyh,d   
0450   FD 6B                  LD   iyl,e   
0452   D1                     POP   de   ; pop arg_list (discard)
0453   D1                     POP   de   ; pop first_arg* (discard)
0454   D1                     POP   de   ; pop IP (discard)
0455   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = array[-2]
0459   13                     INC   de   
045A   13                     INC   de   
045B   D5                     PUSH   de   ; return array[0]
045C   22 F0 4D               LD   (vHeapPtr),hl   ; move heap* to end of array
045F   ED 4B 00 4E            LD   bc,(vTemp1)   ; restore IP
0463   DD E9                  JP   (ix)   
0465                             ; index of an array, based on vDataWidth
0465                             ; array num -- value    ; also sets vPointer to address
0465                HASH:        
0465                ARRAYINDEX:      
0465   E1                     POP   hl   ; hl = index
0466   D1                     POP   de   ; de = array
0467   3A E6 4D               LD   a,(vDataWidth)   ; a = data width
046A   3D                     DEC   a   
046B   28 01                  JR   z,arrayIndex1   
046D                ARRAYINDEX0:      
046D   29                     ADD   hl,hl   ; if data width = 2 then double
046E                ARRAYINDEX1:      
046E   19                     ADD   hl,de   ; add addr
046F   22 F2 4D               LD   (vPointer),hl   ; store address in setter
0472   16 00                  LD   d,0   
0474   5E                     LD   e,(hl)   
0475   B7                     OR   a   ; check data width again
0476   28 02                  JR   z,arrayIndex2   
0478   23                     INC   hl   
0479   56                     LD   d,(hl)   
047A                ARRAYINDEX2:      
047A   D5                     PUSH   de   
047B   DD E9                  JP   (ix)   
047D                             ; value _oldValue --            ; uses address in vPointer
047D                ASSIGN:      
047D   E1                     POP   hl   ; discard last accessed value
047E   E1                     POP   hl   ; hl = new value
047F                ASSIGN0:      
047F   EB                     EX   de,hl   ; de = new value
0480                ASSIGNX:      
0480   2A F2 4D               LD   hl,(vPointer)   
0483   73                     LD   (hl),e   
0484   3A E6 4D               LD   a,(vDataWidth)   
0487   3D                     DEC   a   ; is it byte?
0488   28 02                  JR   z,assign1   
048A   23                     INC   hl   
048B   72                     LD   (hl),d   
048C                ASSIGN1:      
048C   DD E9                  JP   (ix)   
048E                             ; arg_list - parses input (ab:c)
048E                             ; names after the : represent uninitialised locals
048E                             ; return values are the state of the stack after the block ends
048E                             ; format: numLocals totNumArgs argChars...
048E                COLON:       
048E                ARGLIST:      
048E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0491   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
0494   E5                     PUSH   hl   ; save start of arg_list
0495   23                     INC   hl   ; skip length fields to start of string
0496   23                     INC   hl   
0497   03                     INC   bc   ; point to next char
0498                ARGLIST1:      
0498   0A                     LD   a,(bc)   
0499   FE 3A                  CP   ":"   ; ":" switches from args to locals
049B   20 03                  JR   nz,arglist1a   
049D   14                     INC   d   ; non zero value local count acts as flag
049E   18 10                  JR   arglist3   
04A0                ARGLIST1A:      
04A0   FE 61                  CP   "a"   ; < "a" terminates arg_list
04A2   38 0F                  JR   c,arglist4   
04A4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04A6   30 0B                  JR   nc,arglist4   
04A8                ARGLIST2:      
04A8   77                     LD   (hl),a   
04A9   23                     INC   hl   
04AA   1C                     INC   e   ; increase arg count
04AB   AF                     XOR   a   
04AC   B2                     OR   d   
04AD   28 01                  JR   z,arglist3   
04AF   14                     INC   d   ; if d > 0 increase local count
04B0                ARGLIST3:      
04B0   03                     INC   bc   ; point to next char
04B1   18 E5                  JR   arglist1   
04B3                ARGLIST4:      
04B3   0B                     DEC   bc   
04B4   AF                     XOR   a   
04B5   B2                     OR   d   
04B6   28 01                  JR   z,arglist5   
04B8   15                     DEC   d   ; remove initial inc
04B9                ARGLIST5:      
04B9   23                     INC   hl   
04BA   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04BD   E1                     POP   hl   ; hl = start of arg_list
04BE   E5                     PUSH   hl   ; return start of arg_list
04BF   72                     LD   (hl),d   ; write number of locals at start - 1
04C0   23                     INC   hl   
04C1   73                     LD   (hl),e   ; write number of args + locals at start - 2
04C2   DD E9                  JP   (ix)   
04C4                LBRACE:      
04C4                BLOCKSTART:      
04C4   C5                     PUSH   bc   ; return pointer to first { of block
04C5   03                     INC   bc   
04C6   16 01                  LD   d,1   ; nesting: count first parenthesis
04C8                BLOCKSTART1:      ; Skip to end of definition
04C8   0A                     LD   a,(bc)   ; Get the next character
04C9   03                     INC   bc   ; Point to next character
04CA   FE 21                  CP   " " + 1   ; ignore whitespace
04CC   38 FA                  JR   c,blockStart1   
04CE   FE 29                  CP   ")"   
04D0   28 2D                  JR   z,blockStart4   
04D2   FE 7D                  CP   "}"   
04D4   28 29                  JR   z,blockStart4   
04D6   FE 5D                  CP   "]"   
04D8   28 25                  JR   z,blockStart4   
04DA   FE 28                  CP   "("   
04DC   28 16                  JR   z,blockStart2   
04DE   FE 7B                  CP   "{"   
04E0   28 12                  JR   z,blockStart2   
04E2   FE 5B                  CP   "["   
04E4   28 0E                  JR   z,blockStart2   
04E6   FE 27                  CP   "'"   
04E8   28 0D                  JR   z,blockStart3   
04EA   FE 60                  CP   "`"   
04EC   28 09                  JR   z,blockStart3   
04EE   FE 22                  CP   DQUOTE   
04F0   28 05                  JR   z,blockStart3   
04F2   18 D4                  JR   blockStart1   
04F4                BLOCKSTART2:      
04F4   14                     INC   d   
04F5   18 D1                  JR   blockStart1   
04F7                BLOCKSTART3:      
04F7   3E 80                  LD   a,$80   
04F9   AA                     XOR   d   
04FA   57                     LD   d,a   
04FB   20 CB                  JR   nz,blockStart1   
04FD   18 03                  JR   blockStart5   
04FF                BLOCKSTART4:      
04FF   15                     DEC   d   
0500   20 C6                  JR   nz,blockStart1   ; get the next element
0502                BLOCKSTART5:      
0502   60 69                  LD   hl,bc   ; hl = IP
0504   11 1E 4E               LD   de,HEAP   ; is IP pointing to object in heap
0507   B7                     OR   a   ; IP - HEAP
0508   ED 52                  SBC   hl,de   
050A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
050C   28 1C                  JR   z,blockStart6   
050E   60 69                  LD   hl,bc   ; hl = IP
0510   D1                     POP   de   ; de = block*
0511   ED 43 00 4E            LD   (vTemp1),bc   ; save IP
0515   B7                     OR   a   ; bc = size
0516   ED 52                  SBC   hl,de   
0518   44 4D                  LD   bc,hl   
051A   EB                     EX   de,hl   ; hl = block* de = heap*
051B   ED 5B F0 4D            LD   de,(vHeapPtr)   
051F   D5                     PUSH   de   ; return hblock*
0520   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0522   ED 53 F0 4D            LD   (vHeapPtr),de   ; heap* += size
0526   ED 4B 00 4E            LD   bc,(vTemp1)   ; restore IP
052A                BLOCKSTART6:      
052A   0B                     DEC   bc   ; balanced, exit
052B   DD E9                  JP   (ix)   
052D                RBRACE:      
052D                BLOCKEND:      
052D   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0530   FD 56 01               LD   d,(iy+1)   
0533   ED 53 00 4E            LD   (vTemp1),de   
0537   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
053A   FD 56 07               LD   d,(iy+7)   
053D   ED 53 02 4E            LD   (vTemp2),de   
0541   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0544   FD 56 03               LD   d,(iy+3)   
0547   EB                     EX   de,hl   
0548   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054B   FD 56 01               LD   d,(iy+1)   
054E   13                     INC   de   ; for carry flag <=
054F   B7                     OR   a   
0550   ED 52                  SBC   hl,de   
0552   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0554   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0556   FD 5D                  LD   e,iyl   
0558   21 08 00               LD   hl,8   
055B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055D   18 0C                  JR   blockEnd2   
055F                BLOCKEND1:      ; same scope
055F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0562   FD 56 03               LD   d,(iy+3)   
0565   EB                     EX   de,hl   
0566   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0568   FD 5D                  LD   e,iyl   
056A   EB                     EX   de,hl   
056B                BLOCKEND2:      
056B   44 4D                  LD   bc,hl   ; bc = hl = BP
056D   B7                     OR   a   ; hl = BP - SP = count
056E   ED 72                  SBC   hl,sp   
0570   7D                     LD   a,l   
0571   B4                     OR   h   
0572   28 09                  JR   z,blockEnd3   
0574   C5                     PUSH   bc   ; bc = count, hl = BP
0575   44 4D                  LD   bc,hl   
0577   E1                     POP   hl   
0578   2B                     DEC   hl   ; hl = BP-1
0579   1B                     DEC   de   ; de = args*-1
057A   ED B8                  LDDR      
057C   13                     INC   de   
057D                BLOCKEND3:      
057D   EB                     EX   de,hl   ; sp = de = new tos*
057E   F9                     LD   sp,hl   
057F   ED 4B 02 4E            LD   bc,(vTemp2)   
0583   FD 2A 00 4E            LD   iy,(vTemp1)   
0587   DD E9                  JP   (ix)   
0589                TICK:        
0589                CHAR:        
0589   21 00 00               LD   hl,0   ; if "" is empty or null
058C                CHAR1:       
058C   03                     INC   bc   ; point to next char
058D   0A                     LD   a,(bc)   
058E   FE 27                  CP   "'"   ; ' is the terminator
0590   28 09                  JR   z,char3   
0592   FE 5C                  CP   $5c   ; \ is the escape
0594   20 02                  JR   nz,char2   
0596   03                     INC   bc   
0597   0A                     LD   a,(bc)   
0598                CHAR2:       
0598   6F                     LD   l,a   
0599   18 F1                  JR   char1   
059B                CHAR3:       
059B   E5                     PUSH   hl   
059C   DD E9                  JP   (ix)   
059E                BACKSLASH:      
059E   DD E9                  JP   (ix)   
05A0                             ; , discard stack item
05A0                             ; x y -- x
05A0                COMMA:       
05A0                DISCARD:      
05A0   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A2   FD 5D                  LD   e,iyl   
05A4   EB                     EX   de,hl   
05A5   B7                     OR   a   
05A6   ED 72                  SBC   hl,sp   
05A8   CB 7C                  BIT   7,h   
05AA   20 01                  JR   nz,discard1   
05AC   E1                     POP   hl   
05AD                DISCARD1:      
05AD   DD E9                  JP   (ix)   
05AF                SLASH:       
05AF                COMMAND:      
05AF   CD D1 0A               CALL   jumpTable   
05B2   2F                     DB   "/"   
05B3   12 08                  DW   comment   
05B5   61                     DB   "a"   
05B6   1B 08                  DW   command_a   
05B8   62                     DB   "b"   
05B9   55 08                  DW   command_b   
05BB   63                     DB   "c"   
05BC   77 0A                  DW   chars   
05BE   64                     DB   "d"   
05BF   7F 0A                  DW   decimal   
05C1   66                     DB   "f"   
05C2   3F 06                  DW   false1   
05C4   68                     DB   "h"   
05C5   87 0A                  DW   hexadecimal   
05C7   69                     DB   "i"   
05C8   A3 09                  DW   command_i   
05CA   6B                     DB   "k"   
05CB   98 0A                  DW   key   
05CD   6E                     DB   "n"   
05CE   AA 0A                  DW   numbers   
05D0   6F                     DB   "o"   
05D1   A1 0A                  DW   output   
05D3   70                     DB   "p"   
05D4   AF 09                  DW   command_p   
05D6   72                     DB   "r"   
05D7   1B 0A                  DW   command_r   
05D9   73                     DB   "s"   
05DA   2A 0A                  DW   size   
05DC   74                     DB   "t"   
05DD   39 06                  DW   true1   
05DF   76                     DB   "v"   
05E0   32 0A                  DW   command_v   
05E2   78                     DB   "x"   
05E3   B4 03                  DW   xor   
05E5   00                     DB   NUL   
05E6   E8 05                  DW   div   
05E8                DIV:         
05E8   D1                     POP   de   
05E9   E1                     POP   hl   
05EA   C5                     PUSH   bc   ; preserve the IP
05EB   44 4D                  LD   bc,hl   
05ED   CD 0B 06               CALL   divide   
05F0   EB                     EX   de,hl   
05F1   ED 53 F4 4D            LD   (vRemain),de   
05F5   C1                     POP   bc   
05F6   C3 93 03               JP   add3   
05F9                DOT:         
05F9   CD D1 0A               CALL   jumpTable   
05FC   61                     DB   "a"   
05FD   70 08                  DW   bufferArray   
05FF   63                     DB   "c"   
0600   82 09                  DW   bufferChar   
0602   73                     DB   "s"   
0603   68 09                  DW   bufferString   
0605   78                     DB   "x"   
0606   87 09                  DW   bufferXChars   
0608   00                     DB   NUL   
0609   A9 08                  DW   bufferNumber   
060B                             ; division subroutine.
060B                             ; bc: divisor, de: dividend, hl: remainder
060B                DIVIDE:      
060B   21 00 00               LD   hl,0   ; zero the remainder
060E   3E 10                  LD   a,16   ; loop counter
0610                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0610   CB 21                  SLA   c   
0612   CB 10                  RL   b   
0614   ED 6A                  ADC   hl,hl   
0616   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0618   38 03                  JR   c,divide2   
061A   0C                     INC   c   
061B   18 01                  JR   divide3   
061D                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
061D   19                     ADD   hl,de   
061E                DIVIDE3:      
061E   3D                     DEC   a   
061F   20 EF                  JR   nz,divide1   
0621   50 59                  LD   de,bc   ; result from bc to de
0623   C9                     RET      
0624                             ; hl = value1, de = value2
0624                             ; hl = result
0624                EQUALS:      
0624   B7                     OR   a   ; reset the carry flag
0625   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0627   28 10                  JR   z,true1   
0629   C3 3F 06               JP   false1   
062C                             ; hl = value1 de = value2
062C                             ; hl = result
062C                LESSTHANEQ:      
062C   B7                     OR   a   
062D   ED 52                  SBC   hl,de   
062F   18 05                  JR   lessthan1   
0631                             ; hl = value1 de = value2
0631                             ; hl = result
0631                LESSTHAN:      
0631   B7                     OR   a   
0632   ED 52                  SBC   hl,de   
0634   28 09                  JR   z,false1   
0636                LESSTHAN1:      
0636   FA 3F 06               JP   m,false1   
0639                TRUE1:       
0639   21 FF FF               LD   hl,TRUE   
063C   E5                     PUSH   hl   
063D   DD E9                  JP   (ix)   
063F                NULL1:       
063F                FALSE1:      
063F   21 00 00               LD   hl,FALSE   
0642   E5                     PUSH   hl   
0643   DD E9                  JP   (ix)   
0645                             ; execute a block of code which ends with }
0645                             ; creates a root scope if BP == stack
0645                             ; else uses outer scope
0645                CARET:       
0645                GO:          
0645   D1                     POP   de   ; de = block*
0646                GO1:         
0646   7B                     LD   a,e   ; if block* == null, exit
0647   B2                     OR   d   
0648   20 02                  JR   nz,go2   
064A   DD E9                  JP   (ix)   
064C                GO2:         
064C   1A                     LD   a,(de)   
064D   FE 7B                  CP   "{"   
064F   28 06                  JR   z,goBlock1   
0651   FE 28                  CP   "("   
0653   C2 8A 06               JP   nz,goLambda   
0656                             ; inc de                      ; de is the address to jump back to
0656   D5                     PUSH   de   ; push de just before stack frame
0657                GOBLOCK:      
0657                GOBLOCK1:      
0657   ED 53 00 4E            LD   (vTemp1),de   ; save de
065B   21 00 4B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
065E   FD 54                  LD   d,iyh   
0660   FD 5D                  LD   e,iyl   
0662   B7                     OR   a   ; if stack* == BP then this is the root_scope
0663   ED 52                  SBC   hl,de   
0665   ED 5B 00 4E            LD   de,(vTemp1)   ; restore de
0669   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
066A   B4                     OR   h   
066B   3E 00                  LD   a,0   
066D   28 6A                  JR   z,goLambda8   
066F   C5                     PUSH   bc   ; push IP
0670   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0673   FD 46 05               LD   b,(iy+5)   
0676   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0679   FD 66 03               LD   h,(iy+3)   
067C                GOBLOCK2:      
067C   C5                     PUSH   bc   ; arg_list*
067D   E5                     PUSH   hl   ; first_arg*
067E   FD E5                  PUSH   iy   ; push BP
0680   FD 21 00 00            LD   iy,0   ; BP = SP
0684   FD 39                  ADD   iy,sp   
0686   42 4B                  LD   bc,de   ; bc = de = block*-1
0688   DD E9                  JP   (ix)   
068A                GOLAMBDA:      ; execute lambda
068A   EB                     EX   de,hl   ; hl = lambda*
068B   5E                     LD   e,(hl)   ; de = partial_array*
068C   23                     INC   hl   
068D   56                     LD   d,(hl)   
068E   23                     INC   hl   
068F   7B                     LD   a,e   ; if partial_array* == null skip
0690   B2                     OR   d   
0691   28 21                  JR   z,goLambda3   
0693   ED 43 00 4E            LD   (vTemp1),bc   
0697   22 02 4E               LD   (vTemp2),hl   ; save bc,hl
069A   EB                     EX   de,hl   ; hl = partial_array*
069B   2B                     DEC   hl   ; bc = count
069C   46                     LD   b,(hl)   
069D   2B                     DEC   hl   
069E   4E                     LD   c,(hl)   
069F   23                     INC   hl   ; hl = array data*
06A0   23                     INC   hl   
06A1   18 06                  JR   goLambda2   ; push each item on stack
06A3                GOLAMBDA1:      
06A3   5E                     LD   e,(hl)   ; de = partial item
06A4   23                     INC   hl   
06A5   56                     LD   d,(hl)   
06A6   23                     INC   hl   
06A7   D5                     PUSH   de   ; push on stack
06A8   0B                     DEC   bc   
06A9                GOLAMBDA2:      
06A9   79                     LD   a,c   ; if count != 0 then loop
06AA   B0                     OR   b   
06AB   20 F6                  JR   nz,goLambda1   
06AD   ED 4B 00 4E            LD   bc,(vTemp1)   ; restore bc
06B1   2A 02 4E               LD   hl,(vTemp2)   ; restore hl
06B4                GOLAMBDA3:      
06B4   5E                     LD   e,(hl)   ; de = block*
06B5   23                     INC   hl   
06B6   56                     LD   d,(hl)   
06B7   23                     INC   hl   
06B8   ED 53 00 4E            LD   (vTemp1),de   ; save block*
06BC   5E                     LD   e,(hl)   ; de = arg_list*
06BD   23                     INC   hl   
06BE   56                     LD   d,(hl)   
06BF   23                     INC   hl   
06C0   EB                     EX   de,hl   ; hl = arg_list*
06C1   ED 5B 00 4E            LD   de,(vTemp1)   ; restore de = block*
06C5   7D                     LD   a,l   ; if arg_list* == null a = 0
06C6   B4                     OR   h   
06C7   20 03                  JR   nz,goLambda4   
06C9   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06CA   18 0D                  JR   goLambda8   
06CC                GOLAMBDA4:      ; allocate locals
06CC   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
06CD   18 03                  JR   goLambda6   
06CF                GOLAMBDA5:      ; loop
06CF   3B                     DEC   sp   
06D0   3B                     DEC   sp   
06D1   3D                     DEC   a   
06D2                GOLAMBDA6:      
06D2   B7                     OR   a   
06D3   20 FA                  JR   nz,goLambda5   ; end loop
06D5                GOLAMBDA7:      
06D5   23                     INC   hl   ; a = num_args* x 2
06D6   7E                     LD   a,(hl)   
06D7   2B                     DEC   hl   
06D8   87                     ADD   a,a   ; a *= 2
06D9                GOLAMBDA8:      
06D9   C5                     PUSH   bc   ; push IP
06DA   44 4D                  LD   bc,hl   
06DC   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DF   85                     ADD   a,l   
06E0   6F                     LD   l,a   
06E1   39                     ADD   hl,sp   
06E2   18 98                  JR   goBlock2   
06E4                DOLLAR:      
06E4                HEXNUM:      
06E4   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E7                HEXNUM1:      
06E7   03                     INC   bc   
06E8   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E9   CB 77                  BIT   6,a   ; is it uppercase alpha?
06EB   28 02                  JR   z,hexnum2   ; no a decimal
06ED   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EF                HEXNUM2:      
06EF   D6 30                  SUB   $30   ; form decimal digit
06F1   DA 6F 07               JP   c,num2   
06F4   FE 10                  CP   $0F+1   
06F6   D2 6F 07               JP   nc,num2   
06F9   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06FA   29                     ADD   hl,hl   ; 4X
06FB   29                     ADD   hl,hl   ; 8X
06FC   29                     ADD   hl,hl   ; 16X
06FD   85                     ADD   a,l   ; add into bottom of hl
06FE   6F                     LD   l,a   
06FF   18 E6                  JR   hexnum1   
0701                UPCASE:      
0701   0A                     LD   a,(bc)   ; a = identifier char
0702   D6 41                  SUB   "A"   ; "A" = 0
0704   18 05                  JR   ident1   
0706                LOWCASE:      
0706   0A                     LD   a,(bc)   
0707   D6 61                  SUB   "a"   
0709   C6 1A                  ADD   a,26   
070B                IDENT1:      
070B   87                     ADD   a,a   ; l = a * 2
070C   6F                     LD   l,a   
070D   26 4D                  LD   h,msb(vars)   
070F   22 F2 4D               LD   (vPointer),hl   ; store address in setter
0712   5E                     LD   e,(hl)   
0713   23                     INC   hl   
0714   56                     LD   d,(hl)   
0715   D5                     PUSH   de   
0716   DD E9                  JP   (ix)   
0718                             ; if
0718                             ; condition then -- value
0718                QUESTION:      
0718                IF:          
0718   03                     INC   bc   
0719   0A                     LD   a,(bc)   
071A   FE 3F                  CP   "?"   
071C   28 06                  JR   z,ifte   
071E   0B                     DEC   bc   
071F   11 00 00               LD   de,NUL   ; NUL pointer for else
0722   18 01                  JR   ifte1   
0724                             ; ifte
0724                             ; condition then else -- value
0724                IFTE:        
0724   D1                     POP   de   ; de = else
0725                IFTE1:       
0725   E1                     POP   hl   ; hl = then
0726   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0727   7C                     LD   a,h   
0728   B5                     OR   l   
0729   E1                     POP   hl   ; hl = then
072A   CA 46 06               JP   z,go1   ; if z de = else
072D   EB                     EX   de,hl   ; condition = false, de = then
072E   C3 46 06               JP   go1   
0731                STAR:        
0731                MUL:         
0731   D1                     POP   de   ; get first value
0732   E1                     POP   hl   
0733                MUL2:        
0733   C5                     PUSH   bc   ; Preserve the IP
0734   44 4D                  LD   bc,hl   ; bc = 2nd value
0736   21 00 00               LD   hl,0   
0739   3E 10                  LD   a,16   
073B                MUL3:        
073B   29                     ADD   hl,hl   
073C   CB 13                  RL   e   
073E   CB 12                  RL   d   
0740   30 04                  JR   nc,$+6   
0742   09                     ADD   hl,bc   
0743   30 01                  JR   nc,$+3   
0745   13                     INC   de   
0746   3D                     DEC   a   
0747   20 F2                  JR   nz,mul3   
0749   C1                     POP   bc   ; Restore the IP
074A   C3 93 03               JP   add3   
074D                NUM:         
074D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0750   0A                     LD   a,(bc)   ; Get numeral or -
0751   FE 2D                  CP   "-"   
0753   20 01                  JR   nz,num0   
0755   03                     INC   bc   ; move to next char, no flags affected
0756                NUM0:        
0756   08                     EX   af,af'   ; save zero flag = 0 for later
0757                NUM1:        
0757   0A                     LD   a,(bc)   ; read digit
0758   D6 30                  SUB   "0"   ; less than 0?
075A   38 13                  JR   c,num2   ; not a digit, exit loop
075C   FE 0A                  CP   10   ; greater that 9?
075E   30 0F                  JR   nc,num2   ; not a digit, exit loop
0760   03                     INC   bc   ; inc IP
0761   54 5D                  LD   de,hl   ; multiply hl * 10
0763   29                     ADD   hl,hl   
0764   29                     ADD   hl,hl   
0765   19                     ADD   hl,de   
0766   29                     ADD   hl,hl   
0767   85                     ADD   a,l   ; add digit in a to hl
0768   6F                     LD   l,a   
0769   3E 00                  LD   a,0   
076B   8C                     ADC   a,h   
076C   67                     LD   h,a   
076D   18 E8                  JR   num1   
076F                NUM2:        
076F   0B                     DEC   bc   
0770   08                     EX   af,af'   ; restore zero flag
0771   20 07                  JR   nz,num3   
0773   EB                     EX   de,hl   ; negate the value of hl
0774   21 00 00               LD   hl,0   
0777   B7                     OR   a   ; jump to sub2
0778   ED 52                  SBC   hl,de   
077A                NUM3:        
077A   E5                     PUSH   hl   ; Put the number on the stack
077B   DD E9                  JP   (ix)   ; and process the next character
077D                RPAREN:      
077D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0780   FD 46 09               LD   b,(iy+9)   
0783   DD E9                  JP   (ix)   
0785                             ; arg_list* block* -- ptr
0785                SEMICOLON:      
0785   D1                     POP   de   ; de = block* hl = heap*
0786   2A F0 4D               LD   hl,(vHeapPtr)   
0789   AF                     XOR   a   
078A   77                     LD   (hl),a   ; compile null partial_array*
078B   23                     INC   hl   
078C   77                     LD   (hl),a   
078D   23                     INC   hl   
078E   73                     LD   (hl),e   ; compile block*
078F   23                     INC   hl   
0790   72                     LD   (hl),d   
0791   23                     INC   hl   
0792   D1                     POP   de   ; de = block*
0793   73                     LD   (hl),e   ; compile arg_list*
0794   23                     INC   hl   
0795   72                     LD   (hl),d   
0796   23                     INC   hl   
0797   ED 5B F0 4D            LD   de,(vHeapPtr)   ; return lambda*
079B   D5                     PUSH   de   
079C   22 F0 4D               LD   (vHeapPtr),hl   ; heap* += 4
079F   DD E9                  JP   (ix)   
07A1                             ; shiftLeft
07A1                             ; value count -- value2          shift left count places
07A1                SHIFTLEFT:      
07A1   50 59                  LD   de,bc   ; save IP
07A3   C1                     POP   bc   ; bc = count
07A4   41                     LD   b,c   ; b = loop counter
07A5   E1                     POP   hl   
07A6   04                     INC   b   ; test for counter=0 case
07A7   18 01                  JR   shiftLeft2   
07A9                SHIFTLEFT1:      
07A9   29                     ADD   hl,hl   ; left shift hl
07AA                SHIFTLEFT2:      
07AA   10 FD                  DJNZ   shiftLeft1   
07AC   E5                     PUSH   hl   
07AD   42 4B                  LD   bc,de   ; restore IP
07AF   DD E9                  JP   (ix)   
07B1                             ; shiftRight
07B1                             ; value count -- value2          shift left count places
07B1                SHIFTRIGHT:      
07B1   50 59                  LD   de,bc   ; save IP
07B3   C1                     POP   bc   ; bc = count
07B4   41                     LD   b,c   ; b = loop counter
07B5   E1                     POP   hl   
07B6   04                     INC   b   ; test for counter=0 case
07B7   18 04                  JR   shiftRight2   
07B9                SHIFTRIGHT1:      
07B9   CB 3C                  SRL   h   ; right shift hl
07BB   CB 1D                  RR   l   
07BD                SHIFTRIGHT2:      
07BD   10 FA                  DJNZ   shiftRight1   
07BF   E5                     PUSH   hl   
07C0   42 4B                  LD   bc,de   ; restore IP
07C2   DD E9                  JP   (ix)   
07C4                             ; string
07C4                             ; -- ptr                        ; points to start of string chars,
07C4                             ; length is stored at start - 2 bytes
07C4                DBLQUOTE:      
07C4                STRING:      
07C4   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
07C7   23                     INC   hl   ; skip length field to start
07C8   23                     INC   hl   
07C9   E5                     PUSH   hl   ; save start of string
07CA   03                     INC   bc   ; point to next char
07CB   18 03                  JR   string2   
07CD                STRING1:      
07CD   77                     LD   (hl),a   
07CE   23                     INC   hl   ; increase count
07CF   03                     INC   bc   ; point to next char
07D0                STRING2:      
07D0   0A                     LD   a,(bc)   
07D1   FE 22                  CP   DQUOTE   ; " is the string terminator
07D3   28 04                  JR   z,string3   
07D5   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D7   20 F4                  JR   nz,string1   
07D9                STRING3:      
07D9   AF                     XOR   a   ; write NUL to terminate string
07DA   77                     LD   (hl),a   ; hl = end of string
07DB   23                     INC   hl   
07DC   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07DF   2B                     DEC   hl   ; hl = end of string without terminator
07E0   D1                     POP   de   ; de = start of string
07E1   D5                     PUSH   de   ; return start of string
07E2   B7                     OR   a   ; hl = length bytes, de = start of string
07E3   ED 52                  SBC   hl,de   
07E5   EB                     EX   de,hl   
07E6   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E7   72                     LD   (hl),d   
07E8   2B                     DEC   hl   
07E9   73                     LD   (hl),e   
07EA   DD E9                  JP   (ix)   
07EC                MINUS:       ; negative sign or subtract
07EC   03                     INC   bc   ; check if sign of a number
07ED   0A                     LD   a,(bc)   
07EE   0B                     DEC   bc   
07EF   FE 30                  CP   "0"   
07F1   38 05                  JR   c,sub   
07F3   FE 3A                  CP   "9"+1   
07F5   DA 3B 03               JP   c,num_   
07F8                SUB:         ; Subtract the value 2nd on stack from top of stack
07F8   03                     INC   bc   
07F9   FE 2D                  CP   "-"   
07FB   20 05                  JR   nz,sub1   
07FD   E1                     POP   hl   
07FE   2B                     DEC   hl   
07FF   C3 7F 04               JP   assign0   
0802                SUB1:        
0802   0B                     DEC   bc   
0803   D1                     POP   de   
0804   E1                     POP   hl   
0805   B7                     OR   a   
0806   ED 52                  SBC   hl,de   
0808   C3 93 03               JP   add3   
080B                ERROR1:      
080B   21 01 00               LD   hl,1   ; error 1: unknown command
080E   E5                     PUSH   hl   
080F   C3 55 0C               JP   error   
0812                COMMENT:      
0812   03                     INC   bc   ; point to next char
0813   0A                     LD   a,(bc)   
0814   FE 20                  CP   " "   ; terminate on any char less than SP
0816   30 FA                  JR   nc,comment   
0818   0B                     DEC   bc   
0819   DD E9                  JP   (ix)   
081B                COMMAND_A:      
081B   CD D1 0A               CALL   jumpTable   
081E   62                     DB   "b"   
081F   27 08                  DW   absolute   
0821   64                     DB   "d"   
0822   34 08                  DW   addrOf   
0824   00                     DB   NUL   
0825   0B 08                  DW   error1   
0827                             ; /ab absolute
0827                             ; num -- num
0827                ABSOLUTE:      
0827   E1                     POP   hl   
0828   CB 7C                  BIT   7,h   
082A   C8                     RET   z   
082B   AF                     XOR   a   
082C   95                     SUB   l   
082D   6F                     LD   l,a   
082E   9F                     SBC   a,a   
082F   94                     SUB   h   
0830   67                     LD   h,a   
0831   E5                     PUSH   hl   
0832   DD E9                  JP   (ix)   
0834                             ; /ad addrOf
0834                             ; char -- addr
0834                ADDROF:      
0834   E1                     POP   hl   ; a = char
0835   7D                     LD   a,l   
0836   FE 7B                  CP   "z"+1   ; if a > z then exit
0838   30 19                  JR   nc,addrOf2   
083A   D6 41                  SUB   "A"   ; a - 65
083C   38 15                  JR   c,addrOf2   ; if < A then exit
083E   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0840   38 06                  JR   c,addrOf1   
0842   D6 06                  SUB   "a"-("Z"+1)   
0844   FE 1A                  CP   "Z"-"A"+1   
0846   38 0B                  JR   c,addrOf2   ; if < a then exit
0848                ADDROF1:      
0848   87                     ADD   a,a   ; double a
0849   21 00 4D               LD   hl,VARS   ; hl = VARS + a
084C   85                     ADD   a,l   
084D   6F                     LD   l,a   
084E   3E 00                  LD   a,0   
0850   8C                     ADC   a,h   
0851   67                     LD   h,a   
0852   E5                     PUSH   hl   
0853                ADDROF2:      
0853   DD E9                  JP   (ix)   
0855                COMMAND_B:      
0855   CD D1 0A               CALL   jumpTable   
0858   61                     DB   "a"   
0859   70 08                  DW   bufferArray   
085B   63                     DB   "c"   
085C   82 09                  DW   bufferChar   
085E   6E                     DB   "n"   
085F   A9 08                  DW   bufferNumber   
0861   72                     DB   "r"   
0862   4E 09                  DW   break   
0864   73                     DB   "s"   
0865   68 09                  DW   bufferString   
0867   78                     DB   "x"   
0868   87 09                  DW   bufferXChars   
086A   79                     DB   "y"   
086B   98 0B                  DW   coldStart   
086D   00                     DB   NUL   
086E   0B 08                  DW   error1   
0870                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
0870                BUFFERARRAY:      
0870   CD 45 06               CALL   go   
0873   00 00                  DW   NUL   
0875   7E 08                  DW   bufferArrayM_1789S1278   
0877   79 08                  DW   $+2   
0879   02                     DB   2   
087A   03 61 62 63            .PSTR   "abc"   
087E                BUFFERARRAYM_1789S1278:      
087E   7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2F 62 64 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 00 .CSTR   "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}"   ; block
08A9                             ; /bd buffer decimal
08A9                             ; value --
08A9                BUFFERNUMBER:      
08A9   3A E8 4D               LD   a,(vNumBase)   
08AC   FE 10                  CP   16   
08AE   28 66                  JR   z,bufferHex   ; else falls through
08B0                             ; /bd buffer decimal
08B0                             ; value --
08B0                BUFFERDEC:      
08B0   ED 5B EC 4D            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08B4   D9                     EXX      
08B5   E1                     POP   hl   ; hl = value
08B6   CD CA 08               CALL   bufferDec0   
08B9   D9                     EXX      ; de = buffer*' bc = IP
08BA   3E 20                  LD   a," "   ; append space to buffer
08BC   12                     LD   (de),a   
08BD   1C                     INC   e   ; buffer*++, wraparound
08BE   CC BA 0A               CALL   z,flushBuffer   
08C1   2A EC 4D               LD   hl,(vBufPtr)   ; hl = buffer*
08C4   ED 53 EC 4D            LD   (vBufPtr),de   ; update buffer* with buffer*'
08C8   DD E9                  JP   (ix)   
08CA                             ; hl = value
08CA                             ; de' = buffer*
08CA                             ; a, bc, de, hl destroyed
08CA                BUFFERDEC0:      
08CA   CB 7C                  BIT   7,h   
08CC   28 0C                  JR   z,bufferDec1   
08CE   D9                     EXX      
08CF   3E 2D                  LD   a,"-"   
08D1   12                     LD   (de),a   
08D2   13                     INC   de   
08D3   D9                     EXX      
08D4   AF                     XOR   a   
08D5   95                     SUB   l   
08D6   6F                     LD   l,a   
08D7   9F                     SBC   a,a   
08D8   94                     SUB   h   
08D9   67                     LD   h,a   
08DA                BUFFERDEC1:      
08DA   0E 00                  LD   c,0   ; leading zeros flag = false
08DC   11 F0 D8               LD   de,-10000   
08DF   CD FA 08               CALL   bufferDec2   
08E2   11 18 FC               LD   de,-1000   
08E5   CD FA 08               CALL   bufferDec2   
08E8   11 9C FF               LD   de,-100   
08EB   CD FA 08               CALL   bufferDec2   
08EE   1E F6                  LD   e,-10   
08F0   CD FA 08               CALL   bufferDec2   
08F3   0C                     INC   c   ; flag = true for at least digit
08F4   1E FF                  LD   e,-1   
08F6   CD FA 08               CALL   bufferDec2   
08F9   C9                     RET      
08FA                BUFFERDEC2:      
08FA   06 2F                  LD   b,"0"-1   
08FC                BUFFERDEC3:      
08FC   04                     INC   b   
08FD   19                     ADD   hl,de   
08FE   38 FC                  JR   c,bufferDec3   
0900   ED 52                  SBC   hl,de   
0902   3E 30                  LD   a,"0"   
0904   B8                     CP   b   
0905   20 05                  JR   nz,bufferDec4   
0907   AF                     XOR   a   
0908   B1                     OR   c   
0909   C8                     RET   z   
090A   18 01                  JR   bufferDec5   
090C                BUFFERDEC4:      
090C   0C                     INC   c   
090D                BUFFERDEC5:      
090D   78                     LD   a,b   
090E   D9                     EXX      
090F   12                     LD   (de),a   
0910   1C                     INC   e   
0911   CC BA 0A               CALL   z,flushBuffer   
0914   D9                     EXX      
0915   C9                     RET      
0916                             ; /bh buffer hex
0916                             ; value --
0916                BUFFERHEX:      
0916   E1                     POP   hl   ; hl = value
0917   ED 5B EC 4D            LD   de,(vBufPtr)   
091B   3E 24                  LD   a,"$"   ; # prefix
091D   12                     LD   (de),a   
091E   1C                     INC   e   ; buffer*++, wraparound
091F   CC BA 0A               CALL   z,flushBuffer   
0922   7C                     LD   a,h   
0923   CD 37 09               CALL   bufferHex1   
0926   7D                     LD   a,l   
0927   CD 37 09               CALL   bufferHex1   
092A   3E 20                  LD   a," "   ; append space to buffer
092C   12                     LD   (de),a   
092D   1C                     INC   e   ; buffer*++, wraparound
092E   CC BA 0A               CALL   z,flushBuffer   
0931   ED 53 EC 4D            LD   (vBufPtr),de   
0935   DD E9                  JP   (ix)   
0937                BUFFERHEX1:      
0937   F5                     PUSH   af   
0938   1F                     RRA      
0939   1F                     RRA      
093A   1F                     RRA      
093B   1F                     RRA      
093C   CD 40 09               CALL   bufferHex2   
093F   F1                     POP   af   
0940                BUFFERHEX2:      
0940   E6 0F                  AND   0x0F   
0942   C6 90                  ADD   a,0x90   
0944   27                     DAA      
0945   CE 40                  ADC   a,0x40   
0947   27                     DAA      
0948   12                     LD   (de),a   
0949   1C                     INC   e   ; buffer*++, wraparound
094A   CC BA 0A               CALL   z,flushBuffer   
094D   C9                     RET      
094E                             ; /br break from loop
094E                             ; --
094E                BREAK:       
094E   E1                     POP   hl   
094F   7D                     LD   a,l   
0950   B4                     OR   h   
0951   28 02                  JR   z,break1   
0953   DD E9                  JP   (ix)   
0955                BREAK1:      
0955   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0957   FD 54                  LD   d,iyh   
0959   21 08 00               LD   hl,8   
095C   19                     ADD   hl,de   
095D   23                     INC   hl   
095E   23                     INC   hl   
095F   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0962   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0965   C3 2D 05               JP   blockEnd   
0968                             ; /bs buffered string
0968                             ; string* --
0968                BUFFERSTRING:      
0968   E1                     POP   hl   ; hl = string*
0969   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
096D   18 06                  JR   bufferString1   
096F                BUFFERSTRING0:      
096F   12                     LD   (de),a   ; a -> buffer*
0970   1C                     INC   e   ; buffer*++, wraparound
0971   CC BA 0A               CALL   z,flushBuffer   
0974   23                     INC   hl   
0975                BUFFERSTRING1:      
0975   7E                     LD   a,(hl)   ; a <- string*
0976   B7                     OR   a   ; if NUL exit loop
0977   20 F6                  JR   nz,bufferString0   
0979   2A EC 4D               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
097C   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*' in pointer
0980   DD E9                  JP   (ix)   
0982                             ; /bc buffer char
0982                             ; char --
0982                BUFFERCHAR:      
0982   21 01 00               LD   hl,1   
0985   18 01                  JR   bufferXChars0   
0987                             ; /bx buffered x chars
0987                             ; char length --
0987                BUFFERXCHARS:      
0987   E1                     POP   hl   ; hl = length
0988                BUFFERXCHARS0:      
0988   D1                     POP   de   ; a' = char
0989   7B                     LD   a,e   
098A   08                     EX   af,af'   
098B   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
098F   18 08                  JR   bufferXChars2   
0991                BUFFERXCHARS1:      
0991   08                     EX   af,af'   
0992   12                     LD   (de),a   
0993   08                     EX   af,af'   
0994   1C                     INC   e   ; buffer*++, wraparound
0995   CC BA 0A               CALL   z,flushBuffer   
0998   2B                     DEC   hl   
0999                BUFFERXCHARS2:      
0999   7D                     LD   a,l   
099A   B4                     OR   h   
099B   20 F4                  JR   nz,bufferXChars1   
099D   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*'
09A1   DD E9                  JP   (ix)   
09A3                COMMAND_I:      
09A3   CD D1 0A               CALL   jumpTable   
09A6   6E                     DB   "n"   
09A7   8D 0A                  DW   input   
09A9   76                     DB   "v"   
09AA   BF 03                  DW   invert   
09AC   00                     DB   NUL   
09AD   0B 08                  DW   error1   
09AF                COMMAND_P:      
09AF   CD D1 0A               CALL   jumpTable   
09B2   61                     DB   "a"   
09B3   C1 09                  DW   partial   
09B5   62                     DB   "b"   
09B6   E1 09                  DW   printBuffer   
09B8   63                     DB   "c"   
09B9   07 0A                  DW   printChars   
09BB   6B                     DB   "k"   
09BC   19 0A                  DW   printStack   
09BE   00                     DB   NUL   
09BF   0B 08                  DW   error1   
09C1                             ; partial
09C1                             ; array* lambda* -- lambda1*
09C1                PARTIAL:      
09C1   E1                     POP   hl   ; h1 = lambda*
09C2   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09C6   ED 43 00 4E            LD   (vTemp1),bc   ; save IP
09CA   01 06 00               LD   bc,6   ; bc = count
09CD   ED B0                  LDIR      ; clone lambda
09CF   ED 4B 00 4E            LD   bc,(vTemp1)   ; restore IP
09D3   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09D6   ED 53 F0 4D            LD   (vHeapPtr),de   ; heap* += 6
09DA   D1                     POP   de   ; de = array*
09DB   E5                     PUSH   hl   ; return partial_array*
09DC   73                     LD   (hl),e   ; compile array*
09DD   23                     INC   hl   
09DE   72                     LD   (hl),d   
09DF   DD E9                  JP   (ix)   
09E1                             ; /pb printBuffer
09E1                             ; --
09E1                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
09E1                          ;*Macro unroll: FUNC printBuffer, 0, "a"
09E1                PRINTBUFFER:      
09E1   CD 45 06               CALL   go   
09E4   00 00                  DW   NUL   
09E6   ED 09                  DW   printBufferM_2008S1511   
09E8   EA 09                  DW   $+2   
09EA   00                     DB   0   
09EB   01 61                  .PSTR   "a"   
09ED                PRINTBUFFERM_2008S1511:      
09ED   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A07                             ; printChars
0A07                             ; char* len --
0A07                PRINTCHARS:      
0A07   E1                     POP   hl   ; hl = count
0A08   D1                     POP   de   ; de = char*
0A09   CD 14 0A               CALL   printChars2   
0A0C   DD E9                  JP   (ix)   
0A0E                PRINTCHARS1:      
0A0E   1A                     LD   a,(de)   ; print char at char*
0A0F   CD 85 00               CALL   putchar   
0A12   13                     INC   de   ; char*++
0A13   2B                     DEC   hl   ; count--
0A14                PRINTCHARS2:      
0A14   7D                     LD   a,l   ; count == 0?
0A15   B4                     OR   h   
0A16   C8                     RET   z   
0A17   18 F5                  JR   printChars1   ; if not loop
0A19                             ; /pk print stack
0A19                             ; --
0A19                PRINTSTACK:      
0A19                             ;     ld (vTemp1),bc
0A19                             ;     call printStr
0A19                             ;     .cstr "=> "
0A19                             ;     ld hl,STACK
0A19                             ;     sbc hl,sp
0A19                             ;     srl h
0A19                             ;     rr l
0A19                             ;     ld bc,hl
0A19                             ;     ld hl,STACK
0A19                             ;     jr printStack2
0A19                             ; printStack1:
0A19                             ;     dec bc
0A19                             ;     dec hl
0A19                             ;     ld d,(hl)
0A19                             ;     dec hl
0A19                             ;     ld e,(hl)
0A19                             ;     ex de,hl
0A19                             ;     call prthex
0A19                             ;     ex de,hl
0A19                             ;     ld a," "
0A19                             ;     call putchar
0A19                             ; printStack2:
0A19                             ;     ld a,c
0A19                             ;     or b
0A19                             ;     jr nz,printStack1
0A19                             ;     call prompt
0A19                             ;     ld bc,(vTemp1)
0A19   DD E9                  JP   (ix)   
0A1B                COMMAND_R:      
0A1B   CD D1 0A               CALL   jumpTable   
0A1E   65                     DB   "e"   
0A1F   24 0A                  DW   remain   
0A21   00                     DB   NUL   
0A22   0B 08                  DW   error1   
0A24                REMAIN:      
0A24   2A F4 4D               LD   hl,(vRemain)   
0A27   E5                     PUSH   hl   
0A28   DD E9                  JP   (ix)   
0A2A                SIZE:        
0A2A   E1                     POP   hl   
0A2B   2B                     DEC   hl   ; msb size
0A2C   56                     LD   d,(hl)   
0A2D   2B                     DEC   hl   ; lsb size
0A2E   5E                     LD   e,(hl)   
0A2F   D5                     PUSH   de   
0A30   DD E9                  JP   (ix)   
0A32                COMMAND_V:      
0A32   CD D1 0A               CALL   jumpTable   
0A35   62                     DB   "b"   
0A36   56 0A                  DW   varBufPtr   
0A38   68                     DB   "h"   
0A39   5F 0A                  DW   varHeapPtr   
0A3B   74                     DB   "t"   
0A3C   68 0A                  DW   varTIBPtr   
0A3E   42                     DB   "B"   
0A3F   47 0A                  DW   constBufStart   
0A41   54                     DB   "T"   
0A42   51 0A                  DW   constTIBStart   
0A44   00                     DB   NUL   
0A45   0B 08                  DW   error1   
0A47                CONSTBUFSTART:      
0A47   11 00 4C               LD   de,BUF   
0A4A   18 28                  JR   constant   
0A4C                CONSTHEAPSTART:      
0A4C   11 1E 4E               LD   de,HEAP   
0A4F   18 23                  JR   constant   
0A51                CONSTTIBSTART:      
0A51   11 00 4B               LD   de,TIB   
0A54   18 1E                  JR   constant   
0A56                VARBUFPTR:      
0A56   ED 5B EC 4D            LD   de,(vBufPtr)   
0A5A   21 EC 4D               LD   hl,vBufPtr   
0A5D   18 12                  JR   variable   
0A5F                VARHEAPPTR:      
0A5F   ED 5B F0 4D            LD   de,(vHeapPtr)   
0A63   21 F0 4D               LD   hl,vHeapPtr   
0A66   18 09                  JR   variable   
0A68                VARTIBPTR:      
0A68   ED 5B EA 4D            LD   de,(vTIBPtr)   
0A6C   21 EA 4D               LD   hl,vTIBPtr   
0A6F   18 00                  JR   variable   
0A71                VARIABLE:      
0A71   22 F2 4D               LD   (vPointer),hl   
0A74                CONSTANT:      
0A74   D5                     PUSH   de   
0A75   DD E9                  JP   (ix)   
0A77                CHARS:       
0A77   21 01 00               LD   hl,1   
0A7A                CHARS1:      
0A7A   22 E6 4D               LD   (vDataWidth),hl   
0A7D   DD E9                  JP   (ix)   
0A7F                DECIMAL:      
0A7F   21 0A 00               LD   hl,10   
0A82                DECIMAL1:      
0A82   22 E8 4D               LD   (vNumBase),hl   
0A85   DD E9                  JP   (ix)   
0A87                HEXADECIMAL:      
0A87   21 10 00               LD   hl,16   
0A8A   C3 82 0A               JP   decimal1   
0A8D                             ; Z80 port input
0A8D                             ; port -- value
0A8D                INPUT:       
0A8D   E1                     POP   hl   
0A8E   59                     LD   e,c   ; save IP
0A8F   4D                     LD   c,l   
0A90   ED 68                  IN   l,(c)   
0A92   26 00                  LD   h,0   
0A94   4B                     LD   c,e   ; restore IP
0A95   E5                     PUSH   hl   
0A96   DD E9                  JP   (ix)   
0A98                KEY:         
0A98   CD 81 00               CALL   getchar   
0A9B   26 00                  LD   h,0   
0A9D   6F                     LD   l,a   
0A9E   E5                     PUSH   hl   
0A9F   DD E9                  JP   (ix)   
0AA1                             ; Z80 port output
0AA1                             ; value port --
0AA1                OUTPUT:      
0AA1   E1                     POP   hl   
0AA2   59                     LD   e,c   ; save IP
0AA3   4D                     LD   c,l   
0AA4   E1                     POP   hl   
0AA5   ED 69                  OUT   (c),l   
0AA7   4B                     LD   c,e   ; restore IP
0AA8   DD E9                  JP   (ix)   
0AAA                NUMBERS:      
0AAA   21 02 00               LD   hl,2   
0AAD   C3 7A 0A               JP   chars1   
0AB0                             ; 
0AB0                             ; keyIter:
0AB0                             ;     call go
0AB0                             ;     .cstr "{/k /t}"             ; block
0AB0                             ; fromIter:
0AB0                             ;     call go
0AB0                             ;     dw NUL                      ; NUL closure
0AB0                             ;     dw $+4
0AB0                             ;     dw args1A0L
0AB0                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0AB0                             ; fromIter1:
0AB0                             ;     call go
0AB0                             ;     dw NUL                      ; NUL closure
0AB0                             ;     dw $+4
0AB0                             ;     dw args2A0L
0AB0                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0AB0                FILTER:      
0AB0                MAP:         
0AB0                SCAN:        
0AB0   DD E9                  JP   (ix)   
0AB2                             ;*******************************************************************
0AB2                             ; reusable arglists
0AB2                             ;*******************************************************************
0AB2                ARGS1A0L:      ; one arg zero locals
0AB2   00                     DB   0   
0AB3   01 61                  .PSTR   "a"   
0AB5                ARGS1A2L:      ; one arg two locals
0AB5   02                     DB   2   
0AB6   03 61 62 63            .PSTR   "abc"   
0ABA                             ;*******************************************************************
0ABA                             ; general routines
0ABA                             ;*******************************************************************
0ABA                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0ABA                FLUSHBUFFER:      
0ABA   F5                     PUSH   af   
0ABB   D5                     PUSH   de   
0ABC   E5                     PUSH   hl   
0ABD   2A EC 4D               LD   hl,(vBufPtr)   
0AC0   11 00 4C               LD   de,BUF   
0AC3   ED 53 EC 4D            LD   (vBufPtr),de   
0AC7   B7                     OR   a   
0AC8   ED 52                  SBC   hl,de   
0ACA   CD 14 0A               CALL   printChars2   
0ACD   E1                     POP   hl   
0ACE   D1                     POP   de   
0ACF   F1                     POP   af   
0AD0   C9                     RET      
0AD1                             ; followed by a table
0AD1                             ; db char
0AD1                             ; dw addr
0AD1                             ; the final item must have char == NUL
0AD1                JUMPTABLE:      
0AD1   03                     INC   bc   
0AD2   E1                     POP   hl   
0AD3                JUMPTABLE0:      
0AD3   AF                     XOR   a   
0AD4   BE                     CP   (hl)   
0AD5   28 09                  JR   z,jumpTable1   
0AD7   0A                     LD   a,(bc)   
0AD8   BE                     CP   (hl)   
0AD9   28 06                  JR   z,jumpTable2   
0ADB   23                     INC   hl   
0ADC   23                     INC   hl   
0ADD   23                     INC   hl   
0ADE   18 F3                  JR   jumpTable0   
0AE0                JUMPTABLE1:      
0AE0   0B                     DEC   bc   
0AE1                JUMPTABLE2:      
0AE1   23                     INC   hl   
0AE2   5E                     LD   e,(hl)   
0AE3   23                     INC   hl   
0AE4   56                     LD   d,(hl)   
0AE5   EB                     EX   de,hl   
0AE6   E9                     JP   (hl)   
0AE7                PRTSTR0:      
0AE7   CD 85 00               CALL   putchar   
0AEA   23                     INC   hl   
0AEB                PRTSTR:      
0AEB   7E                     LD   a,(hl)   
0AEC   B7                     OR   a   
0AED   20 F8                  JR   nz,prtstr0   
0AEF   C9                     RET      
0AF0                             ; **************************************************************************
0AF0                             ; calculate nesting value
0AF0                             ; a is char to be tested,
0AF0                             ; e is the nesting value (initially 0)
0AF0                             ; e is increased by ( and [
0AF0                             ; e is decreased by ) and ]
0AF0                             ; e has its bit 7 toggled by `
0AF0                             ; limited to 127 levels
0AF0                             ; **************************************************************************
0AF0                NESTING:      
0AF0   FE 22                  CP   DQUOTE   ; quote char
0AF2   28 06                  JR   z,nesting0   
0AF4   FE 60                  CP   "`"   ; quote char
0AF6   28 02                  JR   z,nesting0   
0AF8   18 0A                  JR   nesting1   
0AFA                NESTING0:      
0AFA   CB 7B                  BIT   7,e   
0AFC   28 03                  JR   z,nesting1a   
0AFE   CB BB                  RES   7,e   
0B00   C9                     RET      
0B01                NESTING1A:      
0B01   CB FB                  SET   7,e   
0B03   C9                     RET      
0B04                NESTING1:      
0B04   CB 7B                  BIT   7,e   
0B06   C0                     RET   nz   
0B07   FE 7B                  CP   "{"   
0B09   28 08                  JR   z,nesting2   
0B0B   FE 5B                  CP   "["   
0B0D   28 04                  JR   z,nesting2   
0B0F   FE 28                  CP   "("   
0B11   20 02                  JR   nz,nesting3   
0B13                NESTING2:      
0B13   1C                     INC   e   
0B14   C9                     RET      
0B15                NESTING3:      
0B15   FE 7D                  CP   "}"   
0B17   28 07                  JR   z,nesting4   
0B19   FE 5D                  CP   "]"   
0B1B   28 03                  JR   z,nesting4   
0B1D   FE 29                  CP   ")"   
0B1F   C0                     RET   nz   
0B20                NESTING4:      
0B20   1D                     DEC   e   
0B21   C9                     RET      
0B22                PROMPT:      
0B22   CD 32 0B               CALL   printStr   
0B25   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B2A   C9                     RET      
0B2B                CRLF:        
0B2B   CD 32 0B               CALL   printStr   
0B2E   0D 0A 00               .CSTR   "\r\n"   
0B31   C9                     RET      
0B32                             ; prints a null teminated string
0B32                             ; the string should be immediately following the call
0B32                PRINTSTR:      
0B32   E3                     EX   (sp),hl   ; swap			
0B33   CD EB 0A               CALL   prtstr   
0B36   23                     INC   hl   ; inc past NUL
0B37   E3                     EX   (sp),hl   ; put it back	
0B38   C9                     RET      
0B39                TITLESTR:      
0B39   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0B4D                INIT:        
0B4D   21 39 0B               LD   hl,titleStr   
0B50   11 0A 4E               LD   de,titleBuf   
0B53   06 14                  LD   b,20   
0B55                INIT1:       
0B55   1A                     LD   a,(de)   
0B56   BE                     CP   (hl)   
0B57   20 17                  JR   nz,coldBoot0   
0B59   13                     INC   de   
0B5A   23                     INC   hl   
0B5B   10 F8                  DJNZ   init1   
0B5D                WARMINIT:      
0B5D   ED 4B F6 4D            LD   bc,(vSavedIP)   ; restore IP
0B61   ED 7B F8 4D            LD   sp,(vSavedSP)   ; restore SP
0B65   DD 2A FA 4D            LD   ix,(vSavedNext)   ; restore Next
0B69   FD 2A FC 4D            LD   iy,(vSavedBP)   ; restore BP
0B6D   C3 A7 0B               JP   start1   
0B70                COLDBOOT0:      
0B70   21 39 0B               LD   hl,titleStr   ; copy titleStr to titleBuf
0B73   11 0A 4E               LD   de,titleBuf   
0B76   06 14                  LD   b,20   
0B78   ED B0                  LDIR      
0B7A                COLDINIT:      
0B7A   21 80 01               LD   hl,isysVars   
0B7D   11 E6 4D               LD   de,sysVars   
0B80   01 10 00               LD   bc,8 * 2   
0B83   ED B0                  LDIR      
0B85   21 00 4D               LD   hl,vars   ; 52 vars LO HI
0B88   06 34                  LD   b,26*2   
0B8A   AF                     XOR   a   
0B8B                COLDBOOT1:      
0B8B   77                     LD   (hl),a   
0B8C   23                     INC   hl   
0B8D   10 FC                  DJNZ   coldBoot1   
0B8F   DD 2A EE 4D            LD   ix,(vNext)   
0B93   FD 21 00 4B            LD   iy,STACK   
0B97   C9                     RET      
0B98                COLDSTART:      
0B98   31 00 4B               LD   sp,STACK   
0B9B   CD 70 0B               CALL   coldBoot0   
0B9E   C3 A7 0B               JP   start1   
0BA1                START:       
0BA1   31 00 4B               LD   sp,STACK   ; start Monty
0BA4   CD 4D 0B               CALL   init   ; setups
0BA7                START1:      
0BA7   21 0A 4E               LD   hl,titleBuf   
0BAA   CD EB 0A               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0BAD                INTERPRET:      
0BAD   CD BA 0A               CALL   flushBuffer   
0BB0   CD 22 0B               CALL   prompt   
0BB3   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BB6   21 00 4B               LD   hl,TIB   
0BB9   22 EA 4D               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BBC                INTERPRET2:      ; calculate nesting
0BBC   1E 00                  LD   e,0   ; initilize nesting value
0BBE   C5                     PUSH   bc   ; save offset into TIB,
0BBF                             ; bc is also the count of chars in TIB
0BBF   21 00 4B               LD   hl,TIB   ; hl is start of TIB
0BC2   18 0B                  JR   interpret4   
0BC4                INTERPRET3:      
0BC4   3E 33                  LD   a,"3"   
0BC6   CD 85 00               CALL   putchar   
0BC9   7E                     LD   a,(hl)   ; a = char in TIB
0BCA   23                     INC   hl   ; inc pointer into TIB
0BCB   0B                     DEC   bc   ; dec count of chars in TIB
0BCC   CD F0 0A               CALL   nesting   ; update nesting value
0BCF                INTERPRET4:      
0BCF   79                     LD   a,c   ; is count zero?
0BD0   B0                     OR   b   
0BD1   20 F1                  JR   nz,interpret3   ; if not loop
0BD3   C1                     POP   bc   ; restore offset into TIB
0BD4                INTERPRET5:      
0BD4   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BD7   FE 20                  CP   $20   ; compare to space
0BD9   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BDB   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BDD                             ; ???? NEEDED?
0BDD   28 3B                  JR   z,interpret8   
0BDF   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BE1   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BE3   FE 05                  CP   CTRL_E   
0BE5   CA 78 0C               JP   z,edit_   
0BE8   FE 08                  CP   CTRL_H   
0BEA   CA 68 0C               JP   z,backSpace_   
0BED   FE 0A                  CP   CTRL_J   
0BEF   CA 90 0C               JP   z,reEdit_   
0BF2   FE 13                  CP   CTRL_S   
0BF4   CA 93 0C               JP   z,printStack_   
0BF7                             ; DB     lsb(edit_)       ; ENQ ^E  5
0BF7                             ; DB     lsb(reedit_)     ; LF  ^J 10
0BF7                             ; DB     lsb(list_)       ; FF  ^L 12
0BF7                             ; DB     lsb(printStack_) ; DLE ^P 16
0BF7                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0BF7                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0BF7                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0BF7                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0BF7                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0BF7                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0BF7                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0BF7                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0BF7                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0BF7                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0BF7                INTERPRET5A:      
0BF7                             ; ld (vTIBPtr),bc
0BF7                             ; ld bc,(vTIBPtr)
0BF7   18 C3                  JR   interpret2   
0BF9                INTERPRET6:      
0BF9   21 00 4B               LD   hl,TIB   
0BFC   09                     ADD   hl,bc   
0BFD   77                     LD   (hl),a   ; store the character in textbuf
0BFE   03                     INC   bc   
0BFF   CD 85 00               CALL   putchar   ; echo character to screen
0C02   CD F0 0A               CALL   nesting   
0C05   18 CD                  JR   interpret5   ; wait for next character
0C07                INTERPRET7:      
0C07   21 00 4B               LD   hl,TIB   
0C0A   09                     ADD   hl,bc   
0C0B   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C0D   23                     INC   hl   
0C0E   36 0A                  LD   (hl),"\n"   
0C10   23                     INC   hl   
0C11   03                     INC   bc   
0C12   03                     INC   bc   
0C13   CD 2B 0B               CALL   crlf   ; echo character to screen
0C16   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C17   B7                     OR   a   
0C18   20 BA                  JR   nz,interpret5   
0C1A                INTERPRET8:      
0C1A   21 00 4B               LD   hl,TIB   
0C1D   09                     ADD   hl,bc   
0C1E   22 EA 4D               LD   (vTIBPtr),hl   
0C21   01 00 4B               LD   bc,TIB   
0C24   ED 43 F6 4D            LD   (vSavedIP),bc   ; save IP
0C28   ED 73 F8 4D            LD   (vSavedSP),sp   ; save SP
0C2C   DD 22 FA 4D            LD   (vSavedNext),ix   ; save Next
0C30   FD 22 FC 4D            LD   (vSavedBP),iy   ; save BP
0C34   0B                     DEC   bc   
0C35                NEXT:        
0C35   03                     INC   bc   ; Increment the IP
0C36   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C37   FE 20                  CP   " "   ; whitespace?
0C39   28 FA                  JR   z,next   ; space? ignore
0C3B   38 09                  JR   c,next1   
0C3D   D6 20                  SUB   " "   
0C3F   6F                     LD   l,a   ; index into table
0C40   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C42   6E                     LD   l,(hl)   ; get low jump address
0C43   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C45   E9                     JP   (hl)   ; Jump to routine
0C46                NEXT1:       
0C46   FE 00                  CP   NUL   ; end of input string?
0C48   28 03                  JR   z,exit   
0C4A   C3 AD 0B               JP   interpret   ; no, other whitespace, macros?
0C4D                EXIT:        
0C4D   03                     INC   bc   
0C4E   60 69                  LD   hl,bc   
0C50   E9                     JP   (hl)   
0C51                RUN:         
0C51   C1                     POP   bc   
0C52   0B                     DEC   bc   
0C53   DD E9                  JP   (ix)   
0C55                ERROR:       
0C55   CD 51 0C               CALL   run   
0C58   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C65   C3 AD 0B               JP   interpret   
0C68                BACKSPACE_:      
0C68   79                     LD   a,c   
0C69   B0                     OR   b   
0C6A   CA BC 0B               JP   z,interpret2   
0C6D   0B                     DEC   bc   
0C6E   CD 32 0B               CALL   printStr   
0C71   08 20 08 00            .CSTR   "\b \b"   
0C75   C3 BC 0B               JP   interpret2   
0C78                             ; edit
0C78                EDIT_:       
0C78   CD 51 0C               CALL   run   
0C7B   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C8D   C3 AD 0B               JP   interpret   
0C90                REEDIT_:      
0C90   C3 AD 0B               JP   interpret   
0C93                PRINTSTACK_:      
0C93   CD 51 0C               CALL   run   
0C96   2F 70 6B 00            .CSTR   "/pk"   
0C9A   C3 AD 0B               JP   interpret   
0C9D                             ; editDef:
0C9D                             ;     pop hl                      ; pop ret address
0C9D                             ;     ex (sp),hl                  ; swap with TOS
0C9D                             ;     push hl                     ; dup TOS
0C9D                             ;     ld a,l                      ; a = ident
0C9D                             ;     ld de,TIB                   ; de = start of TIB
0C9D                             ;     ld (vTIBPtr),de             ; update TIB*
0C9D                             ;     push ix                     ; save NEXT
0C9D                             ;     ld ix,editDef0              ; NEXT = editDef0
0C9D                             ;     jp lookupRef                ; convert letter into address
0C9D                             ; editDef0:
0C9D                             ;     ld e,(hl)                   ; de = (hl++)
0C9D                             ;     inc hl
0C9D                             ;     ld d,(hl)
0C9D                             ;     ld a,d                      ; de == 0 ?
0C9D                             ;     or e
0C9D                             ;     jr z,editDef4
0C9D                             ;     ld ix,editDef3              ; NEXT = editDef3
0C9D                             ;     ex de,hl
0C9D                             ;     ld a,(hl)
0C9D                             ;     cp "{"
0C9D                             ;     jr nz,editDef1
0C9D                             ;     jp editBlock0               ; convert letter into address
0C9D                             ; editDef1:
0C9D                             ;     cp "("
0C9D                             ;     jr nz,editDef2
0C9D                             ;     jp editBlock0               ; convert letter into address
0C9D                             ; editDef2:
0C9D                             ;     jp editLambda
0C9D                             ; editDef3:
0C9D                             ;     ld a," "                    ; write assign
0C9D                             ;     call writeChar
0C9D                             ;     pop hl                      ; a = ident
0C9D                             ;     ld a,l
0C9D                             ;     call writeChar
0C9D                             ;     ld a,"="                    ; write assign
0C9D                             ;     call writeChar
0C9D                             ;     ld ix,editDef4              ; NEXT = editDef4
0C9D                             ;     jp printTIB
0C9D                             ; editDef4:
0C9D                             ;     pop ix                      ; restore NEXT
0C9D                             ;     jp (ix)
0C9D                             ; writeChar:
0C9D                             ;     ld de,(vTIBPtr)             ; de = TIB*
0C9D                             ;     ld (de),a                   ; write ident
0C9D                             ;     inc de
0C9D                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0C9D                             ;     ret
0C9D                             ; ; printTIB
0C9D                             ; printTIB:
0C9D                             ;     ld hl,(vTIBPtr)
0C9D                             ;     ld de,TIB
0C9D                             ;     or a
0C9D                             ;     sbc hl,de
0C9D                             ;     jp printTIB2
0C9D                             ; printTIB1:
0C9D                             ;     ld a,(de)
0C9D                             ;     call putchar
0C9D                             ; printTIB2:
0C9D                             ;     ld a,l
0C9D                             ;     or h
0C9D                             ;     jr nz,printTIB1
0C9D                             ;     jp (ix)
0C9D                             ; editBlock:
0C9D                             ;     pop hl                      ; hl = block*
0C9D                             ; editBlock0:
0C9D                             ;     push ix                     ; save next
0C9D                             ;     push hl                     ; push block*
0C9D                             ;     push hl                     ; push block*
0C9D                             ;     ld ix,(editBlock2)
0C9D                             ;     jp blockLength
0C9D                             ; editBlock1:
0C9D                             ;     pop hl                      ; bc = length, (sp) = IP
0C9D                             ;     pop de                      ; de = block*
0C9D                             ;     ld a,l
0C9D                             ;     or h
0C9D                             ;     jr z,editBlock2
0C9D                             ;     push bc
0C9D                             ;     ld bc,hl
0C9D                             ;     ex de,hl                    ; hl = block*
0C9D                             ;     ld de,(vTIBPtr)              ; de = TIB*
0C9D                             ;     ldir                        ; copy block to TIB
0C9D                             ;     ld (vTIBPtr),de              ; save TIB*
0C9D                             ;     pop bc
0C9D                             ; editBlock2:
0C9D                             ;     pop ix                      ; restore next
0C9D                             ;     jp (ix)
0C9D                             ; editLambda:
0C9D                             ;     jp (ix)
0C9D                             ; editArray:
0C9D                             ;     jp (ix)
0C9D                             ; editArglist:
0C9D                             ;     jp (ix)
0C9D                             ; ; blockLength
0C9D                             ; ; addr1 -- length
0C9D                             ; blockLength:
0C9D                             ;     pop hl                      ; block*
0C9D                             ;     push hl                     ; save block*
0C9D                             ;     inc hl                      ; skip first char
0C9D                             ;     ld d,1                      ; increase nesting
0C9D                             ; blockLength1:                   ; Skip to end of definition
0C9D                             ;     ld a,(hl)                   ; Get the next character
0C9D                             ;     inc hl                      ; Point to next character
0C9D                             ;     cp " " + 1                  ; ignore whitespace
0C9D                             ;     jr c,blockLength1
0C9D                             ;     cp ")"
0C9D                             ;     jr z,blockLength4
0C9D                             ;     cp "}"
0C9D                             ;     jr z,blockLength4
0C9D                             ;     cp "]"
0C9D                             ;     jr z,blockLength4
0C9D                             ;     cp "("
0C9D                             ;     jr z,blockLength2
0C9D                             ;     cp "{"
0C9D                             ;     jr z,blockLength2
0C9D                             ;     cp "["
0C9D                             ;     jr z,blockLength2
0C9D                             ;     cp "'"
0C9D                             ;     jr z,blockLength3
0C9D                             ;     cp "`"
0C9D                             ;     jr z,blockLength3
0C9D                             ;     cp DQUOTE
0C9D                             ;     jr z,blockLength3
0C9D                             ;     jr blockLength1
0C9D                             ; blockLength2:
0C9D                             ;     inc d
0C9D                             ;     jr blockLength1
0C9D                             ; blockLength4:
0C9D                             ;     dec d
0C9D                             ;     jr nz, blockLength1         ; get the next element
0C9D                             ; blockLength3:
0C9D                             ;     ld a,$80
0C9D                             ;     xor d
0C9D                             ;     ld d,a
0C9D                             ;     jr nz, blockLength1
0C9D                             ;     pop hl                      ; hl = block*
0C9D                             ;     or a
0C9D                             ;     sbc hl,de
0C9D                             ;     push hl
0C9D                             ;     jp (ix)
0C9D                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0C9D                             ; \a start of stack \#3 depth \b base \$ prompt
0C9D                             ; DW dStack               ; a vS0 start of datastack			
0C9D                             ; DW FALSE                ; b vBase16
0C9D                             ; DW 0                    ; c vTIBPtr an offset to the tib
0C9D                             ; DW 0                    ; d
0C9D                             ; DW 65                   ; e vLastDef "A" last command u defined
0C9D                             ; DW 0                    ; f
0C9D                             ; DW page6                ; g 256 bytes limits
0C9D                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0C9D                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                             ; call printStr
0D00                             ; .cstr "Done!"
0D00                             ; HALT
0D00                             ; 
0D00                          ;*Macro unroll:  test "/f", false
0D00   31 00 4B               LD   SP,STACK   
0D03   CD 7A 0B               CALL   coldInit   
0D06   CD BA 49               CALL   execStr   
0D09   2F 66 00               .CSTR   "/f"   
0D0C   CD BA 0A               CALL   flushBuffer   
0D0F                          ;*Macro unroll:  expect "/f",false
0D0F   E1                     POP   HL   
0D10   E5                     PUSH   HL   
0D11   11 00 00               LD   DE,false   
0D14   B7                     OR   A   
0D15   ED 52                  SBC   HL,DE   
0D17   7D                     LD   A,L   
0D18   B4                     OR   H   
0D19   CA 76 0D               JP   Z,expectM_0_2644S45   
0D1C   CD 32 0B               CALL   printStr   
0D1F   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0D28   CD 32 0B               CALL   printStr   
0D2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D3A   21 00 00               LD   hl,false   
0D3D   E5                     PUSH   hl   
0D3E   E5                     PUSH   hl   
0D3F   CD 51 0C               CALL   run   
0D42   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0D4A   CD BA 0A               CALL   flushBuffer   
0D4D   CD 32 0B               CALL   printStr   
0D50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D5D   E1                     POP   hl   
0D5E   E5                     PUSH   hl   
0D5F   E5                     PUSH   hl   
0D60   CD 51 0C               CALL   run   
0D63   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0D72   CD BA 0A               CALL   flushBuffer   
0D75   76                     HALT      
0D76                EXPECTM_0_2644S45:      
0D76   E1                     POP   HL   
0D77                          ;*Macro unroll:  test "/t", true
0D77   31 00 4B               LD   SP,STACK   
0D7A   CD 7A 0B               CALL   coldInit   
0D7D   CD BA 49               CALL   execStr   
0D80   2F 74 00               .CSTR   "/t"   
0D83   CD BA 0A               CALL   flushBuffer   
0D86                          ;*Macro unroll:  expect "/t",true
0D86   E1                     POP   HL   
0D87   E5                     PUSH   HL   
0D88   11 FF FF               LD   DE,true   
0D8B   B7                     OR   A   
0D8C   ED 52                  SBC   HL,DE   
0D8E   7D                     LD   A,L   
0D8F   B4                     OR   H   
0D90   CA ED 0D               JP   Z,expectM_0_2645S45   
0D93   CD 32 0B               CALL   printStr   
0D96   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0D9F   CD 32 0B               CALL   printStr   
0DA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DB1   21 FF FF               LD   hl,true   
0DB4   E5                     PUSH   hl   
0DB5   E5                     PUSH   hl   
0DB6   CD 51 0C               CALL   run   
0DB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0DC1   CD BA 0A               CALL   flushBuffer   
0DC4   CD 32 0B               CALL   printStr   
0DC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DD4   E1                     POP   hl   
0DD5   E5                     PUSH   hl   
0DD6   E5                     PUSH   hl   
0DD7   CD 51 0C               CALL   run   
0DDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0DE9   CD BA 0A               CALL   flushBuffer   
0DEC   76                     HALT      
0DED                EXPECTM_0_2645S45:      
0DED   E1                     POP   HL   
0DEE                          ;*Macro unroll:  test "1", 1
0DEE   31 00 4B               LD   SP,STACK   
0DF1   CD 7A 0B               CALL   coldInit   
0DF4   CD BA 49               CALL   execStr   
0DF7   31 00                  .CSTR   "1"   
0DF9   CD BA 0A               CALL   flushBuffer   
0DFC                          ;*Macro unroll:  expect "1",1
0DFC   E1                     POP   HL   
0DFD   E5                     PUSH   HL   
0DFE   11 01 00               LD   DE,1   
0E01   B7                     OR   A   
0E02   ED 52                  SBC   HL,DE   
0E04   7D                     LD   A,L   
0E05   B4                     OR   H   
0E06   CA 62 0E               JP   Z,expectM_0_2646S45   
0E09   CD 32 0B               CALL   printStr   
0E0C   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0E14   CD 32 0B               CALL   printStr   
0E17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E26   21 01 00               LD   hl,1   
0E29   E5                     PUSH   hl   
0E2A   E5                     PUSH   hl   
0E2B   CD 51 0C               CALL   run   
0E2E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E36   CD BA 0A               CALL   flushBuffer   
0E39   CD 32 0B               CALL   printStr   
0E3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E49   E1                     POP   hl   
0E4A   E5                     PUSH   hl   
0E4B   E5                     PUSH   hl   
0E4C   CD 51 0C               CALL   run   
0E4F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E5E   CD BA 0A               CALL   flushBuffer   
0E61   76                     HALT      
0E62                EXPECTM_0_2646S45:      
0E62   E1                     POP   HL   
0E63                          ;*Macro unroll:  test "2", 2
0E63   31 00 4B               LD   SP,STACK   
0E66   CD 7A 0B               CALL   coldInit   
0E69   CD BA 49               CALL   execStr   
0E6C   32 00                  .CSTR   "2"   
0E6E   CD BA 0A               CALL   flushBuffer   
0E71                          ;*Macro unroll:  expect "2",2
0E71   E1                     POP   HL   
0E72   E5                     PUSH   HL   
0E73   11 02 00               LD   DE,2   
0E76   B7                     OR   A   
0E77   ED 52                  SBC   HL,DE   
0E79   7D                     LD   A,L   
0E7A   B4                     OR   H   
0E7B   CA D7 0E               JP   Z,expectM_0_2647S45   
0E7E   CD 32 0B               CALL   printStr   
0E81   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0E89   CD 32 0B               CALL   printStr   
0E8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E9B   21 02 00               LD   hl,2   
0E9E   E5                     PUSH   hl   
0E9F   E5                     PUSH   hl   
0EA0   CD 51 0C               CALL   run   
0EA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0EAB   CD BA 0A               CALL   flushBuffer   
0EAE   CD 32 0B               CALL   printStr   
0EB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EBE   E1                     POP   hl   
0EBF   E5                     PUSH   hl   
0EC0   E5                     PUSH   hl   
0EC1   CD 51 0C               CALL   run   
0EC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0ED3   CD BA 0A               CALL   flushBuffer   
0ED6   76                     HALT      
0ED7                EXPECTM_0_2647S45:      
0ED7   E1                     POP   HL   
0ED8                          ;*Macro unroll:  test "1", 1
0ED8   31 00 4B               LD   SP,STACK   
0EDB   CD 7A 0B               CALL   coldInit   
0EDE   CD BA 49               CALL   execStr   
0EE1   31 00                  .CSTR   "1"   
0EE3   CD BA 0A               CALL   flushBuffer   
0EE6                          ;*Macro unroll:  expect "1",1
0EE6   E1                     POP   HL   
0EE7   E5                     PUSH   HL   
0EE8   11 01 00               LD   DE,1   
0EEB   B7                     OR   A   
0EEC   ED 52                  SBC   HL,DE   
0EEE   7D                     LD   A,L   
0EEF   B4                     OR   H   
0EF0   CA 4C 0F               JP   Z,expectM_0_2648S45   
0EF3   CD 32 0B               CALL   printStr   
0EF6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0EFE   CD 32 0B               CALL   printStr   
0F01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F10   21 01 00               LD   hl,1   
0F13   E5                     PUSH   hl   
0F14   E5                     PUSH   hl   
0F15   CD 51 0C               CALL   run   
0F18   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F20   CD BA 0A               CALL   flushBuffer   
0F23   CD 32 0B               CALL   printStr   
0F26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F33   E1                     POP   hl   
0F34   E5                     PUSH   hl   
0F35   E5                     PUSH   hl   
0F36   CD 51 0C               CALL   run   
0F39   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F48   CD BA 0A               CALL   flushBuffer   
0F4B   76                     HALT      
0F4C                EXPECTM_0_2648S45:      
0F4C   E1                     POP   HL   
0F4D                          ;*Macro unroll:  test "0", 0
0F4D   31 00 4B               LD   SP,STACK   
0F50   CD 7A 0B               CALL   coldInit   
0F53   CD BA 49               CALL   execStr   
0F56   30 00                  .CSTR   "0"   
0F58   CD BA 0A               CALL   flushBuffer   
0F5B                          ;*Macro unroll:  expect "0",0
0F5B   E1                     POP   HL   
0F5C   E5                     PUSH   HL   
0F5D   11 00 00               LD   DE,0   
0F60   B7                     OR   A   
0F61   ED 52                  SBC   HL,DE   
0F63   7D                     LD   A,L   
0F64   B4                     OR   H   
0F65   CA C1 0F               JP   Z,expectM_0_2649S45   
0F68   CD 32 0B               CALL   printStr   
0F6B   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0F73   CD 32 0B               CALL   printStr   
0F76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F85   21 00 00               LD   hl,0   
0F88   E5                     PUSH   hl   
0F89   E5                     PUSH   hl   
0F8A   CD 51 0C               CALL   run   
0F8D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F95   CD BA 0A               CALL   flushBuffer   
0F98   CD 32 0B               CALL   printStr   
0F9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FA8   E1                     POP   hl   
0FA9   E5                     PUSH   hl   
0FAA   E5                     PUSH   hl   
0FAB   CD 51 0C               CALL   run   
0FAE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FBD   CD BA 0A               CALL   flushBuffer   
0FC0   76                     HALT      
0FC1                EXPECTM_0_2649S45:      
0FC1   E1                     POP   HL   
0FC2                          ;*Macro unroll:  test "10", 10
0FC2   31 00 4B               LD   SP,STACK   
0FC5   CD 7A 0B               CALL   coldInit   
0FC8   CD BA 49               CALL   execStr   
0FCB   31 30 00               .CSTR   "10"   
0FCE   CD BA 0A               CALL   flushBuffer   
0FD1                          ;*Macro unroll:  expect "10",10
0FD1   E1                     POP   HL   
0FD2   E5                     PUSH   HL   
0FD3   11 0A 00               LD   DE,10   
0FD6   B7                     OR   A   
0FD7   ED 52                  SBC   HL,DE   
0FD9   7D                     LD   A,L   
0FDA   B4                     OR   H   
0FDB   CA 38 10               JP   Z,expectM_0_2650S45   
0FDE   CD 32 0B               CALL   printStr   
0FE1   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0FEA   CD 32 0B               CALL   printStr   
0FED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FFC   21 0A 00               LD   hl,10   
0FFF   E5                     PUSH   hl   
1000   E5                     PUSH   hl   
1001   CD 51 0C               CALL   run   
1004   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
100C   CD BA 0A               CALL   flushBuffer   
100F   CD 32 0B               CALL   printStr   
1012   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
101F   E1                     POP   hl   
1020   E5                     PUSH   hl   
1021   E5                     PUSH   hl   
1022   CD 51 0C               CALL   run   
1025   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1034   CD BA 0A               CALL   flushBuffer   
1037   76                     HALT      
1038                EXPECTM_0_2650S45:      
1038   E1                     POP   HL   
1039                          ;*Macro unroll:  test "123", 123
1039   31 00 4B               LD   SP,STACK   
103C   CD 7A 0B               CALL   coldInit   
103F   CD BA 49               CALL   execStr   
1042   31 32 33 00            .CSTR   "123"   
1046   CD BA 0A               CALL   flushBuffer   
1049                          ;*Macro unroll:  expect "123",123
1049   E1                     POP   HL   
104A   E5                     PUSH   HL   
104B   11 7B 00               LD   DE,123   
104E   B7                     OR   A   
104F   ED 52                  SBC   HL,DE   
1051   7D                     LD   A,L   
1052   B4                     OR   H   
1053   CA B1 10               JP   Z,expectM_0_2651S45   
1056   CD 32 0B               CALL   printStr   
1059   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1063   CD 32 0B               CALL   printStr   
1066   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1075   21 7B 00               LD   hl,123   
1078   E5                     PUSH   hl   
1079   E5                     PUSH   hl   
107A   CD 51 0C               CALL   run   
107D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1085   CD BA 0A               CALL   flushBuffer   
1088   CD 32 0B               CALL   printStr   
108B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1098   E1                     POP   hl   
1099   E5                     PUSH   hl   
109A   E5                     PUSH   hl   
109B   CD 51 0C               CALL   run   
109E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10AD   CD BA 0A               CALL   flushBuffer   
10B0   76                     HALT      
10B1                EXPECTM_0_2651S45:      
10B1   E1                     POP   HL   
10B2                          ;*Macro unroll:  test "-1",-1
10B2   31 00 4B               LD   SP,STACK   
10B5   CD 7A 0B               CALL   coldInit   
10B8   CD BA 49               CALL   execStr   
10BB   2D 31 00               .CSTR   "-1"   
10BE   CD BA 0A               CALL   flushBuffer   
10C1                          ;*Macro unroll:  expect "-1",-1
10C1   E1                     POP   HL   
10C2   E5                     PUSH   HL   
10C3   11 FF FF               LD   DE,-1   
10C6   B7                     OR   A   
10C7   ED 52                  SBC   HL,DE   
10C9   7D                     LD   A,L   
10CA   B4                     OR   H   
10CB   CA 28 11               JP   Z,expectM_0_2652S45   
10CE   CD 32 0B               CALL   printStr   
10D1   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
10DA   CD 32 0B               CALL   printStr   
10DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10EC   21 FF FF               LD   hl,-1   
10EF   E5                     PUSH   hl   
10F0   E5                     PUSH   hl   
10F1   CD 51 0C               CALL   run   
10F4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
10FC   CD BA 0A               CALL   flushBuffer   
10FF   CD 32 0B               CALL   printStr   
1102   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
110F   E1                     POP   hl   
1110   E5                     PUSH   hl   
1111   E5                     PUSH   hl   
1112   CD 51 0C               CALL   run   
1115   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1124   CD BA 0A               CALL   flushBuffer   
1127   76                     HALT      
1128                EXPECTM_0_2652S45:      
1128   E1                     POP   HL   
1129                          ;*Macro unroll:  test "''", 0
1129   31 00 4B               LD   SP,STACK   
112C   CD 7A 0B               CALL   coldInit   
112F   CD BA 49               CALL   execStr   
1132   27 27 00               .CSTR   "''"   
1135   CD BA 0A               CALL   flushBuffer   
1138                          ;*Macro unroll:  expect "''",0
1138   E1                     POP   HL   
1139   E5                     PUSH   HL   
113A   11 00 00               LD   DE,0   
113D   B7                     OR   A   
113E   ED 52                  SBC   HL,DE   
1140   7D                     LD   A,L   
1141   B4                     OR   H   
1142   CA 9F 11               JP   Z,expectM_0_2653S45   
1145   CD 32 0B               CALL   printStr   
1148   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1151   CD 32 0B               CALL   printStr   
1154   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1163   21 00 00               LD   hl,0   
1166   E5                     PUSH   hl   
1167   E5                     PUSH   hl   
1168   CD 51 0C               CALL   run   
116B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1173   CD BA 0A               CALL   flushBuffer   
1176   CD 32 0B               CALL   printStr   
1179   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1186   E1                     POP   hl   
1187   E5                     PUSH   hl   
1188   E5                     PUSH   hl   
1189   CD 51 0C               CALL   run   
118C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
119B   CD BA 0A               CALL   flushBuffer   
119E   76                     HALT      
119F                EXPECTM_0_2653S45:      
119F   E1                     POP   HL   
11A0                          ;*Macro unroll:  test "'a'", $61
11A0   31 00 4B               LD   SP,STACK   
11A3   CD 7A 0B               CALL   coldInit   
11A6   CD BA 49               CALL   execStr   
11A9   27 61 27 00            .CSTR   "'a'"   
11AD   CD BA 0A               CALL   flushBuffer   
11B0                          ;*Macro unroll:  expect "'a'",$61
11B0   E1                     POP   HL   
11B1   E5                     PUSH   HL   
11B2   11 61 00               LD   DE,$61   
11B5   B7                     OR   A   
11B6   ED 52                  SBC   HL,DE   
11B8   7D                     LD   A,L   
11B9   B4                     OR   H   
11BA   CA 18 12               JP   Z,expectM_0_2654S45   
11BD   CD 32 0B               CALL   printStr   
11C0   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
11CA   CD 32 0B               CALL   printStr   
11CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11DC   21 61 00               LD   hl,$61   
11DF   E5                     PUSH   hl   
11E0   E5                     PUSH   hl   
11E1   CD 51 0C               CALL   run   
11E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11EC   CD BA 0A               CALL   flushBuffer   
11EF   CD 32 0B               CALL   printStr   
11F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11FF   E1                     POP   hl   
1200   E5                     PUSH   hl   
1201   E5                     PUSH   hl   
1202   CD 51 0C               CALL   run   
1205   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1214   CD BA 0A               CALL   flushBuffer   
1217   76                     HALT      
1218                EXPECTM_0_2654S45:      
1218   E1                     POP   HL   
1219                          ;*Macro unroll:  test "'\\''", $27
1219   31 00 4B               LD   SP,STACK   
121C   CD 7A 0B               CALL   coldInit   
121F   CD BA 49               CALL   execStr   
1222   27 5C 27 27 00         .CSTR   "'\\''"   
1227   CD BA 0A               CALL   flushBuffer   
122A                          ;*Macro unroll:  expect "'\\''",$27
122A   E1                     POP   HL   
122B   E5                     PUSH   HL   
122C   11 27 00               LD   DE,$27   
122F   B7                     OR   A   
1230   ED 52                  SBC   HL,DE   
1232   7D                     LD   A,L   
1233   B4                     OR   H   
1234   CA 93 12               JP   Z,expectM_0_2655S45   
1237   CD 32 0B               CALL   printStr   
123A   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1245   CD 32 0B               CALL   printStr   
1248   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1257   21 27 00               LD   hl,$27   
125A   E5                     PUSH   hl   
125B   E5                     PUSH   hl   
125C   CD 51 0C               CALL   run   
125F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1267   CD BA 0A               CALL   flushBuffer   
126A   CD 32 0B               CALL   printStr   
126D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
127A   E1                     POP   hl   
127B   E5                     PUSH   hl   
127C   E5                     PUSH   hl   
127D   CD 51 0C               CALL   run   
1280   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
128F   CD BA 0A               CALL   flushBuffer   
1292   76                     HALT      
1293                EXPECTM_0_2655S45:      
1293   E1                     POP   HL   
1294                          ;*Macro unroll:  test "$10", $10
1294   31 00 4B               LD   SP,STACK   
1297   CD 7A 0B               CALL   coldInit   
129A   CD BA 49               CALL   execStr   
129D   24 31 30 00            .CSTR   "$10"   
12A1   CD BA 0A               CALL   flushBuffer   
12A4                          ;*Macro unroll:  expect "$10",$10
12A4   E1                     POP   HL   
12A5   E5                     PUSH   HL   
12A6   11 10 00               LD   DE,$10   
12A9   B7                     OR   A   
12AA   ED 52                  SBC   HL,DE   
12AC   7D                     LD   A,L   
12AD   B4                     OR   H   
12AE   CA 0C 13               JP   Z,expectM_0_2656S45   
12B1   CD 32 0B               CALL   printStr   
12B4   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
12BE   CD 32 0B               CALL   printStr   
12C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12D0   21 10 00               LD   hl,$10   
12D3   E5                     PUSH   hl   
12D4   E5                     PUSH   hl   
12D5   CD 51 0C               CALL   run   
12D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12E0   CD BA 0A               CALL   flushBuffer   
12E3   CD 32 0B               CALL   printStr   
12E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12F3   E1                     POP   hl   
12F4   E5                     PUSH   hl   
12F5   E5                     PUSH   hl   
12F6   CD 51 0C               CALL   run   
12F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1308   CD BA 0A               CALL   flushBuffer   
130B   76                     HALT      
130C                EXPECTM_0_2656S45:      
130C   E1                     POP   HL   
130D                          ;*Macro unroll:  test "$FF", $FF
130D   31 00 4B               LD   SP,STACK   
1310   CD 7A 0B               CALL   coldInit   
1313   CD BA 49               CALL   execStr   
1316   24 46 46 00            .CSTR   "$FF"   
131A   CD BA 0A               CALL   flushBuffer   
131D                          ;*Macro unroll:  expect "$FF",$FF
131D   E1                     POP   HL   
131E   E5                     PUSH   HL   
131F   11 FF 00               LD   DE,$FF   
1322   B7                     OR   A   
1323   ED 52                  SBC   HL,DE   
1325   7D                     LD   A,L   
1326   B4                     OR   H   
1327   CA 85 13               JP   Z,expectM_0_2657S45   
132A   CD 32 0B               CALL   printStr   
132D   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1337   CD 32 0B               CALL   printStr   
133A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1349   21 FF 00               LD   hl,$FF   
134C   E5                     PUSH   hl   
134D   E5                     PUSH   hl   
134E   CD 51 0C               CALL   run   
1351   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1359   CD BA 0A               CALL   flushBuffer   
135C   CD 32 0B               CALL   printStr   
135F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
136C   E1                     POP   hl   
136D   E5                     PUSH   hl   
136E   E5                     PUSH   hl   
136F   CD 51 0C               CALL   run   
1372   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1381   CD BA 0A               CALL   flushBuffer   
1384   76                     HALT      
1385                EXPECTM_0_2657S45:      
1385   E1                     POP   HL   
1386                          ;*Macro unroll:  test "-1 2 +",1
1386   31 00 4B               LD   SP,STACK   
1389   CD 7A 0B               CALL   coldInit   
138C   CD BA 49               CALL   execStr   
138F   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
1396   CD BA 0A               CALL   flushBuffer   
1399                          ;*Macro unroll:  expect "-1 2 +",1
1399   E1                     POP   HL   
139A   E5                     PUSH   HL   
139B   11 01 00               LD   DE,1   
139E   B7                     OR   A   
139F   ED 52                  SBC   HL,DE   
13A1   7D                     LD   A,L   
13A2   B4                     OR   H   
13A3   CA 04 14               JP   Z,expectM_0_2658S45   
13A6   CD 32 0B               CALL   printStr   
13A9   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
13B6   CD 32 0B               CALL   printStr   
13B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C8   21 01 00               LD   hl,1   
13CB   E5                     PUSH   hl   
13CC   E5                     PUSH   hl   
13CD   CD 51 0C               CALL   run   
13D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13D8   CD BA 0A               CALL   flushBuffer   
13DB   CD 32 0B               CALL   printStr   
13DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13EB   E1                     POP   hl   
13EC   E5                     PUSH   hl   
13ED   E5                     PUSH   hl   
13EE   CD 51 0C               CALL   run   
13F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1400   CD BA 0A               CALL   flushBuffer   
1403   76                     HALT      
1404                EXPECTM_0_2658S45:      
1404   E1                     POP   HL   
1405                          ;*Macro unroll:  test "-1 1 +",0
1405   31 00 4B               LD   SP,STACK   
1408   CD 7A 0B               CALL   coldInit   
140B   CD BA 49               CALL   execStr   
140E   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1415   CD BA 0A               CALL   flushBuffer   
1418                          ;*Macro unroll:  expect "-1 1 +",0
1418   E1                     POP   HL   
1419   E5                     PUSH   HL   
141A   11 00 00               LD   DE,0   
141D   B7                     OR   A   
141E   ED 52                  SBC   HL,DE   
1420   7D                     LD   A,L   
1421   B4                     OR   H   
1422   CA 83 14               JP   Z,expectM_0_2659S45   
1425   CD 32 0B               CALL   printStr   
1428   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1435   CD 32 0B               CALL   printStr   
1438   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1447   21 00 00               LD   hl,0   
144A   E5                     PUSH   hl   
144B   E5                     PUSH   hl   
144C   CD 51 0C               CALL   run   
144F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1457   CD BA 0A               CALL   flushBuffer   
145A   CD 32 0B               CALL   printStr   
145D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146A   E1                     POP   hl   
146B   E5                     PUSH   hl   
146C   E5                     PUSH   hl   
146D   CD 51 0C               CALL   run   
1470   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
147F   CD BA 0A               CALL   flushBuffer   
1482   76                     HALT      
1483                EXPECTM_0_2659S45:      
1483   E1                     POP   HL   
1484                          ;*Macro unroll:  test "1 2 +", 3
1484   31 00 4B               LD   SP,STACK   
1487   CD 7A 0B               CALL   coldInit   
148A   CD BA 49               CALL   execStr   
148D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1493   CD BA 0A               CALL   flushBuffer   
1496                          ;*Macro unroll:  expect "1 2 +",3
1496   E1                     POP   HL   
1497   E5                     PUSH   HL   
1498   11 03 00               LD   DE,3   
149B   B7                     OR   A   
149C   ED 52                  SBC   HL,DE   
149E   7D                     LD   A,L   
149F   B4                     OR   H   
14A0   CA 00 15               JP   Z,expectM_0_2660S45   
14A3   CD 32 0B               CALL   printStr   
14A6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
14B2   CD 32 0B               CALL   printStr   
14B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C4   21 03 00               LD   hl,3   
14C7   E5                     PUSH   hl   
14C8   E5                     PUSH   hl   
14C9   CD 51 0C               CALL   run   
14CC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14D4   CD BA 0A               CALL   flushBuffer   
14D7   CD 32 0B               CALL   printStr   
14DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14E7   E1                     POP   hl   
14E8   E5                     PUSH   hl   
14E9   E5                     PUSH   hl   
14EA   CD 51 0C               CALL   run   
14ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14FC   CD BA 0A               CALL   flushBuffer   
14FF   76                     HALT      
1500                EXPECTM_0_2660S45:      
1500   E1                     POP   HL   
1501                          ;*Macro unroll:  test "4 1 2 +", 3
1501   31 00 4B               LD   SP,STACK   
1504   CD 7A 0B               CALL   coldInit   
1507   CD BA 49               CALL   execStr   
150A   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1512   CD BA 0A               CALL   flushBuffer   
1515                          ;*Macro unroll:  expect "4 1 2 +",3
1515   E1                     POP   HL   
1516   E5                     PUSH   HL   
1517   11 03 00               LD   DE,3   
151A   B7                     OR   A   
151B   ED 52                  SBC   HL,DE   
151D   7D                     LD   A,L   
151E   B4                     OR   H   
151F   CA 81 15               JP   Z,expectM_0_2661S45   
1522   CD 32 0B               CALL   printStr   
1525   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1533   CD 32 0B               CALL   printStr   
1536   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1545   21 03 00               LD   hl,3   
1548   E5                     PUSH   hl   
1549   E5                     PUSH   hl   
154A   CD 51 0C               CALL   run   
154D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1555   CD BA 0A               CALL   flushBuffer   
1558   CD 32 0B               CALL   printStr   
155B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1568   E1                     POP   hl   
1569   E5                     PUSH   hl   
156A   E5                     PUSH   hl   
156B   CD 51 0C               CALL   run   
156E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
157D   CD BA 0A               CALL   flushBuffer   
1580   76                     HALT      
1581                EXPECTM_0_2661S45:      
1581   E1                     POP   HL   
1582                          ;*Macro unroll:  test "123 456 +", 123+456
1582   31 00 4B               LD   SP,STACK   
1585   CD 7A 0B               CALL   coldInit   
1588   CD BA 49               CALL   execStr   
158B   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1595   CD BA 0A               CALL   flushBuffer   
1598                          ;*Macro unroll:  expect "123 456 +",123+456
1598   E1                     POP   HL   
1599   E5                     PUSH   HL   
159A   11 43 02               LD   DE,123+456   
159D   B7                     OR   A   
159E   ED 52                  SBC   HL,DE   
15A0   7D                     LD   A,L   
15A1   B4                     OR   H   
15A2   CA 06 16               JP   Z,expectM_0_2662S45   
15A5   CD 32 0B               CALL   printStr   
15A8   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
15B8   CD 32 0B               CALL   printStr   
15BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15CA   21 43 02               LD   hl,123+456   
15CD   E5                     PUSH   hl   
15CE   E5                     PUSH   hl   
15CF   CD 51 0C               CALL   run   
15D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15DA   CD BA 0A               CALL   flushBuffer   
15DD   CD 32 0B               CALL   printStr   
15E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15ED   E1                     POP   hl   
15EE   E5                     PUSH   hl   
15EF   E5                     PUSH   hl   
15F0   CD 51 0C               CALL   run   
15F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1602   CD BA 0A               CALL   flushBuffer   
1605   76                     HALT      
1606                EXPECTM_0_2662S45:      
1606   E1                     POP   HL   
1607                          ;*Macro unroll:  test "64 128 +", 64+128
1607   31 00 4B               LD   SP,STACK   
160A   CD 7A 0B               CALL   coldInit   
160D   CD BA 49               CALL   execStr   
1610   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
1619   CD BA 0A               CALL   flushBuffer   
161C                          ;*Macro unroll:  expect "64 128 +",64+128
161C   E1                     POP   HL   
161D   E5                     PUSH   HL   
161E   11 C0 00               LD   DE,64+128   
1621   B7                     OR   A   
1622   ED 52                  SBC   HL,DE   
1624   7D                     LD   A,L   
1625   B4                     OR   H   
1626   CA 89 16               JP   Z,expectM_0_2663S45   
1629   CD 32 0B               CALL   printStr   
162C   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
163B   CD 32 0B               CALL   printStr   
163E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
164D   21 C0 00               LD   hl,64+128   
1650   E5                     PUSH   hl   
1651   E5                     PUSH   hl   
1652   CD 51 0C               CALL   run   
1655   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
165D   CD BA 0A               CALL   flushBuffer   
1660   CD 32 0B               CALL   printStr   
1663   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1670   E1                     POP   hl   
1671   E5                     PUSH   hl   
1672   E5                     PUSH   hl   
1673   CD 51 0C               CALL   run   
1676   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1685   CD BA 0A               CALL   flushBuffer   
1688   76                     HALT      
1689                EXPECTM_0_2663S45:      
1689   E1                     POP   HL   
168A                          ;*Macro unroll:  test "1 2 +", 3
168A   31 00 4B               LD   SP,STACK   
168D   CD 7A 0B               CALL   coldInit   
1690   CD BA 49               CALL   execStr   
1693   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1699   CD BA 0A               CALL   flushBuffer   
169C                          ;*Macro unroll:  expect "1 2 +",3
169C   E1                     POP   HL   
169D   E5                     PUSH   HL   
169E   11 03 00               LD   DE,3   
16A1   B7                     OR   A   
16A2   ED 52                  SBC   HL,DE   
16A4   7D                     LD   A,L   
16A5   B4                     OR   H   
16A6   CA 06 17               JP   Z,expectM_0_2664S45   
16A9   CD 32 0B               CALL   printStr   
16AC   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
16B8   CD 32 0B               CALL   printStr   
16BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16CA   21 03 00               LD   hl,3   
16CD   E5                     PUSH   hl   
16CE   E5                     PUSH   hl   
16CF   CD 51 0C               CALL   run   
16D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16DA   CD BA 0A               CALL   flushBuffer   
16DD   CD 32 0B               CALL   printStr   
16E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16ED   E1                     POP   hl   
16EE   E5                     PUSH   hl   
16EF   E5                     PUSH   hl   
16F0   CD 51 0C               CALL   run   
16F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1702   CD BA 0A               CALL   flushBuffer   
1705   76                     HALT      
1706                EXPECTM_0_2664S45:      
1706   E1                     POP   HL   
1707                          ;*Macro unroll:  test "1a= a++ a",2
1707   31 00 4B               LD   SP,STACK   
170A   CD 7A 0B               CALL   coldInit   
170D   CD BA 49               CALL   execStr   
1710   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
171A   CD BA 0A               CALL   flushBuffer   
171D                          ;*Macro unroll:  expect "1a= a++ a",2
171D   E1                     POP   HL   
171E   E5                     PUSH   HL   
171F   11 02 00               LD   DE,2   
1722   B7                     OR   A   
1723   ED 52                  SBC   HL,DE   
1725   7D                     LD   A,L   
1726   B4                     OR   H   
1727   CA 8B 17               JP   Z,expectM_0_2665S45   
172A   CD 32 0B               CALL   printStr   
172D   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
173D   CD 32 0B               CALL   printStr   
1740   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
174F   21 02 00               LD   hl,2   
1752   E5                     PUSH   hl   
1753   E5                     PUSH   hl   
1754   CD 51 0C               CALL   run   
1757   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
175F   CD BA 0A               CALL   flushBuffer   
1762   CD 32 0B               CALL   printStr   
1765   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1772   E1                     POP   hl   
1773   E5                     PUSH   hl   
1774   E5                     PUSH   hl   
1775   CD 51 0C               CALL   run   
1778   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1787   CD BA 0A               CALL   flushBuffer   
178A   76                     HALT      
178B                EXPECTM_0_2665S45:      
178B   E1                     POP   HL   
178C                          ;*Macro unroll:  test "-1 -1 -",0
178C   31 00 4B               LD   SP,STACK   
178F   CD 7A 0B               CALL   coldInit   
1792   CD BA 49               CALL   execStr   
1795   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
179D   CD BA 0A               CALL   flushBuffer   
17A0                          ;*Macro unroll:  expect "-1 -1 -",0
17A0   E1                     POP   HL   
17A1   E5                     PUSH   HL   
17A2   11 00 00               LD   DE,0   
17A5   B7                     OR   A   
17A6   ED 52                  SBC   HL,DE   
17A8   7D                     LD   A,L   
17A9   B4                     OR   H   
17AA   CA 0C 18               JP   Z,expectM_0_2666S45   
17AD   CD 32 0B               CALL   printStr   
17B0   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
17BE   CD 32 0B               CALL   printStr   
17C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D0   21 00 00               LD   hl,0   
17D3   E5                     PUSH   hl   
17D4   E5                     PUSH   hl   
17D5   CD 51 0C               CALL   run   
17D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17E0   CD BA 0A               CALL   flushBuffer   
17E3   CD 32 0B               CALL   printStr   
17E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F3   E1                     POP   hl   
17F4   E5                     PUSH   hl   
17F5   E5                     PUSH   hl   
17F6   CD 51 0C               CALL   run   
17F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1808   CD BA 0A               CALL   flushBuffer   
180B   76                     HALT      
180C                EXPECTM_0_2666S45:      
180C   E1                     POP   HL   
180D                          ;*Macro unroll:  test "5 3 -", 2
180D   31 00 4B               LD   SP,STACK   
1810   CD 7A 0B               CALL   coldInit   
1813   CD BA 49               CALL   execStr   
1816   35 20 33 20 2D 00      .CSTR   "5 3 -"   
181C   CD BA 0A               CALL   flushBuffer   
181F                          ;*Macro unroll:  expect "5 3 -",2
181F   E1                     POP   HL   
1820   E5                     PUSH   HL   
1821   11 02 00               LD   DE,2   
1824   B7                     OR   A   
1825   ED 52                  SBC   HL,DE   
1827   7D                     LD   A,L   
1828   B4                     OR   H   
1829   CA 89 18               JP   Z,expectM_0_2667S45   
182C   CD 32 0B               CALL   printStr   
182F   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
183B   CD 32 0B               CALL   printStr   
183E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
184D   21 02 00               LD   hl,2   
1850   E5                     PUSH   hl   
1851   E5                     PUSH   hl   
1852   CD 51 0C               CALL   run   
1855   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
185D   CD BA 0A               CALL   flushBuffer   
1860   CD 32 0B               CALL   printStr   
1863   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1870   E1                     POP   hl   
1871   E5                     PUSH   hl   
1872   E5                     PUSH   hl   
1873   CD 51 0C               CALL   run   
1876   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1885   CD BA 0A               CALL   flushBuffer   
1888   76                     HALT      
1889                EXPECTM_0_2667S45:      
1889   E1                     POP   HL   
188A                          ;*Macro unroll:  test "2 1 -",1
188A   31 00 4B               LD   SP,STACK   
188D   CD 7A 0B               CALL   coldInit   
1890   CD BA 49               CALL   execStr   
1893   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1899   CD BA 0A               CALL   flushBuffer   
189C                          ;*Macro unroll:  expect "2 1 -",1
189C   E1                     POP   HL   
189D   E5                     PUSH   HL   
189E   11 01 00               LD   DE,1   
18A1   B7                     OR   A   
18A2   ED 52                  SBC   HL,DE   
18A4   7D                     LD   A,L   
18A5   B4                     OR   H   
18A6   CA 06 19               JP   Z,expectM_0_2668S45   
18A9   CD 32 0B               CALL   printStr   
18AC   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
18B8   CD 32 0B               CALL   printStr   
18BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18CA   21 01 00               LD   hl,1   
18CD   E5                     PUSH   hl   
18CE   E5                     PUSH   hl   
18CF   CD 51 0C               CALL   run   
18D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18DA   CD BA 0A               CALL   flushBuffer   
18DD   CD 32 0B               CALL   printStr   
18E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18ED   E1                     POP   hl   
18EE   E5                     PUSH   hl   
18EF   E5                     PUSH   hl   
18F0   CD 51 0C               CALL   run   
18F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1902   CD BA 0A               CALL   flushBuffer   
1905   76                     HALT      
1906                EXPECTM_0_2668S45:      
1906   E1                     POP   HL   
1907                          ;*Macro unroll:  test "3a= a-- a",2
1907   31 00 4B               LD   SP,STACK   
190A   CD 7A 0B               CALL   coldInit   
190D   CD BA 49               CALL   execStr   
1910   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
191A   CD BA 0A               CALL   flushBuffer   
191D                          ;*Macro unroll:  expect "3a= a-- a",2
191D   E1                     POP   HL   
191E   E5                     PUSH   HL   
191F   11 02 00               LD   DE,2   
1922   B7                     OR   A   
1923   ED 52                  SBC   HL,DE   
1925   7D                     LD   A,L   
1926   B4                     OR   H   
1927   CA 8B 19               JP   Z,expectM_0_2669S45   
192A   CD 32 0B               CALL   printStr   
192D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
193D   CD 32 0B               CALL   printStr   
1940   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
194F   21 02 00               LD   hl,2   
1952   E5                     PUSH   hl   
1953   E5                     PUSH   hl   
1954   CD 51 0C               CALL   run   
1957   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
195F   CD BA 0A               CALL   flushBuffer   
1962   CD 32 0B               CALL   printStr   
1965   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1972   E1                     POP   hl   
1973   E5                     PUSH   hl   
1974   E5                     PUSH   hl   
1975   CD 51 0C               CALL   run   
1978   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1987   CD BA 0A               CALL   flushBuffer   
198A   76                     HALT      
198B                EXPECTM_0_2669S45:      
198B   E1                     POP   HL   
198C                          ;*Macro unroll:  test "3 5 &", 1
198C   31 00 4B               LD   SP,STACK   
198F   CD 7A 0B               CALL   coldInit   
1992   CD BA 49               CALL   execStr   
1995   33 20 35 20 26 00      .CSTR   "3 5 &"   
199B   CD BA 0A               CALL   flushBuffer   
199E                          ;*Macro unroll:  expect "3 5 &",1
199E   E1                     POP   HL   
199F   E5                     PUSH   HL   
19A0   11 01 00               LD   DE,1   
19A3   B7                     OR   A   
19A4   ED 52                  SBC   HL,DE   
19A6   7D                     LD   A,L   
19A7   B4                     OR   H   
19A8   CA 08 1A               JP   Z,expectM_0_2670S45   
19AB   CD 32 0B               CALL   printStr   
19AE   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
19BA   CD 32 0B               CALL   printStr   
19BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CC   21 01 00               LD   hl,1   
19CF   E5                     PUSH   hl   
19D0   E5                     PUSH   hl   
19D1   CD 51 0C               CALL   run   
19D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19DC   CD BA 0A               CALL   flushBuffer   
19DF   CD 32 0B               CALL   printStr   
19E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19EF   E1                     POP   hl   
19F0   E5                     PUSH   hl   
19F1   E5                     PUSH   hl   
19F2   CD 51 0C               CALL   run   
19F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A04   CD BA 0A               CALL   flushBuffer   
1A07   76                     HALT      
1A08                EXPECTM_0_2670S45:      
1A08   E1                     POP   HL   
1A09                          ;*Macro unroll:  test "3 5 |", 7
1A09   31 00 4B               LD   SP,STACK   
1A0C   CD 7A 0B               CALL   coldInit   
1A0F   CD BA 49               CALL   execStr   
1A12   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1A18   CD BA 0A               CALL   flushBuffer   
1A1B                          ;*Macro unroll:  expect "3 5 |",7
1A1B   E1                     POP   HL   
1A1C   E5                     PUSH   HL   
1A1D   11 07 00               LD   DE,7   
1A20   B7                     OR   A   
1A21   ED 52                  SBC   HL,DE   
1A23   7D                     LD   A,L   
1A24   B4                     OR   H   
1A25   CA 85 1A               JP   Z,expectM_0_2671S45   
1A28   CD 32 0B               CALL   printStr   
1A2B   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1A37   CD 32 0B               CALL   printStr   
1A3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A49   21 07 00               LD   hl,7   
1A4C   E5                     PUSH   hl   
1A4D   E5                     PUSH   hl   
1A4E   CD 51 0C               CALL   run   
1A51   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A59   CD BA 0A               CALL   flushBuffer   
1A5C   CD 32 0B               CALL   printStr   
1A5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A6C   E1                     POP   hl   
1A6D   E5                     PUSH   hl   
1A6E   E5                     PUSH   hl   
1A6F   CD 51 0C               CALL   run   
1A72   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A81   CD BA 0A               CALL   flushBuffer   
1A84   76                     HALT      
1A85                EXPECTM_0_2671S45:      
1A85   E1                     POP   HL   
1A86                          ;*Macro unroll:  test "3 5 /x", 6
1A86   31 00 4B               LD   SP,STACK   
1A89   CD 7A 0B               CALL   coldInit   
1A8C   CD BA 49               CALL   execStr   
1A8F   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
1A96   CD BA 0A               CALL   flushBuffer   
1A99                          ;*Macro unroll:  expect "3 5 /x",6
1A99   E1                     POP   HL   
1A9A   E5                     PUSH   HL   
1A9B   11 06 00               LD   DE,6   
1A9E   B7                     OR   A   
1A9F   ED 52                  SBC   HL,DE   
1AA1   7D                     LD   A,L   
1AA2   B4                     OR   H   
1AA3   CA 04 1B               JP   Z,expectM_0_2672S45   
1AA6   CD 32 0B               CALL   printStr   
1AA9   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1AB6   CD 32 0B               CALL   printStr   
1AB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AC8   21 06 00               LD   hl,6   
1ACB   E5                     PUSH   hl   
1ACC   E5                     PUSH   hl   
1ACD   CD 51 0C               CALL   run   
1AD0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AD8   CD BA 0A               CALL   flushBuffer   
1ADB   CD 32 0B               CALL   printStr   
1ADE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AEB   E1                     POP   hl   
1AEC   E5                     PUSH   hl   
1AED   E5                     PUSH   hl   
1AEE   CD 51 0C               CALL   run   
1AF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B00   CD BA 0A               CALL   flushBuffer   
1B03   76                     HALT      
1B04                EXPECTM_0_2672S45:      
1B04   E1                     POP   HL   
1B05                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1B05   31 00 4B               LD   SP,STACK   
1B08   CD 7A 0B               CALL   coldInit   
1B0B   CD BA 49               CALL   execStr   
1B0E   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1B1D   CD BA 0A               CALL   flushBuffer   
1B20                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1B20   E1                     POP   HL   
1B21   E5                     PUSH   HL   
1B22   11 06 00               LD   DE,6   
1B25   B7                     OR   A   
1B26   ED 52                  SBC   HL,DE   
1B28   7D                     LD   A,L   
1B29   B4                     OR   H   
1B2A   CA 93 1B               JP   Z,expectM_0_2673S45   
1B2D   CD 32 0B               CALL   printStr   
1B30   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1B45   CD 32 0B               CALL   printStr   
1B48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B57   21 06 00               LD   hl,6   
1B5A   E5                     PUSH   hl   
1B5B   E5                     PUSH   hl   
1B5C   CD 51 0C               CALL   run   
1B5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B67   CD BA 0A               CALL   flushBuffer   
1B6A   CD 32 0B               CALL   printStr   
1B6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B7A   E1                     POP   hl   
1B7B   E5                     PUSH   hl   
1B7C   E5                     PUSH   hl   
1B7D   CD 51 0C               CALL   run   
1B80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B8F   CD BA 0A               CALL   flushBuffer   
1B92   76                     HALT      
1B93                EXPECTM_0_2673S45:      
1B93   E1                     POP   HL   
1B94                          ;*Macro unroll:  test "2 3 *", 6
1B94   31 00 4B               LD   SP,STACK   
1B97   CD 7A 0B               CALL   coldInit   
1B9A   CD BA 49               CALL   execStr   
1B9D   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1BA3   CD BA 0A               CALL   flushBuffer   
1BA6                          ;*Macro unroll:  expect "2 3 *",6
1BA6   E1                     POP   HL   
1BA7   E5                     PUSH   HL   
1BA8   11 06 00               LD   DE,6   
1BAB   B7                     OR   A   
1BAC   ED 52                  SBC   HL,DE   
1BAE   7D                     LD   A,L   
1BAF   B4                     OR   H   
1BB0   CA 10 1C               JP   Z,expectM_0_2674S45   
1BB3   CD 32 0B               CALL   printStr   
1BB6   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1BC2   CD 32 0B               CALL   printStr   
1BC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BD4   21 06 00               LD   hl,6   
1BD7   E5                     PUSH   hl   
1BD8   E5                     PUSH   hl   
1BD9   CD 51 0C               CALL   run   
1BDC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BE4   CD BA 0A               CALL   flushBuffer   
1BE7   CD 32 0B               CALL   printStr   
1BEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BF7   E1                     POP   hl   
1BF8   E5                     PUSH   hl   
1BF9   E5                     PUSH   hl   
1BFA   CD 51 0C               CALL   run   
1BFD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C0C   CD BA 0A               CALL   flushBuffer   
1C0F   76                     HALT      
1C10                EXPECTM_0_2674S45:      
1C10   E1                     POP   HL   
1C11                          ;*Macro unroll:  test "1 2 3 + *", 5
1C11   31 00 4B               LD   SP,STACK   
1C14   CD 7A 0B               CALL   coldInit   
1C17   CD BA 49               CALL   execStr   
1C1A   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1C24   CD BA 0A               CALL   flushBuffer   
1C27                          ;*Macro unroll:  expect "1 2 3 + *",5
1C27   E1                     POP   HL   
1C28   E5                     PUSH   HL   
1C29   11 05 00               LD   DE,5   
1C2C   B7                     OR   A   
1C2D   ED 52                  SBC   HL,DE   
1C2F   7D                     LD   A,L   
1C30   B4                     OR   H   
1C31   CA 95 1C               JP   Z,expectM_0_2675S45   
1C34   CD 32 0B               CALL   printStr   
1C37   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1C47   CD 32 0B               CALL   printStr   
1C4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C59   21 05 00               LD   hl,5   
1C5C   E5                     PUSH   hl   
1C5D   E5                     PUSH   hl   
1C5E   CD 51 0C               CALL   run   
1C61   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C69   CD BA 0A               CALL   flushBuffer   
1C6C   CD 32 0B               CALL   printStr   
1C6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7C   E1                     POP   hl   
1C7D   E5                     PUSH   hl   
1C7E   E5                     PUSH   hl   
1C7F   CD 51 0C               CALL   run   
1C82   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C91   CD BA 0A               CALL   flushBuffer   
1C94   76                     HALT      
1C95                EXPECTM_0_2675S45:      
1C95   E1                     POP   HL   
1C96                          ;*Macro unroll:  test "7 3 /", 2
1C96   31 00 4B               LD   SP,STACK   
1C99   CD 7A 0B               CALL   coldInit   
1C9C   CD BA 49               CALL   execStr   
1C9F   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1CA5   CD BA 0A               CALL   flushBuffer   
1CA8                          ;*Macro unroll:  expect "7 3 /",2
1CA8   E1                     POP   HL   
1CA9   E5                     PUSH   HL   
1CAA   11 02 00               LD   DE,2   
1CAD   B7                     OR   A   
1CAE   ED 52                  SBC   HL,DE   
1CB0   7D                     LD   A,L   
1CB1   B4                     OR   H   
1CB2   CA 12 1D               JP   Z,expectM_0_2676S45   
1CB5   CD 32 0B               CALL   printStr   
1CB8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1CC4   CD 32 0B               CALL   printStr   
1CC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD6   21 02 00               LD   hl,2   
1CD9   E5                     PUSH   hl   
1CDA   E5                     PUSH   hl   
1CDB   CD 51 0C               CALL   run   
1CDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CE6   CD BA 0A               CALL   flushBuffer   
1CE9   CD 32 0B               CALL   printStr   
1CEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CF9   E1                     POP   hl   
1CFA   E5                     PUSH   hl   
1CFB   E5                     PUSH   hl   
1CFC   CD 51 0C               CALL   run   
1CFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D0E   CD BA 0A               CALL   flushBuffer   
1D11   76                     HALT      
1D12                EXPECTM_0_2676S45:      
1D12   E1                     POP   HL   
1D13                          ;*Macro unroll:  test "7 3 / /re", 1
1D13   31 00 4B               LD   SP,STACK   
1D16   CD 7A 0B               CALL   coldInit   
1D19   CD BA 49               CALL   execStr   
1D1C   37 20 33 20 2F 20 2F 72 65 00 .CSTR   "7 3 / /re"   
1D26   CD BA 0A               CALL   flushBuffer   
1D29                          ;*Macro unroll:  expect "7 3 / /re",1
1D29   E1                     POP   HL   
1D2A   E5                     PUSH   HL   
1D2B   11 01 00               LD   DE,1   
1D2E   B7                     OR   A   
1D2F   ED 52                  SBC   HL,DE   
1D31   7D                     LD   A,L   
1D32   B4                     OR   H   
1D33   CA 97 1D               JP   Z,expectM_0_2677S45   
1D36   CD 32 0B               CALL   printStr   
1D39   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
1D49   CD 32 0B               CALL   printStr   
1D4C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D5B   21 01 00               LD   hl,1   
1D5E   E5                     PUSH   hl   
1D5F   E5                     PUSH   hl   
1D60   CD 51 0C               CALL   run   
1D63   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D6B   CD BA 0A               CALL   flushBuffer   
1D6E   CD 32 0B               CALL   printStr   
1D71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7E   E1                     POP   hl   
1D7F   E5                     PUSH   hl   
1D80   E5                     PUSH   hl   
1D81   CD 51 0C               CALL   run   
1D84   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D93   CD BA 0A               CALL   flushBuffer   
1D96   76                     HALT      
1D97                EXPECTM_0_2677S45:      
1D97   E1                     POP   HL   
1D98                          ;*Macro unroll:  test "7 3 /", 2
1D98   31 00 4B               LD   SP,STACK   
1D9B   CD 7A 0B               CALL   coldInit   
1D9E   CD BA 49               CALL   execStr   
1DA1   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1DA7   CD BA 0A               CALL   flushBuffer   
1DAA                          ;*Macro unroll:  expect "7 3 /",2
1DAA   E1                     POP   HL   
1DAB   E5                     PUSH   HL   
1DAC   11 02 00               LD   DE,2   
1DAF   B7                     OR   A   
1DB0   ED 52                  SBC   HL,DE   
1DB2   7D                     LD   A,L   
1DB3   B4                     OR   H   
1DB4   CA 14 1E               JP   Z,expectM_0_2678S45   
1DB7   CD 32 0B               CALL   printStr   
1DBA   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1DC6   CD 32 0B               CALL   printStr   
1DC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD8   21 02 00               LD   hl,2   
1DDB   E5                     PUSH   hl   
1DDC   E5                     PUSH   hl   
1DDD   CD 51 0C               CALL   run   
1DE0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DE8   CD BA 0A               CALL   flushBuffer   
1DEB   CD 32 0B               CALL   printStr   
1DEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DFB   E1                     POP   hl   
1DFC   E5                     PUSH   hl   
1DFD   E5                     PUSH   hl   
1DFE   CD 51 0C               CALL   run   
1E01   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E10   CD BA 0A               CALL   flushBuffer   
1E13   76                     HALT      
1E14                EXPECTM_0_2678S45:      
1E14   E1                     POP   HL   
1E15                          ;*Macro unroll:  test "2 3 ==", FALSE
1E15   31 00 4B               LD   SP,STACK   
1E18   CD 7A 0B               CALL   coldInit   
1E1B   CD BA 49               CALL   execStr   
1E1E   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1E25   CD BA 0A               CALL   flushBuffer   
1E28                          ;*Macro unroll:  expect "2 3 ==",FALSE
1E28   E1                     POP   HL   
1E29   E5                     PUSH   HL   
1E2A   11 00 00               LD   DE,FALSE   
1E2D   B7                     OR   A   
1E2E   ED 52                  SBC   HL,DE   
1E30   7D                     LD   A,L   
1E31   B4                     OR   H   
1E32   CA 93 1E               JP   Z,expectM_0_2679S45   
1E35   CD 32 0B               CALL   printStr   
1E38   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1E45   CD 32 0B               CALL   printStr   
1E48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E57   21 00 00               LD   hl,FALSE   
1E5A   E5                     PUSH   hl   
1E5B   E5                     PUSH   hl   
1E5C   CD 51 0C               CALL   run   
1E5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E67   CD BA 0A               CALL   flushBuffer   
1E6A   CD 32 0B               CALL   printStr   
1E6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E7A   E1                     POP   hl   
1E7B   E5                     PUSH   hl   
1E7C   E5                     PUSH   hl   
1E7D   CD 51 0C               CALL   run   
1E80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E8F   CD BA 0A               CALL   flushBuffer   
1E92   76                     HALT      
1E93                EXPECTM_0_2679S45:      
1E93   E1                     POP   HL   
1E94                          ;*Macro unroll:  test "3 3 ==", TRUE
1E94   31 00 4B               LD   SP,STACK   
1E97   CD 7A 0B               CALL   coldInit   
1E9A   CD BA 49               CALL   execStr   
1E9D   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1EA4   CD BA 0A               CALL   flushBuffer   
1EA7                          ;*Macro unroll:  expect "3 3 ==",TRUE
1EA7   E1                     POP   HL   
1EA8   E5                     PUSH   HL   
1EA9   11 FF FF               LD   DE,TRUE   
1EAC   B7                     OR   A   
1EAD   ED 52                  SBC   HL,DE   
1EAF   7D                     LD   A,L   
1EB0   B4                     OR   H   
1EB1   CA 12 1F               JP   Z,expectM_0_2680S45   
1EB4   CD 32 0B               CALL   printStr   
1EB7   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1EC4   CD 32 0B               CALL   printStr   
1EC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ED6   21 FF FF               LD   hl,TRUE   
1ED9   E5                     PUSH   hl   
1EDA   E5                     PUSH   hl   
1EDB   CD 51 0C               CALL   run   
1EDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EE6   CD BA 0A               CALL   flushBuffer   
1EE9   CD 32 0B               CALL   printStr   
1EEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EF9   E1                     POP   hl   
1EFA   E5                     PUSH   hl   
1EFB   E5                     PUSH   hl   
1EFC   CD 51 0C               CALL   run   
1EFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F0E   CD BA 0A               CALL   flushBuffer   
1F11   76                     HALT      
1F12                EXPECTM_0_2680S45:      
1F12   E1                     POP   HL   
1F13                          ;*Macro unroll:  test "1 2 <", TRUE
1F13   31 00 4B               LD   SP,STACK   
1F16   CD 7A 0B               CALL   coldInit   
1F19   CD BA 49               CALL   execStr   
1F1C   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1F22   CD BA 0A               CALL   flushBuffer   
1F25                          ;*Macro unroll:  expect "1 2 <",TRUE
1F25   E1                     POP   HL   
1F26   E5                     PUSH   HL   
1F27   11 FF FF               LD   DE,TRUE   
1F2A   B7                     OR   A   
1F2B   ED 52                  SBC   HL,DE   
1F2D   7D                     LD   A,L   
1F2E   B4                     OR   H   
1F2F   CA 8F 1F               JP   Z,expectM_0_2681S45   
1F32   CD 32 0B               CALL   printStr   
1F35   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1F41   CD 32 0B               CALL   printStr   
1F44   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F53   21 FF FF               LD   hl,TRUE   
1F56   E5                     PUSH   hl   
1F57   E5                     PUSH   hl   
1F58   CD 51 0C               CALL   run   
1F5B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F63   CD BA 0A               CALL   flushBuffer   
1F66   CD 32 0B               CALL   printStr   
1F69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F76   E1                     POP   hl   
1F77   E5                     PUSH   hl   
1F78   E5                     PUSH   hl   
1F79   CD 51 0C               CALL   run   
1F7C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F8B   CD BA 0A               CALL   flushBuffer   
1F8E   76                     HALT      
1F8F                EXPECTM_0_2681S45:      
1F8F   E1                     POP   HL   
1F90                          ;*Macro unroll:  test "2 1 <", FALSE
1F90   31 00 4B               LD   SP,STACK   
1F93   CD 7A 0B               CALL   coldInit   
1F96   CD BA 49               CALL   execStr   
1F99   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1F9F   CD BA 0A               CALL   flushBuffer   
1FA2                          ;*Macro unroll:  expect "2 1 <",FALSE
1FA2   E1                     POP   HL   
1FA3   E5                     PUSH   HL   
1FA4   11 00 00               LD   DE,FALSE   
1FA7   B7                     OR   A   
1FA8   ED 52                  SBC   HL,DE   
1FAA   7D                     LD   A,L   
1FAB   B4                     OR   H   
1FAC   CA 0C 20               JP   Z,expectM_0_2682S45   
1FAF   CD 32 0B               CALL   printStr   
1FB2   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1FBE   CD 32 0B               CALL   printStr   
1FC1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FD0   21 00 00               LD   hl,FALSE   
1FD3   E5                     PUSH   hl   
1FD4   E5                     PUSH   hl   
1FD5   CD 51 0C               CALL   run   
1FD8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FE0   CD BA 0A               CALL   flushBuffer   
1FE3   CD 32 0B               CALL   printStr   
1FE6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FF3   E1                     POP   hl   
1FF4   E5                     PUSH   hl   
1FF5   E5                     PUSH   hl   
1FF6   CD 51 0C               CALL   run   
1FF9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2008   CD BA 0A               CALL   flushBuffer   
200B   76                     HALT      
200C                EXPECTM_0_2682S45:      
200C   E1                     POP   HL   
200D                          ;*Macro unroll:  test "2 3 <", TRUE
200D   31 00 4B               LD   SP,STACK   
2010   CD 7A 0B               CALL   coldInit   
2013   CD BA 49               CALL   execStr   
2016   32 20 33 20 3C 00      .CSTR   "2 3 <"   
201C   CD BA 0A               CALL   flushBuffer   
201F                          ;*Macro unroll:  expect "2 3 <",TRUE
201F   E1                     POP   HL   
2020   E5                     PUSH   HL   
2021   11 FF FF               LD   DE,TRUE   
2024   B7                     OR   A   
2025   ED 52                  SBC   HL,DE   
2027   7D                     LD   A,L   
2028   B4                     OR   H   
2029   CA 89 20               JP   Z,expectM_0_2683S45   
202C   CD 32 0B               CALL   printStr   
202F   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
203B   CD 32 0B               CALL   printStr   
203E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
204D   21 FF FF               LD   hl,TRUE   
2050   E5                     PUSH   hl   
2051   E5                     PUSH   hl   
2052   CD 51 0C               CALL   run   
2055   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
205D   CD BA 0A               CALL   flushBuffer   
2060   CD 32 0B               CALL   printStr   
2063   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2070   E1                     POP   hl   
2071   E5                     PUSH   hl   
2072   E5                     PUSH   hl   
2073   CD 51 0C               CALL   run   
2076   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2085   CD BA 0A               CALL   flushBuffer   
2088   76                     HALT      
2089                EXPECTM_0_2683S45:      
2089   E1                     POP   HL   
208A                          ;*Macro unroll:  test "3 3 <", FALSE
208A   31 00 4B               LD   SP,STACK   
208D   CD 7A 0B               CALL   coldInit   
2090   CD BA 49               CALL   execStr   
2093   33 20 33 20 3C 00      .CSTR   "3 3 <"   
2099   CD BA 0A               CALL   flushBuffer   
209C                          ;*Macro unroll:  expect "3 3 <",FALSE
209C   E1                     POP   HL   
209D   E5                     PUSH   HL   
209E   11 00 00               LD   DE,FALSE   
20A1   B7                     OR   A   
20A2   ED 52                  SBC   HL,DE   
20A4   7D                     LD   A,L   
20A5   B4                     OR   H   
20A6   CA 06 21               JP   Z,expectM_0_2684S45   
20A9   CD 32 0B               CALL   printStr   
20AC   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
20B8   CD 32 0B               CALL   printStr   
20BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20CA   21 00 00               LD   hl,FALSE   
20CD   E5                     PUSH   hl   
20CE   E5                     PUSH   hl   
20CF   CD 51 0C               CALL   run   
20D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20DA   CD BA 0A               CALL   flushBuffer   
20DD   CD 32 0B               CALL   printStr   
20E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20ED   E1                     POP   hl   
20EE   E5                     PUSH   hl   
20EF   E5                     PUSH   hl   
20F0   CD 51 0C               CALL   run   
20F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2102   CD BA 0A               CALL   flushBuffer   
2105   76                     HALT      
2106                EXPECTM_0_2684S45:      
2106   E1                     POP   HL   
2107                          ;*Macro unroll:  test "1 2 >", FALSE
2107   31 00 4B               LD   SP,STACK   
210A   CD 7A 0B               CALL   coldInit   
210D   CD BA 49               CALL   execStr   
2110   31 20 32 20 3E 00      .CSTR   "1 2 >"   
2116   CD BA 0A               CALL   flushBuffer   
2119                          ;*Macro unroll:  expect "1 2 >",FALSE
2119   E1                     POP   HL   
211A   E5                     PUSH   HL   
211B   11 00 00               LD   DE,FALSE   
211E   B7                     OR   A   
211F   ED 52                  SBC   HL,DE   
2121   7D                     LD   A,L   
2122   B4                     OR   H   
2123   CA 83 21               JP   Z,expectM_0_2685S45   
2126   CD 32 0B               CALL   printStr   
2129   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2135   CD 32 0B               CALL   printStr   
2138   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2147   21 00 00               LD   hl,FALSE   
214A   E5                     PUSH   hl   
214B   E5                     PUSH   hl   
214C   CD 51 0C               CALL   run   
214F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2157   CD BA 0A               CALL   flushBuffer   
215A   CD 32 0B               CALL   printStr   
215D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
216A   E1                     POP   hl   
216B   E5                     PUSH   hl   
216C   E5                     PUSH   hl   
216D   CD 51 0C               CALL   run   
2170   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
217F   CD BA 0A               CALL   flushBuffer   
2182   76                     HALT      
2183                EXPECTM_0_2685S45:      
2183   E1                     POP   HL   
2184                          ;*Macro unroll:  test "2 1 >", TRUE
2184   31 00 4B               LD   SP,STACK   
2187   CD 7A 0B               CALL   coldInit   
218A   CD BA 49               CALL   execStr   
218D   32 20 31 20 3E 00      .CSTR   "2 1 >"   
2193   CD BA 0A               CALL   flushBuffer   
2196                          ;*Macro unroll:  expect "2 1 >",TRUE
2196   E1                     POP   HL   
2197   E5                     PUSH   HL   
2198   11 FF FF               LD   DE,TRUE   
219B   B7                     OR   A   
219C   ED 52                  SBC   HL,DE   
219E   7D                     LD   A,L   
219F   B4                     OR   H   
21A0   CA 00 22               JP   Z,expectM_0_2686S45   
21A3   CD 32 0B               CALL   printStr   
21A6   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
21B2   CD 32 0B               CALL   printStr   
21B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21C4   21 FF FF               LD   hl,TRUE   
21C7   E5                     PUSH   hl   
21C8   E5                     PUSH   hl   
21C9   CD 51 0C               CALL   run   
21CC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21D4   CD BA 0A               CALL   flushBuffer   
21D7   CD 32 0B               CALL   printStr   
21DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21E7   E1                     POP   hl   
21E8   E5                     PUSH   hl   
21E9   E5                     PUSH   hl   
21EA   CD 51 0C               CALL   run   
21ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21FC   CD BA 0A               CALL   flushBuffer   
21FF   76                     HALT      
2200                EXPECTM_0_2686S45:      
2200   E1                     POP   HL   
2201                          ;*Macro unroll:  test "3 3 >", FALSE
2201   31 00 4B               LD   SP,STACK   
2204   CD 7A 0B               CALL   coldInit   
2207   CD BA 49               CALL   execStr   
220A   33 20 33 20 3E 00      .CSTR   "3 3 >"   
2210   CD BA 0A               CALL   flushBuffer   
2213                          ;*Macro unroll:  expect "3 3 >",FALSE
2213   E1                     POP   HL   
2214   E5                     PUSH   HL   
2215   11 00 00               LD   DE,FALSE   
2218   B7                     OR   A   
2219   ED 52                  SBC   HL,DE   
221B   7D                     LD   A,L   
221C   B4                     OR   H   
221D   CA 7D 22               JP   Z,expectM_0_2687S45   
2220   CD 32 0B               CALL   printStr   
2223   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
222F   CD 32 0B               CALL   printStr   
2232   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2241   21 00 00               LD   hl,FALSE   
2244   E5                     PUSH   hl   
2245   E5                     PUSH   hl   
2246   CD 51 0C               CALL   run   
2249   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2251   CD BA 0A               CALL   flushBuffer   
2254   CD 32 0B               CALL   printStr   
2257   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2264   E1                     POP   hl   
2265   E5                     PUSH   hl   
2266   E5                     PUSH   hl   
2267   CD 51 0C               CALL   run   
226A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2279   CD BA 0A               CALL   flushBuffer   
227C   76                     HALT      
227D                EXPECTM_0_2687S45:      
227D   E1                     POP   HL   
227E                          ;*Macro unroll:  test "4 3 >", TRUE
227E   31 00 4B               LD   SP,STACK   
2281   CD 7A 0B               CALL   coldInit   
2284   CD BA 49               CALL   execStr   
2287   34 20 33 20 3E 00      .CSTR   "4 3 >"   
228D   CD BA 0A               CALL   flushBuffer   
2290                          ;*Macro unroll:  expect "4 3 >",TRUE
2290   E1                     POP   HL   
2291   E5                     PUSH   HL   
2292   11 FF FF               LD   DE,TRUE   
2295   B7                     OR   A   
2296   ED 52                  SBC   HL,DE   
2298   7D                     LD   A,L   
2299   B4                     OR   H   
229A   CA FA 22               JP   Z,expectM_0_2688S45   
229D   CD 32 0B               CALL   printStr   
22A0   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
22AC   CD 32 0B               CALL   printStr   
22AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22BE   21 FF FF               LD   hl,TRUE   
22C1   E5                     PUSH   hl   
22C2   E5                     PUSH   hl   
22C3   CD 51 0C               CALL   run   
22C6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22CE   CD BA 0A               CALL   flushBuffer   
22D1   CD 32 0B               CALL   printStr   
22D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22E1   E1                     POP   hl   
22E2   E5                     PUSH   hl   
22E3   E5                     PUSH   hl   
22E4   CD 51 0C               CALL   run   
22E7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22F6   CD BA 0A               CALL   flushBuffer   
22F9   76                     HALT      
22FA                EXPECTM_0_2688S45:      
22FA   E1                     POP   HL   
22FB                          ;*Macro unroll:  test "2 2 <=", TRUE
22FB   31 00 4B               LD   SP,STACK   
22FE   CD 7A 0B               CALL   coldInit   
2301   CD BA 49               CALL   execStr   
2304   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
230B   CD BA 0A               CALL   flushBuffer   
230E                          ;*Macro unroll:  expect "2 2 <=",TRUE
230E   E1                     POP   HL   
230F   E5                     PUSH   HL   
2310   11 FF FF               LD   DE,TRUE   
2313   B7                     OR   A   
2314   ED 52                  SBC   HL,DE   
2316   7D                     LD   A,L   
2317   B4                     OR   H   
2318   CA 79 23               JP   Z,expectM_0_2689S45   
231B   CD 32 0B               CALL   printStr   
231E   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
232B   CD 32 0B               CALL   printStr   
232E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
233D   21 FF FF               LD   hl,TRUE   
2340   E5                     PUSH   hl   
2341   E5                     PUSH   hl   
2342   CD 51 0C               CALL   run   
2345   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
234D   CD BA 0A               CALL   flushBuffer   
2350   CD 32 0B               CALL   printStr   
2353   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2360   E1                     POP   hl   
2361   E5                     PUSH   hl   
2362   E5                     PUSH   hl   
2363   CD 51 0C               CALL   run   
2366   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2375   CD BA 0A               CALL   flushBuffer   
2378   76                     HALT      
2379                EXPECTM_0_2689S45:      
2379   E1                     POP   HL   
237A                          ;*Macro unroll:  test "2 2 >=", TRUE
237A   31 00 4B               LD   SP,STACK   
237D   CD 7A 0B               CALL   coldInit   
2380   CD BA 49               CALL   execStr   
2383   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
238A   CD BA 0A               CALL   flushBuffer   
238D                          ;*Macro unroll:  expect "2 2 >=",TRUE
238D   E1                     POP   HL   
238E   E5                     PUSH   HL   
238F   11 FF FF               LD   DE,TRUE   
2392   B7                     OR   A   
2393   ED 52                  SBC   HL,DE   
2395   7D                     LD   A,L   
2396   B4                     OR   H   
2397   CA F8 23               JP   Z,expectM_0_2690S45   
239A   CD 32 0B               CALL   printStr   
239D   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
23AA   CD 32 0B               CALL   printStr   
23AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23BC   21 FF FF               LD   hl,TRUE   
23BF   E5                     PUSH   hl   
23C0   E5                     PUSH   hl   
23C1   CD 51 0C               CALL   run   
23C4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23CC   CD BA 0A               CALL   flushBuffer   
23CF   CD 32 0B               CALL   printStr   
23D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23DF   E1                     POP   hl   
23E0   E5                     PUSH   hl   
23E1   E5                     PUSH   hl   
23E2   CD 51 0C               CALL   run   
23E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23F4   CD BA 0A               CALL   flushBuffer   
23F7   76                     HALT      
23F8                EXPECTM_0_2690S45:      
23F8   E1                     POP   HL   
23F9                          ;*Macro unroll:  test "3 1 <<", 6
23F9   31 00 4B               LD   SP,STACK   
23FC   CD 7A 0B               CALL   coldInit   
23FF   CD BA 49               CALL   execStr   
2402   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
2409   CD BA 0A               CALL   flushBuffer   
240C                          ;*Macro unroll:  expect "3 1 <<",6
240C   E1                     POP   HL   
240D   E5                     PUSH   HL   
240E   11 06 00               LD   DE,6   
2411   B7                     OR   A   
2412   ED 52                  SBC   HL,DE   
2414   7D                     LD   A,L   
2415   B4                     OR   H   
2416   CA 77 24               JP   Z,expectM_0_2691S45   
2419   CD 32 0B               CALL   printStr   
241C   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2429   CD 32 0B               CALL   printStr   
242C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
243B   21 06 00               LD   hl,6   
243E   E5                     PUSH   hl   
243F   E5                     PUSH   hl   
2440   CD 51 0C               CALL   run   
2443   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
244B   CD BA 0A               CALL   flushBuffer   
244E   CD 32 0B               CALL   printStr   
2451   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
245E   E1                     POP   hl   
245F   E5                     PUSH   hl   
2460   E5                     PUSH   hl   
2461   CD 51 0C               CALL   run   
2464   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2473   CD BA 0A               CALL   flushBuffer   
2476   76                     HALT      
2477                EXPECTM_0_2691S45:      
2477   E1                     POP   HL   
2478                          ;*Macro unroll:  test "10 1 >>", 5
2478   31 00 4B               LD   SP,STACK   
247B   CD 7A 0B               CALL   coldInit   
247E   CD BA 49               CALL   execStr   
2481   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2489   CD BA 0A               CALL   flushBuffer   
248C                          ;*Macro unroll:  expect "10 1 >>",5
248C   E1                     POP   HL   
248D   E5                     PUSH   HL   
248E   11 05 00               LD   DE,5   
2491   B7                     OR   A   
2492   ED 52                  SBC   HL,DE   
2494   7D                     LD   A,L   
2495   B4                     OR   H   
2496   CA F8 24               JP   Z,expectM_0_2692S45   
2499   CD 32 0B               CALL   printStr   
249C   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
24AA   CD 32 0B               CALL   printStr   
24AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24BC   21 05 00               LD   hl,5   
24BF   E5                     PUSH   hl   
24C0   E5                     PUSH   hl   
24C1   CD 51 0C               CALL   run   
24C4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24CC   CD BA 0A               CALL   flushBuffer   
24CF   CD 32 0B               CALL   printStr   
24D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24DF   E1                     POP   hl   
24E0   E5                     PUSH   hl   
24E1   E5                     PUSH   hl   
24E2   CD 51 0C               CALL   run   
24E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24F4   CD BA 0A               CALL   flushBuffer   
24F7   76                     HALT      
24F8                EXPECTM_0_2692S45:      
24F8   E1                     POP   HL   
24F9                          ;*Macro unroll:  test "1 x = x", 1
24F9   31 00 4B               LD   SP,STACK   
24FC   CD 7A 0B               CALL   coldInit   
24FF   CD BA 49               CALL   execStr   
2502   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
250A   CD BA 0A               CALL   flushBuffer   
250D                          ;*Macro unroll:  expect "1 x = x",1
250D   E1                     POP   HL   
250E   E5                     PUSH   HL   
250F   11 01 00               LD   DE,1   
2512   B7                     OR   A   
2513   ED 52                  SBC   HL,DE   
2515   7D                     LD   A,L   
2516   B4                     OR   H   
2517   CA 79 25               JP   Z,expectM_0_2693S45   
251A   CD 32 0B               CALL   printStr   
251D   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
252B   CD 32 0B               CALL   printStr   
252E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
253D   21 01 00               LD   hl,1   
2540   E5                     PUSH   hl   
2541   E5                     PUSH   hl   
2542   CD 51 0C               CALL   run   
2545   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
254D   CD BA 0A               CALL   flushBuffer   
2550   CD 32 0B               CALL   printStr   
2553   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2560   E1                     POP   hl   
2561   E5                     PUSH   hl   
2562   E5                     PUSH   hl   
2563   CD 51 0C               CALL   run   
2566   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2575   CD BA 0A               CALL   flushBuffer   
2578   76                     HALT      
2579                EXPECTM_0_2693S45:      
2579   E1                     POP   HL   
257A                          ;*Macro unroll:  test "1{}^", 1
257A   31 00 4B               LD   SP,STACK   
257D   CD 7A 0B               CALL   coldInit   
2580   CD BA 49               CALL   execStr   
2583   31 7B 7D 5E 00         .CSTR   "1{}^"   
2588   CD BA 0A               CALL   flushBuffer   
258B                          ;*Macro unroll:  expect "1{}^",1
258B   E1                     POP   HL   
258C   E5                     PUSH   HL   
258D   11 01 00               LD   DE,1   
2590   B7                     OR   A   
2591   ED 52                  SBC   HL,DE   
2593   7D                     LD   A,L   
2594   B4                     OR   H   
2595   CA F4 25               JP   Z,expectM_0_2694S45   
2598   CD 32 0B               CALL   printStr   
259B   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
25A6   CD 32 0B               CALL   printStr   
25A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25B8   21 01 00               LD   hl,1   
25BB   E5                     PUSH   hl   
25BC   E5                     PUSH   hl   
25BD   CD 51 0C               CALL   run   
25C0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25C8   CD BA 0A               CALL   flushBuffer   
25CB   CD 32 0B               CALL   printStr   
25CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25DB   E1                     POP   hl   
25DC   E5                     PUSH   hl   
25DD   E5                     PUSH   hl   
25DE   CD 51 0C               CALL   run   
25E1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25F0   CD BA 0A               CALL   flushBuffer   
25F3   76                     HALT      
25F4                EXPECTM_0_2694S45:      
25F4   E1                     POP   HL   
25F5                          ;*Macro unroll:  test "{1}^", 1
25F5   31 00 4B               LD   SP,STACK   
25F8   CD 7A 0B               CALL   coldInit   
25FB   CD BA 49               CALL   execStr   
25FE   7B 31 7D 5E 00         .CSTR   "{1}^"   
2603   CD BA 0A               CALL   flushBuffer   
2606                          ;*Macro unroll:  expect "{1}^",1
2606   E1                     POP   HL   
2607   E5                     PUSH   HL   
2608   11 01 00               LD   DE,1   
260B   B7                     OR   A   
260C   ED 52                  SBC   HL,DE   
260E   7D                     LD   A,L   
260F   B4                     OR   H   
2610   CA 6F 26               JP   Z,expectM_0_2695S45   
2613   CD 32 0B               CALL   printStr   
2616   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2621   CD 32 0B               CALL   printStr   
2624   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2633   21 01 00               LD   hl,1   
2636   E5                     PUSH   hl   
2637   E5                     PUSH   hl   
2638   CD 51 0C               CALL   run   
263B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2643   CD BA 0A               CALL   flushBuffer   
2646   CD 32 0B               CALL   printStr   
2649   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2656   E1                     POP   hl   
2657   E5                     PUSH   hl   
2658   E5                     PUSH   hl   
2659   CD 51 0C               CALL   run   
265C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
266B   CD BA 0A               CALL   flushBuffer   
266E   76                     HALT      
266F                EXPECTM_0_2695S45:      
266F   E1                     POP   HL   
2670                          ;*Macro unroll:  test "{{1}^}^", 1
2670   31 00 4B               LD   SP,STACK   
2673   CD 7A 0B               CALL   coldInit   
2676   CD BA 49               CALL   execStr   
2679   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
2681   CD BA 0A               CALL   flushBuffer   
2684                          ;*Macro unroll:  expect "{{1}^}^",1
2684   E1                     POP   HL   
2685   E5                     PUSH   HL   
2686   11 01 00               LD   DE,1   
2689   B7                     OR   A   
268A   ED 52                  SBC   HL,DE   
268C   7D                     LD   A,L   
268D   B4                     OR   H   
268E   CA F0 26               JP   Z,expectM_0_2696S45   
2691   CD 32 0B               CALL   printStr   
2694   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
26A2   CD 32 0B               CALL   printStr   
26A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26B4   21 01 00               LD   hl,1   
26B7   E5                     PUSH   hl   
26B8   E5                     PUSH   hl   
26B9   CD 51 0C               CALL   run   
26BC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26C4   CD BA 0A               CALL   flushBuffer   
26C7   CD 32 0B               CALL   printStr   
26CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26D7   E1                     POP   hl   
26D8   E5                     PUSH   hl   
26D9   E5                     PUSH   hl   
26DA   CD 51 0C               CALL   run   
26DD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26EC   CD BA 0A               CALL   flushBuffer   
26EF   76                     HALT      
26F0                EXPECTM_0_2696S45:      
26F0   E1                     POP   HL   
26F1                          ;*Macro unroll:  test "{{{1}^}^}^", 1
26F1   31 00 4B               LD   SP,STACK   
26F4   CD 7A 0B               CALL   coldInit   
26F7   CD BA 49               CALL   execStr   
26FA   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
2705   CD BA 0A               CALL   flushBuffer   
2708                          ;*Macro unroll:  expect "{{{1}^}^}^",1
2708   E1                     POP   HL   
2709   E5                     PUSH   HL   
270A   11 01 00               LD   DE,1   
270D   B7                     OR   A   
270E   ED 52                  SBC   HL,DE   
2710   7D                     LD   A,L   
2711   B4                     OR   H   
2712   CA 77 27               JP   Z,expectM_0_2697S45   
2715   CD 32 0B               CALL   printStr   
2718   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2729   CD 32 0B               CALL   printStr   
272C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
273B   21 01 00               LD   hl,1   
273E   E5                     PUSH   hl   
273F   E5                     PUSH   hl   
2740   CD 51 0C               CALL   run   
2743   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
274B   CD BA 0A               CALL   flushBuffer   
274E   CD 32 0B               CALL   printStr   
2751   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
275E   E1                     POP   hl   
275F   E5                     PUSH   hl   
2760   E5                     PUSH   hl   
2761   CD 51 0C               CALL   run   
2764   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2773   CD BA 0A               CALL   flushBuffer   
2776   76                     HALT      
2777                EXPECTM_0_2697S45:      
2777   E1                     POP   HL   
2778                          ;*Macro unroll:  test "5 /f{10} ?", 5
2778   31 00 4B               LD   SP,STACK   
277B   CD 7A 0B               CALL   coldInit   
277E   CD BA 49               CALL   execStr   
2781   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
278C   CD BA 0A               CALL   flushBuffer   
278F                          ;*Macro unroll:  expect "5 /f{10} ?",5
278F   E1                     POP   HL   
2790   E5                     PUSH   HL   
2791   11 05 00               LD   DE,5   
2794   B7                     OR   A   
2795   ED 52                  SBC   HL,DE   
2797   7D                     LD   A,L   
2798   B4                     OR   H   
2799   CA FE 27               JP   Z,expectM_0_2698S45   
279C   CD 32 0B               CALL   printStr   
279F   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
27B0   CD 32 0B               CALL   printStr   
27B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27C2   21 05 00               LD   hl,5   
27C5   E5                     PUSH   hl   
27C6   E5                     PUSH   hl   
27C7   CD 51 0C               CALL   run   
27CA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27D2   CD BA 0A               CALL   flushBuffer   
27D5   CD 32 0B               CALL   printStr   
27D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27E5   E1                     POP   hl   
27E6   E5                     PUSH   hl   
27E7   E5                     PUSH   hl   
27E8   CD 51 0C               CALL   run   
27EB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27FA   CD BA 0A               CALL   flushBuffer   
27FD   76                     HALT      
27FE                EXPECTM_0_2698S45:      
27FE   E1                     POP   HL   
27FF                          ;*Macro unroll:  test "5 /t{10} ? +", 15
27FF   31 00 4B               LD   SP,STACK   
2802   CD 7A 0B               CALL   coldInit   
2805   CD BA 49               CALL   execStr   
2808   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
2815   CD BA 0A               CALL   flushBuffer   
2818                          ;*Macro unroll:  expect "5 /t{10} ? +",15
2818   E1                     POP   HL   
2819   E5                     PUSH   HL   
281A   11 0F 00               LD   DE,15   
281D   B7                     OR   A   
281E   ED 52                  SBC   HL,DE   
2820   7D                     LD   A,L   
2821   B4                     OR   H   
2822   CA 89 28               JP   Z,expectM_0_2699S45   
2825   CD 32 0B               CALL   printStr   
2828   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
283B   CD 32 0B               CALL   printStr   
283E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
284D   21 0F 00               LD   hl,15   
2850   E5                     PUSH   hl   
2851   E5                     PUSH   hl   
2852   CD 51 0C               CALL   run   
2855   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
285D   CD BA 0A               CALL   flushBuffer   
2860   CD 32 0B               CALL   printStr   
2863   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2870   E1                     POP   hl   
2871   E5                     PUSH   hl   
2872   E5                     PUSH   hl   
2873   CD 51 0C               CALL   run   
2876   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2885   CD BA 0A               CALL   flushBuffer   
2888   76                     HALT      
2889                EXPECTM_0_2699S45:      
2889   E1                     POP   HL   
288A                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
288A   31 00 4B               LD   SP,STACK   
288D   CD 7A 0B               CALL   coldInit   
2890   CD BA 49               CALL   execStr   
2893   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
28A5   CD BA 0A               CALL   flushBuffer   
28A8                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
28A8   E1                     POP   HL   
28A9   E5                     PUSH   HL   
28AA   11 15 00               LD   DE,21   
28AD   B7                     OR   A   
28AE   ED 52                  SBC   HL,DE   
28B0   7D                     LD   A,L   
28B1   B4                     OR   H   
28B2   CA 1E 29               JP   Z,expectM_0_2700S45   
28B5   CD 32 0B               CALL   printStr   
28B8   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
28D0   CD 32 0B               CALL   printStr   
28D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28E2   21 15 00               LD   hl,21   
28E5   E5                     PUSH   hl   
28E6   E5                     PUSH   hl   
28E7   CD 51 0C               CALL   run   
28EA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28F2   CD BA 0A               CALL   flushBuffer   
28F5   CD 32 0B               CALL   printStr   
28F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2905   E1                     POP   hl   
2906   E5                     PUSH   hl   
2907   E5                     PUSH   hl   
2908   CD 51 0C               CALL   run   
290B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
291A   CD BA 0A               CALL   flushBuffer   
291D   76                     HALT      
291E                EXPECTM_0_2700S45:      
291E   E1                     POP   HL   
291F                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
291F   31 00 4B               LD   SP,STACK   
2922   CD 7A 0B               CALL   coldInit   
2925   CD BA 49               CALL   execStr   
2928   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
293A   CD BA 0A               CALL   flushBuffer   
293D                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
293D   E1                     POP   HL   
293E   E5                     PUSH   HL   
293F   11 0B 00               LD   DE,11   
2942   B7                     OR   A   
2943   ED 52                  SBC   HL,DE   
2945   7D                     LD   A,L   
2946   B4                     OR   H   
2947   CA B3 29               JP   Z,expectM_0_2701S45   
294A   CD 32 0B               CALL   printStr   
294D   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2965   CD 32 0B               CALL   printStr   
2968   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2977   21 0B 00               LD   hl,11   
297A   E5                     PUSH   hl   
297B   E5                     PUSH   hl   
297C   CD 51 0C               CALL   run   
297F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2987   CD BA 0A               CALL   flushBuffer   
298A   CD 32 0B               CALL   printStr   
298D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
299A   E1                     POP   hl   
299B   E5                     PUSH   hl   
299C   E5                     PUSH   hl   
299D   CD 51 0C               CALL   run   
29A0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29AF   CD BA 0A               CALL   flushBuffer   
29B2   76                     HALT      
29B3                EXPECTM_0_2701S45:      
29B3   E1                     POP   HL   
29B4                          ;*Macro unroll:  test ": 0#", $0000
29B4   31 00 4B               LD   SP,STACK   
29B7   CD 7A 0B               CALL   coldInit   
29BA   CD BA 49               CALL   execStr   
29BD   3A 20 30 23 00         .CSTR   ": 0#"   
29C2   CD BA 0A               CALL   flushBuffer   
29C5                          ;*Macro unroll:  expect ": 0#",$0000
29C5   E1                     POP   HL   
29C6   E5                     PUSH   HL   
29C7   11 00 00               LD   DE,$0000   
29CA   B7                     OR   A   
29CB   ED 52                  SBC   HL,DE   
29CD   7D                     LD   A,L   
29CE   B4                     OR   H   
29CF   CA 2E 2A               JP   Z,expectM_0_2702S45   
29D2   CD 32 0B               CALL   printStr   
29D5   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
29E0   CD 32 0B               CALL   printStr   
29E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29F2   21 00 00               LD   hl,$0000   
29F5   E5                     PUSH   hl   
29F6   E5                     PUSH   hl   
29F7   CD 51 0C               CALL   run   
29FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A02   CD BA 0A               CALL   flushBuffer   
2A05   CD 32 0B               CALL   printStr   
2A08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A15   E1                     POP   hl   
2A16   E5                     PUSH   hl   
2A17   E5                     PUSH   hl   
2A18   CD 51 0C               CALL   run   
2A1B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A2A   CD BA 0A               CALL   flushBuffer   
2A2D   76                     HALT      
2A2E                EXPECTM_0_2702S45:      
2A2E   E1                     POP   HL   
2A2F                          ;*Macro unroll:  test ":a 0#", $0100
2A2F   31 00 4B               LD   SP,STACK   
2A32   CD 7A 0B               CALL   coldInit   
2A35   CD BA 49               CALL   execStr   
2A38   3A 61 20 30 23 00      .CSTR   ":a 0#"   
2A3E   CD BA 0A               CALL   flushBuffer   
2A41                          ;*Macro unroll:  expect ":a 0#",$0100
2A41   E1                     POP   HL   
2A42   E5                     PUSH   HL   
2A43   11 00 01               LD   DE,$0100   
2A46   B7                     OR   A   
2A47   ED 52                  SBC   HL,DE   
2A49   7D                     LD   A,L   
2A4A   B4                     OR   H   
2A4B   CA AB 2A               JP   Z,expectM_0_2703S45   
2A4E   CD 32 0B               CALL   printStr   
2A51   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
2A5D   CD 32 0B               CALL   printStr   
2A60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A6F   21 00 01               LD   hl,$0100   
2A72   E5                     PUSH   hl   
2A73   E5                     PUSH   hl   
2A74   CD 51 0C               CALL   run   
2A77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A7F   CD BA 0A               CALL   flushBuffer   
2A82   CD 32 0B               CALL   printStr   
2A85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A92   E1                     POP   hl   
2A93   E5                     PUSH   hl   
2A94   E5                     PUSH   hl   
2A95   CD 51 0C               CALL   run   
2A98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AA7   CD BA 0A               CALL   flushBuffer   
2AAA   76                     HALT      
2AAB                EXPECTM_0_2703S45:      
2AAB   E1                     POP   HL   
2AAC                          ;*Macro unroll:  test ":a: 0#", $0100
2AAC   31 00 4B               LD   SP,STACK   
2AAF   CD 7A 0B               CALL   coldInit   
2AB2   CD BA 49               CALL   execStr   
2AB5   3A 61 3A 20 30 23 00   .CSTR   ":a: 0#"   
2ABC   CD BA 0A               CALL   flushBuffer   
2ABF                          ;*Macro unroll:  expect ":a: 0#",$0100
2ABF   E1                     POP   HL   
2AC0   E5                     PUSH   HL   
2AC1   11 00 01               LD   DE,$0100   
2AC4   B7                     OR   A   
2AC5   ED 52                  SBC   HL,DE   
2AC7   7D                     LD   A,L   
2AC8   B4                     OR   H   
2AC9   CA 2A 2B               JP   Z,expectM_0_2704S45   
2ACC   CD 32 0B               CALL   printStr   
2ACF   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
2ADC   CD 32 0B               CALL   printStr   
2ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEE   21 00 01               LD   hl,$0100   
2AF1   E5                     PUSH   hl   
2AF2   E5                     PUSH   hl   
2AF3   CD 51 0C               CALL   run   
2AF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AFE   CD BA 0A               CALL   flushBuffer   
2B01   CD 32 0B               CALL   printStr   
2B04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B11   E1                     POP   hl   
2B12   E5                     PUSH   hl   
2B13   E5                     PUSH   hl   
2B14   CD 51 0C               CALL   run   
2B17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B26   CD BA 0A               CALL   flushBuffer   
2B29   76                     HALT      
2B2A                EXPECTM_0_2704S45:      
2B2A   E1                     POP   HL   
2B2B                          ;*Macro unroll:  test ":a:b 0#", $0201
2B2B   31 00 4B               LD   SP,STACK   
2B2E   CD 7A 0B               CALL   coldInit   
2B31   CD BA 49               CALL   execStr   
2B34   3A 61 3A 62 20 30 23 00 .CSTR   ":a:b 0#"   
2B3C   CD BA 0A               CALL   flushBuffer   
2B3F                          ;*Macro unroll:  expect ":a:b 0#",$0201
2B3F   E1                     POP   HL   
2B40   E5                     PUSH   HL   
2B41   11 01 02               LD   DE,$0201   
2B44   B7                     OR   A   
2B45   ED 52                  SBC   HL,DE   
2B47   7D                     LD   A,L   
2B48   B4                     OR   H   
2B49   CA AB 2B               JP   Z,expectM_0_2705S45   
2B4C   CD 32 0B               CALL   printStr   
2B4F   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
2B5D   CD 32 0B               CALL   printStr   
2B60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B6F   21 01 02               LD   hl,$0201   
2B72   E5                     PUSH   hl   
2B73   E5                     PUSH   hl   
2B74   CD 51 0C               CALL   run   
2B77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B7F   CD BA 0A               CALL   flushBuffer   
2B82   CD 32 0B               CALL   printStr   
2B85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B92   E1                     POP   hl   
2B93   E5                     PUSH   hl   
2B94   E5                     PUSH   hl   
2B95   CD 51 0C               CALL   run   
2B98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BA7   CD BA 0A               CALL   flushBuffer   
2BAA   76                     HALT      
2BAB                EXPECTM_0_2705S45:      
2BAB   E1                     POP   HL   
2BAC                          ;*Macro unroll:  test "::b 0#", $0101
2BAC   31 00 4B               LD   SP,STACK   
2BAF   CD 7A 0B               CALL   coldInit   
2BB2   CD BA 49               CALL   execStr   
2BB5   3A 3A 62 20 30 23 00   .CSTR   "::b 0#"   
2BBC   CD BA 0A               CALL   flushBuffer   
2BBF                          ;*Macro unroll:  expect "::b 0#",$0101
2BBF   E1                     POP   HL   
2BC0   E5                     PUSH   HL   
2BC1   11 01 01               LD   DE,$0101   
2BC4   B7                     OR   A   
2BC5   ED 52                  SBC   HL,DE   
2BC7   7D                     LD   A,L   
2BC8   B4                     OR   H   
2BC9   CA 2A 2C               JP   Z,expectM_0_2706S45   
2BCC   CD 32 0B               CALL   printStr   
2BCF   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
2BDC   CD 32 0B               CALL   printStr   
2BDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BEE   21 01 01               LD   hl,$0101   
2BF1   E5                     PUSH   hl   
2BF2   E5                     PUSH   hl   
2BF3   CD 51 0C               CALL   run   
2BF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BFE   CD BA 0A               CALL   flushBuffer   
2C01   CD 32 0B               CALL   printStr   
2C04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C11   E1                     POP   hl   
2C12   E5                     PUSH   hl   
2C13   E5                     PUSH   hl   
2C14   CD 51 0C               CALL   run   
2C17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C26   CD BA 0A               CALL   flushBuffer   
2C29   76                     HALT      
2C2A                EXPECTM_0_2706S45:      
2C2A   E1                     POP   HL   
2C2B                          ;*Macro unroll:  test ":{2};^", 2
2C2B   31 00 4B               LD   SP,STACK   
2C2E   CD 7A 0B               CALL   coldInit   
2C31   CD BA 49               CALL   execStr   
2C34   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
2C3B   CD BA 0A               CALL   flushBuffer   
2C3E                          ;*Macro unroll:  expect ":{2};^",2
2C3E   E1                     POP   HL   
2C3F   E5                     PUSH   HL   
2C40   11 02 00               LD   DE,2   
2C43   B7                     OR   A   
2C44   ED 52                  SBC   HL,DE   
2C46   7D                     LD   A,L   
2C47   B4                     OR   H   
2C48   CA A9 2C               JP   Z,expectM_0_2707S45   
2C4B   CD 32 0B               CALL   printStr   
2C4E   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2C5B   CD 32 0B               CALL   printStr   
2C5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C6D   21 02 00               LD   hl,2   
2C70   E5                     PUSH   hl   
2C71   E5                     PUSH   hl   
2C72   CD 51 0C               CALL   run   
2C75   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C7D   CD BA 0A               CALL   flushBuffer   
2C80   CD 32 0B               CALL   printStr   
2C83   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C90   E1                     POP   hl   
2C91   E5                     PUSH   hl   
2C92   E5                     PUSH   hl   
2C93   CD 51 0C               CALL   run   
2C96   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CA5   CD BA 0A               CALL   flushBuffer   
2CA8   76                     HALT      
2CA9                EXPECTM_0_2707S45:      
2CA9   E1                     POP   HL   
2CAA                          ;*Macro unroll:  test ":a{2};^", 2
2CAA   31 00 4B               LD   SP,STACK   
2CAD   CD 7A 0B               CALL   coldInit   
2CB0   CD BA 49               CALL   execStr   
2CB3   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2CBB   CD BA 0A               CALL   flushBuffer   
2CBE                          ;*Macro unroll:  expect ":a{2};^",2
2CBE   E1                     POP   HL   
2CBF   E5                     PUSH   HL   
2CC0   11 02 00               LD   DE,2   
2CC3   B7                     OR   A   
2CC4   ED 52                  SBC   HL,DE   
2CC6   7D                     LD   A,L   
2CC7   B4                     OR   H   
2CC8   CA 2A 2D               JP   Z,expectM_0_2708S45   
2CCB   CD 32 0B               CALL   printStr   
2CCE   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2CDC   CD 32 0B               CALL   printStr   
2CDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CEE   21 02 00               LD   hl,2   
2CF1   E5                     PUSH   hl   
2CF2   E5                     PUSH   hl   
2CF3   CD 51 0C               CALL   run   
2CF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CFE   CD BA 0A               CALL   flushBuffer   
2D01   CD 32 0B               CALL   printStr   
2D04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D11   E1                     POP   hl   
2D12   E5                     PUSH   hl   
2D13   E5                     PUSH   hl   
2D14   CD 51 0C               CALL   run   
2D17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D26   CD BA 0A               CALL   flushBuffer   
2D29   76                     HALT      
2D2A                EXPECTM_0_2708S45:      
2D2A   E1                     POP   HL   
2D2B                          ;*Macro unroll:  test "5 :a{%a };^", 5
2D2B   31 00 4B               LD   SP,STACK   
2D2E   CD 7A 0B               CALL   coldInit   
2D31   CD BA 49               CALL   execStr   
2D34   35 20 3A 61 7B 25 61 20 7D 3B 5E 00 .CSTR   "5 :a{%a };^"   
2D40   CD BA 0A               CALL   flushBuffer   
2D43                          ;*Macro unroll:  expect "5 :a{%a };^",5
2D43   E1                     POP   HL   
2D44   E5                     PUSH   HL   
2D45   11 05 00               LD   DE,5   
2D48   B7                     OR   A   
2D49   ED 52                  SBC   HL,DE   
2D4B   7D                     LD   A,L   
2D4C   B4                     OR   H   
2D4D   CA B3 2D               JP   Z,expectM_0_2709S45   
2D50   CD 32 0B               CALL   printStr   
2D53   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 20 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a };^"   
2D65   CD 32 0B               CALL   printStr   
2D68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D77   21 05 00               LD   hl,5   
2D7A   E5                     PUSH   hl   
2D7B   E5                     PUSH   hl   
2D7C   CD 51 0C               CALL   run   
2D7F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D87   CD BA 0A               CALL   flushBuffer   
2D8A   CD 32 0B               CALL   printStr   
2D8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D9A   E1                     POP   hl   
2D9B   E5                     PUSH   hl   
2D9C   E5                     PUSH   hl   
2D9D   CD 51 0C               CALL   run   
2DA0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DAF   CD BA 0A               CALL   flushBuffer   
2DB2   76                     HALT      
2DB3                EXPECTM_0_2709S45:      
2DB3   E1                     POP   HL   
2DB4                          ;*Macro unroll:  test "5 :a:b{%a };^", 5
2DB4   31 00 4B               LD   SP,STACK   
2DB7   CD 7A 0B               CALL   coldInit   
2DBA   CD BA 49               CALL   execStr   
2DBD   35 20 3A 61 3A 62 7B 25 61 20 7D 3B 5E 00 .CSTR   "5 :a:b{%a };^"   
2DCB   CD BA 0A               CALL   flushBuffer   
2DCE                          ;*Macro unroll:  expect "5 :a:b{%a };^",5
2DCE   E1                     POP   HL   
2DCF   E5                     PUSH   HL   
2DD0   11 05 00               LD   DE,5   
2DD3   B7                     OR   A   
2DD4   ED 52                  SBC   HL,DE   
2DD6   7D                     LD   A,L   
2DD7   B4                     OR   H   
2DD8   CA 40 2E               JP   Z,expectM_0_2710S45   
2DDB   CD 32 0B               CALL   printStr   
2DDE   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 20 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a };^"   
2DF2   CD 32 0B               CALL   printStr   
2DF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E04   21 05 00               LD   hl,5   
2E07   E5                     PUSH   hl   
2E08   E5                     PUSH   hl   
2E09   CD 51 0C               CALL   run   
2E0C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E14   CD BA 0A               CALL   flushBuffer   
2E17   CD 32 0B               CALL   printStr   
2E1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E27   E1                     POP   hl   
2E28   E5                     PUSH   hl   
2E29   E5                     PUSH   hl   
2E2A   CD 51 0C               CALL   run   
2E2D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E3C   CD BA 0A               CALL   flushBuffer   
2E3F   76                     HALT      
2E40                EXPECTM_0_2710S45:      
2E40   E1                     POP   HL   
2E41                          ;*Macro unroll:  test ":a{{2}^};^", 2
2E41   31 00 4B               LD   SP,STACK   
2E44   CD 7A 0B               CALL   coldInit   
2E47   CD BA 49               CALL   execStr   
2E4A   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2E55   CD BA 0A               CALL   flushBuffer   
2E58                          ;*Macro unroll:  expect ":a{{2}^};^",2
2E58   E1                     POP   HL   
2E59   E5                     PUSH   HL   
2E5A   11 02 00               LD   DE,2   
2E5D   B7                     OR   A   
2E5E   ED 52                  SBC   HL,DE   
2E60   7D                     LD   A,L   
2E61   B4                     OR   H   
2E62   CA C7 2E               JP   Z,expectM_0_2711S45   
2E65   CD 32 0B               CALL   printStr   
2E68   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2E79   CD 32 0B               CALL   printStr   
2E7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E8B   21 02 00               LD   hl,2   
2E8E   E5                     PUSH   hl   
2E8F   E5                     PUSH   hl   
2E90   CD 51 0C               CALL   run   
2E93   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E9B   CD BA 0A               CALL   flushBuffer   
2E9E   CD 32 0B               CALL   printStr   
2EA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EAE   E1                     POP   hl   
2EAF   E5                     PUSH   hl   
2EB0   E5                     PUSH   hl   
2EB1   CD 51 0C               CALL   run   
2EB4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EC3   CD BA 0A               CALL   flushBuffer   
2EC6   76                     HALT      
2EC7                EXPECTM_0_2711S45:      
2EC7   E1                     POP   HL   
2EC8                          ;*Macro unroll:  test "1 5 :a{{%a }^};^", 5
2EC8   31 00 4B               LD   SP,STACK   
2ECB   CD 7A 0B               CALL   coldInit   
2ECE   CD BA 49               CALL   execStr   
2ED1   31 20 35 20 3A 61 7B 7B 25 61 20 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{%a }^};^"   
2EE2   CD BA 0A               CALL   flushBuffer   
2EE5                          ;*Macro unroll:  expect "1 5 :a{{%a }^};^",5
2EE5   E1                     POP   HL   
2EE6   E5                     PUSH   HL   
2EE7   11 05 00               LD   DE,5   
2EEA   B7                     OR   A   
2EEB   ED 52                  SBC   HL,DE   
2EED   7D                     LD   A,L   
2EEE   B4                     OR   H   
2EEF   CA 5A 2F               JP   Z,expectM_0_2712S45   
2EF2   CD 32 0B               CALL   printStr   
2EF5   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a }^};^"   
2F0C   CD 32 0B               CALL   printStr   
2F0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F1E   21 05 00               LD   hl,5   
2F21   E5                     PUSH   hl   
2F22   E5                     PUSH   hl   
2F23   CD 51 0C               CALL   run   
2F26   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F2E   CD BA 0A               CALL   flushBuffer   
2F31   CD 32 0B               CALL   printStr   
2F34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F41   E1                     POP   hl   
2F42   E5                     PUSH   hl   
2F43   E5                     PUSH   hl   
2F44   CD 51 0C               CALL   run   
2F47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F56   CD BA 0A               CALL   flushBuffer   
2F59   76                     HALT      
2F5A                EXPECTM_0_2712S45:      
2F5A   E1                     POP   HL   
2F5B                          ;*Macro unroll:  test "1 5 :ab{{%a }^};^", 1
2F5B   31 00 4B               LD   SP,STACK   
2F5E   CD 7A 0B               CALL   coldInit   
2F61   CD BA 49               CALL   execStr   
2F64   31 20 35 20 3A 61 62 7B 7B 25 61 20 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{%a }^};^"   
2F76   CD BA 0A               CALL   flushBuffer   
2F79                          ;*Macro unroll:  expect "1 5 :ab{{%a }^};^",1
2F79   E1                     POP   HL   
2F7A   E5                     PUSH   HL   
2F7B   11 01 00               LD   DE,1   
2F7E   B7                     OR   A   
2F7F   ED 52                  SBC   HL,DE   
2F81   7D                     LD   A,L   
2F82   B4                     OR   H   
2F83   CA EF 2F               JP   Z,expectM_0_2713S45   
2F86   CD 32 0B               CALL   printStr   
2F89   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a }^};^"   
2FA1   CD 32 0B               CALL   printStr   
2FA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FB3   21 01 00               LD   hl,1   
2FB6   E5                     PUSH   hl   
2FB7   E5                     PUSH   hl   
2FB8   CD 51 0C               CALL   run   
2FBB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FC3   CD BA 0A               CALL   flushBuffer   
2FC6   CD 32 0B               CALL   printStr   
2FC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FD6   E1                     POP   hl   
2FD7   E5                     PUSH   hl   
2FD8   E5                     PUSH   hl   
2FD9   CD 51 0C               CALL   run   
2FDC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FEB   CD BA 0A               CALL   flushBuffer   
2FEE   76                     HALT      
2FEF                EXPECTM_0_2713S45:      
2FEF   E1                     POP   HL   
2FF0                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
2FF0   31 00 4B               LD   SP,STACK   
2FF3   CD 7A 0B               CALL   coldInit   
2FF6   CD BA 49               CALL   execStr   
2FF9   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{%a 2 +}^};^"   
300D   CD BA 0A               CALL   flushBuffer   
3010                          ;*Macro unroll:  expect "1 5 :a{{%a 2 +}^};^",7
3010   E1                     POP   HL   
3011   E5                     PUSH   HL   
3012   11 07 00               LD   DE,7   
3015   B7                     OR   A   
3016   ED 52                  SBC   HL,DE   
3018   7D                     LD   A,L   
3019   B4                     OR   H   
301A   CA 88 30               JP   Z,expectM_0_2714S45   
301D   CD 32 0B               CALL   printStr   
3020   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
303A   CD 32 0B               CALL   printStr   
303D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
304C   21 07 00               LD   hl,7   
304F   E5                     PUSH   hl   
3050   E5                     PUSH   hl   
3051   CD 51 0C               CALL   run   
3054   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
305C   CD BA 0A               CALL   flushBuffer   
305F   CD 32 0B               CALL   printStr   
3062   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
306F   E1                     POP   hl   
3070   E5                     PUSH   hl   
3071   E5                     PUSH   hl   
3072   CD 51 0C               CALL   run   
3075   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3084   CD BA 0A               CALL   flushBuffer   
3087   76                     HALT      
3088                EXPECTM_0_2714S45:      
3088   E1                     POP   HL   
3089                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
3089   31 00 4B               LD   SP,STACK   
308C   CD 7A 0B               CALL   coldInit   
308F   CD BA 49               CALL   execStr   
3092   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{%a %b +}^};^"   
30A8   CD BA 0A               CALL   flushBuffer   
30AB                          ;*Macro unroll:  expect "1 5 :ab{{%a %b +}^};^",6
30AB   E1                     POP   HL   
30AC   E5                     PUSH   HL   
30AD   11 06 00               LD   DE,6   
30B0   B7                     OR   A   
30B1   ED 52                  SBC   HL,DE   
30B3   7D                     LD   A,L   
30B4   B4                     OR   H   
30B5   CA 25 31               JP   Z,expectM_0_2715S45   
30B8   CD 32 0B               CALL   printStr   
30BB   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
30D7   CD 32 0B               CALL   printStr   
30DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E9   21 06 00               LD   hl,6   
30EC   E5                     PUSH   hl   
30ED   E5                     PUSH   hl   
30EE   CD 51 0C               CALL   run   
30F1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30F9   CD BA 0A               CALL   flushBuffer   
30FC   CD 32 0B               CALL   printStr   
30FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
310C   E1                     POP   hl   
310D   E5                     PUSH   hl   
310E   E5                     PUSH   hl   
310F   CD 51 0C               CALL   run   
3112   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3121   CD BA 0A               CALL   flushBuffer   
3124   76                     HALT      
3125                EXPECTM_0_2715S45:      
3125   E1                     POP   HL   
3126                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
3126   31 00 4B               LD   SP,STACK   
3129   CD 7A 0B               CALL   coldInit   
312C   CD BA 49               CALL   execStr   
312F   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
313E   CD BA 0A               CALL   flushBuffer   
3141                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
3141   E1                     POP   HL   
3142   E5                     PUSH   HL   
3143   11 02 00               LD   DE,2   
3146   B7                     OR   A   
3147   ED 52                  SBC   HL,DE   
3149   7D                     LD   A,L   
314A   B4                     OR   H   
314B   CA B4 31               JP   Z,expectM_0_2716S45   
314E   CD 32 0B               CALL   printStr   
3151   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
3166   CD 32 0B               CALL   printStr   
3169   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3178   21 02 00               LD   hl,2   
317B   E5                     PUSH   hl   
317C   E5                     PUSH   hl   
317D   CD 51 0C               CALL   run   
3180   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3188   CD BA 0A               CALL   flushBuffer   
318B   CD 32 0B               CALL   printStr   
318E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
319B   E1                     POP   hl   
319C   E5                     PUSH   hl   
319D   E5                     PUSH   hl   
319E   CD 51 0C               CALL   run   
31A1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31B0   CD BA 0A               CALL   flushBuffer   
31B3   76                     HALT      
31B4                EXPECTM_0_2716S45:      
31B4   E1                     POP   HL   
31B5                          ;*Macro unroll:  test ":a{%a }; x= 0 1 x^", 1
31B5   31 00 4B               LD   SP,STACK   
31B8   CD 7A 0B               CALL   coldInit   
31BB   CD BA 49               CALL   execStr   
31BE   3A 61 7B 25 61 20 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{%a }; x= 0 1 x^"   
31D1   CD BA 0A               CALL   flushBuffer   
31D4                          ;*Macro unroll:  expect ":a{%a }; x= 0 1 x^",1
31D4   E1                     POP   HL   
31D5   E5                     PUSH   HL   
31D6   11 01 00               LD   DE,1   
31D9   B7                     OR   A   
31DA   ED 52                  SBC   HL,DE   
31DC   7D                     LD   A,L   
31DD   B4                     OR   H   
31DE   CA 4B 32               JP   Z,expectM_0_2717S45   
31E1   CD 32 0B               CALL   printStr   
31E4   43 6F 64 65 3A 20 3A 61 7B 25 61 20 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a }; x= 0 1 x^"   
31FD   CD 32 0B               CALL   printStr   
3200   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
320F   21 01 00               LD   hl,1   
3212   E5                     PUSH   hl   
3213   E5                     PUSH   hl   
3214   CD 51 0C               CALL   run   
3217   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
321F   CD BA 0A               CALL   flushBuffer   
3222   CD 32 0B               CALL   printStr   
3225   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3232   E1                     POP   hl   
3233   E5                     PUSH   hl   
3234   E5                     PUSH   hl   
3235   CD 51 0C               CALL   run   
3238   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3247   CD BA 0A               CALL   flushBuffer   
324A   76                     HALT      
324B                EXPECTM_0_2717S45:      
324B   E1                     POP   HL   
324C                          ;*Macro unroll:  test ":ab{%b }; x= 1 2 x^", 2
324C   31 00 4B               LD   SP,STACK   
324F   CD 7A 0B               CALL   coldInit   
3252   CD BA 49               CALL   execStr   
3255   3A 61 62 7B 25 62 20 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{%b }; x= 1 2 x^"   
3269   CD BA 0A               CALL   flushBuffer   
326C                          ;*Macro unroll:  expect ":ab{%b }; x= 1 2 x^",2
326C   E1                     POP   HL   
326D   E5                     PUSH   HL   
326E   11 02 00               LD   DE,2   
3271   B7                     OR   A   
3272   ED 52                  SBC   HL,DE   
3274   7D                     LD   A,L   
3275   B4                     OR   H   
3276   CA E4 32               JP   Z,expectM_0_2718S45   
3279   CD 32 0B               CALL   printStr   
327C   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b }; x= 1 2 x^"   
3296   CD 32 0B               CALL   printStr   
3299   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32A8   21 02 00               LD   hl,2   
32AB   E5                     PUSH   hl   
32AC   E5                     PUSH   hl   
32AD   CD 51 0C               CALL   run   
32B0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32B8   CD BA 0A               CALL   flushBuffer   
32BB   CD 32 0B               CALL   printStr   
32BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32CB   E1                     POP   hl   
32CC   E5                     PUSH   hl   
32CD   E5                     PUSH   hl   
32CE   CD 51 0C               CALL   run   
32D1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32E0   CD BA 0A               CALL   flushBuffer   
32E3   76                     HALT      
32E4                EXPECTM_0_2718S45:      
32E4   E1                     POP   HL   
32E5                          ;*Macro unroll:  test ":a:b{%a }; x= 1 2 x^", 2
32E5   31 00 4B               LD   SP,STACK   
32E8   CD 7A 0B               CALL   coldInit   
32EB   CD BA 49               CALL   execStr   
32EE   3A 61 3A 62 7B 25 61 20 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{%a }; x= 1 2 x^"   
3303   CD BA 0A               CALL   flushBuffer   
3306                          ;*Macro unroll:  expect ":a:b{%a }; x= 1 2 x^",2
3306   E1                     POP   HL   
3307   E5                     PUSH   HL   
3308   11 02 00               LD   DE,2   
330B   B7                     OR   A   
330C   ED 52                  SBC   HL,DE   
330E   7D                     LD   A,L   
330F   B4                     OR   H   
3310   CA 7F 33               JP   Z,expectM_0_2719S45   
3313   CD 32 0B               CALL   printStr   
3316   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a }; x= 1 2 x^"   
3331   CD 32 0B               CALL   printStr   
3334   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3343   21 02 00               LD   hl,2   
3346   E5                     PUSH   hl   
3347   E5                     PUSH   hl   
3348   CD 51 0C               CALL   run   
334B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3353   CD BA 0A               CALL   flushBuffer   
3356   CD 32 0B               CALL   printStr   
3359   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3366   E1                     POP   hl   
3367   E5                     PUSH   hl   
3368   E5                     PUSH   hl   
3369   CD 51 0C               CALL   run   
336C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
337B   CD BA 0A               CALL   flushBuffer   
337E   76                     HALT      
337F                EXPECTM_0_2719S45:      
337F   E1                     POP   HL   
3380                          ;*Macro unroll:  test ":ab{%b }; x= 1 2 x^", 2
3380   31 00 4B               LD   SP,STACK   
3383   CD 7A 0B               CALL   coldInit   
3386   CD BA 49               CALL   execStr   
3389   3A 61 62 7B 25 62 20 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{%b }; x= 1 2 x^"   
339D   CD BA 0A               CALL   flushBuffer   
33A0                          ;*Macro unroll:  expect ":ab{%b }; x= 1 2 x^",2
33A0   E1                     POP   HL   
33A1   E5                     PUSH   HL   
33A2   11 02 00               LD   DE,2   
33A5   B7                     OR   A   
33A6   ED 52                  SBC   HL,DE   
33A8   7D                     LD   A,L   
33A9   B4                     OR   H   
33AA   CA 18 34               JP   Z,expectM_0_2720S45   
33AD   CD 32 0B               CALL   printStr   
33B0   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b }; x= 1 2 x^"   
33CA   CD 32 0B               CALL   printStr   
33CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33DC   21 02 00               LD   hl,2   
33DF   E5                     PUSH   hl   
33E0   E5                     PUSH   hl   
33E1   CD 51 0C               CALL   run   
33E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33EC   CD BA 0A               CALL   flushBuffer   
33EF   CD 32 0B               CALL   printStr   
33F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33FF   E1                     POP   hl   
3400   E5                     PUSH   hl   
3401   E5                     PUSH   hl   
3402   CD 51 0C               CALL   run   
3405   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3414   CD BA 0A               CALL   flushBuffer   
3417   76                     HALT      
3418                EXPECTM_0_2720S45:      
3418   E1                     POP   HL   
3419                          ;*Macro unroll:  test ":ab{%b %a }; x= 10 15 x^ -", 5
3419   31 00 4B               LD   SP,STACK   
341C   CD 7A 0B               CALL   coldInit   
341F   CD BA 49               CALL   execStr   
3422   3A 61 62 7B 25 62 20 25 61 20 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{%b %a }; x= 10 15 x^ -"   
343D   CD BA 0A               CALL   flushBuffer   
3440                          ;*Macro unroll:  expect ":ab{%b %a }; x= 10 15 x^ -",5
3440   E1                     POP   HL   
3441   E5                     PUSH   HL   
3442   11 05 00               LD   DE,5   
3445   B7                     OR   A   
3446   ED 52                  SBC   HL,DE   
3448   7D                     LD   A,L   
3449   B4                     OR   H   
344A   CA BF 34               JP   Z,expectM_0_2721S45   
344D   CD 32 0B               CALL   printStr   
3450   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 20 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a }; x= 10 15 x^ -"   
3471   CD 32 0B               CALL   printStr   
3474   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3483   21 05 00               LD   hl,5   
3486   E5                     PUSH   hl   
3487   E5                     PUSH   hl   
3488   CD 51 0C               CALL   run   
348B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3493   CD BA 0A               CALL   flushBuffer   
3496   CD 32 0B               CALL   printStr   
3499   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34A6   E1                     POP   hl   
34A7   E5                     PUSH   hl   
34A8   E5                     PUSH   hl   
34A9   CD 51 0C               CALL   run   
34AC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34BB   CD BA 0A               CALL   flushBuffer   
34BE   76                     HALT      
34BF                EXPECTM_0_2721S45:      
34BF   E1                     POP   HL   
34C0                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
34C0   31 00 4B               LD   SP,STACK   
34C3   CD 7A 0B               CALL   coldInit   
34C6   CD BA 49               CALL   execStr   
34C9   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
34DA   CD BA 0A               CALL   flushBuffer   
34DD                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
34DD   E1                     POP   HL   
34DE   E5                     PUSH   HL   
34DF   11 02 00               LD   DE,2   
34E2   B7                     OR   A   
34E3   ED 52                  SBC   HL,DE   
34E5   7D                     LD   A,L   
34E6   B4                     OR   H   
34E7   CA 52 35               JP   Z,expectM_0_2722S45   
34EA   CD 32 0B               CALL   printStr   
34ED   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
3504   CD 32 0B               CALL   printStr   
3507   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3516   21 02 00               LD   hl,2   
3519   E5                     PUSH   hl   
351A   E5                     PUSH   hl   
351B   CD 51 0C               CALL   run   
351E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3526   CD BA 0A               CALL   flushBuffer   
3529   CD 32 0B               CALL   printStr   
352C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3539   E1                     POP   hl   
353A   E5                     PUSH   hl   
353B   E5                     PUSH   hl   
353C   CD 51 0C               CALL   run   
353F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
354E   CD BA 0A               CALL   flushBuffer   
3551   76                     HALT      
3552                EXPECTM_0_2722S45:      
3552   E1                     POP   HL   
3553                          ;*Macro unroll:  test "::b{100 %b = %b }; x= x^", 100
3553   31 00 4B               LD   SP,STACK   
3556   CD 7A 0B               CALL   coldInit   
3559   CD BA 49               CALL   execStr   
355C   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 20 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 %b = %b }; x= x^"   
3575   CD BA 0A               CALL   flushBuffer   
3578                          ;*Macro unroll:  expect "::b{100 %b = %b }; x= x^",100
3578   E1                     POP   HL   
3579   E5                     PUSH   HL   
357A   11 64 00               LD   DE,100   
357D   B7                     OR   A   
357E   ED 52                  SBC   HL,DE   
3580   7D                     LD   A,L   
3581   B4                     OR   H   
3582   CA F5 35               JP   Z,expectM_0_2723S45   
3585   CD 32 0B               CALL   printStr   
3588   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 20 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b }; x= x^"   
35A7   CD 32 0B               CALL   printStr   
35AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35B9   21 64 00               LD   hl,100   
35BC   E5                     PUSH   hl   
35BD   E5                     PUSH   hl   
35BE   CD 51 0C               CALL   run   
35C1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35C9   CD BA 0A               CALL   flushBuffer   
35CC   CD 32 0B               CALL   printStr   
35CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35DC   E1                     POP   hl   
35DD   E5                     PUSH   hl   
35DE   E5                     PUSH   hl   
35DF   CD 51 0C               CALL   run   
35E2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35F1   CD BA 0A               CALL   flushBuffer   
35F4   76                     HALT      
35F5                EXPECTM_0_2723S45:      
35F5   E1                     POP   HL   
35F6                          ;*Macro unroll:  test ":a:b{1 %b = %b }; x= 2 x^", 1
35F6   31 00 4B               LD   SP,STACK   
35F9   CD 7A 0B               CALL   coldInit   
35FC   CD BA 49               CALL   execStr   
35FF   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 20 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 %b = %b }; x= 2 x^"   
3619   CD BA 0A               CALL   flushBuffer   
361C                          ;*Macro unroll:  expect ":a:b{1 %b = %b }; x= 2 x^",1
361C   E1                     POP   HL   
361D   E5                     PUSH   HL   
361E   11 01 00               LD   DE,1   
3621   B7                     OR   A   
3622   ED 52                  SBC   HL,DE   
3624   7D                     LD   A,L   
3625   B4                     OR   H   
3626   CA 9A 36               JP   Z,expectM_0_2724S45   
3629   CD 32 0B               CALL   printStr   
362C   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 20 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b }; x= 2 x^"   
364C   CD 32 0B               CALL   printStr   
364F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
365E   21 01 00               LD   hl,1   
3661   E5                     PUSH   hl   
3662   E5                     PUSH   hl   
3663   CD 51 0C               CALL   run   
3666   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
366E   CD BA 0A               CALL   flushBuffer   
3671   CD 32 0B               CALL   printStr   
3674   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3681   E1                     POP   hl   
3682   E5                     PUSH   hl   
3683   E5                     PUSH   hl   
3684   CD 51 0C               CALL   run   
3687   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3696   CD BA 0A               CALL   flushBuffer   
3699   76                     HALT      
369A                EXPECTM_0_2724S45:      
369A   E1                     POP   HL   
369B                          ;*Macro unroll:  test ":a:b{%a %b = %b }; x= 2 x^", 2
369B   31 00 4B               LD   SP,STACK   
369E   CD 7A 0B               CALL   coldInit   
36A1   CD BA 49               CALL   execStr   
36A4   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 20 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{%a %b = %b }; x= 2 x^"   
36BF   CD BA 0A               CALL   flushBuffer   
36C2                          ;*Macro unroll:  expect ":a:b{%a %b = %b }; x= 2 x^",2
36C2   E1                     POP   HL   
36C3   E5                     PUSH   HL   
36C4   11 02 00               LD   DE,2   
36C7   B7                     OR   A   
36C8   ED 52                  SBC   HL,DE   
36CA   7D                     LD   A,L   
36CB   B4                     OR   H   
36CC   CA 41 37               JP   Z,expectM_0_2725S45   
36CF   CD 32 0B               CALL   printStr   
36D2   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 20 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b }; x= 2 x^"   
36F3   CD 32 0B               CALL   printStr   
36F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3705   21 02 00               LD   hl,2   
3708   E5                     PUSH   hl   
3709   E5                     PUSH   hl   
370A   CD 51 0C               CALL   run   
370D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3715   CD BA 0A               CALL   flushBuffer   
3718   CD 32 0B               CALL   printStr   
371B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3728   E1                     POP   hl   
3729   E5                     PUSH   hl   
372A   E5                     PUSH   hl   
372B   CD 51 0C               CALL   run   
372E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
373D   CD BA 0A               CALL   flushBuffer   
3740   76                     HALT      
3741                EXPECTM_0_2725S45:      
3741   E1                     POP   HL   
3742                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
3742   31 00 4B               LD   SP,STACK   
3745   CD 7A 0B               CALL   coldInit   
3748   CD BA 49               CALL   execStr   
374B   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{%a}{%b} ??};^ +"   
376A   CD BA 0A               CALL   flushBuffer   
376D                          ;*Macro unroll:  expect "1 10 20 :ab{/t{%a}{%b} ??};^ +",11
376D   E1                     POP   HL   
376E   E5                     PUSH   HL   
376F   11 0B 00               LD   DE,11   
3772   B7                     OR   A   
3773   ED 52                  SBC   HL,DE   
3775   7D                     LD   A,L   
3776   B4                     OR   H   
3777   CA F0 37               JP   Z,expectM_0_2726S45   
377A   CD 32 0B               CALL   printStr   
377D   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
37A2   CD 32 0B               CALL   printStr   
37A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37B4   21 0B 00               LD   hl,11   
37B7   E5                     PUSH   hl   
37B8   E5                     PUSH   hl   
37B9   CD 51 0C               CALL   run   
37BC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37C4   CD BA 0A               CALL   flushBuffer   
37C7   CD 32 0B               CALL   printStr   
37CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37D7   E1                     POP   hl   
37D8   E5                     PUSH   hl   
37D9   E5                     PUSH   hl   
37DA   CD 51 0C               CALL   run   
37DD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37EC   CD BA 0A               CALL   flushBuffer   
37EF   76                     HALT      
37F0                EXPECTM_0_2726S45:      
37F0   E1                     POP   HL   
37F1                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
37F1   31 00 4B               LD   SP,STACK   
37F4   CD 7A 0B               CALL   coldInit   
37F7   CD BA 49               CALL   execStr   
37FA   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3819   CD BA 0A               CALL   flushBuffer   
381C                          ;*Macro unroll:  expect "1 10 20 :ab{/f{%a}{%b} ??};^ +",21
381C   E1                     POP   HL   
381D   E5                     PUSH   HL   
381E   11 15 00               LD   DE,21   
3821   B7                     OR   A   
3822   ED 52                  SBC   HL,DE   
3824   7D                     LD   A,L   
3825   B4                     OR   H   
3826   CA 9F 38               JP   Z,expectM_0_2727S45   
3829   CD 32 0B               CALL   printStr   
382C   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3851   CD 32 0B               CALL   printStr   
3854   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3863   21 15 00               LD   hl,21   
3866   E5                     PUSH   hl   
3867   E5                     PUSH   hl   
3868   CD 51 0C               CALL   run   
386B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3873   CD BA 0A               CALL   flushBuffer   
3876   CD 32 0B               CALL   printStr   
3879   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3886   E1                     POP   hl   
3887   E5                     PUSH   hl   
3888   E5                     PUSH   hl   
3889   CD 51 0C               CALL   run   
388C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
389B   CD BA 0A               CALL   flushBuffer   
389E   76                     HALT      
389F                EXPECTM_0_2727S45:      
389F   E1                     POP   HL   
38A0                          ;*Macro unroll:  test "[10 20 30] 1#", 20
38A0   31 00 4B               LD   SP,STACK   
38A3   CD 7A 0B               CALL   coldInit   
38A6   CD BA 49               CALL   execStr   
38A9   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "[10 20 30] 1#"   
38B7   CD BA 0A               CALL   flushBuffer   
38BA                          ;*Macro unroll:  expect "[10 20 30] 1#",20
38BA   E1                     POP   HL   
38BB   E5                     PUSH   HL   
38BC   11 14 00               LD   DE,20   
38BF   B7                     OR   A   
38C0   ED 52                  SBC   HL,DE   
38C2   7D                     LD   A,L   
38C3   B4                     OR   H   
38C4   CA 2C 39               JP   Z,expectM_0_2728S45   
38C7   CD 32 0B               CALL   printStr   
38CA   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
38DE   CD 32 0B               CALL   printStr   
38E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38F0   21 14 00               LD   hl,20   
38F3   E5                     PUSH   hl   
38F4   E5                     PUSH   hl   
38F5   CD 51 0C               CALL   run   
38F8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3900   CD BA 0A               CALL   flushBuffer   
3903   CD 32 0B               CALL   printStr   
3906   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3913   E1                     POP   hl   
3914   E5                     PUSH   hl   
3915   E5                     PUSH   hl   
3916   CD 51 0C               CALL   run   
3919   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3928   CD BA 0A               CALL   flushBuffer   
392B   76                     HALT      
392C                EXPECTM_0_2728S45:      
392C   E1                     POP   HL   
392D                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
392D   31 00 4B               LD   SP,STACK   
3930   CD 7A 0B               CALL   coldInit   
3933   CD BA 49               CALL   execStr   
3936   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "[10 20 30 40] /s"   
3947   CD BA 0A               CALL   flushBuffer   
394A                          ;*Macro unroll:  expect "[10 20 30 40] /s",4
394A   E1                     POP   HL   
394B   E5                     PUSH   HL   
394C   11 04 00               LD   DE,4   
394F   B7                     OR   A   
3950   ED 52                  SBC   HL,DE   
3952   7D                     LD   A,L   
3953   B4                     OR   H   
3954   CA BF 39               JP   Z,expectM_0_2729S45   
3957   CD 32 0B               CALL   printStr   
395A   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3971   CD 32 0B               CALL   printStr   
3974   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3983   21 04 00               LD   hl,4   
3986   E5                     PUSH   hl   
3987   E5                     PUSH   hl   
3988   CD 51 0C               CALL   run   
398B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3993   CD BA 0A               CALL   flushBuffer   
3996   CD 32 0B               CALL   printStr   
3999   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39A6   E1                     POP   hl   
39A7   E5                     PUSH   hl   
39A8   E5                     PUSH   hl   
39A9   CD 51 0C               CALL   run   
39AC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39BB   CD BA 0A               CALL   flushBuffer   
39BE   76                     HALT      
39BF                EXPECTM_0_2729S45:      
39BF   E1                     POP   HL   
39C0                          ;*Macro unroll:  test "/c [1 2 3] 1#", 2
39C0   31 00 4B               LD   SP,STACK   
39C3   CD 7A 0B               CALL   coldInit   
39C6   CD BA 49               CALL   execStr   
39C9   2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "/c [1 2 3] 1#"   
39D7   CD BA 0A               CALL   flushBuffer   
39DA                          ;*Macro unroll:  expect "/c [1 2 3] 1#",2
39DA   E1                     POP   HL   
39DB   E5                     PUSH   HL   
39DC   11 02 00               LD   DE,2   
39DF   B7                     OR   A   
39E0   ED 52                  SBC   HL,DE   
39E2   7D                     LD   A,L   
39E3   B4                     OR   H   
39E4   CA 4C 3A               JP   Z,expectM_0_2730S45   
39E7   CD 32 0B               CALL   printStr   
39EA   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/c [1 2 3] 1#"   
39FE   CD 32 0B               CALL   printStr   
3A01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A10   21 02 00               LD   hl,2   
3A13   E5                     PUSH   hl   
3A14   E5                     PUSH   hl   
3A15   CD 51 0C               CALL   run   
3A18   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A20   CD BA 0A               CALL   flushBuffer   
3A23   CD 32 0B               CALL   printStr   
3A26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A33   E1                     POP   hl   
3A34   E5                     PUSH   hl   
3A35   E5                     PUSH   hl   
3A36   CD 51 0C               CALL   run   
3A39   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A48   CD BA 0A               CALL   flushBuffer   
3A4B   76                     HALT      
3A4C                EXPECTM_0_2730S45:      
3A4C   E1                     POP   HL   
3A4D                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1#", 66
3A4D   31 00 4B               LD   SP,STACK   
3A50   CD 7A 0B               CALL   coldInit   
3A53   CD BA 49               CALL   execStr   
3A56   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "/c ['A' 'B' 'C'] 1#"   
3A6A   CD BA 0A               CALL   flushBuffer   
3A6D                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1#",66
3A6D   E1                     POP   HL   
3A6E   E5                     PUSH   HL   
3A6F   11 42 00               LD   DE,66   
3A72   B7                     OR   A   
3A73   ED 52                  SBC   HL,DE   
3A75   7D                     LD   A,L   
3A76   B4                     OR   H   
3A77   CA E5 3A               JP   Z,expectM_0_2731S45   
3A7A   CD 32 0B               CALL   printStr   
3A7D   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1#"   
3A97   CD 32 0B               CALL   printStr   
3A9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AA9   21 42 00               LD   hl,66   
3AAC   E5                     PUSH   hl   
3AAD   E5                     PUSH   hl   
3AAE   CD 51 0C               CALL   run   
3AB1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AB9   CD BA 0A               CALL   flushBuffer   
3ABC   CD 32 0B               CALL   printStr   
3ABF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3ACC   E1                     POP   hl   
3ACD   E5                     PUSH   hl   
3ACE   E5                     PUSH   hl   
3ACF   CD 51 0C               CALL   run   
3AD2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AE1   CD BA 0A               CALL   flushBuffer   
3AE4   76                     HALT      
3AE5                EXPECTM_0_2731S45:      
3AE5   E1                     POP   HL   
3AE6                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3AE6   31 00 4B               LD   SP,STACK   
3AE9   CD 7A 0B               CALL   coldInit   
3AEC   CD BA 49               CALL   execStr   
3AEF   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "[{10}{20}{30}] 0#^ "   
3B03   CD BA 0A               CALL   flushBuffer   
3B06                          ;*Macro unroll:  expect "[{10}{20}{30}] 0#^ ",10
3B06   E1                     POP   HL   
3B07   E5                     PUSH   HL   
3B08   11 0A 00               LD   DE,10   
3B0B   B7                     OR   A   
3B0C   ED 52                  SBC   HL,DE   
3B0E   7D                     LD   A,L   
3B0F   B4                     OR   H   
3B10   CA 7E 3B               JP   Z,expectM_0_2732S45   
3B13   CD 32 0B               CALL   printStr   
3B16   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3B30   CD 32 0B               CALL   printStr   
3B33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B42   21 0A 00               LD   hl,10   
3B45   E5                     PUSH   hl   
3B46   E5                     PUSH   hl   
3B47   CD 51 0C               CALL   run   
3B4A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B52   CD BA 0A               CALL   flushBuffer   
3B55   CD 32 0B               CALL   printStr   
3B58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B65   E1                     POP   hl   
3B66   E5                     PUSH   hl   
3B67   E5                     PUSH   hl   
3B68   CD 51 0C               CALL   run   
3B6B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B7A   CD BA 0A               CALL   flushBuffer   
3B7D   76                     HALT      
3B7E                EXPECTM_0_2732S45:      
3B7E   E1                     POP   HL   
3B7F                          ;*Macro unroll:  test "10 20 :ab{[{%a }{%b }] 0#^};^", 10
3B7F   31 00 4B               LD   SP,STACK   
3B82   CD 7A 0B               CALL   coldInit   
3B85   CD BA 49               CALL   execStr   
3B88   31 30 20 32 30 20 3A 61 62 7B 5B 7B 25 61 20 7D 7B 25 62 20 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{%a }{%b }] 0#^};^"   
3BA6   CD BA 0A               CALL   flushBuffer   
3BA9                          ;*Macro unroll:  expect "10 20 :ab{[{%a }{%b }] 0#^};^",10
3BA9   E1                     POP   HL   
3BAA   E5                     PUSH   HL   
3BAB   11 0A 00               LD   DE,10   
3BAE   B7                     OR   A   
3BAF   ED 52                  SBC   HL,DE   
3BB1   7D                     LD   A,L   
3BB2   B4                     OR   H   
3BB3   CA 2B 3C               JP   Z,expectM_0_2733S45   
3BB6   CD 32 0B               CALL   printStr   
3BB9   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 25 61 20 7D 7B 25 62 20 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{%a }{%b }] 0#^};^"   
3BDD   CD 32 0B               CALL   printStr   
3BE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BEF   21 0A 00               LD   hl,10   
3BF2   E5                     PUSH   hl   
3BF3   E5                     PUSH   hl   
3BF4   CD 51 0C               CALL   run   
3BF7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BFF   CD BA 0A               CALL   flushBuffer   
3C02   CD 32 0B               CALL   printStr   
3C05   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C12   E1                     POP   hl   
3C13   E5                     PUSH   hl   
3C14   E5                     PUSH   hl   
3C15   CD 51 0C               CALL   run   
3C18   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C27   CD BA 0A               CALL   flushBuffer   
3C2A   76                     HALT      
3C2B                EXPECTM_0_2733S45:      
3C2B   E1                     POP   HL   
3C2C                          ;*Macro unroll:  test "0 10 20 :iab{[{%a }{%b }] %i#^};^", 10
3C2C   31 00 4B               LD   SP,STACK   
3C2F   CD 7A 0B               CALL   coldInit   
3C32   CD BA 49               CALL   execStr   
3C35   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 20 7D 7B 25 62 20 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{%a }{%b }] %i#^};^"   
3C57   CD BA 0A               CALL   flushBuffer   
3C5A                          ;*Macro unroll:  expect "0 10 20 :iab{[{%a }{%b }] %i#^};^",10
3C5A   E1                     POP   HL   
3C5B   E5                     PUSH   HL   
3C5C   11 0A 00               LD   DE,10   
3C5F   B7                     OR   A   
3C60   ED 52                  SBC   HL,DE   
3C62   7D                     LD   A,L   
3C63   B4                     OR   H   
3C64   CA E0 3C               JP   Z,expectM_0_2734S45   
3C67   CD 32 0B               CALL   printStr   
3C6A   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 20 7D 7B 25 62 20 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{%a }{%b }] %i#^};^"   
3C92   CD 32 0B               CALL   printStr   
3C95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CA4   21 0A 00               LD   hl,10   
3CA7   E5                     PUSH   hl   
3CA8   E5                     PUSH   hl   
3CA9   CD 51 0C               CALL   run   
3CAC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CB4   CD BA 0A               CALL   flushBuffer   
3CB7   CD 32 0B               CALL   printStr   
3CBA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CC7   E1                     POP   hl   
3CC8   E5                     PUSH   hl   
3CC9   E5                     PUSH   hl   
3CCA   CD 51 0C               CALL   run   
3CCD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CDC   CD BA 0A               CALL   flushBuffer   
3CDF   76                     HALT      
3CE0                EXPECTM_0_2734S45:      
3CE0   E1                     POP   HL   
3CE1                          ;*Macro unroll:  test "1 10 20 :iab{[{%a }{%b }] %i#^};^", 20
3CE1   31 00 4B               LD   SP,STACK   
3CE4   CD 7A 0B               CALL   coldInit   
3CE7   CD BA 49               CALL   execStr   
3CEA   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 20 7D 7B 25 62 20 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{%a }{%b }] %i#^};^"   
3D0C   CD BA 0A               CALL   flushBuffer   
3D0F                          ;*Macro unroll:  expect "1 10 20 :iab{[{%a }{%b }] %i#^};^",20
3D0F   E1                     POP   HL   
3D10   E5                     PUSH   HL   
3D11   11 14 00               LD   DE,20   
3D14   B7                     OR   A   
3D15   ED 52                  SBC   HL,DE   
3D17   7D                     LD   A,L   
3D18   B4                     OR   H   
3D19   CA 95 3D               JP   Z,expectM_0_2735S45   
3D1C   CD 32 0B               CALL   printStr   
3D1F   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 20 7D 7B 25 62 20 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{%a }{%b }] %i#^};^"   
3D47   CD 32 0B               CALL   printStr   
3D4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D59   21 14 00               LD   hl,20   
3D5C   E5                     PUSH   hl   
3D5D   E5                     PUSH   hl   
3D5E   CD 51 0C               CALL   run   
3D61   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D69   CD BA 0A               CALL   flushBuffer   
3D6C   CD 32 0B               CALL   printStr   
3D6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D7C   E1                     POP   hl   
3D7D   E5                     PUSH   hl   
3D7E   E5                     PUSH   hl   
3D7F   CD 51 0C               CALL   run   
3D82   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D91   CD BA 0A               CALL   flushBuffer   
3D94   76                     HALT      
3D95                EXPECTM_0_2735S45:      
3D95   E1                     POP   HL   
3D96                          ;*Macro unroll:  test "5 [4] :a{%a }; /pa ^", 4
3D96   31 00 4B               LD   SP,STACK   
3D99   CD 7A 0B               CALL   coldInit   
3D9C   CD BA 49               CALL   execStr   
3D9F   35 20 5B 34 5D 20 3A 61 7B 25 61 20 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{%a }; /pa ^"   
3DB4   CD BA 0A               CALL   flushBuffer   
3DB7                          ;*Macro unroll:  expect "5 [4] :a{%a }; /pa ^",4
3DB7   E1                     POP   HL   
3DB8   E5                     PUSH   HL   
3DB9   11 04 00               LD   DE,4   
3DBC   B7                     OR   A   
3DBD   ED 52                  SBC   HL,DE   
3DBF   7D                     LD   A,L   
3DC0   B4                     OR   H   
3DC1   CA 30 3E               JP   Z,expectM_0_2736S45   
3DC4   CD 32 0B               CALL   printStr   
3DC7   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 25 61 20 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{%a }; /pa ^"   
3DE2   CD 32 0B               CALL   printStr   
3DE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DF4   21 04 00               LD   hl,4   
3DF7   E5                     PUSH   hl   
3DF8   E5                     PUSH   hl   
3DF9   CD 51 0C               CALL   run   
3DFC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E04   CD BA 0A               CALL   flushBuffer   
3E07   CD 32 0B               CALL   printStr   
3E0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E17   E1                     POP   hl   
3E18   E5                     PUSH   hl   
3E19   E5                     PUSH   hl   
3E1A   CD 51 0C               CALL   run   
3E1D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E2C   CD BA 0A               CALL   flushBuffer   
3E2F   76                     HALT      
3E30                EXPECTM_0_2736S45:      
3E30   E1                     POP   HL   
3E31                          ;*Macro unroll:  test "5 [4] :ab{%a %b +}; /pa ^", 9
3E31   31 00 4B               LD   SP,STACK   
3E34   CD 7A 0B               CALL   coldInit   
3E37   CD BA 49               CALL   execStr   
3E3A   35 20 5B 34 5D 20 3A 61 62 7B 25 61 20 25 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{%a %b +}; /pa ^"   
3E54   CD BA 0A               CALL   flushBuffer   
3E57                          ;*Macro unroll:  expect "5 [4] :ab{%a %b +}; /pa ^",9
3E57   E1                     POP   HL   
3E58   E5                     PUSH   HL   
3E59   11 09 00               LD   DE,9   
3E5C   B7                     OR   A   
3E5D   ED 52                  SBC   HL,DE   
3E5F   7D                     LD   A,L   
3E60   B4                     OR   H   
3E61   CA D5 3E               JP   Z,expectM_0_2737S45   
3E64   CD 32 0B               CALL   printStr   
3E67   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 25 61 20 25 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{%a %b +}; /pa ^"   
3E87   CD 32 0B               CALL   printStr   
3E8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E99   21 09 00               LD   hl,9   
3E9C   E5                     PUSH   hl   
3E9D   E5                     PUSH   hl   
3E9E   CD 51 0C               CALL   run   
3EA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3EA9   CD BA 0A               CALL   flushBuffer   
3EAC   CD 32 0B               CALL   printStr   
3EAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EBC   E1                     POP   hl   
3EBD   E5                     PUSH   hl   
3EBE   E5                     PUSH   hl   
3EBF   CD 51 0C               CALL   run   
3EC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3ED1   CD BA 0A               CALL   flushBuffer   
3ED4   76                     HALT      
3ED5                EXPECTM_0_2737S45:      
3ED5   E1                     POP   HL   
3ED6                          ;*Macro unroll:  test "5 [4] :ab{%a %b -}; /pa ^", 1
3ED6   31 00 4B               LD   SP,STACK   
3ED9   CD 7A 0B               CALL   coldInit   
3EDC   CD BA 49               CALL   execStr   
3EDF   35 20 5B 34 5D 20 3A 61 62 7B 25 61 20 25 62 20 2D 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{%a %b -}; /pa ^"   
3EF9   CD BA 0A               CALL   flushBuffer   
3EFC                          ;*Macro unroll:  expect "5 [4] :ab{%a %b -}; /pa ^",1
3EFC   E1                     POP   HL   
3EFD   E5                     PUSH   HL   
3EFE   11 01 00               LD   DE,1   
3F01   B7                     OR   A   
3F02   ED 52                  SBC   HL,DE   
3F04   7D                     LD   A,L   
3F05   B4                     OR   H   
3F06   CA 7A 3F               JP   Z,expectM_0_2738S45   
3F09   CD 32 0B               CALL   printStr   
3F0C   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 25 61 20 25 62 20 2D 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{%a %b -}; /pa ^"   
3F2C   CD 32 0B               CALL   printStr   
3F2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F3E   21 01 00               LD   hl,1   
3F41   E5                     PUSH   hl   
3F42   E5                     PUSH   hl   
3F43   CD 51 0C               CALL   run   
3F46   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F4E   CD BA 0A               CALL   flushBuffer   
3F51   CD 32 0B               CALL   printStr   
3F54   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F61   E1                     POP   hl   
3F62   E5                     PUSH   hl   
3F63   E5                     PUSH   hl   
3F64   CD 51 0C               CALL   run   
3F67   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F76   CD BA 0A               CALL   flushBuffer   
3F79   76                     HALT      
3F7A                EXPECTM_0_2738S45:      
3F7A   E1                     POP   HL   
3F7B                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3F7B   31 00 4B               LD   SP,STACK   
3F7E   CD 7A 0B               CALL   coldInit   
3F81   CD BA 49               CALL   execStr   
3F84   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3F9C   CD BA 0A               CALL   flushBuffer   
3F9F                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3F9F   E1                     POP   HL   
3FA0   E5                     PUSH   HL   
3FA1   11 06 00               LD   DE,6   
3FA4   B7                     OR   A   
3FA5   ED 52                  SBC   HL,DE   
3FA7   7D                     LD   A,L   
3FA8   B4                     OR   H   
3FA9   CA 1B 40               JP   Z,expectM_0_2739S45   
3FAC   CD 32 0B               CALL   printStr   
3FAF   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3FCD   CD 32 0B               CALL   printStr   
3FD0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FDF   21 06 00               LD   hl,6   
3FE2   E5                     PUSH   hl   
3FE3   E5                     PUSH   hl   
3FE4   CD 51 0C               CALL   run   
3FE7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FEF   CD BA 0A               CALL   flushBuffer   
3FF2   CD 32 0B               CALL   printStr   
3FF5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4002   E1                     POP   hl   
4003   E5                     PUSH   hl   
4004   E5                     PUSH   hl   
4005   CD 51 0C               CALL   run   
4008   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4017   CD BA 0A               CALL   flushBuffer   
401A   76                     HALT      
401B                EXPECTM_0_2739S45:      
401B   E1                     POP   HL   
401C                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
401C   31 00 4B               LD   SP,STACK   
401F   CD 7A 0B               CALL   coldInit   
4022   CD BA 49               CALL   execStr   
4025   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1#"   
4040   CD BA 0A               CALL   flushBuffer   
4043                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1#",2
4043   E1                     POP   HL   
4044   E5                     PUSH   HL   
4045   11 02 00               LD   DE,2   
4048   B7                     OR   A   
4049   ED 52                  SBC   HL,DE   
404B   7D                     LD   A,L   
404C   B4                     OR   H   
404D   CA C2 40               JP   Z,expectM_0_2740S45   
4050   CD 32 0B               CALL   printStr   
4053   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
4074   CD 32 0B               CALL   printStr   
4077   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4086   21 02 00               LD   hl,2   
4089   E5                     PUSH   hl   
408A   E5                     PUSH   hl   
408B   CD 51 0C               CALL   run   
408E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4096   CD BA 0A               CALL   flushBuffer   
4099   CD 32 0B               CALL   printStr   
409C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40A9   E1                     POP   hl   
40AA   E5                     PUSH   hl   
40AB   E5                     PUSH   hl   
40AC   CD 51 0C               CALL   run   
40AF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40BE   CD BA 0A               CALL   flushBuffer   
40C1   76                     HALT      
40C2                EXPECTM_0_2740S45:      
40C2   E1                     POP   HL   
40C3                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
40C3   31 00 4B               LD   SP,STACK   
40C6   CD 7A 0B               CALL   coldInit   
40C9   CD BA 49               CALL   execStr   
40CC   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
40F2   CD BA 0A               CALL   flushBuffer   
40F5                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
40F5   E1                     POP   HL   
40F6   E5                     PUSH   HL   
40F7   11 0A 00               LD   DE,10   
40FA   B7                     OR   A   
40FB   ED 52                  SBC   HL,DE   
40FD   7D                     LD   A,L   
40FE   B4                     OR   H   
40FF   CA 7F 41               JP   Z,expectM_0_2741S45   
4102   CD 32 0B               CALL   printStr   
4105   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4131   CD 32 0B               CALL   printStr   
4134   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4143   21 0A 00               LD   hl,10   
4146   E5                     PUSH   hl   
4147   E5                     PUSH   hl   
4148   CD 51 0C               CALL   run   
414B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4153   CD BA 0A               CALL   flushBuffer   
4156   CD 32 0B               CALL   printStr   
4159   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4166   E1                     POP   hl   
4167   E5                     PUSH   hl   
4168   E5                     PUSH   hl   
4169   CD 51 0C               CALL   run   
416C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
417B   CD BA 0A               CALL   flushBuffer   
417E   76                     HALT      
417F                EXPECTM_0_2741S45:      
417F   E1                     POP   HL   
4180                          ;*Macro unroll:  test "3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +};^", 6
4180   31 00 4B               LD   SP,STACK   
4183   CD 7A 0B               CALL   coldInit   
4186   CD BA 49               CALL   execStr   
4189   33 20 3A 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +};^"   
41B5   CD BA 0A               CALL   flushBuffer   
41B8                          ;*Macro unroll:  expect "3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +};^",6
41B8   E1                     POP   HL   
41B9   E5                     PUSH   HL   
41BA   11 06 00               LD   DE,6   
41BD   B7                     OR   A   
41BE   ED 52                  SBC   HL,DE   
41C0   7D                     LD   A,L   
41C1   B4                     OR   H   
41C2   CA 48 42               JP   Z,expectM_0_2742S45   
41C5   CD 32 0B               CALL   printStr   
41C8   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +};^"   
41FA   CD 32 0B               CALL   printStr   
41FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
420C   21 06 00               LD   hl,6   
420F   E5                     PUSH   hl   
4210   E5                     PUSH   hl   
4211   CD 51 0C               CALL   run   
4214   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
421C   CD BA 0A               CALL   flushBuffer   
421F   CD 32 0B               CALL   printStr   
4222   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
422F   E1                     POP   hl   
4230   E5                     PUSH   hl   
4231   E5                     PUSH   hl   
4232   CD 51 0C               CALL   run   
4235   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4244   CD BA 0A               CALL   flushBuffer   
4247   76                     HALT      
4248                EXPECTM_0_2742S45:      
4248   E1                     POP   HL   
4249                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
4249   31 00 4B               LD   SP,STACK   
424C   CD 7A 0B               CALL   coldInit   
424F   CD BA 49               CALL   execStr   
4252   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
425E   CD BA 0A               CALL   flushBuffer   
4261                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
4261   E1                     POP   HL   
4262   E5                     PUSH   HL   
4263   11 00 00               LD   DE,NUL   
4266   B7                     OR   A   
4267   ED 52                  SBC   HL,DE   
4269   7D                     LD   A,L   
426A   B4                     OR   H   
426B   CA D1 42               JP   Z,expectM_0_2743S45   
426E   CD 32 0B               CALL   printStr   
4271   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
4283   CD 32 0B               CALL   printStr   
4286   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4295   21 00 00               LD   hl,NUL   
4298   E5                     PUSH   hl   
4299   E5                     PUSH   hl   
429A   CD 51 0C               CALL   run   
429D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42A5   CD BA 0A               CALL   flushBuffer   
42A8   CD 32 0B               CALL   printStr   
42AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42B8   E1                     POP   hl   
42B9   E5                     PUSH   hl   
42BA   E5                     PUSH   hl   
42BB   CD 51 0C               CALL   run   
42BE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
42CD   CD BA 0A               CALL   flushBuffer   
42D0   76                     HALT      
42D1                EXPECTM_0_2743S45:      
42D1   E1                     POP   HL   
42D2                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
42D2   31 00 4B               LD   SP,STACK   
42D5   CD 7A 0B               CALL   coldInit   
42D8   CD BA 49               CALL   execStr   
42DB   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
42E7   CD BA 0A               CALL   flushBuffer   
42EA                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
42EA   E1                     POP   HL   
42EB   E5                     PUSH   HL   
42EC   11 00 00               LD   DE,NUL   
42EF   B7                     OR   A   
42F0   ED 52                  SBC   HL,DE   
42F2   7D                     LD   A,L   
42F3   B4                     OR   H   
42F4   CA 5A 43               JP   Z,expectM_0_2744S45   
42F7   CD 32 0B               CALL   printStr   
42FA   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
430C   CD 32 0B               CALL   printStr   
430F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
431E   21 00 00               LD   hl,NUL   
4321   E5                     PUSH   hl   
4322   E5                     PUSH   hl   
4323   CD 51 0C               CALL   run   
4326   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
432E   CD BA 0A               CALL   flushBuffer   
4331   CD 32 0B               CALL   printStr   
4334   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4341   E1                     POP   hl   
4342   E5                     PUSH   hl   
4343   E5                     PUSH   hl   
4344   CD 51 0C               CALL   run   
4347   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4356   CD BA 0A               CALL   flushBuffer   
4359   76                     HALT      
435A                EXPECTM_0_2744S45:      
435A   E1                     POP   HL   
435B                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
435B   31 00 4B               LD   SP,STACK   
435E   CD 7A 0B               CALL   coldInit   
4361   CD BA 49               CALL   execStr   
4364   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
4370   CD BA 0A               CALL   flushBuffer   
4373                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
4373   E1                     POP   HL   
4374   E5                     PUSH   HL   
4375   11 00 00               LD   DE,NUL   
4378   B7                     OR   A   
4379   ED 52                  SBC   HL,DE   
437B   7D                     LD   A,L   
437C   B4                     OR   H   
437D   CA E3 43               JP   Z,expectM_0_2745S45   
4380   CD 32 0B               CALL   printStr   
4383   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
4395   CD 32 0B               CALL   printStr   
4398   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43A7   21 00 00               LD   hl,NUL   
43AA   E5                     PUSH   hl   
43AB   E5                     PUSH   hl   
43AC   CD 51 0C               CALL   run   
43AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43B7   CD BA 0A               CALL   flushBuffer   
43BA   CD 32 0B               CALL   printStr   
43BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43CA   E1                     POP   hl   
43CB   E5                     PUSH   hl   
43CC   E5                     PUSH   hl   
43CD   CD 51 0C               CALL   run   
43D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43DF   CD BA 0A               CALL   flushBuffer   
43E2   76                     HALT      
43E3                EXPECTM_0_2745S45:      
43E3   E1                     POP   HL   
43E4                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
43E4   31 00 4B               LD   SP,STACK   
43E7   CD 7A 0B               CALL   coldInit   
43EA   CD BA 49               CALL   execStr   
43ED   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
43F9   CD BA 0A               CALL   flushBuffer   
43FC                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
43FC   E1                     POP   HL   
43FD   E5                     PUSH   HL   
43FE   11 00 00               LD   DE,NUL   
4401   B7                     OR   A   
4402   ED 52                  SBC   HL,DE   
4404   7D                     LD   A,L   
4405   B4                     OR   H   
4406   CA 6C 44               JP   Z,expectM_0_2746S45   
4409   CD 32 0B               CALL   printStr   
440C   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
441E   CD 32 0B               CALL   printStr   
4421   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4430   21 00 00               LD   hl,NUL   
4433   E5                     PUSH   hl   
4434   E5                     PUSH   hl   
4435   CD 51 0C               CALL   run   
4438   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4440   CD BA 0A               CALL   flushBuffer   
4443   CD 32 0B               CALL   printStr   
4446   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4453   E1                     POP   hl   
4454   E5                     PUSH   hl   
4455   E5                     PUSH   hl   
4456   CD 51 0C               CALL   run   
4459   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4468   CD BA 0A               CALL   flushBuffer   
446B   76                     HALT      
446C                EXPECTM_0_2746S45:      
446C   E1                     POP   HL   
446D                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
446D   31 00 4B               LD   SP,STACK   
4470   CD 7A 0B               CALL   coldInit   
4473   CD BA 49               CALL   execStr   
4476   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
447E   CD BA 0A               CALL   flushBuffer   
4481                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
4481   E1                     POP   HL   
4482   E5                     PUSH   HL   
4483   11 66 4D               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4486   B7                     OR   A   
4487   ED 52                  SBC   HL,DE   
4489   7D                     LD   A,L   
448A   B4                     OR   H   
448B   CA ED 44               JP   Z,expectM_0_2747S45   
448E   CD 32 0B               CALL   printStr   
4491   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
449F   CD 32 0B               CALL   printStr   
44A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44B1   21 66 4D               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
44B4   E5                     PUSH   hl   
44B5   E5                     PUSH   hl   
44B6   CD 51 0C               CALL   run   
44B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44C1   CD BA 0A               CALL   flushBuffer   
44C4   CD 32 0B               CALL   printStr   
44C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44D4   E1                     POP   hl   
44D5   E5                     PUSH   hl   
44D6   E5                     PUSH   hl   
44D7   CD 51 0C               CALL   run   
44DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44E9   CD BA 0A               CALL   flushBuffer   
44EC   76                     HALT      
44ED                EXPECTM_0_2747S45:      
44ED   E1                     POP   HL   
44EE                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
44EE   31 00 4B               LD   SP,STACK   
44F1   CD 7A 0B               CALL   coldInit   
44F4   CD BA 49               CALL   execStr   
44F7   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
44FF   CD BA 0A               CALL   flushBuffer   
4502                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
4502   E1                     POP   HL   
4503   E5                     PUSH   HL   
4504   11 34 4D               LD   DE,VARS + ("Z"-"A"+1)*2   
4507   B7                     OR   A   
4508   ED 52                  SBC   HL,DE   
450A   7D                     LD   A,L   
450B   B4                     OR   H   
450C   CA 6E 45               JP   Z,expectM_0_2748S45   
450F   CD 32 0B               CALL   printStr   
4512   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
4520   CD 32 0B               CALL   printStr   
4523   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4532   21 34 4D               LD   hl,VARS + ("Z"-"A"+1)*2   
4535   E5                     PUSH   hl   
4536   E5                     PUSH   hl   
4537   CD 51 0C               CALL   run   
453A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4542   CD BA 0A               CALL   flushBuffer   
4545   CD 32 0B               CALL   printStr   
4548   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4555   E1                     POP   hl   
4556   E5                     PUSH   hl   
4557   E5                     PUSH   hl   
4558   CD 51 0C               CALL   run   
455B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
456A   CD BA 0A               CALL   flushBuffer   
456D   76                     HALT      
456E                EXPECTM_0_2748S45:      
456E   E1                     POP   HL   
456F                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
456F   31 00 4B               LD   SP,STACK   
4572   CD 7A 0B               CALL   coldInit   
4575   CD BA 49               CALL   execStr   
4578   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
4580   CD BA 0A               CALL   flushBuffer   
4583                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
4583   E1                     POP   HL   
4584   E5                     PUSH   HL   
4585   11 32 4D               LD   DE,VARS + ("Z"-"A")*2   
4588   B7                     OR   A   
4589   ED 52                  SBC   HL,DE   
458B   7D                     LD   A,L   
458C   B4                     OR   H   
458D   CA EF 45               JP   Z,expectM_0_2749S45   
4590   CD 32 0B               CALL   printStr   
4593   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
45A1   CD 32 0B               CALL   printStr   
45A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45B3   21 32 4D               LD   hl,VARS + ("Z"-"A")*2   
45B6   E5                     PUSH   hl   
45B7   E5                     PUSH   hl   
45B8   CD 51 0C               CALL   run   
45BB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45C3   CD BA 0A               CALL   flushBuffer   
45C6   CD 32 0B               CALL   printStr   
45C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45D6   E1                     POP   hl   
45D7   E5                     PUSH   hl   
45D8   E5                     PUSH   hl   
45D9   CD 51 0C               CALL   run   
45DC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45EB   CD BA 0A               CALL   flushBuffer   
45EE   76                     HALT      
45EF                EXPECTM_0_2749S45:      
45EF   E1                     POP   HL   
45F0                          ;*Macro unroll:  test "'A' /ad", VARS
45F0   31 00 4B               LD   SP,STACK   
45F3   CD 7A 0B               CALL   coldInit   
45F6   CD BA 49               CALL   execStr   
45F9   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
4601   CD BA 0A               CALL   flushBuffer   
4604                          ;*Macro unroll:  expect "'A' /ad",VARS
4604   E1                     POP   HL   
4605   E5                     PUSH   HL   
4606   11 00 4D               LD   DE,VARS   
4609   B7                     OR   A   
460A   ED 52                  SBC   HL,DE   
460C   7D                     LD   A,L   
460D   B4                     OR   H   
460E   CA 70 46               JP   Z,expectM_0_2750S45   
4611   CD 32 0B               CALL   printStr   
4614   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4622   CD 32 0B               CALL   printStr   
4625   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4634   21 00 4D               LD   hl,VARS   
4637   E5                     PUSH   hl   
4638   E5                     PUSH   hl   
4639   CD 51 0C               CALL   run   
463C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4644   CD BA 0A               CALL   flushBuffer   
4647   CD 32 0B               CALL   printStr   
464A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4657   E1                     POP   hl   
4658   E5                     PUSH   hl   
4659   E5                     PUSH   hl   
465A   CD 51 0C               CALL   run   
465D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
466C   CD BA 0A               CALL   flushBuffer   
466F   76                     HALT      
4670                EXPECTM_0_2750S45:      
4670   E1                     POP   HL   
4671                          ;*Macro unroll:  test "-1. /c/vB 0#", $2D
4671   31 00 4B               LD   SP,STACK   
4674   CD 7A 0B               CALL   coldInit   
4677   CD BA 49               CALL   execStr   
467A   2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "-1. /c/vB 0#"   
4687   CD BA 0A               CALL   flushBuffer   
468A                          ;*Macro unroll:  expect "-1. /c/vB 0#",$2D
468A   E1                     POP   HL   
468B   E5                     PUSH   HL   
468C   11 2D 00               LD   DE,$2D   
468F   B7                     OR   A   
4690   ED 52                  SBC   HL,DE   
4692   7D                     LD   A,L   
4693   B4                     OR   H   
4694   CA FB 46               JP   Z,expectM_0_2751S45   
4697   CD 32 0B               CALL   printStr   
469A   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /c/vB 0#"   
46AD   CD 32 0B               CALL   printStr   
46B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46BF   21 2D 00               LD   hl,$2D   
46C2   E5                     PUSH   hl   
46C3   E5                     PUSH   hl   
46C4   CD 51 0C               CALL   run   
46C7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46CF   CD BA 0A               CALL   flushBuffer   
46D2   CD 32 0B               CALL   printStr   
46D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46E2   E1                     POP   hl   
46E3   E5                     PUSH   hl   
46E4   E5                     PUSH   hl   
46E5   CD 51 0C               CALL   run   
46E8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46F7   CD BA 0A               CALL   flushBuffer   
46FA   76                     HALT      
46FB                EXPECTM_0_2751S45:      
46FB   E1                     POP   HL   
46FC                          ;*Macro unroll:  test "`A`.s /c/vB 0#", 65
46FC   31 00 4B               LD   SP,STACK   
46FF   CD 7A 0B               CALL   coldInit   
4702   CD BA 49               CALL   execStr   
4705   60 41 60 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "`A`.s /c/vB 0#"   
4714   CD BA 0A               CALL   flushBuffer   
4717                          ;*Macro unroll:  expect "`A`.s /c/vB 0#",65
4717   E1                     POP   HL   
4718   E5                     PUSH   HL   
4719   11 41 00               LD   DE,65   
471C   B7                     OR   A   
471D   ED 52                  SBC   HL,DE   
471F   7D                     LD   A,L   
4720   B4                     OR   H   
4721   CA 8A 47               JP   Z,expectM_0_2752S45   
4724   CD 32 0B               CALL   printStr   
4727   43 6F 64 65 3A 20 60 41 60 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","`A`.s /c/vB 0#"   
473C   CD 32 0B               CALL   printStr   
473F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
474E   21 41 00               LD   hl,65   
4751   E5                     PUSH   hl   
4752   E5                     PUSH   hl   
4753   CD 51 0C               CALL   run   
4756   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
475E   CD BA 0A               CALL   flushBuffer   
4761   CD 32 0B               CALL   printStr   
4764   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4771   E1                     POP   hl   
4772   E5                     PUSH   hl   
4773   E5                     PUSH   hl   
4774   CD 51 0C               CALL   run   
4777   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4786   CD BA 0A               CALL   flushBuffer   
4789   76                     HALT      
478A                EXPECTM_0_2752S45:      
478A   E1                     POP   HL   
478B                          ;*Macro unroll:  test "123. /c/vB 1#", $32
478B   31 00 4B               LD   SP,STACK   
478E   CD 7A 0B               CALL   coldInit   
4791   CD BA 49               CALL   execStr   
4794   31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "123. /c/vB 1#"   
47A2   CD BA 0A               CALL   flushBuffer   
47A5                          ;*Macro unroll:  expect "123. /c/vB 1#",$32
47A5   E1                     POP   HL   
47A6   E5                     PUSH   HL   
47A7   11 32 00               LD   DE,$32   
47AA   B7                     OR   A   
47AB   ED 52                  SBC   HL,DE   
47AD   7D                     LD   A,L   
47AE   B4                     OR   H   
47AF   CA 17 48               JP   Z,expectM_0_2753S45   
47B2   CD 32 0B               CALL   printStr   
47B5   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /c/vB 1#"   
47C9   CD 32 0B               CALL   printStr   
47CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47DB   21 32 00               LD   hl,$32   
47DE   E5                     PUSH   hl   
47DF   E5                     PUSH   hl   
47E0   CD 51 0C               CALL   run   
47E3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47EB   CD BA 0A               CALL   flushBuffer   
47EE   CD 32 0B               CALL   printStr   
47F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47FE   E1                     POP   hl   
47FF   E5                     PUSH   hl   
4800   E5                     PUSH   hl   
4801   CD 51 0C               CALL   run   
4804   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4813   CD BA 0A               CALL   flushBuffer   
4816   76                     HALT      
4817                EXPECTM_0_2753S45:      
4817   E1                     POP   HL   
4818                          ;*Macro unroll:  test "$4321 /h. /c/vB 0#", $24
4818   31 00 4B               LD   SP,STACK   
481B   CD 7A 0B               CALL   coldInit   
481E   CD BA 49               CALL   execStr   
4821   24 34 33 32 31 20 2F 68 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "$4321 /h. /c/vB 0#"   
4834   CD BA 0A               CALL   flushBuffer   
4837                          ;*Macro unroll:  expect "$4321 /h. /c/vB 0#",$24
4837   E1                     POP   HL   
4838   E5                     PUSH   HL   
4839   11 24 00               LD   DE,$24   
483C   B7                     OR   A   
483D   ED 52                  SBC   HL,DE   
483F   7D                     LD   A,L   
4840   B4                     OR   H   
4841   CA AE 48               JP   Z,expectM_0_2754S45   
4844   CD 32 0B               CALL   printStr   
4847   43 6F 64 65 3A 20 24 34 33 32 31 20 2F 68 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","$4321 /h. /c/vB 0#"   
4860   CD 32 0B               CALL   printStr   
4863   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4872   21 24 00               LD   hl,$24   
4875   E5                     PUSH   hl   
4876   E5                     PUSH   hl   
4877   CD 51 0C               CALL   run   
487A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4882   CD BA 0A               CALL   flushBuffer   
4885   CD 32 0B               CALL   printStr   
4888   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4895   E1                     POP   hl   
4896   E5                     PUSH   hl   
4897   E5                     PUSH   hl   
4898   CD 51 0C               CALL   run   
489B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48AA   CD BA 0A               CALL   flushBuffer   
48AD   76                     HALT      
48AE                EXPECTM_0_2754S45:      
48AE   E1                     POP   HL   
48AF                          ;*Macro unroll:  test "[1 2 3]:a:bc{`[ `.s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s};^",0
48AF   31 00 4B               LD   SP,STACK   
48B2   CD 7A 0B               CALL   coldInit   
48B5   CD BA 49               CALL   execStr   
48B8   5B 31 20 32 20 33 5D 3A 61 3A 62 63 7B 60 5B 20 60 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 7D 3B 5E 00 .CSTR   "[1 2 3]:a:bc{`[ `.s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s};^"   
4900   CD BA 0A               CALL   flushBuffer   
4903                          ;*Macro unroll:  expect "[1 2 3]:a:bc{`[ `.s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s};^",0
4903   E1                     POP   HL   
4904   E5                     PUSH   HL   
4905   11 00 00               LD   DE,0   
4908   B7                     OR   A   
4909   ED 52                  SBC   HL,DE   
490B   7D                     LD   A,L   
490C   B4                     OR   H   
490D   CA AF 49               JP   Z,expectM_0_2755S45   
4910   CD 32 0B               CALL   printStr   
4913   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 3A 61 3A 62 63 7B 60 5B 20 60 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 7D 3B 5E 00 .CSTR   "Code: ","[1 2 3]:a:bc{`[ `.s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s};^"   
4961   CD 32 0B               CALL   printStr   
4964   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4973   21 00 00               LD   hl,0   
4976   E5                     PUSH   hl   
4977   E5                     PUSH   hl   
4978   CD 51 0C               CALL   run   
497B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4983   CD BA 0A               CALL   flushBuffer   
4986   CD 32 0B               CALL   printStr   
4989   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4996   E1                     POP   hl   
4997   E5                     PUSH   hl   
4998   E5                     PUSH   hl   
4999   CD 51 0C               CALL   run   
499C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49AB   CD BA 0A               CALL   flushBuffer   
49AE   76                     HALT      
49AF                EXPECTM_0_2755S45:      
49AF   E1                     POP   HL   
49B0                             ; 
49B0   CD 32 0B               CALL   printStr   
49B3   44 6F 6E 65 21 00      .CSTR   "Done!"   
49B9   76                     HALT      
49BA                             ; executes a null teminated string (null executes exit_)
49BA                             ; the string should be immedaitely following the call
49BA                EXECSTR:      ; create a root stack frame
49BA   C1                     POP   bc   ; bc = code*
49BB   0B                     DEC   bc   ; dec to prepare for next routine
49BC   11 00 00               LD   de,0   
49BF   D5                     PUSH   de   ; push fake IP
49C0   D5                     PUSH   de   ; push null arg_list*
49C1   D5                     PUSH   de   ; push null first_arg*
49C2   D5                     PUSH   de   ; push fake BP
49C3   DD E9                  JP   (ix)   
49C5                STKSIZE:   EQU   $100   ; Stack size
49C5                TIBSIZE:   EQU   $100   ; 256 bytes
49C5                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
49C5                          ALIGN   $100   
4A00                          DS   STKSIZE   
4B00                STACK:       
4B00                          ALIGN   $100   
4B00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4C00                          ALIGN   $100   
4C00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4D00                          ALIGN   $100   
4D00                VARS:        
4D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4DD0                RESTARTS:      
4DD0                RST08:    DS   2   
4DD2                RST10:    DS   2   
4DD4                RST18:    DS   2   
4DD6                RST20:    DS   2   
4DD8                RST28:    DS   2   
4DDA                RST30:    DS   2   ; 
4DDC                BAUD:     DS   2   ; 
4DDE                INTVEC:   DS   2   ; 
4DE0                NMIVEC:   DS   2   ; 
4DE2                GETCVEC:   DS   2   ; 
4DE4                PUTCVEC:   DS   2   ; 
4DE6                SYSVARS:      
4DE6                             ; initialised sys variables (preserved)
4DE6                VDATAWIDTH:   DS   2   ; 
4DE8                VNUMBASE:   DS   2   ; 
4DEA                VTIBPTR:   DS   2   ; 
4DEC                VBUFPTR:   DS   2   ; 
4DEE                VNEXT:    DS   2   ; 
4DF0                VHEAPPTR:   DS   2   ; 
4DF2                             ; uninitialised sys variables (preserved)
4DF2                VPOINTER:   DS   2   ; 
4DF4                VREMAIN:   DS   2   ; 
4DF6                VSAVEDIP:   DS   2   ; 
4DF8                VSAVEDSP:   DS   2   ; 
4DFA                VSAVEDNEXT:   DS   2   ; 
4DFC                VSAVEDBP:   DS   2   ; 
4DFE                VCHECKSUM:   DS   2   ; 
4E00                             ; uninitialised sys variables (unpreserved)
4E00                VTEMP1:   DS   2   ; 
4E02                VTEMP2:   DS   2   ; 
4E04                VLASTDEF:   DS   2   ; 
4E06                VHASHSTR:   DS   2   ; 
4E08                TBPTR:    DS   2   ; reserved for tests
4E0A                TITLEBUF:   DS   20   
4E1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 58 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AB0 DEFINED AT LINE 1707 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1846 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 44
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 44
                    > USED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 29 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 30 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 31 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 32 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 33 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 34 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 35 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 36 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 37 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 63 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 68 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 78 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 181 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 183 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 185 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 187 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 189 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 191 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 193 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 195 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 199 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 200 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 202 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 204 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 206 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 208 IN MAIN.asm
COLON_:             0327 DEFINED AT LINE 210 IN MAIN.asm
UPCASE_:            032A DEFINED AT LINE 212 IN MAIN.asm
LOWCASE_:           032D DEFINED AT LINE 214 IN MAIN.asm
QUESTION_:          0330 DEFINED AT LINE 216 IN MAIN.asm
STAR_:              0333 DEFINED AT LINE 218 IN MAIN.asm
BANG_:              0336 DEFINED AT LINE 220 IN MAIN.asm
NUM_:               033B DEFINED AT LINE 223 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
HASH_:              033E DEFINED AT LINE 225 IN MAIN.asm
PIPE_:              0341 DEFINED AT LINE 227 IN MAIN.asm
CARET_:             0344 DEFINED AT LINE 229 IN MAIN.asm
COMMA_:             0347 DEFINED AT LINE 231 IN MAIN.asm
DBLQUOTE_:          034A DEFINED AT LINE 233 IN MAIN.asm
MINUS_:             034D DEFINED AT LINE 235 IN MAIN.asm
EQ_:                0350 DEFINED AT LINE 237 IN MAIN.asm
EQ0:                035A DEFINED AT LINE 244 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
EQ1:                035B DEFINED AT LINE 246 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
GT_:                035F DEFINED AT LINE 250 IN MAIN.asm
LT_:                036A DEFINED AT LINE 258 IN MAIN.asm
LT1:                0373 DEFINED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
SLASH_:             037C DEFINED AT LINE 270 IN MAIN.asm
NOP_:               037F DEFINED AT LINE 272 IN MAIN.asm
RPAREN_:            0381 DEFINED AT LINE 274 IN MAIN.asm
PLUS:               0384 DEFINED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ADD:                0384 DEFINED AT LINE 281 IN MAIN.asm
ADD1:               038F DEFINED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 285 IN MAIN.asm
ADD3:               0393 DEFINED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
AT:                 0396 DEFINED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
ADDR:               0396 DEFINED AT LINE 301 IN MAIN.asm
AMPER:              03A0 DEFINED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
AND:                03A0 DEFINED AT LINE 307 IN MAIN.asm
AND1:               03A7 DEFINED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 329 IN MAIN.asm
PIPE:               03AB DEFINED AT LINE 320 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
OR:                 03AB DEFINED AT LINE 321 IN MAIN.asm
XOR:                03B4 DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
XOR1:               03B5 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
INVERT:             03BF DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
PERCENT:            03C4 DEFINED AT LINE 350 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
ARG:                03C4 DEFINED AT LINE 351 IN MAIN.asm
ARG0:               03E0 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
ARG0A:              03E9 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
ARG1:               03EE DEFINED AT LINE 381 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ARG1A:              03F6 DEFINED AT LINE 388 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
LBRACK:             03F9 DEFINED AT LINE 392 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
ARRAYSTART:         03F9 DEFINED AT LINE 393 IN MAIN.asm
RBRACK:             0415 DEFINED AT LINE 407 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
ARRAYEND:           0415 DEFINED AT LINE 408 IN MAIN.asm
ARRAYEND1:          0431 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
ARRAYEND2:          0441 DEFINED AT LINE 435 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
ARRAYEND3:          0446 DEFINED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 424 IN MAIN.asm
HASH:               0465 DEFINED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
ARRAYINDEX:         0465 DEFINED AT LINE 464 IN MAIN.asm
ARRAYINDEX0:        046D DEFINED AT LINE 470 IN MAIN.asm
ARRAYINDEX1:        046E DEFINED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
ARRAYINDEX2:        047A DEFINED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
ASSIGN:             047D DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 243 IN MAIN.asm
ASSIGN0:            047F DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
ASSIGNX:            0480 DEFINED AT LINE 491 IN MAIN.asm
ASSIGN1:            048C DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
COLON:              048E DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 211 IN MAIN.asm
ARGLIST:            048E DEFINED AT LINE 507 IN MAIN.asm
ARGLIST1:           0498 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
ARGLIST1A:          04A0 DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
ARGLIST2:           04A8 DEFINED AT LINE 525 IN MAIN.asm
ARGLIST3:           04B0 DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
ARGLIST4:           04B3 DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
ARGLIST5:           04B9 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
LBRACE:             04C4 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
BLOCKSTART:         04C4 DEFINED AT LINE 553 IN MAIN.asm
BLOCKSTART1:        04C8 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
BLOCKSTART2:        04F4 DEFINED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
                    > USED AT LINE 575 IN MAIN.asm
BLOCKSTART3:        04F7 DEFINED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
                    > USED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKSTART4:        04FF DEFINED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
BLOCKSTART5:        0502 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
BLOCKSTART6:        052A DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
RBRACE:             052D DEFINED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
BLOCKEND:           052D DEFINED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
BLOCKEND1:          055F DEFINED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
BLOCKEND2:          056B DEFINED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
BLOCKEND3:          057D DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
TICK:               0589 DEFINED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
CHAR:               0589 DEFINED AT LINE 671 IN MAIN.asm
CHAR1:              058C DEFINED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
CHAR2:              0598 DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
CHAR3:              059B DEFINED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
BACKSLASH:          059E DEFINED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
COMMA:              05A0 DEFINED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
DISCARD:            05A0 DEFINED AT LINE 695 IN MAIN.asm
DISCARD1:           05AD DEFINED AT LINE 704 IN MAIN.asm
                    > USED AT LINE 702 IN MAIN.asm
SLASH:              05AF DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 271 IN MAIN.asm
COMMAND:            05AF DEFINED AT LINE 708 IN MAIN.asm
DIV:                05E8 DEFINED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
DOT:                05F9 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
DIVIDE:             060B DEFINED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
DIVIDE1:            0610 DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
DIVIDE2:            061D DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
DIVIDE3:            061E DEFINED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
EQUALS:             0624 DEFINED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 248 IN MAIN.asm
LESSTHANEQ:         062C DEFINED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
LESSTHAN:           0631 DEFINED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
LESSTHAN1:          0636 DEFINED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
TRUE1:              0639 DEFINED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
NULL1:              063F DEFINED AT LINE 822 IN MAIN.asm
FALSE1:             063F DEFINED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
CARET:              0645 DEFINED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
GO:                 0645 DEFINED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 43
                    > USED AT LINE 43
GO1:                0646 DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 1010 IN MAIN.asm
GO2:                064C DEFINED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
GOBLOCK:            0657 DEFINED AT LINE 847 IN MAIN.asm
GOBLOCK1:           0657 DEFINED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
GOBLOCK2:           067C DEFINED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
GOLAMBDA:           068A DEFINED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
GOLAMBDA1:          06A3 DEFINED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
GOLAMBDA2:          06A9 DEFINED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
GOLAMBDA3:          06B4 DEFINED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOLAMBDA4:          06CC DEFINED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
GOLAMBDA5:          06CF DEFINED AT LINE 926 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
GOLAMBDA6:          06D2 DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
GOLAMBDA7:          06D5 DEFINED AT LINE 933 IN MAIN.asm
GOLAMBDA8:          06D9 DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
DOLLAR:             06E4 DEFINED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
HEXNUM:             06E4 DEFINED AT LINE 948 IN MAIN.asm
HEXNUM1:            06E7 DEFINED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
HEXNUM2:            06EF DEFINED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
UPCASE:             0701 DEFINED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
LOWCASE:            0706 DEFINED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
IDENT1:             070B DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
QUESTION:           0718 DEFINED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
IF:                 0718 DEFINED AT LINE 990 IN MAIN.asm
IFTE:               0724 DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
IFTE1:              0725 DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
STAR:               0731 DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
MUL:                0731 DEFINED AT LINE 1013 IN MAIN.asm
MUL2:               0733 DEFINED AT LINE 1016 IN MAIN.asm
MUL3:               073B DEFINED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
NUM:                074D DEFINED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
NUM0:               0756 DEFINED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
NUM1:               0757 DEFINED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
NUM2:               076F DEFINED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 1047 IN MAIN.asm
NUM3:               077A DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
RPAREN:             077D DEFINED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
SEMICOLON:          0785 DEFINED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
SHIFTLEFT:          07A1 DEFINED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 262 IN MAIN.asm
SHIFTLEFT1:         07A9 DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
SHIFTLEFT2:         07AA DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
SHIFTRIGHT:         07B1 DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
SHIFTRIGHT1:        07B9 DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
SHIFTRIGHT2:        07BD DEFINED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
DBLQUOTE:           07C4 DEFINED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
STRING:             07C4 DEFINED AT LINE 1139 IN MAIN.asm
STRING1:            07CD DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
STRING2:            07D0 DEFINED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
STRING3:            07D9 DEFINED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
MINUS:              07EC DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
SUB:                07F8 DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
SUB1:               0802 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
ERROR1:             080B DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
COMMENT:            0812 DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
COMMAND_A:          081B DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
ABSOLUTE:           0827 DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
ADDROF:             0834 DEFINED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
ADDROF1:            0848 DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
ADDROF2:            0853 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
COMMAND_B:          0855 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
BUFFERARRAY:        0870 DEFINED AT LINE 42
                    > USED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
BUFFERARRAYM_1789S1278: 087E DEFINED AT LINE 49
                    > USED AT LINE 45
BUFFERNUMBER:       08A9 DEFINED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
BUFFERDEC:          08B0 DEFINED AT LINE 1290 IN MAIN.asm
BUFFERDEC0:         08CA DEFINED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
BUFFERDEC1:         08DA DEFINED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
BUFFERDEC2:         08FA DEFINED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
BUFFERDEC3:         08FC DEFINED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1340 IN MAIN.asm
BUFFERDEC4:         090C DEFINED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1344 IN MAIN.asm
BUFFERDEC5:         090D DEFINED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1348 IN MAIN.asm
BUFFERHEX:          0916 DEFINED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
BUFFERHEX1:         0937 DEFINED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 1372 IN MAIN.asm
BUFFERHEX2:         0940 DEFINED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
BREAK:              094E DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
BREAK1:             0955 DEFINED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1405 IN MAIN.asm
BUFFERSTRING:       0968 DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
BUFFERSTRING0:      096F DEFINED AT LINE 1424 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
BUFFERSTRING1:      0975 DEFINED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1423 IN MAIN.asm
BUFFERCHAR:         0982 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
BUFFERXCHARS:       0987 DEFINED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
BUFFERXCHARS0:      0988 DEFINED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
BUFFERXCHARS1:      0991 DEFINED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
BUFFERXCHARS2:      0999 DEFINED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1452 IN MAIN.asm
COMMAND_I:          09A3 DEFINED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
COMMAND_P:          09AF DEFINED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
PARTIAL:            09C1 DEFINED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
PRINTBUFFER:        09E1 DEFINED AT LINE 42
                    > USED AT LINE 1481 IN MAIN.asm
PRINTBUFFERM_2008S1511: 09ED DEFINED AT LINE 49
                    > USED AT LINE 45
PRINTCHARS:         0A07 DEFINED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
PRINTCHARS1:        0A0E DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
PRINTCHARS2:        0A14 DEFINED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
PRINTSTACK:         0A19 DEFINED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
COMMAND_R:          0A1B DEFINED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
REMAIN:             0A24 DEFINED AT LINE 1572 IN MAIN.asm
                    > USED AT LINE 1568 IN MAIN.asm
SIZE:               0A2A DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
COMMAND_V:          0A32 DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
CONSTBUFSTART:      0A47 DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
CONSTHEAPSTART:     0A4C DEFINED AT LINE 1605 IN MAIN.asm
CONSTTIBSTART:      0A51 DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
VARBUFPTR:          0A56 DEFINED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1589 IN MAIN.asm
VARHEAPPTR:         0A5F DEFINED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
VARTIBPTR:          0A68 DEFINED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1593 IN MAIN.asm
VARIABLE:           0A71 DEFINED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 304 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
CONSTANT:           0A74 DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
CHARS:              0A77 DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
CHARS1:             0A7A DEFINED AT LINE 1637 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
DECIMAL:            0A7F DEFINED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
DECIMAL1:           0A82 DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
HEXADECIMAL:        0A87 DEFINED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
INPUT:              0A8D DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
KEY:                0A98 DEFINED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
OUTPUT:             0AA1 DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
NUMBERS:            0AAA DEFINED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
FILTER:             0AB0 DEFINED AT LINE 1705 IN MAIN.asm
MAP:                0AB0 DEFINED AT LINE 1706 IN MAIN.asm
ARGS1A0L:           0AB2 DEFINED AT LINE 1714 IN MAIN.asm
ARGS1A2L:           0AB5 DEFINED AT LINE 1718 IN MAIN.asm
FLUSHBUFFER:        0ABA DEFINED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1356 IN MAIN.asm
                    > USED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1396 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
JUMPTABLE:          0AD1 DEFINED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
JUMPTABLE0:         0AD3 DEFINED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
JUMPTABLE1:         0AE0 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1752 IN MAIN.asm
JUMPTABLE2:         0AE1 DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1755 IN MAIN.asm
PRTSTR0:            0AE7 DEFINED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
PRTSTR:             0AEB DEFINED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
NESTING:            0AF0 DEFINED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
NESTING0:           0AFA DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1793 IN MAIN.asm
NESTING1A:          0B01 DEFINED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1797 IN MAIN.asm
NESTING1:           0B04 DEFINED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
NESTING2:           0B13 DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
NESTING3:           0B15 DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
NESTING4:           0B20 DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
PROMPT:             0B22 DEFINED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
CRLF:               0B2B DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
PRINTSTR:           0B32 DEFINED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 136
TITLESTR:           0B39 DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
INIT:               0B4D DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
INIT1:              0B55 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
WARMINIT:           0B5D DEFINED AT LINE 1860 IN MAIN.asm
COLDBOOT0:          0B70 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
COLDINIT:           0B7A DEFINED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
COLDBOOT1:          0B8B DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
COLDSTART:          0B98 DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
START:              0BA1 DEFINED AT LINE 1895 IN MAIN.asm
START1:             0BA7 DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
INTERPRET:          0BAD DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
INTERPRET2:         0BBC DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
INTERPRET3:         0BC4 DEFINED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
INTERPRET4:         0BCF DEFINED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
INTERPRET5:         0BD4 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
INTERPRET5A:        0BF7 DEFINED AT LINE 1972 IN MAIN.asm
INTERPRET6:         0BF9 DEFINED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
INTERPRET7:         0C07 DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
INTERPRET8:         0C1A DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
NEXT:               0C35 DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 73 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
NEXT1:              0C46 DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
EXIT:               0C4D DEFINED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
RUN:                0C51 DEFINED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
ERROR:              0C55 DEFINED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
BACKSPACE_:         0C68 DEFINED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
EDIT_:              0C78 DEFINED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
REEDIT_:            0C90 DEFINED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
PRINTSTACK_:        0C93 DEFINED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 13
                    > USED AT LINE 8
EXPECTM_0_2644S45:  0D76 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2645S45:  0DED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2646S45:  0E62 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2647S45:  0ED7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2648S45:  0F4C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2649S45:  0FC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2650S45:  1038 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2651S45:  10B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2652S45:  1128 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2653S45:  119F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2654S45:  1218 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2655S45:  1293 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2656S45:  130C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2657S45:  1385 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2658S45:  1404 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2659S45:  1483 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2660S45:  1500 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2661S45:  1581 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2662S45:  1606 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2663S45:  1689 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2664S45:  1706 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2665S45:  178B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2666S45:  180C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2667S45:  1889 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2668S45:  1906 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2669S45:  198B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2670S45:  1A08 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2671S45:  1A85 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2672S45:  1B04 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2673S45:  1B93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2674S45:  1C10 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2675S45:  1C95 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2676S45:  1D12 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2677S45:  1D97 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2678S45:  1E14 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2679S45:  1E93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2680S45:  1F12 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2681S45:  1F8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2682S45:  200C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2683S45:  2089 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2684S45:  2106 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2685S45:  2183 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2686S45:  2200 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2687S45:  227D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2688S45:  22FA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2689S45:  2379 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2690S45:  23F8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2691S45:  2477 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2692S45:  24F8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2693S45:  2579 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2694S45:  25F4 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2695S45:  266F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2696S45:  26F0 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2697S45:  2777 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2698S45:  27FE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2699S45:  2889 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2700S45:  291E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2701S45:  29B3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2702S45:  2A2E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2703S45:  2AAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2704S45:  2B2A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2705S45:  2BAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2706S45:  2C2A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2707S45:  2CA9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2708S45:  2D2A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2709S45:  2DB3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2710S45:  2E40 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2711S45:  2EC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2712S45:  2F5A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2713S45:  2FEF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2714S45:  3088 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2715S45:  3125 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2716S45:  31B4 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2717S45:  324B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2718S45:  32E4 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2719S45:  337F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2720S45:  3418 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2721S45:  34BF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2722S45:  3552 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2723S45:  35F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2724S45:  369A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2725S45:  3741 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2726S45:  37F0 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2727S45:  389F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2728S45:  392C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2729S45:  39BF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2730S45:  3A4C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2731S45:  3AE5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2732S45:  3B7E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2733S45:  3C2B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2734S45:  3CE0 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2735S45:  3D95 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2736S45:  3E30 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2737S45:  3ED5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2738S45:  3F7A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2739S45:  401B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2740S45:  40C2 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2741S45:  417F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2742S45:  4248 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2743S45:  42D1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2744S45:  435A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2745S45:  43E3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2746S45:  446C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2747S45:  44ED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2748S45:  456E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2749S45:  45EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2750S45:  4670 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2751S45:  46FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2752S45:  478A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2753S45:  4817 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2754S45:  48AE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2755S45:  49AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXECSTR:            49BA DEFINED AT LINE 142
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4B00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TIB:                4B00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 71 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
BUF:                4C00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 72 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
VARS:               4D00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           4DD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4DD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4DD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4DD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4DD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4DD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4DDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4DDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4DDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4DE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4DE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4DE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4DE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1875 IN MAIN.asm
VDATAWIDTH:         4DE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 1638 IN MAIN.asm
VNUMBASE:           4DE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
VTIBPTR:            4DEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
VBUFPTR:            4DEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1422 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
VNEXT:              4DEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1887 IN MAIN.asm
VHEAPPTR:           4DF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 418 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
VPOINTER:           4DF2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 302 IN MAIN.asm
                    > USED AT LINE 303 IN MAIN.asm
                    > USED AT LINE 384 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
VREMAIN:            4DF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
VSAVEDIP:           4DF6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
VSAVEDSP:           4DF8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
VSAVEDNEXT:         4DFA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
VSAVEDBP:           4DFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
VCHECKSUM:          4DFE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             4E00 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 411 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
VTEMP2:             4E02 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
VLASTDEF:           4E04 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           4E06 DEFINED AT LINE 59 IN ram.asm
TBPTR:              4E08 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           4E0A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
HEAP:               4E1E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 74 IN MAIN.asm
                    > USED AT LINE 598 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
