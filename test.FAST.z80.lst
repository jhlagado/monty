0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; call prtdec
0000                             ; push hl
0000                             ; call prtdec
0000                             ; pop hl
0000                             ; call printStr
0000                             ; .cstr " (#"
0000                             ; call prthex
0000                             ; call printStr
0000                             ; .cstr ")\r\n"
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 call run
0000                 .cstr "."
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". `(#`.s .h `)\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 call flushBuffer
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4C               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4C               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4C               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4C               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4C               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4C               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4C               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4C               LD   (RST08),HL   
0094   22 D2 4C               LD   (RST10),HL   
0097   22 D4 4C               LD   (RST18),HL   
009A   22 D6 4C               LD   (RST20),HL   
009D   22 D8 4C               LD   (RST28),HL   
00A0   22 DA 4C               LD   (RST30),HL   
00A3   22 DE 4C               LD   (INTVEC),HL   
00A6   22 E0 4C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 4A               LD   SP,STACK   
00C6   CD 44 0B               CALL   init   
00C9   C3 00 0D               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                TMAGIC:   EQU   $AA   ; magic number
00CC                TRESERV:   EQU   $A0   ; reserved
00CC                TNUMBER:   EQU   $A1   ; number
00CC                TSTRING:   EQU   $A2   ; string
00CC                TPOINTER:   EQU   $A3   ; pointer
00CC                TARRAY:   EQU   $A4   ; array
00CC                TBLOCK:   EQU   $A5   ; block
00CC                TLAMBDA:   EQU   $A6   ; lambda
00CC                TARGLST:   EQU   $A7   ; arglist
00CC                             ; z80_RST8    equ     $CF
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4A                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4B                  DW   BUF   ; vBUFPtr pointer into BUF
0188   EF 0B                  DW   next   ; nNext
018A   08 4D                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   82                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   84                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7F                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6D                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   82                     DB   lsb(nop_)   ; ~
025F   82                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                AT_:         
0303   C3 99 03               JP   at   
0306                AMPER_:      
0306   C3 A3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C7 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FE 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 1A 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 72 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AC 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 D2 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3B 05               JP   rbrace   
031E                TICK_:       
031E   C3 97 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 9D 07               JP   semicolon   
0324                DOT_:        
0324   C3 04 06               JP   dot   
0327                UNDERSCORE_:      
0327   C3 8F 07               JP   underscore   
032A                COLON_:      
032A   C3 9B 04               JP   colon   
032D                UPCASE_:      
032D   C3 13 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 18 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 2A 07               JP   question   
0336                STAR_:       
0336   C3 43 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 5F 07               JP   num   
0341                HASH_:       
0341   C3 F6 06               JP   hash   
0344                PIPE_:       
0344   C3 AE 03               JP   pipe   
0347                CARET_:      
0347   C3 50 06               JP   caret   
034A                COMMA_:      
034A   C3 AE 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 DC 07               JP   dblquote   
0350                MINUS_:      
0350   C3 04 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8A 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 2F 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA C9 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 09                  JR   lt1   
036D                LT_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   
036F   FE 3C                  CP   "<"   
0371   CA B9 07               JP   z,shiftLeft   
0374   E1                     POP   hl   
0375   D1                     POP   de   
0376                LT1:         
0376   FE 3D                  CP   "="   
0378   CA 37 06               JP   z,lessthaneq   
037B   0B                     DEC   bc   
037C   C3 3C 06               JP   lessthan   
037F                SLASH_:      
037F   C3 BD 05               JP   slash   
0382                NOP_:        
0382   DD E9                  JP   (ix)   
0384                RPAREN_:      
0384   C3 95 07               JP   rparen   
0387                             ;*******************************************************************
0387                             ; implementations
0387                             ;*******************************************************************
0387                PLUS:        
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 05                  JR   nz,add1   
038D   E1                     POP   hl   
038E   23                     INC   hl   
038F   C3 8C 04               JP   assign0   
0392                ADD1:        
0392   0B                     DEC   bc   
0393   D1                     POP   de   ; second term
0394   E1                     POP   hl   ; first term
0395   19                     ADD   hl,de   
0396                ADD3:        
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; @ addr
0399                             ; -- ptr
0399                AT:          
0399                ADDR:        
0399   ED 5B F2 4C            LD   de,(vPointer)   
039D   21 F2 4C               LD   hl,vPointer   
03A0   C3 71 0A               JP   variable   
03A3                AMPER:       
03A3                AND:         
03A3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A4   E1                     POP   hl   
03A5   7B                     LD   a,e   
03A6   A5                     AND   l   
03A7   6F                     LD   l,a   
03A8   7A                     LD   a,d   
03A9   A4                     AND   h   
03AA                AND1:        
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                PIPE:        
03AE                OR:          
03AE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   B5                     OR   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   B4                     OR   h   
03B5   18 F3                  JR   and1   
03B7                XOR:         
03B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B8                XOR1:        
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   AD                     XOR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   AC                     XOR   h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0   DD E9                  JP   (ix)   
03C2                INVERT:      ; Bitwise INVert the top member of the stack
03C2   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C5   18 F1                  JR   xor1   
03C7                             ; $a .. $z
03C7                             ; -- value
03C7                             ; returns value of arg
03C7                DOLLAR:      
03C7                ARG:         
03C7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CA   FD 56 05               LD   d,(iy+5)   
03CD   EB                     EX   de,hl   
03CE   7D                     LD   a,l   ; arg_list* == null, skip
03CF   B4                     OR   h   
03D0   28 1C                  JR   z,arg0a   
03D2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D3   2B                     DEC   hl   
03D4   7E                     LD   a,(hl)   
03D5   23                     INC   hl   
03D6   23                     INC   hl   
03D7   B7                     OR   a   
03D8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DA   5F                     LD   e,a   ; e = a = num_args
03DB   03                     INC   bc   ; a = next char = dollar_name
03DC   0A                     LD   a,(bc)   
03DD   C5                     PUSH   bc   ; save IP
03DE   43                     LD   b,e   ; b = e = num_args
03DF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E2   FD 56 03               LD   d,(iy+3)   
03E5                ARG0:        
03E5   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E6   1B                     DEC   de   
03E7   BE                     CP   (hl)   
03E8   28 09                  JR   z,arg1   
03EA   23                     INC   hl   ; hl = next arg_list*
03EB   10 F8                  DJNZ   arg0   
03ED   C1                     POP   bc   ; no match, restore IP
03EE                ARG0A:       
03EE   11 00 00               LD   de,0   ; return 0
03F1   18 08                  JR   arg1a   
03F3                ARG1:        
03F3   C1                     POP   bc   ; restore IP
03F4   EB                     EX   de,hl   ; hl = arg*
03F5   22 F2 4C               LD   (vPointer),hl   ; store arg* in setter
03F8   5E                     LD   e,(hl)   
03F9   23                     INC   hl   
03FA   56                     LD   d,(hl)   ; de = arg
03FB                ARG1A:       
03FB   D5                     PUSH   de   ; push arg
03FC   DD E9                  JP   (ix)   
03FE                LBRACK:      
03FE                ARRAYSTART:      
03FE   11 00 00               LD   de,0   ; create stack frame
0401   D5                     PUSH   de   ; push null for IP
0402   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0405   FD 56 05               LD   d,(iy+5)   ; 
0408   D5                     PUSH   de   ; 
0409   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040C   FD 56 03               LD   d,(iy+3)   ; 
040F   D5                     PUSH   de   ; 
0410   FD E5                  PUSH   iy   ; push BP
0412   FD 21 00 00            LD   iy,0   ; BP = SP
0416   FD 39                  ADD   iy,sp   
0418   DD E9                  JP   (ix)   
041A                RBRACK:      
041A                ARRAYEND:      
041A   FD 54                  LD   d,iyh   ; de = BP
041C   FD 5D                  LD   e,iyl   
041E   ED 43 FE 4C            LD   (vTemp1),bc   ; save IP
0422   62 6B                  LD   hl,de   ; hl = de = BP
0424   B7                     OR   a   
0425   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0427   CB 3C                  SRL   h   ; 
0429   CB 1D                  RR   l   
042B   44 4D                  LD   bc,hl   ; bc = count
042D   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = array[-4]
0430   71                     LD   (hl),c   ; write num items in length word
0431   23                     INC   hl   
0432   70                     LD   (hl),b   
0433   23                     INC   hl   ; hl = array[0], bc = count
0434                             ; de = BP, hl = array[0], bc = count
0434   3E A4                  LD   a,TARRAY   ; write type tag
0436   77                     LD   (hl),a   
0437   23                     INC   hl   
0438   3E AA                  LD   a,TMAGIC   ; write magic byte
043A   77                     LD   (hl),a   
043B   23                     INC   hl   
043C                ARRAYEND1:      
043C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043F   77                     LD   (hl),a   ; write lsb of array item
0440   23                     INC   hl   ; move to msb of array item
0441   3A E6 4C               LD   a,(vDataWidth)   ; vDataWidth=1?
0444   3D                     DEC   a   
0445   28 05                  JR   z,arrayEnd2   
0447   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044A   77                     LD   (hl),a   ; write msb of array item
044B   23                     INC   hl   ; move to next word in array
044C                ARRAYEND2:      
044C   FD 2B                  DEC   iy   ; move to next word on stack
044E   FD 2B                  DEC   iy   
0450   0B                     DEC   bc   ; dec items count
0451   79                     LD   a,c   ; if not zero loop
0452   B0                     OR   b   
0453   20 E7                  JR   nz,arrayEnd1   
0455   EB                     EX   de,hl   ; de = end of array, hl = BP
0456   F9                     LD   sp,hl   ; sp = BP
0457   E1                     POP   hl   ; de = end of array, hl = old BP
0458   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0459   FD 62                  LD   iyh,d   
045B   FD 6B                  LD   iyl,e   
045D   D1                     POP   de   ; pop arg_list (discard)
045E   D1                     POP   de   ; pop first_arg* (discard)
045F   D1                     POP   de   ; pop IP (discard)
0460   ED 5B F0 4C            LD   de,(vHeapPtr)   ; de = array[-4]
0464   13                     INC   de   ; de = array[0]
0465   13                     INC   de   
0466   13                     INC   de   
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   22 F0 4C               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FE 4C            LD   bc,(vTemp1)   ; restore IP
0470   DD E9                  JP   (ix)   
0472                             ; index of an array, based on vDataWidth
0472                             ; array num -- value    ; also sets vPointer to address
0472                ARRINDEX:      
0472   E1                     POP   hl   ; hl = index
0473   D1                     POP   de   ; de = array
0474   3A E6 4C               LD   a,(vDataWidth)   ; a = data width
0477   3D                     DEC   a   
0478   28 01                  JR   z,arrIndex1   
047A                ARRINDEX0:      
047A   29                     ADD   hl,hl   ; if data width = 2 then double
047B                ARRINDEX1:      
047B   19                     ADD   hl,de   ; add addr
047C   22 F2 4C               LD   (vPointer),hl   ; store address in setter
047F   16 00                  LD   d,0   
0481   5E                     LD   e,(hl)   
0482   B7                     OR   a   ; check data width again
0483   28 02                  JR   z,arrIndex2   
0485   23                     INC   hl   
0486   56                     LD   d,(hl)   
0487                ARRINDEX2:      
0487   D5                     PUSH   de   
0488   DD E9                  JP   (ix)   
048A                             ; value _oldValue --            ; uses address in vPointer
048A                ASSIGN:      
048A   E1                     POP   hl   ; discard last accessed value
048B   E1                     POP   hl   ; hl = new value
048C                ASSIGN0:      
048C   EB                     EX   de,hl   ; de = new value
048D                ASSIGNX:      
048D   2A F2 4C               LD   hl,(vPointer)   
0490   73                     LD   (hl),e   
0491   3A E6 4C               LD   a,(vDataWidth)   
0494   3D                     DEC   a   ; is it byte?
0495   28 02                  JR   z,assign1   
0497   23                     INC   hl   
0498   72                     LD   (hl),d   
0499                ASSIGN1:      
0499   DD E9                  JP   (ix)   
049B                             ; arg_list - parses input (ab:c)
049B                             ; names after the : represent uninitialised locals
049B                             ; return values are the state of the stack after the block ends
049B                COLON:       
049B                ARGLIST:      
049B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049E   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap*
04A1   23                     INC   hl   ; skip length field to start
04A2   23                     INC   hl   
04A3   E5                     PUSH   hl   ; save start of arg_list
04A4   03                     INC   bc   ; point to next char
04A5                ARGLIST1:      
04A5   0A                     LD   a,(bc)   
04A6   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A8   20 03                  JR   nz,arglist1a   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   18 10                  JR   arglist3   
04AD                ARGLIST1A:      
04AD   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AF   38 0F                  JR   c,arglist4   
04B1   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B3   30 0B                  JR   nc,arglist4   
04B5                ARGLIST2:      
04B5   77                     LD   (hl),a   
04B6   23                     INC   hl   
04B7   1C                     INC   e   ; increase arg count
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arglist3   
04BC   14                     INC   d   ; if d > 0 increase local count
04BD                ARGLIST3:      
04BD   03                     INC   bc   ; point to next char
04BE   18 E5                  JR   arglist1   
04C0                ARGLIST4:      
04C0   0B                     DEC   bc   
04C1   AF                     XOR   a   
04C2   B2                     OR   d   
04C3   28 01                  JR   z,arglist5   
04C5   15                     DEC   d   ; remove initial inc
04C6                ARGLIST5:      
04C6   23                     INC   hl   
04C7   22 F0 4C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CA   E1                     POP   hl   ; hl = start of arg_list
04CB   E5                     PUSH   hl   ; return start of arg_list
04CC   2B                     DEC   hl   ; write number of locals at start - 1
04CD   72                     LD   (hl),d   
04CE   2B                     DEC   hl   ; write number of args + locals at start - 2
04CF   73                     LD   (hl),e   
04D0   DD E9                  JP   (ix)   
04D2                LBRACE:      
04D2                BLOCKSTART:      
04D2   C5                     PUSH   bc   ; return pointer to first { of block
04D3   03                     INC   bc   
04D4   16 01                  LD   d,1   ; nesting: count first parenthesis
04D6                BLOCKSTART1:      ; Skip to end of definition
04D6   0A                     LD   a,(bc)   ; Get the next character
04D7   03                     INC   bc   ; Point to next character
04D8   FE 21                  CP   " " + 1   ; ignore whitespace
04DA   38 FA                  JR   c,blockStart1   
04DC   FE 29                  CP   ")"   
04DE   28 2D                  JR   z,blockStart4   
04E0   FE 7D                  CP   "}"   
04E2   28 29                  JR   z,blockStart4   
04E4   FE 5D                  CP   "]"   
04E6   28 25                  JR   z,blockStart4   
04E8   FE 28                  CP   "("   
04EA   28 16                  JR   z,blockStart2   
04EC   FE 7B                  CP   "{"   
04EE   28 12                  JR   z,blockStart2   
04F0   FE 5B                  CP   "["   
04F2   28 0E                  JR   z,blockStart2   
04F4   FE 27                  CP   "'"   
04F6   28 0D                  JR   z,blockStart3   
04F8   FE 60                  CP   "`"   
04FA   28 09                  JR   z,blockStart3   
04FC   FE 22                  CP   DQUOTE   
04FE   28 05                  JR   z,blockStart3   
0500   18 D4                  JR   blockStart1   
0502                BLOCKSTART2:      
0502   14                     INC   d   
0503   18 D1                  JR   blockStart1   
0505                BLOCKSTART3:      
0505   3E 80                  LD   a,$80   
0507   AA                     XOR   d   
0508   57                     LD   d,a   
0509   20 CB                  JR   nz,blockStart1   
050B   18 03                  JR   blockStart5   
050D                BLOCKSTART4:      
050D   15                     DEC   d   
050E   20 C6                  JR   nz,blockStart1   ; get the next element
0510                BLOCKSTART5:      
0510   60 69                  LD   hl,bc   ; hl = IP
0512   11 08 4D               LD   de,HEAP   ; is IP pointing to object in heap
0515   B7                     OR   a   ; IP - HEAP
0516   ED 52                  SBC   hl,de   
0518   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051A   28 1C                  JR   z,blockStart6   
051C   60 69                  LD   hl,bc   ; hl = IP
051E   D1                     POP   de   ; de = block*
051F   ED 43 FE 4C            LD   (vTemp1),bc   ; save IP
0523   B7                     OR   a   ; bc = size
0524   ED 52                  SBC   hl,de   
0526   44 4D                  LD   bc,hl   
0528   EB                     EX   de,hl   ; hl = block* de = heap*
0529   ED 5B F0 4C            LD   de,(vHeapPtr)   
052D   D5                     PUSH   de   ; return hblock*
052E   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0530   ED 53 F0 4C            LD   (vHeapPtr),de   ; heap* += size
0534   ED 4B FE 4C            LD   bc,(vTemp1)   ; restore IP
0538                BLOCKSTART6:      
0538   0B                     DEC   bc   ; balanced, exit
0539   DD E9                  JP   (ix)   
053B                RBRACE:      
053B                BLOCKEND:      
053B   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053E   FD 56 01               LD   d,(iy+1)   
0541   ED 53 FE 4C            LD   (vTemp1),de   
0545   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0548   FD 56 07               LD   d,(iy+7)   
054B   ED 53 00 4D            LD   (vTemp2),de   
054F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0552   FD 56 03               LD   d,(iy+3)   
0555   EB                     EX   de,hl   
0556   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0559   FD 56 01               LD   d,(iy+1)   
055C   13                     INC   de   ; for carry flag <=
055D   B7                     OR   a   
055E   ED 52                  SBC   hl,de   
0560   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0562   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0564   FD 5D                  LD   e,iyl   
0566   21 08 00               LD   hl,8   
0569   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056A   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056B   18 0C                  JR   blockEnd2   
056D                BLOCKEND1:      ; same scope
056D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0570   FD 56 03               LD   d,(iy+3)   
0573   EB                     EX   de,hl   
0574   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0576   FD 5D                  LD   e,iyl   
0578   EB                     EX   de,hl   
0579                BLOCKEND2:      
0579   44 4D                  LD   bc,hl   ; bc = hl = BP
057B   B7                     OR   a   ; hl = BP - SP = count
057C   ED 72                  SBC   hl,sp   
057E   7D                     LD   a,l   
057F   B4                     OR   h   
0580   28 09                  JR   z,blockEnd3   
0582   C5                     PUSH   bc   ; bc = count, hl = BP
0583   44 4D                  LD   bc,hl   
0585   E1                     POP   hl   
0586   2B                     DEC   hl   ; hl = BP-1
0587   1B                     DEC   de   ; de = args*-1
0588   ED B8                  LDDR      
058A   13                     INC   de   
058B                BLOCKEND3:      
058B   EB                     EX   de,hl   ; sp = de = new tos*
058C   F9                     LD   sp,hl   
058D   ED 4B 00 4D            LD   bc,(vTemp2)   
0591   FD 2A FE 4C            LD   iy,(vTemp1)   
0595   DD E9                  JP   (ix)   
0597                TICK:        
0597                CHAR:        
0597   21 00 00               LD   hl,0   ; if "" is empty or null
059A                CHAR1:       
059A   03                     INC   bc   ; point to next char
059B   0A                     LD   a,(bc)   
059C   FE 27                  CP   "'"   ; ' is the terminator
059E   28 09                  JR   z,char3   
05A0   FE 5C                  CP   $5c   ; \ is the escape
05A2   20 02                  JR   nz,char2   
05A4   03                     INC   bc   
05A5   0A                     LD   a,(bc)   
05A6                CHAR2:       
05A6   6F                     LD   l,a   
05A7   18 F1                  JR   char1   
05A9                CHAR3:       
05A9   E5                     PUSH   hl   
05AA   DD E9                  JP   (ix)   
05AC                BACKSLASH:      
05AC   DD E9                  JP   (ix)   
05AE                             ; , discard stack item
05AE                             ; x y -- x
05AE                COMMA:       
05AE                DISCARD:      
05AE   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05B0   FD 5D                  LD   e,iyl   
05B2   EB                     EX   de,hl   
05B3   B7                     OR   a   
05B4   ED 72                  SBC   hl,sp   
05B6   CB 7C                  BIT   7,h   
05B8   20 01                  JR   nz,discard1   
05BA   E1                     POP   hl   
05BB                DISCARD1:      
05BB   DD E9                  JP   (ix)   
05BD                SLASH:       
05BD   CD DC 0A               CALL   jumpTable   
05C0   2F                     DB   "/"   
05C1   2A 08                  DW   comment   
05C3   61                     DB   "a"   
05C4   33 08                  DW   command_a   
05C6   62                     DB   "b"   
05C7   6D 08                  DW   command_b   
05C9   63                     DB   "c"   
05CA   77 0A                  DW   chars   
05CC   64                     DB   "d"   
05CD   7F 0A                  DW   decimal   
05CF   66                     DB   "f"   
05D0   4A 06                  DW   false1   
05D2   68                     DB   "h"   
05D3   87 0A                  DW   hexadecimal   
05D5   69                     DB   "i"   
05D6   B3 09                  DW   command_i   
05D8   6B                     DB   "k"   
05D9   98 0A                  DW   key   
05DB   6E                     DB   "n"   
05DC   AA 0A                  DW   numbers   
05DE   6F                     DB   "o"   
05DF   A1 0A                  DW   output   
05E1   70                     DB   "p"   
05E2   BF 09                  DW   command_p   
05E4   73                     DB   "s"   
05E5   28 0A                  DW   size   
05E7   74                     DB   "t"   
05E8   44 06                  DW   true1   
05EA   76                     DB   "v"   
05EB   32 0A                  DW   command_v   
05ED   78                     DB   "x"   
05EE   B7 03                  DW   xor   
05F0   00                     DB   NUL   
05F1   F3 05                  DW   div   
05F3                DIV:         
05F3   D1                     POP   de   
05F4   E1                     POP   hl   
05F5   C5                     PUSH   bc   ; preserve the IP
05F6   44 4D                  LD   bc,hl   
05F8   CD 16 06               CALL   divide   
05FB   EB                     EX   de,hl   
05FC   ED 53 F4 4C            LD   (vRemain),de   
0600   C1                     POP   bc   
0601   C3 96 03               JP   add3   
0604                DOT:         
0604   CD DC 0A               CALL   jumpTable   
0607   61                     DB   "a"   
0608   85 08                  DW   bufferArray   
060A   63                     DB   "c"   
060B   92 09                  DW   bufferChar   
060D   73                     DB   "s"   
060E   78 09                  DW   bufferString   
0610   78                     DB   "x"   
0611   97 09                  DW   bufferXChars   
0613   00                     DB   NUL   
0614   B9 08                  DW   bufferNumber   
0616                             ; dotArray:
0616                             ;     call go
0616                             ;     dw NUL                      ; null closure
0616                             ;     dw $+4
0616                             ;     dw args1A0L
0616                             ;     .cstr "{$a/ba}"          ; block
0616                             ; dotStr:
0616                             ;     call go
0616                             ;     dw NUL                      ; null closure
0616                             ;     dw $+4
0616                             ;     dw args1A0L
0616                             ;     .cstr "{$a/bs}"          ; block
0616                             ; dotChar:
0616                             ;     call go
0616                             ;     dw NUL                      ; null closure
0616                             ;     dw $+4
0616                             ;     dw args1A0L
0616                             ;     .cstr "{$a/bc}"          ; block
0616                             ; dotNum:
0616                             ;     call go
0616                             ;     dw NUL                      ; closure
0616                             ;     dw $+4
0616                             ;     dw args1A0L
0616                             ;     .cstr "{$a/bn}"          ; block
0616                             ; division subroutine.
0616                             ; bc: divisor, de: dividend, hl: remainder
0616                DIVIDE:      
0616   21 00 00               LD   hl,0   ; zero the remainder
0619   3E 10                  LD   a,16   ; loop counter
061B                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
061B   CB 21                  SLA   c   
061D   CB 10                  RL   b   
061F   ED 6A                  ADC   hl,hl   
0621   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0623   38 03                  JR   c,divide2   
0625   0C                     INC   c   
0626   18 01                  JR   divide3   
0628                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0628   19                     ADD   hl,de   
0629                DIVIDE3:      
0629   3D                     DEC   a   
062A   20 EF                  JR   nz,divide1   
062C   50 59                  LD   de,bc   ; result from bc to de
062E   C9                     RET      
062F                             ; hl = value1, de = value2
062F                             ; hl = result
062F                EQUALS:      
062F   B7                     OR   a   ; reset the carry flag
0630   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0632   28 10                  JR   z,true1   
0634   C3 4A 06               JP   false1   
0637                             ; hl = value1 de = value2
0637                             ; hl = result
0637                LESSTHANEQ:      
0637   B7                     OR   a   
0638   ED 52                  SBC   hl,de   
063A   18 05                  JR   lessthan1   
063C                             ; hl = value1 de = value2
063C                             ; hl = result
063C                LESSTHAN:      
063C   B7                     OR   a   
063D   ED 52                  SBC   hl,de   
063F   28 09                  JR   z,false1   
0641                LESSTHAN1:      
0641   FA 4A 06               JP   m,false1   
0644                TRUE1:       
0644   21 FF FF               LD   hl,TRUE   
0647   E5                     PUSH   hl   
0648   DD E9                  JP   (ix)   
064A                NULL1:       
064A                FALSE1:      
064A   21 00 00               LD   hl,FALSE   
064D   E5                     PUSH   hl   
064E   DD E9                  JP   (ix)   
0650                             ; execute a block of code which ends with }
0650                             ; creates a root scope if BP == stack
0650                             ; else uses outer scope
0650                CARET:       
0650                GO:          
0650   D1                     POP   de   ; de = block*
0651                GO1:         
0651   7B                     LD   a,e   ; if block* == null, exit
0652   B2                     OR   d   
0653   20 02                  JR   nz,go2   
0655   DD E9                  JP   (ix)   
0657                GO2:         
0657   1A                     LD   a,(de)   
0658   FE 7B                  CP   "{"   
065A   28 07                  JR   z,goBlock1   
065C   FE 28                  CP   "("   
065E   C2 96 06               JP   nz,goLambda   
0661   13                     INC   de   ; de is the address to jump back to
0662   D5                     PUSH   de   ; push de just before stack frame
0663                GOBLOCK:      
0663                GOBLOCK1:      
0663   ED 53 FE 4C            LD   (vTemp1),de   ; save de
0667   21 00 4A               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
066A   FD 54                  LD   d,iyh   
066C   FD 5D                  LD   e,iyl   
066E   B7                     OR   a   ; if stack* == BP then this is the root_scope
066F   ED 52                  SBC   hl,de   
0671   ED 5B FE 4C            LD   de,(vTemp1)   ; restore de
0675   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0676   B4                     OR   h   
0677   3E 00                  LD   a,0   
0679   28 70                  JR   z,goLambda8   
067B   C5                     PUSH   bc   ; push IP
067C   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
067F   FD 46 05               LD   b,(iy+5)   
0682   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0685   FD 66 03               LD   h,(iy+3)   
0688                GOBLOCK2:      
0688   C5                     PUSH   bc   ; arg_list*
0689   E5                     PUSH   hl   ; first_arg*
068A   FD E5                  PUSH   iy   ; push BP
068C   FD 21 00 00            LD   iy,0   ; BP = SP
0690   FD 39                  ADD   iy,sp   
0692   42 4B                  LD   bc,de   ; bc = de = block*-1
0694   DD E9                  JP   (ix)   
0696                GOLAMBDA:      ; execute lambda
0696   EB                     EX   de,hl   ; hl = lambda*
0697   5E                     LD   e,(hl)   ; de = partial_array*
0698   23                     INC   hl   
0699   56                     LD   d,(hl)   
069A   23                     INC   hl   
069B   7B                     LD   a,e   ; if partial_array* == null skip
069C   B2                     OR   d   
069D   28 25                  JR   z,goLambda3   
069F   ED 43 FE 4C            LD   (vTemp1),bc   
06A3   22 00 4D               LD   (vTemp2),hl   ; save bc,hl
06A6   EB                     EX   de,hl   ; hl = partial_array*
06A7   2B                     DEC   hl   ; skip type byte
06A8   2B                     DEC   hl   ; skip magic byte
06A9   2B                     DEC   hl   ; bc = count
06AA   46                     LD   b,(hl)   
06AB   2B                     DEC   hl   
06AC   4E                     LD   c,(hl)   
06AD   23                     INC   hl   ; hl = array data*
06AE   23                     INC   hl   
06AF   23                     INC   hl   
06B0   23                     INC   hl   
06B1   18 06                  JR   goLambda2   ; push each item on stack
06B3                GOLAMBDA1:      
06B3   5E                     LD   e,(hl)   ; de = partial item
06B4   23                     INC   hl   
06B5   56                     LD   d,(hl)   
06B6   23                     INC   hl   
06B7   D5                     PUSH   de   ; push on stack
06B8   0B                     DEC   bc   
06B9                GOLAMBDA2:      
06B9   79                     LD   a,c   ; if count != 0 then loop
06BA   B0                     OR   b   
06BB   20 F6                  JR   nz,goLambda1   
06BD   ED 4B FE 4C            LD   bc,(vTemp1)   ; restore bc
06C1   2A 00 4D               LD   hl,(vTemp2)   ; restore hl
06C4                GOLAMBDA3:      
06C4   5E                     LD   e,(hl)   ; de = block*
06C5   23                     INC   hl   
06C6   56                     LD   d,(hl)   
06C7   23                     INC   hl   
06C8   ED 53 FE 4C            LD   (vTemp1),de   ; save block*
06CC   5E                     LD   e,(hl)   ; de = arg_list*
06CD   23                     INC   hl   
06CE   56                     LD   d,(hl)   
06CF   23                     INC   hl   
06D0   EB                     EX   de,hl   ; hl = arg_list*
06D1   ED 5B FE 4C            LD   de,(vTemp1)   ; restore de = block*
06D5   7D                     LD   a,l   ; if arg_list* == null a = 0
06D6   B4                     OR   h   
06D7   20 03                  JR   nz,goLambda4   
06D9   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06DA   18 0F                  JR   goLambda8   
06DC                GOLAMBDA4:      ; allocate locals
06DC   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06DD   7E                     LD   a,(hl)   
06DE   18 03                  JR   goLambda6   
06E0                GOLAMBDA5:      ; loop
06E0   3B                     DEC   sp   
06E1   3B                     DEC   sp   
06E2   3D                     DEC   a   
06E3                GOLAMBDA6:      
06E3   B7                     OR   a   
06E4   20 FA                  JR   nz,goLambda5   ; end loop
06E6                GOLAMBDA7:      
06E6   2B                     DEC   hl   ; a = num_args* x 2
06E7   7E                     LD   a,(hl)   
06E8   23                     INC   hl   
06E9   23                     INC   hl   
06EA   87                     ADD   a,a   ; a *= 2
06EB                GOLAMBDA8:      
06EB   C5                     PUSH   bc   ; push IP
06EC   44 4D                  LD   bc,hl   
06EE   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06F1   85                     ADD   a,l   
06F2   6F                     LD   l,a   
06F3   39                     ADD   hl,sp   
06F4   18 92                  JR   goBlock2   
06F6                HASH:        
06F6                HEXNUM:      
06F6   21 00 00               LD   hl,0   ; Clear hl to accept the number
06F9                HEXNUM1:      
06F9   03                     INC   bc   
06FA   0A                     LD   a,(bc)   ; Get the character which is a numeral
06FB   CB 77                  BIT   6,a   ; is it uppercase alpha?
06FD   28 02                  JR   z,hexnum2   ; no a decimal
06FF   D6 07                  SUB   7   ; sub 7  to make $a - $F
0701                HEXNUM2:      
0701   D6 30                  SUB   $30   ; form decimal digit
0703   DA 81 07               JP   c,num2   
0706   FE 10                  CP   $0F+1   
0708   D2 81 07               JP   nc,num2   
070B   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
070C   29                     ADD   hl,hl   ; 4X
070D   29                     ADD   hl,hl   ; 8X
070E   29                     ADD   hl,hl   ; 16X
070F   85                     ADD   a,l   ; add into bottom of hl
0710   6F                     LD   l,a   
0711   18 E6                  JR   hexnum1   
0713                UPCASE:      
0713   0A                     LD   a,(bc)   ; a = identifier char
0714   D6 41                  SUB   "A"   ; "A" = 0
0716   18 05                  JR   ident1   
0718                LOWCASE:      
0718   0A                     LD   a,(bc)   
0719   D6 61                  SUB   "a"   
071B   C6 1A                  ADD   a,26   
071D                IDENT1:      
071D   87                     ADD   a,a   ; l = a * 2
071E   6F                     LD   l,a   
071F   26 4C                  LD   h,msb(vars)   
0721   22 F2 4C               LD   (vPointer),hl   ; store address in setter
0724   5E                     LD   e,(hl)   
0725   23                     INC   hl   
0726   56                     LD   d,(hl)   
0727   D5                     PUSH   de   
0728   DD E9                  JP   (ix)   
072A                             ; if
072A                             ; condition then -- value
072A                QUESTION:      
072A                IF:          
072A   03                     INC   bc   
072B   0A                     LD   a,(bc)   
072C   FE 3F                  CP   "?"   
072E   28 06                  JR   z,ifte   
0730   0B                     DEC   bc   
0731   11 00 00               LD   de,NUL   ; NUL pointer for else
0734   18 01                  JR   ifte1   
0736                             ; ifte
0736                             ; condition then else -- value
0736                IFTE:        
0736   D1                     POP   de   ; de = else
0737                IFTE1:       
0737   E1                     POP   hl   ; hl = then
0738   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0739   7C                     LD   a,h   
073A   B5                     OR   l   
073B   E1                     POP   hl   ; hl = then
073C   CA 51 06               JP   z,go1   ; if z de = else
073F   EB                     EX   de,hl   ; condition = false, de = then
0740   C3 51 06               JP   go1   
0743                STAR:        
0743                MUL:         
0743   D1                     POP   de   ; get first value
0744   E1                     POP   hl   
0745                MUL2:        
0745   C5                     PUSH   bc   ; Preserve the IP
0746   44 4D                  LD   bc,hl   ; bc = 2nd value
0748   21 00 00               LD   hl,0   
074B   3E 10                  LD   a,16   
074D                MUL3:        
074D   29                     ADD   hl,hl   
074E   CB 13                  RL   e   
0750   CB 12                  RL   d   
0752   30 04                  JR   nc,$+6   
0754   09                     ADD   hl,bc   
0755   30 01                  JR   nc,$+3   
0757   13                     INC   de   
0758   3D                     DEC   a   
0759   20 F2                  JR   nz,mul3   
075B   C1                     POP   bc   ; Restore the IP
075C   C3 96 03               JP   add3   
075F                NUM:         
075F   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0762   0A                     LD   a,(bc)   ; Get numeral or -
0763   FE 2D                  CP   "-"   
0765   20 01                  JR   nz,num0   
0767   03                     INC   bc   ; move to next char, no flags affected
0768                NUM0:        
0768   08                     EX   af,af'   ; save zero flag = 0 for later
0769                NUM1:        
0769   0A                     LD   a,(bc)   ; read digit
076A   D6 30                  SUB   "0"   ; less than 0?
076C   38 13                  JR   c,num2   ; not a digit, exit loop
076E   FE 0A                  CP   10   ; greater that 9?
0770   30 0F                  JR   nc,num2   ; not a digit, exit loop
0772   03                     INC   bc   ; inc IP
0773   54 5D                  LD   de,hl   ; multiply hl * 10
0775   29                     ADD   hl,hl   
0776   29                     ADD   hl,hl   
0777   19                     ADD   hl,de   
0778   29                     ADD   hl,hl   
0779   85                     ADD   a,l   ; add digit in a to hl
077A   6F                     LD   l,a   
077B   3E 00                  LD   a,0   
077D   8C                     ADC   a,h   
077E   67                     LD   h,a   
077F   18 E8                  JR   num1   
0781                NUM2:        
0781   0B                     DEC   bc   
0782   08                     EX   af,af'   ; restore zero flag
0783   20 07                  JR   nz,num3   
0785   EB                     EX   de,hl   ; negate the value of hl
0786   21 00 00               LD   hl,0   
0789   B7                     OR   a   ; jump to sub2
078A   ED 52                  SBC   hl,de   
078C                NUM3:        
078C   E5                     PUSH   hl   ; Put the number on the stack
078D   DD E9                  JP   (ix)   ; and process the next character
078F                UNDERSCORE:      
078F                REMAIN:      
078F   2A F4 4C               LD   hl,(vRemain)   
0792   E5                     PUSH   hl   
0793   DD E9                  JP   (ix)   
0795                RPAREN:      
0795   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0798   FD 46 09               LD   b,(iy+9)   
079B   DD E9                  JP   (ix)   
079D                             ; arg_list* block* -- ptr
079D                SEMICOLON:      
079D   D1                     POP   de   ; de = block* hl = heap*
079E   2A F0 4C               LD   hl,(vHeapPtr)   
07A1   AF                     XOR   a   
07A2   77                     LD   (hl),a   ; compile null partial_array*
07A3   23                     INC   hl   
07A4   77                     LD   (hl),a   
07A5   23                     INC   hl   
07A6   73                     LD   (hl),e   ; compile block*
07A7   23                     INC   hl   
07A8   72                     LD   (hl),d   
07A9   23                     INC   hl   
07AA   D1                     POP   de   ; de = block*
07AB   73                     LD   (hl),e   ; compile arg_list*
07AC   23                     INC   hl   
07AD   72                     LD   (hl),d   
07AE   23                     INC   hl   
07AF   ED 5B F0 4C            LD   de,(vHeapPtr)   ; return lambda*
07B3   D5                     PUSH   de   
07B4   22 F0 4C               LD   (vHeapPtr),hl   ; heap* += 4
07B7   DD E9                  JP   (ix)   
07B9                             ; shiftLeft
07B9                             ; value count -- value2          shift left count places
07B9                SHIFTLEFT:      
07B9   50 59                  LD   de,bc   ; save IP
07BB   C1                     POP   bc   ; bc = count
07BC   41                     LD   b,c   ; b = loop counter
07BD   E1                     POP   hl   
07BE   04                     INC   b   ; test for counter=0 case
07BF   18 01                  JR   shiftLeft2   
07C1                SHIFTLEFT1:      
07C1   29                     ADD   hl,hl   ; left shift hl
07C2                SHIFTLEFT2:      
07C2   10 FD                  DJNZ   shiftLeft1   
07C4   E5                     PUSH   hl   
07C5   42 4B                  LD   bc,de   ; restore IP
07C7   DD E9                  JP   (ix)   
07C9                             ; shiftRight
07C9                             ; value count -- value2          shift left count places
07C9                SHIFTRIGHT:      
07C9   50 59                  LD   de,bc   ; save IP
07CB   C1                     POP   bc   ; bc = count
07CC   41                     LD   b,c   ; b = loop counter
07CD   E1                     POP   hl   
07CE   04                     INC   b   ; test for counter=0 case
07CF   18 04                  JR   shiftRight2   
07D1                SHIFTRIGHT1:      
07D1   CB 3C                  SRL   h   ; right shift hl
07D3   CB 1D                  RR   l   
07D5                SHIFTRIGHT2:      
07D5   10 FA                  DJNZ   shiftRight1   
07D7   E5                     PUSH   hl   
07D8   42 4B                  LD   bc,de   ; restore IP
07DA   DD E9                  JP   (ix)   
07DC                             ; string
07DC                             ; -- ptr                        ; points to start of string chars,
07DC                             ; length is stored at start - 2 bytes
07DC                DBLQUOTE:      
07DC                STRING:      
07DC   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap*
07DF   23                     INC   hl   ; skip length field to start
07E0   23                     INC   hl   
07E1   E5                     PUSH   hl   ; save start of string
07E2   03                     INC   bc   ; point to next char
07E3   18 03                  JR   string2   
07E5                STRING1:      
07E5   77                     LD   (hl),a   
07E6   23                     INC   hl   ; increase count
07E7   03                     INC   bc   ; point to next char
07E8                STRING2:      
07E8   0A                     LD   a,(bc)   
07E9   FE 22                  CP   DQUOTE   ; " is the string terminator
07EB   28 04                  JR   z,string3   
07ED   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07EF   20 F4                  JR   nz,string1   
07F1                STRING3:      
07F1   AF                     XOR   a   ; write NUL to terminate string
07F2   77                     LD   (hl),a   ; hl = end of string
07F3   23                     INC   hl   
07F4   22 F0 4C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07F7   2B                     DEC   hl   ; hl = end of string without terminator
07F8   D1                     POP   de   ; de = start of string
07F9   D5                     PUSH   de   ; return start of string
07FA   B7                     OR   a   ; hl = length bytes, de = start of string
07FB   ED 52                  SBC   hl,de   
07FD   EB                     EX   de,hl   
07FE   2B                     DEC   hl   ; write length bytes to length field at start - 2
07FF   72                     LD   (hl),d   
0800   2B                     DEC   hl   
0801   73                     LD   (hl),e   
0802   DD E9                  JP   (ix)   
0804                MINUS:       ; negative sign or subtract
0804   03                     INC   bc   ; check if sign of a number
0805   0A                     LD   a,(bc)   
0806   0B                     DEC   bc   
0807   FE 30                  CP   "0"   
0809   38 05                  JR   c,sub   
080B   FE 3A                  CP   "9"+1   
080D   DA 3E 03               JP   c,num_   
0810                SUB:         ; Subtract the value 2nd on stack from top of stack
0810   03                     INC   bc   
0811   FE 2D                  CP   "-"   
0813   20 05                  JR   nz,sub1   
0815   E1                     POP   hl   
0816   2B                     DEC   hl   
0817   C3 8C 04               JP   assign0   
081A                SUB1:        
081A   0B                     DEC   bc   
081B   D1                     POP   de   
081C   E1                     POP   hl   
081D   B7                     OR   a   
081E   ED 52                  SBC   hl,de   
0820   C3 96 03               JP   add3   
0823                ERROR1:      
0823   21 01 00               LD   hl,1   ; error 1: unknown command
0826   E5                     PUSH   hl   
0827   C3 0F 0C               JP   error   
082A                COMMENT:      
082A   03                     INC   bc   ; point to next char
082B   0A                     LD   a,(bc)   
082C   FE 20                  CP   " "   ; terminate on any char less than SP
082E   30 FA                  JR   nc,comment   
0830   0B                     DEC   bc   
0831   DD E9                  JP   (ix)   
0833                COMMAND_A:      
0833   CD DC 0A               CALL   jumpTable   
0836   62                     DB   "b"   
0837   3F 08                  DW   absolute   
0839   64                     DB   "d"   
083A   4C 08                  DW   addrOf   
083C   00                     DB   NUL   
083D   23 08                  DW   error1   
083F                             ; /ab absolute
083F                             ; num -- num
083F                ABSOLUTE:      
083F   E1                     POP   hl   
0840   CB 7C                  BIT   7,h   
0842   C8                     RET   z   
0843   AF                     XOR   a   
0844   95                     SUB   l   
0845   6F                     LD   l,a   
0846   9F                     SBC   a,a   
0847   94                     SUB   h   
0848   67                     LD   h,a   
0849   E5                     PUSH   hl   
084A   DD E9                  JP   (ix)   
084C                             ; /ad addrOf
084C                             ; char -- addr
084C                ADDROF:      
084C   E1                     POP   hl   ; a = char
084D   7D                     LD   a,l   
084E   FE 7B                  CP   "z"+1   ; if a > z then exit
0850   30 19                  JR   nc,addrOf2   
0852   D6 41                  SUB   "A"   ; a - 65
0854   38 15                  JR   c,addrOf2   ; if < A then exit
0856   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0858   38 06                  JR   c,addrOf1   
085A   D6 06                  SUB   "a"-("Z"+1)   
085C   FE 1A                  CP   "Z"-"A"+1   
085E   38 0B                  JR   c,addrOf2   ; if < a then exit
0860                ADDROF1:      
0860   87                     ADD   a,a   ; double a
0861   21 00 4C               LD   hl,VARS   ; hl = VARS + a
0864   85                     ADD   a,l   
0865   6F                     LD   l,a   
0866   3E 00                  LD   a,0   
0868   8C                     ADC   a,h   
0869   67                     LD   h,a   
086A   E5                     PUSH   hl   
086B                ADDROF2:      
086B   DD E9                  JP   (ix)   
086D                COMMAND_B:      
086D   CD DC 0A               CALL   jumpTable   
0870   61                     DB   "a"   
0871   85 08                  DW   bufferArray   
0873   63                     DB   "c"   
0874   92 09                  DW   bufferChar   
0876   6E                     DB   "n"   
0877   B9 08                  DW   bufferNumber   
0879   72                     DB   "r"   
087A   5E 09                  DW   break   
087C   73                     DB   "s"   
087D   78 09                  DW   bufferString   
087F   78                     DB   "x"   
0880   97 09                  DW   bufferXChars   
0882   00                     DB   NUL   
0883   23 08                  DW   error1   
0885                             ; /ba buffer array
0885                             ; array* --
0885                BUFFERARRAY:      
0885   CD 50 06               CALL   go   
0888   00 00                  DW   NUL   ; NUL closure
088A   8E 08                  DW   $+4   
088C   C2 0A                  DW   args1A2L   
088E   7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2F 62 64 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 00 .CSTR   "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}"   ; block
08B9                             ; /bd buffer decimal
08B9                             ; value --
08B9                BUFFERNUMBER:      
08B9   3A E8 4C               LD   a,(vNumBase)   
08BC   FE 10                  CP   16   
08BE   28 66                  JR   z,bufferHex   ; else falls through
08C0                             ; /bd buffer decimal
08C0                             ; value --
08C0                BUFFERDEC:      
08C0   ED 5B EC 4C            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08C4   D9                     EXX      
08C5   E1                     POP   hl   ; hl = value
08C6   CD DA 08               CALL   bufferDec0   
08C9   D9                     EXX      ; de = buffer*' bc = IP
08CA   3E 20                  LD   a," "   ; append space to buffer
08CC   12                     LD   (de),a   
08CD   1C                     INC   e   ; buffer*++, wraparound
08CE   CC C5 0A               CALL   z,flushBuffer   
08D1   2A EC 4C               LD   hl,(vBufPtr)   ; hl = buffer*
08D4   ED 53 EC 4C            LD   (vBufPtr),de   ; update buffer* with buffer*'
08D8   DD E9                  JP   (ix)   
08DA                             ; hl = value
08DA                             ; de' = buffer*
08DA                             ; a, bc, de, hl destroyed
08DA                BUFFERDEC0:      
08DA   CB 7C                  BIT   7,h   
08DC   28 0C                  JR   z,bufferDec1   
08DE   D9                     EXX      
08DF   3E 2D                  LD   a,"-"   
08E1   12                     LD   (de),a   
08E2   13                     INC   de   
08E3   D9                     EXX      
08E4   AF                     XOR   a   
08E5   95                     SUB   l   
08E6   6F                     LD   l,a   
08E7   9F                     SBC   a,a   
08E8   94                     SUB   h   
08E9   67                     LD   h,a   
08EA                BUFFERDEC1:      
08EA   0E 00                  LD   c,0   ; leading zeros flag = false
08EC   11 F0 D8               LD   de,-10000   
08EF   CD 0A 09               CALL   bufferDec2   
08F2   11 18 FC               LD   de,-1000   
08F5   CD 0A 09               CALL   bufferDec2   
08F8   11 9C FF               LD   de,-100   
08FB   CD 0A 09               CALL   bufferDec2   
08FE   1E F6                  LD   e,-10   
0900   CD 0A 09               CALL   bufferDec2   
0903   0C                     INC   c   ; flag = true for at least digit
0904   1E FF                  LD   e,-1   
0906   CD 0A 09               CALL   bufferDec2   
0909   C9                     RET      
090A                BUFFERDEC2:      
090A   06 2F                  LD   b,"0"-1   
090C                BUFFERDEC3:      
090C   04                     INC   b   
090D   19                     ADD   hl,de   
090E   38 FC                  JR   c,bufferDec3   
0910   ED 52                  SBC   hl,de   
0912   3E 30                  LD   a,"0"   
0914   B8                     CP   b   
0915   20 05                  JR   nz,bufferDec4   
0917   AF                     XOR   a   
0918   B1                     OR   c   
0919   C8                     RET   z   
091A   18 01                  JR   bufferDec5   
091C                BUFFERDEC4:      
091C   0C                     INC   c   
091D                BUFFERDEC5:      
091D   78                     LD   a,b   
091E   D9                     EXX      
091F   12                     LD   (de),a   
0920   1C                     INC   e   
0921   CC C5 0A               CALL   z,flushBuffer   
0924   D9                     EXX      
0925   C9                     RET      
0926                             ; /bh buffer hex
0926                             ; value --
0926                BUFFERHEX:      
0926   E1                     POP   hl   ; hl = value
0927   ED 5B EC 4C            LD   de,(vBufPtr)   
092B   3E 23                  LD   a,"#"   ; # prefix
092D   12                     LD   (de),a   
092E   1C                     INC   e   ; buffer*++, wraparound
092F   CC C5 0A               CALL   z,flushBuffer   
0932   7C                     LD   a,h   
0933   CD 47 09               CALL   bufferHex1   
0936   7D                     LD   a,l   
0937   CD 47 09               CALL   bufferHex1   
093A   3E 20                  LD   a," "   ; append space to buffer
093C   12                     LD   (de),a   
093D   1C                     INC   e   ; buffer*++, wraparound
093E   CC C5 0A               CALL   z,flushBuffer   
0941   ED 53 EC 4C            LD   (vBufPtr),de   
0945   DD E9                  JP   (ix)   
0947                BUFFERHEX1:      
0947   F5                     PUSH   af   
0948   1F                     RRA      
0949   1F                     RRA      
094A   1F                     RRA      
094B   1F                     RRA      
094C   CD 50 09               CALL   bufferHex2   
094F   F1                     POP   af   
0950                BUFFERHEX2:      
0950   E6 0F                  AND   0x0F   
0952   C6 90                  ADD   a,0x90   
0954   27                     DAA      
0955   CE 40                  ADC   a,0x40   
0957   27                     DAA      
0958   12                     LD   (de),a   
0959   1C                     INC   e   ; buffer*++, wraparound
095A   CC C5 0A               CALL   z,flushBuffer   
095D   C9                     RET      
095E                             ; /br break from loop
095E                             ; --
095E                BREAK:       
095E   E1                     POP   hl   
095F   7D                     LD   a,l   
0960   B4                     OR   h   
0961   28 02                  JR   z,break1   
0963   DD E9                  JP   (ix)   
0965                BREAK1:      
0965   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0967   FD 54                  LD   d,iyh   
0969   21 08 00               LD   hl,8   
096C   19                     ADD   hl,de   
096D   23                     INC   hl   
096E   23                     INC   hl   
096F   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0972   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0975   C3 3B 05               JP   blockEnd   
0978                             ; /bs buffered string
0978                             ; string* --
0978                BUFFERSTRING:      
0978   E1                     POP   hl   ; hl = string*
0979   ED 5B EC 4C            LD   de,(vBufPtr)   ; de = buffer*
097D   18 06                  JR   bufferString1   
097F                BUFFERSTRING0:      
097F   12                     LD   (de),a   ; a -> buffer*
0980   1C                     INC   e   ; buffer*++, wraparound
0981   CC C5 0A               CALL   z,flushBuffer   
0984   23                     INC   hl   
0985                BUFFERSTRING1:      
0985   7E                     LD   a,(hl)   ; a <- string*
0986   B7                     OR   a   ; if NUL exit loop
0987   20 F6                  JR   nz,bufferString0   
0989   2A EC 4C               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
098C   ED 53 EC 4C            LD   (vBufPtr),de   ; save buffer*' in pointer
0990   DD E9                  JP   (ix)   
0992                             ; /bc buffer char
0992                             ; char --
0992                BUFFERCHAR:      
0992   21 01 00               LD   hl,1   
0995   18 01                  JR   bufferXChars0   
0997                             ; /bx buffered x chars
0997                             ; char length --
0997                BUFFERXCHARS:      
0997   E1                     POP   hl   ; hl = length
0998                BUFFERXCHARS0:      
0998   D1                     POP   de   ; a' = char
0999   7B                     LD   a,e   
099A   08                     EX   af,af'   
099B   ED 5B EC 4C            LD   de,(vBufPtr)   ; de = buffer*
099F   18 08                  JR   bufferXChars2   
09A1                BUFFERXCHARS1:      
09A1   08                     EX   af,af'   
09A2   12                     LD   (de),a   
09A3   08                     EX   af,af'   
09A4   1C                     INC   e   ; buffer*++, wraparound
09A5   CC C5 0A               CALL   z,flushBuffer   
09A8   2B                     DEC   hl   
09A9                BUFFERXCHARS2:      
09A9   7D                     LD   a,l   
09AA   B4                     OR   h   
09AB   20 F4                  JR   nz,bufferXChars1   
09AD   ED 53 EC 4C            LD   (vBufPtr),de   ; save buffer*'
09B1   DD E9                  JP   (ix)   
09B3                COMMAND_I:      
09B3   CD DC 0A               CALL   jumpTable   
09B6   6E                     DB   "n"   
09B7   8D 0A                  DW   input   
09B9   76                     DB   "v"   
09BA   C2 03                  DW   invert   
09BC   00                     DB   NUL   
09BD   23 08                  DW   error1   
09BF                COMMAND_P:      
09BF   CD DC 0A               CALL   jumpTable   
09C2   61                     DB   "a"   
09C3   D1 09                  DW   partial   
09C5   62                     DB   "b"   
09C6   F1 09                  DW   printBuffer   
09C8   63                     DB   "c"   
09C9   14 0A                  DW   printChars   
09CB   6B                     DB   "k"   
09CC   26 0A                  DW   printStack   
09CE   00                     DB   NUL   
09CF   23 08                  DW   error1   
09D1                             ; partial
09D1                             ; array* lambda* -- lambda1*
09D1                PARTIAL:      
09D1   E1                     POP   hl   ; h1 = lambda*
09D2   ED 5B F0 4C            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09D6   ED 43 FE 4C            LD   (vTemp1),bc   ; save IP
09DA   01 06 00               LD   bc,6   ; bc = count
09DD   ED B0                  LDIR      ; clone lambda
09DF   ED 4B FE 4C            LD   bc,(vTemp1)   ; restore IP
09E3   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09E6   ED 53 F0 4C            LD   (vHeapPtr),de   ; heap* += 6
09EA   D1                     POP   de   ; de = array*
09EB   E5                     PUSH   hl   ; return partial_array*
09EC   73                     LD   (hl),e   ; compile array*
09ED   23                     INC   hl   
09EE   72                     LD   (hl),d   
09EF   DD E9                  JP   (ix)   
09F1                             ; /pb printBuffer
09F1                             ; --
09F1                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
09F1                PRINTBUFFER:      
09F1   CD 50 06               CALL   go   
09F4   00 00                  DW   NUL   ; NUL closure
09F6   FA 09                  DW   $+4   
09F8   B7 0A                  DW   args1A0L   
09FA   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A14                             ; printChars
0A14                             ; char* len --
0A14                PRINTCHARS:      
0A14   E1                     POP   hl   ; hl = count
0A15   D1                     POP   de   ; de = char*
0A16   CD 21 0A               CALL   printChars2   
0A19   DD E9                  JP   (ix)   
0A1B                PRINTCHARS1:      
0A1B   1A                     LD   a,(de)   ; print char at char*
0A1C   CD 85 00               CALL   putchar   
0A1F   13                     INC   de   ; char*++
0A20   2B                     DEC   hl   ; count--
0A21                PRINTCHARS2:      
0A21   7D                     LD   a,l   ; count == 0?
0A22   B4                     OR   h   
0A23   C8                     RET   z   
0A24   18 F5                  JR   printChars1   ; if not loop
0A26                             ; /pk print stack
0A26                             ; --
0A26                PRINTSTACK:      
0A26                             ;     ld (vTemp1),bc
0A26                             ;     call printStr
0A26                             ;     .cstr "=> "
0A26                             ;     ld hl,STACK
0A26                             ;     sbc hl,sp
0A26                             ;     srl h
0A26                             ;     rr l
0A26                             ;     ld bc,hl
0A26                             ;     ld hl,STACK
0A26                             ;     jr printStack2
0A26                             ; printStack1:
0A26                             ;     dec bc
0A26                             ;     dec hl
0A26                             ;     ld d,(hl)
0A26                             ;     dec hl
0A26                             ;     ld e,(hl)
0A26                             ;     ex de,hl
0A26                             ;     call prthex
0A26                             ;     ex de,hl
0A26                             ;     ld a," "
0A26                             ;     call putchar
0A26                             ; printStack2:
0A26                             ;     ld a,c
0A26                             ;     or b
0A26                             ;     jr nz,printStack1
0A26                             ;     call prompt
0A26                             ;     ld bc,(vTemp1)
0A26   DD E9                  JP   (ix)   
0A28                SIZE:        
0A28   E1                     POP   hl   
0A29   2B                     DEC   hl   ; skip magic byte
0A2A   2B                     DEC   hl   ; skip type tag
0A2B   2B                     DEC   hl   ; msb size
0A2C   56                     LD   d,(hl)   
0A2D   2B                     DEC   hl   ; lsb size
0A2E   5E                     LD   e,(hl)   
0A2F   D5                     PUSH   de   
0A30   DD E9                  JP   (ix)   
0A32                COMMAND_V:      
0A32   CD DC 0A               CALL   jumpTable   
0A35   62                     DB   "b"   
0A36   56 0A                  DW   varBufPtr   
0A38   68                     DB   "h"   
0A39   5F 0A                  DW   varHeapPtr   
0A3B   74                     DB   "t"   
0A3C   68 0A                  DW   varTIBPtr   
0A3E   42                     DB   "B"   
0A3F   47 0A                  DW   constBufStart   
0A41   54                     DB   "T"   
0A42   51 0A                  DW   constTIBStart   
0A44   00                     DB   NUL   
0A45   23 08                  DW   error1   
0A47                CONSTBUFSTART:      
0A47   11 00 4B               LD   de,BUF   
0A4A   18 28                  JR   constant   
0A4C                CONSTHEAPSTART:      
0A4C   11 08 4D               LD   de,HEAP   
0A4F   18 23                  JR   constant   
0A51                CONSTTIBSTART:      
0A51   11 00 4A               LD   de,TIB   
0A54   18 1E                  JR   constant   
0A56                VARBUFPTR:      
0A56   ED 5B EC 4C            LD   de,(vBufPtr)   
0A5A   21 EC 4C               LD   hl,vBufPtr   
0A5D   18 12                  JR   variable   
0A5F                VARHEAPPTR:      
0A5F   ED 5B F0 4C            LD   de,(vHeapPtr)   
0A63   21 F0 4C               LD   hl,vHeapPtr   
0A66   18 09                  JR   variable   
0A68                VARTIBPTR:      
0A68   ED 5B EA 4C            LD   de,(vTIBPtr)   
0A6C   21 EA 4C               LD   hl,vTIBPtr   
0A6F   18 00                  JR   variable   
0A71                VARIABLE:      
0A71   22 F2 4C               LD   (vPointer),hl   
0A74                CONSTANT:      
0A74   D5                     PUSH   de   
0A75   DD E9                  JP   (ix)   
0A77                CHARS:       
0A77   21 01 00               LD   hl,1   
0A7A                CHARS1:      
0A7A   22 E6 4C               LD   (vDataWidth),hl   
0A7D   DD E9                  JP   (ix)   
0A7F                DECIMAL:      
0A7F   21 0A 00               LD   hl,10   
0A82                DECIMAL1:      
0A82   22 E8 4C               LD   (vNumBase),hl   
0A85   DD E9                  JP   (ix)   
0A87                HEXADECIMAL:      
0A87   21 10 00               LD   hl,16   
0A8A   C3 82 0A               JP   decimal1   
0A8D                             ; Z80 port input
0A8D                             ; port -- value
0A8D                INPUT:       
0A8D   E1                     POP   hl   
0A8E   59                     LD   e,c   ; save IP
0A8F   4D                     LD   c,l   
0A90   ED 68                  IN   l,(c)   
0A92   26 00                  LD   h,0   
0A94   4B                     LD   c,e   ; restore IP
0A95   E5                     PUSH   hl   
0A96   DD E9                  JP   (ix)   
0A98                KEY:         
0A98   CD 81 00               CALL   getchar   
0A9B   26 00                  LD   h,0   
0A9D   6F                     LD   l,a   
0A9E   E5                     PUSH   hl   
0A9F   DD E9                  JP   (ix)   
0AA1                             ; Z80 port output
0AA1                             ; value port --
0AA1                OUTPUT:      
0AA1   E1                     POP   hl   
0AA2   59                     LD   e,c   ; save IP
0AA3   4D                     LD   c,l   
0AA4   E1                     POP   hl   
0AA5   ED 69                  OUT   (c),l   
0AA7   4B                     LD   c,e   ; restore IP
0AA8   DD E9                  JP   (ix)   
0AAA                NUMBERS:      
0AAA   21 02 00               LD   hl,2   
0AAD   C3 7A 0A               JP   chars1   
0AB0                             ; 
0AB0                             ; 
0AB0                             ; 
0AB0                             ; 
0AB0                FILTER:      
0AB0                MAP:         
0AB0                SCAN:        
0AB0   DD E9                  JP   (ix)   
0AB2                             ;*******************************************************************
0AB2                             ; reusable arglists
0AB2                             ;*******************************************************************
0AB2                ARGS0A1L_:      ; zero args one local
0AB2   01                     DB   1   ; num args + locals
0AB3   01                     DB   1   ; num locals
0AB4                ARGS0A1L:      
0AB4   61                     DB   "a"   
0AB5                ARGS1A0L_:      ; one arg zero locals
0AB5   01                     DB   1   ; num args + locals
0AB6   00                     DB   0   ; num locals
0AB7                ARGS1A0L:      
0AB7   61                     DB   "a"   
0AB8                ARGS1A1L_:      ; one arg one local
0AB8   02                     DB   2   ; num args + locals
0AB9   01                     DB   1   ; num locals
0ABA                ARGS1A1L:      
0ABA   61 62                  DB   "ab"   
0ABC                ARGS2A0L_:      ; two args zero locals
0ABC   02                     DB   2   ; num args + locals
0ABD   00                     DB   0   ; num locals
0ABE                ARGS2A0L:      
0ABE   61 62                  DB   "ab"   
0AC0                ARGS1A2L_:      ; one arg two locals
0AC0   03                     DB   3   ; num args + locals
0AC1   02                     DB   2   ; num locals
0AC2                ARGS1A2L:      
0AC2   61 62 63               DB   "abc"   
0AC5                             ;*******************************************************************
0AC5                             ; general routines
0AC5                             ;*******************************************************************
0AC5                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0AC5                FLUSHBUFFER:      
0AC5   F5                     PUSH   af   
0AC6   D5                     PUSH   de   
0AC7   E5                     PUSH   hl   
0AC8   2A EC 4C               LD   hl,(vBufPtr)   
0ACB   11 00 4B               LD   de,BUF   
0ACE   ED 53 EC 4C            LD   (vBufPtr),de   
0AD2   B7                     OR   a   
0AD3   ED 52                  SBC   hl,de   
0AD5   CD 21 0A               CALL   printChars2   
0AD8   E1                     POP   hl   
0AD9   D1                     POP   de   
0ADA   F1                     POP   af   
0ADB   C9                     RET      
0ADC                             ; followed by a table
0ADC                             ; db char
0ADC                             ; dw addr
0ADC                             ; the final item must have char == NUL
0ADC                JUMPTABLE:      
0ADC   03                     INC   bc   
0ADD   E1                     POP   hl   
0ADE                JUMPTABLE0:      
0ADE   AF                     XOR   a   
0ADF   BE                     CP   (hl)   
0AE0   28 09                  JR   z,jumpTable1   
0AE2   0A                     LD   a,(bc)   
0AE3   BE                     CP   (hl)   
0AE4   28 06                  JR   z,jumpTable2   
0AE6   23                     INC   hl   
0AE7   23                     INC   hl   
0AE8   23                     INC   hl   
0AE9   18 F3                  JR   jumpTable0   
0AEB                JUMPTABLE1:      
0AEB   0B                     DEC   bc   
0AEC                JUMPTABLE2:      
0AEC   23                     INC   hl   
0AED   5E                     LD   e,(hl)   
0AEE   23                     INC   hl   
0AEF   56                     LD   d,(hl)   
0AF0   EB                     EX   de,hl   
0AF1   E9                     JP   (hl)   
0AF2                PRTSTR0:      
0AF2   CD 85 00               CALL   putchar   
0AF5   23                     INC   hl   
0AF6                PRTSTR:      
0AF6   7E                     LD   a,(hl)   
0AF7   B7                     OR   a   
0AF8   20 F8                  JR   nz,prtstr0   
0AFA   C9                     RET      
0AFB                             ; **************************************************************************
0AFB                             ; calculate nesting value
0AFB                             ; a is char to be tested,
0AFB                             ; e is the nesting value (initially 0)
0AFB                             ; e is increased by ( and [
0AFB                             ; e is decreased by ) and ]
0AFB                             ; e has its bit 7 toggled by `
0AFB                             ; limited to 127 levels
0AFB                             ; **************************************************************************
0AFB                NESTING:      
0AFB   FE 22                  CP   DQUOTE   ; quote char
0AFD   28 06                  JR   z,nesting0   
0AFF   FE 60                  CP   "`"   ; quote char
0B01   28 02                  JR   z,nesting0   
0B03   18 0A                  JR   nesting1   
0B05                NESTING0:      
0B05   CB 7B                  BIT   7,e   
0B07   28 03                  JR   z,nesting1a   
0B09   CB BB                  RES   7,e   
0B0B   C9                     RET      
0B0C                NESTING1A:      
0B0C   CB FB                  SET   7,e   
0B0E   C9                     RET      
0B0F                NESTING1:      
0B0F   CB 7B                  BIT   7,e   
0B11   C0                     RET   nz   
0B12   FE 7B                  CP   "{"   
0B14   28 08                  JR   z,nesting2   
0B16   FE 5B                  CP   "["   
0B18   28 04                  JR   z,nesting2   
0B1A   FE 28                  CP   "("   
0B1C   20 02                  JR   nz,nesting3   
0B1E                NESTING2:      
0B1E   1C                     INC   e   
0B1F   C9                     RET      
0B20                NESTING3:      
0B20   FE 7D                  CP   "}"   
0B22   28 07                  JR   z,nesting4   
0B24   FE 5D                  CP   "]"   
0B26   28 03                  JR   z,nesting4   
0B28   FE 29                  CP   ")"   
0B2A   C0                     RET   nz   
0B2B                NESTING4:      
0B2B   1D                     DEC   e   
0B2C   C9                     RET      
0B2D                PROMPT:      
0B2D   CD 3D 0B               CALL   printStr   
0B30   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B35   C9                     RET      
0B36                CRLF:        
0B36   CD 3D 0B               CALL   printStr   
0B39   0D 0A 00               .CSTR   "\r\n"   
0B3C   C9                     RET      
0B3D                             ; prints a null teminated string
0B3D                             ; the string should be immediately following the call
0B3D                PRINTSTR:      
0B3D   E3                     EX   (sp),hl   ; swap			
0B3E   CD F6 0A               CALL   prtstr   
0B41   23                     INC   hl   ; inc past NUL
0B42   E3                     EX   (sp),hl   ; put it back	
0B43   C9                     RET      
0B44                INIT:        
0B44   DD 2A EE 4C            LD   ix,(vNext)   
0B48   FD 21 00 4A            LD   iy,STACK   
0B4C   21 80 01               LD   hl,isysVars   
0B4F   11 E6 4C               LD   de,sysVars   
0B52   01 10 00               LD   bc,8 * 2   
0B55   ED B0                  LDIR      
0B57   21 00 4C               LD   hl,vars   ; 52 vars LO HI
0B5A   06 34                  LD   b,26*2   
0B5C   AF                     XOR   a   
0B5D                INIT0:       
0B5D   77                     LD   (hl),a   
0B5E   23                     INC   hl   
0B5F   10 FC                  DJNZ   init0   
0B61   C9                     RET      
0B62                START:       
0B62   31 00 4A               LD   sp,STACK   ; start Monty
0B65   CD 44 0B               CALL   init   ; setups
0B68   CD 3D 0B               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0B6B   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   $1b,"[2JMonty V0.0\r\n"   
0B7C                INTERPRET:      
0B7C   CD C5 0A               CALL   flushBuffer   
0B7F   CD 2D 0B               CALL   prompt   
0B82   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0B85   21 00 4A               LD   hl,TIB   
0B88   22 EA 4C               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0B8B                INTERPRET2:      ; calculate nesting
0B8B   1E 00                  LD   e,0   ; initilize nesting value
0B8D   C5                     PUSH   bc   ; save offset into TIB,
0B8E                             ; bc is also the count of chars in TIB
0B8E   21 00 4A               LD   hl,TIB   ; hl is start of TIB
0B91   18 06                  JR   interpret4   
0B93                INTERPRET3:      
0B93   7E                     LD   a,(hl)   ; a = char in TIB
0B94   23                     INC   hl   ; inc pointer into TIB
0B95   0B                     DEC   bc   ; dec count of chars in TIB
0B96   CD FB 0A               CALL   nesting   ; update nesting value
0B99                INTERPRET4:      
0B99   79                     LD   a,c   ; is count zero?
0B9A   B0                     OR   b   
0B9B   20 F6                  JR   nz,interpret3   ; if not loop
0B9D   C1                     POP   bc   ; restore offset into TIB
0B9E                INTERPRET5:      
0B9E   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BA1   FE 20                  CP   $20   ; compare to space
0BA3   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BA5   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BA7                             ; ???? NEEDED?
0BA7   28 3B                  JR   z,interpret8   
0BA9   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BAB   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BAD   FE 05                  CP   CTRL_E   
0BAF   CA 32 0C               JP   z,edit_   
0BB2   FE 08                  CP   CTRL_H   
0BB4   CA 22 0C               JP   z,backSpace_   
0BB7   FE 0A                  CP   CTRL_J   
0BB9   CA 4A 0C               JP   z,reEdit_   
0BBC   FE 13                  CP   CTRL_S   
0BBE   CA 4D 0C               JP   z,printStack_   
0BC1                             ; DB     lsb(edit_)       ; ENQ ^E  5
0BC1                             ; DB     lsb(reedit_)     ; LF  ^J 10
0BC1                             ; DB     lsb(list_)       ; FF  ^L 12
0BC1                             ; DB     lsb(printStack_) ; DLE ^P 16
0BC1                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0BC1                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0BC1                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0BC1                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0BC1                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0BC1                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0BC1                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0BC1                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0BC1                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0BC1                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0BC1                INTERPRET5A:      
0BC1                             ; ld (vTIBPtr),bc
0BC1                             ; ld bc,(vTIBPtr)
0BC1   18 C8                  JR   interpret2   
0BC3                INTERPRET6:      
0BC3   21 00 4A               LD   hl,TIB   
0BC6   09                     ADD   hl,bc   
0BC7   77                     LD   (hl),a   ; store the character in textbuf
0BC8   03                     INC   bc   
0BC9   CD 85 00               CALL   putchar   ; echo character to screen
0BCC   CD FB 0A               CALL   nesting   
0BCF   18 CD                  JR   interpret5   ; wait for next character
0BD1                INTERPRET7:      
0BD1   21 00 4A               LD   hl,TIB   
0BD4   09                     ADD   hl,bc   
0BD5   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0BD7   23                     INC   hl   
0BD8   36 0A                  LD   (hl),"\n"   
0BDA   23                     INC   hl   
0BDB   03                     INC   bc   
0BDC   03                     INC   bc   
0BDD   CD 36 0B               CALL   crlf   ; echo character to screen
0BE0   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0BE1   B7                     OR   a   
0BE2   20 BA                  JR   nz,interpret5   
0BE4                INTERPRET8:      
0BE4   21 00 4A               LD   hl,TIB   
0BE7   09                     ADD   hl,bc   
0BE8   22 EA 4C               LD   (vTIBPtr),hl   
0BEB   01 00 4A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0BEE                             ; we pressed enter
0BEE   0B                     DEC   bc   
0BEF                NEXT:        
0BEF   03                     INC   bc   ; Increment the IP
0BF0   0A                     LD   a,(bc)   ; Get the next character and dispatch
0BF1   FE 20                  CP   " "   ; whitespace?
0BF3   28 FA                  JR   z,next   ; space? ignore
0BF5   38 09                  JR   c,next1   
0BF7   D6 20                  SUB   " "   
0BF9   6F                     LD   l,a   ; index into table
0BFA   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0BFC   6E                     LD   l,(hl)   ; get low jump address
0BFD   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0BFF   E9                     JP   (hl)   ; Jump to routine
0C00                NEXT1:       
0C00   FE 00                  CP   NUL   ; end of input string?
0C02   28 03                  JR   z,exit   
0C04   C3 7C 0B               JP   interpret   ; no, other whitespace, macros?
0C07                EXIT:        
0C07   03                     INC   bc   
0C08   60 69                  LD   hl,bc   
0C0A   E9                     JP   (hl)   
0C0B                RUN:         
0C0B   C1                     POP   bc   
0C0C   0B                     DEC   bc   
0C0D   DD E9                  JP   (ix)   
0C0F                ERROR:       
0C0F   CD 0B 0C               CALL   run   
0C12   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C1F   C3 7C 0B               JP   interpret   
0C22                BACKSPACE_:      
0C22   79                     LD   a,c   
0C23   B0                     OR   b   
0C24   CA 8B 0B               JP   z,interpret2   
0C27   0B                     DEC   bc   
0C28   CD 3D 0B               CALL   printStr   
0C2B   08 20 08 00            .CSTR   "\b \b"   
0C2F   C3 8B 0B               JP   interpret2   
0C32                             ; edit
0C32                EDIT_:       
0C32   CD 0B 0C               CALL   run   
0C35   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C47   C3 7C 0B               JP   interpret   
0C4A                REEDIT_:      
0C4A   C3 7C 0B               JP   interpret   
0C4D                PRINTSTACK_:      
0C4D   CD 0B 0C               CALL   run   
0C50   2F 70 6B 00            .CSTR   "/pk"   
0C54   C3 7C 0B               JP   interpret   
0C57                             ; editDef:
0C57                             ;     pop hl                      ; pop ret address
0C57                             ;     ex (sp),hl                  ; swap with TOS
0C57                             ;     push hl                     ; dup TOS
0C57                             ;     ld a,l                      ; a = ident
0C57                             ;     ld de,TIB                   ; de = start of TIB
0C57                             ;     ld (vTIBPtr),de             ; update TIB*
0C57                             ;     push ix                     ; save NEXT
0C57                             ;     ld ix,editDef0              ; NEXT = editDef0
0C57                             ;     jp lookupRef                ; convert letter into address
0C57                             ; editDef0:
0C57                             ;     ld e,(hl)                   ; de = (hl++)
0C57                             ;     inc hl
0C57                             ;     ld d,(hl)
0C57                             ;     ld a,d                      ; de == 0 ?
0C57                             ;     or e
0C57                             ;     jr z,editDef4
0C57                             ;     ld ix,editDef3              ; NEXT = editDef3
0C57                             ;     ex de,hl
0C57                             ;     ld a,(hl)
0C57                             ;     cp "{"
0C57                             ;     jr nz,editDef1
0C57                             ;     jp editBlock0               ; convert letter into address
0C57                             ; editDef1:
0C57                             ;     cp "("
0C57                             ;     jr nz,editDef2
0C57                             ;     jp editBlock0               ; convert letter into address
0C57                             ; editDef2:
0C57                             ;     jp editLambda
0C57                             ; editDef3:
0C57                             ;     ld a," "                    ; write assign
0C57                             ;     call writeChar
0C57                             ;     pop hl                      ; a = ident
0C57                             ;     ld a,l
0C57                             ;     call writeChar
0C57                             ;     ld a,"="                    ; write assign
0C57                             ;     call writeChar
0C57                             ;     ld ix,editDef4              ; NEXT = editDef4
0C57                             ;     jp printTIB
0C57                             ; editDef4:
0C57                             ;     pop ix                      ; restore NEXT
0C57                             ;     jp (ix)
0C57                             ; writeChar:
0C57                             ;     ld de,(vTIBPtr)             ; de = TIB*
0C57                             ;     ld (de),a                   ; write ident
0C57                             ;     inc de
0C57                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0C57                             ;     ret
0C57                             ; ; printTIB
0C57                             ; printTIB:
0C57                             ;     ld hl,(vTIBPtr)
0C57                             ;     ld de,TIB
0C57                             ;     or a
0C57                             ;     sbc hl,de
0C57                             ;     jp printTIB2
0C57                             ; printTIB1:
0C57                             ;     ld a,(de)
0C57                             ;     call putchar
0C57                             ; printTIB2:
0C57                             ;     ld a,l
0C57                             ;     or h
0C57                             ;     jr nz,printTIB1
0C57                             ;     jp (ix)
0C57                             ; editBlock:
0C57                             ;     pop hl                      ; hl = block*
0C57                             ; editBlock0:
0C57                             ;     push ix                     ; save next
0C57                             ;     push hl                     ; push block*
0C57                             ;     push hl                     ; push block*
0C57                             ;     ld ix,(editBlock2)
0C57                             ;     jp blockLength
0C57                             ; editBlock1:
0C57                             ;     pop hl                      ; bc = length, (sp) = IP
0C57                             ;     pop de                      ; de = block*
0C57                             ;     ld a,l
0C57                             ;     or h
0C57                             ;     jr z,editBlock2
0C57                             ;     push bc
0C57                             ;     ld bc,hl
0C57                             ;     ex de,hl                    ; hl = block*
0C57                             ;     ld de,(vTIBPtr)              ; de = TIB*
0C57                             ;     ldir                        ; copy block to TIB
0C57                             ;     ld (vTIBPtr),de              ; save TIB*
0C57                             ;     pop bc
0C57                             ; editBlock2:
0C57                             ;     pop ix                      ; restore next
0C57                             ;     jp (ix)
0C57                             ; editLambda:
0C57                             ;     jp (ix)
0C57                             ; editArray:
0C57                             ;     jp (ix)
0C57                             ; editArglist:
0C57                             ;     jp (ix)
0C57                             ; ; blockLength
0C57                             ; ; addr1 -- length
0C57                             ; blockLength:
0C57                             ;     pop hl                      ; block*
0C57                             ;     push hl                     ; save block*
0C57                             ;     inc hl                      ; skip first char
0C57                             ;     ld d,1                      ; increase nesting
0C57                             ; blockLength1:                   ; Skip to end of definition
0C57                             ;     ld a,(hl)                   ; Get the next character
0C57                             ;     inc hl                      ; Point to next character
0C57                             ;     cp " " + 1                  ; ignore whitespace
0C57                             ;     jr c,blockLength1
0C57                             ;     cp ")"
0C57                             ;     jr z,blockLength4
0C57                             ;     cp "}"
0C57                             ;     jr z,blockLength4
0C57                             ;     cp "]"
0C57                             ;     jr z,blockLength4
0C57                             ;     cp "("
0C57                             ;     jr z,blockLength2
0C57                             ;     cp "{"
0C57                             ;     jr z,blockLength2
0C57                             ;     cp "["
0C57                             ;     jr z,blockLength2
0C57                             ;     cp "'"
0C57                             ;     jr z,blockLength3
0C57                             ;     cp "`"
0C57                             ;     jr z,blockLength3
0C57                             ;     cp DQUOTE
0C57                             ;     jr z,blockLength3
0C57                             ;     jr blockLength1
0C57                             ; blockLength2:
0C57                             ;     inc d
0C57                             ;     jr blockLength1
0C57                             ; blockLength4:
0C57                             ;     dec d
0C57                             ;     jr nz, blockLength1         ; get the next element
0C57                             ; blockLength3:
0C57                             ;     ld a,$80
0C57                             ;     xor d
0C57                             ;     ld d,a
0C57                             ;     jr nz, blockLength1
0C57                             ;     pop hl                      ; hl = block*
0C57                             ;     or a
0C57                             ;     sbc hl,de
0C57                             ;     push hl
0C57                             ;     jp (ix)
0C57                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0C57                             ; \a start of stack \#3 depth \b base \$ prompt
0C57                             ; DW dStack               ; a vS0 start of datastack			
0C57                             ; DW FALSE                ; b vBase16
0C57                             ; DW 0                    ; c vTIBPtr an offset to the tib
0C57                             ; DW 0                    ; d
0C57                             ; DW 65                   ; e vLastDef "A" last command u defined
0C57                             ; DW 0                    ; f
0C57                             ; DW page6                ; g 256 bytes limits
0C57                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0C57                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                          ;*Macro unroll:  test "'A' 3 .x", false
0D00   31 00 4A               LD   SP,STACK   
0D03   CD 44 0B               CALL   init   
0D06   CD 62 48               CALL   execStr   
0D09   27 41 27 20 33 20 2E 78 00 .CSTR   "'A' 3 .x"   
0D12   CD C5 0A               CALL   flushBuffer   
0D15                          ;*Macro unroll:  expect "'A' 3 .x",false
0D15   E1                     POP   HL   
0D16   E5                     PUSH   HL   
0D17   11 00 00               LD   DE,false   
0D1A   B7                     OR   A   
0D1B   ED 52                  SBC   HL,DE   
0D1D   7D                     LD   A,L   
0D1E   B4                     OR   H   
0D1F   CA 7E 0D               JP   Z,expectM_0_2650S52   
0D22   CD 3D 0B               CALL   printStr   
0D25   43 6F 64 65 3A 20 27 41 27 20 33 20 2E 78 00 .CSTR   "Code: ","'A' 3 .x"   
0D34   CD 3D 0B               CALL   printStr   
0D37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D46   21 00 00               LD   hl,false   
0D49   E5                     PUSH   hl   
0D4A   CD 0B 0C               CALL   run   
0D4D   2E 00                  .CSTR   "."   
0D4F   CD 3D 0B               CALL   printStr   
0D52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D5F   E1                     POP   hl   
0D60   E5                     PUSH   hl   
0D61   E5                     PUSH   hl   
0D62   CD 0B 0C               CALL   run   
0D65   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0D79   CD C5 0A               CALL   flushBuffer   
0D7C   76                     HALT      
0D7D   00                     .CSTR      
0D7E                EXPECTM_0_2650S52:      
0D7E   E1                     POP   HL   
0D7F                             ; test "100 :a:bc{`[ `/bs 10 /bd 20 /bd 30 /bd `]`/bs}; ^ /pb", 0
0D7F                             ; test "[10 20 30 40] :a:bc{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}; ^ /px", 0
0D7F                             ; test "[10 20 30] `[`.s :a:bc{$a/s$c= 0$b=( $a$b%. $b++ $b $c</br )^};^ `]`.s", 0
0D7F   CD 3D 0B               CALL   printStr   
0D82   44 6F 6E 65 21 00      .CSTR   "Done!"   
0D88   76                     HALT      
0D89                             ; 
0D89                          ;*Macro unroll:  test "/f", false
0D89   31 00 4A               LD   SP,STACK   
0D8C   CD 44 0B               CALL   init   
0D8F   CD 62 48               CALL   execStr   
0D92   2F 66 00               .CSTR   "/f"   
0D95   CD C5 0A               CALL   flushBuffer   
0D98                          ;*Macro unroll:  expect "/f",false
0D98   E1                     POP   HL   
0D99   E5                     PUSH   HL   
0D9A   11 00 00               LD   DE,false   
0D9D   B7                     OR   A   
0D9E   ED 52                  SBC   HL,DE   
0DA0   7D                     LD   A,L   
0DA1   B4                     OR   H   
0DA2   CA FB 0D               JP   Z,expectM_0_2658S52   
0DA5   CD 3D 0B               CALL   printStr   
0DA8   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0DB1   CD 3D 0B               CALL   printStr   
0DB4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DC3   21 00 00               LD   hl,false   
0DC6   E5                     PUSH   hl   
0DC7   CD 0B 0C               CALL   run   
0DCA   2E 00                  .CSTR   "."   
0DCC   CD 3D 0B               CALL   printStr   
0DCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DDC   E1                     POP   hl   
0DDD   E5                     PUSH   hl   
0DDE   E5                     PUSH   hl   
0DDF   CD 0B 0C               CALL   run   
0DE2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0DF6   CD C5 0A               CALL   flushBuffer   
0DF9   76                     HALT      
0DFA   00                     .CSTR      
0DFB                EXPECTM_0_2658S52:      
0DFB   E1                     POP   HL   
0DFC                          ;*Macro unroll:  test "/t", true
0DFC   31 00 4A               LD   SP,STACK   
0DFF   CD 44 0B               CALL   init   
0E02   CD 62 48               CALL   execStr   
0E05   2F 74 00               .CSTR   "/t"   
0E08   CD C5 0A               CALL   flushBuffer   
0E0B                          ;*Macro unroll:  expect "/t",true
0E0B   E1                     POP   HL   
0E0C   E5                     PUSH   HL   
0E0D   11 FF FF               LD   DE,true   
0E10   B7                     OR   A   
0E11   ED 52                  SBC   HL,DE   
0E13   7D                     LD   A,L   
0E14   B4                     OR   H   
0E15   CA 6E 0E               JP   Z,expectM_0_2659S52   
0E18   CD 3D 0B               CALL   printStr   
0E1B   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0E24   CD 3D 0B               CALL   printStr   
0E27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E36   21 FF FF               LD   hl,true   
0E39   E5                     PUSH   hl   
0E3A   CD 0B 0C               CALL   run   
0E3D   2E 00                  .CSTR   "."   
0E3F   CD 3D 0B               CALL   printStr   
0E42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E4F   E1                     POP   hl   
0E50   E5                     PUSH   hl   
0E51   E5                     PUSH   hl   
0E52   CD 0B 0C               CALL   run   
0E55   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0E69   CD C5 0A               CALL   flushBuffer   
0E6C   76                     HALT      
0E6D   00                     .CSTR      
0E6E                EXPECTM_0_2659S52:      
0E6E   E1                     POP   HL   
0E6F                          ;*Macro unroll:  test "1", 1
0E6F   31 00 4A               LD   SP,STACK   
0E72   CD 44 0B               CALL   init   
0E75   CD 62 48               CALL   execStr   
0E78   31 00                  .CSTR   "1"   
0E7A   CD C5 0A               CALL   flushBuffer   
0E7D                          ;*Macro unroll:  expect "1",1
0E7D   E1                     POP   HL   
0E7E   E5                     PUSH   HL   
0E7F   11 01 00               LD   DE,1   
0E82   B7                     OR   A   
0E83   ED 52                  SBC   HL,DE   
0E85   7D                     LD   A,L   
0E86   B4                     OR   H   
0E87   CA DF 0E               JP   Z,expectM_0_2660S52   
0E8A   CD 3D 0B               CALL   printStr   
0E8D   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0E95   CD 3D 0B               CALL   printStr   
0E98   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EA7   21 01 00               LD   hl,1   
0EAA   E5                     PUSH   hl   
0EAB   CD 0B 0C               CALL   run   
0EAE   2E 00                  .CSTR   "."   
0EB0   CD 3D 0B               CALL   printStr   
0EB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EC0   E1                     POP   hl   
0EC1   E5                     PUSH   hl   
0EC2   E5                     PUSH   hl   
0EC3   CD 0B 0C               CALL   run   
0EC6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0EDA   CD C5 0A               CALL   flushBuffer   
0EDD   76                     HALT      
0EDE   00                     .CSTR      
0EDF                EXPECTM_0_2660S52:      
0EDF   E1                     POP   HL   
0EE0                          ;*Macro unroll:  test "2", 2
0EE0   31 00 4A               LD   SP,STACK   
0EE3   CD 44 0B               CALL   init   
0EE6   CD 62 48               CALL   execStr   
0EE9   32 00                  .CSTR   "2"   
0EEB   CD C5 0A               CALL   flushBuffer   
0EEE                          ;*Macro unroll:  expect "2",2
0EEE   E1                     POP   HL   
0EEF   E5                     PUSH   HL   
0EF0   11 02 00               LD   DE,2   
0EF3   B7                     OR   A   
0EF4   ED 52                  SBC   HL,DE   
0EF6   7D                     LD   A,L   
0EF7   B4                     OR   H   
0EF8   CA 50 0F               JP   Z,expectM_0_2661S52   
0EFB   CD 3D 0B               CALL   printStr   
0EFE   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0F06   CD 3D 0B               CALL   printStr   
0F09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F18   21 02 00               LD   hl,2   
0F1B   E5                     PUSH   hl   
0F1C   CD 0B 0C               CALL   run   
0F1F   2E 00                  .CSTR   "."   
0F21   CD 3D 0B               CALL   printStr   
0F24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F31   E1                     POP   hl   
0F32   E5                     PUSH   hl   
0F33   E5                     PUSH   hl   
0F34   CD 0B 0C               CALL   run   
0F37   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0F4B   CD C5 0A               CALL   flushBuffer   
0F4E   76                     HALT      
0F4F   00                     .CSTR      
0F50                EXPECTM_0_2661S52:      
0F50   E1                     POP   HL   
0F51                          ;*Macro unroll:  test "1", 1
0F51   31 00 4A               LD   SP,STACK   
0F54   CD 44 0B               CALL   init   
0F57   CD 62 48               CALL   execStr   
0F5A   31 00                  .CSTR   "1"   
0F5C   CD C5 0A               CALL   flushBuffer   
0F5F                          ;*Macro unroll:  expect "1",1
0F5F   E1                     POP   HL   
0F60   E5                     PUSH   HL   
0F61   11 01 00               LD   DE,1   
0F64   B7                     OR   A   
0F65   ED 52                  SBC   HL,DE   
0F67   7D                     LD   A,L   
0F68   B4                     OR   H   
0F69   CA C1 0F               JP   Z,expectM_0_2662S52   
0F6C   CD 3D 0B               CALL   printStr   
0F6F   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0F77   CD 3D 0B               CALL   printStr   
0F7A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F89   21 01 00               LD   hl,1   
0F8C   E5                     PUSH   hl   
0F8D   CD 0B 0C               CALL   run   
0F90   2E 00                  .CSTR   "."   
0F92   CD 3D 0B               CALL   printStr   
0F95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FA2   E1                     POP   hl   
0FA3   E5                     PUSH   hl   
0FA4   E5                     PUSH   hl   
0FA5   CD 0B 0C               CALL   run   
0FA8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0FBC   CD C5 0A               CALL   flushBuffer   
0FBF   76                     HALT      
0FC0   00                     .CSTR      
0FC1                EXPECTM_0_2662S52:      
0FC1   E1                     POP   HL   
0FC2                          ;*Macro unroll:  test "0", 0
0FC2   31 00 4A               LD   SP,STACK   
0FC5   CD 44 0B               CALL   init   
0FC8   CD 62 48               CALL   execStr   
0FCB   30 00                  .CSTR   "0"   
0FCD   CD C5 0A               CALL   flushBuffer   
0FD0                          ;*Macro unroll:  expect "0",0
0FD0   E1                     POP   HL   
0FD1   E5                     PUSH   HL   
0FD2   11 00 00               LD   DE,0   
0FD5   B7                     OR   A   
0FD6   ED 52                  SBC   HL,DE   
0FD8   7D                     LD   A,L   
0FD9   B4                     OR   H   
0FDA   CA 32 10               JP   Z,expectM_0_2663S52   
0FDD   CD 3D 0B               CALL   printStr   
0FE0   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0FE8   CD 3D 0B               CALL   printStr   
0FEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FFA   21 00 00               LD   hl,0   
0FFD   E5                     PUSH   hl   
0FFE   CD 0B 0C               CALL   run   
1001   2E 00                  .CSTR   "."   
1003   CD 3D 0B               CALL   printStr   
1006   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1013   E1                     POP   hl   
1014   E5                     PUSH   hl   
1015   E5                     PUSH   hl   
1016   CD 0B 0C               CALL   run   
1019   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
102D   CD C5 0A               CALL   flushBuffer   
1030   76                     HALT      
1031   00                     .CSTR      
1032                EXPECTM_0_2663S52:      
1032   E1                     POP   HL   
1033                          ;*Macro unroll:  test "10", 10
1033   31 00 4A               LD   SP,STACK   
1036   CD 44 0B               CALL   init   
1039   CD 62 48               CALL   execStr   
103C   31 30 00               .CSTR   "10"   
103F   CD C5 0A               CALL   flushBuffer   
1042                          ;*Macro unroll:  expect "10",10
1042   E1                     POP   HL   
1043   E5                     PUSH   HL   
1044   11 0A 00               LD   DE,10   
1047   B7                     OR   A   
1048   ED 52                  SBC   HL,DE   
104A   7D                     LD   A,L   
104B   B4                     OR   H   
104C   CA A5 10               JP   Z,expectM_0_2664S52   
104F   CD 3D 0B               CALL   printStr   
1052   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
105B   CD 3D 0B               CALL   printStr   
105E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
106D   21 0A 00               LD   hl,10   
1070   E5                     PUSH   hl   
1071   CD 0B 0C               CALL   run   
1074   2E 00                  .CSTR   "."   
1076   CD 3D 0B               CALL   printStr   
1079   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1086   E1                     POP   hl   
1087   E5                     PUSH   hl   
1088   E5                     PUSH   hl   
1089   CD 0B 0C               CALL   run   
108C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
10A0   CD C5 0A               CALL   flushBuffer   
10A3   76                     HALT      
10A4   00                     .CSTR      
10A5                EXPECTM_0_2664S52:      
10A5   E1                     POP   HL   
10A6                          ;*Macro unroll:  test "123", 123
10A6   31 00 4A               LD   SP,STACK   
10A9   CD 44 0B               CALL   init   
10AC   CD 62 48               CALL   execStr   
10AF   31 32 33 00            .CSTR   "123"   
10B3   CD C5 0A               CALL   flushBuffer   
10B6                          ;*Macro unroll:  expect "123",123
10B6   E1                     POP   HL   
10B7   E5                     PUSH   HL   
10B8   11 7B 00               LD   DE,123   
10BB   B7                     OR   A   
10BC   ED 52                  SBC   HL,DE   
10BE   7D                     LD   A,L   
10BF   B4                     OR   H   
10C0   CA 1A 11               JP   Z,expectM_0_2665S52   
10C3   CD 3D 0B               CALL   printStr   
10C6   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
10D0   CD 3D 0B               CALL   printStr   
10D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10E2   21 7B 00               LD   hl,123   
10E5   E5                     PUSH   hl   
10E6   CD 0B 0C               CALL   run   
10E9   2E 00                  .CSTR   "."   
10EB   CD 3D 0B               CALL   printStr   
10EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10FB   E1                     POP   hl   
10FC   E5                     PUSH   hl   
10FD   E5                     PUSH   hl   
10FE   CD 0B 0C               CALL   run   
1101   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1115   CD C5 0A               CALL   flushBuffer   
1118   76                     HALT      
1119   00                     .CSTR      
111A                EXPECTM_0_2665S52:      
111A   E1                     POP   HL   
111B                          ;*Macro unroll:  test "-1",-1
111B   31 00 4A               LD   SP,STACK   
111E   CD 44 0B               CALL   init   
1121   CD 62 48               CALL   execStr   
1124   2D 31 00               .CSTR   "-1"   
1127   CD C5 0A               CALL   flushBuffer   
112A                          ;*Macro unroll:  expect "-1",-1
112A   E1                     POP   HL   
112B   E5                     PUSH   HL   
112C   11 FF FF               LD   DE,-1   
112F   B7                     OR   A   
1130   ED 52                  SBC   HL,DE   
1132   7D                     LD   A,L   
1133   B4                     OR   H   
1134   CA 8D 11               JP   Z,expectM_0_2666S52   
1137   CD 3D 0B               CALL   printStr   
113A   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1143   CD 3D 0B               CALL   printStr   
1146   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1155   21 FF FF               LD   hl,-1   
1158   E5                     PUSH   hl   
1159   CD 0B 0C               CALL   run   
115C   2E 00                  .CSTR   "."   
115E   CD 3D 0B               CALL   printStr   
1161   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
116E   E1                     POP   hl   
116F   E5                     PUSH   hl   
1170   E5                     PUSH   hl   
1171   CD 0B 0C               CALL   run   
1174   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1188   CD C5 0A               CALL   flushBuffer   
118B   76                     HALT      
118C   00                     .CSTR      
118D                EXPECTM_0_2666S52:      
118D   E1                     POP   HL   
118E                          ;*Macro unroll:  test "''", 0
118E   31 00 4A               LD   SP,STACK   
1191   CD 44 0B               CALL   init   
1194   CD 62 48               CALL   execStr   
1197   27 27 00               .CSTR   "''"   
119A   CD C5 0A               CALL   flushBuffer   
119D                          ;*Macro unroll:  expect "''",0
119D   E1                     POP   HL   
119E   E5                     PUSH   HL   
119F   11 00 00               LD   DE,0   
11A2   B7                     OR   A   
11A3   ED 52                  SBC   HL,DE   
11A5   7D                     LD   A,L   
11A6   B4                     OR   H   
11A7   CA 00 12               JP   Z,expectM_0_2667S52   
11AA   CD 3D 0B               CALL   printStr   
11AD   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
11B6   CD 3D 0B               CALL   printStr   
11B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11C8   21 00 00               LD   hl,0   
11CB   E5                     PUSH   hl   
11CC   CD 0B 0C               CALL   run   
11CF   2E 00                  .CSTR   "."   
11D1   CD 3D 0B               CALL   printStr   
11D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11E1   E1                     POP   hl   
11E2   E5                     PUSH   hl   
11E3   E5                     PUSH   hl   
11E4   CD 0B 0C               CALL   run   
11E7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
11FB   CD C5 0A               CALL   flushBuffer   
11FE   76                     HALT      
11FF   00                     .CSTR      
1200                EXPECTM_0_2667S52:      
1200   E1                     POP   HL   
1201                          ;*Macro unroll:  test "'a'", $61
1201   31 00 4A               LD   SP,STACK   
1204   CD 44 0B               CALL   init   
1207   CD 62 48               CALL   execStr   
120A   27 61 27 00            .CSTR   "'a'"   
120E   CD C5 0A               CALL   flushBuffer   
1211                          ;*Macro unroll:  expect "'a'",$61
1211   E1                     POP   HL   
1212   E5                     PUSH   HL   
1213   11 61 00               LD   DE,$61   
1216   B7                     OR   A   
1217   ED 52                  SBC   HL,DE   
1219   7D                     LD   A,L   
121A   B4                     OR   H   
121B   CA 75 12               JP   Z,expectM_0_2668S52   
121E   CD 3D 0B               CALL   printStr   
1221   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
122B   CD 3D 0B               CALL   printStr   
122E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
123D   21 61 00               LD   hl,$61   
1240   E5                     PUSH   hl   
1241   CD 0B 0C               CALL   run   
1244   2E 00                  .CSTR   "."   
1246   CD 3D 0B               CALL   printStr   
1249   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1256   E1                     POP   hl   
1257   E5                     PUSH   hl   
1258   E5                     PUSH   hl   
1259   CD 0B 0C               CALL   run   
125C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1270   CD C5 0A               CALL   flushBuffer   
1273   76                     HALT      
1274   00                     .CSTR      
1275                EXPECTM_0_2668S52:      
1275   E1                     POP   HL   
1276                          ;*Macro unroll:  test "'\\''", $27
1276   31 00 4A               LD   SP,STACK   
1279   CD 44 0B               CALL   init   
127C   CD 62 48               CALL   execStr   
127F   27 5C 27 27 00         .CSTR   "'\\''"   
1284   CD C5 0A               CALL   flushBuffer   
1287                          ;*Macro unroll:  expect "'\\''",$27
1287   E1                     POP   HL   
1288   E5                     PUSH   HL   
1289   11 27 00               LD   DE,$27   
128C   B7                     OR   A   
128D   ED 52                  SBC   HL,DE   
128F   7D                     LD   A,L   
1290   B4                     OR   H   
1291   CA EC 12               JP   Z,expectM_0_2669S52   
1294   CD 3D 0B               CALL   printStr   
1297   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
12A2   CD 3D 0B               CALL   printStr   
12A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12B4   21 27 00               LD   hl,$27   
12B7   E5                     PUSH   hl   
12B8   CD 0B 0C               CALL   run   
12BB   2E 00                  .CSTR   "."   
12BD   CD 3D 0B               CALL   printStr   
12C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12CD   E1                     POP   hl   
12CE   E5                     PUSH   hl   
12CF   E5                     PUSH   hl   
12D0   CD 0B 0C               CALL   run   
12D3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
12E7   CD C5 0A               CALL   flushBuffer   
12EA   76                     HALT      
12EB   00                     .CSTR      
12EC                EXPECTM_0_2669S52:      
12EC   E1                     POP   HL   
12ED                          ;*Macro unroll:  test "#10", $10
12ED   31 00 4A               LD   SP,STACK   
12F0   CD 44 0B               CALL   init   
12F3   CD 62 48               CALL   execStr   
12F6   23 31 30 00            .CSTR   "#10"   
12FA   CD C5 0A               CALL   flushBuffer   
12FD                          ;*Macro unroll:  expect "#10",$10
12FD   E1                     POP   HL   
12FE   E5                     PUSH   HL   
12FF   11 10 00               LD   DE,$10   
1302   B7                     OR   A   
1303   ED 52                  SBC   HL,DE   
1305   7D                     LD   A,L   
1306   B4                     OR   H   
1307   CA 61 13               JP   Z,expectM_0_2670S52   
130A   CD 3D 0B               CALL   printStr   
130D   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
1317   CD 3D 0B               CALL   printStr   
131A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1329   21 10 00               LD   hl,$10   
132C   E5                     PUSH   hl   
132D   CD 0B 0C               CALL   run   
1330   2E 00                  .CSTR   "."   
1332   CD 3D 0B               CALL   printStr   
1335   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1342   E1                     POP   hl   
1343   E5                     PUSH   hl   
1344   E5                     PUSH   hl   
1345   CD 0B 0C               CALL   run   
1348   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
135C   CD C5 0A               CALL   flushBuffer   
135F   76                     HALT      
1360   00                     .CSTR      
1361                EXPECTM_0_2670S52:      
1361   E1                     POP   HL   
1362                          ;*Macro unroll:  test "#FF", $FF
1362   31 00 4A               LD   SP,STACK   
1365   CD 44 0B               CALL   init   
1368   CD 62 48               CALL   execStr   
136B   23 46 46 00            .CSTR   "#FF"   
136F   CD C5 0A               CALL   flushBuffer   
1372                          ;*Macro unroll:  expect "#FF",$FF
1372   E1                     POP   HL   
1373   E5                     PUSH   HL   
1374   11 FF 00               LD   DE,$FF   
1377   B7                     OR   A   
1378   ED 52                  SBC   HL,DE   
137A   7D                     LD   A,L   
137B   B4                     OR   H   
137C   CA D6 13               JP   Z,expectM_0_2671S52   
137F   CD 3D 0B               CALL   printStr   
1382   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
138C   CD 3D 0B               CALL   printStr   
138F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
139E   21 FF 00               LD   hl,$FF   
13A1   E5                     PUSH   hl   
13A2   CD 0B 0C               CALL   run   
13A5   2E 00                  .CSTR   "."   
13A7   CD 3D 0B               CALL   printStr   
13AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13B7   E1                     POP   hl   
13B8   E5                     PUSH   hl   
13B9   E5                     PUSH   hl   
13BA   CD 0B 0C               CALL   run   
13BD   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
13D1   CD C5 0A               CALL   flushBuffer   
13D4   76                     HALT      
13D5   00                     .CSTR      
13D6                EXPECTM_0_2671S52:      
13D6   E1                     POP   HL   
13D7                          ;*Macro unroll:  test "-1 2 +",1
13D7   31 00 4A               LD   SP,STACK   
13DA   CD 44 0B               CALL   init   
13DD   CD 62 48               CALL   execStr   
13E0   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
13E7   CD C5 0A               CALL   flushBuffer   
13EA                          ;*Macro unroll:  expect "-1 2 +",1
13EA   E1                     POP   HL   
13EB   E5                     PUSH   HL   
13EC   11 01 00               LD   DE,1   
13EF   B7                     OR   A   
13F0   ED 52                  SBC   HL,DE   
13F2   7D                     LD   A,L   
13F3   B4                     OR   H   
13F4   CA 51 14               JP   Z,expectM_0_2672S52   
13F7   CD 3D 0B               CALL   printStr   
13FA   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1407   CD 3D 0B               CALL   printStr   
140A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1419   21 01 00               LD   hl,1   
141C   E5                     PUSH   hl   
141D   CD 0B 0C               CALL   run   
1420   2E 00                  .CSTR   "."   
1422   CD 3D 0B               CALL   printStr   
1425   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1432   E1                     POP   hl   
1433   E5                     PUSH   hl   
1434   E5                     PUSH   hl   
1435   CD 0B 0C               CALL   run   
1438   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
144C   CD C5 0A               CALL   flushBuffer   
144F   76                     HALT      
1450   00                     .CSTR      
1451                EXPECTM_0_2672S52:      
1451   E1                     POP   HL   
1452                          ;*Macro unroll:  test "-1 1 +",0
1452   31 00 4A               LD   SP,STACK   
1455   CD 44 0B               CALL   init   
1458   CD 62 48               CALL   execStr   
145B   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1462   CD C5 0A               CALL   flushBuffer   
1465                          ;*Macro unroll:  expect "-1 1 +",0
1465   E1                     POP   HL   
1466   E5                     PUSH   HL   
1467   11 00 00               LD   DE,0   
146A   B7                     OR   A   
146B   ED 52                  SBC   HL,DE   
146D   7D                     LD   A,L   
146E   B4                     OR   H   
146F   CA CC 14               JP   Z,expectM_0_2673S52   
1472   CD 3D 0B               CALL   printStr   
1475   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1482   CD 3D 0B               CALL   printStr   
1485   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1494   21 00 00               LD   hl,0   
1497   E5                     PUSH   hl   
1498   CD 0B 0C               CALL   run   
149B   2E 00                  .CSTR   "."   
149D   CD 3D 0B               CALL   printStr   
14A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14AD   E1                     POP   hl   
14AE   E5                     PUSH   hl   
14AF   E5                     PUSH   hl   
14B0   CD 0B 0C               CALL   run   
14B3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
14C7   CD C5 0A               CALL   flushBuffer   
14CA   76                     HALT      
14CB   00                     .CSTR      
14CC                EXPECTM_0_2673S52:      
14CC   E1                     POP   HL   
14CD                          ;*Macro unroll:  test "1 2 +", 3
14CD   31 00 4A               LD   SP,STACK   
14D0   CD 44 0B               CALL   init   
14D3   CD 62 48               CALL   execStr   
14D6   31 20 32 20 2B 00      .CSTR   "1 2 +"   
14DC   CD C5 0A               CALL   flushBuffer   
14DF                          ;*Macro unroll:  expect "1 2 +",3
14DF   E1                     POP   HL   
14E0   E5                     PUSH   HL   
14E1   11 03 00               LD   DE,3   
14E4   B7                     OR   A   
14E5   ED 52                  SBC   HL,DE   
14E7   7D                     LD   A,L   
14E8   B4                     OR   H   
14E9   CA 45 15               JP   Z,expectM_0_2674S52   
14EC   CD 3D 0B               CALL   printStr   
14EF   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
14FB   CD 3D 0B               CALL   printStr   
14FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
150D   21 03 00               LD   hl,3   
1510   E5                     PUSH   hl   
1511   CD 0B 0C               CALL   run   
1514   2E 00                  .CSTR   "."   
1516   CD 3D 0B               CALL   printStr   
1519   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1526   E1                     POP   hl   
1527   E5                     PUSH   hl   
1528   E5                     PUSH   hl   
1529   CD 0B 0C               CALL   run   
152C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1540   CD C5 0A               CALL   flushBuffer   
1543   76                     HALT      
1544   00                     .CSTR      
1545                EXPECTM_0_2674S52:      
1545   E1                     POP   HL   
1546                          ;*Macro unroll:  test "4 1 2 +", 3
1546   31 00 4A               LD   SP,STACK   
1549   CD 44 0B               CALL   init   
154C   CD 62 48               CALL   execStr   
154F   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1557   CD C5 0A               CALL   flushBuffer   
155A                          ;*Macro unroll:  expect "4 1 2 +",3
155A   E1                     POP   HL   
155B   E5                     PUSH   HL   
155C   11 03 00               LD   DE,3   
155F   B7                     OR   A   
1560   ED 52                  SBC   HL,DE   
1562   7D                     LD   A,L   
1563   B4                     OR   H   
1564   CA C2 15               JP   Z,expectM_0_2675S52   
1567   CD 3D 0B               CALL   printStr   
156A   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1578   CD 3D 0B               CALL   printStr   
157B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
158A   21 03 00               LD   hl,3   
158D   E5                     PUSH   hl   
158E   CD 0B 0C               CALL   run   
1591   2E 00                  .CSTR   "."   
1593   CD 3D 0B               CALL   printStr   
1596   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15A3   E1                     POP   hl   
15A4   E5                     PUSH   hl   
15A5   E5                     PUSH   hl   
15A6   CD 0B 0C               CALL   run   
15A9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
15BD   CD C5 0A               CALL   flushBuffer   
15C0   76                     HALT      
15C1   00                     .CSTR      
15C2                EXPECTM_0_2675S52:      
15C2   E1                     POP   HL   
15C3                          ;*Macro unroll:  test "123 456 +", 123+456
15C3   31 00 4A               LD   SP,STACK   
15C6   CD 44 0B               CALL   init   
15C9   CD 62 48               CALL   execStr   
15CC   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
15D6   CD C5 0A               CALL   flushBuffer   
15D9                          ;*Macro unroll:  expect "123 456 +",123+456
15D9   E1                     POP   HL   
15DA   E5                     PUSH   HL   
15DB   11 43 02               LD   DE,123+456   
15DE   B7                     OR   A   
15DF   ED 52                  SBC   HL,DE   
15E1   7D                     LD   A,L   
15E2   B4                     OR   H   
15E3   CA 43 16               JP   Z,expectM_0_2676S52   
15E6   CD 3D 0B               CALL   printStr   
15E9   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
15F9   CD 3D 0B               CALL   printStr   
15FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
160B   21 43 02               LD   hl,123+456   
160E   E5                     PUSH   hl   
160F   CD 0B 0C               CALL   run   
1612   2E 00                  .CSTR   "."   
1614   CD 3D 0B               CALL   printStr   
1617   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1624   E1                     POP   hl   
1625   E5                     PUSH   hl   
1626   E5                     PUSH   hl   
1627   CD 0B 0C               CALL   run   
162A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
163E   CD C5 0A               CALL   flushBuffer   
1641   76                     HALT      
1642   00                     .CSTR      
1643                EXPECTM_0_2676S52:      
1643   E1                     POP   HL   
1644                          ;*Macro unroll:  test "64 128 +", 64+128
1644   31 00 4A               LD   SP,STACK   
1647   CD 44 0B               CALL   init   
164A   CD 62 48               CALL   execStr   
164D   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
1656   CD C5 0A               CALL   flushBuffer   
1659                          ;*Macro unroll:  expect "64 128 +",64+128
1659   E1                     POP   HL   
165A   E5                     PUSH   HL   
165B   11 C0 00               LD   DE,64+128   
165E   B7                     OR   A   
165F   ED 52                  SBC   HL,DE   
1661   7D                     LD   A,L   
1662   B4                     OR   H   
1663   CA C2 16               JP   Z,expectM_0_2677S52   
1666   CD 3D 0B               CALL   printStr   
1669   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1678   CD 3D 0B               CALL   printStr   
167B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
168A   21 C0 00               LD   hl,64+128   
168D   E5                     PUSH   hl   
168E   CD 0B 0C               CALL   run   
1691   2E 00                  .CSTR   "."   
1693   CD 3D 0B               CALL   printStr   
1696   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16A3   E1                     POP   hl   
16A4   E5                     PUSH   hl   
16A5   E5                     PUSH   hl   
16A6   CD 0B 0C               CALL   run   
16A9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
16BD   CD C5 0A               CALL   flushBuffer   
16C0   76                     HALT      
16C1   00                     .CSTR      
16C2                EXPECTM_0_2677S52:      
16C2   E1                     POP   HL   
16C3                          ;*Macro unroll:  test "1 2 +", 3
16C3   31 00 4A               LD   SP,STACK   
16C6   CD 44 0B               CALL   init   
16C9   CD 62 48               CALL   execStr   
16CC   31 20 32 20 2B 00      .CSTR   "1 2 +"   
16D2   CD C5 0A               CALL   flushBuffer   
16D5                          ;*Macro unroll:  expect "1 2 +",3
16D5   E1                     POP   HL   
16D6   E5                     PUSH   HL   
16D7   11 03 00               LD   DE,3   
16DA   B7                     OR   A   
16DB   ED 52                  SBC   HL,DE   
16DD   7D                     LD   A,L   
16DE   B4                     OR   H   
16DF   CA 3B 17               JP   Z,expectM_0_2678S52   
16E2   CD 3D 0B               CALL   printStr   
16E5   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
16F1   CD 3D 0B               CALL   printStr   
16F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1703   21 03 00               LD   hl,3   
1706   E5                     PUSH   hl   
1707   CD 0B 0C               CALL   run   
170A   2E 00                  .CSTR   "."   
170C   CD 3D 0B               CALL   printStr   
170F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
171C   E1                     POP   hl   
171D   E5                     PUSH   hl   
171E   E5                     PUSH   hl   
171F   CD 0B 0C               CALL   run   
1722   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1736   CD C5 0A               CALL   flushBuffer   
1739   76                     HALT      
173A   00                     .CSTR      
173B                EXPECTM_0_2678S52:      
173B   E1                     POP   HL   
173C                          ;*Macro unroll:  test "1a= a++ a",2
173C   31 00 4A               LD   SP,STACK   
173F   CD 44 0B               CALL   init   
1742   CD 62 48               CALL   execStr   
1745   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
174F   CD C5 0A               CALL   flushBuffer   
1752                          ;*Macro unroll:  expect "1a= a++ a",2
1752   E1                     POP   HL   
1753   E5                     PUSH   HL   
1754   11 02 00               LD   DE,2   
1757   B7                     OR   A   
1758   ED 52                  SBC   HL,DE   
175A   7D                     LD   A,L   
175B   B4                     OR   H   
175C   CA BC 17               JP   Z,expectM_0_2679S52   
175F   CD 3D 0B               CALL   printStr   
1762   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1772   CD 3D 0B               CALL   printStr   
1775   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1784   21 02 00               LD   hl,2   
1787   E5                     PUSH   hl   
1788   CD 0B 0C               CALL   run   
178B   2E 00                  .CSTR   "."   
178D   CD 3D 0B               CALL   printStr   
1790   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
179D   E1                     POP   hl   
179E   E5                     PUSH   hl   
179F   E5                     PUSH   hl   
17A0   CD 0B 0C               CALL   run   
17A3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
17B7   CD C5 0A               CALL   flushBuffer   
17BA   76                     HALT      
17BB   00                     .CSTR      
17BC                EXPECTM_0_2679S52:      
17BC   E1                     POP   HL   
17BD                          ;*Macro unroll:  test "-1 -1 -",0
17BD   31 00 4A               LD   SP,STACK   
17C0   CD 44 0B               CALL   init   
17C3   CD 62 48               CALL   execStr   
17C6   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
17CE   CD C5 0A               CALL   flushBuffer   
17D1                          ;*Macro unroll:  expect "-1 -1 -",0
17D1   E1                     POP   HL   
17D2   E5                     PUSH   HL   
17D3   11 00 00               LD   DE,0   
17D6   B7                     OR   A   
17D7   ED 52                  SBC   HL,DE   
17D9   7D                     LD   A,L   
17DA   B4                     OR   H   
17DB   CA 39 18               JP   Z,expectM_0_2680S52   
17DE   CD 3D 0B               CALL   printStr   
17E1   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
17EF   CD 3D 0B               CALL   printStr   
17F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1801   21 00 00               LD   hl,0   
1804   E5                     PUSH   hl   
1805   CD 0B 0C               CALL   run   
1808   2E 00                  .CSTR   "."   
180A   CD 3D 0B               CALL   printStr   
180D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
181A   E1                     POP   hl   
181B   E5                     PUSH   hl   
181C   E5                     PUSH   hl   
181D   CD 0B 0C               CALL   run   
1820   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1834   CD C5 0A               CALL   flushBuffer   
1837   76                     HALT      
1838   00                     .CSTR      
1839                EXPECTM_0_2680S52:      
1839   E1                     POP   HL   
183A                          ;*Macro unroll:  test "5 3 -", 2
183A   31 00 4A               LD   SP,STACK   
183D   CD 44 0B               CALL   init   
1840   CD 62 48               CALL   execStr   
1843   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1849   CD C5 0A               CALL   flushBuffer   
184C                          ;*Macro unroll:  expect "5 3 -",2
184C   E1                     POP   HL   
184D   E5                     PUSH   HL   
184E   11 02 00               LD   DE,2   
1851   B7                     OR   A   
1852   ED 52                  SBC   HL,DE   
1854   7D                     LD   A,L   
1855   B4                     OR   H   
1856   CA B2 18               JP   Z,expectM_0_2681S52   
1859   CD 3D 0B               CALL   printStr   
185C   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1868   CD 3D 0B               CALL   printStr   
186B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
187A   21 02 00               LD   hl,2   
187D   E5                     PUSH   hl   
187E   CD 0B 0C               CALL   run   
1881   2E 00                  .CSTR   "."   
1883   CD 3D 0B               CALL   printStr   
1886   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1893   E1                     POP   hl   
1894   E5                     PUSH   hl   
1895   E5                     PUSH   hl   
1896   CD 0B 0C               CALL   run   
1899   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
18AD   CD C5 0A               CALL   flushBuffer   
18B0   76                     HALT      
18B1   00                     .CSTR      
18B2                EXPECTM_0_2681S52:      
18B2   E1                     POP   HL   
18B3                          ;*Macro unroll:  test "2 1 -",1
18B3   31 00 4A               LD   SP,STACK   
18B6   CD 44 0B               CALL   init   
18B9   CD 62 48               CALL   execStr   
18BC   32 20 31 20 2D 00      .CSTR   "2 1 -"   
18C2   CD C5 0A               CALL   flushBuffer   
18C5                          ;*Macro unroll:  expect "2 1 -",1
18C5   E1                     POP   HL   
18C6   E5                     PUSH   HL   
18C7   11 01 00               LD   DE,1   
18CA   B7                     OR   A   
18CB   ED 52                  SBC   HL,DE   
18CD   7D                     LD   A,L   
18CE   B4                     OR   H   
18CF   CA 2B 19               JP   Z,expectM_0_2682S52   
18D2   CD 3D 0B               CALL   printStr   
18D5   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
18E1   CD 3D 0B               CALL   printStr   
18E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18F3   21 01 00               LD   hl,1   
18F6   E5                     PUSH   hl   
18F7   CD 0B 0C               CALL   run   
18FA   2E 00                  .CSTR   "."   
18FC   CD 3D 0B               CALL   printStr   
18FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
190C   E1                     POP   hl   
190D   E5                     PUSH   hl   
190E   E5                     PUSH   hl   
190F   CD 0B 0C               CALL   run   
1912   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1926   CD C5 0A               CALL   flushBuffer   
1929   76                     HALT      
192A   00                     .CSTR      
192B                EXPECTM_0_2682S52:      
192B   E1                     POP   HL   
192C                          ;*Macro unroll:  test "3a= a-- a",2
192C   31 00 4A               LD   SP,STACK   
192F   CD 44 0B               CALL   init   
1932   CD 62 48               CALL   execStr   
1935   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
193F   CD C5 0A               CALL   flushBuffer   
1942                          ;*Macro unroll:  expect "3a= a-- a",2
1942   E1                     POP   HL   
1943   E5                     PUSH   HL   
1944   11 02 00               LD   DE,2   
1947   B7                     OR   A   
1948   ED 52                  SBC   HL,DE   
194A   7D                     LD   A,L   
194B   B4                     OR   H   
194C   CA AC 19               JP   Z,expectM_0_2683S52   
194F   CD 3D 0B               CALL   printStr   
1952   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1962   CD 3D 0B               CALL   printStr   
1965   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1974   21 02 00               LD   hl,2   
1977   E5                     PUSH   hl   
1978   CD 0B 0C               CALL   run   
197B   2E 00                  .CSTR   "."   
197D   CD 3D 0B               CALL   printStr   
1980   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
198D   E1                     POP   hl   
198E   E5                     PUSH   hl   
198F   E5                     PUSH   hl   
1990   CD 0B 0C               CALL   run   
1993   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
19A7   CD C5 0A               CALL   flushBuffer   
19AA   76                     HALT      
19AB   00                     .CSTR      
19AC                EXPECTM_0_2683S52:      
19AC   E1                     POP   HL   
19AD                          ;*Macro unroll:  test "3 5 &", 1
19AD   31 00 4A               LD   SP,STACK   
19B0   CD 44 0B               CALL   init   
19B3   CD 62 48               CALL   execStr   
19B6   33 20 35 20 26 00      .CSTR   "3 5 &"   
19BC   CD C5 0A               CALL   flushBuffer   
19BF                          ;*Macro unroll:  expect "3 5 &",1
19BF   E1                     POP   HL   
19C0   E5                     PUSH   HL   
19C1   11 01 00               LD   DE,1   
19C4   B7                     OR   A   
19C5   ED 52                  SBC   HL,DE   
19C7   7D                     LD   A,L   
19C8   B4                     OR   H   
19C9   CA 25 1A               JP   Z,expectM_0_2684S52   
19CC   CD 3D 0B               CALL   printStr   
19CF   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
19DB   CD 3D 0B               CALL   printStr   
19DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19ED   21 01 00               LD   hl,1   
19F0   E5                     PUSH   hl   
19F1   CD 0B 0C               CALL   run   
19F4   2E 00                  .CSTR   "."   
19F6   CD 3D 0B               CALL   printStr   
19F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A06   E1                     POP   hl   
1A07   E5                     PUSH   hl   
1A08   E5                     PUSH   hl   
1A09   CD 0B 0C               CALL   run   
1A0C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1A20   CD C5 0A               CALL   flushBuffer   
1A23   76                     HALT      
1A24   00                     .CSTR      
1A25                EXPECTM_0_2684S52:      
1A25   E1                     POP   HL   
1A26                          ;*Macro unroll:  test "3 5 |", 7
1A26   31 00 4A               LD   SP,STACK   
1A29   CD 44 0B               CALL   init   
1A2C   CD 62 48               CALL   execStr   
1A2F   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1A35   CD C5 0A               CALL   flushBuffer   
1A38                          ;*Macro unroll:  expect "3 5 |",7
1A38   E1                     POP   HL   
1A39   E5                     PUSH   HL   
1A3A   11 07 00               LD   DE,7   
1A3D   B7                     OR   A   
1A3E   ED 52                  SBC   HL,DE   
1A40   7D                     LD   A,L   
1A41   B4                     OR   H   
1A42   CA 9E 1A               JP   Z,expectM_0_2685S52   
1A45   CD 3D 0B               CALL   printStr   
1A48   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1A54   CD 3D 0B               CALL   printStr   
1A57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A66   21 07 00               LD   hl,7   
1A69   E5                     PUSH   hl   
1A6A   CD 0B 0C               CALL   run   
1A6D   2E 00                  .CSTR   "."   
1A6F   CD 3D 0B               CALL   printStr   
1A72   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A7F   E1                     POP   hl   
1A80   E5                     PUSH   hl   
1A81   E5                     PUSH   hl   
1A82   CD 0B 0C               CALL   run   
1A85   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1A99   CD C5 0A               CALL   flushBuffer   
1A9C   76                     HALT      
1A9D   00                     .CSTR      
1A9E                EXPECTM_0_2685S52:      
1A9E   E1                     POP   HL   
1A9F                          ;*Macro unroll:  test "3 5 /x", 6
1A9F   31 00 4A               LD   SP,STACK   
1AA2   CD 44 0B               CALL   init   
1AA5   CD 62 48               CALL   execStr   
1AA8   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
1AAF   CD C5 0A               CALL   flushBuffer   
1AB2                          ;*Macro unroll:  expect "3 5 /x",6
1AB2   E1                     POP   HL   
1AB3   E5                     PUSH   HL   
1AB4   11 06 00               LD   DE,6   
1AB7   B7                     OR   A   
1AB8   ED 52                  SBC   HL,DE   
1ABA   7D                     LD   A,L   
1ABB   B4                     OR   H   
1ABC   CA 19 1B               JP   Z,expectM_0_2686S52   
1ABF   CD 3D 0B               CALL   printStr   
1AC2   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1ACF   CD 3D 0B               CALL   printStr   
1AD2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AE1   21 06 00               LD   hl,6   
1AE4   E5                     PUSH   hl   
1AE5   CD 0B 0C               CALL   run   
1AE8   2E 00                  .CSTR   "."   
1AEA   CD 3D 0B               CALL   printStr   
1AED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AFA   E1                     POP   hl   
1AFB   E5                     PUSH   hl   
1AFC   E5                     PUSH   hl   
1AFD   CD 0B 0C               CALL   run   
1B00   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1B14   CD C5 0A               CALL   flushBuffer   
1B17   76                     HALT      
1B18   00                     .CSTR      
1B19                EXPECTM_0_2686S52:      
1B19   E1                     POP   HL   
1B1A                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1B1A   31 00 4A               LD   SP,STACK   
1B1D   CD 44 0B               CALL   init   
1B20   CD 62 48               CALL   execStr   
1B23   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1B32   CD C5 0A               CALL   flushBuffer   
1B35                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1B35   E1                     POP   HL   
1B36   E5                     PUSH   HL   
1B37   11 06 00               LD   DE,6   
1B3A   B7                     OR   A   
1B3B   ED 52                  SBC   HL,DE   
1B3D   7D                     LD   A,L   
1B3E   B4                     OR   H   
1B3F   CA A4 1B               JP   Z,expectM_0_2687S52   
1B42   CD 3D 0B               CALL   printStr   
1B45   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1B5A   CD 3D 0B               CALL   printStr   
1B5D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B6C   21 06 00               LD   hl,6   
1B6F   E5                     PUSH   hl   
1B70   CD 0B 0C               CALL   run   
1B73   2E 00                  .CSTR   "."   
1B75   CD 3D 0B               CALL   printStr   
1B78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B85   E1                     POP   hl   
1B86   E5                     PUSH   hl   
1B87   E5                     PUSH   hl   
1B88   CD 0B 0C               CALL   run   
1B8B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1B9F   CD C5 0A               CALL   flushBuffer   
1BA2   76                     HALT      
1BA3   00                     .CSTR      
1BA4                EXPECTM_0_2687S52:      
1BA4   E1                     POP   HL   
1BA5                          ;*Macro unroll:  test "2 3 *", 6
1BA5   31 00 4A               LD   SP,STACK   
1BA8   CD 44 0B               CALL   init   
1BAB   CD 62 48               CALL   execStr   
1BAE   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1BB4   CD C5 0A               CALL   flushBuffer   
1BB7                          ;*Macro unroll:  expect "2 3 *",6
1BB7   E1                     POP   HL   
1BB8   E5                     PUSH   HL   
1BB9   11 06 00               LD   DE,6   
1BBC   B7                     OR   A   
1BBD   ED 52                  SBC   HL,DE   
1BBF   7D                     LD   A,L   
1BC0   B4                     OR   H   
1BC1   CA 1D 1C               JP   Z,expectM_0_2688S52   
1BC4   CD 3D 0B               CALL   printStr   
1BC7   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1BD3   CD 3D 0B               CALL   printStr   
1BD6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BE5   21 06 00               LD   hl,6   
1BE8   E5                     PUSH   hl   
1BE9   CD 0B 0C               CALL   run   
1BEC   2E 00                  .CSTR   "."   
1BEE   CD 3D 0B               CALL   printStr   
1BF1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BFE   E1                     POP   hl   
1BFF   E5                     PUSH   hl   
1C00   E5                     PUSH   hl   
1C01   CD 0B 0C               CALL   run   
1C04   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1C18   CD C5 0A               CALL   flushBuffer   
1C1B   76                     HALT      
1C1C   00                     .CSTR      
1C1D                EXPECTM_0_2688S52:      
1C1D   E1                     POP   HL   
1C1E                          ;*Macro unroll:  test "1 2 3 + *", 5
1C1E   31 00 4A               LD   SP,STACK   
1C21   CD 44 0B               CALL   init   
1C24   CD 62 48               CALL   execStr   
1C27   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1C31   CD C5 0A               CALL   flushBuffer   
1C34                          ;*Macro unroll:  expect "1 2 3 + *",5
1C34   E1                     POP   HL   
1C35   E5                     PUSH   HL   
1C36   11 05 00               LD   DE,5   
1C39   B7                     OR   A   
1C3A   ED 52                  SBC   HL,DE   
1C3C   7D                     LD   A,L   
1C3D   B4                     OR   H   
1C3E   CA 9E 1C               JP   Z,expectM_0_2689S52   
1C41   CD 3D 0B               CALL   printStr   
1C44   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1C54   CD 3D 0B               CALL   printStr   
1C57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C66   21 05 00               LD   hl,5   
1C69   E5                     PUSH   hl   
1C6A   CD 0B 0C               CALL   run   
1C6D   2E 00                  .CSTR   "."   
1C6F   CD 3D 0B               CALL   printStr   
1C72   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7F   E1                     POP   hl   
1C80   E5                     PUSH   hl   
1C81   E5                     PUSH   hl   
1C82   CD 0B 0C               CALL   run   
1C85   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1C99   CD C5 0A               CALL   flushBuffer   
1C9C   76                     HALT      
1C9D   00                     .CSTR      
1C9E                EXPECTM_0_2689S52:      
1C9E   E1                     POP   HL   
1C9F                          ;*Macro unroll:  test "7 3 /", 2
1C9F   31 00 4A               LD   SP,STACK   
1CA2   CD 44 0B               CALL   init   
1CA5   CD 62 48               CALL   execStr   
1CA8   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1CAE   CD C5 0A               CALL   flushBuffer   
1CB1                          ;*Macro unroll:  expect "7 3 /",2
1CB1   E1                     POP   HL   
1CB2   E5                     PUSH   HL   
1CB3   11 02 00               LD   DE,2   
1CB6   B7                     OR   A   
1CB7   ED 52                  SBC   HL,DE   
1CB9   7D                     LD   A,L   
1CBA   B4                     OR   H   
1CBB   CA 17 1D               JP   Z,expectM_0_2690S52   
1CBE   CD 3D 0B               CALL   printStr   
1CC1   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1CCD   CD 3D 0B               CALL   printStr   
1CD0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CDF   21 02 00               LD   hl,2   
1CE2   E5                     PUSH   hl   
1CE3   CD 0B 0C               CALL   run   
1CE6   2E 00                  .CSTR   "."   
1CE8   CD 3D 0B               CALL   printStr   
1CEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CF8   E1                     POP   hl   
1CF9   E5                     PUSH   hl   
1CFA   E5                     PUSH   hl   
1CFB   CD 0B 0C               CALL   run   
1CFE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D12   CD C5 0A               CALL   flushBuffer   
1D15   76                     HALT      
1D16   00                     .CSTR      
1D17                EXPECTM_0_2690S52:      
1D17   E1                     POP   HL   
1D18                          ;*Macro unroll:  test "7 3 / _", 1
1D18   31 00 4A               LD   SP,STACK   
1D1B   CD 44 0B               CALL   init   
1D1E   CD 62 48               CALL   execStr   
1D21   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1D29   CD C5 0A               CALL   flushBuffer   
1D2C                          ;*Macro unroll:  expect "7 3 / _",1
1D2C   E1                     POP   HL   
1D2D   E5                     PUSH   HL   
1D2E   11 01 00               LD   DE,1   
1D31   B7                     OR   A   
1D32   ED 52                  SBC   HL,DE   
1D34   7D                     LD   A,L   
1D35   B4                     OR   H   
1D36   CA 94 1D               JP   Z,expectM_0_2691S52   
1D39   CD 3D 0B               CALL   printStr   
1D3C   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1D4A   CD 3D 0B               CALL   printStr   
1D4D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D5C   21 01 00               LD   hl,1   
1D5F   E5                     PUSH   hl   
1D60   CD 0B 0C               CALL   run   
1D63   2E 00                  .CSTR   "."   
1D65   CD 3D 0B               CALL   printStr   
1D68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D75   E1                     POP   hl   
1D76   E5                     PUSH   hl   
1D77   E5                     PUSH   hl   
1D78   CD 0B 0C               CALL   run   
1D7B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D8F   CD C5 0A               CALL   flushBuffer   
1D92   76                     HALT      
1D93   00                     .CSTR      
1D94                EXPECTM_0_2691S52:      
1D94   E1                     POP   HL   
1D95                          ;*Macro unroll:  test "7 3 /", 2
1D95   31 00 4A               LD   SP,STACK   
1D98   CD 44 0B               CALL   init   
1D9B   CD 62 48               CALL   execStr   
1D9E   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1DA4   CD C5 0A               CALL   flushBuffer   
1DA7                          ;*Macro unroll:  expect "7 3 /",2
1DA7   E1                     POP   HL   
1DA8   E5                     PUSH   HL   
1DA9   11 02 00               LD   DE,2   
1DAC   B7                     OR   A   
1DAD   ED 52                  SBC   HL,DE   
1DAF   7D                     LD   A,L   
1DB0   B4                     OR   H   
1DB1   CA 0D 1E               JP   Z,expectM_0_2692S52   
1DB4   CD 3D 0B               CALL   printStr   
1DB7   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1DC3   CD 3D 0B               CALL   printStr   
1DC6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD5   21 02 00               LD   hl,2   
1DD8   E5                     PUSH   hl   
1DD9   CD 0B 0C               CALL   run   
1DDC   2E 00                  .CSTR   "."   
1DDE   CD 3D 0B               CALL   printStr   
1DE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DEE   E1                     POP   hl   
1DEF   E5                     PUSH   hl   
1DF0   E5                     PUSH   hl   
1DF1   CD 0B 0C               CALL   run   
1DF4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E08   CD C5 0A               CALL   flushBuffer   
1E0B   76                     HALT      
1E0C   00                     .CSTR      
1E0D                EXPECTM_0_2692S52:      
1E0D   E1                     POP   HL   
1E0E                          ;*Macro unroll:  test "2 3 ==", FALSE
1E0E   31 00 4A               LD   SP,STACK   
1E11   CD 44 0B               CALL   init   
1E14   CD 62 48               CALL   execStr   
1E17   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1E1E   CD C5 0A               CALL   flushBuffer   
1E21                          ;*Macro unroll:  expect "2 3 ==",FALSE
1E21   E1                     POP   HL   
1E22   E5                     PUSH   HL   
1E23   11 00 00               LD   DE,FALSE   
1E26   B7                     OR   A   
1E27   ED 52                  SBC   HL,DE   
1E29   7D                     LD   A,L   
1E2A   B4                     OR   H   
1E2B   CA 88 1E               JP   Z,expectM_0_2693S52   
1E2E   CD 3D 0B               CALL   printStr   
1E31   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1E3E   CD 3D 0B               CALL   printStr   
1E41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E50   21 00 00               LD   hl,FALSE   
1E53   E5                     PUSH   hl   
1E54   CD 0B 0C               CALL   run   
1E57   2E 00                  .CSTR   "."   
1E59   CD 3D 0B               CALL   printStr   
1E5C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E69   E1                     POP   hl   
1E6A   E5                     PUSH   hl   
1E6B   E5                     PUSH   hl   
1E6C   CD 0B 0C               CALL   run   
1E6F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E83   CD C5 0A               CALL   flushBuffer   
1E86   76                     HALT      
1E87   00                     .CSTR      
1E88                EXPECTM_0_2693S52:      
1E88   E1                     POP   HL   
1E89                          ;*Macro unroll:  test "3 3 ==", TRUE
1E89   31 00 4A               LD   SP,STACK   
1E8C   CD 44 0B               CALL   init   
1E8F   CD 62 48               CALL   execStr   
1E92   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1E99   CD C5 0A               CALL   flushBuffer   
1E9C                          ;*Macro unroll:  expect "3 3 ==",TRUE
1E9C   E1                     POP   HL   
1E9D   E5                     PUSH   HL   
1E9E   11 FF FF               LD   DE,TRUE   
1EA1   B7                     OR   A   
1EA2   ED 52                  SBC   HL,DE   
1EA4   7D                     LD   A,L   
1EA5   B4                     OR   H   
1EA6   CA 03 1F               JP   Z,expectM_0_2694S52   
1EA9   CD 3D 0B               CALL   printStr   
1EAC   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1EB9   CD 3D 0B               CALL   printStr   
1EBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ECB   21 FF FF               LD   hl,TRUE   
1ECE   E5                     PUSH   hl   
1ECF   CD 0B 0C               CALL   run   
1ED2   2E 00                  .CSTR   "."   
1ED4   CD 3D 0B               CALL   printStr   
1ED7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EE4   E1                     POP   hl   
1EE5   E5                     PUSH   hl   
1EE6   E5                     PUSH   hl   
1EE7   CD 0B 0C               CALL   run   
1EEA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1EFE   CD C5 0A               CALL   flushBuffer   
1F01   76                     HALT      
1F02   00                     .CSTR      
1F03                EXPECTM_0_2694S52:      
1F03   E1                     POP   HL   
1F04                          ;*Macro unroll:  test "1 2 <", TRUE
1F04   31 00 4A               LD   SP,STACK   
1F07   CD 44 0B               CALL   init   
1F0A   CD 62 48               CALL   execStr   
1F0D   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1F13   CD C5 0A               CALL   flushBuffer   
1F16                          ;*Macro unroll:  expect "1 2 <",TRUE
1F16   E1                     POP   HL   
1F17   E5                     PUSH   HL   
1F18   11 FF FF               LD   DE,TRUE   
1F1B   B7                     OR   A   
1F1C   ED 52                  SBC   HL,DE   
1F1E   7D                     LD   A,L   
1F1F   B4                     OR   H   
1F20   CA 7C 1F               JP   Z,expectM_0_2695S52   
1F23   CD 3D 0B               CALL   printStr   
1F26   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1F32   CD 3D 0B               CALL   printStr   
1F35   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F44   21 FF FF               LD   hl,TRUE   
1F47   E5                     PUSH   hl   
1F48   CD 0B 0C               CALL   run   
1F4B   2E 00                  .CSTR   "."   
1F4D   CD 3D 0B               CALL   printStr   
1F50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F5D   E1                     POP   hl   
1F5E   E5                     PUSH   hl   
1F5F   E5                     PUSH   hl   
1F60   CD 0B 0C               CALL   run   
1F63   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1F77   CD C5 0A               CALL   flushBuffer   
1F7A   76                     HALT      
1F7B   00                     .CSTR      
1F7C                EXPECTM_0_2695S52:      
1F7C   E1                     POP   HL   
1F7D                          ;*Macro unroll:  test "2 1 <", FALSE
1F7D   31 00 4A               LD   SP,STACK   
1F80   CD 44 0B               CALL   init   
1F83   CD 62 48               CALL   execStr   
1F86   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1F8C   CD C5 0A               CALL   flushBuffer   
1F8F                          ;*Macro unroll:  expect "2 1 <",FALSE
1F8F   E1                     POP   HL   
1F90   E5                     PUSH   HL   
1F91   11 00 00               LD   DE,FALSE   
1F94   B7                     OR   A   
1F95   ED 52                  SBC   HL,DE   
1F97   7D                     LD   A,L   
1F98   B4                     OR   H   
1F99   CA F5 1F               JP   Z,expectM_0_2696S52   
1F9C   CD 3D 0B               CALL   printStr   
1F9F   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1FAB   CD 3D 0B               CALL   printStr   
1FAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FBD   21 00 00               LD   hl,FALSE   
1FC0   E5                     PUSH   hl   
1FC1   CD 0B 0C               CALL   run   
1FC4   2E 00                  .CSTR   "."   
1FC6   CD 3D 0B               CALL   printStr   
1FC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FD6   E1                     POP   hl   
1FD7   E5                     PUSH   hl   
1FD8   E5                     PUSH   hl   
1FD9   CD 0B 0C               CALL   run   
1FDC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1FF0   CD C5 0A               CALL   flushBuffer   
1FF3   76                     HALT      
1FF4   00                     .CSTR      
1FF5                EXPECTM_0_2696S52:      
1FF5   E1                     POP   HL   
1FF6                          ;*Macro unroll:  test "2 3 <", TRUE
1FF6   31 00 4A               LD   SP,STACK   
1FF9   CD 44 0B               CALL   init   
1FFC   CD 62 48               CALL   execStr   
1FFF   32 20 33 20 3C 00      .CSTR   "2 3 <"   
2005   CD C5 0A               CALL   flushBuffer   
2008                          ;*Macro unroll:  expect "2 3 <",TRUE
2008   E1                     POP   HL   
2009   E5                     PUSH   HL   
200A   11 FF FF               LD   DE,TRUE   
200D   B7                     OR   A   
200E   ED 52                  SBC   HL,DE   
2010   7D                     LD   A,L   
2011   B4                     OR   H   
2012   CA 6E 20               JP   Z,expectM_0_2697S52   
2015   CD 3D 0B               CALL   printStr   
2018   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2024   CD 3D 0B               CALL   printStr   
2027   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2036   21 FF FF               LD   hl,TRUE   
2039   E5                     PUSH   hl   
203A   CD 0B 0C               CALL   run   
203D   2E 00                  .CSTR   "."   
203F   CD 3D 0B               CALL   printStr   
2042   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
204F   E1                     POP   hl   
2050   E5                     PUSH   hl   
2051   E5                     PUSH   hl   
2052   CD 0B 0C               CALL   run   
2055   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2069   CD C5 0A               CALL   flushBuffer   
206C   76                     HALT      
206D   00                     .CSTR      
206E                EXPECTM_0_2697S52:      
206E   E1                     POP   HL   
206F                          ;*Macro unroll:  test "3 3 <", FALSE
206F   31 00 4A               LD   SP,STACK   
2072   CD 44 0B               CALL   init   
2075   CD 62 48               CALL   execStr   
2078   33 20 33 20 3C 00      .CSTR   "3 3 <"   
207E   CD C5 0A               CALL   flushBuffer   
2081                          ;*Macro unroll:  expect "3 3 <",FALSE
2081   E1                     POP   HL   
2082   E5                     PUSH   HL   
2083   11 00 00               LD   DE,FALSE   
2086   B7                     OR   A   
2087   ED 52                  SBC   HL,DE   
2089   7D                     LD   A,L   
208A   B4                     OR   H   
208B   CA E7 20               JP   Z,expectM_0_2698S52   
208E   CD 3D 0B               CALL   printStr   
2091   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
209D   CD 3D 0B               CALL   printStr   
20A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20AF   21 00 00               LD   hl,FALSE   
20B2   E5                     PUSH   hl   
20B3   CD 0B 0C               CALL   run   
20B6   2E 00                  .CSTR   "."   
20B8   CD 3D 0B               CALL   printStr   
20BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20C8   E1                     POP   hl   
20C9   E5                     PUSH   hl   
20CA   E5                     PUSH   hl   
20CB   CD 0B 0C               CALL   run   
20CE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
20E2   CD C5 0A               CALL   flushBuffer   
20E5   76                     HALT      
20E6   00                     .CSTR      
20E7                EXPECTM_0_2698S52:      
20E7   E1                     POP   HL   
20E8                          ;*Macro unroll:  test "1 2 >", FALSE
20E8   31 00 4A               LD   SP,STACK   
20EB   CD 44 0B               CALL   init   
20EE   CD 62 48               CALL   execStr   
20F1   31 20 32 20 3E 00      .CSTR   "1 2 >"   
20F7   CD C5 0A               CALL   flushBuffer   
20FA                          ;*Macro unroll:  expect "1 2 >",FALSE
20FA   E1                     POP   HL   
20FB   E5                     PUSH   HL   
20FC   11 00 00               LD   DE,FALSE   
20FF   B7                     OR   A   
2100   ED 52                  SBC   HL,DE   
2102   7D                     LD   A,L   
2103   B4                     OR   H   
2104   CA 60 21               JP   Z,expectM_0_2699S52   
2107   CD 3D 0B               CALL   printStr   
210A   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2116   CD 3D 0B               CALL   printStr   
2119   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2128   21 00 00               LD   hl,FALSE   
212B   E5                     PUSH   hl   
212C   CD 0B 0C               CALL   run   
212F   2E 00                  .CSTR   "."   
2131   CD 3D 0B               CALL   printStr   
2134   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2141   E1                     POP   hl   
2142   E5                     PUSH   hl   
2143   E5                     PUSH   hl   
2144   CD 0B 0C               CALL   run   
2147   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
215B   CD C5 0A               CALL   flushBuffer   
215E   76                     HALT      
215F   00                     .CSTR      
2160                EXPECTM_0_2699S52:      
2160   E1                     POP   HL   
2161                          ;*Macro unroll:  test "2 1 >", TRUE
2161   31 00 4A               LD   SP,STACK   
2164   CD 44 0B               CALL   init   
2167   CD 62 48               CALL   execStr   
216A   32 20 31 20 3E 00      .CSTR   "2 1 >"   
2170   CD C5 0A               CALL   flushBuffer   
2173                          ;*Macro unroll:  expect "2 1 >",TRUE
2173   E1                     POP   HL   
2174   E5                     PUSH   HL   
2175   11 FF FF               LD   DE,TRUE   
2178   B7                     OR   A   
2179   ED 52                  SBC   HL,DE   
217B   7D                     LD   A,L   
217C   B4                     OR   H   
217D   CA D9 21               JP   Z,expectM_0_2700S52   
2180   CD 3D 0B               CALL   printStr   
2183   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
218F   CD 3D 0B               CALL   printStr   
2192   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21A1   21 FF FF               LD   hl,TRUE   
21A4   E5                     PUSH   hl   
21A5   CD 0B 0C               CALL   run   
21A8   2E 00                  .CSTR   "."   
21AA   CD 3D 0B               CALL   printStr   
21AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21BA   E1                     POP   hl   
21BB   E5                     PUSH   hl   
21BC   E5                     PUSH   hl   
21BD   CD 0B 0C               CALL   run   
21C0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
21D4   CD C5 0A               CALL   flushBuffer   
21D7   76                     HALT      
21D8   00                     .CSTR      
21D9                EXPECTM_0_2700S52:      
21D9   E1                     POP   HL   
21DA                          ;*Macro unroll:  test "3 3 >", FALSE
21DA   31 00 4A               LD   SP,STACK   
21DD   CD 44 0B               CALL   init   
21E0   CD 62 48               CALL   execStr   
21E3   33 20 33 20 3E 00      .CSTR   "3 3 >"   
21E9   CD C5 0A               CALL   flushBuffer   
21EC                          ;*Macro unroll:  expect "3 3 >",FALSE
21EC   E1                     POP   HL   
21ED   E5                     PUSH   HL   
21EE   11 00 00               LD   DE,FALSE   
21F1   B7                     OR   A   
21F2   ED 52                  SBC   HL,DE   
21F4   7D                     LD   A,L   
21F5   B4                     OR   H   
21F6   CA 52 22               JP   Z,expectM_0_2701S52   
21F9   CD 3D 0B               CALL   printStr   
21FC   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2208   CD 3D 0B               CALL   printStr   
220B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
221A   21 00 00               LD   hl,FALSE   
221D   E5                     PUSH   hl   
221E   CD 0B 0C               CALL   run   
2221   2E 00                  .CSTR   "."   
2223   CD 3D 0B               CALL   printStr   
2226   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2233   E1                     POP   hl   
2234   E5                     PUSH   hl   
2235   E5                     PUSH   hl   
2236   CD 0B 0C               CALL   run   
2239   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
224D   CD C5 0A               CALL   flushBuffer   
2250   76                     HALT      
2251   00                     .CSTR      
2252                EXPECTM_0_2701S52:      
2252   E1                     POP   HL   
2253                          ;*Macro unroll:  test "4 3 >", TRUE
2253   31 00 4A               LD   SP,STACK   
2256   CD 44 0B               CALL   init   
2259   CD 62 48               CALL   execStr   
225C   34 20 33 20 3E 00      .CSTR   "4 3 >"   
2262   CD C5 0A               CALL   flushBuffer   
2265                          ;*Macro unroll:  expect "4 3 >",TRUE
2265   E1                     POP   HL   
2266   E5                     PUSH   HL   
2267   11 FF FF               LD   DE,TRUE   
226A   B7                     OR   A   
226B   ED 52                  SBC   HL,DE   
226D   7D                     LD   A,L   
226E   B4                     OR   H   
226F   CA CB 22               JP   Z,expectM_0_2702S52   
2272   CD 3D 0B               CALL   printStr   
2275   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2281   CD 3D 0B               CALL   printStr   
2284   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2293   21 FF FF               LD   hl,TRUE   
2296   E5                     PUSH   hl   
2297   CD 0B 0C               CALL   run   
229A   2E 00                  .CSTR   "."   
229C   CD 3D 0B               CALL   printStr   
229F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22AC   E1                     POP   hl   
22AD   E5                     PUSH   hl   
22AE   E5                     PUSH   hl   
22AF   CD 0B 0C               CALL   run   
22B2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
22C6   CD C5 0A               CALL   flushBuffer   
22C9   76                     HALT      
22CA   00                     .CSTR      
22CB                EXPECTM_0_2702S52:      
22CB   E1                     POP   HL   
22CC                          ;*Macro unroll:  test "2 2 <=", TRUE
22CC   31 00 4A               LD   SP,STACK   
22CF   CD 44 0B               CALL   init   
22D2   CD 62 48               CALL   execStr   
22D5   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
22DC   CD C5 0A               CALL   flushBuffer   
22DF                          ;*Macro unroll:  expect "2 2 <=",TRUE
22DF   E1                     POP   HL   
22E0   E5                     PUSH   HL   
22E1   11 FF FF               LD   DE,TRUE   
22E4   B7                     OR   A   
22E5   ED 52                  SBC   HL,DE   
22E7   7D                     LD   A,L   
22E8   B4                     OR   H   
22E9   CA 46 23               JP   Z,expectM_0_2703S52   
22EC   CD 3D 0B               CALL   printStr   
22EF   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
22FC   CD 3D 0B               CALL   printStr   
22FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
230E   21 FF FF               LD   hl,TRUE   
2311   E5                     PUSH   hl   
2312   CD 0B 0C               CALL   run   
2315   2E 00                  .CSTR   "."   
2317   CD 3D 0B               CALL   printStr   
231A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2327   E1                     POP   hl   
2328   E5                     PUSH   hl   
2329   E5                     PUSH   hl   
232A   CD 0B 0C               CALL   run   
232D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2341   CD C5 0A               CALL   flushBuffer   
2344   76                     HALT      
2345   00                     .CSTR      
2346                EXPECTM_0_2703S52:      
2346   E1                     POP   HL   
2347                          ;*Macro unroll:  test "2 2 >=", TRUE
2347   31 00 4A               LD   SP,STACK   
234A   CD 44 0B               CALL   init   
234D   CD 62 48               CALL   execStr   
2350   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2357   CD C5 0A               CALL   flushBuffer   
235A                          ;*Macro unroll:  expect "2 2 >=",TRUE
235A   E1                     POP   HL   
235B   E5                     PUSH   HL   
235C   11 FF FF               LD   DE,TRUE   
235F   B7                     OR   A   
2360   ED 52                  SBC   HL,DE   
2362   7D                     LD   A,L   
2363   B4                     OR   H   
2364   CA C1 23               JP   Z,expectM_0_2704S52   
2367   CD 3D 0B               CALL   printStr   
236A   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2377   CD 3D 0B               CALL   printStr   
237A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2389   21 FF FF               LD   hl,TRUE   
238C   E5                     PUSH   hl   
238D   CD 0B 0C               CALL   run   
2390   2E 00                  .CSTR   "."   
2392   CD 3D 0B               CALL   printStr   
2395   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23A2   E1                     POP   hl   
23A3   E5                     PUSH   hl   
23A4   E5                     PUSH   hl   
23A5   CD 0B 0C               CALL   run   
23A8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
23BC   CD C5 0A               CALL   flushBuffer   
23BF   76                     HALT      
23C0   00                     .CSTR      
23C1                EXPECTM_0_2704S52:      
23C1   E1                     POP   HL   
23C2                          ;*Macro unroll:  test "3 1 <<", 6
23C2   31 00 4A               LD   SP,STACK   
23C5   CD 44 0B               CALL   init   
23C8   CD 62 48               CALL   execStr   
23CB   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
23D2   CD C5 0A               CALL   flushBuffer   
23D5                          ;*Macro unroll:  expect "3 1 <<",6
23D5   E1                     POP   HL   
23D6   E5                     PUSH   HL   
23D7   11 06 00               LD   DE,6   
23DA   B7                     OR   A   
23DB   ED 52                  SBC   HL,DE   
23DD   7D                     LD   A,L   
23DE   B4                     OR   H   
23DF   CA 3C 24               JP   Z,expectM_0_2705S52   
23E2   CD 3D 0B               CALL   printStr   
23E5   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
23F2   CD 3D 0B               CALL   printStr   
23F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2404   21 06 00               LD   hl,6   
2407   E5                     PUSH   hl   
2408   CD 0B 0C               CALL   run   
240B   2E 00                  .CSTR   "."   
240D   CD 3D 0B               CALL   printStr   
2410   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
241D   E1                     POP   hl   
241E   E5                     PUSH   hl   
241F   E5                     PUSH   hl   
2420   CD 0B 0C               CALL   run   
2423   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2437   CD C5 0A               CALL   flushBuffer   
243A   76                     HALT      
243B   00                     .CSTR      
243C                EXPECTM_0_2705S52:      
243C   E1                     POP   HL   
243D                          ;*Macro unroll:  test "10 1 >>", 5
243D   31 00 4A               LD   SP,STACK   
2440   CD 44 0B               CALL   init   
2443   CD 62 48               CALL   execStr   
2446   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
244E   CD C5 0A               CALL   flushBuffer   
2451                          ;*Macro unroll:  expect "10 1 >>",5
2451   E1                     POP   HL   
2452   E5                     PUSH   HL   
2453   11 05 00               LD   DE,5   
2456   B7                     OR   A   
2457   ED 52                  SBC   HL,DE   
2459   7D                     LD   A,L   
245A   B4                     OR   H   
245B   CA B9 24               JP   Z,expectM_0_2706S52   
245E   CD 3D 0B               CALL   printStr   
2461   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
246F   CD 3D 0B               CALL   printStr   
2472   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2481   21 05 00               LD   hl,5   
2484   E5                     PUSH   hl   
2485   CD 0B 0C               CALL   run   
2488   2E 00                  .CSTR   "."   
248A   CD 3D 0B               CALL   printStr   
248D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
249A   E1                     POP   hl   
249B   E5                     PUSH   hl   
249C   E5                     PUSH   hl   
249D   CD 0B 0C               CALL   run   
24A0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
24B4   CD C5 0A               CALL   flushBuffer   
24B7   76                     HALT      
24B8   00                     .CSTR      
24B9                EXPECTM_0_2706S52:      
24B9   E1                     POP   HL   
24BA                          ;*Macro unroll:  test "1 x = x", 1
24BA   31 00 4A               LD   SP,STACK   
24BD   CD 44 0B               CALL   init   
24C0   CD 62 48               CALL   execStr   
24C3   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
24CB   CD C5 0A               CALL   flushBuffer   
24CE                          ;*Macro unroll:  expect "1 x = x",1
24CE   E1                     POP   HL   
24CF   E5                     PUSH   HL   
24D0   11 01 00               LD   DE,1   
24D3   B7                     OR   A   
24D4   ED 52                  SBC   HL,DE   
24D6   7D                     LD   A,L   
24D7   B4                     OR   H   
24D8   CA 36 25               JP   Z,expectM_0_2707S52   
24DB   CD 3D 0B               CALL   printStr   
24DE   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
24EC   CD 3D 0B               CALL   printStr   
24EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24FE   21 01 00               LD   hl,1   
2501   E5                     PUSH   hl   
2502   CD 0B 0C               CALL   run   
2505   2E 00                  .CSTR   "."   
2507   CD 3D 0B               CALL   printStr   
250A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2517   E1                     POP   hl   
2518   E5                     PUSH   hl   
2519   E5                     PUSH   hl   
251A   CD 0B 0C               CALL   run   
251D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2531   CD C5 0A               CALL   flushBuffer   
2534   76                     HALT      
2535   00                     .CSTR      
2536                EXPECTM_0_2707S52:      
2536   E1                     POP   HL   
2537                          ;*Macro unroll:  test "1{}^", 1
2537   31 00 4A               LD   SP,STACK   
253A   CD 44 0B               CALL   init   
253D   CD 62 48               CALL   execStr   
2540   31 7B 7D 5E 00         .CSTR   "1{}^"   
2545   CD C5 0A               CALL   flushBuffer   
2548                          ;*Macro unroll:  expect "1{}^",1
2548   E1                     POP   HL   
2549   E5                     PUSH   HL   
254A   11 01 00               LD   DE,1   
254D   B7                     OR   A   
254E   ED 52                  SBC   HL,DE   
2550   7D                     LD   A,L   
2551   B4                     OR   H   
2552   CA AD 25               JP   Z,expectM_0_2708S52   
2555   CD 3D 0B               CALL   printStr   
2558   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2563   CD 3D 0B               CALL   printStr   
2566   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2575   21 01 00               LD   hl,1   
2578   E5                     PUSH   hl   
2579   CD 0B 0C               CALL   run   
257C   2E 00                  .CSTR   "."   
257E   CD 3D 0B               CALL   printStr   
2581   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
258E   E1                     POP   hl   
258F   E5                     PUSH   hl   
2590   E5                     PUSH   hl   
2591   CD 0B 0C               CALL   run   
2594   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
25A8   CD C5 0A               CALL   flushBuffer   
25AB   76                     HALT      
25AC   00                     .CSTR      
25AD                EXPECTM_0_2708S52:      
25AD   E1                     POP   HL   
25AE                          ;*Macro unroll:  test "{1}^", 1
25AE   31 00 4A               LD   SP,STACK   
25B1   CD 44 0B               CALL   init   
25B4   CD 62 48               CALL   execStr   
25B7   7B 31 7D 5E 00         .CSTR   "{1}^"   
25BC   CD C5 0A               CALL   flushBuffer   
25BF                          ;*Macro unroll:  expect "{1}^",1
25BF   E1                     POP   HL   
25C0   E5                     PUSH   HL   
25C1   11 01 00               LD   DE,1   
25C4   B7                     OR   A   
25C5   ED 52                  SBC   HL,DE   
25C7   7D                     LD   A,L   
25C8   B4                     OR   H   
25C9   CA 24 26               JP   Z,expectM_0_2709S52   
25CC   CD 3D 0B               CALL   printStr   
25CF   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
25DA   CD 3D 0B               CALL   printStr   
25DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25EC   21 01 00               LD   hl,1   
25EF   E5                     PUSH   hl   
25F0   CD 0B 0C               CALL   run   
25F3   2E 00                  .CSTR   "."   
25F5   CD 3D 0B               CALL   printStr   
25F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2605   E1                     POP   hl   
2606   E5                     PUSH   hl   
2607   E5                     PUSH   hl   
2608   CD 0B 0C               CALL   run   
260B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
261F   CD C5 0A               CALL   flushBuffer   
2622   76                     HALT      
2623   00                     .CSTR      
2624                EXPECTM_0_2709S52:      
2624   E1                     POP   HL   
2625                          ;*Macro unroll:  test "{{1}^}^", 1
2625   31 00 4A               LD   SP,STACK   
2628   CD 44 0B               CALL   init   
262B   CD 62 48               CALL   execStr   
262E   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
2636   CD C5 0A               CALL   flushBuffer   
2639                          ;*Macro unroll:  expect "{{1}^}^",1
2639   E1                     POP   HL   
263A   E5                     PUSH   HL   
263B   11 01 00               LD   DE,1   
263E   B7                     OR   A   
263F   ED 52                  SBC   HL,DE   
2641   7D                     LD   A,L   
2642   B4                     OR   H   
2643   CA A1 26               JP   Z,expectM_0_2710S52   
2646   CD 3D 0B               CALL   printStr   
2649   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2657   CD 3D 0B               CALL   printStr   
265A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2669   21 01 00               LD   hl,1   
266C   E5                     PUSH   hl   
266D   CD 0B 0C               CALL   run   
2670   2E 00                  .CSTR   "."   
2672   CD 3D 0B               CALL   printStr   
2675   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2682   E1                     POP   hl   
2683   E5                     PUSH   hl   
2684   E5                     PUSH   hl   
2685   CD 0B 0C               CALL   run   
2688   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
269C   CD C5 0A               CALL   flushBuffer   
269F   76                     HALT      
26A0   00                     .CSTR      
26A1                EXPECTM_0_2710S52:      
26A1   E1                     POP   HL   
26A2                          ;*Macro unroll:  test "{{{1}^}^}^", 1
26A2   31 00 4A               LD   SP,STACK   
26A5   CD 44 0B               CALL   init   
26A8   CD 62 48               CALL   execStr   
26AB   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
26B6   CD C5 0A               CALL   flushBuffer   
26B9                          ;*Macro unroll:  expect "{{{1}^}^}^",1
26B9   E1                     POP   HL   
26BA   E5                     PUSH   HL   
26BB   11 01 00               LD   DE,1   
26BE   B7                     OR   A   
26BF   ED 52                  SBC   HL,DE   
26C1   7D                     LD   A,L   
26C2   B4                     OR   H   
26C3   CA 24 27               JP   Z,expectM_0_2711S52   
26C6   CD 3D 0B               CALL   printStr   
26C9   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
26DA   CD 3D 0B               CALL   printStr   
26DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26EC   21 01 00               LD   hl,1   
26EF   E5                     PUSH   hl   
26F0   CD 0B 0C               CALL   run   
26F3   2E 00                  .CSTR   "."   
26F5   CD 3D 0B               CALL   printStr   
26F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2705   E1                     POP   hl   
2706   E5                     PUSH   hl   
2707   E5                     PUSH   hl   
2708   CD 0B 0C               CALL   run   
270B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
271F   CD C5 0A               CALL   flushBuffer   
2722   76                     HALT      
2723   00                     .CSTR      
2724                EXPECTM_0_2711S52:      
2724   E1                     POP   HL   
2725                          ;*Macro unroll:  test "5 /f{10} ?", 5
2725   31 00 4A               LD   SP,STACK   
2728   CD 44 0B               CALL   init   
272B   CD 62 48               CALL   execStr   
272E   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
2739   CD C5 0A               CALL   flushBuffer   
273C                          ;*Macro unroll:  expect "5 /f{10} ?",5
273C   E1                     POP   HL   
273D   E5                     PUSH   HL   
273E   11 05 00               LD   DE,5   
2741   B7                     OR   A   
2742   ED 52                  SBC   HL,DE   
2744   7D                     LD   A,L   
2745   B4                     OR   H   
2746   CA A7 27               JP   Z,expectM_0_2712S52   
2749   CD 3D 0B               CALL   printStr   
274C   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
275D   CD 3D 0B               CALL   printStr   
2760   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
276F   21 05 00               LD   hl,5   
2772   E5                     PUSH   hl   
2773   CD 0B 0C               CALL   run   
2776   2E 00                  .CSTR   "."   
2778   CD 3D 0B               CALL   printStr   
277B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2788   E1                     POP   hl   
2789   E5                     PUSH   hl   
278A   E5                     PUSH   hl   
278B   CD 0B 0C               CALL   run   
278E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
27A2   CD C5 0A               CALL   flushBuffer   
27A5   76                     HALT      
27A6   00                     .CSTR      
27A7                EXPECTM_0_2712S52:      
27A7   E1                     POP   HL   
27A8                          ;*Macro unroll:  test "5 /t{10} ? +", 15
27A8   31 00 4A               LD   SP,STACK   
27AB   CD 44 0B               CALL   init   
27AE   CD 62 48               CALL   execStr   
27B1   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
27BE   CD C5 0A               CALL   flushBuffer   
27C1                          ;*Macro unroll:  expect "5 /t{10} ? +",15
27C1   E1                     POP   HL   
27C2   E5                     PUSH   HL   
27C3   11 0F 00               LD   DE,15   
27C6   B7                     OR   A   
27C7   ED 52                  SBC   HL,DE   
27C9   7D                     LD   A,L   
27CA   B4                     OR   H   
27CB   CA 2E 28               JP   Z,expectM_0_2713S52   
27CE   CD 3D 0B               CALL   printStr   
27D1   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
27E4   CD 3D 0B               CALL   printStr   
27E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27F6   21 0F 00               LD   hl,15   
27F9   E5                     PUSH   hl   
27FA   CD 0B 0C               CALL   run   
27FD   2E 00                  .CSTR   "."   
27FF   CD 3D 0B               CALL   printStr   
2802   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
280F   E1                     POP   hl   
2810   E5                     PUSH   hl   
2811   E5                     PUSH   hl   
2812   CD 0B 0C               CALL   run   
2815   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2829   CD C5 0A               CALL   flushBuffer   
282C   76                     HALT      
282D   00                     .CSTR      
282E                EXPECTM_0_2713S52:      
282E   E1                     POP   HL   
282F                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
282F   31 00 4A               LD   SP,STACK   
2832   CD 44 0B               CALL   init   
2835   CD 62 48               CALL   execStr   
2838   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
284A   CD C5 0A               CALL   flushBuffer   
284D                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
284D   E1                     POP   HL   
284E   E5                     PUSH   HL   
284F   11 15 00               LD   DE,21   
2852   B7                     OR   A   
2853   ED 52                  SBC   HL,DE   
2855   7D                     LD   A,L   
2856   B4                     OR   H   
2857   CA BF 28               JP   Z,expectM_0_2714S52   
285A   CD 3D 0B               CALL   printStr   
285D   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2875   CD 3D 0B               CALL   printStr   
2878   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2887   21 15 00               LD   hl,21   
288A   E5                     PUSH   hl   
288B   CD 0B 0C               CALL   run   
288E   2E 00                  .CSTR   "."   
2890   CD 3D 0B               CALL   printStr   
2893   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28A0   E1                     POP   hl   
28A1   E5                     PUSH   hl   
28A2   E5                     PUSH   hl   
28A3   CD 0B 0C               CALL   run   
28A6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
28BA   CD C5 0A               CALL   flushBuffer   
28BD   76                     HALT      
28BE   00                     .CSTR      
28BF                EXPECTM_0_2714S52:      
28BF   E1                     POP   HL   
28C0                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
28C0   31 00 4A               LD   SP,STACK   
28C3   CD 44 0B               CALL   init   
28C6   CD 62 48               CALL   execStr   
28C9   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
28DB   CD C5 0A               CALL   flushBuffer   
28DE                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
28DE   E1                     POP   HL   
28DF   E5                     PUSH   HL   
28E0   11 0B 00               LD   DE,11   
28E3   B7                     OR   A   
28E4   ED 52                  SBC   HL,DE   
28E6   7D                     LD   A,L   
28E7   B4                     OR   H   
28E8   CA 50 29               JP   Z,expectM_0_2715S52   
28EB   CD 3D 0B               CALL   printStr   
28EE   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2906   CD 3D 0B               CALL   printStr   
2909   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2918   21 0B 00               LD   hl,11   
291B   E5                     PUSH   hl   
291C   CD 0B 0C               CALL   run   
291F   2E 00                  .CSTR   "."   
2921   CD 3D 0B               CALL   printStr   
2924   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2931   E1                     POP   hl   
2932   E5                     PUSH   hl   
2933   E5                     PUSH   hl   
2934   CD 0B 0C               CALL   run   
2937   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
294B   CD C5 0A               CALL   flushBuffer   
294E   76                     HALT      
294F   00                     .CSTR      
2950                EXPECTM_0_2715S52:      
2950   E1                     POP   HL   
2951                          ;*Macro unroll:  test ": -2%", $0000
2951   31 00 4A               LD   SP,STACK   
2954   CD 44 0B               CALL   init   
2957   CD 62 48               CALL   execStr   
295A   3A 20 2D 32 25 00      .CSTR   ": -2%"   
2960   CD C5 0A               CALL   flushBuffer   
2963                          ;*Macro unroll:  expect ": -2%",$0000
2963   E1                     POP   HL   
2964   E5                     PUSH   HL   
2965   11 00 00               LD   DE,$0000   
2968   B7                     OR   A   
2969   ED 52                  SBC   HL,DE   
296B   7D                     LD   A,L   
296C   B4                     OR   H   
296D   CA C9 29               JP   Z,expectM_0_2716S52   
2970   CD 3D 0B               CALL   printStr   
2973   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
297F   CD 3D 0B               CALL   printStr   
2982   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2991   21 00 00               LD   hl,$0000   
2994   E5                     PUSH   hl   
2995   CD 0B 0C               CALL   run   
2998   2E 00                  .CSTR   "."   
299A   CD 3D 0B               CALL   printStr   
299D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29AA   E1                     POP   hl   
29AB   E5                     PUSH   hl   
29AC   E5                     PUSH   hl   
29AD   CD 0B 0C               CALL   run   
29B0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
29C4   CD C5 0A               CALL   flushBuffer   
29C7   76                     HALT      
29C8   00                     .CSTR      
29C9                EXPECTM_0_2716S52:      
29C9   E1                     POP   HL   
29CA                          ;*Macro unroll:  test ":a -1%", $0001
29CA   31 00 4A               LD   SP,STACK   
29CD   CD 44 0B               CALL   init   
29D0   CD 62 48               CALL   execStr   
29D3   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
29DA   CD C5 0A               CALL   flushBuffer   
29DD                          ;*Macro unroll:  expect ":a -1%",$0001
29DD   E1                     POP   HL   
29DE   E5                     PUSH   HL   
29DF   11 01 00               LD   DE,$0001   
29E2   B7                     OR   A   
29E3   ED 52                  SBC   HL,DE   
29E5   7D                     LD   A,L   
29E6   B4                     OR   H   
29E7   CA 44 2A               JP   Z,expectM_0_2717S52   
29EA   CD 3D 0B               CALL   printStr   
29ED   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
29FA   CD 3D 0B               CALL   printStr   
29FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A0C   21 01 00               LD   hl,$0001   
2A0F   E5                     PUSH   hl   
2A10   CD 0B 0C               CALL   run   
2A13   2E 00                  .CSTR   "."   
2A15   CD 3D 0B               CALL   printStr   
2A18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A25   E1                     POP   hl   
2A26   E5                     PUSH   hl   
2A27   E5                     PUSH   hl   
2A28   CD 0B 0C               CALL   run   
2A2B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2A3F   CD C5 0A               CALL   flushBuffer   
2A42   76                     HALT      
2A43   00                     .CSTR      
2A44                EXPECTM_0_2717S52:      
2A44   E1                     POP   HL   
2A45                          ;*Macro unroll:  test ":a: -1%", $0001
2A45   31 00 4A               LD   SP,STACK   
2A48   CD 44 0B               CALL   init   
2A4B   CD 62 48               CALL   execStr   
2A4E   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
2A56   CD C5 0A               CALL   flushBuffer   
2A59                          ;*Macro unroll:  expect ":a: -1%",$0001
2A59   E1                     POP   HL   
2A5A   E5                     PUSH   HL   
2A5B   11 01 00               LD   DE,$0001   
2A5E   B7                     OR   A   
2A5F   ED 52                  SBC   HL,DE   
2A61   7D                     LD   A,L   
2A62   B4                     OR   H   
2A63   CA C1 2A               JP   Z,expectM_0_2718S52   
2A66   CD 3D 0B               CALL   printStr   
2A69   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
2A77   CD 3D 0B               CALL   printStr   
2A7A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A89   21 01 00               LD   hl,$0001   
2A8C   E5                     PUSH   hl   
2A8D   CD 0B 0C               CALL   run   
2A90   2E 00                  .CSTR   "."   
2A92   CD 3D 0B               CALL   printStr   
2A95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AA2   E1                     POP   hl   
2AA3   E5                     PUSH   hl   
2AA4   E5                     PUSH   hl   
2AA5   CD 0B 0C               CALL   run   
2AA8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2ABC   CD C5 0A               CALL   flushBuffer   
2ABF   76                     HALT      
2AC0   00                     .CSTR      
2AC1                EXPECTM_0_2718S52:      
2AC1   E1                     POP   HL   
2AC2                          ;*Macro unroll:  test ":a:b -1%", $0102
2AC2   31 00 4A               LD   SP,STACK   
2AC5   CD 44 0B               CALL   init   
2AC8   CD 62 48               CALL   execStr   
2ACB   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
2AD4   CD C5 0A               CALL   flushBuffer   
2AD7                          ;*Macro unroll:  expect ":a:b -1%",$0102
2AD7   E1                     POP   HL   
2AD8   E5                     PUSH   HL   
2AD9   11 02 01               LD   DE,$0102   
2ADC   B7                     OR   A   
2ADD   ED 52                  SBC   HL,DE   
2ADF   7D                     LD   A,L   
2AE0   B4                     OR   H   
2AE1   CA 40 2B               JP   Z,expectM_0_2719S52   
2AE4   CD 3D 0B               CALL   printStr   
2AE7   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
2AF6   CD 3D 0B               CALL   printStr   
2AF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B08   21 02 01               LD   hl,$0102   
2B0B   E5                     PUSH   hl   
2B0C   CD 0B 0C               CALL   run   
2B0F   2E 00                  .CSTR   "."   
2B11   CD 3D 0B               CALL   printStr   
2B14   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B21   E1                     POP   hl   
2B22   E5                     PUSH   hl   
2B23   E5                     PUSH   hl   
2B24   CD 0B 0C               CALL   run   
2B27   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2B3B   CD C5 0A               CALL   flushBuffer   
2B3E   76                     HALT      
2B3F   00                     .CSTR      
2B40                EXPECTM_0_2719S52:      
2B40   E1                     POP   HL   
2B41                          ;*Macro unroll:  test "::b -1%", $0101
2B41   31 00 4A               LD   SP,STACK   
2B44   CD 44 0B               CALL   init   
2B47   CD 62 48               CALL   execStr   
2B4A   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
2B52   CD C5 0A               CALL   flushBuffer   
2B55                          ;*Macro unroll:  expect "::b -1%",$0101
2B55   E1                     POP   HL   
2B56   E5                     PUSH   HL   
2B57   11 01 01               LD   DE,$0101   
2B5A   B7                     OR   A   
2B5B   ED 52                  SBC   HL,DE   
2B5D   7D                     LD   A,L   
2B5E   B4                     OR   H   
2B5F   CA BD 2B               JP   Z,expectM_0_2720S52   
2B62   CD 3D 0B               CALL   printStr   
2B65   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
2B73   CD 3D 0B               CALL   printStr   
2B76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B85   21 01 01               LD   hl,$0101   
2B88   E5                     PUSH   hl   
2B89   CD 0B 0C               CALL   run   
2B8C   2E 00                  .CSTR   "."   
2B8E   CD 3D 0B               CALL   printStr   
2B91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B9E   E1                     POP   hl   
2B9F   E5                     PUSH   hl   
2BA0   E5                     PUSH   hl   
2BA1   CD 0B 0C               CALL   run   
2BA4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2BB8   CD C5 0A               CALL   flushBuffer   
2BBB   76                     HALT      
2BBC   00                     .CSTR      
2BBD                EXPECTM_0_2720S52:      
2BBD   E1                     POP   HL   
2BBE                          ;*Macro unroll:  test ":{2};^", 2
2BBE   31 00 4A               LD   SP,STACK   
2BC1   CD 44 0B               CALL   init   
2BC4   CD 62 48               CALL   execStr   
2BC7   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
2BCE   CD C5 0A               CALL   flushBuffer   
2BD1                          ;*Macro unroll:  expect ":{2};^",2
2BD1   E1                     POP   HL   
2BD2   E5                     PUSH   HL   
2BD3   11 02 00               LD   DE,2   
2BD6   B7                     OR   A   
2BD7   ED 52                  SBC   HL,DE   
2BD9   7D                     LD   A,L   
2BDA   B4                     OR   H   
2BDB   CA 38 2C               JP   Z,expectM_0_2721S52   
2BDE   CD 3D 0B               CALL   printStr   
2BE1   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2BEE   CD 3D 0B               CALL   printStr   
2BF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C00   21 02 00               LD   hl,2   
2C03   E5                     PUSH   hl   
2C04   CD 0B 0C               CALL   run   
2C07   2E 00                  .CSTR   "."   
2C09   CD 3D 0B               CALL   printStr   
2C0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C19   E1                     POP   hl   
2C1A   E5                     PUSH   hl   
2C1B   E5                     PUSH   hl   
2C1C   CD 0B 0C               CALL   run   
2C1F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2C33   CD C5 0A               CALL   flushBuffer   
2C36   76                     HALT      
2C37   00                     .CSTR      
2C38                EXPECTM_0_2721S52:      
2C38   E1                     POP   HL   
2C39                          ;*Macro unroll:  test ":a{2};^", 2
2C39   31 00 4A               LD   SP,STACK   
2C3C   CD 44 0B               CALL   init   
2C3F   CD 62 48               CALL   execStr   
2C42   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2C4A   CD C5 0A               CALL   flushBuffer   
2C4D                          ;*Macro unroll:  expect ":a{2};^",2
2C4D   E1                     POP   HL   
2C4E   E5                     PUSH   HL   
2C4F   11 02 00               LD   DE,2   
2C52   B7                     OR   A   
2C53   ED 52                  SBC   HL,DE   
2C55   7D                     LD   A,L   
2C56   B4                     OR   H   
2C57   CA B5 2C               JP   Z,expectM_0_2722S52   
2C5A   CD 3D 0B               CALL   printStr   
2C5D   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2C6B   CD 3D 0B               CALL   printStr   
2C6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C7D   21 02 00               LD   hl,2   
2C80   E5                     PUSH   hl   
2C81   CD 0B 0C               CALL   run   
2C84   2E 00                  .CSTR   "."   
2C86   CD 3D 0B               CALL   printStr   
2C89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C96   E1                     POP   hl   
2C97   E5                     PUSH   hl   
2C98   E5                     PUSH   hl   
2C99   CD 0B 0C               CALL   run   
2C9C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2CB0   CD C5 0A               CALL   flushBuffer   
2CB3   76                     HALT      
2CB4   00                     .CSTR      
2CB5                EXPECTM_0_2722S52:      
2CB5   E1                     POP   HL   
2CB6                          ;*Macro unroll:  test "5 :a{$a};^", 5
2CB6   31 00 4A               LD   SP,STACK   
2CB9   CD 44 0B               CALL   init   
2CBC   CD 62 48               CALL   execStr   
2CBF   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
2CCA   CD C5 0A               CALL   flushBuffer   
2CCD                          ;*Macro unroll:  expect "5 :a{$a};^",5
2CCD   E1                     POP   HL   
2CCE   E5                     PUSH   HL   
2CCF   11 05 00               LD   DE,5   
2CD2   B7                     OR   A   
2CD3   ED 52                  SBC   HL,DE   
2CD5   7D                     LD   A,L   
2CD6   B4                     OR   H   
2CD7   CA 38 2D               JP   Z,expectM_0_2723S52   
2CDA   CD 3D 0B               CALL   printStr   
2CDD   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2CEE   CD 3D 0B               CALL   printStr   
2CF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D00   21 05 00               LD   hl,5   
2D03   E5                     PUSH   hl   
2D04   CD 0B 0C               CALL   run   
2D07   2E 00                  .CSTR   "."   
2D09   CD 3D 0B               CALL   printStr   
2D0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D19   E1                     POP   hl   
2D1A   E5                     PUSH   hl   
2D1B   E5                     PUSH   hl   
2D1C   CD 0B 0C               CALL   run   
2D1F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2D33   CD C5 0A               CALL   flushBuffer   
2D36   76                     HALT      
2D37   00                     .CSTR      
2D38                EXPECTM_0_2723S52:      
2D38   E1                     POP   HL   
2D39                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2D39   31 00 4A               LD   SP,STACK   
2D3C   CD 44 0B               CALL   init   
2D3F   CD 62 48               CALL   execStr   
2D42   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2D4F   CD C5 0A               CALL   flushBuffer   
2D52                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2D52   E1                     POP   HL   
2D53   E5                     PUSH   HL   
2D54   11 05 00               LD   DE,5   
2D57   B7                     OR   A   
2D58   ED 52                  SBC   HL,DE   
2D5A   7D                     LD   A,L   
2D5B   B4                     OR   H   
2D5C   CA BF 2D               JP   Z,expectM_0_2724S52   
2D5F   CD 3D 0B               CALL   printStr   
2D62   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2D75   CD 3D 0B               CALL   printStr   
2D78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D87   21 05 00               LD   hl,5   
2D8A   E5                     PUSH   hl   
2D8B   CD 0B 0C               CALL   run   
2D8E   2E 00                  .CSTR   "."   
2D90   CD 3D 0B               CALL   printStr   
2D93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DA0   E1                     POP   hl   
2DA1   E5                     PUSH   hl   
2DA2   E5                     PUSH   hl   
2DA3   CD 0B 0C               CALL   run   
2DA6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2DBA   CD C5 0A               CALL   flushBuffer   
2DBD   76                     HALT      
2DBE   00                     .CSTR      
2DBF                EXPECTM_0_2724S52:      
2DBF   E1                     POP   HL   
2DC0                          ;*Macro unroll:  test ":a{{2}^};^", 2
2DC0   31 00 4A               LD   SP,STACK   
2DC3   CD 44 0B               CALL   init   
2DC6   CD 62 48               CALL   execStr   
2DC9   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2DD4   CD C5 0A               CALL   flushBuffer   
2DD7                          ;*Macro unroll:  expect ":a{{2}^};^",2
2DD7   E1                     POP   HL   
2DD8   E5                     PUSH   HL   
2DD9   11 02 00               LD   DE,2   
2DDC   B7                     OR   A   
2DDD   ED 52                  SBC   HL,DE   
2DDF   7D                     LD   A,L   
2DE0   B4                     OR   H   
2DE1   CA 42 2E               JP   Z,expectM_0_2725S52   
2DE4   CD 3D 0B               CALL   printStr   
2DE7   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2DF8   CD 3D 0B               CALL   printStr   
2DFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E0A   21 02 00               LD   hl,2   
2E0D   E5                     PUSH   hl   
2E0E   CD 0B 0C               CALL   run   
2E11   2E 00                  .CSTR   "."   
2E13   CD 3D 0B               CALL   printStr   
2E16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E23   E1                     POP   hl   
2E24   E5                     PUSH   hl   
2E25   E5                     PUSH   hl   
2E26   CD 0B 0C               CALL   run   
2E29   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2E3D   CD C5 0A               CALL   flushBuffer   
2E40   76                     HALT      
2E41   00                     .CSTR      
2E42                EXPECTM_0_2725S52:      
2E42   E1                     POP   HL   
2E43                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2E43   31 00 4A               LD   SP,STACK   
2E46   CD 44 0B               CALL   init   
2E49   CD 62 48               CALL   execStr   
2E4C   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2E5C   CD C5 0A               CALL   flushBuffer   
2E5F                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2E5F   E1                     POP   HL   
2E60   E5                     PUSH   HL   
2E61   11 05 00               LD   DE,5   
2E64   B7                     OR   A   
2E65   ED 52                  SBC   HL,DE   
2E67   7D                     LD   A,L   
2E68   B4                     OR   H   
2E69   CA CF 2E               JP   Z,expectM_0_2726S52   
2E6C   CD 3D 0B               CALL   printStr   
2E6F   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2E85   CD 3D 0B               CALL   printStr   
2E88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E97   21 05 00               LD   hl,5   
2E9A   E5                     PUSH   hl   
2E9B   CD 0B 0C               CALL   run   
2E9E   2E 00                  .CSTR   "."   
2EA0   CD 3D 0B               CALL   printStr   
2EA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EB0   E1                     POP   hl   
2EB1   E5                     PUSH   hl   
2EB2   E5                     PUSH   hl   
2EB3   CD 0B 0C               CALL   run   
2EB6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2ECA   CD C5 0A               CALL   flushBuffer   
2ECD   76                     HALT      
2ECE   00                     .CSTR      
2ECF                EXPECTM_0_2726S52:      
2ECF   E1                     POP   HL   
2ED0                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2ED0   31 00 4A               LD   SP,STACK   
2ED3   CD 44 0B               CALL   init   
2ED6   CD 62 48               CALL   execStr   
2ED9   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2EEA   CD C5 0A               CALL   flushBuffer   
2EED                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2EED   E1                     POP   HL   
2EEE   E5                     PUSH   HL   
2EEF   11 01 00               LD   DE,1   
2EF2   B7                     OR   A   
2EF3   ED 52                  SBC   HL,DE   
2EF5   7D                     LD   A,L   
2EF6   B4                     OR   H   
2EF7   CA 5E 2F               JP   Z,expectM_0_2727S52   
2EFA   CD 3D 0B               CALL   printStr   
2EFD   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2F14   CD 3D 0B               CALL   printStr   
2F17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F26   21 01 00               LD   hl,1   
2F29   E5                     PUSH   hl   
2F2A   CD 0B 0C               CALL   run   
2F2D   2E 00                  .CSTR   "."   
2F2F   CD 3D 0B               CALL   printStr   
2F32   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F3F   E1                     POP   hl   
2F40   E5                     PUSH   hl   
2F41   E5                     PUSH   hl   
2F42   CD 0B 0C               CALL   run   
2F45   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2F59   CD C5 0A               CALL   flushBuffer   
2F5C   76                     HALT      
2F5D   00                     .CSTR      
2F5E                EXPECTM_0_2727S52:      
2F5E   E1                     POP   HL   
2F5F                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2F5F   31 00 4A               LD   SP,STACK   
2F62   CD 44 0B               CALL   init   
2F65   CD 62 48               CALL   execStr   
2F68   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
2F7C   CD C5 0A               CALL   flushBuffer   
2F7F                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
2F7F   E1                     POP   HL   
2F80   E5                     PUSH   HL   
2F81   11 07 00               LD   DE,7   
2F84   B7                     OR   A   
2F85   ED 52                  SBC   HL,DE   
2F87   7D                     LD   A,L   
2F88   B4                     OR   H   
2F89   CA F3 2F               JP   Z,expectM_0_2728S52   
2F8C   CD 3D 0B               CALL   printStr   
2F8F   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
2FA9   CD 3D 0B               CALL   printStr   
2FAC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FBB   21 07 00               LD   hl,7   
2FBE   E5                     PUSH   hl   
2FBF   CD 0B 0C               CALL   run   
2FC2   2E 00                  .CSTR   "."   
2FC4   CD 3D 0B               CALL   printStr   
2FC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FD4   E1                     POP   hl   
2FD5   E5                     PUSH   hl   
2FD6   E5                     PUSH   hl   
2FD7   CD 0B 0C               CALL   run   
2FDA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2FEE   CD C5 0A               CALL   flushBuffer   
2FF1   76                     HALT      
2FF2   00                     .CSTR      
2FF3                EXPECTM_0_2728S52:      
2FF3   E1                     POP   HL   
2FF4                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
2FF4   31 00 4A               LD   SP,STACK   
2FF7   CD 44 0B               CALL   init   
2FFA   CD 62 48               CALL   execStr   
2FFD   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
3013   CD C5 0A               CALL   flushBuffer   
3016                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
3016   E1                     POP   HL   
3017   E5                     PUSH   HL   
3018   11 06 00               LD   DE,6   
301B   B7                     OR   A   
301C   ED 52                  SBC   HL,DE   
301E   7D                     LD   A,L   
301F   B4                     OR   H   
3020   CA 8C 30               JP   Z,expectM_0_2729S52   
3023   CD 3D 0B               CALL   printStr   
3026   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
3042   CD 3D 0B               CALL   printStr   
3045   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3054   21 06 00               LD   hl,6   
3057   E5                     PUSH   hl   
3058   CD 0B 0C               CALL   run   
305B   2E 00                  .CSTR   "."   
305D   CD 3D 0B               CALL   printStr   
3060   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
306D   E1                     POP   hl   
306E   E5                     PUSH   hl   
306F   E5                     PUSH   hl   
3070   CD 0B 0C               CALL   run   
3073   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3087   CD C5 0A               CALL   flushBuffer   
308A   76                     HALT      
308B   00                     .CSTR      
308C                EXPECTM_0_2729S52:      
308C   E1                     POP   HL   
308D                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
308D   31 00 4A               LD   SP,STACK   
3090   CD 44 0B               CALL   init   
3093   CD 62 48               CALL   execStr   
3096   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
30A5   CD C5 0A               CALL   flushBuffer   
30A8                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
30A8   E1                     POP   HL   
30A9   E5                     PUSH   HL   
30AA   11 02 00               LD   DE,2   
30AD   B7                     OR   A   
30AE   ED 52                  SBC   HL,DE   
30B0   7D                     LD   A,L   
30B1   B4                     OR   H   
30B2   CA 17 31               JP   Z,expectM_0_2730S52   
30B5   CD 3D 0B               CALL   printStr   
30B8   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
30CD   CD 3D 0B               CALL   printStr   
30D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30DF   21 02 00               LD   hl,2   
30E2   E5                     PUSH   hl   
30E3   CD 0B 0C               CALL   run   
30E6   2E 00                  .CSTR   "."   
30E8   CD 3D 0B               CALL   printStr   
30EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30F8   E1                     POP   hl   
30F9   E5                     PUSH   hl   
30FA   E5                     PUSH   hl   
30FB   CD 0B 0C               CALL   run   
30FE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3112   CD C5 0A               CALL   flushBuffer   
3115   76                     HALT      
3116   00                     .CSTR      
3117                EXPECTM_0_2730S52:      
3117   E1                     POP   HL   
3118                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
3118   31 00 4A               LD   SP,STACK   
311B   CD 44 0B               CALL   init   
311E   CD 62 48               CALL   execStr   
3121   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
3133   CD C5 0A               CALL   flushBuffer   
3136                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
3136   E1                     POP   HL   
3137   E5                     PUSH   HL   
3138   11 01 00               LD   DE,1   
313B   B7                     OR   A   
313C   ED 52                  SBC   HL,DE   
313E   7D                     LD   A,L   
313F   B4                     OR   H   
3140   CA A8 31               JP   Z,expectM_0_2731S52   
3143   CD 3D 0B               CALL   printStr   
3146   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
315E   CD 3D 0B               CALL   printStr   
3161   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3170   21 01 00               LD   hl,1   
3173   E5                     PUSH   hl   
3174   CD 0B 0C               CALL   run   
3177   2E 00                  .CSTR   "."   
3179   CD 3D 0B               CALL   printStr   
317C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3189   E1                     POP   hl   
318A   E5                     PUSH   hl   
318B   E5                     PUSH   hl   
318C   CD 0B 0C               CALL   run   
318F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
31A3   CD C5 0A               CALL   flushBuffer   
31A6   76                     HALT      
31A7   00                     .CSTR      
31A8                EXPECTM_0_2731S52:      
31A8   E1                     POP   HL   
31A9                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
31A9   31 00 4A               LD   SP,STACK   
31AC   CD 44 0B               CALL   init   
31AF   CD 62 48               CALL   execStr   
31B2   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
31C5   CD C5 0A               CALL   flushBuffer   
31C8                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
31C8   E1                     POP   HL   
31C9   E5                     PUSH   HL   
31CA   11 02 00               LD   DE,2   
31CD   B7                     OR   A   
31CE   ED 52                  SBC   HL,DE   
31D0   7D                     LD   A,L   
31D1   B4                     OR   H   
31D2   CA 3B 32               JP   Z,expectM_0_2732S52   
31D5   CD 3D 0B               CALL   printStr   
31D8   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
31F1   CD 3D 0B               CALL   printStr   
31F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3203   21 02 00               LD   hl,2   
3206   E5                     PUSH   hl   
3207   CD 0B 0C               CALL   run   
320A   2E 00                  .CSTR   "."   
320C   CD 3D 0B               CALL   printStr   
320F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
321C   E1                     POP   hl   
321D   E5                     PUSH   hl   
321E   E5                     PUSH   hl   
321F   CD 0B 0C               CALL   run   
3222   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3236   CD C5 0A               CALL   flushBuffer   
3239   76                     HALT      
323A   00                     .CSTR      
323B                EXPECTM_0_2732S52:      
323B   E1                     POP   HL   
323C                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
323C   31 00 4A               LD   SP,STACK   
323F   CD 44 0B               CALL   init   
3242   CD 62 48               CALL   execStr   
3245   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
3259   CD C5 0A               CALL   flushBuffer   
325C                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
325C   E1                     POP   HL   
325D   E5                     PUSH   HL   
325E   11 02 00               LD   DE,2   
3261   B7                     OR   A   
3262   ED 52                  SBC   HL,DE   
3264   7D                     LD   A,L   
3265   B4                     OR   H   
3266   CA D0 32               JP   Z,expectM_0_2733S52   
3269   CD 3D 0B               CALL   printStr   
326C   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
3286   CD 3D 0B               CALL   printStr   
3289   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3298   21 02 00               LD   hl,2   
329B   E5                     PUSH   hl   
329C   CD 0B 0C               CALL   run   
329F   2E 00                  .CSTR   "."   
32A1   CD 3D 0B               CALL   printStr   
32A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32B1   E1                     POP   hl   
32B2   E5                     PUSH   hl   
32B3   E5                     PUSH   hl   
32B4   CD 0B 0C               CALL   run   
32B7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
32CB   CD C5 0A               CALL   flushBuffer   
32CE   76                     HALT      
32CF   00                     .CSTR      
32D0                EXPECTM_0_2733S52:      
32D0   E1                     POP   HL   
32D1                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
32D1   31 00 4A               LD   SP,STACK   
32D4   CD 44 0B               CALL   init   
32D7   CD 62 48               CALL   execStr   
32DA   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
32ED   CD C5 0A               CALL   flushBuffer   
32F0                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
32F0   E1                     POP   HL   
32F1   E5                     PUSH   HL   
32F2   11 02 00               LD   DE,2   
32F5   B7                     OR   A   
32F6   ED 52                  SBC   HL,DE   
32F8   7D                     LD   A,L   
32F9   B4                     OR   H   
32FA   CA 63 33               JP   Z,expectM_0_2734S52   
32FD   CD 3D 0B               CALL   printStr   
3300   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
3319   CD 3D 0B               CALL   printStr   
331C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
332B   21 02 00               LD   hl,2   
332E   E5                     PUSH   hl   
332F   CD 0B 0C               CALL   run   
3332   2E 00                  .CSTR   "."   
3334   CD 3D 0B               CALL   printStr   
3337   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3344   E1                     POP   hl   
3345   E5                     PUSH   hl   
3346   E5                     PUSH   hl   
3347   CD 0B 0C               CALL   run   
334A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
335E   CD C5 0A               CALL   flushBuffer   
3361   76                     HALT      
3362   00                     .CSTR      
3363                EXPECTM_0_2734S52:      
3363   E1                     POP   HL   
3364                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
3364   31 00 4A               LD   SP,STACK   
3367   CD 44 0B               CALL   init   
336A   CD 62 48               CALL   execStr   
336D   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
3387   CD C5 0A               CALL   flushBuffer   
338A                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
338A   E1                     POP   HL   
338B   E5                     PUSH   HL   
338C   11 05 00               LD   DE,5   
338F   B7                     OR   A   
3390   ED 52                  SBC   HL,DE   
3392   7D                     LD   A,L   
3393   B4                     OR   H   
3394   CA 04 34               JP   Z,expectM_0_2735S52   
3397   CD 3D 0B               CALL   printStr   
339A   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
33BA   CD 3D 0B               CALL   printStr   
33BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33CC   21 05 00               LD   hl,5   
33CF   E5                     PUSH   hl   
33D0   CD 0B 0C               CALL   run   
33D3   2E 00                  .CSTR   "."   
33D5   CD 3D 0B               CALL   printStr   
33D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33E5   E1                     POP   hl   
33E6   E5                     PUSH   hl   
33E7   E5                     PUSH   hl   
33E8   CD 0B 0C               CALL   run   
33EB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
33FF   CD C5 0A               CALL   flushBuffer   
3402   76                     HALT      
3403   00                     .CSTR      
3404                EXPECTM_0_2735S52:      
3404   E1                     POP   HL   
3405                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3405   31 00 4A               LD   SP,STACK   
3408   CD 44 0B               CALL   init   
340B   CD 62 48               CALL   execStr   
340E   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
341F   CD C5 0A               CALL   flushBuffer   
3422                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
3422   E1                     POP   HL   
3423   E5                     PUSH   HL   
3424   11 02 00               LD   DE,2   
3427   B7                     OR   A   
3428   ED 52                  SBC   HL,DE   
342A   7D                     LD   A,L   
342B   B4                     OR   H   
342C   CA 93 34               JP   Z,expectM_0_2736S52   
342F   CD 3D 0B               CALL   printStr   
3432   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
3449   CD 3D 0B               CALL   printStr   
344C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
345B   21 02 00               LD   hl,2   
345E   E5                     PUSH   hl   
345F   CD 0B 0C               CALL   run   
3462   2E 00                  .CSTR   "."   
3464   CD 3D 0B               CALL   printStr   
3467   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3474   E1                     POP   hl   
3475   E5                     PUSH   hl   
3476   E5                     PUSH   hl   
3477   CD 0B 0C               CALL   run   
347A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
348E   CD C5 0A               CALL   flushBuffer   
3491   76                     HALT      
3492   00                     .CSTR      
3493                EXPECTM_0_2736S52:      
3493   E1                     POP   HL   
3494                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
3494   31 00 4A               LD   SP,STACK   
3497   CD 44 0B               CALL   init   
349A   CD 62 48               CALL   execStr   
349D   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
34B4   CD C5 0A               CALL   flushBuffer   
34B7                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
34B7   E1                     POP   HL   
34B8   E5                     PUSH   HL   
34B9   11 64 00               LD   DE,100   
34BC   B7                     OR   A   
34BD   ED 52                  SBC   HL,DE   
34BF   7D                     LD   A,L   
34C0   B4                     OR   H   
34C1   CA 2E 35               JP   Z,expectM_0_2737S52   
34C4   CD 3D 0B               CALL   printStr   
34C7   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
34E4   CD 3D 0B               CALL   printStr   
34E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34F6   21 64 00               LD   hl,100   
34F9   E5                     PUSH   hl   
34FA   CD 0B 0C               CALL   run   
34FD   2E 00                  .CSTR   "."   
34FF   CD 3D 0B               CALL   printStr   
3502   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
350F   E1                     POP   hl   
3510   E5                     PUSH   hl   
3511   E5                     PUSH   hl   
3512   CD 0B 0C               CALL   run   
3515   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3529   CD C5 0A               CALL   flushBuffer   
352C   76                     HALT      
352D   00                     .CSTR      
352E                EXPECTM_0_2737S52:      
352E   E1                     POP   HL   
352F                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
352F   31 00 4A               LD   SP,STACK   
3532   CD 44 0B               CALL   init   
3535   CD 62 48               CALL   execStr   
3538   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
3550   CD C5 0A               CALL   flushBuffer   
3553                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
3553   E1                     POP   HL   
3554   E5                     PUSH   HL   
3555   11 01 00               LD   DE,1   
3558   B7                     OR   A   
3559   ED 52                  SBC   HL,DE   
355B   7D                     LD   A,L   
355C   B4                     OR   H   
355D   CA CB 35               JP   Z,expectM_0_2738S52   
3560   CD 3D 0B               CALL   printStr   
3563   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
3581   CD 3D 0B               CALL   printStr   
3584   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3593   21 01 00               LD   hl,1   
3596   E5                     PUSH   hl   
3597   CD 0B 0C               CALL   run   
359A   2E 00                  .CSTR   "."   
359C   CD 3D 0B               CALL   printStr   
359F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35AC   E1                     POP   hl   
35AD   E5                     PUSH   hl   
35AE   E5                     PUSH   hl   
35AF   CD 0B 0C               CALL   run   
35B2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
35C6   CD C5 0A               CALL   flushBuffer   
35C9   76                     HALT      
35CA   00                     .CSTR      
35CB                EXPECTM_0_2738S52:      
35CB   E1                     POP   HL   
35CC                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
35CC   31 00 4A               LD   SP,STACK   
35CF   CD 44 0B               CALL   init   
35D2   CD 62 48               CALL   execStr   
35D5   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
35EE   CD C5 0A               CALL   flushBuffer   
35F1                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
35F1   E1                     POP   HL   
35F2   E5                     PUSH   HL   
35F3   11 02 00               LD   DE,2   
35F6   B7                     OR   A   
35F7   ED 52                  SBC   HL,DE   
35F9   7D                     LD   A,L   
35FA   B4                     OR   H   
35FB   CA 6A 36               JP   Z,expectM_0_2739S52   
35FE   CD 3D 0B               CALL   printStr   
3601   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
3620   CD 3D 0B               CALL   printStr   
3623   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3632   21 02 00               LD   hl,2   
3635   E5                     PUSH   hl   
3636   CD 0B 0C               CALL   run   
3639   2E 00                  .CSTR   "."   
363B   CD 3D 0B               CALL   printStr   
363E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
364B   E1                     POP   hl   
364C   E5                     PUSH   hl   
364D   E5                     PUSH   hl   
364E   CD 0B 0C               CALL   run   
3651   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3665   CD C5 0A               CALL   flushBuffer   
3668   76                     HALT      
3669   00                     .CSTR      
366A                EXPECTM_0_2739S52:      
366A   E1                     POP   HL   
366B                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
366B   31 00 4A               LD   SP,STACK   
366E   CD 44 0B               CALL   init   
3671   CD 62 48               CALL   execStr   
3674   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
3693   CD C5 0A               CALL   flushBuffer   
3696                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
3696   E1                     POP   HL   
3697   E5                     PUSH   HL   
3698   11 0B 00               LD   DE,11   
369B   B7                     OR   A   
369C   ED 52                  SBC   HL,DE   
369E   7D                     LD   A,L   
369F   B4                     OR   H   
36A0   CA 15 37               JP   Z,expectM_0_2740S52   
36A3   CD 3D 0B               CALL   printStr   
36A6   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
36CB   CD 3D 0B               CALL   printStr   
36CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36DD   21 0B 00               LD   hl,11   
36E0   E5                     PUSH   hl   
36E1   CD 0B 0C               CALL   run   
36E4   2E 00                  .CSTR   "."   
36E6   CD 3D 0B               CALL   printStr   
36E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36F6   E1                     POP   hl   
36F7   E5                     PUSH   hl   
36F8   E5                     PUSH   hl   
36F9   CD 0B 0C               CALL   run   
36FC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3710   CD C5 0A               CALL   flushBuffer   
3713   76                     HALT      
3714   00                     .CSTR      
3715                EXPECTM_0_2740S52:      
3715   E1                     POP   HL   
3716                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
3716   31 00 4A               LD   SP,STACK   
3719   CD 44 0B               CALL   init   
371C   CD 62 48               CALL   execStr   
371F   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
373E   CD C5 0A               CALL   flushBuffer   
3741                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
3741   E1                     POP   HL   
3742   E5                     PUSH   HL   
3743   11 15 00               LD   DE,21   
3746   B7                     OR   A   
3747   ED 52                  SBC   HL,DE   
3749   7D                     LD   A,L   
374A   B4                     OR   H   
374B   CA C0 37               JP   Z,expectM_0_2741S52   
374E   CD 3D 0B               CALL   printStr   
3751   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
3776   CD 3D 0B               CALL   printStr   
3779   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3788   21 15 00               LD   hl,21   
378B   E5                     PUSH   hl   
378C   CD 0B 0C               CALL   run   
378F   2E 00                  .CSTR   "."   
3791   CD 3D 0B               CALL   printStr   
3794   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37A1   E1                     POP   hl   
37A2   E5                     PUSH   hl   
37A3   E5                     PUSH   hl   
37A4   CD 0B 0C               CALL   run   
37A7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
37BB   CD C5 0A               CALL   flushBuffer   
37BE   76                     HALT      
37BF   00                     .CSTR      
37C0                EXPECTM_0_2741S52:      
37C0   E1                     POP   HL   
37C1                          ;*Macro unroll:  test "[10 20 30] 1%", 20
37C1   31 00 4A               LD   SP,STACK   
37C4   CD 44 0B               CALL   init   
37C7   CD 62 48               CALL   execStr   
37CA   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
37D8   CD C5 0A               CALL   flushBuffer   
37DB                          ;*Macro unroll:  expect "[10 20 30] 1%",20
37DB   E1                     POP   HL   
37DC   E5                     PUSH   HL   
37DD   11 14 00               LD   DE,20   
37E0   B7                     OR   A   
37E1   ED 52                  SBC   HL,DE   
37E3   7D                     LD   A,L   
37E4   B4                     OR   H   
37E5   CA 49 38               JP   Z,expectM_0_2742S52   
37E8   CD 3D 0B               CALL   printStr   
37EB   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
37FF   CD 3D 0B               CALL   printStr   
3802   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3811   21 14 00               LD   hl,20   
3814   E5                     PUSH   hl   
3815   CD 0B 0C               CALL   run   
3818   2E 00                  .CSTR   "."   
381A   CD 3D 0B               CALL   printStr   
381D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
382A   E1                     POP   hl   
382B   E5                     PUSH   hl   
382C   E5                     PUSH   hl   
382D   CD 0B 0C               CALL   run   
3830   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3844   CD C5 0A               CALL   flushBuffer   
3847   76                     HALT      
3848   00                     .CSTR      
3849                EXPECTM_0_2742S52:      
3849   E1                     POP   HL   
384A                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
384A   31 00 4A               LD   SP,STACK   
384D   CD 44 0B               CALL   init   
3850   CD 62 48               CALL   execStr   
3853   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "[10 20 30 40] /s"   
3864   CD C5 0A               CALL   flushBuffer   
3867                          ;*Macro unroll:  expect "[10 20 30 40] /s",4
3867   E1                     POP   HL   
3868   E5                     PUSH   HL   
3869   11 04 00               LD   DE,4   
386C   B7                     OR   A   
386D   ED 52                  SBC   HL,DE   
386F   7D                     LD   A,L   
3870   B4                     OR   H   
3871   CA D8 38               JP   Z,expectM_0_2743S52   
3874   CD 3D 0B               CALL   printStr   
3877   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
388E   CD 3D 0B               CALL   printStr   
3891   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38A0   21 04 00               LD   hl,4   
38A3   E5                     PUSH   hl   
38A4   CD 0B 0C               CALL   run   
38A7   2E 00                  .CSTR   "."   
38A9   CD 3D 0B               CALL   printStr   
38AC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38B9   E1                     POP   hl   
38BA   E5                     PUSH   hl   
38BB   E5                     PUSH   hl   
38BC   CD 0B 0C               CALL   run   
38BF   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
38D3   CD C5 0A               CALL   flushBuffer   
38D6   76                     HALT      
38D7   00                     .CSTR      
38D8                EXPECTM_0_2743S52:      
38D8   E1                     POP   HL   
38D9                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
38D9   31 00 4A               LD   SP,STACK   
38DC   CD 44 0B               CALL   init   
38DF   CD 62 48               CALL   execStr   
38E2   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
38F0   CD C5 0A               CALL   flushBuffer   
38F3                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
38F3   E1                     POP   HL   
38F4   E5                     PUSH   HL   
38F5   11 02 00               LD   DE,2   
38F8   B7                     OR   A   
38F9   ED 52                  SBC   HL,DE   
38FB   7D                     LD   A,L   
38FC   B4                     OR   H   
38FD   CA 61 39               JP   Z,expectM_0_2744S52   
3900   CD 3D 0B               CALL   printStr   
3903   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3917   CD 3D 0B               CALL   printStr   
391A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3929   21 02 00               LD   hl,2   
392C   E5                     PUSH   hl   
392D   CD 0B 0C               CALL   run   
3930   2E 00                  .CSTR   "."   
3932   CD 3D 0B               CALL   printStr   
3935   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3942   E1                     POP   hl   
3943   E5                     PUSH   hl   
3944   E5                     PUSH   hl   
3945   CD 0B 0C               CALL   run   
3948   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
395C   CD C5 0A               CALL   flushBuffer   
395F   76                     HALT      
3960   00                     .CSTR      
3961                EXPECTM_0_2744S52:      
3961   E1                     POP   HL   
3962                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
3962   31 00 4A               LD   SP,STACK   
3965   CD 44 0B               CALL   init   
3968   CD 62 48               CALL   execStr   
396B   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
397F   CD C5 0A               CALL   flushBuffer   
3982                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
3982   E1                     POP   HL   
3983   E5                     PUSH   HL   
3984   11 42 00               LD   DE,66   
3987   B7                     OR   A   
3988   ED 52                  SBC   HL,DE   
398A   7D                     LD   A,L   
398B   B4                     OR   H   
398C   CA F6 39               JP   Z,expectM_0_2745S52   
398F   CD 3D 0B               CALL   printStr   
3992   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
39AC   CD 3D 0B               CALL   printStr   
39AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39BE   21 42 00               LD   hl,66   
39C1   E5                     PUSH   hl   
39C2   CD 0B 0C               CALL   run   
39C5   2E 00                  .CSTR   "."   
39C7   CD 3D 0B               CALL   printStr   
39CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39D7   E1                     POP   hl   
39D8   E5                     PUSH   hl   
39D9   E5                     PUSH   hl   
39DA   CD 0B 0C               CALL   run   
39DD   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
39F1   CD C5 0A               CALL   flushBuffer   
39F4   76                     HALT      
39F5   00                     .CSTR      
39F6                EXPECTM_0_2745S52:      
39F6   E1                     POP   HL   
39F7                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
39F7   31 00 4A               LD   SP,STACK   
39FA   CD 44 0B               CALL   init   
39FD   CD 62 48               CALL   execStr   
3A00   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
3A14   CD C5 0A               CALL   flushBuffer   
3A17                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
3A17   E1                     POP   HL   
3A18   E5                     PUSH   HL   
3A19   11 0A 00               LD   DE,10   
3A1C   B7                     OR   A   
3A1D   ED 52                  SBC   HL,DE   
3A1F   7D                     LD   A,L   
3A20   B4                     OR   H   
3A21   CA 8B 3A               JP   Z,expectM_0_2746S52   
3A24   CD 3D 0B               CALL   printStr   
3A27   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
3A41   CD 3D 0B               CALL   printStr   
3A44   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A53   21 0A 00               LD   hl,10   
3A56   E5                     PUSH   hl   
3A57   CD 0B 0C               CALL   run   
3A5A   2E 00                  .CSTR   "."   
3A5C   CD 3D 0B               CALL   printStr   
3A5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A6C   E1                     POP   hl   
3A6D   E5                     PUSH   hl   
3A6E   E5                     PUSH   hl   
3A6F   CD 0B 0C               CALL   run   
3A72   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3A86   CD C5 0A               CALL   flushBuffer   
3A89   76                     HALT      
3A8A   00                     .CSTR      
3A8B                EXPECTM_0_2746S52:      
3A8B   E1                     POP   HL   
3A8C                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
3A8C   31 00 4A               LD   SP,STACK   
3A8F   CD 44 0B               CALL   init   
3A92   CD 62 48               CALL   execStr   
3A95   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
3AB1   CD C5 0A               CALL   flushBuffer   
3AB4                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
3AB4   E1                     POP   HL   
3AB5   E5                     PUSH   HL   
3AB6   11 0A 00               LD   DE,10   
3AB9   B7                     OR   A   
3ABA   ED 52                  SBC   HL,DE   
3ABC   7D                     LD   A,L   
3ABD   B4                     OR   H   
3ABE   CA 30 3B               JP   Z,expectM_0_2747S52   
3AC1   CD 3D 0B               CALL   printStr   
3AC4   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
3AE6   CD 3D 0B               CALL   printStr   
3AE9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AF8   21 0A 00               LD   hl,10   
3AFB   E5                     PUSH   hl   
3AFC   CD 0B 0C               CALL   run   
3AFF   2E 00                  .CSTR   "."   
3B01   CD 3D 0B               CALL   printStr   
3B04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B11   E1                     POP   hl   
3B12   E5                     PUSH   hl   
3B13   E5                     PUSH   hl   
3B14   CD 0B 0C               CALL   run   
3B17   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3B2B   CD C5 0A               CALL   flushBuffer   
3B2E   76                     HALT      
3B2F   00                     .CSTR      
3B30                EXPECTM_0_2747S52:      
3B30   E1                     POP   HL   
3B31                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
3B31   31 00 4A               LD   SP,STACK   
3B34   CD 44 0B               CALL   init   
3B37   CD 62 48               CALL   execStr   
3B3A   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3B5A   CD C5 0A               CALL   flushBuffer   
3B5D                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
3B5D   E1                     POP   HL   
3B5E   E5                     PUSH   HL   
3B5F   11 0A 00               LD   DE,10   
3B62   B7                     OR   A   
3B63   ED 52                  SBC   HL,DE   
3B65   7D                     LD   A,L   
3B66   B4                     OR   H   
3B67   CA DD 3B               JP   Z,expectM_0_2748S52   
3B6A   CD 3D 0B               CALL   printStr   
3B6D   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3B93   CD 3D 0B               CALL   printStr   
3B96   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BA5   21 0A 00               LD   hl,10   
3BA8   E5                     PUSH   hl   
3BA9   CD 0B 0C               CALL   run   
3BAC   2E 00                  .CSTR   "."   
3BAE   CD 3D 0B               CALL   printStr   
3BB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BBE   E1                     POP   hl   
3BBF   E5                     PUSH   hl   
3BC0   E5                     PUSH   hl   
3BC1   CD 0B 0C               CALL   run   
3BC4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3BD8   CD C5 0A               CALL   flushBuffer   
3BDB   76                     HALT      
3BDC   00                     .CSTR      
3BDD                EXPECTM_0_2748S52:      
3BDD   E1                     POP   HL   
3BDE                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
3BDE   31 00 4A               LD   SP,STACK   
3BE1   CD 44 0B               CALL   init   
3BE4   CD 62 48               CALL   execStr   
3BE7   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3C07   CD C5 0A               CALL   flushBuffer   
3C0A                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
3C0A   E1                     POP   HL   
3C0B   E5                     PUSH   HL   
3C0C   11 14 00               LD   DE,20   
3C0F   B7                     OR   A   
3C10   ED 52                  SBC   HL,DE   
3C12   7D                     LD   A,L   
3C13   B4                     OR   H   
3C14   CA 8A 3C               JP   Z,expectM_0_2749S52   
3C17   CD 3D 0B               CALL   printStr   
3C1A   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3C40   CD 3D 0B               CALL   printStr   
3C43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C52   21 14 00               LD   hl,20   
3C55   E5                     PUSH   hl   
3C56   CD 0B 0C               CALL   run   
3C59   2E 00                  .CSTR   "."   
3C5B   CD 3D 0B               CALL   printStr   
3C5E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C6B   E1                     POP   hl   
3C6C   E5                     PUSH   hl   
3C6D   E5                     PUSH   hl   
3C6E   CD 0B 0C               CALL   run   
3C71   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3C85   CD C5 0A               CALL   flushBuffer   
3C88   76                     HALT      
3C89   00                     .CSTR      
3C8A                EXPECTM_0_2749S52:      
3C8A   E1                     POP   HL   
3C8B                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
3C8B   31 00 4A               LD   SP,STACK   
3C8E   CD 44 0B               CALL   init   
3C91   CD 62 48               CALL   execStr   
3C94   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
3CA8   CD C5 0A               CALL   flushBuffer   
3CAB                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
3CAB   E1                     POP   HL   
3CAC   E5                     PUSH   HL   
3CAD   11 04 00               LD   DE,4   
3CB0   B7                     OR   A   
3CB1   ED 52                  SBC   HL,DE   
3CB3   7D                     LD   A,L   
3CB4   B4                     OR   H   
3CB5   CA 1F 3D               JP   Z,expectM_0_2750S52   
3CB8   CD 3D 0B               CALL   printStr   
3CBB   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
3CD5   CD 3D 0B               CALL   printStr   
3CD8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CE7   21 04 00               LD   hl,4   
3CEA   E5                     PUSH   hl   
3CEB   CD 0B 0C               CALL   run   
3CEE   2E 00                  .CSTR   "."   
3CF0   CD 3D 0B               CALL   printStr   
3CF3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D00   E1                     POP   hl   
3D01   E5                     PUSH   hl   
3D02   E5                     PUSH   hl   
3D03   CD 0B 0C               CALL   run   
3D06   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3D1A   CD C5 0A               CALL   flushBuffer   
3D1D   76                     HALT      
3D1E   00                     .CSTR      
3D1F                EXPECTM_0_2750S52:      
3D1F   E1                     POP   HL   
3D20                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
3D20   31 00 4A               LD   SP,STACK   
3D23   CD 44 0B               CALL   init   
3D26   CD 62 48               CALL   execStr   
3D29   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
3D43   CD C5 0A               CALL   flushBuffer   
3D46                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
3D46   E1                     POP   HL   
3D47   E5                     PUSH   HL   
3D48   11 09 00               LD   DE,9   
3D4B   B7                     OR   A   
3D4C   ED 52                  SBC   HL,DE   
3D4E   7D                     LD   A,L   
3D4F   B4                     OR   H   
3D50   CA C0 3D               JP   Z,expectM_0_2751S52   
3D53   CD 3D 0B               CALL   printStr   
3D56   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
3D76   CD 3D 0B               CALL   printStr   
3D79   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D88   21 09 00               LD   hl,9   
3D8B   E5                     PUSH   hl   
3D8C   CD 0B 0C               CALL   run   
3D8F   2E 00                  .CSTR   "."   
3D91   CD 3D 0B               CALL   printStr   
3D94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DA1   E1                     POP   hl   
3DA2   E5                     PUSH   hl   
3DA3   E5                     PUSH   hl   
3DA4   CD 0B 0C               CALL   run   
3DA7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3DBB   CD C5 0A               CALL   flushBuffer   
3DBE   76                     HALT      
3DBF   00                     .CSTR      
3DC0                EXPECTM_0_2751S52:      
3DC0   E1                     POP   HL   
3DC1                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3DC1   31 00 4A               LD   SP,STACK   
3DC4   CD 44 0B               CALL   init   
3DC7   CD 62 48               CALL   execStr   
3DCA   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3DE2   CD C5 0A               CALL   flushBuffer   
3DE5                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3DE5   E1                     POP   HL   
3DE6   E5                     PUSH   HL   
3DE7   11 06 00               LD   DE,6   
3DEA   B7                     OR   A   
3DEB   ED 52                  SBC   HL,DE   
3DED   7D                     LD   A,L   
3DEE   B4                     OR   H   
3DEF   CA 5D 3E               JP   Z,expectM_0_2752S52   
3DF2   CD 3D 0B               CALL   printStr   
3DF5   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3E13   CD 3D 0B               CALL   printStr   
3E16   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E25   21 06 00               LD   hl,6   
3E28   E5                     PUSH   hl   
3E29   CD 0B 0C               CALL   run   
3E2C   2E 00                  .CSTR   "."   
3E2E   CD 3D 0B               CALL   printStr   
3E31   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E3E   E1                     POP   hl   
3E3F   E5                     PUSH   hl   
3E40   E5                     PUSH   hl   
3E41   CD 0B 0C               CALL   run   
3E44   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3E58   CD C5 0A               CALL   flushBuffer   
3E5B   76                     HALT      
3E5C   00                     .CSTR      
3E5D                EXPECTM_0_2752S52:      
3E5D   E1                     POP   HL   
3E5E                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
3E5E   31 00 4A               LD   SP,STACK   
3E61   CD 44 0B               CALL   init   
3E64   CD 62 48               CALL   execStr   
3E67   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
3E82   CD C5 0A               CALL   flushBuffer   
3E85                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
3E85   E1                     POP   HL   
3E86   E5                     PUSH   HL   
3E87   11 02 00               LD   DE,2   
3E8A   B7                     OR   A   
3E8B   ED 52                  SBC   HL,DE   
3E8D   7D                     LD   A,L   
3E8E   B4                     OR   H   
3E8F   CA 00 3F               JP   Z,expectM_0_2753S52   
3E92   CD 3D 0B               CALL   printStr   
3E95   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
3EB6   CD 3D 0B               CALL   printStr   
3EB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EC8   21 02 00               LD   hl,2   
3ECB   E5                     PUSH   hl   
3ECC   CD 0B 0C               CALL   run   
3ECF   2E 00                  .CSTR   "."   
3ED1   CD 3D 0B               CALL   printStr   
3ED4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EE1   E1                     POP   hl   
3EE2   E5                     PUSH   hl   
3EE3   E5                     PUSH   hl   
3EE4   CD 0B 0C               CALL   run   
3EE7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3EFB   CD C5 0A               CALL   flushBuffer   
3EFE   76                     HALT      
3EFF   00                     .CSTR      
3F00                EXPECTM_0_2753S52:      
3F00   E1                     POP   HL   
3F01                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3F01   31 00 4A               LD   SP,STACK   
3F04   CD 44 0B               CALL   init   
3F07   CD 62 48               CALL   execStr   
3F0A   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3F30   CD C5 0A               CALL   flushBuffer   
3F33                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
3F33   E1                     POP   HL   
3F34   E5                     PUSH   HL   
3F35   11 0A 00               LD   DE,10   
3F38   B7                     OR   A   
3F39   ED 52                  SBC   HL,DE   
3F3B   7D                     LD   A,L   
3F3C   B4                     OR   H   
3F3D   CA B9 3F               JP   Z,expectM_0_2754S52   
3F40   CD 3D 0B               CALL   printStr   
3F43   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3F6F   CD 3D 0B               CALL   printStr   
3F72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F81   21 0A 00               LD   hl,10   
3F84   E5                     PUSH   hl   
3F85   CD 0B 0C               CALL   run   
3F88   2E 00                  .CSTR   "."   
3F8A   CD 3D 0B               CALL   printStr   
3F8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F9A   E1                     POP   hl   
3F9B   E5                     PUSH   hl   
3F9C   E5                     PUSH   hl   
3F9D   CD 0B 0C               CALL   run   
3FA0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3FB4   CD C5 0A               CALL   flushBuffer   
3FB7   76                     HALT      
3FB8   00                     .CSTR      
3FB9                EXPECTM_0_2754S52:      
3FB9   E1                     POP   HL   
3FBA                          ;*Macro unroll:  test "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^", 6
3FBA   31 00 4A               LD   SP,STACK   
3FBD   CD 44 0B               CALL   init   
3FC0   CD 62 48               CALL   execStr   
3FC3   33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
3FEB   CD C5 0A               CALL   flushBuffer   
3FEE                          ;*Macro unroll:  expect "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^",6
3FEE   E1                     POP   HL   
3FEF   E5                     PUSH   HL   
3FF0   11 06 00               LD   DE,6   
3FF3   B7                     OR   A   
3FF4   ED 52                  SBC   HL,DE   
3FF6   7D                     LD   A,L   
3FF7   B4                     OR   H   
3FF8   CA 76 40               JP   Z,expectM_0_2755S52   
3FFB   CD 3D 0B               CALL   printStr   
3FFE   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
402C   CD 3D 0B               CALL   printStr   
402F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
403E   21 06 00               LD   hl,6   
4041   E5                     PUSH   hl   
4042   CD 0B 0C               CALL   run   
4045   2E 00                  .CSTR   "."   
4047   CD 3D 0B               CALL   printStr   
404A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4057   E1                     POP   hl   
4058   E5                     PUSH   hl   
4059   E5                     PUSH   hl   
405A   CD 0B 0C               CALL   run   
405D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4071   CD C5 0A               CALL   flushBuffer   
4074   76                     HALT      
4075   00                     .CSTR      
4076                EXPECTM_0_2755S52:      
4076   E1                     POP   HL   
4077                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
4077   31 00 4A               LD   SP,STACK   
407A   CD 44 0B               CALL   init   
407D   CD 62 48               CALL   execStr   
4080   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
408C   CD C5 0A               CALL   flushBuffer   
408F                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
408F   E1                     POP   HL   
4090   E5                     PUSH   HL   
4091   11 00 00               LD   DE,NUL   
4094   B7                     OR   A   
4095   ED 52                  SBC   HL,DE   
4097   7D                     LD   A,L   
4098   B4                     OR   H   
4099   CA FB 40               JP   Z,expectM_0_2756S52   
409C   CD 3D 0B               CALL   printStr   
409F   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
40B1   CD 3D 0B               CALL   printStr   
40B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40C3   21 00 00               LD   hl,NUL   
40C6   E5                     PUSH   hl   
40C7   CD 0B 0C               CALL   run   
40CA   2E 00                  .CSTR   "."   
40CC   CD 3D 0B               CALL   printStr   
40CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40DC   E1                     POP   hl   
40DD   E5                     PUSH   hl   
40DE   E5                     PUSH   hl   
40DF   CD 0B 0C               CALL   run   
40E2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
40F6   CD C5 0A               CALL   flushBuffer   
40F9   76                     HALT      
40FA   00                     .CSTR      
40FB                EXPECTM_0_2756S52:      
40FB   E1                     POP   HL   
40FC                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
40FC   31 00 4A               LD   SP,STACK   
40FF   CD 44 0B               CALL   init   
4102   CD 62 48               CALL   execStr   
4105   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
4111   CD C5 0A               CALL   flushBuffer   
4114                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
4114   E1                     POP   HL   
4115   E5                     PUSH   HL   
4116   11 00 00               LD   DE,NUL   
4119   B7                     OR   A   
411A   ED 52                  SBC   HL,DE   
411C   7D                     LD   A,L   
411D   B4                     OR   H   
411E   CA 80 41               JP   Z,expectM_0_2757S52   
4121   CD 3D 0B               CALL   printStr   
4124   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
4136   CD 3D 0B               CALL   printStr   
4139   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4148   21 00 00               LD   hl,NUL   
414B   E5                     PUSH   hl   
414C   CD 0B 0C               CALL   run   
414F   2E 00                  .CSTR   "."   
4151   CD 3D 0B               CALL   printStr   
4154   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4161   E1                     POP   hl   
4162   E5                     PUSH   hl   
4163   E5                     PUSH   hl   
4164   CD 0B 0C               CALL   run   
4167   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
417B   CD C5 0A               CALL   flushBuffer   
417E   76                     HALT      
417F   00                     .CSTR      
4180                EXPECTM_0_2757S52:      
4180   E1                     POP   HL   
4181                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
4181   31 00 4A               LD   SP,STACK   
4184   CD 44 0B               CALL   init   
4187   CD 62 48               CALL   execStr   
418A   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
4196   CD C5 0A               CALL   flushBuffer   
4199                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
4199   E1                     POP   HL   
419A   E5                     PUSH   HL   
419B   11 00 00               LD   DE,NUL   
419E   B7                     OR   A   
419F   ED 52                  SBC   HL,DE   
41A1   7D                     LD   A,L   
41A2   B4                     OR   H   
41A3   CA 05 42               JP   Z,expectM_0_2758S52   
41A6   CD 3D 0B               CALL   printStr   
41A9   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
41BB   CD 3D 0B               CALL   printStr   
41BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41CD   21 00 00               LD   hl,NUL   
41D0   E5                     PUSH   hl   
41D1   CD 0B 0C               CALL   run   
41D4   2E 00                  .CSTR   "."   
41D6   CD 3D 0B               CALL   printStr   
41D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41E6   E1                     POP   hl   
41E7   E5                     PUSH   hl   
41E8   E5                     PUSH   hl   
41E9   CD 0B 0C               CALL   run   
41EC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4200   CD C5 0A               CALL   flushBuffer   
4203   76                     HALT      
4204   00                     .CSTR      
4205                EXPECTM_0_2758S52:      
4205   E1                     POP   HL   
4206                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4206   31 00 4A               LD   SP,STACK   
4209   CD 44 0B               CALL   init   
420C   CD 62 48               CALL   execStr   
420F   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
421B   CD C5 0A               CALL   flushBuffer   
421E                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
421E   E1                     POP   HL   
421F   E5                     PUSH   HL   
4220   11 00 00               LD   DE,NUL   
4223   B7                     OR   A   
4224   ED 52                  SBC   HL,DE   
4226   7D                     LD   A,L   
4227   B4                     OR   H   
4228   CA 8A 42               JP   Z,expectM_0_2759S52   
422B   CD 3D 0B               CALL   printStr   
422E   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
4240   CD 3D 0B               CALL   printStr   
4243   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4252   21 00 00               LD   hl,NUL   
4255   E5                     PUSH   hl   
4256   CD 0B 0C               CALL   run   
4259   2E 00                  .CSTR   "."   
425B   CD 3D 0B               CALL   printStr   
425E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
426B   E1                     POP   hl   
426C   E5                     PUSH   hl   
426D   E5                     PUSH   hl   
426E   CD 0B 0C               CALL   run   
4271   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4285   CD C5 0A               CALL   flushBuffer   
4288   76                     HALT      
4289   00                     .CSTR      
428A                EXPECTM_0_2759S52:      
428A   E1                     POP   HL   
428B                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
428B   31 00 4A               LD   SP,STACK   
428E   CD 44 0B               CALL   init   
4291   CD 62 48               CALL   execStr   
4294   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
429C   CD C5 0A               CALL   flushBuffer   
429F                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
429F   E1                     POP   HL   
42A0   E5                     PUSH   HL   
42A1   11 66 4C               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
42A4   B7                     OR   A   
42A5   ED 52                  SBC   HL,DE   
42A7   7D                     LD   A,L   
42A8   B4                     OR   H   
42A9   CA 07 43               JP   Z,expectM_0_2760S52   
42AC   CD 3D 0B               CALL   printStr   
42AF   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
42BD   CD 3D 0B               CALL   printStr   
42C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42CF   21 66 4C               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
42D2   E5                     PUSH   hl   
42D3   CD 0B 0C               CALL   run   
42D6   2E 00                  .CSTR   "."   
42D8   CD 3D 0B               CALL   printStr   
42DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42E8   E1                     POP   hl   
42E9   E5                     PUSH   hl   
42EA   E5                     PUSH   hl   
42EB   CD 0B 0C               CALL   run   
42EE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4302   CD C5 0A               CALL   flushBuffer   
4305   76                     HALT      
4306   00                     .CSTR      
4307                EXPECTM_0_2760S52:      
4307   E1                     POP   HL   
4308                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
4308   31 00 4A               LD   SP,STACK   
430B   CD 44 0B               CALL   init   
430E   CD 62 48               CALL   execStr   
4311   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
4319   CD C5 0A               CALL   flushBuffer   
431C                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
431C   E1                     POP   HL   
431D   E5                     PUSH   HL   
431E   11 34 4C               LD   DE,VARS + ("Z"-"A"+1)*2   
4321   B7                     OR   A   
4322   ED 52                  SBC   HL,DE   
4324   7D                     LD   A,L   
4325   B4                     OR   H   
4326   CA 84 43               JP   Z,expectM_0_2761S52   
4329   CD 3D 0B               CALL   printStr   
432C   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
433A   CD 3D 0B               CALL   printStr   
433D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
434C   21 34 4C               LD   hl,VARS + ("Z"-"A"+1)*2   
434F   E5                     PUSH   hl   
4350   CD 0B 0C               CALL   run   
4353   2E 00                  .CSTR   "."   
4355   CD 3D 0B               CALL   printStr   
4358   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4365   E1                     POP   hl   
4366   E5                     PUSH   hl   
4367   E5                     PUSH   hl   
4368   CD 0B 0C               CALL   run   
436B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
437F   CD C5 0A               CALL   flushBuffer   
4382   76                     HALT      
4383   00                     .CSTR      
4384                EXPECTM_0_2761S52:      
4384   E1                     POP   HL   
4385                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4385   31 00 4A               LD   SP,STACK   
4388   CD 44 0B               CALL   init   
438B   CD 62 48               CALL   execStr   
438E   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
4396   CD C5 0A               CALL   flushBuffer   
4399                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
4399   E1                     POP   HL   
439A   E5                     PUSH   HL   
439B   11 32 4C               LD   DE,VARS + ("Z"-"A")*2   
439E   B7                     OR   A   
439F   ED 52                  SBC   HL,DE   
43A1   7D                     LD   A,L   
43A2   B4                     OR   H   
43A3   CA 01 44               JP   Z,expectM_0_2762S52   
43A6   CD 3D 0B               CALL   printStr   
43A9   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
43B7   CD 3D 0B               CALL   printStr   
43BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43C9   21 32 4C               LD   hl,VARS + ("Z"-"A")*2   
43CC   E5                     PUSH   hl   
43CD   CD 0B 0C               CALL   run   
43D0   2E 00                  .CSTR   "."   
43D2   CD 3D 0B               CALL   printStr   
43D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43E2   E1                     POP   hl   
43E3   E5                     PUSH   hl   
43E4   E5                     PUSH   hl   
43E5   CD 0B 0C               CALL   run   
43E8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
43FC   CD C5 0A               CALL   flushBuffer   
43FF   76                     HALT      
4400   00                     .CSTR      
4401                EXPECTM_0_2762S52:      
4401   E1                     POP   HL   
4402                          ;*Macro unroll:  test "'A' /ad", VARS
4402   31 00 4A               LD   SP,STACK   
4405   CD 44 0B               CALL   init   
4408   CD 62 48               CALL   execStr   
440B   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
4413   CD C5 0A               CALL   flushBuffer   
4416                          ;*Macro unroll:  expect "'A' /ad",VARS
4416   E1                     POP   HL   
4417   E5                     PUSH   HL   
4418   11 00 4C               LD   DE,VARS   
441B   B7                     OR   A   
441C   ED 52                  SBC   HL,DE   
441E   7D                     LD   A,L   
441F   B4                     OR   H   
4420   CA 7E 44               JP   Z,expectM_0_2763S52   
4423   CD 3D 0B               CALL   printStr   
4426   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4434   CD 3D 0B               CALL   printStr   
4437   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4446   21 00 4C               LD   hl,VARS   
4449   E5                     PUSH   hl   
444A   CD 0B 0C               CALL   run   
444D   2E 00                  .CSTR   "."   
444F   CD 3D 0B               CALL   printStr   
4452   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
445F   E1                     POP   hl   
4460   E5                     PUSH   hl   
4461   E5                     PUSH   hl   
4462   CD 0B 0C               CALL   run   
4465   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4479   CD C5 0A               CALL   flushBuffer   
447C   76                     HALT      
447D   00                     .CSTR      
447E                EXPECTM_0_2763S52:      
447E   E1                     POP   HL   
447F                          ;*Macro unroll:  test "-1 /bd/vB/c 0%", $2D
447F   31 00 4A               LD   SP,STACK   
4482   CD 44 0B               CALL   init   
4485   CD 62 48               CALL   execStr   
4488   2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "-1 /bd/vB/c 0%"   
4497   CD C5 0A               CALL   flushBuffer   
449A                          ;*Macro unroll:  expect "-1 /bd/vB/c 0%",$2D
449A   E1                     POP   HL   
449B   E5                     PUSH   HL   
449C   11 2D 00               LD   DE,$2D   
449F   B7                     OR   A   
44A0   ED 52                  SBC   HL,DE   
44A2   7D                     LD   A,L   
44A3   B4                     OR   H   
44A4   CA 09 45               JP   Z,expectM_0_2764S52   
44A7   CD 3D 0B               CALL   printStr   
44AA   43 6F 64 65 3A 20 2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","-1 /bd/vB/c 0%"   
44BF   CD 3D 0B               CALL   printStr   
44C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44D1   21 2D 00               LD   hl,$2D   
44D4   E5                     PUSH   hl   
44D5   CD 0B 0C               CALL   run   
44D8   2E 00                  .CSTR   "."   
44DA   CD 3D 0B               CALL   printStr   
44DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44EA   E1                     POP   hl   
44EB   E5                     PUSH   hl   
44EC   E5                     PUSH   hl   
44ED   CD 0B 0C               CALL   run   
44F0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4504   CD C5 0A               CALL   flushBuffer   
4507   76                     HALT      
4508   00                     .CSTR      
4509                EXPECTM_0_2764S52:      
4509   E1                     POP   HL   
450A                          ;*Macro unroll:  test "`A` /bs/vB/c 0%", 65
450A   31 00 4A               LD   SP,STACK   
450D   CD 44 0B               CALL   init   
4510   CD 62 48               CALL   execStr   
4513   60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "`A` /bs/vB/c 0%"   
4523   CD C5 0A               CALL   flushBuffer   
4526                          ;*Macro unroll:  expect "`A` /bs/vB/c 0%",65
4526   E1                     POP   HL   
4527   E5                     PUSH   HL   
4528   11 41 00               LD   DE,65   
452B   B7                     OR   A   
452C   ED 52                  SBC   HL,DE   
452E   7D                     LD   A,L   
452F   B4                     OR   H   
4530   CA 96 45               JP   Z,expectM_0_2765S52   
4533   CD 3D 0B               CALL   printStr   
4536   43 6F 64 65 3A 20 60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","`A` /bs/vB/c 0%"   
454C   CD 3D 0B               CALL   printStr   
454F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
455E   21 41 00               LD   hl,65   
4561   E5                     PUSH   hl   
4562   CD 0B 0C               CALL   run   
4565   2E 00                  .CSTR   "."   
4567   CD 3D 0B               CALL   printStr   
456A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4577   E1                     POP   hl   
4578   E5                     PUSH   hl   
4579   E5                     PUSH   hl   
457A   CD 0B 0C               CALL   run   
457D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4591   CD C5 0A               CALL   flushBuffer   
4594   76                     HALT      
4595   00                     .CSTR      
4596                EXPECTM_0_2765S52:      
4596   E1                     POP   HL   
4597                          ;*Macro unroll:  test "123 /bd", 3
4597   31 00 4A               LD   SP,STACK   
459A   CD 44 0B               CALL   init   
459D   CD 62 48               CALL   execStr   
45A0   31 32 33 20 2F 62 64 00 .CSTR   "123 /bd"   
45A8   CD C5 0A               CALL   flushBuffer   
45AB                          ;*Macro unroll:  expect "123 /bd",3
45AB   E1                     POP   HL   
45AC   E5                     PUSH   HL   
45AD   11 03 00               LD   DE,3   
45B0   B7                     OR   A   
45B1   ED 52                  SBC   HL,DE   
45B3   7D                     LD   A,L   
45B4   B4                     OR   H   
45B5   CA 13 46               JP   Z,expectM_0_2766S52   
45B8   CD 3D 0B               CALL   printStr   
45BB   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 00 .CSTR   "Code: ","123 /bd"   
45C9   CD 3D 0B               CALL   printStr   
45CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45DB   21 03 00               LD   hl,3   
45DE   E5                     PUSH   hl   
45DF   CD 0B 0C               CALL   run   
45E2   2E 00                  .CSTR   "."   
45E4   CD 3D 0B               CALL   printStr   
45E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45F4   E1                     POP   hl   
45F5   E5                     PUSH   hl   
45F6   E5                     PUSH   hl   
45F7   CD 0B 0C               CALL   run   
45FA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
460E   CD C5 0A               CALL   flushBuffer   
4611   76                     HALT      
4612   00                     .CSTR      
4613                EXPECTM_0_2766S52:      
4613   E1                     POP   HL   
4614                          ;*Macro unroll:  test "123 /bd/vB/c 1%", $32
4614   31 00 4A               LD   SP,STACK   
4617   CD 44 0B               CALL   init   
461A   CD 62 48               CALL   execStr   
461D   31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "123 /bd/vB/c 1%"   
462D   CD C5 0A               CALL   flushBuffer   
4630                          ;*Macro unroll:  expect "123 /bd/vB/c 1%",$32
4630   E1                     POP   HL   
4631   E5                     PUSH   HL   
4632   11 32 00               LD   DE,$32   
4635   B7                     OR   A   
4636   ED 52                  SBC   HL,DE   
4638   7D                     LD   A,L   
4639   B4                     OR   H   
463A   CA A0 46               JP   Z,expectM_0_2767S52   
463D   CD 3D 0B               CALL   printStr   
4640   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "Code: ","123 /bd/vB/c 1%"   
4656   CD 3D 0B               CALL   printStr   
4659   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4668   21 32 00               LD   hl,$32   
466B   E5                     PUSH   hl   
466C   CD 0B 0C               CALL   run   
466F   2E 00                  .CSTR   "."   
4671   CD 3D 0B               CALL   printStr   
4674   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4681   E1                     POP   hl   
4682   E5                     PUSH   hl   
4683   E5                     PUSH   hl   
4684   CD 0B 0C               CALL   run   
4687   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
469B   CD C5 0A               CALL   flushBuffer   
469E   76                     HALT      
469F   00                     .CSTR      
46A0                EXPECTM_0_2767S52:      
46A0   E1                     POP   HL   
46A1                          ;*Macro unroll:  test "123/bd ` x `/bs 456/bd + + ", 9
46A1   31 00 4A               LD   SP,STACK   
46A4   CD 44 0B               CALL   init   
46A7   CD 62 48               CALL   execStr   
46AA   31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "123/bd ` x `/bs 456/bd + + "   
46C6   CD C5 0A               CALL   flushBuffer   
46C9                          ;*Macro unroll:  expect "123/bd ` x `/bs 456/bd + + ",9
46C9   E1                     POP   HL   
46CA   E5                     PUSH   HL   
46CB   11 09 00               LD   DE,9   
46CE   B7                     OR   A   
46CF   ED 52                  SBC   HL,DE   
46D1   7D                     LD   A,L   
46D2   B4                     OR   H   
46D3   CA 45 47               JP   Z,expectM_0_2768S52   
46D6   CD 3D 0B               CALL   printStr   
46D9   43 6F 64 65 3A 20 31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "Code: ","123/bd ` x `/bs 456/bd + + "   
46FB   CD 3D 0B               CALL   printStr   
46FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
470D   21 09 00               LD   hl,9   
4710   E5                     PUSH   hl   
4711   CD 0B 0C               CALL   run   
4714   2E 00                  .CSTR   "."   
4716   CD 3D 0B               CALL   printStr   
4719   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4726   E1                     POP   hl   
4727   E5                     PUSH   hl   
4728   E5                     PUSH   hl   
4729   CD 0B 0C               CALL   run   
472C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4740   CD C5 0A               CALL   flushBuffer   
4743   76                     HALT      
4744   00                     .CSTR      
4745                EXPECTM_0_2768S52:      
4745   E1                     POP   HL   
4746                          ;*Macro unroll:  test "#4321 /bh", 4
4746   31 00 4A               LD   SP,STACK   
4749   CD 44 0B               CALL   init   
474C   CD 62 48               CALL   execStr   
474F   23 34 33 32 31 20 2F 62 68 00 .CSTR   "#4321 /bh"   
4759   CD C5 0A               CALL   flushBuffer   
475C                          ;*Macro unroll:  expect "#4321 /bh",4
475C   E1                     POP   HL   
475D   E5                     PUSH   HL   
475E   11 04 00               LD   DE,4   
4761   B7                     OR   A   
4762   ED 52                  SBC   HL,DE   
4764   7D                     LD   A,L   
4765   B4                     OR   H   
4766   CA C6 47               JP   Z,expectM_0_2769S52   
4769   CD 3D 0B               CALL   printStr   
476C   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 00 .CSTR   "Code: ","#4321 /bh"   
477C   CD 3D 0B               CALL   printStr   
477F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
478E   21 04 00               LD   hl,4   
4791   E5                     PUSH   hl   
4792   CD 0B 0C               CALL   run   
4795   2E 00                  .CSTR   "."   
4797   CD 3D 0B               CALL   printStr   
479A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47A7   E1                     POP   hl   
47A8   E5                     PUSH   hl   
47A9   E5                     PUSH   hl   
47AA   CD 0B 0C               CALL   run   
47AD   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
47C1   CD C5 0A               CALL   flushBuffer   
47C4   76                     HALT      
47C5   00                     .CSTR      
47C6                EXPECTM_0_2769S52:      
47C6   E1                     POP   HL   
47C7                          ;*Macro unroll:  test "#4321 /bh/vB/c 0%", $34
47C7   31 00 4A               LD   SP,STACK   
47CA   CD 44 0B               CALL   init   
47CD   CD 62 48               CALL   execStr   
47D0   23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "#4321 /bh/vB/c 0%"   
47E2   CD C5 0A               CALL   flushBuffer   
47E5                          ;*Macro unroll:  expect "#4321 /bh/vB/c 0%",$34
47E5   E1                     POP   HL   
47E6   E5                     PUSH   HL   
47E7   11 34 00               LD   DE,$34   
47EA   B7                     OR   A   
47EB   ED 52                  SBC   HL,DE   
47ED   7D                     LD   A,L   
47EE   B4                     OR   H   
47EF   CA 57 48               JP   Z,expectM_0_2770S52   
47F2   CD 3D 0B               CALL   printStr   
47F5   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","#4321 /bh/vB/c 0%"   
480D   CD 3D 0B               CALL   printStr   
4810   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
481F   21 34 00               LD   hl,$34   
4822   E5                     PUSH   hl   
4823   CD 0B 0C               CALL   run   
4826   2E 00                  .CSTR   "."   
4828   CD 3D 0B               CALL   printStr   
482B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4838   E1                     POP   hl   
4839   E5                     PUSH   hl   
483A   E5                     PUSH   hl   
483B   CD 0B 0C               CALL   run   
483E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4852   CD C5 0A               CALL   flushBuffer   
4855   76                     HALT      
4856   00                     .CSTR      
4857                EXPECTM_0_2770S52:      
4857   E1                     POP   HL   
4858                             ; 
4858   CD 3D 0B               CALL   printStr   
485B   44 6F 6E 65 21 00      .CSTR   "Done!"   
4861   76                     HALT      
4862                          ALIGN   2   
4862                             ; printer:
4862                             ;     pop hl
4862                             ;     call prtdec
4862                             ;     jp (ix)
4862                             ; executes a null teminated string (null executes exit_)
4862                             ; the string should be immedaitely following the call
4862                EXECSTR:      ; create a root stack frame
4862   C1                     POP   bc   ; bc = code*
4863   0B                     DEC   bc   ; dec to prepare for next routine
4864   11 00 00               LD   de,0   
4867   D5                     PUSH   de   ; push fake IP
4868   D5                     PUSH   de   ; push null arg_list*
4869   D5                     PUSH   de   ; push null first_arg*
486A   D5                     PUSH   de   ; push fake BP
486B   DD E9                  JP   (ix)   
486D                STKSIZE:   EQU   $100   ; Stack size
486D                TIBSIZE:   EQU   $100   ; 256 bytes
486D                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
486D                          ALIGN   $100   
4900                          DS   STKSIZE   
4A00                STACK:       
4A00                          ALIGN   $100   
4A00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4B00                          ALIGN   $100   
4B00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4C00                          ALIGN   $100   
4C00                VARS:        
4C00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4CD0                RESTARTS:      
4CD0                RST08:    DS   2   
4CD2                RST10:    DS   2   
4CD4                RST18:    DS   2   
4CD6                RST20:    DS   2   
4CD8                RST28:    DS   2   
4CDA                RST30:    DS   2   ; 
4CDC                BAUD:     DS   2   ; 
4CDE                INTVEC:   DS   2   ; 
4CE0                NMIVEC:   DS   2   ; 
4CE2                GETCVEC:   DS   2   ; 
4CE4                PUTCVEC:   DS   2   ; 
4CE6                SYSVARS:      
4CE6                             ; initialised sys variables (preserved)
4CE6                VDATAWIDTH:   DS   2   ; 
4CE8                VNUMBASE:   DS   2   ; 
4CEA                VTIBPTR:   DS   2   ; 
4CEC                VBUFPTR:   DS   2   ; 
4CEE                VNEXT:    DS   2   ; 
4CF0                VHEAPPTR:   DS   2   ; 
4CF2                             ; uninitialised sys variables (preserved)
4CF2                VPOINTER:   DS   2   ; 
4CF4                VREMAIN:   DS   2   ; 
4CF6                VSAVEDIP:   DS   2   ; 
4CF8                VSAVEDSP:   DS   2   ; 
4CFA                VSAVEDBP:   DS   2   ; 
4CFC                VCHECKSUM:   DS   2   ; 
4CFE                             ; uninitialised sys variables (unpreserved)
4CFE                VTEMP1:   DS   2   ; 
4D00                VTEMP2:   DS   2   ; 
4D02                VLASTDEF:   DS   2   ; 
4D04                VHASHSTR:   DS   2   ; 
4D06                TBPTR:    DS   2   ; reserved for tests
4D08                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 46 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AB0 DEFINED AT LINE 1723 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 30 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 31 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 32 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 33 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 34 IN MAIN.asm
                    > USED AT LINE 416 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 35 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 36 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 37 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 51 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 56 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 66 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 169 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 171 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 173 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 175 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 177 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 179 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 181 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 183 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 185 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 187 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 196 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 221 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 240 IN MAIN.asm
LT_:                036D DEFINED AT LINE 248 IN MAIN.asm
LT1:                0376 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037F DEFINED AT LINE 260 IN MAIN.asm
NOP_:               0382 DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0384 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0387 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD:                0387 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               0392 DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0396 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
AT:                 0399 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADDR:               0399 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A3 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
AND:                03A3 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03AA DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AE DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AE DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B7 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
XOR1:               03B8 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03C2 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
DOLLAR:             03C7 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ARG:                03C7 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E5 DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
ARG0A:              03EE DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
ARG1:               03F3 DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG1A:              03FB DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
LBRACK:             03FE DEFINED AT LINE 384 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
ARRAYSTART:         03FE DEFINED AT LINE 385 IN MAIN.asm
RBRACK:             041A DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYEND:           041A DEFINED AT LINE 400 IN MAIN.asm
ARRAYEND1:          043C DEFINED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
ARRAYEND2:          044C DEFINED AT LINE 432 IN MAIN.asm
                    > USED AT LINE 428 IN MAIN.asm
ARRINDEX:           0472 DEFINED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRINDEX0:          047A DEFINED AT LINE 467 IN MAIN.asm
ARRINDEX1:          047B DEFINED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
ARRINDEX2:          0487 DEFINED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
ASSIGN:             048A DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            048C DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
ASSIGNX:            048D DEFINED AT LINE 488 IN MAIN.asm
ASSIGN1:            0499 DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
COLON:              049B DEFINED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            049B DEFINED AT LINE 504 IN MAIN.asm
ARGLIST1:           04A5 DEFINED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
ARGLIST1A:          04AD DEFINED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST2:           04B5 DEFINED AT LINE 522 IN MAIN.asm
ARGLIST3:           04BD DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 528 IN MAIN.asm
ARGLIST4:           04C0 DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ARGLIST5:           04C6 DEFINED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
LBRACE:             04D2 DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCKSTART:         04D2 DEFINED AT LINE 551 IN MAIN.asm
BLOCKSTART1:        04D6 DEFINED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCKSTART2:        0502 DEFINED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
BLOCKSTART3:        0505 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
                    > USED AT LINE 580 IN MAIN.asm
BLOCKSTART4:        050D DEFINED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
BLOCKSTART5:        0510 DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
BLOCKSTART6:        0538 DEFINED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
RBRACE:             053B DEFINED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           053B DEFINED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
BLOCKEND1:          056D DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
BLOCKEND2:          0579 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCKEND3:          058B DEFINED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
TICK:               0597 DEFINED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               0597 DEFINED AT LINE 669 IN MAIN.asm
CHAR1:              059A DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 682 IN MAIN.asm
CHAR2:              05A6 DEFINED AT LINE 680 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
CHAR3:              05A9 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
BACKSLASH:          05AC DEFINED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
COMMA:              05AE DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05AE DEFINED AT LINE 693 IN MAIN.asm
DISCARD1:           05BB DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
SLASH:              05BD DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
DIV:                05F3 DEFINED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
DOT:                0604 DEFINED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DIVIDE:             0616 DEFINED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
DIVIDE1:            061B DEFINED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 812 IN MAIN.asm
DIVIDE2:            0628 DEFINED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
DIVIDE3:            0629 DEFINED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
EQUALS:             062F DEFINED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         0637 DEFINED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           063C DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0641 DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
TRUE1:              0644 DEFINED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
NULL1:              064A DEFINED AT LINE 845 IN MAIN.asm
FALSE1:             064A DEFINED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
CARET:              0650 DEFINED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 0650 DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
GO1:                0651 DEFINED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
GO2:                0657 DEFINED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
GOBLOCK:            0663 DEFINED AT LINE 870 IN MAIN.asm
GOBLOCK1:           0663 DEFINED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
GOBLOCK2:           0688 DEFINED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
GOLAMBDA:           0696 DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
GOLAMBDA1:          06B3 DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
GOLAMBDA2:          06B9 DEFINED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
GOLAMBDA3:          06C4 DEFINED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
GOLAMBDA4:          06DC DEFINED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
GOLAMBDA5:          06E0 DEFINED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
GOLAMBDA6:          06E3 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
GOLAMBDA7:          06E6 DEFINED AT LINE 961 IN MAIN.asm
GOLAMBDA8:          06EB DEFINED AT LINE 967 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
HASH:               06F6 DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             06F6 DEFINED AT LINE 977 IN MAIN.asm
HEXNUM1:            06F9 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
HEXNUM2:            0701 DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
UPCASE:             0713 DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            0718 DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             071D DEFINED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
QUESTION:           072A DEFINED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 072A DEFINED AT LINE 1019 IN MAIN.asm
IFTE:               0736 DEFINED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 1023 IN MAIN.asm
IFTE1:              0737 DEFINED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 1026 IN MAIN.asm
STAR:               0743 DEFINED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                0743 DEFINED AT LINE 1042 IN MAIN.asm
MUL2:               0745 DEFINED AT LINE 1045 IN MAIN.asm
MUL3:               074D DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
NUM:                075F DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               0768 DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
NUM1:               0769 DEFINED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
NUM2:               0781 DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
NUM3:               078C DEFINED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
UNDERSCORE:         078F DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
REMAIN:             078F DEFINED AT LINE 1102 IN MAIN.asm
RPAREN:             0795 DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          079D DEFINED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
SHIFTLEFT:          07B9 DEFINED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         07C1 DEFINED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
SHIFTLEFT2:         07C2 DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
SHIFTRIGHT:         07C9 DEFINED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        07D1 DEFINED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
SHIFTRIGHT2:        07D5 DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
DBLQUOTE:           07DC DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             07DC DEFINED AT LINE 1174 IN MAIN.asm
STRING1:            07E5 DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
STRING2:            07E8 DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
STRING3:            07F1 DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
MINUS:              0804 DEFINED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                0810 DEFINED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
SUB1:               081A DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
ERROR1:             0823 DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
COMMENT:            082A DEFINED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
COMMAND_A:          0833 DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
ABSOLUTE:           083F DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
ADDROF:             084C DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
ADDROF1:            0860 DEFINED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
ADDROF2:            086B DEFINED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
COMMAND_B:          086D DEFINED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
BUFFERARRAY:        0885 DEFINED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
BUFFERNUMBER:       08B9 DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 1301 IN MAIN.asm
BUFFERDEC:          08C0 DEFINED AT LINE 1329 IN MAIN.asm
BUFFERDEC0:         08DA DEFINED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
BUFFERDEC1:         08EA DEFINED AT LINE 1360 IN MAIN.asm
                    > USED AT LINE 1348 IN MAIN.asm
BUFFERDEC2:         090A DEFINED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
                    > USED AT LINE 1365 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
                    > USED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1372 IN MAIN.asm
BUFFERDEC3:         090C DEFINED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
BUFFERDEC4:         091C DEFINED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
BUFFERDEC5:         091D DEFINED AT LINE 1390 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
BUFFERHEX:          0926 DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
BUFFERHEX1:         0947 DEFINED AT LINE 1419 IN MAIN.asm
                    > USED AT LINE 1409 IN MAIN.asm
                    > USED AT LINE 1411 IN MAIN.asm
BUFFERHEX2:         0950 DEFINED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1425 IN MAIN.asm
BREAK:              095E DEFINED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 1303 IN MAIN.asm
BREAK1:             0965 DEFINED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
BUFFERSTRING:       0978 DEFINED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
BUFFERSTRING0:      097F DEFINED AT LINE 1463 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
BUFFERSTRING1:      0985 DEFINED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
BUFFERCHAR:         0992 DEFINED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
BUFFERXCHARS:       0997 DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
BUFFERXCHARS0:      0998 DEFINED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
BUFFERXCHARS1:      09A1 DEFINED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
BUFFERXCHARS2:      09A9 DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
COMMAND_I:          09B3 DEFINED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
COMMAND_P:          09BF DEFINED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
PARTIAL:            09D1 DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
PRINTBUFFER:        09F1 DEFINED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1520 IN MAIN.asm
PRINTCHARS:         0A14 DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
PRINTCHARS1:        0A1B DEFINED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
PRINTCHARS2:        0A21 DEFINED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
PRINTSTACK:         0A26 DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
SIZE:               0A28 DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
COMMAND_V:          0A32 DEFINED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
CONSTBUFSTART:      0A47 DEFINED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
CONSTHEAPSTART:     0A4C DEFINED AT LINE 1637 IN MAIN.asm
CONSTTIBSTART:      0A51 DEFINED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
VARBUFPTR:          0A56 DEFINED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
VARHEAPPTR:         0A5F DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
VARTIBPTR:          0A68 DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
VARIABLE:           0A71 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
CONSTANT:           0A74 DEFINED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
CHARS:              0A77 DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
CHARS1:             0A7A DEFINED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
DECIMAL:            0A7F DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
DECIMAL1:           0A82 DEFINED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
HEXADECIMAL:        0A87 DEFINED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
INPUT:              0A8D DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
KEY:                0A98 DEFINED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
OUTPUT:             0AA1 DEFINED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
NUMBERS:            0AAA DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
FILTER:             0AB0 DEFINED AT LINE 1721 IN MAIN.asm
MAP:                0AB0 DEFINED AT LINE 1722 IN MAIN.asm
ARGS0A1L_:          0AB2 DEFINED AT LINE 1729 IN MAIN.asm
ARGS0A1L:           0AB4 DEFINED AT LINE 1732 IN MAIN.asm
ARGS1A0L_:          0AB5 DEFINED AT LINE 1735 IN MAIN.asm
ARGS1A0L:           0AB7 DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
ARGS1A1L_:          0AB8 DEFINED AT LINE 1741 IN MAIN.asm
ARGS1A1L:           0ABA DEFINED AT LINE 1744 IN MAIN.asm
ARGS2A0L_:          0ABC DEFINED AT LINE 1747 IN MAIN.asm
ARGS2A0L:           0ABE DEFINED AT LINE 1750 IN MAIN.asm
ARGS1A2L_:          0AC0 DEFINED AT LINE 1753 IN MAIN.asm
ARGS1A2L:           0AC2 DEFINED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
FLUSHBUFFER:        0AC5 DEFINED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
JUMPTABLE:          0ADC DEFINED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
JUMPTABLE0:         0ADE DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
JUMPTABLE1:         0AEB DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
JUMPTABLE2:         0AEC DEFINED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 1792 IN MAIN.asm
PRTSTR0:            0AF2 DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
PRTSTR:             0AF6 DEFINED AT LINE 1810 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
NESTING:            0AFB DEFINED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
NESTING0:           0B05 DEFINED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
NESTING1A:          0B0C DEFINED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
NESTING1:           0B0F DEFINED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
NESTING2:           0B1E DEFINED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1846 IN MAIN.asm
NESTING3:           0B20 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
NESTING4:           0B2B DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
PROMPT:             0B2D DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
CRLF:               0B36 DEFINED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
PRINTSTR:           0B3D DEFINED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 22
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 144
INIT:               0B44 DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
INIT0:              0B5D DEFINED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
START:              0B62 DEFINED AT LINE 1898 IN MAIN.asm
INTERPRET:          0B7C DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2049 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
INTERPRET2:         0B8B DEFINED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
INTERPRET3:         0B93 DEFINED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
INTERPRET4:         0B99 DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
INTERPRET5:         0B9E DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
INTERPRET5A:        0BC1 DEFINED AT LINE 1967 IN MAIN.asm
INTERPRET6:         0BC3 DEFINED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
INTERPRET7:         0BD1 DEFINED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
INTERPRET8:         0BE4 DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
NEXT:               0BEF DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
NEXT1:              0C00 DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
EXIT:               0C07 DEFINED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
RUN:                0C0B DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
ERROR:              0C0F DEFINED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
BACKSPACE_:         0C22 DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
EDIT_:              0C32 DEFINED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
REEDIT_:            0C4A DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
PRINTSTACK_:        0C4D DEFINED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2650S52:  0D7E DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2658S52:  0DFB DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2659S52:  0E6E DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2660S52:  0EDF DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2661S52:  0F50 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2662S52:  0FC1 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2663S52:  1032 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2664S52:  10A5 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2665S52:  111A DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2666S52:  118D DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2667S52:  1200 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2668S52:  1275 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2669S52:  12EC DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2670S52:  1361 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2671S52:  13D6 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2672S52:  1451 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2673S52:  14CC DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2674S52:  1545 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2675S52:  15C2 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2676S52:  1643 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2677S52:  16C2 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2678S52:  173B DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2679S52:  17BC DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2680S52:  1839 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2681S52:  18B2 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2682S52:  192B DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2683S52:  19AC DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2684S52:  1A25 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2685S52:  1A9E DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2686S52:  1B19 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2687S52:  1BA4 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2688S52:  1C1D DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2689S52:  1C9E DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2690S52:  1D17 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2691S52:  1D94 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2692S52:  1E0D DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2693S52:  1E88 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2694S52:  1F03 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2695S52:  1F7C DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2696S52:  1FF5 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2697S52:  206E DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2698S52:  20E7 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2699S52:  2160 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2700S52:  21D9 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2701S52:  2252 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2702S52:  22CB DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2703S52:  2346 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2704S52:  23C1 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2705S52:  243C DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2706S52:  24B9 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2707S52:  2536 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2708S52:  25AD DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2709S52:  2624 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2710S52:  26A1 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2711S52:  2724 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2712S52:  27A7 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2713S52:  282E DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2714S52:  28BF DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2715S52:  2950 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2716S52:  29C9 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2717S52:  2A44 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2718S52:  2AC1 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2719S52:  2B40 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2720S52:  2BBD DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2721S52:  2C38 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2722S52:  2CB5 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2723S52:  2D38 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2724S52:  2DBF DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2725S52:  2E42 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2726S52:  2ECF DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2727S52:  2F5E DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2728S52:  2FF3 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2729S52:  308C DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2730S52:  3117 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2731S52:  31A8 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2732S52:  323B DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2733S52:  32D0 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2734S52:  3363 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2735S52:  3404 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2736S52:  3493 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2737S52:  352E DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2738S52:  35CB DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2739S52:  366A DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2740S52:  3715 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2741S52:  37C0 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2742S52:  3849 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2743S52:  38D8 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2744S52:  3961 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2745S52:  39F6 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2746S52:  3A8B DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2747S52:  3B30 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2748S52:  3BDD DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2749S52:  3C8A DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2750S52:  3D1F DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2751S52:  3DC0 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2752S52:  3E5D DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2753S52:  3F00 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2754S52:  3FB9 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2755S52:  4076 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2756S52:  40FB DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2757S52:  4180 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2758S52:  4205 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2759S52:  428A DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2760S52:  4307 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2761S52:  4384 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2762S52:  4401 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2763S52:  447E DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2764S52:  4509 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2765S52:  4596 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2766S52:  4613 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2767S52:  46A0 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2768S52:  4745 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2769S52:  47C6 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2770S52:  4857 DEFINED AT LINE 42
                    > USED AT LINE 10
EXECSTR:            4862 DEFINED AT LINE 156
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4A00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
TIB:                4A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
BUF:                4B00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1769 IN MAIN.asm
VARS:               4C00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           4CD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4CD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4CD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4CD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4CD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4CD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4CDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4CDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4CDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4CE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4CE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4CE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4CE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1886 IN MAIN.asm
VDATAWIDTH:         4CE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
VNUMBASE:           4CE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
VTIBPTR:            4CEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
VBUFPTR:            4CEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
VNEXT:              4CEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1883 IN MAIN.asm
VHEAPPTR:           4CF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
VPOINTER:           4CF2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
VREMAIN:            4CF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
VSAVEDIP:           4CF6 DEFINED AT LINE 48 IN ram.asm
VSAVEDSP:           4CF8 DEFINED AT LINE 49 IN ram.asm
VSAVEDBP:           4CFA DEFINED AT LINE 50 IN ram.asm
VCHECKSUM:          4CFC DEFINED AT LINE 51 IN ram.asm
VTEMP1:             4CFE DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
VTEMP2:             4D00 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
VLASTDEF:           4D02 DEFINED AT LINE 57 IN ram.asm
VHASHSTR:           4D04 DEFINED AT LINE 58 IN ram.asm
TBPTR:              4D06 DEFINED AT LINE 59 IN ram.asm
HEAP:               4D08 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 1638 IN MAIN.asm
