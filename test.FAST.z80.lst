0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 53               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 53               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 53               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 53               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 53               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 53               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 53               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 53               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 53               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 53               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 51               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 53               LD   (RST08),HL   
0094   22 D2 53               LD   (RST10),HL   
0097   22 D4 53               LD   (RST18),HL   
009A   22 D6 53               LD   (RST20),HL   
009D   22 D8 53               LD   (RST28),HL   
00A0   22 DA 53               LD   (RST30),HL   
00A3   22 DE 53               LD   (INTVEC),HL   
00A6   22 E0 53               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 53               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 53               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0E               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   3E                     DB   lsb(bang_)   ; !
0181   F3                     DB   lsb(dquote_)   ; "
0182   EA                     DB   lsb(hash_)   ; #
0183   C0                     DB   lsb(dollar_)   ; $
0184   C9                     DB   lsb(percent_)   ; %
0185   20                     DB   lsb(amper_)   ; &
0186   D2                     DB   lsb(tick_)   ; '
0187   CC                     DB   lsb(lparen_)   ; (
0188   BD                     DB   lsb(rparen_)   ; )
0189   E7                     DB   lsb(star_)   ; *
018A   04                     DB   lsb(plus_)   ; +
018B   F0                     DB   lsb(comma_)   ; ,
018C   4E                     DB   lsb(minus_)   ; -
018D   D8                     DB   lsb(dot_)   ; .
018E   FF                     DB   lsb(slash_)   ; /	
018F   6B                     DB   lsb(num_)   ; 0
0190   6B                     DB   lsb(num_)   ; 1
0191   6B                     DB   lsb(num_)   ; 2
0192   6B                     DB   lsb(num_)   ; 3
0193   6B                     DB   lsb(num_)   ; 4
0194   6B                     DB   lsb(num_)   ; 5
0195   6B                     DB   lsb(num_)   ; 6
0196   6B                     DB   lsb(num_)   ; 7
0197   6B                     DB   lsb(num_)   ; 8
0198   6B                     DB   lsb(num_)   ; 9
0199   DB                     DB   lsb(colon_)   ; :
019A   D5                     DB   lsb(semicolon_)   ; ;
019B   86                     DB   lsb(lt_)   ; <
019C   6E                     DB   lsb(eq_)   ; =
019D   7B                     DB   lsb(gt_)   ; >
019E   E4                     DB   lsb(question_)   ; ?
019F   34                     DB   lsb(at_)   ; @
01A0   DE                     DB   lsb(upcase_)   ; A
01A1   DE                     DB   lsb(upcase_)   ; B
01A2   DE                     DB   lsb(upcase_)   ; C
01A3   DE                     DB   lsb(upcase_)   ; D
01A4   DE                     DB   lsb(upcase_)   ; E
01A5   DE                     DB   lsb(upcase_)   ; F
01A6   DE                     DB   lsb(upcase_)   ; G
01A7   DE                     DB   lsb(upcase_)   ; h
01A8   DE                     DB   lsb(upcase_)   ; I
01A9   DE                     DB   lsb(upcase_)   ; J
01AA   DE                     DB   lsb(upcase_)   ; K
01AB   DE                     DB   lsb(upcase_)   ; L
01AC   DE                     DB   lsb(upcase_)   ; M
01AD   DE                     DB   lsb(upcase_)   ; N
01AE   DE                     DB   lsb(upcase_)   ; O
01AF   DE                     DB   lsb(upcase_)   ; p
01B0   DE                     DB   lsb(upcase_)   ; Q
01B1   DE                     DB   lsb(upcase_)   ; R
01B2   DE                     DB   lsb(upcase_)   ; S
01B3   DE                     DB   lsb(upcase_)   ; T
01B4   DE                     DB   lsb(upcase_)   ; U
01B5   DE                     DB   lsb(upcase_)   ; V
01B6   DE                     DB   lsb(upcase_)   ; W
01B7   DE                     DB   lsb(upcase_)   ; X
01B8   DE                     DB   lsb(upcase_)   ; Y
01B9   DE                     DB   lsb(upcase_)   ; Z
01BA   C3                     DB   lsb(lbrack_)   ; [
01BB   F6                     DB   lsb(backslash_)   ; \
01BC   C6                     DB   lsb(rbrack_)   ; ]
01BD   ED                     DB   lsb(caret_)   ; ^
01BE   F9                     DB   lsb(underscore_)   ; _
01BF   F3                     DB   lsb(dquote_)   ; `     used for testing string   	
01C0   E1                     DB   lsb(lowcase_)   ; a
01C1   E1                     DB   lsb(lowcase_)   ; b
01C2   E1                     DB   lsb(lowcase_)   ; c
01C3   E1                     DB   lsb(lowcase_)   ; d
01C4   E1                     DB   lsb(lowcase_)   ; e
01C5   E1                     DB   lsb(lowcase_)   ; f
01C6   E1                     DB   lsb(lowcase_)   ; g
01C7   E1                     DB   lsb(lowcase_)   ; h
01C8   E1                     DB   lsb(lowcase_)   ; i
01C9   E1                     DB   lsb(lowcase_)   ; j
01CA   E1                     DB   lsb(lowcase_)   ; k
01CB   E1                     DB   lsb(lowcase_)   ; l
01CC   E1                     DB   lsb(lowcase_)   ; m
01CD   E1                     DB   lsb(lowcase_)   ; n
01CE   E1                     DB   lsb(lowcase_)   ; o
01CF   E1                     DB   lsb(lowcase_)   ; p
01D0   E1                     DB   lsb(lowcase_)   ; q
01D1   E1                     DB   lsb(lowcase_)   ; r
01D2   E1                     DB   lsb(lowcase_)   ; s
01D3   E1                     DB   lsb(lowcase_)   ; t
01D4   E1                     DB   lsb(lowcase_)   ; u
01D5   E1                     DB   lsb(lowcase_)   ; v
01D6   E1                     DB   lsb(lowcase_)   ; w
01D7   E1                     DB   lsb(lowcase_)   ; x
01D8   E1                     DB   lsb(lowcase_)   ; y
01D9   E1                     DB   lsb(lowcase_)   ; z
01DA   CC                     DB   lsb(lbrace_)   ; {
01DB   2B                     DB   lsb(pipe_)   ; |
01DC   CF                     DB   lsb(rbrace_)   ; }
01DD   FC                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 51                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 52                  DW   BUF   ; vBUFPtr pointer into BUF
01E6   23 0D                  DW   next   ; nNext
01E8   1C 54                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; unused
01EE   00 00                  DW   0   ; unused
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN *********************************************
0204                PLUS_:       ; add the top 2 members of the stack
0204                ADD:         
0204   03                     INC   bc   
0205   0A                     LD   a,(bc)   
0206   FE 2B                  CP   "+"   ; ++ increment variable
0208   20 05                  JR   nz,add1   
020A   E1                     POP   hl   
020B   23                     INC   hl   
020C   C3 80 07               JP   assign0   
020F                ADD1:        
020F   0B                     DEC   bc   
0210   D1                     POP   de   ; second term
0211   E1                     POP   hl   ; first term
0212   19                     ADD   hl,de   
0213                ADD3:        
0213   03                     INC   bc   
0214   0A                     LD   a,(bc)   
0215   FE 3D                  CP   "="   
0217   28 04                  JR   z,add4   
0219   0B                     DEC   bc   
021A   E5                     PUSH   hl   
021B   DD E9                  JP   (ix)   
021D                ADD4:        
021D   C3 80 07               JP   assign0   
0220                AMPER_:      
0220                AND:         
0220   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0221   E1                     POP   hl   
0222   7B                     LD   a,e   
0223   A5                     AND   l   
0224   6F                     LD   l,a   
0225   7A                     LD   a,d   
0226   A4                     AND   h   
0227                AND1:        
0227   67                     LD   h,a   
0228   E5                     PUSH   hl   
0229   DD E9                  JP   (ix)   
022B                PIPE_:       
022B                OR:          
022B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
022C   E1                     POP   hl   
022D   7B                     LD   a,e   
022E   B5                     OR   l   
022F   6F                     LD   l,a   
0230   7A                     LD   a,d   
0231   B4                     OR   h   
0232   18 F3                  JR   and1   
0234                             ; @ addr
0234                             ; -- ptr
0234                AT_:         
0234                ADDR:        
0234   ED 5B F4 53            LD   de,(vPointer)   
0238   21 F4 53               LD   hl,vPointer   
023B   C3 9C 04               JP   variable   
023E                BANG_:       ; logical invert, any non zero value
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3D                  CP   "="   
0242   20 04                  JR   nz,not   
0244   E1                     POP   hl   
0245   D1                     POP   de   
0246   18 55                  JR   notequals   
0248                NOT:         
0248   0B                     DEC   bc   
0249   21 00 00               LD   hl,0   ; is considered true
024C   18 2A                  JR   eq1   
024E                MINUS_:      
024E   03                     INC   bc   ; check if sign of a number
024F   0A                     LD   a,(bc)   
0250   0B                     DEC   bc   
0251   FE 30                  CP   "0"   
0253   38 04                  JR   c,sub   
0255   FE 3A                  CP   "9"+1   
0257   38 12                  JR   c,num_   
0259                SUB:         ; Subtract the value 2nd on stack from top of stack
0259   03                     INC   bc   
025A   FE 2D                  CP   "-"   
025C   20 05                  JR   nz,sub1   
025E   E1                     POP   hl   
025F   2B                     DEC   hl   
0260   C3 80 07               JP   assign0   
0263                SUB1:        
0263   0B                     DEC   bc   
0264   D1                     POP   de   
0265   E1                     POP   hl   
0266   B7                     OR   a   
0267   ED 52                  SBC   hl,de   
0269   18 A8                  JR   add3   
026B                NUM_:        
026B   C3 1F 0B               JP   num   
026E                EQ_:         
026E   CD DA 0B               CALL   jumpTable   
0271   3D                     DB   "="   
0272   77                     DB   lsb(eq0_)   
0273   00                     DB   NUL   
0274   C3 7E 07               JP   assign   
0277                EQ0_:        
0277   E1                     POP   hl   
0278                EQ1:         
0278   D1                     POP   de   
0279   18 1B                  JR   equals   
027B                GT_:         
027B   03                     INC   bc   
027C   0A                     LD   a,(bc)   
027D   FE 3E                  CP   ">"   
027F   CA 67 0B               JP   z,shiftRight   
0282   D1                     POP   de   
0283   E1                     POP   hl   
0284   18 09                  JR   lt1   
0286                LT_:         
0286   03                     INC   bc   
0287   0A                     LD   a,(bc)   
0288   FE 3C                  CP   "<"   
028A   CA 57 0B               JP   z,shiftLeft   
028D   E1                     POP   hl   
028E   D1                     POP   de   
028F                LT1:         
028F   FE 3D                  CP   "="   
0291   28 11                  JR   z,lessthaneq   
0293   0B                     DEC   bc   
0294   18 13                  JR   lessthan   
0296                             ; hl = value1, de = value2
0296                             ; hl = result
0296                EQUALS:      
0296   B7                     OR   a   ; reset the carry flag
0297   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0299   28 16                  JR   z,true1   
029B   18 1A                  JR   false1   
029D                NOTEQUALS:      
029D   B7                     OR   a   ; reset the carry flag
029E   ED 52                  SBC   hl,de   
02A0   20 0F                  JR   nz,true1   
02A2   18 13                  JR   false1   
02A4                             ; hl = value1 de = value2
02A4                             ; hl = result
02A4                LESSTHANEQ:      
02A4   B7                     OR   a   
02A5   ED 52                  SBC   hl,de   
02A7   18 05                  JR   lessthan1   
02A9                             ; hl = value1 de = value2
02A9                             ; hl = result
02A9                LESSTHAN:      
02A9   B7                     OR   a   
02AA   ED 52                  SBC   hl,de   
02AC   28 09                  JR   z,false1   
02AE                LESSTHAN1:      
02AE   FA B7 02               JP   m,false1   
02B1                TRUE1:       
02B1   21 FF FF               LD   hl,TRUE   
02B4   E5                     PUSH   hl   
02B5   DD E9                  JP   (ix)   
02B7                NULL1:       
02B7                FALSE1:      
02B7   21 00 00               LD   hl,FALSE   
02BA   E5                     PUSH   hl   
02BB                NOP_:        
02BB   DD E9                  JP   (ix)   
02BD                RPAREN_:      
02BD   C3 4F 0B               JP   rparen   
02C0                DOLLAR_:      
02C0   C3 A4 0A               JP   dollar   
02C3                LBRACK_:      
02C3   C3 C4 06               JP   lbrack   
02C6                RBRACK_:      
02C6   C3 E0 06               JP   rbrack   
02C9                PERCENT_:      
02C9   C3 8F 06               JP   percent   
02CC                LPAREN_:      
02CC                LBRACE_:      
02CC   C3 8F 07               JP   lbrace   
02CF                RBRACE_:      
02CF   C3 F8 07               JP   rbrace   
02D2                TICK_:       
02D2   C3 7F 08               JP   tick   
02D5                SEMICOLON_:      
02D5   C3 94 08               JP   semicolon   
02D8                DOT_:        
02D8   C3 A2 04               JP   dot   
02DB                COLON_:      
02DB   C3 48 07               JP   colon   
02DE                UPCASE_:      
02DE   C3 C1 0A               JP   upcase   
02E1                LOWCASE_:      
02E1   C3 C6 0A               JP   lowcase   
02E4                QUESTION_:      
02E4   C3 D8 0A               JP   question   
02E7                STAR_:       
02E7   C3 03 0B               JP   star   
02EA                HASH_:       
02EA   C3 30 07               JP   hash   
02ED                CARET_:      
02ED   C3 05 0A               JP   caret   
02F0                COMMA_:      
02F0   C3 8D 06               JP   comma   
02F3                DQUOTE_:      
02F3   C3 7A 0B               JP   dquote   
02F6                BACKSLASH_:      
02F6   C3 8D 06               JP   backslash   
02F9                UNDERSCORE_:      
02F9   C3 8D 06               JP   underscore   
02FC                TILDE_:      
02FC   C3 8D 06               JP   tilde   
02FF                SLASH_:      
02FF   18 00                  JR   slash   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3 BEGIN *********************************************
0301                SLASH:       
0301                COMMAND:      
0301   03                     INC   bc   
0302   0A                     LD   a,(bc)   
0303   FE 2F                  CP   "/"   ; // comment
0305   CA FA 03               JP   z,comment   
0308   0B                     DEC   bc   
0309   CD C6 0B               CALL   commandTable   
030C   27                     DB   lsb(command_a_)   
030D   34                     DB   lsb(command_b_)   
030E   66                     DB   lsb(command_nop_)   
030F   68                     DB   lsb(decimal_)   
0310   66                     DB   lsb(command_nop_)   
0311   3F                     DB   lsb(command_f_)   
0312   66                     DB   lsb(command_nop_)   
0313   77                     DB   lsb(hexadecimal_)   
0314   42                     DB   lsb(command_i_)   
0315   66                     DB   lsb(command_nop_)   
0316   7D                     DB   lsb(key_)   
0317   66                     DB   lsb(command_nop_)   
0318   4B                     DB   lsb(command_m_)   
0319   66                     DB   lsb(command_nop_)   
031A   80                     DB   lsb(output_)   
031B   4E                     DB   lsb(command_p_)   
031C   57                     DB   lsb(command_q_)   
031D   60                     DB   lsb(command_r_)   
031E   66                     DB   lsb(command_nop_)   
031F   83                     DB   lsb(true_)   
0320   66                     DB   lsb(command_nop_)   
0321   63                     DB   lsb(command_v_)   
0322   86                     DB   lsb(words_)   
0323   89                     DB   lsb(xor_)   
0324   66                     DB   lsb(command_nop_)   
0325   66                     DB   lsb(command_nop_)   
0326   70                     DB   lsb(div_)   
0327                COMMAND_A_:      
0327   CD DA 0B               CALL   jumpTable   
032A   62                     DB   "b"   ; /ab absolute
032B   94                     DB   lsb(absolute_)   
032C   64                     DB   "d"   ; /ad address of
032D   A1                     DB   lsb(addrOf_)   
032E   73                     DB   "s"   ; /as array size
032F   C2                     DB   lsb(arraySize_)   
0330   00                     DB   NUL   
0331   C3 74 03               JP   error1_   
0334                COMMAND_B_:      
0334   CD DA 0B               CALL   jumpTable   
0337   72                     DB   "r"   ; /br break
0338   CA                     DB   lsb(break_)   
0339   79                     DB   "y"   ; /by cold boot
033A   CD                     DB   lsb(coldStart_)   
033B   00                     DB   NUL   
033C   C3 D0 03               JP   bytes_   ; /b bytes
033F                COMMAND_F_:      
033F   C3 03 04               JP   command_f   
0342                COMMAND_I_:      
0342   CD DA 0B               CALL   jumpTable   
0345   6E                     DB   "n"   ; /in input
0346   D8                     DB   lsb(input_)   
0347   00                     DB   NUL   
0348   C3 74 03               JP   error1_   
034B                COMMAND_M_:      
034B   C3 37 04               JP   command_m   
034E                COMMAND_P_:      
034E   CD DA 0B               CALL   jumpTable   
0351   63                     DB   "c"   ; /pc print chars
0352   E3                     DB   lsb(printChars_)   
0353   00                     DB   NUL   
0354   C3 74 03               JP   error1_   
0357                COMMAND_Q_:      
0357   CD DA 0B               CALL   jumpTable   
035A   74                     DB   "t"   ; /qt quit
035B   EA                     DB   lsb(quit_)   
035C   00                     DB   NUL   
035D   C3 74 03               JP   error1_   
0360                COMMAND_R_:      
0360   C3 43 04               JP   command_r   
0363                COMMAND_V_:      
0363   C3 5F 04               JP   command_v   
0366                COMMAND_NOP_:      
0366   DD E9                  JP   (ix)   
0368                DECIMAL_:      
0368   21 0A 00               LD   hl,10   
036B                DECIMAL1:      
036B   22 E8 53               LD   (vNumBase),hl   
036E   DD E9                  JP   (ix)   
0370                DIV_:        
0370   00                     DB   NUL   
0371   C3 30 09               JP   div   
0374                ERROR1_:      
0374   C3 42 0D               JP   error1   
0377                HEXADECIMAL_:      
0377   21 10 00               LD   hl,16   
037A   C3 6B 03               JP   decimal1   
037D                KEY_:        
037D   C3 7D 03               JP   key_   
0380                OUTPUT_:      
0380   C3 FA 0A               JP   output   
0383                TRUE_:       
0383   C3 B1 02               JP   true1   
0386                WORDS_:      
0386   C3 F4 03               JP   words   
0389                XOR_:        
0389   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
038A                XOR1:        
038A   E1                     POP   hl   
038B   7B                     LD   a,e   
038C   AD                     XOR   l   
038D   6F                     LD   l,a   
038E   7A                     LD   a,d   
038F   AC                     XOR   h   
0390   67                     LD   h,a   
0391   E5                     PUSH   hl   
0392   DD E9                  JP   (ix)   
0394                             ; /ab absolute
0394                             ; num -- num
0394                ABSOLUTE_:      
0394   E1                     POP   hl   
0395   CB 7C                  BIT   7,h   
0397   C8                     RET   z   
0398   AF                     XOR   a   
0399   95                     SUB   l   
039A   6F                     LD   l,a   
039B   9F                     SBC   a,a   
039C   94                     SUB   h   
039D   67                     LD   h,a   
039E   E5                     PUSH   hl   
039F   DD E9                  JP   (ix)   
03A1                             ; /ad addrOf
03A1                             ; char -- addr
03A1                ADDROF_:      
03A1   E1                     POP   hl   ; a = char
03A2   7D                     LD   a,l   
03A3   FE 7B                  CP   "z"+1   ; if a > z then exit
03A5   30 19                  JR   nc,addrOf2   
03A7   D6 41                  SUB   "A"   ; a - 65
03A9   38 15                  JR   c,addrOf2   ; if < A then exit
03AB   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
03AD   38 06                  JR   c,addrOf1   
03AF   D6 06                  SUB   "a"-("Z"+1)   
03B1   FE 1A                  CP   "Z"-"A"+1   
03B3   38 0B                  JR   c,addrOf2   ; if < a then exit
03B5                ADDROF1:      
03B5   87                     ADD   a,a   ; double a
03B6   21 00 53               LD   hl,VARS   ; hl = VARS + a
03B9   85                     ADD   a,l   
03BA   6F                     LD   l,a   
03BB   3E 00                  LD   a,0   
03BD   8C                     ADC   a,h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0                ADDROF2:      
03C0   DD E9                  JP   (ix)   
03C2                             ; /as size of an array, num elements, ignores vDataWidth :-/
03C2                             ; array* -- num
03C2                ARRAYSIZE_:      
03C2   E1                     POP   hl   
03C3   2B                     DEC   hl   ; msb size
03C4   56                     LD   d,(hl)   
03C5   2B                     DEC   hl   ; lsb size
03C6   5E                     LD   e,(hl)   
03C7   D5                     PUSH   de   
03C8   DD E9                  JP   (ix)   
03CA                             ; /br
03CA                BREAK_:      
03CA   C3 65 08               JP   break   
03CD                             ; /by
03CD                COLDSTART_:      
03CD   C3 8B 0C               JP   coldStart   
03D0                             ; /b
03D0                BYTES_:      
03D0   21 01 00               LD   hl,1   
03D3                BYTES1:      
03D3   22 E6 53               LD   (vDataWidth),hl   
03D6   DD E9                  JP   (ix)   
03D8                             ; Z80 port input
03D8                             ; port -- value
03D8                INPUT_:      
03D8   E1                     POP   hl   
03D9   59                     LD   e,c   ; save IP
03DA   4D                     LD   c,l   
03DB   ED 68                  IN   l,(c)   
03DD   26 00                  LD   h,0   
03DF   4B                     LD   c,e   ; restore IP
03E0   E5                     PUSH   hl   
03E1   DD E9                  JP   (ix)   
03E3                             ; /pc printChars
03E3                             ; char* len --
03E3                PRINTCHARS_:      
03E3   E1                     POP   hl   ; hl = count
03E4   D1                     POP   de   ; de = char*
03E5   CD A8 0B               CALL   printChars2   
03E8   DD E9                  JP   (ix)   
03EA                             ; /qt
03EA                QUIT_:       
03EA   E1                     POP   hl   ; hl = condition, exit if true
03EB   7D                     LD   a,l   
03EC   B4                     OR   h   
03ED   20 02                  JR   nz,quit1   
03EF   DD E9                  JP   (ix)   
03F1                QUIT1:       
03F1   C3 F8 07               JP   blockEnd   
03F4                             ; /w
03F4                WORDS:       
03F4   21 02 00               LD   hl,2   
03F7   C3 D3 03               JP   bytes1   
03FA                             ; //
03FA                COMMENT:      
03FA   03                     INC   bc   ; point to next char
03FB   0A                     LD   a,(bc)   
03FC   FE 20                  CP   " "   ; terminate on any char less than SP
03FE   30 FA                  JR   nc,comment   
0400   0B                     DEC   bc   
0401   DD E9                  JP   (ix)   
0403                             ;********************** PAGE 3 END *********************************************
0403                             ;********************** PAGE 4 BEGIN *********************************************
0403                COMMAND_F:      
0403   CD DA 0B               CALL   jumpTable   
0406   65                     DB   "e"   ; /fe forEach
0407   1A                     DB   lsb(forEach_)   
0408   6C                     DB   "l"   ; /fl flush output buffer
0409   1D                     DB   lsb(flush_)   
040A   73                     DB   "s"   ; /fs funcSrc
040B   22                     DB   lsb(funcSrc_)   
040C   31                     DB   "1"   
040D   25                     DB   lsb(f1_)   
040E   32                     DB   "2"   
040F   28                     DB   lsb(f2_)   
0410   33                     DB   "3"   
0411   2B                     DB   lsb(f3_)   
0412   34                     DB   "4"   
0413   2E                     DB   lsb(f4_)   
0414   7A                     DB   "z"   
0415   31                     DB   lsb(fz_)   
0416   00                     DB   NUL   
0417   C3 34 04               JP   false_   
041A                FOREACH_:      
041A   C3 F7 04               JP   forEach   
041D                             ; /fl flush
041D                             ; --
041D                FLUSH_:      
041D   CD AF 0B               CALL   flushBuffer   
0420   DD E9                  JP   (ix)   
0422                FUNCSRC_:      
0422   C3 44 05               JP   funcSrc   
0425                F1_:         
0425   C3 8E 0D               JP   f1   
0428                F2_:         
0428   C3 9A 0D               JP   f2   
042B                F3_:         
042B   C3 A6 0D               JP   f3   
042E                F4_:         
042E   C3 B2 0D               JP   f4   
0431                FZ_:         
0431   C3 F8 09               JP   fz   
0434                FALSE_:      
0434   C3 B7 02               JP   false1   
0437                COMMAND_M:      
0437   CD DA 0B               CALL   jumpTable   
043A   70                     DB   "p"   ; /mp map
043B   40                     DB   lsb(map_)   
043C   00                     DB   NUL   
043D   C3 74 03               JP   error1_   
0440                MAP_:        
0440   C3 C7 05               JP   map   
0443                COMMAND_R:      
0443   CD DA 0B               CALL   jumpTable   
0446   63                     DB   "c"   ; /rc tail call optimisation
0447   50                     DB   lsb(recur_)   
0448   65                     DB   "e"   ; /re remainder
0449   56                     DB   lsb(remain_)   
044A   67                     DB   "g"   ; /rg range src
044B   5C                     DB   lsb(rangeSrc_)   
044C   00                     DB   NUL   
044D   C3 74 03               JP   error1_   
0450                RECUR_:      
0450   E1                     POP   hl   
0451   22 F2 53               LD   (vRecur),hl   
0454   DD E9                  JP   (ix)   
0456                REMAIN_:      
0456   2A F6 53               LD   hl,(vRemain)   
0459   E5                     PUSH   hl   
045A   DD E9                  JP   (ix)   
045C                RANGESRC_:      
045C   C3 0B 06               JP   rangeSrc   
045F                COMMAND_V:      
045F   CD DA 0B               CALL   jumpTable   
0462   62                     DB   "b"   
0463   81                     DB   lsb(varBufPtr_)   
0464   68                     DB   "h"   
0465   8A                     DB   lsb(varHeapPtr_)   
0466   74                     DB   "t"   
0467   93                     DB   lsb(varTIBPtr_)   
0468   42                     DB   "B"   
0469   72                     DB   lsb(constBufStart_)   
046A   48                     DB   "H"   
046B   77                     DB   lsb(constHeapStart_)   
046C   54                     DB   "T"   
046D   7C                     DB   lsb(constTIBStart_)   
046E   00                     DB   NUL   
046F   C3 74 03               JP   error1_   
0472                CONSTBUFSTART_:      
0472   11 00 52               LD   de,BUF   
0475   18 28                  JR   constant   
0477                CONSTHEAPSTART_:      
0477   11 1C 54               LD   de,HEAP   
047A   18 23                  JR   constant   
047C                CONSTTIBSTART_:      
047C   11 00 51               LD   de,TIB   
047F   18 1E                  JR   constant   
0481                VARBUFPTR_:      
0481   ED 5B EC 53            LD   de,(vBufPtr)   
0485   21 EC 53               LD   hl,vBufPtr   
0488   18 12                  JR   variable   
048A                VARHEAPPTR_:      
048A   ED 5B F0 53            LD   de,(vHeapPtr)   
048E   21 F0 53               LD   hl,vHeapPtr   
0491   18 09                  JR   variable   
0493                VARTIBPTR_:      
0493   ED 5B EA 53            LD   de,(vTIBPtr)   
0497   21 EA 53               LD   hl,vTIBPtr   
049A   18 00                  JR   variable   
049C                VARIABLE:      
049C   22 F4 53               LD   (vPointer),hl   
049F                CONSTANT:      
049F   D5                     PUSH   de   
04A0   DD E9                  JP   (ix)   
04A2                DOT:         
04A2   CD DA 0B               CALL   jumpTable   
04A5   61                     DB   "a"   ; .a print array
04A6   7F                     DB   lsb(dotArray)   
04A7   63                     DB   "c"   ; .c print char
04A8   D6                     DB   lsb(dotChar_)   
04A9   73                     DB   "s"   ; .s print string
04AA   BC                     DB   lsb(dotString_)   
04AB   78                     DB   "x"   ; .x print x chars
04AC   DB                     DB   lsb(dotXChars_)   
04AD   00                     DB   NUL   ; .  print number
04AE   C3 B1 04               JP   dotNumber_   
04B1                             ; /bd buffer decimal
04B1                             ; value --
04B1                DOTNUMBER_:      
04B1   3A E8 53               LD   a,(vNumBase)   
04B4   FE 10                  CP   16   
04B6   CA A7 09               JP   z,bufferHex   ; else falls through
04B9   C3 41 09               JP   bufferDec   
04BC                             ; /bs buffered string
04BC                             ; string* --
04BC                DOTSTRING_:      
04BC   E1                     POP   hl   ; hl = string*
04BD   ED 5B EC 53            LD   de,(vBufPtr)   ; de = buffer*
04C1   18 06                  JR   dotString1   
04C3                DOTSTRING0:      
04C3   12                     LD   (de),a   ; a -> buffer*
04C4   1C                     INC   e   ; buffer*++, wraparound
04C5   CC AF 0B               CALL   z,flushBuffer   
04C8   23                     INC   hl   
04C9                DOTSTRING1:      
04C9   7E                     LD   a,(hl)   ; a <- string*
04CA   B7                     OR   a   ; if NUL exit loop
04CB   20 F6                  JR   nz,dotString0   
04CD   2A EC 53               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
04D0   ED 53 EC 53            LD   (vBufPtr),de   ; save buffer*' in pointer
04D4   DD E9                  JP   (ix)   
04D6                             ; /bc buffer char
04D6                             ; char --
04D6                DOTCHAR_:      
04D6   21 01 00               LD   hl,1   
04D9   18 01                  JR   dotXChars0   
04DB                             ; /bx buffered x chars
04DB                             ; char length --
04DB                DOTXCHARS_:      
04DB   E1                     POP   hl   ; hl = length
04DC                DOTXCHARS0:      
04DC   D1                     POP   de   ; a' = char
04DD   7B                     LD   a,e   
04DE   08                     EX   af,af'   
04DF   ED 5B EC 53            LD   de,(vBufPtr)   ; de = buffer*
04E3   18 08                  JR   dotXChars2   
04E5                DOTXCHARS1:      
04E5   08                     EX   af,af'   
04E6   12                     LD   (de),a   
04E7   08                     EX   af,af'   
04E8   1C                     INC   e   ; buffer*++, wraparound
04E9   CC AF 0B               CALL   z,flushBuffer   
04EC   2B                     DEC   hl   
04ED                DOTXCHARS2:      
04ED   7D                     LD   a,l   
04EE   B4                     OR   h   
04EF   20 F4                  JR   nz,dotXChars1   
04F1   ED 53 EC 53            LD   (vBufPtr),de   ; save buffer*'
04F5   DD E9                  JP   (ix)   
04F7                             ;********************** PAGE 4 END *********************************************
04F7                             ;*******************************************************************
04F7                             ; Monty implementations
04F7                             ;*******************************************************************
04F7                             ; /fe forEach
04F7                             ; src proc --
04F7                          ;*Macro unroll: FUNC forEach, 1, "spT"
04F7                FOREACH:      
04F7   CD 05 0A               CALL   go   
04FA   00 00                  DW   NUL   
04FC   05 05                  DW   forEachM_1327S858   
04FE   00 05                  DW   $+2   
0500   01                     DB   1   
0501   03 73 70 54            .PSTR   "spT"   
0505                FOREACHM_1327S858:      
0505   7B                     DB   "{"   
0506   5B 30 5D 25 54 3D      DB   "[0]%T="   
050C   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data ; $56AA
0510   32 25 74 21 3D 7B      DB   "2%t!={"   ; if type == 2 skip
0516   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
051B   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
052D   3F 3F                  DB   "??"   ; ifte:
052F   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0538   7D 3F                  DB   "}?"   
053A   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0542   7D                     DB   "}"   
0543   00                     DB   0   
0544                             ; ; /fs funcSrc
0544                             ; ; func -- src
0544                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0544                FUNCSRC:      ; :f func or block
0544   CD 05 0A               CALL   go   
0547   00 00                  DW   NUL   
0549   50 05                  DW   funcSrcM_1342S874   
054B   4D 05                  DW   $+2   
054D   00                     DB   0   
054E   01 66                  .PSTR   "f"   
0550                FUNCSRCM_1342S874:      
0550   7B                     DB   "{"   
0551   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0555   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
055D   3A 64 74 7B            DB   ":dt{"   
0561   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0573   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
057B   7D 3B                  DB   "};"   
057D   7D                     DB   "}"   
057E   00                     DB   0   
057F                          ;*Macro unroll: FUNC dotArray, 2, "abc"
057F                DOTARRAY:      
057F   CD 05 0A               CALL   go   
0582   00 00                  DW   NUL   
0584   8D 05                  DW   dotArrayM_1352S885   
0586   88 05                  DW   $+2   
0588   02                     DB   2   
0589   03 61 62 63            .PSTR   "abc"   
058D                DOTARRAYM_1352S885:      
058D   7B                     DB   "{"   
058E   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
05C5   7D                     DB   "}"   
05C6   00                     DB   0   
05C7                             ; /mp map
05C7                             ; src func -- src1
05C7                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map
05C7                MAP:         ; map
05C7   CD 05 0A               CALL   go   
05CA   00 00                  DW   NUL   
05CC   D4 05                  DW   mapM_1359S893   
05CE   D0 05                  DW   $+2   
05D0   00                     DB   0   
05D1   02 73 66               .PSTR   "sf"   
05D4                MAPM_1359S893:      
05D4   7B                     DB   "{"   
05D5   3A 6B 74 7B            DB   ":kt{"   
05D9   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
05E1   3A 64 74 7B            DB   ":dt{"   ; call source with tb
05E5   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
05EA   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
05F6   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
05FF   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0607   7D 3B                  DB   "};"   
0609   7D                     DB   "}"   
060A   00                     DB   0   
060B                             ; /rg rangeSrc
060B                             ; begin end step -- src
060B                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
060B                RANGESRC:      ; range source (begin end step)
060B   CD 05 0A               CALL   go   
060E   00 00                  DW   NUL   
0610   1A 06                  DW   rangeSrcM_1373S908   
0612   14 06                  DW   $+2   
0614   01                     DB   1   
0615   04 62 65 73 4C         .PSTR   "besL"   
061A                RANGESRCM_1373S908:      
061A   7B                     DB   "{"   
061B   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0626   3A 6B 74 7B            DB   ":kt{"   
062A   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0632   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0638   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
063F   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0647   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0656   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
065E   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0665   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0679   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0681   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0689   7D 3B                  DB   "};"   
068B   7D                     DB   "}"   
068C   00                     DB   0   
068D                             ;*******************************************************************
068D                             ; unused opcodes (reserved)
068D                             ;*******************************************************************
068D                BACKSLASH:      
068D                UNDERSCORE:      
068D                TILDE:       
068D                COMMA:       
068D   DD E9                  JP   (ix)   
068F                             ;*******************************************************************
068F                             ; implementations
068F                             ;*******************************************************************
068F                             ; %a .. %z
068F                             ; -- value
068F                             ; returns value of arg
068F                PERCENT:      
068F                ARG:         
068F   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0692   FD 56 05               LD   d,(iy+5)   
0695   EB                     EX   de,hl   
0696   7D                     LD   a,l   ; arg_list* == null, skip
0697   B4                     OR   h   
0698   28 1A                  JR   z,arg0a   
069A   23                     INC   hl   ; a = num_args, hl = arg_list*
069B   7E                     LD   a,(hl)   
069C   23                     INC   hl   
069D   B7                     OR   a   
069E   28 14                  JR   z,arg0a   ; num_args == 0, skip
06A0   5F                     LD   e,a   ; e = a = num_args
06A1   03                     INC   bc   ; a = next char = dollar_name
06A2   0A                     LD   a,(bc)   
06A3   C5                     PUSH   bc   ; save IP
06A4   43                     LD   b,e   ; b = e = num_args
06A5   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
06A8   FD 56 03               LD   d,(iy+3)   
06AB                ARG0:        
06AB   1B                     DEC   de   ; a = dollar_name, de = next arg*
06AC   1B                     DEC   de   
06AD   BE                     CP   (hl)   
06AE   28 09                  JR   z,arg1   
06B0   23                     INC   hl   ; hl = next arg_list*
06B1   10 F8                  DJNZ   arg0   
06B3   C1                     POP   bc   ; no match, restore IP
06B4                ARG0A:       
06B4   11 00 00               LD   de,0   ; return 0
06B7   18 08                  JR   arg1a   
06B9                ARG1:        
06B9   C1                     POP   bc   ; restore IP
06BA   EB                     EX   de,hl   ; hl = arg*
06BB   22 F4 53               LD   (vPointer),hl   ; store arg* in setter
06BE   5E                     LD   e,(hl)   
06BF   23                     INC   hl   
06C0   56                     LD   d,(hl)   ; de = arg
06C1                ARG1A:       
06C1   D5                     PUSH   de   ; push arg
06C2   DD E9                  JP   (ix)   
06C4                LBRACK:      
06C4                ARRAYSTART:      
06C4   11 00 00               LD   de,0   ; create stack frame
06C7   D5                     PUSH   de   ; push null for IP
06C8   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
06CB   FD 56 05               LD   d,(iy+5)   ; 
06CE   D5                     PUSH   de   ; 
06CF   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
06D2   FD 56 03               LD   d,(iy+3)   ; 
06D5   D5                     PUSH   de   ; 
06D6   FD E5                  PUSH   iy   ; push BP
06D8   FD 21 00 00            LD   iy,0   ; BP = SP
06DC   FD 39                  ADD   iy,sp   
06DE   DD E9                  JP   (ix)   
06E0                RBRACK:      
06E0                ARRAYEND:      
06E0   FD 54                  LD   d,iyh   ; de = BP
06E2   FD 5D                  LD   e,iyl   
06E4   ED 43 00 54            LD   (vTemp1),bc   ; save IP
06E8   62 6B                  LD   hl,de   ; hl = de = BP
06EA   B7                     OR   a   
06EB   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
06ED   CB 3C                  SRL   h   ; 
06EF   CB 1D                  RR   l   
06F1   44 4D                  LD   bc,hl   ; bc = count
06F3   2A F0 53               LD   hl,(vHeapPtr)   ; hl = array[-4]
06F6   71                     LD   (hl),c   ; write num items in length word
06F7   23                     INC   hl   
06F8   70                     LD   (hl),b   
06F9   23                     INC   hl   ; hl = array[0], bc = count
06FA                             ; de = BP, hl = array[0], bc = count
06FA   18 15                  JR   arrayEnd3   
06FC                ARRAYEND1:      
06FC   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
06FF   77                     LD   (hl),a   ; write lsb of array item
0700   23                     INC   hl   ; move to msb of array item
0701   3A E6 53               LD   a,(vDataWidth)   ; vDataWidth=1?
0704   3D                     DEC   a   
0705   28 05                  JR   z,arrayEnd2   
0707   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
070A   77                     LD   (hl),a   ; write msb of array item
070B   23                     INC   hl   ; move to next word in array
070C                ARRAYEND2:      
070C   FD 2B                  DEC   iy   ; move to next word on stack
070E   FD 2B                  DEC   iy   
0710   0B                     DEC   bc   ; dec items count
0711                ARRAYEND3:      
0711   79                     LD   a,c   ; if not zero loop
0712   B0                     OR   b   
0713   20 E7                  JR   nz,arrayEnd1   
0715   EB                     EX   de,hl   ; de = end of array, hl = BP
0716   F9                     LD   sp,hl   ; sp = BP
0717   E1                     POP   hl   ; de = end of array, hl = old BP
0718   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0719   FD 62                  LD   iyh,d   
071B   FD 6B                  LD   iyl,e   
071D   D1                     POP   de   ; pop arg_list (discard)
071E   D1                     POP   de   ; pop first_arg* (discard)
071F   D1                     POP   de   ; pop IP (discard)
0720   ED 5B F0 53            LD   de,(vHeapPtr)   ; de = array[-2]
0724   13                     INC   de   
0725   13                     INC   de   
0726   D5                     PUSH   de   ; return array[0]
0727   22 F0 53               LD   (vHeapPtr),hl   ; move heap* to end of array
072A   ED 4B 00 54            LD   bc,(vTemp1)   ; restore IP
072E   DD E9                  JP   (ix)   
0730                             ; index of an array, based on vDataWidth
0730                             ; array* num -- value    ; also sets vPointer to address
0730                HASH:        
0730                ARRAYINDEX:      
0730   E1                     POP   hl   ; hl = index
0731   D1                     POP   de   ; de = array
0732   3A E6 53               LD   a,(vDataWidth)   ; a = data width
0735   3D                     DEC   a   
0736   28 01                  JR   z,arrayIndex1   
0738                ARRAYINDEX0:      
0738   29                     ADD   hl,hl   ; if data width = 2 then double
0739                ARRAYINDEX1:      
0739   19                     ADD   hl,de   ; add addr
073A   22 F4 53               LD   (vPointer),hl   ; store address in setter
073D   16 00                  LD   d,0   
073F   5E                     LD   e,(hl)   
0740   B7                     OR   a   ; check data width again
0741   28 02                  JR   z,arrayIndex2   
0743   23                     INC   hl   
0744   56                     LD   d,(hl)   
0745                ARRAYINDEX2:      
0745   D5                     PUSH   de   
0746   DD E9                  JP   (ix)   
0748                             ; arg_list - parses input (ab:c)
0748                             ; names after the : represent uninitialised locals
0748                             ; return values are the state of the stack after the block ends
0748                             ; format: numLocals totNumArgs argChars...
0748                COLON:       
0748                ARGLIST:      
0748   11 00 00               LD   de,0   ; d = count locals, e = count args ()
074B   2A F0 53               LD   hl,(vHeapPtr)   ; hl = heap*
074E   E5                     PUSH   hl   ; save start of arg_list
074F   23                     INC   hl   ; skip length fields to start of string
0750   23                     INC   hl   
0751   03                     INC   bc   ; point to next char
0752                ARGLIST1:      
0752   0A                     LD   a,(bc)   
0753   FE 3A                  CP   ":"   ; ":" switches from args to locals
0755   20 03                  JR   nz,arglist1a   
0757   14                     INC   d   ; non zero value local count acts as flag
0758   18 10                  JR   arglist3   
075A                ARGLIST1A:      
075A   FE 61                  CP   "a"   ; < "a" terminates arg_list
075C   38 0F                  JR   c,arglist4   
075E   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0760   30 0B                  JR   nc,arglist4   
0762                ARGLIST2:      
0762   77                     LD   (hl),a   
0763   23                     INC   hl   
0764   1C                     INC   e   ; increase arg count
0765   AF                     XOR   a   
0766   B2                     OR   d   
0767   28 01                  JR   z,arglist3   
0769   14                     INC   d   ; if d > 0 increase local count
076A                ARGLIST3:      
076A   03                     INC   bc   ; point to next char
076B   18 E5                  JR   arglist1   
076D                ARGLIST4:      
076D   0B                     DEC   bc   
076E   AF                     XOR   a   
076F   B2                     OR   d   
0770   28 01                  JR   z,arglist5   
0772   15                     DEC   d   ; remove initial inc
0773                ARGLIST5:      
0773   23                     INC   hl   
0774   22 F0 53               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0777   E1                     POP   hl   ; hl = start of arg_list
0778   E5                     PUSH   hl   ; return start of arg_list
0779   72                     LD   (hl),d   ; write number of locals at start - 1
077A   23                     INC   hl   
077B   73                     LD   (hl),e   ; write number of args + locals at start - 2
077C   DD E9                  JP   (ix)   
077E                             ; value _oldValue --            ; uses address in vPointer
077E                ASSIGN:      
077E   E1                     POP   hl   ; discard last accessed value
077F   E1                     POP   hl   ; hl = new value
0780                ASSIGN0:      
0780   EB                     EX   de,hl   ; de = new value
0781                ASSIGNX:      
0781   2A F4 53               LD   hl,(vPointer)   
0784   73                     LD   (hl),e   
0785   3A E6 53               LD   a,(vDataWidth)   
0788   3D                     DEC   a   ; is it byte?
0789   28 02                  JR   z,assign1   
078B   23                     INC   hl   
078C   72                     LD   (hl),d   
078D                ASSIGN1:      
078D   DD E9                  JP   (ix)   
078F                LBRACE:      
078F                BLOCKSTART:      
078F   C5                     PUSH   bc   ; return pointer to first { of block
0790   03                     INC   bc   
0791   16 01                  LD   d,1   ; nesting: count first parenthesis
0793                BLOCKSTART1:      ; Skip to end of definition
0793   0A                     LD   a,(bc)   ; Get the next character
0794   03                     INC   bc   ; Point to next character
0795   FE 21                  CP   " " + 1   ; ignore whitespace
0797   38 FA                  JR   c,blockStart1   
0799   FE 29                  CP   ")"   
079B   28 2D                  JR   z,blockStart4   
079D   FE 7D                  CP   "}"   
079F   28 29                  JR   z,blockStart4   
07A1   FE 5D                  CP   "]"   
07A3   28 25                  JR   z,blockStart4   
07A5   FE 28                  CP   "("   
07A7   28 16                  JR   z,blockStart2   
07A9   FE 7B                  CP   "{"   
07AB   28 12                  JR   z,blockStart2   
07AD   FE 5B                  CP   "["   
07AF   28 0E                  JR   z,blockStart2   
07B1   FE 27                  CP   "'"   
07B3   28 0D                  JR   z,blockStart3   
07B5   FE 60                  CP   "`"   
07B7   28 09                  JR   z,blockStart3   
07B9   FE 22                  CP   DQ   
07BB   28 05                  JR   z,blockStart3   
07BD   18 D4                  JR   blockStart1   
07BF                BLOCKSTART2:      
07BF   14                     INC   d   
07C0   18 D1                  JR   blockStart1   
07C2                BLOCKSTART3:      
07C2   3E 80                  LD   a,$80   
07C4   AA                     XOR   d   
07C5   57                     LD   d,a   
07C6   20 CB                  JR   nz,blockStart1   
07C8   18 03                  JR   blockStart5   
07CA                BLOCKSTART4:      
07CA   15                     DEC   d   
07CB   20 C6                  JR   nz,blockStart1   ; get the next element
07CD                BLOCKSTART5:      
07CD   60 69                  LD   hl,bc   ; hl = IP
07CF   11 1C 54               LD   de,HEAP   ; is IP pointing to object in heap
07D2   B7                     OR   a   ; IP - HEAP
07D3   ED 52                  SBC   hl,de   
07D5   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
07D7   28 1C                  JR   z,blockStart6   
07D9   60 69                  LD   hl,bc   ; hl = IP
07DB   D1                     POP   de   ; de = block*
07DC   ED 43 00 54            LD   (vTemp1),bc   ; save IP
07E0   B7                     OR   a   ; bc = size
07E1   ED 52                  SBC   hl,de   
07E3   44 4D                  LD   bc,hl   
07E5   EB                     EX   de,hl   ; hl = block* de = heap*
07E6   ED 5B F0 53            LD   de,(vHeapPtr)   
07EA   D5                     PUSH   de   ; return hblock*
07EB   ED B0                  LDIR      ; copy size bytes from block* to hblock*
07ED   ED 53 F0 53            LD   (vHeapPtr),de   ; heap* += size
07F1   ED 4B 00 54            LD   bc,(vTemp1)   ; restore IP
07F5                BLOCKSTART6:      
07F5   0B                     DEC   bc   ; balanced, exit
07F6   DD E9                  JP   (ix)   
07F8                RBRACE:      
07F8                BLOCKEND:      
07F8   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
07FB   FD 56 01               LD   d,(iy+1)   
07FE   ED 53 00 54            LD   (vTemp1),de   
0802   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0805   FD 56 07               LD   d,(iy+7)   
0808   ED 53 02 54            LD   (vTemp2),de   
080C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
080F   FD 56 03               LD   d,(iy+3)   
0812   EB                     EX   de,hl   
0813   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0816   FD 56 01               LD   d,(iy+1)   
0819   13                     INC   de   ; for carry flag <=
081A   B7                     OR   a   
081B   ED 52                  SBC   hl,de   
081D   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
081F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0821   FD 5D                  LD   e,iyl   
0823   21 08 00               LD   hl,8   
0826   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0827   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0828   18 0C                  JR   blockEnd2   
082A                BLOCKEND1:      ; same scope
082A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
082D   FD 56 03               LD   d,(iy+3)   
0830   EB                     EX   de,hl   
0831   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0833   FD 5D                  LD   e,iyl   
0835   EB                     EX   de,hl   
0836                BLOCKEND2:      
0836   44 4D                  LD   bc,hl   ; bc = hl = BP
0838   B7                     OR   a   ; hl = BP - SP = count
0839   ED 72                  SBC   hl,sp   
083B   7D                     LD   a,l   
083C   B4                     OR   h   
083D   28 09                  JR   z,blockEnd3   
083F   C5                     PUSH   bc   ; bc = count, hl = BP
0840   44 4D                  LD   bc,hl   
0842   E1                     POP   hl   
0843   2B                     DEC   hl   ; hl = BP-1
0844   1B                     DEC   de   ; de = args*-1
0845   ED B8                  LDDR      
0847   13                     INC   de   
0848                BLOCKEND3:      
0848   EB                     EX   de,hl   ; sp = de = new tos*
0849   F9                     LD   sp,hl   
084A   ED 4B 02 54            LD   bc,(vTemp2)   
084E   FD 2A 00 54            LD   iy,(vTemp1)   
0852   ED 5B F2 53            LD   de,(vRecur)   ; de = recur vector
0856   7B                     LD   a,e   ; check for NUL
0857   B2                     OR   d   
0858   20 02                  JR   nz,blockEnd4   
085A   DD E9                  JP   (ix)   
085C                BLOCKEND4:      
085C   21 00 00               LD   hl,0   ; clear recur vector
085F   22 F2 53               LD   (vRecur),hl   
0862   C3 06 0A               JP   go1   ; execute de
0865                             ; /br break from loop
0865                             ; --
0865                BREAK:       
0865   E1                     POP   hl   ; hl = condition, break if false
0866   7D                     LD   a,l   
0867   B4                     OR   h   
0868   28 02                  JR   z,break1   
086A   DD E9                  JP   (ix)   
086C                BREAK1:      
086C   FD 5D                  LD   e,iyl   ; get block* just under stack frame
086E   FD 54                  LD   d,iyh   
0870   21 08 00               LD   hl,8   
0873   19                     ADD   hl,de   
0874   23                     INC   hl   
0875   23                     INC   hl   
0876   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0879   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
087C   C3 F8 07               JP   blockEnd   
087F                TICK:        
087F                CHAR:        
087F   21 00 00               LD   hl,0   ; if "" is empty or null
0882                CHAR1:       
0882   03                     INC   bc   ; point to next char
0883   0A                     LD   a,(bc)   
0884   FE 27                  CP   "'"   ; ' is the terminator
0886   28 09                  JR   z,char3   
0888   FE 5C                  CP   $5c   ; \ is the escape
088A   20 02                  JR   nz,char2   
088C   03                     INC   bc   
088D   0A                     LD   a,(bc)   
088E                CHAR2:       
088E   6F                     LD   l,a   
088F   18 F1                  JR   char1   
0891                CHAR3:       
0891   E5                     PUSH   hl   
0892   DD E9                  JP   (ix)   
0894                             ; ";" createFunc
0894                             ; arg_list* block* -- func*
0894                SEMICOLON:      
0894                CREATEFUNC:      
0894   ED 43 00 54            LD   (vTemp1),bc   ; save IP
0898   E1                     POP   hl   ; hl = block*
0899   22 02 54               LD   (vTemp2),hl   ; save block*
089C   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
089F   FD 56 05               LD   d,(iy+5)   
08A2   7B                     LD   a,e   ; if arg_list == null then make a func
08A3   B2                     OR   d   
08A4   20 09                  JR   nz,createFunc0   
08A6   21 00 00               LD   hl,0   ; partial_array = null
08A9   ED 5B F0 53            LD   de,(vHeapPtr)   ; de = compile*
08AD   18 65                  JR   createFunc5   
08AF                CREATEFUNC0:      
08AF   E1                     POP   hl   ; hl = inner_arg_list*
08B0   E5                     PUSH   hl   ; save inner_arg_list
08B1   ED 5B F0 53            LD   de,(vHeapPtr)   ; de = compile*
08B5   7E                     LD   a,(hl)   ; compile inner_num_locals
08B6   4F                     LD   c,a   ; b = inner_num_locals
08B7   12                     LD   (de),a   
08B8   23                     INC   hl   
08B9   13                     INC   de   
08BA   7E                     LD   a,(hl)   ; compile inner_length
08BB   12                     LD   (de),a   
08BC   91                     SUB   c   ; a = inner_num args
08BD   23                     INC   hl   
08BE   13                     INC   de   
08BF   B7                     OR   a   ; compile args if inner_length > 0
08C0   28 05                  JR   z,createFunc1   
08C2   4F                     LD   c,a   ; bc = a
08C3   06 00                  LD   b,0   
08C5   ED B0                  LDIR      
08C7                CREATEFUNC1:      
08C7   EB                     EX   de,hl   ; hl = outer_arg_list
08C8   FD 5E 04               LD   e,(iy+4)   
08CB   FD 56 05               LD   d,(iy+5)   
08CE   EB                     EX   de,hl   
08CF   23                     INC   hl   ; a = outer_length
08D0   7E                     LD   a,(hl)   
08D1   23                     INC   hl   
08D2   B7                     OR   a   
08D3   28 05                  JR   z,createFunc2   
08D5   4F                     LD   c,a   
08D6   06 00                  LD   b,0   
08D8   ED B0                  LDIR      ; append outer_args
08DA                CREATEFUNC2:      ; a = outer_length
08DA   47                     LD   b,a   ; b = a = outer_length
08DB   2A F0 53               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
08DE   23                     INC   hl   
08DF   7E                     LD   a,(hl)   ; add outer_length to new length
08E0   80                     ADD   a,b   
08E1   77                     LD   (hl),a   
08E2   2B                     DEC   hl   
08E3   78                     LD   a,b   ; save outer_length in a'
08E4   08                     EX   af,af'   
08E5   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
08E6   7E                     LD   a,(hl)   ; c = a = inner_num_locals
08E7   B7                     OR   a   
08E8   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
08EA   4F                     LD   c,a   ; c = inner_num_locals
08EB   06 00                  LD   b,0   ; bc = inner_num_locals
08ED   23                     INC   hl   ; a = inner_length
08EE   7E                     LD   a,(hl)   
08EF   91                     SUB   c   ; a = inner_num_args
08F0   23                     INC   hl   ; hl = inner_arg_chars
08F1   85                     ADD   a,l   ; hl += a
08F2   6F                     LD   l,a   
08F3   3E 00                  LD   a,0   
08F5   84                     ADD   a,h   
08F6   67                     LD   h,a   
08F7   ED B0                  LDIR      ; append inner_locals
08F9                CREATEFUNC2A:      
08F9   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
08FA   12                     LD   (de),a   ; compile partial_array length field
08FB   13                     INC   de   
08FC   AF                     XOR   a   
08FD   12                     LD   (de),a   
08FE   13                     INC   de   
08FF   D5                     PUSH   de   ; push partial_array*
0900   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0901   FD 5E 02               LD   e,(iy+2)   
0904   FD 56 03               LD   d,(iy+3)   
0907   EB                     EX   de,hl   
0908                CREATEFUNC3:      
0908   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0909   4E                     LD   c,(hl)   
090A   2B                     DEC   hl   
090B   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
090C   12                     LD   (de),a   ; write LSB and MSB to partial_array*
090D   13                     INC   de   
090E   79                     LD   a,c   
090F   12                     LD   (de),a   
0910   13                     INC   de   
0911   10 F5                  DJNZ   createFunc3   ; b = outer_length
0913                CREATEFUNC4:      
0913   E1                     POP   hl   ; hl = partial_array*
0914                CREATEFUNC5:      
0914   C1                     POP   bc   ; bc = new_arg_list*
0915   D5                     PUSH   de   ; return new func*
0916   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0917   73                     LD   (hl),e   ; compile partial_array* to func
0918   23                     INC   hl   
0919   72                     LD   (hl),d   
091A   23                     INC   hl   
091B   ED 5B 02 54            LD   de,(vTemp2)   ; de = block*
091F   73                     LD   (hl),e   ; compile block* to func
0920   23                     INC   hl   
0921   72                     LD   (hl),d   
0922   23                     INC   hl   
0923   71                     LD   (hl),c   ; compile new_arg_list* to func
0924   23                     INC   hl   
0925   70                     LD   (hl),b   
0926   23                     INC   hl   
0927   22 F0 53               LD   (vHeapPtr),hl   ; bump heap ptr
092A   ED 4B 00 54            LD   bc,(vTemp1)   ; restore IP
092E   DD E9                  JP   (ix)   
0930                DIV:         
0930   D1                     POP   de   
0931   E1                     POP   hl   
0932   C5                     PUSH   bc   ; preserve the IP
0933   44 4D                  LD   bc,hl   
0935   CD DF 09               CALL   divide   
0938   EB                     EX   de,hl   
0939   ED 53 F6 53            LD   (vRemain),de   
093D   C1                     POP   bc   
093E   C3 13 02               JP   add3   
0941                             ; /bd buffer decimal
0941                             ; value --
0941                BUFFERDEC:      
0941   ED 5B EC 53            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0945   D9                     EXX      
0946   E1                     POP   hl   ; hl = value
0947   CD 5B 09               CALL   bufferDec0   
094A   D9                     EXX      ; de = buffer*' bc = IP
094B   3E 20                  LD   a," "   ; append space to buffer
094D   12                     LD   (de),a   
094E   1C                     INC   e   ; buffer*++, wraparound
094F   CC AF 0B               CALL   z,flushBuffer   
0952   2A EC 53               LD   hl,(vBufPtr)   ; hl = buffer*
0955   ED 53 EC 53            LD   (vBufPtr),de   ; update buffer* with buffer*'
0959   DD E9                  JP   (ix)   
095B                             ; hl = value
095B                             ; de' = buffer*
095B                             ; a, bc, de, hl destroyed
095B                BUFFERDEC0:      
095B   CB 7C                  BIT   7,h   
095D   28 0C                  JR   z,bufferDec1   
095F   D9                     EXX      
0960   3E 2D                  LD   a,"-"   
0962   12                     LD   (de),a   
0963   13                     INC   de   
0964   D9                     EXX      
0965   AF                     XOR   a   
0966   95                     SUB   l   
0967   6F                     LD   l,a   
0968   9F                     SBC   a,a   
0969   94                     SUB   h   
096A   67                     LD   h,a   
096B                BUFFERDEC1:      
096B   0E 00                  LD   c,0   ; leading zeros flag = false
096D   11 F0 D8               LD   de,-10000   
0970   CD 8B 09               CALL   bufferDec2   
0973   11 18 FC               LD   de,-1000   
0976   CD 8B 09               CALL   bufferDec2   
0979   11 9C FF               LD   de,-100   
097C   CD 8B 09               CALL   bufferDec2   
097F   1E F6                  LD   e,-10   
0981   CD 8B 09               CALL   bufferDec2   
0984   0C                     INC   c   ; flag = true for at least digit
0985   1E FF                  LD   e,-1   
0987   CD 8B 09               CALL   bufferDec2   
098A   C9                     RET      
098B                BUFFERDEC2:      
098B   06 2F                  LD   b,"0"-1   
098D                BUFFERDEC3:      
098D   04                     INC   b   
098E   19                     ADD   hl,de   
098F   38 FC                  JR   c,bufferDec3   
0991   ED 52                  SBC   hl,de   
0993   3E 30                  LD   a,"0"   
0995   B8                     CP   b   
0996   20 05                  JR   nz,bufferDec4   
0998   AF                     XOR   a   
0999   B1                     OR   c   
099A   C8                     RET   z   
099B   18 01                  JR   bufferDec5   
099D                BUFFERDEC4:      
099D   0C                     INC   c   
099E                BUFFERDEC5:      
099E   78                     LD   a,b   
099F   D9                     EXX      
09A0   12                     LD   (de),a   
09A1   1C                     INC   e   
09A2   CC AF 0B               CALL   z,flushBuffer   
09A5   D9                     EXX      
09A6   C9                     RET      
09A7                             ; /bh buffer hex
09A7                             ; value --
09A7                BUFFERHEX:      
09A7   E1                     POP   hl   ; hl = value
09A8   ED 5B EC 53            LD   de,(vBufPtr)   
09AC   3E 24                  LD   a,"$"   ; # prefix
09AE   12                     LD   (de),a   
09AF   1C                     INC   e   ; buffer*++, wraparound
09B0   CC AF 0B               CALL   z,flushBuffer   
09B3   7C                     LD   a,h   
09B4   CD C8 09               CALL   bufferHex1   
09B7   7D                     LD   a,l   
09B8   CD C8 09               CALL   bufferHex1   
09BB   3E 20                  LD   a," "   ; append space to buffer
09BD   12                     LD   (de),a   
09BE   1C                     INC   e   ; buffer*++, wraparound
09BF   CC AF 0B               CALL   z,flushBuffer   
09C2   ED 53 EC 53            LD   (vBufPtr),de   
09C6   DD E9                  JP   (ix)   
09C8                BUFFERHEX1:      
09C8   F5                     PUSH   af   
09C9   1F                     RRA      
09CA   1F                     RRA      
09CB   1F                     RRA      
09CC   1F                     RRA      
09CD   CD D1 09               CALL   bufferHex2   
09D0   F1                     POP   af   
09D1                BUFFERHEX2:      
09D1   E6 0F                  AND   0x0F   
09D3   C6 90                  ADD   a,0x90   
09D5   27                     DAA      
09D6   CE 40                  ADC   a,0x40   
09D8   27                     DAA      
09D9   12                     LD   (de),a   
09DA   1C                     INC   e   ; buffer*++, wraparound
09DB   CC AF 0B               CALL   z,flushBuffer   
09DE   C9                     RET      
09DF                             ; division subroutine.
09DF                             ; bc: divisor, de: dividend, hl: remainder
09DF                DIVIDE:      
09DF   21 00 00               LD   hl,0   ; zero the remainder
09E2   3E 10                  LD   a,16   ; loop counter
09E4                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
09E4   CB 21                  SLA   c   
09E6   CB 10                  RL   b   
09E8   ED 6A                  ADC   hl,hl   
09EA   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
09EC   38 03                  JR   c,divide2   
09EE   0C                     INC   c   
09EF   18 01                  JR   divide3   
09F1                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
09F1   19                     ADD   hl,de   
09F2                DIVIDE3:      
09F2   3D                     DEC   a   
09F3   20 EF                  JR   nz,divide1   
09F5   50 59                  LD   de,bc   ; result from bc to de
09F7   C9                     RET      
09F8                FZ:          
09F8   21 00 51               LD   hl,STACK   
09FB   ED 72                  SBC   hl,sp   
09FD   CB 3C                  SRL   h   
09FF   CB 1D                  RR   l   
0A01   E5                     PUSH   hl   
0A02   C3 B1 04               JP   dotNumber_   
0A05                             ; execute a block of code which ends with }
0A05                             ; creates a root scope if BP == stack
0A05                             ; else uses outer scope
0A05                CARET:       
0A05                GO:          
0A05   D1                     POP   de   ; de = block*
0A06                GO1:         
0A06   7B                     LD   a,e   ; if block* == null, exit
0A07   B2                     OR   d   
0A08   20 02                  JR   nz,go2   
0A0A   DD E9                  JP   (ix)   
0A0C                GO2:         
0A0C   1A                     LD   a,(de)   
0A0D   FE 7B                  CP   "{"   
0A0F   28 06                  JR   z,goBlock   
0A11   FE 28                  CP   "("   
0A13   C2 4A 0A               JP   nz,goFunc   
0A16   D5                     PUSH   de   ; push de just before stack frame
0A17                GOBLOCK:      
0A17   ED 53 00 54            LD   (vTemp1),de   ; save de
0A1B   21 00 51               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0A1E   FD 54                  LD   d,iyh   
0A20   FD 5D                  LD   e,iyl   
0A22   B7                     OR   a   ; if stack* == BP then this is the root_scope
0A23   ED 52                  SBC   hl,de   
0A25   ED 5B 00 54            LD   de,(vTemp1)   ; restore de
0A29   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0A2A   B4                     OR   h   
0A2B   3E 00                  LD   a,0   
0A2D   28 6A                  JR   z,goFunc8   
0A2F   C5                     PUSH   bc   ; push IP
0A30   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A33   FD 46 05               LD   b,(iy+5)   
0A36   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A39   FD 66 03               LD   h,(iy+3)   
0A3C                GOBLOCK2:      
0A3C   C5                     PUSH   bc   ; arg_list*
0A3D   E5                     PUSH   hl   ; first_arg*
0A3E   FD E5                  PUSH   iy   ; push BP
0A40   FD 21 00 00            LD   iy,0   ; BP = SP
0A44   FD 39                  ADD   iy,sp   
0A46                GOBLOCK3:      
0A46   42 4B                  LD   bc,de   ; bc = de = block*-1
0A48   DD E9                  JP   (ix)   
0A4A                GOFUNC:      ; execute func
0A4A   EB                     EX   de,hl   ; hl = func*
0A4B   5E                     LD   e,(hl)   ; de = partial_array*
0A4C   23                     INC   hl   
0A4D   56                     LD   d,(hl)   
0A4E   23                     INC   hl   
0A4F   7B                     LD   a,e   ; if partial_array* == null skip
0A50   B2                     OR   d   
0A51   28 21                  JR   z,goFunc3   
0A53   ED 43 00 54            LD   (vTemp1),bc   
0A57   22 02 54               LD   (vTemp2),hl   ; save bc,hl
0A5A   EB                     EX   de,hl   ; hl = partial_array*
0A5B   2B                     DEC   hl   ; bc = count
0A5C   46                     LD   b,(hl)   
0A5D   2B                     DEC   hl   
0A5E   4E                     LD   c,(hl)   
0A5F   23                     INC   hl   ; hl = array data*
0A60   23                     INC   hl   
0A61   18 06                  JR   goFunc2   ; push each item on stack
0A63                GOFUNC1:      
0A63   5E                     LD   e,(hl)   ; de = partial item
0A64   23                     INC   hl   
0A65   56                     LD   d,(hl)   
0A66   23                     INC   hl   
0A67   D5                     PUSH   de   ; push on stack
0A68   0B                     DEC   bc   
0A69                GOFUNC2:      
0A69   79                     LD   a,c   ; if count != 0 then loop
0A6A   B0                     OR   b   
0A6B   20 F6                  JR   nz,goFunc1   
0A6D   ED 4B 00 54            LD   bc,(vTemp1)   ; restore bc
0A71   2A 02 54               LD   hl,(vTemp2)   ; restore hl
0A74                GOFUNC3:      
0A74   5E                     LD   e,(hl)   ; de = block*
0A75   23                     INC   hl   
0A76   56                     LD   d,(hl)   
0A77   23                     INC   hl   
0A78   ED 53 00 54            LD   (vTemp1),de   ; save block*
0A7C   5E                     LD   e,(hl)   ; de = arg_list*
0A7D   23                     INC   hl   
0A7E   56                     LD   d,(hl)   
0A7F   23                     INC   hl   
0A80   EB                     EX   de,hl   ; hl = arg_list*
0A81   ED 5B 00 54            LD   de,(vTemp1)   ; restore de = block*
0A85   7D                     LD   a,l   ; if arg_list* == null a = 0
0A86   B4                     OR   h   
0A87   20 03                  JR   nz,goFunc4   
0A89   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A8A   18 0D                  JR   goFunc8   
0A8C                GOFUNC4:      ; allocate locals
0A8C   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A8D   18 03                  JR   goFunc6   
0A8F                GOFUNC5:      ; loop
0A8F   3B                     DEC   sp   
0A90   3B                     DEC   sp   
0A91   3D                     DEC   a   
0A92                GOFUNC6:      
0A92   B7                     OR   a   
0A93   20 FA                  JR   nz,goFunc5   ; end loop
0A95                GOFUNC7:      
0A95   23                     INC   hl   ; a = num_args* x 2
0A96   7E                     LD   a,(hl)   
0A97   2B                     DEC   hl   
0A98   87                     ADD   a,a   ; a *= 2
0A99                GOFUNC8:      
0A99   C5                     PUSH   bc   ; push IP
0A9A   44 4D                  LD   bc,hl   
0A9C   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A9F   85                     ADD   a,l   
0AA0   6F                     LD   l,a   
0AA1   39                     ADD   hl,sp   
0AA2   18 98                  JR   goBlock2   
0AA4                DOLLAR:      
0AA4                HEXNUM:      
0AA4   21 00 00               LD   hl,0   ; Clear hl to accept the number
0AA7                HEXNUM1:      
0AA7   03                     INC   bc   
0AA8   0A                     LD   a,(bc)   ; Get the character which is a numeral
0AA9   CB 77                  BIT   6,a   ; is it uppercase alpha?
0AAB   28 02                  JR   z,hexnum2   ; no a decimal
0AAD   D6 07                  SUB   7   ; sub 7  to make $a - $F
0AAF                HEXNUM2:      
0AAF   D6 30                  SUB   $30   ; form decimal digit
0AB1   DA 41 0B               JP   c,num2   
0AB4   FE 10                  CP   $0F+1   
0AB6   D2 41 0B               JP   nc,num2   
0AB9   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0ABA   29                     ADD   hl,hl   ; 4X
0ABB   29                     ADD   hl,hl   ; 8X
0ABC   29                     ADD   hl,hl   ; 16X
0ABD   85                     ADD   a,l   ; add into bottom of hl
0ABE   6F                     LD   l,a   
0ABF   18 E6                  JR   hexnum1   
0AC1                UPCASE:      
0AC1   0A                     LD   a,(bc)   ; a = identifier char
0AC2   D6 41                  SUB   "A"   ; "A" = 0
0AC4   18 05                  JR   ident1   
0AC6                LOWCASE:      
0AC6   0A                     LD   a,(bc)   
0AC7   D6 61                  SUB   "a"   
0AC9   C6 1A                  ADD   a,26   
0ACB                IDENT1:      
0ACB   87                     ADD   a,a   ; l = a * 2
0ACC   6F                     LD   l,a   
0ACD   26 53                  LD   h,msb(vars)   
0ACF   22 F4 53               LD   (vPointer),hl   ; store address in setter
0AD2   5E                     LD   e,(hl)   
0AD3   23                     INC   hl   
0AD4   56                     LD   d,(hl)   
0AD5   D5                     PUSH   de   
0AD6   DD E9                  JP   (ix)   
0AD8                             ; if
0AD8                             ; condition then -- value
0AD8                QUESTION:      
0AD8                IF:          
0AD8   03                     INC   bc   
0AD9   0A                     LD   a,(bc)   
0ADA   FE 3F                  CP   "?"   
0ADC   28 06                  JR   z,ifte   
0ADE   0B                     DEC   bc   
0ADF   11 00 00               LD   de,NUL   ; NUL pointer for else
0AE2   18 01                  JR   ifte1   
0AE4                             ; ifte
0AE4                             ; condition then else -- value
0AE4                IFTE:        
0AE4   D1                     POP   de   ; de = else
0AE5                IFTE1:       
0AE5   E1                     POP   hl   ; hl = then
0AE6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AE7   7C                     LD   a,h   
0AE8   B5                     OR   l   
0AE9   E1                     POP   hl   ; hl = then
0AEA   CA 06 0A               JP   z,go1   ; if z de = else
0AED   EB                     EX   de,hl   ; condition = false, de = then
0AEE   C3 06 0A               JP   go1   
0AF1                KEY:         
0AF1   CD 81 00               CALL   getchar   
0AF4   26 00                  LD   h,0   
0AF6   6F                     LD   l,a   
0AF7   E5                     PUSH   hl   
0AF8   DD E9                  JP   (ix)   
0AFA                             ; Z80 port output
0AFA                             ; value port --
0AFA                OUTPUT:      
0AFA   E1                     POP   hl   
0AFB   59                     LD   e,c   ; save IP
0AFC   4D                     LD   c,l   
0AFD   E1                     POP   hl   
0AFE   ED 69                  OUT   (c),l   
0B00   4B                     LD   c,e   ; restore IP
0B01   DD E9                  JP   (ix)   
0B03                STAR:        
0B03                MUL:         
0B03   D1                     POP   de   ; get first value
0B04   E1                     POP   hl   
0B05                MUL2:        
0B05   C5                     PUSH   bc   ; Preserve the IP
0B06   44 4D                  LD   bc,hl   ; bc = 2nd value
0B08   21 00 00               LD   hl,0   
0B0B   3E 10                  LD   a,16   
0B0D                MUL3:        
0B0D   29                     ADD   hl,hl   
0B0E   CB 13                  RL   e   
0B10   CB 12                  RL   d   
0B12   30 04                  JR   nc,$+6   
0B14   09                     ADD   hl,bc   
0B15   30 01                  JR   nc,$+3   
0B17   13                     INC   de   
0B18   3D                     DEC   a   
0B19   20 F2                  JR   nz,mul3   
0B1B   C1                     POP   bc   ; Restore the IP
0B1C   C3 13 02               JP   add3   
0B1F                NUM:         
0B1F   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B22   0A                     LD   a,(bc)   ; Get numeral or -
0B23   FE 2D                  CP   "-"   
0B25   20 01                  JR   nz,num0   
0B27   03                     INC   bc   ; move to next char, no flags affected
0B28                NUM0:        
0B28   08                     EX   af,af'   ; save zero flag = 0 for later
0B29                NUM1:        
0B29   0A                     LD   a,(bc)   ; read digit
0B2A   D6 30                  SUB   "0"   ; less than 0?
0B2C   38 13                  JR   c,num2   ; not a digit, exit loop
0B2E   FE 0A                  CP   10   ; greater that 9?
0B30   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B32   03                     INC   bc   ; inc IP
0B33   54 5D                  LD   de,hl   ; multiply hl * 10
0B35   29                     ADD   hl,hl   
0B36   29                     ADD   hl,hl   
0B37   19                     ADD   hl,de   
0B38   29                     ADD   hl,hl   
0B39   85                     ADD   a,l   ; add digit in a to hl
0B3A   6F                     LD   l,a   
0B3B   3E 00                  LD   a,0   
0B3D   8C                     ADC   a,h   
0B3E   67                     LD   h,a   
0B3F   18 E8                  JR   num1   
0B41                NUM2:        
0B41   0B                     DEC   bc   
0B42   08                     EX   af,af'   ; restore zero flag
0B43   20 07                  JR   nz,num3   
0B45   EB                     EX   de,hl   ; negate the value of hl
0B46   21 00 00               LD   hl,0   
0B49   B7                     OR   a   ; jump to sub2
0B4A   ED 52                  SBC   hl,de   
0B4C                NUM3:        
0B4C   E5                     PUSH   hl   ; Put the number on the stack
0B4D   DD E9                  JP   (ix)   ; and process the next character
0B4F                RPAREN:      
0B4F   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B52   FD 46 09               LD   b,(iy+9)   
0B55   DD E9                  JP   (ix)   
0B57                             ; shiftLeft
0B57                             ; value count -- value2          shift left count places
0B57                SHIFTLEFT:      
0B57   50 59                  LD   de,bc   ; save IP
0B59   C1                     POP   bc   ; bc = count
0B5A   41                     LD   b,c   ; b = loop counter
0B5B   E1                     POP   hl   
0B5C   04                     INC   b   ; test for counter=0 case
0B5D   18 01                  JR   shiftLeft2   
0B5F                SHIFTLEFT1:      
0B5F   29                     ADD   hl,hl   ; left shift hl
0B60                SHIFTLEFT2:      
0B60   10 FD                  DJNZ   shiftLeft1   
0B62   E5                     PUSH   hl   
0B63   42 4B                  LD   bc,de   ; restore IP
0B65   DD E9                  JP   (ix)   
0B67                             ; shiftRight
0B67                             ; value count -- value2          shift left count places
0B67                SHIFTRIGHT:      
0B67   50 59                  LD   de,bc   ; save IP
0B69   C1                     POP   bc   ; bc = count
0B6A   41                     LD   b,c   ; b = loop counter
0B6B   E1                     POP   hl   
0B6C   04                     INC   b   ; test for counter=0 case
0B6D   18 04                  JR   shiftRight2   
0B6F                SHIFTRIGHT1:      
0B6F   CB 3C                  SRL   h   ; right shift hl
0B71   CB 1D                  RR   l   
0B73                SHIFTRIGHT2:      
0B73   10 FA                  DJNZ   shiftRight1   
0B75   E5                     PUSH   hl   
0B76   42 4B                  LD   bc,de   ; restore IP
0B78   DD E9                  JP   (ix)   
0B7A                             ; string
0B7A                             ; -- ptr                        ; points to start of string chars,
0B7A                             ; length is stored at start - 2 bytes
0B7A                DQUOTE:      
0B7A                STRING:      
0B7A   2A F0 53               LD   hl,(vHeapPtr)   ; hl = heap*
0B7D   23                     INC   hl   ; skip length field to start
0B7E   23                     INC   hl   
0B7F   E5                     PUSH   hl   ; save start of string
0B80   03                     INC   bc   ; point to next char
0B81   18 03                  JR   string2   
0B83                STRING1:      
0B83   77                     LD   (hl),a   
0B84   23                     INC   hl   ; increase count
0B85   03                     INC   bc   ; point to next char
0B86                STRING2:      
0B86   0A                     LD   a,(bc)   
0B87   FE 22                  CP   DQ   ; " is the string terminator
0B89   28 04                  JR   z,string3   
0B8B   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0B8D   20 F4                  JR   nz,string1   
0B8F                STRING3:      
0B8F   AF                     XOR   a   ; write NUL to terminate string
0B90   77                     LD   (hl),a   ; hl = end of string
0B91   23                     INC   hl   
0B92   22 F0 53               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B95   2B                     DEC   hl   ; hl = end of string without terminator
0B96   D1                     POP   de   ; de = start of string
0B97   D5                     PUSH   de   ; return start of string
0B98   B7                     OR   a   ; hl = length bytes, de = start of string
0B99   ED 52                  SBC   hl,de   
0B9B   EB                     EX   de,hl   
0B9C   2B                     DEC   hl   ; write length bytes to length field at start - 2
0B9D   72                     LD   (hl),d   
0B9E   2B                     DEC   hl   
0B9F   73                     LD   (hl),e   
0BA0   DD E9                  JP   (ix)   
0BA2                PRINTCHARS1:      
0BA2   1A                     LD   a,(de)   ; print char at char*
0BA3   CD 85 00               CALL   putchar   
0BA6   13                     INC   de   ; char*++
0BA7   2B                     DEC   hl   ; count--
0BA8                PRINTCHARS2:      
0BA8   7D                     LD   a,l   ; count == 0?
0BA9   B4                     OR   h   
0BAA   C8                     RET   z   
0BAB   18 F5                  JR   printChars1   ; if not loop
0BAD                             ; 
0BAD                FILTER:      
0BAD                SCAN:        
0BAD   DD E9                  JP   (ix)   
0BAF                             ;*******************************************************************
0BAF                             ; general routines
0BAF                             ;*******************************************************************
0BAF                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0BAF                FLUSHBUFFER:      
0BAF   F5                     PUSH   af   
0BB0   D5                     PUSH   de   
0BB1   E5                     PUSH   hl   
0BB2   2A EC 53               LD   hl,(vBufPtr)   
0BB5   11 00 52               LD   de,BUF   
0BB8   ED 53 EC 53            LD   (vBufPtr),de   
0BBC   B7                     OR   a   
0BBD   ED 52                  SBC   hl,de   
0BBF   CD A8 0B               CALL   printChars2   
0BC2   E1                     POP   hl   
0BC3   D1                     POP   de   
0BC4   F1                     POP   af   
0BC5   C9                     RET      
0BC6                COMMANDTABLE:      
0BC6   03                     INC   bc   
0BC7   0A                     LD   a,(bc)   
0BC8   FE 7B                  CP   "z"+1   
0BCA   30 09                  JR   nc,commandTable2   
0BCC   D6 61                  SUB   "a"   
0BCE   38 05                  JR   c,commandTable2   
0BD0                COMMANDTABLE1:      
0BD0   E1                     POP   hl   
0BD1   85                     ADD   a,l   
0BD2   6F                     LD   l,a   
0BD3   6E                     LD   l,(hl)   ; must have the same msb as the table
0BD4   E9                     JP   (hl)   
0BD5                COMMANDTABLE2:      
0BD5   3E 1A                  LD   a,26   
0BD7   0B                     DEC   bc   
0BD8   18 F6                  JR   commandTable1   
0BDA                             ; followed by a table
0BDA                             ; db char
0BDA                             ; db lsb(addr)
0BDA                             ; the final item must have char == NUL
0BDA                JUMPTABLE:      
0BDA   E1                     POP   hl   
0BDB   03                     INC   bc   
0BDC                JUMPTABLE0:      
0BDC   AF                     XOR   a   
0BDD   BE                     CP   (hl)   
0BDE   28 0B                  JR   z,jumpTable2   
0BE0   0A                     LD   a,(bc)   
0BE1   BE                     CP   (hl)   
0BE2   28 04                  JR   z,jumpTable1   
0BE4   23                     INC   hl   
0BE5   23                     INC   hl   
0BE6   18 F4                  JR   jumpTable0   
0BE8                JUMPTABLE1:      
0BE8   23                     INC   hl   
0BE9   6E                     LD   l,(hl)   ; must have the same msb as the table
0BEA   E9                     JP   (hl)   
0BEB                JUMPTABLE2:      
0BEB   0B                     DEC   bc   
0BEC   23                     INC   hl   
0BED   E9                     JP   (hl)   
0BEE                PRTSTR0:      
0BEE   CD 85 00               CALL   putchar   
0BF1   23                     INC   hl   
0BF2                PRTSTR:      
0BF2   7E                     LD   a,(hl)   
0BF3   B7                     OR   a   
0BF4   20 F8                  JR   nz,prtstr0   
0BF6   C9                     RET      
0BF7                             ; **************************************************************************
0BF7                             ; calculate nesting value
0BF7                             ; a is char to be tested,
0BF7                             ; e is the nesting value (initially 0)
0BF7                             ; e is increased by ( and [
0BF7                             ; e is decreased by ) and ]
0BF7                             ; e has its bit 7 toggled by `
0BF7                             ; limited to 127 levels
0BF7                             ; **************************************************************************
0BF7                NESTING:      
0BF7   FE 22                  CP   DQ   ; quote char
0BF9   28 06                  JR   z,nesting0   
0BFB   FE 60                  CP   "`"   ; quote char
0BFD   28 02                  JR   z,nesting0   
0BFF   18 0A                  JR   nesting1   
0C01                NESTING0:      
0C01   CB 7B                  BIT   7,e   
0C03   28 03                  JR   z,nesting1a   
0C05   CB BB                  RES   7,e   
0C07   C9                     RET      
0C08                NESTING1A:      
0C08   CB FB                  SET   7,e   
0C0A   C9                     RET      
0C0B                NESTING1:      
0C0B   CB 7B                  BIT   7,e   
0C0D   C0                     RET   nz   
0C0E   FE 7B                  CP   "{"   
0C10   28 08                  JR   z,nesting2   
0C12   FE 5B                  CP   "["   
0C14   28 04                  JR   z,nesting2   
0C16   FE 28                  CP   "("   
0C18   20 02                  JR   nz,nesting3   
0C1A                NESTING2:      
0C1A   1C                     INC   e   
0C1B   C9                     RET      
0C1C                NESTING3:      
0C1C   FE 7D                  CP   "}"   
0C1E   28 07                  JR   z,nesting4   
0C20   FE 5D                  CP   "]"   
0C22   28 03                  JR   z,nesting4   
0C24   FE 29                  CP   ")"   
0C26   C0                     RET   nz   
0C27                NESTING4:      
0C27   1D                     DEC   e   
0C28   C9                     RET      
0C29                PROMPT:      
0C29   CD 39 0C               CALL   printStr   
0C2C   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0C31   C9                     RET      
0C32                CRLF:        
0C32   CD 39 0C               CALL   printStr   
0C35   0D 0A 00               .CSTR   "\r\n"   
0C38   C9                     RET      
0C39                             ; prints a null teminated string
0C39                             ; the string should be immediately following the call
0C39                PRINTSTR:      
0C39   E3                     EX   (sp),hl   ; swap			
0C3A   CD F2 0B               CALL   prtstr   
0C3D   23                     INC   hl   ; inc past NUL
0C3E   E3                     EX   (sp),hl   ; put it back	
0C3F   C9                     RET      
0C40                INIT:        
0C40   21 F0 01               LD   hl,titleStr   
0C43   11 08 54               LD   de,titleBuf   
0C46   06 14                  LD   b,20   
0C48                INIT1:       
0C48   1A                     LD   a,(de)   
0C49   BE                     CP   (hl)   
0C4A   20 17                  JR   nz,coldBoot0   
0C4C   13                     INC   de   
0C4D   23                     INC   hl   
0C4E   10 F8                  DJNZ   init1   
0C50                WARMINIT:      
0C50   ED 4B F8 53            LD   bc,(vSavedIP)   ; restore IP
0C54   ED 7B FA 53            LD   sp,(vSavedSP)   ; restore SP
0C58   DD 2A FC 53            LD   ix,(vSavedNext)   ; restore Next
0C5C   FD 2A FE 53            LD   iy,(vSavedBP)   ; restore BP
0C60   C3 9A 0C               JP   start1   
0C63                COLDBOOT0:      
0C63   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0C66   11 08 54               LD   de,titleBuf   
0C69   06 14                  LD   b,20   
0C6B   ED B0                  LDIR      
0C6D                COLDINIT:      
0C6D   21 DE 01               LD   hl,isysVars   
0C70   11 E6 53               LD   de,sysVars   
0C73   01 10 00               LD   bc,8 * 2   
0C76   ED B0                  LDIR      
0C78   21 00 53               LD   hl,vars   ; 52 vars LO HI
0C7B   06 34                  LD   b,26*2   
0C7D   AF                     XOR   a   
0C7E                COLDBOOT1:      
0C7E   77                     LD   (hl),a   
0C7F   23                     INC   hl   
0C80   10 FC                  DJNZ   coldBoot1   
0C82   DD 2A EE 53            LD   ix,(vNext)   
0C86   FD 21 00 51            LD   iy,STACK   
0C8A   C9                     RET      
0C8B                COLDSTART:      
0C8B   31 00 51               LD   sp,STACK   
0C8E   CD 63 0C               CALL   coldBoot0   
0C91   C3 9A 0C               JP   start1   
0C94                START:       
0C94   31 00 51               LD   sp,STACK   ; start Monty
0C97   CD 40 0C               CALL   init   ; setups
0C9A                START1:      
0C9A   21 08 54               LD   hl,titleBuf   
0C9D   CD F2 0B               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0CA0                INTERPRET:      
0CA0   CD AF 0B               CALL   flushBuffer   
0CA3   CD 29 0C               CALL   prompt   
0CA6   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0CA9   21 00 51               LD   hl,TIB   
0CAC   22 EA 53               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0CAF                INTERPRET2:      ; calculate nesting
0CAF   1E 00                  LD   e,0   ; initilize nesting value
0CB1   C5                     PUSH   bc   ; save offset into TIB,
0CB2                             ; bc is also the count of chars in TIB
0CB2   21 00 51               LD   hl,TIB   ; hl is start of TIB
0CB5   18 0B                  JR   interpret4   
0CB7                INTERPRET3:      
0CB7   3E 33                  LD   a,"3"   
0CB9   CD 85 00               CALL   putchar   
0CBC   7E                     LD   a,(hl)   ; a = char in TIB
0CBD   23                     INC   hl   ; inc pointer into TIB
0CBE   0B                     DEC   bc   ; dec count of chars in TIB
0CBF   CD F7 0B               CALL   nesting   ; update nesting value
0CC2                INTERPRET4:      
0CC2   79                     LD   a,c   ; is count zero?
0CC3   B0                     OR   b   
0CC4   20 F1                  JR   nz,interpret3   ; if not loop
0CC6   C1                     POP   bc   ; restore offset into TIB
0CC7                INTERPRET5:      
0CC7   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0CCA   FE 20                  CP   $20   ; compare to space
0CCC   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0CCE   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0CD0                             ; ???? NEEDED?
0CD0   28 36                  JR   z,interpret8   
0CD2   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0CD4   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0CD6   FE 05                  CP   CTRL_E   
0CD8   CA 69 0D               JP   z,edit_   
0CDB   FE 08                  CP   CTRL_H   
0CDD   CA 59 0D               JP   z,backSpace_   
0CE0   FE 0A                  CP   CTRL_J   
0CE2   CA 81 0D               JP   z,reEdit_   
0CE5                             ; cp CTRL_S
0CE5                             ; jp z,printStack_
0CE5                             ; DB     lsb(edit_)       ; ENQ ^E  5
0CE5                             ; DB     lsb(reedit_)     ; LF  ^J 10
0CE5                             ; DB     lsb(list_)       ; FF  ^L 12
0CE5                             ; DB     lsb(printStack_) ; DLE ^P 16
0CE5                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0CE5                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0CE5                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0CE5                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0CE5                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0CE5                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0CE5                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0CE5                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0CE5                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0CE5                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0CE5                INTERPRET5A:      
0CE5                             ; ld (vTIBPtr),bc
0CE5                             ; ld bc,(vTIBPtr)
0CE5   18 C8                  JR   interpret2   
0CE7                INTERPRET6:      
0CE7   21 00 51               LD   hl,TIB   
0CEA   09                     ADD   hl,bc   
0CEB   77                     LD   (hl),a   ; store the character in textbuf
0CEC   03                     INC   bc   
0CED   CD 85 00               CALL   putchar   ; echo character to screen
0CF0   CD F7 0B               CALL   nesting   
0CF3   18 D2                  JR   interpret5   ; wait for next character
0CF5                INTERPRET7:      
0CF5   21 00 51               LD   hl,TIB   
0CF8   09                     ADD   hl,bc   
0CF9   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0CFB   23                     INC   hl   
0CFC   36 0A                  LD   (hl),"\n"   
0CFE   23                     INC   hl   
0CFF   03                     INC   bc   
0D00   03                     INC   bc   
0D01   CD 32 0C               CALL   crlf   ; echo character to screen
0D04   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0D05   B7                     OR   a   
0D06   20 BF                  JR   nz,interpret5   
0D08                INTERPRET8:      
0D08   21 00 51               LD   hl,TIB   
0D0B   09                     ADD   hl,bc   
0D0C   22 EA 53               LD   (vTIBPtr),hl   
0D0F   01 00 51               LD   bc,TIB   
0D12   ED 43 F8 53            LD   (vSavedIP),bc   ; save IP
0D16   ED 73 FA 53            LD   (vSavedSP),sp   ; save SP
0D1A   DD 22 FC 53            LD   (vSavedNext),ix   ; save Next
0D1E   FD 22 FE 53            LD   (vSavedBP),iy   ; save BP
0D22   0B                     DEC   bc   
0D23                NEXT:        
0D23   03                     INC   bc   ; Increment the IP
0D24   0A                     LD   a,(bc)   ; Get the next character and dispatch
0D25   FE 20                  CP   " "   ; whitespace?
0D27   28 FA                  JR   z,next   ; space? ignore
0D29   38 08                  JR   c,next1   
0D2B   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0D2D   6F                     LD   l,a   ; index into table
0D2E   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0D30   6E                     LD   l,(hl)   ; get low jump address
0D31   24                     INC   h   ; Load h with page after opcodes
0D32   E9                     JP   (hl)   ; Jump to routine
0D33                NEXT1:       
0D33   FE 00                  CP   NUL   ; end of input string?
0D35   28 03                  JR   z,exit   
0D37   C3 A0 0C               JP   interpret   ; no, other whitespace, macros?
0D3A                EXIT:        
0D3A   03                     INC   bc   
0D3B   60 69                  LD   hl,bc   
0D3D   E9                     JP   (hl)   
0D3E                RUN:         
0D3E   C1                     POP   bc   
0D3F   0B                     DEC   bc   
0D40   DD E9                  JP   (ix)   
0D42                ERROR1:      
0D42   21 01 00               LD   hl,1   ; error 1: unknown command
0D45   E5                     PUSH   hl   
0D46                ERROR:       
0D46   CD 3E 0D               CALL   run   
0D49   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0D56   C3 A0 0C               JP   interpret   
0D59                BACKSPACE_:      
0D59   79                     LD   a,c   
0D5A   B0                     OR   b   
0D5B   CA AF 0C               JP   z,interpret2   
0D5E   0B                     DEC   bc   
0D5F   CD 39 0C               CALL   printStr   
0D62   08 20 08 00            .CSTR   "\b \b"   
0D66   C3 AF 0C               JP   interpret2   
0D69                             ; edit
0D69                EDIT_:       
0D69   CD 3E 0D               CALL   run   
0D6C   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0D7E   C3 A0 0C               JP   interpret   
0D81                REEDIT_:      
0D81   C3 A0 0C               JP   interpret   
0D84                PRINTSTACK_:      
0D84   CD 3E 0D               CALL   run   
0D87   2F 70 6B 00            .CSTR   "/pk"   
0D8B   C3 A0 0C               JP   interpret   
0D8E                             ; editDef:
0D8E                             ;     pop hl                      ; pop ret address
0D8E                             ;     ex (sp),hl                  ; swap with TOS
0D8E                             ;     push hl                     ; dup TOS
0D8E                             ;     ld a,l                      ; a = ident
0D8E                             ;     ld de,TIB                   ; de = start of TIB
0D8E                             ;     ld (vTIBPtr),de             ; update TIB*
0D8E                             ;     push ix                     ; save NEXT
0D8E                             ;     ld ix,editDef0              ; NEXT = editDef0
0D8E                             ;     jp lookupRef                ; convert letter into address
0D8E                             ; editDef0:
0D8E                             ;     ld e,(hl)                   ; de = (hl++)
0D8E                             ;     inc hl
0D8E                             ;     ld d,(hl)
0D8E                             ;     ld a,d                      ; de == 0 ?
0D8E                             ;     or e
0D8E                             ;     jr z,editDef4
0D8E                             ;     ld ix,editDef3              ; NEXT = editDef3
0D8E                             ;     ex de,hl
0D8E                             ;     ld a,(hl)
0D8E                             ;     cp "{"
0D8E                             ;     jr nz,editDef1
0D8E                             ;     jp editBlock0               ; convert letter into address
0D8E                             ; editDef1:
0D8E                             ;     cp "("
0D8E                             ;     jr nz,editDef2
0D8E                             ;     jp editBlock0               ; convert letter into address
0D8E                             ; editDef2:
0D8E                             ;     jp editFunc
0D8E                             ; editDef3:
0D8E                             ;     ld a," "                    ; write assign
0D8E                             ;     call writeChar
0D8E                             ;     pop hl                      ; a = ident
0D8E                             ;     ld a,l
0D8E                             ;     call writeChar
0D8E                             ;     ld a,"="                    ; write assign
0D8E                             ;     call writeChar
0D8E                             ;     ld ix,editDef4              ; NEXT = editDef4
0D8E                             ;     jp printTIB
0D8E                             ; editDef4:
0D8E                             ;     pop ix                      ; restore NEXT
0D8E                             ;     jp (ix)
0D8E                             ; writeChar:
0D8E                             ;     ld de,(vTIBPtr)             ; de = TIB*
0D8E                             ;     ld (de),a                   ; write ident
0D8E                             ;     inc de
0D8E                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0D8E                             ;     ret
0D8E                             ; ; printTIB
0D8E                             ; printTIB:
0D8E                             ;     ld hl,(vTIBPtr)
0D8E                             ;     ld de,TIB
0D8E                             ;     or a
0D8E                             ;     sbc hl,de
0D8E                             ;     jp printTIB2
0D8E                             ; printTIB1:
0D8E                             ;     ld a,(de)
0D8E                             ;     call putchar
0D8E                             ; printTIB2:
0D8E                             ;     ld a,l
0D8E                             ;     or h
0D8E                             ;     jr nz,printTIB1
0D8E                             ;     jp (ix)
0D8E                             ; editBlock:
0D8E                             ;     pop hl                      ; hl = block*
0D8E                             ; editBlock0:
0D8E                             ;     push ix                     ; save next
0D8E                             ;     push hl                     ; push block*
0D8E                             ;     push hl                     ; push block*
0D8E                             ;     ld ix,(editBlock2)
0D8E                             ;     jp blockLength
0D8E                             ; editBlock1:
0D8E                             ;     pop hl                      ; bc = length, (sp) = IP
0D8E                             ;     pop de                      ; de = block*
0D8E                             ;     ld a,l
0D8E                             ;     or h
0D8E                             ;     jr z,editBlock2
0D8E                             ;     push bc
0D8E                             ;     ld bc,hl
0D8E                             ;     ex de,hl                    ; hl = block*
0D8E                             ;     ld de,(vTIBPtr)              ; de = TIB*
0D8E                             ;     ldir                        ; copy block to TIB
0D8E                             ;     ld (vTIBPtr),de              ; save TIB*
0D8E                             ;     pop bc
0D8E                             ; editBlock2:
0D8E                             ;     pop ix                      ; restore next
0D8E                             ;     jp (ix)
0D8E                             ; editFunc:
0D8E                             ;     jp (ix)
0D8E                             ; editArray:
0D8E                             ;     jp (ix)
0D8E                             ; editArglist:
0D8E                             ;     jp (ix)
0D8E                             ; ; blockLength
0D8E                             ; ; addr1 -- length
0D8E                             ; blockLength:
0D8E                             ;     pop hl                      ; block*
0D8E                             ;     push hl                     ; save block*
0D8E                             ;     inc hl                      ; skip first char
0D8E                             ;     ld d,1                      ; increase nesting
0D8E                             ; blockLength1:                   ; Skip to end of definition
0D8E                             ;     ld a,(hl)                   ; Get the next character
0D8E                             ;     inc hl                      ; Point to next character
0D8E                             ;     cp " " + 1                  ; ignore whitespace
0D8E                             ;     jr c,blockLength1
0D8E                             ;     cp ")"
0D8E                             ;     jr z,blockLength4
0D8E                             ;     cp "}"
0D8E                             ;     jr z,blockLength4
0D8E                             ;     cp "]"
0D8E                             ;     jr z,blockLength4
0D8E                             ;     cp "("
0D8E                             ;     jr z,blockLength2
0D8E                             ;     cp "{"
0D8E                             ;     jr z,blockLength2
0D8E                             ;     cp "["
0D8E                             ;     jr z,blockLength2
0D8E                             ;     cp "'"
0D8E                             ;     jr z,blockLength3
0D8E                             ;     cp "`"
0D8E                             ;     jr z,blockLength3
0D8E                             ;     cp DQ
0D8E                             ;     jr z,blockLength3
0D8E                             ;     jr blockLength1
0D8E                             ; blockLength2:
0D8E                             ;     inc d
0D8E                             ;     jr blockLength1
0D8E                             ; blockLength4:
0D8E                             ;     dec d
0D8E                             ;     jr nz, blockLength1         ; get the next element
0D8E                             ; blockLength3:
0D8E                             ;     ld a,$80
0D8E                             ;     xor d
0D8E                             ;     ld d,a
0D8E                             ;     jr nz, blockLength1
0D8E                             ;     pop hl                      ; hl = block*
0D8E                             ;     or a
0D8E                             ;     sbc hl,de
0D8E                             ;     push hl
0D8E                             ;     jp (ix)
0D8E                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0D8E                             ; \a start of stack \#3 depth \b base \$ prompt
0D8E                             ; DW dStack               ; a vS0 start of datastack			
0D8E                             ; DW FALSE                ; b vBase16
0D8E                             ; DW 0                    ; c vTIBPtr an offset to the tib
0D8E                             ; DW 0                    ; d
0D8E                             ; DW 65                   ; e vLastDef "A" last command u defined
0D8E                             ; DW 0                    ; f
0D8E                             ; DW page6                ; g 256 bytes limits
0D8E                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0D8E                          ;*Macro unroll: FUNC f1, 1, ""
0D8E                F1:          
0D8E   CD 05 0A               CALL   go   
0D91   00 00                  DW   NUL   
0D93   99 0D                  DW   f1M_2825S12   
0D95   97 0D                  DW   $+2   
0D97   01                     DB   1   
0D98   00                     .PSTR   ""   
0D99                F1M_2825S12:      
0D99   00                     DB   0   
0D9A                          ;*Macro unroll: FUNC f2, 1, ""
0D9A                F2:          
0D9A   CD 05 0A               CALL   go   
0D9D   00 00                  DW   NUL   
0D9F   A5 0D                  DW   f2M_2827S15   
0DA1   A3 0D                  DW   $+2   
0DA3   01                     DB   1   
0DA4   00                     .PSTR   ""   
0DA5                F2M_2827S15:      
0DA5   00                     DB   0   
0DA6                          ;*Macro unroll: FUNC f3, 0, ""
0DA6                F3:          
0DA6   CD 05 0A               CALL   go   
0DA9   00 00                  DW   NUL   
0DAB   B1 0D                  DW   f3M_2829S18   
0DAD   AF 0D                  DW   $+2   
0DAF   00                     DB   0   
0DB0   00                     .PSTR   ""   
0DB1                F3M_2829S18:      
0DB1   00                     DB   0   
0DB2                          ;*Macro unroll: FUNC f4, 1, ""
0DB2                F4:          
0DB2   CD 05 0A               CALL   go   
0DB5   00 00                  DW   NUL   
0DB7   BD 0D                  DW   f4M_2831S21   
0DB9   BB 0D                  DW   $+2   
0DBB   01                     DB   1   
0DBC   00                     .PSTR   ""   
0DBD                F4M_2831S21:      
0DBD   00                     DB   0   
0DBE                          ALIGN   $100   
0E00                TESTSSTART:      
0E00                             ; ; test "[1 2 5]/as",3
0E00                             ; ; test "0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe", 0
0E00                             ; test "$1000 0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe", $1000
0E00                             ; call printStr
0E00                             ; .cstr "Done!"
0E00                             ; HALT
0E00                             ; 
0E00                          ;*Macro unroll:  test "/f", false
0E00   31 00 51               LD   SP,STACK   
0E03   CD 6D 0C               CALL   coldInit   
0E06   CD 74 4F               CALL   execStr   
0E09   2F 66 00               DB   "/f",0   
0E0C   CD AF 0B               CALL   flushBuffer   
0E0F   E1                     POP   HL   
0E10   E5                     PUSH   HL   
0E11   11 00 00               LD   DE,false   
0E14   B7                     OR   A   
0E15   ED 52                  SBC   HL,DE   
0E17   7D                     LD   A,L   
0E18   B4                     OR   H   
0E19   CA 76 0E               JP   Z,expectM_2842S37   
0E1C   CD 39 0C               CALL   printStr   
0E1F   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0E28   CD 39 0C               CALL   printStr   
0E2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E3A   21 00 00               LD   hl,false   
0E3D   E5                     PUSH   hl   
0E3E   E5                     PUSH   hl   
0E3F   CD 3E 0D               CALL   run   
0E42   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E4A   CD AF 0B               CALL   flushBuffer   
0E4D   CD 39 0C               CALL   printStr   
0E50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E5D   E1                     POP   hl   
0E5E   E5                     PUSH   hl   
0E5F   E5                     PUSH   hl   
0E60   CD 3E 0D               CALL   run   
0E63   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E72   CD AF 0B               CALL   flushBuffer   
0E75   76                     HALT      
0E76                EXPECTM_2842S37:      
0E76   E1                     POP   HL   
0E77                          ;*Macro unroll:  test "/t", true
0E77   31 00 51               LD   SP,STACK   
0E7A   CD 6D 0C               CALL   coldInit   
0E7D   CD 74 4F               CALL   execStr   
0E80   2F 74 00               DB   "/t",0   
0E83   CD AF 0B               CALL   flushBuffer   
0E86   E1                     POP   HL   
0E87   E5                     PUSH   HL   
0E88   11 FF FF               LD   DE,true   
0E8B   B7                     OR   A   
0E8C   ED 52                  SBC   HL,DE   
0E8E   7D                     LD   A,L   
0E8F   B4                     OR   H   
0E90   CA ED 0E               JP   Z,expectM_2843S38   
0E93   CD 39 0C               CALL   printStr   
0E96   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0E9F   CD 39 0C               CALL   printStr   
0EA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EB1   21 FF FF               LD   hl,true   
0EB4   E5                     PUSH   hl   
0EB5   E5                     PUSH   hl   
0EB6   CD 3E 0D               CALL   run   
0EB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0EC1   CD AF 0B               CALL   flushBuffer   
0EC4   CD 39 0C               CALL   printStr   
0EC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0ED4   E1                     POP   hl   
0ED5   E5                     PUSH   hl   
0ED6   E5                     PUSH   hl   
0ED7   CD 3E 0D               CALL   run   
0EDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0EE9   CD AF 0B               CALL   flushBuffer   
0EEC   76                     HALT      
0EED                EXPECTM_2843S38:      
0EED   E1                     POP   HL   
0EEE                          ;*Macro unroll:  test "1", 1
0EEE   31 00 51               LD   SP,STACK   
0EF1   CD 6D 0C               CALL   coldInit   
0EF4   CD 74 4F               CALL   execStr   
0EF7   31 00                  DB   "1",0   
0EF9   CD AF 0B               CALL   flushBuffer   
0EFC   E1                     POP   HL   
0EFD   E5                     PUSH   HL   
0EFE   11 01 00               LD   DE,1   
0F01   B7                     OR   A   
0F02   ED 52                  SBC   HL,DE   
0F04   7D                     LD   A,L   
0F05   B4                     OR   H   
0F06   CA 62 0F               JP   Z,expectM_2844S39   
0F09   CD 39 0C               CALL   printStr   
0F0C   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0F14   CD 39 0C               CALL   printStr   
0F17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F26   21 01 00               LD   hl,1   
0F29   E5                     PUSH   hl   
0F2A   E5                     PUSH   hl   
0F2B   CD 3E 0D               CALL   run   
0F2E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F36   CD AF 0B               CALL   flushBuffer   
0F39   CD 39 0C               CALL   printStr   
0F3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F49   E1                     POP   hl   
0F4A   E5                     PUSH   hl   
0F4B   E5                     PUSH   hl   
0F4C   CD 3E 0D               CALL   run   
0F4F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F5E   CD AF 0B               CALL   flushBuffer   
0F61   76                     HALT      
0F62                EXPECTM_2844S39:      
0F62   E1                     POP   HL   
0F63                          ;*Macro unroll:  test "2", 2
0F63   31 00 51               LD   SP,STACK   
0F66   CD 6D 0C               CALL   coldInit   
0F69   CD 74 4F               CALL   execStr   
0F6C   32 00                  DB   "2",0   
0F6E   CD AF 0B               CALL   flushBuffer   
0F71   E1                     POP   HL   
0F72   E5                     PUSH   HL   
0F73   11 02 00               LD   DE,2   
0F76   B7                     OR   A   
0F77   ED 52                  SBC   HL,DE   
0F79   7D                     LD   A,L   
0F7A   B4                     OR   H   
0F7B   CA D7 0F               JP   Z,expectM_2845S40   
0F7E   CD 39 0C               CALL   printStr   
0F81   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0F89   CD 39 0C               CALL   printStr   
0F8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F9B   21 02 00               LD   hl,2   
0F9E   E5                     PUSH   hl   
0F9F   E5                     PUSH   hl   
0FA0   CD 3E 0D               CALL   run   
0FA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FAB   CD AF 0B               CALL   flushBuffer   
0FAE   CD 39 0C               CALL   printStr   
0FB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FBE   E1                     POP   hl   
0FBF   E5                     PUSH   hl   
0FC0   E5                     PUSH   hl   
0FC1   CD 3E 0D               CALL   run   
0FC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FD3   CD AF 0B               CALL   flushBuffer   
0FD6   76                     HALT      
0FD7                EXPECTM_2845S40:      
0FD7   E1                     POP   HL   
0FD8                          ;*Macro unroll:  test "1", 1
0FD8   31 00 51               LD   SP,STACK   
0FDB   CD 6D 0C               CALL   coldInit   
0FDE   CD 74 4F               CALL   execStr   
0FE1   31 00                  DB   "1",0   
0FE3   CD AF 0B               CALL   flushBuffer   
0FE6   E1                     POP   HL   
0FE7   E5                     PUSH   HL   
0FE8   11 01 00               LD   DE,1   
0FEB   B7                     OR   A   
0FEC   ED 52                  SBC   HL,DE   
0FEE   7D                     LD   A,L   
0FEF   B4                     OR   H   
0FF0   CA 4C 10               JP   Z,expectM_2846S41   
0FF3   CD 39 0C               CALL   printStr   
0FF6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0FFE   CD 39 0C               CALL   printStr   
1001   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1010   21 01 00               LD   hl,1   
1013   E5                     PUSH   hl   
1014   E5                     PUSH   hl   
1015   CD 3E 0D               CALL   run   
1018   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1020   CD AF 0B               CALL   flushBuffer   
1023   CD 39 0C               CALL   printStr   
1026   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1033   E1                     POP   hl   
1034   E5                     PUSH   hl   
1035   E5                     PUSH   hl   
1036   CD 3E 0D               CALL   run   
1039   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1048   CD AF 0B               CALL   flushBuffer   
104B   76                     HALT      
104C                EXPECTM_2846S41:      
104C   E1                     POP   HL   
104D                          ;*Macro unroll:  test "0", 0
104D   31 00 51               LD   SP,STACK   
1050   CD 6D 0C               CALL   coldInit   
1053   CD 74 4F               CALL   execStr   
1056   30 00                  DB   "0",0   
1058   CD AF 0B               CALL   flushBuffer   
105B   E1                     POP   HL   
105C   E5                     PUSH   HL   
105D   11 00 00               LD   DE,0   
1060   B7                     OR   A   
1061   ED 52                  SBC   HL,DE   
1063   7D                     LD   A,L   
1064   B4                     OR   H   
1065   CA C1 10               JP   Z,expectM_2847S42   
1068   CD 39 0C               CALL   printStr   
106B   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1073   CD 39 0C               CALL   printStr   
1076   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1085   21 00 00               LD   hl,0   
1088   E5                     PUSH   hl   
1089   E5                     PUSH   hl   
108A   CD 3E 0D               CALL   run   
108D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1095   CD AF 0B               CALL   flushBuffer   
1098   CD 39 0C               CALL   printStr   
109B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10A8   E1                     POP   hl   
10A9   E5                     PUSH   hl   
10AA   E5                     PUSH   hl   
10AB   CD 3E 0D               CALL   run   
10AE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10BD   CD AF 0B               CALL   flushBuffer   
10C0   76                     HALT      
10C1                EXPECTM_2847S42:      
10C1   E1                     POP   HL   
10C2                          ;*Macro unroll:  test "10", 10
10C2   31 00 51               LD   SP,STACK   
10C5   CD 6D 0C               CALL   coldInit   
10C8   CD 74 4F               CALL   execStr   
10CB   31 30 00               DB   "10",0   
10CE   CD AF 0B               CALL   flushBuffer   
10D1   E1                     POP   HL   
10D2   E5                     PUSH   HL   
10D3   11 0A 00               LD   DE,10   
10D6   B7                     OR   A   
10D7   ED 52                  SBC   HL,DE   
10D9   7D                     LD   A,L   
10DA   B4                     OR   H   
10DB   CA 38 11               JP   Z,expectM_2848S43   
10DE   CD 39 0C               CALL   printStr   
10E1   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
10EA   CD 39 0C               CALL   printStr   
10ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10FC   21 0A 00               LD   hl,10   
10FF   E5                     PUSH   hl   
1100   E5                     PUSH   hl   
1101   CD 3E 0D               CALL   run   
1104   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
110C   CD AF 0B               CALL   flushBuffer   
110F   CD 39 0C               CALL   printStr   
1112   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
111F   E1                     POP   hl   
1120   E5                     PUSH   hl   
1121   E5                     PUSH   hl   
1122   CD 3E 0D               CALL   run   
1125   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1134   CD AF 0B               CALL   flushBuffer   
1137   76                     HALT      
1138                EXPECTM_2848S43:      
1138   E1                     POP   HL   
1139                          ;*Macro unroll:  test "123", 123
1139   31 00 51               LD   SP,STACK   
113C   CD 6D 0C               CALL   coldInit   
113F   CD 74 4F               CALL   execStr   
1142   31 32 33 00            DB   "123",0   
1146   CD AF 0B               CALL   flushBuffer   
1149   E1                     POP   HL   
114A   E5                     PUSH   HL   
114B   11 7B 00               LD   DE,123   
114E   B7                     OR   A   
114F   ED 52                  SBC   HL,DE   
1151   7D                     LD   A,L   
1152   B4                     OR   H   
1153   CA B1 11               JP   Z,expectM_2849S44   
1156   CD 39 0C               CALL   printStr   
1159   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1163   CD 39 0C               CALL   printStr   
1166   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1175   21 7B 00               LD   hl,123   
1178   E5                     PUSH   hl   
1179   E5                     PUSH   hl   
117A   CD 3E 0D               CALL   run   
117D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1185   CD AF 0B               CALL   flushBuffer   
1188   CD 39 0C               CALL   printStr   
118B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1198   E1                     POP   hl   
1199   E5                     PUSH   hl   
119A   E5                     PUSH   hl   
119B   CD 3E 0D               CALL   run   
119E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11AD   CD AF 0B               CALL   flushBuffer   
11B0   76                     HALT      
11B1                EXPECTM_2849S44:      
11B1   E1                     POP   HL   
11B2                          ;*Macro unroll:  test "-1",-1
11B2   31 00 51               LD   SP,STACK   
11B5   CD 6D 0C               CALL   coldInit   
11B8   CD 74 4F               CALL   execStr   
11BB   2D 31 00               DB   "-1",0   
11BE   CD AF 0B               CALL   flushBuffer   
11C1   E1                     POP   HL   
11C2   E5                     PUSH   HL   
11C3   11 FF FF               LD   DE,-1   
11C6   B7                     OR   A   
11C7   ED 52                  SBC   HL,DE   
11C9   7D                     LD   A,L   
11CA   B4                     OR   H   
11CB   CA 28 12               JP   Z,expectM_2850S45   
11CE   CD 39 0C               CALL   printStr   
11D1   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
11DA   CD 39 0C               CALL   printStr   
11DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11EC   21 FF FF               LD   hl,-1   
11EF   E5                     PUSH   hl   
11F0   E5                     PUSH   hl   
11F1   CD 3E 0D               CALL   run   
11F4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11FC   CD AF 0B               CALL   flushBuffer   
11FF   CD 39 0C               CALL   printStr   
1202   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
120F   E1                     POP   hl   
1210   E5                     PUSH   hl   
1211   E5                     PUSH   hl   
1212   CD 3E 0D               CALL   run   
1215   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1224   CD AF 0B               CALL   flushBuffer   
1227   76                     HALT      
1228                EXPECTM_2850S45:      
1228   E1                     POP   HL   
1229                          ;*Macro unroll:  test "''", 0
1229   31 00 51               LD   SP,STACK   
122C   CD 6D 0C               CALL   coldInit   
122F   CD 74 4F               CALL   execStr   
1232   27 27 00               DB   "''",0   
1235   CD AF 0B               CALL   flushBuffer   
1238   E1                     POP   HL   
1239   E5                     PUSH   HL   
123A   11 00 00               LD   DE,0   
123D   B7                     OR   A   
123E   ED 52                  SBC   HL,DE   
1240   7D                     LD   A,L   
1241   B4                     OR   H   
1242   CA 9F 12               JP   Z,expectM_2851S46   
1245   CD 39 0C               CALL   printStr   
1248   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1251   CD 39 0C               CALL   printStr   
1254   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1263   21 00 00               LD   hl,0   
1266   E5                     PUSH   hl   
1267   E5                     PUSH   hl   
1268   CD 3E 0D               CALL   run   
126B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1273   CD AF 0B               CALL   flushBuffer   
1276   CD 39 0C               CALL   printStr   
1279   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1286   E1                     POP   hl   
1287   E5                     PUSH   hl   
1288   E5                     PUSH   hl   
1289   CD 3E 0D               CALL   run   
128C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
129B   CD AF 0B               CALL   flushBuffer   
129E   76                     HALT      
129F                EXPECTM_2851S46:      
129F   E1                     POP   HL   
12A0                          ;*Macro unroll:  test "'a'", $61
12A0   31 00 51               LD   SP,STACK   
12A3   CD 6D 0C               CALL   coldInit   
12A6   CD 74 4F               CALL   execStr   
12A9   27 61 27 00            DB   "'a'",0   
12AD   CD AF 0B               CALL   flushBuffer   
12B0   E1                     POP   HL   
12B1   E5                     PUSH   HL   
12B2   11 61 00               LD   DE,$61   
12B5   B7                     OR   A   
12B6   ED 52                  SBC   HL,DE   
12B8   7D                     LD   A,L   
12B9   B4                     OR   H   
12BA   CA 18 13               JP   Z,expectM_2852S47   
12BD   CD 39 0C               CALL   printStr   
12C0   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
12CA   CD 39 0C               CALL   printStr   
12CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12DC   21 61 00               LD   hl,$61   
12DF   E5                     PUSH   hl   
12E0   E5                     PUSH   hl   
12E1   CD 3E 0D               CALL   run   
12E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12EC   CD AF 0B               CALL   flushBuffer   
12EF   CD 39 0C               CALL   printStr   
12F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12FF   E1                     POP   hl   
1300   E5                     PUSH   hl   
1301   E5                     PUSH   hl   
1302   CD 3E 0D               CALL   run   
1305   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1314   CD AF 0B               CALL   flushBuffer   
1317   76                     HALT      
1318                EXPECTM_2852S47:      
1318   E1                     POP   HL   
1319                          ;*Macro unroll:  test "'\\''", $27
1319   31 00 51               LD   SP,STACK   
131C   CD 6D 0C               CALL   coldInit   
131F   CD 74 4F               CALL   execStr   
1322   27 5C 27 27 00         DB   "'\\''",0   
1327   CD AF 0B               CALL   flushBuffer   
132A   E1                     POP   HL   
132B   E5                     PUSH   HL   
132C   11 27 00               LD   DE,$27   
132F   B7                     OR   A   
1330   ED 52                  SBC   HL,DE   
1332   7D                     LD   A,L   
1333   B4                     OR   H   
1334   CA 93 13               JP   Z,expectM_2853S48   
1337   CD 39 0C               CALL   printStr   
133A   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1345   CD 39 0C               CALL   printStr   
1348   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1357   21 27 00               LD   hl,$27   
135A   E5                     PUSH   hl   
135B   E5                     PUSH   hl   
135C   CD 3E 0D               CALL   run   
135F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1367   CD AF 0B               CALL   flushBuffer   
136A   CD 39 0C               CALL   printStr   
136D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
137A   E1                     POP   hl   
137B   E5                     PUSH   hl   
137C   E5                     PUSH   hl   
137D   CD 3E 0D               CALL   run   
1380   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
138F   CD AF 0B               CALL   flushBuffer   
1392   76                     HALT      
1393                EXPECTM_2853S48:      
1393   E1                     POP   HL   
1394                          ;*Macro unroll:  test "$10", $10
1394   31 00 51               LD   SP,STACK   
1397   CD 6D 0C               CALL   coldInit   
139A   CD 74 4F               CALL   execStr   
139D   24 31 30 00            DB   "$10",0   
13A1   CD AF 0B               CALL   flushBuffer   
13A4   E1                     POP   HL   
13A5   E5                     PUSH   HL   
13A6   11 10 00               LD   DE,$10   
13A9   B7                     OR   A   
13AA   ED 52                  SBC   HL,DE   
13AC   7D                     LD   A,L   
13AD   B4                     OR   H   
13AE   CA 0C 14               JP   Z,expectM_2854S49   
13B1   CD 39 0C               CALL   printStr   
13B4   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
13BE   CD 39 0C               CALL   printStr   
13C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13D0   21 10 00               LD   hl,$10   
13D3   E5                     PUSH   hl   
13D4   E5                     PUSH   hl   
13D5   CD 3E 0D               CALL   run   
13D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13E0   CD AF 0B               CALL   flushBuffer   
13E3   CD 39 0C               CALL   printStr   
13E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13F3   E1                     POP   hl   
13F4   E5                     PUSH   hl   
13F5   E5                     PUSH   hl   
13F6   CD 3E 0D               CALL   run   
13F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1408   CD AF 0B               CALL   flushBuffer   
140B   76                     HALT      
140C                EXPECTM_2854S49:      
140C   E1                     POP   HL   
140D                          ;*Macro unroll:  test "$FF", $FF
140D   31 00 51               LD   SP,STACK   
1410   CD 6D 0C               CALL   coldInit   
1413   CD 74 4F               CALL   execStr   
1416   24 46 46 00            DB   "$FF",0   
141A   CD AF 0B               CALL   flushBuffer   
141D   E1                     POP   HL   
141E   E5                     PUSH   HL   
141F   11 FF 00               LD   DE,$FF   
1422   B7                     OR   A   
1423   ED 52                  SBC   HL,DE   
1425   7D                     LD   A,L   
1426   B4                     OR   H   
1427   CA 85 14               JP   Z,expectM_2855S50   
142A   CD 39 0C               CALL   printStr   
142D   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1437   CD 39 0C               CALL   printStr   
143A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1449   21 FF 00               LD   hl,$FF   
144C   E5                     PUSH   hl   
144D   E5                     PUSH   hl   
144E   CD 3E 0D               CALL   run   
1451   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1459   CD AF 0B               CALL   flushBuffer   
145C   CD 39 0C               CALL   printStr   
145F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146C   E1                     POP   hl   
146D   E5                     PUSH   hl   
146E   E5                     PUSH   hl   
146F   CD 3E 0D               CALL   run   
1472   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1481   CD AF 0B               CALL   flushBuffer   
1484   76                     HALT      
1485                EXPECTM_2855S50:      
1485   E1                     POP   HL   
1486                          ;*Macro unroll:  test "-1 2 +",1
1486   31 00 51               LD   SP,STACK   
1489   CD 6D 0C               CALL   coldInit   
148C   CD 74 4F               CALL   execStr   
148F   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1496   CD AF 0B               CALL   flushBuffer   
1499   E1                     POP   HL   
149A   E5                     PUSH   HL   
149B   11 01 00               LD   DE,1   
149E   B7                     OR   A   
149F   ED 52                  SBC   HL,DE   
14A1   7D                     LD   A,L   
14A2   B4                     OR   H   
14A3   CA 04 15               JP   Z,expectM_2856S51   
14A6   CD 39 0C               CALL   printStr   
14A9   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
14B6   CD 39 0C               CALL   printStr   
14B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C8   21 01 00               LD   hl,1   
14CB   E5                     PUSH   hl   
14CC   E5                     PUSH   hl   
14CD   CD 3E 0D               CALL   run   
14D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14D8   CD AF 0B               CALL   flushBuffer   
14DB   CD 39 0C               CALL   printStr   
14DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14EB   E1                     POP   hl   
14EC   E5                     PUSH   hl   
14ED   E5                     PUSH   hl   
14EE   CD 3E 0D               CALL   run   
14F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1500   CD AF 0B               CALL   flushBuffer   
1503   76                     HALT      
1504                EXPECTM_2856S51:      
1504   E1                     POP   HL   
1505                          ;*Macro unroll:  test "-1 1 +",0
1505   31 00 51               LD   SP,STACK   
1508   CD 6D 0C               CALL   coldInit   
150B   CD 74 4F               CALL   execStr   
150E   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1515   CD AF 0B               CALL   flushBuffer   
1518   E1                     POP   HL   
1519   E5                     PUSH   HL   
151A   11 00 00               LD   DE,0   
151D   B7                     OR   A   
151E   ED 52                  SBC   HL,DE   
1520   7D                     LD   A,L   
1521   B4                     OR   H   
1522   CA 83 15               JP   Z,expectM_2857S52   
1525   CD 39 0C               CALL   printStr   
1528   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1535   CD 39 0C               CALL   printStr   
1538   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1547   21 00 00               LD   hl,0   
154A   E5                     PUSH   hl   
154B   E5                     PUSH   hl   
154C   CD 3E 0D               CALL   run   
154F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1557   CD AF 0B               CALL   flushBuffer   
155A   CD 39 0C               CALL   printStr   
155D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
156A   E1                     POP   hl   
156B   E5                     PUSH   hl   
156C   E5                     PUSH   hl   
156D   CD 3E 0D               CALL   run   
1570   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
157F   CD AF 0B               CALL   flushBuffer   
1582   76                     HALT      
1583                EXPECTM_2857S52:      
1583   E1                     POP   HL   
1584                          ;*Macro unroll:  test "1 2 +", 3
1584   31 00 51               LD   SP,STACK   
1587   CD 6D 0C               CALL   coldInit   
158A   CD 74 4F               CALL   execStr   
158D   31 20 32 20 2B 00      DB   "1 2 +",0   
1593   CD AF 0B               CALL   flushBuffer   
1596   E1                     POP   HL   
1597   E5                     PUSH   HL   
1598   11 03 00               LD   DE,3   
159B   B7                     OR   A   
159C   ED 52                  SBC   HL,DE   
159E   7D                     LD   A,L   
159F   B4                     OR   H   
15A0   CA 00 16               JP   Z,expectM_2858S53   
15A3   CD 39 0C               CALL   printStr   
15A6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
15B2   CD 39 0C               CALL   printStr   
15B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15C4   21 03 00               LD   hl,3   
15C7   E5                     PUSH   hl   
15C8   E5                     PUSH   hl   
15C9   CD 3E 0D               CALL   run   
15CC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15D4   CD AF 0B               CALL   flushBuffer   
15D7   CD 39 0C               CALL   printStr   
15DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15E7   E1                     POP   hl   
15E8   E5                     PUSH   hl   
15E9   E5                     PUSH   hl   
15EA   CD 3E 0D               CALL   run   
15ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15FC   CD AF 0B               CALL   flushBuffer   
15FF   76                     HALT      
1600                EXPECTM_2858S53:      
1600   E1                     POP   HL   
1601                          ;*Macro unroll:  test "4 1 2 +", 3
1601   31 00 51               LD   SP,STACK   
1604   CD 6D 0C               CALL   coldInit   
1607   CD 74 4F               CALL   execStr   
160A   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1612   CD AF 0B               CALL   flushBuffer   
1615   E1                     POP   HL   
1616   E5                     PUSH   HL   
1617   11 03 00               LD   DE,3   
161A   B7                     OR   A   
161B   ED 52                  SBC   HL,DE   
161D   7D                     LD   A,L   
161E   B4                     OR   H   
161F   CA 81 16               JP   Z,expectM_2859S54   
1622   CD 39 0C               CALL   printStr   
1625   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1633   CD 39 0C               CALL   printStr   
1636   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1645   21 03 00               LD   hl,3   
1648   E5                     PUSH   hl   
1649   E5                     PUSH   hl   
164A   CD 3E 0D               CALL   run   
164D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1655   CD AF 0B               CALL   flushBuffer   
1658   CD 39 0C               CALL   printStr   
165B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1668   E1                     POP   hl   
1669   E5                     PUSH   hl   
166A   E5                     PUSH   hl   
166B   CD 3E 0D               CALL   run   
166E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
167D   CD AF 0B               CALL   flushBuffer   
1680   76                     HALT      
1681                EXPECTM_2859S54:      
1681   E1                     POP   HL   
1682                          ;*Macro unroll:  test "123 456 +", 123+456
1682   31 00 51               LD   SP,STACK   
1685   CD 6D 0C               CALL   coldInit   
1688   CD 74 4F               CALL   execStr   
168B   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1695   CD AF 0B               CALL   flushBuffer   
1698   E1                     POP   HL   
1699   E5                     PUSH   HL   
169A   11 43 02               LD   DE,123+456   
169D   B7                     OR   A   
169E   ED 52                  SBC   HL,DE   
16A0   7D                     LD   A,L   
16A1   B4                     OR   H   
16A2   CA 06 17               JP   Z,expectM_2860S55   
16A5   CD 39 0C               CALL   printStr   
16A8   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
16B8   CD 39 0C               CALL   printStr   
16BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16CA   21 43 02               LD   hl,123+456   
16CD   E5                     PUSH   hl   
16CE   E5                     PUSH   hl   
16CF   CD 3E 0D               CALL   run   
16D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16DA   CD AF 0B               CALL   flushBuffer   
16DD   CD 39 0C               CALL   printStr   
16E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16ED   E1                     POP   hl   
16EE   E5                     PUSH   hl   
16EF   E5                     PUSH   hl   
16F0   CD 3E 0D               CALL   run   
16F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1702   CD AF 0B               CALL   flushBuffer   
1705   76                     HALT      
1706                EXPECTM_2860S55:      
1706   E1                     POP   HL   
1707                          ;*Macro unroll:  test "64 128 +", 64+128
1707   31 00 51               LD   SP,STACK   
170A   CD 6D 0C               CALL   coldInit   
170D   CD 74 4F               CALL   execStr   
1710   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1719   CD AF 0B               CALL   flushBuffer   
171C   E1                     POP   HL   
171D   E5                     PUSH   HL   
171E   11 C0 00               LD   DE,64+128   
1721   B7                     OR   A   
1722   ED 52                  SBC   HL,DE   
1724   7D                     LD   A,L   
1725   B4                     OR   H   
1726   CA 89 17               JP   Z,expectM_2861S56   
1729   CD 39 0C               CALL   printStr   
172C   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
173B   CD 39 0C               CALL   printStr   
173E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
174D   21 C0 00               LD   hl,64+128   
1750   E5                     PUSH   hl   
1751   E5                     PUSH   hl   
1752   CD 3E 0D               CALL   run   
1755   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
175D   CD AF 0B               CALL   flushBuffer   
1760   CD 39 0C               CALL   printStr   
1763   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1770   E1                     POP   hl   
1771   E5                     PUSH   hl   
1772   E5                     PUSH   hl   
1773   CD 3E 0D               CALL   run   
1776   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1785   CD AF 0B               CALL   flushBuffer   
1788   76                     HALT      
1789                EXPECTM_2861S56:      
1789   E1                     POP   HL   
178A                          ;*Macro unroll:  test "1 2 +", 3
178A   31 00 51               LD   SP,STACK   
178D   CD 6D 0C               CALL   coldInit   
1790   CD 74 4F               CALL   execStr   
1793   31 20 32 20 2B 00      DB   "1 2 +",0   
1799   CD AF 0B               CALL   flushBuffer   
179C   E1                     POP   HL   
179D   E5                     PUSH   HL   
179E   11 03 00               LD   DE,3   
17A1   B7                     OR   A   
17A2   ED 52                  SBC   HL,DE   
17A4   7D                     LD   A,L   
17A5   B4                     OR   H   
17A6   CA 06 18               JP   Z,expectM_2862S57   
17A9   CD 39 0C               CALL   printStr   
17AC   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
17B8   CD 39 0C               CALL   printStr   
17BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17CA   21 03 00               LD   hl,3   
17CD   E5                     PUSH   hl   
17CE   E5                     PUSH   hl   
17CF   CD 3E 0D               CALL   run   
17D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17DA   CD AF 0B               CALL   flushBuffer   
17DD   CD 39 0C               CALL   printStr   
17E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17ED   E1                     POP   hl   
17EE   E5                     PUSH   hl   
17EF   E5                     PUSH   hl   
17F0   CD 3E 0D               CALL   run   
17F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1802   CD AF 0B               CALL   flushBuffer   
1805   76                     HALT      
1806                EXPECTM_2862S57:      
1806   E1                     POP   HL   
1807                          ;*Macro unroll:  test "1a= a++ a",2
1807   31 00 51               LD   SP,STACK   
180A   CD 6D 0C               CALL   coldInit   
180D   CD 74 4F               CALL   execStr   
1810   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
181A   CD AF 0B               CALL   flushBuffer   
181D   E1                     POP   HL   
181E   E5                     PUSH   HL   
181F   11 02 00               LD   DE,2   
1822   B7                     OR   A   
1823   ED 52                  SBC   HL,DE   
1825   7D                     LD   A,L   
1826   B4                     OR   H   
1827   CA 8B 18               JP   Z,expectM_2863S58   
182A   CD 39 0C               CALL   printStr   
182D   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
183D   CD 39 0C               CALL   printStr   
1840   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
184F   21 02 00               LD   hl,2   
1852   E5                     PUSH   hl   
1853   E5                     PUSH   hl   
1854   CD 3E 0D               CALL   run   
1857   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
185F   CD AF 0B               CALL   flushBuffer   
1862   CD 39 0C               CALL   printStr   
1865   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1872   E1                     POP   hl   
1873   E5                     PUSH   hl   
1874   E5                     PUSH   hl   
1875   CD 3E 0D               CALL   run   
1878   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1887   CD AF 0B               CALL   flushBuffer   
188A   76                     HALT      
188B                EXPECTM_2863S58:      
188B   E1                     POP   HL   
188C                          ;*Macro unroll:  test "-1 -1 -",0
188C   31 00 51               LD   SP,STACK   
188F   CD 6D 0C               CALL   coldInit   
1892   CD 74 4F               CALL   execStr   
1895   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
189D   CD AF 0B               CALL   flushBuffer   
18A0   E1                     POP   HL   
18A1   E5                     PUSH   HL   
18A2   11 00 00               LD   DE,0   
18A5   B7                     OR   A   
18A6   ED 52                  SBC   HL,DE   
18A8   7D                     LD   A,L   
18A9   B4                     OR   H   
18AA   CA 0C 19               JP   Z,expectM_2864S59   
18AD   CD 39 0C               CALL   printStr   
18B0   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
18BE   CD 39 0C               CALL   printStr   
18C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18D0   21 00 00               LD   hl,0   
18D3   E5                     PUSH   hl   
18D4   E5                     PUSH   hl   
18D5   CD 3E 0D               CALL   run   
18D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18E0   CD AF 0B               CALL   flushBuffer   
18E3   CD 39 0C               CALL   printStr   
18E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18F3   E1                     POP   hl   
18F4   E5                     PUSH   hl   
18F5   E5                     PUSH   hl   
18F6   CD 3E 0D               CALL   run   
18F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1908   CD AF 0B               CALL   flushBuffer   
190B   76                     HALT      
190C                EXPECTM_2864S59:      
190C   E1                     POP   HL   
190D                          ;*Macro unroll:  test "5 3 -", 2
190D   31 00 51               LD   SP,STACK   
1910   CD 6D 0C               CALL   coldInit   
1913   CD 74 4F               CALL   execStr   
1916   35 20 33 20 2D 00      DB   "5 3 -",0   
191C   CD AF 0B               CALL   flushBuffer   
191F   E1                     POP   HL   
1920   E5                     PUSH   HL   
1921   11 02 00               LD   DE,2   
1924   B7                     OR   A   
1925   ED 52                  SBC   HL,DE   
1927   7D                     LD   A,L   
1928   B4                     OR   H   
1929   CA 89 19               JP   Z,expectM_2865S60   
192C   CD 39 0C               CALL   printStr   
192F   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
193B   CD 39 0C               CALL   printStr   
193E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
194D   21 02 00               LD   hl,2   
1950   E5                     PUSH   hl   
1951   E5                     PUSH   hl   
1952   CD 3E 0D               CALL   run   
1955   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
195D   CD AF 0B               CALL   flushBuffer   
1960   CD 39 0C               CALL   printStr   
1963   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1970   E1                     POP   hl   
1971   E5                     PUSH   hl   
1972   E5                     PUSH   hl   
1973   CD 3E 0D               CALL   run   
1976   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1985   CD AF 0B               CALL   flushBuffer   
1988   76                     HALT      
1989                EXPECTM_2865S60:      
1989   E1                     POP   HL   
198A                          ;*Macro unroll:  test "2 1 -",1
198A   31 00 51               LD   SP,STACK   
198D   CD 6D 0C               CALL   coldInit   
1990   CD 74 4F               CALL   execStr   
1993   32 20 31 20 2D 00      DB   "2 1 -",0   
1999   CD AF 0B               CALL   flushBuffer   
199C   E1                     POP   HL   
199D   E5                     PUSH   HL   
199E   11 01 00               LD   DE,1   
19A1   B7                     OR   A   
19A2   ED 52                  SBC   HL,DE   
19A4   7D                     LD   A,L   
19A5   B4                     OR   H   
19A6   CA 06 1A               JP   Z,expectM_2866S61   
19A9   CD 39 0C               CALL   printStr   
19AC   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
19B8   CD 39 0C               CALL   printStr   
19BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CA   21 01 00               LD   hl,1   
19CD   E5                     PUSH   hl   
19CE   E5                     PUSH   hl   
19CF   CD 3E 0D               CALL   run   
19D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19DA   CD AF 0B               CALL   flushBuffer   
19DD   CD 39 0C               CALL   printStr   
19E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19ED   E1                     POP   hl   
19EE   E5                     PUSH   hl   
19EF   E5                     PUSH   hl   
19F0   CD 3E 0D               CALL   run   
19F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A02   CD AF 0B               CALL   flushBuffer   
1A05   76                     HALT      
1A06                EXPECTM_2866S61:      
1A06   E1                     POP   HL   
1A07                          ;*Macro unroll:  test "3a= a-- a",2
1A07   31 00 51               LD   SP,STACK   
1A0A   CD 6D 0C               CALL   coldInit   
1A0D   CD 74 4F               CALL   execStr   
1A10   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1A1A   CD AF 0B               CALL   flushBuffer   
1A1D   E1                     POP   HL   
1A1E   E5                     PUSH   HL   
1A1F   11 02 00               LD   DE,2   
1A22   B7                     OR   A   
1A23   ED 52                  SBC   HL,DE   
1A25   7D                     LD   A,L   
1A26   B4                     OR   H   
1A27   CA 8B 1A               JP   Z,expectM_2867S62   
1A2A   CD 39 0C               CALL   printStr   
1A2D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1A3D   CD 39 0C               CALL   printStr   
1A40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A4F   21 02 00               LD   hl,2   
1A52   E5                     PUSH   hl   
1A53   E5                     PUSH   hl   
1A54   CD 3E 0D               CALL   run   
1A57   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A5F   CD AF 0B               CALL   flushBuffer   
1A62   CD 39 0C               CALL   printStr   
1A65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A72   E1                     POP   hl   
1A73   E5                     PUSH   hl   
1A74   E5                     PUSH   hl   
1A75   CD 3E 0D               CALL   run   
1A78   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A87   CD AF 0B               CALL   flushBuffer   
1A8A   76                     HALT      
1A8B                EXPECTM_2867S62:      
1A8B   E1                     POP   HL   
1A8C                          ;*Macro unroll:  test "3 5 &", 1
1A8C   31 00 51               LD   SP,STACK   
1A8F   CD 6D 0C               CALL   coldInit   
1A92   CD 74 4F               CALL   execStr   
1A95   33 20 35 20 26 00      DB   "3 5 &",0   
1A9B   CD AF 0B               CALL   flushBuffer   
1A9E   E1                     POP   HL   
1A9F   E5                     PUSH   HL   
1AA0   11 01 00               LD   DE,1   
1AA3   B7                     OR   A   
1AA4   ED 52                  SBC   HL,DE   
1AA6   7D                     LD   A,L   
1AA7   B4                     OR   H   
1AA8   CA 08 1B               JP   Z,expectM_2868S63   
1AAB   CD 39 0C               CALL   printStr   
1AAE   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1ABA   CD 39 0C               CALL   printStr   
1ABD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ACC   21 01 00               LD   hl,1   
1ACF   E5                     PUSH   hl   
1AD0   E5                     PUSH   hl   
1AD1   CD 3E 0D               CALL   run   
1AD4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1ADC   CD AF 0B               CALL   flushBuffer   
1ADF   CD 39 0C               CALL   printStr   
1AE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AEF   E1                     POP   hl   
1AF0   E5                     PUSH   hl   
1AF1   E5                     PUSH   hl   
1AF2   CD 3E 0D               CALL   run   
1AF5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B04   CD AF 0B               CALL   flushBuffer   
1B07   76                     HALT      
1B08                EXPECTM_2868S63:      
1B08   E1                     POP   HL   
1B09                          ;*Macro unroll:  test "3 5 |", 7
1B09   31 00 51               LD   SP,STACK   
1B0C   CD 6D 0C               CALL   coldInit   
1B0F   CD 74 4F               CALL   execStr   
1B12   33 20 35 20 7C 00      DB   "3 5 |",0   
1B18   CD AF 0B               CALL   flushBuffer   
1B1B   E1                     POP   HL   
1B1C   E5                     PUSH   HL   
1B1D   11 07 00               LD   DE,7   
1B20   B7                     OR   A   
1B21   ED 52                  SBC   HL,DE   
1B23   7D                     LD   A,L   
1B24   B4                     OR   H   
1B25   CA 85 1B               JP   Z,expectM_2869S64   
1B28   CD 39 0C               CALL   printStr   
1B2B   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1B37   CD 39 0C               CALL   printStr   
1B3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B49   21 07 00               LD   hl,7   
1B4C   E5                     PUSH   hl   
1B4D   E5                     PUSH   hl   
1B4E   CD 3E 0D               CALL   run   
1B51   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B59   CD AF 0B               CALL   flushBuffer   
1B5C   CD 39 0C               CALL   printStr   
1B5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B6C   E1                     POP   hl   
1B6D   E5                     PUSH   hl   
1B6E   E5                     PUSH   hl   
1B6F   CD 3E 0D               CALL   run   
1B72   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B81   CD AF 0B               CALL   flushBuffer   
1B84   76                     HALT      
1B85                EXPECTM_2869S64:      
1B85   E1                     POP   HL   
1B86                          ;*Macro unroll:  test "3 5 /x", 6
1B86   31 00 51               LD   SP,STACK   
1B89   CD 6D 0C               CALL   coldInit   
1B8C   CD 74 4F               CALL   execStr   
1B8F   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1B96   CD AF 0B               CALL   flushBuffer   
1B99   E1                     POP   HL   
1B9A   E5                     PUSH   HL   
1B9B   11 06 00               LD   DE,6   
1B9E   B7                     OR   A   
1B9F   ED 52                  SBC   HL,DE   
1BA1   7D                     LD   A,L   
1BA2   B4                     OR   H   
1BA3   CA 04 1C               JP   Z,expectM_2870S65   
1BA6   CD 39 0C               CALL   printStr   
1BA9   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1BB6   CD 39 0C               CALL   printStr   
1BB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BC8   21 06 00               LD   hl,6   
1BCB   E5                     PUSH   hl   
1BCC   E5                     PUSH   hl   
1BCD   CD 3E 0D               CALL   run   
1BD0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BD8   CD AF 0B               CALL   flushBuffer   
1BDB   CD 39 0C               CALL   printStr   
1BDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BEB   E1                     POP   hl   
1BEC   E5                     PUSH   hl   
1BED   E5                     PUSH   hl   
1BEE   CD 3E 0D               CALL   run   
1BF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C00   CD AF 0B               CALL   flushBuffer   
1C03   76                     HALT      
1C04                EXPECTM_2870S65:      
1C04   E1                     POP   HL   
1C05                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1C05   31 00 51               LD   SP,STACK   
1C08   CD 6D 0C               CALL   coldInit   
1C0B   CD 74 4F               CALL   execStr   
1C0E   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1C1D   CD AF 0B               CALL   flushBuffer   
1C20   E1                     POP   HL   
1C21   E5                     PUSH   HL   
1C22   11 06 00               LD   DE,6   
1C25   B7                     OR   A   
1C26   ED 52                  SBC   HL,DE   
1C28   7D                     LD   A,L   
1C29   B4                     OR   H   
1C2A   CA 93 1C               JP   Z,expectM_2871S66   
1C2D   CD 39 0C               CALL   printStr   
1C30   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1C45   CD 39 0C               CALL   printStr   
1C48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C57   21 06 00               LD   hl,6   
1C5A   E5                     PUSH   hl   
1C5B   E5                     PUSH   hl   
1C5C   CD 3E 0D               CALL   run   
1C5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C67   CD AF 0B               CALL   flushBuffer   
1C6A   CD 39 0C               CALL   printStr   
1C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7A   E1                     POP   hl   
1C7B   E5                     PUSH   hl   
1C7C   E5                     PUSH   hl   
1C7D   CD 3E 0D               CALL   run   
1C80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C8F   CD AF 0B               CALL   flushBuffer   
1C92   76                     HALT      
1C93                EXPECTM_2871S66:      
1C93   E1                     POP   HL   
1C94                          ;*Macro unroll:  test "2 3 *", 6
1C94   31 00 51               LD   SP,STACK   
1C97   CD 6D 0C               CALL   coldInit   
1C9A   CD 74 4F               CALL   execStr   
1C9D   32 20 33 20 2A 00      DB   "2 3 *",0   
1CA3   CD AF 0B               CALL   flushBuffer   
1CA6   E1                     POP   HL   
1CA7   E5                     PUSH   HL   
1CA8   11 06 00               LD   DE,6   
1CAB   B7                     OR   A   
1CAC   ED 52                  SBC   HL,DE   
1CAE   7D                     LD   A,L   
1CAF   B4                     OR   H   
1CB0   CA 10 1D               JP   Z,expectM_2872S67   
1CB3   CD 39 0C               CALL   printStr   
1CB6   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1CC2   CD 39 0C               CALL   printStr   
1CC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD4   21 06 00               LD   hl,6   
1CD7   E5                     PUSH   hl   
1CD8   E5                     PUSH   hl   
1CD9   CD 3E 0D               CALL   run   
1CDC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CE4   CD AF 0B               CALL   flushBuffer   
1CE7   CD 39 0C               CALL   printStr   
1CEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CF7   E1                     POP   hl   
1CF8   E5                     PUSH   hl   
1CF9   E5                     PUSH   hl   
1CFA   CD 3E 0D               CALL   run   
1CFD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D0C   CD AF 0B               CALL   flushBuffer   
1D0F   76                     HALT      
1D10                EXPECTM_2872S67:      
1D10   E1                     POP   HL   
1D11                          ;*Macro unroll:  test "1 2 3 + *", 5
1D11   31 00 51               LD   SP,STACK   
1D14   CD 6D 0C               CALL   coldInit   
1D17   CD 74 4F               CALL   execStr   
1D1A   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1D24   CD AF 0B               CALL   flushBuffer   
1D27   E1                     POP   HL   
1D28   E5                     PUSH   HL   
1D29   11 05 00               LD   DE,5   
1D2C   B7                     OR   A   
1D2D   ED 52                  SBC   HL,DE   
1D2F   7D                     LD   A,L   
1D30   B4                     OR   H   
1D31   CA 95 1D               JP   Z,expectM_2873S68   
1D34   CD 39 0C               CALL   printStr   
1D37   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1D47   CD 39 0C               CALL   printStr   
1D4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D59   21 05 00               LD   hl,5   
1D5C   E5                     PUSH   hl   
1D5D   E5                     PUSH   hl   
1D5E   CD 3E 0D               CALL   run   
1D61   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D69   CD AF 0B               CALL   flushBuffer   
1D6C   CD 39 0C               CALL   printStr   
1D6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7C   E1                     POP   hl   
1D7D   E5                     PUSH   hl   
1D7E   E5                     PUSH   hl   
1D7F   CD 3E 0D               CALL   run   
1D82   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D91   CD AF 0B               CALL   flushBuffer   
1D94   76                     HALT      
1D95                EXPECTM_2873S68:      
1D95   E1                     POP   HL   
1D96                          ;*Macro unroll:  test "7 3 /", 2
1D96   31 00 51               LD   SP,STACK   
1D99   CD 6D 0C               CALL   coldInit   
1D9C   CD 74 4F               CALL   execStr   
1D9F   37 20 33 20 2F 00      DB   "7 3 /",0   
1DA5   CD AF 0B               CALL   flushBuffer   
1DA8   E1                     POP   HL   
1DA9   E5                     PUSH   HL   
1DAA   11 02 00               LD   DE,2   
1DAD   B7                     OR   A   
1DAE   ED 52                  SBC   HL,DE   
1DB0   7D                     LD   A,L   
1DB1   B4                     OR   H   
1DB2   CA 12 1E               JP   Z,expectM_2874S69   
1DB5   CD 39 0C               CALL   printStr   
1DB8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1DC4   CD 39 0C               CALL   printStr   
1DC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD6   21 02 00               LD   hl,2   
1DD9   E5                     PUSH   hl   
1DDA   E5                     PUSH   hl   
1DDB   CD 3E 0D               CALL   run   
1DDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DE6   CD AF 0B               CALL   flushBuffer   
1DE9   CD 39 0C               CALL   printStr   
1DEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DF9   E1                     POP   hl   
1DFA   E5                     PUSH   hl   
1DFB   E5                     PUSH   hl   
1DFC   CD 3E 0D               CALL   run   
1DFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E0E   CD AF 0B               CALL   flushBuffer   
1E11   76                     HALT      
1E12                EXPECTM_2874S69:      
1E12   E1                     POP   HL   
1E13                          ;*Macro unroll:  test "100a= 1a+= a", 101
1E13   31 00 51               LD   SP,STACK   
1E16   CD 6D 0C               CALL   coldInit   
1E19   CD 74 4F               CALL   execStr   
1E1C   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
1E29   CD AF 0B               CALL   flushBuffer   
1E2C   E1                     POP   HL   
1E2D   E5                     PUSH   HL   
1E2E   11 65 00               LD   DE,101   
1E31   B7                     OR   A   
1E32   ED 52                  SBC   HL,DE   
1E34   7D                     LD   A,L   
1E35   B4                     OR   H   
1E36   CA 9D 1E               JP   Z,expectM_2875S70   
1E39   CD 39 0C               CALL   printStr   
1E3C   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
1E4F   CD 39 0C               CALL   printStr   
1E52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E61   21 65 00               LD   hl,101   
1E64   E5                     PUSH   hl   
1E65   E5                     PUSH   hl   
1E66   CD 3E 0D               CALL   run   
1E69   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E71   CD AF 0B               CALL   flushBuffer   
1E74   CD 39 0C               CALL   printStr   
1E77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E84   E1                     POP   hl   
1E85   E5                     PUSH   hl   
1E86   E5                     PUSH   hl   
1E87   CD 3E 0D               CALL   run   
1E8A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E99   CD AF 0B               CALL   flushBuffer   
1E9C   76                     HALT      
1E9D                EXPECTM_2875S70:      
1E9D   E1                     POP   HL   
1E9E                          ;*Macro unroll:  test "100a= a1-= a", 99
1E9E   31 00 51               LD   SP,STACK   
1EA1   CD 6D 0C               CALL   coldInit   
1EA4   CD 74 4F               CALL   execStr   
1EA7   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
1EB4   CD AF 0B               CALL   flushBuffer   
1EB7   E1                     POP   HL   
1EB8   E5                     PUSH   HL   
1EB9   11 63 00               LD   DE,99   
1EBC   B7                     OR   A   
1EBD   ED 52                  SBC   HL,DE   
1EBF   7D                     LD   A,L   
1EC0   B4                     OR   H   
1EC1   CA 28 1F               JP   Z,expectM_2876S71   
1EC4   CD 39 0C               CALL   printStr   
1EC7   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
1EDA   CD 39 0C               CALL   printStr   
1EDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EEC   21 63 00               LD   hl,99   
1EEF   E5                     PUSH   hl   
1EF0   E5                     PUSH   hl   
1EF1   CD 3E 0D               CALL   run   
1EF4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EFC   CD AF 0B               CALL   flushBuffer   
1EFF   CD 39 0C               CALL   printStr   
1F02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F0F   E1                     POP   hl   
1F10   E5                     PUSH   hl   
1F11   E5                     PUSH   hl   
1F12   CD 3E 0D               CALL   run   
1F15   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F24   CD AF 0B               CALL   flushBuffer   
1F27   76                     HALT      
1F28                EXPECTM_2876S71:      
1F28   E1                     POP   HL   
1F29                          ;*Macro unroll:  test "100a= a2*= a", 200
1F29   31 00 51               LD   SP,STACK   
1F2C   CD 6D 0C               CALL   coldInit   
1F2F   CD 74 4F               CALL   execStr   
1F32   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
1F3F   CD AF 0B               CALL   flushBuffer   
1F42   E1                     POP   HL   
1F43   E5                     PUSH   HL   
1F44   11 C8 00               LD   DE,200   
1F47   B7                     OR   A   
1F48   ED 52                  SBC   HL,DE   
1F4A   7D                     LD   A,L   
1F4B   B4                     OR   H   
1F4C   CA B3 1F               JP   Z,expectM_2877S72   
1F4F   CD 39 0C               CALL   printStr   
1F52   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
1F65   CD 39 0C               CALL   printStr   
1F68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F77   21 C8 00               LD   hl,200   
1F7A   E5                     PUSH   hl   
1F7B   E5                     PUSH   hl   
1F7C   CD 3E 0D               CALL   run   
1F7F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F87   CD AF 0B               CALL   flushBuffer   
1F8A   CD 39 0C               CALL   printStr   
1F8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F9A   E1                     POP   hl   
1F9B   E5                     PUSH   hl   
1F9C   E5                     PUSH   hl   
1F9D   CD 3E 0D               CALL   run   
1FA0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FAF   CD AF 0B               CALL   flushBuffer   
1FB2   76                     HALT      
1FB3                EXPECTM_2877S72:      
1FB3   E1                     POP   HL   
1FB4                          ;*Macro unroll:  test "100a= a2/= a", 50
1FB4   31 00 51               LD   SP,STACK   
1FB7   CD 6D 0C               CALL   coldInit   
1FBA   CD 74 4F               CALL   execStr   
1FBD   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
1FCA   CD AF 0B               CALL   flushBuffer   
1FCD   E1                     POP   HL   
1FCE   E5                     PUSH   HL   
1FCF   11 32 00               LD   DE,50   
1FD2   B7                     OR   A   
1FD3   ED 52                  SBC   HL,DE   
1FD5   7D                     LD   A,L   
1FD6   B4                     OR   H   
1FD7   CA 3E 20               JP   Z,expectM_2878S73   
1FDA   CD 39 0C               CALL   printStr   
1FDD   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
1FF0   CD 39 0C               CALL   printStr   
1FF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2002   21 32 00               LD   hl,50   
2005   E5                     PUSH   hl   
2006   E5                     PUSH   hl   
2007   CD 3E 0D               CALL   run   
200A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2012   CD AF 0B               CALL   flushBuffer   
2015   CD 39 0C               CALL   printStr   
2018   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2025   E1                     POP   hl   
2026   E5                     PUSH   hl   
2027   E5                     PUSH   hl   
2028   CD 3E 0D               CALL   run   
202B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
203A   CD AF 0B               CALL   flushBuffer   
203D   76                     HALT      
203E                EXPECTM_2878S73:      
203E   E1                     POP   HL   
203F                          ;*Macro unroll:  test "7 3 / /re", 1
203F   31 00 51               LD   SP,STACK   
2042   CD 6D 0C               CALL   coldInit   
2045   CD 74 4F               CALL   execStr   
2048   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2052   CD AF 0B               CALL   flushBuffer   
2055   E1                     POP   HL   
2056   E5                     PUSH   HL   
2057   11 01 00               LD   DE,1   
205A   B7                     OR   A   
205B   ED 52                  SBC   HL,DE   
205D   7D                     LD   A,L   
205E   B4                     OR   H   
205F   CA C3 20               JP   Z,expectM_2879S74   
2062   CD 39 0C               CALL   printStr   
2065   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2075   CD 39 0C               CALL   printStr   
2078   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2087   21 01 00               LD   hl,1   
208A   E5                     PUSH   hl   
208B   E5                     PUSH   hl   
208C   CD 3E 0D               CALL   run   
208F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2097   CD AF 0B               CALL   flushBuffer   
209A   CD 39 0C               CALL   printStr   
209D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20AA   E1                     POP   hl   
20AB   E5                     PUSH   hl   
20AC   E5                     PUSH   hl   
20AD   CD 3E 0D               CALL   run   
20B0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20BF   CD AF 0B               CALL   flushBuffer   
20C2   76                     HALT      
20C3                EXPECTM_2879S74:      
20C3   E1                     POP   HL   
20C4                          ;*Macro unroll:  test "7 3 /", 2
20C4   31 00 51               LD   SP,STACK   
20C7   CD 6D 0C               CALL   coldInit   
20CA   CD 74 4F               CALL   execStr   
20CD   37 20 33 20 2F 00      DB   "7 3 /",0   
20D3   CD AF 0B               CALL   flushBuffer   
20D6   E1                     POP   HL   
20D7   E5                     PUSH   HL   
20D8   11 02 00               LD   DE,2   
20DB   B7                     OR   A   
20DC   ED 52                  SBC   HL,DE   
20DE   7D                     LD   A,L   
20DF   B4                     OR   H   
20E0   CA 40 21               JP   Z,expectM_2880S75   
20E3   CD 39 0C               CALL   printStr   
20E6   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
20F2   CD 39 0C               CALL   printStr   
20F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2104   21 02 00               LD   hl,2   
2107   E5                     PUSH   hl   
2108   E5                     PUSH   hl   
2109   CD 3E 0D               CALL   run   
210C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2114   CD AF 0B               CALL   flushBuffer   
2117   CD 39 0C               CALL   printStr   
211A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2127   E1                     POP   hl   
2128   E5                     PUSH   hl   
2129   E5                     PUSH   hl   
212A   CD 3E 0D               CALL   run   
212D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
213C   CD AF 0B               CALL   flushBuffer   
213F   76                     HALT      
2140                EXPECTM_2880S75:      
2140   E1                     POP   HL   
2141                          ;*Macro unroll:  test "2 3 ==", FALSE
2141   31 00 51               LD   SP,STACK   
2144   CD 6D 0C               CALL   coldInit   
2147   CD 74 4F               CALL   execStr   
214A   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2151   CD AF 0B               CALL   flushBuffer   
2154   E1                     POP   HL   
2155   E5                     PUSH   HL   
2156   11 00 00               LD   DE,FALSE   
2159   B7                     OR   A   
215A   ED 52                  SBC   HL,DE   
215C   7D                     LD   A,L   
215D   B4                     OR   H   
215E   CA BF 21               JP   Z,expectM_2881S76   
2161   CD 39 0C               CALL   printStr   
2164   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2171   CD 39 0C               CALL   printStr   
2174   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2183   21 00 00               LD   hl,FALSE   
2186   E5                     PUSH   hl   
2187   E5                     PUSH   hl   
2188   CD 3E 0D               CALL   run   
218B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2193   CD AF 0B               CALL   flushBuffer   
2196   CD 39 0C               CALL   printStr   
2199   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21A6   E1                     POP   hl   
21A7   E5                     PUSH   hl   
21A8   E5                     PUSH   hl   
21A9   CD 3E 0D               CALL   run   
21AC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21BB   CD AF 0B               CALL   flushBuffer   
21BE   76                     HALT      
21BF                EXPECTM_2881S76:      
21BF   E1                     POP   HL   
21C0                          ;*Macro unroll:  test "3 3 ==", TRUE
21C0   31 00 51               LD   SP,STACK   
21C3   CD 6D 0C               CALL   coldInit   
21C6   CD 74 4F               CALL   execStr   
21C9   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
21D0   CD AF 0B               CALL   flushBuffer   
21D3   E1                     POP   HL   
21D4   E5                     PUSH   HL   
21D5   11 FF FF               LD   DE,TRUE   
21D8   B7                     OR   A   
21D9   ED 52                  SBC   HL,DE   
21DB   7D                     LD   A,L   
21DC   B4                     OR   H   
21DD   CA 3E 22               JP   Z,expectM_2882S77   
21E0   CD 39 0C               CALL   printStr   
21E3   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
21F0   CD 39 0C               CALL   printStr   
21F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2202   21 FF FF               LD   hl,TRUE   
2205   E5                     PUSH   hl   
2206   E5                     PUSH   hl   
2207   CD 3E 0D               CALL   run   
220A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2212   CD AF 0B               CALL   flushBuffer   
2215   CD 39 0C               CALL   printStr   
2218   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2225   E1                     POP   hl   
2226   E5                     PUSH   hl   
2227   E5                     PUSH   hl   
2228   CD 3E 0D               CALL   run   
222B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
223A   CD AF 0B               CALL   flushBuffer   
223D   76                     HALT      
223E                EXPECTM_2882S77:      
223E   E1                     POP   HL   
223F                          ;*Macro unroll:  test "1 2 <", TRUE
223F   31 00 51               LD   SP,STACK   
2242   CD 6D 0C               CALL   coldInit   
2245   CD 74 4F               CALL   execStr   
2248   31 20 32 20 3C 00      DB   "1 2 <",0   
224E   CD AF 0B               CALL   flushBuffer   
2251   E1                     POP   HL   
2252   E5                     PUSH   HL   
2253   11 FF FF               LD   DE,TRUE   
2256   B7                     OR   A   
2257   ED 52                  SBC   HL,DE   
2259   7D                     LD   A,L   
225A   B4                     OR   H   
225B   CA BB 22               JP   Z,expectM_2883S78   
225E   CD 39 0C               CALL   printStr   
2261   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
226D   CD 39 0C               CALL   printStr   
2270   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
227F   21 FF FF               LD   hl,TRUE   
2282   E5                     PUSH   hl   
2283   E5                     PUSH   hl   
2284   CD 3E 0D               CALL   run   
2287   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
228F   CD AF 0B               CALL   flushBuffer   
2292   CD 39 0C               CALL   printStr   
2295   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22A2   E1                     POP   hl   
22A3   E5                     PUSH   hl   
22A4   E5                     PUSH   hl   
22A5   CD 3E 0D               CALL   run   
22A8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22B7   CD AF 0B               CALL   flushBuffer   
22BA   76                     HALT      
22BB                EXPECTM_2883S78:      
22BB   E1                     POP   HL   
22BC                          ;*Macro unroll:  test "2 1 <", FALSE
22BC   31 00 51               LD   SP,STACK   
22BF   CD 6D 0C               CALL   coldInit   
22C2   CD 74 4F               CALL   execStr   
22C5   32 20 31 20 3C 00      DB   "2 1 <",0   
22CB   CD AF 0B               CALL   flushBuffer   
22CE   E1                     POP   HL   
22CF   E5                     PUSH   HL   
22D0   11 00 00               LD   DE,FALSE   
22D3   B7                     OR   A   
22D4   ED 52                  SBC   HL,DE   
22D6   7D                     LD   A,L   
22D7   B4                     OR   H   
22D8   CA 38 23               JP   Z,expectM_2884S79   
22DB   CD 39 0C               CALL   printStr   
22DE   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
22EA   CD 39 0C               CALL   printStr   
22ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22FC   21 00 00               LD   hl,FALSE   
22FF   E5                     PUSH   hl   
2300   E5                     PUSH   hl   
2301   CD 3E 0D               CALL   run   
2304   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
230C   CD AF 0B               CALL   flushBuffer   
230F   CD 39 0C               CALL   printStr   
2312   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
231F   E1                     POP   hl   
2320   E5                     PUSH   hl   
2321   E5                     PUSH   hl   
2322   CD 3E 0D               CALL   run   
2325   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2334   CD AF 0B               CALL   flushBuffer   
2337   76                     HALT      
2338                EXPECTM_2884S79:      
2338   E1                     POP   HL   
2339                          ;*Macro unroll:  test "2 3 <", TRUE
2339   31 00 51               LD   SP,STACK   
233C   CD 6D 0C               CALL   coldInit   
233F   CD 74 4F               CALL   execStr   
2342   32 20 33 20 3C 00      DB   "2 3 <",0   
2348   CD AF 0B               CALL   flushBuffer   
234B   E1                     POP   HL   
234C   E5                     PUSH   HL   
234D   11 FF FF               LD   DE,TRUE   
2350   B7                     OR   A   
2351   ED 52                  SBC   HL,DE   
2353   7D                     LD   A,L   
2354   B4                     OR   H   
2355   CA B5 23               JP   Z,expectM_2885S80   
2358   CD 39 0C               CALL   printStr   
235B   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2367   CD 39 0C               CALL   printStr   
236A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2379   21 FF FF               LD   hl,TRUE   
237C   E5                     PUSH   hl   
237D   E5                     PUSH   hl   
237E   CD 3E 0D               CALL   run   
2381   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2389   CD AF 0B               CALL   flushBuffer   
238C   CD 39 0C               CALL   printStr   
238F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
239C   E1                     POP   hl   
239D   E5                     PUSH   hl   
239E   E5                     PUSH   hl   
239F   CD 3E 0D               CALL   run   
23A2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23B1   CD AF 0B               CALL   flushBuffer   
23B4   76                     HALT      
23B5                EXPECTM_2885S80:      
23B5   E1                     POP   HL   
23B6                          ;*Macro unroll:  test "3 3 <", FALSE
23B6   31 00 51               LD   SP,STACK   
23B9   CD 6D 0C               CALL   coldInit   
23BC   CD 74 4F               CALL   execStr   
23BF   33 20 33 20 3C 00      DB   "3 3 <",0   
23C5   CD AF 0B               CALL   flushBuffer   
23C8   E1                     POP   HL   
23C9   E5                     PUSH   HL   
23CA   11 00 00               LD   DE,FALSE   
23CD   B7                     OR   A   
23CE   ED 52                  SBC   HL,DE   
23D0   7D                     LD   A,L   
23D1   B4                     OR   H   
23D2   CA 32 24               JP   Z,expectM_2886S81   
23D5   CD 39 0C               CALL   printStr   
23D8   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
23E4   CD 39 0C               CALL   printStr   
23E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23F6   21 00 00               LD   hl,FALSE   
23F9   E5                     PUSH   hl   
23FA   E5                     PUSH   hl   
23FB   CD 3E 0D               CALL   run   
23FE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2406   CD AF 0B               CALL   flushBuffer   
2409   CD 39 0C               CALL   printStr   
240C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2419   E1                     POP   hl   
241A   E5                     PUSH   hl   
241B   E5                     PUSH   hl   
241C   CD 3E 0D               CALL   run   
241F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
242E   CD AF 0B               CALL   flushBuffer   
2431   76                     HALT      
2432                EXPECTM_2886S81:      
2432   E1                     POP   HL   
2433                          ;*Macro unroll:  test "1 2 >", FALSE
2433   31 00 51               LD   SP,STACK   
2436   CD 6D 0C               CALL   coldInit   
2439   CD 74 4F               CALL   execStr   
243C   31 20 32 20 3E 00      DB   "1 2 >",0   
2442   CD AF 0B               CALL   flushBuffer   
2445   E1                     POP   HL   
2446   E5                     PUSH   HL   
2447   11 00 00               LD   DE,FALSE   
244A   B7                     OR   A   
244B   ED 52                  SBC   HL,DE   
244D   7D                     LD   A,L   
244E   B4                     OR   H   
244F   CA AF 24               JP   Z,expectM_2887S82   
2452   CD 39 0C               CALL   printStr   
2455   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2461   CD 39 0C               CALL   printStr   
2464   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2473   21 00 00               LD   hl,FALSE   
2476   E5                     PUSH   hl   
2477   E5                     PUSH   hl   
2478   CD 3E 0D               CALL   run   
247B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2483   CD AF 0B               CALL   flushBuffer   
2486   CD 39 0C               CALL   printStr   
2489   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2496   E1                     POP   hl   
2497   E5                     PUSH   hl   
2498   E5                     PUSH   hl   
2499   CD 3E 0D               CALL   run   
249C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24AB   CD AF 0B               CALL   flushBuffer   
24AE   76                     HALT      
24AF                EXPECTM_2887S82:      
24AF   E1                     POP   HL   
24B0                          ;*Macro unroll:  test "2 1 >", TRUE
24B0   31 00 51               LD   SP,STACK   
24B3   CD 6D 0C               CALL   coldInit   
24B6   CD 74 4F               CALL   execStr   
24B9   32 20 31 20 3E 00      DB   "2 1 >",0   
24BF   CD AF 0B               CALL   flushBuffer   
24C2   E1                     POP   HL   
24C3   E5                     PUSH   HL   
24C4   11 FF FF               LD   DE,TRUE   
24C7   B7                     OR   A   
24C8   ED 52                  SBC   HL,DE   
24CA   7D                     LD   A,L   
24CB   B4                     OR   H   
24CC   CA 2C 25               JP   Z,expectM_2888S83   
24CF   CD 39 0C               CALL   printStr   
24D2   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
24DE   CD 39 0C               CALL   printStr   
24E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24F0   21 FF FF               LD   hl,TRUE   
24F3   E5                     PUSH   hl   
24F4   E5                     PUSH   hl   
24F5   CD 3E 0D               CALL   run   
24F8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2500   CD AF 0B               CALL   flushBuffer   
2503   CD 39 0C               CALL   printStr   
2506   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2513   E1                     POP   hl   
2514   E5                     PUSH   hl   
2515   E5                     PUSH   hl   
2516   CD 3E 0D               CALL   run   
2519   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2528   CD AF 0B               CALL   flushBuffer   
252B   76                     HALT      
252C                EXPECTM_2888S83:      
252C   E1                     POP   HL   
252D                          ;*Macro unroll:  test "3 3 >", FALSE
252D   31 00 51               LD   SP,STACK   
2530   CD 6D 0C               CALL   coldInit   
2533   CD 74 4F               CALL   execStr   
2536   33 20 33 20 3E 00      DB   "3 3 >",0   
253C   CD AF 0B               CALL   flushBuffer   
253F   E1                     POP   HL   
2540   E5                     PUSH   HL   
2541   11 00 00               LD   DE,FALSE   
2544   B7                     OR   A   
2545   ED 52                  SBC   HL,DE   
2547   7D                     LD   A,L   
2548   B4                     OR   H   
2549   CA A9 25               JP   Z,expectM_2889S84   
254C   CD 39 0C               CALL   printStr   
254F   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
255B   CD 39 0C               CALL   printStr   
255E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
256D   21 00 00               LD   hl,FALSE   
2570   E5                     PUSH   hl   
2571   E5                     PUSH   hl   
2572   CD 3E 0D               CALL   run   
2575   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
257D   CD AF 0B               CALL   flushBuffer   
2580   CD 39 0C               CALL   printStr   
2583   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2590   E1                     POP   hl   
2591   E5                     PUSH   hl   
2592   E5                     PUSH   hl   
2593   CD 3E 0D               CALL   run   
2596   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25A5   CD AF 0B               CALL   flushBuffer   
25A8   76                     HALT      
25A9                EXPECTM_2889S84:      
25A9   E1                     POP   HL   
25AA                          ;*Macro unroll:  test "4 3 >", TRUE
25AA   31 00 51               LD   SP,STACK   
25AD   CD 6D 0C               CALL   coldInit   
25B0   CD 74 4F               CALL   execStr   
25B3   34 20 33 20 3E 00      DB   "4 3 >",0   
25B9   CD AF 0B               CALL   flushBuffer   
25BC   E1                     POP   HL   
25BD   E5                     PUSH   HL   
25BE   11 FF FF               LD   DE,TRUE   
25C1   B7                     OR   A   
25C2   ED 52                  SBC   HL,DE   
25C4   7D                     LD   A,L   
25C5   B4                     OR   H   
25C6   CA 26 26               JP   Z,expectM_2890S85   
25C9   CD 39 0C               CALL   printStr   
25CC   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
25D8   CD 39 0C               CALL   printStr   
25DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25EA   21 FF FF               LD   hl,TRUE   
25ED   E5                     PUSH   hl   
25EE   E5                     PUSH   hl   
25EF   CD 3E 0D               CALL   run   
25F2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25FA   CD AF 0B               CALL   flushBuffer   
25FD   CD 39 0C               CALL   printStr   
2600   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
260D   E1                     POP   hl   
260E   E5                     PUSH   hl   
260F   E5                     PUSH   hl   
2610   CD 3E 0D               CALL   run   
2613   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2622   CD AF 0B               CALL   flushBuffer   
2625   76                     HALT      
2626                EXPECTM_2890S85:      
2626   E1                     POP   HL   
2627                          ;*Macro unroll:  test "2 2 <=", TRUE
2627   31 00 51               LD   SP,STACK   
262A   CD 6D 0C               CALL   coldInit   
262D   CD 74 4F               CALL   execStr   
2630   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2637   CD AF 0B               CALL   flushBuffer   
263A   E1                     POP   HL   
263B   E5                     PUSH   HL   
263C   11 FF FF               LD   DE,TRUE   
263F   B7                     OR   A   
2640   ED 52                  SBC   HL,DE   
2642   7D                     LD   A,L   
2643   B4                     OR   H   
2644   CA A5 26               JP   Z,expectM_2891S86   
2647   CD 39 0C               CALL   printStr   
264A   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2657   CD 39 0C               CALL   printStr   
265A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2669   21 FF FF               LD   hl,TRUE   
266C   E5                     PUSH   hl   
266D   E5                     PUSH   hl   
266E   CD 3E 0D               CALL   run   
2671   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2679   CD AF 0B               CALL   flushBuffer   
267C   CD 39 0C               CALL   printStr   
267F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
268C   E1                     POP   hl   
268D   E5                     PUSH   hl   
268E   E5                     PUSH   hl   
268F   CD 3E 0D               CALL   run   
2692   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26A1   CD AF 0B               CALL   flushBuffer   
26A4   76                     HALT      
26A5                EXPECTM_2891S86:      
26A5   E1                     POP   HL   
26A6                          ;*Macro unroll:  test "2 2 >=", TRUE
26A6   31 00 51               LD   SP,STACK   
26A9   CD 6D 0C               CALL   coldInit   
26AC   CD 74 4F               CALL   execStr   
26AF   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
26B6   CD AF 0B               CALL   flushBuffer   
26B9   E1                     POP   HL   
26BA   E5                     PUSH   HL   
26BB   11 FF FF               LD   DE,TRUE   
26BE   B7                     OR   A   
26BF   ED 52                  SBC   HL,DE   
26C1   7D                     LD   A,L   
26C2   B4                     OR   H   
26C3   CA 24 27               JP   Z,expectM_2892S87   
26C6   CD 39 0C               CALL   printStr   
26C9   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
26D6   CD 39 0C               CALL   printStr   
26D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26E8   21 FF FF               LD   hl,TRUE   
26EB   E5                     PUSH   hl   
26EC   E5                     PUSH   hl   
26ED   CD 3E 0D               CALL   run   
26F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26F8   CD AF 0B               CALL   flushBuffer   
26FB   CD 39 0C               CALL   printStr   
26FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
270B   E1                     POP   hl   
270C   E5                     PUSH   hl   
270D   E5                     PUSH   hl   
270E   CD 3E 0D               CALL   run   
2711   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2720   CD AF 0B               CALL   flushBuffer   
2723   76                     HALT      
2724                EXPECTM_2892S87:      
2724   E1                     POP   HL   
2725                          ;*Macro unroll:  test "3 1 <<", 6
2725   31 00 51               LD   SP,STACK   
2728   CD 6D 0C               CALL   coldInit   
272B   CD 74 4F               CALL   execStr   
272E   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2735   CD AF 0B               CALL   flushBuffer   
2738   E1                     POP   HL   
2739   E5                     PUSH   HL   
273A   11 06 00               LD   DE,6   
273D   B7                     OR   A   
273E   ED 52                  SBC   HL,DE   
2740   7D                     LD   A,L   
2741   B4                     OR   H   
2742   CA A3 27               JP   Z,expectM_2893S88   
2745   CD 39 0C               CALL   printStr   
2748   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2755   CD 39 0C               CALL   printStr   
2758   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2767   21 06 00               LD   hl,6   
276A   E5                     PUSH   hl   
276B   E5                     PUSH   hl   
276C   CD 3E 0D               CALL   run   
276F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2777   CD AF 0B               CALL   flushBuffer   
277A   CD 39 0C               CALL   printStr   
277D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
278A   E1                     POP   hl   
278B   E5                     PUSH   hl   
278C   E5                     PUSH   hl   
278D   CD 3E 0D               CALL   run   
2790   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
279F   CD AF 0B               CALL   flushBuffer   
27A2   76                     HALT      
27A3                EXPECTM_2893S88:      
27A3   E1                     POP   HL   
27A4                          ;*Macro unroll:  test "10 1 >>", 5
27A4   31 00 51               LD   SP,STACK   
27A7   CD 6D 0C               CALL   coldInit   
27AA   CD 74 4F               CALL   execStr   
27AD   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
27B5   CD AF 0B               CALL   flushBuffer   
27B8   E1                     POP   HL   
27B9   E5                     PUSH   HL   
27BA   11 05 00               LD   DE,5   
27BD   B7                     OR   A   
27BE   ED 52                  SBC   HL,DE   
27C0   7D                     LD   A,L   
27C1   B4                     OR   H   
27C2   CA 24 28               JP   Z,expectM_2894S89   
27C5   CD 39 0C               CALL   printStr   
27C8   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
27D6   CD 39 0C               CALL   printStr   
27D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27E8   21 05 00               LD   hl,5   
27EB   E5                     PUSH   hl   
27EC   E5                     PUSH   hl   
27ED   CD 3E 0D               CALL   run   
27F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27F8   CD AF 0B               CALL   flushBuffer   
27FB   CD 39 0C               CALL   printStr   
27FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
280B   E1                     POP   hl   
280C   E5                     PUSH   hl   
280D   E5                     PUSH   hl   
280E   CD 3E 0D               CALL   run   
2811   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2820   CD AF 0B               CALL   flushBuffer   
2823   76                     HALT      
2824                EXPECTM_2894S89:      
2824   E1                     POP   HL   
2825                          ;*Macro unroll:  test "1 x = x", 1
2825   31 00 51               LD   SP,STACK   
2828   CD 6D 0C               CALL   coldInit   
282B   CD 74 4F               CALL   execStr   
282E   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2836   CD AF 0B               CALL   flushBuffer   
2839   E1                     POP   HL   
283A   E5                     PUSH   HL   
283B   11 01 00               LD   DE,1   
283E   B7                     OR   A   
283F   ED 52                  SBC   HL,DE   
2841   7D                     LD   A,L   
2842   B4                     OR   H   
2843   CA A5 28               JP   Z,expectM_2895S90   
2846   CD 39 0C               CALL   printStr   
2849   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2857   CD 39 0C               CALL   printStr   
285A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2869   21 01 00               LD   hl,1   
286C   E5                     PUSH   hl   
286D   E5                     PUSH   hl   
286E   CD 3E 0D               CALL   run   
2871   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2879   CD AF 0B               CALL   flushBuffer   
287C   CD 39 0C               CALL   printStr   
287F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
288C   E1                     POP   hl   
288D   E5                     PUSH   hl   
288E   E5                     PUSH   hl   
288F   CD 3E 0D               CALL   run   
2892   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28A1   CD AF 0B               CALL   flushBuffer   
28A4   76                     HALT      
28A5                EXPECTM_2895S90:      
28A5   E1                     POP   HL   
28A6                          ;*Macro unroll:  test "1{}^", 1
28A6   31 00 51               LD   SP,STACK   
28A9   CD 6D 0C               CALL   coldInit   
28AC   CD 74 4F               CALL   execStr   
28AF   31 7B 7D 5E 00         DB   "1{}^",0   
28B4   CD AF 0B               CALL   flushBuffer   
28B7   E1                     POP   HL   
28B8   E5                     PUSH   HL   
28B9   11 01 00               LD   DE,1   
28BC   B7                     OR   A   
28BD   ED 52                  SBC   HL,DE   
28BF   7D                     LD   A,L   
28C0   B4                     OR   H   
28C1   CA 20 29               JP   Z,expectM_2896S91   
28C4   CD 39 0C               CALL   printStr   
28C7   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
28D2   CD 39 0C               CALL   printStr   
28D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28E4   21 01 00               LD   hl,1   
28E7   E5                     PUSH   hl   
28E8   E5                     PUSH   hl   
28E9   CD 3E 0D               CALL   run   
28EC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28F4   CD AF 0B               CALL   flushBuffer   
28F7   CD 39 0C               CALL   printStr   
28FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2907   E1                     POP   hl   
2908   E5                     PUSH   hl   
2909   E5                     PUSH   hl   
290A   CD 3E 0D               CALL   run   
290D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
291C   CD AF 0B               CALL   flushBuffer   
291F   76                     HALT      
2920                EXPECTM_2896S91:      
2920   E1                     POP   HL   
2921                          ;*Macro unroll:  test "{1}^", 1
2921   31 00 51               LD   SP,STACK   
2924   CD 6D 0C               CALL   coldInit   
2927   CD 74 4F               CALL   execStr   
292A   7B 31 7D 5E 00         DB   "{1}^",0   
292F   CD AF 0B               CALL   flushBuffer   
2932   E1                     POP   HL   
2933   E5                     PUSH   HL   
2934   11 01 00               LD   DE,1   
2937   B7                     OR   A   
2938   ED 52                  SBC   HL,DE   
293A   7D                     LD   A,L   
293B   B4                     OR   H   
293C   CA 9B 29               JP   Z,expectM_2897S92   
293F   CD 39 0C               CALL   printStr   
2942   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
294D   CD 39 0C               CALL   printStr   
2950   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
295F   21 01 00               LD   hl,1   
2962   E5                     PUSH   hl   
2963   E5                     PUSH   hl   
2964   CD 3E 0D               CALL   run   
2967   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
296F   CD AF 0B               CALL   flushBuffer   
2972   CD 39 0C               CALL   printStr   
2975   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2982   E1                     POP   hl   
2983   E5                     PUSH   hl   
2984   E5                     PUSH   hl   
2985   CD 3E 0D               CALL   run   
2988   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2997   CD AF 0B               CALL   flushBuffer   
299A   76                     HALT      
299B                EXPECTM_2897S92:      
299B   E1                     POP   HL   
299C                          ;*Macro unroll:  test "{{1}^}^", 1
299C   31 00 51               LD   SP,STACK   
299F   CD 6D 0C               CALL   coldInit   
29A2   CD 74 4F               CALL   execStr   
29A5   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
29AD   CD AF 0B               CALL   flushBuffer   
29B0   E1                     POP   HL   
29B1   E5                     PUSH   HL   
29B2   11 01 00               LD   DE,1   
29B5   B7                     OR   A   
29B6   ED 52                  SBC   HL,DE   
29B8   7D                     LD   A,L   
29B9   B4                     OR   H   
29BA   CA 1C 2A               JP   Z,expectM_2898S93   
29BD   CD 39 0C               CALL   printStr   
29C0   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
29CE   CD 39 0C               CALL   printStr   
29D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29E0   21 01 00               LD   hl,1   
29E3   E5                     PUSH   hl   
29E4   E5                     PUSH   hl   
29E5   CD 3E 0D               CALL   run   
29E8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29F0   CD AF 0B               CALL   flushBuffer   
29F3   CD 39 0C               CALL   printStr   
29F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A03   E1                     POP   hl   
2A04   E5                     PUSH   hl   
2A05   E5                     PUSH   hl   
2A06   CD 3E 0D               CALL   run   
2A09   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A18   CD AF 0B               CALL   flushBuffer   
2A1B   76                     HALT      
2A1C                EXPECTM_2898S93:      
2A1C   E1                     POP   HL   
2A1D                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2A1D   31 00 51               LD   SP,STACK   
2A20   CD 6D 0C               CALL   coldInit   
2A23   CD 74 4F               CALL   execStr   
2A26   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2A31   CD AF 0B               CALL   flushBuffer   
2A34   E1                     POP   HL   
2A35   E5                     PUSH   HL   
2A36   11 01 00               LD   DE,1   
2A39   B7                     OR   A   
2A3A   ED 52                  SBC   HL,DE   
2A3C   7D                     LD   A,L   
2A3D   B4                     OR   H   
2A3E   CA A3 2A               JP   Z,expectM_2899S94   
2A41   CD 39 0C               CALL   printStr   
2A44   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2A55   CD 39 0C               CALL   printStr   
2A58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A67   21 01 00               LD   hl,1   
2A6A   E5                     PUSH   hl   
2A6B   E5                     PUSH   hl   
2A6C   CD 3E 0D               CALL   run   
2A6F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A77   CD AF 0B               CALL   flushBuffer   
2A7A   CD 39 0C               CALL   printStr   
2A7D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A8A   E1                     POP   hl   
2A8B   E5                     PUSH   hl   
2A8C   E5                     PUSH   hl   
2A8D   CD 3E 0D               CALL   run   
2A90   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A9F   CD AF 0B               CALL   flushBuffer   
2AA2   76                     HALT      
2AA3                EXPECTM_2899S94:      
2AA3   E1                     POP   HL   
2AA4                          ;*Macro unroll:  test "5 /f{10} ?", 5
2AA4   31 00 51               LD   SP,STACK   
2AA7   CD 6D 0C               CALL   coldInit   
2AAA   CD 74 4F               CALL   execStr   
2AAD   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2AB8   CD AF 0B               CALL   flushBuffer   
2ABB   E1                     POP   HL   
2ABC   E5                     PUSH   HL   
2ABD   11 05 00               LD   DE,5   
2AC0   B7                     OR   A   
2AC1   ED 52                  SBC   HL,DE   
2AC3   7D                     LD   A,L   
2AC4   B4                     OR   H   
2AC5   CA 2A 2B               JP   Z,expectM_2900S95   
2AC8   CD 39 0C               CALL   printStr   
2ACB   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2ADC   CD 39 0C               CALL   printStr   
2ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEE   21 05 00               LD   hl,5   
2AF1   E5                     PUSH   hl   
2AF2   E5                     PUSH   hl   
2AF3   CD 3E 0D               CALL   run   
2AF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AFE   CD AF 0B               CALL   flushBuffer   
2B01   CD 39 0C               CALL   printStr   
2B04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B11   E1                     POP   hl   
2B12   E5                     PUSH   hl   
2B13   E5                     PUSH   hl   
2B14   CD 3E 0D               CALL   run   
2B17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B26   CD AF 0B               CALL   flushBuffer   
2B29   76                     HALT      
2B2A                EXPECTM_2900S95:      
2B2A   E1                     POP   HL   
2B2B                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2B2B   31 00 51               LD   SP,STACK   
2B2E   CD 6D 0C               CALL   coldInit   
2B31   CD 74 4F               CALL   execStr   
2B34   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2B41   CD AF 0B               CALL   flushBuffer   
2B44   E1                     POP   HL   
2B45   E5                     PUSH   HL   
2B46   11 0F 00               LD   DE,15   
2B49   B7                     OR   A   
2B4A   ED 52                  SBC   HL,DE   
2B4C   7D                     LD   A,L   
2B4D   B4                     OR   H   
2B4E   CA B5 2B               JP   Z,expectM_2901S96   
2B51   CD 39 0C               CALL   printStr   
2B54   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2B67   CD 39 0C               CALL   printStr   
2B6A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B79   21 0F 00               LD   hl,15   
2B7C   E5                     PUSH   hl   
2B7D   E5                     PUSH   hl   
2B7E   CD 3E 0D               CALL   run   
2B81   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B89   CD AF 0B               CALL   flushBuffer   
2B8C   CD 39 0C               CALL   printStr   
2B8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B9C   E1                     POP   hl   
2B9D   E5                     PUSH   hl   
2B9E   E5                     PUSH   hl   
2B9F   CD 3E 0D               CALL   run   
2BA2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BB1   CD AF 0B               CALL   flushBuffer   
2BB4   76                     HALT      
2BB5                EXPECTM_2901S96:      
2BB5   E1                     POP   HL   
2BB6                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2BB6   31 00 51               LD   SP,STACK   
2BB9   CD 6D 0C               CALL   coldInit   
2BBC   CD 74 4F               CALL   execStr   
2BBF   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2BD1   CD AF 0B               CALL   flushBuffer   
2BD4   E1                     POP   HL   
2BD5   E5                     PUSH   HL   
2BD6   11 15 00               LD   DE,21   
2BD9   B7                     OR   A   
2BDA   ED 52                  SBC   HL,DE   
2BDC   7D                     LD   A,L   
2BDD   B4                     OR   H   
2BDE   CA 4A 2C               JP   Z,expectM_2902S97   
2BE1   CD 39 0C               CALL   printStr   
2BE4   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2BFC   CD 39 0C               CALL   printStr   
2BFF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C0E   21 15 00               LD   hl,21   
2C11   E5                     PUSH   hl   
2C12   E5                     PUSH   hl   
2C13   CD 3E 0D               CALL   run   
2C16   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C1E   CD AF 0B               CALL   flushBuffer   
2C21   CD 39 0C               CALL   printStr   
2C24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C31   E1                     POP   hl   
2C32   E5                     PUSH   hl   
2C33   E5                     PUSH   hl   
2C34   CD 3E 0D               CALL   run   
2C37   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C46   CD AF 0B               CALL   flushBuffer   
2C49   76                     HALT      
2C4A                EXPECTM_2902S97:      
2C4A   E1                     POP   HL   
2C4B                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2C4B   31 00 51               LD   SP,STACK   
2C4E   CD 6D 0C               CALL   coldInit   
2C51   CD 74 4F               CALL   execStr   
2C54   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2C66   CD AF 0B               CALL   flushBuffer   
2C69   E1                     POP   HL   
2C6A   E5                     PUSH   HL   
2C6B   11 0B 00               LD   DE,11   
2C6E   B7                     OR   A   
2C6F   ED 52                  SBC   HL,DE   
2C71   7D                     LD   A,L   
2C72   B4                     OR   H   
2C73   CA DF 2C               JP   Z,expectM_2903S98   
2C76   CD 39 0C               CALL   printStr   
2C79   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2C91   CD 39 0C               CALL   printStr   
2C94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CA3   21 0B 00               LD   hl,11   
2CA6   E5                     PUSH   hl   
2CA7   E5                     PUSH   hl   
2CA8   CD 3E 0D               CALL   run   
2CAB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CB3   CD AF 0B               CALL   flushBuffer   
2CB6   CD 39 0C               CALL   printStr   
2CB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CC6   E1                     POP   hl   
2CC7   E5                     PUSH   hl   
2CC8   E5                     PUSH   hl   
2CC9   CD 3E 0D               CALL   run   
2CCC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CDB   CD AF 0B               CALL   flushBuffer   
2CDE   76                     HALT      
2CDF                EXPECTM_2903S98:      
2CDF   E1                     POP   HL   
2CE0                          ;*Macro unroll:  test ": 0#", $0000
2CE0   31 00 51               LD   SP,STACK   
2CE3   CD 6D 0C               CALL   coldInit   
2CE6   CD 74 4F               CALL   execStr   
2CE9   3A 20 30 23 00         DB   ": 0#",0   
2CEE   CD AF 0B               CALL   flushBuffer   
2CF1   E1                     POP   HL   
2CF2   E5                     PUSH   HL   
2CF3   11 00 00               LD   DE,$0000   
2CF6   B7                     OR   A   
2CF7   ED 52                  SBC   HL,DE   
2CF9   7D                     LD   A,L   
2CFA   B4                     OR   H   
2CFB   CA 5A 2D               JP   Z,expectM_2904S99   
2CFE   CD 39 0C               CALL   printStr   
2D01   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
2D0C   CD 39 0C               CALL   printStr   
2D0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D1E   21 00 00               LD   hl,$0000   
2D21   E5                     PUSH   hl   
2D22   E5                     PUSH   hl   
2D23   CD 3E 0D               CALL   run   
2D26   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D2E   CD AF 0B               CALL   flushBuffer   
2D31   CD 39 0C               CALL   printStr   
2D34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D41   E1                     POP   hl   
2D42   E5                     PUSH   hl   
2D43   E5                     PUSH   hl   
2D44   CD 3E 0D               CALL   run   
2D47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D56   CD AF 0B               CALL   flushBuffer   
2D59   76                     HALT      
2D5A                EXPECTM_2904S99:      
2D5A   E1                     POP   HL   
2D5B                          ;*Macro unroll:  test ":a 0#", $0100
2D5B   31 00 51               LD   SP,STACK   
2D5E   CD 6D 0C               CALL   coldInit   
2D61   CD 74 4F               CALL   execStr   
2D64   3A 61 20 30 23 00      DB   ":a 0#",0   
2D6A   CD AF 0B               CALL   flushBuffer   
2D6D   E1                     POP   HL   
2D6E   E5                     PUSH   HL   
2D6F   11 00 01               LD   DE,$0100   
2D72   B7                     OR   A   
2D73   ED 52                  SBC   HL,DE   
2D75   7D                     LD   A,L   
2D76   B4                     OR   H   
2D77   CA D7 2D               JP   Z,expectM_2905S100   
2D7A   CD 39 0C               CALL   printStr   
2D7D   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
2D89   CD 39 0C               CALL   printStr   
2D8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D9B   21 00 01               LD   hl,$0100   
2D9E   E5                     PUSH   hl   
2D9F   E5                     PUSH   hl   
2DA0   CD 3E 0D               CALL   run   
2DA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DAB   CD AF 0B               CALL   flushBuffer   
2DAE   CD 39 0C               CALL   printStr   
2DB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DBE   E1                     POP   hl   
2DBF   E5                     PUSH   hl   
2DC0   E5                     PUSH   hl   
2DC1   CD 3E 0D               CALL   run   
2DC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DD3   CD AF 0B               CALL   flushBuffer   
2DD6   76                     HALT      
2DD7                EXPECTM_2905S100:      
2DD7   E1                     POP   HL   
2DD8                          ;*Macro unroll:  test ":a: 0#", $0100
2DD8   31 00 51               LD   SP,STACK   
2DDB   CD 6D 0C               CALL   coldInit   
2DDE   CD 74 4F               CALL   execStr   
2DE1   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
2DE8   CD AF 0B               CALL   flushBuffer   
2DEB   E1                     POP   HL   
2DEC   E5                     PUSH   HL   
2DED   11 00 01               LD   DE,$0100   
2DF0   B7                     OR   A   
2DF1   ED 52                  SBC   HL,DE   
2DF3   7D                     LD   A,L   
2DF4   B4                     OR   H   
2DF5   CA 56 2E               JP   Z,expectM_2906S101   
2DF8   CD 39 0C               CALL   printStr   
2DFB   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
2E08   CD 39 0C               CALL   printStr   
2E0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E1A   21 00 01               LD   hl,$0100   
2E1D   E5                     PUSH   hl   
2E1E   E5                     PUSH   hl   
2E1F   CD 3E 0D               CALL   run   
2E22   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E2A   CD AF 0B               CALL   flushBuffer   
2E2D   CD 39 0C               CALL   printStr   
2E30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E3D   E1                     POP   hl   
2E3E   E5                     PUSH   hl   
2E3F   E5                     PUSH   hl   
2E40   CD 3E 0D               CALL   run   
2E43   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E52   CD AF 0B               CALL   flushBuffer   
2E55   76                     HALT      
2E56                EXPECTM_2906S101:      
2E56   E1                     POP   HL   
2E57                          ;*Macro unroll:  test ":a:b 0#", $0201
2E57   31 00 51               LD   SP,STACK   
2E5A   CD 6D 0C               CALL   coldInit   
2E5D   CD 74 4F               CALL   execStr   
2E60   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
2E68   CD AF 0B               CALL   flushBuffer   
2E6B   E1                     POP   HL   
2E6C   E5                     PUSH   HL   
2E6D   11 01 02               LD   DE,$0201   
2E70   B7                     OR   A   
2E71   ED 52                  SBC   HL,DE   
2E73   7D                     LD   A,L   
2E74   B4                     OR   H   
2E75   CA D7 2E               JP   Z,expectM_2907S102   
2E78   CD 39 0C               CALL   printStr   
2E7B   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
2E89   CD 39 0C               CALL   printStr   
2E8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E9B   21 01 02               LD   hl,$0201   
2E9E   E5                     PUSH   hl   
2E9F   E5                     PUSH   hl   
2EA0   CD 3E 0D               CALL   run   
2EA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EAB   CD AF 0B               CALL   flushBuffer   
2EAE   CD 39 0C               CALL   printStr   
2EB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EBE   E1                     POP   hl   
2EBF   E5                     PUSH   hl   
2EC0   E5                     PUSH   hl   
2EC1   CD 3E 0D               CALL   run   
2EC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2ED3   CD AF 0B               CALL   flushBuffer   
2ED6   76                     HALT      
2ED7                EXPECTM_2907S102:      
2ED7   E1                     POP   HL   
2ED8                          ;*Macro unroll:  test "::b 0#", $0101
2ED8   31 00 51               LD   SP,STACK   
2EDB   CD 6D 0C               CALL   coldInit   
2EDE   CD 74 4F               CALL   execStr   
2EE1   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
2EE8   CD AF 0B               CALL   flushBuffer   
2EEB   E1                     POP   HL   
2EEC   E5                     PUSH   HL   
2EED   11 01 01               LD   DE,$0101   
2EF0   B7                     OR   A   
2EF1   ED 52                  SBC   HL,DE   
2EF3   7D                     LD   A,L   
2EF4   B4                     OR   H   
2EF5   CA 56 2F               JP   Z,expectM_2908S103   
2EF8   CD 39 0C               CALL   printStr   
2EFB   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
2F08   CD 39 0C               CALL   printStr   
2F0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F1A   21 01 01               LD   hl,$0101   
2F1D   E5                     PUSH   hl   
2F1E   E5                     PUSH   hl   
2F1F   CD 3E 0D               CALL   run   
2F22   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F2A   CD AF 0B               CALL   flushBuffer   
2F2D   CD 39 0C               CALL   printStr   
2F30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F3D   E1                     POP   hl   
2F3E   E5                     PUSH   hl   
2F3F   E5                     PUSH   hl   
2F40   CD 3E 0D               CALL   run   
2F43   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F52   CD AF 0B               CALL   flushBuffer   
2F55   76                     HALT      
2F56                EXPECTM_2908S103:      
2F56   E1                     POP   HL   
2F57                          ;*Macro unroll:  test ":{2};^", 2
2F57   31 00 51               LD   SP,STACK   
2F5A   CD 6D 0C               CALL   coldInit   
2F5D   CD 74 4F               CALL   execStr   
2F60   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
2F67   CD AF 0B               CALL   flushBuffer   
2F6A   E1                     POP   HL   
2F6B   E5                     PUSH   HL   
2F6C   11 02 00               LD   DE,2   
2F6F   B7                     OR   A   
2F70   ED 52                  SBC   HL,DE   
2F72   7D                     LD   A,L   
2F73   B4                     OR   H   
2F74   CA D5 2F               JP   Z,expectM_2909S104   
2F77   CD 39 0C               CALL   printStr   
2F7A   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2F87   CD 39 0C               CALL   printStr   
2F8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F99   21 02 00               LD   hl,2   
2F9C   E5                     PUSH   hl   
2F9D   E5                     PUSH   hl   
2F9E   CD 3E 0D               CALL   run   
2FA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FA9   CD AF 0B               CALL   flushBuffer   
2FAC   CD 39 0C               CALL   printStr   
2FAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FBC   E1                     POP   hl   
2FBD   E5                     PUSH   hl   
2FBE   E5                     PUSH   hl   
2FBF   CD 3E 0D               CALL   run   
2FC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FD1   CD AF 0B               CALL   flushBuffer   
2FD4   76                     HALT      
2FD5                EXPECTM_2909S104:      
2FD5   E1                     POP   HL   
2FD6                          ;*Macro unroll:  test ":a{2};^", 2
2FD6   31 00 51               LD   SP,STACK   
2FD9   CD 6D 0C               CALL   coldInit   
2FDC   CD 74 4F               CALL   execStr   
2FDF   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
2FE7   CD AF 0B               CALL   flushBuffer   
2FEA   E1                     POP   HL   
2FEB   E5                     PUSH   HL   
2FEC   11 02 00               LD   DE,2   
2FEF   B7                     OR   A   
2FF0   ED 52                  SBC   HL,DE   
2FF2   7D                     LD   A,L   
2FF3   B4                     OR   H   
2FF4   CA 56 30               JP   Z,expectM_2910S105   
2FF7   CD 39 0C               CALL   printStr   
2FFA   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
3008   CD 39 0C               CALL   printStr   
300B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
301A   21 02 00               LD   hl,2   
301D   E5                     PUSH   hl   
301E   E5                     PUSH   hl   
301F   CD 3E 0D               CALL   run   
3022   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
302A   CD AF 0B               CALL   flushBuffer   
302D   CD 39 0C               CALL   printStr   
3030   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
303D   E1                     POP   hl   
303E   E5                     PUSH   hl   
303F   E5                     PUSH   hl   
3040   CD 3E 0D               CALL   run   
3043   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3052   CD AF 0B               CALL   flushBuffer   
3055   76                     HALT      
3056                EXPECTM_2910S105:      
3056   E1                     POP   HL   
3057                          ;*Macro unroll:  test "5 :a{%a};^", 5
3057   31 00 51               LD   SP,STACK   
305A   CD 6D 0C               CALL   coldInit   
305D   CD 74 4F               CALL   execStr   
3060   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
306B   CD AF 0B               CALL   flushBuffer   
306E   E1                     POP   HL   
306F   E5                     PUSH   HL   
3070   11 05 00               LD   DE,5   
3073   B7                     OR   A   
3074   ED 52                  SBC   HL,DE   
3076   7D                     LD   A,L   
3077   B4                     OR   H   
3078   CA DD 30               JP   Z,expectM_2911S106   
307B   CD 39 0C               CALL   printStr   
307E   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
308F   CD 39 0C               CALL   printStr   
3092   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30A1   21 05 00               LD   hl,5   
30A4   E5                     PUSH   hl   
30A5   E5                     PUSH   hl   
30A6   CD 3E 0D               CALL   run   
30A9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30B1   CD AF 0B               CALL   flushBuffer   
30B4   CD 39 0C               CALL   printStr   
30B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30C4   E1                     POP   hl   
30C5   E5                     PUSH   hl   
30C6   E5                     PUSH   hl   
30C7   CD 3E 0D               CALL   run   
30CA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30D9   CD AF 0B               CALL   flushBuffer   
30DC   76                     HALT      
30DD                EXPECTM_2911S106:      
30DD   E1                     POP   HL   
30DE                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
30DE   31 00 51               LD   SP,STACK   
30E1   CD 6D 0C               CALL   coldInit   
30E4   CD 74 4F               CALL   execStr   
30E7   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
30F4   CD AF 0B               CALL   flushBuffer   
30F7   E1                     POP   HL   
30F8   E5                     PUSH   HL   
30F9   11 05 00               LD   DE,5   
30FC   B7                     OR   A   
30FD   ED 52                  SBC   HL,DE   
30FF   7D                     LD   A,L   
3100   B4                     OR   H   
3101   CA 68 31               JP   Z,expectM_2912S107   
3104   CD 39 0C               CALL   printStr   
3107   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
311A   CD 39 0C               CALL   printStr   
311D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
312C   21 05 00               LD   hl,5   
312F   E5                     PUSH   hl   
3130   E5                     PUSH   hl   
3131   CD 3E 0D               CALL   run   
3134   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
313C   CD AF 0B               CALL   flushBuffer   
313F   CD 39 0C               CALL   printStr   
3142   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
314F   E1                     POP   hl   
3150   E5                     PUSH   hl   
3151   E5                     PUSH   hl   
3152   CD 3E 0D               CALL   run   
3155   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3164   CD AF 0B               CALL   flushBuffer   
3167   76                     HALT      
3168                EXPECTM_2912S107:      
3168   E1                     POP   HL   
3169                          ;*Macro unroll:  test ":a{{2}^};^", 2
3169   31 00 51               LD   SP,STACK   
316C   CD 6D 0C               CALL   coldInit   
316F   CD 74 4F               CALL   execStr   
3172   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
317D   CD AF 0B               CALL   flushBuffer   
3180   E1                     POP   HL   
3181   E5                     PUSH   HL   
3182   11 02 00               LD   DE,2   
3185   B7                     OR   A   
3186   ED 52                  SBC   HL,DE   
3188   7D                     LD   A,L   
3189   B4                     OR   H   
318A   CA EF 31               JP   Z,expectM_2913S108   
318D   CD 39 0C               CALL   printStr   
3190   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
31A1   CD 39 0C               CALL   printStr   
31A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31B3   21 02 00               LD   hl,2   
31B6   E5                     PUSH   hl   
31B7   E5                     PUSH   hl   
31B8   CD 3E 0D               CALL   run   
31BB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31C3   CD AF 0B               CALL   flushBuffer   
31C6   CD 39 0C               CALL   printStr   
31C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31D6   E1                     POP   hl   
31D7   E5                     PUSH   hl   
31D8   E5                     PUSH   hl   
31D9   CD 3E 0D               CALL   run   
31DC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31EB   CD AF 0B               CALL   flushBuffer   
31EE   76                     HALT      
31EF                EXPECTM_2913S108:      
31EF   E1                     POP   HL   
31F0                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
31F0   31 00 51               LD   SP,STACK   
31F3   CD 6D 0C               CALL   coldInit   
31F6   CD 74 4F               CALL   execStr   
31F9   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
3209   CD AF 0B               CALL   flushBuffer   
320C   E1                     POP   HL   
320D   E5                     PUSH   HL   
320E   11 05 00               LD   DE,5   
3211   B7                     OR   A   
3212   ED 52                  SBC   HL,DE   
3214   7D                     LD   A,L   
3215   B4                     OR   H   
3216   CA 80 32               JP   Z,expectM_2914S109   
3219   CD 39 0C               CALL   printStr   
321C   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
3232   CD 39 0C               CALL   printStr   
3235   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3244   21 05 00               LD   hl,5   
3247   E5                     PUSH   hl   
3248   E5                     PUSH   hl   
3249   CD 3E 0D               CALL   run   
324C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3254   CD AF 0B               CALL   flushBuffer   
3257   CD 39 0C               CALL   printStr   
325A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3267   E1                     POP   hl   
3268   E5                     PUSH   hl   
3269   E5                     PUSH   hl   
326A   CD 3E 0D               CALL   run   
326D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
327C   CD AF 0B               CALL   flushBuffer   
327F   76                     HALT      
3280                EXPECTM_2914S109:      
3280   E1                     POP   HL   
3281                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
3281   31 00 51               LD   SP,STACK   
3284   CD 6D 0C               CALL   coldInit   
3287   CD 74 4F               CALL   execStr   
328A   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
329B   CD AF 0B               CALL   flushBuffer   
329E   E1                     POP   HL   
329F   E5                     PUSH   HL   
32A0   11 01 00               LD   DE,1   
32A3   B7                     OR   A   
32A4   ED 52                  SBC   HL,DE   
32A6   7D                     LD   A,L   
32A7   B4                     OR   H   
32A8   CA 13 33               JP   Z,expectM_2915S110   
32AB   CD 39 0C               CALL   printStr   
32AE   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
32C5   CD 39 0C               CALL   printStr   
32C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32D7   21 01 00               LD   hl,1   
32DA   E5                     PUSH   hl   
32DB   E5                     PUSH   hl   
32DC   CD 3E 0D               CALL   run   
32DF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32E7   CD AF 0B               CALL   flushBuffer   
32EA   CD 39 0C               CALL   printStr   
32ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32FA   E1                     POP   hl   
32FB   E5                     PUSH   hl   
32FC   E5                     PUSH   hl   
32FD   CD 3E 0D               CALL   run   
3300   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
330F   CD AF 0B               CALL   flushBuffer   
3312   76                     HALT      
3313                EXPECTM_2915S110:      
3313   E1                     POP   HL   
3314                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
3314   31 00 51               LD   SP,STACK   
3317   CD 6D 0C               CALL   coldInit   
331A   CD 74 4F               CALL   execStr   
331D   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
3331   CD AF 0B               CALL   flushBuffer   
3334   E1                     POP   HL   
3335   E5                     PUSH   HL   
3336   11 07 00               LD   DE,7   
3339   B7                     OR   A   
333A   ED 52                  SBC   HL,DE   
333C   7D                     LD   A,L   
333D   B4                     OR   H   
333E   CA AC 33               JP   Z,expectM_2916S111   
3341   CD 39 0C               CALL   printStr   
3344   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
335E   CD 39 0C               CALL   printStr   
3361   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3370   21 07 00               LD   hl,7   
3373   E5                     PUSH   hl   
3374   E5                     PUSH   hl   
3375   CD 3E 0D               CALL   run   
3378   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3380   CD AF 0B               CALL   flushBuffer   
3383   CD 39 0C               CALL   printStr   
3386   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3393   E1                     POP   hl   
3394   E5                     PUSH   hl   
3395   E5                     PUSH   hl   
3396   CD 3E 0D               CALL   run   
3399   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33A8   CD AF 0B               CALL   flushBuffer   
33AB   76                     HALT      
33AC                EXPECTM_2916S111:      
33AC   E1                     POP   HL   
33AD                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
33AD   31 00 51               LD   SP,STACK   
33B0   CD 6D 0C               CALL   coldInit   
33B3   CD 74 4F               CALL   execStr   
33B6   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
33CC   CD AF 0B               CALL   flushBuffer   
33CF   E1                     POP   HL   
33D0   E5                     PUSH   HL   
33D1   11 06 00               LD   DE,6   
33D4   B7                     OR   A   
33D5   ED 52                  SBC   HL,DE   
33D7   7D                     LD   A,L   
33D8   B4                     OR   H   
33D9   CA 49 34               JP   Z,expectM_2917S112   
33DC   CD 39 0C               CALL   printStr   
33DF   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
33FB   CD 39 0C               CALL   printStr   
33FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
340D   21 06 00               LD   hl,6   
3410   E5                     PUSH   hl   
3411   E5                     PUSH   hl   
3412   CD 3E 0D               CALL   run   
3415   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
341D   CD AF 0B               CALL   flushBuffer   
3420   CD 39 0C               CALL   printStr   
3423   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3430   E1                     POP   hl   
3431   E5                     PUSH   hl   
3432   E5                     PUSH   hl   
3433   CD 3E 0D               CALL   run   
3436   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3445   CD AF 0B               CALL   flushBuffer   
3448   76                     HALT      
3449                EXPECTM_2917S112:      
3449   E1                     POP   HL   
344A                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
344A   31 00 51               LD   SP,STACK   
344D   CD 6D 0C               CALL   coldInit   
3450   CD 74 4F               CALL   execStr   
3453   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
3462   CD AF 0B               CALL   flushBuffer   
3465   E1                     POP   HL   
3466   E5                     PUSH   HL   
3467   11 02 00               LD   DE,2   
346A   B7                     OR   A   
346B   ED 52                  SBC   HL,DE   
346D   7D                     LD   A,L   
346E   B4                     OR   H   
346F   CA D8 34               JP   Z,expectM_2918S113   
3472   CD 39 0C               CALL   printStr   
3475   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
348A   CD 39 0C               CALL   printStr   
348D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
349C   21 02 00               LD   hl,2   
349F   E5                     PUSH   hl   
34A0   E5                     PUSH   hl   
34A1   CD 3E 0D               CALL   run   
34A4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34AC   CD AF 0B               CALL   flushBuffer   
34AF   CD 39 0C               CALL   printStr   
34B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34BF   E1                     POP   hl   
34C0   E5                     PUSH   hl   
34C1   E5                     PUSH   hl   
34C2   CD 3E 0D               CALL   run   
34C5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34D4   CD AF 0B               CALL   flushBuffer   
34D7   76                     HALT      
34D8                EXPECTM_2918S113:      
34D8   E1                     POP   HL   
34D9                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
34D9   31 00 51               LD   SP,STACK   
34DC   CD 6D 0C               CALL   coldInit   
34DF   CD 74 4F               CALL   execStr   
34E2   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
34F4   CD AF 0B               CALL   flushBuffer   
34F7   E1                     POP   HL   
34F8   E5                     PUSH   HL   
34F9   11 01 00               LD   DE,1   
34FC   B7                     OR   A   
34FD   ED 52                  SBC   HL,DE   
34FF   7D                     LD   A,L   
3500   B4                     OR   H   
3501   CA 6D 35               JP   Z,expectM_2919S114   
3504   CD 39 0C               CALL   printStr   
3507   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
351F   CD 39 0C               CALL   printStr   
3522   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3531   21 01 00               LD   hl,1   
3534   E5                     PUSH   hl   
3535   E5                     PUSH   hl   
3536   CD 3E 0D               CALL   run   
3539   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3541   CD AF 0B               CALL   flushBuffer   
3544   CD 39 0C               CALL   printStr   
3547   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3554   E1                     POP   hl   
3555   E5                     PUSH   hl   
3556   E5                     PUSH   hl   
3557   CD 3E 0D               CALL   run   
355A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3569   CD AF 0B               CALL   flushBuffer   
356C   76                     HALT      
356D                EXPECTM_2919S114:      
356D   E1                     POP   HL   
356E                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
356E   31 00 51               LD   SP,STACK   
3571   CD 6D 0C               CALL   coldInit   
3574   CD 74 4F               CALL   execStr   
3577   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
358A   CD AF 0B               CALL   flushBuffer   
358D   E1                     POP   HL   
358E   E5                     PUSH   HL   
358F   11 02 00               LD   DE,2   
3592   B7                     OR   A   
3593   ED 52                  SBC   HL,DE   
3595   7D                     LD   A,L   
3596   B4                     OR   H   
3597   CA 04 36               JP   Z,expectM_2920S115   
359A   CD 39 0C               CALL   printStr   
359D   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
35B6   CD 39 0C               CALL   printStr   
35B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35C8   21 02 00               LD   hl,2   
35CB   E5                     PUSH   hl   
35CC   E5                     PUSH   hl   
35CD   CD 3E 0D               CALL   run   
35D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35D8   CD AF 0B               CALL   flushBuffer   
35DB   CD 39 0C               CALL   printStr   
35DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35EB   E1                     POP   hl   
35EC   E5                     PUSH   hl   
35ED   E5                     PUSH   hl   
35EE   CD 3E 0D               CALL   run   
35F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3600   CD AF 0B               CALL   flushBuffer   
3603   76                     HALT      
3604                EXPECTM_2920S115:      
3604   E1                     POP   HL   
3605                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
3605   31 00 51               LD   SP,STACK   
3608   CD 6D 0C               CALL   coldInit   
360B   CD 74 4F               CALL   execStr   
360E   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
3622   CD AF 0B               CALL   flushBuffer   
3625   E1                     POP   HL   
3626   E5                     PUSH   HL   
3627   11 02 00               LD   DE,2   
362A   B7                     OR   A   
362B   ED 52                  SBC   HL,DE   
362D   7D                     LD   A,L   
362E   B4                     OR   H   
362F   CA 9D 36               JP   Z,expectM_2921S116   
3632   CD 39 0C               CALL   printStr   
3635   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
364F   CD 39 0C               CALL   printStr   
3652   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3661   21 02 00               LD   hl,2   
3664   E5                     PUSH   hl   
3665   E5                     PUSH   hl   
3666   CD 3E 0D               CALL   run   
3669   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3671   CD AF 0B               CALL   flushBuffer   
3674   CD 39 0C               CALL   printStr   
3677   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3684   E1                     POP   hl   
3685   E5                     PUSH   hl   
3686   E5                     PUSH   hl   
3687   CD 3E 0D               CALL   run   
368A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3699   CD AF 0B               CALL   flushBuffer   
369C   76                     HALT      
369D                EXPECTM_2921S116:      
369D   E1                     POP   HL   
369E                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
369E   31 00 51               LD   SP,STACK   
36A1   CD 6D 0C               CALL   coldInit   
36A4   CD 74 4F               CALL   execStr   
36A7   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
36BA   CD AF 0B               CALL   flushBuffer   
36BD   E1                     POP   HL   
36BE   E5                     PUSH   HL   
36BF   11 02 00               LD   DE,2   
36C2   B7                     OR   A   
36C3   ED 52                  SBC   HL,DE   
36C5   7D                     LD   A,L   
36C6   B4                     OR   H   
36C7   CA 34 37               JP   Z,expectM_2922S117   
36CA   CD 39 0C               CALL   printStr   
36CD   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
36E6   CD 39 0C               CALL   printStr   
36E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36F8   21 02 00               LD   hl,2   
36FB   E5                     PUSH   hl   
36FC   E5                     PUSH   hl   
36FD   CD 3E 0D               CALL   run   
3700   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3708   CD AF 0B               CALL   flushBuffer   
370B   CD 39 0C               CALL   printStr   
370E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
371B   E1                     POP   hl   
371C   E5                     PUSH   hl   
371D   E5                     PUSH   hl   
371E   CD 3E 0D               CALL   run   
3721   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3730   CD AF 0B               CALL   flushBuffer   
3733   76                     HALT      
3734                EXPECTM_2922S117:      
3734   E1                     POP   HL   
3735                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
3735   31 00 51               LD   SP,STACK   
3738   CD 6D 0C               CALL   coldInit   
373B   CD 74 4F               CALL   execStr   
373E   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
3758   CD AF 0B               CALL   flushBuffer   
375B   E1                     POP   HL   
375C   E5                     PUSH   HL   
375D   11 05 00               LD   DE,5   
3760   B7                     OR   A   
3761   ED 52                  SBC   HL,DE   
3763   7D                     LD   A,L   
3764   B4                     OR   H   
3765   CA D9 37               JP   Z,expectM_2923S118   
3768   CD 39 0C               CALL   printStr   
376B   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
378B   CD 39 0C               CALL   printStr   
378E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
379D   21 05 00               LD   hl,5   
37A0   E5                     PUSH   hl   
37A1   E5                     PUSH   hl   
37A2   CD 3E 0D               CALL   run   
37A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37AD   CD AF 0B               CALL   flushBuffer   
37B0   CD 39 0C               CALL   printStr   
37B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37C0   E1                     POP   hl   
37C1   E5                     PUSH   hl   
37C2   E5                     PUSH   hl   
37C3   CD 3E 0D               CALL   run   
37C6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37D5   CD AF 0B               CALL   flushBuffer   
37D8   76                     HALT      
37D9                EXPECTM_2923S118:      
37D9   E1                     POP   HL   
37DA                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
37DA   31 00 51               LD   SP,STACK   
37DD   CD 6D 0C               CALL   coldInit   
37E0   CD 74 4F               CALL   execStr   
37E3   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
37F4   CD AF 0B               CALL   flushBuffer   
37F7   E1                     POP   HL   
37F8   E5                     PUSH   HL   
37F9   11 02 00               LD   DE,2   
37FC   B7                     OR   A   
37FD   ED 52                  SBC   HL,DE   
37FF   7D                     LD   A,L   
3800   B4                     OR   H   
3801   CA 6C 38               JP   Z,expectM_2924S119   
3804   CD 39 0C               CALL   printStr   
3807   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
381E   CD 39 0C               CALL   printStr   
3821   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3830   21 02 00               LD   hl,2   
3833   E5                     PUSH   hl   
3834   E5                     PUSH   hl   
3835   CD 3E 0D               CALL   run   
3838   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3840   CD AF 0B               CALL   flushBuffer   
3843   CD 39 0C               CALL   printStr   
3846   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3853   E1                     POP   hl   
3854   E5                     PUSH   hl   
3855   E5                     PUSH   hl   
3856   CD 3E 0D               CALL   run   
3859   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3868   CD AF 0B               CALL   flushBuffer   
386B   76                     HALT      
386C                EXPECTM_2924S119:      
386C   E1                     POP   HL   
386D                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
386D   31 00 51               LD   SP,STACK   
3870   CD 6D 0C               CALL   coldInit   
3873   CD 74 4F               CALL   execStr   
3876   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
388E   CD AF 0B               CALL   flushBuffer   
3891   E1                     POP   HL   
3892   E5                     PUSH   HL   
3893   11 64 00               LD   DE,100   
3896   B7                     OR   A   
3897   ED 52                  SBC   HL,DE   
3899   7D                     LD   A,L   
389A   B4                     OR   H   
389B   CA 0D 39               JP   Z,expectM_2925S120   
389E   CD 39 0C               CALL   printStr   
38A1   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
38BF   CD 39 0C               CALL   printStr   
38C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38D1   21 64 00               LD   hl,100   
38D4   E5                     PUSH   hl   
38D5   E5                     PUSH   hl   
38D6   CD 3E 0D               CALL   run   
38D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38E1   CD AF 0B               CALL   flushBuffer   
38E4   CD 39 0C               CALL   printStr   
38E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38F4   E1                     POP   hl   
38F5   E5                     PUSH   hl   
38F6   E5                     PUSH   hl   
38F7   CD 3E 0D               CALL   run   
38FA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3909   CD AF 0B               CALL   flushBuffer   
390C   76                     HALT      
390D                EXPECTM_2925S120:      
390D   E1                     POP   HL   
390E                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
390E   31 00 51               LD   SP,STACK   
3911   CD 6D 0C               CALL   coldInit   
3914   CD 74 4F               CALL   execStr   
3917   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
3930   CD AF 0B               CALL   flushBuffer   
3933   E1                     POP   HL   
3934   E5                     PUSH   HL   
3935   11 01 00               LD   DE,1   
3938   B7                     OR   A   
3939   ED 52                  SBC   HL,DE   
393B   7D                     LD   A,L   
393C   B4                     OR   H   
393D   CA B0 39               JP   Z,expectM_2926S121   
3940   CD 39 0C               CALL   printStr   
3943   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
3962   CD 39 0C               CALL   printStr   
3965   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3974   21 01 00               LD   hl,1   
3977   E5                     PUSH   hl   
3978   E5                     PUSH   hl   
3979   CD 3E 0D               CALL   run   
397C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3984   CD AF 0B               CALL   flushBuffer   
3987   CD 39 0C               CALL   printStr   
398A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3997   E1                     POP   hl   
3998   E5                     PUSH   hl   
3999   E5                     PUSH   hl   
399A   CD 3E 0D               CALL   run   
399D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39AC   CD AF 0B               CALL   flushBuffer   
39AF   76                     HALT      
39B0                EXPECTM_2926S121:      
39B0   E1                     POP   HL   
39B1                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
39B1   31 00 51               LD   SP,STACK   
39B4   CD 6D 0C               CALL   coldInit   
39B7   CD 74 4F               CALL   execStr   
39BA   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
39D4   CD AF 0B               CALL   flushBuffer   
39D7   E1                     POP   HL   
39D8   E5                     PUSH   HL   
39D9   11 02 00               LD   DE,2   
39DC   B7                     OR   A   
39DD   ED 52                  SBC   HL,DE   
39DF   7D                     LD   A,L   
39E0   B4                     OR   H   
39E1   CA 55 3A               JP   Z,expectM_2927S122   
39E4   CD 39 0C               CALL   printStr   
39E7   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
3A07   CD 39 0C               CALL   printStr   
3A0A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A19   21 02 00               LD   hl,2   
3A1C   E5                     PUSH   hl   
3A1D   E5                     PUSH   hl   
3A1E   CD 3E 0D               CALL   run   
3A21   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A29   CD AF 0B               CALL   flushBuffer   
3A2C   CD 39 0C               CALL   printStr   
3A2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A3C   E1                     POP   hl   
3A3D   E5                     PUSH   hl   
3A3E   E5                     PUSH   hl   
3A3F   CD 3E 0D               CALL   run   
3A42   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A51   CD AF 0B               CALL   flushBuffer   
3A54   76                     HALT      
3A55                EXPECTM_2927S122:      
3A55   E1                     POP   HL   
3A56                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
3A56   31 00 51               LD   SP,STACK   
3A59   CD 6D 0C               CALL   coldInit   
3A5C   CD 74 4F               CALL   execStr   
3A5F   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
3A7E   CD AF 0B               CALL   flushBuffer   
3A81   E1                     POP   HL   
3A82   E5                     PUSH   HL   
3A83   11 0B 00               LD   DE,11   
3A86   B7                     OR   A   
3A87   ED 52                  SBC   HL,DE   
3A89   7D                     LD   A,L   
3A8A   B4                     OR   H   
3A8B   CA 04 3B               JP   Z,expectM_2928S123   
3A8E   CD 39 0C               CALL   printStr   
3A91   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
3AB6   CD 39 0C               CALL   printStr   
3AB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AC8   21 0B 00               LD   hl,11   
3ACB   E5                     PUSH   hl   
3ACC   E5                     PUSH   hl   
3ACD   CD 3E 0D               CALL   run   
3AD0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AD8   CD AF 0B               CALL   flushBuffer   
3ADB   CD 39 0C               CALL   printStr   
3ADE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AEB   E1                     POP   hl   
3AEC   E5                     PUSH   hl   
3AED   E5                     PUSH   hl   
3AEE   CD 3E 0D               CALL   run   
3AF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B00   CD AF 0B               CALL   flushBuffer   
3B03   76                     HALT      
3B04                EXPECTM_2928S123:      
3B04   E1                     POP   HL   
3B05                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
3B05   31 00 51               LD   SP,STACK   
3B08   CD 6D 0C               CALL   coldInit   
3B0B   CD 74 4F               CALL   execStr   
3B0E   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
3B2D   CD AF 0B               CALL   flushBuffer   
3B30   E1                     POP   HL   
3B31   E5                     PUSH   HL   
3B32   11 15 00               LD   DE,21   
3B35   B7                     OR   A   
3B36   ED 52                  SBC   HL,DE   
3B38   7D                     LD   A,L   
3B39   B4                     OR   H   
3B3A   CA B3 3B               JP   Z,expectM_2929S124   
3B3D   CD 39 0C               CALL   printStr   
3B40   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3B65   CD 39 0C               CALL   printStr   
3B68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B77   21 15 00               LD   hl,21   
3B7A   E5                     PUSH   hl   
3B7B   E5                     PUSH   hl   
3B7C   CD 3E 0D               CALL   run   
3B7F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B87   CD AF 0B               CALL   flushBuffer   
3B8A   CD 39 0C               CALL   printStr   
3B8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B9A   E1                     POP   hl   
3B9B   E5                     PUSH   hl   
3B9C   E5                     PUSH   hl   
3B9D   CD 3E 0D               CALL   run   
3BA0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BAF   CD AF 0B               CALL   flushBuffer   
3BB2   76                     HALT      
3BB3                EXPECTM_2929S124:      
3BB3   E1                     POP   HL   
3BB4                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3BB4   31 00 51               LD   SP,STACK   
3BB7   CD 6D 0C               CALL   coldInit   
3BBA   CD 74 4F               CALL   execStr   
3BBD   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3BCB   CD AF 0B               CALL   flushBuffer   
3BCE   E1                     POP   HL   
3BCF   E5                     PUSH   HL   
3BD0   11 14 00               LD   DE,20   
3BD3   B7                     OR   A   
3BD4   ED 52                  SBC   HL,DE   
3BD6   7D                     LD   A,L   
3BD7   B4                     OR   H   
3BD8   CA 40 3C               JP   Z,expectM_2930S125   
3BDB   CD 39 0C               CALL   printStr   
3BDE   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3BF2   CD 39 0C               CALL   printStr   
3BF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C04   21 14 00               LD   hl,20   
3C07   E5                     PUSH   hl   
3C08   E5                     PUSH   hl   
3C09   CD 3E 0D               CALL   run   
3C0C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C14   CD AF 0B               CALL   flushBuffer   
3C17   CD 39 0C               CALL   printStr   
3C1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C27   E1                     POP   hl   
3C28   E5                     PUSH   hl   
3C29   E5                     PUSH   hl   
3C2A   CD 3E 0D               CALL   run   
3C2D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C3C   CD AF 0B               CALL   flushBuffer   
3C3F   76                     HALT      
3C40                EXPECTM_2930S125:      
3C40   E1                     POP   HL   
3C41                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
3C41   31 00 51               LD   SP,STACK   
3C44   CD 6D 0C               CALL   coldInit   
3C47   CD 74 4F               CALL   execStr   
3C4A   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
3C5C   CD AF 0B               CALL   flushBuffer   
3C5F   E1                     POP   HL   
3C60   E5                     PUSH   HL   
3C61   11 04 00               LD   DE,4   
3C64   B7                     OR   A   
3C65   ED 52                  SBC   HL,DE   
3C67   7D                     LD   A,L   
3C68   B4                     OR   H   
3C69   CA D5 3C               JP   Z,expectM_2931S126   
3C6C   CD 39 0C               CALL   printStr   
3C6F   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
3C87   CD 39 0C               CALL   printStr   
3C8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C99   21 04 00               LD   hl,4   
3C9C   E5                     PUSH   hl   
3C9D   E5                     PUSH   hl   
3C9E   CD 3E 0D               CALL   run   
3CA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CA9   CD AF 0B               CALL   flushBuffer   
3CAC   CD 39 0C               CALL   printStr   
3CAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CBC   E1                     POP   hl   
3CBD   E5                     PUSH   hl   
3CBE   E5                     PUSH   hl   
3CBF   CD 3E 0D               CALL   run   
3CC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CD1   CD AF 0B               CALL   flushBuffer   
3CD4   76                     HALT      
3CD5                EXPECTM_2931S126:      
3CD5   E1                     POP   HL   
3CD6                          ;*Macro unroll:  test "/b [1 2 3] 1#", 2
3CD6   31 00 51               LD   SP,STACK   
3CD9   CD 6D 0C               CALL   coldInit   
3CDC   CD 74 4F               CALL   execStr   
3CDF   2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/b [1 2 3] 1#",0   
3CED   CD AF 0B               CALL   flushBuffer   
3CF0   E1                     POP   HL   
3CF1   E5                     PUSH   HL   
3CF2   11 02 00               LD   DE,2   
3CF5   B7                     OR   A   
3CF6   ED 52                  SBC   HL,DE   
3CF8   7D                     LD   A,L   
3CF9   B4                     OR   H   
3CFA   CA 62 3D               JP   Z,expectM_2932S127   
3CFD   CD 39 0C               CALL   printStr   
3D00   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/b [1 2 3] 1#"   
3D14   CD 39 0C               CALL   printStr   
3D17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D26   21 02 00               LD   hl,2   
3D29   E5                     PUSH   hl   
3D2A   E5                     PUSH   hl   
3D2B   CD 3E 0D               CALL   run   
3D2E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D36   CD AF 0B               CALL   flushBuffer   
3D39   CD 39 0C               CALL   printStr   
3D3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D49   E1                     POP   hl   
3D4A   E5                     PUSH   hl   
3D4B   E5                     PUSH   hl   
3D4C   CD 3E 0D               CALL   run   
3D4F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D5E   CD AF 0B               CALL   flushBuffer   
3D61   76                     HALT      
3D62                EXPECTM_2932S127:      
3D62   E1                     POP   HL   
3D63                          ;*Macro unroll:  test "/b ['A' 'B' 'C'] 1#", 66
3D63   31 00 51               LD   SP,STACK   
3D66   CD 6D 0C               CALL   coldInit   
3D69   CD 74 4F               CALL   execStr   
3D6C   2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/b ['A' 'B' 'C'] 1#",0   
3D80   CD AF 0B               CALL   flushBuffer   
3D83   E1                     POP   HL   
3D84   E5                     PUSH   HL   
3D85   11 42 00               LD   DE,66   
3D88   B7                     OR   A   
3D89   ED 52                  SBC   HL,DE   
3D8B   7D                     LD   A,L   
3D8C   B4                     OR   H   
3D8D   CA FB 3D               JP   Z,expectM_2933S128   
3D90   CD 39 0C               CALL   printStr   
3D93   43 6F 64 65 3A 20 2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/b ['A' 'B' 'C'] 1#"   
3DAD   CD 39 0C               CALL   printStr   
3DB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DBF   21 42 00               LD   hl,66   
3DC2   E5                     PUSH   hl   
3DC3   E5                     PUSH   hl   
3DC4   CD 3E 0D               CALL   run   
3DC7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DCF   CD AF 0B               CALL   flushBuffer   
3DD2   CD 39 0C               CALL   printStr   
3DD5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DE2   E1                     POP   hl   
3DE3   E5                     PUSH   hl   
3DE4   E5                     PUSH   hl   
3DE5   CD 3E 0D               CALL   run   
3DE8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DF7   CD AF 0B               CALL   flushBuffer   
3DFA   76                     HALT      
3DFB                EXPECTM_2933S128:      
3DFB   E1                     POP   HL   
3DFC                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3DFC   31 00 51               LD   SP,STACK   
3DFF   CD 6D 0C               CALL   coldInit   
3E02   CD 74 4F               CALL   execStr   
3E05   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3E19   CD AF 0B               CALL   flushBuffer   
3E1C   E1                     POP   HL   
3E1D   E5                     PUSH   HL   
3E1E   11 0A 00               LD   DE,10   
3E21   B7                     OR   A   
3E22   ED 52                  SBC   HL,DE   
3E24   7D                     LD   A,L   
3E25   B4                     OR   H   
3E26   CA 94 3E               JP   Z,expectM_2934S129   
3E29   CD 39 0C               CALL   printStr   
3E2C   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3E46   CD 39 0C               CALL   printStr   
3E49   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E58   21 0A 00               LD   hl,10   
3E5B   E5                     PUSH   hl   
3E5C   E5                     PUSH   hl   
3E5D   CD 3E 0D               CALL   run   
3E60   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E68   CD AF 0B               CALL   flushBuffer   
3E6B   CD 39 0C               CALL   printStr   
3E6E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E7B   E1                     POP   hl   
3E7C   E5                     PUSH   hl   
3E7D   E5                     PUSH   hl   
3E7E   CD 3E 0D               CALL   run   
3E81   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E90   CD AF 0B               CALL   flushBuffer   
3E93   76                     HALT      
3E94                EXPECTM_2934S129:      
3E94   E1                     POP   HL   
3E95                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
3E95   31 00 51               LD   SP,STACK   
3E98   CD 6D 0C               CALL   coldInit   
3E9B   CD 74 4F               CALL   execStr   
3E9E   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
3EBB   CD AF 0B               CALL   flushBuffer   
3EBE   E1                     POP   HL   
3EBF   E5                     PUSH   HL   
3EC0   11 0A 00               LD   DE,10   
3EC3   B7                     OR   A   
3EC4   ED 52                  SBC   HL,DE   
3EC6   7D                     LD   A,L   
3EC7   B4                     OR   H   
3EC8   CA 3F 3F               JP   Z,expectM_2935S130   
3ECB   CD 39 0C               CALL   printStr   
3ECE   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
3EF1   CD 39 0C               CALL   printStr   
3EF4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F03   21 0A 00               LD   hl,10   
3F06   E5                     PUSH   hl   
3F07   E5                     PUSH   hl   
3F08   CD 3E 0D               CALL   run   
3F0B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F13   CD AF 0B               CALL   flushBuffer   
3F16   CD 39 0C               CALL   printStr   
3F19   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F26   E1                     POP   hl   
3F27   E5                     PUSH   hl   
3F28   E5                     PUSH   hl   
3F29   CD 3E 0D               CALL   run   
3F2C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F3B   CD AF 0B               CALL   flushBuffer   
3F3E   76                     HALT      
3F3F                EXPECTM_2935S130:      
3F3F   E1                     POP   HL   
3F40                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
3F40   31 00 51               LD   SP,STACK   
3F43   CD 6D 0C               CALL   coldInit   
3F46   CD 74 4F               CALL   execStr   
3F49   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3F6A   CD AF 0B               CALL   flushBuffer   
3F6D   E1                     POP   HL   
3F6E   E5                     PUSH   HL   
3F6F   11 0A 00               LD   DE,10   
3F72   B7                     OR   A   
3F73   ED 52                  SBC   HL,DE   
3F75   7D                     LD   A,L   
3F76   B4                     OR   H   
3F77   CA F2 3F               JP   Z,expectM_2936S131   
3F7A   CD 39 0C               CALL   printStr   
3F7D   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
3FA4   CD 39 0C               CALL   printStr   
3FA7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FB6   21 0A 00               LD   hl,10   
3FB9   E5                     PUSH   hl   
3FBA   E5                     PUSH   hl   
3FBB   CD 3E 0D               CALL   run   
3FBE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FC6   CD AF 0B               CALL   flushBuffer   
3FC9   CD 39 0C               CALL   printStr   
3FCC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FD9   E1                     POP   hl   
3FDA   E5                     PUSH   hl   
3FDB   E5                     PUSH   hl   
3FDC   CD 3E 0D               CALL   run   
3FDF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FEE   CD AF 0B               CALL   flushBuffer   
3FF1   76                     HALT      
3FF2                EXPECTM_2936S131:      
3FF2   E1                     POP   HL   
3FF3                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
3FF3   31 00 51               LD   SP,STACK   
3FF6   CD 6D 0C               CALL   coldInit   
3FF9   CD 74 4F               CALL   execStr   
3FFC   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
401D   CD AF 0B               CALL   flushBuffer   
4020   E1                     POP   HL   
4021   E5                     PUSH   HL   
4022   11 14 00               LD   DE,20   
4025   B7                     OR   A   
4026   ED 52                  SBC   HL,DE   
4028   7D                     LD   A,L   
4029   B4                     OR   H   
402A   CA A5 40               JP   Z,expectM_2937S132   
402D   CD 39 0C               CALL   printStr   
4030   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
4057   CD 39 0C               CALL   printStr   
405A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4069   21 14 00               LD   hl,20   
406C   E5                     PUSH   hl   
406D   E5                     PUSH   hl   
406E   CD 3E 0D               CALL   run   
4071   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4079   CD AF 0B               CALL   flushBuffer   
407C   CD 39 0C               CALL   printStr   
407F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
408C   E1                     POP   hl   
408D   E5                     PUSH   hl   
408E   E5                     PUSH   hl   
408F   CD 3E 0D               CALL   run   
4092   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40A1   CD AF 0B               CALL   flushBuffer   
40A4   76                     HALT      
40A5                EXPECTM_2937S132:      
40A5   E1                     POP   HL   
40A6                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
40A6   31 00 51               LD   SP,STACK   
40A9   CD 6D 0C               CALL   coldInit   
40AC   CD 74 4F               CALL   execStr   
40AF   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
40C7   CD AF 0B               CALL   flushBuffer   
40CA   E1                     POP   HL   
40CB   E5                     PUSH   HL   
40CC   11 06 00               LD   DE,6   
40CF   B7                     OR   A   
40D0   ED 52                  SBC   HL,DE   
40D2   7D                     LD   A,L   
40D3   B4                     OR   H   
40D4   CA 46 41               JP   Z,expectM_2938S133   
40D7   CD 39 0C               CALL   printStr   
40DA   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
40F8   CD 39 0C               CALL   printStr   
40FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
410A   21 06 00               LD   hl,6   
410D   E5                     PUSH   hl   
410E   E5                     PUSH   hl   
410F   CD 3E 0D               CALL   run   
4112   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
411A   CD AF 0B               CALL   flushBuffer   
411D   CD 39 0C               CALL   printStr   
4120   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
412D   E1                     POP   hl   
412E   E5                     PUSH   hl   
412F   E5                     PUSH   hl   
4130   CD 3E 0D               CALL   run   
4133   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4142   CD AF 0B               CALL   flushBuffer   
4145   76                     HALT      
4146                EXPECTM_2938S133:      
4146   E1                     POP   HL   
4147                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
4147   31 00 51               LD   SP,STACK   
414A   CD 6D 0C               CALL   coldInit   
414D   CD 74 4F               CALL   execStr   
4150   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
416B   CD AF 0B               CALL   flushBuffer   
416E   E1                     POP   HL   
416F   E5                     PUSH   HL   
4170   11 02 00               LD   DE,2   
4173   B7                     OR   A   
4174   ED 52                  SBC   HL,DE   
4176   7D                     LD   A,L   
4177   B4                     OR   H   
4178   CA ED 41               JP   Z,expectM_2939S134   
417B   CD 39 0C               CALL   printStr   
417E   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
419F   CD 39 0C               CALL   printStr   
41A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41B1   21 02 00               LD   hl,2   
41B4   E5                     PUSH   hl   
41B5   E5                     PUSH   hl   
41B6   CD 3E 0D               CALL   run   
41B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41C1   CD AF 0B               CALL   flushBuffer   
41C4   CD 39 0C               CALL   printStr   
41C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41D4   E1                     POP   hl   
41D5   E5                     PUSH   hl   
41D6   E5                     PUSH   hl   
41D7   CD 3E 0D               CALL   run   
41DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41E9   CD AF 0B               CALL   flushBuffer   
41EC   76                     HALT      
41ED                EXPECTM_2939S134:      
41ED   E1                     POP   HL   
41EE                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
41EE   31 00 51               LD   SP,STACK   
41F1   CD 6D 0C               CALL   coldInit   
41F4   CD 74 4F               CALL   execStr   
41F7   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
421D   CD AF 0B               CALL   flushBuffer   
4220   E1                     POP   HL   
4221   E5                     PUSH   HL   
4222   11 0A 00               LD   DE,10   
4225   B7                     OR   A   
4226   ED 52                  SBC   HL,DE   
4228   7D                     LD   A,L   
4229   B4                     OR   H   
422A   CA AA 42               JP   Z,expectM_2940S135   
422D   CD 39 0C               CALL   printStr   
4230   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
425C   CD 39 0C               CALL   printStr   
425F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
426E   21 0A 00               LD   hl,10   
4271   E5                     PUSH   hl   
4272   E5                     PUSH   hl   
4273   CD 3E 0D               CALL   run   
4276   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
427E   CD AF 0B               CALL   flushBuffer   
4281   CD 39 0C               CALL   printStr   
4284   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4291   E1                     POP   hl   
4292   E5                     PUSH   hl   
4293   E5                     PUSH   hl   
4294   CD 3E 0D               CALL   run   
4297   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
42A6   CD AF 0B               CALL   flushBuffer   
42A9   76                     HALT      
42AA                EXPECTM_2940S135:      
42AA   E1                     POP   HL   
42AB                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
42AB   31 00 51               LD   SP,STACK   
42AE   CD 6D 0C               CALL   coldInit   
42B1   CD 74 4F               CALL   execStr   
42B4   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
42E1   CD AF 0B               CALL   flushBuffer   
42E4   E1                     POP   HL   
42E5   E5                     PUSH   HL   
42E6   11 06 00               LD   DE,6   
42E9   B7                     OR   A   
42EA   ED 52                  SBC   HL,DE   
42EC   7D                     LD   A,L   
42ED   B4                     OR   H   
42EE   CA 75 43               JP   Z,expectM_2941S136   
42F1   CD 39 0C               CALL   printStr   
42F4   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
4327   CD 39 0C               CALL   printStr   
432A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4339   21 06 00               LD   hl,6   
433C   E5                     PUSH   hl   
433D   E5                     PUSH   hl   
433E   CD 3E 0D               CALL   run   
4341   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4349   CD AF 0B               CALL   flushBuffer   
434C   CD 39 0C               CALL   printStr   
434F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
435C   E1                     POP   hl   
435D   E5                     PUSH   hl   
435E   E5                     PUSH   hl   
435F   CD 3E 0D               CALL   run   
4362   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4371   CD AF 0B               CALL   flushBuffer   
4374   76                     HALT      
4375                EXPECTM_2941S136:      
4375   E1                     POP   HL   
4376                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +};^",3
4376   31 00 51               LD   SP,STACK   
4379   CD 6D 0C               CALL   coldInit   
437C   CD 74 4F               CALL   execStr   
437F   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/t :f{1 %f/br 2 +};^",0   
4394   CD AF 0B               CALL   flushBuffer   
4397   E1                     POP   HL   
4398   E5                     PUSH   HL   
4399   11 03 00               LD   DE,3   
439C   B7                     OR   A   
439D   ED 52                  SBC   HL,DE   
439F   7D                     LD   A,L   
43A0   B4                     OR   H   
43A1   CA 10 44               JP   Z,expectM_2942S137   
43A4   CD 39 0C               CALL   printStr   
43A7   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +};^"   
43C2   CD 39 0C               CALL   printStr   
43C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43D4   21 03 00               LD   hl,3   
43D7   E5                     PUSH   hl   
43D8   E5                     PUSH   hl   
43D9   CD 3E 0D               CALL   run   
43DC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43E4   CD AF 0B               CALL   flushBuffer   
43E7   CD 39 0C               CALL   printStr   
43EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43F7   E1                     POP   hl   
43F8   E5                     PUSH   hl   
43F9   E5                     PUSH   hl   
43FA   CD 3E 0D               CALL   run   
43FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
440C   CD AF 0B               CALL   flushBuffer   
440F   76                     HALT      
4410                EXPECTM_2942S137:      
4410   E1                     POP   HL   
4411                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +};^",1
4411   31 00 51               LD   SP,STACK   
4414   CD 6D 0C               CALL   coldInit   
4417   CD 74 4F               CALL   execStr   
441A   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/f :f{1 %f/br 2 +};^",0   
442F   CD AF 0B               CALL   flushBuffer   
4432   E1                     POP   HL   
4433   E5                     PUSH   HL   
4434   11 01 00               LD   DE,1   
4437   B7                     OR   A   
4438   ED 52                  SBC   HL,DE   
443A   7D                     LD   A,L   
443B   B4                     OR   H   
443C   CA AB 44               JP   Z,expectM_2943S138   
443F   CD 39 0C               CALL   printStr   
4442   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +};^"   
445D   CD 39 0C               CALL   printStr   
4460   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
446F   21 01 00               LD   hl,1   
4472   E5                     PUSH   hl   
4473   E5                     PUSH   hl   
4474   CD 3E 0D               CALL   run   
4477   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
447F   CD AF 0B               CALL   flushBuffer   
4482   CD 39 0C               CALL   printStr   
4485   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4492   E1                     POP   hl   
4493   E5                     PUSH   hl   
4494   E5                     PUSH   hl   
4495   CD 3E 0D               CALL   run   
4498   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44A7   CD AF 0B               CALL   flushBuffer   
44AA   76                     HALT      
44AB                EXPECTM_2943S138:      
44AB   E1                     POP   HL   
44AC                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
44AC   31 00 51               LD   SP,STACK   
44AF   CD 6D 0C               CALL   coldInit   
44B2   CD 74 4F               CALL   execStr   
44B5   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
44C1   CD AF 0B               CALL   flushBuffer   
44C4   E1                     POP   HL   
44C5   E5                     PUSH   HL   
44C6   11 00 00               LD   DE,NUL   
44C9   B7                     OR   A   
44CA   ED 52                  SBC   HL,DE   
44CC   7D                     LD   A,L   
44CD   B4                     OR   H   
44CE   CA 34 45               JP   Z,expectM_2944S139   
44D1   CD 39 0C               CALL   printStr   
44D4   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
44E6   CD 39 0C               CALL   printStr   
44E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44F8   21 00 00               LD   hl,NUL   
44FB   E5                     PUSH   hl   
44FC   E5                     PUSH   hl   
44FD   CD 3E 0D               CALL   run   
4500   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4508   CD AF 0B               CALL   flushBuffer   
450B   CD 39 0C               CALL   printStr   
450E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
451B   E1                     POP   hl   
451C   E5                     PUSH   hl   
451D   E5                     PUSH   hl   
451E   CD 3E 0D               CALL   run   
4521   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4530   CD AF 0B               CALL   flushBuffer   
4533   76                     HALT      
4534                EXPECTM_2944S139:      
4534   E1                     POP   HL   
4535                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4535   31 00 51               LD   SP,STACK   
4538   CD 6D 0C               CALL   coldInit   
453B   CD 74 4F               CALL   execStr   
453E   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
454A   CD AF 0B               CALL   flushBuffer   
454D   E1                     POP   HL   
454E   E5                     PUSH   HL   
454F   11 00 00               LD   DE,NUL   
4552   B7                     OR   A   
4553   ED 52                  SBC   HL,DE   
4555   7D                     LD   A,L   
4556   B4                     OR   H   
4557   CA BD 45               JP   Z,expectM_2945S140   
455A   CD 39 0C               CALL   printStr   
455D   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
456F   CD 39 0C               CALL   printStr   
4572   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4581   21 00 00               LD   hl,NUL   
4584   E5                     PUSH   hl   
4585   E5                     PUSH   hl   
4586   CD 3E 0D               CALL   run   
4589   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4591   CD AF 0B               CALL   flushBuffer   
4594   CD 39 0C               CALL   printStr   
4597   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45A4   E1                     POP   hl   
45A5   E5                     PUSH   hl   
45A6   E5                     PUSH   hl   
45A7   CD 3E 0D               CALL   run   
45AA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45B9   CD AF 0B               CALL   flushBuffer   
45BC   76                     HALT      
45BD                EXPECTM_2945S140:      
45BD   E1                     POP   HL   
45BE                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
45BE   31 00 51               LD   SP,STACK   
45C1   CD 6D 0C               CALL   coldInit   
45C4   CD 74 4F               CALL   execStr   
45C7   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
45D3   CD AF 0B               CALL   flushBuffer   
45D6   E1                     POP   HL   
45D7   E5                     PUSH   HL   
45D8   11 00 00               LD   DE,NUL   
45DB   B7                     OR   A   
45DC   ED 52                  SBC   HL,DE   
45DE   7D                     LD   A,L   
45DF   B4                     OR   H   
45E0   CA 46 46               JP   Z,expectM_2946S141   
45E3   CD 39 0C               CALL   printStr   
45E6   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
45F8   CD 39 0C               CALL   printStr   
45FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
460A   21 00 00               LD   hl,NUL   
460D   E5                     PUSH   hl   
460E   E5                     PUSH   hl   
460F   CD 3E 0D               CALL   run   
4612   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
461A   CD AF 0B               CALL   flushBuffer   
461D   CD 39 0C               CALL   printStr   
4620   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
462D   E1                     POP   hl   
462E   E5                     PUSH   hl   
462F   E5                     PUSH   hl   
4630   CD 3E 0D               CALL   run   
4633   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4642   CD AF 0B               CALL   flushBuffer   
4645   76                     HALT      
4646                EXPECTM_2946S141:      
4646   E1                     POP   HL   
4647                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4647   31 00 51               LD   SP,STACK   
464A   CD 6D 0C               CALL   coldInit   
464D   CD 74 4F               CALL   execStr   
4650   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
465C   CD AF 0B               CALL   flushBuffer   
465F   E1                     POP   HL   
4660   E5                     PUSH   HL   
4661   11 00 00               LD   DE,NUL   
4664   B7                     OR   A   
4665   ED 52                  SBC   HL,DE   
4667   7D                     LD   A,L   
4668   B4                     OR   H   
4669   CA CF 46               JP   Z,expectM_2947S142   
466C   CD 39 0C               CALL   printStr   
466F   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
4681   CD 39 0C               CALL   printStr   
4684   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4693   21 00 00               LD   hl,NUL   
4696   E5                     PUSH   hl   
4697   E5                     PUSH   hl   
4698   CD 3E 0D               CALL   run   
469B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46A3   CD AF 0B               CALL   flushBuffer   
46A6   CD 39 0C               CALL   printStr   
46A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46B6   E1                     POP   hl   
46B7   E5                     PUSH   hl   
46B8   E5                     PUSH   hl   
46B9   CD 3E 0D               CALL   run   
46BC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46CB   CD AF 0B               CALL   flushBuffer   
46CE   76                     HALT      
46CF                EXPECTM_2947S142:      
46CF   E1                     POP   HL   
46D0                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
46D0   31 00 51               LD   SP,STACK   
46D3   CD 6D 0C               CALL   coldInit   
46D6   CD 74 4F               CALL   execStr   
46D9   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
46E1   CD AF 0B               CALL   flushBuffer   
46E4   E1                     POP   HL   
46E5   E5                     PUSH   HL   
46E6   11 66 53               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
46E9   B7                     OR   A   
46EA   ED 52                  SBC   HL,DE   
46EC   7D                     LD   A,L   
46ED   B4                     OR   H   
46EE   CA 50 47               JP   Z,expectM_2948S143   
46F1   CD 39 0C               CALL   printStr   
46F4   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
4702   CD 39 0C               CALL   printStr   
4705   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4714   21 66 53               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4717   E5                     PUSH   hl   
4718   E5                     PUSH   hl   
4719   CD 3E 0D               CALL   run   
471C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4724   CD AF 0B               CALL   flushBuffer   
4727   CD 39 0C               CALL   printStr   
472A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4737   E1                     POP   hl   
4738   E5                     PUSH   hl   
4739   E5                     PUSH   hl   
473A   CD 3E 0D               CALL   run   
473D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
474C   CD AF 0B               CALL   flushBuffer   
474F   76                     HALT      
4750                EXPECTM_2948S143:      
4750   E1                     POP   HL   
4751                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
4751   31 00 51               LD   SP,STACK   
4754   CD 6D 0C               CALL   coldInit   
4757   CD 74 4F               CALL   execStr   
475A   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
4762   CD AF 0B               CALL   flushBuffer   
4765   E1                     POP   HL   
4766   E5                     PUSH   HL   
4767   11 34 53               LD   DE,VARS + ("Z"-"A"+1)*2   
476A   B7                     OR   A   
476B   ED 52                  SBC   HL,DE   
476D   7D                     LD   A,L   
476E   B4                     OR   H   
476F   CA D1 47               JP   Z,expectM_2949S144   
4772   CD 39 0C               CALL   printStr   
4775   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
4783   CD 39 0C               CALL   printStr   
4786   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4795   21 34 53               LD   hl,VARS + ("Z"-"A"+1)*2   
4798   E5                     PUSH   hl   
4799   E5                     PUSH   hl   
479A   CD 3E 0D               CALL   run   
479D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47A5   CD AF 0B               CALL   flushBuffer   
47A8   CD 39 0C               CALL   printStr   
47AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47B8   E1                     POP   hl   
47B9   E5                     PUSH   hl   
47BA   E5                     PUSH   hl   
47BB   CD 3E 0D               CALL   run   
47BE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47CD   CD AF 0B               CALL   flushBuffer   
47D0   76                     HALT      
47D1                EXPECTM_2949S144:      
47D1   E1                     POP   HL   
47D2                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
47D2   31 00 51               LD   SP,STACK   
47D5   CD 6D 0C               CALL   coldInit   
47D8   CD 74 4F               CALL   execStr   
47DB   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
47E3   CD AF 0B               CALL   flushBuffer   
47E6   E1                     POP   HL   
47E7   E5                     PUSH   HL   
47E8   11 32 53               LD   DE,VARS + ("Z"-"A")*2   
47EB   B7                     OR   A   
47EC   ED 52                  SBC   HL,DE   
47EE   7D                     LD   A,L   
47EF   B4                     OR   H   
47F0   CA 52 48               JP   Z,expectM_2950S145   
47F3   CD 39 0C               CALL   printStr   
47F6   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4804   CD 39 0C               CALL   printStr   
4807   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4816   21 32 53               LD   hl,VARS + ("Z"-"A")*2   
4819   E5                     PUSH   hl   
481A   E5                     PUSH   hl   
481B   CD 3E 0D               CALL   run   
481E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4826   CD AF 0B               CALL   flushBuffer   
4829   CD 39 0C               CALL   printStr   
482C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4839   E1                     POP   hl   
483A   E5                     PUSH   hl   
483B   E5                     PUSH   hl   
483C   CD 3E 0D               CALL   run   
483F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
484E   CD AF 0B               CALL   flushBuffer   
4851   76                     HALT      
4852                EXPECTM_2950S145:      
4852   E1                     POP   HL   
4853                          ;*Macro unroll:  test "'A' /ad", VARS
4853   31 00 51               LD   SP,STACK   
4856   CD 6D 0C               CALL   coldInit   
4859   CD 74 4F               CALL   execStr   
485C   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
4864   CD AF 0B               CALL   flushBuffer   
4867   E1                     POP   HL   
4868   E5                     PUSH   HL   
4869   11 00 53               LD   DE,VARS   
486C   B7                     OR   A   
486D   ED 52                  SBC   HL,DE   
486F   7D                     LD   A,L   
4870   B4                     OR   H   
4871   CA D3 48               JP   Z,expectM_2951S146   
4874   CD 39 0C               CALL   printStr   
4877   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4885   CD 39 0C               CALL   printStr   
4888   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4897   21 00 53               LD   hl,VARS   
489A   E5                     PUSH   hl   
489B   E5                     PUSH   hl   
489C   CD 3E 0D               CALL   run   
489F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48A7   CD AF 0B               CALL   flushBuffer   
48AA   CD 39 0C               CALL   printStr   
48AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48BA   E1                     POP   hl   
48BB   E5                     PUSH   hl   
48BC   E5                     PUSH   hl   
48BD   CD 3E 0D               CALL   run   
48C0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48CF   CD AF 0B               CALL   flushBuffer   
48D2   76                     HALT      
48D3                EXPECTM_2951S146:      
48D3   E1                     POP   HL   
48D4                          ;*Macro unroll:  test "-1. /b/vB 0#", $2D
48D4   31 00 51               LD   SP,STACK   
48D7   CD 6D 0C               CALL   coldInit   
48DA   CD 74 4F               CALL   execStr   
48DD   2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 DB   "-1. /b/vB 0#",0   
48EA   CD AF 0B               CALL   flushBuffer   
48ED   E1                     POP   HL   
48EE   E5                     PUSH   HL   
48EF   11 2D 00               LD   DE,$2D   
48F2   B7                     OR   A   
48F3   ED 52                  SBC   HL,DE   
48F5   7D                     LD   A,L   
48F6   B4                     OR   H   
48F7   CA 5E 49               JP   Z,expectM_2952S147   
48FA   CD 39 0C               CALL   printStr   
48FD   43 6F 64 65 3A 20 2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /b/vB 0#"   
4910   CD 39 0C               CALL   printStr   
4913   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4922   21 2D 00               LD   hl,$2D   
4925   E5                     PUSH   hl   
4926   E5                     PUSH   hl   
4927   CD 3E 0D               CALL   run   
492A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4932   CD AF 0B               CALL   flushBuffer   
4935   CD 39 0C               CALL   printStr   
4938   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4945   E1                     POP   hl   
4946   E5                     PUSH   hl   
4947   E5                     PUSH   hl   
4948   CD 3E 0D               CALL   run   
494B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
495A   CD AF 0B               CALL   flushBuffer   
495D   76                     HALT      
495E                EXPECTM_2952S147:      
495E   E1                     POP   HL   
495F                          ;*Macro unroll:  test {DQ,"A",DQ,".s /b/vB 0#"}, 65
495F   31 00 51               LD   SP,STACK   
4962   CD 6D 0C               CALL   coldInit   
4965   CD 74 4F               CALL   execStr   
4968   22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /b/vB 0#",0   
4977   CD AF 0B               CALL   flushBuffer   
497A   E1                     POP   HL   
497B   E5                     PUSH   HL   
497C   11 41 00               LD   DE,65   
497F   B7                     OR   A   
4980   ED 52                  SBC   HL,DE   
4982   7D                     LD   A,L   
4983   B4                     OR   H   
4984   CA ED 49               JP   Z,expectM_2953S148   
4987   CD 39 0C               CALL   printStr   
498A   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /b/vB 0#"   
499F   CD 39 0C               CALL   printStr   
49A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49B1   21 41 00               LD   hl,65   
49B4   E5                     PUSH   hl   
49B5   E5                     PUSH   hl   
49B6   CD 3E 0D               CALL   run   
49B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49C1   CD AF 0B               CALL   flushBuffer   
49C4   CD 39 0C               CALL   printStr   
49C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49D4   E1                     POP   hl   
49D5   E5                     PUSH   hl   
49D6   E5                     PUSH   hl   
49D7   CD 3E 0D               CALL   run   
49DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49E9   CD AF 0B               CALL   flushBuffer   
49EC   76                     HALT      
49ED                EXPECTM_2953S148:      
49ED   E1                     POP   HL   
49EE                          ;*Macro unroll:  test "123. /b/vB 1#", $32
49EE   31 00 51               LD   SP,STACK   
49F1   CD 6D 0C               CALL   coldInit   
49F4   CD 74 4F               CALL   execStr   
49F7   31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 DB   "123. /b/vB 1#",0   
4A05   CD AF 0B               CALL   flushBuffer   
4A08   E1                     POP   HL   
4A09   E5                     PUSH   HL   
4A0A   11 32 00               LD   DE,$32   
4A0D   B7                     OR   A   
4A0E   ED 52                  SBC   HL,DE   
4A10   7D                     LD   A,L   
4A11   B4                     OR   H   
4A12   CA 7A 4A               JP   Z,expectM_2954S149   
4A15   CD 39 0C               CALL   printStr   
4A18   43 6F 64 65 3A 20 31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /b/vB 1#"   
4A2C   CD 39 0C               CALL   printStr   
4A2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A3E   21 32 00               LD   hl,$32   
4A41   E5                     PUSH   hl   
4A42   E5                     PUSH   hl   
4A43   CD 3E 0D               CALL   run   
4A46   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A4E   CD AF 0B               CALL   flushBuffer   
4A51   CD 39 0C               CALL   printStr   
4A54   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A61   E1                     POP   hl   
4A62   E5                     PUSH   hl   
4A63   E5                     PUSH   hl   
4A64   CD 3E 0D               CALL   run   
4A67   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A76   CD AF 0B               CALL   flushBuffer   
4A79   76                     HALT      
4A7A                EXPECTM_2954S149:      
4A7A   E1                     POP   HL   
4A7B                          ;*Macro unroll:  test ":a{%a}; F=1F^", 1
4A7B   31 00 51               LD   SP,STACK   
4A7E   CD 6D 0C               CALL   coldInit   
4A81   CD 74 4F               CALL   execStr   
4A84   3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 DB   ":a{%a}; F=1F^",0   
4A92   CD AF 0B               CALL   flushBuffer   
4A95   E1                     POP   HL   
4A96   E5                     PUSH   HL   
4A97   11 01 00               LD   DE,1   
4A9A   B7                     OR   A   
4A9B   ED 52                  SBC   HL,DE   
4A9D   7D                     LD   A,L   
4A9E   B4                     OR   H   
4A9F   CA 07 4B               JP   Z,expectM_2955S150   
4AA2   CD 39 0C               CALL   printStr   
4AA5   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a}; F=1F^"   
4AB9   CD 39 0C               CALL   printStr   
4ABC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4ACB   21 01 00               LD   hl,1   
4ACE   E5                     PUSH   hl   
4ACF   E5                     PUSH   hl   
4AD0   CD 3E 0D               CALL   run   
4AD3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4ADB   CD AF 0B               CALL   flushBuffer   
4ADE   CD 39 0C               CALL   printStr   
4AE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AEE   E1                     POP   hl   
4AEF   E5                     PUSH   hl   
4AF0   E5                     PUSH   hl   
4AF1   CD 3E 0D               CALL   run   
4AF4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B03   CD AF 0B               CALL   flushBuffer   
4B06   76                     HALT      
4B07                EXPECTM_2955S150:      
4B07   E1                     POP   HL   
4B08                          ;*Macro unroll:  test "1 :b{:a{%a};};^F= 3F^",3
4B08   31 00 51               LD   SP,STACK   
4B0B   CD 6D 0C               CALL   coldInit   
4B0E   CD 74 4F               CALL   execStr   
4B11   31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a};};^F= 3F^",0   
4B27   CD AF 0B               CALL   flushBuffer   
4B2A   E1                     POP   HL   
4B2B   E5                     PUSH   HL   
4B2C   11 03 00               LD   DE,3   
4B2F   B7                     OR   A   
4B30   ED 52                  SBC   HL,DE   
4B32   7D                     LD   A,L   
4B33   B4                     OR   H   
4B34   CA A4 4B               JP   Z,expectM_2956S151   
4B37   CD 39 0C               CALL   printStr   
4B3A   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a};};^F= 3F^"   
4B56   CD 39 0C               CALL   printStr   
4B59   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B68   21 03 00               LD   hl,3   
4B6B   E5                     PUSH   hl   
4B6C   E5                     PUSH   hl   
4B6D   CD 3E 0D               CALL   run   
4B70   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B78   CD AF 0B               CALL   flushBuffer   
4B7B   CD 39 0C               CALL   printStr   
4B7E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B8B   E1                     POP   hl   
4B8C   E5                     PUSH   hl   
4B8D   E5                     PUSH   hl   
4B8E   CD 3E 0D               CALL   run   
4B91   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4BA0   CD AF 0B               CALL   flushBuffer   
4BA3   76                     HALT      
4BA4                EXPECTM_2956S151:      
4BA4   E1                     POP   HL   
4BA5                          ;*Macro unroll:  test "1 :b{:a{%a%b-};};^F= 3F^",2
4BA5   31 00 51               LD   SP,STACK   
4BA8   CD 6D 0C               CALL   coldInit   
4BAB   CD 74 4F               CALL   execStr   
4BAE   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-};};^F= 3F^",0   
4BC7   CD AF 0B               CALL   flushBuffer   
4BCA   E1                     POP   HL   
4BCB   E5                     PUSH   HL   
4BCC   11 02 00               LD   DE,2   
4BCF   B7                     OR   A   
4BD0   ED 52                  SBC   HL,DE   
4BD2   7D                     LD   A,L   
4BD3   B4                     OR   H   
4BD4   CA 47 4C               JP   Z,expectM_2957S152   
4BD7   CD 39 0C               CALL   printStr   
4BDA   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-};};^F= 3F^"   
4BF9   CD 39 0C               CALL   printStr   
4BFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C0B   21 02 00               LD   hl,2   
4C0E   E5                     PUSH   hl   
4C0F   E5                     PUSH   hl   
4C10   CD 3E 0D               CALL   run   
4C13   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C1B   CD AF 0B               CALL   flushBuffer   
4C1E   CD 39 0C               CALL   printStr   
4C21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C2E   E1                     POP   hl   
4C2F   E5                     PUSH   hl   
4C30   E5                     PUSH   hl   
4C31   CD 3E 0D               CALL   run   
4C34   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C43   CD AF 0B               CALL   flushBuffer   
4C46   76                     HALT      
4C47                EXPECTM_2957S152:      
4C47   E1                     POP   HL   
4C48                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",1
4C48   31 00 51               LD   SP,STACK   
4C4B   CD 6D 0C               CALL   coldInit   
4C4E   CD 74 4F               CALL   execStr   
4C51   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",0   
4C76   CD AF 0B               CALL   flushBuffer   
4C79   E1                     POP   HL   
4C7A   E5                     PUSH   HL   
4C7B   11 01 00               LD   DE,1   
4C7E   B7                     OR   A   
4C7F   ED 52                  SBC   HL,DE   
4C81   7D                     LD   A,L   
4C82   B4                     OR   H   
4C83   CA 02 4D               JP   Z,expectM_2958S153   
4C86   CD 39 0C               CALL   printStr   
4C89   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^"   
4CB4   CD 39 0C               CALL   printStr   
4CB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CC6   21 01 00               LD   hl,1   
4CC9   E5                     PUSH   hl   
4CCA   E5                     PUSH   hl   
4CCB   CD 3E 0D               CALL   run   
4CCE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4CD6   CD AF 0B               CALL   flushBuffer   
4CD9   CD 39 0C               CALL   printStr   
4CDC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CE9   E1                     POP   hl   
4CEA   E5                     PUSH   hl   
4CEB   E5                     PUSH   hl   
4CEC   CD 3E 0D               CALL   run   
4CEF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4CFE   CD AF 0B               CALL   flushBuffer   
4D01   76                     HALT      
4D02                EXPECTM_2958S153:      
4D02   E1                     POP   HL   
4D03                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",1
4D03   31 00 51               LD   SP,STACK   
4D06   CD 6D 0C               CALL   coldInit   
4D09   CD 74 4F               CALL   execStr   
4D0C   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",0   
4D31   CD AF 0B               CALL   flushBuffer   
4D34   E1                     POP   HL   
4D35   E5                     PUSH   HL   
4D36   11 01 00               LD   DE,1   
4D39   B7                     OR   A   
4D3A   ED 52                  SBC   HL,DE   
4D3C   7D                     LD   A,L   
4D3D   B4                     OR   H   
4D3E   CA BD 4D               JP   Z,expectM_2959S154   
4D41   CD 39 0C               CALL   printStr   
4D44   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^"   
4D6F   CD 39 0C               CALL   printStr   
4D72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D81   21 01 00               LD   hl,1   
4D84   E5                     PUSH   hl   
4D85   E5                     PUSH   hl   
4D86   CD 3E 0D               CALL   run   
4D89   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4D91   CD AF 0B               CALL   flushBuffer   
4D94   CD 39 0C               CALL   printStr   
4D97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DA4   E1                     POP   hl   
4DA5   E5                     PUSH   hl   
4DA6   E5                     PUSH   hl   
4DA7   CD 3E 0D               CALL   run   
4DAA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4DB9   CD AF 0B               CALL   flushBuffer   
4DBC   76                     HALT      
4DBD                EXPECTM_2959S154:      
4DBD   E1                     POP   HL   
4DBE                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",2
4DBE   31 00 51               LD   SP,STACK   
4DC1   CD 6D 0C               CALL   coldInit   
4DC4   CD 74 4F               CALL   execStr   
4DC7   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",0   
4DF9   CD AF 0B               CALL   flushBuffer   
4DFC   E1                     POP   HL   
4DFD   E5                     PUSH   HL   
4DFE   11 02 00               LD   DE,2   
4E01   B7                     OR   A   
4E02   ED 52                  SBC   HL,DE   
4E04   7D                     LD   A,L   
4E05   B4                     OR   H   
4E06   CA 92 4E               JP   Z,expectM_2960S155   
4E09   CD 39 0C               CALL   printStr   
4E0C   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^"   
4E44   CD 39 0C               CALL   printStr   
4E47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E56   21 02 00               LD   hl,2   
4E59   E5                     PUSH   hl   
4E5A   E5                     PUSH   hl   
4E5B   CD 3E 0D               CALL   run   
4E5E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4E66   CD AF 0B               CALL   flushBuffer   
4E69   CD 39 0C               CALL   printStr   
4E6C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E79   E1                     POP   hl   
4E7A   E5                     PUSH   hl   
4E7B   E5                     PUSH   hl   
4E7C   CD 3E 0D               CALL   run   
4E7F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4E8E   CD AF 0B               CALL   flushBuffer   
4E91   76                     HALT      
4E92                EXPECTM_2960S155:      
4E92   E1                     POP   HL   
4E93                          ;*Macro unroll:  test "$1000 0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe", $1000
4E93   31 00 51               LD   SP,STACK   
4E96   CD 6D 0C               CALL   coldInit   
4E99   CD 74 4F               CALL   execStr   
4E9C   24 31 30 30 30 20 30 20 31 30 20 31 20 2F 72 67 20 3A 61 7B 25 61 20 31 20 2B 20 31 30 20 2A 7D 3B 20 2F 6D 70 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 65 00 DB   "$1000 0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe",0   
4ECF   CD AF 0B               CALL   flushBuffer   
4ED2   E1                     POP   HL   
4ED3   E5                     PUSH   HL   
4ED4   11 00 10               LD   DE,$1000   
4ED7   B7                     OR   A   
4ED8   ED 52                  SBC   HL,DE   
4EDA   7D                     LD   A,L   
4EDB   B4                     OR   H   
4EDC   CA 69 4F               JP   Z,expectM_2961S156   
4EDF   CD 39 0C               CALL   printStr   
4EE2   43 6F 64 65 3A 20 24 31 30 30 30 20 30 20 31 30 20 31 20 2F 72 67 20 3A 61 7B 25 61 20 31 20 2B 20 31 30 20 2A 7D 3B 20 2F 6D 70 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 65 00 .CSTR   "Code: ","$1000 0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe"   
4F1B   CD 39 0C               CALL   printStr   
4F1E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F2D   21 00 10               LD   hl,$1000   
4F30   E5                     PUSH   hl   
4F31   E5                     PUSH   hl   
4F32   CD 3E 0D               CALL   run   
4F35   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4F3D   CD AF 0B               CALL   flushBuffer   
4F40   CD 39 0C               CALL   printStr   
4F43   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F50   E1                     POP   hl   
4F51   E5                     PUSH   hl   
4F52   E5                     PUSH   hl   
4F53   CD 3E 0D               CALL   run   
4F56   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4F65   CD AF 0B               CALL   flushBuffer   
4F68   76                     HALT      
4F69                EXPECTM_2961S156:      
4F69   E1                     POP   HL   
4F6A                             ; 
4F6A   CD 39 0C               CALL   printStr   
4F6D   44 6F 6E 65 21 00      .CSTR   "Done!"   
4F73   76                     HALT      
4F74                             ; executes a null teminated string (null executes exit_)
4F74                             ; the string should be immedaitely following the call
4F74                EXECSTR:      ; create a root stack frame
4F74   C1                     POP   bc   ; bc = code*
4F75   0B                     DEC   bc   ; dec to prepare for next routine
4F76   11 00 00               LD   de,0   
4F79   D5                     PUSH   de   ; push fake IP
4F7A   D5                     PUSH   de   ; push null arg_list*
4F7B   D5                     PUSH   de   ; push null first_arg*
4F7C   D5                     PUSH   de   ; push fake BP
4F7D   DD E9                  JP   (ix)   
4F7F                STKSIZE:   EQU   $100   ; Stack size
4F7F                TIBSIZE:   EQU   $100   ; 256 bytes
4F7F                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4F7F                          ALIGN   $100   
5000                          DS   STKSIZE   
5100                STACK:       
5100                          ALIGN   $100   
5100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5200                          ALIGN   $100   
5200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5300                          ALIGN   $100   
5300                VARS:        
5300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
53D0                RESTARTS:      
53D0                RST08:    DS   2   
53D2                RST10:    DS   2   
53D4                RST18:    DS   2   
53D6                RST20:    DS   2   
53D8                RST28:    DS   2   
53DA                RST30:    DS   2   ; 
53DC                BAUD:     DS   2   ; 
53DE                INTVEC:   DS   2   ; 
53E0                NMIVEC:   DS   2   ; 
53E2                GETCVEC:   DS   2   ; 
53E4                PUTCVEC:   DS   2   ; 
53E6                SYSVARS:      
53E6                             ; initialised sys variables (preserved)
53E6                VDATAWIDTH:   DS   2   ; 
53E8                VNUMBASE:   DS   2   ; 
53EA                VTIBPTR:   DS   2   ; 
53EC                VBUFPTR:   DS   2   ; 
53EE                VNEXT:    DS   2   ; 
53F0                VHEAPPTR:   DS   2   ; 
53F2                VRECUR:   DS   2   ; 
53F4                             ; uninitialised sys variables (preserved)
53F4                VPOINTER:   DS   2   ; 
53F6                VREMAIN:   DS   2   ; 
53F8                VSAVEDIP:   DS   2   ; 
53FA                VSAVEDSP:   DS   2   ; 
53FC                VSAVEDNEXT:   DS   2   ; 
53FE                VSAVEDBP:   DS   2   ; 
5400                             ; uninitialised sys variables (unpreserved)
5400                VTEMP1:   DS   2   ; 
5402                VTEMP2:   DS   2   ; 
5404                VLASTDEF:   DS   2   ; 
5406                TBPTR:    DS   2   ; reserved for tests
5408                TITLEBUF:   DS   20   
541C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 42 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0BAD DEFINED AT LINE 1939 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 163 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2181 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 46 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 147 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
PLUS_:              0204 DEFINED AT LINE 167 IN MAIN.asm
ADD:                0204 DEFINED AT LINE 168 IN MAIN.asm
ADD1:               020F DEFINED AT LINE 176 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD3:               0213 DEFINED AT LINE 181 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
ADD4:               021D DEFINED AT LINE 189 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
AMPER_:             0220 DEFINED AT LINE 192 IN MAIN.asm
AND:                0220 DEFINED AT LINE 193 IN MAIN.asm
AND1:               0227 DEFINED AT LINE 201 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
PIPE_:              022B DEFINED AT LINE 206 IN MAIN.asm
OR:                 022B DEFINED AT LINE 207 IN MAIN.asm
AT_:                0234 DEFINED AT LINE 220 IN MAIN.asm
ADDR:               0234 DEFINED AT LINE 221 IN MAIN.asm
BANG_:              023E DEFINED AT LINE 226 IN MAIN.asm
NOT:                0248 DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
MINUS_:             024E DEFINED AT LINE 239 IN MAIN.asm
SUB:                0259 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SUB1:               0263 DEFINED AT LINE 254 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
NUM_:               026B DEFINED AT LINE 262 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
EQ_:                026E DEFINED AT LINE 265 IN MAIN.asm
EQ0_:               0277 DEFINED AT LINE 272 IN MAIN.asm
EQ1:                0278 DEFINED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 237 IN MAIN.asm
GT_:                027B DEFINED AT LINE 278 IN MAIN.asm
LT_:                0286 DEFINED AT LINE 286 IN MAIN.asm
LT1:                028F DEFINED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 285 IN MAIN.asm
EQUALS:             0296 DEFINED AT LINE 301 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
NOTEQUALS:          029D DEFINED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
LESSTHANEQ:         02A4 DEFINED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 295 IN MAIN.asm
LESSTHAN:           02A9 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
LESSTHAN1:          02AE DEFINED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 318 IN MAIN.asm
TRUE1:              02B1 DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 304 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
NULL1:              02B7 DEFINED AT LINE 334 IN MAIN.asm
FALSE1:             02B7 DEFINED AT LINE 335 IN MAIN.asm
                    > USED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
NOP_:               02BB DEFINED AT LINE 338 IN MAIN.asm
RPAREN_:            02BD DEFINED AT LINE 340 IN MAIN.asm
DOLLAR_:            02C0 DEFINED AT LINE 342 IN MAIN.asm
LBRACK_:            02C3 DEFINED AT LINE 344 IN MAIN.asm
RBRACK_:            02C6 DEFINED AT LINE 346 IN MAIN.asm
PERCENT_:           02C9 DEFINED AT LINE 348 IN MAIN.asm
LPAREN_:            02CC DEFINED AT LINE 350 IN MAIN.asm
LBRACE_:            02CC DEFINED AT LINE 351 IN MAIN.asm
RBRACE_:            02CF DEFINED AT LINE 353 IN MAIN.asm
TICK_:              02D2 DEFINED AT LINE 355 IN MAIN.asm
SEMICOLON_:         02D5 DEFINED AT LINE 357 IN MAIN.asm
DOT_:               02D8 DEFINED AT LINE 359 IN MAIN.asm
COLON_:             02DB DEFINED AT LINE 361 IN MAIN.asm
UPCASE_:            02DE DEFINED AT LINE 363 IN MAIN.asm
LOWCASE_:           02E1 DEFINED AT LINE 365 IN MAIN.asm
QUESTION_:          02E4 DEFINED AT LINE 367 IN MAIN.asm
STAR_:              02E7 DEFINED AT LINE 369 IN MAIN.asm
HASH_:              02EA DEFINED AT LINE 371 IN MAIN.asm
CARET_:             02ED DEFINED AT LINE 373 IN MAIN.asm
COMMA_:             02F0 DEFINED AT LINE 375 IN MAIN.asm
DQUOTE_:            02F3 DEFINED AT LINE 377 IN MAIN.asm
BACKSLASH_:         02F6 DEFINED AT LINE 379 IN MAIN.asm
UNDERSCORE_:        02F9 DEFINED AT LINE 381 IN MAIN.asm
TILDE_:             02FC DEFINED AT LINE 383 IN MAIN.asm
SLASH_:             02FF DEFINED AT LINE 385 IN MAIN.asm
SLASH:              0301 DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
COMMAND:            0301 DEFINED AT LINE 394 IN MAIN.asm
COMMAND_A_:         0327 DEFINED AT LINE 429 IN MAIN.asm
COMMAND_B_:         0334 DEFINED AT LINE 440 IN MAIN.asm
COMMAND_F_:         033F DEFINED AT LINE 449 IN MAIN.asm
COMMAND_I_:         0342 DEFINED AT LINE 452 IN MAIN.asm
COMMAND_M_:         034B DEFINED AT LINE 459 IN MAIN.asm
COMMAND_P_:         034E DEFINED AT LINE 462 IN MAIN.asm
COMMAND_Q_:         0357 DEFINED AT LINE 469 IN MAIN.asm
COMMAND_R_:         0360 DEFINED AT LINE 476 IN MAIN.asm
COMMAND_V_:         0363 DEFINED AT LINE 479 IN MAIN.asm
COMMAND_NOP_:       0366 DEFINED AT LINE 482 IN MAIN.asm
DECIMAL_:           0368 DEFINED AT LINE 485 IN MAIN.asm
DECIMAL1:           036B DEFINED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
DIV_:               0370 DEFINED AT LINE 491 IN MAIN.asm
ERROR1_:            0374 DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 744 IN MAIN.asm
HEXADECIMAL_:       0377 DEFINED AT LINE 498 IN MAIN.asm
KEY_:               037D DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
OUTPUT_:            0380 DEFINED AT LINE 505 IN MAIN.asm
TRUE_:              0383 DEFINED AT LINE 508 IN MAIN.asm
WORDS_:             0386 DEFINED AT LINE 511 IN MAIN.asm
XOR_:               0389 DEFINED AT LINE 514 IN MAIN.asm
XOR1:               038A DEFINED AT LINE 516 IN MAIN.asm
ABSOLUTE_:          0394 DEFINED AT LINE 529 IN MAIN.asm
ADDROF_:            03A1 DEFINED AT LINE 544 IN MAIN.asm
ADDROF1:            03B5 DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 552 IN MAIN.asm
ADDROF2:            03C0 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
ARRAYSIZE_:         03C2 DEFINED AT LINE 570 IN MAIN.asm
BREAK_:             03CA DEFINED AT LINE 580 IN MAIN.asm
COLDSTART_:         03CD DEFINED AT LINE 584 IN MAIN.asm
BYTES_:             03D0 DEFINED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
BYTES1:             03D3 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
INPUT_:             03D8 DEFINED AT LINE 596 IN MAIN.asm
PRINTCHARS_:        03E3 DEFINED AT LINE 609 IN MAIN.asm
QUIT_:              03EA DEFINED AT LINE 616 IN MAIN.asm
QUIT1:              03F1 DEFINED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
WORDS:              03F4 DEFINED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
COMMENT:            03FA DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
COMMAND_F:          0403 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
FOREACH_:           041A DEFINED AT LINE 665 IN MAIN.asm
FLUSH_:             041D DEFINED AT LINE 670 IN MAIN.asm
FUNCSRC_:           0422 DEFINED AT LINE 674 IN MAIN.asm
F1_:                0425 DEFINED AT LINE 677 IN MAIN.asm
F2_:                0428 DEFINED AT LINE 680 IN MAIN.asm
F3_:                042B DEFINED AT LINE 683 IN MAIN.asm
F4_:                042E DEFINED AT LINE 686 IN MAIN.asm
FZ_:                0431 DEFINED AT LINE 689 IN MAIN.asm
FALSE_:             0434 DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
COMMAND_M:          0437 DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
MAP_:               0440 DEFINED AT LINE 702 IN MAIN.asm
COMMAND_R:          0443 DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
RECUR_:             0450 DEFINED AT LINE 716 IN MAIN.asm
REMAIN_:            0456 DEFINED AT LINE 721 IN MAIN.asm
RANGESRC_:          045C DEFINED AT LINE 726 IN MAIN.asm
COMMAND_V:          045F DEFINED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
CONSTBUFSTART_:     0472 DEFINED AT LINE 746 IN MAIN.asm
CONSTHEAPSTART_:    0477 DEFINED AT LINE 750 IN MAIN.asm
CONSTTIBSTART_:     047C DEFINED AT LINE 754 IN MAIN.asm
VARBUFPTR_:         0481 DEFINED AT LINE 758 IN MAIN.asm
VARHEAPPTR_:        048A DEFINED AT LINE 763 IN MAIN.asm
VARTIBPTR_:         0493 DEFINED AT LINE 768 IN MAIN.asm
VARIABLE:           049C DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
CONSTANT:           049F DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
DOT:                04A2 DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
DOTNUMBER_:         04B1 DEFINED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
DOTSTRING_:         04BC DEFINED AT LINE 803 IN MAIN.asm
DOTSTRING0:         04C3 DEFINED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
DOTSTRING1:         04C9 DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
DOTCHAR_:           04D6 DEFINED AT LINE 822 IN MAIN.asm
DOTXCHARS_:         04DB DEFINED AT LINE 828 IN MAIN.asm
DOTXCHARS0:         04DC DEFINED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
DOTXCHARS1:         04E5 DEFINED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
DOTXCHARS2:         04ED DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
FOREACH:            04F7 DEFINED AT LINE 32
                    > USED AT LINE 666 IN MAIN.asm
FOREACHM_1327S858:  0505 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0544 DEFINED AT LINE 32
                    > USED AT LINE 675 IN MAIN.asm
FUNCSRCM_1342S874:  0550 DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           057F DEFINED AT LINE 32
DOTARRAYM_1352S885: 058D DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                05C7 DEFINED AT LINE 32
                    > USED AT LINE 703 IN MAIN.asm
MAPM_1359S893:      05D4 DEFINED AT LINE 39
                    > USED AT LINE 35
RANGESRC:           060B DEFINED AT LINE 32
                    > USED AT LINE 727 IN MAIN.asm
RANGESRCM_1373S908: 061A DEFINED AT LINE 39
                    > USED AT LINE 35
BACKSLASH:          068D DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
UNDERSCORE:         068D DEFINED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
TILDE:              068D DEFINED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 384 IN MAIN.asm
COMMA:              068D DEFINED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
PERCENT:            068F DEFINED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
ARG:                068F DEFINED AT LINE 944 IN MAIN.asm
ARG0:               06AB DEFINED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
ARG0A:              06B4 DEFINED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
ARG1:               06B9 DEFINED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
ARG1A:              06C1 DEFINED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
LBRACK:             06C4 DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
ARRAYSTART:         06C4 DEFINED AT LINE 986 IN MAIN.asm
RBRACK:             06E0 DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
ARRAYEND:           06E0 DEFINED AT LINE 1001 IN MAIN.asm
ARRAYEND1:          06FC DEFINED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
ARRAYEND2:          070C DEFINED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
ARRAYEND3:          0711 DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1017 IN MAIN.asm
HASH:               0730 DEFINED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
ARRAYINDEX:         0730 DEFINED AT LINE 1056 IN MAIN.asm
ARRAYINDEX0:        0738 DEFINED AT LINE 1062 IN MAIN.asm
ARRAYINDEX1:        0739 DEFINED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
ARRAYINDEX2:        0745 DEFINED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
COLON:              0748 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
ARGLIST:            0748 DEFINED AT LINE 1082 IN MAIN.asm
ARGLIST1:           0752 DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
ARGLIST1A:          075A DEFINED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
ARGLIST2:           0762 DEFINED AT LINE 1100 IN MAIN.asm
ARGLIST3:           076A DEFINED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
ARGLIST4:           076D DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
ARGLIST5:           0773 DEFINED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
ASSIGN:             077E DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
ASSIGN0:            0780 DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
ASSIGNX:            0781 DEFINED AT LINE 1133 IN MAIN.asm
ASSIGN1:            078D DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
LBRACE:             078F DEFINED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
BLOCKSTART:         078F DEFINED AT LINE 1145 IN MAIN.asm
BLOCKSTART1:        0793 DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
BLOCKSTART2:        07BF DEFINED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
BLOCKSTART3:        07C2 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
BLOCKSTART4:        07CA DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
BLOCKSTART5:        07CD DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
BLOCKSTART6:        07F5 DEFINED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
RBRACE:             07F8 DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
BLOCKEND:           07F8 DEFINED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
BLOCKEND1:          082A DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
BLOCKEND2:          0836 DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
BLOCKEND3:          0848 DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
BLOCKEND4:          085C DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
BREAK:              0865 DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
BREAK1:             086C DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
TICK:               087F DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 356 IN MAIN.asm
CHAR:               087F DEFINED AT LINE 1290 IN MAIN.asm
CHAR1:              0882 DEFINED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1303 IN MAIN.asm
CHAR2:              088E DEFINED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
CHAR3:              0891 DEFINED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
SEMICOLON:          0894 DEFINED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
CREATEFUNC:         0894 DEFINED AT LINE 1311 IN MAIN.asm
CREATEFUNC0:        08AF DEFINED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
CREATEFUNC1:        08C7 DEFINED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
CREATEFUNC2:        08DA DEFINED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
CREATEFUNC2A:       08F9 DEFINED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1368 IN MAIN.asm
CREATEFUNC3:        0908 DEFINED AT LINE 1393 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
CREATEFUNC4:        0913 DEFINED AT LINE 1404 IN MAIN.asm
CREATEFUNC5:        0914 DEFINED AT LINE 1406 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
DIV:                0930 DEFINED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
BUFFERDEC:          0941 DEFINED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
BUFFERDEC0:         095B DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
BUFFERDEC1:         096B DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1459 IN MAIN.asm
BUFFERDEC2:         098B DEFINED AT LINE 1485 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
BUFFERDEC3:         098D DEFINED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
BUFFERDEC4:         099D DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
BUFFERDEC5:         099E DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
BUFFERHEX:          09A7 DEFINED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
BUFFERHEX1:         09C8 DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
BUFFERHEX2:         09D1 DEFINED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
DIVIDE:             09DF DEFINED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
DIVIDE1:            09E4 DEFINED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
DIVIDE2:            09F1 DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
DIVIDE3:            09F2 DEFINED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
FZ:                 09F8 DEFINED AT LINE 1572 IN MAIN.asm
                    > USED AT LINE 690 IN MAIN.asm
CARET:              0A05 DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
GO:                 0A05 DEFINED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0A06 DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
GO2:                0A0C DEFINED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 1589 IN MAIN.asm
GOBLOCK:            0A17 DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
GOBLOCK2:           0A3C DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1697 IN MAIN.asm
GOBLOCK3:           0A46 DEFINED AT LINE 1622 IN MAIN.asm
GOFUNC:             0A4A DEFINED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
GOFUNC1:            0A63 DEFINED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
GOFUNC2:            0A69 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
GOFUNC3:            0A74 DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
GOFUNC4:            0A8C DEFINED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
GOFUNC5:            0A8F DEFINED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
GOFUNC6:            0A92 DEFINED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
GOFUNC7:            0A95 DEFINED AT LINE 1685 IN MAIN.asm
GOFUNC8:            0A99 DEFINED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
DOLLAR:             0AA4 DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
HEXNUM:             0AA4 DEFINED AT LINE 1700 IN MAIN.asm
HEXNUM1:            0AA7 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1719 IN MAIN.asm
HEXNUM2:            0AAF DEFINED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
UPCASE:             0AC1 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
LOWCASE:            0AC6 DEFINED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
IDENT1:             0ACB DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1724 IN MAIN.asm
QUESTION:           0AD8 DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
IF:                 0AD8 DEFINED AT LINE 1743 IN MAIN.asm
IFTE:               0AE4 DEFINED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
IFTE1:              0AE5 DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
KEY:                0AF1 DEFINED AT LINE 1765 IN MAIN.asm
OUTPUT:             0AFA DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
STAR:               0B03 DEFINED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
MUL:                0B03 DEFINED AT LINE 1784 IN MAIN.asm
MUL2:               0B05 DEFINED AT LINE 1787 IN MAIN.asm
MUL3:               0B0D DEFINED AT LINE 1792 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
NUM:                0B1F DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
NUM0:               0B28 DEFINED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
NUM1:               0B29 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
NUM2:               0B41 DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
NUM3:               0B4C DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
RPAREN:             0B4F DEFINED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
SHIFTLEFT:          0B57 DEFINED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
SHIFTLEFT1:         0B5F DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
SHIFTLEFT2:         0B60 DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
SHIFTRIGHT:         0B67 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
SHIFTRIGHT1:        0B6F DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
SHIFTRIGHT2:        0B73 DEFINED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
DQUOTE:             0B7A DEFINED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
STRING:             0B7A DEFINED AT LINE 1887 IN MAIN.asm
STRING1:            0B83 DEFINED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
STRING2:            0B86 DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
STRING3:            0B8F DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
PRINTCHARS1:        0BA2 DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
PRINTCHARS2:        0BA8 DEFINED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
FILTER:             0BAD DEFINED AT LINE 1938 IN MAIN.asm
FLUSHBUFFER:        0BAF DEFINED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 2137 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
COMMANDTABLE:       0BC6 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
COMMANDTABLE1:      0BD0 DEFINED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
COMMANDTABLE2:      0BD5 DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
JUMPTABLE:          0BDA DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
JUMPTABLE0:         0BDC DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
JUMPTABLE1:         0BE8 DEFINED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
JUMPTABLE2:         0BEB DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
PRTSTR0:            0BEE DEFINED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
PRTSTR:             0BF2 DEFINED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
NESTING:            0BF7 DEFINED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2159 IN MAIN.asm
                    > USED AT LINE 2217 IN MAIN.asm
NESTING0:           0C01 DEFINED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
NESTING1A:          0C08 DEFINED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
NESTING1:           0C0B DEFINED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
NESTING2:           0C1A DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
NESTING3:           0C1C DEFINED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
NESTING4:           0C27 DEFINED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
PROMPT:             0C29 DEFINED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
CRLF:               0C32 DEFINED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
PRINTSTR:           0C39 DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 160
INIT:               0C40 DEFINED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2130 IN MAIN.asm
INIT1:              0C48 DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
WARMINIT:           0C50 DEFINED AT LINE 2093 IN MAIN.asm
COLDBOOT0:          0C63 DEFINED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
COLDINIT:           0C6D DEFINED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0C7E DEFINED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
COLDSTART:          0C8B DEFINED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
START:              0C94 DEFINED AT LINE 2128 IN MAIN.asm
START1:             0C9A DEFINED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
INTERPRET:          0CA0 DEFINED AT LINE 2135 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2303 IN MAIN.asm
INTERPRET2:         0CAF DEFINED AT LINE 2144 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 2289 IN MAIN.asm
INTERPRET3:         0CB7 DEFINED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
INTERPRET4:         0CC2 DEFINED AT LINE 2161 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
INTERPRET5:         0CC7 DEFINED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
INTERPRET5A:        0CE5 DEFINED AT LINE 2205 IN MAIN.asm
INTERPRET6:         0CE7 DEFINED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
INTERPRET7:         0CF5 DEFINED AT LINE 2220 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
INTERPRET8:         0D08 DEFINED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
NEXT:               0D23 DEFINED AT LINE 2248 IN MAIN.asm
                    > USED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 2252 IN MAIN.asm
NEXT1:              0D33 DEFINED AT LINE 2260 IN MAIN.asm
                    > USED AT LINE 2253 IN MAIN.asm
EXIT:               0D3A DEFINED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
RUN:                0D3E DEFINED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR1:             0D42 DEFINED AT LINE 2274 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
ERROR:              0D46 DEFINED AT LINE 2277 IN MAIN.asm
BACKSPACE_:         0D59 DEFINED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 2182 IN MAIN.asm
EDIT_:              0D69 DEFINED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
REEDIT_:            0D81 DEFINED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2184 IN MAIN.asm
PRINTSTACK_:        0D84 DEFINED AT LINE 2300 IN MAIN.asm
F1:                 0D8E DEFINED AT LINE 32
                    > USED AT LINE 678 IN MAIN.asm
F1M_2825S12:        0D99 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0D9A DEFINED AT LINE 32
                    > USED AT LINE 681 IN MAIN.asm
F2M_2827S15:        0DA5 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0DA6 DEFINED AT LINE 32
                    > USED AT LINE 684 IN MAIN.asm
F3M_2829S18:        0DB1 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0DB2 DEFINED AT LINE 32
                    > USED AT LINE 687 IN MAIN.asm
F4M_2831S21:        0DBD DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         0E00 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_2842S37:    0E76 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2843S38:    0EED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2844S39:    0F62 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2845S40:    0FD7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2846S41:    104C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2847S42:    10C1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2848S43:    1138 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2849S44:    11B1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2850S45:    1228 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2851S46:    129F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2852S47:    1318 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2853S48:    1393 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2854S49:    140C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2855S50:    1485 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2856S51:    1504 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2857S52:    1583 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2858S53:    1600 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2859S54:    1681 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2860S55:    1706 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2861S56:    1789 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2862S57:    1806 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2863S58:    188B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2864S59:    190C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2865S60:    1989 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2866S61:    1A06 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2867S62:    1A8B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2868S63:    1B08 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2869S64:    1B85 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2870S65:    1C04 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2871S66:    1C93 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2872S67:    1D10 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S68:    1D95 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S69:    1E12 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S70:    1E9D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S71:    1F28 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S72:    1FB3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S73:    203E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S74:    20C3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S75:    2140 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S76:    21BF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S77:    223E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S78:    22BB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S79:    2338 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S80:    23B5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S81:    2432 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S82:    24AF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S83:    252C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S84:    25A9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S85:    2626 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S86:    26A5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S87:    2724 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2893S88:    27A3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2894S89:    2824 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2895S90:    28A5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2896S91:    2920 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2897S92:    299B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2898S93:    2A1C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2899S94:    2AA3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2900S95:    2B2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2901S96:    2BB5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2902S97:    2C4A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2903S98:    2CDF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2904S99:    2D5A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2905S100:   2DD7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2906S101:   2E56 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2907S102:   2ED7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2908S103:   2F56 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2909S104:   2FD5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2910S105:   3056 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2911S106:   30DD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2912S107:   3168 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2913S108:   31EF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2914S109:   3280 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2915S110:   3313 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2916S111:   33AC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2917S112:   3449 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2918S113:   34D8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2919S114:   356D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2920S115:   3604 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2921S116:   369D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2922S117:   3734 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2923S118:   37D9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2924S119:   386C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2925S120:   390D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2926S121:   39B0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2927S122:   3A55 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2928S123:   3B04 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2929S124:   3BB3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2930S125:   3C40 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2931S126:   3CD5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2932S127:   3D62 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2933S128:   3DFB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2934S129:   3E94 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2935S130:   3F3F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2936S131:   3FF2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2937S132:   40A5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2938S133:   4146 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2939S134:   41ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2940S135:   42AA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2941S136:   4375 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2942S137:   4410 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2943S138:   44AB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2944S139:   4534 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2945S140:   45BD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2946S141:   4646 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2947S142:   46CF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2948S143:   4750 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2949S144:   47D1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2950S145:   4852 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2951S146:   48D3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2952S147:   495E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2953S148:   49ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2954S149:   4A7A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2955S150:   4B07 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2956S151:   4BA4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2957S152:   4C47 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2958S153:   4D02 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2959S154:   4DBD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2960S155:   4E92 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2961S156:   4F69 DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            4F74 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 150 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
                    > USED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
BUF:                5200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 151 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
VARS:               5300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           53D0 DEFINED AT LINE 18 IN ram.asm
RST08:              53D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              53D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              53D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              53D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              53D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              53DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               53DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             53DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             53E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            53E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            53E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            53E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2108 IN MAIN.asm
VDATAWIDTH:         53E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 590 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
VNUMBASE:           53E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
VTIBPTR:            53EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
VBUFPTR:            53EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
VNEXT:              53EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2120 IN MAIN.asm
VHEAPPTR:           53F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1423 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
VRECUR:             53F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
VPOINTER:           53F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
VREMAIN:            53F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
VSAVEDIP:           53F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
VSAVEDSP:           53FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
VSAVEDNEXT:         53FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 2244 IN MAIN.asm
VSAVEDBP:           53FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2245 IN MAIN.asm
VTEMP1:             5400 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1424 IN MAIN.asm
                    > USED AT LINE 1600 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
VTEMP2:             5402 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
VLASTDEF:           5404 DEFINED AT LINE 58 IN ram.asm
TBPTR:              5406 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           5408 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
HEAP:               541C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
