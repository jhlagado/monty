0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 19               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 19               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 19               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 19               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 19               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 19               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 19               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 19               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 19               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 19               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 19               LD   (RST08),HL   
0094   22 D2 19               LD   (RST10),HL   
0097   22 D4 19               LD   (RST18),HL   
009A   22 D6 19               LD   (RST20),HL   
009D   22 D8 19               LD   (RST28),HL   
00A0   22 DA 19               LD   (RST30),HL   
00A3   22 DE 19               LD   (INTVEC),HL   
00A6   22 E0 19               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 19               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 19               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD CF 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_args
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d vPointer
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f vHashStr
018C   5A 09                  DW   next   ; g nNext
018E   00 1C                  DW   heap   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available _ @ " % , ; DEL
0220   ED                     DB   lsb(nop_)   ; SP
0221   93                     DB   lsb(not_)   ; !
0222   0C                     DB   lsb(string_)   ; "
0223   06                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   ED                     DB   lsb(nop_)   ; %
0226   54                     DB   lsb(and_)   ; &
0227   45                     DB   lsb(char_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   ED                     DB   lsb(nop_)   ; )
022A   7C                     DB   lsb(mul_)   ; *
022B   76                     DB   lsb(add_)   ; +
022C   ED                     DB   lsb(nop_)   ; , compile
022D   7F                     DB   lsb(sub_)   ; -
022E   12                     DB   lsb(dot_)   ; .
022F   C4                     DB   lsb(div_)   ; /	
0230   03                     DB   lsb(num_)   ; 0
0231   03                     DB   lsb(num_)   ; 1
0232   03                     DB   lsb(num_)   ; 2
0233   03                     DB   lsb(num_)   ; 3
0234   03                     DB   lsb(num_)   ; 4
0235   03                     DB   lsb(num_)   ; 5
0236   03                     DB   lsb(num_)   ; 6
0237   03                     DB   lsb(num_)   ; 7
0238   03                     DB   lsb(num_)   ; 8
0239   03                     DB   lsb(num_)   ; 9
023A   ED                     DB   lsb(nop_)   ; :
023B   ED                     DB   lsb(nop_)   ; ;
023C   B2                     DB   lsb(lt_)   ; <
023D   98                     DB   lsb(eq_)   ; =
023E   A7                     DB   lsb(gt_)   ; >
023F   3C                     DB   lsb(index_)   ; ?
0240   00                     DB   lsb(addr_)   ; @
0241   4E                     DB   lsb(identU_)   ; A
0242   4E                     DB   lsb(identU_)   ; B
0243   4E                     DB   lsb(identU_)   ; C
0244   4E                     DB   lsb(identU_)   ; D
0245   4E                     DB   lsb(identU_)   ; E
0246   4E                     DB   lsb(identU_)   ; F
0247   4E                     DB   lsb(identU_)   ; G
0248   4E                     DB   lsb(identU_)   ; h
0249   4E                     DB   lsb(identU_)   ; I
024A   4E                     DB   lsb(identU_)   ; J
024B   4E                     DB   lsb(identU_)   ; K
024C   4E                     DB   lsb(identU_)   ; L
024D   4E                     DB   lsb(identU_)   ; M
024E   4E                     DB   lsb(identU_)   ; N
024F   4E                     DB   lsb(identU_)   ; O
0250   4E                     DB   lsb(identU_)   ; p
0251   4E                     DB   lsb(identU_)   ; Q
0252   4E                     DB   lsb(identU_)   ; R
0253   4E                     DB   lsb(identU_)   ; S
0254   4E                     DB   lsb(identU_)   ; T
0255   4E                     DB   lsb(identU_)   ; U
0256   4E                     DB   lsb(identU_)   ; V
0257   4E                     DB   lsb(identU_)   ; W
0258   4E                     DB   lsb(identU_)   ; X
0259   4E                     DB   lsb(identU_)   ; Y
025A   4E                     DB   lsb(identU_)   ; Z
025B   48                     DB   lsb(array_)   ; [
025C   D3                     DB   lsb(command_)   ; \
025D   4B                     DB   lsb(arrayEnd_)   ; ]
025E   68                     DB   lsb(xor_)   ; ^
025F   ED                     DB   lsb(nop_)   ; _
0260   0C                     DB   lsb(string_)   ; `     used for testing string   	
0261   51                     DB   lsb(identL_)   ; a
0262   51                     DB   lsb(identL_)   ; b
0263   51                     DB   lsb(identL_)   ; c
0264   51                     DB   lsb(identL_)   ; d
0265   51                     DB   lsb(identL_)   ; e
0266   51                     DB   lsb(identL_)   ; f
0267   51                     DB   lsb(identL_)   ; g
0268   51                     DB   lsb(identL_)   ; h
0269   51                     DB   lsb(identL_)   ; i
026A   51                     DB   lsb(identL_)   ; j
026B   51                     DB   lsb(identL_)   ; k
026C   51                     DB   lsb(identL_)   ; l
026D   51                     DB   lsb(identL_)   ; m
026E   51                     DB   lsb(identL_)   ; n
026F   51                     DB   lsb(identL_)   ; o
0270   51                     DB   lsb(identL_)   ; p
0271   51                     DB   lsb(identL_)   ; q
0272   51                     DB   lsb(identL_)   ; r
0273   51                     DB   lsb(identL_)   ; s
0274   51                     DB   lsb(identL_)   ; t
0275   51                     DB   lsb(identL_)   ; u
0276   51                     DB   lsb(identL_)   ; v
0277   51                     DB   lsb(identL_)   ; w
0278   51                     DB   lsb(identL_)   ; x
0279   51                     DB   lsb(identL_)   ; y
027A   51                     DB   lsb(identL_)   ; z
027B   3F                     DB   lsb(block_)   ; {
027C   5F                     DB   lsb(or_)   ; |
027D   42                     DB   lsb(blockEnd_)   ; }
027E   71                     DB   lsb(inv_)   ; ~
027F   ED                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADDR_:       
0300   C3 EF 03               JP   addr   
0303                NUM_:        
0303   C3 3A 04               JP   num   
0306                HEXNUM_:      
0306   C3 6A 04               JP   hexnum   
0309                ARG_:        
0309   C3 98 08               JP   arg   
030C                STRING_:      
030C   C3 87 04               JP   string   
030F                ARG_LIST_:      
030F   C3 EB 04               JP   arg_list   
0312                DOT_:        
0312   E1                     POP   hl   
0313   03                     INC   bc   
0314   0A                     LD   a,(bc)   
0315   FE 68                  CP   "h"   
0317   20 05                  JR   nz,dot1   
0319   CD 56 07               CALL   prthex   
031C   18 17                  JR   dot4   
031E                DOT1:        
031E   FE 73                  CP   "s"   
0320   20 05                  JR   nz,dot2   
0322   CD 79 07               CALL   prtstr   
0325   18 0E                  JR   dot4   
0327                DOT2:        
0327   FE 63                  CP   "c"   
0329   20 06                  JR   nz,dot3   
032B   7D                     LD   a,l   
032C   CD 85 00               CALL   putchar   
032F   18 04                  JR   dot4   
0331                DOT3:        
0331   0B                     DEC   bc   
0332   CD 0E 07               CALL   prtdec   
0335                DOT4:        
0335   3E 20                  LD   a," "   
0337   CD 85 00               CALL   putchar   
033A   DD E9                  JP   (ix)   
033C                             ; addr index -- addr2
033C                INDEX_:      
033C   C3 C7 05               JP   index   
033F                BLOCK_:      
033F   C3 1D 05               JP   block   
0342                BLOCKEND_:      
0342   C3 5A 05               JP   blockend   
0345                CHAR_:       
0345   C3 AF 04               JP   char   
0348                ARRAY_:      
0348   C3 EE 05               JP   array   
034B                ARRAYEND_:      
034B   C3 0A 06               JP   arrayEnd   
034E                IDENTU_:      
034E   C3 C4 04               JP   identU   
0351                IDENTL_:      
0351   C3 C9 04               JP   identL   
0354                AND_:        
0354   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0355   E1                     POP   hl   
0356   7B                     LD   a,e   
0357   A5                     AND   l   
0358   6F                     LD   l,a   
0359   7A                     LD   a,d   
035A   A4                     AND   h   
035B                AND1:        
035B   67                     LD   h,a   
035C   E5                     PUSH   hl   
035D   DD E9                  JP   (ix)   
035F                OR_:         
035F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0360   E1                     POP   hl   
0361   7B                     LD   a,e   
0362   B5                     OR   l   
0363   6F                     LD   l,a   
0364   7A                     LD   a,d   
0365   B4                     OR   h   
0366   18 F3                  JR   and1   
0368                XOR_:        
0368   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0369                XOR1:        
0369   E1                     POP   hl   
036A   7B                     LD   a,e   
036B   AD                     XOR   l   
036C   6F                     LD   l,a   
036D   7A                     LD   a,d   
036E   AC                     XOR   h   
036F   18 EA                  JR   and1   
0371                INV_:        ; Bitwise INVert the top member of the stack
0371   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0374   18 F3                  JR   xor1   
0376                ADD_:        ; add the top 2 members of the stack
0376   D1                     POP   de   
0377   E1                     POP   hl   
0378   19                     ADD   hl,de   
0379   E5                     PUSH   hl   
037A   DD E9                  JP   (ix)   
037C                MUL_:        
037C   C3 1E 04               JP   mul   
037F                SUB_:        ; negative sign or subtract
037F   03                     INC   bc   ; check if sign of a number
0380   0A                     LD   a,(bc)   
0381   0B                     DEC   bc   
0382   FE 30                  CP   "0"   
0384   38 05                  JR   c,sub1   
0386   FE 3A                  CP   "9"+1   
0388   DA 03 03               JP   c,num_   
038B                SUB1:        ; Subtract the value 2nd on stack from top of stack
038B   D1                     POP   de   
038C   E1                     POP   hl   ; Entry point for INVert
038D                SUB2:        
038D   B7                     OR   a   ; Entry point for NEGate
038E   ED 52                  SBC   hl,de   
0390   E5                     PUSH   hl   
0391   DD E9                  JP   (ix)   
0393                NOT_:        ; logical invert, any non zero value
0393   21 00 00               LD   hl,0   ; is considered true
0396   18 0B                  JR   eq1   
0398                EQ_:         
0398   03                     INC   bc   
0399   0A                     LD   a,(bc)   ; is it == ?
039A   FE 3D                  CP   "="   
039C   28 04                  JR   z,eq0   ; no its equality
039E   0B                     DEC   bc   
039F   C3 DB 04               JP   assign   ; no its assignment
03A2                EQ0:         
03A2   E1                     POP   hl   
03A3                EQ1:         
03A3   D1                     POP   de   
03A4   C3 8B 06               JP   equals   
03A7                GT_:         
03A7   03                     INC   bc   
03A8   0A                     LD   a,(bc)   
03A9   FE 3E                  CP   ">"   
03AB   CA 0B 04               JP   z,shiftRight   
03AE   D1                     POP   de   
03AF   E1                     POP   hl   
03B0   18 09                  JR   lt1   
03B2                LT_:         
03B2   03                     INC   bc   
03B3   0A                     LD   a,(bc)   
03B4   FE 3C                  CP   "<"   
03B6   CA FB 03               JP   z,shiftLeft   
03B9   E1                     POP   hl   
03BA   D1                     POP   de   
03BB                LT1:         
03BB   FE 3D                  CP   "="   
03BD   CA 93 06               JP   z,lessthaneq   
03C0   0B                     DEC   bc   
03C1   C3 98 06               JP   lessthan   
03C4                DIV_:        
03C4   D1                     POP   de   ; get first value
03C5   E1                     POP   hl   ; get 2nd value
03C6   C5                     PUSH   bc   ; preserve the IP
03C7   44 4D                  LD   bc,hl   
03C9   CD CB 06               CALL   divide   
03CC   22 E6 19               LD   (vFrac),hl   
03CF   C1                     POP   bc   
03D0   D5                     PUSH   de   ; push result
03D1   DD E9                  JP   (ix)   
03D3                COMMAND_:      
03D3   03                     INC   bc   
03D4   0A                     LD   a,(bc)   
03D5   FE 5C                  CP   $5C   ; \\ comment
03D7   28 0B                  JR   z,comment   
03D9   FE 67                  CP   "g"   ; go
03DB   CA D4 07               JP   z,go   
03DE   21 01 00               LD   hl,1   ; error 1: unknown command
03E1   C3 7D 09               JP   error   
03E4                COMMENT:      
03E4   03                     INC   bc   ; point to next char
03E5   0A                     LD   a,(bc)   
03E6   FE 20                  CP   " "   ; terminate on any char less than SP
03E8   30 FA                  JR   nc,comment   
03EA   0B                     DEC   bc   
03EB   DD E9                  JP   (ix)   
03ED                NOP_:        
03ED   DD E9                  JP   (ix)   
03EF                             ;*******************************************************************
03EF                             ; word operators
03EF                             ;*******************************************************************
03EF                             ; -- ptr
03EF                ADDR:        
03EF   2A EC 19               LD   hl,(vPointer)   
03F2   E5                     PUSH   hl   
03F3   21 EC 19               LD   hl,vPointer   
03F6   22 EC 19               LD   (vPointer),hl   
03F9   DD E9                  JP   (ix)   
03FB                             ; shiftLeft
03FB                             ; value count -- value2          shift left count places
03FB                SHIFTLEFT:      
03FB   50 59                  LD   de,bc   ; save IP
03FD   C1                     POP   bc   ; bc = count
03FE   41                     LD   b,c   ; b = loop counter
03FF   E1                     POP   hl   
0400   04                     INC   b   ; test for counter=0 case
0401   18 01                  JR   shiftLeft2   
0403                SHIFTLEFT1:      
0403   29                     ADD   hl,hl   ; left shift hl
0404                SHIFTLEFT2:      
0404   10 FD                  DJNZ   shiftLeft1   
0406   E5                     PUSH   hl   
0407   42 4B                  LD   bc,de   ; restore IP
0409   DD E9                  JP   (ix)   
040B                             ; shiftRight
040B                             ; value count -- value2          shift left count places
040B                SHIFTRIGHT:      
040B   50 59                  LD   de,bc   ; save IP
040D   C1                     POP   bc   ; bc = count
040E   41                     LD   b,c   ; b = loop counter
040F   E1                     POP   hl   
0410   04                     INC   b   ; test for counter=0 case
0411   18 04                  JR   shiftRight2   
0413                SHIFTRIGHT1:      
0413   CB 3C                  SRL   h   ; right shift hl
0415   CB 1D                  RR   l   
0417                SHIFTRIGHT2:      
0417   10 FA                  DJNZ   shiftRight1   
0419   E5                     PUSH   hl   
041A   42 4B                  LD   bc,de   ; restore IP
041C   DD E9                  JP   (ix)   
041E                MUL:         ;=19
041E   D1                     POP   de   ; get first value
041F   E1                     POP   hl   
0420   C5                     PUSH   bc   ; Preserve the IP
0421   44                     LD   b,h   ; bc = 2nd value
0422   4D                     LD   c,l   
0423   21 00 00               LD   hl,0   
0426   3E 10                  LD   a,16   
0428                MUL2:        
0428   29                     ADD   hl,hl   
0429   CB 13                  RL   e   
042B   CB 12                  RL   d   
042D   30 04                  JR   nc,$+6   
042F   09                     ADD   hl,bc   
0430   30 01                  JR   nc,$+3   
0432   13                     INC   de   
0433   3D                     DEC   a   
0434   20 F2                  JR   nz,mul2   
0436   C1                     POP   bc   ; Restore the IP
0437   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0438   DD E9                  JP   (ix)   
043A                NUM:         
043A   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
043D   0A                     LD   a,(bc)   ; Get numeral or -
043E   FE 2D                  CP   "-"   
0440   20 01                  JR   nz,num0   
0442   03                     INC   bc   ; move to next char, no flags affected
0443                NUM0:        
0443   08                     EX   af,af'   ; save zero flag = 0 for later
0444                NUM1:        
0444   0A                     LD   a,(bc)   ; read digit
0445   D6 30                  SUB   "0"   ; less than 0?
0447   38 13                  JR   c,num2   ; not a digit, exit loop
0449   FE 0A                  CP   10   ; greater that 9?
044B   30 0F                  JR   nc,num2   ; not a digit, exit loop
044D   03                     INC   bc   ; inc IP
044E   54 5D                  LD   de,hl   ; multiply hl * 10
0450   29                     ADD   hl,hl   
0451   29                     ADD   hl,hl   
0452   19                     ADD   hl,de   
0453   29                     ADD   hl,hl   
0454   85                     ADD   a,l   ; add digit in a to hl
0455   6F                     LD   l,a   
0456   3E 00                  LD   a,0   
0458   8C                     ADC   a,h   
0459   67                     LD   h,a   
045A   18 E8                  JR   num1   
045C                NUM2:        
045C   0B                     DEC   bc   
045D   08                     EX   af,af'   ; restore zero flag
045E   20 07                  JR   nz,num3   
0460   EB                     EX   de,hl   ; negate the value of hl
0461   21 00 00               LD   hl,0   
0464   B7                     OR   a   ; jump to sub2
0465   ED 52                  SBC   hl,de   
0467                NUM3:        
0467   E5                     PUSH   hl   ; Put the number on the stack
0468   DD E9                  JP   (ix)   ; and process the next character
046A                HEXNUM:      
046A   21 00 00               LD   hl,0   ; Clear hl to accept the number
046D                HEXNUM1:      
046D   03                     INC   bc   
046E   0A                     LD   a,(bc)   ; Get the character which is a numeral
046F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0471   28 02                  JR   z,hexnum2   ; no a decimal
0473   D6 07                  SUB   7   ; sub 7  to make $a - $F
0475                HEXNUM2:      
0475   D6 30                  SUB   $30   ; form decimal digit
0477   DA 5C 04               JP   c,num2   
047A   FE 10                  CP   $0F+1   
047C   D2 5C 04               JP   nc,num2   
047F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0480   29                     ADD   hl,hl   ; 4X
0481   29                     ADD   hl,hl   ; 8X
0482   29                     ADD   hl,hl   ; 16X
0483   85                     ADD   a,l   ; add into bottom of hl
0484   6F                     LD   l,a   
0485   18 E6                  JR   hexnum1   
0487                             ; string
0487                             ; -- ptr                        ; points to start of string chars,
0487                             ; length is stored at start - 2 bytes
0487                STRING:      
0487   2A F4 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
048A   23                     INC   hl   ; skip length field to start
048B   23                     INC   hl   
048C   E5                     PUSH   hl   ; save start of string
048D   03                     INC   bc   ; point to next char
048E   18 03                  JR   string2   
0490                STRING1:      
0490   77                     LD   (hl),a   
0491   23                     INC   hl   ; increase count
0492   03                     INC   bc   ; point to next char
0493                STRING2:      
0493   0A                     LD   a,(bc)   
0494   FE 22                  CP   $22   ; " is the string terminator
0496   20 F8                  JR   nz,string1   
0498   FE 60                  CP   "`"   ; ` is the string terminator used in testing
049A   20 F4                  JR   nz,string1   
049C   AF                     XOR   a   ; write NUL to terminate string
049D   77                     LD   (hl),a   ; hl = end of string
049E   23                     INC   hl   
049F   22 F4 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04A2   2B                     DEC   hl   ; hl = end of string without terminator
04A3   D1                     POP   de   ; de = start of string
04A4   D5                     PUSH   de   ; return start of string
04A5   B7                     OR   a   ; hl = length bytes, de = start of string
04A6   ED 52                  SBC   hl,de   
04A8   EB                     EX   de,hl   
04A9   2B                     DEC   hl   ; write length bytes to length field at start - 2
04AA   72                     LD   (hl),d   
04AB   2B                     DEC   hl   
04AC   73                     LD   (hl),e   
04AD   DD E9                  JP   (ix)   
04AF                CHAR:        
04AF   21 00 00               LD   hl,0   ; if "" is empty or null
04B2                CHAR1:       
04B2   03                     INC   bc   ; point to next char
04B3   0A                     LD   a,(bc)   
04B4   FE 27                  CP   "'"   ; ' is the terminator
04B6   28 09                  JR   z,char3   
04B8   FE 5C                  CP   $5c   ; \ is the escape
04BA   20 02                  JR   nz,char2   
04BC   03                     INC   bc   
04BD   0A                     LD   a,(bc)   
04BE                CHAR2:       
04BE   6F                     LD   l,a   
04BF   18 F1                  JR   char1   
04C1                CHAR3:       
04C1   E5                     PUSH   hl   
04C2   DD E9                  JP   (ix)   
04C4                IDENTU:      
04C4   0A                     LD   a,(bc)   ; a = identifier char
04C5   D6 41                  SUB   "A"   ; "A" = 0
04C7   18 05                  JR   ident1   
04C9                IDENTL:      
04C9   0A                     LD   a,(bc)   
04CA   D6 61                  SUB   "a"   
04CC   C6 1A                  ADD   a,26   
04CE                IDENT1:      
04CE   87                     ADD   a,a   ; l = a * 2
04CF   6F                     LD   l,a   
04D0   26 19                  LD   h,msb(vars)   
04D2   22 EC 19               LD   (vPointer),hl   ; store address in setter
04D5   5E                     LD   e,(hl)   
04D6   23                     INC   hl   
04D7   56                     LD   d,(hl)   
04D8   D5                     PUSH   de   
04D9   DD E9                  JP   (ix)   
04DB                             ; value _oldValue --            ; uses address in vPointer
04DB                ASSIGN:      
04DB   E1                     POP   hl   ; discard last accessed value
04DC   D1                     POP   de   ; new value
04DD   2A EC 19               LD   hl,(vPointer)   
04E0   73                     LD   (hl),e   
04E1   3A E8 19               LD   a,(vDataWidth)   
04E4   3D                     DEC   a   ; is it byte?
04E5   28 02                  JR   z,assign1   
04E7   23                     INC   hl   
04E8   72                     LD   (hl),d   
04E9                ASSIGN1:      
04E9   DD E9                  JP   (ix)   
04EB                             ; 
04EB                             ; 
04EB                             ; 
04EB                             ; 
04EB                             ; 
04EB                             ; arg_list - parses input (ab:c)
04EB                             ; names after the : represent uninitialised locals
04EB                             ; return values are the state of the stack after the block ends
04EB                ARG_LIST:      
04EB   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04EE   2A F4 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
04F1   23                     INC   hl   ; skip length field to start
04F2   23                     INC   hl   
04F3   E5                     PUSH   hl   ; save start of arg_list
04F4   03                     INC   bc   ; point to next char
04F5                ARG_LIST1:      
04F5   0A                     LD   a,(bc)   
04F6   FE 29                  CP   ")"   ; ) is the arg_list terminator
04F8   28 12                  JR   z,arg_list4   
04FA   FE 3A                  CP   ":"   
04FC   20 03                  JR   nz,arg_list2   
04FE   14                     INC   d   ; non zero value local count acts as flag
04FF   20 08                  JR   nz,arg_list3   
0501                ARG_LIST2:      
0501   77                     LD   (hl),a   
0502   23                     INC   hl   
0503   1C                     INC   e   ; increase arg count
0504   AF                     XOR   a   
0505   B2                     OR   d   
0506   28 01                  JR   z,arg_list3   
0508   14                     INC   d   ; if d > 0 increase local count
0509                ARG_LIST3:      
0509   03                     INC   bc   ; point to next char
050A   18 E9                  JR   arg_list1   
050C                ARG_LIST4:      
050C   AF                     XOR   a   
050D   B2                     OR   d   
050E   28 01                  JR   z,arg_list5   
0510   15                     DEC   d   ; remove initial inc
0511                ARG_LIST5:      
0511   23                     INC   hl   
0512   22 F4 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0515   E1                     POP   hl   ; hl = start of arg_list
0516   E5                     PUSH   hl   ; return start of string
0517   2B                     DEC   hl   ; write length bytes to length field at start - 2
0518   72                     LD   (hl),d   
0519   2B                     DEC   hl   
051A   73                     LD   (hl),e   
051B   DD E9                  JP   (ix)   
051D                BLOCK:       
051D   03                     INC   bc   
051E   C5                     PUSH   bc   ; return first opcode of block
051F   16 01                  LD   d,1   ; nesting: count first parenthesis
0521                BLOCK1:      ; Skip to end of definition
0521   0A                     LD   a,(bc)   ; Get the next character
0522   03                     INC   bc   ; Point to next character
0523   FE 21                  CP   " " + 1   ; ignore whitespace
0525   38 FA                  JR   c,block1   
0527   FE 29                  CP   ")"   
0529   28 29                  JR   z,block4   
052B   FE 7D                  CP   "}"   
052D   28 25                  JR   z,block4   
052F   FE 5D                  CP   "]"   
0531   28 21                  JR   z,block4   
0533   FE 28                  CP   "("   
0535   28 12                  JR   z,block2   
0537   FE 7B                  CP   "{"   
0539   28 0E                  JR   z,block2   
053B   FE 5B                  CP   "["   
053D   28 0A                  JR   z,block2   
053F   FE 27                  CP   "'"   
0541   28 09                  JR   z,block3   
0543   FE 60                  CP   "`"   
0545   28 05                  JR   z,block3   
0547   18 D8                  JR   block1   
0549                BLOCK2:      
0549   14                     INC   d   
054A   18 D5                  JR   block1   
054C                BLOCK3:      
054C   3E 80                  LD   a,$80   
054E   AA                     XOR   d   
054F   47                     LD   b,a   
0550   20 CF                  JR   nz,block1   
0552   18 03                  JR   block5   
0554                BLOCK4:      
0554   15                     DEC   d   
0555   20 CA                  JR   nz,block1   ; get the next element
0557                BLOCK5:      
0557   0B                     DEC   bc   ; balanced, exit
0558   DD E9                  JP   (ix)   
055A                BLOCKEND:      
055A   D9                     EXX      
055B   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
055E   FD 56 01               LD   d,(iy+1)   
0561   FD 4E 06               LD   c,(iy+6)   ; bc = IP
0564   FD 46 07               LD   b,(iy+7)   
0567   D9                     EXX      
0568   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
056B   FD 56 03               LD   d,(iy+3)   
056E   EB                     EX   de,hl   
056F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0572   FD 56 01               LD   d,(iy+1)   
0575                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
0575   13                     INC   de   ; for carry flag <=
0576   B7                     OR   a   
0577   ED 52                  SBC   hl,de   
0579   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
057B   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
057D   FD 5D                  LD   e,iyl   
057F   21 08 00               LD   hl,8   
0582   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0583   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0584   18 0C                  JR   blockend2   
0586                BLOCKEND1:      ; same scope
0586   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0589   FD 56 03               LD   d,(iy+3)   
058C   EB                     EX   de,hl   
058D   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
058F   FD 5D                  LD   e,iyl   
0591   EB                     EX   de,hl   
0592                BLOCKEND2:      
0592   44 4D                  LD   bc,hl   ; bc = hl = BP
0594   B7                     OR   a   ; hl = BP - SP = count
0595   ED 72                  SBC   hl,sp   
0597   C5                     PUSH   bc   ; bc = count, hl = BP
0598   44 4D                  LD   bc,hl   
059A   E1                     POP   hl   
059B   2B                     DEC   hl   ; hl = BP-1
059C   1B                     DEC   de   ; de = args*-1
059D   ED B8                  LDDR      
059F   13                     INC   de   ; hl = new tos
05A0   EB                     EX   de,hl   
05A1   F9                     LD   sp,hl   ; sp = new tos
05A2   D9                     EXX      ; bc = IP, iy = oldBP
05A3   D5                     PUSH   de   
05A4   C5                     PUSH   bc   
05A5   D9                     EXX      
05A6   C1                     POP   bc   
05A7   FD E1                  POP   iy   
05A9   DD E9                  JP   (ix)   
05AB                             ; if
05AB                             ; condition then -- value
05AB                IF:          
05AB   11 00 00               LD   de,0   ; NUL pointer for else
05AE   18 01                  JR   ifte1   
05B0                             ; ifte
05B0                             ; condition then else -- value
05B0                IFTE:        
05B0   D1                     POP   de   ; de = else
05B1                IFTE1:       
05B1   E1                     POP   hl   ; hl = then
05B2   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
05B3   7C                     LD   a,h   
05B4   B5                     OR   l   
05B5   E1                     POP   hl   ; hl = then
05B6   CA D5 07               JP   z,go0   ; if z de = else
05B9   EB                     EX   de,hl   ; condition = false, hl = else
05BA   C3 D5 07               JP   go0   
05BD                             ; switch
05BD                             ; index array -- value
05BD                SWITCH:      
05BD   D1                     POP   de   ; de = array
05BE   E1                     POP   hl   ; hl = index
05BF   29                     ADD   hl,hl   ; if data width = 2 then double
05C0   19                     ADD   hl,de   ; add addr
05C1   5E                     LD   e,(hl)   
05C2   23                     INC   hl   
05C3   56                     LD   d,(hl)   
05C4   C3 D5 07               JP   go0   
05C7                             ; index of an array, based on vDataWidth
05C7                             ; array num -- value    ; also sets vPointer to address
05C7                INDEX:       
05C7   E1                     POP   hl   ; hl = index
05C8   D1                     POP   de   ; de = array
05C9   3A E8 19               LD   a,(vDataWidth)   ; a = data width
05CC   3D                     DEC   a   
05CD   28 01                  JR   z,index1   
05CF                INDEX0:      
05CF   29                     ADD   hl,hl   ; if data width = 2 then double
05D0                INDEX1:      
05D0   19                     ADD   hl,de   ; add addr
05D1   22 EC 19               LD   (vPointer),hl   ; store address in setter
05D4   16 00                  LD   d,0   
05D6   5E                     LD   e,(hl)   
05D7   B7                     OR   a   ; check data width again
05D8   28 02                  JR   z,index2   
05DA   23                     INC   hl   
05DB   56                     LD   d,(hl)   
05DC                INDEX2:      
05DC   D5                     PUSH   de   
05DD   DD E9                  JP   (ix)   
05DF                             ; c b --
05DF                             ; loops until c = 0
05DF                LOOP:        
05DF   DD E9                  JP   (ix)   
05E1                             ;     pop de                      ; de = block                    c
05E1                             ;     pop hl                      ; hl = condition
05E1                             ;     push de
05E1                             ;     push bc                     ; push IP
05E1                             ;     ld bc,de                    ; bc = block
05E1                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
05E1                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05E1                             ;     push de                     ; push ScopeBP
05E1                             ;     push iy                     ; push BP
05E1                             ;     ld iy,0                     ; iy = sp
05E1                             ;     add iy,sp
05E1                             ; loop1:
05E1                             ;     ld a,l                      ; bc = block, hl = condition = zero?
05E1                             ;     or h
05E1                             ;     jr z,loop3
05E1                             ;     ld de,loop2-1               ; IP return address
05E1                             ;     push de
05E1                             ;     ld e,(iy+2)                 ; push parent ScopeBP
05E1                             ;     ld d,(iy+3)
05E1                             ;     push de                     ;
05E1                             ;     push iy                     ; push BP
05E1                             ;     ld iy,0                     ; iy = sp
05E1                             ;     add iy,sp
05E1                             ;     push hl                     ; push condition
05E1                             ;     dec bc
05E1                             ;     jp (ix)
05E1                             ; loop2:
05E1                             ;     db ESC                      ; escape from interpreter
05E1                             ;     ld c,(iy+6)                 ; bc = block
05E1                             ;     ld b,(iy+7)
05E1                             ;     pop hl                      ; hl = condition
05E1                             ;     jr loop1
05E1                             ; loop3:
05E1                             ;     ld d,iyh                    ; de = BP
05E1                             ;     ld e,iyl
05E1                             ;     ex de,hl                    ; hl = BP, de = result
05E1                             ;     ld sp,hl                    ; sp = BP
05E1                             ;     pop hl                      ; hl = old BP
05E1                             ;     pop bc                      ; pop ScopeBP (discard)
05E1                             ;     pop bc                      ; bc = IP
05E1                             ;     ld sp,hl                    ; sp = old BP
05E1                             ;     ld iy,0                     ; iy = sp
05E1                             ;     add iy,sp
05E1                             ;     ld ix,(vNext)                  ; needed?
05E1                             ;     jp (ix)
05E1                WORDS:       
05E1   21 02 00               LD   hl,2   
05E4   18 03                  JR   bytes1   
05E6                BYTES:       
05E6   21 01 00               LD   hl,1   
05E9                BYTES1:      
05E9   22 E8 19               LD   (vDataWidth),hl   
05EC   DD E9                  JP   (ix)   
05EE                ARRAY:       
05EE   11 00 00               LD   de,0   ; create stack frame
05F1   D5                     PUSH   de   ; push null for IP
05F2   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
05F5   FD 56 05               LD   d,(iy+5)   ; 
05F8   D5                     PUSH   de   ; 
05F9   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
05FC   FD 56 03               LD   d,(iy+3)   ; 
05FF   D5                     PUSH   de   ; 
0600   FD E5                  PUSH   iy   ; push BP
0602   FD 21 00 00            LD   iy,0   ; BP = SP
0606   FD 39                  ADD   iy,sp   
0608   DD E9                  JP   (ix)   
060A                ARRAYEND:      
060A   FD 54                  LD   d,iyh   ; de = BP
060C   FD 5D                  LD   e,iyl   
060E   ED 43 F6 19            LD   (vTemp1),bc   ; save IP
0612   62 6B                  LD   hl,de   ; hl = de = BP
0614   B7                     OR   a   
0615   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0617   CB 3C                  SRL   h   ; 
0619   CB 1D                  RR   l   
061B   44 4D                  LD   bc,hl   ; bc = count
061D   2A F4 19               LD   hl,(vHeapPtr)   ; hl = array[-2]
0620   71                     LD   (hl),c   ; write num items in length word
0621   23                     INC   hl   
0622   70                     LD   (hl),b   
0623   23                     INC   hl   ; hl = array[0], bc = count
0624                             ; de = BP, hl = array[0], bc = count
0624   3A E8 19               LD   a,(vDataWidth)   ; vDataWidth=1?
0627   FE 01                  CP   1   
0629   20 10                  JR   nz,arrayEnd2   
062B                ARRAYEND1:      ; byte
062B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
062E   77                     LD   (hl),a   ; write a to array item
062F   23                     INC   hl   ; move to next byte in array
0630   FD 2B                  DEC   iy   ; move tho next word on stack
0632   FD 2B                  DEC   iy   
0634   0B                     DEC   bc   ; dec items count
0635   79                     LD   a,c   ; if not zero loop
0636   B0                     OR   b   
0637   20 F2                  JR   nz,arrayEnd1   
0639   18 13                  JR   arrayEnd3   
063B                ARRAYEND2:      ; word
063B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
063E   77                     LD   (hl),a   ; write lsb of array item
063F   23                     INC   hl   ; move to msb of array item
0640   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0643   77                     LD   (hl),a   ; write msb of array item
0644   23                     INC   hl   ; move to next word in array
0645   FD 2B                  DEC   iy   ; move to next word on stack
0647   FD 2B                  DEC   iy   
0649   0B                     DEC   bc   ; dec items count
064A   79                     LD   a,c   ; if not zero loop
064B   B0                     OR   b   
064C   20 ED                  JR   nz,arrayEnd2   
064E                ARRAYEND3:      
064E   EB                     EX   de,hl   ; de = end of array, hl = BP
064F   F9                     LD   sp,hl   ; sp = BP
0650   E1                     POP   hl   ; de = end of array, hl = old BP
0651   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0652   FD 62                  LD   iyh,d   
0654   FD 6B                  LD   iyl,e   
0656   D1                     POP   de   ; pop arg_list (discard)
0657   D1                     POP   de   ; pop ScopeBP (discard)
0658   D1                     POP   de   ; pop IP (discard)
0659   ED 5B F4 19            LD   de,(vHeapPtr)   ; de = array[-2]
065D   22 F4 19               LD   (vHeapPtr),hl   ; move heapPtr to end of array
0660   ED 4B F6 19            LD   bc,(vTemp1)   ; restore IP
0664   13                     INC   de   ; de = array[0]
0665   13                     INC   de   
0666   D5                     PUSH   de   ; return array[0]
0667   DD E9                  JP   (ix)   
0669                             ; str -- num
0669                HASH:        
0669                             ; pop hl
0669                             ; push bc
0669                             ; ld bc,hl
0669                             ; call hashStr
0669                             ; pop bc
0669                             ; push hl
0669   DD E9                  JP   (ix)   
066B                FRAC:        
066B   2A E6 19               LD   hl,(vFrac)   
066E   E5                     PUSH   hl   
066F   DD E9                  JP   (ix)   
0671                SQRT1:       
0671   E1                     POP   hl   
0672   C5                     PUSH   bc   
0673   CD E4 06               CALL   squareRoot   
0676   ED 43 E6 19            LD   (vFrac),bc   
067A   C1                     POP   bc   
067B   D5                     PUSH   de   
067C   DD E9                  JP   (ix)   
067E                ABS1:        
067E   E1                     POP   hl   
067F   CB 7C                  BIT   7,h   
0681   C8                     RET   z   
0682   AF                     XOR   a   
0683   95                     SUB   l   
0684   6F                     LD   l,a   
0685   9F                     SBC   a,a   
0686   94                     SUB   h   
0687   67                     LD   h,a   
0688   E5                     PUSH   hl   
0689   DD E9                  JP   (ix)   
068B                             ; hl = value1, de = value2
068B                             ; hl = result
068B                EQUALS:      
068B   B7                     OR   a   ; reset the carry flag
068C   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
068E   28 10                  JR   z,true1   
0690   C3 A6 06               JP   false1   
0693                             ; hl = value1 de = value2
0693                             ; hl = result
0693                LESSTHANEQ:      
0693   B7                     OR   a   
0694   ED 52                  SBC   hl,de   
0696   18 05                  JR   lessthan1   
0698                             ; hl = value1 de = value2
0698                             ; hl = result
0698                LESSTHAN:      
0698   B7                     OR   a   
0699   ED 52                  SBC   hl,de   
069B   28 09                  JR   z,false1   
069D                LESSTHAN1:      
069D   FA A6 06               JP   m,false1   
06A0                TRUE1:       
06A0   21 FF FF               LD   hl,TRUE   
06A3   E5                     PUSH   hl   
06A4   DD E9                  JP   (ix)   
06A6                NULL1:       
06A6                FALSE1:      
06A6   21 00 00               LD   hl,FALSE   
06A9   E5                     PUSH   hl   
06AA   DD E9                  JP   (ix)   
06AC                             ; Z80 port input
06AC                             ; port -- value
06AC                INPUT:       
06AC   E1                     POP   hl   
06AD   59                     LD   e,c   ; save IP
06AE   4D                     LD   c,l   
06AF   ED 68                  IN   l,(c)   
06B1   26 00                  LD   h,0   
06B3   4B                     LD   c,e   ; restore IP
06B4   E5                     PUSH   hl   
06B5   DD E9                  JP   (ix)   
06B7                             ; Z80 port output
06B7                             ; value port --
06B7                OUTPUT:      
06B7   E1                     POP   hl   
06B8   59                     LD   e,c   ; save IP
06B9   4D                     LD   c,l   
06BA   E1                     POP   hl   
06BB   ED 69                  OUT   (c),l   
06BD   4B                     LD   c,e   ; restore IP
06BE   DD E9                  JP   (ix)   
06C0                KEY:         
06C0   CD 81 00               CALL   getchar   
06C3   26 00                  LD   h,0   
06C5   6F                     LD   l,a   
06C6   E5                     PUSH   hl   
06C7   DD E9                  JP   (ix)   
06C9                FILTER:      
06C9                MAP:         
06C9                SCAN:        
06C9   DD E9                  JP   (ix)   
06CB                             ; -------------------------------------------------------------------------------
06CB                             ; ; hash C-string
06CB                             ; ; BC = str
06CB                             ; ; HL = hash
06CB                             ; hashStr:
06CB                             ;     ld (vHashStr),bc                    ; store source string
06CB                             ;     ld hl,0
06CB                             ; hashStr1:
06CB                             ;     ld a,(bc)                           ; load next char
06CB                             ;     inc bc
06CB                             ;     cp 0                                ; NUL?
06CB                             ;     ret z
06CB                             ; hashStr2:
06CB                             ;     ld d,0
06CB                             ;     ld e,a
06CB                             ;     add hl,de
06CB                             ;     ld de,hl                            ; hl *= 193 (11000001)
06CB                             ;     add hl,hl                           ; shift left
06CB                             ;     add hl,de                           ; add
06CB                             ;     add hl,hl                           ; shift left
06CB                             ;     add hl,hl                           ; shift left
06CB                             ;     add hl,hl                           ; shift left
06CB                             ;     add hl,hl                           ; shift left
06CB                             ;     add hl,hl                           ; shift left
06CB                             ;     add hl,hl                           ; shift left
06CB                             ;     add hl,de                           ; add
06CB                             ;     jr hashStr1
06CB                             ; division subroutine.
06CB                             ; bc: divisor, de: dividend, hl: remainder
06CB                DIVIDE:      
06CB   21 00 00               LD   hl,0   ; zero the remainder
06CE   3E 10                  LD   a,16   ; loop counter
06D0                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
06D0   CB 21                  SLA   c   
06D2   CB 10                  RL   b   
06D4   ED 6A                  ADC   hl,hl   
06D6   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
06D8   38 03                  JR   c,divide2   
06DA   0C                     INC   c   
06DB   18 01                  JR   divide3   
06DD                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
06DD   19                     ADD   hl,de   
06DE                DIVIDE3:      
06DE   3D                     DEC   a   
06DF   20 EF                  JR   nz,divide1   
06E1   50 59                  LD   de,bc   ; result from bc to de
06E3   C9                     RET      
06E4                             ; squareroot
06E4                             ; Input: HL = value
06E4                             ; Result: DE = square root BC = remainder
06E4                SQUAREROOT:      
06E4   01 00 08               LD   bc,0800h   
06E7   59                     LD   e,c   
06E8   AF                     XOR   a   
06E9                SQUAREROOT1:      
06E9   29                     ADD   hl,hl   
06EA   CB 11                  RL   c   
06EC   ED 6A                  ADC   hl,hl   
06EE   CB 11                  RL   c   
06F0   30 02                  JR   nc,$+4   
06F2   CB C5                  SET   0,l   
06F4   7B                     LD   a,e   
06F5   87                     ADD   a,a   
06F6   5F                     LD   e,a   
06F7   87                     ADD   a,a   
06F8   CB 45                  BIT   0,l   
06FA   20 03                  JR   nz,$+5   
06FC   91                     SUB   c   
06FD   30 05                  JR   nc,squareRoot4   
06FF   79                     LD   a,c   
0700   93                     SUB   e   
0701   1C                     INC   e   
0702   93                     SUB   e   
0703   4F                     LD   c,a   
0704                SQUAREROOT4:      
0704   10 E3                  DJNZ   squareRoot1   
0706   CB 45                  BIT   0,l   
0708   28 01                  JR   z,squareRoot5   
070A   04                     INC   b   
070B                SQUAREROOT5:      
070B   16 00                  LD   d,0   
070D   C9                     RET      
070E                             ; print decimal
070E                             ; hl = value
070E                PRTDEC:      
070E   CB 7C                  BIT   7,h   
0710   28 0B                  JR   z,prtdec0   
0712   3E 2D                  LD   a,"-"   
0714   CD 85 00               CALL   putchar   
0717   AF                     XOR   a   
0718   95                     SUB   l   
0719   6F                     LD   l,a   
071A   9F                     SBC   a,a   
071B   94                     SUB   h   
071C   67                     LD   h,a   
071D                PRTDEC0:      
071D   C5                     PUSH   bc   
071E   0E 00                  LD   c,0   ; leading zeros flag = false
0720   11 F0 D8               LD   de,-10000   
0723   CD 3F 07               CALL   prtdec1   
0726   11 18 FC               LD   de,-1000   
0729   CD 3F 07               CALL   prtdec1   
072C   11 9C FF               LD   de,-100   
072F   CD 3F 07               CALL   prtdec1   
0732   1E F6                  LD   e,-10   
0734   CD 3F 07               CALL   prtdec1   
0737   0C                     INC   c   ; flag = true for at least digit
0738   1E FF                  LD   e,-1   
073A   CD 3F 07               CALL   prtdec1   
073D   C1                     POP   bc   
073E   C9                     RET      
073F                PRTDEC1:      
073F   06 2F                  LD   b,"0"-1   
0741                PRTDEC2:      
0741   04                     INC   b   
0742   19                     ADD   hl,de   
0743   38 FC                  JR   c,prtdec2   
0745   ED 52                  SBC   hl,de   
0747   3E 30                  LD   a,"0"   
0749   B8                     CP   b   
074A   20 05                  JR   nz,prtdec3   
074C   AF                     XOR   a   
074D   B1                     OR   c   
074E   C8                     RET   z   
074F   18 01                  JR   prtdec4   
0751                PRTDEC3:      
0751   0C                     INC   c   
0752                PRTDEC4:      
0752   78                     LD   a,b   
0753   C3 85 00               JP   putchar   
0756                PRTHEX:      ; display hl as a 16-bit number in hex.
0756   C5                     PUSH   bc   ; preserve the IP
0757   7C                     LD   a,h   
0758   CD 61 07               CALL   prthex2   
075B   7D                     LD   a,l   
075C   CD 61 07               CALL   prthex2   
075F   C1                     POP   bc   
0760   C9                     RET      
0761                PRTHEX2:      
0761   4F                     LD   c,a   
0762   1F                     RRA      
0763   1F                     RRA      
0764   1F                     RRA      
0765   1F                     RRA      
0766   CD 6A 07               CALL   prthex3   
0769   79                     LD   a,c   
076A                PRTHEX3:      
076A   E6 0F                  AND   0x0F   
076C   C6 90                  ADD   a,0x90   
076E   27                     DAA      
076F   CE 40                  ADC   a,0x40   
0771   27                     DAA      
0772   C3 85 00               JP   putchar   
0775                PRTSTR0:      
0775   CD 85 00               CALL   putchar   
0778   23                     INC   hl   
0779                PRTSTR:      
0779   7E                     LD   a,(hl)   
077A   B7                     OR   a   
077B   20 F8                  JR   nz,prtstr0   
077D   C9                     RET      
077E                             ; **************************************************************************
077E                             ; calculate nesting value
077E                             ; a is char to be tested,
077E                             ; e is the nesting value (initially 0)
077E                             ; e is increased by ( and [
077E                             ; e is decreased by ) and ]
077E                             ; e has its bit 7 toggled by `
077E                             ; limited to 127 levels
077E                             ; **************************************************************************
077E                NESTING:      
077E   FE 22                  CP   $22   ; quote char
0780   28 06                  JR   z,nesting0   
0782   FE 60                  CP   "`"   ; quote char
0784   28 02                  JR   z,nesting0   
0786   18 0A                  JR   nesting1   
0788                NESTING0:      
0788   CB 7B                  BIT   7,e   
078A   28 03                  JR   z,nesting1a   
078C   CB BB                  RES   7,e   
078E   C9                     RET      
078F                NESTING1A:      
078F   CB FB                  SET   7,e   
0791   C9                     RET      
0792                NESTING1:      
0792   CB 7B                  BIT   7,e   
0794   C0                     RET   nz   
0795   FE 7B                  CP   "{"   
0797   28 08                  JR   z,nesting2   
0799   FE 5B                  CP   "["   
079B   28 04                  JR   z,nesting2   
079D   FE 28                  CP   "("   
079F   20 02                  JR   nz,nesting3   
07A1                NESTING2:      
07A1   1C                     INC   e   
07A2   C9                     RET      
07A3                NESTING3:      
07A3   FE 7D                  CP   "}"   
07A5   28 07                  JR   z,nesting4   
07A7   FE 5D                  CP   "]"   
07A9   28 03                  JR   z,nesting4   
07AB   FE 29                  CP   ")"   
07AD   C0                     RET   nz   
07AE                NESTING4:      
07AE   1D                     DEC   e   
07AF   C9                     RET      
07B0                PROMPT:      
07B0   CD C0 07               CALL   printStr   
07B3   0D 0A 3E 20 00         .CSTR   "\r\n> "   
07B8   C9                     RET      
07B9                CRLF:        
07B9   CD C0 07               CALL   printStr   
07BC   0D 0A 00               .CSTR   "\r\n"   
07BF   C9                     RET      
07C0                             ; prints a null teminated string
07C0                             ; the string should be immedaitely following the call
07C0                PRINTSTR:      
07C0   E3                     EX   (sp),hl   ; swap			
07C1   CD 79 07               CALL   prtstr   
07C4   23                     INC   hl   ; inc past NUL
07C5   E3                     EX   (sp),hl   ; put it back	
07C6   C9                     RET      
07C7                             ; executes a null teminated string (null executes exit_)
07C7                             ; the string should be immedaitely following the call
07C7                EXECSTR:      ; create a root stack frame
07C7   C1                     POP   bc   ; bc = code*
07C8   0B                     DEC   bc   ; dec to prepare for next routine
07C9   11 00 00               LD   de,0   
07CC   D5                     PUSH   de   ; push fake IP
07CD   D5                     PUSH   de   ; push null arglist*
07CE   D5                     PUSH   de   ; push null first_arg*
07CF   D5                     PUSH   de   ; push fake BP
07D0   DD E9                  JP   (ix)   
07D2                             ; arg1 .. argn func -- ?
07D2                CALL:        
07D2   E1                     POP   hl   
07D3   E9                     JP   (hl)   
07D4                             ; execute a block of code which ends with }
07D4                             ; creates a root scope if BP == stack
07D4                             ; else uses outer scope
07D4                GO:          
07D4   D1                     POP   de   ; de = block*
07D5                GO0:         
07D5   7B                     LD   a,e   ; if block* == null, exit
07D6   B2                     OR   d   
07D7   20 02                  JR   nz,go1   
07D9   DD E9                  JP   (ix)   
07DB                GO1:         
07DB   C5                     PUSH   bc   ; push IP
07DC   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
07DF   FD 44                  LD   b,iyh   
07E1   FD 4D                  LD   c,iyl   
07E3   B7                     OR   a   ; hl = stack - BP = root_scope
07E4   ED 42                  SBC   hl,bc   
07E6   7D                     LD   a,l   ; if root_scope, skip
07E7   B4                     OR   h   
07E8   28 11                  JR   z,go2   
07EA   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
07ED   FD 46 05               LD   b,(iy+5)   
07F0   C5                     PUSH   bc   
07F1   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
07F4   FD 46 03               LD   b,(iy+3)   
07F7   60 69                  LD   hl,bc   
07F9   18 05                  JR   go3   
07FB                GO2:         
07FB   E5                     PUSH   hl   ; push arg_list (null)
07FC   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
07FF   39                     ADD   hl,sp   
0800                GO3:         
0800   E5                     PUSH   hl   ; push first_arg
0801   FD E5                  PUSH   iy   ; push BP
0803   FD 21 00 00            LD   iy,0   ; BP = SP
0807   FD 39                  ADD   iy,sp   
0809   42 4B                  LD   bc,de   ; bc = de = block*-1
080B   0B                     DEC   bc   
080C   DD E9                  JP   (ix)   
080E                             ; call with args
080E                             ; creates a scope
080E                             ; code* -- ?
080E                DOFUNC:      ; execute code at pointer
080E   E1                     POP   hl   ; hl = code*
080F   7D                     LD   a,l   ; if code* == null, skip
0810   B4                     OR   h   
0811   20 02                  JR   nz,doFunc0   
0813   DD E9                  JP   (ix)   
0815                DOFUNC0:      
0815   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
0816   23                     INC   hl   
0817   56                     LD   d,(hl)   
0818   23                     INC   hl   
0819   EB                     EX   de,hl   
081A   7D                     LD   a,l   ; if arg_list* != null skip
081B   B4                     OR   h   
081C   20 08                  JR   nz,doFunc1   
081E   C5                     PUSH   bc   ; push IP
081F   E5                     PUSH   hl   ; push arg_list (null)
0820   21 04 00               LD   hl,4   ; hl = first_arg (BP + 8)
0823   39                     ADD   hl,sp   
0824   18 17                  JR   doFunc4   
0826                DOFUNC1:      
0826   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
0827   7E                     LD   a,(hl)   
0828   23                     INC   hl   
0829   B7                     OR   a   
082A   28 05                  JR   z,doFunc3   
082C                DOFUNC2:      
082C   3B                     DEC   sp   
082D   3B                     DEC   sp   
082E   3D                     DEC   a   
082F   20 FB                  JR   nz,doFunc2   
0831                DOFUNC3:      
0831   C5                     PUSH   bc   ; push IP
0832   E5                     PUSH   hl   ; push arg_list*
0833   2B                     DEC   hl   ; hl = num_args*
0834   2B                     DEC   hl   
0835   7E                     LD   a,(hl)   ; hl = num_args * 2
0836   87                     ADD   a,a   
0837   C6 04                  ADD   a,4   ; offset for IP and arg_list
0839   6F                     LD   l,a   
083A   26 00                  LD   h,$0   
083C   39                     ADD   hl,sp   ; hl = first_arg*
083D                DOFUNC4:      
083D   C3 00 08               JP   go3   
0840                             ; arg_list* block* -- ptr
0840                FUNC:        
0840   2A F4 19               LD   hl,(vHeapPtr)   ; hl = heapptr
0843   36 CD                  LD   (hl),$cd   ; compile "call doFunc"
0845   23                     INC   hl   
0846   36 0E                  LD   (hl),lsb(doFunc)   
0848   23                     INC   hl   
0849   36 08                  LD   (hl),msb(doFunc)   
084B   23                     INC   hl   
084C   D1                     POP   de   ; hl = heapPtr, de = block
084D   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
084E   E3                     EX   (sp),hl   
084F   EB                     EX   de,hl   
0850   73                     LD   (hl),e   ; compile arg_list*
0851   23                     INC   hl   
0852   72                     LD   (hl),d   
0853   23                     INC   hl   
0854   D1                     POP   de   ; de = block*
0855   C5                     PUSH   bc   ; (sp) = IP
0856   06 01                  LD   b,1   ; b = nesting
0858                FUNC1:       
0858   1A                     LD   a,(de)   
0859   13                     INC   de   
085A   77                     LD   (hl),a   
085B   23                     INC   hl   
085C   FE 29                  CP   ")"   
085E   28 29                  JR   z,func4   
0860   FE 7D                  CP   "}"   
0862   28 25                  JR   z,func4   
0864   FE 5D                  CP   "]"   
0866   28 21                  JR   z,func4   
0868   FE 28                  CP   "("   
086A   28 12                  JR   z,func2   
086C   FE 7B                  CP   "{"   
086E   28 0E                  JR   z,func2   
0870   FE 5B                  CP   "["   
0872   28 0A                  JR   z,func2   
0874   FE 27                  CP   "'"   
0876   28 09                  JR   z,func3   
0878   FE 60                  CP   "`"   
087A   28 05                  JR   z,func3   
087C   18 DA                  JR   func1   
087E                FUNC2:       
087E   04                     INC   b   
087F   18 D7                  JR   func1   
0881                FUNC3:       
0881   3E 80                  LD   a,$80   
0883   A8                     XOR   b   
0884   47                     LD   b,a   
0885   20 D1                  JR   nz,func1   
0887   18 03                  JR   func4a   
0889                FUNC4:       
0889   05                     DEC   b   
088A   20 CC                  JR   nz,func1   ; get the next element
088C                FUNC4A:      
088C   23                     INC   hl   
088D   C1                     POP   bc   ; de = defstart, hl = IP
088E   ED 5B F4 19            LD   de,(vHeapPtr)   ; de = defstart
0892   D5                     PUSH   de   
0893   22 F4 19               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0896   DD E9                  JP   (ix)   
0898                             ; $a .. $z
0898                             ; -- value
0898                             ; returns value of arg
0898                ARG:         
0898   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
089B   FD 56 05               LD   d,(iy+5)   
089E   EB                     EX   de,hl   
089F   7D                     LD   a,l   ; arg_list* == null, skip
08A0   B4                     OR   h   
08A1   28 1C                  JR   z,arg0a   
08A3   2B                     DEC   hl   ; a = num_args, hl = arg_list*
08A4   2B                     DEC   hl   
08A5   7E                     LD   a,(hl)   
08A6   23                     INC   hl   
08A7   23                     INC   hl   
08A8   B7                     OR   a   
08A9   28 14                  JR   z,arg0a   ; num_args == 0, skip
08AB   5F                     LD   e,a   ; e = a = num_args
08AC   03                     INC   bc   ; a = next char = arg_name
08AD   0A                     LD   a,(bc)   
08AE   C5                     PUSH   bc   ; save IP
08AF   43                     LD   b,e   ; b = e = num_args
08B0   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
08B3   FD 56 03               LD   d,(iy+3)   
08B6                ARG0:        
08B6   1B                     DEC   de   ; a = arg_name, de = next arg*
08B7   1B                     DEC   de   
08B8   BE                     CP   (hl)   
08B9   28 09                  JR   z,arg1   
08BB   23                     INC   hl   ; hl = next arg_list*
08BC   10 F8                  DJNZ   arg0   
08BE   C1                     POP   bc   ; no match, restore IP
08BF                ARG0A:       
08BF   11 00 00               LD   de,0   ; return 0
08C2   18 08                  JR   arg1a   
08C4                ARG1:        
08C4   C1                     POP   bc   ; restore IP
08C5   EB                     EX   de,hl   ; hl = arg*
08C6   22 EC 19               LD   (vPointer),hl   ; store arg* in setter
08C9   5E                     LD   e,(hl)   
08CA   23                     INC   hl   
08CB   56                     LD   d,(hl)   ; de = arg
08CC                ARG1A:       
08CC   D5                     PUSH   de   ; push arg
08CD   DD E9                  JP   (ix)   
08CF                INIT:        
08CF   DD 2A F2 19            LD   ix,(vNext)   
08D3   FD 21 80 18            LD   iy,STACK   
08D7   21 80 01               LD   hl,isysVars   
08DA   11 E6 19               LD   de,sysVars   
08DD   01 10 00               LD   bc,8 * 2   
08E0   ED B0                  LDIR      
08E2   21 00 19               LD   hl,vars   ; 52 vars LO HI
08E5   06 34                  LD   b,26*2   
08E7   AF                     XOR   a   
08E8                INIT0:       
08E8   77                     LD   (hl),a   
08E9   23                     INC   hl   
08EA   10 FC                  DJNZ   init0   
08EC   C9                     RET      
08ED                START:       
08ED   31 80 18               LD   sp,STACK   ; start of monty
08F0   CD CF 08               CALL   init   ; setups
08F3   CD C0 07               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
08F6   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0903                INTERPRET:      
0903   CD B0 07               CALL   prompt   
0906   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0909   ED 43 EA 19            LD   (vTIBPtr),bc   
090D                INTERPRET2:      ; calc nesting (a macro might have changed it)
090D   1E 00                  LD   e,0   ; initilize nesting value
090F   C5                     PUSH   bc   ; save offset into TIB,
0910                             ; bc is also the count of chars in TIB
0910   21 00 1A               LD   hl,TIB   ; hl is start of TIB
0913   18 06                  JR   interpret4   
0915                INTERPRET3:      
0915   7E                     LD   a,(hl)   ; a = char in TIB
0916   23                     INC   hl   ; inc pointer into TIB
0917   0B                     DEC   bc   ; dec count of chars in TIB
0918   CD 7E 07               CALL   nesting   ; update nesting value
091B                INTERPRET4:      
091B   79                     LD   a,c   ; is count zero?
091C   B0                     OR   b   
091D   20 F6                  JR   nz,interpret3   ; if not loop
091F   C1                     POP   bc   ; restore offset into TIB
0920                INTERPRET5:      
0920   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0923   FE 20                  CP   $20   ; compare to space
0925   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0927   FE 00                  CP   $0   ; is it end of string? NUL end of string
0929                             ; ???? NEEDED?
0929   28 27                  JR   z,interpret8   
092B   FE 0D                  CP   "\r"   ; carriage return? ascii 13
092D   28 10                  JR   z,interpret7   ; if anything else its macro/control
092F                             ; macro
092F                             ;  ld (vTIBPtr),bc
092F                             ;  ld hl,ctrlCodes
092F                             ;  add a,l			            ; look up key of macros
092F                             ;  ld l,a
092F                             ;  ld e,(hl)
092F                             ;  ld a,e
092F                             ;  or a
092F                             ;  jr z,macro1
092F                             ;  ld d,msb(macros)
092F                             ;  push de
092F                             ;  call call		            ; monty exec_ operation and jump to it
092F                             ;  db DC1,0
092F                             ; macro1:
092F                             ;  ld bc,(vTIBPtr)
092F   18 DC                  JR   interpret2   
0931                INTERPRET6:      
0931   21 00 1A               LD   hl,TIB   
0934   09                     ADD   hl,bc   
0935   77                     LD   (hl),a   ; store the character in textbuf
0936   03                     INC   bc   
0937   CD 85 00               CALL   putchar   ; echo character to screen
093A   CD 7E 07               CALL   nesting   
093D   18 E1                  JR   interpret5   ; wait for next character
093F                INTERPRET7:      
093F   21 00 1A               LD   hl,TIB   
0942   09                     ADD   hl,bc   
0943   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0945   23                     INC   hl   
0946   36 0A                  LD   (hl),"\n"   
0948   23                     INC   hl   
0949   03                     INC   bc   
094A   03                     INC   bc   
094B   CD B9 07               CALL   crlf   ; echo character to screen
094E   7B                     LD   a,e   ; if zero nesting append and ETX after \r
094F   B7                     OR   a   
0950   20 CE                  JR   nz,interpret5   
0952                INTERPRET8:      
0952   ED 43 EA 19            LD   (vTIBPtr),bc   
0956   01 00 1A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0959                             ; we pressed enter
0959   0B                     DEC   bc   
095A                NEXT:        
095A   03                     INC   bc   ; Increment the IP
095B   0A                     LD   a,(bc)   ; Get the next character and dispatch
095C   FE 20                  CP   " "   ; whitespace?
095E   28 FA                  JR   z,next   ; space? ignore
0960   38 0B                  JR   c,next1   
0962   FE 80                  CP   $80   ; if bit 7 = 1, treat as a big endian 15 bit address
0964   30 0E                  JR   nc,next2   
0966   6F                     LD   l,a   ; index into table
0967   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0969   6E                     LD   l,(hl)   ; get low jump address
096A   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
096C   E9                     JP   (hl)   ; Jump to routine
096D                NEXT1:       
096D   FE 00                  CP   NUL   ; end of input string?
096F   28 09                  JR   z,exit_   
0971   C3 03 09               JP   interpret   ; no, other whitespace, macros?
0974                NEXT2:       
0974   67                     LD   h,a   ; hl = big endian 15 bit address, ignore high bit
0975   03                     INC   bc   
0976   0A                     LD   a,(bc)   
0977   6F                     LD   l,a   
0978   29                     ADD   hl,hl   ; hl = word aligned 16 bit address
0979   E9                     JP   (hl)   
097A                EXIT_:       
097A   60 69                  LD   hl,bc   
097C   E9                     JP   (hl)   
097D                ERROR:       
097D   CD C0 07               CALL   printStr   
0980   45 72 72 6F 72 00      .CSTR   "Error"   
0986   CD 0E 07               CALL   prtdec   
0989   C3 03 09               JP   interpret   
098C                             ; call define
098C                             ; .pstr "abs",0
098C                             ; dw abs1 \a
098C                             ; call define
098C                             ; .pstr "addr",0
098C                             ; dw addr @
098C                             ; call define
098C                             ; .pstr "bytes",0
098C                             ; dw bytes \b
098C                             ; call define
098C                             ; .pstr "call",0
098C                             ; dw call :
098C                             ; call define
098C                             ; .pstr "exec",0
098C                             ; dw exec
098C                             ; call define
098C                             ; .pstr "false",0
098C                             ; dw false1 \f
098C                             ; call define
098C                             ; .pstr "filter",0
098C                             ; dw filter \f ?
098C                             ; call define
098C                             ; .pstr "frac",0
098C                             ; dw frac %
098C                             ; call define
098C                             ; .pstr "func",0
098C                             ; dw func
098C                             ; call define
098C                             ; .pstr "hash",0
098C                             ; dw hash \h
098C                             ; call define
098C                             ; .pstr "input",0
098C                             ; dw input \in ?
098C                             ; call define
098C                             ; .pstr "if",0
098C                             ; dw if \if
098C                             ; call define
098C                             ; .pstr "ifte",0
098C                             ; dw ifte \ife
098C                             ; call define
098C                             ; .pstr "key",0
098C                             ; dw key \k
098C                             ; call define
098C                             ; .pstr "let",0
098C                             ; dw let =
098C                             ; call define
098C                             ; .pstr "loop",0
098C                             ; dw loop \rpt
098C                             ; call define
098C                             ; .pstr "map",0
098C                             ; dw map \m ?
098C                             ; call define
098C                             ; .pstr "nil",0
098C                             ; dw null1. \0 ?
098C                             ; call define
098C                             ; .pstr "output",0
098C                             ; dw output \out ?
098C                             ; call define
098C                             ; .pstr "scan",0
098C                             ; dw scan.  \fold ?
098C                             ; call define
098C                             ; .pstr "set",0
098C                             ; dw set. ?
098C                             ; call define
098C                             ; .pstr "shiftLeft",0
098C                             ; dw shiftLeft <<
098C                             ; call define
098C                             ; .pstr "shiftRight",0
098C                             ; dw shiftRight >>
098C                             ; call define
098C                             ; .pstr "sqrt",0
098C                             ; dw sqrt1 \sqt
098C                             ; call define
098C                             ; .pstr "switch",0
098C                             ; dw switch. \sw
098C                             ; call define
098C                             ; .pstr "true",0
098C                             ; dw true1.   \t
098C                             ; call define
098C                             ; .pstr "words",0
098C                             ; dw words.  \w
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                          ALIGN   $100   
1900                VARS:        
1900                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
19D0                RESTARTS:      
19D0                RST08:    DS   2   
19D2                RST10:    DS   2   
19D4                RST18:    DS   2   
19D6                RST20:    DS   2   
19D8                RST28:    DS   2   
19DA                RST30:    DS   2   ; 
19DC                BAUD:     DS   2   ; 
19DE                INTVEC:   DS   2   ; 
19E0                NMIVEC:   DS   2   ; 
19E2                GETCVEC:   DS   2   ; 
19E4                PUTCVEC:   DS   2   ; 
19E6                SYSVARS:      
19E6                VFRAC:    DS   2   ; initialised sys variables
19E8                VDATAWIDTH:   DS   2   ; 
19EA                VTIBPTR:   DS   2   ; 
19EC                VPOINTER:   DS   2   ; 
19EE                VLASTDEF:   DS   2   ; 
19F0                VHASHSTR:   DS   2   ; 
19F2                VNEXT:    DS   2   ; 
19F4                VHEAPPTR:   DS   2   ; 
19F6                VTEMP1:   DS   2   ; uninitialised sys variables
19F8                VTEMP2:   DS   2   ; 
19FA                TBPTR:    DS   2   ; reserved for tests
19FC                          ALIGN   $100   
1A00                TIB:      DS   TIBSIZE   
1B00                          ALIGN   $100   
1B00                PAD:      DS   $100   
1C00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "{1} \\g", 1
4000   31 80 18               LD   SP,STACK   
4003   CD CF 08               CALL   init   
4006   CD C7 07               CALL   execStr   
4009   7B 31 7D 20 5C 67 00   .CSTR   "{1} \\g"   
4010                          ;*Macro unroll:  expect "{1} \\g",1
4010   E1                     POP   HL   
4011   E5                     PUSH   HL   
4012   11 01 00               LD   DE,1   
4015   B7                     OR   A   
4016   ED 52                  SBC   HL,DE   
4018   7D                     LD   A,L   
4019   B4                     OR   H   
401A   28 51                  JR   Z,expectM_0_2243S43   
401C   CD C0 07               CALL   printStr   
401F   43 6F 64 65 3A 20 7B 31 7D 20 5C 67 00 .CSTR   "Code: ","{1} \\g"   
402C   CD C0 07               CALL   printStr   
402F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
403E   21 01 00               LD   HL,1   
4041   CD 0E 07               CALL   prtdec   
4044   CD C0 07               CALL   printStr   
4047   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4054   E1                     POP   hl   
4055   E5                     PUSH   hl   
4056   CD 0E 07               CALL   prtdec   
4059   E1                     POP   hl   
405A   CD C0 07               CALL   printStr   
405D   20 28 23 00            .CSTR   " (#"   
4061   CD 56 07               CALL   prthex   
4064   CD C0 07               CALL   printStr   
4067   29 0D 0A 00            .CSTR   ")\r\n"   
406B   76                     HALT      
406C   00                     .CSTR      
406D                EXPECTM_0_2243S43:      
406D   E1                     POP   HL   
406E                          ;*Macro unroll:  test "{{1} \\g} \\g", 1
406E   31 80 18               LD   SP,STACK   
4071   CD CF 08               CALL   init   
4074   CD C7 07               CALL   execStr   
4077   7B 7B 31 7D 20 5C 67 7D 20 5C 67 00 .CSTR   "{{1} \\g} \\g"   
4083                          ;*Macro unroll:  expect "{{1} \\g} \\g",1
4083   E1                     POP   HL   
4084   E5                     PUSH   HL   
4085   11 01 00               LD   DE,1   
4088   B7                     OR   A   
4089   ED 52                  SBC   HL,DE   
408B   7D                     LD   A,L   
408C   B4                     OR   H   
408D   28 56                  JR   Z,expectM_0_2244S43   
408F   CD C0 07               CALL   printStr   
4092   43 6F 64 65 3A 20 7B 7B 31 7D 20 5C 67 7D 20 5C 67 00 .CSTR   "Code: ","{{1} \\g} \\g"   
40A4   CD C0 07               CALL   printStr   
40A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40B6   21 01 00               LD   HL,1   
40B9   CD 0E 07               CALL   prtdec   
40BC   CD C0 07               CALL   printStr   
40BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40CC   E1                     POP   hl   
40CD   E5                     PUSH   hl   
40CE   CD 0E 07               CALL   prtdec   
40D1   E1                     POP   hl   
40D2   CD C0 07               CALL   printStr   
40D5   20 28 23 00            .CSTR   " (#"   
40D9   CD 56 07               CALL   prthex   
40DC   CD C0 07               CALL   printStr   
40DF   29 0D 0A 00            .CSTR   ")\r\n"   
40E3   76                     HALT      
40E4   00                     .CSTR      
40E5                EXPECTM_0_2244S43:      
40E5   E1                     POP   HL   
40E6                          ;*Macro unroll:  test "{{{1} \\g} \\g} \\g", 1
40E6   31 80 18               LD   SP,STACK   
40E9   CD CF 08               CALL   init   
40EC   CD C7 07               CALL   execStr   
40EF   7B 7B 7B 31 7D 20 5C 67 7D 20 5C 67 7D 20 5C 67 00 .CSTR   "{{{1} \\g} \\g} \\g"   
4100                          ;*Macro unroll:  expect "{{{1} \\g} \\g} \\g",1
4100   E1                     POP   HL   
4101   E5                     PUSH   HL   
4102   11 01 00               LD   DE,1   
4105   B7                     OR   A   
4106   ED 52                  SBC   HL,DE   
4108   7D                     LD   A,L   
4109   B4                     OR   H   
410A   28 5B                  JR   Z,expectM_0_2245S43   
410C   CD C0 07               CALL   printStr   
410F   43 6F 64 65 3A 20 7B 7B 7B 31 7D 20 5C 67 7D 20 5C 67 7D 20 5C 67 00 .CSTR   "Code: ","{{{1} \\g} \\g} \\g"   
4126   CD C0 07               CALL   printStr   
4129   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4138   21 01 00               LD   HL,1   
413B   CD 0E 07               CALL   prtdec   
413E   CD C0 07               CALL   printStr   
4141   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
414E   E1                     POP   hl   
414F   E5                     PUSH   hl   
4150   CD 0E 07               CALL   prtdec   
4153   E1                     POP   hl   
4154   CD C0 07               CALL   printStr   
4157   20 28 23 00            .CSTR   " (#"   
415B   CD 56 07               CALL   prthex   
415E   CD C0 07               CALL   printStr   
4161   29 0D 0A 00            .CSTR   ")\r\n"   
4165   76                     HALT      
4166   00                     .CSTR      
4167                EXPECTM_0_2245S43:      
4167   E1                     POP   HL   
4168                             ; test "1 5 (a) {2} func call", 2
4168                             ; test "1 5 (a) {$a} func call", 5
4168                             ; test "1 5 (a:b) {$a} func call ", 5
4168                             ; 
4168                          ;*Macro unroll:  test "1", 1
4168   31 80 18               LD   SP,STACK   
416B   CD CF 08               CALL   init   
416E   CD C7 07               CALL   execStr   
4171   31 00                  .CSTR   "1"   
4173                          ;*Macro unroll:  expect "1",1
4173   E1                     POP   HL   
4174   E5                     PUSH   HL   
4175   11 01 00               LD   DE,1   
4178   B7                     OR   A   
4179   ED 52                  SBC   HL,DE   
417B   7D                     LD   A,L   
417C   B4                     OR   H   
417D   28 4C                  JR   Z,expectM_0_2250S43   
417F   CD C0 07               CALL   printStr   
4182   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
418A   CD C0 07               CALL   printStr   
418D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
419C   21 01 00               LD   HL,1   
419F   CD 0E 07               CALL   prtdec   
41A2   CD C0 07               CALL   printStr   
41A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41B2   E1                     POP   hl   
41B3   E5                     PUSH   hl   
41B4   CD 0E 07               CALL   prtdec   
41B7   E1                     POP   hl   
41B8   CD C0 07               CALL   printStr   
41BB   20 28 23 00            .CSTR   " (#"   
41BF   CD 56 07               CALL   prthex   
41C2   CD C0 07               CALL   printStr   
41C5   29 0D 0A 00            .CSTR   ")\r\n"   
41C9   76                     HALT      
41CA   00                     .CSTR      
41CB                EXPECTM_0_2250S43:      
41CB   E1                     POP   HL   
41CC                          ;*Macro unroll:  test "2", 2
41CC   31 80 18               LD   SP,STACK   
41CF   CD CF 08               CALL   init   
41D2   CD C7 07               CALL   execStr   
41D5   32 00                  .CSTR   "2"   
41D7                          ;*Macro unroll:  expect "2",2
41D7   E1                     POP   HL   
41D8   E5                     PUSH   HL   
41D9   11 02 00               LD   DE,2   
41DC   B7                     OR   A   
41DD   ED 52                  SBC   HL,DE   
41DF   7D                     LD   A,L   
41E0   B4                     OR   H   
41E1   28 4C                  JR   Z,expectM_0_2251S43   
41E3   CD C0 07               CALL   printStr   
41E6   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
41EE   CD C0 07               CALL   printStr   
41F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4200   21 02 00               LD   HL,2   
4203   CD 0E 07               CALL   prtdec   
4206   CD C0 07               CALL   printStr   
4209   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4216   E1                     POP   hl   
4217   E5                     PUSH   hl   
4218   CD 0E 07               CALL   prtdec   
421B   E1                     POP   hl   
421C   CD C0 07               CALL   printStr   
421F   20 28 23 00            .CSTR   " (#"   
4223   CD 56 07               CALL   prthex   
4226   CD C0 07               CALL   printStr   
4229   29 0D 0A 00            .CSTR   ")\r\n"   
422D   76                     HALT      
422E   00                     .CSTR      
422F                EXPECTM_0_2251S43:      
422F   E1                     POP   HL   
4230                          ;*Macro unroll:  test "1", 1
4230   31 80 18               LD   SP,STACK   
4233   CD CF 08               CALL   init   
4236   CD C7 07               CALL   execStr   
4239   31 00                  .CSTR   "1"   
423B                          ;*Macro unroll:  expect "1",1
423B   E1                     POP   HL   
423C   E5                     PUSH   HL   
423D   11 01 00               LD   DE,1   
4240   B7                     OR   A   
4241   ED 52                  SBC   HL,DE   
4243   7D                     LD   A,L   
4244   B4                     OR   H   
4245   28 4C                  JR   Z,expectM_0_2252S43   
4247   CD C0 07               CALL   printStr   
424A   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
4252   CD C0 07               CALL   printStr   
4255   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4264   21 01 00               LD   HL,1   
4267   CD 0E 07               CALL   prtdec   
426A   CD C0 07               CALL   printStr   
426D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
427A   E1                     POP   hl   
427B   E5                     PUSH   hl   
427C   CD 0E 07               CALL   prtdec   
427F   E1                     POP   hl   
4280   CD C0 07               CALL   printStr   
4283   20 28 23 00            .CSTR   " (#"   
4287   CD 56 07               CALL   prthex   
428A   CD C0 07               CALL   printStr   
428D   29 0D 0A 00            .CSTR   ")\r\n"   
4291   76                     HALT      
4292   00                     .CSTR      
4293                EXPECTM_0_2252S43:      
4293   E1                     POP   HL   
4294                          ;*Macro unroll:  test "0", 0
4294   31 80 18               LD   SP,STACK   
4297   CD CF 08               CALL   init   
429A   CD C7 07               CALL   execStr   
429D   30 00                  .CSTR   "0"   
429F                          ;*Macro unroll:  expect "0",0
429F   E1                     POP   HL   
42A0   E5                     PUSH   HL   
42A1   11 00 00               LD   DE,0   
42A4   B7                     OR   A   
42A5   ED 52                  SBC   HL,DE   
42A7   7D                     LD   A,L   
42A8   B4                     OR   H   
42A9   28 4C                  JR   Z,expectM_0_2253S43   
42AB   CD C0 07               CALL   printStr   
42AE   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
42B6   CD C0 07               CALL   printStr   
42B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42C8   21 00 00               LD   HL,0   
42CB   CD 0E 07               CALL   prtdec   
42CE   CD C0 07               CALL   printStr   
42D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42DE   E1                     POP   hl   
42DF   E5                     PUSH   hl   
42E0   CD 0E 07               CALL   prtdec   
42E3   E1                     POP   hl   
42E4   CD C0 07               CALL   printStr   
42E7   20 28 23 00            .CSTR   " (#"   
42EB   CD 56 07               CALL   prthex   
42EE   CD C0 07               CALL   printStr   
42F1   29 0D 0A 00            .CSTR   ")\r\n"   
42F5   76                     HALT      
42F6   00                     .CSTR      
42F7                EXPECTM_0_2253S43:      
42F7   E1                     POP   HL   
42F8                          ;*Macro unroll:  test "10", 10
42F8   31 80 18               LD   SP,STACK   
42FB   CD CF 08               CALL   init   
42FE   CD C7 07               CALL   execStr   
4301   31 30 00               .CSTR   "10"   
4304                          ;*Macro unroll:  expect "10",10
4304   E1                     POP   HL   
4305   E5                     PUSH   HL   
4306   11 0A 00               LD   DE,10   
4309   B7                     OR   A   
430A   ED 52                  SBC   HL,DE   
430C   7D                     LD   A,L   
430D   B4                     OR   H   
430E   28 4D                  JR   Z,expectM_0_2254S43   
4310   CD C0 07               CALL   printStr   
4313   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
431C   CD C0 07               CALL   printStr   
431F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
432E   21 0A 00               LD   HL,10   
4331   CD 0E 07               CALL   prtdec   
4334   CD C0 07               CALL   printStr   
4337   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4344   E1                     POP   hl   
4345   E5                     PUSH   hl   
4346   CD 0E 07               CALL   prtdec   
4349   E1                     POP   hl   
434A   CD C0 07               CALL   printStr   
434D   20 28 23 00            .CSTR   " (#"   
4351   CD 56 07               CALL   prthex   
4354   CD C0 07               CALL   printStr   
4357   29 0D 0A 00            .CSTR   ")\r\n"   
435B   76                     HALT      
435C   00                     .CSTR      
435D                EXPECTM_0_2254S43:      
435D   E1                     POP   HL   
435E                          ;*Macro unroll:  test "123", 123
435E   31 80 18               LD   SP,STACK   
4361   CD CF 08               CALL   init   
4364   CD C7 07               CALL   execStr   
4367   31 32 33 00            .CSTR   "123"   
436B                          ;*Macro unroll:  expect "123",123
436B   E1                     POP   HL   
436C   E5                     PUSH   HL   
436D   11 7B 00               LD   DE,123   
4370   B7                     OR   A   
4371   ED 52                  SBC   HL,DE   
4373   7D                     LD   A,L   
4374   B4                     OR   H   
4375   28 4E                  JR   Z,expectM_0_2255S43   
4377   CD C0 07               CALL   printStr   
437A   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
4384   CD C0 07               CALL   printStr   
4387   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4396   21 7B 00               LD   HL,123   
4399   CD 0E 07               CALL   prtdec   
439C   CD C0 07               CALL   printStr   
439F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43AC   E1                     POP   hl   
43AD   E5                     PUSH   hl   
43AE   CD 0E 07               CALL   prtdec   
43B1   E1                     POP   hl   
43B2   CD C0 07               CALL   printStr   
43B5   20 28 23 00            .CSTR   " (#"   
43B9   CD 56 07               CALL   prthex   
43BC   CD C0 07               CALL   printStr   
43BF   29 0D 0A 00            .CSTR   ")\r\n"   
43C3   76                     HALT      
43C4   00                     .CSTR      
43C5                EXPECTM_0_2255S43:      
43C5   E1                     POP   HL   
43C6                          ;*Macro unroll:  test "-1",-1
43C6   31 80 18               LD   SP,STACK   
43C9   CD CF 08               CALL   init   
43CC   CD C7 07               CALL   execStr   
43CF   2D 31 00               .CSTR   "-1"   
43D2                          ;*Macro unroll:  expect "-1",-1
43D2   E1                     POP   HL   
43D3   E5                     PUSH   HL   
43D4   11 FF FF               LD   DE,-1   
43D7   B7                     OR   A   
43D8   ED 52                  SBC   HL,DE   
43DA   7D                     LD   A,L   
43DB   B4                     OR   H   
43DC   28 4D                  JR   Z,expectM_0_2256S43   
43DE   CD C0 07               CALL   printStr   
43E1   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
43EA   CD C0 07               CALL   printStr   
43ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43FC   21 FF FF               LD   HL,-1   
43FF   CD 0E 07               CALL   prtdec   
4402   CD C0 07               CALL   printStr   
4405   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4412   E1                     POP   hl   
4413   E5                     PUSH   hl   
4414   CD 0E 07               CALL   prtdec   
4417   E1                     POP   hl   
4418   CD C0 07               CALL   printStr   
441B   20 28 23 00            .CSTR   " (#"   
441F   CD 56 07               CALL   prthex   
4422   CD C0 07               CALL   printStr   
4425   29 0D 0A 00            .CSTR   ")\r\n"   
4429   76                     HALT      
442A   00                     .CSTR      
442B                EXPECTM_0_2256S43:      
442B   E1                     POP   HL   
442C                          ;*Macro unroll:  test "''", 0
442C   31 80 18               LD   SP,STACK   
442F   CD CF 08               CALL   init   
4432   CD C7 07               CALL   execStr   
4435   27 27 00               .CSTR   "''"   
4438                          ;*Macro unroll:  expect "''",0
4438   E1                     POP   HL   
4439   E5                     PUSH   HL   
443A   11 00 00               LD   DE,0   
443D   B7                     OR   A   
443E   ED 52                  SBC   HL,DE   
4440   7D                     LD   A,L   
4441   B4                     OR   H   
4442   28 4D                  JR   Z,expectM_0_2257S43   
4444   CD C0 07               CALL   printStr   
4447   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
4450   CD C0 07               CALL   printStr   
4453   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4462   21 00 00               LD   HL,0   
4465   CD 0E 07               CALL   prtdec   
4468   CD C0 07               CALL   printStr   
446B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4478   E1                     POP   hl   
4479   E5                     PUSH   hl   
447A   CD 0E 07               CALL   prtdec   
447D   E1                     POP   hl   
447E   CD C0 07               CALL   printStr   
4481   20 28 23 00            .CSTR   " (#"   
4485   CD 56 07               CALL   prthex   
4488   CD C0 07               CALL   printStr   
448B   29 0D 0A 00            .CSTR   ")\r\n"   
448F   76                     HALT      
4490   00                     .CSTR      
4491                EXPECTM_0_2257S43:      
4491   E1                     POP   HL   
4492                          ;*Macro unroll:  test "'a'", $61
4492   31 80 18               LD   SP,STACK   
4495   CD CF 08               CALL   init   
4498   CD C7 07               CALL   execStr   
449B   27 61 27 00            .CSTR   "'a'"   
449F                          ;*Macro unroll:  expect "'a'",$61
449F   E1                     POP   HL   
44A0   E5                     PUSH   HL   
44A1   11 61 00               LD   DE,$61   
44A4   B7                     OR   A   
44A5   ED 52                  SBC   HL,DE   
44A7   7D                     LD   A,L   
44A8   B4                     OR   H   
44A9   28 4E                  JR   Z,expectM_0_2258S43   
44AB   CD C0 07               CALL   printStr   
44AE   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
44B8   CD C0 07               CALL   printStr   
44BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44CA   21 61 00               LD   HL,$61   
44CD   CD 0E 07               CALL   prtdec   
44D0   CD C0 07               CALL   printStr   
44D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44E0   E1                     POP   hl   
44E1   E5                     PUSH   hl   
44E2   CD 0E 07               CALL   prtdec   
44E5   E1                     POP   hl   
44E6   CD C0 07               CALL   printStr   
44E9   20 28 23 00            .CSTR   " (#"   
44ED   CD 56 07               CALL   prthex   
44F0   CD C0 07               CALL   printStr   
44F3   29 0D 0A 00            .CSTR   ")\r\n"   
44F7   76                     HALT      
44F8   00                     .CSTR      
44F9                EXPECTM_0_2258S43:      
44F9   E1                     POP   HL   
44FA                          ;*Macro unroll:  test "'\\''", $27
44FA   31 80 18               LD   SP,STACK   
44FD   CD CF 08               CALL   init   
4500   CD C7 07               CALL   execStr   
4503   27 5C 27 27 00         .CSTR   "'\\''"   
4508                          ;*Macro unroll:  expect "'\\''",$27
4508   E1                     POP   HL   
4509   E5                     PUSH   HL   
450A   11 27 00               LD   DE,$27   
450D   B7                     OR   A   
450E   ED 52                  SBC   HL,DE   
4510   7D                     LD   A,L   
4511   B4                     OR   H   
4512   28 4F                  JR   Z,expectM_0_2259S43   
4514   CD C0 07               CALL   printStr   
4517   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
4522   CD C0 07               CALL   printStr   
4525   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4534   21 27 00               LD   HL,$27   
4537   CD 0E 07               CALL   prtdec   
453A   CD C0 07               CALL   printStr   
453D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
454A   E1                     POP   hl   
454B   E5                     PUSH   hl   
454C   CD 0E 07               CALL   prtdec   
454F   E1                     POP   hl   
4550   CD C0 07               CALL   printStr   
4553   20 28 23 00            .CSTR   " (#"   
4557   CD 56 07               CALL   prthex   
455A   CD C0 07               CALL   printStr   
455D   29 0D 0A 00            .CSTR   ")\r\n"   
4561   76                     HALT      
4562   00                     .CSTR      
4563                EXPECTM_0_2259S43:      
4563   E1                     POP   HL   
4564                          ;*Macro unroll:  test "#10", $10
4564   31 80 18               LD   SP,STACK   
4567   CD CF 08               CALL   init   
456A   CD C7 07               CALL   execStr   
456D   23 31 30 00            .CSTR   "#10"   
4571                          ;*Macro unroll:  expect "#10",$10
4571   E1                     POP   HL   
4572   E5                     PUSH   HL   
4573   11 10 00               LD   DE,$10   
4576   B7                     OR   A   
4577   ED 52                  SBC   HL,DE   
4579   7D                     LD   A,L   
457A   B4                     OR   H   
457B   28 4E                  JR   Z,expectM_0_2260S43   
457D   CD C0 07               CALL   printStr   
4580   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
458A   CD C0 07               CALL   printStr   
458D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
459C   21 10 00               LD   HL,$10   
459F   CD 0E 07               CALL   prtdec   
45A2   CD C0 07               CALL   printStr   
45A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45B2   E1                     POP   hl   
45B3   E5                     PUSH   hl   
45B4   CD 0E 07               CALL   prtdec   
45B7   E1                     POP   hl   
45B8   CD C0 07               CALL   printStr   
45BB   20 28 23 00            .CSTR   " (#"   
45BF   CD 56 07               CALL   prthex   
45C2   CD C0 07               CALL   printStr   
45C5   29 0D 0A 00            .CSTR   ")\r\n"   
45C9   76                     HALT      
45CA   00                     .CSTR      
45CB                EXPECTM_0_2260S43:      
45CB   E1                     POP   HL   
45CC                          ;*Macro unroll:  test "#FF", $FF
45CC   31 80 18               LD   SP,STACK   
45CF   CD CF 08               CALL   init   
45D2   CD C7 07               CALL   execStr   
45D5   23 46 46 00            .CSTR   "#FF"   
45D9                          ;*Macro unroll:  expect "#FF",$FF
45D9   E1                     POP   HL   
45DA   E5                     PUSH   HL   
45DB   11 FF 00               LD   DE,$FF   
45DE   B7                     OR   A   
45DF   ED 52                  SBC   HL,DE   
45E1   7D                     LD   A,L   
45E2   B4                     OR   H   
45E3   28 4E                  JR   Z,expectM_0_2261S43   
45E5   CD C0 07               CALL   printStr   
45E8   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
45F2   CD C0 07               CALL   printStr   
45F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4604   21 FF 00               LD   HL,$FF   
4607   CD 0E 07               CALL   prtdec   
460A   CD C0 07               CALL   printStr   
460D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
461A   E1                     POP   hl   
461B   E5                     PUSH   hl   
461C   CD 0E 07               CALL   prtdec   
461F   E1                     POP   hl   
4620   CD C0 07               CALL   printStr   
4623   20 28 23 00            .CSTR   " (#"   
4627   CD 56 07               CALL   prthex   
462A   CD C0 07               CALL   printStr   
462D   29 0D 0A 00            .CSTR   ")\r\n"   
4631   76                     HALT      
4632   00                     .CSTR      
4633                EXPECTM_0_2261S43:      
4633   E1                     POP   HL   
4634                          ;*Macro unroll:  test "-1 2 +",1
4634   31 80 18               LD   SP,STACK   
4637   CD CF 08               CALL   init   
463A   CD C7 07               CALL   execStr   
463D   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
4644                          ;*Macro unroll:  expect "-1 2 +",1
4644   E1                     POP   HL   
4645   E5                     PUSH   HL   
4646   11 01 00               LD   DE,1   
4649   B7                     OR   A   
464A   ED 52                  SBC   HL,DE   
464C   7D                     LD   A,L   
464D   B4                     OR   H   
464E   28 51                  JR   Z,expectM_0_2262S43   
4650   CD C0 07               CALL   printStr   
4653   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
4660   CD C0 07               CALL   printStr   
4663   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4672   21 01 00               LD   HL,1   
4675   CD 0E 07               CALL   prtdec   
4678   CD C0 07               CALL   printStr   
467B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4688   E1                     POP   hl   
4689   E5                     PUSH   hl   
468A   CD 0E 07               CALL   prtdec   
468D   E1                     POP   hl   
468E   CD C0 07               CALL   printStr   
4691   20 28 23 00            .CSTR   " (#"   
4695   CD 56 07               CALL   prthex   
4698   CD C0 07               CALL   printStr   
469B   29 0D 0A 00            .CSTR   ")\r\n"   
469F   76                     HALT      
46A0   00                     .CSTR      
46A1                EXPECTM_0_2262S43:      
46A1   E1                     POP   HL   
46A2                          ;*Macro unroll:  test "-1 1 +",0
46A2   31 80 18               LD   SP,STACK   
46A5   CD CF 08               CALL   init   
46A8   CD C7 07               CALL   execStr   
46AB   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
46B2                          ;*Macro unroll:  expect "-1 1 +",0
46B2   E1                     POP   HL   
46B3   E5                     PUSH   HL   
46B4   11 00 00               LD   DE,0   
46B7   B7                     OR   A   
46B8   ED 52                  SBC   HL,DE   
46BA   7D                     LD   A,L   
46BB   B4                     OR   H   
46BC   28 51                  JR   Z,expectM_0_2263S43   
46BE   CD C0 07               CALL   printStr   
46C1   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
46CE   CD C0 07               CALL   printStr   
46D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46E0   21 00 00               LD   HL,0   
46E3   CD 0E 07               CALL   prtdec   
46E6   CD C0 07               CALL   printStr   
46E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46F6   E1                     POP   hl   
46F7   E5                     PUSH   hl   
46F8   CD 0E 07               CALL   prtdec   
46FB   E1                     POP   hl   
46FC   CD C0 07               CALL   printStr   
46FF   20 28 23 00            .CSTR   " (#"   
4703   CD 56 07               CALL   prthex   
4706   CD C0 07               CALL   printStr   
4709   29 0D 0A 00            .CSTR   ")\r\n"   
470D   76                     HALT      
470E   00                     .CSTR      
470F                EXPECTM_0_2263S43:      
470F   E1                     POP   HL   
4710                          ;*Macro unroll:  test "1 2 +", 3
4710   31 80 18               LD   SP,STACK   
4713   CD CF 08               CALL   init   
4716   CD C7 07               CALL   execStr   
4719   31 20 32 20 2B 00      .CSTR   "1 2 +"   
471F                          ;*Macro unroll:  expect "1 2 +",3
471F   E1                     POP   HL   
4720   E5                     PUSH   HL   
4721   11 03 00               LD   DE,3   
4724   B7                     OR   A   
4725   ED 52                  SBC   HL,DE   
4727   7D                     LD   A,L   
4728   B4                     OR   H   
4729   28 50                  JR   Z,expectM_0_2264S43   
472B   CD C0 07               CALL   printStr   
472E   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
473A   CD C0 07               CALL   printStr   
473D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
474C   21 03 00               LD   HL,3   
474F   CD 0E 07               CALL   prtdec   
4752   CD C0 07               CALL   printStr   
4755   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4762   E1                     POP   hl   
4763   E5                     PUSH   hl   
4764   CD 0E 07               CALL   prtdec   
4767   E1                     POP   hl   
4768   CD C0 07               CALL   printStr   
476B   20 28 23 00            .CSTR   " (#"   
476F   CD 56 07               CALL   prthex   
4772   CD C0 07               CALL   printStr   
4775   29 0D 0A 00            .CSTR   ")\r\n"   
4779   76                     HALT      
477A   00                     .CSTR      
477B                EXPECTM_0_2264S43:      
477B   E1                     POP   HL   
477C                          ;*Macro unroll:  test "4 1 2 +", 3
477C   31 80 18               LD   SP,STACK   
477F   CD CF 08               CALL   init   
4782   CD C7 07               CALL   execStr   
4785   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
478D                          ;*Macro unroll:  expect "4 1 2 +",3
478D   E1                     POP   HL   
478E   E5                     PUSH   HL   
478F   11 03 00               LD   DE,3   
4792   B7                     OR   A   
4793   ED 52                  SBC   HL,DE   
4795   7D                     LD   A,L   
4796   B4                     OR   H   
4797   28 52                  JR   Z,expectM_0_2265S43   
4799   CD C0 07               CALL   printStr   
479C   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
47AA   CD C0 07               CALL   printStr   
47AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47BC   21 03 00               LD   HL,3   
47BF   CD 0E 07               CALL   prtdec   
47C2   CD C0 07               CALL   printStr   
47C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47D2   E1                     POP   hl   
47D3   E5                     PUSH   hl   
47D4   CD 0E 07               CALL   prtdec   
47D7   E1                     POP   hl   
47D8   CD C0 07               CALL   printStr   
47DB   20 28 23 00            .CSTR   " (#"   
47DF   CD 56 07               CALL   prthex   
47E2   CD C0 07               CALL   printStr   
47E5   29 0D 0A 00            .CSTR   ")\r\n"   
47E9   76                     HALT      
47EA   00                     .CSTR      
47EB                EXPECTM_0_2265S43:      
47EB   E1                     POP   HL   
47EC                          ;*Macro unroll:  test "1 2 +", 3
47EC   31 80 18               LD   SP,STACK   
47EF   CD CF 08               CALL   init   
47F2   CD C7 07               CALL   execStr   
47F5   31 20 32 20 2B 00      .CSTR   "1 2 +"   
47FB                          ;*Macro unroll:  expect "1 2 +",3
47FB   E1                     POP   HL   
47FC   E5                     PUSH   HL   
47FD   11 03 00               LD   DE,3   
4800   B7                     OR   A   
4801   ED 52                  SBC   HL,DE   
4803   7D                     LD   A,L   
4804   B4                     OR   H   
4805   28 50                  JR   Z,expectM_0_2266S43   
4807   CD C0 07               CALL   printStr   
480A   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
4816   CD C0 07               CALL   printStr   
4819   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4828   21 03 00               LD   HL,3   
482B   CD 0E 07               CALL   prtdec   
482E   CD C0 07               CALL   printStr   
4831   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
483E   E1                     POP   hl   
483F   E5                     PUSH   hl   
4840   CD 0E 07               CALL   prtdec   
4843   E1                     POP   hl   
4844   CD C0 07               CALL   printStr   
4847   20 28 23 00            .CSTR   " (#"   
484B   CD 56 07               CALL   prthex   
484E   CD C0 07               CALL   printStr   
4851   29 0D 0A 00            .CSTR   ")\r\n"   
4855   76                     HALT      
4856   00                     .CSTR      
4857                EXPECTM_0_2266S43:      
4857   E1                     POP   HL   
4858                          ;*Macro unroll:  test "123 456 +", 123+456
4858   31 80 18               LD   SP,STACK   
485B   CD CF 08               CALL   init   
485E   CD C7 07               CALL   execStr   
4861   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
486B                          ;*Macro unroll:  expect "123 456 +",123+456
486B   E1                     POP   HL   
486C   E5                     PUSH   HL   
486D   11 43 02               LD   DE,123+456   
4870   B7                     OR   A   
4871   ED 52                  SBC   HL,DE   
4873   7D                     LD   A,L   
4874   B4                     OR   H   
4875   28 54                  JR   Z,expectM_0_2267S43   
4877   CD C0 07               CALL   printStr   
487A   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
488A   CD C0 07               CALL   printStr   
488D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
489C   21 43 02               LD   HL,123+456   
489F   CD 0E 07               CALL   prtdec   
48A2   CD C0 07               CALL   printStr   
48A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48B2   E1                     POP   hl   
48B3   E5                     PUSH   hl   
48B4   CD 0E 07               CALL   prtdec   
48B7   E1                     POP   hl   
48B8   CD C0 07               CALL   printStr   
48BB   20 28 23 00            .CSTR   " (#"   
48BF   CD 56 07               CALL   prthex   
48C2   CD C0 07               CALL   printStr   
48C5   29 0D 0A 00            .CSTR   ")\r\n"   
48C9   76                     HALT      
48CA   00                     .CSTR      
48CB                EXPECTM_0_2267S43:      
48CB   E1                     POP   HL   
48CC                          ;*Macro unroll:  test "64 128 +", 64+128
48CC   31 80 18               LD   SP,STACK   
48CF   CD CF 08               CALL   init   
48D2   CD C7 07               CALL   execStr   
48D5   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
48DE                          ;*Macro unroll:  expect "64 128 +",64+128
48DE   E1                     POP   HL   
48DF   E5                     PUSH   HL   
48E0   11 C0 00               LD   DE,64+128   
48E3   B7                     OR   A   
48E4   ED 52                  SBC   HL,DE   
48E6   7D                     LD   A,L   
48E7   B4                     OR   H   
48E8   28 53                  JR   Z,expectM_0_2268S43   
48EA   CD C0 07               CALL   printStr   
48ED   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
48FC   CD C0 07               CALL   printStr   
48FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
490E   21 C0 00               LD   HL,64+128   
4911   CD 0E 07               CALL   prtdec   
4914   CD C0 07               CALL   printStr   
4917   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4924   E1                     POP   hl   
4925   E5                     PUSH   hl   
4926   CD 0E 07               CALL   prtdec   
4929   E1                     POP   hl   
492A   CD C0 07               CALL   printStr   
492D   20 28 23 00            .CSTR   " (#"   
4931   CD 56 07               CALL   prthex   
4934   CD C0 07               CALL   printStr   
4937   29 0D 0A 00            .CSTR   ")\r\n"   
493B   76                     HALT      
493C   00                     .CSTR      
493D                EXPECTM_0_2268S43:      
493D   E1                     POP   HL   
493E                          ;*Macro unroll:  test "-1 -1 -",0
493E   31 80 18               LD   SP,STACK   
4941   CD CF 08               CALL   init   
4944   CD C7 07               CALL   execStr   
4947   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
494F                          ;*Macro unroll:  expect "-1 -1 -",0
494F   E1                     POP   HL   
4950   E5                     PUSH   HL   
4951   11 00 00               LD   DE,0   
4954   B7                     OR   A   
4955   ED 52                  SBC   HL,DE   
4957   7D                     LD   A,L   
4958   B4                     OR   H   
4959   28 52                  JR   Z,expectM_0_2269S43   
495B   CD C0 07               CALL   printStr   
495E   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
496C   CD C0 07               CALL   printStr   
496F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
497E   21 00 00               LD   HL,0   
4981   CD 0E 07               CALL   prtdec   
4984   CD C0 07               CALL   printStr   
4987   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4994   E1                     POP   hl   
4995   E5                     PUSH   hl   
4996   CD 0E 07               CALL   prtdec   
4999   E1                     POP   hl   
499A   CD C0 07               CALL   printStr   
499D   20 28 23 00            .CSTR   " (#"   
49A1   CD 56 07               CALL   prthex   
49A4   CD C0 07               CALL   printStr   
49A7   29 0D 0A 00            .CSTR   ")\r\n"   
49AB   76                     HALT      
49AC   00                     .CSTR      
49AD                EXPECTM_0_2269S43:      
49AD   E1                     POP   HL   
49AE                          ;*Macro unroll:  test "5 3 -", 2
49AE   31 80 18               LD   SP,STACK   
49B1   CD CF 08               CALL   init   
49B4   CD C7 07               CALL   execStr   
49B7   35 20 33 20 2D 00      .CSTR   "5 3 -"   
49BD                          ;*Macro unroll:  expect "5 3 -",2
49BD   E1                     POP   HL   
49BE   E5                     PUSH   HL   
49BF   11 02 00               LD   DE,2   
49C2   B7                     OR   A   
49C3   ED 52                  SBC   HL,DE   
49C5   7D                     LD   A,L   
49C6   B4                     OR   H   
49C7   28 50                  JR   Z,expectM_0_2270S43   
49C9   CD C0 07               CALL   printStr   
49CC   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
49D8   CD C0 07               CALL   printStr   
49DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49EA   21 02 00               LD   HL,2   
49ED   CD 0E 07               CALL   prtdec   
49F0   CD C0 07               CALL   printStr   
49F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A00   E1                     POP   hl   
4A01   E5                     PUSH   hl   
4A02   CD 0E 07               CALL   prtdec   
4A05   E1                     POP   hl   
4A06   CD C0 07               CALL   printStr   
4A09   20 28 23 00            .CSTR   " (#"   
4A0D   CD 56 07               CALL   prthex   
4A10   CD C0 07               CALL   printStr   
4A13   29 0D 0A 00            .CSTR   ")\r\n"   
4A17   76                     HALT      
4A18   00                     .CSTR      
4A19                EXPECTM_0_2270S43:      
4A19   E1                     POP   HL   
4A1A                          ;*Macro unroll:  test "3 5 &", 1
4A1A   31 80 18               LD   SP,STACK   
4A1D   CD CF 08               CALL   init   
4A20   CD C7 07               CALL   execStr   
4A23   33 20 35 20 26 00      .CSTR   "3 5 &"   
4A29                          ;*Macro unroll:  expect "3 5 &",1
4A29   E1                     POP   HL   
4A2A   E5                     PUSH   HL   
4A2B   11 01 00               LD   DE,1   
4A2E   B7                     OR   A   
4A2F   ED 52                  SBC   HL,DE   
4A31   7D                     LD   A,L   
4A32   B4                     OR   H   
4A33   28 50                  JR   Z,expectM_0_2271S43   
4A35   CD C0 07               CALL   printStr   
4A38   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
4A44   CD C0 07               CALL   printStr   
4A47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A56   21 01 00               LD   HL,1   
4A59   CD 0E 07               CALL   prtdec   
4A5C   CD C0 07               CALL   printStr   
4A5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A6C   E1                     POP   hl   
4A6D   E5                     PUSH   hl   
4A6E   CD 0E 07               CALL   prtdec   
4A71   E1                     POP   hl   
4A72   CD C0 07               CALL   printStr   
4A75   20 28 23 00            .CSTR   " (#"   
4A79   CD 56 07               CALL   prthex   
4A7C   CD C0 07               CALL   printStr   
4A7F   29 0D 0A 00            .CSTR   ")\r\n"   
4A83   76                     HALT      
4A84   00                     .CSTR      
4A85                EXPECTM_0_2271S43:      
4A85   E1                     POP   HL   
4A86                          ;*Macro unroll:  test "3 5 |", 7
4A86   31 80 18               LD   SP,STACK   
4A89   CD CF 08               CALL   init   
4A8C   CD C7 07               CALL   execStr   
4A8F   33 20 35 20 7C 00      .CSTR   "3 5 |"   
4A95                          ;*Macro unroll:  expect "3 5 |",7
4A95   E1                     POP   HL   
4A96   E5                     PUSH   HL   
4A97   11 07 00               LD   DE,7   
4A9A   B7                     OR   A   
4A9B   ED 52                  SBC   HL,DE   
4A9D   7D                     LD   A,L   
4A9E   B4                     OR   H   
4A9F   28 50                  JR   Z,expectM_0_2272S43   
4AA1   CD C0 07               CALL   printStr   
4AA4   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
4AB0   CD C0 07               CALL   printStr   
4AB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AC2   21 07 00               LD   HL,7   
4AC5   CD 0E 07               CALL   prtdec   
4AC8   CD C0 07               CALL   printStr   
4ACB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AD8   E1                     POP   hl   
4AD9   E5                     PUSH   hl   
4ADA   CD 0E 07               CALL   prtdec   
4ADD   E1                     POP   hl   
4ADE   CD C0 07               CALL   printStr   
4AE1   20 28 23 00            .CSTR   " (#"   
4AE5   CD 56 07               CALL   prthex   
4AE8   CD C0 07               CALL   printStr   
4AEB   29 0D 0A 00            .CSTR   ")\r\n"   
4AEF   76                     HALT      
4AF0   00                     .CSTR      
4AF1                EXPECTM_0_2272S43:      
4AF1   E1                     POP   HL   
4AF2                          ;*Macro unroll:  test "2 3 *", 6
4AF2   31 80 18               LD   SP,STACK   
4AF5   CD CF 08               CALL   init   
4AF8   CD C7 07               CALL   execStr   
4AFB   32 20 33 20 2A 00      .CSTR   "2 3 *"   
4B01                          ;*Macro unroll:  expect "2 3 *",6
4B01   E1                     POP   HL   
4B02   E5                     PUSH   HL   
4B03   11 06 00               LD   DE,6   
4B06   B7                     OR   A   
4B07   ED 52                  SBC   HL,DE   
4B09   7D                     LD   A,L   
4B0A   B4                     OR   H   
4B0B   28 50                  JR   Z,expectM_0_2273S43   
4B0D   CD C0 07               CALL   printStr   
4B10   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
4B1C   CD C0 07               CALL   printStr   
4B1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B2E   21 06 00               LD   HL,6   
4B31   CD 0E 07               CALL   prtdec   
4B34   CD C0 07               CALL   printStr   
4B37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B44   E1                     POP   hl   
4B45   E5                     PUSH   hl   
4B46   CD 0E 07               CALL   prtdec   
4B49   E1                     POP   hl   
4B4A   CD C0 07               CALL   printStr   
4B4D   20 28 23 00            .CSTR   " (#"   
4B51   CD 56 07               CALL   prthex   
4B54   CD C0 07               CALL   printStr   
4B57   29 0D 0A 00            .CSTR   ")\r\n"   
4B5B   76                     HALT      
4B5C   00                     .CSTR      
4B5D                EXPECTM_0_2273S43:      
4B5D   E1                     POP   HL   
4B5E                          ;*Macro unroll:  test "1 2 3 + *", 5
4B5E   31 80 18               LD   SP,STACK   
4B61   CD CF 08               CALL   init   
4B64   CD C7 07               CALL   execStr   
4B67   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
4B71                          ;*Macro unroll:  expect "1 2 3 + *",5
4B71   E1                     POP   HL   
4B72   E5                     PUSH   HL   
4B73   11 05 00               LD   DE,5   
4B76   B7                     OR   A   
4B77   ED 52                  SBC   HL,DE   
4B79   7D                     LD   A,L   
4B7A   B4                     OR   H   
4B7B   28 54                  JR   Z,expectM_0_2274S43   
4B7D   CD C0 07               CALL   printStr   
4B80   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
4B90   CD C0 07               CALL   printStr   
4B93   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BA2   21 05 00               LD   HL,5   
4BA5   CD 0E 07               CALL   prtdec   
4BA8   CD C0 07               CALL   printStr   
4BAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BB8   E1                     POP   hl   
4BB9   E5                     PUSH   hl   
4BBA   CD 0E 07               CALL   prtdec   
4BBD   E1                     POP   hl   
4BBE   CD C0 07               CALL   printStr   
4BC1   20 28 23 00            .CSTR   " (#"   
4BC5   CD 56 07               CALL   prthex   
4BC8   CD C0 07               CALL   printStr   
4BCB   29 0D 0A 00            .CSTR   ")\r\n"   
4BCF   76                     HALT      
4BD0   00                     .CSTR      
4BD1                EXPECTM_0_2274S43:      
4BD1   E1                     POP   HL   
4BD2                          ;*Macro unroll:  test "7 3 /", 2
4BD2   31 80 18               LD   SP,STACK   
4BD5   CD CF 08               CALL   init   
4BD8   CD C7 07               CALL   execStr   
4BDB   37 20 33 20 2F 00      .CSTR   "7 3 /"   
4BE1                          ;*Macro unroll:  expect "7 3 /",2
4BE1   E1                     POP   HL   
4BE2   E5                     PUSH   HL   
4BE3   11 02 00               LD   DE,2   
4BE6   B7                     OR   A   
4BE7   ED 52                  SBC   HL,DE   
4BE9   7D                     LD   A,L   
4BEA   B4                     OR   H   
4BEB   28 50                  JR   Z,expectM_0_2275S43   
4BED   CD C0 07               CALL   printStr   
4BF0   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
4BFC   CD C0 07               CALL   printStr   
4BFF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C0E   21 02 00               LD   HL,2   
4C11   CD 0E 07               CALL   prtdec   
4C14   CD C0 07               CALL   printStr   
4C17   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C24   E1                     POP   hl   
4C25   E5                     PUSH   hl   
4C26   CD 0E 07               CALL   prtdec   
4C29   E1                     POP   hl   
4C2A   CD C0 07               CALL   printStr   
4C2D   20 28 23 00            .CSTR   " (#"   
4C31   CD 56 07               CALL   prthex   
4C34   CD C0 07               CALL   printStr   
4C37   29 0D 0A 00            .CSTR   ")\r\n"   
4C3B   76                     HALT      
4C3C   00                     .CSTR      
4C3D                EXPECTM_0_2275S43:      
4C3D   E1                     POP   HL   
4C3E                          ;*Macro unroll:  test "2 3 ==", FALSE
4C3E   31 80 18               LD   SP,STACK   
4C41   CD CF 08               CALL   init   
4C44   CD C7 07               CALL   execStr   
4C47   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
4C4E                          ;*Macro unroll:  expect "2 3 ==",FALSE
4C4E   E1                     POP   HL   
4C4F   E5                     PUSH   HL   
4C50   11 00 00               LD   DE,FALSE   
4C53   B7                     OR   A   
4C54   ED 52                  SBC   HL,DE   
4C56   7D                     LD   A,L   
4C57   B4                     OR   H   
4C58   28 51                  JR   Z,expectM_0_2276S43   
4C5A   CD C0 07               CALL   printStr   
4C5D   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
4C6A   CD C0 07               CALL   printStr   
4C6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C7C   21 00 00               LD   HL,FALSE   
4C7F   CD 0E 07               CALL   prtdec   
4C82   CD C0 07               CALL   printStr   
4C85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C92   E1                     POP   hl   
4C93   E5                     PUSH   hl   
4C94   CD 0E 07               CALL   prtdec   
4C97   E1                     POP   hl   
4C98   CD C0 07               CALL   printStr   
4C9B   20 28 23 00            .CSTR   " (#"   
4C9F   CD 56 07               CALL   prthex   
4CA2   CD C0 07               CALL   printStr   
4CA5   29 0D 0A 00            .CSTR   ")\r\n"   
4CA9   76                     HALT      
4CAA   00                     .CSTR      
4CAB                EXPECTM_0_2276S43:      
4CAB   E1                     POP   HL   
4CAC                          ;*Macro unroll:  test "3 3 ==", TRUE
4CAC   31 80 18               LD   SP,STACK   
4CAF   CD CF 08               CALL   init   
4CB2   CD C7 07               CALL   execStr   
4CB5   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
4CBC                          ;*Macro unroll:  expect "3 3 ==",TRUE
4CBC   E1                     POP   HL   
4CBD   E5                     PUSH   HL   
4CBE   11 FF FF               LD   DE,TRUE   
4CC1   B7                     OR   A   
4CC2   ED 52                  SBC   HL,DE   
4CC4   7D                     LD   A,L   
4CC5   B4                     OR   H   
4CC6   28 51                  JR   Z,expectM_0_2277S43   
4CC8   CD C0 07               CALL   printStr   
4CCB   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
4CD8   CD C0 07               CALL   printStr   
4CDB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CEA   21 FF FF               LD   HL,TRUE   
4CED   CD 0E 07               CALL   prtdec   
4CF0   CD C0 07               CALL   printStr   
4CF3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D00   E1                     POP   hl   
4D01   E5                     PUSH   hl   
4D02   CD 0E 07               CALL   prtdec   
4D05   E1                     POP   hl   
4D06   CD C0 07               CALL   printStr   
4D09   20 28 23 00            .CSTR   " (#"   
4D0D   CD 56 07               CALL   prthex   
4D10   CD C0 07               CALL   printStr   
4D13   29 0D 0A 00            .CSTR   ")\r\n"   
4D17   76                     HALT      
4D18   00                     .CSTR      
4D19                EXPECTM_0_2277S43:      
4D19   E1                     POP   HL   
4D1A                          ;*Macro unroll:  test "1 2 <", TRUE
4D1A   31 80 18               LD   SP,STACK   
4D1D   CD CF 08               CALL   init   
4D20   CD C7 07               CALL   execStr   
4D23   31 20 32 20 3C 00      .CSTR   "1 2 <"   
4D29                          ;*Macro unroll:  expect "1 2 <",TRUE
4D29   E1                     POP   HL   
4D2A   E5                     PUSH   HL   
4D2B   11 FF FF               LD   DE,TRUE   
4D2E   B7                     OR   A   
4D2F   ED 52                  SBC   HL,DE   
4D31   7D                     LD   A,L   
4D32   B4                     OR   H   
4D33   28 50                  JR   Z,expectM_0_2278S43   
4D35   CD C0 07               CALL   printStr   
4D38   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
4D44   CD C0 07               CALL   printStr   
4D47   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D56   21 FF FF               LD   HL,TRUE   
4D59   CD 0E 07               CALL   prtdec   
4D5C   CD C0 07               CALL   printStr   
4D5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D6C   E1                     POP   hl   
4D6D   E5                     PUSH   hl   
4D6E   CD 0E 07               CALL   prtdec   
4D71   E1                     POP   hl   
4D72   CD C0 07               CALL   printStr   
4D75   20 28 23 00            .CSTR   " (#"   
4D79   CD 56 07               CALL   prthex   
4D7C   CD C0 07               CALL   printStr   
4D7F   29 0D 0A 00            .CSTR   ")\r\n"   
4D83   76                     HALT      
4D84   00                     .CSTR      
4D85                EXPECTM_0_2278S43:      
4D85   E1                     POP   HL   
4D86                          ;*Macro unroll:  test "2 1 <", FALSE
4D86   31 80 18               LD   SP,STACK   
4D89   CD CF 08               CALL   init   
4D8C   CD C7 07               CALL   execStr   
4D8F   32 20 31 20 3C 00      .CSTR   "2 1 <"   
4D95                          ;*Macro unroll:  expect "2 1 <",FALSE
4D95   E1                     POP   HL   
4D96   E5                     PUSH   HL   
4D97   11 00 00               LD   DE,FALSE   
4D9A   B7                     OR   A   
4D9B   ED 52                  SBC   HL,DE   
4D9D   7D                     LD   A,L   
4D9E   B4                     OR   H   
4D9F   28 50                  JR   Z,expectM_0_2279S43   
4DA1   CD C0 07               CALL   printStr   
4DA4   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
4DB0   CD C0 07               CALL   printStr   
4DB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DC2   21 00 00               LD   HL,FALSE   
4DC5   CD 0E 07               CALL   prtdec   
4DC8   CD C0 07               CALL   printStr   
4DCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DD8   E1                     POP   hl   
4DD9   E5                     PUSH   hl   
4DDA   CD 0E 07               CALL   prtdec   
4DDD   E1                     POP   hl   
4DDE   CD C0 07               CALL   printStr   
4DE1   20 28 23 00            .CSTR   " (#"   
4DE5   CD 56 07               CALL   prthex   
4DE8   CD C0 07               CALL   printStr   
4DEB   29 0D 0A 00            .CSTR   ")\r\n"   
4DEF   76                     HALT      
4DF0   00                     .CSTR      
4DF1                EXPECTM_0_2279S43:      
4DF1   E1                     POP   HL   
4DF2                          ;*Macro unroll:  test "2 3 <", TRUE
4DF2   31 80 18               LD   SP,STACK   
4DF5   CD CF 08               CALL   init   
4DF8   CD C7 07               CALL   execStr   
4DFB   32 20 33 20 3C 00      .CSTR   "2 3 <"   
4E01                          ;*Macro unroll:  expect "2 3 <",TRUE
4E01   E1                     POP   HL   
4E02   E5                     PUSH   HL   
4E03   11 FF FF               LD   DE,TRUE   
4E06   B7                     OR   A   
4E07   ED 52                  SBC   HL,DE   
4E09   7D                     LD   A,L   
4E0A   B4                     OR   H   
4E0B   28 50                  JR   Z,expectM_0_2280S43   
4E0D   CD C0 07               CALL   printStr   
4E10   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
4E1C   CD C0 07               CALL   printStr   
4E1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E2E   21 FF FF               LD   HL,TRUE   
4E31   CD 0E 07               CALL   prtdec   
4E34   CD C0 07               CALL   printStr   
4E37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E44   E1                     POP   hl   
4E45   E5                     PUSH   hl   
4E46   CD 0E 07               CALL   prtdec   
4E49   E1                     POP   hl   
4E4A   CD C0 07               CALL   printStr   
4E4D   20 28 23 00            .CSTR   " (#"   
4E51   CD 56 07               CALL   prthex   
4E54   CD C0 07               CALL   printStr   
4E57   29 0D 0A 00            .CSTR   ")\r\n"   
4E5B   76                     HALT      
4E5C   00                     .CSTR      
4E5D                EXPECTM_0_2280S43:      
4E5D   E1                     POP   HL   
4E5E                          ;*Macro unroll:  test "3 3 <", FALSE
4E5E   31 80 18               LD   SP,STACK   
4E61   CD CF 08               CALL   init   
4E64   CD C7 07               CALL   execStr   
4E67   33 20 33 20 3C 00      .CSTR   "3 3 <"   
4E6D                          ;*Macro unroll:  expect "3 3 <",FALSE
4E6D   E1                     POP   HL   
4E6E   E5                     PUSH   HL   
4E6F   11 00 00               LD   DE,FALSE   
4E72   B7                     OR   A   
4E73   ED 52                  SBC   HL,DE   
4E75   7D                     LD   A,L   
4E76   B4                     OR   H   
4E77   28 50                  JR   Z,expectM_0_2281S43   
4E79   CD C0 07               CALL   printStr   
4E7C   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
4E88   CD C0 07               CALL   printStr   
4E8B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E9A   21 00 00               LD   HL,FALSE   
4E9D   CD 0E 07               CALL   prtdec   
4EA0   CD C0 07               CALL   printStr   
4EA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4EB0   E1                     POP   hl   
4EB1   E5                     PUSH   hl   
4EB2   CD 0E 07               CALL   prtdec   
4EB5   E1                     POP   hl   
4EB6   CD C0 07               CALL   printStr   
4EB9   20 28 23 00            .CSTR   " (#"   
4EBD   CD 56 07               CALL   prthex   
4EC0   CD C0 07               CALL   printStr   
4EC3   29 0D 0A 00            .CSTR   ")\r\n"   
4EC7   76                     HALT      
4EC8   00                     .CSTR      
4EC9                EXPECTM_0_2281S43:      
4EC9   E1                     POP   HL   
4ECA                          ;*Macro unroll:  test "1 2 >", FALSE
4ECA   31 80 18               LD   SP,STACK   
4ECD   CD CF 08               CALL   init   
4ED0   CD C7 07               CALL   execStr   
4ED3   31 20 32 20 3E 00      .CSTR   "1 2 >"   
4ED9                          ;*Macro unroll:  expect "1 2 >",FALSE
4ED9   E1                     POP   HL   
4EDA   E5                     PUSH   HL   
4EDB   11 00 00               LD   DE,FALSE   
4EDE   B7                     OR   A   
4EDF   ED 52                  SBC   HL,DE   
4EE1   7D                     LD   A,L   
4EE2   B4                     OR   H   
4EE3   28 50                  JR   Z,expectM_0_2282S43   
4EE5   CD C0 07               CALL   printStr   
4EE8   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
4EF4   CD C0 07               CALL   printStr   
4EF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F06   21 00 00               LD   HL,FALSE   
4F09   CD 0E 07               CALL   prtdec   
4F0C   CD C0 07               CALL   printStr   
4F0F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F1C   E1                     POP   hl   
4F1D   E5                     PUSH   hl   
4F1E   CD 0E 07               CALL   prtdec   
4F21   E1                     POP   hl   
4F22   CD C0 07               CALL   printStr   
4F25   20 28 23 00            .CSTR   " (#"   
4F29   CD 56 07               CALL   prthex   
4F2C   CD C0 07               CALL   printStr   
4F2F   29 0D 0A 00            .CSTR   ")\r\n"   
4F33   76                     HALT      
4F34   00                     .CSTR      
4F35                EXPECTM_0_2282S43:      
4F35   E1                     POP   HL   
4F36                          ;*Macro unroll:  test "2 1 >", TRUE
4F36   31 80 18               LD   SP,STACK   
4F39   CD CF 08               CALL   init   
4F3C   CD C7 07               CALL   execStr   
4F3F   32 20 31 20 3E 00      .CSTR   "2 1 >"   
4F45                          ;*Macro unroll:  expect "2 1 >",TRUE
4F45   E1                     POP   HL   
4F46   E5                     PUSH   HL   
4F47   11 FF FF               LD   DE,TRUE   
4F4A   B7                     OR   A   
4F4B   ED 52                  SBC   HL,DE   
4F4D   7D                     LD   A,L   
4F4E   B4                     OR   H   
4F4F   28 50                  JR   Z,expectM_0_2283S43   
4F51   CD C0 07               CALL   printStr   
4F54   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
4F60   CD C0 07               CALL   printStr   
4F63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F72   21 FF FF               LD   HL,TRUE   
4F75   CD 0E 07               CALL   prtdec   
4F78   CD C0 07               CALL   printStr   
4F7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F88   E1                     POP   hl   
4F89   E5                     PUSH   hl   
4F8A   CD 0E 07               CALL   prtdec   
4F8D   E1                     POP   hl   
4F8E   CD C0 07               CALL   printStr   
4F91   20 28 23 00            .CSTR   " (#"   
4F95   CD 56 07               CALL   prthex   
4F98   CD C0 07               CALL   printStr   
4F9B   29 0D 0A 00            .CSTR   ")\r\n"   
4F9F   76                     HALT      
4FA0   00                     .CSTR      
4FA1                EXPECTM_0_2283S43:      
4FA1   E1                     POP   HL   
4FA2                          ;*Macro unroll:  test "3 3 >", FALSE
4FA2   31 80 18               LD   SP,STACK   
4FA5   CD CF 08               CALL   init   
4FA8   CD C7 07               CALL   execStr   
4FAB   33 20 33 20 3E 00      .CSTR   "3 3 >"   
4FB1                          ;*Macro unroll:  expect "3 3 >",FALSE
4FB1   E1                     POP   HL   
4FB2   E5                     PUSH   HL   
4FB3   11 00 00               LD   DE,FALSE   
4FB6   B7                     OR   A   
4FB7   ED 52                  SBC   HL,DE   
4FB9   7D                     LD   A,L   
4FBA   B4                     OR   H   
4FBB   28 50                  JR   Z,expectM_0_2284S43   
4FBD   CD C0 07               CALL   printStr   
4FC0   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
4FCC   CD C0 07               CALL   printStr   
4FCF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FDE   21 00 00               LD   HL,FALSE   
4FE1   CD 0E 07               CALL   prtdec   
4FE4   CD C0 07               CALL   printStr   
4FE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FF4   E1                     POP   hl   
4FF5   E5                     PUSH   hl   
4FF6   CD 0E 07               CALL   prtdec   
4FF9   E1                     POP   hl   
4FFA   CD C0 07               CALL   printStr   
4FFD   20 28 23 00            .CSTR   " (#"   
5001   CD 56 07               CALL   prthex   
5004   CD C0 07               CALL   printStr   
5007   29 0D 0A 00            .CSTR   ")\r\n"   
500B   76                     HALT      
500C   00                     .CSTR      
500D                EXPECTM_0_2284S43:      
500D   E1                     POP   HL   
500E                          ;*Macro unroll:  test "4 3 >", TRUE
500E   31 80 18               LD   SP,STACK   
5011   CD CF 08               CALL   init   
5014   CD C7 07               CALL   execStr   
5017   34 20 33 20 3E 00      .CSTR   "4 3 >"   
501D                          ;*Macro unroll:  expect "4 3 >",TRUE
501D   E1                     POP   HL   
501E   E5                     PUSH   HL   
501F   11 FF FF               LD   DE,TRUE   
5022   B7                     OR   A   
5023   ED 52                  SBC   HL,DE   
5025   7D                     LD   A,L   
5026   B4                     OR   H   
5027   28 50                  JR   Z,expectM_0_2285S43   
5029   CD C0 07               CALL   printStr   
502C   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
5038   CD C0 07               CALL   printStr   
503B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
504A   21 FF FF               LD   HL,TRUE   
504D   CD 0E 07               CALL   prtdec   
5050   CD C0 07               CALL   printStr   
5053   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5060   E1                     POP   hl   
5061   E5                     PUSH   hl   
5062   CD 0E 07               CALL   prtdec   
5065   E1                     POP   hl   
5066   CD C0 07               CALL   printStr   
5069   20 28 23 00            .CSTR   " (#"   
506D   CD 56 07               CALL   prthex   
5070   CD C0 07               CALL   printStr   
5073   29 0D 0A 00            .CSTR   ")\r\n"   
5077   76                     HALT      
5078   00                     .CSTR      
5079                EXPECTM_0_2285S43:      
5079   E1                     POP   HL   
507A                          ;*Macro unroll:  test "2 2 <=", TRUE
507A   31 80 18               LD   SP,STACK   
507D   CD CF 08               CALL   init   
5080   CD C7 07               CALL   execStr   
5083   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
508A                          ;*Macro unroll:  expect "2 2 <=",TRUE
508A   E1                     POP   HL   
508B   E5                     PUSH   HL   
508C   11 FF FF               LD   DE,TRUE   
508F   B7                     OR   A   
5090   ED 52                  SBC   HL,DE   
5092   7D                     LD   A,L   
5093   B4                     OR   H   
5094   28 51                  JR   Z,expectM_0_2286S43   
5096   CD C0 07               CALL   printStr   
5099   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
50A6   CD C0 07               CALL   printStr   
50A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50B8   21 FF FF               LD   HL,TRUE   
50BB   CD 0E 07               CALL   prtdec   
50BE   CD C0 07               CALL   printStr   
50C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50CE   E1                     POP   hl   
50CF   E5                     PUSH   hl   
50D0   CD 0E 07               CALL   prtdec   
50D3   E1                     POP   hl   
50D4   CD C0 07               CALL   printStr   
50D7   20 28 23 00            .CSTR   " (#"   
50DB   CD 56 07               CALL   prthex   
50DE   CD C0 07               CALL   printStr   
50E1   29 0D 0A 00            .CSTR   ")\r\n"   
50E5   76                     HALT      
50E6   00                     .CSTR      
50E7                EXPECTM_0_2286S43:      
50E7   E1                     POP   HL   
50E8                          ;*Macro unroll:  test "2 2 >=", TRUE
50E8   31 80 18               LD   SP,STACK   
50EB   CD CF 08               CALL   init   
50EE   CD C7 07               CALL   execStr   
50F1   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
50F8                          ;*Macro unroll:  expect "2 2 >=",TRUE
50F8   E1                     POP   HL   
50F9   E5                     PUSH   HL   
50FA   11 FF FF               LD   DE,TRUE   
50FD   B7                     OR   A   
50FE   ED 52                  SBC   HL,DE   
5100   7D                     LD   A,L   
5101   B4                     OR   H   
5102   28 51                  JR   Z,expectM_0_2287S43   
5104   CD C0 07               CALL   printStr   
5107   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
5114   CD C0 07               CALL   printStr   
5117   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5126   21 FF FF               LD   HL,TRUE   
5129   CD 0E 07               CALL   prtdec   
512C   CD C0 07               CALL   printStr   
512F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
513C   E1                     POP   hl   
513D   E5                     PUSH   hl   
513E   CD 0E 07               CALL   prtdec   
5141   E1                     POP   hl   
5142   CD C0 07               CALL   printStr   
5145   20 28 23 00            .CSTR   " (#"   
5149   CD 56 07               CALL   prthex   
514C   CD C0 07               CALL   printStr   
514F   29 0D 0A 00            .CSTR   ")\r\n"   
5153   76                     HALT      
5154   00                     .CSTR      
5155                EXPECTM_0_2287S43:      
5155   E1                     POP   HL   
5156                          ;*Macro unroll:  test "3 1 <<", 6
5156   31 80 18               LD   SP,STACK   
5159   CD CF 08               CALL   init   
515C   CD C7 07               CALL   execStr   
515F   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
5166                          ;*Macro unroll:  expect "3 1 <<",6
5166   E1                     POP   HL   
5167   E5                     PUSH   HL   
5168   11 06 00               LD   DE,6   
516B   B7                     OR   A   
516C   ED 52                  SBC   HL,DE   
516E   7D                     LD   A,L   
516F   B4                     OR   H   
5170   28 51                  JR   Z,expectM_0_2288S43   
5172   CD C0 07               CALL   printStr   
5175   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
5182   CD C0 07               CALL   printStr   
5185   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5194   21 06 00               LD   HL,6   
5197   CD 0E 07               CALL   prtdec   
519A   CD C0 07               CALL   printStr   
519D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51AA   E1                     POP   hl   
51AB   E5                     PUSH   hl   
51AC   CD 0E 07               CALL   prtdec   
51AF   E1                     POP   hl   
51B0   CD C0 07               CALL   printStr   
51B3   20 28 23 00            .CSTR   " (#"   
51B7   CD 56 07               CALL   prthex   
51BA   CD C0 07               CALL   printStr   
51BD   29 0D 0A 00            .CSTR   ")\r\n"   
51C1   76                     HALT      
51C2   00                     .CSTR      
51C3                EXPECTM_0_2288S43:      
51C3   E1                     POP   HL   
51C4                          ;*Macro unroll:  test "10 1 >>", 5
51C4   31 80 18               LD   SP,STACK   
51C7   CD CF 08               CALL   init   
51CA   CD C7 07               CALL   execStr   
51CD   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
51D5                          ;*Macro unroll:  expect "10 1 >>",5
51D5   E1                     POP   HL   
51D6   E5                     PUSH   HL   
51D7   11 05 00               LD   DE,5   
51DA   B7                     OR   A   
51DB   ED 52                  SBC   HL,DE   
51DD   7D                     LD   A,L   
51DE   B4                     OR   H   
51DF   28 52                  JR   Z,expectM_0_2289S43   
51E1   CD C0 07               CALL   printStr   
51E4   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
51F2   CD C0 07               CALL   printStr   
51F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5204   21 05 00               LD   HL,5   
5207   CD 0E 07               CALL   prtdec   
520A   CD C0 07               CALL   printStr   
520D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
521A   E1                     POP   hl   
521B   E5                     PUSH   hl   
521C   CD 0E 07               CALL   prtdec   
521F   E1                     POP   hl   
5220   CD C0 07               CALL   printStr   
5223   20 28 23 00            .CSTR   " (#"   
5227   CD 56 07               CALL   prthex   
522A   CD C0 07               CALL   printStr   
522D   29 0D 0A 00            .CSTR   ")\r\n"   
5231   76                     HALT      
5232   00                     .CSTR      
5233                EXPECTM_0_2289S43:      
5233   E1                     POP   HL   
5234                          ;*Macro unroll:  test "x", 0
5234   31 80 18               LD   SP,STACK   
5237   CD CF 08               CALL   init   
523A   CD C7 07               CALL   execStr   
523D   78 00                  .CSTR   "x"   
523F                          ;*Macro unroll:  expect "x",0
523F   E1                     POP   HL   
5240   E5                     PUSH   HL   
5241   11 00 00               LD   DE,0   
5244   B7                     OR   A   
5245   ED 52                  SBC   HL,DE   
5247   7D                     LD   A,L   
5248   B4                     OR   H   
5249   28 4C                  JR   Z,expectM_0_2290S43   
524B   CD C0 07               CALL   printStr   
524E   43 6F 64 65 3A 20 78 00 .CSTR   "Code: ","x"   
5256   CD C0 07               CALL   printStr   
5259   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5268   21 00 00               LD   HL,0   
526B   CD 0E 07               CALL   prtdec   
526E   CD C0 07               CALL   printStr   
5271   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
527E   E1                     POP   hl   
527F   E5                     PUSH   hl   
5280   CD 0E 07               CALL   prtdec   
5283   E1                     POP   hl   
5284   CD C0 07               CALL   printStr   
5287   20 28 23 00            .CSTR   " (#"   
528B   CD 56 07               CALL   prthex   
528E   CD C0 07               CALL   printStr   
5291   29 0D 0A 00            .CSTR   ")\r\n"   
5295   76                     HALT      
5296   00                     .CSTR      
5297                EXPECTM_0_2290S43:      
5297   E1                     POP   HL   
5298                          ;*Macro unroll:  test "1 x = x", 1
5298   31 80 18               LD   SP,STACK   
529B   CD CF 08               CALL   init   
529E   CD C7 07               CALL   execStr   
52A1   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
52A9                          ;*Macro unroll:  expect "1 x = x",1
52A9   E1                     POP   HL   
52AA   E5                     PUSH   HL   
52AB   11 01 00               LD   DE,1   
52AE   B7                     OR   A   
52AF   ED 52                  SBC   HL,DE   
52B1   7D                     LD   A,L   
52B2   B4                     OR   H   
52B3   28 52                  JR   Z,expectM_0_2291S43   
52B5   CD C0 07               CALL   printStr   
52B8   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
52C6   CD C0 07               CALL   printStr   
52C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52D8   21 01 00               LD   HL,1   
52DB   CD 0E 07               CALL   prtdec   
52DE   CD C0 07               CALL   printStr   
52E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
52EE   E1                     POP   hl   
52EF   E5                     PUSH   hl   
52F0   CD 0E 07               CALL   prtdec   
52F3   E1                     POP   hl   
52F4   CD C0 07               CALL   printStr   
52F7   20 28 23 00            .CSTR   " (#"   
52FB   CD 56 07               CALL   prthex   
52FE   CD C0 07               CALL   printStr   
5301   29 0D 0A 00            .CSTR   ")\r\n"   
5305   76                     HALT      
5306   00                     .CSTR      
5307                EXPECTM_0_2291S43:      
5307   E1                     POP   HL   
5308                          ;*Macro unroll:  test "() -2?", $0000
5308   31 80 18               LD   SP,STACK   
530B   CD CF 08               CALL   init   
530E   CD C7 07               CALL   execStr   
5311   28 29 20 2D 32 3F 00   .CSTR   "() -2?"   
5318                          ;*Macro unroll:  expect "() -2?",$0000
5318   E1                     POP   HL   
5319   E5                     PUSH   HL   
531A   11 00 00               LD   DE,$0000   
531D   B7                     OR   A   
531E   ED 52                  SBC   HL,DE   
5320   7D                     LD   A,L   
5321   B4                     OR   H   
5322   28 51                  JR   Z,expectM_0_2292S43   
5324   CD C0 07               CALL   printStr   
5327   43 6F 64 65 3A 20 28 29 20 2D 32 3F 00 .CSTR   "Code: ","() -2?"   
5334   CD C0 07               CALL   printStr   
5337   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5346   21 00 00               LD   HL,$0000   
5349   CD 0E 07               CALL   prtdec   
534C   CD C0 07               CALL   printStr   
534F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
535C   E1                     POP   hl   
535D   E5                     PUSH   hl   
535E   CD 0E 07               CALL   prtdec   
5361   E1                     POP   hl   
5362   CD C0 07               CALL   printStr   
5365   20 28 23 00            .CSTR   " (#"   
5369   CD 56 07               CALL   prthex   
536C   CD C0 07               CALL   printStr   
536F   29 0D 0A 00            .CSTR   ")\r\n"   
5373   76                     HALT      
5374   00                     .CSTR      
5375                EXPECTM_0_2292S43:      
5375   E1                     POP   HL   
5376                          ;*Macro unroll:  test "(a) -1?", $0001
5376   31 80 18               LD   SP,STACK   
5379   CD CF 08               CALL   init   
537C   CD C7 07               CALL   execStr   
537F   28 61 29 20 2D 31 3F 00 .CSTR   "(a) -1?"   
5387                          ;*Macro unroll:  expect "(a) -1?",$0001
5387   E1                     POP   HL   
5388   E5                     PUSH   HL   
5389   11 01 00               LD   DE,$0001   
538C   B7                     OR   A   
538D   ED 52                  SBC   HL,DE   
538F   7D                     LD   A,L   
5390   B4                     OR   H   
5391   28 52                  JR   Z,expectM_0_2293S43   
5393   CD C0 07               CALL   printStr   
5396   43 6F 64 65 3A 20 28 61 29 20 2D 31 3F 00 .CSTR   "Code: ","(a) -1?"   
53A4   CD C0 07               CALL   printStr   
53A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
53B6   21 01 00               LD   HL,$0001   
53B9   CD 0E 07               CALL   prtdec   
53BC   CD C0 07               CALL   printStr   
53BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53CC   E1                     POP   hl   
53CD   E5                     PUSH   hl   
53CE   CD 0E 07               CALL   prtdec   
53D1   E1                     POP   hl   
53D2   CD C0 07               CALL   printStr   
53D5   20 28 23 00            .CSTR   " (#"   
53D9   CD 56 07               CALL   prthex   
53DC   CD C0 07               CALL   printStr   
53DF   29 0D 0A 00            .CSTR   ")\r\n"   
53E3   76                     HALT      
53E4   00                     .CSTR      
53E5                EXPECTM_0_2293S43:      
53E5   E1                     POP   HL   
53E6                          ;*Macro unroll:  test "(a:) -1?", $0001
53E6   31 80 18               LD   SP,STACK   
53E9   CD CF 08               CALL   init   
53EC   CD C7 07               CALL   execStr   
53EF   28 61 3A 29 20 2D 31 3F 00 .CSTR   "(a:) -1?"   
53F8                          ;*Macro unroll:  expect "(a:) -1?",$0001
53F8   E1                     POP   HL   
53F9   E5                     PUSH   HL   
53FA   11 01 00               LD   DE,$0001   
53FD   B7                     OR   A   
53FE   ED 52                  SBC   HL,DE   
5400   7D                     LD   A,L   
5401   B4                     OR   H   
5402   28 53                  JR   Z,expectM_0_2294S43   
5404   CD C0 07               CALL   printStr   
5407   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 3F 00 .CSTR   "Code: ","(a:) -1?"   
5416   CD C0 07               CALL   printStr   
5419   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5428   21 01 00               LD   HL,$0001   
542B   CD 0E 07               CALL   prtdec   
542E   CD C0 07               CALL   printStr   
5431   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
543E   E1                     POP   hl   
543F   E5                     PUSH   hl   
5440   CD 0E 07               CALL   prtdec   
5443   E1                     POP   hl   
5444   CD C0 07               CALL   printStr   
5447   20 28 23 00            .CSTR   " (#"   
544B   CD 56 07               CALL   prthex   
544E   CD C0 07               CALL   printStr   
5451   29 0D 0A 00            .CSTR   ")\r\n"   
5455   76                     HALT      
5456   00                     .CSTR      
5457                EXPECTM_0_2294S43:      
5457   E1                     POP   HL   
5458                          ;*Macro unroll:  test "(a:b) -1?", $0102
5458   31 80 18               LD   SP,STACK   
545B   CD CF 08               CALL   init   
545E   CD C7 07               CALL   execStr   
5461   28 61 3A 62 29 20 2D 31 3F 00 .CSTR   "(a:b) -1?"   
546B                          ;*Macro unroll:  expect "(a:b) -1?",$0102
546B   E1                     POP   HL   
546C   E5                     PUSH   HL   
546D   11 02 01               LD   DE,$0102   
5470   B7                     OR   A   
5471   ED 52                  SBC   HL,DE   
5473   7D                     LD   A,L   
5474   B4                     OR   H   
5475   28 54                  JR   Z,expectM_0_2295S43   
5477   CD C0 07               CALL   printStr   
547A   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 3F 00 .CSTR   "Code: ","(a:b) -1?"   
548A   CD C0 07               CALL   printStr   
548D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
549C   21 02 01               LD   HL,$0102   
549F   CD 0E 07               CALL   prtdec   
54A2   CD C0 07               CALL   printStr   
54A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
54B2   E1                     POP   hl   
54B3   E5                     PUSH   hl   
54B4   CD 0E 07               CALL   prtdec   
54B7   E1                     POP   hl   
54B8   CD C0 07               CALL   printStr   
54BB   20 28 23 00            .CSTR   " (#"   
54BF   CD 56 07               CALL   prthex   
54C2   CD C0 07               CALL   printStr   
54C5   29 0D 0A 00            .CSTR   ")\r\n"   
54C9   76                     HALT      
54CA   00                     .CSTR      
54CB                EXPECTM_0_2295S43:      
54CB   E1                     POP   HL   
54CC                          ;*Macro unroll:  test "(:b) -1?", $0101
54CC   31 80 18               LD   SP,STACK   
54CF   CD CF 08               CALL   init   
54D2   CD C7 07               CALL   execStr   
54D5   28 3A 62 29 20 2D 31 3F 00 .CSTR   "(:b) -1?"   
54DE                          ;*Macro unroll:  expect "(:b) -1?",$0101
54DE   E1                     POP   HL   
54DF   E5                     PUSH   HL   
54E0   11 01 01               LD   DE,$0101   
54E3   B7                     OR   A   
54E4   ED 52                  SBC   HL,DE   
54E6   7D                     LD   A,L   
54E7   B4                     OR   H   
54E8   28 53                  JR   Z,expectM_0_2296S43   
54EA   CD C0 07               CALL   printStr   
54ED   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 3F 00 .CSTR   "Code: ","(:b) -1?"   
54FC   CD C0 07               CALL   printStr   
54FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
550E   21 01 01               LD   HL,$0101   
5511   CD 0E 07               CALL   prtdec   
5514   CD C0 07               CALL   printStr   
5517   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5524   E1                     POP   hl   
5525   E5                     PUSH   hl   
5526   CD 0E 07               CALL   prtdec   
5529   E1                     POP   hl   
552A   CD C0 07               CALL   printStr   
552D   20 28 23 00            .CSTR   " (#"   
5531   CD 56 07               CALL   prthex   
5534   CD C0 07               CALL   printStr   
5537   29 0D 0A 00            .CSTR   ")\r\n"   
553B   76                     HALT      
553C   00                     .CSTR      
553D                EXPECTM_0_2296S43:      
553D   E1                     POP   HL   
553E                             ; 
553E                             ; 
553E                             ; 
553E                             ; 
553E                             ; 
553E                             ; 
553E                             ; 
553E                             ; test "7 3 / frac", 1
553E                             ; test "10 sqrt", 3
553E                             ; test "10 sqrt frac", 1
553E                             ; test ":x 20 let 100 x set x", 100
553E                             ; test "[10 20 30] 1?", 20
553E                             ; test ":x [10 20 30] let 50 x 1? set x 1?", 50
553E                             ; test "bytes [1 2 3] 1?", 2
553E                             ; test "bytes :x [1 2 3] let x 1?", 2
553E                             ; test "bytes ['A' 'B' 'C'] 1?", 66
553E                             ; test "1 5 (a) {{2} exec} func call", 2
553E                             ; test "1 5 (a) {{$a} exec} func call", 5
553E                             ; test "1 5 (a) {{$a 1 +} exec} func call", 6
553E                             ; test "1 10 20 (ab) {-1 {$a} {$b} ifte} func call", 10
553E                             ; test "1 10 20 (ab) {0 {$a} {$b} ifte} func call", 20
553E                             ; test ":x (a) {2} def 1 x", 2
553E                             ; test ":x (a) {$a} def 0 1 x", 1
553E                             ; test ":x (a) {$a} def 1 2 x", 2
553E                             ; test ":x (a:b) {$a} def 1 2 x", 2
553E                             ; test ":x (ab) {$b} def 1 2 x", 2
553E                             ; test ":x (ab) {$b $a} def 10 15 x -", 5
553E                             ; test ":x (a:b) {2} def 1 x", 2
553E                             ; test ":x (:b) {100 $b set $b} def x", 100
553E                             ; test ":x (a:b) {1 $b set $b} def 2 x", 1
553E                             ; test ":x (a:b) {$a $b set $b} def 2 x", 2
553E                             ; test "0 [{10} {20} {30}] switch", 10
553E                             ; test "1 10 20 (ab) {0 [{$a} {$b}] switch} func call", 10
553E                             ; test "0 10 20 (iab) {$i [{$a} {$b}] switch} func call", 10
553E                             ; test "1 10 20 (iab) {$i [{$a} {$b}] switch} func call", 20
553E                             ; test "false", false
553E                             ; test "true", true
553E                             ; test "1 5 false {10} if", 5
553E                             ; test "1 5 true {10} if", 10
553E                             ; test "1 false {10} {20} ifte", 20
553E                             ; test "1 true {10} {20} ifte", 10
553E                             ; test "[ 1 ] closure call", 1
553E                             ; test "[ [ 2 ] ] closure call 0?", 2
553E                             ; call execStr
553E                             ; db "9"
553E                             ; kall sqrt1
553E                             ; db 0
553E                             ; expect "9 sqrt",3
553E   CD C0 07               CALL   printStr   
5541   44 6F 6E 65 21 00      .CSTR   "Done!"   
5547   76                     HALT      
5548                          ALIGN   2   
5548                PRINTER:      
5548   E1                     POP   hl   
5549   CD 0E 07               CALL   prtdec   
554C   DD E9                  JP   (ix)   


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 55 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               06C9 DEFINED AT LINE 1083 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1075 IN monty.asm
                    > USED AT LINE 1590 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 253 IN monty.asm
                    > USED AT LINE 260 IN monty.asm
                    > USED AT LINE 1182 IN monty.asm
                    > USED AT LINE 1223 IN monty.asm
                    > USED AT LINE 1247 IN monty.asm
                    > USED AT LINE 1250 IN monty.asm
                    > USED AT LINE 1621 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 41 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 1042 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 1047 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1659 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 28 IN monty.asm
MACROS:             0180 DEFINED AT LINE 60 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 65 IN monty.asm
                    > USED AT LINE 1545 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 77 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 79 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 113 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 216 IN monty.asm
ADDR_:              0300 DEFINED AT LINE 218 IN monty.asm
NUM_:               0303 DEFINED AT LINE 221 IN monty.asm
                    > USED AT LINE 336 IN monty.asm
HEXNUM_:            0306 DEFINED AT LINE 224 IN monty.asm
ARG_:               0309 DEFINED AT LINE 227 IN monty.asm
STRING_:            030C DEFINED AT LINE 230 IN monty.asm
ARG_LIST_:          030F DEFINED AT LINE 233 IN monty.asm
DOT_:               0312 DEFINED AT LINE 236 IN monty.asm
DOT1:               031E DEFINED AT LINE 244 IN monty.asm
                    > USED AT LINE 241 IN monty.asm
DOT2:               0327 DEFINED AT LINE 249 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
DOT3:               0331 DEFINED AT LINE 255 IN monty.asm
                    > USED AT LINE 251 IN monty.asm
DOT4:               0335 DEFINED AT LINE 258 IN monty.asm
                    > USED AT LINE 243 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
                    > USED AT LINE 254 IN monty.asm
INDEX_:             033C DEFINED AT LINE 264 IN monty.asm
BLOCK_:             033F DEFINED AT LINE 267 IN monty.asm
BLOCKEND_:          0342 DEFINED AT LINE 269 IN monty.asm
CHAR_:              0345 DEFINED AT LINE 271 IN monty.asm
ARRAY_:             0348 DEFINED AT LINE 273 IN monty.asm
ARRAYEND_:          034B DEFINED AT LINE 275 IN monty.asm
IDENTU_:            034E DEFINED AT LINE 277 IN monty.asm
IDENTL_:            0351 DEFINED AT LINE 279 IN monty.asm
AND_:               0354 DEFINED AT LINE 281 IN monty.asm
AND1:               035B DEFINED AT LINE 289 IN monty.asm
                    > USED AT LINE 302 IN monty.asm
                    > USED AT LINE 313 IN monty.asm
OR_:                035F DEFINED AT LINE 294 IN monty.asm
XOR_:               0368 DEFINED AT LINE 304 IN monty.asm
XOR1:               0369 DEFINED AT LINE 306 IN monty.asm
                    > USED AT LINE 317 IN monty.asm
INV_:               0371 DEFINED AT LINE 315 IN monty.asm
ADD_:               0376 DEFINED AT LINE 319 IN monty.asm
MUL_:               037C DEFINED AT LINE 326 IN monty.asm
SUB_:               037F DEFINED AT LINE 329 IN monty.asm
SUB1:               038B DEFINED AT LINE 337 IN monty.asm
                    > USED AT LINE 334 IN monty.asm
SUB2:               038D DEFINED AT LINE 340 IN monty.asm
NOT_:               0393 DEFINED AT LINE 346 IN monty.asm
EQ_:                0398 DEFINED AT LINE 350 IN monty.asm
EQ0:                03A2 DEFINED AT LINE 357 IN monty.asm
                    > USED AT LINE 354 IN monty.asm
EQ1:                03A3 DEFINED AT LINE 359 IN monty.asm
                    > USED AT LINE 348 IN monty.asm
GT_:                03A7 DEFINED AT LINE 363 IN monty.asm
LT_:                03B2 DEFINED AT LINE 372 IN monty.asm
LT1:                03BB DEFINED AT LINE 379 IN monty.asm
                    > USED AT LINE 370 IN monty.asm
DIV_:               03C4 DEFINED AT LINE 385 IN monty.asm
COMMAND_:           03D3 DEFINED AT LINE 396 IN monty.asm
COMMENT:            03E4 DEFINED AT LINE 406 IN monty.asm
                    > USED AT LINE 400 IN monty.asm
                    > USED AT LINE 410 IN monty.asm
NOP_:               03ED DEFINED AT LINE 414 IN monty.asm
ADDR:               03EF DEFINED AT LINE 422 IN monty.asm
                    > USED AT LINE 219 IN monty.asm
SHIFTLEFT:          03FB DEFINED AT LINE 431 IN monty.asm
                    > USED AT LINE 376 IN monty.asm
SHIFTLEFT1:         0403 DEFINED AT LINE 438 IN monty.asm
                    > USED AT LINE 441 IN monty.asm
SHIFTLEFT2:         0404 DEFINED AT LINE 440 IN monty.asm
                    > USED AT LINE 437 IN monty.asm
SHIFTRIGHT:         040B DEFINED AT LINE 448 IN monty.asm
                    > USED AT LINE 367 IN monty.asm
SHIFTRIGHT1:        0413 DEFINED AT LINE 455 IN monty.asm
                    > USED AT LINE 459 IN monty.asm
SHIFTRIGHT2:        0417 DEFINED AT LINE 458 IN monty.asm
                    > USED AT LINE 454 IN monty.asm
MUL:                041E DEFINED AT LINE 464 IN monty.asm
                    > USED AT LINE 327 IN monty.asm
MUL2:               0428 DEFINED AT LINE 473 IN monty.asm
                    > USED AT LINE 482 IN monty.asm
NUM:                043A DEFINED AT LINE 487 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
NUM0:               0443 DEFINED AT LINE 493 IN monty.asm
                    > USED AT LINE 491 IN monty.asm
NUM1:               0444 DEFINED AT LINE 495 IN monty.asm
                    > USED AT LINE 512 IN monty.asm
NUM2:               045C DEFINED AT LINE 513 IN monty.asm
                    > USED AT LINE 498 IN monty.asm
                    > USED AT LINE 500 IN monty.asm
                    > USED AT LINE 535 IN monty.asm
                    > USED AT LINE 537 IN monty.asm
NUM3:               0467 DEFINED AT LINE 521 IN monty.asm
                    > USED AT LINE 516 IN monty.asm
HEXNUM:             046A DEFINED AT LINE 525 IN monty.asm
                    > USED AT LINE 225 IN monty.asm
HEXNUM1:            046D DEFINED AT LINE 527 IN monty.asm
                    > USED AT LINE 544 IN monty.asm
HEXNUM2:            0475 DEFINED AT LINE 533 IN monty.asm
                    > USED AT LINE 531 IN monty.asm
STRING:             0487 DEFINED AT LINE 549 IN monty.asm
                    > USED AT LINE 231 IN monty.asm
STRING1:            0490 DEFINED AT LINE 556 IN monty.asm
                    > USED AT LINE 563 IN monty.asm
                    > USED AT LINE 565 IN monty.asm
STRING2:            0493 DEFINED AT LINE 560 IN monty.asm
                    > USED AT LINE 555 IN monty.asm
CHAR:               04AF DEFINED AT LINE 582 IN monty.asm
                    > USED AT LINE 272 IN monty.asm
CHAR1:              04B2 DEFINED AT LINE 584 IN monty.asm
                    > USED AT LINE 595 IN monty.asm
CHAR2:              04BE DEFINED AT LINE 593 IN monty.asm
                    > USED AT LINE 590 IN monty.asm
CHAR3:              04C1 DEFINED AT LINE 596 IN monty.asm
                    > USED AT LINE 588 IN monty.asm
IDENTU:             04C4 DEFINED AT LINE 600 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
IDENTL:             04C9 DEFINED AT LINE 604 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
IDENT1:             04CE DEFINED AT LINE 608 IN monty.asm
                    > USED AT LINE 603 IN monty.asm
ASSIGN:             04DB DEFINED AT LINE 620 IN monty.asm
                    > USED AT LINE 356 IN monty.asm
ASSIGN1:            04E9 DEFINED AT LINE 630 IN monty.asm
                    > USED AT LINE 627 IN monty.asm
ARG_LIST:           04EB DEFINED AT LINE 647 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
ARG_LIST1:          04F5 DEFINED AT LINE 654 IN monty.asm
                    > USED AT LINE 672 IN monty.asm
ARG_LIST2:          0501 DEFINED AT LINE 662 IN monty.asm
                    > USED AT LINE 659 IN monty.asm
ARG_LIST3:          0509 DEFINED AT LINE 670 IN monty.asm
                    > USED AT LINE 661 IN monty.asm
                    > USED AT LINE 668 IN monty.asm
ARG_LIST4:          050C DEFINED AT LINE 673 IN monty.asm
                    > USED AT LINE 657 IN monty.asm
ARG_LIST5:          0511 DEFINED AT LINE 678 IN monty.asm
                    > USED AT LINE 676 IN monty.asm
BLOCK:              051D DEFINED AT LINE 689 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
BLOCK1:             0521 DEFINED AT LINE 693 IN monty.asm
                    > USED AT LINE 697 IN monty.asm
                    > USED AT LINE 717 IN monty.asm
                    > USED AT LINE 720 IN monty.asm
                    > USED AT LINE 725 IN monty.asm
                    > USED AT LINE 729 IN monty.asm
BLOCK2:             0549 DEFINED AT LINE 718 IN monty.asm
                    > USED AT LINE 707 IN monty.asm
                    > USED AT LINE 709 IN monty.asm
                    > USED AT LINE 711 IN monty.asm
BLOCK3:             054C DEFINED AT LINE 721 IN monty.asm
                    > USED AT LINE 714 IN monty.asm
                    > USED AT LINE 716 IN monty.asm
BLOCK4:             0554 DEFINED AT LINE 727 IN monty.asm
                    > USED AT LINE 700 IN monty.asm
                    > USED AT LINE 702 IN monty.asm
                    > USED AT LINE 704 IN monty.asm
BLOCK5:             0557 DEFINED AT LINE 730 IN monty.asm
                    > USED AT LINE 726 IN monty.asm
BLOCKEND:           055A DEFINED AT LINE 734 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
BLOCKEND1:          0586 DEFINED AT LINE 757 IN monty.asm
                    > USED AT LINE 750 IN monty.asm
BLOCKEND2:          0592 DEFINED AT LINE 764 IN monty.asm
                    > USED AT LINE 756 IN monty.asm
IF:                 05AB DEFINED AT LINE 787 IN monty.asm
IFTE:               05B0 DEFINED AT LINE 793 IN monty.asm
IFTE1:              05B1 DEFINED AT LINE 795 IN monty.asm
                    > USED AT LINE 789 IN monty.asm
SWITCH:             05BD DEFINED AT LINE 807 IN monty.asm
INDEX:              05C7 DEFINED AT LINE 819 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
INDEX0:             05CF DEFINED AT LINE 825 IN monty.asm
INDEX1:             05D0 DEFINED AT LINE 827 IN monty.asm
                    > USED AT LINE 824 IN monty.asm
INDEX2:             05DC DEFINED AT LINE 836 IN monty.asm
                    > USED AT LINE 833 IN monty.asm
LOOP:               05DF DEFINED AT LINE 842 IN monty.asm
WORDS:              05E1 DEFINED AT LINE 892 IN monty.asm
BYTES:              05E6 DEFINED AT LINE 895 IN monty.asm
BYTES1:             05E9 DEFINED AT LINE 897 IN monty.asm
                    > USED AT LINE 894 IN monty.asm
ARRAY:              05EE DEFINED AT LINE 901 IN monty.asm
                    > USED AT LINE 274 IN monty.asm
ARRAYEND:           060A DEFINED AT LINE 915 IN monty.asm
                    > USED AT LINE 276 IN monty.asm
ARRAYEND1:          062B DEFINED AT LINE 935 IN monty.asm
                    > USED AT LINE 944 IN monty.asm
ARRAYEND2:          063B DEFINED AT LINE 947 IN monty.asm
                    > USED AT LINE 933 IN monty.asm
                    > USED AT LINE 959 IN monty.asm
ARRAYEND3:          064E DEFINED AT LINE 961 IN monty.asm
                    > USED AT LINE 945 IN monty.asm
HASH:               0669 DEFINED AT LINE 980 IN monty.asm
FRAC:               066B DEFINED AT LINE 989 IN monty.asm
SQRT1:              0671 DEFINED AT LINE 994 IN monty.asm
ABS1:               067E DEFINED AT LINE 1003 IN monty.asm
EQUALS:             068B DEFINED AT LINE 1018 IN monty.asm
                    > USED AT LINE 361 IN monty.asm
LESSTHANEQ:         0693 DEFINED AT LINE 1026 IN monty.asm
                    > USED AT LINE 381 IN monty.asm
LESSTHAN:           0698 DEFINED AT LINE 1033 IN monty.asm
                    > USED AT LINE 383 IN monty.asm
LESSTHAN1:          069D DEFINED AT LINE 1038 IN monty.asm
                    > USED AT LINE 1029 IN monty.asm
TRUE1:              06A0 DEFINED AT LINE 1041 IN monty.asm
                    > USED AT LINE 1021 IN monty.asm
NULL1:              06A6 DEFINED AT LINE 1045 IN monty.asm
FALSE1:             06A6 DEFINED AT LINE 1046 IN monty.asm
                    > USED AT LINE 1022 IN monty.asm
                    > USED AT LINE 1036 IN monty.asm
                    > USED AT LINE 1039 IN monty.asm
INPUT:              06AC DEFINED AT LINE 1053 IN monty.asm
OUTPUT:             06B7 DEFINED AT LINE 1065 IN monty.asm
KEY:                06C0 DEFINED AT LINE 1074 IN monty.asm
FILTER:             06C9 DEFINED AT LINE 1081 IN monty.asm
MAP:                06C9 DEFINED AT LINE 1082 IN monty.asm
DIVIDE:             06CB DEFINED AT LINE 1120 IN monty.asm
                    > USED AT LINE 390 IN monty.asm
DIVIDE1:            06D0 DEFINED AT LINE 1123 IN monty.asm
                    > USED AT LINE 1135 IN monty.asm
DIVIDE2:            06DD DEFINED AT LINE 1131 IN monty.asm
                    > USED AT LINE 1128 IN monty.asm
DIVIDE3:            06DE DEFINED AT LINE 1133 IN monty.asm
                    > USED AT LINE 1130 IN monty.asm
SQUAREROOT:         06E4 DEFINED AT LINE 1143 IN monty.asm
                    > USED AT LINE 997 IN monty.asm
SQUAREROOT1:        06E9 DEFINED AT LINE 1147 IN monty.asm
                    > USED AT LINE 1168 IN monty.asm
SQUAREROOT4:        0704 DEFINED AT LINE 1167 IN monty.asm
                    > USED AT LINE 1161 IN monty.asm
SQUAREROOT5:        070B DEFINED AT LINE 1172 IN monty.asm
                    > USED AT LINE 1170 IN monty.asm
PRTDEC:             070E DEFINED AT LINE 1178 IN monty.asm
                    > USED AT LINE 257 IN monty.asm
                    > USED AT LINE 1677 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 142
PRTDEC0:            071D DEFINED AT LINE 1189 IN monty.asm
                    > USED AT LINE 1180 IN monty.asm
PRTDEC1:            073F DEFINED AT LINE 1205 IN monty.asm
                    > USED AT LINE 1193 IN monty.asm
                    > USED AT LINE 1195 IN monty.asm
                    > USED AT LINE 1197 IN monty.asm
                    > USED AT LINE 1199 IN monty.asm
                    > USED AT LINE 1202 IN monty.asm
PRTDEC2:            0741 DEFINED AT LINE 1207 IN monty.asm
                    > USED AT LINE 1210 IN monty.asm
PRTDEC3:            0751 DEFINED AT LINE 1219 IN monty.asm
                    > USED AT LINE 1214 IN monty.asm
PRTDEC4:            0752 DEFINED AT LINE 1221 IN monty.asm
                    > USED AT LINE 1218 IN monty.asm
PRTHEX:             0756 DEFINED AT LINE 1225 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0761 DEFINED AT LINE 1233 IN monty.asm
                    > USED AT LINE 1228 IN monty.asm
                    > USED AT LINE 1230 IN monty.asm
PRTHEX3:            076A DEFINED AT LINE 1241 IN monty.asm
                    > USED AT LINE 1239 IN monty.asm
PRTSTR0:            0775 DEFINED AT LINE 1249 IN monty.asm
                    > USED AT LINE 1255 IN monty.asm
PRTSTR:             0779 DEFINED AT LINE 1252 IN monty.asm
                    > USED AT LINE 247 IN monty.asm
                    > USED AT LINE 1319 IN monty.asm
NESTING:            077E DEFINED AT LINE 1268 IN monty.asm
                    > USED AT LINE 1581 IN monty.asm
                    > USED AT LINE 1622 IN monty.asm
NESTING0:           0788 DEFINED AT LINE 1274 IN monty.asm
                    > USED AT LINE 1270 IN monty.asm
                    > USED AT LINE 1272 IN monty.asm
NESTING1A:          078F DEFINED AT LINE 1279 IN monty.asm
                    > USED AT LINE 1276 IN monty.asm
NESTING1:           0792 DEFINED AT LINE 1282 IN monty.asm
                    > USED AT LINE 1273 IN monty.asm
NESTING2:           07A1 DEFINED AT LINE 1291 IN monty.asm
                    > USED AT LINE 1286 IN monty.asm
                    > USED AT LINE 1288 IN monty.asm
NESTING3:           07A3 DEFINED AT LINE 1294 IN monty.asm
                    > USED AT LINE 1290 IN monty.asm
NESTING4:           07AE DEFINED AT LINE 1301 IN monty.asm
                    > USED AT LINE 1296 IN monty.asm
                    > USED AT LINE 1298 IN monty.asm
PROMPT:             07B0 DEFINED AT LINE 1305 IN monty.asm
                    > USED AT LINE 1565 IN monty.asm
CRLF:               07B9 DEFINED AT LINE 1310 IN monty.asm
                    > USED AT LINE 1634 IN monty.asm
PRINTSTR:           07C0 DEFINED AT LINE 1317 IN monty.asm
                    > USED AT LINE 1306 IN monty.asm
                    > USED AT LINE 1311 IN monty.asm
                    > USED AT LINE 1561 IN monty.asm
                    > USED AT LINE 1675 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 135
EXECSTR:            07C7 DEFINED AT LINE 1326 IN monty.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
CALL:               07D2 DEFINED AT LINE 1337 IN monty.asm
GO:                 07D4 DEFINED AT LINE 1344 IN monty.asm
                    > USED AT LINE 402 IN monty.asm
GO0:                07D5 DEFINED AT LINE 1346 IN monty.asm
                    > USED AT LINE 801 IN monty.asm
                    > USED AT LINE 803 IN monty.asm
                    > USED AT LINE 815 IN monty.asm
GO1:                07DB DEFINED AT LINE 1351 IN monty.asm
                    > USED AT LINE 1349 IN monty.asm
GO2:                07FB DEFINED AT LINE 1368 IN monty.asm
                    > USED AT LINE 1360 IN monty.asm
GO3:                0800 DEFINED AT LINE 1372 IN monty.asm
                    > USED AT LINE 1367 IN monty.asm
                    > USED AT LINE 1427 IN monty.asm
DOFUNC:             080E DEFINED AT LINE 1384 IN monty.asm
DOFUNC0:            0815 DEFINED AT LINE 1390 IN monty.asm
                    > USED AT LINE 1388 IN monty.asm
DOFUNC1:            0826 DEFINED AT LINE 1404 IN monty.asm
                    > USED AT LINE 1398 IN monty.asm
DOFUNC2:            082C DEFINED AT LINE 1410 IN monty.asm
                    > USED AT LINE 1414 IN monty.asm
DOFUNC3:            0831 DEFINED AT LINE 1415 IN monty.asm
                    > USED AT LINE 1409 IN monty.asm
DOFUNC4:            083D DEFINED AT LINE 1426 IN monty.asm
                    > USED AT LINE 1403 IN monty.asm
FUNC:               0840 DEFINED AT LINE 1430 IN monty.asm
FUNC1:              0858 DEFINED AT LINE 1451 IN monty.asm
                    > USED AT LINE 1475 IN monty.asm
                    > USED AT LINE 1478 IN monty.asm
                    > USED AT LINE 1483 IN monty.asm
                    > USED AT LINE 1487 IN monty.asm
FUNC2:              087E DEFINED AT LINE 1476 IN monty.asm
                    > USED AT LINE 1465 IN monty.asm
                    > USED AT LINE 1467 IN monty.asm
                    > USED AT LINE 1469 IN monty.asm
FUNC3:              0881 DEFINED AT LINE 1479 IN monty.asm
                    > USED AT LINE 1472 IN monty.asm
                    > USED AT LINE 1474 IN monty.asm
FUNC4:              0889 DEFINED AT LINE 1485 IN monty.asm
                    > USED AT LINE 1458 IN monty.asm
                    > USED AT LINE 1460 IN monty.asm
                    > USED AT LINE 1462 IN monty.asm
FUNC4A:             088C DEFINED AT LINE 1488 IN monty.asm
                    > USED AT LINE 1484 IN monty.asm
ARG:                0898 DEFINED AT LINE 1499 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARG0:               08B6 DEFINED AT LINE 1520 IN monty.asm
                    > USED AT LINE 1526 IN monty.asm
ARG0A:              08BF DEFINED AT LINE 1528 IN monty.asm
                    > USED AT LINE 1505 IN monty.asm
                    > USED AT LINE 1512 IN monty.asm
ARG1:               08C4 DEFINED AT LINE 1531 IN monty.asm
                    > USED AT LINE 1524 IN monty.asm
ARG1A:              08CC DEFINED AT LINE 1538 IN monty.asm
                    > USED AT LINE 1530 IN monty.asm
INIT:               08CF DEFINED AT LINE 1542 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1560 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              08E8 DEFINED AT LINE 1552 IN monty.asm
                    > USED AT LINE 1555 IN monty.asm
START:              08ED DEFINED AT LINE 1558 IN monty.asm
INTERPRET:          0903 DEFINED AT LINE 1564 IN monty.asm
                    > USED AT LINE 1661 IN monty.asm
                    > USED AT LINE 1678 IN monty.asm
INTERPRET2:         090D DEFINED AT LINE 1570 IN monty.asm
                    > USED AT LINE 1614 IN monty.asm
INTERPRET3:         0915 DEFINED AT LINE 1577 IN monty.asm
                    > USED AT LINE 1586 IN monty.asm
INTERPRET4:         091B DEFINED AT LINE 1583 IN monty.asm
                    > USED AT LINE 1575 IN monty.asm
INTERPRET5:         0920 DEFINED AT LINE 1589 IN monty.asm
                    > USED AT LINE 1623 IN monty.asm
                    > USED AT LINE 1637 IN monty.asm
INTERPRET6:         0931 DEFINED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1592 IN monty.asm
INTERPRET7:         093F DEFINED AT LINE 1625 IN monty.asm
                    > USED AT LINE 1597 IN monty.asm
INTERPRET8:         0952 DEFINED AT LINE 1639 IN monty.asm
                    > USED AT LINE 1595 IN monty.asm
NEXT:               095A DEFINED AT LINE 1645 IN monty.asm
                    > USED AT LINE 72 IN monty.asm
                    > USED AT LINE 1649 IN monty.asm
NEXT1:              096D DEFINED AT LINE 1658 IN monty.asm
                    > USED AT LINE 1650 IN monty.asm
NEXT2:              0974 DEFINED AT LINE 1662 IN monty.asm
                    > USED AT LINE 1652 IN monty.asm
EXIT_:              097A DEFINED AT LINE 1670 IN monty.asm
                    > USED AT LINE 1660 IN monty.asm
ERROR:              097D DEFINED AT LINE 1674 IN monty.asm
                    > USED AT LINE 404 IN monty.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1353 IN monty.asm
                    > USED AT LINE 1544 IN monty.asm
                    > USED AT LINE 1559 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               1900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1549 IN monty.asm
RESTARTS:           19D0 DEFINED AT LINE 10 IN ram.asm
RST08:              19D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              19D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              19D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              19D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              19D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              19DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               19DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             19DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             19E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            19E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            19E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            19E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1546 IN monty.asm
VFRAC:              19E6 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 391 IN monty.asm
                    > USED AT LINE 990 IN monty.asm
                    > USED AT LINE 998 IN monty.asm
VDATAWIDTH:         19E8 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 625 IN monty.asm
                    > USED AT LINE 822 IN monty.asm
                    > USED AT LINE 898 IN monty.asm
                    > USED AT LINE 931 IN monty.asm
VTIBPTR:            19EA DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 1568 IN monty.asm
                    > USED AT LINE 1640 IN monty.asm
VPOINTER:           19EC DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 423 IN monty.asm
                    > USED AT LINE 425 IN monty.asm
                    > USED AT LINE 426 IN monty.asm
                    > USED AT LINE 612 IN monty.asm
                    > USED AT LINE 623 IN monty.asm
                    > USED AT LINE 829 IN monty.asm
                    > USED AT LINE 1534 IN monty.asm
VLASTDEF:           19EE DEFINED AT LINE 30 IN ram.asm
VHASHSTR:           19F0 DEFINED AT LINE 31 IN ram.asm
VNEXT:              19F2 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1543 IN monty.asm
VHEAPPTR:           19F4 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 550 IN monty.asm
                    > USED AT LINE 569 IN monty.asm
                    > USED AT LINE 649 IN monty.asm
                    > USED AT LINE 680 IN monty.asm
                    > USED AT LINE 925 IN monty.asm
                    > USED AT LINE 971 IN monty.asm
                    > USED AT LINE 972 IN monty.asm
                    > USED AT LINE 1431 IN monty.asm
                    > USED AT LINE 1491 IN monty.asm
                    > USED AT LINE 1493 IN monty.asm
VTEMP1:             19F6 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 918 IN monty.asm
                    > USED AT LINE 973 IN monty.asm
VTEMP2:             19F8 DEFINED AT LINE 36 IN ram.asm
TBPTR:              19FA DEFINED AT LINE 38 IN ram.asm
TIB:                1A00 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 1574 IN monty.asm
                    > USED AT LINE 1617 IN monty.asm
                    > USED AT LINE 1626 IN monty.asm
                    > USED AT LINE 1641 IN monty.asm
PAD:                1B00 DEFINED AT LINE 44 IN ram.asm
HEAP:               1C00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 73 IN monty.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2243S43:  406D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2244S43:  40E5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2245S43:  4167 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2250S43:  41CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2251S43:  422F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2252S43:  4293 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2253S43:  42F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2254S43:  435D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2255S43:  43C5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2256S43:  442B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2257S43:  4491 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2258S43:  44F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2259S43:  4563 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2260S43:  45CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2261S43:  4633 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2262S43:  46A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2263S43:  470F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2264S43:  477B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2265S43:  47EB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2266S43:  4857 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2267S43:  48CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2268S43:  493D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2269S43:  49AD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2270S43:  4A19 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2271S43:  4A85 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2272S43:  4AF1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2273S43:  4B5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2274S43:  4BD1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2275S43:  4C3D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2276S43:  4CAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2277S43:  4D19 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2278S43:  4D85 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2279S43:  4DF1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2280S43:  4E5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2281S43:  4EC9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2282S43:  4F35 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2283S43:  4FA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2284S43:  500D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2285S43:  5079 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2286S43:  50E7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2287S43:  5155 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2288S43:  51C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2289S43:  5233 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2290S43:  5297 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2291S43:  5307 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2292S43:  5375 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2293S43:  53E5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2294S43:  5457 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2295S43:  54CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2296S43:  553D DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            5548 DEFINED AT LINE 140
