0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 3D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 3D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 3D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 3D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 3D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 3D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 3D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 3D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 3D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 3D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 3C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 3D               LD   (RST08),HL   
0094   22 D2 3D               LD   (RST10),HL   
0097   22 D4 3D               LD   (RST18),HL   
009A   22 D6 3D               LD   (RST20),HL   
009D   22 D8 3D               LD   (RST28),HL   
00A0   22 DA 3D               LD   (RST30),HL   
00A3   22 DE 3D               LD   (INTVEC),HL   
00A6   22 E0 3D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 3D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 3D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 3C               LD   SP,STACK   
00C6   CD 8F 09               CALL   init   
00C9   C3 00 0B               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   1A 0A                  DW   next   ; g nNext
0186   00 40                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   88                     DB   lsb(nop_)   ; SP
0221   42                     DB   lsb(not_)   ; !
0222   53                     DB   lsb(string_)   ; "
0223   4A                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   15                     DB   lsb(arrIndex_)   ; %
0226   06                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   88                     DB   lsb(nop_)   ; )
022A   3F                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   88                     DB   lsb(nop_)   ; ,
022D   56                     DB   lsb(sub_)   ; -
022E   27                     DB   lsb(dot_)   ; .
022F   85                     DB   lsb(div_)   ; /	
0230   47                     DB   lsb(num_)   ; 0
0231   47                     DB   lsb(num_)   ; 1
0232   47                     DB   lsb(num_)   ; 2
0233   47                     DB   lsb(num_)   ; 3
0234   47                     DB   lsb(num_)   ; 4
0235   47                     DB   lsb(num_)   ; 5
0236   47                     DB   lsb(num_)   ; 6
0237   47                     DB   lsb(num_)   ; 7
0238   47                     DB   lsb(num_)   ; 8
0239   47                     DB   lsb(num_)   ; 9
023A   2D                     DB   lsb(go_)   ; :
023B   24                     DB   lsb(discard_)   ; ;
023C   73                     DB   lsb(lt_)   ; <
023D   59                     DB   lsb(eq_)   ; =
023E   68                     DB   lsb(gt_)   ; >
023F   36                     DB   lsb(if_)   ; ?
0240   03                     DB   lsb(addr_)   ; @
0241   30                     DB   lsb(identU_)   ; A
0242   30                     DB   lsb(identU_)   ; B
0243   30                     DB   lsb(identU_)   ; C
0244   30                     DB   lsb(identU_)   ; D
0245   30                     DB   lsb(identU_)   ; E
0246   30                     DB   lsb(identU_)   ; F
0247   30                     DB   lsb(identU_)   ; G
0248   30                     DB   lsb(identU_)   ; h
0249   30                     DB   lsb(identU_)   ; I
024A   30                     DB   lsb(identU_)   ; J
024B   30                     DB   lsb(identU_)   ; K
024C   30                     DB   lsb(identU_)   ; L
024D   30                     DB   lsb(identU_)   ; M
024E   30                     DB   lsb(identU_)   ; N
024F   30                     DB   lsb(identU_)   ; O
0250   30                     DB   lsb(identU_)   ; p
0251   30                     DB   lsb(identU_)   ; Q
0252   30                     DB   lsb(identU_)   ; R
0253   30                     DB   lsb(identU_)   ; S
0254   30                     DB   lsb(identU_)   ; T
0255   30                     DB   lsb(identU_)   ; U
0256   30                     DB   lsb(identU_)   ; V
0257   30                     DB   lsb(identU_)   ; W
0258   30                     DB   lsb(identU_)   ; X
0259   30                     DB   lsb(identU_)   ; Y
025A   30                     DB   lsb(identU_)   ; Z
025B   0F                     DB   lsb(arrBegin_)   ; [
025C   21                     DB   lsb(command_)   ; \
025D   12                     DB   lsb(arrEnd_)   ; ]
025E   50                     DB   lsb(xor_)   ; ^
025F   2A                     DB   lsb(remain_)   ; _
0260   53                     DB   lsb(string_)   ; `     used for testing string   	
0261   33                     DB   lsb(identL_)   ; a
0262   33                     DB   lsb(identL_)   ; b
0263   33                     DB   lsb(identL_)   ; c
0264   33                     DB   lsb(identL_)   ; d
0265   33                     DB   lsb(identL_)   ; e
0266   33                     DB   lsb(identL_)   ; f
0267   33                     DB   lsb(identL_)   ; g
0268   33                     DB   lsb(identL_)   ; h
0269   33                     DB   lsb(identL_)   ; i
026A   33                     DB   lsb(identL_)   ; j
026B   33                     DB   lsb(identL_)   ; k
026C   33                     DB   lsb(identL_)   ; l
026D   33                     DB   lsb(identL_)   ; m
026E   33                     DB   lsb(identL_)   ; n
026F   33                     DB   lsb(identL_)   ; o
0270   33                     DB   lsb(identL_)   ; p
0271   33                     DB   lsb(identL_)   ; q
0272   33                     DB   lsb(identL_)   ; r
0273   33                     DB   lsb(identL_)   ; s
0274   33                     DB   lsb(identL_)   ; t
0275   33                     DB   lsb(identL_)   ; u
0276   33                     DB   lsb(identL_)   ; v
0277   33                     DB   lsb(identL_)   ; w
0278   33                     DB   lsb(identL_)   ; x
0279   33                     DB   lsb(identL_)   ; y
027A   33                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   4D                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   39                     DB   lsb(inv_)   ; ~
027F   88                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   C3 8A 03               JP   add   
0303                ADDR_:       
0303   C3 A4 03               JP   addr   
0306                AND_:        
0306   C3 B0 03               JP   and   
0309                ARG_:        
0309   C3 CD 03               JP   arg   
030C                ARG_LIST_:      
030C   C3 04 04               JP   arg_list   
030F                ARRBEGIN_:      
030F   C3 36 04               JP   arrBegin   
0312                ARREND_:      
0312   C3 52 04               JP   arrEnd   
0315                ARRINDEX_:      
0315   C3 A0 04               JP   arrIndex   
0318                BLOCK_:      
0318   C3 C9 04               JP   block   
031B                BLOCKEND_:      
031B   C3 32 05               JP   blockEnd   
031E                CHAR_:       
031E   C3 87 05               JP   char   
0321                COMMAND_:      
0321   C3 B6 07               JP   command   
0324                DISCARD_:      
0324   E1                     POP   hl   
0325   DD E9                  JP   (ix)   
0327                DOT_:        
0327   C3 AD 05               JP   dot   
032A                REMAIN_:      
032A   C3 46 07               JP   remain   
032D                GO_:         
032D   C3 11 06               JP   go   
0330                IDENTU_:      
0330   C3 CA 06               JP   identU   
0333                IDENTL_:      
0333   C3 CF 06               JP   identL   
0336                IF_:         
0336   C3 E1 06               JP   if   
0339                INV_:        ; Bitwise INVert the top member of the stack
0339   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
033C   C3 C5 03               JP   xor1   
033F                MUL_:        
033F   C3 FA 06               JP   mul   
0342                NOT_:        ; logical invert, any non zero value
0342   21 00 00               LD   hl,0   ; is considered true
0345   18 1D                  JR   eq1   
0347                NUM_:        
0347   C3 16 07               JP   num   
034A                HEXNUM_:      
034A   C3 AD 06               JP   hexnum   
034D                OR_:         
034D   C3 BB 03               JP   or   
0350                XOR_:        
0350   C3 C4 03               JP   xor   
0353                STRING_:      
0353   C3 6F 07               JP   string   
0356                SUB_:        
0356   C3 97 07               JP   sub   
0359                EQ_:         
0359   03                     INC   bc   
035A   0A                     LD   a,(bc)   ; is it == ?
035B   FE 3D                  CP   "="   
035D   28 04                  JR   z,eq0   ; no its equality
035F   0B                     DEC   bc   
0360   C3 B8 04               JP   assign   ; no its assignment
0363                EQ0:         
0363   E1                     POP   hl   
0364                EQ1:         
0364   D1                     POP   de   
0365   C3 F0 05               JP   equals   
0368                GT_:         
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   CA 5C 07               JP   z,shiftRight   
036F   D1                     POP   de   
0370   E1                     POP   hl   
0371   18 09                  JR   lt1   
0373                LT_:         
0373   03                     INC   bc   
0374   0A                     LD   a,(bc)   
0375   FE 3C                  CP   "<"   
0377   CA 4C 07               JP   z,shiftLeft   
037A   E1                     POP   hl   
037B   D1                     POP   de   
037C                LT1:         
037C   FE 3D                  CP   "="   
037E   CA F8 05               JP   z,lessthaneq   
0381   0B                     DEC   bc   
0382   C3 FD 05               JP   lessthan   
0385                DIV_:        
0385   C3 9C 05               JP   div   
0388                NOP_:        
0388   DD E9                  JP   (ix)   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 BA 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399   03                     INC   bc   
039A   0A                     LD   a,(bc)   
039B   FE 3D                  CP   "="   ; += add to variable
039D   CA BA 04               JP   z,assign0   
03A0   E5                     PUSH   hl   
03A1   0B                     DEC   bc   
03A2   DD E9                  JP   (ix)   
03A4                             ; -- ptr
03A4                ADDR:        
03A4   2A F0 3D               LD   hl,(vPointer)   
03A7   E5                     PUSH   hl   
03A8   21 F0 3D               LD   hl,vPointer   
03AB   22 F0 3D               LD   (vPointer),hl   
03AE   DD E9                  JP   (ix)   
03B0                AND:         
03B0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B1   E1                     POP   hl   
03B2   7B                     LD   a,e   
03B3   A5                     AND   l   
03B4   6F                     LD   l,a   
03B5   7A                     LD   a,d   
03B6   A4                     AND   h   
03B7                AND1:        
03B7   67                     LD   h,a   
03B8   C3 99 03               JP   add3   
03BB                OR:          
03BB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BC   E1                     POP   hl   
03BD   7B                     LD   a,e   
03BE   B5                     OR   l   
03BF   6F                     LD   l,a   
03C0   7A                     LD   a,d   
03C1   B4                     OR   h   
03C2   18 F3                  JR   and1   
03C4                XOR:         
03C4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C5                XOR1:        
03C5   E1                     POP   hl   
03C6   7B                     LD   a,e   
03C7   AD                     XOR   l   
03C8   6F                     LD   l,a   
03C9   7A                     LD   a,d   
03CA   AC                     XOR   h   
03CB   18 EA                  JR   and1   
03CD                             ; $a .. $z
03CD                             ; -- value
03CD                             ; returns value of arg
03CD                ARG:         
03CD   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D0   FD 56 05               LD   d,(iy+5)   
03D3   EB                     EX   de,hl   
03D4   7D                     LD   a,l   ; arg_list* == null, skip
03D5   B4                     OR   h   
03D6   28 1C                  JR   z,arg0a   
03D8   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D9   2B                     DEC   hl   
03DA   7E                     LD   a,(hl)   
03DB   23                     INC   hl   
03DC   23                     INC   hl   
03DD   B7                     OR   a   
03DE   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E0   5F                     LD   e,a   ; e = a = num_args
03E1   03                     INC   bc   ; a = next char = arg_name
03E2   0A                     LD   a,(bc)   
03E3   C5                     PUSH   bc   ; save IP
03E4   43                     LD   b,e   ; b = e = num_args
03E5   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E8   FD 56 03               LD   d,(iy+3)   
03EB                ARG0:        
03EB   1B                     DEC   de   ; a = arg_name, de = next arg*
03EC   1B                     DEC   de   
03ED   BE                     CP   (hl)   
03EE   28 09                  JR   z,arg1   
03F0   23                     INC   hl   ; hl = next arg_list*
03F1   10 F8                  DJNZ   arg0   
03F3   C1                     POP   bc   ; no match, restore IP
03F4                ARG0A:       
03F4   11 00 00               LD   de,0   ; return 0
03F7   18 08                  JR   arg1a   
03F9                ARG1:        
03F9   C1                     POP   bc   ; restore IP
03FA   EB                     EX   de,hl   ; hl = arg*
03FB   22 F0 3D               LD   (vPointer),hl   ; store arg* in setter
03FE   5E                     LD   e,(hl)   
03FF   23                     INC   hl   
0400   56                     LD   d,(hl)   ; de = arg
0401                ARG1A:       
0401   D5                     PUSH   de   ; push arg
0402   DD E9                  JP   (ix)   
0404                             ; arg_list - parses input (ab:c)
0404                             ; names after the : represent uninitialised locals
0404                             ; return values are the state of the stack after the block ends
0404                ARG_LIST:      
0404   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0407   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
040A   23                     INC   hl   ; skip length field to start
040B   23                     INC   hl   
040C   E5                     PUSH   hl   ; save start of arg_list
040D   03                     INC   bc   ; point to next char
040E                ARG_LIST1:      
040E   0A                     LD   a,(bc)   
040F   FE 29                  CP   ")"   ; ) is the arg_list terminator
0411   28 12                  JR   z,arg_list4   
0413   FE 3A                  CP   ":"   
0415   20 03                  JR   nz,arg_list2   
0417   14                     INC   d   ; non zero value local count acts as flag
0418   20 08                  JR   nz,arg_list3   
041A                ARG_LIST2:      
041A   77                     LD   (hl),a   
041B   23                     INC   hl   
041C   1C                     INC   e   ; increase arg count
041D   AF                     XOR   a   
041E   B2                     OR   d   
041F   28 01                  JR   z,arg_list3   
0421   14                     INC   d   ; if d > 0 increase local count
0422                ARG_LIST3:      
0422   03                     INC   bc   ; point to next char
0423   18 E9                  JR   arg_list1   
0425                ARG_LIST4:      
0425   AF                     XOR   a   
0426   B2                     OR   d   
0427   28 01                  JR   z,arg_list5   
0429   15                     DEC   d   ; remove initial inc
042A                ARG_LIST5:      
042A   23                     INC   hl   
042B   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
042E   E1                     POP   hl   ; hl = start of arg_list
042F   E5                     PUSH   hl   ; return start of string
0430   2B                     DEC   hl   ; write length bytes to length field at start - 2
0431   72                     LD   (hl),d   
0432   2B                     DEC   hl   
0433   73                     LD   (hl),e   
0434   DD E9                  JP   (ix)   
0436                ARRBEGIN:      
0436   11 00 00               LD   de,0   ; create stack frame
0439   D5                     PUSH   de   ; push null for IP
043A   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
043D   FD 56 05               LD   d,(iy+5)   ; 
0440   D5                     PUSH   de   ; 
0441   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0444   FD 56 03               LD   d,(iy+3)   ; 
0447   D5                     PUSH   de   ; 
0448   FD E5                  PUSH   iy   ; push BP
044A   FD 21 00 00            LD   iy,0   ; BP = SP
044E   FD 39                  ADD   iy,sp   
0450   DD E9                  JP   (ix)   
0452                ARREND:      
0452   FD 54                  LD   d,iyh   ; de = BP
0454   FD 5D                  LD   e,iyl   
0456   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
045A   62 6B                  LD   hl,de   ; hl = de = BP
045C   B7                     OR   a   
045D   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
045F   CB 3C                  SRL   h   ; 
0461   CB 1D                  RR   l   
0463   44 4D                  LD   bc,hl   ; bc = count
0465   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = array[-2]
0468   71                     LD   (hl),c   ; write num items in length word
0469   23                     INC   hl   
046A   70                     LD   (hl),b   
046B   23                     INC   hl   ; hl = array[0], bc = count
046C                             ; de = BP, hl = array[0], bc = count
046C                ARREND1:      
046C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
046F   77                     LD   (hl),a   ; write lsb of array item
0470   23                     INC   hl   ; move to msb of array item
0471   3A E6 3D               LD   a,(vDataWidth)   ; vDataWidth=1?
0474   3D                     DEC   a   
0475   28 05                  JR   z,arrEnd2   
0477   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
047A   77                     LD   (hl),a   ; write msb of array item
047B   23                     INC   hl   ; move to next word in array
047C                ARREND2:      
047C   FD 2B                  DEC   iy   ; move to next word on stack
047E   FD 2B                  DEC   iy   
0480   0B                     DEC   bc   ; dec items count
0481   79                     LD   a,c   ; if not zero loop
0482   B0                     OR   b   
0483   20 E7                  JR   nz,arrEnd1   
0485   EB                     EX   de,hl   ; de = end of array, hl = BP
0486   F9                     LD   sp,hl   ; sp = BP
0487   E1                     POP   hl   ; de = end of array, hl = old BP
0488   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0489   FD 62                  LD   iyh,d   
048B   FD 6B                  LD   iyl,e   
048D   D1                     POP   de   ; pop arg_list (discard)
048E   D1                     POP   de   ; pop first_arg* (discard)
048F   D1                     POP   de   ; pop IP (discard)
0490   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = array[-2]
0494   22 EC 3D               LD   (vHeapPtr),hl   ; move heap* to end of array
0497   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
049B   13                     INC   de   ; de = array[0]
049C   13                     INC   de   
049D   D5                     PUSH   de   ; return array[0]
049E   DD E9                  JP   (ix)   
04A0                             ; index of an array, based on vDataWidth
04A0                             ; array num -- value    ; also sets vPointer to address
04A0                ARRINDEX:      
04A0   E1                     POP   hl   ; hl = index
04A1   D1                     POP   de   ; de = array
04A2   3A E6 3D               LD   a,(vDataWidth)   ; a = data width
04A5   3D                     DEC   a   
04A6   28 01                  JR   z,arrIndex1   
04A8                ARRINDEX0:      
04A8   29                     ADD   hl,hl   ; if data width = 2 then double
04A9                ARRINDEX1:      
04A9   19                     ADD   hl,de   ; add addr
04AA   22 F0 3D               LD   (vPointer),hl   ; store address in setter
04AD   16 00                  LD   d,0   
04AF   5E                     LD   e,(hl)   
04B0   B7                     OR   a   ; check data width again
04B1   28 02                  JR   z,arrIndex2   
04B3   23                     INC   hl   
04B4   56                     LD   d,(hl)   
04B5                ARRINDEX2:      
04B5   D5                     PUSH   de   
04B6   DD E9                  JP   (ix)   
04B8                             ; value _oldValue --            ; uses address in vPointer
04B8                ASSIGN:      
04B8   E1                     POP   hl   ; discard last accessed value
04B9   E1                     POP   hl   ; hl = new value
04BA                ASSIGN0:      
04BA   EB                     EX   de,hl   ; de = new value
04BB                ASSIGNX:      
04BB   2A F0 3D               LD   hl,(vPointer)   
04BE   73                     LD   (hl),e   
04BF   3A E6 3D               LD   a,(vDataWidth)   
04C2   3D                     DEC   a   ; is it byte?
04C3   28 02                  JR   z,assign1   
04C5   23                     INC   hl   
04C6   72                     LD   (hl),d   
04C7                ASSIGN1:      
04C7   DD E9                  JP   (ix)   
04C9                BLOCK:       
04C9   C5                     PUSH   bc   ; return pointer to first { of block
04CA   03                     INC   bc   
04CB   16 01                  LD   d,1   ; nesting: count first parenthesis
04CD                BLOCK1:      ; Skip to end of definition
04CD   0A                     LD   a,(bc)   ; Get the next character
04CE   03                     INC   bc   ; Point to next character
04CF   FE 21                  CP   " " + 1   ; ignore whitespace
04D1   38 FA                  JR   c,block1   
04D3   FE 29                  CP   ")"   
04D5   28 2D                  JR   z,block4   
04D7   FE 7D                  CP   "}"   
04D9   28 29                  JR   z,block4   
04DB   FE 5D                  CP   "]"   
04DD   28 25                  JR   z,block4   
04DF   FE 28                  CP   "("   
04E1   28 16                  JR   z,block2   
04E3   FE 7B                  CP   "{"   
04E5   28 12                  JR   z,block2   
04E7   FE 5B                  CP   "["   
04E9   28 0E                  JR   z,block2   
04EB   FE 27                  CP   "'"   
04ED   28 0D                  JR   z,block3   
04EF   FE 60                  CP   "`"   
04F1   28 09                  JR   z,block3   
04F3   FE 22                  CP   $22   
04F5   28 05                  JR   z,block3   
04F7   18 D4                  JR   block1   
04F9                BLOCK2:      
04F9   14                     INC   d   
04FA   18 D1                  JR   block1   
04FC                BLOCK3:      
04FC   3E 80                  LD   a,$80   
04FE   AA                     XOR   d   
04FF   47                     LD   b,a   
0500   20 CB                  JR   nz,block1   
0502   18 03                  JR   block5   
0504                BLOCK4:      
0504   15                     DEC   d   
0505   20 C6                  JR   nz,block1   ; get the next element
0507                BLOCK5:      
0507   60 69                  LD   hl,bc   ; hl = IP
0509   11 00 40               LD   de,HEAP   ; is IP pointing to object in heap
050C   B7                     OR   a   ; IP - HEAP
050D   ED 52                  SBC   hl,de   
050F   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0511   28 1C                  JR   z,block6   
0513   60 69                  LD   hl,bc   ; hl = IP
0515   D1                     POP   de   ; de = block*
0516   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
051A   B7                     OR   a   ; bc = size
051B   ED 52                  SBC   hl,de   
051D   44 4D                  LD   bc,hl   
051F   EB                     EX   de,hl   ; hl = block* de = heap*
0520   ED 5B EC 3D            LD   de,(vHeapPtr)   
0524   D5                     PUSH   de   ; return hblock*
0525   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0527   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += size
052B   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
052F                BLOCK6:      
052F   0B                     DEC   bc   ; balanced, exit
0530   DD E9                  JP   (ix)   
0532                BLOCKEND:      
0532   D9                     EXX      ; de" = oldBP bc" = oldIP
0533   FD 5E 00               LD   e,(iy+0)   
0536   FD 56 01               LD   d,(iy+1)   
0539   FD 4E 06               LD   c,(iy+6)   
053C   FD 46 07               LD   b,(iy+7)   
053F   D9                     EXX      
0540   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0543   FD 56 03               LD   d,(iy+3)   
0546   EB                     EX   de,hl   
0547   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054A   FD 56 01               LD   d,(iy+1)   
054D   13                     INC   de   ; for carry flag <=
054E   B7                     OR   a   
054F   ED 52                  SBC   hl,de   
0551   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0553   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0555   FD 5D                  LD   e,iyl   
0557   21 08 00               LD   hl,8   
055A   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055B   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055C   18 0C                  JR   blockEnd2   
055E                BLOCKEND1:      ; same scope
055E   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0561   FD 56 03               LD   d,(iy+3)   
0564   EB                     EX   de,hl   
0565   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0567   FD 5D                  LD   e,iyl   
0569   EB                     EX   de,hl   
056A                BLOCKEND2:      
056A   44 4D                  LD   bc,hl   ; bc = hl = BP
056C   B7                     OR   a   ; hl = BP - SP = count
056D   ED 72                  SBC   hl,sp   
056F   7D                     LD   a,l   
0570   B4                     OR   h   
0571   28 09                  JR   z,blockEnd3   
0573   C5                     PUSH   bc   ; bc = count, hl = BP
0574   44 4D                  LD   bc,hl   
0576   E1                     POP   hl   
0577   2B                     DEC   hl   ; hl = BP-1
0578   1B                     DEC   de   ; de = args*-1
0579   ED B8                  LDDR      
057B   13                     INC   de   
057C                BLOCKEND3:      
057C   EB                     EX   de,hl   ; hl = new tos
057D   F9                     LD   sp,hl   ; sp = new tos
057E   D9                     EXX      ; bc = IP, iy = oldBP
057F   D5                     PUSH   de   
0580   C5                     PUSH   bc   
0581   D9                     EXX      
0582   C1                     POP   bc   
0583   FD E1                  POP   iy   
0585   DD E9                  JP   (ix)   
0587                CHAR:        
0587   21 00 00               LD   hl,0   ; if "" is empty or null
058A                CHAR1:       
058A   03                     INC   bc   ; point to next char
058B   0A                     LD   a,(bc)   
058C   FE 27                  CP   "'"   ; ' is the terminator
058E   28 09                  JR   z,char3   
0590   FE 5C                  CP   $5c   ; \ is the escape
0592   20 02                  JR   nz,char2   
0594   03                     INC   bc   
0595   0A                     LD   a,(bc)   
0596                CHAR2:       
0596   6F                     LD   l,a   
0597   18 F1                  JR   char1   
0599                CHAR3:       
0599   E5                     PUSH   hl   
059A   DD E9                  JP   (ix)   
059C                DIV:         
059C   D1                     POP   de   
059D   E1                     POP   hl   
059E   C5                     PUSH   bc   ; preserve the IP
059F   44 4D                  LD   bc,hl   
05A1   CD D7 05               CALL   divide   
05A4   EB                     EX   de,hl   
05A5   ED 53 F6 3D            LD   (vRemain),de   
05A9   C1                     POP   bc   
05AA   C3 99 03               JP   add3   
05AD                DOT:         
05AD   E1                     POP   hl   
05AE   03                     INC   bc   
05AF   0A                     LD   a,(bc)   
05B0   FE 68                  CP   "h"   
05B2   20 05                  JR   nz,dot1   
05B4   CD 1E 09               CALL   prthex   
05B7   18 17                  JR   dot4   
05B9                DOT1:        
05B9   FE 73                  CP   "s"   
05BB   20 05                  JR   nz,dot2   
05BD   CD 41 09               CALL   prtstr   
05C0   18 0E                  JR   dot4   
05C2                DOT2:        
05C2   FE 63                  CP   "c"   
05C4   20 06                  JR   nz,dot3   
05C6   7D                     LD   a,l   
05C7   CD 85 00               CALL   putchar   
05CA   18 04                  JR   dot4   
05CC                DOT3:        
05CC   0B                     DEC   bc   
05CD   CD D6 08               CALL   prtdec   
05D0                DOT4:        
05D0   3E 20                  LD   a," "   
05D2   CD 85 00               CALL   putchar   
05D5   DD E9                  JP   (ix)   
05D7                             ; division subroutine.
05D7                             ; bc: divisor, de: dividend, hl: remainder
05D7                DIVIDE:      
05D7   21 00 00               LD   hl,0   ; zero the remainder
05DA   3E 10                  LD   a,16   ; loop counter
05DC                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05DC   CB 21                  SLA   c   
05DE   CB 10                  RL   b   
05E0   ED 6A                  ADC   hl,hl   
05E2   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05E4   38 03                  JR   c,divide2   
05E6   0C                     INC   c   
05E7   18 01                  JR   divide3   
05E9                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05E9   19                     ADD   hl,de   
05EA                DIVIDE3:      
05EA   3D                     DEC   a   
05EB   20 EF                  JR   nz,divide1   
05ED   50 59                  LD   de,bc   ; result from bc to de
05EF   C9                     RET      
05F0                             ; hl = value1, de = value2
05F0                             ; hl = result
05F0                EQUALS:      
05F0   B7                     OR   a   ; reset the carry flag
05F1   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05F3   28 10                  JR   z,true1   
05F5   C3 0B 06               JP   false1   
05F8                             ; hl = value1 de = value2
05F8                             ; hl = result
05F8                LESSTHANEQ:      
05F8   B7                     OR   a   
05F9   ED 52                  SBC   hl,de   
05FB   18 05                  JR   lessthan1   
05FD                             ; hl = value1 de = value2
05FD                             ; hl = result
05FD                LESSTHAN:      
05FD   B7                     OR   a   
05FE   ED 52                  SBC   hl,de   
0600   28 09                  JR   z,false1   
0602                LESSTHAN1:      
0602   FA 0B 06               JP   m,false1   
0605                TRUE1:       
0605   21 FF FF               LD   hl,TRUE   
0608   E5                     PUSH   hl   
0609   DD E9                  JP   (ix)   
060B                NULL1:       
060B                FALSE1:      
060B   21 00 00               LD   hl,FALSE   
060E   E5                     PUSH   hl   
060F   DD E9                  JP   (ix)   
0611                             ; execute a block of code which ends with }
0611                             ; creates a root scope if BP == stack
0611                             ; else uses outer scope
0611                GO:          
0611   D1                     POP   de   ; de = block*
0612                GO1:         
0612   7B                     LD   a,e   ; if block* == null, exit
0613   B2                     OR   d   
0614   20 02                  JR   nz,go2   
0616   DD E9                  JP   (ix)   
0618                GO2:         
0618   1A                     LD   a,(de)   
0619   FE 7B                  CP   "{"   
061B   C2 51 06               JP   nz,goFunc   
061E                GOBLOCK:      
061E   ED 53 F8 3D            LD   (vTemp1),de   ; save de
0622   21 80 3C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0625   FD 54                  LD   d,iyh   
0627   FD 5D                  LD   e,iyl   
0629   B7                     OR   a   ; if stack* == BP then this is the root_scope
062A   ED 52                  SBC   hl,de   
062C   ED 5B F8 3D            LD   de,(vTemp1)   ; restore de
0630   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0631   B4                     OR   h   
0632   3E 00                  LD   a,0   
0634   28 6C                  JR   z,goFunc8   
0636   C5                     PUSH   bc   ; push IP
0637   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
063A   FD 46 05               LD   b,(iy+5)   
063D   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0640   FD 66 03               LD   h,(iy+3)   
0643                GOBLOCK1:      
0643   C5                     PUSH   bc   ; arg_list*
0644   E5                     PUSH   hl   ; first_arg*
0645   FD E5                  PUSH   iy   ; push BP
0647   FD 21 00 00            LD   iy,0   ; BP = SP
064B   FD 39                  ADD   iy,sp   
064D   42 4B                  LD   bc,de   ; bc = de = block*-1
064F   DD E9                  JP   (ix)   
0651                GOFUNC:      ; execute function
0651   EB                     EX   de,hl   ; hl = func*
0652   5E                     LD   e,(hl)   ; de = closure*
0653   23                     INC   hl   
0654   56                     LD   d,(hl)   
0655   23                     INC   hl   
0656   7B                     LD   a,e   ; if closure* == null skip
0657   B2                     OR   d   
0658   28 21                  JR   z,goFunc3   
065A   ED 43 F8 3D            LD   (vTemp1),bc   
065E   22 FA 3D               LD   (vTemp2),hl   ; save bc,hl
0661   EB                     EX   de,hl   ; hl = closure*
0662   2B                     DEC   hl   ; bc = count
0663   46                     LD   b,(hl)   
0664   2B                     DEC   hl   
0665   4E                     LD   c,(hl)   
0666   23                     INC   hl   ; push each item on stack
0667   23                     INC   hl   
0668   18 06                  JR   goFunc2   
066A                GOFUNC1:      
066A   5E                     LD   e,(hl)   ; de = closure item
066B   23                     INC   hl   
066C   56                     LD   d,(hl)   
066D   23                     INC   hl   
066E   D5                     PUSH   de   ; push on stack
066F   0B                     DEC   bc   
0670                GOFUNC2:      
0670   79                     LD   a,c   ; if count != 0 then loop
0671   B0                     OR   b   
0672   20 F6                  JR   nz,goFunc1   
0674   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore bc
0678   2A FA 3D               LD   hl,(vTemp2)   ; restore hl
067B                GOFUNC3:      
067B   5E                     LD   e,(hl)   ; de = block*
067C   23                     INC   hl   
067D   56                     LD   d,(hl)   
067E   23                     INC   hl   
067F   ED 53 F8 3D            LD   (vTemp1),de   ; save block*
0683   5E                     LD   e,(hl)   ; de = arg_list*
0684   23                     INC   hl   
0685   56                     LD   d,(hl)   
0686   23                     INC   hl   
0687   EB                     EX   de,hl   ; hl = arg_list*
0688   ED 5B F8 3D            LD   de,(vTemp1)   ; restore de = block*
068C   7D                     LD   a,l   ; if arg_list* == null a = 0
068D   B4                     OR   h   
068E   20 03                  JR   nz,goFunc4   
0690   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
0691   18 0F                  JR   goFunc8   
0693                GOFUNC4:      ; allocate locals
0693   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0694   7E                     LD   a,(hl)   
0695   18 03                  JR   goFunc6   
0697                GOFUNC5:      ; loop
0697   3B                     DEC   sp   
0698   3B                     DEC   sp   
0699   3D                     DEC   a   
069A                GOFUNC6:      
069A   B7                     OR   a   
069B   20 FA                  JR   nz,goFunc5   ; end loop
069D                GOFUNC7:      
069D   2B                     DEC   hl   ; a = num_args* x 2
069E   7E                     LD   a,(hl)   
069F   23                     INC   hl   
06A0   23                     INC   hl   
06A1   87                     ADD   a,a   ; a *= 2
06A2                GOFUNC8:      
06A2   C5                     PUSH   bc   ; push IP
06A3   44 4D                  LD   bc,hl   
06A5   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06A8   85                     ADD   a,l   
06A9   6F                     LD   l,a   
06AA   39                     ADD   hl,sp   
06AB   18 96                  JR   goBlock1   
06AD                HEXNUM:      
06AD   21 00 00               LD   hl,0   ; Clear hl to accept the number
06B0                HEXNUM1:      
06B0   03                     INC   bc   
06B1   0A                     LD   a,(bc)   ; Get the character which is a numeral
06B2   CB 77                  BIT   6,a   ; is it uppercase alpha?
06B4   28 02                  JR   z,hexnum2   ; no a decimal
06B6   D6 07                  SUB   7   ; sub 7  to make $a - $F
06B8                HEXNUM2:      
06B8   D6 30                  SUB   $30   ; form decimal digit
06BA   DA 38 07               JP   c,num2   
06BD   FE 10                  CP   $0F+1   
06BF   D2 38 07               JP   nc,num2   
06C2   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06C3   29                     ADD   hl,hl   ; 4X
06C4   29                     ADD   hl,hl   ; 8X
06C5   29                     ADD   hl,hl   ; 16X
06C6   85                     ADD   a,l   ; add into bottom of hl
06C7   6F                     LD   l,a   
06C8   18 E6                  JR   hexnum1   
06CA                IDENTU:      
06CA   0A                     LD   a,(bc)   ; a = identifier char
06CB   D6 41                  SUB   "A"   ; "A" = 0
06CD   18 05                  JR   ident1   
06CF                IDENTL:      
06CF   0A                     LD   a,(bc)   
06D0   D6 61                  SUB   "a"   
06D2   C6 1A                  ADD   a,26   
06D4                IDENT1:      
06D4   87                     ADD   a,a   ; l = a * 2
06D5   6F                     LD   l,a   
06D6   26 3D                  LD   h,msb(vars)   
06D8   22 F0 3D               LD   (vPointer),hl   ; store address in setter
06DB   5E                     LD   e,(hl)   
06DC   23                     INC   hl   
06DD   56                     LD   d,(hl)   
06DE   D5                     PUSH   de   
06DF   DD E9                  JP   (ix)   
06E1                             ; if
06E1                             ; condition then -- value
06E1                IF:          
06E1   03                     INC   bc   
06E2   0A                     LD   a,(bc)   
06E3   FE 3F                  CP   "?"   
06E5   28 06                  JR   z,ifte   
06E7   0B                     DEC   bc   
06E8   11 00 00               LD   de,0   ; NUL pointer for else
06EB   18 01                  JR   ifte1   
06ED                             ; ifte
06ED                             ; condition then else -- value
06ED                IFTE:        
06ED   D1                     POP   de   ; de = else
06EE                IFTE1:       
06EE   E1                     POP   hl   ; hl = then
06EF   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06F0   7C                     LD   a,h   
06F1   B5                     OR   l   
06F2   E1                     POP   hl   ; hl = then
06F3   CA 12 06               JP   z,go1   ; if z de = else
06F6   EB                     EX   de,hl   ; condition = false, de = then
06F7   C3 12 06               JP   go1   
06FA                MUL:         
06FA   D1                     POP   de   ; get first value
06FB   E1                     POP   hl   
06FC                MUL2:        
06FC   C5                     PUSH   bc   ; Preserve the IP
06FD   44 4D                  LD   bc,hl   ; bc = 2nd value
06FF   21 00 00               LD   hl,0   
0702   3E 10                  LD   a,16   
0704                MUL3:        
0704   29                     ADD   hl,hl   
0705   CB 13                  RL   e   
0707   CB 12                  RL   d   
0709   30 04                  JR   nc,$+6   
070B   09                     ADD   hl,bc   
070C   30 01                  JR   nc,$+3   
070E   13                     INC   de   
070F   3D                     DEC   a   
0710   20 F2                  JR   nz,mul3   
0712   C1                     POP   bc   ; Restore the IP
0713   C3 99 03               JP   add3   
0716                NUM:         
0716   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0719   0A                     LD   a,(bc)   ; Get numeral or -
071A   FE 2D                  CP   "-"   
071C   20 01                  JR   nz,num0   
071E   03                     INC   bc   ; move to next char, no flags affected
071F                NUM0:        
071F   08                     EX   af,af'   ; save zero flag = 0 for later
0720                NUM1:        
0720   0A                     LD   a,(bc)   ; read digit
0721   D6 30                  SUB   "0"   ; less than 0?
0723   38 13                  JR   c,num2   ; not a digit, exit loop
0725   FE 0A                  CP   10   ; greater that 9?
0727   30 0F                  JR   nc,num2   ; not a digit, exit loop
0729   03                     INC   bc   ; inc IP
072A   54 5D                  LD   de,hl   ; multiply hl * 10
072C   29                     ADD   hl,hl   
072D   29                     ADD   hl,hl   
072E   19                     ADD   hl,de   
072F   29                     ADD   hl,hl   
0730   85                     ADD   a,l   ; add digit in a to hl
0731   6F                     LD   l,a   
0732   3E 00                  LD   a,0   
0734   8C                     ADC   a,h   
0735   67                     LD   h,a   
0736   18 E8                  JR   num1   
0738                NUM2:        
0738   0B                     DEC   bc   
0739   08                     EX   af,af'   ; restore zero flag
073A   20 07                  JR   nz,num3   
073C   EB                     EX   de,hl   ; negate the value of hl
073D   21 00 00               LD   hl,0   
0740   B7                     OR   a   ; jump to sub2
0741   ED 52                  SBC   hl,de   
0743                NUM3:        
0743   E5                     PUSH   hl   ; Put the number on the stack
0744   DD E9                  JP   (ix)   ; and process the next character
0746                REMAIN:      
0746   2A F6 3D               LD   hl,(vRemain)   
0749   E5                     PUSH   hl   
074A   DD E9                  JP   (ix)   
074C                             ; shiftLeft
074C                             ; value count -- value2          shift left count places
074C                SHIFTLEFT:      
074C   50 59                  LD   de,bc   ; save IP
074E   C1                     POP   bc   ; bc = count
074F   41                     LD   b,c   ; b = loop counter
0750   E1                     POP   hl   
0751   04                     INC   b   ; test for counter=0 case
0752   18 01                  JR   shiftLeft2   
0754                SHIFTLEFT1:      
0754   29                     ADD   hl,hl   ; left shift hl
0755                SHIFTLEFT2:      
0755   10 FD                  DJNZ   shiftLeft1   
0757   E5                     PUSH   hl   
0758   42 4B                  LD   bc,de   ; restore IP
075A   DD E9                  JP   (ix)   
075C                             ; shiftRight
075C                             ; value count -- value2          shift left count places
075C                SHIFTRIGHT:      
075C   50 59                  LD   de,bc   ; save IP
075E   C1                     POP   bc   ; bc = count
075F   41                     LD   b,c   ; b = loop counter
0760   E1                     POP   hl   
0761   04                     INC   b   ; test for counter=0 case
0762   18 04                  JR   shiftRight2   
0764                SHIFTRIGHT1:      
0764   CB 3C                  SRL   h   ; right shift hl
0766   CB 1D                  RR   l   
0768                SHIFTRIGHT2:      
0768   10 FA                  DJNZ   shiftRight1   
076A   E5                     PUSH   hl   
076B   42 4B                  LD   bc,de   ; restore IP
076D   DD E9                  JP   (ix)   
076F                             ; string
076F                             ; -- ptr                        ; points to start of string chars,
076F                             ; length is stored at start - 2 bytes
076F                STRING:      
076F   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
0772   23                     INC   hl   ; skip length field to start
0773   23                     INC   hl   
0774   E5                     PUSH   hl   ; save start of string
0775   03                     INC   bc   ; point to next char
0776   18 03                  JR   string2   
0778                STRING1:      
0778   77                     LD   (hl),a   
0779   23                     INC   hl   ; increase count
077A   03                     INC   bc   ; point to next char
077B                STRING2:      
077B   0A                     LD   a,(bc)   
077C   FE 22                  CP   DQUOTE   ; " is the string terminator
077E   20 F8                  JR   nz,string1   
0780   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0782   20 F4                  JR   nz,string1   
0784   AF                     XOR   a   ; write NUL to terminate string
0785   77                     LD   (hl),a   ; hl = end of string
0786   23                     INC   hl   
0787   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
078A   2B                     DEC   hl   ; hl = end of string without terminator
078B   D1                     POP   de   ; de = start of string
078C   D5                     PUSH   de   ; return start of string
078D   B7                     OR   a   ; hl = length bytes, de = start of string
078E   ED 52                  SBC   hl,de   
0790   EB                     EX   de,hl   
0791   2B                     DEC   hl   ; write length bytes to length field at start - 2
0792   72                     LD   (hl),d   
0793   2B                     DEC   hl   
0794   73                     LD   (hl),e   
0795   DD E9                  JP   (ix)   
0797                SUB:         ; negative sign or subtract
0797   03                     INC   bc   ; check if sign of a number
0798   0A                     LD   a,(bc)   
0799   0B                     DEC   bc   
079A   FE 30                  CP   "0"   
079C   38 05                  JR   c,sub0   
079E   FE 3A                  CP   "9"+1   
07A0   DA 47 03               JP   c,num_   
07A3                SUB0:        ; Subtract the value 2nd on stack from top of stack
07A3   03                     INC   bc   
07A4   FE 2D                  CP   "-"   
07A6   20 05                  JR   nz,sub1   
07A8   E1                     POP   hl   
07A9   2B                     DEC   hl   
07AA   C3 BA 04               JP   assign0   
07AD                SUB1:        
07AD   0B                     DEC   bc   
07AE   D1                     POP   de   
07AF   E1                     POP   hl   
07B0   B7                     OR   a   
07B1   ED 52                  SBC   hl,de   
07B3   C3 99 03               JP   add3   
07B6                             ;*******************************************************************
07B6                             ; commands
07B6                             ;*******************************************************************
07B6                COMMAND:      
07B6   03                     INC   bc   
07B7   0A                     LD   a,(bc)   
07B8   FE 5C                  CP   $5C   ; \\ comment
07BA   CA 36 08               JP   z,comment   
07BD   FE 61                  CP   "a"   ; \a absolute
07BF   CA 09 08               JP   z,abs1   
07C2   FE 62                  CP   "b"   ; \b bytes
07C4   CA 83 08               JP   z,bytes   
07C7   FE 63                  CP   "c"   ; \c closure
07C9   CA 16 08               JP   z,closure   
07CC   FE 66                  CP   "f"   ; \f func
07CE   CA 8B 08               JP   z,func   
07D1   FE 46                  CP   "F"   ; \F false
07D3   CA 0B 06               JP   z,false1   
07D6   FE 69                  CP   "i"   ; \i input
07D8   CA A7 08               JP   z,input   
07DB   FE 6B                  CP   "k"   ; \k key
07DD   CA B2 08               JP   z,key   
07E0   FE 6F                  CP   "o"   ; \o output
07E2   CA BB 08               JP   z,output   
07E5   FE 72                  CP   "r"   ; \r repeat
07E7   CA 7D 08               JP   z,repeat   
07EA   FE 73                  CP   "s"   ; \s select
07EC   CA C4 08               JP   z,select   
07EF   FE 54                  CP   "T"   ; \T true
07F1   CA 05 06               JP   z,true1   
07F4   FE 77                  CP   "w"   ; \w words
07F6   CA CE 08               JP   z,words   
07F9   FE 78                  CP   "x"   ; \x exit loop
07FB   CA 63 08               JP   z,break   
07FE   FE 7A                  CP   "z"   ; \z end loop
0800   CA 3F 08               JP   z,loopEnd   
0803   21 01 00               LD   hl,1   ; error 1: unknown command
0806   C3 33 0A               JP   error   
0809                ABS1:        
0809   E1                     POP   hl   
080A   CB 7C                  BIT   7,h   
080C   C8                     RET   z   
080D   AF                     XOR   a   
080E   95                     SUB   l   
080F   6F                     LD   l,a   
0810   9F                     SBC   a,a   
0811   94                     SUB   h   
0812   67                     LD   h,a   
0813   E5                     PUSH   hl   
0814   DD E9                  JP   (ix)   
0816                             ; closure
0816                             ; array* func* -- func1*
0816                CLOSURE:      
0816   E1                     POP   hl   ; h1 = func*
0817   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = heap* = closure*
081B   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
081F   01 06 00               LD   bc,6   ; bc = count
0822   ED B0                  LDIR      ; clone func
0824   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
0828   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap* = closure*
082B   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += 6
082F   D1                     POP   de   ; de = array*
0830   E5                     PUSH   hl   ; return closure*
0831   73                     LD   (hl),e   ; compile array*
0832   23                     INC   hl   
0833   72                     LD   (hl),d   
0834   DD E9                  JP   (ix)   
0836                COMMENT:      
0836   03                     INC   bc   ; point to next char
0837   0A                     LD   a,(bc)   
0838   FE 20                  CP   " "   ; terminate on any char less than SP
083A   30 FA                  JR   nc,comment   
083C   0B                     DEC   bc   
083D   DD E9                  JP   (ix)   
083F                LOOPEND:      
083F   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0841   FD 54                  LD   d,iyh   
0843   21 08 00               LD   hl,8   
0846   19                     ADD   hl,de   
0847   5E                     LD   e,(hl)   ; return block* after other returns
0848   23                     INC   hl   
0849   56                     LD   d,(hl)   
084A   23                     INC   hl   
084B   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
084E   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0851   D5                     PUSH   de   
0852   FD 6E 06               LD   l,(iy+6)   ; hl = oldIP
0855   FD 66 07               LD   h,(iy+7)   
0858   2B                     DEC   hl   ; rewind return IP to jus before \r
0859   2B                     DEC   hl   
085A   FD 75 06               LD   (iy+6),l   
085D   FD 74 07               LD   (iy+7),h   
0860   C3 32 05               JP   blockEnd   
0863                BREAK:       
0863   E1                     POP   hl   
0864   7D                     LD   a,l   
0865   B4                     OR   h   
0866   28 02                  JR   z,break1   
0868   DD E9                  JP   (ix)   
086A                BREAK1:      
086A                             ; ld l,(iy+6)                 ; hl = oldIP
086A                             ; ld h,(iy+7)
086A                             ; inc hl                      ; forward IP on stack to after \r
086A                             ; inc hl
086A                             ; ld (iy+6),l
086A                             ; ld (iy+7),h
086A                             ; ld e,(iy+2)                 ; dec first_arg*
086A                             ; ld d,(iy+3)
086A                             ; inc de
086A                             ; inc de
086A                             ; ld (iy+2),e
086A                             ; ld (iy+3),d
086A   FD 5D                  LD   e,iyl   ; get block* just under stack frame
086C   FD 54                  LD   d,iyh   
086E   21 08 00               LD   hl,8   
0871   19                     ADD   hl,de   
0872   23                     INC   hl   
0873   23                     INC   hl   
0874   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0877   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
087A   C3 32 05               JP   blockEnd   
087D                             ; repeat
087D                             ; block* --
087D                REPEAT:      
087D                             ; dec bc                      ; rewind IP to before \r
087D                             ; dec bc
087D   E1                     POP   hl   
087E   E5                     PUSH   hl   
087F   E5                     PUSH   hl   
0880   C3 11 06               JP   go   
0883                BYTES:       
0883   21 01 00               LD   hl,1   
0886                BYTES1:      
0886   22 E6 3D               LD   (vDataWidth),hl   
0889   DD E9                  JP   (ix)   
088B                             ; arg_list* block* -- ptr
088B                FUNC:        
088B   D1                     POP   de   ; de = block* hl = heap*
088C   2A EC 3D               LD   hl,(vHeapPtr)   
088F   AF                     XOR   a   
0890   77                     LD   (hl),a   ; compile null closure*
0891   23                     INC   hl   
0892   77                     LD   (hl),a   
0893   23                     INC   hl   
0894   73                     LD   (hl),e   ; compile block*
0895   23                     INC   hl   
0896   72                     LD   (hl),d   
0897   23                     INC   hl   
0898   D1                     POP   de   ; de = block*
0899   73                     LD   (hl),e   ; compile arg_list*
089A   23                     INC   hl   
089B   72                     LD   (hl),d   
089C   23                     INC   hl   
089D   ED 5B EC 3D            LD   de,(vHeapPtr)   ; return func*
08A1   D5                     PUSH   de   
08A2   22 EC 3D               LD   (vHeapPtr),hl   ; heap* += 4
08A5   DD E9                  JP   (ix)   
08A7                             ; Z80 port input
08A7                             ; port -- value
08A7                INPUT:       
08A7   E1                     POP   hl   
08A8   59                     LD   e,c   ; save IP
08A9   4D                     LD   c,l   
08AA   ED 68                  IN   l,(c)   
08AC   26 00                  LD   h,0   
08AE   4B                     LD   c,e   ; restore IP
08AF   E5                     PUSH   hl   
08B0   DD E9                  JP   (ix)   
08B2                KEY:         
08B2   CD 81 00               CALL   getchar   
08B5   26 00                  LD   h,0   
08B7   6F                     LD   l,a   
08B8   E5                     PUSH   hl   
08B9   DD E9                  JP   (ix)   
08BB                             ; Z80 port output
08BB                             ; value port --
08BB                OUTPUT:      
08BB   E1                     POP   hl   
08BC   59                     LD   e,c   ; save IP
08BD   4D                     LD   c,l   
08BE   E1                     POP   hl   
08BF   ED 69                  OUT   (c),l   
08C1   4B                     LD   c,e   ; restore IP
08C2   DD E9                  JP   (ix)   
08C4                             ; select
08C4                             ; index array -- value
08C4                SELECT:      
08C4   D1                     POP   de   ; de = array
08C5   E1                     POP   hl   ; hl = index
08C6   29                     ADD   hl,hl   ; if data width = 2 then double
08C7   19                     ADD   hl,de   ; add addr
08C8   5E                     LD   e,(hl)   
08C9   23                     INC   hl   
08CA   56                     LD   d,(hl)   
08CB   C3 12 06               JP   go1   
08CE                WORDS:       
08CE   21 02 00               LD   hl,2   
08D1   C3 86 08               JP   bytes1   
08D4                             ; 
08D4                             ; 
08D4                             ; 
08D4                             ; 
08D4                FILTER:      
08D4                MAP:         
08D4                SCAN:        
08D4   DD E9                  JP   (ix)   
08D6                             ; print decimal
08D6                             ; hl = value
08D6                PRTDEC:      
08D6   CB 7C                  BIT   7,h   
08D8   28 0B                  JR   z,prtdec0   
08DA   3E 2D                  LD   a,"-"   
08DC   CD 85 00               CALL   putchar   
08DF   AF                     XOR   a   
08E0   95                     SUB   l   
08E1   6F                     LD   l,a   
08E2   9F                     SBC   a,a   
08E3   94                     SUB   h   
08E4   67                     LD   h,a   
08E5                PRTDEC0:      
08E5   C5                     PUSH   bc   
08E6   0E 00                  LD   c,0   ; leading zeros flag = false
08E8   11 F0 D8               LD   de,-10000   
08EB   CD 07 09               CALL   prtdec1   
08EE   11 18 FC               LD   de,-1000   
08F1   CD 07 09               CALL   prtdec1   
08F4   11 9C FF               LD   de,-100   
08F7   CD 07 09               CALL   prtdec1   
08FA   1E F6                  LD   e,-10   
08FC   CD 07 09               CALL   prtdec1   
08FF   0C                     INC   c   ; flag = true for at least digit
0900   1E FF                  LD   e,-1   
0902   CD 07 09               CALL   prtdec1   
0905   C1                     POP   bc   
0906   C9                     RET      
0907                PRTDEC1:      
0907   06 2F                  LD   b,"0"-1   
0909                PRTDEC2:      
0909   04                     INC   b   
090A   19                     ADD   hl,de   
090B   38 FC                  JR   c,prtdec2   
090D   ED 52                  SBC   hl,de   
090F   3E 30                  LD   a,"0"   
0911   B8                     CP   b   
0912   20 05                  JR   nz,prtdec3   
0914   AF                     XOR   a   
0915   B1                     OR   c   
0916   C8                     RET   z   
0917   18 01                  JR   prtdec4   
0919                PRTDEC3:      
0919   0C                     INC   c   
091A                PRTDEC4:      
091A   78                     LD   a,b   
091B   C3 85 00               JP   putchar   
091E                PRTHEX:      ; display hl as a 16-bit number in hex.
091E   C5                     PUSH   bc   ; preserve the IP
091F   7C                     LD   a,h   
0920   CD 29 09               CALL   prthex2   
0923   7D                     LD   a,l   
0924   CD 29 09               CALL   prthex2   
0927   C1                     POP   bc   
0928   C9                     RET      
0929                PRTHEX2:      
0929   4F                     LD   c,a   
092A   1F                     RRA      
092B   1F                     RRA      
092C   1F                     RRA      
092D   1F                     RRA      
092E   CD 32 09               CALL   prthex3   
0931   79                     LD   a,c   
0932                PRTHEX3:      
0932   E6 0F                  AND   0x0F   
0934   C6 90                  ADD   a,0x90   
0936   27                     DAA      
0937   CE 40                  ADC   a,0x40   
0939   27                     DAA      
093A   C3 85 00               JP   putchar   
093D                PRTSTR0:      
093D   CD 85 00               CALL   putchar   
0940   23                     INC   hl   
0941                PRTSTR:      
0941   7E                     LD   a,(hl)   
0942   B7                     OR   a   
0943   20 F8                  JR   nz,prtstr0   
0945   C9                     RET      
0946                             ; **************************************************************************
0946                             ; calculate nesting value
0946                             ; a is char to be tested,
0946                             ; e is the nesting value (initially 0)
0946                             ; e is increased by ( and [
0946                             ; e is decreased by ) and ]
0946                             ; e has its bit 7 toggled by `
0946                             ; limited to 127 levels
0946                             ; **************************************************************************
0946                NESTING:      
0946   FE 22                  CP   DQUOTE   ; quote char
0948   28 06                  JR   z,nesting0   
094A   FE 60                  CP   "`"   ; quote char
094C   28 02                  JR   z,nesting0   
094E   18 0A                  JR   nesting1   
0950                NESTING0:      
0950   CB 7B                  BIT   7,e   
0952   28 03                  JR   z,nesting1a   
0954   CB BB                  RES   7,e   
0956   C9                     RET      
0957                NESTING1A:      
0957   CB FB                  SET   7,e   
0959   C9                     RET      
095A                NESTING1:      
095A   CB 7B                  BIT   7,e   
095C   C0                     RET   nz   
095D   FE 7B                  CP   "{"   
095F   28 08                  JR   z,nesting2   
0961   FE 5B                  CP   "["   
0963   28 04                  JR   z,nesting2   
0965   FE 28                  CP   "("   
0967   20 02                  JR   nz,nesting3   
0969                NESTING2:      
0969   1C                     INC   e   
096A   C9                     RET      
096B                NESTING3:      
096B   FE 7D                  CP   "}"   
096D   28 07                  JR   z,nesting4   
096F   FE 5D                  CP   "]"   
0971   28 03                  JR   z,nesting4   
0973   FE 29                  CP   ")"   
0975   C0                     RET   nz   
0976                NESTING4:      
0976   1D                     DEC   e   
0977   C9                     RET      
0978                PROMPT:      
0978   CD 88 09               CALL   printStr   
097B   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0980   C9                     RET      
0981                CRLF:        
0981   CD 88 09               CALL   printStr   
0984   0D 0A 00               .CSTR   "\r\n"   
0987   C9                     RET      
0988                             ; prints a null teminated string
0988                             ; the string should be immedaitely following the call
0988                PRINTSTR:      
0988   E3                     EX   (sp),hl   ; swap			
0989   CD 41 09               CALL   prtstr   
098C   23                     INC   hl   ; inc past NUL
098D   E3                     EX   (sp),hl   ; put it back	
098E   C9                     RET      
098F                INIT:        
098F   DD 2A EA 3D            LD   ix,(vNext)   
0993   FD 21 80 3C            LD   iy,STACK   
0997   21 80 01               LD   hl,isysVars   
099A   11 E6 3D               LD   de,sysVars   
099D   01 10 00               LD   bc,8 * 2   
09A0   ED B0                  LDIR      
09A2   21 00 3D               LD   hl,vars   ; 52 vars LO HI
09A5   06 34                  LD   b,26*2   
09A7   AF                     XOR   a   
09A8                INIT0:       
09A8   77                     LD   (hl),a   
09A9   23                     INC   hl   
09AA   10 FC                  DJNZ   init0   
09AC   C9                     RET      
09AD                START:       
09AD   31 80 3C               LD   sp,STACK   ; start of monty
09B0   CD 8F 09               CALL   init   ; setups
09B3   CD 88 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09B6   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09C3                INTERPRET:      
09C3   CD 78 09               CALL   prompt   
09C6   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09C9   ED 43 E8 3D            LD   (vTIBPtr),bc   
09CD                INTERPRET2:      ; calc nesting (a macro might have changed it)
09CD   1E 00                  LD   e,0   ; initilize nesting value
09CF   C5                     PUSH   bc   ; save offset into TIB,
09D0                             ; bc is also the count of chars in TIB
09D0   21 00 3E               LD   hl,TIB   ; hl is start of TIB
09D3   18 06                  JR   interpret4   
09D5                INTERPRET3:      
09D5   7E                     LD   a,(hl)   ; a = char in TIB
09D6   23                     INC   hl   ; inc pointer into TIB
09D7   0B                     DEC   bc   ; dec count of chars in TIB
09D8   CD 46 09               CALL   nesting   ; update nesting value
09DB                INTERPRET4:      
09DB   79                     LD   a,c   ; is count zero?
09DC   B0                     OR   b   
09DD   20 F6                  JR   nz,interpret3   ; if not loop
09DF   C1                     POP   bc   ; restore offset into TIB
09E0                INTERPRET5:      
09E0   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09E3   FE 20                  CP   $20   ; compare to space
09E5   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09E7   FE 00                  CP   $0   ; is it end of string? NUL end of string
09E9                             ; ???? NEEDED?
09E9   28 27                  JR   z,interpret8   
09EB   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09ED   28 10                  JR   z,interpret7   ; if anything else its macro/control
09EF                             ; macro
09EF                             ;  ld (vTIBPtr),bc
09EF                             ;  ld hl,ctrlCodes
09EF                             ;  add a,l			            ; look up key of macros
09EF                             ;  ld l,a
09EF                             ;  ld e,(hl)
09EF                             ;  ld a,e
09EF                             ;  or a
09EF                             ;  jr z,macro1
09EF                             ;  ld d,msb(macros)
09EF                             ;  push de
09EF                             ;  call call		            ; monty exec_ operation and jump to it
09EF                             ;  db DC1,0
09EF                             ; macro1:
09EF                             ;  ld bc,(vTIBPtr)
09EF   18 DC                  JR   interpret2   
09F1                INTERPRET6:      
09F1   21 00 3E               LD   hl,TIB   
09F4   09                     ADD   hl,bc   
09F5   77                     LD   (hl),a   ; store the character in textbuf
09F6   03                     INC   bc   
09F7   CD 85 00               CALL   putchar   ; echo character to screen
09FA   CD 46 09               CALL   nesting   
09FD   18 E1                  JR   interpret5   ; wait for next character
09FF                INTERPRET7:      
09FF   21 00 3E               LD   hl,TIB   
0A02   09                     ADD   hl,bc   
0A03   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A05   23                     INC   hl   
0A06   36 0A                  LD   (hl),"\n"   
0A08   23                     INC   hl   
0A09   03                     INC   bc   
0A0A   03                     INC   bc   
0A0B   CD 81 09               CALL   crlf   ; echo character to screen
0A0E   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A0F   B7                     OR   a   
0A10   20 CE                  JR   nz,interpret5   
0A12                INTERPRET8:      
0A12   ED 43 E8 3D            LD   (vTIBPtr),bc   
0A16   01 00 3E               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A19                             ; we pressed enter
0A19   0B                     DEC   bc   
0A1A                NEXT:        
0A1A   03                     INC   bc   ; Increment the IP
0A1B   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A1C   FE 20                  CP   " "   ; whitespace?
0A1E   28 FA                  JR   z,next   ; space? ignore
0A20   38 07                  JR   c,next1   
0A22   6F                     LD   l,a   ; index into table
0A23   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A25   6E                     LD   l,(hl)   ; get low jump address
0A26   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A28   E9                     JP   (hl)   ; Jump to routine
0A29                NEXT1:       
0A29   FE 00                  CP   NUL   ; end of input string?
0A2B   28 03                  JR   z,exit_   
0A2D   C3 C3 09               JP   interpret   ; no, other whitespace, macros?
0A30                EXIT_:       
0A30   60 69                  LD   hl,bc   
0A32   E9                     JP   (hl)   
0A33                ERROR:       
0A33   CD 88 09               CALL   printStr   
0A36   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A3D   CD D6 08               CALL   prtdec   
0A40   C3 C3 09               JP   interpret   
0A43                          ALIGN   $100   
0B00                TESTSSTART:      
0B00                          ;*Macro unroll:  test "3i= { i i. i--  i\\x \\z} \\r + +", 6
0B00   31 80 3C               LD   SP,STACK   
0B03   CD 8F 09               CALL   init   
0B06   CD 34 3B               CALL   execStr   
0B09   33 69 3D 20 7B 20 69 20 69 2E 20 69 2D 2D 20 20 69 5C 78 20 5C 7A 7D 20 5C 72 20 2B 20 2B 00 .CSTR   "3i= { i i. i--  i\\x \\z} \\r + +"   
0B28                          ;*Macro unroll:  expect "3i= { i i. i--  i\\x \\z} \\r + +",6
0B28   E1                     POP   HL   
0B29   E5                     PUSH   HL   
0B2A   11 06 00               LD   DE,6   
0B2D   B7                     OR   A   
0B2E   ED 52                  SBC   HL,DE   
0B30   7D                     LD   A,L   
0B31   B4                     OR   H   
0B32   28 69                  JR   Z,expectM_0_2125S43   
0B34   CD 88 09               CALL   printStr   
0B37   43 6F 64 65 3A 20 33 69 3D 20 7B 20 69 20 69 2E 20 69 2D 2D 20 20 69 5C 78 20 5C 7A 7D 20 5C 72 20 2B 20 2B 00 .CSTR   "Code: ","3i= { i i. i--  i\\x \\z} \\r + +"   
0B5C   CD 88 09               CALL   printStr   
0B5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B6E   21 06 00               LD   HL,6   
0B71   CD D6 08               CALL   prtdec   
0B74   CD 88 09               CALL   printStr   
0B77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B84   E1                     POP   hl   
0B85   E5                     PUSH   hl   
0B86   CD D6 08               CALL   prtdec   
0B89   E1                     POP   hl   
0B8A   CD 88 09               CALL   printStr   
0B8D   20 28 23 00            .CSTR   " (#"   
0B91   CD 1E 09               CALL   prthex   
0B94   CD 88 09               CALL   printStr   
0B97   29 0D 0A 00            .CSTR   ")\r\n"   
0B9B   76                     HALT      
0B9C   00                     .CSTR      
0B9D                EXPECTM_0_2125S43:      
0B9D   E1                     POP   HL   
0B9E                             ; test "3i= (b) {i i. i--  i\\x $b} \\f \\r", 4
0B9E                             ; test "5 (i){ $i } \\f :", 5
0B9E                             ; test "1 x= { x \\x x-- } \\r + ", $4002
0B9E                             ; test "1 i= { i i \\x i-- } \\r", $4002
0B9E                             ; call printStr
0B9E                             ; .cstr "Done!"
0B9E                             ; HALT
0B9E                             ; 
0B9E                          ;*Macro unroll:  test "\\F", false
0B9E   31 80 3C               LD   SP,STACK   
0BA1   CD 8F 09               CALL   init   
0BA4   CD 34 3B               CALL   execStr   
0BA7   5C 46 00               .CSTR   "\\F"   
0BAA                          ;*Macro unroll:  expect "\\F",false
0BAA   E1                     POP   HL   
0BAB   E5                     PUSH   HL   
0BAC   11 00 00               LD   DE,false   
0BAF   B7                     OR   A   
0BB0   ED 52                  SBC   HL,DE   
0BB2   7D                     LD   A,L   
0BB3   B4                     OR   H   
0BB4   28 4D                  JR   Z,expectM_0_2134S43   
0BB6   CD 88 09               CALL   printStr   
0BB9   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
0BC2   CD 88 09               CALL   printStr   
0BC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0BD4   21 00 00               LD   HL,false   
0BD7   CD D6 08               CALL   prtdec   
0BDA   CD 88 09               CALL   printStr   
0BDD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BEA   E1                     POP   hl   
0BEB   E5                     PUSH   hl   
0BEC   CD D6 08               CALL   prtdec   
0BEF   E1                     POP   hl   
0BF0   CD 88 09               CALL   printStr   
0BF3   20 28 23 00            .CSTR   " (#"   
0BF7   CD 1E 09               CALL   prthex   
0BFA   CD 88 09               CALL   printStr   
0BFD   29 0D 0A 00            .CSTR   ")\r\n"   
0C01   76                     HALT      
0C02   00                     .CSTR      
0C03                EXPECTM_0_2134S43:      
0C03   E1                     POP   HL   
0C04                          ;*Macro unroll:  test "\\T", true
0C04   31 80 3C               LD   SP,STACK   
0C07   CD 8F 09               CALL   init   
0C0A   CD 34 3B               CALL   execStr   
0C0D   5C 54 00               .CSTR   "\\T"   
0C10                          ;*Macro unroll:  expect "\\T",true
0C10   E1                     POP   HL   
0C11   E5                     PUSH   HL   
0C12   11 FF FF               LD   DE,true   
0C15   B7                     OR   A   
0C16   ED 52                  SBC   HL,DE   
0C18   7D                     LD   A,L   
0C19   B4                     OR   H   
0C1A   28 4D                  JR   Z,expectM_0_2135S43   
0C1C   CD 88 09               CALL   printStr   
0C1F   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
0C28   CD 88 09               CALL   printStr   
0C2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C3A   21 FF FF               LD   HL,true   
0C3D   CD D6 08               CALL   prtdec   
0C40   CD 88 09               CALL   printStr   
0C43   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C50   E1                     POP   hl   
0C51   E5                     PUSH   hl   
0C52   CD D6 08               CALL   prtdec   
0C55   E1                     POP   hl   
0C56   CD 88 09               CALL   printStr   
0C59   20 28 23 00            .CSTR   " (#"   
0C5D   CD 1E 09               CALL   prthex   
0C60   CD 88 09               CALL   printStr   
0C63   29 0D 0A 00            .CSTR   ")\r\n"   
0C67   76                     HALT      
0C68   00                     .CSTR      
0C69                EXPECTM_0_2135S43:      
0C69   E1                     POP   HL   
0C6A                          ;*Macro unroll:  test "1", 1
0C6A   31 80 3C               LD   SP,STACK   
0C6D   CD 8F 09               CALL   init   
0C70   CD 34 3B               CALL   execStr   
0C73   31 00                  .CSTR   "1"   
0C75                          ;*Macro unroll:  expect "1",1
0C75   E1                     POP   HL   
0C76   E5                     PUSH   HL   
0C77   11 01 00               LD   DE,1   
0C7A   B7                     OR   A   
0C7B   ED 52                  SBC   HL,DE   
0C7D   7D                     LD   A,L   
0C7E   B4                     OR   H   
0C7F   28 4C                  JR   Z,expectM_0_2136S43   
0C81   CD 88 09               CALL   printStr   
0C84   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0C8C   CD 88 09               CALL   printStr   
0C8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C9E   21 01 00               LD   HL,1   
0CA1   CD D6 08               CALL   prtdec   
0CA4   CD 88 09               CALL   printStr   
0CA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CB4   E1                     POP   hl   
0CB5   E5                     PUSH   hl   
0CB6   CD D6 08               CALL   prtdec   
0CB9   E1                     POP   hl   
0CBA   CD 88 09               CALL   printStr   
0CBD   20 28 23 00            .CSTR   " (#"   
0CC1   CD 1E 09               CALL   prthex   
0CC4   CD 88 09               CALL   printStr   
0CC7   29 0D 0A 00            .CSTR   ")\r\n"   
0CCB   76                     HALT      
0CCC   00                     .CSTR      
0CCD                EXPECTM_0_2136S43:      
0CCD   E1                     POP   HL   
0CCE                          ;*Macro unroll:  test "2", 2
0CCE   31 80 3C               LD   SP,STACK   
0CD1   CD 8F 09               CALL   init   
0CD4   CD 34 3B               CALL   execStr   
0CD7   32 00                  .CSTR   "2"   
0CD9                          ;*Macro unroll:  expect "2",2
0CD9   E1                     POP   HL   
0CDA   E5                     PUSH   HL   
0CDB   11 02 00               LD   DE,2   
0CDE   B7                     OR   A   
0CDF   ED 52                  SBC   HL,DE   
0CE1   7D                     LD   A,L   
0CE2   B4                     OR   H   
0CE3   28 4C                  JR   Z,expectM_0_2137S43   
0CE5   CD 88 09               CALL   printStr   
0CE8   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0CF0   CD 88 09               CALL   printStr   
0CF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D02   21 02 00               LD   HL,2   
0D05   CD D6 08               CALL   prtdec   
0D08   CD 88 09               CALL   printStr   
0D0B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D18   E1                     POP   hl   
0D19   E5                     PUSH   hl   
0D1A   CD D6 08               CALL   prtdec   
0D1D   E1                     POP   hl   
0D1E   CD 88 09               CALL   printStr   
0D21   20 28 23 00            .CSTR   " (#"   
0D25   CD 1E 09               CALL   prthex   
0D28   CD 88 09               CALL   printStr   
0D2B   29 0D 0A 00            .CSTR   ")\r\n"   
0D2F   76                     HALT      
0D30   00                     .CSTR      
0D31                EXPECTM_0_2137S43:      
0D31   E1                     POP   HL   
0D32                          ;*Macro unroll:  test "1", 1
0D32   31 80 3C               LD   SP,STACK   
0D35   CD 8F 09               CALL   init   
0D38   CD 34 3B               CALL   execStr   
0D3B   31 00                  .CSTR   "1"   
0D3D                          ;*Macro unroll:  expect "1",1
0D3D   E1                     POP   HL   
0D3E   E5                     PUSH   HL   
0D3F   11 01 00               LD   DE,1   
0D42   B7                     OR   A   
0D43   ED 52                  SBC   HL,DE   
0D45   7D                     LD   A,L   
0D46   B4                     OR   H   
0D47   28 4C                  JR   Z,expectM_0_2138S43   
0D49   CD 88 09               CALL   printStr   
0D4C   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0D54   CD 88 09               CALL   printStr   
0D57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D66   21 01 00               LD   HL,1   
0D69   CD D6 08               CALL   prtdec   
0D6C   CD 88 09               CALL   printStr   
0D6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D7C   E1                     POP   hl   
0D7D   E5                     PUSH   hl   
0D7E   CD D6 08               CALL   prtdec   
0D81   E1                     POP   hl   
0D82   CD 88 09               CALL   printStr   
0D85   20 28 23 00            .CSTR   " (#"   
0D89   CD 1E 09               CALL   prthex   
0D8C   CD 88 09               CALL   printStr   
0D8F   29 0D 0A 00            .CSTR   ")\r\n"   
0D93   76                     HALT      
0D94   00                     .CSTR      
0D95                EXPECTM_0_2138S43:      
0D95   E1                     POP   HL   
0D96                          ;*Macro unroll:  test "0", 0
0D96   31 80 3C               LD   SP,STACK   
0D99   CD 8F 09               CALL   init   
0D9C   CD 34 3B               CALL   execStr   
0D9F   30 00                  .CSTR   "0"   
0DA1                          ;*Macro unroll:  expect "0",0
0DA1   E1                     POP   HL   
0DA2   E5                     PUSH   HL   
0DA3   11 00 00               LD   DE,0   
0DA6   B7                     OR   A   
0DA7   ED 52                  SBC   HL,DE   
0DA9   7D                     LD   A,L   
0DAA   B4                     OR   H   
0DAB   28 4C                  JR   Z,expectM_0_2139S43   
0DAD   CD 88 09               CALL   printStr   
0DB0   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0DB8   CD 88 09               CALL   printStr   
0DBB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DCA   21 00 00               LD   HL,0   
0DCD   CD D6 08               CALL   prtdec   
0DD0   CD 88 09               CALL   printStr   
0DD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DE0   E1                     POP   hl   
0DE1   E5                     PUSH   hl   
0DE2   CD D6 08               CALL   prtdec   
0DE5   E1                     POP   hl   
0DE6   CD 88 09               CALL   printStr   
0DE9   20 28 23 00            .CSTR   " (#"   
0DED   CD 1E 09               CALL   prthex   
0DF0   CD 88 09               CALL   printStr   
0DF3   29 0D 0A 00            .CSTR   ")\r\n"   
0DF7   76                     HALT      
0DF8   00                     .CSTR      
0DF9                EXPECTM_0_2139S43:      
0DF9   E1                     POP   HL   
0DFA                          ;*Macro unroll:  test "10", 10
0DFA   31 80 3C               LD   SP,STACK   
0DFD   CD 8F 09               CALL   init   
0E00   CD 34 3B               CALL   execStr   
0E03   31 30 00               .CSTR   "10"   
0E06                          ;*Macro unroll:  expect "10",10
0E06   E1                     POP   HL   
0E07   E5                     PUSH   HL   
0E08   11 0A 00               LD   DE,10   
0E0B   B7                     OR   A   
0E0C   ED 52                  SBC   HL,DE   
0E0E   7D                     LD   A,L   
0E0F   B4                     OR   H   
0E10   28 4D                  JR   Z,expectM_0_2140S43   
0E12   CD 88 09               CALL   printStr   
0E15   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0E1E   CD 88 09               CALL   printStr   
0E21   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E30   21 0A 00               LD   HL,10   
0E33   CD D6 08               CALL   prtdec   
0E36   CD 88 09               CALL   printStr   
0E39   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E46   E1                     POP   hl   
0E47   E5                     PUSH   hl   
0E48   CD D6 08               CALL   prtdec   
0E4B   E1                     POP   hl   
0E4C   CD 88 09               CALL   printStr   
0E4F   20 28 23 00            .CSTR   " (#"   
0E53   CD 1E 09               CALL   prthex   
0E56   CD 88 09               CALL   printStr   
0E59   29 0D 0A 00            .CSTR   ")\r\n"   
0E5D   76                     HALT      
0E5E   00                     .CSTR      
0E5F                EXPECTM_0_2140S43:      
0E5F   E1                     POP   HL   
0E60                          ;*Macro unroll:  test "123", 123
0E60   31 80 3C               LD   SP,STACK   
0E63   CD 8F 09               CALL   init   
0E66   CD 34 3B               CALL   execStr   
0E69   31 32 33 00            .CSTR   "123"   
0E6D                          ;*Macro unroll:  expect "123",123
0E6D   E1                     POP   HL   
0E6E   E5                     PUSH   HL   
0E6F   11 7B 00               LD   DE,123   
0E72   B7                     OR   A   
0E73   ED 52                  SBC   HL,DE   
0E75   7D                     LD   A,L   
0E76   B4                     OR   H   
0E77   28 4E                  JR   Z,expectM_0_2141S43   
0E79   CD 88 09               CALL   printStr   
0E7C   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0E86   CD 88 09               CALL   printStr   
0E89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E98   21 7B 00               LD   HL,123   
0E9B   CD D6 08               CALL   prtdec   
0E9E   CD 88 09               CALL   printStr   
0EA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EAE   E1                     POP   hl   
0EAF   E5                     PUSH   hl   
0EB0   CD D6 08               CALL   prtdec   
0EB3   E1                     POP   hl   
0EB4   CD 88 09               CALL   printStr   
0EB7   20 28 23 00            .CSTR   " (#"   
0EBB   CD 1E 09               CALL   prthex   
0EBE   CD 88 09               CALL   printStr   
0EC1   29 0D 0A 00            .CSTR   ")\r\n"   
0EC5   76                     HALT      
0EC6   00                     .CSTR      
0EC7                EXPECTM_0_2141S43:      
0EC7   E1                     POP   HL   
0EC8                          ;*Macro unroll:  test "-1",-1
0EC8   31 80 3C               LD   SP,STACK   
0ECB   CD 8F 09               CALL   init   
0ECE   CD 34 3B               CALL   execStr   
0ED1   2D 31 00               .CSTR   "-1"   
0ED4                          ;*Macro unroll:  expect "-1",-1
0ED4   E1                     POP   HL   
0ED5   E5                     PUSH   HL   
0ED6   11 FF FF               LD   DE,-1   
0ED9   B7                     OR   A   
0EDA   ED 52                  SBC   HL,DE   
0EDC   7D                     LD   A,L   
0EDD   B4                     OR   H   
0EDE   28 4D                  JR   Z,expectM_0_2142S43   
0EE0   CD 88 09               CALL   printStr   
0EE3   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0EEC   CD 88 09               CALL   printStr   
0EEF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EFE   21 FF FF               LD   HL,-1   
0F01   CD D6 08               CALL   prtdec   
0F04   CD 88 09               CALL   printStr   
0F07   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F14   E1                     POP   hl   
0F15   E5                     PUSH   hl   
0F16   CD D6 08               CALL   prtdec   
0F19   E1                     POP   hl   
0F1A   CD 88 09               CALL   printStr   
0F1D   20 28 23 00            .CSTR   " (#"   
0F21   CD 1E 09               CALL   prthex   
0F24   CD 88 09               CALL   printStr   
0F27   29 0D 0A 00            .CSTR   ")\r\n"   
0F2B   76                     HALT      
0F2C   00                     .CSTR      
0F2D                EXPECTM_0_2142S43:      
0F2D   E1                     POP   HL   
0F2E                          ;*Macro unroll:  test "''", 0
0F2E   31 80 3C               LD   SP,STACK   
0F31   CD 8F 09               CALL   init   
0F34   CD 34 3B               CALL   execStr   
0F37   27 27 00               .CSTR   "''"   
0F3A                          ;*Macro unroll:  expect "''",0
0F3A   E1                     POP   HL   
0F3B   E5                     PUSH   HL   
0F3C   11 00 00               LD   DE,0   
0F3F   B7                     OR   A   
0F40   ED 52                  SBC   HL,DE   
0F42   7D                     LD   A,L   
0F43   B4                     OR   H   
0F44   28 4D                  JR   Z,expectM_0_2143S43   
0F46   CD 88 09               CALL   printStr   
0F49   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0F52   CD 88 09               CALL   printStr   
0F55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F64   21 00 00               LD   HL,0   
0F67   CD D6 08               CALL   prtdec   
0F6A   CD 88 09               CALL   printStr   
0F6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F7A   E1                     POP   hl   
0F7B   E5                     PUSH   hl   
0F7C   CD D6 08               CALL   prtdec   
0F7F   E1                     POP   hl   
0F80   CD 88 09               CALL   printStr   
0F83   20 28 23 00            .CSTR   " (#"   
0F87   CD 1E 09               CALL   prthex   
0F8A   CD 88 09               CALL   printStr   
0F8D   29 0D 0A 00            .CSTR   ")\r\n"   
0F91   76                     HALT      
0F92   00                     .CSTR      
0F93                EXPECTM_0_2143S43:      
0F93   E1                     POP   HL   
0F94                          ;*Macro unroll:  test "'a'", $61
0F94   31 80 3C               LD   SP,STACK   
0F97   CD 8F 09               CALL   init   
0F9A   CD 34 3B               CALL   execStr   
0F9D   27 61 27 00            .CSTR   "'a'"   
0FA1                          ;*Macro unroll:  expect "'a'",$61
0FA1   E1                     POP   HL   
0FA2   E5                     PUSH   HL   
0FA3   11 61 00               LD   DE,$61   
0FA6   B7                     OR   A   
0FA7   ED 52                  SBC   HL,DE   
0FA9   7D                     LD   A,L   
0FAA   B4                     OR   H   
0FAB   28 4E                  JR   Z,expectM_0_2144S43   
0FAD   CD 88 09               CALL   printStr   
0FB0   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0FBA   CD 88 09               CALL   printStr   
0FBD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FCC   21 61 00               LD   HL,$61   
0FCF   CD D6 08               CALL   prtdec   
0FD2   CD 88 09               CALL   printStr   
0FD5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FE2   E1                     POP   hl   
0FE3   E5                     PUSH   hl   
0FE4   CD D6 08               CALL   prtdec   
0FE7   E1                     POP   hl   
0FE8   CD 88 09               CALL   printStr   
0FEB   20 28 23 00            .CSTR   " (#"   
0FEF   CD 1E 09               CALL   prthex   
0FF2   CD 88 09               CALL   printStr   
0FF5   29 0D 0A 00            .CSTR   ")\r\n"   
0FF9   76                     HALT      
0FFA   00                     .CSTR      
0FFB                EXPECTM_0_2144S43:      
0FFB   E1                     POP   HL   
0FFC                          ;*Macro unroll:  test "'\\''", $27
0FFC   31 80 3C               LD   SP,STACK   
0FFF   CD 8F 09               CALL   init   
1002   CD 34 3B               CALL   execStr   
1005   27 5C 27 27 00         .CSTR   "'\\''"   
100A                          ;*Macro unroll:  expect "'\\''",$27
100A   E1                     POP   HL   
100B   E5                     PUSH   HL   
100C   11 27 00               LD   DE,$27   
100F   B7                     OR   A   
1010   ED 52                  SBC   HL,DE   
1012   7D                     LD   A,L   
1013   B4                     OR   H   
1014   28 4F                  JR   Z,expectM_0_2145S43   
1016   CD 88 09               CALL   printStr   
1019   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1024   CD 88 09               CALL   printStr   
1027   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1036   21 27 00               LD   HL,$27   
1039   CD D6 08               CALL   prtdec   
103C   CD 88 09               CALL   printStr   
103F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
104C   E1                     POP   hl   
104D   E5                     PUSH   hl   
104E   CD D6 08               CALL   prtdec   
1051   E1                     POP   hl   
1052   CD 88 09               CALL   printStr   
1055   20 28 23 00            .CSTR   " (#"   
1059   CD 1E 09               CALL   prthex   
105C   CD 88 09               CALL   printStr   
105F   29 0D 0A 00            .CSTR   ")\r\n"   
1063   76                     HALT      
1064   00                     .CSTR      
1065                EXPECTM_0_2145S43:      
1065   E1                     POP   HL   
1066                          ;*Macro unroll:  test "#10", $10
1066   31 80 3C               LD   SP,STACK   
1069   CD 8F 09               CALL   init   
106C   CD 34 3B               CALL   execStr   
106F   23 31 30 00            .CSTR   "#10"   
1073                          ;*Macro unroll:  expect "#10",$10
1073   E1                     POP   HL   
1074   E5                     PUSH   HL   
1075   11 10 00               LD   DE,$10   
1078   B7                     OR   A   
1079   ED 52                  SBC   HL,DE   
107B   7D                     LD   A,L   
107C   B4                     OR   H   
107D   28 4E                  JR   Z,expectM_0_2146S43   
107F   CD 88 09               CALL   printStr   
1082   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
108C   CD 88 09               CALL   printStr   
108F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
109E   21 10 00               LD   HL,$10   
10A1   CD D6 08               CALL   prtdec   
10A4   CD 88 09               CALL   printStr   
10A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10B4   E1                     POP   hl   
10B5   E5                     PUSH   hl   
10B6   CD D6 08               CALL   prtdec   
10B9   E1                     POP   hl   
10BA   CD 88 09               CALL   printStr   
10BD   20 28 23 00            .CSTR   " (#"   
10C1   CD 1E 09               CALL   prthex   
10C4   CD 88 09               CALL   printStr   
10C7   29 0D 0A 00            .CSTR   ")\r\n"   
10CB   76                     HALT      
10CC   00                     .CSTR      
10CD                EXPECTM_0_2146S43:      
10CD   E1                     POP   HL   
10CE                          ;*Macro unroll:  test "#FF", $FF
10CE   31 80 3C               LD   SP,STACK   
10D1   CD 8F 09               CALL   init   
10D4   CD 34 3B               CALL   execStr   
10D7   23 46 46 00            .CSTR   "#FF"   
10DB                          ;*Macro unroll:  expect "#FF",$FF
10DB   E1                     POP   HL   
10DC   E5                     PUSH   HL   
10DD   11 FF 00               LD   DE,$FF   
10E0   B7                     OR   A   
10E1   ED 52                  SBC   HL,DE   
10E3   7D                     LD   A,L   
10E4   B4                     OR   H   
10E5   28 4E                  JR   Z,expectM_0_2147S43   
10E7   CD 88 09               CALL   printStr   
10EA   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
10F4   CD 88 09               CALL   printStr   
10F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1106   21 FF 00               LD   HL,$FF   
1109   CD D6 08               CALL   prtdec   
110C   CD 88 09               CALL   printStr   
110F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
111C   E1                     POP   hl   
111D   E5                     PUSH   hl   
111E   CD D6 08               CALL   prtdec   
1121   E1                     POP   hl   
1122   CD 88 09               CALL   printStr   
1125   20 28 23 00            .CSTR   " (#"   
1129   CD 1E 09               CALL   prthex   
112C   CD 88 09               CALL   printStr   
112F   29 0D 0A 00            .CSTR   ")\r\n"   
1133   76                     HALT      
1134   00                     .CSTR      
1135                EXPECTM_0_2147S43:      
1135   E1                     POP   HL   
1136                          ;*Macro unroll:  test "-1 2 +",1
1136   31 80 3C               LD   SP,STACK   
1139   CD 8F 09               CALL   init   
113C   CD 34 3B               CALL   execStr   
113F   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
1146                          ;*Macro unroll:  expect "-1 2 +",1
1146   E1                     POP   HL   
1147   E5                     PUSH   HL   
1148   11 01 00               LD   DE,1   
114B   B7                     OR   A   
114C   ED 52                  SBC   HL,DE   
114E   7D                     LD   A,L   
114F   B4                     OR   H   
1150   28 51                  JR   Z,expectM_0_2148S43   
1152   CD 88 09               CALL   printStr   
1155   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1162   CD 88 09               CALL   printStr   
1165   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1174   21 01 00               LD   HL,1   
1177   CD D6 08               CALL   prtdec   
117A   CD 88 09               CALL   printStr   
117D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
118A   E1                     POP   hl   
118B   E5                     PUSH   hl   
118C   CD D6 08               CALL   prtdec   
118F   E1                     POP   hl   
1190   CD 88 09               CALL   printStr   
1193   20 28 23 00            .CSTR   " (#"   
1197   CD 1E 09               CALL   prthex   
119A   CD 88 09               CALL   printStr   
119D   29 0D 0A 00            .CSTR   ")\r\n"   
11A1   76                     HALT      
11A2   00                     .CSTR      
11A3                EXPECTM_0_2148S43:      
11A3   E1                     POP   HL   
11A4                          ;*Macro unroll:  test "-1 1 +",0
11A4   31 80 3C               LD   SP,STACK   
11A7   CD 8F 09               CALL   init   
11AA   CD 34 3B               CALL   execStr   
11AD   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
11B4                          ;*Macro unroll:  expect "-1 1 +",0
11B4   E1                     POP   HL   
11B5   E5                     PUSH   HL   
11B6   11 00 00               LD   DE,0   
11B9   B7                     OR   A   
11BA   ED 52                  SBC   HL,DE   
11BC   7D                     LD   A,L   
11BD   B4                     OR   H   
11BE   28 51                  JR   Z,expectM_0_2149S43   
11C0   CD 88 09               CALL   printStr   
11C3   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
11D0   CD 88 09               CALL   printStr   
11D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11E2   21 00 00               LD   HL,0   
11E5   CD D6 08               CALL   prtdec   
11E8   CD 88 09               CALL   printStr   
11EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11F8   E1                     POP   hl   
11F9   E5                     PUSH   hl   
11FA   CD D6 08               CALL   prtdec   
11FD   E1                     POP   hl   
11FE   CD 88 09               CALL   printStr   
1201   20 28 23 00            .CSTR   " (#"   
1205   CD 1E 09               CALL   prthex   
1208   CD 88 09               CALL   printStr   
120B   29 0D 0A 00            .CSTR   ")\r\n"   
120F   76                     HALT      
1210   00                     .CSTR      
1211                EXPECTM_0_2149S43:      
1211   E1                     POP   HL   
1212                          ;*Macro unroll:  test "1 2 +", 3
1212   31 80 3C               LD   SP,STACK   
1215   CD 8F 09               CALL   init   
1218   CD 34 3B               CALL   execStr   
121B   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1221                          ;*Macro unroll:  expect "1 2 +",3
1221   E1                     POP   HL   
1222   E5                     PUSH   HL   
1223   11 03 00               LD   DE,3   
1226   B7                     OR   A   
1227   ED 52                  SBC   HL,DE   
1229   7D                     LD   A,L   
122A   B4                     OR   H   
122B   28 50                  JR   Z,expectM_0_2150S43   
122D   CD 88 09               CALL   printStr   
1230   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
123C   CD 88 09               CALL   printStr   
123F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
124E   21 03 00               LD   HL,3   
1251   CD D6 08               CALL   prtdec   
1254   CD 88 09               CALL   printStr   
1257   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1264   E1                     POP   hl   
1265   E5                     PUSH   hl   
1266   CD D6 08               CALL   prtdec   
1269   E1                     POP   hl   
126A   CD 88 09               CALL   printStr   
126D   20 28 23 00            .CSTR   " (#"   
1271   CD 1E 09               CALL   prthex   
1274   CD 88 09               CALL   printStr   
1277   29 0D 0A 00            .CSTR   ")\r\n"   
127B   76                     HALT      
127C   00                     .CSTR      
127D                EXPECTM_0_2150S43:      
127D   E1                     POP   HL   
127E                          ;*Macro unroll:  test "4 1 2 +", 3
127E   31 80 3C               LD   SP,STACK   
1281   CD 8F 09               CALL   init   
1284   CD 34 3B               CALL   execStr   
1287   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
128F                          ;*Macro unroll:  expect "4 1 2 +",3
128F   E1                     POP   HL   
1290   E5                     PUSH   HL   
1291   11 03 00               LD   DE,3   
1294   B7                     OR   A   
1295   ED 52                  SBC   HL,DE   
1297   7D                     LD   A,L   
1298   B4                     OR   H   
1299   28 52                  JR   Z,expectM_0_2151S43   
129B   CD 88 09               CALL   printStr   
129E   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
12AC   CD 88 09               CALL   printStr   
12AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12BE   21 03 00               LD   HL,3   
12C1   CD D6 08               CALL   prtdec   
12C4   CD 88 09               CALL   printStr   
12C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12D4   E1                     POP   hl   
12D5   E5                     PUSH   hl   
12D6   CD D6 08               CALL   prtdec   
12D9   E1                     POP   hl   
12DA   CD 88 09               CALL   printStr   
12DD   20 28 23 00            .CSTR   " (#"   
12E1   CD 1E 09               CALL   prthex   
12E4   CD 88 09               CALL   printStr   
12E7   29 0D 0A 00            .CSTR   ")\r\n"   
12EB   76                     HALT      
12EC   00                     .CSTR      
12ED                EXPECTM_0_2151S43:      
12ED   E1                     POP   HL   
12EE                          ;*Macro unroll:  test "123 456 +", 123+456
12EE   31 80 3C               LD   SP,STACK   
12F1   CD 8F 09               CALL   init   
12F4   CD 34 3B               CALL   execStr   
12F7   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1301                          ;*Macro unroll:  expect "123 456 +",123+456
1301   E1                     POP   HL   
1302   E5                     PUSH   HL   
1303   11 43 02               LD   DE,123+456   
1306   B7                     OR   A   
1307   ED 52                  SBC   HL,DE   
1309   7D                     LD   A,L   
130A   B4                     OR   H   
130B   28 54                  JR   Z,expectM_0_2152S43   
130D   CD 88 09               CALL   printStr   
1310   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1320   CD 88 09               CALL   printStr   
1323   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1332   21 43 02               LD   HL,123+456   
1335   CD D6 08               CALL   prtdec   
1338   CD 88 09               CALL   printStr   
133B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1348   E1                     POP   hl   
1349   E5                     PUSH   hl   
134A   CD D6 08               CALL   prtdec   
134D   E1                     POP   hl   
134E   CD 88 09               CALL   printStr   
1351   20 28 23 00            .CSTR   " (#"   
1355   CD 1E 09               CALL   prthex   
1358   CD 88 09               CALL   printStr   
135B   29 0D 0A 00            .CSTR   ")\r\n"   
135F   76                     HALT      
1360   00                     .CSTR      
1361                EXPECTM_0_2152S43:      
1361   E1                     POP   HL   
1362                          ;*Macro unroll:  test "64 128 +", 64+128
1362   31 80 3C               LD   SP,STACK   
1365   CD 8F 09               CALL   init   
1368   CD 34 3B               CALL   execStr   
136B   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
1374                          ;*Macro unroll:  expect "64 128 +",64+128
1374   E1                     POP   HL   
1375   E5                     PUSH   HL   
1376   11 C0 00               LD   DE,64+128   
1379   B7                     OR   A   
137A   ED 52                  SBC   HL,DE   
137C   7D                     LD   A,L   
137D   B4                     OR   H   
137E   28 53                  JR   Z,expectM_0_2153S43   
1380   CD 88 09               CALL   printStr   
1383   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1392   CD 88 09               CALL   printStr   
1395   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13A4   21 C0 00               LD   HL,64+128   
13A7   CD D6 08               CALL   prtdec   
13AA   CD 88 09               CALL   printStr   
13AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13BA   E1                     POP   hl   
13BB   E5                     PUSH   hl   
13BC   CD D6 08               CALL   prtdec   
13BF   E1                     POP   hl   
13C0   CD 88 09               CALL   printStr   
13C3   20 28 23 00            .CSTR   " (#"   
13C7   CD 1E 09               CALL   prthex   
13CA   CD 88 09               CALL   printStr   
13CD   29 0D 0A 00            .CSTR   ")\r\n"   
13D1   76                     HALT      
13D2   00                     .CSTR      
13D3                EXPECTM_0_2153S43:      
13D3   E1                     POP   HL   
13D4                          ;*Macro unroll:  test "1 2 +", 3
13D4   31 80 3C               LD   SP,STACK   
13D7   CD 8F 09               CALL   init   
13DA   CD 34 3B               CALL   execStr   
13DD   31 20 32 20 2B 00      .CSTR   "1 2 +"   
13E3                          ;*Macro unroll:  expect "1 2 +",3
13E3   E1                     POP   HL   
13E4   E5                     PUSH   HL   
13E5   11 03 00               LD   DE,3   
13E8   B7                     OR   A   
13E9   ED 52                  SBC   HL,DE   
13EB   7D                     LD   A,L   
13EC   B4                     OR   H   
13ED   28 50                  JR   Z,expectM_0_2154S43   
13EF   CD 88 09               CALL   printStr   
13F2   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
13FE   CD 88 09               CALL   printStr   
1401   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1410   21 03 00               LD   HL,3   
1413   CD D6 08               CALL   prtdec   
1416   CD 88 09               CALL   printStr   
1419   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1426   E1                     POP   hl   
1427   E5                     PUSH   hl   
1428   CD D6 08               CALL   prtdec   
142B   E1                     POP   hl   
142C   CD 88 09               CALL   printStr   
142F   20 28 23 00            .CSTR   " (#"   
1433   CD 1E 09               CALL   prthex   
1436   CD 88 09               CALL   printStr   
1439   29 0D 0A 00            .CSTR   ")\r\n"   
143D   76                     HALT      
143E   00                     .CSTR      
143F                EXPECTM_0_2154S43:      
143F   E1                     POP   HL   
1440                          ;*Macro unroll:  test "1 a= a++ a",2
1440   31 80 3C               LD   SP,STACK   
1443   CD 8F 09               CALL   init   
1446   CD 34 3B               CALL   execStr   
1449   31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1 a= a++ a"   
1454                          ;*Macro unroll:  expect "1 a= a++ a",2
1454   E1                     POP   HL   
1455   E5                     PUSH   HL   
1456   11 02 00               LD   DE,2   
1459   B7                     OR   A   
145A   ED 52                  SBC   HL,DE   
145C   7D                     LD   A,L   
145D   B4                     OR   H   
145E   28 55                  JR   Z,expectM_0_2155S43   
1460   CD 88 09               CALL   printStr   
1463   43 6F 64 65 3A 20 31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1 a= a++ a"   
1474   CD 88 09               CALL   printStr   
1477   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1486   21 02 00               LD   HL,2   
1489   CD D6 08               CALL   prtdec   
148C   CD 88 09               CALL   printStr   
148F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
149C   E1                     POP   hl   
149D   E5                     PUSH   hl   
149E   CD D6 08               CALL   prtdec   
14A1   E1                     POP   hl   
14A2   CD 88 09               CALL   printStr   
14A5   20 28 23 00            .CSTR   " (#"   
14A9   CD 1E 09               CALL   prthex   
14AC   CD 88 09               CALL   printStr   
14AF   29 0D 0A 00            .CSTR   ")\r\n"   
14B3   76                     HALT      
14B4   00                     .CSTR      
14B5                EXPECTM_0_2155S43:      
14B5   E1                     POP   HL   
14B6                          ;*Macro unroll:  test "1 a= 2 a += a",3
14B6   31 80 3C               LD   SP,STACK   
14B9   CD 8F 09               CALL   init   
14BC   CD 34 3B               CALL   execStr   
14BF   31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "1 a= 2 a += a"   
14CD                          ;*Macro unroll:  expect "1 a= 2 a += a",3
14CD   E1                     POP   HL   
14CE   E5                     PUSH   HL   
14CF   11 03 00               LD   DE,3   
14D2   B7                     OR   A   
14D3   ED 52                  SBC   HL,DE   
14D5   7D                     LD   A,L   
14D6   B4                     OR   H   
14D7   28 58                  JR   Z,expectM_0_2156S43   
14D9   CD 88 09               CALL   printStr   
14DC   43 6F 64 65 3A 20 31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "Code: ","1 a= 2 a += a"   
14F0   CD 88 09               CALL   printStr   
14F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1502   21 03 00               LD   HL,3   
1505   CD D6 08               CALL   prtdec   
1508   CD 88 09               CALL   printStr   
150B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1518   E1                     POP   hl   
1519   E5                     PUSH   hl   
151A   CD D6 08               CALL   prtdec   
151D   E1                     POP   hl   
151E   CD 88 09               CALL   printStr   
1521   20 28 23 00            .CSTR   " (#"   
1525   CD 1E 09               CALL   prthex   
1528   CD 88 09               CALL   printStr   
152B   29 0D 0A 00            .CSTR   ")\r\n"   
152F   76                     HALT      
1530   00                     .CSTR      
1531                EXPECTM_0_2156S43:      
1531   E1                     POP   HL   
1532                          ;*Macro unroll:  test "-1 -1 -",0
1532   31 80 3C               LD   SP,STACK   
1535   CD 8F 09               CALL   init   
1538   CD 34 3B               CALL   execStr   
153B   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
1543                          ;*Macro unroll:  expect "-1 -1 -",0
1543   E1                     POP   HL   
1544   E5                     PUSH   HL   
1545   11 00 00               LD   DE,0   
1548   B7                     OR   A   
1549   ED 52                  SBC   HL,DE   
154B   7D                     LD   A,L   
154C   B4                     OR   H   
154D   28 52                  JR   Z,expectM_0_2157S43   
154F   CD 88 09               CALL   printStr   
1552   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1560   CD 88 09               CALL   printStr   
1563   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1572   21 00 00               LD   HL,0   
1575   CD D6 08               CALL   prtdec   
1578   CD 88 09               CALL   printStr   
157B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1588   E1                     POP   hl   
1589   E5                     PUSH   hl   
158A   CD D6 08               CALL   prtdec   
158D   E1                     POP   hl   
158E   CD 88 09               CALL   printStr   
1591   20 28 23 00            .CSTR   " (#"   
1595   CD 1E 09               CALL   prthex   
1598   CD 88 09               CALL   printStr   
159B   29 0D 0A 00            .CSTR   ")\r\n"   
159F   76                     HALT      
15A0   00                     .CSTR      
15A1                EXPECTM_0_2157S43:      
15A1   E1                     POP   HL   
15A2                          ;*Macro unroll:  test "5 3 -", 2
15A2   31 80 3C               LD   SP,STACK   
15A5   CD 8F 09               CALL   init   
15A8   CD 34 3B               CALL   execStr   
15AB   35 20 33 20 2D 00      .CSTR   "5 3 -"   
15B1                          ;*Macro unroll:  expect "5 3 -",2
15B1   E1                     POP   HL   
15B2   E5                     PUSH   HL   
15B3   11 02 00               LD   DE,2   
15B6   B7                     OR   A   
15B7   ED 52                  SBC   HL,DE   
15B9   7D                     LD   A,L   
15BA   B4                     OR   H   
15BB   28 50                  JR   Z,expectM_0_2158S43   
15BD   CD 88 09               CALL   printStr   
15C0   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
15CC   CD 88 09               CALL   printStr   
15CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15DE   21 02 00               LD   HL,2   
15E1   CD D6 08               CALL   prtdec   
15E4   CD 88 09               CALL   printStr   
15E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15F4   E1                     POP   hl   
15F5   E5                     PUSH   hl   
15F6   CD D6 08               CALL   prtdec   
15F9   E1                     POP   hl   
15FA   CD 88 09               CALL   printStr   
15FD   20 28 23 00            .CSTR   " (#"   
1601   CD 1E 09               CALL   prthex   
1604   CD 88 09               CALL   printStr   
1607   29 0D 0A 00            .CSTR   ")\r\n"   
160B   76                     HALT      
160C   00                     .CSTR      
160D                EXPECTM_0_2158S43:      
160D   E1                     POP   HL   
160E                          ;*Macro unroll:  test "2 1 -",1
160E   31 80 3C               LD   SP,STACK   
1611   CD 8F 09               CALL   init   
1614   CD 34 3B               CALL   execStr   
1617   32 20 31 20 2D 00      .CSTR   "2 1 -"   
161D                          ;*Macro unroll:  expect "2 1 -",1
161D   E1                     POP   HL   
161E   E5                     PUSH   HL   
161F   11 01 00               LD   DE,1   
1622   B7                     OR   A   
1623   ED 52                  SBC   HL,DE   
1625   7D                     LD   A,L   
1626   B4                     OR   H   
1627   28 50                  JR   Z,expectM_0_2159S43   
1629   CD 88 09               CALL   printStr   
162C   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1638   CD 88 09               CALL   printStr   
163B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
164A   21 01 00               LD   HL,1   
164D   CD D6 08               CALL   prtdec   
1650   CD 88 09               CALL   printStr   
1653   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1660   E1                     POP   hl   
1661   E5                     PUSH   hl   
1662   CD D6 08               CALL   prtdec   
1665   E1                     POP   hl   
1666   CD 88 09               CALL   printStr   
1669   20 28 23 00            .CSTR   " (#"   
166D   CD 1E 09               CALL   prthex   
1670   CD 88 09               CALL   printStr   
1673   29 0D 0A 00            .CSTR   ")\r\n"   
1677   76                     HALT      
1678   00                     .CSTR      
1679                EXPECTM_0_2159S43:      
1679   E1                     POP   HL   
167A                          ;*Macro unroll:  test "3 a= a-- a",2
167A   31 80 3C               LD   SP,STACK   
167D   CD 8F 09               CALL   init   
1680   CD 34 3B               CALL   execStr   
1683   33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3 a= a-- a"   
168E                          ;*Macro unroll:  expect "3 a= a-- a",2
168E   E1                     POP   HL   
168F   E5                     PUSH   HL   
1690   11 02 00               LD   DE,2   
1693   B7                     OR   A   
1694   ED 52                  SBC   HL,DE   
1696   7D                     LD   A,L   
1697   B4                     OR   H   
1698   28 55                  JR   Z,expectM_0_2160S43   
169A   CD 88 09               CALL   printStr   
169D   43 6F 64 65 3A 20 33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3 a= a-- a"   
16AE   CD 88 09               CALL   printStr   
16B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16C0   21 02 00               LD   HL,2   
16C3   CD D6 08               CALL   prtdec   
16C6   CD 88 09               CALL   printStr   
16C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16D6   E1                     POP   hl   
16D7   E5                     PUSH   hl   
16D8   CD D6 08               CALL   prtdec   
16DB   E1                     POP   hl   
16DC   CD 88 09               CALL   printStr   
16DF   20 28 23 00            .CSTR   " (#"   
16E3   CD 1E 09               CALL   prthex   
16E6   CD 88 09               CALL   printStr   
16E9   29 0D 0A 00            .CSTR   ")\r\n"   
16ED   76                     HALT      
16EE   00                     .CSTR      
16EF                EXPECTM_0_2160S43:      
16EF   E1                     POP   HL   
16F0                          ;*Macro unroll:  test "4 a= a 2 -= a",2
16F0   31 80 3C               LD   SP,STACK   
16F3   CD 8F 09               CALL   init   
16F6   CD 34 3B               CALL   execStr   
16F9   34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "4 a= a 2 -= a"   
1707                          ;*Macro unroll:  expect "4 a= a 2 -= a",2
1707   E1                     POP   HL   
1708   E5                     PUSH   HL   
1709   11 02 00               LD   DE,2   
170C   B7                     OR   A   
170D   ED 52                  SBC   HL,DE   
170F   7D                     LD   A,L   
1710   B4                     OR   H   
1711   28 58                  JR   Z,expectM_0_2161S43   
1713   CD 88 09               CALL   printStr   
1716   43 6F 64 65 3A 20 34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "Code: ","4 a= a 2 -= a"   
172A   CD 88 09               CALL   printStr   
172D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
173C   21 02 00               LD   HL,2   
173F   CD D6 08               CALL   prtdec   
1742   CD 88 09               CALL   printStr   
1745   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1752   E1                     POP   hl   
1753   E5                     PUSH   hl   
1754   CD D6 08               CALL   prtdec   
1757   E1                     POP   hl   
1758   CD 88 09               CALL   printStr   
175B   20 28 23 00            .CSTR   " (#"   
175F   CD 1E 09               CALL   prthex   
1762   CD 88 09               CALL   printStr   
1765   29 0D 0A 00            .CSTR   ")\r\n"   
1769   76                     HALT      
176A   00                     .CSTR      
176B                EXPECTM_0_2161S43:      
176B   E1                     POP   HL   
176C                          ;*Macro unroll:  test "3 5 &", 1
176C   31 80 3C               LD   SP,STACK   
176F   CD 8F 09               CALL   init   
1772   CD 34 3B               CALL   execStr   
1775   33 20 35 20 26 00      .CSTR   "3 5 &"   
177B                          ;*Macro unroll:  expect "3 5 &",1
177B   E1                     POP   HL   
177C   E5                     PUSH   HL   
177D   11 01 00               LD   DE,1   
1780   B7                     OR   A   
1781   ED 52                  SBC   HL,DE   
1783   7D                     LD   A,L   
1784   B4                     OR   H   
1785   28 50                  JR   Z,expectM_0_2162S43   
1787   CD 88 09               CALL   printStr   
178A   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1796   CD 88 09               CALL   printStr   
1799   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17A8   21 01 00               LD   HL,1   
17AB   CD D6 08               CALL   prtdec   
17AE   CD 88 09               CALL   printStr   
17B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17BE   E1                     POP   hl   
17BF   E5                     PUSH   hl   
17C0   CD D6 08               CALL   prtdec   
17C3   E1                     POP   hl   
17C4   CD 88 09               CALL   printStr   
17C7   20 28 23 00            .CSTR   " (#"   
17CB   CD 1E 09               CALL   prthex   
17CE   CD 88 09               CALL   printStr   
17D1   29 0D 0A 00            .CSTR   ")\r\n"   
17D5   76                     HALT      
17D6   00                     .CSTR      
17D7                EXPECTM_0_2162S43:      
17D7   E1                     POP   HL   
17D8                          ;*Macro unroll:  test "3 a= 5 a &= a",1
17D8   31 80 3C               LD   SP,STACK   
17DB   CD 8F 09               CALL   init   
17DE   CD 34 3B               CALL   execStr   
17E1   33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "3 a= 5 a &= a"   
17EF                          ;*Macro unroll:  expect "3 a= 5 a &= a",1
17EF   E1                     POP   HL   
17F0   E5                     PUSH   HL   
17F1   11 01 00               LD   DE,1   
17F4   B7                     OR   A   
17F5   ED 52                  SBC   HL,DE   
17F7   7D                     LD   A,L   
17F8   B4                     OR   H   
17F9   28 58                  JR   Z,expectM_0_2163S43   
17FB   CD 88 09               CALL   printStr   
17FE   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a &= a"   
1812   CD 88 09               CALL   printStr   
1815   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1824   21 01 00               LD   HL,1   
1827   CD D6 08               CALL   prtdec   
182A   CD 88 09               CALL   printStr   
182D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
183A   E1                     POP   hl   
183B   E5                     PUSH   hl   
183C   CD D6 08               CALL   prtdec   
183F   E1                     POP   hl   
1840   CD 88 09               CALL   printStr   
1843   20 28 23 00            .CSTR   " (#"   
1847   CD 1E 09               CALL   prthex   
184A   CD 88 09               CALL   printStr   
184D   29 0D 0A 00            .CSTR   ")\r\n"   
1851   76                     HALT      
1852   00                     .CSTR      
1853                EXPECTM_0_2163S43:      
1853   E1                     POP   HL   
1854                          ;*Macro unroll:  test "3 5 |", 7
1854   31 80 3C               LD   SP,STACK   
1857   CD 8F 09               CALL   init   
185A   CD 34 3B               CALL   execStr   
185D   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1863                          ;*Macro unroll:  expect "3 5 |",7
1863   E1                     POP   HL   
1864   E5                     PUSH   HL   
1865   11 07 00               LD   DE,7   
1868   B7                     OR   A   
1869   ED 52                  SBC   HL,DE   
186B   7D                     LD   A,L   
186C   B4                     OR   H   
186D   28 50                  JR   Z,expectM_0_2164S43   
186F   CD 88 09               CALL   printStr   
1872   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
187E   CD 88 09               CALL   printStr   
1881   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1890   21 07 00               LD   HL,7   
1893   CD D6 08               CALL   prtdec   
1896   CD 88 09               CALL   printStr   
1899   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18A6   E1                     POP   hl   
18A7   E5                     PUSH   hl   
18A8   CD D6 08               CALL   prtdec   
18AB   E1                     POP   hl   
18AC   CD 88 09               CALL   printStr   
18AF   20 28 23 00            .CSTR   " (#"   
18B3   CD 1E 09               CALL   prthex   
18B6   CD 88 09               CALL   printStr   
18B9   29 0D 0A 00            .CSTR   ")\r\n"   
18BD   76                     HALT      
18BE   00                     .CSTR      
18BF                EXPECTM_0_2164S43:      
18BF   E1                     POP   HL   
18C0                          ;*Macro unroll:  test "3 a= 5 a |= a",7
18C0   31 80 3C               LD   SP,STACK   
18C3   CD 8F 09               CALL   init   
18C6   CD 34 3B               CALL   execStr   
18C9   33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "3 a= 5 a |= a"   
18D7                          ;*Macro unroll:  expect "3 a= 5 a |= a",7
18D7   E1                     POP   HL   
18D8   E5                     PUSH   HL   
18D9   11 07 00               LD   DE,7   
18DC   B7                     OR   A   
18DD   ED 52                  SBC   HL,DE   
18DF   7D                     LD   A,L   
18E0   B4                     OR   H   
18E1   28 58                  JR   Z,expectM_0_2165S43   
18E3   CD 88 09               CALL   printStr   
18E6   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a |= a"   
18FA   CD 88 09               CALL   printStr   
18FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
190C   21 07 00               LD   HL,7   
190F   CD D6 08               CALL   prtdec   
1912   CD 88 09               CALL   printStr   
1915   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1922   E1                     POP   hl   
1923   E5                     PUSH   hl   
1924   CD D6 08               CALL   prtdec   
1927   E1                     POP   hl   
1928   CD 88 09               CALL   printStr   
192B   20 28 23 00            .CSTR   " (#"   
192F   CD 1E 09               CALL   prthex   
1932   CD 88 09               CALL   printStr   
1935   29 0D 0A 00            .CSTR   ")\r\n"   
1939   76                     HALT      
193A   00                     .CSTR      
193B                EXPECTM_0_2165S43:      
193B   E1                     POP   HL   
193C                          ;*Macro unroll:  test "3 5 ^", 6
193C   31 80 3C               LD   SP,STACK   
193F   CD 8F 09               CALL   init   
1942   CD 34 3B               CALL   execStr   
1945   33 20 35 20 5E 00      .CSTR   "3 5 ^"   
194B                          ;*Macro unroll:  expect "3 5 ^",6
194B   E1                     POP   HL   
194C   E5                     PUSH   HL   
194D   11 06 00               LD   DE,6   
1950   B7                     OR   A   
1951   ED 52                  SBC   HL,DE   
1953   7D                     LD   A,L   
1954   B4                     OR   H   
1955   28 50                  JR   Z,expectM_0_2166S43   
1957   CD 88 09               CALL   printStr   
195A   43 6F 64 65 3A 20 33 20 35 20 5E 00 .CSTR   "Code: ","3 5 ^"   
1966   CD 88 09               CALL   printStr   
1969   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1978   21 06 00               LD   HL,6   
197B   CD D6 08               CALL   prtdec   
197E   CD 88 09               CALL   printStr   
1981   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
198E   E1                     POP   hl   
198F   E5                     PUSH   hl   
1990   CD D6 08               CALL   prtdec   
1993   E1                     POP   hl   
1994   CD 88 09               CALL   printStr   
1997   20 28 23 00            .CSTR   " (#"   
199B   CD 1E 09               CALL   prthex   
199E   CD 88 09               CALL   printStr   
19A1   29 0D 0A 00            .CSTR   ")\r\n"   
19A5   76                     HALT      
19A6   00                     .CSTR      
19A7                EXPECTM_0_2166S43:      
19A7   E1                     POP   HL   
19A8                          ;*Macro unroll:  test "3 a= 5 a ^= a",6
19A8   31 80 3C               LD   SP,STACK   
19AB   CD 8F 09               CALL   init   
19AE   CD 34 3B               CALL   execStr   
19B1   33 20 61 3D 20 35 20 61 20 5E 3D 20 61 00 .CSTR   "3 a= 5 a ^= a"   
19BF                          ;*Macro unroll:  expect "3 a= 5 a ^= a",6
19BF   E1                     POP   HL   
19C0   E5                     PUSH   HL   
19C1   11 06 00               LD   DE,6   
19C4   B7                     OR   A   
19C5   ED 52                  SBC   HL,DE   
19C7   7D                     LD   A,L   
19C8   B4                     OR   H   
19C9   28 58                  JR   Z,expectM_0_2167S43   
19CB   CD 88 09               CALL   printStr   
19CE   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 5E 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a ^= a"   
19E2   CD 88 09               CALL   printStr   
19E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19F4   21 06 00               LD   HL,6   
19F7   CD D6 08               CALL   prtdec   
19FA   CD 88 09               CALL   printStr   
19FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A0A   E1                     POP   hl   
1A0B   E5                     PUSH   hl   
1A0C   CD D6 08               CALL   prtdec   
1A0F   E1                     POP   hl   
1A10   CD 88 09               CALL   printStr   
1A13   20 28 23 00            .CSTR   " (#"   
1A17   CD 1E 09               CALL   prthex   
1A1A   CD 88 09               CALL   printStr   
1A1D   29 0D 0A 00            .CSTR   ")\r\n"   
1A21   76                     HALT      
1A22   00                     .CSTR      
1A23                EXPECTM_0_2167S43:      
1A23   E1                     POP   HL   
1A24                          ;*Macro unroll:  test "2 3 *", 6
1A24   31 80 3C               LD   SP,STACK   
1A27   CD 8F 09               CALL   init   
1A2A   CD 34 3B               CALL   execStr   
1A2D   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1A33                          ;*Macro unroll:  expect "2 3 *",6
1A33   E1                     POP   HL   
1A34   E5                     PUSH   HL   
1A35   11 06 00               LD   DE,6   
1A38   B7                     OR   A   
1A39   ED 52                  SBC   HL,DE   
1A3B   7D                     LD   A,L   
1A3C   B4                     OR   H   
1A3D   28 50                  JR   Z,expectM_0_2168S43   
1A3F   CD 88 09               CALL   printStr   
1A42   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1A4E   CD 88 09               CALL   printStr   
1A51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A60   21 06 00               LD   HL,6   
1A63   CD D6 08               CALL   prtdec   
1A66   CD 88 09               CALL   printStr   
1A69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A76   E1                     POP   hl   
1A77   E5                     PUSH   hl   
1A78   CD D6 08               CALL   prtdec   
1A7B   E1                     POP   hl   
1A7C   CD 88 09               CALL   printStr   
1A7F   20 28 23 00            .CSTR   " (#"   
1A83   CD 1E 09               CALL   prthex   
1A86   CD 88 09               CALL   printStr   
1A89   29 0D 0A 00            .CSTR   ")\r\n"   
1A8D   76                     HALT      
1A8E   00                     .CSTR      
1A8F                EXPECTM_0_2168S43:      
1A8F   E1                     POP   HL   
1A90                          ;*Macro unroll:  test "3 x= 2 x *= x",6
1A90   31 80 3C               LD   SP,STACK   
1A93   CD 8F 09               CALL   init   
1A96   CD 34 3B               CALL   execStr   
1A99   33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "3 x= 2 x *= x"   
1AA7                          ;*Macro unroll:  expect "3 x= 2 x *= x",6
1AA7   E1                     POP   HL   
1AA8   E5                     PUSH   HL   
1AA9   11 06 00               LD   DE,6   
1AAC   B7                     OR   A   
1AAD   ED 52                  SBC   HL,DE   
1AAF   7D                     LD   A,L   
1AB0   B4                     OR   H   
1AB1   28 58                  JR   Z,expectM_0_2169S43   
1AB3   CD 88 09               CALL   printStr   
1AB6   43 6F 64 65 3A 20 33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "Code: ","3 x= 2 x *= x"   
1ACA   CD 88 09               CALL   printStr   
1ACD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ADC   21 06 00               LD   HL,6   
1ADF   CD D6 08               CALL   prtdec   
1AE2   CD 88 09               CALL   printStr   
1AE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AF2   E1                     POP   hl   
1AF3   E5                     PUSH   hl   
1AF4   CD D6 08               CALL   prtdec   
1AF7   E1                     POP   hl   
1AF8   CD 88 09               CALL   printStr   
1AFB   20 28 23 00            .CSTR   " (#"   
1AFF   CD 1E 09               CALL   prthex   
1B02   CD 88 09               CALL   printStr   
1B05   29 0D 0A 00            .CSTR   ")\r\n"   
1B09   76                     HALT      
1B0A   00                     .CSTR      
1B0B                EXPECTM_0_2169S43:      
1B0B   E1                     POP   HL   
1B0C                          ;*Macro unroll:  test "1 2 3 + *", 5
1B0C   31 80 3C               LD   SP,STACK   
1B0F   CD 8F 09               CALL   init   
1B12   CD 34 3B               CALL   execStr   
1B15   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1B1F                          ;*Macro unroll:  expect "1 2 3 + *",5
1B1F   E1                     POP   HL   
1B20   E5                     PUSH   HL   
1B21   11 05 00               LD   DE,5   
1B24   B7                     OR   A   
1B25   ED 52                  SBC   HL,DE   
1B27   7D                     LD   A,L   
1B28   B4                     OR   H   
1B29   28 54                  JR   Z,expectM_0_2170S43   
1B2B   CD 88 09               CALL   printStr   
1B2E   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1B3E   CD 88 09               CALL   printStr   
1B41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B50   21 05 00               LD   HL,5   
1B53   CD D6 08               CALL   prtdec   
1B56   CD 88 09               CALL   printStr   
1B59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B66   E1                     POP   hl   
1B67   E5                     PUSH   hl   
1B68   CD D6 08               CALL   prtdec   
1B6B   E1                     POP   hl   
1B6C   CD 88 09               CALL   printStr   
1B6F   20 28 23 00            .CSTR   " (#"   
1B73   CD 1E 09               CALL   prthex   
1B76   CD 88 09               CALL   printStr   
1B79   29 0D 0A 00            .CSTR   ")\r\n"   
1B7D   76                     HALT      
1B7E   00                     .CSTR      
1B7F                EXPECTM_0_2170S43:      
1B7F   E1                     POP   HL   
1B80                          ;*Macro unroll:  test "7 3 /", 2
1B80   31 80 3C               LD   SP,STACK   
1B83   CD 8F 09               CALL   init   
1B86   CD 34 3B               CALL   execStr   
1B89   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1B8F                          ;*Macro unroll:  expect "7 3 /",2
1B8F   E1                     POP   HL   
1B90   E5                     PUSH   HL   
1B91   11 02 00               LD   DE,2   
1B94   B7                     OR   A   
1B95   ED 52                  SBC   HL,DE   
1B97   7D                     LD   A,L   
1B98   B4                     OR   H   
1B99   28 50                  JR   Z,expectM_0_2171S43   
1B9B   CD 88 09               CALL   printStr   
1B9E   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1BAA   CD 88 09               CALL   printStr   
1BAD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BBC   21 02 00               LD   HL,2   
1BBF   CD D6 08               CALL   prtdec   
1BC2   CD 88 09               CALL   printStr   
1BC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BD2   E1                     POP   hl   
1BD3   E5                     PUSH   hl   
1BD4   CD D6 08               CALL   prtdec   
1BD7   E1                     POP   hl   
1BD8   CD 88 09               CALL   printStr   
1BDB   20 28 23 00            .CSTR   " (#"   
1BDF   CD 1E 09               CALL   prthex   
1BE2   CD 88 09               CALL   printStr   
1BE5   29 0D 0A 00            .CSTR   ")\r\n"   
1BE9   76                     HALT      
1BEA   00                     .CSTR      
1BEB                EXPECTM_0_2171S43:      
1BEB   E1                     POP   HL   
1BEC                          ;*Macro unroll:  test "7 x= x 3 /= x", 2
1BEC   31 80 3C               LD   SP,STACK   
1BEF   CD 8F 09               CALL   init   
1BF2   CD 34 3B               CALL   execStr   
1BF5   37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "7 x= x 3 /= x"   
1C03                          ;*Macro unroll:  expect "7 x= x 3 /= x",2
1C03   E1                     POP   HL   
1C04   E5                     PUSH   HL   
1C05   11 02 00               LD   DE,2   
1C08   B7                     OR   A   
1C09   ED 52                  SBC   HL,DE   
1C0B   7D                     LD   A,L   
1C0C   B4                     OR   H   
1C0D   28 58                  JR   Z,expectM_0_2172S43   
1C0F   CD 88 09               CALL   printStr   
1C12   43 6F 64 65 3A 20 37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "Code: ","7 x= x 3 /= x"   
1C26   CD 88 09               CALL   printStr   
1C29   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C38   21 02 00               LD   HL,2   
1C3B   CD D6 08               CALL   prtdec   
1C3E   CD 88 09               CALL   printStr   
1C41   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C4E   E1                     POP   hl   
1C4F   E5                     PUSH   hl   
1C50   CD D6 08               CALL   prtdec   
1C53   E1                     POP   hl   
1C54   CD 88 09               CALL   printStr   
1C57   20 28 23 00            .CSTR   " (#"   
1C5B   CD 1E 09               CALL   prthex   
1C5E   CD 88 09               CALL   printStr   
1C61   29 0D 0A 00            .CSTR   ")\r\n"   
1C65   76                     HALT      
1C66   00                     .CSTR      
1C67                EXPECTM_0_2172S43:      
1C67   E1                     POP   HL   
1C68                          ;*Macro unroll:  test "7 3 / _", 1
1C68   31 80 3C               LD   SP,STACK   
1C6B   CD 8F 09               CALL   init   
1C6E   CD 34 3B               CALL   execStr   
1C71   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1C79                          ;*Macro unroll:  expect "7 3 / _",1
1C79   E1                     POP   HL   
1C7A   E5                     PUSH   HL   
1C7B   11 01 00               LD   DE,1   
1C7E   B7                     OR   A   
1C7F   ED 52                  SBC   HL,DE   
1C81   7D                     LD   A,L   
1C82   B4                     OR   H   
1C83   28 52                  JR   Z,expectM_0_2173S43   
1C85   CD 88 09               CALL   printStr   
1C88   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1C96   CD 88 09               CALL   printStr   
1C99   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CA8   21 01 00               LD   HL,1   
1CAB   CD D6 08               CALL   prtdec   
1CAE   CD 88 09               CALL   printStr   
1CB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CBE   E1                     POP   hl   
1CBF   E5                     PUSH   hl   
1CC0   CD D6 08               CALL   prtdec   
1CC3   E1                     POP   hl   
1CC4   CD 88 09               CALL   printStr   
1CC7   20 28 23 00            .CSTR   " (#"   
1CCB   CD 1E 09               CALL   prthex   
1CCE   CD 88 09               CALL   printStr   
1CD1   29 0D 0A 00            .CSTR   ")\r\n"   
1CD5   76                     HALT      
1CD6   00                     .CSTR      
1CD7                EXPECTM_0_2173S43:      
1CD7   E1                     POP   HL   
1CD8                          ;*Macro unroll:  test "7 3 /", 2
1CD8   31 80 3C               LD   SP,STACK   
1CDB   CD 8F 09               CALL   init   
1CDE   CD 34 3B               CALL   execStr   
1CE1   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1CE7                          ;*Macro unroll:  expect "7 3 /",2
1CE7   E1                     POP   HL   
1CE8   E5                     PUSH   HL   
1CE9   11 02 00               LD   DE,2   
1CEC   B7                     OR   A   
1CED   ED 52                  SBC   HL,DE   
1CEF   7D                     LD   A,L   
1CF0   B4                     OR   H   
1CF1   28 50                  JR   Z,expectM_0_2174S43   
1CF3   CD 88 09               CALL   printStr   
1CF6   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1D02   CD 88 09               CALL   printStr   
1D05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D14   21 02 00               LD   HL,2   
1D17   CD D6 08               CALL   prtdec   
1D1A   CD 88 09               CALL   printStr   
1D1D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D2A   E1                     POP   hl   
1D2B   E5                     PUSH   hl   
1D2C   CD D6 08               CALL   prtdec   
1D2F   E1                     POP   hl   
1D30   CD 88 09               CALL   printStr   
1D33   20 28 23 00            .CSTR   " (#"   
1D37   CD 1E 09               CALL   prthex   
1D3A   CD 88 09               CALL   printStr   
1D3D   29 0D 0A 00            .CSTR   ")\r\n"   
1D41   76                     HALT      
1D42   00                     .CSTR      
1D43                EXPECTM_0_2174S43:      
1D43   E1                     POP   HL   
1D44                          ;*Macro unroll:  test "2 3 ==", FALSE
1D44   31 80 3C               LD   SP,STACK   
1D47   CD 8F 09               CALL   init   
1D4A   CD 34 3B               CALL   execStr   
1D4D   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1D54                          ;*Macro unroll:  expect "2 3 ==",FALSE
1D54   E1                     POP   HL   
1D55   E5                     PUSH   HL   
1D56   11 00 00               LD   DE,FALSE   
1D59   B7                     OR   A   
1D5A   ED 52                  SBC   HL,DE   
1D5C   7D                     LD   A,L   
1D5D   B4                     OR   H   
1D5E   28 51                  JR   Z,expectM_0_2175S43   
1D60   CD 88 09               CALL   printStr   
1D63   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1D70   CD 88 09               CALL   printStr   
1D73   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D82   21 00 00               LD   HL,FALSE   
1D85   CD D6 08               CALL   prtdec   
1D88   CD 88 09               CALL   printStr   
1D8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D98   E1                     POP   hl   
1D99   E5                     PUSH   hl   
1D9A   CD D6 08               CALL   prtdec   
1D9D   E1                     POP   hl   
1D9E   CD 88 09               CALL   printStr   
1DA1   20 28 23 00            .CSTR   " (#"   
1DA5   CD 1E 09               CALL   prthex   
1DA8   CD 88 09               CALL   printStr   
1DAB   29 0D 0A 00            .CSTR   ")\r\n"   
1DAF   76                     HALT      
1DB0   00                     .CSTR      
1DB1                EXPECTM_0_2175S43:      
1DB1   E1                     POP   HL   
1DB2                          ;*Macro unroll:  test "3 3 ==", TRUE
1DB2   31 80 3C               LD   SP,STACK   
1DB5   CD 8F 09               CALL   init   
1DB8   CD 34 3B               CALL   execStr   
1DBB   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1DC2                          ;*Macro unroll:  expect "3 3 ==",TRUE
1DC2   E1                     POP   HL   
1DC3   E5                     PUSH   HL   
1DC4   11 FF FF               LD   DE,TRUE   
1DC7   B7                     OR   A   
1DC8   ED 52                  SBC   HL,DE   
1DCA   7D                     LD   A,L   
1DCB   B4                     OR   H   
1DCC   28 51                  JR   Z,expectM_0_2176S43   
1DCE   CD 88 09               CALL   printStr   
1DD1   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1DDE   CD 88 09               CALL   printStr   
1DE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DF0   21 FF FF               LD   HL,TRUE   
1DF3   CD D6 08               CALL   prtdec   
1DF6   CD 88 09               CALL   printStr   
1DF9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E06   E1                     POP   hl   
1E07   E5                     PUSH   hl   
1E08   CD D6 08               CALL   prtdec   
1E0B   E1                     POP   hl   
1E0C   CD 88 09               CALL   printStr   
1E0F   20 28 23 00            .CSTR   " (#"   
1E13   CD 1E 09               CALL   prthex   
1E16   CD 88 09               CALL   printStr   
1E19   29 0D 0A 00            .CSTR   ")\r\n"   
1E1D   76                     HALT      
1E1E   00                     .CSTR      
1E1F                EXPECTM_0_2176S43:      
1E1F   E1                     POP   HL   
1E20                          ;*Macro unroll:  test "1 2 <", TRUE
1E20   31 80 3C               LD   SP,STACK   
1E23   CD 8F 09               CALL   init   
1E26   CD 34 3B               CALL   execStr   
1E29   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1E2F                          ;*Macro unroll:  expect "1 2 <",TRUE
1E2F   E1                     POP   HL   
1E30   E5                     PUSH   HL   
1E31   11 FF FF               LD   DE,TRUE   
1E34   B7                     OR   A   
1E35   ED 52                  SBC   HL,DE   
1E37   7D                     LD   A,L   
1E38   B4                     OR   H   
1E39   28 50                  JR   Z,expectM_0_2177S43   
1E3B   CD 88 09               CALL   printStr   
1E3E   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1E4A   CD 88 09               CALL   printStr   
1E4D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E5C   21 FF FF               LD   HL,TRUE   
1E5F   CD D6 08               CALL   prtdec   
1E62   CD 88 09               CALL   printStr   
1E65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E72   E1                     POP   hl   
1E73   E5                     PUSH   hl   
1E74   CD D6 08               CALL   prtdec   
1E77   E1                     POP   hl   
1E78   CD 88 09               CALL   printStr   
1E7B   20 28 23 00            .CSTR   " (#"   
1E7F   CD 1E 09               CALL   prthex   
1E82   CD 88 09               CALL   printStr   
1E85   29 0D 0A 00            .CSTR   ")\r\n"   
1E89   76                     HALT      
1E8A   00                     .CSTR      
1E8B                EXPECTM_0_2177S43:      
1E8B   E1                     POP   HL   
1E8C                          ;*Macro unroll:  test "2 1 <", FALSE
1E8C   31 80 3C               LD   SP,STACK   
1E8F   CD 8F 09               CALL   init   
1E92   CD 34 3B               CALL   execStr   
1E95   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1E9B                          ;*Macro unroll:  expect "2 1 <",FALSE
1E9B   E1                     POP   HL   
1E9C   E5                     PUSH   HL   
1E9D   11 00 00               LD   DE,FALSE   
1EA0   B7                     OR   A   
1EA1   ED 52                  SBC   HL,DE   
1EA3   7D                     LD   A,L   
1EA4   B4                     OR   H   
1EA5   28 50                  JR   Z,expectM_0_2178S43   
1EA7   CD 88 09               CALL   printStr   
1EAA   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1EB6   CD 88 09               CALL   printStr   
1EB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EC8   21 00 00               LD   HL,FALSE   
1ECB   CD D6 08               CALL   prtdec   
1ECE   CD 88 09               CALL   printStr   
1ED1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EDE   E1                     POP   hl   
1EDF   E5                     PUSH   hl   
1EE0   CD D6 08               CALL   prtdec   
1EE3   E1                     POP   hl   
1EE4   CD 88 09               CALL   printStr   
1EE7   20 28 23 00            .CSTR   " (#"   
1EEB   CD 1E 09               CALL   prthex   
1EEE   CD 88 09               CALL   printStr   
1EF1   29 0D 0A 00            .CSTR   ")\r\n"   
1EF5   76                     HALT      
1EF6   00                     .CSTR      
1EF7                EXPECTM_0_2178S43:      
1EF7   E1                     POP   HL   
1EF8                          ;*Macro unroll:  test "2 3 <", TRUE
1EF8   31 80 3C               LD   SP,STACK   
1EFB   CD 8F 09               CALL   init   
1EFE   CD 34 3B               CALL   execStr   
1F01   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1F07                          ;*Macro unroll:  expect "2 3 <",TRUE
1F07   E1                     POP   HL   
1F08   E5                     PUSH   HL   
1F09   11 FF FF               LD   DE,TRUE   
1F0C   B7                     OR   A   
1F0D   ED 52                  SBC   HL,DE   
1F0F   7D                     LD   A,L   
1F10   B4                     OR   H   
1F11   28 50                  JR   Z,expectM_0_2179S43   
1F13   CD 88 09               CALL   printStr   
1F16   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1F22   CD 88 09               CALL   printStr   
1F25   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F34   21 FF FF               LD   HL,TRUE   
1F37   CD D6 08               CALL   prtdec   
1F3A   CD 88 09               CALL   printStr   
1F3D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F4A   E1                     POP   hl   
1F4B   E5                     PUSH   hl   
1F4C   CD D6 08               CALL   prtdec   
1F4F   E1                     POP   hl   
1F50   CD 88 09               CALL   printStr   
1F53   20 28 23 00            .CSTR   " (#"   
1F57   CD 1E 09               CALL   prthex   
1F5A   CD 88 09               CALL   printStr   
1F5D   29 0D 0A 00            .CSTR   ")\r\n"   
1F61   76                     HALT      
1F62   00                     .CSTR      
1F63                EXPECTM_0_2179S43:      
1F63   E1                     POP   HL   
1F64                          ;*Macro unroll:  test "3 3 <", FALSE
1F64   31 80 3C               LD   SP,STACK   
1F67   CD 8F 09               CALL   init   
1F6A   CD 34 3B               CALL   execStr   
1F6D   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1F73                          ;*Macro unroll:  expect "3 3 <",FALSE
1F73   E1                     POP   HL   
1F74   E5                     PUSH   HL   
1F75   11 00 00               LD   DE,FALSE   
1F78   B7                     OR   A   
1F79   ED 52                  SBC   HL,DE   
1F7B   7D                     LD   A,L   
1F7C   B4                     OR   H   
1F7D   28 50                  JR   Z,expectM_0_2180S43   
1F7F   CD 88 09               CALL   printStr   
1F82   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1F8E   CD 88 09               CALL   printStr   
1F91   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FA0   21 00 00               LD   HL,FALSE   
1FA3   CD D6 08               CALL   prtdec   
1FA6   CD 88 09               CALL   printStr   
1FA9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FB6   E1                     POP   hl   
1FB7   E5                     PUSH   hl   
1FB8   CD D6 08               CALL   prtdec   
1FBB   E1                     POP   hl   
1FBC   CD 88 09               CALL   printStr   
1FBF   20 28 23 00            .CSTR   " (#"   
1FC3   CD 1E 09               CALL   prthex   
1FC6   CD 88 09               CALL   printStr   
1FC9   29 0D 0A 00            .CSTR   ")\r\n"   
1FCD   76                     HALT      
1FCE   00                     .CSTR      
1FCF                EXPECTM_0_2180S43:      
1FCF   E1                     POP   HL   
1FD0                          ;*Macro unroll:  test "1 2 >", FALSE
1FD0   31 80 3C               LD   SP,STACK   
1FD3   CD 8F 09               CALL   init   
1FD6   CD 34 3B               CALL   execStr   
1FD9   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1FDF                          ;*Macro unroll:  expect "1 2 >",FALSE
1FDF   E1                     POP   HL   
1FE0   E5                     PUSH   HL   
1FE1   11 00 00               LD   DE,FALSE   
1FE4   B7                     OR   A   
1FE5   ED 52                  SBC   HL,DE   
1FE7   7D                     LD   A,L   
1FE8   B4                     OR   H   
1FE9   28 50                  JR   Z,expectM_0_2181S43   
1FEB   CD 88 09               CALL   printStr   
1FEE   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1FFA   CD 88 09               CALL   printStr   
1FFD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
200C   21 00 00               LD   HL,FALSE   
200F   CD D6 08               CALL   prtdec   
2012   CD 88 09               CALL   printStr   
2015   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2022   E1                     POP   hl   
2023   E5                     PUSH   hl   
2024   CD D6 08               CALL   prtdec   
2027   E1                     POP   hl   
2028   CD 88 09               CALL   printStr   
202B   20 28 23 00            .CSTR   " (#"   
202F   CD 1E 09               CALL   prthex   
2032   CD 88 09               CALL   printStr   
2035   29 0D 0A 00            .CSTR   ")\r\n"   
2039   76                     HALT      
203A   00                     .CSTR      
203B                EXPECTM_0_2181S43:      
203B   E1                     POP   HL   
203C                          ;*Macro unroll:  test "2 1 >", TRUE
203C   31 80 3C               LD   SP,STACK   
203F   CD 8F 09               CALL   init   
2042   CD 34 3B               CALL   execStr   
2045   32 20 31 20 3E 00      .CSTR   "2 1 >"   
204B                          ;*Macro unroll:  expect "2 1 >",TRUE
204B   E1                     POP   HL   
204C   E5                     PUSH   HL   
204D   11 FF FF               LD   DE,TRUE   
2050   B7                     OR   A   
2051   ED 52                  SBC   HL,DE   
2053   7D                     LD   A,L   
2054   B4                     OR   H   
2055   28 50                  JR   Z,expectM_0_2182S43   
2057   CD 88 09               CALL   printStr   
205A   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2066   CD 88 09               CALL   printStr   
2069   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2078   21 FF FF               LD   HL,TRUE   
207B   CD D6 08               CALL   prtdec   
207E   CD 88 09               CALL   printStr   
2081   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
208E   E1                     POP   hl   
208F   E5                     PUSH   hl   
2090   CD D6 08               CALL   prtdec   
2093   E1                     POP   hl   
2094   CD 88 09               CALL   printStr   
2097   20 28 23 00            .CSTR   " (#"   
209B   CD 1E 09               CALL   prthex   
209E   CD 88 09               CALL   printStr   
20A1   29 0D 0A 00            .CSTR   ")\r\n"   
20A5   76                     HALT      
20A6   00                     .CSTR      
20A7                EXPECTM_0_2182S43:      
20A7   E1                     POP   HL   
20A8                          ;*Macro unroll:  test "3 3 >", FALSE
20A8   31 80 3C               LD   SP,STACK   
20AB   CD 8F 09               CALL   init   
20AE   CD 34 3B               CALL   execStr   
20B1   33 20 33 20 3E 00      .CSTR   "3 3 >"   
20B7                          ;*Macro unroll:  expect "3 3 >",FALSE
20B7   E1                     POP   HL   
20B8   E5                     PUSH   HL   
20B9   11 00 00               LD   DE,FALSE   
20BC   B7                     OR   A   
20BD   ED 52                  SBC   HL,DE   
20BF   7D                     LD   A,L   
20C0   B4                     OR   H   
20C1   28 50                  JR   Z,expectM_0_2183S43   
20C3   CD 88 09               CALL   printStr   
20C6   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
20D2   CD 88 09               CALL   printStr   
20D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20E4   21 00 00               LD   HL,FALSE   
20E7   CD D6 08               CALL   prtdec   
20EA   CD 88 09               CALL   printStr   
20ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20FA   E1                     POP   hl   
20FB   E5                     PUSH   hl   
20FC   CD D6 08               CALL   prtdec   
20FF   E1                     POP   hl   
2100   CD 88 09               CALL   printStr   
2103   20 28 23 00            .CSTR   " (#"   
2107   CD 1E 09               CALL   prthex   
210A   CD 88 09               CALL   printStr   
210D   29 0D 0A 00            .CSTR   ")\r\n"   
2111   76                     HALT      
2112   00                     .CSTR      
2113                EXPECTM_0_2183S43:      
2113   E1                     POP   HL   
2114                          ;*Macro unroll:  test "4 3 >", TRUE
2114   31 80 3C               LD   SP,STACK   
2117   CD 8F 09               CALL   init   
211A   CD 34 3B               CALL   execStr   
211D   34 20 33 20 3E 00      .CSTR   "4 3 >"   
2123                          ;*Macro unroll:  expect "4 3 >",TRUE
2123   E1                     POP   HL   
2124   E5                     PUSH   HL   
2125   11 FF FF               LD   DE,TRUE   
2128   B7                     OR   A   
2129   ED 52                  SBC   HL,DE   
212B   7D                     LD   A,L   
212C   B4                     OR   H   
212D   28 50                  JR   Z,expectM_0_2184S43   
212F   CD 88 09               CALL   printStr   
2132   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
213E   CD 88 09               CALL   printStr   
2141   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2150   21 FF FF               LD   HL,TRUE   
2153   CD D6 08               CALL   prtdec   
2156   CD 88 09               CALL   printStr   
2159   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2166   E1                     POP   hl   
2167   E5                     PUSH   hl   
2168   CD D6 08               CALL   prtdec   
216B   E1                     POP   hl   
216C   CD 88 09               CALL   printStr   
216F   20 28 23 00            .CSTR   " (#"   
2173   CD 1E 09               CALL   prthex   
2176   CD 88 09               CALL   printStr   
2179   29 0D 0A 00            .CSTR   ")\r\n"   
217D   76                     HALT      
217E   00                     .CSTR      
217F                EXPECTM_0_2184S43:      
217F   E1                     POP   HL   
2180                          ;*Macro unroll:  test "2 2 <=", TRUE
2180   31 80 3C               LD   SP,STACK   
2183   CD 8F 09               CALL   init   
2186   CD 34 3B               CALL   execStr   
2189   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
2190                          ;*Macro unroll:  expect "2 2 <=",TRUE
2190   E1                     POP   HL   
2191   E5                     PUSH   HL   
2192   11 FF FF               LD   DE,TRUE   
2195   B7                     OR   A   
2196   ED 52                  SBC   HL,DE   
2198   7D                     LD   A,L   
2199   B4                     OR   H   
219A   28 51                  JR   Z,expectM_0_2185S43   
219C   CD 88 09               CALL   printStr   
219F   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
21AC   CD 88 09               CALL   printStr   
21AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21BE   21 FF FF               LD   HL,TRUE   
21C1   CD D6 08               CALL   prtdec   
21C4   CD 88 09               CALL   printStr   
21C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21D4   E1                     POP   hl   
21D5   E5                     PUSH   hl   
21D6   CD D6 08               CALL   prtdec   
21D9   E1                     POP   hl   
21DA   CD 88 09               CALL   printStr   
21DD   20 28 23 00            .CSTR   " (#"   
21E1   CD 1E 09               CALL   prthex   
21E4   CD 88 09               CALL   printStr   
21E7   29 0D 0A 00            .CSTR   ")\r\n"   
21EB   76                     HALT      
21EC   00                     .CSTR      
21ED                EXPECTM_0_2185S43:      
21ED   E1                     POP   HL   
21EE                          ;*Macro unroll:  test "2 2 >=", TRUE
21EE   31 80 3C               LD   SP,STACK   
21F1   CD 8F 09               CALL   init   
21F4   CD 34 3B               CALL   execStr   
21F7   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
21FE                          ;*Macro unroll:  expect "2 2 >=",TRUE
21FE   E1                     POP   HL   
21FF   E5                     PUSH   HL   
2200   11 FF FF               LD   DE,TRUE   
2203   B7                     OR   A   
2204   ED 52                  SBC   HL,DE   
2206   7D                     LD   A,L   
2207   B4                     OR   H   
2208   28 51                  JR   Z,expectM_0_2186S43   
220A   CD 88 09               CALL   printStr   
220D   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
221A   CD 88 09               CALL   printStr   
221D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
222C   21 FF FF               LD   HL,TRUE   
222F   CD D6 08               CALL   prtdec   
2232   CD 88 09               CALL   printStr   
2235   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2242   E1                     POP   hl   
2243   E5                     PUSH   hl   
2244   CD D6 08               CALL   prtdec   
2247   E1                     POP   hl   
2248   CD 88 09               CALL   printStr   
224B   20 28 23 00            .CSTR   " (#"   
224F   CD 1E 09               CALL   prthex   
2252   CD 88 09               CALL   printStr   
2255   29 0D 0A 00            .CSTR   ")\r\n"   
2259   76                     HALT      
225A   00                     .CSTR      
225B                EXPECTM_0_2186S43:      
225B   E1                     POP   HL   
225C                          ;*Macro unroll:  test "3 1 <<", 6
225C   31 80 3C               LD   SP,STACK   
225F   CD 8F 09               CALL   init   
2262   CD 34 3B               CALL   execStr   
2265   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
226C                          ;*Macro unroll:  expect "3 1 <<",6
226C   E1                     POP   HL   
226D   E5                     PUSH   HL   
226E   11 06 00               LD   DE,6   
2271   B7                     OR   A   
2272   ED 52                  SBC   HL,DE   
2274   7D                     LD   A,L   
2275   B4                     OR   H   
2276   28 51                  JR   Z,expectM_0_2187S43   
2278   CD 88 09               CALL   printStr   
227B   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2288   CD 88 09               CALL   printStr   
228B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
229A   21 06 00               LD   HL,6   
229D   CD D6 08               CALL   prtdec   
22A0   CD 88 09               CALL   printStr   
22A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22B0   E1                     POP   hl   
22B1   E5                     PUSH   hl   
22B2   CD D6 08               CALL   prtdec   
22B5   E1                     POP   hl   
22B6   CD 88 09               CALL   printStr   
22B9   20 28 23 00            .CSTR   " (#"   
22BD   CD 1E 09               CALL   prthex   
22C0   CD 88 09               CALL   printStr   
22C3   29 0D 0A 00            .CSTR   ")\r\n"   
22C7   76                     HALT      
22C8   00                     .CSTR      
22C9                EXPECTM_0_2187S43:      
22C9   E1                     POP   HL   
22CA                          ;*Macro unroll:  test "10 1 >>", 5
22CA   31 80 3C               LD   SP,STACK   
22CD   CD 8F 09               CALL   init   
22D0   CD 34 3B               CALL   execStr   
22D3   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
22DB                          ;*Macro unroll:  expect "10 1 >>",5
22DB   E1                     POP   HL   
22DC   E5                     PUSH   HL   
22DD   11 05 00               LD   DE,5   
22E0   B7                     OR   A   
22E1   ED 52                  SBC   HL,DE   
22E3   7D                     LD   A,L   
22E4   B4                     OR   H   
22E5   28 52                  JR   Z,expectM_0_2188S43   
22E7   CD 88 09               CALL   printStr   
22EA   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
22F8   CD 88 09               CALL   printStr   
22FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
230A   21 05 00               LD   HL,5   
230D   CD D6 08               CALL   prtdec   
2310   CD 88 09               CALL   printStr   
2313   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2320   E1                     POP   hl   
2321   E5                     PUSH   hl   
2322   CD D6 08               CALL   prtdec   
2325   E1                     POP   hl   
2326   CD 88 09               CALL   printStr   
2329   20 28 23 00            .CSTR   " (#"   
232D   CD 1E 09               CALL   prthex   
2330   CD 88 09               CALL   printStr   
2333   29 0D 0A 00            .CSTR   ")\r\n"   
2337   76                     HALT      
2338   00                     .CSTR      
2339                EXPECTM_0_2188S43:      
2339   E1                     POP   HL   
233A                          ;*Macro unroll:  test "1 x = x", 1
233A   31 80 3C               LD   SP,STACK   
233D   CD 8F 09               CALL   init   
2340   CD 34 3B               CALL   execStr   
2343   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
234B                          ;*Macro unroll:  expect "1 x = x",1
234B   E1                     POP   HL   
234C   E5                     PUSH   HL   
234D   11 01 00               LD   DE,1   
2350   B7                     OR   A   
2351   ED 52                  SBC   HL,DE   
2353   7D                     LD   A,L   
2354   B4                     OR   H   
2355   28 52                  JR   Z,expectM_0_2189S43   
2357   CD 88 09               CALL   printStr   
235A   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2368   CD 88 09               CALL   printStr   
236B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
237A   21 01 00               LD   HL,1   
237D   CD D6 08               CALL   prtdec   
2380   CD 88 09               CALL   printStr   
2383   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2390   E1                     POP   hl   
2391   E5                     PUSH   hl   
2392   CD D6 08               CALL   prtdec   
2395   E1                     POP   hl   
2396   CD 88 09               CALL   printStr   
2399   20 28 23 00            .CSTR   " (#"   
239D   CD 1E 09               CALL   prthex   
23A0   CD 88 09               CALL   printStr   
23A3   29 0D 0A 00            .CSTR   ")\r\n"   
23A7   76                     HALT      
23A8   00                     .CSTR      
23A9                EXPECTM_0_2189S43:      
23A9   E1                     POP   HL   
23AA                          ;*Macro unroll:  test "1{}:", 1
23AA   31 80 3C               LD   SP,STACK   
23AD   CD 8F 09               CALL   init   
23B0   CD 34 3B               CALL   execStr   
23B3   31 7B 7D 3A 00         .CSTR   "1{}:"   
23B8                          ;*Macro unroll:  expect "1{}:",1
23B8   E1                     POP   HL   
23B9   E5                     PUSH   HL   
23BA   11 01 00               LD   DE,1   
23BD   B7                     OR   A   
23BE   ED 52                  SBC   HL,DE   
23C0   7D                     LD   A,L   
23C1   B4                     OR   H   
23C2   28 4F                  JR   Z,expectM_0_2190S43   
23C4   CD 88 09               CALL   printStr   
23C7   43 6F 64 65 3A 20 31 7B 7D 3A 00 .CSTR   "Code: ","1{}:"   
23D2   CD 88 09               CALL   printStr   
23D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23E4   21 01 00               LD   HL,1   
23E7   CD D6 08               CALL   prtdec   
23EA   CD 88 09               CALL   printStr   
23ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23FA   E1                     POP   hl   
23FB   E5                     PUSH   hl   
23FC   CD D6 08               CALL   prtdec   
23FF   E1                     POP   hl   
2400   CD 88 09               CALL   printStr   
2403   20 28 23 00            .CSTR   " (#"   
2407   CD 1E 09               CALL   prthex   
240A   CD 88 09               CALL   printStr   
240D   29 0D 0A 00            .CSTR   ")\r\n"   
2411   76                     HALT      
2412   00                     .CSTR      
2413                EXPECTM_0_2190S43:      
2413   E1                     POP   HL   
2414                          ;*Macro unroll:  test "{1}:", 1
2414   31 80 3C               LD   SP,STACK   
2417   CD 8F 09               CALL   init   
241A   CD 34 3B               CALL   execStr   
241D   7B 31 7D 3A 00         .CSTR   "{1}:"   
2422                          ;*Macro unroll:  expect "{1}:",1
2422   E1                     POP   HL   
2423   E5                     PUSH   HL   
2424   11 01 00               LD   DE,1   
2427   B7                     OR   A   
2428   ED 52                  SBC   HL,DE   
242A   7D                     LD   A,L   
242B   B4                     OR   H   
242C   28 4F                  JR   Z,expectM_0_2191S43   
242E   CD 88 09               CALL   printStr   
2431   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
243C   CD 88 09               CALL   printStr   
243F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
244E   21 01 00               LD   HL,1   
2451   CD D6 08               CALL   prtdec   
2454   CD 88 09               CALL   printStr   
2457   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2464   E1                     POP   hl   
2465   E5                     PUSH   hl   
2466   CD D6 08               CALL   prtdec   
2469   E1                     POP   hl   
246A   CD 88 09               CALL   printStr   
246D   20 28 23 00            .CSTR   " (#"   
2471   CD 1E 09               CALL   prthex   
2474   CD 88 09               CALL   printStr   
2477   29 0D 0A 00            .CSTR   ")\r\n"   
247B   76                     HALT      
247C   00                     .CSTR      
247D                EXPECTM_0_2191S43:      
247D   E1                     POP   HL   
247E                          ;*Macro unroll:  test "{{1}:}:", 1
247E   31 80 3C               LD   SP,STACK   
2481   CD 8F 09               CALL   init   
2484   CD 34 3B               CALL   execStr   
2487   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
248F                          ;*Macro unroll:  expect "{{1}:}:",1
248F   E1                     POP   HL   
2490   E5                     PUSH   HL   
2491   11 01 00               LD   DE,1   
2494   B7                     OR   A   
2495   ED 52                  SBC   HL,DE   
2497   7D                     LD   A,L   
2498   B4                     OR   H   
2499   28 52                  JR   Z,expectM_0_2192S43   
249B   CD 88 09               CALL   printStr   
249E   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
24AC   CD 88 09               CALL   printStr   
24AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24BE   21 01 00               LD   HL,1   
24C1   CD D6 08               CALL   prtdec   
24C4   CD 88 09               CALL   printStr   
24C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24D4   E1                     POP   hl   
24D5   E5                     PUSH   hl   
24D6   CD D6 08               CALL   prtdec   
24D9   E1                     POP   hl   
24DA   CD 88 09               CALL   printStr   
24DD   20 28 23 00            .CSTR   " (#"   
24E1   CD 1E 09               CALL   prthex   
24E4   CD 88 09               CALL   printStr   
24E7   29 0D 0A 00            .CSTR   ")\r\n"   
24EB   76                     HALT      
24EC   00                     .CSTR      
24ED                EXPECTM_0_2192S43:      
24ED   E1                     POP   HL   
24EE                          ;*Macro unroll:  test "{{{1}:}:}:", 1
24EE   31 80 3C               LD   SP,STACK   
24F1   CD 8F 09               CALL   init   
24F4   CD 34 3B               CALL   execStr   
24F7   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
2502                          ;*Macro unroll:  expect "{{{1}:}:}:",1
2502   E1                     POP   HL   
2503   E5                     PUSH   HL   
2504   11 01 00               LD   DE,1   
2507   B7                     OR   A   
2508   ED 52                  SBC   HL,DE   
250A   7D                     LD   A,L   
250B   B4                     OR   H   
250C   28 55                  JR   Z,expectM_0_2193S43   
250E   CD 88 09               CALL   printStr   
2511   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
2522   CD 88 09               CALL   printStr   
2525   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2534   21 01 00               LD   HL,1   
2537   CD D6 08               CALL   prtdec   
253A   CD 88 09               CALL   printStr   
253D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
254A   E1                     POP   hl   
254B   E5                     PUSH   hl   
254C   CD D6 08               CALL   prtdec   
254F   E1                     POP   hl   
2550   CD 88 09               CALL   printStr   
2553   20 28 23 00            .CSTR   " (#"   
2557   CD 1E 09               CALL   prthex   
255A   CD 88 09               CALL   printStr   
255D   29 0D 0A 00            .CSTR   ")\r\n"   
2561   76                     HALT      
2562   00                     .CSTR      
2563                EXPECTM_0_2193S43:      
2563   E1                     POP   HL   
2564                          ;*Macro unroll:  test "5 \\F {10} ?", 5
2564   31 80 3C               LD   SP,STACK   
2567   CD 8F 09               CALL   init   
256A   CD 34 3B               CALL   execStr   
256D   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
2579                          ;*Macro unroll:  expect "5 \\F {10} ?",5
2579   E1                     POP   HL   
257A   E5                     PUSH   HL   
257B   11 05 00               LD   DE,5   
257E   B7                     OR   A   
257F   ED 52                  SBC   HL,DE   
2581   7D                     LD   A,L   
2582   B4                     OR   H   
2583   28 56                  JR   Z,expectM_0_2194S43   
2585   CD 88 09               CALL   printStr   
2588   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
259A   CD 88 09               CALL   printStr   
259D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25AC   21 05 00               LD   HL,5   
25AF   CD D6 08               CALL   prtdec   
25B2   CD 88 09               CALL   printStr   
25B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25C2   E1                     POP   hl   
25C3   E5                     PUSH   hl   
25C4   CD D6 08               CALL   prtdec   
25C7   E1                     POP   hl   
25C8   CD 88 09               CALL   printStr   
25CB   20 28 23 00            .CSTR   " (#"   
25CF   CD 1E 09               CALL   prthex   
25D2   CD 88 09               CALL   printStr   
25D5   29 0D 0A 00            .CSTR   ")\r\n"   
25D9   76                     HALT      
25DA   00                     .CSTR      
25DB                EXPECTM_0_2194S43:      
25DB   E1                     POP   HL   
25DC                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
25DC   31 80 3C               LD   SP,STACK   
25DF   CD 8F 09               CALL   init   
25E2   CD 34 3B               CALL   execStr   
25E5   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
25F3                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
25F3   E1                     POP   HL   
25F4   E5                     PUSH   HL   
25F5   11 0F 00               LD   DE,15   
25F8   B7                     OR   A   
25F9   ED 52                  SBC   HL,DE   
25FB   7D                     LD   A,L   
25FC   B4                     OR   H   
25FD   28 58                  JR   Z,expectM_0_2195S43   
25FF   CD 88 09               CALL   printStr   
2602   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
2616   CD 88 09               CALL   printStr   
2619   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2628   21 0F 00               LD   HL,15   
262B   CD D6 08               CALL   prtdec   
262E   CD 88 09               CALL   printStr   
2631   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
263E   E1                     POP   hl   
263F   E5                     PUSH   hl   
2640   CD D6 08               CALL   prtdec   
2643   E1                     POP   hl   
2644   CD 88 09               CALL   printStr   
2647   20 28 23 00            .CSTR   " (#"   
264B   CD 1E 09               CALL   prthex   
264E   CD 88 09               CALL   printStr   
2651   29 0D 0A 00            .CSTR   ")\r\n"   
2655   76                     HALT      
2656   00                     .CSTR      
2657                EXPECTM_0_2195S43:      
2657   E1                     POP   HL   
2658                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
2658   31 80 3C               LD   SP,STACK   
265B   CD 8F 09               CALL   init   
265E   CD 34 3B               CALL   execStr   
2661   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
2675                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
2675   E1                     POP   HL   
2676   E5                     PUSH   HL   
2677   11 15 00               LD   DE,21   
267A   B7                     OR   A   
267B   ED 52                  SBC   HL,DE   
267D   7D                     LD   A,L   
267E   B4                     OR   H   
267F   28 5E                  JR   Z,expectM_0_2196S43   
2681   CD 88 09               CALL   printStr   
2684   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
269E   CD 88 09               CALL   printStr   
26A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26B0   21 15 00               LD   HL,21   
26B3   CD D6 08               CALL   prtdec   
26B6   CD 88 09               CALL   printStr   
26B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26C6   E1                     POP   hl   
26C7   E5                     PUSH   hl   
26C8   CD D6 08               CALL   prtdec   
26CB   E1                     POP   hl   
26CC   CD 88 09               CALL   printStr   
26CF   20 28 23 00            .CSTR   " (#"   
26D3   CD 1E 09               CALL   prthex   
26D6   CD 88 09               CALL   printStr   
26D9   29 0D 0A 00            .CSTR   ")\r\n"   
26DD   76                     HALT      
26DE   00                     .CSTR      
26DF                EXPECTM_0_2196S43:      
26DF   E1                     POP   HL   
26E0                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
26E0   31 80 3C               LD   SP,STACK   
26E3   CD 8F 09               CALL   init   
26E6   CD 34 3B               CALL   execStr   
26E9   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
26FD                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
26FD   E1                     POP   HL   
26FE   E5                     PUSH   HL   
26FF   11 0B 00               LD   DE,11   
2702   B7                     OR   A   
2703   ED 52                  SBC   HL,DE   
2705   7D                     LD   A,L   
2706   B4                     OR   H   
2707   28 5E                  JR   Z,expectM_0_2197S43   
2709   CD 88 09               CALL   printStr   
270C   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
2726   CD 88 09               CALL   printStr   
2729   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2738   21 0B 00               LD   HL,11   
273B   CD D6 08               CALL   prtdec   
273E   CD 88 09               CALL   printStr   
2741   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
274E   E1                     POP   hl   
274F   E5                     PUSH   hl   
2750   CD D6 08               CALL   prtdec   
2753   E1                     POP   hl   
2754   CD 88 09               CALL   printStr   
2757   20 28 23 00            .CSTR   " (#"   
275B   CD 1E 09               CALL   prthex   
275E   CD 88 09               CALL   printStr   
2761   29 0D 0A 00            .CSTR   ")\r\n"   
2765   76                     HALT      
2766   00                     .CSTR      
2767                EXPECTM_0_2197S43:      
2767   E1                     POP   HL   
2768                          ;*Macro unroll:  test "() -2%", $0000
2768   31 80 3C               LD   SP,STACK   
276B   CD 8F 09               CALL   init   
276E   CD 34 3B               CALL   execStr   
2771   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
2778                          ;*Macro unroll:  expect "() -2%",$0000
2778   E1                     POP   HL   
2779   E5                     PUSH   HL   
277A   11 00 00               LD   DE,$0000   
277D   B7                     OR   A   
277E   ED 52                  SBC   HL,DE   
2780   7D                     LD   A,L   
2781   B4                     OR   H   
2782   28 51                  JR   Z,expectM_0_2198S43   
2784   CD 88 09               CALL   printStr   
2787   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
2794   CD 88 09               CALL   printStr   
2797   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27A6   21 00 00               LD   HL,$0000   
27A9   CD D6 08               CALL   prtdec   
27AC   CD 88 09               CALL   printStr   
27AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27BC   E1                     POP   hl   
27BD   E5                     PUSH   hl   
27BE   CD D6 08               CALL   prtdec   
27C1   E1                     POP   hl   
27C2   CD 88 09               CALL   printStr   
27C5   20 28 23 00            .CSTR   " (#"   
27C9   CD 1E 09               CALL   prthex   
27CC   CD 88 09               CALL   printStr   
27CF   29 0D 0A 00            .CSTR   ")\r\n"   
27D3   76                     HALT      
27D4   00                     .CSTR      
27D5                EXPECTM_0_2198S43:      
27D5   E1                     POP   HL   
27D6                          ;*Macro unroll:  test "(a) -1%", $0001
27D6   31 80 3C               LD   SP,STACK   
27D9   CD 8F 09               CALL   init   
27DC   CD 34 3B               CALL   execStr   
27DF   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
27E7                          ;*Macro unroll:  expect "(a) -1%",$0001
27E7   E1                     POP   HL   
27E8   E5                     PUSH   HL   
27E9   11 01 00               LD   DE,$0001   
27EC   B7                     OR   A   
27ED   ED 52                  SBC   HL,DE   
27EF   7D                     LD   A,L   
27F0   B4                     OR   H   
27F1   28 52                  JR   Z,expectM_0_2199S43   
27F3   CD 88 09               CALL   printStr   
27F6   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
2804   CD 88 09               CALL   printStr   
2807   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2816   21 01 00               LD   HL,$0001   
2819   CD D6 08               CALL   prtdec   
281C   CD 88 09               CALL   printStr   
281F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
282C   E1                     POP   hl   
282D   E5                     PUSH   hl   
282E   CD D6 08               CALL   prtdec   
2831   E1                     POP   hl   
2832   CD 88 09               CALL   printStr   
2835   20 28 23 00            .CSTR   " (#"   
2839   CD 1E 09               CALL   prthex   
283C   CD 88 09               CALL   printStr   
283F   29 0D 0A 00            .CSTR   ")\r\n"   
2843   76                     HALT      
2844   00                     .CSTR      
2845                EXPECTM_0_2199S43:      
2845   E1                     POP   HL   
2846                          ;*Macro unroll:  test "(a:) -1%", $0001
2846   31 80 3C               LD   SP,STACK   
2849   CD 8F 09               CALL   init   
284C   CD 34 3B               CALL   execStr   
284F   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
2858                          ;*Macro unroll:  expect "(a:) -1%",$0001
2858   E1                     POP   HL   
2859   E5                     PUSH   HL   
285A   11 01 00               LD   DE,$0001   
285D   B7                     OR   A   
285E   ED 52                  SBC   HL,DE   
2860   7D                     LD   A,L   
2861   B4                     OR   H   
2862   28 53                  JR   Z,expectM_0_2200S43   
2864   CD 88 09               CALL   printStr   
2867   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
2876   CD 88 09               CALL   printStr   
2879   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2888   21 01 00               LD   HL,$0001   
288B   CD D6 08               CALL   prtdec   
288E   CD 88 09               CALL   printStr   
2891   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
289E   E1                     POP   hl   
289F   E5                     PUSH   hl   
28A0   CD D6 08               CALL   prtdec   
28A3   E1                     POP   hl   
28A4   CD 88 09               CALL   printStr   
28A7   20 28 23 00            .CSTR   " (#"   
28AB   CD 1E 09               CALL   prthex   
28AE   CD 88 09               CALL   printStr   
28B1   29 0D 0A 00            .CSTR   ")\r\n"   
28B5   76                     HALT      
28B6   00                     .CSTR      
28B7                EXPECTM_0_2200S43:      
28B7   E1                     POP   HL   
28B8                          ;*Macro unroll:  test "(a:b) -1%", $0102
28B8   31 80 3C               LD   SP,STACK   
28BB   CD 8F 09               CALL   init   
28BE   CD 34 3B               CALL   execStr   
28C1   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
28CB                          ;*Macro unroll:  expect "(a:b) -1%",$0102
28CB   E1                     POP   HL   
28CC   E5                     PUSH   HL   
28CD   11 02 01               LD   DE,$0102   
28D0   B7                     OR   A   
28D1   ED 52                  SBC   HL,DE   
28D3   7D                     LD   A,L   
28D4   B4                     OR   H   
28D5   28 54                  JR   Z,expectM_0_2201S43   
28D7   CD 88 09               CALL   printStr   
28DA   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
28EA   CD 88 09               CALL   printStr   
28ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28FC   21 02 01               LD   HL,$0102   
28FF   CD D6 08               CALL   prtdec   
2902   CD 88 09               CALL   printStr   
2905   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2912   E1                     POP   hl   
2913   E5                     PUSH   hl   
2914   CD D6 08               CALL   prtdec   
2917   E1                     POP   hl   
2918   CD 88 09               CALL   printStr   
291B   20 28 23 00            .CSTR   " (#"   
291F   CD 1E 09               CALL   prthex   
2922   CD 88 09               CALL   printStr   
2925   29 0D 0A 00            .CSTR   ")\r\n"   
2929   76                     HALT      
292A   00                     .CSTR      
292B                EXPECTM_0_2201S43:      
292B   E1                     POP   HL   
292C                          ;*Macro unroll:  test "(:b) -1%", $0101
292C   31 80 3C               LD   SP,STACK   
292F   CD 8F 09               CALL   init   
2932   CD 34 3B               CALL   execStr   
2935   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
293E                          ;*Macro unroll:  expect "(:b) -1%",$0101
293E   E1                     POP   HL   
293F   E5                     PUSH   HL   
2940   11 01 01               LD   DE,$0101   
2943   B7                     OR   A   
2944   ED 52                  SBC   HL,DE   
2946   7D                     LD   A,L   
2947   B4                     OR   H   
2948   28 53                  JR   Z,expectM_0_2202S43   
294A   CD 88 09               CALL   printStr   
294D   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
295C   CD 88 09               CALL   printStr   
295F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
296E   21 01 01               LD   HL,$0101   
2971   CD D6 08               CALL   prtdec   
2974   CD 88 09               CALL   printStr   
2977   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2984   E1                     POP   hl   
2985   E5                     PUSH   hl   
2986   CD D6 08               CALL   prtdec   
2989   E1                     POP   hl   
298A   CD 88 09               CALL   printStr   
298D   20 28 23 00            .CSTR   " (#"   
2991   CD 1E 09               CALL   prthex   
2994   CD 88 09               CALL   printStr   
2997   29 0D 0A 00            .CSTR   ")\r\n"   
299B   76                     HALT      
299C   00                     .CSTR      
299D                EXPECTM_0_2202S43:      
299D   E1                     POP   HL   
299E                          ;*Macro unroll:  test "() {2} \\f:", 2
299E   31 80 3C               LD   SP,STACK   
29A1   CD 8F 09               CALL   init   
29A4   CD 34 3B               CALL   execStr   
29A7   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
29B2                          ;*Macro unroll:  expect "() {2} \\f:",2
29B2   E1                     POP   HL   
29B3   E5                     PUSH   HL   
29B4   11 02 00               LD   DE,2   
29B7   B7                     OR   A   
29B8   ED 52                  SBC   HL,DE   
29BA   7D                     LD   A,L   
29BB   B4                     OR   H   
29BC   28 55                  JR   Z,expectM_0_2203S43   
29BE   CD 88 09               CALL   printStr   
29C1   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
29D2   CD 88 09               CALL   printStr   
29D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29E4   21 02 00               LD   HL,2   
29E7   CD D6 08               CALL   prtdec   
29EA   CD 88 09               CALL   printStr   
29ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29FA   E1                     POP   hl   
29FB   E5                     PUSH   hl   
29FC   CD D6 08               CALL   prtdec   
29FF   E1                     POP   hl   
2A00   CD 88 09               CALL   printStr   
2A03   20 28 23 00            .CSTR   " (#"   
2A07   CD 1E 09               CALL   prthex   
2A0A   CD 88 09               CALL   printStr   
2A0D   29 0D 0A 00            .CSTR   ")\r\n"   
2A11   76                     HALT      
2A12   00                     .CSTR      
2A13                EXPECTM_0_2203S43:      
2A13   E1                     POP   HL   
2A14                          ;*Macro unroll:  test "(a) {2} \\f:", 2
2A14   31 80 3C               LD   SP,STACK   
2A17   CD 8F 09               CALL   init   
2A1A   CD 34 3B               CALL   execStr   
2A1D   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
2A29                          ;*Macro unroll:  expect "(a) {2} \\f:",2
2A29   E1                     POP   HL   
2A2A   E5                     PUSH   HL   
2A2B   11 02 00               LD   DE,2   
2A2E   B7                     OR   A   
2A2F   ED 52                  SBC   HL,DE   
2A31   7D                     LD   A,L   
2A32   B4                     OR   H   
2A33   28 56                  JR   Z,expectM_0_2204S43   
2A35   CD 88 09               CALL   printStr   
2A38   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
2A4A   CD 88 09               CALL   printStr   
2A4D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A5C   21 02 00               LD   HL,2   
2A5F   CD D6 08               CALL   prtdec   
2A62   CD 88 09               CALL   printStr   
2A65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A72   E1                     POP   hl   
2A73   E5                     PUSH   hl   
2A74   CD D6 08               CALL   prtdec   
2A77   E1                     POP   hl   
2A78   CD 88 09               CALL   printStr   
2A7B   20 28 23 00            .CSTR   " (#"   
2A7F   CD 1E 09               CALL   prthex   
2A82   CD 88 09               CALL   printStr   
2A85   29 0D 0A 00            .CSTR   ")\r\n"   
2A89   76                     HALT      
2A8A   00                     .CSTR      
2A8B                EXPECTM_0_2204S43:      
2A8B   E1                     POP   HL   
2A8C                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
2A8C   31 80 3C               LD   SP,STACK   
2A8F   CD 8F 09               CALL   init   
2A92   CD 34 3B               CALL   execStr   
2A95   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
2AA4                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
2AA4   E1                     POP   HL   
2AA5   E5                     PUSH   HL   
2AA6   11 05 00               LD   DE,5   
2AA9   B7                     OR   A   
2AAA   ED 52                  SBC   HL,DE   
2AAC   7D                     LD   A,L   
2AAD   B4                     OR   H   
2AAE   28 59                  JR   Z,expectM_0_2205S43   
2AB0   CD 88 09               CALL   printStr   
2AB3   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
2AC8   CD 88 09               CALL   printStr   
2ACB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ADA   21 05 00               LD   HL,5   
2ADD   CD D6 08               CALL   prtdec   
2AE0   CD 88 09               CALL   printStr   
2AE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AF0   E1                     POP   hl   
2AF1   E5                     PUSH   hl   
2AF2   CD D6 08               CALL   prtdec   
2AF5   E1                     POP   hl   
2AF6   CD 88 09               CALL   printStr   
2AF9   20 28 23 00            .CSTR   " (#"   
2AFD   CD 1E 09               CALL   prthex   
2B00   CD 88 09               CALL   printStr   
2B03   29 0D 0A 00            .CSTR   ")\r\n"   
2B07   76                     HALT      
2B08   00                     .CSTR      
2B09                EXPECTM_0_2205S43:      
2B09   E1                     POP   HL   
2B0A                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
2B0A   31 80 3C               LD   SP,STACK   
2B0D   CD 8F 09               CALL   init   
2B10   CD 34 3B               CALL   execStr   
2B13   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
2B24                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
2B24   E1                     POP   HL   
2B25   E5                     PUSH   HL   
2B26   11 05 00               LD   DE,5   
2B29   B7                     OR   A   
2B2A   ED 52                  SBC   HL,DE   
2B2C   7D                     LD   A,L   
2B2D   B4                     OR   H   
2B2E   28 5B                  JR   Z,expectM_0_2206S43   
2B30   CD 88 09               CALL   printStr   
2B33   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
2B4A   CD 88 09               CALL   printStr   
2B4D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B5C   21 05 00               LD   HL,5   
2B5F   CD D6 08               CALL   prtdec   
2B62   CD 88 09               CALL   printStr   
2B65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B72   E1                     POP   hl   
2B73   E5                     PUSH   hl   
2B74   CD D6 08               CALL   prtdec   
2B77   E1                     POP   hl   
2B78   CD 88 09               CALL   printStr   
2B7B   20 28 23 00            .CSTR   " (#"   
2B7F   CD 1E 09               CALL   prthex   
2B82   CD 88 09               CALL   printStr   
2B85   29 0D 0A 00            .CSTR   ")\r\n"   
2B89   76                     HALT      
2B8A   00                     .CSTR      
2B8B                EXPECTM_0_2206S43:      
2B8B   E1                     POP   HL   
2B8C                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
2B8C   31 80 3C               LD   SP,STACK   
2B8F   CD 8F 09               CALL   init   
2B92   CD 34 3B               CALL   execStr   
2B95   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
2BA4                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
2BA4   E1                     POP   HL   
2BA5   E5                     PUSH   HL   
2BA6   11 02 00               LD   DE,2   
2BA9   B7                     OR   A   
2BAA   ED 52                  SBC   HL,DE   
2BAC   7D                     LD   A,L   
2BAD   B4                     OR   H   
2BAE   28 59                  JR   Z,expectM_0_2207S43   
2BB0   CD 88 09               CALL   printStr   
2BB3   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
2BC8   CD 88 09               CALL   printStr   
2BCB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BDA   21 02 00               LD   HL,2   
2BDD   CD D6 08               CALL   prtdec   
2BE0   CD 88 09               CALL   printStr   
2BE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BF0   E1                     POP   hl   
2BF1   E5                     PUSH   hl   
2BF2   CD D6 08               CALL   prtdec   
2BF5   E1                     POP   hl   
2BF6   CD 88 09               CALL   printStr   
2BF9   20 28 23 00            .CSTR   " (#"   
2BFD   CD 1E 09               CALL   prthex   
2C00   CD 88 09               CALL   printStr   
2C03   29 0D 0A 00            .CSTR   ")\r\n"   
2C07   76                     HALT      
2C08   00                     .CSTR      
2C09                EXPECTM_0_2207S43:      
2C09   E1                     POP   HL   
2C0A                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
2C0A   31 80 3C               LD   SP,STACK   
2C0D   CD 8F 09               CALL   init   
2C10   CD 34 3B               CALL   execStr   
2C13   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
2C27                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
2C27   E1                     POP   HL   
2C28   E5                     PUSH   HL   
2C29   11 05 00               LD   DE,5   
2C2C   B7                     OR   A   
2C2D   ED 52                  SBC   HL,DE   
2C2F   7D                     LD   A,L   
2C30   B4                     OR   H   
2C31   28 5E                  JR   Z,expectM_0_2208S43   
2C33   CD 88 09               CALL   printStr   
2C36   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
2C50   CD 88 09               CALL   printStr   
2C53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C62   21 05 00               LD   HL,5   
2C65   CD D6 08               CALL   prtdec   
2C68   CD 88 09               CALL   printStr   
2C6B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C78   E1                     POP   hl   
2C79   E5                     PUSH   hl   
2C7A   CD D6 08               CALL   prtdec   
2C7D   E1                     POP   hl   
2C7E   CD 88 09               CALL   printStr   
2C81   20 28 23 00            .CSTR   " (#"   
2C85   CD 1E 09               CALL   prthex   
2C88   CD 88 09               CALL   printStr   
2C8B   29 0D 0A 00            .CSTR   ")\r\n"   
2C8F   76                     HALT      
2C90   00                     .CSTR      
2C91                EXPECTM_0_2208S43:      
2C91   E1                     POP   HL   
2C92                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
2C92   31 80 3C               LD   SP,STACK   
2C95   CD 8F 09               CALL   init   
2C98   CD 34 3B               CALL   execStr   
2C9B   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
2CB0                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
2CB0   E1                     POP   HL   
2CB1   E5                     PUSH   HL   
2CB2   11 01 00               LD   DE,1   
2CB5   B7                     OR   A   
2CB6   ED 52                  SBC   HL,DE   
2CB8   7D                     LD   A,L   
2CB9   B4                     OR   H   
2CBA   28 5F                  JR   Z,expectM_0_2209S43   
2CBC   CD 88 09               CALL   printStr   
2CBF   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
2CDA   CD 88 09               CALL   printStr   
2CDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CEC   21 01 00               LD   HL,1   
2CEF   CD D6 08               CALL   prtdec   
2CF2   CD 88 09               CALL   printStr   
2CF5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D02   E1                     POP   hl   
2D03   E5                     PUSH   hl   
2D04   CD D6 08               CALL   prtdec   
2D07   E1                     POP   hl   
2D08   CD 88 09               CALL   printStr   
2D0B   20 28 23 00            .CSTR   " (#"   
2D0F   CD 1E 09               CALL   prthex   
2D12   CD 88 09               CALL   printStr   
2D15   29 0D 0A 00            .CSTR   ")\r\n"   
2D19   76                     HALT      
2D1A   00                     .CSTR      
2D1B                EXPECTM_0_2209S43:      
2D1B   E1                     POP   HL   
2D1C                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
2D1C   31 80 3C               LD   SP,STACK   
2D1F   CD 8F 09               CALL   init   
2D22   CD 34 3B               CALL   execStr   
2D25   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
2D3D                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
2D3D   E1                     POP   HL   
2D3E   E5                     PUSH   HL   
2D3F   11 07 00               LD   DE,7   
2D42   B7                     OR   A   
2D43   ED 52                  SBC   HL,DE   
2D45   7D                     LD   A,L   
2D46   B4                     OR   H   
2D47   28 62                  JR   Z,expectM_0_2210S43   
2D49   CD 88 09               CALL   printStr   
2D4C   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
2D6A   CD 88 09               CALL   printStr   
2D6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D7C   21 07 00               LD   HL,7   
2D7F   CD D6 08               CALL   prtdec   
2D82   CD 88 09               CALL   printStr   
2D85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D92   E1                     POP   hl   
2D93   E5                     PUSH   hl   
2D94   CD D6 08               CALL   prtdec   
2D97   E1                     POP   hl   
2D98   CD 88 09               CALL   printStr   
2D9B   20 28 23 00            .CSTR   " (#"   
2D9F   CD 1E 09               CALL   prthex   
2DA2   CD 88 09               CALL   printStr   
2DA5   29 0D 0A 00            .CSTR   ")\r\n"   
2DA9   76                     HALT      
2DAA   00                     .CSTR      
2DAB                EXPECTM_0_2210S43:      
2DAB   E1                     POP   HL   
2DAC                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
2DAC   31 80 3C               LD   SP,STACK   
2DAF   CD 8F 09               CALL   init   
2DB2   CD 34 3B               CALL   execStr   
2DB5   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
2DCF                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
2DCF   E1                     POP   HL   
2DD0   E5                     PUSH   HL   
2DD1   11 06 00               LD   DE,6   
2DD4   B7                     OR   A   
2DD5   ED 52                  SBC   HL,DE   
2DD7   7D                     LD   A,L   
2DD8   B4                     OR   H   
2DD9   28 64                  JR   Z,expectM_0_2211S43   
2DDB   CD 88 09               CALL   printStr   
2DDE   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
2DFE   CD 88 09               CALL   printStr   
2E01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E10   21 06 00               LD   HL,6   
2E13   CD D6 08               CALL   prtdec   
2E16   CD 88 09               CALL   printStr   
2E19   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E26   E1                     POP   hl   
2E27   E5                     PUSH   hl   
2E28   CD D6 08               CALL   prtdec   
2E2B   E1                     POP   hl   
2E2C   CD 88 09               CALL   printStr   
2E2F   20 28 23 00            .CSTR   " (#"   
2E33   CD 1E 09               CALL   prthex   
2E36   CD 88 09               CALL   printStr   
2E39   29 0D 0A 00            .CSTR   ")\r\n"   
2E3D   76                     HALT      
2E3E   00                     .CSTR      
2E3F                EXPECTM_0_2211S43:      
2E3F   E1                     POP   HL   
2E40                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
2E40   31 80 3C               LD   SP,STACK   
2E43   CD 8F 09               CALL   init   
2E46   CD 34 3B               CALL   execStr   
2E49   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
2E5C                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
2E5C   E1                     POP   HL   
2E5D   E5                     PUSH   HL   
2E5E   11 02 00               LD   DE,2   
2E61   B7                     OR   A   
2E62   ED 52                  SBC   HL,DE   
2E64   7D                     LD   A,L   
2E65   B4                     OR   H   
2E66   28 5D                  JR   Z,expectM_0_2212S43   
2E68   CD 88 09               CALL   printStr   
2E6B   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
2E84   CD 88 09               CALL   printStr   
2E87   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E96   21 02 00               LD   HL,2   
2E99   CD D6 08               CALL   prtdec   
2E9C   CD 88 09               CALL   printStr   
2E9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EAC   E1                     POP   hl   
2EAD   E5                     PUSH   hl   
2EAE   CD D6 08               CALL   prtdec   
2EB1   E1                     POP   hl   
2EB2   CD 88 09               CALL   printStr   
2EB5   20 28 23 00            .CSTR   " (#"   
2EB9   CD 1E 09               CALL   prthex   
2EBC   CD 88 09               CALL   printStr   
2EBF   29 0D 0A 00            .CSTR   ")\r\n"   
2EC3   76                     HALT      
2EC4   00                     .CSTR      
2EC5                EXPECTM_0_2212S43:      
2EC5   E1                     POP   HL   
2EC6                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
2EC6   31 80 3C               LD   SP,STACK   
2EC9   CD 8F 09               CALL   init   
2ECC   CD 34 3B               CALL   execStr   
2ECF   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
2EE5                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
2EE5   E1                     POP   HL   
2EE6   E5                     PUSH   HL   
2EE7   11 01 00               LD   DE,1   
2EEA   B7                     OR   A   
2EEB   ED 52                  SBC   HL,DE   
2EED   7D                     LD   A,L   
2EEE   B4                     OR   H   
2EEF   28 60                  JR   Z,expectM_0_2213S43   
2EF1   CD 88 09               CALL   printStr   
2EF4   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
2F10   CD 88 09               CALL   printStr   
2F13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F22   21 01 00               LD   HL,1   
2F25   CD D6 08               CALL   prtdec   
2F28   CD 88 09               CALL   printStr   
2F2B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F38   E1                     POP   hl   
2F39   E5                     PUSH   hl   
2F3A   CD D6 08               CALL   prtdec   
2F3D   E1                     POP   hl   
2F3E   CD 88 09               CALL   printStr   
2F41   20 28 23 00            .CSTR   " (#"   
2F45   CD 1E 09               CALL   prthex   
2F48   CD 88 09               CALL   printStr   
2F4B   29 0D 0A 00            .CSTR   ")\r\n"   
2F4F   76                     HALT      
2F50   00                     .CSTR      
2F51                EXPECTM_0_2213S43:      
2F51   E1                     POP   HL   
2F52                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
2F52   31 80 3C               LD   SP,STACK   
2F55   CD 8F 09               CALL   init   
2F58   CD 34 3B               CALL   execStr   
2F5B   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2F72                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2F72   E1                     POP   HL   
2F73   E5                     PUSH   HL   
2F74   11 02 00               LD   DE,2   
2F77   B7                     OR   A   
2F78   ED 52                  SBC   HL,DE   
2F7A   7D                     LD   A,L   
2F7B   B4                     OR   H   
2F7C   28 61                  JR   Z,expectM_0_2214S43   
2F7E   CD 88 09               CALL   printStr   
2F81   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2F9E   CD 88 09               CALL   printStr   
2FA1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FB0   21 02 00               LD   HL,2   
2FB3   CD D6 08               CALL   prtdec   
2FB6   CD 88 09               CALL   printStr   
2FB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FC6   E1                     POP   hl   
2FC7   E5                     PUSH   hl   
2FC8   CD D6 08               CALL   prtdec   
2FCB   E1                     POP   hl   
2FCC   CD 88 09               CALL   printStr   
2FCF   20 28 23 00            .CSTR   " (#"   
2FD3   CD 1E 09               CALL   prthex   
2FD6   CD 88 09               CALL   printStr   
2FD9   29 0D 0A 00            .CSTR   ")\r\n"   
2FDD   76                     HALT      
2FDE   00                     .CSTR      
2FDF                EXPECTM_0_2214S43:      
2FDF   E1                     POP   HL   
2FE0                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
2FE0   31 80 3C               LD   SP,STACK   
2FE3   CD 8F 09               CALL   init   
2FE6   CD 34 3B               CALL   execStr   
2FE9   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
3001                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
3001   E1                     POP   HL   
3002   E5                     PUSH   HL   
3003   11 02 00               LD   DE,2   
3006   B7                     OR   A   
3007   ED 52                  SBC   HL,DE   
3009   7D                     LD   A,L   
300A   B4                     OR   H   
300B   28 62                  JR   Z,expectM_0_2215S43   
300D   CD 88 09               CALL   printStr   
3010   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
302E   CD 88 09               CALL   printStr   
3031   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3040   21 02 00               LD   HL,2   
3043   CD D6 08               CALL   prtdec   
3046   CD 88 09               CALL   printStr   
3049   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3056   E1                     POP   hl   
3057   E5                     PUSH   hl   
3058   CD D6 08               CALL   prtdec   
305B   E1                     POP   hl   
305C   CD 88 09               CALL   printStr   
305F   20 28 23 00            .CSTR   " (#"   
3063   CD 1E 09               CALL   prthex   
3066   CD 88 09               CALL   printStr   
3069   29 0D 0A 00            .CSTR   ")\r\n"   
306D   76                     HALT      
306E   00                     .CSTR      
306F                EXPECTM_0_2215S43:      
306F   E1                     POP   HL   
3070                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
3070   31 80 3C               LD   SP,STACK   
3073   CD 8F 09               CALL   init   
3076   CD 34 3B               CALL   execStr   
3079   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
3090                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
3090   E1                     POP   HL   
3091   E5                     PUSH   HL   
3092   11 02 00               LD   DE,2   
3095   B7                     OR   A   
3096   ED 52                  SBC   HL,DE   
3098   7D                     LD   A,L   
3099   B4                     OR   H   
309A   28 61                  JR   Z,expectM_0_2216S43   
309C   CD 88 09               CALL   printStr   
309F   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
30BC   CD 88 09               CALL   printStr   
30BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30CE   21 02 00               LD   HL,2   
30D1   CD D6 08               CALL   prtdec   
30D4   CD 88 09               CALL   printStr   
30D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30E4   E1                     POP   hl   
30E5   E5                     PUSH   hl   
30E6   CD D6 08               CALL   prtdec   
30E9   E1                     POP   hl   
30EA   CD 88 09               CALL   printStr   
30ED   20 28 23 00            .CSTR   " (#"   
30F1   CD 1E 09               CALL   prthex   
30F4   CD 88 09               CALL   printStr   
30F7   29 0D 0A 00            .CSTR   ")\r\n"   
30FB   76                     HALT      
30FC   00                     .CSTR      
30FD                EXPECTM_0_2216S43:      
30FD   E1                     POP   HL   
30FE                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
30FE   31 80 3C               LD   SP,STACK   
3101   CD 8F 09               CALL   init   
3104   CD 34 3B               CALL   execStr   
3107   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
3125                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
3125   E1                     POP   HL   
3126   E5                     PUSH   HL   
3127   11 05 00               LD   DE,5   
312A   B7                     OR   A   
312B   ED 52                  SBC   HL,DE   
312D   7D                     LD   A,L   
312E   B4                     OR   H   
312F   28 68                  JR   Z,expectM_0_2217S43   
3131   CD 88 09               CALL   printStr   
3134   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
3158   CD 88 09               CALL   printStr   
315B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
316A   21 05 00               LD   HL,5   
316D   CD D6 08               CALL   prtdec   
3170   CD 88 09               CALL   printStr   
3173   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3180   E1                     POP   hl   
3181   E5                     PUSH   hl   
3182   CD D6 08               CALL   prtdec   
3185   E1                     POP   hl   
3186   CD 88 09               CALL   printStr   
3189   20 28 23 00            .CSTR   " (#"   
318D   CD 1E 09               CALL   prthex   
3190   CD 88 09               CALL   printStr   
3193   29 0D 0A 00            .CSTR   ")\r\n"   
3197   76                     HALT      
3198   00                     .CSTR      
3199                EXPECTM_0_2217S43:      
3199   E1                     POP   HL   
319A                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
319A   31 80 3C               LD   SP,STACK   
319D   CD 8F 09               CALL   init   
31A0   CD 34 3B               CALL   execStr   
31A3   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
31B8                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
31B8   E1                     POP   HL   
31B9   E5                     PUSH   HL   
31BA   11 02 00               LD   DE,2   
31BD   B7                     OR   A   
31BE   ED 52                  SBC   HL,DE   
31C0   7D                     LD   A,L   
31C1   B4                     OR   H   
31C2   28 5F                  JR   Z,expectM_0_2218S43   
31C4   CD 88 09               CALL   printStr   
31C7   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
31E2   CD 88 09               CALL   printStr   
31E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31F4   21 02 00               LD   HL,2   
31F7   CD D6 08               CALL   prtdec   
31FA   CD 88 09               CALL   printStr   
31FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
320A   E1                     POP   hl   
320B   E5                     PUSH   hl   
320C   CD D6 08               CALL   prtdec   
320F   E1                     POP   hl   
3210   CD 88 09               CALL   printStr   
3213   20 28 23 00            .CSTR   " (#"   
3217   CD 1E 09               CALL   prthex   
321A   CD 88 09               CALL   printStr   
321D   29 0D 0A 00            .CSTR   ")\r\n"   
3221   76                     HALT      
3222   00                     .CSTR      
3223                EXPECTM_0_2218S43:      
3223   E1                     POP   HL   
3224                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
3224   31 80 3C               LD   SP,STACK   
3227   CD 8F 09               CALL   init   
322A   CD 34 3B               CALL   execStr   
322D   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
3248                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
3248   E1                     POP   HL   
3249   E5                     PUSH   HL   
324A   11 64 00               LD   DE,100   
324D   B7                     OR   A   
324E   ED 52                  SBC   HL,DE   
3250   7D                     LD   A,L   
3251   B4                     OR   H   
3252   28 65                  JR   Z,expectM_0_2219S43   
3254   CD 88 09               CALL   printStr   
3257   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
3278   CD 88 09               CALL   printStr   
327B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
328A   21 64 00               LD   HL,100   
328D   CD D6 08               CALL   prtdec   
3290   CD 88 09               CALL   printStr   
3293   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32A0   E1                     POP   hl   
32A1   E5                     PUSH   hl   
32A2   CD D6 08               CALL   prtdec   
32A5   E1                     POP   hl   
32A6   CD 88 09               CALL   printStr   
32A9   20 28 23 00            .CSTR   " (#"   
32AD   CD 1E 09               CALL   prthex   
32B0   CD 88 09               CALL   printStr   
32B3   29 0D 0A 00            .CSTR   ")\r\n"   
32B7   76                     HALT      
32B8   00                     .CSTR      
32B9                EXPECTM_0_2219S43:      
32B9   E1                     POP   HL   
32BA                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
32BA   31 80 3C               LD   SP,STACK   
32BD   CD 8F 09               CALL   init   
32C0   CD 34 3B               CALL   execStr   
32C3   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
32DF                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
32DF   E1                     POP   HL   
32E0   E5                     PUSH   HL   
32E1   11 01 00               LD   DE,1   
32E4   B7                     OR   A   
32E5   ED 52                  SBC   HL,DE   
32E7   7D                     LD   A,L   
32E8   B4                     OR   H   
32E9   28 66                  JR   Z,expectM_0_2220S43   
32EB   CD 88 09               CALL   printStr   
32EE   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
3310   CD 88 09               CALL   printStr   
3313   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3322   21 01 00               LD   HL,1   
3325   CD D6 08               CALL   prtdec   
3328   CD 88 09               CALL   printStr   
332B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3338   E1                     POP   hl   
3339   E5                     PUSH   hl   
333A   CD D6 08               CALL   prtdec   
333D   E1                     POP   hl   
333E   CD 88 09               CALL   printStr   
3341   20 28 23 00            .CSTR   " (#"   
3345   CD 1E 09               CALL   prthex   
3348   CD 88 09               CALL   printStr   
334B   29 0D 0A 00            .CSTR   ")\r\n"   
334F   76                     HALT      
3350   00                     .CSTR      
3351                EXPECTM_0_2220S43:      
3351   E1                     POP   HL   
3352                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
3352   31 80 3C               LD   SP,STACK   
3355   CD 8F 09               CALL   init   
3358   CD 34 3B               CALL   execStr   
335B   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
3378                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
3378   E1                     POP   HL   
3379   E5                     PUSH   HL   
337A   11 02 00               LD   DE,2   
337D   B7                     OR   A   
337E   ED 52                  SBC   HL,DE   
3380   7D                     LD   A,L   
3381   B4                     OR   H   
3382   28 67                  JR   Z,expectM_0_2221S43   
3384   CD 88 09               CALL   printStr   
3387   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
33AA   CD 88 09               CALL   printStr   
33AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33BC   21 02 00               LD   HL,2   
33BF   CD D6 08               CALL   prtdec   
33C2   CD 88 09               CALL   printStr   
33C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33D2   E1                     POP   hl   
33D3   E5                     PUSH   hl   
33D4   CD D6 08               CALL   prtdec   
33D7   E1                     POP   hl   
33D8   CD 88 09               CALL   printStr   
33DB   20 28 23 00            .CSTR   " (#"   
33DF   CD 1E 09               CALL   prthex   
33E2   CD 88 09               CALL   printStr   
33E5   29 0D 0A 00            .CSTR   ")\r\n"   
33E9   76                     HALT      
33EA   00                     .CSTR      
33EB                EXPECTM_0_2221S43:      
33EB   E1                     POP   HL   
33EC                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
33EC   31 80 3C               LD   SP,STACK   
33EF   CD 8F 09               CALL   init   
33F2   CD 34 3B               CALL   execStr   
33F5   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
341A                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
341A   E1                     POP   HL   
341B   E5                     PUSH   HL   
341C   11 0B 00               LD   DE,11   
341F   B7                     OR   A   
3420   ED 52                  SBC   HL,DE   
3422   7D                     LD   A,L   
3423   B4                     OR   H   
3424   28 6F                  JR   Z,expectM_0_2222S43   
3426   CD 88 09               CALL   printStr   
3429   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
3454   CD 88 09               CALL   printStr   
3457   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3466   21 0B 00               LD   HL,11   
3469   CD D6 08               CALL   prtdec   
346C   CD 88 09               CALL   printStr   
346F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
347C   E1                     POP   hl   
347D   E5                     PUSH   hl   
347E   CD D6 08               CALL   prtdec   
3481   E1                     POP   hl   
3482   CD 88 09               CALL   printStr   
3485   20 28 23 00            .CSTR   " (#"   
3489   CD 1E 09               CALL   prthex   
348C   CD 88 09               CALL   printStr   
348F   29 0D 0A 00            .CSTR   ")\r\n"   
3493   76                     HALT      
3494   00                     .CSTR      
3495                EXPECTM_0_2222S43:      
3495   E1                     POP   HL   
3496                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
3496   31 80 3C               LD   SP,STACK   
3499   CD 8F 09               CALL   init   
349C   CD 34 3B               CALL   execStr   
349F   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
34C4                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
34C4   E1                     POP   HL   
34C5   E5                     PUSH   HL   
34C6   11 15 00               LD   DE,21   
34C9   B7                     OR   A   
34CA   ED 52                  SBC   HL,DE   
34CC   7D                     LD   A,L   
34CD   B4                     OR   H   
34CE   28 6F                  JR   Z,expectM_0_2223S43   
34D0   CD 88 09               CALL   printStr   
34D3   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
34FE   CD 88 09               CALL   printStr   
3501   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3510   21 15 00               LD   HL,21   
3513   CD D6 08               CALL   prtdec   
3516   CD 88 09               CALL   printStr   
3519   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3526   E1                     POP   hl   
3527   E5                     PUSH   hl   
3528   CD D6 08               CALL   prtdec   
352B   E1                     POP   hl   
352C   CD 88 09               CALL   printStr   
352F   20 28 23 00            .CSTR   " (#"   
3533   CD 1E 09               CALL   prthex   
3536   CD 88 09               CALL   printStr   
3539   29 0D 0A 00            .CSTR   ")\r\n"   
353D   76                     HALT      
353E   00                     .CSTR      
353F                EXPECTM_0_2223S43:      
353F   E1                     POP   HL   
3540                          ;*Macro unroll:  test "[10 20 30] 1%", 20
3540   31 80 3C               LD   SP,STACK   
3543   CD 8F 09               CALL   init   
3546   CD 34 3B               CALL   execStr   
3549   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3557                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3557   E1                     POP   HL   
3558   E5                     PUSH   HL   
3559   11 14 00               LD   DE,20   
355C   B7                     OR   A   
355D   ED 52                  SBC   HL,DE   
355F   7D                     LD   A,L   
3560   B4                     OR   H   
3561   28 58                  JR   Z,expectM_0_2224S43   
3563   CD 88 09               CALL   printStr   
3566   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
357A   CD 88 09               CALL   printStr   
357D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
358C   21 14 00               LD   HL,20   
358F   CD D6 08               CALL   prtdec   
3592   CD 88 09               CALL   printStr   
3595   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35A2   E1                     POP   hl   
35A3   E5                     PUSH   hl   
35A4   CD D6 08               CALL   prtdec   
35A7   E1                     POP   hl   
35A8   CD 88 09               CALL   printStr   
35AB   20 28 23 00            .CSTR   " (#"   
35AF   CD 1E 09               CALL   prthex   
35B2   CD 88 09               CALL   printStr   
35B5   29 0D 0A 00            .CSTR   ")\r\n"   
35B9   76                     HALT      
35BA   00                     .CSTR      
35BB                EXPECTM_0_2224S43:      
35BB   E1                     POP   HL   
35BC                          ;*Macro unroll:  test "\\b [1 2 3] 1%", 2
35BC   31 80 3C               LD   SP,STACK   
35BF   CD 8F 09               CALL   init   
35C2   CD 34 3B               CALL   execStr   
35C5   5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "\\b [1 2 3] 1%"   
35D3                          ;*Macro unroll:  expect "\\b [1 2 3] 1%",2
35D3   E1                     POP   HL   
35D4   E5                     PUSH   HL   
35D5   11 02 00               LD   DE,2   
35D8   B7                     OR   A   
35D9   ED 52                  SBC   HL,DE   
35DB   7D                     LD   A,L   
35DC   B4                     OR   H   
35DD   28 58                  JR   Z,expectM_0_2225S43   
35DF   CD 88 09               CALL   printStr   
35E2   43 6F 64 65 3A 20 5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","\\b [1 2 3] 1%"   
35F6   CD 88 09               CALL   printStr   
35F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3608   21 02 00               LD   HL,2   
360B   CD D6 08               CALL   prtdec   
360E   CD 88 09               CALL   printStr   
3611   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
361E   E1                     POP   hl   
361F   E5                     PUSH   hl   
3620   CD D6 08               CALL   prtdec   
3623   E1                     POP   hl   
3624   CD 88 09               CALL   printStr   
3627   20 28 23 00            .CSTR   " (#"   
362B   CD 1E 09               CALL   prthex   
362E   CD 88 09               CALL   printStr   
3631   29 0D 0A 00            .CSTR   ")\r\n"   
3635   76                     HALT      
3636   00                     .CSTR      
3637                EXPECTM_0_2225S43:      
3637   E1                     POP   HL   
3638                          ;*Macro unroll:  test "\\b ['A' 'B' 'C'] 1%", 66
3638   31 80 3C               LD   SP,STACK   
363B   CD 8F 09               CALL   init   
363E   CD 34 3B               CALL   execStr   
3641   5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "\\b ['A' 'B' 'C'] 1%"   
3655                          ;*Macro unroll:  expect "\\b ['A' 'B' 'C'] 1%",66
3655   E1                     POP   HL   
3656   E5                     PUSH   HL   
3657   11 42 00               LD   DE,66   
365A   B7                     OR   A   
365B   ED 52                  SBC   HL,DE   
365D   7D                     LD   A,L   
365E   B4                     OR   H   
365F   28 5E                  JR   Z,expectM_0_2226S43   
3661   CD 88 09               CALL   printStr   
3664   43 6F 64 65 3A 20 5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","\\b ['A' 'B' 'C'] 1%"   
367E   CD 88 09               CALL   printStr   
3681   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3690   21 42 00               LD   HL,66   
3693   CD D6 08               CALL   prtdec   
3696   CD 88 09               CALL   printStr   
3699   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36A6   E1                     POP   hl   
36A7   E5                     PUSH   hl   
36A8   CD D6 08               CALL   prtdec   
36AB   E1                     POP   hl   
36AC   CD 88 09               CALL   printStr   
36AF   20 28 23 00            .CSTR   " (#"   
36B3   CD 1E 09               CALL   prthex   
36B6   CD 88 09               CALL   printStr   
36B9   29 0D 0A 00            .CSTR   ")\r\n"   
36BD   76                     HALT      
36BE   00                     .CSTR      
36BF                EXPECTM_0_2226S43:      
36BF   E1                     POP   HL   
36C0                          ;*Macro unroll:  test "0 [{10} {20} {30}] \\s", 10
36C0   31 80 3C               LD   SP,STACK   
36C3   CD 8F 09               CALL   init   
36C6   CD 34 3B               CALL   execStr   
36C9   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "0 [{10} {20} {30}] \\s"   
36DF                          ;*Macro unroll:  expect "0 [{10} {20} {30}] \\s",10
36DF   E1                     POP   HL   
36E0   E5                     PUSH   HL   
36E1   11 0A 00               LD   DE,10   
36E4   B7                     OR   A   
36E5   ED 52                  SBC   HL,DE   
36E7   7D                     LD   A,L   
36E8   B4                     OR   H   
36E9   28 60                  JR   Z,expectM_0_2227S43   
36EB   CD 88 09               CALL   printStr   
36EE   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] \\s"   
370A   CD 88 09               CALL   printStr   
370D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
371C   21 0A 00               LD   HL,10   
371F   CD D6 08               CALL   prtdec   
3722   CD 88 09               CALL   printStr   
3725   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3732   E1                     POP   hl   
3733   E5                     PUSH   hl   
3734   CD D6 08               CALL   prtdec   
3737   E1                     POP   hl   
3738   CD 88 09               CALL   printStr   
373B   20 28 23 00            .CSTR   " (#"   
373F   CD 1E 09               CALL   prthex   
3742   CD 88 09               CALL   printStr   
3745   29 0D 0A 00            .CSTR   ")\r\n"   
3749   76                     HALT      
374A   00                     .CSTR      
374B                EXPECTM_0_2227S43:      
374B   E1                     POP   HL   
374C                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:", 10
374C   31 80 3C               LD   SP,STACK   
374F   CD 8F 09               CALL   init   
3752   CD 34 3B               CALL   execStr   
3755   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
3779                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:",10
3779   E1                     POP   HL   
377A   E5                     PUSH   HL   
377B   11 0A 00               LD   DE,10   
377E   B7                     OR   A   
377F   ED 52                  SBC   HL,DE   
3781   7D                     LD   A,L   
3782   B4                     OR   H   
3783   28 6E                  JR   Z,expectM_0_2228S43   
3785   CD 88 09               CALL   printStr   
3788   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
37B2   CD 88 09               CALL   printStr   
37B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37C4   21 0A 00               LD   HL,10   
37C7   CD D6 08               CALL   prtdec   
37CA   CD 88 09               CALL   printStr   
37CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37DA   E1                     POP   hl   
37DB   E5                     PUSH   hl   
37DC   CD D6 08               CALL   prtdec   
37DF   E1                     POP   hl   
37E0   CD 88 09               CALL   printStr   
37E3   20 28 23 00            .CSTR   " (#"   
37E7   CD 1E 09               CALL   prthex   
37EA   CD 88 09               CALL   printStr   
37ED   29 0D 0A 00            .CSTR   ")\r\n"   
37F1   76                     HALT      
37F2   00                     .CSTR      
37F3                EXPECTM_0_2228S43:      
37F3   E1                     POP   HL   
37F4                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 10
37F4   31 80 3C               LD   SP,STACK   
37F7   CD 8F 09               CALL   init   
37FA   CD 34 3B               CALL   execStr   
37FD   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
3823                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",10
3823   E1                     POP   HL   
3824   E5                     PUSH   HL   
3825   11 0A 00               LD   DE,10   
3828   B7                     OR   A   
3829   ED 52                  SBC   HL,DE   
382B   7D                     LD   A,L   
382C   B4                     OR   H   
382D   28 70                  JR   Z,expectM_0_2229S43   
382F   CD 88 09               CALL   printStr   
3832   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
385E   CD 88 09               CALL   printStr   
3861   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3870   21 0A 00               LD   HL,10   
3873   CD D6 08               CALL   prtdec   
3876   CD 88 09               CALL   printStr   
3879   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3886   E1                     POP   hl   
3887   E5                     PUSH   hl   
3888   CD D6 08               CALL   prtdec   
388B   E1                     POP   hl   
388C   CD 88 09               CALL   printStr   
388F   20 28 23 00            .CSTR   " (#"   
3893   CD 1E 09               CALL   prthex   
3896   CD 88 09               CALL   printStr   
3899   29 0D 0A 00            .CSTR   ")\r\n"   
389D   76                     HALT      
389E   00                     .CSTR      
389F                EXPECTM_0_2229S43:      
389F   E1                     POP   HL   
38A0                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 20
38A0   31 80 3C               LD   SP,STACK   
38A3   CD 8F 09               CALL   init   
38A6   CD 34 3B               CALL   execStr   
38A9   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
38CF                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",20
38CF   E1                     POP   HL   
38D0   E5                     PUSH   HL   
38D1   11 14 00               LD   DE,20   
38D4   B7                     OR   A   
38D5   ED 52                  SBC   HL,DE   
38D7   7D                     LD   A,L   
38D8   B4                     OR   H   
38D9   28 70                  JR   Z,expectM_0_2230S43   
38DB   CD 88 09               CALL   printStr   
38DE   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
390A   CD 88 09               CALL   printStr   
390D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
391C   21 14 00               LD   HL,20   
391F   CD D6 08               CALL   prtdec   
3922   CD 88 09               CALL   printStr   
3925   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3932   E1                     POP   hl   
3933   E5                     PUSH   hl   
3934   CD D6 08               CALL   prtdec   
3937   E1                     POP   hl   
3938   CD 88 09               CALL   printStr   
393B   20 28 23 00            .CSTR   " (#"   
393F   CD 1E 09               CALL   prthex   
3942   CD 88 09               CALL   printStr   
3945   29 0D 0A 00            .CSTR   ")\r\n"   
3949   76                     HALT      
394A   00                     .CSTR      
394B                EXPECTM_0_2230S43:      
394B   E1                     POP   HL   
394C                          ;*Macro unroll:  test "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j ", 10
394C   31 80 3C               LD   SP,STACK   
394F   CD 8F 09               CALL   init   
3952   CD 34 3B               CALL   execStr   
3955   30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 5C 78 20 69 20 31 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j "   
397D                          ;*Macro unroll:  expect "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j ",10
397D   E1                     POP   HL   
397E   E5                     PUSH   HL   
397F   11 0A 00               LD   DE,10   
3982   B7                     OR   A   
3983   ED 52                  SBC   HL,DE   
3985   7D                     LD   A,L   
3986   B4                     OR   H   
3987   28 72                  JR   Z,expectM_0_2231S43   
3989   CD 88 09               CALL   printStr   
398C   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 5C 78 20 69 20 31 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j "   
39BA   CD 88 09               CALL   printStr   
39BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39CC   21 0A 00               LD   HL,10   
39CF   CD D6 08               CALL   prtdec   
39D2   CD 88 09               CALL   printStr   
39D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39E2   E1                     POP   hl   
39E3   E5                     PUSH   hl   
39E4   CD D6 08               CALL   prtdec   
39E7   E1                     POP   hl   
39E8   CD 88 09               CALL   printStr   
39EB   20 28 23 00            .CSTR   " (#"   
39EF   CD 1E 09               CALL   prthex   
39F2   CD 88 09               CALL   printStr   
39F5   29 0D 0A 00            .CSTR   ")\r\n"   
39F9   76                     HALT      
39FA   00                     .CSTR      
39FB                EXPECTM_0_2231S43:      
39FB   E1                     POP   HL   
39FC                          ;*Macro unroll:  test "5 [4] (a) {$a} \\f \\c :", 4
39FC   31 80 3C               LD   SP,STACK   
39FF   CD 8F 09               CALL   init   
3A02   CD 34 3B               CALL   execStr   
3A05   35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "5 [4] (a) {$a} \\f \\c :"   
3A1C                          ;*Macro unroll:  expect "5 [4] (a) {$a} \\f \\c :",4
3A1C   E1                     POP   HL   
3A1D   E5                     PUSH   HL   
3A1E   11 04 00               LD   DE,4   
3A21   B7                     OR   A   
3A22   ED 52                  SBC   HL,DE   
3A24   7D                     LD   A,L   
3A25   B4                     OR   H   
3A26   28 61                  JR   Z,expectM_0_2232S43   
3A28   CD 88 09               CALL   printStr   
3A2B   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "Code: ","5 [4] (a) {$a} \\f \\c :"   
3A48   CD 88 09               CALL   printStr   
3A4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A5A   21 04 00               LD   HL,4   
3A5D   CD D6 08               CALL   prtdec   
3A60   CD 88 09               CALL   printStr   
3A63   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A70   E1                     POP   hl   
3A71   E5                     PUSH   hl   
3A72   CD D6 08               CALL   prtdec   
3A75   E1                     POP   hl   
3A76   CD 88 09               CALL   printStr   
3A79   20 28 23 00            .CSTR   " (#"   
3A7D   CD 1E 09               CALL   prthex   
3A80   CD 88 09               CALL   printStr   
3A83   29 0D 0A 00            .CSTR   ")\r\n"   
3A87   76                     HALT      
3A88   00                     .CSTR      
3A89                EXPECTM_0_2232S43:      
3A89   E1                     POP   HL   
3A8A                          ;*Macro unroll:  test "5 [4] (ab) {$a $b +} \\f \\c :", 9
3A8A   31 80 3C               LD   SP,STACK   
3A8D   CD 8F 09               CALL   init   
3A90   CD 34 3B               CALL   execStr   
3A93   35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "5 [4] (ab) {$a $b +} \\f \\c :"   
3AB0                          ;*Macro unroll:  expect "5 [4] (ab) {$a $b +} \\f \\c :",9
3AB0   E1                     POP   HL   
3AB1   E5                     PUSH   HL   
3AB2   11 09 00               LD   DE,9   
3AB5   B7                     OR   A   
3AB6   ED 52                  SBC   HL,DE   
3AB8   7D                     LD   A,L   
3AB9   B4                     OR   H   
3ABA   28 67                  JR   Z,expectM_0_2233S43   
3ABC   CD 88 09               CALL   printStr   
3ABF   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 5C 66 20 5C 63 20 3A 00 .CSTR   "Code: ","5 [4] (ab) {$a $b +} \\f \\c :"   
3AE2   CD 88 09               CALL   printStr   
3AE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AF4   21 09 00               LD   HL,9   
3AF7   CD D6 08               CALL   prtdec   
3AFA   CD 88 09               CALL   printStr   
3AFD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B0A   E1                     POP   hl   
3B0B   E5                     PUSH   hl   
3B0C   CD D6 08               CALL   prtdec   
3B0F   E1                     POP   hl   
3B10   CD 88 09               CALL   printStr   
3B13   20 28 23 00            .CSTR   " (#"   
3B17   CD 1E 09               CALL   prthex   
3B1A   CD 88 09               CALL   printStr   
3B1D   29 0D 0A 00            .CSTR   ")\r\n"   
3B21   76                     HALT      
3B22   00                     .CSTR      
3B23                EXPECTM_0_2233S43:      
3B23   E1                     POP   HL   
3B24                             ; 
3B24                             ; 
3B24                             ; 
3B24                             ; 
3B24                             ; 
3B24                             ; 
3B24                             ; 
3B24   CD 88 09               CALL   printStr   
3B27   44 6F 6E 65 21 00      .CSTR   "Done!"   
3B2D   76                     HALT      
3B2E                          ALIGN   2   
3B2E                PRINTER:      
3B2E   E1                     POP   hl   
3B2F   CD D6 08               CALL   prtdec   
3B32   DD E9                  JP   (ix)   
3B34                             ; executes a null teminated string (null executes exit_)
3B34                             ; the string should be immedaitely following the call
3B34                EXECSTR:      ; create a root stack frame
3B34   C1                     POP   bc   ; bc = code*
3B35   0B                     DEC   bc   ; dec to prepare for next routine
3B36   11 00 00               LD   de,0   
3B39   D5                     PUSH   de   ; push fake IP
3B3A   D5                     PUSH   de   ; push null arg_list*
3B3B   D5                     PUSH   de   ; push null first_arg*
3B3C   D5                     PUSH   de   ; push fake BP
3B3D   DD E9                  JP   (ix)   
3B3F                          ALIGN   $100   
3C00                             ; .org RAMSTART
3C00                          DS   DSIZE   
3C80                STACK:       
3C80                          ALIGN   $100   
3D00                VARS:        
3D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
3DD0                RESTARTS:      
3DD0                RST08:    DS   2   
3DD2                RST10:    DS   2   
3DD4                RST18:    DS   2   
3DD6                RST20:    DS   2   
3DD8                RST28:    DS   2   
3DDA                RST30:    DS   2   ; 
3DDC                BAUD:     DS   2   ; 
3DDE                INTVEC:   DS   2   ; 
3DE0                NMIVEC:   DS   2   ; 
3DE2                GETCVEC:   DS   2   ; 
3DE4                PUTCVEC:   DS   2   ; 
3DE6                SYSVARS:      
3DE6                             ; initialised sys variables
3DE6                VDATAWIDTH:   DS   2   ; 
3DE8                VTIBPTR:   DS   2   ; 
3DEA                VNEXT:    DS   2   ; 
3DEC                VHEAPPTR:   DS   2   ; 
3DEE                             ; uninitialised sys variables
3DEE                VBLOCKEND:   DS   2   ; 
3DF0                VPOINTER:   DS   2   ; 
3DF2                VHASHSTR:   DS   2   ; 
3DF4                VLASTDEF:   DS   2   ; 
3DF6                VREMAIN:   DS   2   ; 
3DF8                VTEMP1:   DS   2   ; 
3DFA                VTEMP2:   DS   2   ; 
3DFC                TBPTR:    DS   2   ; reserved for tests
3DFE                          ALIGN   $100   
3E00                TIB:      DS   TIBSIZE   
3F00                          ALIGN   $100   
3F00                PAD:      DS   $100   
4000                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08D4 DEFINED AT LINE 1369 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1329 IN monty.asm
                    > USED AT LINE 1570 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 743 IN monty.asm
                    > USED AT LINE 750 IN monty.asm
                    > USED AT LINE 1380 IN monty.asm
                    > USED AT LINE 1421 IN monty.asm
                    > USED AT LINE 1445 IN monty.asm
                    > USED AT LINE 1448 IN monty.asm
                    > USED AT LINE 1601 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 801 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 806 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1637 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1103 IN monty.asm
                    > USED AT LINE 1467 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1525 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0303 DEFINED AT LINE 217 IN monty.asm
AND_:               0306 DEFINED AT LINE 219 IN monty.asm
ARG_:               0309 DEFINED AT LINE 221 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 223 IN monty.asm
ARRBEGIN_:          030F DEFINED AT LINE 225 IN monty.asm
ARREND_:            0312 DEFINED AT LINE 227 IN monty.asm
ARRINDEX_:          0315 DEFINED AT LINE 229 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 231 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 233 IN monty.asm
CHAR_:              031E DEFINED AT LINE 235 IN monty.asm
COMMAND_:           0321 DEFINED AT LINE 237 IN monty.asm
DISCARD_:           0324 DEFINED AT LINE 239 IN monty.asm
DOT_:               0327 DEFINED AT LINE 242 IN monty.asm
REMAIN_:            032A DEFINED AT LINE 244 IN monty.asm
GO_:                032D DEFINED AT LINE 246 IN monty.asm
IDENTU_:            0330 DEFINED AT LINE 248 IN monty.asm
IDENTL_:            0333 DEFINED AT LINE 250 IN monty.asm
IF_:                0336 DEFINED AT LINE 252 IN monty.asm
INV_:               0339 DEFINED AT LINE 254 IN monty.asm
MUL_:               033F DEFINED AT LINE 257 IN monty.asm
NOT_:               0342 DEFINED AT LINE 259 IN monty.asm
NUM_:               0347 DEFINED AT LINE 262 IN monty.asm
                    > USED AT LINE 1130 IN monty.asm
HEXNUM_:            034A DEFINED AT LINE 264 IN monty.asm
OR_:                034D DEFINED AT LINE 266 IN monty.asm
XOR_:               0350 DEFINED AT LINE 268 IN monty.asm
STRING_:            0353 DEFINED AT LINE 270 IN monty.asm
SUB_:               0356 DEFINED AT LINE 272 IN monty.asm
EQ_:                0359 DEFINED AT LINE 274 IN monty.asm
EQ0:                0363 DEFINED AT LINE 281 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
EQ1:                0364 DEFINED AT LINE 283 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
GT_:                0368 DEFINED AT LINE 287 IN monty.asm
LT_:                0373 DEFINED AT LINE 296 IN monty.asm
LT1:                037C DEFINED AT LINE 303 IN monty.asm
                    > USED AT LINE 294 IN monty.asm
DIV_:               0385 DEFINED AT LINE 309 IN monty.asm
NOP_:               0388 DEFINED AT LINE 311 IN monty.asm
ADD:                038A DEFINED AT LINE 318 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               0395 DEFINED AT LINE 326 IN monty.asm
                    > USED AT LINE 322 IN monty.asm
ADD3:               0399 DEFINED AT LINE 331 IN monty.asm
                    > USED AT LINE 357 IN monty.asm
                    > USED AT LINE 724 IN monty.asm
                    > USED AT LINE 1007 IN monty.asm
                    > USED AT LINE 1144 IN monty.asm
ADDR:               03A4 DEFINED AT LINE 341 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AND:                03B0 DEFINED AT LINE 347 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03B7 DEFINED AT LINE 355 IN monty.asm
                    > USED AT LINE 367 IN monty.asm
                    > USED AT LINE 377 IN monty.asm
OR:                 03BB DEFINED AT LINE 359 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
XOR:                03C4 DEFINED AT LINE 368 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
XOR1:               03C5 DEFINED AT LINE 370 IN monty.asm
                    > USED AT LINE 256 IN monty.asm
ARG:                03CD DEFINED AT LINE 382 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03EB DEFINED AT LINE 403 IN monty.asm
                    > USED AT LINE 409 IN monty.asm
ARG0A:              03F4 DEFINED AT LINE 411 IN monty.asm
                    > USED AT LINE 388 IN monty.asm
                    > USED AT LINE 395 IN monty.asm
ARG1:               03F9 DEFINED AT LINE 414 IN monty.asm
                    > USED AT LINE 407 IN monty.asm
ARG1A:              0401 DEFINED AT LINE 421 IN monty.asm
                    > USED AT LINE 413 IN monty.asm
ARG_LIST:           0404 DEFINED AT LINE 430 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG_LIST1:          040E DEFINED AT LINE 437 IN monty.asm
                    > USED AT LINE 455 IN monty.asm
ARG_LIST2:          041A DEFINED AT LINE 445 IN monty.asm
                    > USED AT LINE 442 IN monty.asm
ARG_LIST3:          0422 DEFINED AT LINE 453 IN monty.asm
                    > USED AT LINE 444 IN monty.asm
                    > USED AT LINE 451 IN monty.asm
ARG_LIST4:          0425 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 440 IN monty.asm
ARG_LIST5:          042A DEFINED AT LINE 461 IN monty.asm
                    > USED AT LINE 459 IN monty.asm
ARRBEGIN:           0436 DEFINED AT LINE 472 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             0452 DEFINED AT LINE 486 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARREND1:            046C DEFINED AT LINE 502 IN monty.asm
                    > USED AT LINE 518 IN monty.asm
ARREND2:            047C DEFINED AT LINE 512 IN monty.asm
                    > USED AT LINE 508 IN monty.asm
ARRINDEX:           04A0 DEFINED AT LINE 539 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARRINDEX0:          04A8 DEFINED AT LINE 545 IN monty.asm
ARRINDEX1:          04A9 DEFINED AT LINE 547 IN monty.asm
                    > USED AT LINE 544 IN monty.asm
ARRINDEX2:          04B5 DEFINED AT LINE 556 IN monty.asm
                    > USED AT LINE 553 IN monty.asm
ASSIGN:             04B8 DEFINED AT LINE 561 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
ASSIGN0:            04BA DEFINED AT LINE 564 IN monty.asm
                    > USED AT LINE 325 IN monty.asm
                    > USED AT LINE 335 IN monty.asm
                    > USED AT LINE 1137 IN monty.asm
ASSIGNX:            04BB DEFINED AT LINE 566 IN monty.asm
ASSIGN1:            04C7 DEFINED AT LINE 574 IN monty.asm
                    > USED AT LINE 571 IN monty.asm
BLOCK:              04C9 DEFINED AT LINE 577 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK1:             04CD DEFINED AT LINE 581 IN monty.asm
                    > USED AT LINE 585 IN monty.asm
                    > USED AT LINE 607 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
                    > USED AT LINE 615 IN monty.asm
                    > USED AT LINE 619 IN monty.asm
BLOCK2:             04F9 DEFINED AT LINE 608 IN monty.asm
                    > USED AT LINE 595 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
BLOCK3:             04FC DEFINED AT LINE 611 IN monty.asm
                    > USED AT LINE 602 IN monty.asm
                    > USED AT LINE 604 IN monty.asm
                    > USED AT LINE 606 IN monty.asm
BLOCK4:             0504 DEFINED AT LINE 617 IN monty.asm
                    > USED AT LINE 588 IN monty.asm
                    > USED AT LINE 590 IN monty.asm
                    > USED AT LINE 592 IN monty.asm
BLOCK5:             0507 DEFINED AT LINE 620 IN monty.asm
                    > USED AT LINE 616 IN monty.asm
BLOCK6:             052F DEFINED AT LINE 639 IN monty.asm
                    > USED AT LINE 626 IN monty.asm
BLOCKEND:           0532 DEFINED AT LINE 643 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 1243 IN monty.asm
                    > USED AT LINE 1275 IN monty.asm
BLOCKEND1:          055E DEFINED AT LINE 665 IN monty.asm
                    > USED AT LINE 658 IN monty.asm
BLOCKEND2:          056A DEFINED AT LINE 672 IN monty.asm
                    > USED AT LINE 664 IN monty.asm
BLOCKEND3:          057C DEFINED AT LINE 686 IN monty.asm
                    > USED AT LINE 678 IN monty.asm
CHAR:               0587 DEFINED AT LINE 697 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR1:              058A DEFINED AT LINE 699 IN monty.asm
                    > USED AT LINE 710 IN monty.asm
CHAR2:              0596 DEFINED AT LINE 708 IN monty.asm
                    > USED AT LINE 705 IN monty.asm
CHAR3:              0599 DEFINED AT LINE 711 IN monty.asm
                    > USED AT LINE 703 IN monty.asm
DIV:                059C DEFINED AT LINE 715 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
DOT:                05AD DEFINED AT LINE 726 IN monty.asm
                    > USED AT LINE 243 IN monty.asm
DOT1:               05B9 DEFINED AT LINE 734 IN monty.asm
                    > USED AT LINE 731 IN monty.asm
DOT2:               05C2 DEFINED AT LINE 739 IN monty.asm
                    > USED AT LINE 736 IN monty.asm
DOT3:               05CC DEFINED AT LINE 745 IN monty.asm
                    > USED AT LINE 741 IN monty.asm
DOT4:               05D0 DEFINED AT LINE 748 IN monty.asm
                    > USED AT LINE 733 IN monty.asm
                    > USED AT LINE 738 IN monty.asm
                    > USED AT LINE 744 IN monty.asm
DIVIDE:             05D7 DEFINED AT LINE 756 IN monty.asm
                    > USED AT LINE 720 IN monty.asm
DIVIDE1:            05DC DEFINED AT LINE 759 IN monty.asm
                    > USED AT LINE 771 IN monty.asm
DIVIDE2:            05E9 DEFINED AT LINE 767 IN monty.asm
                    > USED AT LINE 764 IN monty.asm
DIVIDE3:            05EA DEFINED AT LINE 769 IN monty.asm
                    > USED AT LINE 766 IN monty.asm
EQUALS:             05F0 DEFINED AT LINE 777 IN monty.asm
                    > USED AT LINE 285 IN monty.asm
LESSTHANEQ:         05F8 DEFINED AT LINE 785 IN monty.asm
                    > USED AT LINE 305 IN monty.asm
LESSTHAN:           05FD DEFINED AT LINE 792 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
LESSTHAN1:          0602 DEFINED AT LINE 797 IN monty.asm
                    > USED AT LINE 788 IN monty.asm
TRUE1:              0605 DEFINED AT LINE 800 IN monty.asm
                    > USED AT LINE 780 IN monty.asm
                    > USED AT LINE 1175 IN monty.asm
NULL1:              060B DEFINED AT LINE 804 IN monty.asm
FALSE1:             060B DEFINED AT LINE 805 IN monty.asm
                    > USED AT LINE 781 IN monty.asm
                    > USED AT LINE 795 IN monty.asm
                    > USED AT LINE 798 IN monty.asm
                    > USED AT LINE 1163 IN monty.asm
GO:                 0611 DEFINED AT LINE 813 IN monty.asm
                    > USED AT LINE 247 IN monty.asm
                    > USED AT LINE 1285 IN monty.asm
GO1:                0612 DEFINED AT LINE 815 IN monty.asm
                    > USED AT LINE 984 IN monty.asm
                    > USED AT LINE 986 IN monty.asm
                    > USED AT LINE 1356 IN monty.asm
GO2:                0618 DEFINED AT LINE 820 IN monty.asm
                    > USED AT LINE 818 IN monty.asm
GOBLOCK:            061E DEFINED AT LINE 824 IN monty.asm
GOBLOCK1:           0643 DEFINED AT LINE 841 IN monty.asm
                    > USED AT LINE 923 IN monty.asm
GOFUNC:             0651 DEFINED AT LINE 850 IN monty.asm
                    > USED AT LINE 823 IN monty.asm
GOFUNC1:            066A DEFINED AT LINE 869 IN monty.asm
                    > USED AT LINE 879 IN monty.asm
GOFUNC2:            0670 DEFINED AT LINE 876 IN monty.asm
                    > USED AT LINE 868 IN monty.asm
GOFUNC3:            067B DEFINED AT LINE 882 IN monty.asm
                    > USED AT LINE 858 IN monty.asm
GOFUNC4:            0693 DEFINED AT LINE 899 IN monty.asm
                    > USED AT LINE 896 IN monty.asm
GOFUNC5:            0697 DEFINED AT LINE 903 IN monty.asm
                    > USED AT LINE 909 IN monty.asm
GOFUNC6:            069A DEFINED AT LINE 907 IN monty.asm
                    > USED AT LINE 902 IN monty.asm
GOFUNC7:            069D DEFINED AT LINE 910 IN monty.asm
GOFUNC8:            06A2 DEFINED AT LINE 916 IN monty.asm
                    > USED AT LINE 835 IN monty.asm
                    > USED AT LINE 898 IN monty.asm
HEXNUM:             06AD DEFINED AT LINE 925 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
HEXNUM1:            06B0 DEFINED AT LINE 927 IN monty.asm
                    > USED AT LINE 944 IN monty.asm
HEXNUM2:            06B8 DEFINED AT LINE 933 IN monty.asm
                    > USED AT LINE 931 IN monty.asm
IDENTU:             06CA DEFINED AT LINE 945 IN monty.asm
                    > USED AT LINE 249 IN monty.asm
IDENTL:             06CF DEFINED AT LINE 949 IN monty.asm
                    > USED AT LINE 251 IN monty.asm
IDENT1:             06D4 DEFINED AT LINE 953 IN monty.asm
                    > USED AT LINE 948 IN monty.asm
IF:                 06E1 DEFINED AT LINE 966 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
IFTE:               06ED DEFINED AT LINE 976 IN monty.asm
                    > USED AT LINE 970 IN monty.asm
IFTE1:              06EE DEFINED AT LINE 978 IN monty.asm
                    > USED AT LINE 973 IN monty.asm
MUL:                06FA DEFINED AT LINE 988 IN monty.asm
                    > USED AT LINE 258 IN monty.asm
MUL2:               06FC DEFINED AT LINE 991 IN monty.asm
MUL3:               0704 DEFINED AT LINE 996 IN monty.asm
                    > USED AT LINE 1005 IN monty.asm
NUM:                0716 DEFINED AT LINE 1009 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
NUM0:               071F DEFINED AT LINE 1015 IN monty.asm
                    > USED AT LINE 1013 IN monty.asm
NUM1:               0720 DEFINED AT LINE 1017 IN monty.asm
                    > USED AT LINE 1034 IN monty.asm
NUM2:               0738 DEFINED AT LINE 1035 IN monty.asm
                    > USED AT LINE 935 IN monty.asm
                    > USED AT LINE 937 IN monty.asm
                    > USED AT LINE 1020 IN monty.asm
                    > USED AT LINE 1022 IN monty.asm
NUM3:               0743 DEFINED AT LINE 1043 IN monty.asm
                    > USED AT LINE 1038 IN monty.asm
REMAIN:             0746 DEFINED AT LINE 1047 IN monty.asm
                    > USED AT LINE 245 IN monty.asm
SHIFTLEFT:          074C DEFINED AT LINE 1054 IN monty.asm
                    > USED AT LINE 300 IN monty.asm
SHIFTLEFT1:         0754 DEFINED AT LINE 1061 IN monty.asm
                    > USED AT LINE 1064 IN monty.asm
SHIFTLEFT2:         0755 DEFINED AT LINE 1063 IN monty.asm
                    > USED AT LINE 1060 IN monty.asm
SHIFTRIGHT:         075C DEFINED AT LINE 1071 IN monty.asm
                    > USED AT LINE 291 IN monty.asm
SHIFTRIGHT1:        0764 DEFINED AT LINE 1078 IN monty.asm
                    > USED AT LINE 1082 IN monty.asm
SHIFTRIGHT2:        0768 DEFINED AT LINE 1081 IN monty.asm
                    > USED AT LINE 1077 IN monty.asm
STRING:             076F DEFINED AT LINE 1090 IN monty.asm
                    > USED AT LINE 271 IN monty.asm
STRING1:            0778 DEFINED AT LINE 1097 IN monty.asm
                    > USED AT LINE 1104 IN monty.asm
                    > USED AT LINE 1106 IN monty.asm
STRING2:            077B DEFINED AT LINE 1101 IN monty.asm
                    > USED AT LINE 1096 IN monty.asm
SUB:                0797 DEFINED AT LINE 1123 IN monty.asm
                    > USED AT LINE 273 IN monty.asm
SUB0:               07A3 DEFINED AT LINE 1131 IN monty.asm
                    > USED AT LINE 1128 IN monty.asm
SUB1:               07AD DEFINED AT LINE 1138 IN monty.asm
                    > USED AT LINE 1134 IN monty.asm
COMMAND:            07B6 DEFINED AT LINE 1149 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
ABS1:               0809 DEFINED AT LINE 1186 IN monty.asm
                    > USED AT LINE 1155 IN monty.asm
CLOSURE:            0816 DEFINED AT LINE 1201 IN monty.asm
                    > USED AT LINE 1159 IN monty.asm
COMMENT:            0836 DEFINED AT LINE 1217 IN monty.asm
                    > USED AT LINE 1153 IN monty.asm
                    > USED AT LINE 1221 IN monty.asm
LOOPEND:            083F DEFINED AT LINE 1225 IN monty.asm
                    > USED AT LINE 1181 IN monty.asm
BREAK:              0863 DEFINED AT LINE 1245 IN monty.asm
                    > USED AT LINE 1179 IN monty.asm
BREAK1:             086A DEFINED AT LINE 1251 IN monty.asm
                    > USED AT LINE 1249 IN monty.asm
REPEAT:             087D DEFINED AT LINE 1279 IN monty.asm
                    > USED AT LINE 1171 IN monty.asm
BYTES:              0883 DEFINED AT LINE 1287 IN monty.asm
                    > USED AT LINE 1157 IN monty.asm
BYTES1:             0886 DEFINED AT LINE 1289 IN monty.asm
                    > USED AT LINE 1360 IN monty.asm
FUNC:               088B DEFINED AT LINE 1294 IN monty.asm
                    > USED AT LINE 1161 IN monty.asm
INPUT:              08A7 DEFINED AT LINE 1318 IN monty.asm
                    > USED AT LINE 1165 IN monty.asm
KEY:                08B2 DEFINED AT LINE 1328 IN monty.asm
                    > USED AT LINE 1167 IN monty.asm
OUTPUT:             08BB DEFINED AT LINE 1337 IN monty.asm
                    > USED AT LINE 1169 IN monty.asm
SELECT:             08C4 DEFINED AT LINE 1348 IN monty.asm
                    > USED AT LINE 1173 IN monty.asm
WORDS:              08CE DEFINED AT LINE 1358 IN monty.asm
                    > USED AT LINE 1177 IN monty.asm
FILTER:             08D4 DEFINED AT LINE 1367 IN monty.asm
MAP:                08D4 DEFINED AT LINE 1368 IN monty.asm
PRTDEC:             08D6 DEFINED AT LINE 1376 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
                    > USED AT LINE 1647 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 148
PRTDEC0:            08E5 DEFINED AT LINE 1387 IN monty.asm
                    > USED AT LINE 1378 IN monty.asm
PRTDEC1:            0907 DEFINED AT LINE 1403 IN monty.asm
                    > USED AT LINE 1391 IN monty.asm
                    > USED AT LINE 1393 IN monty.asm
                    > USED AT LINE 1395 IN monty.asm
                    > USED AT LINE 1397 IN monty.asm
                    > USED AT LINE 1400 IN monty.asm
PRTDEC2:            0909 DEFINED AT LINE 1405 IN monty.asm
                    > USED AT LINE 1408 IN monty.asm
PRTDEC3:            0919 DEFINED AT LINE 1417 IN monty.asm
                    > USED AT LINE 1412 IN monty.asm
PRTDEC4:            091A DEFINED AT LINE 1419 IN monty.asm
                    > USED AT LINE 1416 IN monty.asm
PRTHEX:             091E DEFINED AT LINE 1423 IN monty.asm
                    > USED AT LINE 732 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0929 DEFINED AT LINE 1431 IN monty.asm
                    > USED AT LINE 1426 IN monty.asm
                    > USED AT LINE 1428 IN monty.asm
PRTHEX3:            0932 DEFINED AT LINE 1439 IN monty.asm
                    > USED AT LINE 1437 IN monty.asm
PRTSTR0:            093D DEFINED AT LINE 1447 IN monty.asm
                    > USED AT LINE 1453 IN monty.asm
PRTSTR:             0941 DEFINED AT LINE 1450 IN monty.asm
                    > USED AT LINE 737 IN monty.asm
                    > USED AT LINE 1517 IN monty.asm
NESTING:            0946 DEFINED AT LINE 1466 IN monty.asm
                    > USED AT LINE 1561 IN monty.asm
                    > USED AT LINE 1602 IN monty.asm
NESTING0:           0950 DEFINED AT LINE 1472 IN monty.asm
                    > USED AT LINE 1468 IN monty.asm
                    > USED AT LINE 1470 IN monty.asm
NESTING1A:          0957 DEFINED AT LINE 1477 IN monty.asm
                    > USED AT LINE 1474 IN monty.asm
NESTING1:           095A DEFINED AT LINE 1480 IN monty.asm
                    > USED AT LINE 1471 IN monty.asm
NESTING2:           0969 DEFINED AT LINE 1489 IN monty.asm
                    > USED AT LINE 1484 IN monty.asm
                    > USED AT LINE 1486 IN monty.asm
NESTING3:           096B DEFINED AT LINE 1492 IN monty.asm
                    > USED AT LINE 1488 IN monty.asm
NESTING4:           0976 DEFINED AT LINE 1499 IN monty.asm
                    > USED AT LINE 1494 IN monty.asm
                    > USED AT LINE 1496 IN monty.asm
PROMPT:             0978 DEFINED AT LINE 1503 IN monty.asm
                    > USED AT LINE 1545 IN monty.asm
CRLF:               0981 DEFINED AT LINE 1508 IN monty.asm
                    > USED AT LINE 1614 IN monty.asm
PRINTSTR:           0988 DEFINED AT LINE 1515 IN monty.asm
                    > USED AT LINE 1504 IN monty.asm
                    > USED AT LINE 1509 IN monty.asm
                    > USED AT LINE 1541 IN monty.asm
                    > USED AT LINE 1645 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 141
INIT:               098F DEFINED AT LINE 1522 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1540 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              09A8 DEFINED AT LINE 1532 IN monty.asm
                    > USED AT LINE 1535 IN monty.asm
START:              09AD DEFINED AT LINE 1538 IN monty.asm
INTERPRET:          09C3 DEFINED AT LINE 1544 IN monty.asm
                    > USED AT LINE 1639 IN monty.asm
                    > USED AT LINE 1648 IN monty.asm
INTERPRET2:         09CD DEFINED AT LINE 1550 IN monty.asm
                    > USED AT LINE 1594 IN monty.asm
INTERPRET3:         09D5 DEFINED AT LINE 1557 IN monty.asm
                    > USED AT LINE 1566 IN monty.asm
INTERPRET4:         09DB DEFINED AT LINE 1563 IN monty.asm
                    > USED AT LINE 1555 IN monty.asm
INTERPRET5:         09E0 DEFINED AT LINE 1569 IN monty.asm
                    > USED AT LINE 1603 IN monty.asm
                    > USED AT LINE 1617 IN monty.asm
INTERPRET6:         09F1 DEFINED AT LINE 1596 IN monty.asm
                    > USED AT LINE 1572 IN monty.asm
INTERPRET7:         09FF DEFINED AT LINE 1605 IN monty.asm
                    > USED AT LINE 1577 IN monty.asm
INTERPRET8:         0A12 DEFINED AT LINE 1619 IN monty.asm
                    > USED AT LINE 1575 IN monty.asm
NEXT:               0A1A DEFINED AT LINE 1625 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1629 IN monty.asm
NEXT1:              0A29 DEFINED AT LINE 1636 IN monty.asm
                    > USED AT LINE 1630 IN monty.asm
EXIT_:              0A30 DEFINED AT LINE 1640 IN monty.asm
                    > USED AT LINE 1638 IN monty.asm
ERROR:              0A33 DEFINED AT LINE 1644 IN monty.asm
                    > USED AT LINE 1184 IN monty.asm
TESTSSTART:         0B00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2125S43:  0B9D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2134S43:  0C03 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2135S43:  0C69 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2136S43:  0CCD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2137S43:  0D31 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2138S43:  0D95 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2139S43:  0DF9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2140S43:  0E5F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2141S43:  0EC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2142S43:  0F2D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2143S43:  0F93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2144S43:  0FFB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2145S43:  1065 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2146S43:  10CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2147S43:  1135 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2148S43:  11A3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2149S43:  1211 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2150S43:  127D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2151S43:  12ED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2152S43:  1361 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2153S43:  13D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2154S43:  143F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2155S43:  14B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2156S43:  1531 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2157S43:  15A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2158S43:  160D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2159S43:  1679 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2160S43:  16EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2161S43:  176B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2162S43:  17D7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2163S43:  1853 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2164S43:  18BF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2165S43:  193B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2166S43:  19A7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2167S43:  1A23 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2168S43:  1A8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2169S43:  1B0B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2170S43:  1B7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2171S43:  1BEB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2172S43:  1C67 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2173S43:  1CD7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2174S43:  1D43 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2175S43:  1DB1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2176S43:  1E1F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2177S43:  1E8B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2178S43:  1EF7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2179S43:  1F63 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2180S43:  1FCF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2181S43:  203B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2182S43:  20A7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2183S43:  2113 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2184S43:  217F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2185S43:  21ED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2186S43:  225B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2187S43:  22C9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2188S43:  2339 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2189S43:  23A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2190S43:  2413 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2191S43:  247D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2192S43:  24ED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2193S43:  2563 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2194S43:  25DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2195S43:  2657 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2196S43:  26DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2197S43:  2767 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2198S43:  27D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2199S43:  2845 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2200S43:  28B7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2201S43:  292B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2202S43:  299D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2203S43:  2A13 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2204S43:  2A8B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2205S43:  2B09 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2206S43:  2B8B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2207S43:  2C09 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2208S43:  2C91 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2209S43:  2D1B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2210S43:  2DAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2211S43:  2E3F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2212S43:  2EC5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2213S43:  2F51 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2214S43:  2FDF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2215S43:  306F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2216S43:  30FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2217S43:  3199 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2218S43:  3223 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2219S43:  32B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2220S43:  3351 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2221S43:  33EB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2222S43:  3495 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2223S43:  353F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2224S43:  35BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2225S43:  3637 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2226S43:  36BF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2227S43:  374B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2228S43:  37F3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2229S43:  389F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2230S43:  394B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2231S43:  39FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2232S43:  3A89 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2233S43:  3B23 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3B2E DEFINED AT LINE 146
EXECSTR:            3B34 DEFINED AT LINE 153
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3C80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 826 IN monty.asm
                    > USED AT LINE 1524 IN monty.asm
                    > USED AT LINE 1539 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3D00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1529 IN monty.asm
RESTARTS:           3DD0 DEFINED AT LINE 11 IN ram.asm
RST08:              3DD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              3DD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              3DD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              3DD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              3DD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              3DDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               3DDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             3DDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             3DE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            3DE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            3DE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            3DE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1526 IN monty.asm
VDATAWIDTH:         3DE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 506 IN monty.asm
                    > USED AT LINE 542 IN monty.asm
                    > USED AT LINE 569 IN monty.asm
                    > USED AT LINE 1290 IN monty.asm
VTIBPTR:            3DE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1548 IN monty.asm
                    > USED AT LINE 1620 IN monty.asm
VNEXT:              3DEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1523 IN monty.asm
VHEAPPTR:           3DEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 432 IN monty.asm
                    > USED AT LINE 463 IN monty.asm
                    > USED AT LINE 496 IN monty.asm
                    > USED AT LINE 528 IN monty.asm
                    > USED AT LINE 529 IN monty.asm
                    > USED AT LINE 634 IN monty.asm
                    > USED AT LINE 637 IN monty.asm
                    > USED AT LINE 1091 IN monty.asm
                    > USED AT LINE 1110 IN monty.asm
                    > USED AT LINE 1203 IN monty.asm
                    > USED AT LINE 1208 IN monty.asm
                    > USED AT LINE 1209 IN monty.asm
                    > USED AT LINE 1296 IN monty.asm
                    > USED AT LINE 1311 IN monty.asm
                    > USED AT LINE 1313 IN monty.asm
VBLOCKEND:          3DEE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           3DF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 342 IN monty.asm
                    > USED AT LINE 344 IN monty.asm
                    > USED AT LINE 345 IN monty.asm
                    > USED AT LINE 417 IN monty.asm
                    > USED AT LINE 549 IN monty.asm
                    > USED AT LINE 567 IN monty.asm
                    > USED AT LINE 957 IN monty.asm
VHASHSTR:           3DF2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           3DF4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            3DF6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 722 IN monty.asm
                    > USED AT LINE 1048 IN monty.asm
VTEMP1:             3DF8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 489 IN monty.asm
                    > USED AT LINE 530 IN monty.asm
                    > USED AT LINE 629 IN monty.asm
                    > USED AT LINE 638 IN monty.asm
                    > USED AT LINE 825 IN monty.asm
                    > USED AT LINE 831 IN monty.asm
                    > USED AT LINE 859 IN monty.asm
                    > USED AT LINE 880 IN monty.asm
                    > USED AT LINE 887 IN monty.asm
                    > USED AT LINE 893 IN monty.asm
                    > USED AT LINE 1204 IN monty.asm
                    > USED AT LINE 1207 IN monty.asm
VTEMP2:             3DFA DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 860 IN monty.asm
                    > USED AT LINE 881 IN monty.asm
TBPTR:              3DFC DEFINED AT LINE 43 IN ram.asm
TIB:                3E00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1554 IN monty.asm
                    > USED AT LINE 1597 IN monty.asm
                    > USED AT LINE 1606 IN monty.asm
                    > USED AT LINE 1621 IN monty.asm
PAD:                3F00 DEFINED AT LINE 49 IN ram.asm
HEAP:               4000 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 622 IN monty.asm
